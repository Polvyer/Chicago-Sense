/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t={340:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var r=n(15),i=n.n(r),o=n(645),s=n.n(o),a=n(667),u=n.n(a),c=n(297),h=s()(i()),f=u()(c);h.push([t.id,".header {\n  height: 100vh; /* out of 100 */\n  background-image: linear-gradient(\n      to right,\n      rgba(67, 48, 133, 0.8),\n      rgba(58, 65, 62, 0.692)\n    ),\n    url("+f+');\n  background-size: cover; /* try to fit width of viewport or element */\n  background-position: top; /* top of img stays atop container */\n  position: relative;\n}\n\n.text-box {\n  position: absolute;\n  top: 50%; /* from parent element */\n  left: 50%; /* from parent element */\n  transform: translate(-50%, -50%); /* from itself (top-left corner entry) */\n  text-align: center;\n}\n\n.heading-primary {\n  color: #fff;\n  text-transform: uppercase;\n\n  backface-visibility: hidden; /* fixes shaking in animation */\n  margin-bottom: 30px;\n}\n\n.heading-primary-main {\n  display: block;\n  font-size: 50px;\n  font-weight: 800;\n  letter-spacing: 20px;\n  line-height: 1.3;\n\n  animation-name: moveInLeft;\n  animation-duration: 2s;\n  animation-timing-function: ease-out;\n}\n\n.heading-primary-sub {\n  display: block;\n  font-size: 15px;\n  font-weight: 700;\n  letter-spacing: 7.4px;\n  line-height: 1.3;\n\n  animation: moveInRight 2s ease-out;\n}\n\n@media screen and (max-width: 400px) {\n  .heading-primary-main {\n    letter-spacing: 10px;\n  }\n}\n\n/* it\'s best to only animate two properties (opacity, transform) */\n@keyframes moveInLeft {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      -100px\n    ); /* (x, y) -> neg goes left/down, pos goes right/up */\n  }\n\n  80% {\n    transform: translateX(10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\n@keyframes moveInRight {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      100px\n    ); /* (x, y) -> neg goes left/up, pos goes right/down */\n  }\n\n  80% {\n    transform: translateX(-10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\nform {\n  margin: 0 auto;\n  background-color: white;\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  overflow: hidden;\n  width: 240px;\n}\n\nfieldset {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\ninput {\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  margin: 0;\n}\n\n.account-info {\n  padding: 20px 20px 0 20px;\n}\n\n.account-info label {\n  color: #395870;\n  display: block;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.account-info input {\n  background: #fff;\n  border: 1px solid #c6c7cc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  color: #636466;\n  padding: 6px;\n  margin-top: 6px;\n  width: 100%;\n}\n\n.account-action {\n  background: #f0f0f2;\n  border-top: 1px solid #c6c7cc;\n  padding: 3px 20px 10px 20px;\n}\n\n.account-action .btn {\n  background: linear-gradient(#49708f, #293f50);\n  border: 0;\n  color: #fff;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 8px 16px;\n}\n\n.account-support {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-content: center;\n  margin-bottom: 10px;\n  font-size: 10px;\n}\n\n.account-support label {\n  color: #7c7c80;\n}\n\n.account-support input {\n  position: relative;\n  top: 3px;\n}\n\n.account-support a {\n  position: relative;\n  top: 2px;\n}\n\n.account-action .btn:link,\n.account-action .btn:visited {\n  transition: all 0.2s; /* initial state */\n  position: relative;\n  outline: none;\n}\n\n.account-action .btn:hover {\n  transform: translateY(-3px); /* goes up 3px */\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-action .btn:focus {\n  outline: none;\n}\n\n.account-action .btn:active {\n  outline: none;\n  transform: translateY(-1px); /* goes up 1 px */\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-register {\n  display: block;\n  margin-top: 10px;\n  color: white;\n}\n\n.account-register a {\n  color: turquoise;\n  text-decoration: none;\n}\n\n.account-register a:active {\n  color: turquoise;\n}\n',"",{version:3,sources:["webpack://./src/css/index.css"],names:[],mappings:"AAAA;EACE,aAAa,EAAE,eAAe;EAC9B;;;;;2CAK8B;EAC9B,sBAAsB,EAAE,4CAA4C;EACpE,wBAAwB,EAAE,oCAAoC;EAC9D,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,QAAQ,EAAE,wBAAwB;EAClC,SAAS,EAAE,wBAAwB;EACnC,gCAAgC,EAAE,wCAAwC;EAC1E,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,yBAAyB;;EAEzB,2BAA2B,EAAE,+BAA+B;EAC5D,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,eAAe;EACf,gBAAgB;EAChB,oBAAoB;EACpB,gBAAgB;;EAEhB,0BAA0B;EAC1B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE,cAAc;EACd,eAAe;EACf,gBAAgB;EAChB,qBAAqB;EACrB,gBAAgB;;EAEhB,kCAAkC;AACpC;;AAEA;EACE;IACE,oBAAoB;EACtB;AACF;;AAEA,kEAAkE;AAClE;EACE;IACE,UAAU;IACV;;KAEC,EAAE,oDAAoD;EACzD;;EAEA;IACE,2BAA2B;EAC7B;;EAEA;IACE,UAAU;IACV,uBAAuB;EACzB;AACF;;AAEA;EACE;IACE,UAAU;IACV;;KAEC,EAAE,oDAAoD;EACzD;;EAEA;IACE,4BAA4B;EAC9B;;EAEA;IACE,UAAU;IACV,uBAAuB;EACzB;AACF;;AAEA;EACE,cAAc;EACd,uBAAuB;EACvB,kBAAkB;EAClB,6DAA6D;EAC7D,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,SAAS;EACT,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,6DAA6D;EAC7D,SAAS;AACX;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,cAAc;EACd,cAAc;EACd,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,8CAA8C;EAC9C,cAAc;EACd,YAAY;EACZ,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,6BAA6B;EAC7B,2BAA2B;AAC7B;;AAEA;EACE,6CAA6C;EAC7C,SAAS;EACT,WAAW;EACX,eAAe;EACf,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,qBAAqB;EACrB,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;AACV;;AAEA;EACE,kBAAkB;EAClB,QAAQ;AACV;;AAEA;;EAEE,oBAAoB,EAAE,kBAAkB;EACxC,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,2BAA2B,EAAE,gBAAgB;EAC7C,0CAA0C,EAAE,wBAAwB;AACtE;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,2BAA2B,EAAE,iBAAiB;EAC9C,yCAAyC,EAAE,wBAAwB;AACrE;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['.header {\n  height: 100vh; /* out of 100 */\n  background-image: linear-gradient(\n      to right,\n      rgba(67, 48, 133, 0.8),\n      rgba(58, 65, 62, 0.692)\n    ),\n    url("../images/chicago.jpg");\n  background-size: cover; /* try to fit width of viewport or element */\n  background-position: top; /* top of img stays atop container */\n  position: relative;\n}\n\n.text-box {\n  position: absolute;\n  top: 50%; /* from parent element */\n  left: 50%; /* from parent element */\n  transform: translate(-50%, -50%); /* from itself (top-left corner entry) */\n  text-align: center;\n}\n\n.heading-primary {\n  color: #fff;\n  text-transform: uppercase;\n\n  backface-visibility: hidden; /* fixes shaking in animation */\n  margin-bottom: 30px;\n}\n\n.heading-primary-main {\n  display: block;\n  font-size: 50px;\n  font-weight: 800;\n  letter-spacing: 20px;\n  line-height: 1.3;\n\n  animation-name: moveInLeft;\n  animation-duration: 2s;\n  animation-timing-function: ease-out;\n}\n\n.heading-primary-sub {\n  display: block;\n  font-size: 15px;\n  font-weight: 700;\n  letter-spacing: 7.4px;\n  line-height: 1.3;\n\n  animation: moveInRight 2s ease-out;\n}\n\n@media screen and (max-width: 400px) {\n  .heading-primary-main {\n    letter-spacing: 10px;\n  }\n}\n\n/* it\'s best to only animate two properties (opacity, transform) */\n@keyframes moveInLeft {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      -100px\n    ); /* (x, y) -> neg goes left/down, pos goes right/up */\n  }\n\n  80% {\n    transform: translateX(10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\n@keyframes moveInRight {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      100px\n    ); /* (x, y) -> neg goes left/up, pos goes right/down */\n  }\n\n  80% {\n    transform: translateX(-10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\nform {\n  margin: 0 auto;\n  background-color: white;\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  overflow: hidden;\n  width: 240px;\n}\n\nfieldset {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\ninput {\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  margin: 0;\n}\n\n.account-info {\n  padding: 20px 20px 0 20px;\n}\n\n.account-info label {\n  color: #395870;\n  display: block;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.account-info input {\n  background: #fff;\n  border: 1px solid #c6c7cc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  color: #636466;\n  padding: 6px;\n  margin-top: 6px;\n  width: 100%;\n}\n\n.account-action {\n  background: #f0f0f2;\n  border-top: 1px solid #c6c7cc;\n  padding: 3px 20px 10px 20px;\n}\n\n.account-action .btn {\n  background: linear-gradient(#49708f, #293f50);\n  border: 0;\n  color: #fff;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 8px 16px;\n}\n\n.account-support {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-content: center;\n  margin-bottom: 10px;\n  font-size: 10px;\n}\n\n.account-support label {\n  color: #7c7c80;\n}\n\n.account-support input {\n  position: relative;\n  top: 3px;\n}\n\n.account-support a {\n  position: relative;\n  top: 2px;\n}\n\n.account-action .btn:link,\n.account-action .btn:visited {\n  transition: all 0.2s; /* initial state */\n  position: relative;\n  outline: none;\n}\n\n.account-action .btn:hover {\n  transform: translateY(-3px); /* goes up 3px */\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-action .btn:focus {\n  outline: none;\n}\n\n.account-action .btn:active {\n  outline: none;\n  transform: translateY(-1px); /* goes up 1 px */\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-register {\n  display: block;\n  margin-top: 10px;\n  color: white;\n}\n\n.account-register a {\n  color: turquoise;\n  text-decoration: none;\n}\n\n.account-register a:active {\n  color: turquoise;\n}\n'],sourceRoot:""}]);const l=h},538:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var r=n(15),i=n.n(r),o=n(645),s=n.n(o),a=n(667),u=n.n(a),c=n(955),h=s()(i()),f=u()(c);h.push([t.id,'@font-face {\n  font-family: "Open Sans";\n  src: url('+f+') format("ttf");\n  font-weight: 400;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; /* borders and paddings no longer add to total width/height */\n}\n\nbody {\n  font-family: "Open Sans", sans-serif; /* inherited by all child elements of body */\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.7;\n  color: #777;\n}\n',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,0DAAuD;EACvD,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB,EAAE,6DAA6D;AACvF;;AAEA;EACE,oCAAoC,EAAE,4CAA4C;EAClF,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,WAAW;AACb",sourcesContent:['@font-face {\n  font-family: "Open Sans";\n  src: url("../fonts/OpenSans-Regular.ttf") format("ttf");\n  font-weight: 400;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; /* borders and paddings no longer add to total width/height */\n}\n\nbody {\n  font-family: "Open Sans", sans-serif; /* inherited by all child elements of body */\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.7;\n  color: #777;\n}\n'],sourceRoot:""}]);const l=h},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var u=[].concat(t[a]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],s=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(u," */"),h=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(h).concat([c]).join("\n")}return[o].join("\n")}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},676:function(t,e){!function(t){"use strict";function e(t){return Array.prototype.slice.call(t)}function n(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function r(t,e,r){var i,o=new Promise((function(o,s){n(i=t[e].apply(t,r)).then(o,s)}));return o.request=i,o}function i(t,e,n){var i=r(t,e,n);return i.then((function(t){if(t)return new h(t,i.request)}))}function o(t,e,n){n.forEach((function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})}))}function s(t,e,n,i){i.forEach((function(i){i in n.prototype&&(t.prototype[i]=function(){return r(this[e],i,arguments)})}))}function a(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})}))}function u(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return i(this[e],r,arguments)})}))}function c(t){this._index=t}function h(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function l(t){this._tx=t,this.complete=new Promise((function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}}))}function p(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new l(n)}function d(t){this._db=t}o(c,"_index",["name","keyPath","multiEntry","unique"]),s(c,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(c,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(h,"_cursor",["direction","key","primaryKey","value"]),s(h,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(t){t in IDBCursor.prototype&&(h.prototype[t]=function(){var e=this,r=arguments;return Promise.resolve().then((function(){return e._cursor[t].apply(e._cursor,r),n(e._request).then((function(t){if(t)return new h(t,e._request)}))}))})})),f.prototype.createIndex=function(){return new c(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new c(this._store.index.apply(this._store,arguments))},o(f,"_store",["name","keyPath","indexNames","autoIncrement"]),s(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),a(f,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},o(l,"_tx",["objectStoreNames","mode"]),a(l,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},o(p,"_db",["name","version","objectStoreNames"]),a(p,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},o(d,"_db",["name","version","objectStoreNames"]),a(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(t){[f,c].forEach((function(n){t in n.prototype&&(n.prototype[t.replace("open","iterate")]=function(){var n=e(arguments),r=n[n.length-1],i=this._store||this._index,o=i[t].apply(i,n.slice(0,-1));o.onsuccess=function(){r(o.result)}})}))})),[c,f].forEach((function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise((function(i){n.iterateCursor(t,(function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():i(r)):i(r)}))}))})})),t.openDb=function(t,e,n){var i=r(indexedDB,"open",[t,e]),o=i.request;return o&&(o.onupgradeneeded=function(t){n&&n(new p(o.result,t.oldVersion,o.transaction))}),i.then((function(t){return new d(t)}))},t.deleteDb=function(t){return r(indexedDB,"deleteDatabase",[t])},Object.defineProperty(t,"__esModule",{value:!0})}(e)},379:(t,e,n)=>{"use strict";var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function s(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},r=[],i=0;i<t.length;i++){var a=t[i],u=e.base?a[0]+e.base:a[0],c=n[u]||0,h="".concat(u," ").concat(c);n[u]=c+1;var f=s(h),l={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(o[f].references++,o[f].updater(l)):o.push({identifier:h,updater:v(l,e),references:1}),r.push(h)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=i(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function f(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=h(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function l(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,d=0;function v(t,e){var n,r,i;if(e.singleton){var o=d++;n=p||(p=u(e)),r=f.bind(null,n,o,!1),i=f.bind(null,n,o,!0)}else n=u(e),r=l.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=s(n[r]);o[i].references--}for(var u=a(t,e),c=0;c<n.length;c++){var h=s(n[c]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}n=u}}}},955:(t,e,n)=>{"use strict";t.exports=n.p+"1b0809d519837cb7aad3.ttf"},297:(t,e,n)=>{"use strict";t.exports=n.p+"f46bb183eee6b540f0be.jpg"}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{"use strict";var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var r=function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function i(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function o(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function s(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function u(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(a(arguments[e]));return t}function c(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&"__proto__"!==n&&(t[n]=h(t[n],e[n]));return t}var f=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();function l(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function p(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}function d(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function v(){return"indexedDB"in self&&null!=indexedDB}function y(){return new Promise((function(t,e){try{var n=!0,r="validate-browser-context-for-indexeddb-analytics-module",i=window.indexedDB.open(r);i.onsuccess=function(){i.result.close(),n||window.indexedDB.deleteDatabase(r),t(!0)},i.onupgradeneeded=function(){n=!1},i.onerror=function(){var t;e((null===(t=i.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function g(){return!(!navigator||!navigator.cookieEnabled)}var m=function(t){function n(e,r,i){var o=t.call(this,r)||this;return o.code=e,o.customData=i,o.name="FirebaseError",Object.setPrototypeOf(o,n.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,b.prototype.create),o}return e(n,t),n}(Error),b=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e[0]||{},i=this.service+"/"+t,o=this.errors[t],s=o?w(o,r):"Error",a=this.serviceName+": "+s+" ("+i+").",u=new m(i,a,r);return u},t}();function w(t,e){return t.replace(I,(function(t,n){var r=e[n];return null!=r?String(r):"<"+n+"?>"}))}var I=/\{\$([^}]+)}/g;function E(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function A(t,e){var n=new _(t,e);return n.subscribe.bind(n)}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,s,a=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(o=h^u&(c^h),s=1518500249):(o=u^c^h,s=1859775393):r<60?(o=u&c|h&(u|c),s=2400959708):(o=u^c^h,s=3395469782),i=(a<<5|a>>>27)+o+f+s+n[r]&4294967295,f=h,h=c,c=4294967295&(u<<30|u>>>2),u=a,a=i;this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0===o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t}}();var _=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(r.next=T),void 0===r.error&&(r.error=T),void 0===r.complete&&(r.complete=T);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function T(){}function S(t,e,n){void 0===e&&(e=1e3),void 0===n&&(n=2);var r=e*Math.pow(n,t),i=Math.round(.5*r*(Math.random()-.5)*2);return Math.min(144e5,r+i)}var N,k=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),C="[DEFAULT]",x=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t=C);var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new f;this.instancesDeferred.set(e,n);try{var r=this.getOrInitializeService(e);r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=r({identifier:C,optional:!1},t),n=e.identifier,i=e.optional,o=this.normalizeInstanceIdentifier(n);try{var s=this.getOrInitializeService(o);if(!s){if(i)return null;throw Error("Service "+this.name+" is not available")}return s}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService(C)}catch(t){}try{for(var r=s(this.instancesDeferred.entries()),i=r.next();!i.done;i=r.next()){var o=a(i.value,2),u=o[0],c=o[1],h=this.normalizeInstanceIdentifier(u);try{var f=this.getOrInitializeService(h);c.resolve(f)}catch(t){}}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t=C),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(u(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})),t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()}))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return t===C?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:C:t},t}(),O=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new x(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();function D(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}var P,R=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(P||(P={}));var L,M={debug:P.DEBUG,verbose:P.VERBOSE,info:P.INFO,warn:P.WARN,error:P.ERROR,silent:P.SILENT},V=P.INFO,j=((N={})[P.DEBUG]="log",N[P.VERBOSE]="log",N[P.INFO]="info",N[P.WARN]="warn",N[P.ERROR]="error",N),U=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(e<t.logLevel)){var i=(new Date).toISOString(),o=j[e];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[o].apply(console,D(["["+i+"]  "+t.name+":"],n))}},B=function(){function t(t){this.name=t,this._logLevel=V,this._logHandler=U,this._userLogHandler=null,R.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in P))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?M[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.DEBUG],t)),this._logHandler.apply(this,D([this,P.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.VERBOSE],t)),this._logHandler.apply(this,D([this,P.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.INFO],t)),this._logHandler.apply(this,D([this,P.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.WARN],t)),this._logHandler.apply(this,D([this,P.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.ERROR],t)),this._logHandler.apply(this,D([this,P.ERROR],t))},t}();function F(t){R.forEach((function(e){e.setLogLevel(t)}))}var q,G=((L={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",L["bad-app-name"]="Illegal App name: '{$appName}",L["duplicate-app"]="Firebase App named '{$appName}' already exists",L["app-deleted"]="Firebase App named '{$appName}' already deleted",L["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",L["invalid-log-argument"]="First argument to `onLog` must be null or a function.",L),z=new b("app","Firebase",G),K="@firebase/app",H="[DEFAULT]",W=((q={})[K]="fire-core",q["@firebase/analytics"]="fire-analytics",q["@firebase/auth"]="fire-auth",q["@firebase/database"]="fire-rtdb",q["@firebase/functions"]="fire-fn",q["@firebase/installations"]="fire-iid",q["@firebase/messaging"]="fire-fcm",q["@firebase/performance"]="fire-perf",q["@firebase/remote-config"]="fire-rc",q["@firebase/storage"]="fire-gcs",q["@firebase/firestore"]="fire-fst",q["fire-js"]="fire-js",q["firebase-wrapper"]="fire-js-all",q),X=new B("@firebase/app"),Y=function(){function t(t,e,n){var r,i,o=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=h(void 0,t),this.container=new O(e.name),this._addComponent(new k("app",(function(){return o}),"PUBLIC"));try{for(var a=s(this.firebase_.INTERNAL.components.values()),u=a.next();!u.done;u=a.next()){var c=u.value;this._addComponent(c)}}catch(t){r={error:t}}finally{try{u&&!u.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e=H),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e=H),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){X.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw z.create("app-deleted",{appName:this.name_})},t}();Y.prototype.name&&Y.prototype.options||Y.prototype.delete||console.log("dc");var J=function t(){var e=function(t){var e={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={}),"object"==typeof i&&null!==i||(i={name:i});var o=i;void 0===o.name&&(o.name=H);var s=o.name;if("string"!=typeof s||!s)throw z.create("bad-app-name",{appName:String(s)});if(E(e,s))throw z.create("duplicate-app",{appName:s});var a=new t(n,o,r);return e[s]=a,a},app:i,registerVersion:function(t,e,n){var r,i=null!==(r=W[t])&&void 0!==r?r:t;n&&(i+="-"+n);var s=i.match(/\s|\//),a=e.match(/\s|\//);if(s||a){var u=['Unable to register library "'+i+'" with version "'+e+'":'];return s&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),s&&a&&u.push("and"),a&&u.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void X.warn(u.join(" "))}o(new k(i+"-version",(function(){return{library:i,version:e}}),"VERSION"))},setLogLevel:F,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw z.create("invalid-log-argument",{appName:name});!function(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=M[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];var s=i.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:P[n].toLowerCase(),message:s,args:i,type:e.name})}},r=0,i=R;r<i.length;r++)n(i[r])}(t,e)},apps:null,SDK_VERSION:"8.0.1",INTERNAL:{registerComponent:o,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function i(t){if(!E(e,t=t||H))throw z.create("no-app",{appName:t});return e[t]}function o(o){var a,u,c=o.name;if(n.has(c))return X.debug("There were multiple attempts to register component "+c+"."),"PUBLIC"===o.type?r[c]:null;if(n.set(c,o),"PUBLIC"===o.type){var f=function(t){if(void 0===t&&(t=i()),"function"!=typeof t[c])throw z.create("invalid-app-argument",{appName:c});return t[c]()};void 0!==o.serviceProps&&h(f,o.serviceProps),r[c]=f,t.prototype[c]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this._getService.bind(this,c).apply(this,o.multipleInstances?t:[])}}try{for(var l=s(Object.keys(e)),p=l.next();!p.done;p=l.next()){var d=p.value;e[d]._addComponent(o)}}catch(t){a={error:t}}finally{try{p&&!p.done&&(u=l.return)&&u.call(l)}finally{if(a)throw a.error}}return"PUBLIC"===o.type?r[c]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),i.App=t,r}(Y);return e.INTERNAL=r(r({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){h(e,t)},createSubscribe:A,ErrorFactory:b,deepExtend:h}),e}(),Q=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();if("object"==typeof self&&self.self===self&&void 0!==self.firebase){X.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var $=self.firebase.SDK_VERSION;$&&$.indexOf("LITE")>=0&&X.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var Z=J.initializeApp;J.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return p()&&X.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),Z.apply(void 0,t)};var tt=J;!function(t,e){t.INTERNAL.registerComponent(new k("platform-logger",(function(t){return new Q(t)}),"PRIVATE")),t.registerVersion(K,"0.6.13",void 0),t.registerVersion("fire-js","")}(tt);const et=tt;et.registerVersion("firebase","8.0.2","app");var nt,rt=n(676),it="w:0.4.19",ot=((nt={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',nt["not-registered"]="Firebase Installation is not registered.",nt["installation-not-found"]="Firebase Installation not found.",nt["request-failed"]='{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',nt["app-offline"]="Could not process request. Application offline.",nt["delete-pending-registration"]="Can't delete installation while there is a pending registration request.",nt),st=new b("installations","Installations",ot);function at(t){return t instanceof m&&t.code.includes("request-failed")}function ut(t){return"https://firebaseinstallations.googleapis.com/v1/projects/"+t.projectId+"/installations"}function ct(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}function ht(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return[4,e.json()];case 1:return n=i.sent(),r=n.error,[2,st.create("request-failed",{requestName:t,serverCode:r.code,serverMessage:r.message,serverStatus:r.status})]}}))}))}function ft(t){var e=t.apiKey;return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function lt(t,e){var n=e.refreshToken,r=ft(t);return r.append("Authorization",function(t){return"FIS_v2 "+t}(n)),r}function pt(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,t()];case 1:return(e=n.sent()).status>=500&&e.status<600?[2,t()]:[2,e]}}))}))}function dt(t,e){var n=e.fid;return i(this,void 0,void 0,(function(){var e,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return e=ut(t),r=ft(t),i={fid:n,authVersion:"FIS_v2",appId:t.appId,sdkVersion:it},s={method:"POST",headers:r,body:JSON.stringify(i)},[4,pt((function(){return fetch(e,s)}))];case 1:return(a=o.sent()).ok?[4,a.json()]:[3,3];case 2:return[2,{fid:(u=o.sent()).fid||n,registrationStatus:2,refreshToken:u.refreshToken,authToken:ct(u.authToken)}];case 3:return[4,ht("Create Installation",a)];case 4:throw o.sent()}}))}))}function vt(t){return new Promise((function(e){setTimeout(e,t)}))}var yt=/^[cdef][\w-]{21}$/;function gt(){try{var t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;var e=function(t){return(e=t,btoa(String.fromCharCode.apply(String,u(e))).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var e}(t);return yt.test(e)?e:""}catch(t){return""}}function mt(t){return t.appName+"!"+t.appId}var bt=new Map;function wt(t,e){var n=mt(t);It(n,e),function(t,e){var n=At();n&&n.postMessage({key:t,fid:e}),_t()}(n,e)}function It(t,e){var n,r,i=bt.get(t);if(i)try{for(var o=s(i),a=o.next();!a.done;a=o.next())(0,a.value)(e)}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}var Et=null;function At(){return!Et&&"BroadcastChannel"in self&&((Et=new BroadcastChannel("[Firebase] FID Change")).onmessage=function(t){It(t.data.key,t.data.fid)}),Et}function _t(){0===bt.size&&Et&&(Et.close(),Et=null)}var Tt,St="firebase-installations-store",Nt=null;function kt(){return Nt||(Nt=(0,rt.openDb)("firebase-installations-database",1,(function(t){switch(t.oldVersion){case 0:t.createObjectStore(St)}}))),Nt}function Ct(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a;return o(this,(function(o){switch(o.label){case 0:return n=mt(t),[4,kt()];case 1:return r=o.sent(),i=r.transaction(St,"readwrite"),[4,(s=i.objectStore(St)).get(n)];case 2:return a=o.sent(),[4,s.put(e,n)];case 3:return o.sent(),[4,i.complete];case 4:return o.sent(),a&&a.fid===e.fid||wt(t,e.fid),[2,e]}}))}))}function xt(t){return i(this,void 0,void 0,(function(){var e,n,r;return o(this,(function(i){switch(i.label){case 0:return e=mt(t),[4,kt()];case 1:return n=i.sent(),[4,(r=n.transaction(St,"readwrite")).objectStore(St).delete(e)];case 2:return i.sent(),[4,r.complete];case 3:return i.sent(),[2]}}))}))}function Ot(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return n=mt(t),[4,kt()];case 1:return r=o.sent(),i=r.transaction(St,"readwrite"),[4,(s=i.objectStore(St)).get(n)];case 2:return a=o.sent(),void 0!==(u=e(a))?[3,4]:[4,s.delete(n)];case 3:return o.sent(),[3,6];case 4:return[4,s.put(u,n)];case 5:o.sent(),o.label=6;case 6:return[4,i.complete];case 7:return o.sent(),!u||a&&a.fid===u.fid||wt(t,u.fid),[2,u]}}))}))}function Dt(t){return i(this,void 0,void 0,(function(){var e,n,r;return o(this,(function(s){switch(s.label){case 0:return[4,Ot(t,(function(n){var r=function(t){return Lt(t||{fid:gt(),registrationStatus:0})}(n),s=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine)return{installationEntry:e,registrationPromise:Promise.reject(st.create("app-offline"))};var n={fid:e.fid,registrationStatus:1,registrationTime:Date.now()};return{installationEntry:n,registrationPromise:function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,7]),[4,dt(t,e)];case 1:return n=i.sent(),[2,Ct(t,n)];case 2:return at(r=i.sent())&&409===r.customData.serverCode?[4,xt(t)]:[3,4];case 3:return i.sent(),[3,6];case 4:return[4,Ct(t,{fid:e.fid,registrationStatus:0})];case 5:i.sent(),i.label=6;case 6:throw r;case 7:return[2]}}))}))}(t,n)}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:Pt(t)}:{installationEntry:e}}(t,r);return e=s.registrationPromise,s.installationEntry}))];case 1:return""!==(n=s.sent()).fid?[3,3]:(r={},[4,e]);case 2:return[2,(r.installationEntry=s.sent(),r)];case 3:return[2,{installationEntry:n,registrationPromise:e}]}}))}))}function Pt(t){return i(this,void 0,void 0,(function(){var e,n,r,i;return o(this,(function(o){switch(o.label){case 0:return[4,Rt(t)];case 1:e=o.sent(),o.label=2;case 2:return 1!==e.registrationStatus?[3,5]:[4,vt(100)];case 3:return o.sent(),[4,Rt(t)];case 4:return e=o.sent(),[3,2];case 5:return 0!==e.registrationStatus?[3,7]:[4,Dt(t)];case 6:return n=o.sent(),r=n.installationEntry,(i=n.registrationPromise)?[2,i]:[2,r];case 7:return[2,e]}}))}))}function Rt(t){return Ot(t,(function(t){if(!t)throw st.create("installation-not-found");return Lt(t)}))}function Lt(t){return 1===(e=t).registrationStatus&&e.registrationTime+1e4<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}function Mt(t,e){var n=t.appConfig,r=t.platformLoggerProvider;return i(this,void 0,void 0,(function(){var t,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return t=function(t,e){var n=e.fid;return ut(t)+"/"+n+"/authTokens:generate"}(n,e),i=lt(n,e),(s=r.getImmediate({optional:!0}))&&i.append("x-firebase-client",s.getPlatformInfoString()),a={installation:{sdkVersion:it}},u={method:"POST",headers:i,body:JSON.stringify(a)},[4,pt((function(){return fetch(t,u)}))];case 1:return(c=o.sent()).ok?[4,c.json()]:[3,3];case 2:return[2,ct(o.sent())];case 3:return[4,ht("Generate Auth Token",c)];case 4:throw o.sent()}}))}))}function Vt(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,(function(){var n,s,a;return o(this,(function(u){switch(u.label){case 0:return[4,Ot(t.appConfig,(function(s){if(!Ut(s))throw st.create("not-registered");var a,u=s.authToken;if(!e&&(2===(a=u).requestStatus&&!function(t){var e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+36e5}(a)))return s;if(1===u.requestStatus)return n=function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return[4,jt(t.appConfig)];case 1:n=i.sent(),i.label=2;case 2:return 1!==n.authToken.requestStatus?[3,5]:[4,vt(100)];case 3:return i.sent(),[4,jt(t.appConfig)];case 4:return n=i.sent(),[3,2];case 5:return 0===(r=n.authToken).requestStatus?[2,Vt(t,e)]:[2,r]}}))}))}(t,e),s;if(!navigator.onLine)throw st.create("app-offline");var c=function(t){var e={requestStatus:1,requestTime:Date.now()};return r(r({},t),{authToken:e})}(s);return n=function(t,e){return i(this,void 0,void 0,(function(){var n,i,s;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,8]),[4,Mt(t,e)];case 1:return n=o.sent(),s=r(r({},e),{authToken:n}),[4,Ct(t.appConfig,s)];case 2:return o.sent(),[2,n];case 3:return!at(i=o.sent())||401!==i.customData.serverCode&&404!==i.customData.serverCode?[3,5]:[4,xt(t.appConfig)];case 4:return o.sent(),[3,7];case 5:return s=r(r({},e),{authToken:{requestStatus:0}}),[4,Ct(t.appConfig,s)];case 6:o.sent(),o.label=7;case 7:throw i;case 8:return[2]}}))}))}(t,c),c}))];case 1:return s=u.sent(),n?[4,n]:[3,3];case 2:return a=u.sent(),[3,4];case 3:a=s.authToken,u.label=4;case 4:return[2,a]}}))}))}function jt(t){return Ot(t,(function(t){if(!Ut(t))throw st.create("not-registered");var e;return 1===(e=t.authToken).requestStatus&&e.requestTime+1e4<Date.now()?r(r({},t),{authToken:{requestStatus:0}}):t}))}function Ut(t){return void 0!==t&&2===t.registrationStatus}function Bt(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,Dt(t)];case 1:return(e=n.sent().registrationPromise)?[4,e]:[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))}function Ft(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:return n=function(t,e){var n=e.fid;return ut(t)+"/"+n}(t,e),r=lt(t,e),i={method:"DELETE",headers:r},[4,pt((function(){return fetch(n,i)}))];case 1:return(s=o.sent()).ok?[3,3]:[4,ht("Delete Installation",s)];case 2:throw o.sent();case 3:return[2]}}))}))}function qt(t){return st.create("missing-app-config-values",{valueName:t})}(Tt=et).INTERNAL.registerComponent(new k("installations",(function(t){var e=t.getProvider("app").getImmediate(),n={appConfig:function(t){var e,n;if(!t||!t.options)throw qt("App Configuration");if(!t.name)throw qt("App Name");try{for(var r=s(["projectId","apiKey","appId"]),i=r.next();!i.done;i=r.next()){var o=i.value;if(!t.options[o])throw qt(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e),platformLoggerProvider:t.getProvider("platform-logger")};return{app:e,getId:function(){return function(t){return i(this,void 0,void 0,(function(){var e,n,r;return o(this,(function(i){switch(i.label){case 0:return[4,Dt(t.appConfig)];case 1:return e=i.sent(),n=e.installationEntry,(r=e.registrationPromise)?r.catch(console.error):Vt(t).catch(console.error),[2,n.fid]}}))}))}(n)},getToken:function(t){return function(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,Bt(t.appConfig)];case 1:return n.sent(),[4,Vt(t,e)];case 2:return[2,n.sent().token]}}))}))}(n,t)},delete:function(){return function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,Ot(e=t.appConfig,(function(t){if(!t||0!==t.registrationStatus)return t}))];case 1:if(!(n=r.sent()))return[3,6];if(1!==n.registrationStatus)return[3,2];throw st.create("delete-pending-registration");case 2:if(2!==n.registrationStatus)return[3,6];if(navigator.onLine)return[3,3];throw st.create("app-offline");case 3:return[4,Ft(e,n)];case 4:return r.sent(),[4,xt(e)];case 5:r.sent(),r.label=6;case 6:return[2]}}))}))}(n)},onIdChange:function(t){return function(t,e){var n=t.appConfig;return function(t,e){At();var n=mt(t),r=bt.get(n);r||(r=new Set,bt.set(n,r)),r.add(e)}(n,e),function(){!function(t,e){var n=mt(t),r=bt.get(n);r&&(r.delete(e),0===r.size&&bt.delete(n),_t())}(n,e)}}(n,t)}}}),"PUBLIC")),Tt.registerVersion("@firebase/installations","0.4.19");var Gt,zt,Kt="https://www.googletagmanager.com/gtag/js";!function(t){t.EVENT="event",t.SET="set",t.CONFIG="config"}(Gt||(Gt={})),function(t){t.ADD_SHIPPING_INFO="add_shipping_info",t.ADD_PAYMENT_INFO="add_payment_info",t.ADD_TO_CART="add_to_cart",t.ADD_TO_WISHLIST="add_to_wishlist",t.BEGIN_CHECKOUT="begin_checkout",t.CHECKOUT_PROGRESS="checkout_progress",t.EXCEPTION="exception",t.GENERATE_LEAD="generate_lead",t.LOGIN="login",t.PAGE_VIEW="page_view",t.PURCHASE="purchase",t.REFUND="refund",t.REMOVE_FROM_CART="remove_from_cart",t.SCREEN_VIEW="screen_view",t.SEARCH="search",t.SELECT_CONTENT="select_content",t.SELECT_ITEM="select_item",t.SELECT_PROMOTION="select_promotion",t.SET_CHECKOUT_OPTION="set_checkout_option",t.SHARE="share",t.SIGN_UP="sign_up",t.TIMING_COMPLETE="timing_complete",t.VIEW_CART="view_cart",t.VIEW_ITEM="view_item",t.VIEW_ITEM_LIST="view_item_list",t.VIEW_PROMOTION="view_promotion",t.VIEW_SEARCH_RESULTS="view_search_results"}(zt||(zt={}));var Ht,Wt=new B("@firebase/analytics");function Xt(t,e,n,r,s,a){return i(this,void 0,void 0,(function(){var i,u,c,h;return o(this,(function(o){switch(o.label){case 0:i=r[s],o.label=1;case 1:return o.trys.push([1,7,,8]),i?[4,e[i]]:[3,3];case 2:return o.sent(),[3,6];case 3:return[4,Promise.all(n)];case 4:return u=o.sent(),(c=u.find((function(t){return t.measurementId===s})))?[4,e[c.appId]]:[3,6];case 5:o.sent(),o.label=6;case 6:return[3,8];case 7:return h=o.sent(),Wt.error(h),[3,8];case 8:return t(Gt.CONFIG,s,a),[2]}}))}))}function Yt(t,e,n,r,s){return i(this,void 0,void 0,(function(){var i,a,u,c,h,f,l,p;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),i=[],s&&s.send_to?(a=s.send_to,Array.isArray(a)||(a=[a]),[4,Promise.all(n)]):[3,2];case 1:for(u=o.sent(),c=function(t){var n=u.find((function(e){return e.measurementId===t})),r=n&&e[n.appId];if(!r)return i=[],"break";i.push(r)},h=0,f=a;h<f.length&&(l=f[h],"break"!==c(l));h++);o.label=2;case 2:return 0===i.length&&(i=Object.values(e)),[4,Promise.all(i)];case 3:return o.sent(),t(Gt.EVENT,r,s||{}),[3,5];case 4:return p=o.sent(),Wt.error(p),[3,5];case 5:return[2]}}))}))}var Jt=((Ht={})["already-exists"]="A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.",Ht["already-initialized"]="Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",Ht["interop-component-reg-failed"]="Firebase Analytics Interop Component failed to instantiate: {$reason}",Ht["invalid-analytics-context"]="Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",Ht["indexeddb-unavailable"]="IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",Ht["fetch-throttle"]="The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",Ht["config-fetch-failed"]="Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",Ht["no-api-key"]='The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',Ht["no-app-id"]='The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',Ht),Qt=new b("analytics","Analytics",Jt),$t=new(function(){function t(t,e){void 0===t&&(t={}),void 0===e&&(e=1e3),this.throttleMetadata=t,this.intervalMillis=e}return t.prototype.getThrottleMetadata=function(t){return this.throttleMetadata[t]},t.prototype.setThrottleMetadata=function(t,e){this.throttleMetadata[t]=e},t.prototype.deleteThrottleMetadata=function(t){delete this.throttleMetadata[t]},t}());function Zt(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}function te(t){var e;return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return n=t.appId,r=t.apiKey,i={method:"GET",headers:Zt(r)},s="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),[4,fetch(s,i)];case 1:if(200===(a=o.sent()).status||304===a.status)return[3,6];u="",o.label=2;case 2:return o.trys.push([2,4,,5]),[4,a.json()];case 3:return c=o.sent(),(null===(e=c.error)||void 0===e?void 0:e.message)&&(u=c.error.message),[3,5];case 4:return o.sent(),[3,5];case 5:throw Qt.create("config-fetch-failed",{httpStatus:a.status,responseMessage:u});case 6:return[2,a.json()]}}))}))}function ee(t,e,n,r){var s=e.throttleEndTimeMillis,a=e.backoffCount;return void 0===r&&(r=$t),i(this,void 0,void 0,(function(){var e,i,u,c,h,f,l;return o(this,(function(o){switch(o.label){case 0:e=t.appId,i=t.measurementId,o.label=1;case 1:return o.trys.push([1,3,,4]),[4,ne(n,s)];case 2:return o.sent(),[3,4];case 3:if(u=o.sent(),i)return Wt.warn("Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID "+i+' provided in the "measurementId" field in the local Firebase config. ['+u.message+"]"),[2,{appId:e,measurementId:i}];throw u;case 4:return o.trys.push([4,6,,7]),[4,te(t)];case 5:return c=o.sent(),r.deleteThrottleMetadata(e),[2,c];case 6:if(!function(t){if(!(t instanceof m&&t.customData))return!1;var e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(h=o.sent())){if(r.deleteThrottleMetadata(e),i)return Wt.warn("Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID "+i+' provided in the "measurementId" field in the local Firebase config. ['+h.message+"]"),[2,{appId:e,measurementId:i}];throw h}return f=503===Number(h.customData.httpStatus)?S(a,r.intervalMillis,30):S(a,r.intervalMillis),l={throttleEndTimeMillis:Date.now()+f,backoffCount:a+1},r.setThrottleMetadata(e,l),Wt.debug("Calling attemptFetch again in "+f+" millis"),[2,ee(t,l,n,r)];case 7:return[2]}}))}))}function ne(t,e){return new Promise((function(n,r){var i=Math.max(e-Date.now(),0),o=setTimeout(n,i);t.addEventListener((function(){clearTimeout(o),r(Qt.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}var re=function(){function t(){this.listeners=[]}return t.prototype.addEventListener=function(t){this.listeners.push(t)},t.prototype.abort=function(){this.listeners.forEach((function(t){return t()}))},t}();var ie,oe,se={},ae=[],ue={},ce="dataLayer",he="gtag",fe=!1;function le(t){if(fe)throw Qt.create("already-initialized");t.dataLayerName&&(ce=t.dataLayerName),t.gtagName&&(he=t.gtagName)}function pe(t,e){!function(){var t=[];if(d()&&t.push("This is a browser extension environment."),g()||t.push("Cookies are not available."),t.length>0){var e=t.map((function(t,e){return"("+(e+1)+") "+t})).join(" "),n=Qt.create("invalid-analytics-context",{errorInfo:e});Wt.warn(n.message)}}();var n=t.options.appId;if(!n)throw Qt.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw Qt.create("no-api-key");Wt.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID '+t.options.measurementId+' provided in the "measurementId" field in the local Firebase config.')}if(null!=se[n])throw Qt.create("already-exists",{id:n});if(!fe){(function(){for(var t=window.document.getElementsByTagName("script"),e=0,n=Object.values(t);e<n.length;e++){var r=n[e];if(r.src&&r.src.includes(Kt))return r}return null})()||function(t){var e=document.createElement("script");e.src=Kt+"?l="+t,e.async=!0,document.head.appendChild(e)}(ce),function(t){var e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(ce);var s=function(t,e,n,r,s){var a=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];window[r].push(arguments)};return window[s]&&"function"==typeof window[s]&&(a=window[s]),window[s]=function(t,e,n,r){return function(s,a,u){return i(this,void 0,void 0,(function(){var i;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),s!==Gt.EVENT?[3,2]:[4,Yt(t,e,n,a,u)];case 1:return o.sent(),[3,5];case 2:return s!==Gt.CONFIG?[3,4]:[4,Xt(t,e,n,r,a,u)];case 3:return o.sent(),[3,5];case 4:t(Gt.SET,a),o.label=5;case 5:return[3,7];case 6:return i=o.sent(),Wt.error(i),[3,7];case 7:return[2]}}))}))}}(a,t,e,n),{gtagCore:a,wrappedGtag:window[s]}}(se,ae,ue,ce,he),a=s.wrappedGtag,u=s.gtagCore;oe=a,ie=u,fe=!0}return se[n]=function(t,e,n,r,s){return i(this,void 0,void 0,(function(){var a,u,c,h,f,l,p;return o(this,(function(d){switch(d.label){case 0:return(a=function(t,e,n){return void 0===e&&(e=$t),i(this,void 0,void 0,(function(){var n,r,s,a,u,c,h=this;return o(this,(function(f){if(n=t.options,r=n.appId,s=n.apiKey,a=n.measurementId,!r)throw Qt.create("no-app-id");if(!s){if(a)return[2,{measurementId:a,appId:r}];throw Qt.create("no-api-key")}return u=e.getThrottleMetadata(r)||{backoffCount:0,throttleEndTimeMillis:Date.now()},c=new re,setTimeout((function(){return i(h,void 0,void 0,(function(){return o(this,(function(t){return c.abort(),[2]}))}))}),6e4),[2,ee({appId:r,apiKey:s,measurementId:a},u,c,e)]}))}))}(t)).then((function(e){n[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&Wt.warn("The measurement ID in the local Firebase config ("+t.options.measurementId+") does not match the measurement ID fetched from the server ("+e.measurementId+"). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.")})).catch((function(t){return Wt.error(t)})),e.push(a),u=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return v()?[3,1]:(Wt.warn(Qt.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),[2,!1]);case 1:return e.trys.push([1,3,,4]),[4,y()];case 2:return e.sent(),[3,4];case 3:return t=e.sent(),Wt.warn(Qt.create("indexeddb-unavailable",{errorInfo:t}).message),[2,!1];case 4:return[2,!0]}}))}))}().then((function(t){return t?r.getId():void 0})),[4,Promise.all([a,u])];case 1:return c=d.sent(),h=c[0],f=c[1],s("js",new Date),(p={}).origin="firebase",p.update=!0,l=p,null!=f&&(l.firebase_id=f),s(Gt.CONFIG,h.measurementId,l),[2,h.measurementId]}}))}))}(t,ae,ue,e,ie),{app:t,logEvent:function(t,e,s){(function(t,e,n,s,a){return i(this,void 0,void 0,(function(){var i,u;return o(this,(function(o){switch(o.label){case 0:return a&&a.global?(t(Gt.EVENT,n,s),[2]):[3,1];case 1:return[4,e];case 2:i=o.sent(),u=r(r({},s),{send_to:i}),t(Gt.EVENT,n,u),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e,s).catch((function(t){return Wt.error(t)}))},setCurrentScreen:function(t,e){(function(t,e,n,r){return i(this,void 0,void 0,(function(){var i;return o(this,(function(o){switch(o.label){case 0:return r&&r.global?(t(Gt.SET,{screen_name:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=o.sent(),t(Gt.CONFIG,i,{update:!0,screen_name:n}),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e).catch((function(t){return Wt.error(t)}))},setUserId:function(t,e){(function(t,e,n,r){return i(this,void 0,void 0,(function(){var i;return o(this,(function(o){switch(o.label){case 0:return r&&r.global?(t(Gt.SET,{user_id:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=o.sent(),t(Gt.CONFIG,i,{update:!0,user_id:n}),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e).catch((function(t){return Wt.error(t)}))},setUserProperties:function(t,e){(function(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:if(!r||!r.global)return[3,1];for(i={},s=0,a=Object.keys(n);s<a.length;s++)u=a[s],i["user_properties."+u]=n[u];return t(Gt.SET,i),[2,Promise.resolve()];case 1:return[4,e];case 2:c=o.sent(),t(Gt.CONFIG,c,{update:!0,user_properties:n}),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e).catch((function(t){return Wt.error(t)}))},setAnalyticsCollectionEnabled:function(t){(function(t,e){return i(this,void 0,void 0,(function(){var n;return o(this,(function(r){switch(r.label){case 0:return[4,t];case 1:return n=r.sent(),window["ga-disable-"+n]=!e,[2]}}))}))})(se[n],t).catch((function(t){return Wt.error(t)}))},INTERNAL:{delete:function(){return delete se[n],Promise.resolve()}}}}var de="analytics";function ve(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:if(d())return[2,!1];if(!g())return[2,!1];if(!v())return[2,!1];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,y()];case 2:return[2,t.sent()];case 3:return t.sent(),[2,!1];case 4:return[2]}}))}))}!function(t){t.INTERNAL.registerComponent(new k(de,(function(t){return pe(t.getProvider("app").getImmediate(),t.getProvider("installations").getImmediate())}),"PUBLIC").setServiceProps({settings:le,EventName:zt,isSupported:ve})),t.INTERNAL.registerComponent(new k("analytics-internal",(function(t){try{return{logEvent:t.getProvider(de).getImmediate().logEvent}}catch(t){throw Qt.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),t.registerVersion("@firebase/analytics","0.6.2")}(et),function(){var t,e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},r=function(t){t=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g,t];for(var e=0;e<t.length;++e){var r=t[e];if(r&&r.Math==Math)return r}return globalThis}(this);function i(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function o(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:i(t)}}!function(t,n){if(n){var i=r;t=t.split(".");for(var o=0;o<t.length-1;o++){var s=t[o];s in i||(i[s]={}),i=i[s]}(n=n(o=i[t=t[t.length-1]]))!=o&&null!=n&&e(i,t,{configurable:!0,writable:!0,value:n})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function i(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var s=r.setTimeout;n.prototype.c=function(t){s(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.v),reject:t(this.g)}},e.prototype.v=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.o(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.m(t):this.h(t)}},e.prototype.m=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.u(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)a.b(this.a[t]);this.a=null}};var a=new n;return e.prototype.o=function(t){var e=this.f();t.Pa(e.resolve,e.reject)},e.prototype.u=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{i(t(e))}catch(t){o(t)}}:e}var i,o,s=new e((function(t,e){i=t,o=e}));return this.Pa(r(t,i),r(n,o)),s},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Pa=function(t,e){function n(){switch(r.b){case 1:t(r.c);break;case 2:e(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?a.b(n):this.a.push(n)},e.resolve=i,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var r=o(t),s=r.next();!s.done;s=r.next())i(s.value).Pa(e,n)}))},e.all=function(t){var n=o(t),r=n.next();return r.done?i([]):new e((function(t,e){function o(e){return function(n){s[e]=n,0==--a&&t(s)}}var s=[],a=0;do{s.push(void 0),a++,i(r.value).Pa(o(s.length-1),e),r=n.next()}while(!r.done)}))},e}));var s=s||{},a=this||self,u=/^[\w+/_-]+[=]{0,2}$/,c=null;function h(t){return(t=t.querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&u.test(t)?t:""}function f(){}function l(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function p(t){var e=l(t);return"array"==e||"object"==e&&"number"==typeof t.length}function d(t){return"function"==l(t)}function v(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function y(t){return Object.prototype.hasOwnProperty.call(t,g)&&t[g]||(t[g]=++m)}var g="closure_uid_"+(1e9*Math.random()>>>0),m=0;function b(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function I(t,e,n){return(I=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?b:w).apply(null,arguments)}function E(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var A=Date.now;function _(t,e){function n(){}n.prototype=e.prototype,t.$a=e.prototype,t.prototype=new n,t.prototype.constructor=t}function T(t){return t}function S(t,e,n){this.code=C+t,this.message=e||x[t]||"",this.a=n||null}function N(t){var e=t&&t.code;return e?new S(e.substring(C.length),t.message,t.serverResponse):null}_(S,Error),S.prototype.w=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},S.prototype.toJSON=function(){return this.w()};var k,C="auth/",x={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},O={kd:{Sa:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},rd:{Sa:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://securetoken.googleapis.com/v1/token",Va:"https://identitytoolkit.googleapis.com/v2/",id:"p"},td:{Sa:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},ud:{Sa:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Ya:"https://test-securetoken.sandbox.googleapis.com/v1/token",Va:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function D(t){for(var e in O)if(O[e].id===t)return{firebaseEndpoint:(t=O[e]).Sa,secureTokenEndpoint:t.Ya,identityPlatformEndpoint:t.Va};return null}function P(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function R(t){if(Error.captureStackTrace)Error.captureStackTrace(this,R);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function L(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");R.call(this,n+t[r])}function M(t,e){throw new L("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function V(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function j(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function U(){this.b=this.a=null}k=D("__EID__")?"__EID__":void 0,_(R,Error),R.prototype.name="CustomError",_(L,R),L.prototype.name="AssertionError",V.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var B=new V((function(){return new q}),(function(t){t.reset()}));function F(){var t=we,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function q(){this.next=this.b=this.a=null}U.prototype.add=function(t,e){var n=B.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},q.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},q.prototype.reset=function(){this.next=this.b=this.a=null};var G=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},z=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)},K=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=[],i=0,o="string"==typeof t?t.split(""):t,s=0;s<n;s++)if(s in o){var a=o[s];e.call(void 0,a,s,t)&&(r[i++]=a)}return r},H=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),i="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in i&&(r[o]=e.call(void 0,i[o],o,t));return r},W=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function X(t,e){return 0<=G(t,e)}function Y(t,e){var n;return(n=0<=(e=G(t,e)))&&Array.prototype.splice.call(t,e,1),n}function J(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,r=t.length-1;0<=r;--r)r in n&&e.call(void 0,n[r],r,t)}(t,(function(n,r){e.call(void 0,n,r,t)&&Array.prototype.splice.call(t,r,1).length}))}function Q(t){return Array.prototype.concat.apply([],arguments)}function $(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}var Z,tt=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},nt=/&/g,rt=/</g,it=/>/g,ot=/"/g,st=/'/g,at=/\x00/g,ut=/[\x00&<>"']/;function ct(t,e){return-1!=t.indexOf(e)}function ht(t,e){return t<e?-1:t>e?1:0}t:{var ft=a.navigator;if(ft){var lt=ft.userAgent;if(lt){Z=lt;break t}}Z=""}function pt(t){return ct(Z,t)}function dt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function vt(t){for(var e in t)return!1;return!0}function yt(t){var e,n={};for(e in t)n[e]=t[e];return n}var gt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function mt(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<gt.length;o++)n=gt[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function bt(t,e){t:{try{var n=t&&t.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||a).Element&&r.Location){var i=r;break t}}catch(t){}i=null}if(i&&void 0!==i[e]&&(!t||!(t instanceof i[e])&&(t instanceof i.Location||t instanceof i.Element))){if(v(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;M("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function wt(t,e){this.a=t===_t&&e||"",this.b=At}function It(t){return t instanceof wt&&t.constructor===wt&&t.b===At?t.a:(M("expected object of type Const, got '"+t+"'"),"type_error:Const")}wt.prototype.sa=!0,wt.prototype.ra=function(){return this.a},wt.prototype.toString=function(){return"Const{"+this.a+"}"};var Et,At={},_t={};function Tt(){if(void 0===Et){var t=null,e=a.trustedTypes;if(e&&e.createPolicy){try{t=e.createPolicy("goog#html",{createHTML:T,createScript:T,createScriptURL:T})}catch(t){a.console&&a.console.error(t.message)}Et=t}else Et=t}return Et}function St(t,e){this.a=e===Ot?t:""}function Nt(t){return t instanceof St&&t.constructor===St?t.a:(M("expected object of type TrustedResourceUrl, got '"+t+"' of type "+l(t)),"type_error:TrustedResourceUrl")}function kt(t,e){var n=It(t);if(!xt.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=Tt();return new St(t=e?e.createScriptURL(t):t,Ot)}(t=n.replace(Ct,(function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof wt?It(t):encodeURIComponent(String(t))})))}St.prototype.sa=!0,St.prototype.ra=function(){return this.a.toString()},St.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var Ct=/%{(\w+)}/g,xt=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Ot={};function Dt(t,e){this.a=e===Ut?t:""}function Pt(t){return t instanceof Dt&&t.constructor===Dt?t.a:(M("expected object of type SafeUrl, got '"+t+"' of type "+l(t)),"type_error:SafeUrl")}Dt.prototype.sa=!0,Dt.prototype.ra=function(){return this.a.toString()},Dt.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Rt=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Lt=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Mt=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Vt(t){if(t instanceof Dt)return t;if(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t))t=new Dt(t,Ut);else{var e=(t=(t=String(t)).replace(/(%0A|%0D)/g,"")).match(Lt);t=e&&Rt.test(e[1])?new Dt(t,Ut):null}return t}function jt(t){return t instanceof Dt?t:(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t)||(t="about:invalid#zClosurez"),new Dt(t,Ut))}var Ut={},Bt=new Dt("about:invalid#zClosurez",Ut);function Ft(t,e,n){this.a=n===qt?t:""}Ft.prototype.sa=!0,Ft.prototype.ra=function(){return this.a.toString()},Ft.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var qt={};function Gt(t,e,n,r){return t=t instanceof Dt?t:jt(t),e=e||a,n=n instanceof wt?It(n):n||"",e.open(Pt(t),n,r,void 0)}function zt(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Kt(t){return ut.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(nt,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(rt,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(it,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(ot,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(st,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(at,"&#0;"))),t}function Ht(t){return Ht[" "](t),t}Ht[" "]=f;var Wt,Xt,Yt=pt("Opera"),Jt=pt("Trident")||pt("MSIE"),Qt=pt("Edge"),$t=Qt||Jt,Zt=pt("Gecko")&&!(ct(Z.toLowerCase(),"webkit")&&!pt("Edge"))&&!(pt("Trident")||pt("MSIE"))&&!pt("Edge"),te=ct(Z.toLowerCase(),"webkit")&&!pt("Edge");function ee(){var t=a.document;return t?t.documentMode:void 0}t:{var ne="",re=(Xt=Z,Zt?/rv:([^\);]+)(\)|;)/.exec(Xt):Qt?/Edge\/([\d\.]+)/.exec(Xt):Jt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Xt):te?/WebKit\/(\S+)/.exec(Xt):Yt?/(?:Version)[ \/]?(\S+)/.exec(Xt):void 0);if(re&&(ne=re?re[1]:""),Jt){var ie=ee();if(null!=ie&&ie>parseFloat(ne)){Wt=String(ie);break t}}Wt=ne}var oe,se={};function ae(t){return function(t,e){var n=se;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=tt(String(Wt)).split("."),r=tt(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var s=n[o]||"",a=r[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],0==s[0].length&&0==a[0].length)break;e=ht(0==s[1].length?0:parseInt(s[1],10),0==a[1].length?0:parseInt(a[1],10))||ht(0==s[2].length,0==a[2].length)||ht(s[2],a[2]),s=s[3],a=a[3]}while(0==e)}return 0<=e}))}a.document&&Jt?oe=ee()||parseInt(Wt,10)||void 0:oe=void 0;var ue=oe;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Xt){}var ce=!Jt||9<=Number(ue);function he(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function fe(t,e){dt(e,(function(e,n){e&&"object"==typeof e&&e.sa&&(e=e.ra()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:de.hasOwnProperty(n)?t.setAttribute(de[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var le,pe,de={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function ve(t,e,n){function r(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];if(!p(o)||v(o)&&0<o.nodeType)r(o);else{t:{if(o&&"number"==typeof o.length){if(v(o)){var s="function"==typeof o.item||"string"==typeof o.item;break t}if(d(o)){s="function"==typeof o.item;break t}}s=!1}z(s?$(o):o,r)}}}function ye(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function ge(t){a.setTimeout((function(){throw t}),0)}function me(t,e){pe||function(){if(a.Promise&&a.Promise.resolve){var t=a.Promise.resolve(void 0);pe=function(){t.then(Ie)}}else pe=function(){var t=Ie;!d(a.setImmediate)||a.Window&&a.Window.prototype&&!pt("Edge")&&a.Window.prototype.setImmediate==a.setImmediate?(le||(le=function(){var t=a.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!pt("Presto")&&(t=function(){var t=ye(document,"IFRAME");t.style.display="none",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=I((function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!pt("Trident")&&!pt("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Fb;n.Fb=null,t()}},function(t){r.next={Fb:t},r=r.next,e.port2.postMessage(0)}}return function(t){a.setTimeout(t,0)}}()),le(t)):a.setImmediate(t)}}(),be||(pe(),be=!0),we.add(t,e)}var be=!1,we=new U;function Ie(){for(var t;t=F();){try{t.a.call(t.b)}catch(t){ge(t)}j(B,t)}be=!1}function Ee(t,e){if(this.a=Ae,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=f)try{var n=this;t.call(e,(function(t){Me(n,_e,t)}),(function(t){if(!(t instanceof Ge))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Me(n,Te,t)}))}catch(t){Me(this,Te,t)}}var Ae=0,_e=2,Te=3;function Se(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Se.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Ne=new V((function(){return new Se}),(function(t){t.reset()}));function ke(t,e,n){var r=Ne.get();return r.g=t,r.b=e,r.f=n,r}function Ce(t){if(t instanceof Ee)return t;var e=new Ee(f);return Me(e,_e,t),e}function xe(t){return new Ee((function(e,n){n(t)}))}function Oe(t,e,n){Ve(t,e,n,null)||me(E(e,t))}function De(t){return new Ee((function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Ob:!0,value:o}:{Ob:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)Oe(t[o],E(i,o,!0),E(i,o,!1));else e(r)}))}function Pe(t,e){if(t.a==Ae)if(t.c){var n=t.c;if(n.b){for(var r=0,i=null,o=null,s=n.b;s&&(s.c||(r++,s.a==t&&(i=s),!(i&&1<r)));s=s.next)i||(o=s);i&&(n.a==Ae&&1==r?Pe(n,e):(o?((r=o).next==n.f&&(n.f=r),r.next=r.next.next):Ue(n),Be(n,i,Te,e)))}t.c=null}else Me(t,Te,e)}function Re(t,e){t.b||t.a!=_e&&t.a!=Te||je(t),t.f?t.f.next=e:t.b=e,t.f=e}function Le(t,e,n,r){var i=ke(null,null,null);return i.a=new Ee((function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof Ge?o(e):t(i)}catch(t){o(t)}}:o})),i.a.c=t,Re(t,i),i.a}function Me(t,e,n){t.a==Ae&&(t===n&&(e=Te,n=new TypeError("Promise cannot resolve to itself")),t.a=1,Ve(n,t.Zc,t.$c,t)||(t.i=n,t.a=e,t.c=null,je(t),e!=Te||n instanceof Ge||function(t,e){t.g=!0,me((function(){t.g&&qe.call(null,e)}))}(t,n)))}function Ve(t,e,n,r){if(t instanceof Ee)return Re(t,ke(e||f,n||null,r)),!0;if(P(t))return t.then(e,n,r),!0;if(v(t))try{var i=t.then;if(d(i))return function(t,e,n,r,i){function o(t){s||(s=!0,r.call(i,t))}var s=!1;try{e.call(t,(function(t){s||(s=!0,n.call(i,t))}),o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function je(t){t.h||(t.h=!0,me(t.fc,t))}function Ue(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Be(t,e,n,r){if(n==Te&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Fe(e,n,r);else try{e.c?e.g.call(e.f):Fe(e,n,r)}catch(t){qe.call(null,t)}j(Ne,e)}function Fe(t,e,n){e==_e?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}Ee.prototype.then=function(t,e,n){return Le(this,d(t)?t:null,d(e)?e:null,n)},Ee.prototype.$goog_Thenable=!0,(t=Ee.prototype).na=function(t,e){return(t=ke(t,t,e)).c=!0,Re(this,t),this},t.s=function(t,e){return Le(this,null,t,e)},t.cancel=function(t){if(this.a==Ae){var e=new Ge(t);me((function(){Pe(this,e)}),this)}},t.Zc=function(t){this.a=Ae,Me(this,_e,t)},t.$c=function(t){this.a=Ae,Me(this,Te,t)},t.fc=function(){for(var t;t=Ue(this);)Be(this,t,this.a,this.i);this.h=!1};var qe=ge;function Ge(t){R.call(this,t)}function ze(){0!=Ke&&(He[y(this)]=this),this.xa=this.xa,this.oa=this.oa}_(Ge,R),Ge.prototype.name="cancel";var Ke=0,He={};function We(t){if(!t.xa&&(t.xa=!0,t.Da(),0!=Ke)){var e=y(t);if(0!=Ke&&t.oa&&0<t.oa.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete He[e]}}ze.prototype.xa=!1,ze.prototype.Da=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()};var Xe=Object.freeze||function(t){return t},Ye=!Jt||9<=Number(ue),Je=Jt&&!ae("9"),Qe=function(){if(!a.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{a.addEventListener("test",f,e),a.removeEventListener("test",f,e)}catch(t){}return t}();function $e(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Ze(t,e){if($e.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Zt){t:{try{Ht(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:tn[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}$e.prototype.preventDefault=function(){this.defaultPrevented=!0},_(Ze,$e);var tn=Xe({2:"touch",3:"pen",4:"mouse"});Ze.prototype.preventDefault=function(){Ze.$a.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Je)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Ze.prototype.g=function(){return this.a};var en="closure_listenable_"+(1e6*Math.random()|0),nn=0;function rn(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.Ua=i,this.key=++nn,this.va=this.Oa=!1}function on(t){t.va=!0,t.listener=null,t.proxy=null,t.src=null,t.Ua=null}function sn(t){this.src=t,this.a={},this.b=0}function an(t,e){var n=e.type;n in t.a&&Y(t.a[n],e)&&(on(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function un(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.va&&o.listener==e&&o.capture==!!n&&o.Ua==r)return i}return-1}sn.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var s=un(t,e,r,i);return-1<s?(e=t[s],n||(e.Oa=!1)):((e=new rn(e,this.src,o,!!r,i)).Oa=n,t.push(e)),e};var cn="closure_lm_"+(1e6*Math.random()|0),hn={};function fn(t,e,n,r,i){if(r&&r.once)pn(t,e,n,r,i);else if(Array.isArray(e))for(var o=0;o<e.length;o++)fn(t,e[o],n,r,i);else n=En(n),t&&t[en]?_n(t,e,n,v(r)?!!r.capture:!!r,i):ln(t,e,n,!1,r,i)}function ln(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var s=v(i)?!!i.capture:!!i,a=wn(t);if(a||(t[cn]=a=new sn(t)),!(n=a.add(e,n,r,s,o)).proxy)if(r=function(){var t=bn,e=Ye?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)Qe||(i=s),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(yn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}}function pn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)pn(t,e[o],n,r,i);else n=En(n),t&&t[en]?Tn(t,e,n,v(r)?!!r.capture:!!r,i):ln(t,e,n,!0,r,i)}function dn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)dn(t,e[o],n,r,i);else r=v(r)?!!r.capture:!!r,n=En(n),t&&t[en]?(t=t.v,(e=String(e).toString())in t.a&&-1<(n=un(o=t.a[e],n,r,i))&&(on(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=wn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=un(e,n,r,i)),(n=-1<t?e[t]:null)&&vn(n))}function vn(t){if("number"!=typeof t&&t&&!t.va){var e=t.src;if(e&&e[en])an(e.v,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(yn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=wn(e))?(an(n,t),0==n.b&&(n.src=null,e[cn]=null)):on(t)}}}function yn(t){return t in hn?hn[t]:hn[t]="on"+t}function gn(t,e,n,r){var i=!0;if((t=wn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.va&&(o=mn(o,r),i=i&&!1!==o)}return i}function mn(t,e){var n=t.listener,r=t.Ua||t.src;return t.Oa&&vn(t),n.call(r,e)}function bn(t,e){if(t.va)return!0;if(!Ye){if(!e)t:{e=["window","event"];for(var n=a,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}if(e=new Ze(r=e,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){t:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=e.b;i;i=i.parentNode)r.push(i);for(t=t.type,i=r.length-1;0<=i;i--){e.b=r[i];var o=gn(r[i],t,!0,e);n=n&&o}for(i=0;i<r.length;i++)e.b=r[i],o=gn(r[i],t,!1,e),n=n&&o}return n}return mn(t,new Ze(e,this))}function wn(t){return(t=t[cn])instanceof sn?t:null}var In="__closure_events_fn_"+(1e9*Math.random()>>>0);function En(t){return d(t)?t:(t[In]||(t[In]=function(e){return t.handleEvent(e)}),t[In])}function An(){ze.call(this),this.v=new sn(this),this.$b=this,this.fb=null}function _n(t,e,n,r,i){t.v.add(String(e),n,!1,r,i)}function Tn(t,e,n,r,i){t.v.add(String(e),n,!0,r,i)}function Sn(t,e,n,r){if(!(e=t.v.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var s=e[o];if(s&&!s.va&&s.capture==n){var a=s.listener,u=s.Ua||s.src;s.Oa&&an(t.v,s),i=!1!==a.call(u,r)&&i}}return i&&!r.defaultPrevented}function Nn(t,e,n){if(d(t))n&&(t=I(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=I(t.handleEvent,t)}return 2147483647<Number(e)?-1:a.setTimeout(t,e||0)}function kn(t){var e=null;return new Ee((function(n,r){-1==(e=Nn((function(){n(void 0)}),t))&&r(Error("Failed to schedule timer."))})).s((function(t){throw a.clearTimeout(e),t}))}function Cn(t){if(t.V&&"function"==typeof t.V)return t.V();if("string"==typeof t)return t.split("");if(p(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function xn(t){if(t.Y&&"function"==typeof t.Y)return t.Y();if(!t.V||"function"!=typeof t.V){if(p(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function On(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof On)for(n=t.Y(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Dn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Pn(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Pn(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Pn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}_(An,ze),An.prototype[en]=!0,An.prototype.addEventListener=function(t,e,n,r){fn(this,t,e,n,r)},An.prototype.removeEventListener=function(t,e,n,r){dn(this,t,e,n,r)},An.prototype.dispatchEvent=function(t){var e,n=this.fb;if(n)for(e=[];n;n=n.fb)e.push(n);n=this.$b;var r=t.type||t;if("string"==typeof t)t=new $e(t,n);else if(t instanceof $e)t.target=t.target||n;else{var i=t;mt(t=new $e(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var s=t.b=e[o];i=Sn(s,r,!0,t)&&i}if(i=Sn(s=t.b=n,r,!0,t)&&i,i=Sn(s,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=Sn(s=t.b=e[o],r,!1,t)&&i;return i},An.prototype.Da=function(){if(An.$a.Da.call(this),this.v){var t,e=this.v;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)on(n[r]);delete e.a[t],e.b--}}this.fb=null},(t=On.prototype).V=function(){Dn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.Y=function(){return Dn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Pn(this.b,t)?this.b[t]:e},t.set=function(t,e){Pn(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.Y(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Rn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Ln(t,e){var n;this.a=this.l=this.f="",this.g=null,this.h=this.c="",this.i=!1,t instanceof Ln?(this.i=void 0!==e?e:t.i,Mn(this,t.f),this.l=t.l,this.a=t.a,Vn(this,t.g),this.c=t.c,jn(this,rr(t.b)),this.h=t.h):t&&(n=String(t).match(Rn))?(this.i=!!e,Mn(this,n[1]||"",!0),this.l=Gn(n[2]||""),this.a=Gn(n[3]||"",!0),Vn(this,n[4]),this.c=Gn(n[5]||"",!0),jn(this,n[6]||"",!0),this.h=Gn(n[7]||"")):(this.i=!!e,this.b=new Qn(null,this.i))}function Mn(t,e,n){t.f=n?Gn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Vn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.g=e}else t.g=null}function jn(t,e,n){e instanceof Qn?(t.b=e,function(t,e){e&&!t.f&&($n(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(tr(this,e),nr(this,n,t))}),t)),t.f=e}(t.b,t.i)):(n||(e=zn(e,Yn)),t.b=new Qn(e,t.i))}function Un(t,e,n){t.b.set(e,n)}function Bn(t,e){return t.b.get(e)}function Fn(t){return t instanceof Ln?new Ln(t):new Ln(t,void 0)}function qn(t,e,n,r){var i=new Ln(null,void 0);return t&&Mn(i,t),e&&(i.a=e),n&&Vn(i,n),r&&(i.c=r),i}function Gn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function zn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Kn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Kn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Ln.prototype.toString=function(){var t=[],e=this.f;e&&t.push(zn(e,Hn,!0),":");var n=this.a;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(zn(e,Hn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.g)&&t.push(":",String(n))),(n=this.c)&&(this.a&&"/"!=n.charAt(0)&&t.push("/"),t.push(zn(n,"/"==n.charAt(0)?Xn:Wn,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.h)&&t.push("#",zn(n,Jn)),t.join("")},Ln.prototype.resolve=function(t){var e=new Ln(this),n=!!t.f;n?Mn(e,t.f):n=!!t.l,n?e.l=t.l:n=!!t.a,n?e.a=t.a:n=null!=t.g;var r=t.c;if(n)Vn(e,t.g);else if(n=!!t.c){if("/"!=r.charAt(0))if(this.a&&!this.c)r="/"+r;else{var i=e.c.lastIndexOf("/");-1!=i&&(r=e.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(ct(i,"./")||ct(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],s=0;s<i.length;){var a=i[s++];"."==a?r&&s==i.length&&o.push(""):".."==a?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&s==i.length&&o.push("")):(o.push(a),r=!0)}r=o.join("/")}else r=i}return n?e.c=r:n=""!==t.b.toString(),n?jn(e,rr(t.b)):n=!!t.h,n&&(e.h=t.h),e};var Hn=/[#\/\?@]/g,Wn=/[#\?:]/g,Xn=/[#\?]/g,Yn=/[#\?@]/g,Jn=/#/g;function Qn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function $n(t){t.a||(t.a=new On,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Zn(t){var e=xn(t);if(void 0===e)throw Error("Keys are undefined");var n=new Qn(null,void 0);t=Cn(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];Array.isArray(o)?nr(n,i,o):n.add(i,o)}return n}function tr(t,e){$n(t),e=ir(t,e),Pn(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Pn((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Dn(t)))}function er(t,e){return $n(t),e=ir(t,e),Pn(t.a.b,e)}function nr(t,e,n){tr(t,e),0<n.length&&(t.c=null,t.a.set(ir(t,e),$(n)),t.b+=n.length)}function rr(t){var e=new Qn;return e.c=t.c,t.a&&(e.a=new On(t.a),e.b=t.b),e}function ir(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function or(t){var e=[];return ar(new sr,t,e),e.join("")}function sr(){}function ar(t,e,n){if(null==e)n.push("null");else{if("object"==typeof e){if(Array.isArray(e)){var r=e;e=r.length,n.push("[");for(var i="",o=0;o<e;o++)n.push(i),ar(t,r[o],n),i=",";return void n.push("]")}if(!(e instanceof String||e instanceof Number||e instanceof Boolean)){for(r in n.push("{"),i="",e)Object.prototype.hasOwnProperty.call(e,r)&&"function"!=typeof(o=e[r])&&(n.push(i),hr(r,n),n.push(":"),ar(t,o,n),i=",");return void n.push("}")}e=e.valueOf()}switch(typeof e){case"string":hr(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?String(e):"null");break;case"boolean":n.push(String(e));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof e)}}}(t=Qn.prototype).add=function(t,e){$n(this),this.c=null,t=ir(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){$n(this),this.a.forEach((function(n,r){z(n,(function(n){t.call(e,n,r,this)}),this)}),this)},t.Y=function(){$n(this);for(var t=this.a.V(),e=this.a.Y(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.V=function(t){$n(this);var e=[];if("string"==typeof t)er(this,t)&&(e=Q(e,this.a.get(ir(this,t))));else{t=this.a.V();for(var n=0;n<t.length;n++)e=Q(e,t[n])}return e},t.set=function(t,e){return $n(this),this.c=null,er(this,t=ir(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return t&&0<(t=this.V(t)).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.Y(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.V(r);for(var o=0;o<r.length;o++){var s=i;""!==r[o]&&(s+="="+encodeURIComponent(String(r[o]))),t.push(s)}}return this.c=t.join("&")};var ur={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},cr=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function hr(t,e){e.push('"',t.replace(cr,(function(t){var e=ur[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ur[t]=e),e})),'"')}function fr(){var t=Or();return Jt&&!!ue&&11==ue||/Edge\/\d+/.test(t)}function lr(){return a.window&&a.window.location.href||self&&self.location&&self.location.href||""}function pr(t,e){e=e||a.window;var n="about:blank";t&&(n=Pt(Vt(t)||Bt)),e.location.href=n}function dr(t,e){var n,r=[];for(n in t)n in e?typeof t[n]!=typeof e[n]?r.push(n):"object"==typeof t[n]&&null!=t[n]&&null!=e[n]?0<dr(t[n],e[n]).length&&r.push(n):t[n]!==e[n]&&r.push(n):r.push(n);for(n in e)n in t||r.push(n);return r}function vr(t){return!!((t=(t||Or()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function yr(t){t=t||a.window;try{t.close()}catch(t){}}function gr(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(s in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Or().toLowerCase(),r&&(e.target=r,ct(n,"crios/")&&(e.target="_blank")),kr(Or())==Sr&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof Dt?n:Vt(void 0!==n.href?n.href:String(n))||Bt,n=t.target||n.target,i=[],t)switch(s){case"width":case"height":case"top":case"left":i.push(s+"="+t[s]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(s+"="+(t[s]?1:0))}var s=i.join(",");if((pt("iPhone")&&!pt("iPod")&&!pt("iPad")||pt("iPad")||pt("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(bt(s=ye(document,"A"),"HTMLAnchorElement"),e=e instanceof Dt?e:jt(e),s.href=Pt(e),s.setAttribute("target",n),t.noreferrer&&s.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),s.dispatchEvent(t),s={}):t.noreferrer?(s=Gt("",r,n,s),t=Pt(e),s&&($t&&ct(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),s.opener=null,t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Kt(t)+'">',t=new Ft(t=(r=Tt())?r.createHTML(t):t,null,qt),r=s.document)&&(r.write(function(t){return t instanceof Ft&&t.constructor===Ft?t.a:(M("expected object of type SafeHtml, got '"+t+"' of type "+l(t)),"type_error:SafeHtml")}(t)),r.close())):(s=Gt(e,r,n,s))&&t.noopener&&(s.opener=null),s)try{s.focus()}catch(t){}return s}var mr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,br=/^[^@]+@[^@]+$/;function wr(){var t=null;return new Ee((function(e){"complete"==a.document.readyState?e():(t=function(){e()},pn(window,"load",t))})).s((function(e){throw dn(window,"load",t),e}))}function Ir(t){return t=t||Or(),!("file:"!==Mr()&&"ionic:"!==Mr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function Er(){var t=a.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Ar(){return void 0!==a.WorkerGlobalScope&&"function"==typeof a.importScripts}function _r(){return et.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":et.INTERNAL.hasOwnProperty("node")?"Node":Ar()?"Worker":"Browser"}function Tr(){var t=_r();return"ReactNative"===t||"Node"===t}var Sr="Firefox",Nr="Chrome";function kr(t){var e=t.toLowerCase();return ct(e,"opera/")||ct(e,"opr/")||ct(e,"opios/")?"Opera":ct(e,"iemobile")?"IEMobile":ct(e,"msie")||ct(e,"trident/")?"IE":ct(e,"edge/")?"Edge":ct(e,"firefox/")?Sr:ct(e,"silk/")?"Silk":ct(e,"blackberry")?"Blackberry":ct(e,"webos")?"Webos":!ct(e,"safari/")||ct(e,"chrome/")||ct(e,"crios/")||ct(e,"android")?!ct(e,"chrome/")&&!ct(e,"crios/")||ct(e,"edge/")?ct(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":Nr:"Safari"}var Cr={ld:"FirebaseCore-web",nd:"FirebaseUI-web"};function xr(t,e){e=e||[];var n,r=[],i={};for(n in Cr)i[Cr[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=_r())?r=kr(i=Or()):"Worker"===r&&(r=kr(i=Or())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function Or(){return a.navigator&&a.navigator.userAgent||""}function Dr(t,e){t=t.split("."),e=e||a;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function Pr(){try{var t=a.localStorage,e=Fr();if(t)return t.setItem(e,"1"),t.removeItem(e),!fr()||!!a.indexedDB}catch(t){return Ar()&&!!a.indexedDB}return!1}function Rr(){return(Lr()||"chrome-extension:"===Mr()||Ir())&&!Tr()&&Pr()&&!Ar()}function Lr(){return"http:"===Mr()||"https:"===Mr()}function Mr(){return a.location&&a.location.protocol||null}function Vr(t){return!vr(t=t||Or())&&kr(t)!=Sr}function jr(t){return void 0===t?null:or(t)}function Ur(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Br(t){if(null!==t)return JSON.parse(t)}function Fr(t){return t||Math.floor(1e9*Math.random()).toString()}function qr(t){return"Safari"!=kr(t=t||Or())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Gr(){var t=a.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function zr(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Or(),e=_r(),this.b=vr(t)||"ReactNative"===e}function Kr(){var t=a.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Hr(t){"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t)}function Wr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Xr(){return!(!Dr("fireauth.oauthhelper",a)&&!Dr("fireauth.iframe",a))}zr.prototype.get=function(){var t=a.navigator;return!t||"boolean"!=typeof t.onLine||!Lr()&&"chrome-extension:"!==Mr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Yr,Jr={};function Qr(t){Jr[t]||(Jr[t]=!0,Hr(t))}try{var $r={};Object.defineProperty($r,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty($r,"abcd",{configurable:!0,enumerable:!0,value:2}),Yr=2==$r.abcd}catch(Xt){Yr=!1}function Zr(t,e,n){Yr?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function ti(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Zr(t,n,e[n])}function ei(t){var e={};return ti(e,t),e}function ni(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Zr(e,n,ni(t[n]));return e}function ri(t){var e=t&&(t[ui]?"phone":null);if(!(e&&t&&t[ai]))throw new S("internal-error","Internal assert: invalid MultiFactorInfo object");Zr(this,"uid",t[ai]),Zr(this,"displayName",t[oi]||null);var n=null;t[si]&&(n=new Date(t[si]).toUTCString()),Zr(this,"enrollmentTime",n),Zr(this,"factorId",e)}function ii(t){try{var e=new ci(t)}catch(t){e=null}return e}ri.prototype.w=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var oi="displayName",si="enrolledAt",ai="mfaEnrollmentId",ui="phoneInfo";function ci(t){ri.call(this,t),Zr(this,"phoneNumber",t[ui])}function hi(t){var e={},n=t[di],r=t[yi],i=t[gi];if(t=ii(t[vi]),!i||i!=li&&i!=pi&&!n||i==pi&&!r||i==fi&&!t)throw Error("Invalid checkActionCode response!");i==pi?(e[bi]=n||null,e[Ii]=n||null,e[mi]=r):(e[bi]=r||null,e[Ii]=r||null,e[mi]=n||null),e[wi]=t||null,Zr(this,Ai,i),Zr(this,Ei,ni(e))}_(ci,ri),ci.prototype.w=function(){var t=ci.$a.w.call(this);return t.phoneNumber=this.phoneNumber,t};var fi="REVERT_SECOND_FACTOR_ADDITION",li="EMAIL_SIGNIN",pi="VERIFY_AND_CHANGE_EMAIL",di="email",vi="mfaInfo",yi="newEmail",gi="requestType",mi="email",bi="fromEmail",wi="multiFactorInfo",Ii="previousEmail",Ei="data",Ai="operation";function _i(t){var e=Bn(t=Fn(t),Ti)||null,n=Bn(t,Si)||null,r=Bn(t,Ci)||null;if(r=r&&Oi[r]||null,!e||!n||!r)throw new S("argument-error",Ti+", "+Si+"and "+Ci+" are required in a valid action code URL.");ti(this,{apiKey:e,operation:r,code:n,continueUrl:Bn(t,Ni)||null,languageCode:Bn(t,ki)||null,tenantId:Bn(t,xi)||null})}var Ti="apiKey",Si="oobCode",Ni="continueUrl",ki="languageCode",Ci="mode",xi="tenantId",Oi={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:fi,signIn:li,verifyAndChangeEmail:pi,verifyEmail:"VERIFY_EMAIL"};function Di(t){try{return new _i(t)}catch(t){return null}}function Pi(t){var e=t[ji];if(void 0===e)throw new S("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new S("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Ri];if(n&&"object"==typeof n){e=n[Fi];var r=n[Ui];if(n=n[Bi],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new S("argument-error",Ui+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new S("argument-error",Bi+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new S("argument-error",Fi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new S("missing-android-pkg-name")}}else if(void 0!==n)throw new S("argument-error",Ri+" property must be a non null object when specified.");if(this.f=null,(e=t[Vi])&&"object"==typeof e){if("string"==typeof(e=e[qi])&&e.length)this.f=e;else if(void 0!==e)throw new S("argument-error",qi+" property must be a non empty string when specified.")}else if(void 0!==e)throw new S("argument-error",Vi+" property must be a non null object when specified.");if(void 0!==(e=t[Mi])&&"boolean"!=typeof e)throw new S("argument-error",Mi+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[Li])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new S("argument-error",Li+" property must be a non empty string when specified.");this.i=t||null}var Ri="android",Li="dynamicLinkDomain",Mi="handleCodeInApp",Vi="iOS",ji="url",Ui="installApp",Bi="minimumVersion",Fi="packageName",qi="bundleId";function Gi(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var zi=null;function Ki(t){var e=Wi(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.g=t,this.c=e.exp,this.h=e.sub,A(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Hi(t){try{return new Ki(t)}catch(t){return null}}function Wi(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(function(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=zi[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!zi){zi={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=t.concat(e[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===zi[o]&&(zi[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),s=n(64),a=n(64);if(64===a&&-1===i)break;e(i<<2|o>>4),64!=s&&(e(o<<4&240|s>>2),64!=a&&e(s<<6&192|a))}}(t,(function(t){e+=String.fromCharCode(t)})),e}(t))}catch(t){}return null}Ki.prototype.S=function(){return this.f},Ki.prototype.i=function(){return this.b},Ki.prototype.toString=function(){return this.g};var Xi="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Yi=["client_id","response_type","scope","redirect_uri","state"],Ji={md:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Wa:Yi},od:{Ja:null,ua:500,ta:750,fa:"github.com",Wa:Yi},pd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Wa:Yi},vd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Wa:Xi},jd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Wa:[]}};function Qi(t){for(var e in Ji)if(Ji[e].fa==t)return Ji[e];return null}function $i(t){var e={};e["facebook.com"]=ro,e["google.com"]=oo,e["github.com"]=io,e["twitter.com"]=so;var n=t&&t[to];try{if(n)return e[n]?new e[n](t):new no(t);if(void 0!==t[Zi])return new eo(t)}catch(t){}return null}var Zi="idToken",to="providerId";function eo(t){var e=t[to];if(!e&&t[Zi]){var n=Hi(t[Zi]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Zr(this,"providerId",e),Zr(this,"isNewUser",n)}function no(t){eo.call(this,t),Zr(this,"profile",ni((t=Br(t.rawUserInfo||"{}"))||{}))}function ro(t){if(no.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function io(t){if(no.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",this.profile&&this.profile.login||null)}function oo(t){if(no.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function so(t){if(no.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",t.screenName||null)}function ao(t){var e=Fn(t),n=Bn(e,"link"),r=Bn(Fn(n),"link");return e=Bn(e,"deep_link_id"),Bn(Fn(e),"link")||e||r||n||t}function uo(t,e){if(!t&&!e)throw new S("internal-error","Internal assert: no raw session string available");if(t&&e)throw new S("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?co:ho}_(no,eo),_(ro,no),_(io,no),_(oo,no),_(so,no);var co="enroll",ho="signin";function fo(){}function lo(t,e){return t.then((function(t){if(t[ta]){var n=Hi(t[ta]);if(!n||e!=n.h)throw new S("user-mismatch");return t}throw new S("user-mismatch")})).s((function(t){throw t&&t.code&&t.code==C+"user-not-found"?new S("user-mismatch"):t}))}function po(t,e){if(!e)throw new S("internal-error","failed to construct a credential");this.a=e,Zr(this,"providerId",t),Zr(this,"signInMethod",t)}function vo(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function yo(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new po(t.providerId,t.pendingToken)}catch(t){}return null}function go(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Zr(this,"idToken",e.idToken),e.accessToken&&Zr(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Zr(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new S("internal-error","failed to construct a credential");Zr(this,"accessToken",e.oauthToken),Zr(this,"secret",e.oauthTokenSecret)}Zr(this,"providerId",t),Zr(this,"signInMethod",n)}function mo(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Zn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function bo(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new go(t.providerId,e,t.signInMethod)}catch(t){}}return null}function wo(t,e){this.Pc=e||[],ti(this,{providerId:t,isOAuthProvider:!0}),this.Hb={},this.ob=(Qi(t)||{}).Ja||null,this.nb=null}function Io(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new S("argument-error",'SAML provider IDs must be prefixed with "saml."');wo.call(this,t,[])}function Eo(t){wo.call(this,t,Yi),this.a=[]}function Ao(){Eo.call(this,"facebook.com")}function _o(t){if(!t)throw new S("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new Ao).credential({accessToken:e})}function To(){Eo.call(this,"github.com")}function So(t){if(!t)throw new S("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new To).credential({accessToken:e})}function No(){Eo.call(this,"google.com"),this.Ca("profile")}function ko(t,e){var n=t;return v(t)&&(n=t.idToken,e=t.accessToken),(new No).credential({idToken:n,accessToken:e})}function Co(){wo.call(this,"twitter.com",Xi)}function xo(t,e){var n=t;if(v(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new S("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new go("twitter.com",n,"twitter.com")}function Oo(t,e,n){this.a=t,this.f=e,Zr(this,"providerId","password"),Zr(this,"signInMethod",n===Po.EMAIL_LINK_SIGN_IN_METHOD?Po.EMAIL_LINK_SIGN_IN_METHOD:Po.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Do(t){return t&&t.email&&t.password?new Oo(t.email,t.password,t.signInMethod):null}function Po(){ti(this,{providerId:"password",isOAuthProvider:!1})}function Ro(t,e){if(!(e=Lo(e)))throw new S("argument-error","Invalid email link!");return new Oo(t,e.code,Po.EMAIL_LINK_SIGN_IN_METHOD)}function Lo(t){return(t=Di(t=ao(t)))&&t.operation===li?t:null}function Mo(t){if(!(t.cb&&t.bb||t.La&&t.ea))throw new S("internal-error");this.a=t,Zr(this,"providerId","phone"),this.fa="phone",Zr(this,"signInMethod","phone")}function Vo(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return z(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new Mo(e)}return null}function jo(t){return t.a.La&&t.a.ea?{temporaryProof:t.a.La,phoneNumber:t.a.ea}:{sessionInfo:t.a.cb,code:t.a.bb}}function Uo(t){try{this.a=t||et.auth()}catch(t){throw new S("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}ti(this,{providerId:"phone",isOAuthProvider:!1})}function Bo(t,e){if(!t)throw new S("missing-verification-id");if(!e)throw new S("missing-verification-code");return new Mo({cb:t,bb:e})}function Fo(t){if(t.temporaryProof&&t.phoneNumber)return new Mo({La:t.temporaryProof,ea:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret,i=t&&t.nonce,o=t&&t.oauthIdToken,s=t&&t.pendingToken;try{switch(e){case"google.com":return ko(o,n);case"facebook.com":return _o(n);case"github.com":return So(n);case"twitter.com":return xo(n,r);default:return n||r||o||s?s?0==e.indexOf("saml.")?new po(e,s):new go(e,{pendingToken:s,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new Eo(e).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(t){return null}}function qo(t){if(!t.isOAuthProvider)throw new S("invalid-oauth-provider")}function Go(t,e,n,r,i,o,s){if(this.c=t,this.b=e||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=s||null,this.a=i||null,!this.g&&!this.a)throw new S("invalid-auth-event");if(this.g&&this.a)throw new S("invalid-auth-event");if(this.g&&!this.f)throw new S("invalid-auth-event")}function zo(t){return(t=t||{}).type?new Go(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&N(t.error),t.postBody,t.tenantId):null}function Ko(){this.b=null,this.a=[]}uo.prototype.Ha=function(){return this.a?Ce(this.a):Ce(this.b)},uo.prototype.w=function(){return this.type==co?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},fo.prototype.ja=function(){},fo.prototype.b=function(){},fo.prototype.c=function(){},fo.prototype.w=function(){},po.prototype.ja=function(t){return Ia(t,vo(this))},po.prototype.b=function(t,e){var n=vo(this);return n.idToken=e,Ea(t,n)},po.prototype.c=function(t,e){return lo(Aa(t,vo(this)),e)},po.prototype.w=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},go.prototype.ja=function(t){return Ia(t,mo(this))},go.prototype.b=function(t,e){var n=mo(this);return n.idToken=e,Ea(t,n)},go.prototype.c=function(t,e){return lo(Aa(t,mo(this)),e)},go.prototype.w=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},wo.prototype.Ka=function(t){return this.Hb=yt(t),this},_(Io,wo),_(Eo,wo),Eo.prototype.Ca=function(t){return X(this.a,t)||this.a.push(t),this},Eo.prototype.Pb=function(){return $(this.a)},Eo.prototype.credential=function(t,e){var n;if(!(n=v(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new S("argument-error","credential failed: must provide the ID token and/or the access token.");return new go(this.providerId,n,this.providerId)},_(Ao,Eo),Zr(Ao,"PROVIDER_ID","facebook.com"),Zr(Ao,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),_(To,Eo),Zr(To,"PROVIDER_ID","github.com"),Zr(To,"GITHUB_SIGN_IN_METHOD","github.com"),_(No,Eo),Zr(No,"PROVIDER_ID","google.com"),Zr(No,"GOOGLE_SIGN_IN_METHOD","google.com"),_(Co,wo),Zr(Co,"PROVIDER_ID","twitter.com"),Zr(Co,"TWITTER_SIGN_IN_METHOD","twitter.com"),Oo.prototype.ja=function(t){return this.signInMethod==Po.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Oa,{email:this.a,oobCode:this.f}):iu(t,Za,{email:this.a,password:this.f})},Oo.prototype.b=function(t,e){return this.signInMethod==Po.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Da,{idToken:e,email:this.a,oobCode:this.f}):iu(t,Ka,{idToken:e,email:this.a,password:this.f})},Oo.prototype.c=function(t,e){return lo(this.ja(t),e)},Oo.prototype.w=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},ti(Po,{PROVIDER_ID:"password"}),ti(Po,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),ti(Po,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Mo.prototype.ja=function(t){return t.eb(jo(this))},Mo.prototype.b=function(t,e){var n=jo(this);return n.idToken=e,iu(t,eu,n)},Mo.prototype.c=function(t,e){var n=jo(this);return n.operation="REAUTH",lo(t=iu(t,nu,n),e)},Mo.prototype.w=function(){var t={providerId:"phone"};return this.a.cb&&(t.verificationId=this.a.cb),this.a.bb&&(t.verificationCode=this.a.bb),this.a.La&&(t.temporaryProof=this.a.La),this.a.ea&&(t.phoneNumber=this.a.ea),t},Uo.prototype.eb=function(t,e){var n=this.a.a;return Ce(e.verify()).then((function(r){if("string"!=typeof r)throw new S("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var i=v(t)?t.session:null,o=v(t)?t.phoneNumber:t;return(i&&i.type==co?i.Ha().then((function(t){return function(t,e){return iu(t,Wa,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==ho?i.Ha().then((function(e){return function(t,e){return iu(t,Xa,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(t,e){return iu(t,Ga,e)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new S("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},ti(Uo,{PROVIDER_ID:"phone"}),ti(Uo,{PHONE_SIGN_IN_METHOD:"phone"}),Go.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Go.prototype.S=function(){return this.h},Go.prototype.w=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};var Ho,Wo=null;function Xo(t){var e="unauthorized-domain",n=void 0,r=Fn(t);t=r.a,"chrome-extension"==(r=r.f)?n=zt("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=zt("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",S.call(this,e,n)}function Yo(t,e,n){S.call(this,t,n),(t=e||{}).Ib&&Zr(this,"email",t.Ib),t.ea&&Zr(this,"phoneNumber",t.ea),t.credential&&Zr(this,"credential",t.credential),t.Yb&&Zr(this,"tenantId",t.Yb)}function Jo(t){if(t.code){var e=t.code||"";0==e.indexOf(C)&&(e=e.substring(C.length));var n={credential:Fo(t),Yb:t.tenantId};if(t.email)n.Ib=t.email;else if(t.phoneNumber)n.ea=t.phoneNumber;else if(!n.credential)return new S(e,t.message||void 0);return new Yo(e,n,t.message)}return null}function Qo(){}function $o(t){return t.c||(t.c=t.b())}function Zo(){}function ts(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function es(){}function ns(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=I(this.pc,this),this.a.onerror=I(this.Rb,this),this.a.onprogress=I(this.qc,this),this.a.ontimeout=I(this.uc,this)}function rs(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function is(t,e,n){this.reset(t,e,n,void 0,void 0)}function os(t){this.f=t,this.b=this.c=this.a=null}function ss(t,e){this.name=t,this.value=e}_(Xo,S),_(Yo,S),Yo.prototype.w=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.w();return e&&mt(t,e),t},Yo.prototype.toJSON=function(){return this.w()},Qo.prototype.c=null,_(Zo,Qo),Zo.prototype.a=function(){var t=ts(this);return t?new ActiveXObject(t):new XMLHttpRequest},Zo.prototype.b=function(){var t={};return ts(this)&&(t[0]=!0,t[1]=!0),t},Ho=new Zo,_(es,Qo),es.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new ns;throw Error("Unsupported browser")},es.prototype.b=function(){return{}},(t=ns.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.pc=function(){this.status=200,this.response=this.responseText=this.a.responseText,rs(this,4)},t.Rb=function(){this.status=500,this.response=this.responseText="",rs(this,4)},t.uc=function(){this.Rb()},t.qc=function(){this.status=200,rs(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},is.prototype.a=null,is.prototype.reset=function(t,e,n,r,i){r||A(),delete this.a},ss.prototype.toString=function(){return this.name};var as=new ss("SEVERE",1e3),us=new ss("WARNING",900),cs=new ss("CONFIG",700),hs=new ss("FINE",500);function fs(t){return t.c?t.c:t.a?fs(t.a):(M("Root logger has no level set."),null)}os.prototype.log=function(t,e,n){if(t.value>=fs(this).value)for(d(e)&&(e=e()),t=new is(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var ls={},ps=null;function ds(t){var e;if(ps||(ps=new os(""),ls[""]=ps,ps.c=cs),!(e=ls[t])){e=new os(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=ds(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,ls[t]=e}return e}function vs(t,e){t&&t.log(hs,e,void 0)}function ys(t){this.f=t}function gs(t){An.call(this),this.u=t,this.h=void 0,this.readyState=ms,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.l=new Headers,this.b=null,this.o="GET",this.f="",this.a=!1,this.i=ds("goog.net.FetchXmlHttp"),this.m=this.c=this.g=null}_(ys,Qo),ys.prototype.a=function(){return new gs(this.f)},ys.prototype.b=function(t){return function(){return t}}({}),_(gs,An);var ms=0;function bs(t){t.c.read().then(t.oc.bind(t)).catch(t.Ta.bind(t))}function ws(t){t.readyState=4,t.g=null,t.c=null,t.m=null,Is(t)}function Is(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function Es(t){An.call(this),this.headers=new On,this.O=t||null,this.c=!1,this.A=this.a=null,this.h=this.P=this.l="",this.f=this.N=this.i=this.G=!1,this.g=0,this.o=null,this.m=As,this.u=this.R=!1}(t=gs.prototype).open=function(t,e){if(this.readyState!=ms)throw this.abort(),Error("Error reopening a connection");this.o=t,this.f=e,this.readyState=1,Is(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.l,method:this.o,credentials:this.h,cache:void 0};t&&(e.body=t),this.u.fetch(new Request(this.f,e)).then(this.tc.bind(this),this.Ta.bind(this))},t.abort=function(){this.response=this.responseText="",this.l=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,ws(this)),this.readyState=ms},t.tc=function(t){this.a&&(this.g=t,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=t.headers,this.readyState=2,Is(this)),this.a&&(this.readyState=3,Is(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.rc.bind(this),this.Ta.bind(this)):void 0!==a.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.m=new TextDecoder,bs(this)):t.text().then(this.sc.bind(this),this.Ta.bind(this)))))},t.oc=function(t){if(this.a){var e=this.m.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?ws(this):Is(this),3==this.readyState&&bs(this)}},t.sc=function(t){this.a&&(this.response=this.responseText=t,ws(this))},t.rc=function(t){this.a&&(this.response=t,ws(this))},t.Ta=function(t){var e=this.i;e&&e.log(us,"Failed to fetch url "+this.f,t instanceof Error?t:Error(t)),this.a&&ws(this)},t.setRequestHeader=function(t,e){this.l.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.i)&&t.log(us,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.i;return t&&t.log(us,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(gs.prototype,"withCredentials",{get:function(){return"include"===this.h},set:function(t){this.h=t?"include":"same-origin"}}),_(Es,An);var As="";Es.prototype.b=ds("goog.net.XhrIo");var _s=/^https?$/i,Ts=["POST","PUT"];function Ss(t){return"content-type"==t.toLowerCase()}function Ns(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,ks(t),xs(t)}function ks(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Cs(t){if(t.c&&void 0!==s)if(t.A[1]&&4==Ds(t)&&2==Ps(t))vs(t.b,Rs(t,"Local request error detected and ignored"));else if(t.i&&4==Ds(t))Nn(t.Ub,0,t);else if(t.dispatchEvent("readystatechange"),4==Ds(t)){vs(t.b,Rs(t,"Request complete")),t.c=!1;try{var e,n=Ps(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.l).match(Rn)[1]||null;if(!o&&a.self&&a.self.location){var u=a.self.location.protocol;o=u.substr(0,u.length-1)}i=!_s.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Ds(t)?t.a.statusText:""}catch(e){vs(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Ps(t)+"]",ks(t)}}finally{xs(t)}}}function xs(t,e){if(t.a){Os(t);var n=t.a,r=t.A[0]?f:null;t.a=null,t.A=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(as,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Os(t){t.a&&t.u&&(t.a.ontimeout=null),t.o&&(a.clearTimeout(t.o),t.o=null)}function Ds(t){return t.a?t.a.readyState:0}function Ps(t){try{return 2<Ds(t)?t.a.status:-1}catch(t){return-1}}function Rs(t,e){return e+" ["+t.P+" "+t.l+" "+Ps(t)+"]"}function Ls(t){var e=Hs;this.g=[],this.u=e,this.o=t||null,this.f=this.a=!1,this.c=void 0,this.m=this.A=this.i=!1,this.h=0,this.b=null,this.l=0}function Ms(t,e,n){t.a=!0,t.c=n,t.f=!e,Bs(t)}function Vs(t){if(t.a){if(!t.m)throw new Fs(t);t.m=!1}}function js(t,e,n,r){t.g.push([e,n,r]),t.a&&Bs(t)}function Us(t){return W(t.g,(function(t){return d(t[1])}))}function Bs(t){if(t.h&&t.a&&Us(t)){var e=t.h,n=zs[e];n&&(a.clearTimeout(n.a),delete zs[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var r=n=!1;t.g.length&&!t.i;){var i=t.g.shift(),o=i[0],s=i[1];if(i=i[2],o=t.f?s:o)try{var u=o.call(i||t.o,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(P(e)||"function"==typeof a.Promise&&e instanceof a.Promise)&&(r=!0,t.i=!0)}catch(r){e=r,t.f=!0,Us(t)||(n=!0)}}t.c=e,r&&(u=I(t.v,t,!0),r=I(t.v,t,!1),e instanceof Ls?(js(e,u,r),e.A=!0):e.then(u,r)),n&&(e=new Gs(e),zs[e.a]=e,t.h=e.a)}function Fs(){R.call(this)}function qs(){R.call(this)}function Gs(t){this.a=a.setTimeout(I(this.c,this),0),this.b=t}(t=Es.prototype).Ma=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",vs(this.b,Rs(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(vs(this.b,Rs(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),xs(this))},t.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),xs(this,!0)),Es.$a.Da.call(this)},t.Ub=function(){this.xa||(this.N||this.i||this.f?Cs(this):this.Ic())},t.Ic=function(){Cs(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case As:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(as,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return vs(this.b,"Can not get response: "+t.message),null}},Ls.prototype.cancel=function(t){if(this.a)this.c instanceof Ls&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.u?this.u.call(this.o,this):this.m=!0,this.a||(t=new qs(this),Vs(this),Ms(this,!1,t))}},Ls.prototype.v=function(t,e){this.i=!1,Ms(this,t,e)},Ls.prototype.then=function(t,e,n){var r,i,o=new Ee((function(t,e){r=t,i=e}));return js(this,r,(function(t){t instanceof qs?o.cancel():i(t)})),o.then(t,e,n)},Ls.prototype.$goog_Thenable=!0,_(Fs,R),Fs.prototype.message="Deferred has already fired",Fs.prototype.name="AlreadyCalledError",_(qs,R),qs.prototype.message="Deferred was canceled",qs.prototype.name="CanceledError",Gs.prototype.c=function(){throw delete zs[this.a],this.b};var zs={};function Ks(t){var e={},n=e.document||document,r=Nt(t).toString(),i=ye(document,"SCRIPT"),o={Vb:i,Ma:void 0},s=new Ls(o),u=null,f=null!=e.timeout?e.timeout:5e3;return 0<f&&(u=window.setTimeout((function(){Ws(i,!0);var t=new Js(Ys,"Timeout reached for loading script "+r);Vs(s),Ms(s,!1,t)}),f),o.Ma=u),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Ws(i,e.wd||!1,u),Vs(s),Ms(s,!0,null))},i.onerror=function(){Ws(i,!0,u);var t=new Js(Xs,"Error while loading script "+r);Vs(s),Ms(s,!1,t)},mt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),fe(i,o),function(t,e){bt(t,"HTMLScriptElement"),t.src=Nt(e),(e=t.ownerDocument&&t.ownerDocument.defaultView)&&e!=a?e=h(e.document):(null===c&&(c=h(a.document)),e=c),e&&t.setAttribute("nonce",e)}(i,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),s}function Hs(){if(this&&this.Vb){var t=this.Vb;t&&"SCRIPT"==t.tagName&&Ws(t,!0,this.Ma)}}function Ws(t,e,n){null!=n&&a.clearTimeout(n),t.onload=f,t.onerror=f,t.onreadystatechange=f,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var Xs=0,Ys=1;function Js(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),R.call(this,n),this.code=t}function Qs(t){this.f=t}function $s(t,e,n){if(this.c=t,t=e||{},this.l=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.v=t.secureTokenTimeout||ea,this.g=yt(t.secureTokenHeaders||na),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.m=t.firebaseTimeout||ra,this.a=yt(t.firebaseHeaders||ia),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==_r(),!(n=a.XMLHttpRequest||n&&et.INTERNAL.node&&et.INTERNAL.node.XMLHttpRequest)&&!Ar())throw new S("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,Ar()?this.f=new ys(self):Tr()?this.f=new Qs(n):this.f=new es,this.b=null}_(Js,R),_(Qs,Qo),Qs.prototype.a=function(){return new this.f},Qs.prototype.b=function(){return{}};var Zs,ta="idToken",ea=new zr(3e4,6e4),na={"Content-Type":"application/x-www-form-urlencoded"},ra=new zr(3e4,6e4),ia={"Content-Type":"application/json"};function oa(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function sa(t,e){e&&(t.l=aa("https://securetoken.googleapis.com/v1/token",e),t.h=aa("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",e),t.i=aa("https://identitytoolkit.googleapis.com/v2/",e))}function aa(t,e){return t=Fn(t),e=Fn(e.url),t.c=t.a+t.c,Mn(t,e.f),t.a=e.a,Vn(t,e.g),t.toString()}function ua(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function ca(t,e,n,r,i,o,s){(function(){var t=Or();return!((t=kr(t)!=Nr?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||Jt&&ue&&!(9<ue))})()||Ar()?t=I(t.u,t):(Zs||(Zs=new Ee((function(t,e){!function(t,e){((window.gapi||{}).client||{}).request?t():(a[fa]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){js(t,null,e,void 0)}(Ks(kt(ha,{onload:fa})),(function(){e(Error("CORS_UNSUPPORTED"))})))}(t,e)}))),t=I(t.o,t)),t(e,n,r,i,o,s)}$s.prototype.S=function(){return this.b},$s.prototype.u=function(t,e,n,r,i,o){if(Ar()&&(void 0===a.fetch||void 0===a.Headers||void 0===a.Request))throw new S("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new Es(this.f);if(o){s.g=Math.max(0,o);var u=setTimeout((function(){s.dispatchEvent("timeout")}),o)}_n(s,"complete",(function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return vs(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),Tn(s,"ready",(function(){u&&clearTimeout(u),We(this)})),Tn(s,"timeout",(function(){u&&clearTimeout(u),We(this),e&&e(null)})),function(t,e,n,r,i){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.G=!1,t.c=!0,t.a=t.O?t.O.a():Ho.a(),t.A=t.O?$o(t.O):$o(Ho),t.a.onreadystatechange=I(t.Ub,t);try{vs(t.b,Rs(t,"Opening Xhr")),t.N=!0,t.a.open(n,String(e),!0),t.N=!1}catch(e){return vs(t.b,Rs(t,"Error opening Xhr: "+e.message)),void Ns(t,e)}e=r||"";var o=new On(t.headers);i&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(p(t)||"string"==typeof t)z(t,e,void 0);else for(var n=xn(t),r=Cn(t),i=r.length,o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}(i,(function(t,e){o.set(e,t)})),i=function(t){t:{for(var e=Ss,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.Y()),r=a.FormData&&e instanceof a.FormData,!X(Ts,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.R&&(t.a.withCredentials=t.R);try{Os(t),0<t.g&&(t.u=function(t){return Jt&&ae(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),vs(t.b,Rs(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.u)),t.u?(t.a.timeout=t.g,t.a.ontimeout=I(t.Ma,t)):t.o=Nn(t.Ma,t.g,t)),vs(t.b,Rs(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){vs(t.b,Rs(t,"Send error: "+e.message)),Ns(t,e)}}(s,t,n,r,i)};var ha=new wt(_t,"https://apis.google.com/js/client.js?onload=%{onload}"),fa="__fcb"+Math.floor(1e6*Math.random()).toString();function la(t){if("string"!=typeof(t=t.email)||!br.test(t))throw new S("invalid-email")}function pa(t){"email"in t&&la(t)}function da(t){if(!t[ta]){if(t.mfaPendingCredential)throw new S("multi-factor-auth-required",null,yt(t));throw new S("internal-error")}}function va(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new S("internal-error")}else{if(!t.sessionInfo)throw new S("missing-verification-id");if(!t.code)throw new S("missing-verification-code")}}$s.prototype.o=function(t,e,n,r,i){var o=this;Zs.then((function(){window.gapi.client.setApiKey(o.c);var s=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(s),e&&e(t)}})})).s((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},$s.prototype.yb=function(){return iu(this,Ha,{})},$s.prototype.Ab=function(t,e){return iu(this,za,{idToken:t,email:e})},$s.prototype.Bb=function(t,e){return iu(this,Ka,{idToken:t,password:e})};var ya={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function ga(t){if(!t.phoneVerificationInfo)throw new S("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new S("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new S("missing-verification-code")}function ma(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new S("internal-error")}function ba(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&er(t=new Qn(t.postBody),"nonce")&&(e.nonce=t.get("nonce"))),e}function wa(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Jo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Jo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Jo(t)):t.errorMessage&&(e=ou(t.errorMessage)),e)throw e;da(t)}function Ia(t,e){return e.returnIdpCredential=!0,iu(t,Ya,e)}function Ea(t,e){return e.returnIdpCredential=!0,iu(t,Qa,e)}function Aa(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,iu(t,Ja,e)}function _a(t){if(!t.oobCode)throw new S("invalid-action-code")}(t=$s.prototype).Cb=function(t,e){var n={idToken:t},r=[];return dt(ya,(function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),iu(this,za,n)},t.ub=function(t,e){return mt(t={requestType:"PASSWORD_RESET",email:t},e),iu(this,Ua,t)},t.vb=function(t,e){return mt(t={requestType:"EMAIL_SIGNIN",email:t},e),iu(this,Ma,t)},t.tb=function(t,e){return mt(t={requestType:"VERIFY_EMAIL",idToken:t},e),iu(this,Va,t)},t.Db=function(t,e,n){return mt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),iu(this,ja,t)},t.eb=function(t){return iu(this,tu,t)},t.mb=function(t,e){return iu(this,qa,{oobCode:t,newPassword:e})},t.Qa=function(t){return iu(this,Sa,{oobCode:t})},t.ib=function(t){return iu(this,Ta,{oobCode:t})};var Ta={endpoint:"setAccountInfo",B:_a,Z:"email",C:!0},Sa={endpoint:"resetPassword",B:_a,F:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new S("internal-error")},C:!0},Na={endpoint:"signupNewUser",B:function(t){if(la(t),!t.password)throw new S("weak-password")},F:da,U:!0,C:!0},ka={endpoint:"createAuthUri",C:!0},Ca={endpoint:"deleteAccount",M:["idToken"]},xa={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],B:function(t){if(!Array.isArray(t.deleteProvider))throw new S("internal-error")}},Oa={endpoint:"emailLinkSignin",M:["email","oobCode"],B:la,F:da,U:!0,C:!0},Da={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],B:la,F:da,U:!0},Pa={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],B:ga,F:da,C:!0,Na:!0},Ra={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],B:ga,F:da,C:!0,Na:!0},La={endpoint:"getAccountInfo"},Ma={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new S("internal-error");la(t)},Z:"email",C:!0},Va={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],B:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new S("internal-error")},Z:"email",C:!0},ja={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],B:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new S("internal-error")},Z:"email",C:!0},Ua={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("PASSWORD_RESET"!=t.requestType)throw new S("internal-error");la(t)},Z:"email",C:!0},Ba={kb:!0,endpoint:"getProjectConfig",Tb:"GET"},Fa={kb:!0,endpoint:"getRecaptchaParam",Tb:"GET",F:function(t){if(!t.recaptchaSiteKey)throw new S("internal-error")}},qa={endpoint:"resetPassword",B:_a,Z:"email",C:!0},Ga={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Z:"sessionInfo",C:!0},za={endpoint:"setAccountInfo",M:["idToken"],B:pa,U:!0},Ka={endpoint:"setAccountInfo",M:["idToken"],B:function(t){if(pa(t),!t.password)throw new S("weak-password")},F:da,U:!0},Ha={endpoint:"signupNewUser",F:da,U:!0,C:!0},Wa={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],B:function(t){if(!t.phoneEnrollmentInfo)throw new S("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new S("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new S("missing-app-credential")},F:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new S("internal-error")},C:!0,Na:!0},Xa={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],B:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new S("missing-app-credential")},F:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new S("internal-error")},C:!0,Na:!0},Ya={endpoint:"verifyAssertion",B:ma,Xa:ba,F:wa,U:!0,C:!0},Ja={endpoint:"verifyAssertion",B:ma,Xa:ba,F:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new S("user-not-found");if(t.errorMessage)throw ou(t.errorMessage);da(t)},U:!0,C:!0},Qa={endpoint:"verifyAssertion",B:function(t){if(ma(t),!t.idToken)throw new S("internal-error")},Xa:ba,F:wa,U:!0},$a={endpoint:"verifyCustomToken",B:function(t){if(!t.token)throw new S("invalid-custom-token")},F:da,U:!0,C:!0},Za={endpoint:"verifyPassword",B:function(t){if(la(t),!t.password)throw new S("wrong-password")},F:da,U:!0,C:!0},tu={endpoint:"verifyPhoneNumber",B:va,F:da,C:!0},eu={endpoint:"verifyPhoneNumber",B:function(t){if(!t.idToken)throw new S("internal-error");va(t)},F:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Jo(t);da(t)}},nu={Gb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:va,F:da,C:!0},ru={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],F:function(t){if(!!t[ta]^!!t.refreshToken)throw new S("internal-error")},C:!0,Na:!0};function iu(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(null==r||""===r)return!1}return!0}(n,e.M))return xe(new S("internal-error"));var r,i=!!e.Na,o=e.Tb||"POST";return Ce(n).then(e.B).then((function(){return e.U&&(n.returnSecureToken=!0),e.C&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),function(t,e,n,r,i,o,s){var a=Fn(e+n);Un(a,"key",t.c),s&&Un(a,"cb",A().toString());var u="GET"==r;if(u)for(var c in i)i.hasOwnProperty(c)&&Un(a,c,i[c]);return new Ee((function(e,n){ca(t,a.toString(),(function(t){t?t.error?n(su(t,o||{})):e(t):n(new S("network-request-failed"))}),r,u?void 0:or(Ur(i)),t.a,t.m.get())}))}(t,i?t.i:t.h,e.endpoint,o,n,e.Gb,e.kb||!1)})).then((function(t){return r=t,e.Xa?e.Xa(n,r):r})).then(e.F).then((function(){if(!e.Z)return r;if(!(e.Z in r))throw new S("internal-error");return r[e.Z]}))}function ou(t){return su({error:{errors:[{message:t}],code:400,message:t}})}function su(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new S(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",mt(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new S(r[i],e);return!e&&t&&(e=jr(t)),new S("internal-error",e)}function au(t){this.b=t,this.a=null,this.qb=function(t){return(fu||(fu=new Ee((function(t,e){function n(){Gr(),Dr("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Gr(),e(Error("Network Error"))},timeout:cu.get()})}if(Dr("gapi.iframes.Iframe"))t();else if(Dr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();a[r]=function(){Dr("gapi.load")?n():e(Error("Network Error"))},Ce(Ks(r=kt(uu,{onload:r}))).s((function(){e(Error("Network Error"))}))}})).s((function(t){throw fu=null,t})))).then((function(){return new Ee((function(e,n){Dr("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),hu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var uu=new wt(_t,"https://apis.google.com/js/api.js?onload=%{onload}"),cu=new zr(3e4,6e4),hu=new zr(5e3,15e3),fu=null;function lu(t,e,n,r){this.l=t,this.h=e,this.i=n,this.g=r,this.f=null,t=this.g?qn((t=Fn(this.g.url)).f,t.a,t.g,"/emulator/auth/iframe"):qn("https",this.l,null,"/__/auth/iframe"),this.a=t,Un(this.a,"apiKey",this.h),Un(this.a,"appName",this.i),this.b=null,this.c=[]}function pu(t,e,n,r,i,o){this.u=t,this.o=e,this.c=n,this.v=r,this.m=o,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function du(t){try{return et.app(t).auth().Ga()}catch(t){return[]}}function vu(t,e,n,r,i,o){this.o=t,this.g=e,this.b=n,this.f=o,this.c=r||null,this.i=i||null,this.l=this.u=this.A=null,this.h=[],this.v=this.a=null}function yu(t){var e=lr();return function(t){return iu(t,Ba,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=Fn(e),r=n.f;n=n.a;for(var i=0;i<t.length;i++){var o=t[i],s=n,a=r;if(0==o.indexOf("chrome-extension://")?s=Fn(o).a==s&&"chrome-extension"==a:"http"!=a&&"https"!=a?s=!1:mr.test(o)?s=s==o:(o=o.split(".").join("\\."),s=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(s)),s){t=!0;break t}}t=!1}if(!t)throw new Xo(lr())}))}function gu(t){return t.v||(t.v=wr().then((function(){if(!t.u){var e=t.c,n=t.i,r=du(t.b),i=new lu(t.o,t.g,t.b,t.f);i.f=e,i.b=n,i.c=$(r||[]),t.u=i.toString()}t.m=new au(t.u),function(t){if(!t.m)throw Error("IfcHandler must be initialized!");!function(t,e){t.qb.then((function(){t.a.register("authEvent",e,Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.m,(function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=zo(e.authEvent),n=0;n<t.h.length;n++)r=t.h[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Ce(n)}return n.status="ERROR",Ce(n)}))}(t)}))),t.v}function mu(t){return t.l||(t.A=t.c?xr(t.c,du(t.b)):null,t.l=new $s(t.g,D(t.i),t.A),t.f&&sa(t.l,t.f)),t.l}function bu(t,e,n,r,i,o,s,a,u,c,h,f){return(t=new pu(t,e,n,r,i,f)).l=o,t.g=s,t.i=a,t.b=yt(u||null),t.f=c,t.xb(h).toString()}function wu(t){if(this.a=t||et.INTERNAL.reactNative&&et.INTERNAL.reactNative.AsyncStorage,!this.a)throw new S("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Iu(t){this.b=t,this.a={},this.f=I(this.c,this)}lu.prototype.toString=function(){return this.f?Un(this.a,"v",this.f):tr(this.a.b,"v"),this.b?Un(this.a,"eid",this.b):tr(this.a.b,"eid"),this.c.length?Un(this.a,"fw",this.c.join(",")):tr(this.a.b,"fw"),this.a.toString()},pu.prototype.xb=function(t){return this.h=t,this},pu.prototype.toString=function(){if(this.m){var t=Fn(this.m.url);t=qn(t.f,t.a,t.g,"/emulator/auth/handler")}else t=qn("https",this.u,null,"/__/auth/handler");if(Un(t,"apiKey",this.o),Un(t,"appName",this.c),Un(t,"authType",this.v),this.a.isOAuthProvider){var e=this.a;try{var n=et.app(this.c).auth().ka()}catch(t){n=null}for(var r in e.nb=n,Un(t,"providerId",this.a.providerId),e=Ur((n=this.a).Hb))e[r]=e[r].toString();r=n.Pc,e=yt(e);for(var i=0;i<r.length;i++){var o=r[i];o in e&&delete e[o]}n.ob&&n.nb&&!e[n.ob]&&(e[n.ob]=n.nb),vt(e)||Un(t,"customParameters",jr(e))}if("function"==typeof this.a.Pb&&(n=this.a.Pb()).length&&Un(t,"scopes",n.join(",")),this.l?Un(t,"redirectUrl",this.l):tr(t.b,"redirectUrl"),this.g?Un(t,"eventId",this.g):tr(t.b,"eventId"),this.i?Un(t,"v",this.i):tr(t.b,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Bn(t,s)&&Un(t,s,this.b[s]);return this.h?Un(t,"tid",this.h):tr(t.b,"tid"),this.f?Un(t,"eid",this.f):tr(t.b,"eid"),(s=du(this.c)).length&&Un(t,"fw",s.join(",")),t.toString()},(t=vu.prototype).Nb=function(t,e,n){var r=new S("popup-closed-by-user"),i=new S("web-storage-unsupported"),o=this,s=!1;return this.la().then((function(){(function(t){var e={type:"webStorageSupport"};return gu(t).then((function(){return function(t,e){return t.qb.then((function(){return new Ee((function(n){t.a.send(e.type,e,n,Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.m,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&yr(t),e(i),s=!0)}))})).s((function(){})).then((function(){if(!s)return function(t){return new Ee((function(e){return function n(){kn(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!s)return kn(n).then((function(){e(r)}))}))},t.Wb=function(){var t=Or();return!Vr(t)&&!qr(t)},t.Sb=function(){return!1},t.Lb=function(t,e,n,r,i,o,s,a){if(!t)return xe(new S("popup-blocked"));if(s&&!Vr())return this.la().s((function(e){yr(t),i(e)})),r(),Ce();this.a||(this.a=yu(mu(this)));var u=this;return this.a.then((function(){var e=u.la().s((function(e){throw yr(t),i(e),e}));return r(),e})).then((function(){qo(n),s||pr(bu(u.o,u.g,u.b,e,n,null,o,u.c,void 0,u.i,a,u.f),t)})).s((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},t.Mb=function(t,e,n,r){this.a||(this.a=yu(mu(this)));var i=this;return this.a.then((function(){qo(e),pr(bu(i.o,i.g,i.b,t,e,lr(),n,i.c,void 0,i.i,r,i.f))})).s((function(t){throw"auth/network-request-failed"==t.code&&(i.a=null),t}))},t.la=function(){var t=this;return gu(this).then((function(){return t.m.qb})).s((function(){throw t.a=null,new S("network-request-failed")}))},t.Zb=function(){return!0},t.Ea=function(t){this.h.push(t)},t.Ra=function(t){J(this.h,(function(e){return e==t}))},(t=wu.prototype).get=function(t){return Ce(this.a.getItem(t)).then((function(t){return t&&Br(t)}))},t.set=function(t,e){return Ce(this.a.setItem(t,jr(e)))},t.T=function(t){return Ce(this.a.removeItem(t))},t.ca=function(){},t.ia=function(){};var Eu,Au=[];function _u(t,e,n){vt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function Tu(t){this.a=t}function Su(t){this.c=t,this.b=!1,this.a=[]}function Nu(t,e,n,r){var i,o,s,a,u=n||{},c=null;if(t.b)return xe(Error("connection_unavailable"));var h=r?800:50,f="undefined"!=typeof MessageChannel?new MessageChannel:null;return new Ee((function(n,r){f?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),f.port1.start(),s=setTimeout((function(){r(Error("unsupported_event"))}),h),c={messageChannel:f,onMessage:o=function(t){t.data.eventId===i&&("ack"===t.data.status?(clearTimeout(s),a=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(a),void 0!==t.data.response?n(t.data.response):r(Error("unknown_error"))):(clearTimeout(s),clearTimeout(a),r(Error("invalid_response"))))}},t.a.push(c),f.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:i,data:u},[f.port2])):r(Error("connection_unavailable"))})).then((function(e){return ku(t,c),e})).s((function(e){throw ku(t,c),e}))}function ku(t,e){if(e){var n=e.messageChannel,r=e.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),J(t.a,(function(t){return t==e}))}}function Cu(){if(!Pu())throw new S("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.v=a.indexedDB,this.type="indexedDB",this.g=this.m=this.f=this.l=null,this.o=!1,this.h=null;var t=this;Ar()&&self?(this.m=function(){var t=Ar()?self:null;if(z(Au,(function(n){n.b==t&&(e=n)})),!e){var e=new Iu(t);Au.push(e)}return e}(),_u(this.m,"keyChanged",(function(e,n){return ju(t).then((function(e){return 0<e.length&&z(t.a,(function(t){t(e)})),{keyProcessed:X(e,n.key)}}))})),_u(this.m,"ping",(function(){return Ce(["keyChanged"])}))):function(){var t=a.navigator;return t&&t.serviceWorker?Ce().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).s((function(){return null})):Ce(null)}().then((function(e){(t.h=e)&&(t.g=new Su(new Tu(e)),Nu(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&X(e[0].value,"keyChanged")&&(t.o=!0)})).s((function(){})))}))}function xu(t){return new Ee((function(e,n){var r=t.v.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new Ee((function(e,n){var r=t.v.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return xu(t)})).then((function(t){e(t)})).s((function(t){n(t)}))}}))}function Ou(t){return t.i||(t.i=xu(t)),t.i}function Du(t,e){var n=0;return new Ee((function r(i,o){Ou(t).then(e).then(i).s((function(e){if(!(3<++n))return Ou(t).then((function(e){return e.close(),t.i=void 0,r(i,o)}));o(e)}))}))}function Pu(){try{return!!a.indexedDB}catch(t){return!1}}function Ru(t){return t.objectStore("firebaseLocalStorage")}function Lu(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Mu(t){return new Ee((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function Vu(t,e){return t.g&&t.h&&function(){var t=a.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?Nu(t.g,"keyChanged",{key:e},t.o).then((function(){})).s((function(){})):Ce()}function ju(t){return Ou(t).then((function(t){var e=Ru(Lu(t,!1));return e.getAll?Mu(e.getAll()):new Ee((function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=dr(t.c,n),t.c=n}return r}))}function Uu(t){t.l&&t.l.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Bu(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Ce().then((function(){if(Pu()){var t=Fr(),r="__sak"+t;return Eu||(Eu=new Cu),(n=Eu).set(r,t).then((function(){return n.get(r)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.T(r)})).then((function(){return n})).s((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ca((function(t){z(e.a,(function(e){e(t)}))})),t}))}function Fu(){this.a={},this.type="inMemory"}function qu(){if(!function(){var t="Node"==_r();if(!(t=Gu()||t&&et.INTERNAL.node&&et.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==_r())throw new S("internal-error","The LocalStorage compatibility library was not found.");throw new S("web-storage-unsupported")}this.a=Gu()||et.INTERNAL.node.localStorage,this.type="localStorage"}function Gu(){try{var t=a.localStorage,e=Fr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function zu(){this.type="nullStorage"}function Ku(){if(!function(){var t="Node"==_r();if(!(t=Hu()||t&&et.INTERNAL.node&&et.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==_r())throw new S("internal-error","The SessionStorage compatibility library was not found.");throw new S("web-storage-unsupported")}this.a=Hu()||et.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Hu(){try{var t=a.sessionStorage,e=Fr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Wu(){var t={};t.Browser=Ju,t.Node=Qu,t.ReactNative=$u,t.Worker=Zu,this.a=t[_r()]}Iu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,r=this.a[e];if(r&&0<r.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var i=[];z(r,(function(e){i.push(Ce().then((function(){return e(t.origin,t.data.data)})))})),De(i).then((function(r){var i=[];z(r,(function(t){i.push({fulfilled:t.Ob,value:t.value,reason:t.reason?t.reason.message:void 0})})),z(i,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:i})}))}},Tu.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},Su.prototype.close=function(){for(;0<this.a.length;)ku(this,this.a[0]);this.b=!0},(t=Cu.prototype).set=function(t,e){var n=this,r=!1;return Du(this,(function(e){return Mu((e=Ru(Lu(e,!0))).get(t))})).then((function(i){return Du(n,(function(o){if(o=Ru(Lu(o,!0)),i)return i.value=e,Mu(o.put(i));n.b++,r=!0;var s={};return s.fbase_key=t,s.value=e,Mu(o.add(s))}))})).then((function(){return n.c[t]=e,Vu(n,t)})).na((function(){r&&n.b--}))},t.get=function(t){return Du(this,(function(e){return Mu(Ru(Lu(e,!1)).get(t))})).then((function(t){return t&&t.value}))},t.T=function(t){var e=this,n=!1;return Du(this,(function(r){return n=!0,e.b++,Mu(Ru(Lu(r,!0)).delete(t))})).then((function(){return delete e.c[t],Vu(e,t)})).na((function(){n&&e.b--}))},t.ca=function(t){0==this.a.length&&function(t){Uu(t),function e(){t.f=setTimeout((function(){t.l=ju(t).then((function(e){0<e.length&&z(t.a,(function(t){t(e)}))})).then((function(){e()})).s((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},t.ia=function(t){J(this.a,(function(e){return e==t})),0==this.a.length&&Uu(this)},(t=Bu.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},t.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},t.T=function(t){return this.b.then((function(e){return e.T(t)}))},t.ca=function(t){this.a.push(t)},t.ia=function(t){J(this.a,(function(e){return e==t}))},(t=Fu.prototype).get=function(t){return Ce(this.a[t])},t.set=function(t,e){return this.a[t]=e,Ce()},t.T=function(t){return delete this.a[t],Ce()},t.ca=function(){},t.ia=function(){},(t=qu.prototype).get=function(t){var e=this;return Ce().then((function(){return Br(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ce().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Ce().then((function(){e.a.removeItem(t)}))},t.ca=function(t){a.window&&fn(a.window,"storage",t)},t.ia=function(t){a.window&&dn(a.window,"storage",t)},(t=zu.prototype).get=function(){return Ce(null)},t.set=function(){return Ce()},t.T=function(){return Ce()},t.ca=function(){},t.ia=function(){},(t=Ku.prototype).get=function(t){var e=this;return Ce().then((function(){return Br(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ce().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Ce().then((function(){e.a.removeItem(t)}))},t.ca=function(){},t.ia=function(){};var Xu,Yu,Ju={D:qu,ab:Ku},Qu={D:qu,ab:Ku},$u={D:wu,ab:zu},Zu={D:qu,ab:zu},tc={qd:"local",NONE:"none",sd:"session"};function ec(){var t=!(qr(Or())||!Er()),e=Vr(),n=Pr();this.v=t,this.h=e,this.l=n,this.a={},Xu||(Xu=new Wu),t=Xu;try{this.g=!fr()&&Xr()||!a.indexedDB?new t.a.D:new Bu(Ar()?new Fu:new t.a.D)}catch(t){this.g=new Fu,this.h=!0}try{this.i=new t.a.ab}catch(t){this.i=new Fu}this.m=new Fu,this.f=I(this.Xb,this),this.b={}}function nc(){return Yu||(Yu=new ec),Yu}function rc(t,e){switch(e){case"session":return t.i;case"none":return t.m;default:return t.g}}function ic(t,e){return"firebase:"+t.name+(e?":"+e:"")}function oc(t,e,n){return n=ic(e,n),"local"==e.D&&(t.b[n]=null),rc(t,e.D).T(n)}function sc(t){t.c&&(clearInterval(t.c),t.c=null)}function ac(t){this.a=t,this.b=nc()}(t=ec.prototype).get=function(t,e){return rc(this,t.D).get(ic(t,e))},t.set=function(t,e,n){var r=ic(t,n),i=this,o=rc(this,t.D);return o.set(r,e).then((function(){return o.get(r)})).then((function(e){"local"==t.D&&(i.b[r]=e)}))},t.addListener=function(t,e,n){t=ic(t,e),this.l&&(this.b[t]=a.localStorage.getItem(t)),vt(this.a)&&(rc(this,"local").ca(this.f),this.h||(fr()||!Xr())&&a.indexedDB||!this.l||function(t){sc(t),t.c=setInterval((function(){for(var e in t.a){var n=a.localStorage.getItem(e),r=t.b[e];n!=r&&(t.b[e]=n,n=new Ze({type:"storage",key:e,target:window,oldValue:r,newValue:n,a:!0}),t.Xb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},t.removeListener=function(t,e,n){t=ic(t,e),this.a[t]&&(J(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),vt(this.a)&&(rc(this,"local").ia(this.f),sc(this))},t.Xb=function(t){if(t&&t.g){var e=t.a.key;if(null==e)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=a.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.lb(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?rc(this,"local").ia(this.f):sc(this),this.v)if(n=a.localStorage.getItem(e),(r=t.a.newValue)!==n)null!==r?a.localStorage.setItem(e,r):a.localStorage.removeItem(e);else if(this.b[e]===r&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===a.localStorage.getItem(e)||(o.b[e]=a.localStorage.getItem(e),o.lb(e))},Jt&&ue&&10==ue&&a.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else z(t,I(this.lb,this))},t.lb=function(t){this.a[t]&&z(this.a[t],(function(t){t()}))};var uc,cc={name:"authEvent",D:"local"};function hc(){this.a=nc()}function fc(t,e){this.b=lc,this.f=a.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=a.Int32Array?new Int32Array(64):Array(64),void 0===uc&&(uc=a.Int32Array?new Int32Array(bc):bc),this.reset()}_(fc,(function(){this.b=-1}));for(var lc=64,pc=lc-1,dc=[],vc=0;vc<pc;vc++)dc[vc]=0;var yc=Q(128,dc);function gc(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,s=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+s|0}r=0|t.a[0],i=0|t.a[1];var a=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],f=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var l=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&a^i&a)|0;s=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((s=(s=c&h^~c&f)+(0|uc[e])|0)+(0|n[e])|0)|0,o=f,f=h,h=c,c=u+s|0,u=a,a=i,i=r,r=s+l|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+a|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+f|0,t.a[7]=t.a[7]+o|0}function mc(t,e,n){void 0===n&&(n=e.length);var r=0,i=t.c;if("string"==typeof e)for(;r<n;)t.f[i++]=e.charCodeAt(r++),i==t.b&&(gc(t),i=0);else{if(!p(e))throw Error("message must be string or array");for(;r<n;){var o=e[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[i++]=o,i==t.b&&(gc(t),i=0)}}t.c=i,t.g+=n}fc.prototype.reset=function(){this.g=this.c=0,this.a=a.Int32Array?new Int32Array(this.h):$(this.h)};var bc=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function wc(){fc.call(this,8,Ic)}_(wc,fc);var Ic=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Ec(t,e,n,r,i,o){this.m=t,this.i=e,this.l=n,this.v=r||null,this.u=i||null,this.o=o,this.h=e+":"+n,this.A=new hc,this.g=new ac(this.h),this.f=null,this.b=[],this.a=this.c=null}function Ac(t){return new S("invalid-cordova-configuration",t)}function _c(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function Tc(t){return t.f||(t.f=t.la().then((function(){return new Ee((function(e){t.Ea((function n(r){return e(r),t.Ra(n),!1})),function(t){function e(e){r=!0,i&&i.cancel(),Sc(t).then((function(r){var i=n;if(r&&e&&e.url){var o=null;-1!=(i=ao(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Br(Bn(o=Fn(i),"firebaseError")||null))?N(o):null)?new Go(r.c,r.b,null,null,o,null,r.S()):new Go(r.c,r.b,i,r.f,null,null,r.S())),i=o||n}_c(t,i)}))}var n=new Go("unknown",null,null,null,new S("no-auth-event")),r=!1,i=kn(500).then((function(){return Sc(t).then((function(){r||_c(t,n)}))})),o=a.handleOpenURL;a.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(Dr("BuildInfo.packageName",a).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},Wo||(Wo=new Ko),function(t){var e=Wo;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=Dr("universalLinks.subscribe",a))&&t(null,e.b))}(e)}(t)}))}))),t.f}function Sc(t){var e=null;return function(t){return t.b.get(cc,t.a).then((function(t){return zo(t)}))}(t.g).then((function(n){return e=n,oc((n=t.g).b,cc,n.a)})).then((function(){return e}))}function Nc(t){this.a=t,this.b=nc()}(t=Ec.prototype).la=function(){return this.Ia?this.Ia:this.Ia=(Ir(void 0)?wr().then((function(){return new Ee((function(t,e){var n=a.document,r=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),t()}),!1)}))})):xe(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Dr("universalLinks.subscribe",a))throw Ac("cordova-universal-links-plugin-fix is not installed");if(void 0===Dr("BuildInfo.packageName",a))throw Ac("cordova-plugin-buildinfo is not installed");if("function"!=typeof Dr("cordova.plugins.browsertab.openUrl",a))throw Ac("cordova-plugin-browsertab is not installed");if("function"!=typeof Dr("cordova.InAppBrowser.open",a))throw Ac("cordova-plugin-inappbrowser is not installed")}),(function(){throw new S("cordova-not-ready")}))},t.Nb=function(t,e){return e(new S("operation-not-supported-in-this-environment")),Ce()},t.Lb=function(){return xe(new S("operation-not-supported-in-this-environment"))},t.Zb=function(){return!1},t.Wb=function(){return!0},t.Sb=function(){return!0},t.Mb=function(t,e,n,r){if(this.c)return xe(new S("redirect-operation-pending"));var i=this,o=a.document,s=null,u=null,c=null,h=null;return this.c=Ce().then((function(){return qo(e),Tc(i)})).then((function(){return function(t,e,n,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),s=new Go(e,r,null,o,new S("no-auth-event"),null,i),u=Dr("BuildInfo.packageName",a);if("string"!=typeof u)throw new S("invalid-cordova-configuration");var c=Dr("BuildInfo.displayName",a),h={};if(Or().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=u;else{if(!Or().toLowerCase().match(/android/))return xe(new S("operation-not-supported-in-this-environment"));h.apn=u}c&&(h.appDisplayName=c),o=function(t){var e=new wc;mc(e,t),t=[];var n=8*e.g;56>e.c?mc(e,yc,56-e.c):mc(e,yc,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(gc(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return H(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}(o),h.sessionId=o;var f=bu(t.m,t.i,t.l,e,n,null,r,t.v,h,t.u,i,t.o);return t.la().then((function(){var e=t.h;return t.A.a.set(cc,s.w(),e)})).then((function(){var e=Dr("cordova.plugins.browsertab.isAvailable",a);if("function"!=typeof e)throw new S("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=Dr("cordova.plugins.browsertab.openUrl",a)))throw new S("invalid-cordova-configuration");n(f)}else{if("function"!=typeof(n=Dr("cordova.InAppBrowser.open",a)))throw new S("invalid-cordova-configuration");e=Or(),t.a=n(f,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,t,e,n,r)})).then((function(){return new Ee((function(t,e){u=function(){var e=Dr("cordova.plugins.browsertab.close",a);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ea(u),c=function(){s||(s=kn(2e3).then((function(){e(new S("redirect-cancelled-by-user"))})))},h=function(){Kr()&&c()},o.addEventListener("resume",c,!1),Or().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).s((function(t){return Sc(i).then((function(){throw t}))}))})).na((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),s&&s.cancel(),u&&i.Ra(u),i.c=null}))},t.Ea=function(t){this.b.push(t),Tc(this).s((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Go("unknown",null,null,null,new S("no-auth-event")),t(e))}))},t.Ra=function(t){J(this.b,(function(e){return e==t}))};var kc={name:"pendingRedirect",D:"session"};function Cc(t){return oc(t.b,kc,t.a)}function xc(t,e,n,r){this.i={},this.u=0,this.O=t,this.m=e,this.v=n,this.G=r,this.h=[],this.f=!1,this.l=I(this.o,this),this.b=new Kc,this.A=new Jc,this.g=new Nc(Gc(this.m,this.v)),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.A,this.c.linkViaPopup=this.A,this.c.reauthViaPopup=this.A,this.a=Oc(this.O,this.m,this.v,k,this.G)}function Oc(t,e,n,r,i){var o=et.SDK_VERSION||null;return Ir()?new Ec(t,e,n,o,r,i):new vu(t,e,n,o,r,i)}function Dc(t){t.f||(t.f=!0,t.a.Ea(t.l));var e=t.a;return t.a.la().s((function(n){throw t.a==e&&t.reset(),n}))}function Pc(t){t.a.Wb()&&Dc(t).s((function(e){var n=new Go("unknown",null,null,null,new S("operation-not-supported-in-this-environment"));Uc(e)&&t.o(n)})),t.a.Sb()||Hc(t.b)}function Rc(t,e){X(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(kc,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Cc(t.g).then((function(){Dc(t).s((function(e){var n=new Go("unknown",null,null,null,new S("operation-not-supported-in-this-environment"));Uc(e)&&t.o(n)}))})):Pc(t)})).s((function(){Pc(t)}))}function Lc(t,e){J(t.h,(function(t){return t==e}))}xc.prototype.reset=function(){this.f=!1,this.a.Ra(this.l),this.a=Oc(this.O,this.m,this.v,null,this.G),this.i={}},xc.prototype.o=function(t){if(!t)throw new S("invalid-auth-event");if(6e5<=A()-this.u&&(this.i={},this.u=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Eb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,r),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.u=A())),e=!0;break}}return Hc(this.b),e};var Mc=new zr(2e3,1e4),Vc=new zr(3e4,6e4);function jc(t,e,n,r,i,o,s){return t.a.Lb(e,n,r,(function(){t.f||(t.f=!0,t.a.Ea(t.l))}),(function(){t.reset()}),i,o,s)}function Uc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Bc(t,e,n,r,i){var o;return function(t){return t.b.set(kc,"pending",t.a)}(t.g).then((function(){return t.a.Mb(e,n,r,i).s((function(e){if(Uc(e))throw new S("operation-not-supported-in-this-environment");return o=e,Cc(t.g).then((function(){throw o}))})).then((function(){return t.a.Zb()?new Ee((function(){})):Cc(t.g).then((function(){return t.qa()})).then((function(){})).s((function(){}))}))}))}function Fc(t,e,n,r,i){return t.a.Nb(r,(function(t){e.ma(n,null,t,i)}),Mc.get())}xc.prototype.qa=function(){return this.b.qa()};var qc={};function Gc(t,e,n){return t=t+":"+e,n&&(t=t+":"+n.url),t}function zc(t,e,n,r){var i=Gc(e,n,r);return qc[i]||(qc[i]=new xc(t,e,n,r)),qc[i]}function Kc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Hc(t){t.g||(t.g=!0,Yc(t,!1,null,null))}function Wc(t){t.g&&!t.i&&Yc(t,!1,null,null)}function Xc(t,e){if(t.b=function(){return Ce(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Yc(t,e,n,r){e?r?function(t,e){if(t.b=function(){return xe(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):Xc(t,n):Xc(t,{user:null}),t.f=[],t.c=[]}function Jc(){}function Qc(){this.hb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.hb},set:function(t){this.hb=t},enumerable:!1})}function $c(t,e){this.a=e,Zr(this,"verificationId",t)}function Zc(t,e,n,r){return new Uo(t).eb(e,n).then((function(t){return new $c(t,r)}))}function th(t){var e=Wi(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new S("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");ti(this,{token:t,expirationTime:Wr(1e3*e.exp),authTime:Wr(1e3*e.auth_time),issuedAtTime:Wr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function eh(t,e,n){var r=e&&e[rh];if(!r)throw new S("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=yt(e),this.g=n,this.c=new uo(null,r),this.b=[];var i=this;z(e[nh]||[],(function(t){(t=ii(t))&&i.b.push(t)})),Zr(this,"auth",this.a),Zr(this,"session",this.c),Zr(this,"hints",this.b)}Kc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Kc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,r=t.b,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?t.a?(Yc(this,!0,null,t.a),Ce()):e.Fa(n,r)?function(t,e,n){n=n.Fa(e.c,e.b);var r=e.g,i=e.f,o=e.i,s=e.S(),a=!!e.c.match(/Redirect$/);n(r,i,s,o).then((function(e){Yc(t,a,e,null)})).s((function(e){Yc(t,a,null,e)}))}(this,t,e):xe(new S("invalid-auth-event")):(Yc(this,!1,null,null),Ce())}else xe(new S("invalid-auth-event"))},Kc.prototype.qa=function(){var t=this;return new Ee((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new S("timeout");t.a&&t.a.cancel(),t.a=kn(Vc.get()).then((function(){t.b||(t.g=!0,Yc(t,!0,null,e))}))}(t))}))},Jc.prototype.h=function(t,e){if(t){var n=t.c,r=t.b;t.a?(e.ma(t.c,null,t.a,t.b),Ce()):e.Fa(n,r)?function(t,e){var n=t.b,r=t.c;e.Fa(r,n)(t.g,t.f,t.S(),t.i).then((function(t){e.ma(r,t,null,n)})).s((function(t){e.ma(r,null,t,n)}))}(t,e):xe(new S("invalid-auth-event"))}else xe(new S("invalid-auth-event"))},$c.prototype.confirm=function(t){return t=Bo(this.verificationId,t),this.a(t)};var nh="mfaInfo",rh="mfaPendingCredential";function ih(t,e,n,r){S.call(this,"multi-factor-auth-required",r,e),this.b=new eh(t,e,n),Zr(this,"resolver",this.b)}function oh(t,e,n){if(t&&v(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new ih(e,t.serverResponse,n,t.message)}catch(t){}return null}function sh(){}function ah(t){Zr(this,"factorId",t.fa),this.a=t}function uh(t){if(ah.call(this,t),this.a.fa!=Uo.PROVIDER_ID)throw new S("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function ch(t,e){for(var n in $e.call(this,t),e)this[n]=e[n]}function hh(t,e){this.a=t,this.b=[],this.c=I(this.xc,this),fn(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&z(e.multiFactor.enrolledFactors,(function(t){var e=null,r={};if(t){t.uid&&(r[ai]=t.uid),t.displayName&&(r[oi]=t.displayName),t.enrollmentTime&&(r[si]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(r[ui]=t.phoneNumber);try{e=new ci(r)}catch(t){}t=e}else t=null;t&&n.push(t)})),fh(this,n)}function fh(t,e){t.b=e,Zr(t,"enrolledFactors",e)}function lh(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function ph(t,e){t.stop(),t.b=kn(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(t,e)).then((function(){return function(){var t=a.document,e=null;return Kr()||!t?Ce():new Ee((function(n){e=function(){Kr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).s((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return t.h()})).then((function(){ph(t,!0)})).s((function(e){t.i(e)&&ph(t,!1)}))}function dh(t){this.c=t,this.b=this.a=null}function vh(t){return t.b&&1e3*t.b.c||0}function yh(t,e){var n=e.refreshToken;t.b=Hi(e[ta]||""),t.a=n}function gh(t,e){this.a=t||null,this.b=e||null,ti(this,{lastSignInTime:Wr(e||null),creationTime:Wr(t||null)})}function mh(t,e,n,r,i,o){ti(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}function bh(t,e,n){this.G=[],this.l=t.apiKey,this.m=t.appName,this.o=t.authDomain||null;var r=et.SDK_VERSION?xr(et.SDK_VERSION):null;this.a=new $s(this.l,D(k),r),t.emulatorConfig&&sa(this.a,t.emulatorConfig),this.b=new dh(this.a),Nh(this,e[ta]),yh(this.b,e),Zr(this,"refreshToken",this.b.a),xh(this,n||{}),An.call(this),this.P=!1,this.o&&Rr()&&(this.i=zc(this.o,this.l,this.m)),this.R=[],this.f=null,this.u=function(t){return new lh((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=vh(t.b)-A()-3e5;return 0<e?e:0}))}(this),this.$=I(this.gb,this);var i=this;this.pa=null,this.Ba=function(t){i.wa(t.h)},this.ba=null,this.za=function(t){sa(i.a,t.c)},this.W=null,this.X=[],this.Aa=function(t){Eh(i,t.f)},this.aa=null,this.N=new hh(this,n),Zr(this,"multiFactor",this.N)}function wh(t,e){t.ba&&dn(t.ba,"languageCodeChanged",t.Ba),(t.ba=e)&&fn(e,"languageCodeChanged",t.Ba)}function Ih(t,e){t.W&&dn(t.W,"emulatorConfigChanged",t.za),(t.W=e)&&fn(e,"emulatorConfigChanged",t.za)}function Eh(t,e){t.X=e,ua(t.a,et.SDK_VERSION?xr(et.SDK_VERSION,t.X):null)}function Ah(t,e){t.aa&&dn(t.aa,"frameworkChanged",t.Aa),(t.aa=e)&&fn(e,"frameworkChanged",t.Aa)}function _h(t){try{return et.app(t.m).auth()}catch(e){throw new S("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function Th(t){t.A||t.u.b||(t.u.start(),dn(t,"tokenChanged",t.$),fn(t,"tokenChanged",t.$))}function Sh(t){dn(t,"tokenChanged",t.$),t.u.stop()}function Nh(t,e){t.ya=e,Zr(t,"_lat",e)}function kh(t){for(var e=[],n=0;n<t.R.length;n++)e.push(t.R[n](t));return De(e).then((function(){return t}))}function Ch(t){t.i&&!t.P&&(t.P=!0,Rc(t.i,t))}function xh(t,e){ti(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new gh(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Oh(){}function Dh(t){return Ce().then((function(){if(t.A)throw new S("app-deleted")}))}function Ph(t){return H(t.providerData,(function(t){return t.providerId}))}function Rh(t,e){e&&(Lh(t,e.providerId),t.providerData.push(e))}function Lh(t,e){J(t.providerData,(function(t){return t.providerId==e}))}function Mh(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Zr(t,e,n)}function Vh(t,e){t!=e&&(ti(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Zr(t,"metadata",function(t){return new gh(t.a,t.b)}(e.metadata)):Zr(t,"metadata",new gh),z(e.providerData,(function(e){Rh(t,e)})),function(t,e){t.b=e.b,t.a=e.a}(t.b,e.b),Zr(t,"refreshToken",t.b.a),fh(t.N,e.N.b))}function jh(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return iu(t.a,La,{idToken:e}).then(I(t.Jc,t))}(t,e).then((function(){return n||Mh(t,"isAnonymous",!1),e}))}))}function Uh(t,e){e[ta]&&t.ya!=e[ta]&&(yh(t.b,e),t.dispatchEvent(new ch("tokenChanged")),Nh(t,e[ta]),Mh(t,"refreshToken",t.b.a))}function Bh(t,e){return jh(t).then((function(){if(X(Ph(t),e))return kh(t).then((function(){throw new S("provider-already-linked")}))}))}function Fh(t,e,n){return ei({user:t,credential:Fo(e),additionalUserInfo:e=$i(e),operationType:n})}function qh(t,e){return Uh(t,e),t.reload().then((function(){return t}))}function Gh(t,e,n,r,i){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));if(t.f&&!i)return xe(t.f);var o=Qi(n.providerId),s=Fr(t.uid+":::"),a=null;(!Vr()||Er())&&t.o&&n.isOAuthProvider&&(a=bu(t.o,t.l,t.m,e,n,null,s,et.SDK_VERSION||null,null,null,t.tenantId));var u=gr(a,o&&o.ua,o&&o.ta);return r=r().then((function(){if(Kh(t),!i)return t.I().then((function(){}))})).then((function(){return jc(t.i,u,e,n,s,!!a,t.tenantId)})).then((function(){return new Ee((function(n,r){t.ma(e,null,new S("cancelled-popup-request"),t.h||null),t.g=n,t.O=r,t.h=s,t.c=Fc(t.i,t,e,u,s)}))})).then((function(t){return u&&yr(u),t?ei(t):null})).s((function(t){throw u&&yr(u),t})),Hh(t,r,i)}function zh(t,e,n,r,i){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));if(t.f&&!i)return xe(t.f);var o=null,s=Fr(t.uid+":::");return r=r().then((function(){if(Kh(t),!i)return t.I().then((function(){}))})).then((function(){return t.ga=s,kh(t)})).then((function(e){return t.ha&&(e=(e=t.ha).b.set(Yh,t.w(),e.a)),e})).then((function(){return Bc(t.i,e,n,s,t.tenantId)})).s((function(e){if(o=e,t.ha)return Jh(t.ha);throw o})).then((function(){if(o)throw o})),Hh(t,r,i)}function Kh(t){if(!t.i||!t.P){if(t.i&&!t.P)throw new S("internal-error");throw new S("auth-domain-config-required")}}function Hh(t,e,n){var r=function(t,e,n){return t.f&&!n?(e.cancel(),xe(t.f)):e.s((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.f||t.dispatchEvent(new ch("userInvalidated")),t.f=e),e}))}(t,e,n);return t.G.push(r),r.na((function(){Y(t.G,r)})),r.s((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),_h(t),I(t.ic,t))),n||e}))}function Wh(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName,emulatorConfig:t.emulatorConfig},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[ta]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var r=new bh(e,n,t);return t.providerData&&z(t.providerData,(function(t){t&&Rh(r,ei(t))})),t.redirectEventId&&(r.ga=t.redirectEventId),r}function Xh(t){this.a=t,this.b=nc()}eh.prototype.Qc=function(t){var e=this;return t.rb(this.a.a,this.c).then((function(t){var n=yt(e.f);return delete n[nh],delete n[rh],mt(n,t),e.g(n)}))},_(ih,S),sh.prototype.rb=function(t,e,n){return e.type==co?function(t,e,n,r){return n.Ha().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),mt(n,{phoneVerificationInfo:jo(t.a)}),iu(e,Pa,n)}))}(this,t,e,n):function(t,e,n){return n.Ha().then((function(n){return mt(n={mfaPendingCredential:n},{phoneVerificationInfo:jo(t.a)}),iu(e,Ra,n)}))}(this,t,e)},_(ah,sh),_(uh,ah),_(ch,$e),(t=hh.prototype).xc=function(t){fh(this,function(t){var e=[];return z(t.mfaInfo||[],(function(t){(t=ii(t))&&e.push(t)})),e}(t.gd))},t.Qb=function(){return this.a.I().then((function(t){return new uo(t,null)}))},t.ec=function(t,e){var n=this,r=this.a.a;return this.Qb().then((function(n){return t.rb(r,n,e)})).then((function(t){return Uh(n.a,t),n.a.reload()}))},t.ad=function(t){var e=this,n="string"==typeof t?t:t.uid,r=this.a.a;return this.a.I().then((function(t){return iu(r,ru,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var r=K(e.b,(function(t){return t.uid!=n}));return fh(e,r),Uh(e.a,t),e.a.reload().s((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},t.w=function(){return{multiFactor:{enrolledFactors:H(this.b,(function(t){return t.w()}))}}},lh.prototype.start=function(){this.a=this.c,ph(this,!0)},lh.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},dh.prototype.w=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:vh(this)}},dh.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?xe(new S("user-token-expired")):t||!this.b||A()>vh(this)-3e4?this.a?function(t,e){return function(t,e){return new Ee((function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?ca(t,t.l+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?r(su(t)):t.access_token&&t.refresh_token?n(t):r(new S("internal-error")):r(new S("network-request-failed"))}),"POST",Zn(e).toString(),t.g,t.v.get()):r(new S("internal-error"))}))}(t.c,e).then((function(e){return t.b=Hi(e.access_token),t.a=e.refresh_token,{accessToken:t.b.toString(),refreshToken:t.a}})).s((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):Ce(null):Ce({accessToken:this.b.toString(),refreshToken:this.a})},gh.prototype.w=function(){return{lastLoginAt:this.b,createdAt:this.a}},_(bh,An),bh.prototype.wa=function(t){this.pa=t,oa(this.a,t)},bh.prototype.ka=function(){return this.pa},bh.prototype.Ga=function(){return $(this.X)},bh.prototype.gb=function(){this.u.b&&(this.u.stop(),this.u.start())},Zr(bh.prototype,"providerId","firebase"),(t=bh.prototype).reload=function(){var t=this;return Hh(this,Dh(this).then((function(){return jh(t).then((function(){return kh(t)})).then(Oh)})))},t.nc=function(t){return this.I(t).then((function(t){return new th(t)}))},t.I=function(t){var e=this;return Hh(this,Dh(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new S("internal-error");return t.accessToken!=e.ya&&(Nh(e,t.accessToken),e.dispatchEvent(new ch("tokenChanged"))),Mh(e,"refreshToken",t.refreshToken),t.accessToken})))},t.Jc=function(t){if(!(t=t.users)||!t.length)throw new S("internal-error");xh(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?H(t,(function(t){return new mh(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Rh(this,e[n]);Mh(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new ch("userReloaded",{gd:t}))},t.Kc=function(t){return Qr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.sb(t)},t.sb=function(t){var e=this,n=null;return Hh(this,t.c(this.a,this.uid).then((function(t){return Uh(e,t),n=Fh(e,t,"reauthenticate"),e.f=null,e.reload()})).then((function(){return n})),!0)},t.Bc=function(t){return Qr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.pb(t)},t.pb=function(t){var e=this,n=null;return Hh(this,Bh(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=Fh(e,t,"link"),qh(e,t)})).then((function(){return n})))},t.Cc=function(t,e){var n=this;return Hh(this,Bh(this,"phone").then((function(){return Zc(_h(n),t,e,I(n.pb,n))})))},t.Lc=function(t,e){var n=this;return Hh(this,Ce().then((function(){return Zc(_h(n),t,e,I(n.sb,n))})),!0)},t.Ab=function(t){var e=this;return Hh(this,this.I().then((function(n){return e.a.Ab(n,t)})).then((function(t){return Uh(e,t),e.reload()})))},t.dd=function(t){var e=this;return Hh(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return Uh(e,t),e.reload()})))},t.Bb=function(t){var e=this;return Hh(this,this.I().then((function(n){return e.a.Bb(n,t)})).then((function(t){return Uh(e,t),e.reload()})))},t.Cb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Dh(this);var e=this;return Hh(this,this.I().then((function(n){return e.a.Cb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return Uh(e,t),Mh(e,"displayName",t.displayName||null),Mh(e,"photoURL",t.photoUrl||null),z(e.providerData,(function(t){"password"===t.providerId&&(Zr(t,"displayName",e.displayName),Zr(t,"photoURL",e.photoURL))})),kh(e)})).then(Oh))},t.bd=function(t){var e=this;return Hh(this,jh(this).then((function(n){return X(Ph(e),t)?function(t,e,n){return iu(t,xa,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return z(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),z(Ph(e),(function(t){n[t]||Lh(e,t)})),n[Uo.PROVIDER_ID]||Zr(e,"phoneNumber",null),kh(e)})):kh(e).then((function(){throw new S("no-such-provider")}))})))},t.delete=function(){var t=this;return Hh(this,this.I().then((function(e){return iu(t.a,Ca,{idToken:e})})).then((function(){t.dispatchEvent(new ch("userDeleted"))}))).then((function(){for(var e=0;e<t.G.length;e++)t.G[e].cancel("app-deleted");wh(t,null),Ih(t,null),Ah(t,null),t.G=[],t.A=!0,Sh(t),Zr(t,"refreshToken",null),t.i&&Lc(t.i,t)}))},t.Eb=function(t,e){return!!("linkViaPopup"==t&&(this.h||null)==e&&this.g||"reauthViaPopup"==t&&(this.h||null)==e&&this.g||"linkViaRedirect"==t&&(this.ga||null)==e||"reauthViaRedirect"==t&&(this.ga||null)==e)},t.ma=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.h||null)||(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"linkViaPopup"==t&&e==(this.h||null)?I(this.Jb,this):"reauthViaPopup"==t&&e==(this.h||null)?I(this.Kb,this):"linkViaRedirect"==t&&(this.ga||null)==e?I(this.Jb,this):"reauthViaRedirect"==t&&(this.ga||null)==e?I(this.Kb,this):null},t.Dc=function(t){var e=this;return Gh(this,"linkViaPopup",t,(function(){return Bh(e,t.providerId).then((function(){return kh(e)}))}),!1)},t.Mc=function(t){return Gh(this,"reauthViaPopup",t,(function(){return Ce()}),!0)},t.Ec=function(t){var e=this;return zh(this,"linkViaRedirect",t,(function(){return Bh(e,t.providerId)}),!1)},t.Nc=function(t){return zh(this,"reauthViaRedirect",t,(function(){return Ce()}),!0)},t.Jb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Hh(this,this.I().then((function(n){return Ea(i.a,{requestUri:t,postBody:r,sessionId:e,idToken:n})})).then((function(t){return o=Fh(i,t,"link"),qh(i,t)})).then((function(){return o})))},t.Kb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Hh(this,Ce().then((function(){return lo(Aa(i.a,{requestUri:t,sessionId:e,postBody:r,tenantId:n}),i.uid)})).then((function(t){return o=Fh(i,t,"reauthenticate"),Uh(i,t),i.f=null,i.reload()})).then((function(){return o})),!0)},t.tb=function(t){var e=this,n=null;return Hh(this,this.I().then((function(e){return n=e,void 0===t||vt(t)?{}:Gi(new Pi(t))})).then((function(t){return e.a.tb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},t.Db=function(t,e){var n=this,r=null;return Hh(this,this.I().then((function(t){return r=t,void 0===e||vt(e)?{}:Gi(new Pi(e))})).then((function(e){return n.a.Db(r,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},t.ic=function(t){var e=null,n=this;return Hh(this,t=lo(Ce(t),n.uid).then((function(t){return e=Fh(n,t,"reauthenticate"),Uh(n,t),n.f=null,n.reload()})).then((function(){return e})),!0)},t.toJSON=function(){return this.w()},t.w=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};return this.metadata&&mt(t,this.metadata.w()),z(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),mt(t,this.N.w()),t};var Yh={name:"redirectUser",D:"session"};function Jh(t){return oc(t.b,Yh,t.a)}function Qh(t){this.a=t,this.b=nc(),this.c=null,this.f=function(t){var e=tf("local"),n=tf("session"),r=tf("none");return function(t,e,n){var r=ic(e,n),i=rc(t,e.D);return t.get(e,n).then((function(o){var s=null;try{s=Br(a.localStorage.getItem(r))}catch(t){}if(s&&!o)return a.localStorage.removeItem(r),t.set(e,s,n);s&&o&&"localStorage"!=i.type&&a.localStorage.removeItem(r)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(i){return i?n:t.b.get(r,t.a).then((function(n){return n?r:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(Zh,t.a).then((function(t){return t?tf(t):e}))}))}))})).then((function(e){return t.c=e,$h(t,e.D)})).s((function(){t.c||(t.c=e)}))}(this),this.b.addListener(tf("local"),this.a,I(this.g,this))}function $h(t,e){var n,r=[];for(n in tc)tc[n]!==e&&r.push(oc(t.b,tf(tc[n]),t.a));return r.push(oc(t.b,Zh,t.a)),function(t){return new Ee((function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},s=function(t){n(t)},a=0;a<t.length;a++)Oe(t[a],E(o,a),s);else e(i)}))}(r)}Qh.prototype.g=function(){var t=this,e=tf("local");of(this,(function(){return Ce().then((function(){return t.c&&"local"!=t.c.D?t.b.get(e,t.a):null})).then((function(n){if(n)return $h(t,"local").then((function(){t.c=e}))}))}))};var Zh={name:"persistence",D:"session"};function tf(t){return{name:"authUser",D:t}}function ef(t,e){return of(t,(function(){return t.b.set(t.c,e.w(),t.a)}))}function nf(t){return of(t,(function(){return oc(t.b,t.c,t.a)}))}function rf(t,e,n){return of(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),t&&n&&(t.emulatorConfig=n),Wh(t||{})}))}))}function of(t,e){return t.f=t.f.then(e,e),t.f}function sf(t){if(this.m=!1,Zr(this,"settings",new Qc),Zr(this,"app",t),!df(this).options||!df(this).options.apiKey)throw new S("invalid-api-key");t=et.SDK_VERSION?xr(et.SDK_VERSION):null,this.a=new $s(df(this).options&&df(this).options.apiKey,D(k),t),this.R=[],this.u=[],this.P=[],this.ac=et.INTERNAL.createSubscribe(I(this.yc,this)),this.X=void 0,this.bc=et.INTERNAL.createSubscribe(I(this.zc,this)),lf(this,null),this.l=new Qh(df(this).options.apiKey+":"+df(this).name),this.G=new Xh(df(this).options.apiKey+":"+df(this).name),this.$=mf(this,function(t){var e=df(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(Yh,t.a).then((function(t){return t&&e&&(t.authDomain=e),Wh(t||{})}))}(t.G,df(t).options.authDomain).then((function(e){return(t.o=e)&&(e.ha=t.G),Jh(t.G)}));return mf(t,e)}(t).then((function(){return rf(t.l,e,t.f)})).then((function(e){return e?(e.ha=t.G,t.o&&(t.o.ga||null)==(e.ga||null)?e:e.reload().then((function(){return ef(t.l,e).then((function(){return e}))})).s((function(n){return"auth/network-request-failed"==n.code?e:nf(t.l)}))):null})).then((function(e){lf(t,e||null)}));return mf(t,n)}(this)),this.i=mf(this,function(t){return t.$.then((function(){return ff(t)})).s((function(){})).then((function(){if(!t.m)return t.pa()})).s((function(){})).then((function(){if(!t.m){t.ba=!0;var e=t.l;e.b.addListener(tf("local"),e.a,t.pa)}}))}(this)),this.ba=!1,this.pa=I(this.Yc,this),this.Ba=I(this.da,this),this.ya=I(this.kc,this),this.za=I(this.vc,this),this.Aa=I(this.wc,this),this.b=null,function(t){var e=df(t).options.authDomain,n=df(t).options.apiKey;e&&Rr()&&(t.gb=t.$.then((function(){if(!t.m){if(t.b=zc(e,n,df(t).name,t.f),Rc(t.b,t),vf(t)&&Ch(vf(t)),t.o){Ch(t.o);var r=t.o;r.wa(t.ka()),wh(r,t),Eh(r=t.o,t.N),Ah(r,t),sa((r=t.o).a,t.f),Ih(r,t),t.o=null}return t.b}})))}(this),this.INTERNAL={},this.INTERNAL.delete=I(this.delete,this),this.INTERNAL.logFramework=I(this.Fc,this),this.A=0,An.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ka()},set:function(t){this.wa(t)},enumerable:!1}),t.aa=null,Object.defineProperty(t,"ti",{get:function(){return this.S()},set:function(t){this.xb(t)},enumerable:!1}),t.W=null}(this),this.N=[],this.f=null}function af(t){$e.call(this,"languageCodeChanged"),this.h=t}function uf(t){$e.call(this,"emulatorConfigChanged"),this.c=t}function cf(t){$e.call(this,"frameworkChanged"),this.f=t}function hf(t){return t.gb||xe(new S("auth-domain-config-required"))}function ff(t){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));var e=hf(t).then((function(){return t.b.qa()})).then((function(t){return t?ei(t):null}));return mf(t,e)}function lf(t,e){vf(t)&&(function(t,e){J(t.R,(function(t){return t==e}))}(vf(t),t.Ba),dn(vf(t),"tokenChanged",t.ya),dn(vf(t),"userDeleted",t.za),dn(vf(t),"userInvalidated",t.Aa),Sh(vf(t))),e&&(e.R.push(t.Ba),fn(e,"tokenChanged",t.ya),fn(e,"userDeleted",t.za),fn(e,"userInvalidated",t.Aa),0<t.A&&Th(e)),Zr(t,"currentUser",e),e&&(e.wa(t.ka()),wh(e,t),Eh(e,t.N),Ah(e,t),sa(e.a,t.f),Ih(e,t))}function pf(t,e){var n=null,r=null;return mf(t,e.then((function(e){return n=Fo(e),r=$i(e),function(t,e){var n={};return n.apiKey=df(t).options.apiKey,n.authDomain=df(t).options.authDomain,n.appName=df(t).name,t.f&&(n.emulatorConfig=t.f),t.$.then((function(){return function(t,e,n,r){var i=new bh(t,e);return n&&(i.ha=n),r&&Eh(i,r),i.reload().then((function(){return i}))}(n,e,t.G,t.Ga())})).then((function(e){return vf(t)&&e.uid==vf(t).uid?(Vh(vf(t),e),t.da(e)):(lf(t,e),Ch(e),t.da(e))})).then((function(){gf(t)}))}(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),t,I(t.jc,t))),n||e})).then((function(){return ei({user:vf(t),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function df(t){return t.app}function vf(t){return t.currentUser}function yf(t){return vf(t)&&vf(t)._lat||null}function gf(t){if(t.ba){for(var e=0;e<t.u.length;e++)t.u[e]&&t.u[e](yf(t));if(t.X!==t.getUid()&&t.P.length)for(t.X=t.getUid(),e=0;e<t.P.length;e++)t.P[e]&&t.P[e](yf(t))}}function mf(t,e){return t.R.push(e),e.na((function(){Y(t.R,e)})),e}function bf(){}function wf(){this.a={},this.b=1e12}Qh.prototype.wb=function(t){var e=null,n=this;return function(t){var e=new S("invalid-persistence-type"),n=new S("unsupported-persistence-type");t:{for(r in tc)if(tc[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(_r()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;case"Worker":if("session"===t||!Pu()&&"none"!==t)throw n;break;default:if(!Pr()&&"none"!==t)throw n}}(t),of(this,(function(){return t!=n.c.D?n.b.get(n.c,n.a).then((function(r){return e=r,$h(n,t)})).then((function(){if(n.c=tf(t),e)return n.b.set(n.c,e,n.a)})):Ce()}))},_(sf,An),_(af,$e),_(uf,$e),_(cf,$e),(t=sf.prototype).wb=function(t){return mf(this,t=this.l.wb(t))},t.wa=function(t){this.aa===t||this.m||(this.aa=t,oa(this.a,this.aa),this.dispatchEvent(new af(this.ka())))},t.ka=function(){return this.aa},t.ed=function(){var t=a.navigator;this.wa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.fd=function(t){if(!this.f){if(!/^https?:\/\//.test(t))throw new S("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");Hr("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),a.document&&wr().then((function(){var t=a.document.createElement("div");t.innerText="Running in emulator mode. Do not use with production credentials.",t.style.position="fixed",t.style.width="100%",t.style.backgroundColor="#ffffff",t.style.border=".1em solid #000000",t.style.color="#ff0000",t.style.bottom="0px",t.style.left="0px",t.style.margin="0px",t.style.zIndex=1e4,t.style.textAlign="center",t.classList.add("firebase-emulator-warning"),a.document.body.appendChild(t)})),this.f={url:t},this.settings.hb=!0,sa(this.a,this.f),this.dispatchEvent(new uf(this.f))}},t.Fc=function(t){this.N.push(t),ua(this.a,et.SDK_VERSION?xr(et.SDK_VERSION,this.N):null),this.dispatchEvent(new cf(this.N))},t.Ga=function(){return $(this.N)},t.xb=function(t){this.W===t||this.m||(this.W=t,this.a.b=this.W)},t.S=function(){return this.W},t.toJSON=function(){return{apiKey:df(this).options.apiKey,authDomain:df(this).options.authDomain,appName:df(this).name,currentUser:vf(this)&&vf(this).w()}},t.Eb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.h==e&&!!this.g;default:return!1}},t.ma=function(t,e,n,r){"signInViaPopup"==t&&this.h==r&&(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.h==e&&this.g?I(this.hc,this):null},t.hc=function(t,e,n,r){var i=this,o={requestUri:t,postBody:r,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.$.then((function(){return pf(i,Ia(i.a,o))}))},t.Wc=function(t){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));var e=this,n=Qi(t.providerId),r=Fr(),i=null;(!Vr()||Er())&&df(this).options.authDomain&&t.isOAuthProvider&&(i=bu(df(this).options.authDomain,df(this).options.apiKey,df(this).name,"signInViaPopup",t,null,r,et.SDK_VERSION||null,null,null,this.S(),this.f));var o=gr(i,n&&n.ua,n&&n.ta);return mf(this,n=hf(this).then((function(n){return jc(n,o,"signInViaPopup",t,r,!!i,e.S())})).then((function(){return new Ee((function(t,n){e.ma("signInViaPopup",null,new S("cancelled-popup-request"),e.h),e.g=t,e.O=n,e.h=r,e.c=Fc(e.b,e,"signInViaPopup",o,r)}))})).then((function(t){return o&&yr(o),t?ei(t):null})).s((function(t){throw o&&yr(o),t})))},t.Xc=function(t){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));var e=this;return mf(this,hf(this).then((function(){return function(t){return of(t,(function(){return t.b.set(Zh,t.c.D,t.a)}))}(e.l)})).then((function(){return Bc(e.b,"signInViaRedirect",t,void 0,e.S())})))},t.qa=function(){var t=this;return ff(this).then((function(e){return t.b&&Wc(t.b.b),e})).s((function(e){throw t.b&&Wc(t.b.b),e}))},t.cd=function(t){if(!t)return xe(new S("null-user"));if(this.W!=t.tenantId)return xe(new S("tenant-id-mismatch"));var e=this,n={};n.apiKey=df(this).options.apiKey,n.authDomain=df(this).options.authDomain,n.appName=df(this).name;var r=function(t,e,n,r){var i=t.b,o={};return o[ta]=i.b&&i.b.toString(),o.refreshToken=i.a,e=new bh(e||{apiKey:t.l,authDomain:t.o,appName:t.m},o),n&&(e.ha=n),r&&Eh(e,r),Vh(e,t),e}(t,n,e.G,e.Ga());return mf(this,this.i.then((function(){if(df(e).options.apiKey!=t.l)return r.reload()})).then((function(){return vf(e)&&t.uid==vf(e).uid?(Vh(vf(e),t),e.da(t)):(lf(e,r),Ch(r),e.da(r))})).then((function(){gf(e)})))},t.zb=function(){var t=this;return mf(this,this.i.then((function(){return t.b&&Wc(t.b.b),vf(t)?(lf(t,null),nf(t.l).then((function(){gf(t)}))):Ce()})))},t.Yc=function(){var t=this;return rf(this.l,df(this).options.authDomain).then((function(e){if(!t.m){var n;if(n=vf(t)&&e){n=vf(t).uid;var r=e.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Vh(vf(t),e),vf(t).I();(vf(t)||e)&&(lf(t,e),e&&(Ch(e),e.ha=t.G),t.b&&Rc(t.b,t),gf(t))}}))},t.da=function(t){return ef(this.l,t)},t.kc=function(){gf(this),this.da(vf(this))},t.vc=function(){this.zb()},t.wc=function(){this.zb()},t.jc=function(t){var e=this;return this.i.then((function(){return pf(e,Ce(t))}))},t.yc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(vf(e))}))},t.zc=function(t){var e=this;!function(t,e){t.P.push(e),mf(t,t.i.then((function(){!t.m&&X(t.P,e)&&t.X!==t.getUid()&&(t.X=t.getUid(),e(yf(t)))})))}(this,(function(){t.next(vf(e))}))},t.Hc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){"function"==typeof t?t(vf(r)):"function"==typeof t.next&&t.next(vf(r))})),this.ac(t,e,n)},t.Gc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){r.X=r.getUid(),"function"==typeof t?t(vf(r)):"function"==typeof t.next&&t.next(vf(r))})),this.bc(t,e,n)},t.mc=function(t){var e=this;return mf(this,this.i.then((function(){return vf(e)?vf(e).I(t).then((function(t){return{accessToken:t}})):null})))},t.Sc=function(t){var e=this;return this.i.then((function(){return pf(e,iu(e.a,$a,{token:t}))})).then((function(t){var n=t.user;return Mh(n,"isAnonymous",!1),e.da(n),t}))},t.Tc=function(t,e){var n=this;return this.i.then((function(){return pf(n,iu(n.a,Za,{email:t,password:e}))}))},t.dc=function(t,e){var n=this;return this.i.then((function(){return pf(n,iu(n.a,Na,{email:t,password:e}))}))},t.Za=function(t){var e=this;return this.i.then((function(){return pf(e,t.ja(e.a))}))},t.Rc=function(t){return Qr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Za(t)},t.yb=function(){var t=this;return this.i.then((function(){var e=vf(t);if(e&&e.isAnonymous){var n=ei({providerId:null,isNewUser:!1});return ei({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return pf(t,t.a.yb()).then((function(e){var n=e.user;return Mh(n,"isAnonymous",!0),t.da(n),e}))}))},t.getUid=function(){return vf(this)&&vf(this).uid||null},t.cc=function(t){this.addAuthTokenListener(t),this.A++,0<this.A&&vf(this)&&Th(vf(this))},t.Oc=function(t){var e=this;z(this.u,(function(n){n==t&&e.A--})),0>this.A&&(this.A=0),0==this.A&&vf(this)&&Sh(vf(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.u.push(t),mf(this,this.i.then((function(){e.m||X(e.u,t)&&t(yf(e))})))},t.removeAuthTokenListener=function(t){J(this.u,(function(e){return e==t}))},t.delete=function(){this.m=!0;for(var t=0;t<this.R.length;t++)this.R[t].cancel("app-deleted");return this.R=[],this.l&&(t=this.l).b.removeListener(tf("local"),t.a,this.pa),this.b&&(Lc(this.b,this),Wc(this.b.b)),Promise.resolve()},t.gc=function(t){return mf(this,function(t,e){return iu(t,ka,{identifier:e,continueUri:Lr()?lr():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.a,t))},t.Ac=function(t){return!!Lo(t)},t.vb=function(t,e){var n=this;return mf(this,Ce().then((function(){var t=new Pi(e);if(!t.c)throw new S("argument-error",Mi+" must be true when sending sign in link to email");return Gi(t)})).then((function(e){return n.a.vb(t,e)})).then((function(){})))},t.hd=function(t){return this.Qa(t).then((function(t){return t.data.email}))},t.mb=function(t,e){return mf(this,this.a.mb(t,e).then((function(){})))},t.Qa=function(t){return mf(this,this.a.Qa(t).then((function(t){return new hi(t)})))},t.ib=function(t){return mf(this,this.a.ib(t).then((function(){})))},t.ub=function(t,e){var n=this;return mf(this,Ce().then((function(){return void 0===e||vt(e)?{}:Gi(new Pi(e))})).then((function(e){return n.a.ub(t,e)})).then((function(){})))},t.Vc=function(t,e){return mf(this,Zc(this,t,e,I(this.Za,this)))},t.Uc=function(t,e){var n=this;return mf(this,Ce().then((function(){var r=e||lr(),i=Ro(t,r);if(!(r=Lo(r)))throw new S("argument-error","Invalid email link!");if(r.tenantId!==n.S())throw new S("tenant-id-mismatch");return n.Za(i)})))},bf.prototype.render=function(){},bf.prototype.reset=function(){},bf.prototype.getResponse=function(){},bf.prototype.execute=function(){};var If=null;function Ef(t,e){return(e=Af(e))&&t.a[e]||null}function Af(t){return(t=void 0===t?1e12:t)?t.toString():null}function _f(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=he(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():fn(this.f,"click",this.i)}function Tf(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function Sf(){}function Nf(){}wf.prototype.render=function(t,e){return this.a[this.b.toString()]=new _f(t,e),this.b++},wf.prototype.reset=function(t){var e=Ef(this,t);t=Af(t),e&&t&&(e.delete(),delete this.a[t])},wf.prototype.getResponse=function(t){return(t=Ef(this,t))?t.getResponse():null},wf.prototype.execute=function(t){(t=Ef(this,t))&&t.execute()},_f.prototype.getResponse=function(){return Tf(this),this.b},_f.prototype.execute=function(){Tf(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},_f.prototype.delete=function(){Tf(this),this.g=!0,clearTimeout(this.a),this.a=null,dn(this.f,"click",this.i)},Zr(Sf,"FACTOR_ID","phone"),Nf.prototype.g=function(){return If||(If=new wf),Ce(If)},Nf.prototype.c=function(){};var kf=null;function Cf(){this.b=a.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var xf=new wt(_t,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Of=new zr(3e4,6e4);Cf.prototype.g=function(t){var e=this;return new Ee((function(n,r){var i=setTimeout((function(){r(new S("network-request-failed"))}),Of.get());!a.grecaptcha||t!==e.f&&!e.b?(a[e.a]=function(){if(a.grecaptcha){e.f=t;var o=a.grecaptcha.render;a.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(i),n(a.grecaptcha)}else clearTimeout(i),r(new S("internal-error"));delete a[e.a]},Ce(Ks(kt(xf,{onload:e.a,hl:t||""}))).s((function(){clearTimeout(i),r(new S("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(a.grecaptcha))}))},Cf.prototype.c=function(){this.b--};var Df=null;function Pf(t,e,n,r,i,o,s){if(Zr(this,"type","recaptcha"),this.c=this.f=null,this.A=!1,this.m=e,this.g=null,s?(kf||(kf=new Nf),s=kf):(Df||(Df=new Cf),s=Df),this.v=s,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Mf])throw new S("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Vf],!a.document)throw new S("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!he(e)||!this.i&&he(e).hasChildNodes())throw new S("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new $s(t,o||null,i||null),this.u=r||function(){return null};var u=this;this.l=[];var c=this.a[Rf];this.a[Rf]=function(t){if(jf(u,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=Dr(c,a);"function"==typeof e&&e(t)}};var h=this.a[Lf];this.a[Lf]=function(){if(jf(u,null),"function"==typeof h)h();else if("string"==typeof h){var t=Dr(h,a);"function"==typeof t&&t()}}}var Rf="callback",Lf="expired-callback",Mf="sitekey",Vf="size";function jf(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function Uf(t,e){return t.h.push(e),e.na((function(){Y(t.h,e)})),e}function Bf(t){if(t.A)throw new S("internal-error","RecaptchaVerifier instance has been destroyed.")}function Ff(t,e,n){var r=!1;try{this.b=n||et.app()}catch(t){throw new S("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new S("invalid-api-key");n=this.b.options.apiKey;var i=this,o=null;try{o=this.b.auth().Ga()}catch(t){}try{r=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}o=et.SDK_VERSION?xr(et.SDK_VERSION,o):null,Pf.call(this,n,t,e,(function(){try{var t=i.b.auth().ka()}catch(e){t=null}return t}),o,D(k),r)}function qf(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,s=0;s<e.length;s++)if(e[s].optional)o=!0;else{if(o)throw new S("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].K(n[i])&&!o){if(e=e[i],0>i||i>=Gf.length)throw new S("internal-error","Argument validator received an unsupported number of arguments.");n=Gf[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.J+".";break t}r=null}}if(r)throw new S("argument-error",t+" failed: "+r)}(t=Pf.prototype).Ia=function(){var t=this;return this.f?this.f:this.f=Uf(this,Ce().then((function(){if(Lr()&&!Ar())return wr();throw new S("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.v.g(t.u())})).then((function(e){return t.g=e,iu(t.o,Fa,{})})).then((function(e){t.a[Mf]=e.recaptchaSiteKey})).s((function(e){throw t.f=null,e})))},t.render=function(){Bf(this);var t=this;return Uf(this,this.Ia().then((function(){if(null===t.c){var e=t.m;if(!t.i){var n=he(e);e=function(t,e,n){var r=arguments,i=document,o=String(r[0]),s=r[1];if(!ce&&s&&(s.name||s.type)){if(o=["<",o],s.name&&o.push(' name="',Kt(s.name),'"'),s.type){o.push(' type="',Kt(s.type),'"');var a={};mt(a,s),delete a.type,s=a}o.push(">"),o=o.join("")}return o=ye(i,o),s&&("string"==typeof s?o.className=s:Array.isArray(s)?o.className=s.join(" "):fe(o,s)),2<r.length&&ve(i,o,r),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},t.verify=function(){Bf(this);var t=this;return Uf(this,this.render().then((function(e){return new Ee((function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){J(t.l,(function(t){return t==e}))}(t,i),n(e))};t.l.push(i),t.i&&t.g.execute(t.c)}}))})))},t.reset=function(){Bf(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Bf(this),this.A=!0,this.v.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=he(this.m);for(var e;e=t.firstChild;)t.removeChild(e)}},_(Ff,Pf);var Gf="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function zf(t,e){return{name:t||"",J:"a valid string",optional:!!e,K:function(t){return"string"==typeof t}}}function Kf(t,e){return{name:t||"",J:"a boolean",optional:!!e,K:function(t){return"boolean"==typeof t}}}function Hf(t,e){return{name:t||"",J:"a valid object",optional:!!e,K:v}}function Wf(t,e){return{name:t||"",J:"a function",optional:!!e,K:function(t){return"function"==typeof t}}}function Xf(t,e){return{name:t||"",J:"null",optional:!!e,K:function(t){return null===t}}}function Yf(t){return{name:t?t+"Credential":"credential",J:t?"a valid "+t+" credential":"a valid credential",optional:!1,K:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ja||!n)}}}function Jf(t,e){return v(t)&&"string"==typeof t.type&&t.type===e&&"function"==typeof t.Ha}function Qf(t){return v(t)&&"string"==typeof t.uid}function $f(t,e,n,r){return{name:n||"",J:t.J+" or "+e.J,optional:!!r,K:function(n){return t.K(n)||e.K(n)}}}function Zf(t,e){for(var n in e){var r=e[n].name;t[r]=nl(r,t[n],e[n].j)}}function tl(t,e){for(var n in e){var r=e[n].name;r!==n&&Object.defineProperty(t,r,{get:E((function(t){return this[t]}),n),set:E((function(t,e,n,r){qf(t,[n],[r],!0),this[e]=r}),r,n,e[n].jb),enumerable:!0})}}function el(t,e,n,r){t[e]=nl(e,n,r)}function nl(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return qf(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}Zf(sf.prototype,{ib:{name:"applyActionCode",j:[zf("code")]},Qa:{name:"checkActionCode",j:[zf("code")]},mb:{name:"confirmPasswordReset",j:[zf("code"),zf("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[zf("email"),zf("password")]},gc:{name:"fetchSignInMethodsForEmail",j:[zf("email")]},qa:{name:"getRedirectResult",j:[]},Ac:{name:"isSignInWithEmailLink",j:[zf("emailLink")]},Gc:{name:"onAuthStateChanged",j:[$f(Hf(),Wf(),"nextOrObserver"),Wf("opt_error",!0),Wf("opt_completed",!0)]},Hc:{name:"onIdTokenChanged",j:[$f(Hf(),Wf(),"nextOrObserver"),Wf("opt_error",!0),Wf("opt_completed",!0)]},ub:{name:"sendPasswordResetEmail",j:[zf("email"),$f(Hf("opt_actionCodeSettings",!0),Xf(null,!0),"opt_actionCodeSettings",!0)]},vb:{name:"sendSignInLinkToEmail",j:[zf("email"),Hf("actionCodeSettings")]},wb:{name:"setPersistence",j:[zf("persistence")]},Rc:{name:"signInAndRetrieveDataWithCredential",j:[Yf()]},yb:{name:"signInAnonymously",j:[]},Za:{name:"signInWithCredential",j:[Yf()]},Sc:{name:"signInWithCustomToken",j:[zf("token")]},Tc:{name:"signInWithEmailAndPassword",j:[zf("email"),zf("password")]},Uc:{name:"signInWithEmailLink",j:[zf("email"),zf("emailLink",!0)]},Vc:{name:"signInWithPhoneNumber",j:[zf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Wc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Xc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},cd:{name:"updateCurrentUser",j:[$f({name:"user",J:"an instance of Firebase User",optional:!1,K:function(t){return!!(t&&t instanceof bh)}},Xf(),"user")]},zb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[zf(null,!0)]},ed:{name:"useDeviceLanguage",j:[]},fd:{name:"useEmulator",j:[zf("url")]},hd:{name:"verifyPasswordResetCode",j:[zf("code")]}}),tl(sf.prototype,{lc:{name:"languageCode",jb:$f(zf(),Xf(),"languageCode")},ti:{name:"tenantId",jb:$f(zf(),Xf(),"tenantId")}}),sf.Persistence=tc,sf.Persistence.LOCAL="local",sf.Persistence.SESSION="session",sf.Persistence.NONE="none",Zf(bh.prototype,{delete:{name:"delete",j:[]},nc:{name:"getIdTokenResult",j:[Kf("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Kf("opt_forceRefresh",!0)]},Bc:{name:"linkAndRetrieveDataWithCredential",j:[Yf()]},pb:{name:"linkWithCredential",j:[Yf()]},Cc:{name:"linkWithPhoneNumber",j:[zf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Dc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ec:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Kc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Yf()]},sb:{name:"reauthenticateWithCredential",j:[Yf()]},Lc:{name:"reauthenticateWithPhoneNumber",j:[zf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Mc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Nc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},tb:{name:"sendEmailVerification",j:[$f(Hf("opt_actionCodeSettings",!0),Xf(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[zf(null,!0)]},bd:{name:"unlink",j:[zf("provider")]},Ab:{name:"updateEmail",j:[zf("email")]},Bb:{name:"updatePassword",j:[zf("password")]},dd:{name:"updatePhoneNumber",j:[Yf("phone")]},Cb:{name:"updateProfile",j:[Hf("profile")]},Db:{name:"verifyBeforeUpdateEmail",j:[zf("email"),$f(Hf("opt_actionCodeSettings",!0),Xf(null,!0),"opt_actionCodeSettings",!0)]}}),Zf(wf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zf(bf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zf(Ee.prototype,{na:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),tl(Qc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",jb:Kf("appVerificationDisabledForTesting")}}),Zf($c.prototype,{confirm:{name:"confirm",j:[zf("verificationCode")]}}),el(fo,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[bo,Do,Vo,yo],r=0;r<n.length;r++)if(e=n[r](t))return e;return null}),[$f(zf(),Hf(),"json")]),el(Po,"credential",(function(t,e){return new Oo(t,e)}),[zf("email"),zf("password")]),Zf(Oo.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),Zf(Ao.prototype,{Ca:{name:"addScope",j:[zf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(Ao,"credential",_o,[$f(zf(),Hf(),"token")]),el(Po,"credentialWithLink",Ro,[zf("email"),zf("emailLink")]),Zf(To.prototype,{Ca:{name:"addScope",j:[zf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(To,"credential",So,[$f(zf(),Hf(),"token")]),Zf(No.prototype,{Ca:{name:"addScope",j:[zf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(No,"credential",ko,[$f(zf(),$f(Hf(),Xf()),"idToken"),$f(zf(),Xf(),"accessToken",!0)]),Zf(Co.prototype,{Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(Co,"credential",xo,[$f(zf(),Hf(),"token"),zf("secret",!0)]),Zf(Eo.prototype,{Ca:{name:"addScope",j:[zf("scope")]},credential:{name:"credential",j:[$f(zf(),$f(Hf(),Xf()),"optionsOrIdToken"),$f(zf(),Xf(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),Zf(go.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),Zf(po.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),el(Uo,"credential",Bo,[zf("verificationId"),zf("verificationCode")]),Zf(Uo.prototype,{eb:{name:"verifyPhoneNumber",j:[$f(zf(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(t){return!!t&&(t.session&&t.phoneNumber?Jf(t.session,co)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?Jf(t.session,ho)&&Qf(t.multiFactorHint):t.session&&t.multiFactorUid?Jf(t.session,ho)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]}}),Zf(Mo.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),Zf(S.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(Yo.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(Xo.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(ih.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(eh.prototype,{Qc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}}]}}),Zf(hh.prototype,{Qb:{name:"getSession",j:[]},ec:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}},zf("displayName",!0)]},ad:{name:"unenroll",j:[$f({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Qf},zf(),"multiFactorInfoIdentifier")]}}),Zf(Ff.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),el(_i,"parseLink",Di,[zf("link")]),el(Sf,"assertion",(function(t){return new uh(t)}),[Yf("phone")]),function(){if(void 0===et||!et.INTERNAL||!et.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:li,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:fi,VERIFY_AND_CHANGE_EMAIL:pi,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:sf,AuthCredential:fo,Error:S};el(t,"EmailAuthProvider",Po,[]),el(t,"FacebookAuthProvider",Ao,[]),el(t,"GithubAuthProvider",To,[]),el(t,"GoogleAuthProvider",No,[]),el(t,"TwitterAuthProvider",Co,[]),el(t,"OAuthProvider",Eo,[zf("providerId")]),el(t,"SAMLAuthProvider",Io,[zf("providerId")]),el(t,"PhoneAuthProvider",Uo,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(t){return!!(t&&t instanceof sf)}}]),el(t,"RecaptchaVerifier",Ff,[$f(zf(),{name:"",J:"an HTML element",optional:!1,K:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Hf("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(t){return!!(t&&t instanceof et.app.App)}}]),el(t,"ActionCodeURL",_i,[]),el(t,"PhoneMultiFactorGenerator",Sf,[]),et.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new sf(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),et.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:I((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:I(t.mc,t),addAuthTokenListener:I(t.cc,t),removeAuthTokenListener:I(t.Oc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),et.registerVersion("@firebase/auth","0.15.2"),et.INTERNAL.extendNamespace({User:bh})}()}.apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var ye=function(t,e){return(ye=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function ge(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}var me,be="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},we=we||{},Ie=be||self;function Ee(){}function Ae(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function _e(t){var e=Ae(t);return"array"==e||"object"==e&&"number"==typeof t.length}function Te(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var Se="closure_uid_"+(1e9*Math.random()>>>0),Ne=0;function ke(t,e,n){return t.call.apply(t.bind,arguments)}function Ce(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function xe(t,e,n){return(xe=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ke:Ce).apply(null,arguments)}function Oe(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var De=Date.now;function Pe(t,e){function n(){}n.prototype=e.prototype,t.S=e.prototype,t.prototype=new n,t.prototype.constructor=t}function Re(){this.j=this.j,this.i=this.i}Re.prototype.j=!1,Re.prototype.ja=function(){!this.j&&(this.j=!0,this.G(),0)&&function(t){Object.prototype.hasOwnProperty.call(t,Se)&&t[Se]||(t[Se]=++Ne)}(this)},Re.prototype.G=function(){if(this.i)for(;this.i.length;)this.i.shift()()};var Le=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},Me=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)};function Ve(t){return Array.prototype.concat.apply([],arguments)}function je(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function Ue(t){return/^[\s\xa0]*$/.test(t)}var Be,Fe=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function qe(t,e){return-1!=t.indexOf(e)}function Ge(t,e){return t<e?-1:t>e?1:0}t:{var ze=Ie.navigator;if(ze){var Ke=ze.userAgent;if(Ke){Be=Ke;break t}}Be=""}function He(t,e,n){for(var r in t)e.call(n,t[r],r,t)}function We(t){var e={};for(var n in t)e[n]=t[n];return e}var Xe="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Ye(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<Xe.length;o++)n=Xe[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function Je(t){return Je[" "](t),t}Je[" "]=Ee;var Qe,$e,Ze=qe(Be,"Opera"),tn=qe(Be,"Trident")||qe(Be,"MSIE"),en=qe(Be,"Edge"),nn=en||tn,rn=qe(Be,"Gecko")&&!(qe(Be.toLowerCase(),"webkit")&&!qe(Be,"Edge"))&&!(qe(Be,"Trident")||qe(Be,"MSIE"))&&!qe(Be,"Edge"),on=qe(Be.toLowerCase(),"webkit")&&!qe(Be,"Edge");function sn(){var t=Ie.document;return t?t.documentMode:void 0}t:{var an="",un=($e=Be,rn?/rv:([^\);]+)(\)|;)/.exec($e):en?/Edge\/([\d\.]+)/.exec($e):tn?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec($e):on?/WebKit\/(\S+)/.exec($e):Ze?/(?:Version)[ \/]?(\S+)/.exec($e):void 0);if(un&&(an=un?un[1]:""),tn){var cn=sn();if(null!=cn&&cn>parseFloat(an)){Qe=String(cn);break t}}Qe=an}var hn,fn={};function ln(t){return function(t,e){var n=fn;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=Fe(String(Qe)).split("."),r=Fe(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var s=n[o]||"",a=r[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],0==s[0].length&&0==a[0].length)break;e=Ge(0==s[1].length?0:parseInt(s[1],10),0==a[1].length?0:parseInt(a[1],10))||Ge(0==s[2].length,0==a[2].length)||Ge(s[2],a[2]),s=s[3],a=a[3]}while(0==e)}return 0<=e}))}Ie.document&&tn?hn=sn()||parseInt(Qe,10)||void 0:hn=void 0;var pn=hn,dn=!tn||9<=Number(pn),vn=tn&&!ln("9"),yn=function(){if(!Ie.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{Ie.addEventListener("test",Ee,e),Ie.removeEventListener("test",Ee,e)}catch(t){}return t}();function gn(t,e){this.type=t,this.a=this.target=e,this.defaultPrevented=!1}function mn(t,e){if(gn.call(this,t?t.type:""),this.relatedTarget=this.a=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.c=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.a=e,e=t.relatedTarget){if(rn){t:{try{Je(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:bn[t.pointerType]||"",this.c=t,t.defaultPrevented&&this.b()}}gn.prototype.b=function(){this.defaultPrevented=!0},Pe(mn,gn);var bn={2:"touch",3:"pen",4:"mouse"};mn.prototype.b=function(){mn.S.b.call(this);var t=this.c;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,vn)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}};var wn="closure_listenable_"+(1e6*Math.random()|0),In=0;function En(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.ca=i,this.key=++In,this.Y=this.Z=!1}function An(t){t.Y=!0,t.listener=null,t.proxy=null,t.src=null,t.ca=null}function _n(t){this.src=t,this.a={},this.b=0}function Tn(t,e){var n=e.type;if(n in t.a){var r,i=t.a[n],o=Le(i,e);(r=0<=o)&&Array.prototype.splice.call(i,o,1),r&&(An(e),0==t.a[n].length&&(delete t.a[n],t.b--))}}function Sn(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.Y&&o.listener==e&&o.capture==!!n&&o.ca==r)return i}return-1}_n.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var s=Sn(t,e,r,i);return-1<s?(e=t[s],n||(e.Z=!1)):((e=new En(e,this.src,o,!!r,i)).Z=n,t.push(e)),e};var Nn="closure_lm_"+(1e6*Math.random()|0),kn={};function Cn(t,e,n,r,i){if(r&&r.once)return On(t,e,n,r,i);if(Array.isArray(e)){for(var o=0;o<e.length;o++)Cn(t,e[o],n,r,i);return null}return n=Un(n),t&&t[wn]?t.va(e,n,Te(r)?!!r.capture:!!r,i):xn(t,e,n,!1,r,i)}function xn(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var s=Te(i)?!!i.capture:!!i;if(s&&!dn)return null;var a=Vn(t);if(a||(t[Nn]=a=new _n(t)),(n=a.add(e,n,r,s,o)).proxy)return n;if(r=function(){var t=Mn,e=dn?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)yn||(i=s),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(Rn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}return n}function On(t,e,n,r,i){if(Array.isArray(e)){for(var o=0;o<e.length;o++)On(t,e[o],n,r,i);return null}return n=Un(n),t&&t[wn]?t.wa(e,n,Te(r)?!!r.capture:!!r,i):xn(t,e,n,!0,r,i)}function Dn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)Dn(t,e[o],n,r,i);else r=Te(r)?!!r.capture:!!r,n=Un(n),t&&t[wn]?(t=t.c,(e=String(e).toString())in t.a&&-1<(n=Sn(o=t.a[e],n,r,i))&&(An(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=Vn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=Sn(e,n,r,i)),(n=-1<t?e[t]:null)&&Pn(n))}function Pn(t){if("number"!=typeof t&&t&&!t.Y){var e=t.src;if(e&&e[wn])Tn(e.c,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(Rn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=Vn(e))?(Tn(n,t),0==n.b&&(n.src=null,e[Nn]=null)):An(t)}}}function Rn(t){return t in kn?kn[t]:kn[t]="on"+t}function Ln(t,e){var n=t.listener,r=t.ca||t.src;return t.Z&&Pn(t),n.call(r,e)}function Mn(t,e){if(t.Y)return!0;if(!dn){if(!e)t:{e=["window","event"];for(var n=Ie,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}return Ln(t,e=new mn(e,this))}return Ln(t,new mn(e,this))}function Vn(t){return(t=t[Nn])instanceof _n?t:null}var jn="__closure_events_fn_"+(1e9*Math.random()>>>0);function Un(t){return"function"==Ae(t)?t:(t[jn]||(t[jn]=function(e){return t.handleEvent(e)}),t[jn])}function Bn(){Re.call(this),this.c=new _n(this),this.J=this,this.C=null}function Fn(t,e,n,r){if(!(e=t.c.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var s=e[o];if(s&&!s.Y&&s.capture==n){var a=s.listener,u=s.ca||s.src;s.Z&&Tn(t.c,s),i=!1!==a.call(u,r)&&i}}return i&&!r.defaultPrevented}Pe(Bn,Re),Bn.prototype[wn]=!0,(me=Bn.prototype).addEventListener=function(t,e,n,r){Cn(this,t,e,n,r)},me.removeEventListener=function(t,e,n,r){Dn(this,t,e,n,r)},me.dispatchEvent=function(t){var e,n=this.C;if(n)for(e=[];n;n=n.C)e.push(n);n=this.J;var r=t.type||t;if("string"==typeof t)t=new gn(t,n);else if(t instanceof gn)t.target=t.target||n;else{var i=t;Ye(t=new gn(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var s=t.a=e[o];i=Fn(s,r,!0,t)&&i}if(i=Fn(s=t.a=n,r,!0,t)&&i,i=Fn(s,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=Fn(s=t.a=e[o],r,!1,t)&&i;return i},me.G=function(){if(Bn.S.G.call(this),this.c){var t,e=this.c;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)An(n[r]);delete e.a[t],e.b--}}this.C=null},me.va=function(t,e,n,r){return this.c.add(String(t),e,!1,n,r)},me.wa=function(t,e,n,r){return this.c.add(String(t),e,!0,n,r)};var qn=Ie.JSON.stringify;function Gn(){this.b=this.a=null}var zn,Kn=new(function(){function t(t,e,n){this.f=n,this.c=t,this.g=e,this.b=0,this.a=null}return t.prototype.get=function(){var t;return 0<this.b?(this.b--,t=this.a,this.a=t.next,t.next=null):t=this.c(),t},t}())((function(){return new Wn}),(function(t){t.reset()}),100);function Hn(){var t=Qn,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function Wn(){this.next=this.b=this.a=null}function Xn(t){Ie.setTimeout((function(){throw t}),0)}function Yn(t,e){zn||function(){var t=Ie.Promise.resolve(void 0);zn=function(){t.then($n)}}(),Jn||(zn(),Jn=!0),Qn.add(t,e)}Gn.prototype.add=function(t,e){var n=Kn.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},Wn.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},Wn.prototype.reset=function(){this.next=this.b=this.a=null};var Jn=!1,Qn=new Gn;function $n(){for(var t;t=Hn();){try{t.a.call(t.b)}catch(t){Xn(t)}var e=Kn;e.g(t),e.b<e.f&&(e.b++,t.next=e.a,e.a=t)}Jn=!1}function Zn(t,e){Bn.call(this),this.b=t||1,this.a=e||Ie,this.f=xe(this.Ya,this),this.g=De()}function tr(t){t.aa=!1,t.M&&(t.a.clearTimeout(t.M),t.M=null)}function er(t,e,n){if("function"==Ae(t))n&&(t=xe(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=xe(t.handleEvent,t)}return 2147483647<Number(e)?-1:Ie.setTimeout(t,e||0)}function nr(t){t.a=er((function(){t.a=null,t.c&&(t.c=!1,nr(t))}),t.h);var e=t.b;t.b=null,t.g.apply(null,e)}Pe(Zn,Bn),(me=Zn.prototype).aa=!1,me.M=null,me.Ya=function(){if(this.aa){var t=De()-this.g;0<t&&t<.8*this.b?this.M=this.a.setTimeout(this.f,this.b-t):(this.M&&(this.a.clearTimeout(this.M),this.M=null),this.dispatchEvent("tick"),this.aa&&(tr(this),this.start()))}},me.start=function(){this.aa=!0,this.M||(this.M=this.a.setTimeout(this.f,this.b),this.g=De())},me.G=function(){Zn.S.G.call(this),tr(this),delete this.a};var rr=function(t){function e(e,n,r){var i=t.call(this)||this;return i.g=null!=r?e.bind(r):e,i.h=n,i.b=null,i.c=!1,i.a=null,i}return function(t,e){function n(){this.constructor=t}ye(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.f=function(t){this.b=arguments,this.a?this.c=!0:nr(this)},e.prototype.G=function(){t.prototype.G.call(this),this.a&&(Ie.clearTimeout(this.a),this.a=null,this.c=!1,this.b=null)},e}(Re);function ir(t){Re.call(this),this.b=t,this.a={}}Pe(ir,Re);var or=[];function sr(t,e,n,r){Array.isArray(n)||(n&&(or[0]=n.toString()),n=or);for(var i=0;i<n.length;i++){var o=Cn(e,n[i],r||t.handleEvent,!1,t.b||t);if(!o)break;t.a[o.key]=o}}function ar(t){He(t.a,(function(t,e){this.a.hasOwnProperty(e)&&Pn(t)}),t),t.a={}}function ur(){this.a=!0}function cr(t,e,n,r){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.a)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var r=n[t];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var o=i[0];if("noop"!=o&&"stop"!=o&&"close"!=o)for(var s=1;s<i.length;s++)i[s]=""}}}return qn(n)}catch(t){return e}}(t,n)+(r?" "+r:"")}))}ir.prototype.G=function(){ir.S.G.call(this),ar(this)},ir.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},ur.prototype.info=function(){};var hr=null;function fr(){return hr=hr||new Bn}function lr(t){gn.call(this,"serverreachability",t)}function pr(t){var e=fr();e.dispatchEvent(new lr(e,t))}function dr(t){gn.call(this,"statevent",t)}function vr(t){var e=fr();e.dispatchEvent(new dr(e,t))}function yr(t){gn.call(this,"timingevent",t)}function gr(t,e){if("function"!=Ae(t))throw Error("Fn must not be null and must be a function");return Ie.setTimeout((function(){t()}),e)}Pe(lr,gn),Pe(dr,gn),Pe(yr,gn);var mr={NO_ERROR:0,Za:1,gb:2,fb:3,bb:4,eb:5,hb:6,Da:7,TIMEOUT:8,kb:9},br={ab:"complete",ob:"success",Ea:"error",Da:"abort",mb:"ready",nb:"readystatechange",TIMEOUT:"timeout",ib:"incrementaldata",lb:"progress",cb:"downloadprogress",pb:"uploadprogress"};function wr(){}function Ir(t){var e;return(e=t.a)||(e=t.a={}),e}function Er(){}wr.prototype.a=null;var Ar,_r={OPEN:"a",$a:"b",Ea:"c",jb:"d"};function Tr(){gn.call(this,"d")}function Sr(){gn.call(this,"c")}function Nr(){}function kr(t,e,n,r){this.g=t,this.c=e,this.f=n,this.T=r||1,this.J=new ir(this),this.P=Cr,t=nn?125:void 0,this.R=new Zn(t),this.B=null,this.b=!1,this.j=this.l=this.i=this.H=this.u=this.U=this.o=null,this.s=[],this.a=null,this.D=0,this.h=this.m=null,this.N=-1,this.A=!1,this.O=0,this.F=null,this.W=this.C=this.V=this.I=!1}Pe(Tr,gn),Pe(Sr,gn),Pe(Nr,wr),Ar=new Nr;var Cr=45e3,xr={},Or={};function Dr(t,e,n){t.H=1,t.i=ti(Xr(e)),t.j=n,t.I=!0,Pr(t,null)}function Pr(t,e){t.u=De(),Mr(t),t.l=Xr(t.i);var n=t.l,r=t.T;Array.isArray(r)||(r=[String(r)]),pi(n.b,"t",r),t.D=0,t.a=ao(t.g,t.g.C?e:null),0<t.O&&(t.F=new rr(xe(t.Ca,t,t.a),t.O)),sr(t.J,t.a,"readystatechange",t.Wa),e=t.B?We(t.B):{},t.j?(t.m||(t.m="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.a.ba(t.l,t.m,t.j,e)):(t.m="GET",t.a.ba(t.l,t.m,null,e)),pr(1),function(t,e,n,r,i,o){t.info((function(){if(t.a)if(o)for(var s="",a=o.split("&"),u=0;u<a.length;u++){var c=a[u].split("=");if(1<c.length){var h=c[0];c=c[1];var f=h.split("_");s=2<=f.length&&"type"==f[1]?s+(h+"=")+c+"&":s+(h+"=redacted&")}}else s=null;else s=o;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+e+"\n"+n+"\n"+s}))}(t.c,t.m,t.l,t.f,t.T,t.j)}function Rr(t,e,n){for(var r=!0;!t.A&&t.D<n.length;){var i=Lr(t,n);if(i==Or){4==e&&(t.h=4,vr(14),r=!1),cr(t.c,t.f,null,"[Incomplete Response]");break}if(i==xr){t.h=4,vr(15),cr(t.c,t.f,n,"[Invalid Chunk]"),r=!1;break}cr(t.c,t.f,i,null),Fr(t,i)}4==e&&0==n.length&&(t.h=1,vr(16),r=!1),t.b=t.b&&r,r?0<n.length&&!t.W&&(t.W=!0,(e=t.g).a==t&&e.V&&!e.F&&(e.c.info("Great, no buffering proxy detected. Bytes received: "+n.length),Zi(e),e.F=!0)):(cr(t.c,t.f,n,"[Invalid Chunked Response]"),Br(t),Ur(t))}function Lr(t,e){var n=t.D,r=e.indexOf("\n",n);return-1==r?Or:(n=Number(e.substring(n,r)),isNaN(n)?xr:(r+=1)+n>e.length?Or:(e=e.substr(r,n),t.D=r+n,e))}function Mr(t){t.U=De()+t.P,Vr(t,t.P)}function Vr(t,e){if(null!=t.o)throw Error("WatchDog timer not null");t.o=gr(xe(t.Ua,t),e)}function jr(t){t.o&&(Ie.clearTimeout(t.o),t.o=null)}function Ur(t){0==t.g.v||t.A||no(t.g,t)}function Br(t){jr(t);var e=t.F;e&&"function"==typeof e.ja&&e.ja(),t.F=null,tr(t.R),ar(t.J),t.a&&(e=t.a,t.a=null,e.abort(),e.ja())}function Fr(t,e){try{var n=t.g;if(0!=n.v&&(n.a==t||wi(n.b,t)))if(n.I=t.N,!t.C&&wi(n.b,t)&&3==n.v){try{var r=n.ka.a.parse(e)}catch(t){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){t:if(!n.j){if(n.a){if(!(n.a.u+3e3<t.u))break t;eo(n),zi(n)}$i(n),vr(18)}}else n.oa=i[1],0<n.oa-n.P&&37500>i[2]&&n.H&&0==n.o&&!n.m&&(n.m=gr(xe(n.Ra,n),6e3));if(1>=bi(n.b)&&n.ea){try{n.ea()}catch(t){}n.ea=void 0}}else io(n,11)}else if((t.C||n.a==t)&&eo(n),!Ue(e))for(e=r=n.ka.a.parse(e),r=0;r<e.length;r++)if(i=e[r],n.P=i[0],i=i[1],2==n.v)if("c"==i[0]){n.J=i[1],n.ga=i[2];var o=i[3];null!=o&&(n.ha=o,n.c.info("VER="+n.ha));var s=i[4];null!=s&&(n.pa=s,n.c.info("SVER="+n.pa));var a=i[5];if(null!=a&&"number"==typeof a&&0<a){var u=1.5*a;n.D=u,n.c.info("backChannelRequestTimeoutMs_="+u)}u=n;var c=t.a;if(c){var h=c.a?c.a.getResponseHeader("X-Client-Wire-Protocol"):null;if(h){var f=u.b;!f.a&&(qe(h,"spdy")||qe(h,"quic")||qe(h,"h2"))&&(f.f=f.g,f.a=new Set,f.b&&(Ii(f,f.b),f.b=null))}if(u.A){var l=c.a?c.a.getResponseHeader("X-HTTP-Session-Id"):null;l&&(u.na=l,Zr(u.B,u.A,l))}}n.v=3,n.f&&n.f.ta(),n.V&&(n.N=De()-t.u,n.c.info("Handshake RTT: "+n.N+"ms"));var p=t;if((u=n).la=so(u,u.C?u.ga:null,u.fa),p.C){Ei(u.b,p);var d=p,v=u.D;v&&d.setTimeout(v),d.o&&(jr(d),Mr(d)),u.a=p}else Qi(u);0<n.g.length&&Wi(n)}else"stop"!=i[0]&&"close"!=i[0]||io(n,7);else 3==n.v&&("stop"==i[0]||"close"==i[0]?"stop"==i[0]?io(n,7):Gi(n):"noop"!=i[0]&&n.f&&n.f.sa(i),n.o=0);pr(4)}catch(t){}}function qr(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(_e(t)||"string"==typeof t)Me(t,e,void 0);else{if(t.L&&"function"==typeof t.L)var n=t.L();else if(t.K&&"function"==typeof t.K)n=void 0;else if(_e(t)||"string"==typeof t){n=[];for(var r=t.length,i=0;i<r;i++)n.push(i)}else for(i in n=[],r=0,t)n[r++]=i;i=(r=function(t){if(t.K&&"function"==typeof t.K)return t.K();if("string"==typeof t)return t.split("");if(_e(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}(t)).length;for(var o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}}function Gr(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Gr)for(n=t.L(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function zr(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Kr(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Kr(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Kr(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(me=kr.prototype).setTimeout=function(t){this.P=t},me.Wa=function(t){t=t.target;var e=this.F;e&&3==Ui(t)?e.f():this.Ca(t)},me.Ca=function(t){try{if(t==this.a)t:{var e=Ui(this.a),n=this.a.ua(),r=this.a.X();if(!(3>e||3==e&&!nn&&!this.a.$())){this.A||4!=e||7==n||pr(8==n||0>=r?3:2),jr(this);var i=this.a.X();this.N=i;var o=this.a.$();if(this.b=200==i,function(t,e,n,r,i,o,s){t.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+e+"\n"+n+"\n"+o+" "+s}))}(this.c,this.m,this.l,this.f,this.T,e,i),this.b){if(this.V&&!this.C){e:{if(this.a){var s,a=this.a;if((s=a.a?a.a.getResponseHeader("X-HTTP-Initial-Response"):null)&&!Ue(s)){var u=s;break e}}u=null}if(!u){this.b=!1,this.h=3,vr(12),Br(this),Ur(this);break t}cr(this.c,this.f,u,"Initial handshake response via X-HTTP-Initial-Response"),this.C=!0,Fr(this,u)}this.I?(Rr(this,e,o),nn&&this.b&&3==e&&(sr(this.J,this.R,"tick",this.Va),this.R.start())):(cr(this.c,this.f,o,null),Fr(this,o)),4==e&&Br(this),this.b&&!this.A&&(4==e?no(this.g,this):(this.b=!1,Mr(this)))}else 400==i&&0<o.indexOf("Unknown SID")?(this.h=3,vr(12)):(this.h=0,vr(13)),Br(this),Ur(this)}}}catch(t){}},me.Va=function(){if(this.a){var t=Ui(this.a),e=this.a.$();this.D<e.length&&(jr(this),Rr(this,t,e),this.b&&4!=t&&Mr(this))}},me.cancel=function(){this.A=!0,Br(this)},me.Ua=function(){this.o=null;var t=De();0<=t-this.U?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.c,this.l),2!=this.H&&(pr(3),vr(17)),Br(this),this.h=2,Ur(this)):Vr(this,this.U-t)},(me=Gr.prototype).K=function(){zr(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},me.L=function(){return zr(this),this.a.concat()},me.get=function(t,e){return Kr(this.b,t)?this.b[t]:e},me.set=function(t,e){Kr(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},me.forEach=function(t,e){for(var n=this.L(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Hr=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Wr(t,e){if(this.c=this.j=this.f="",this.h=null,this.i=this.g="",this.a=!1,t instanceof Wr){this.a=void 0!==e?e:t.a,Yr(this,t.f),this.j=t.j,Jr(this,t.c),Qr(this,t.h),this.g=t.g,e=t.b;var n=new ci;n.c=e.c,e.a&&(n.a=new Gr(e.a),n.b=e.b),$r(this,n),this.i=t.i}else t&&(n=String(t).match(Hr))?(this.a=!!e,Yr(this,n[1]||"",!0),this.j=ei(n[2]||""),Jr(this,n[3]||"",!0),Qr(this,n[4]),this.g=ei(n[5]||"",!0),$r(this,n[6]||"",!0),this.i=ei(n[7]||"")):(this.a=!!e,this.b=new ci(null,this.a))}function Xr(t){return new Wr(t)}function Yr(t,e,n){t.f=n?ei(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Jr(t,e,n){t.c=n?ei(e,!0):e}function Qr(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.h=e}else t.h=null}function $r(t,e,n){e instanceof ci?(t.b=e,function(t,e){e&&!t.f&&(hi(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(fi(this,e),pi(this,n,t))}),t)),t.f=e}(t.b,t.a)):(n||(e=ni(e,ai)),t.b=new ci(e,t.a))}function Zr(t,e,n){t.b.set(e,n)}function ti(t){return Zr(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^De()).toString(36)),t}function ei(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function ni(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,ri),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function ri(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Wr.prototype.toString=function(){var t=[],e=this.f;e&&t.push(ni(e,ii,!0),":");var n=this.c;return(n||"file"==e)&&(t.push("//"),(e=this.j)&&t.push(ni(e,ii,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.h)&&t.push(":",String(n))),(n=this.g)&&(this.c&&"/"!=n.charAt(0)&&t.push("/"),t.push(ni(n,"/"==n.charAt(0)?si:oi,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.i)&&t.push("#",ni(n,ui)),t.join("")};var ii=/[#\/\?@]/g,oi=/[#\?:]/g,si=/[#\?]/g,ai=/[#\?@]/g,ui=/#/g;function ci(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function hi(t){t.a||(t.a=new Gr,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function fi(t,e){hi(t),e=di(t,e),Kr(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Kr((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&zr(t)))}function li(t,e){return hi(t),e=di(t,e),Kr(t.a.b,e)}function pi(t,e,n){fi(t,e),0<n.length&&(t.c=null,t.a.set(di(t,e),je(n)),t.b+=n.length)}function di(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function vi(t,e){this.b=t,this.a=e}function yi(t){this.g=t||gi,t=Ie.PerformanceNavigationTiming?0<(t=Ie.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(Ie.ia&&Ie.ia.ya&&Ie.ia.ya()&&Ie.ia.ya().qb),this.f=t?this.g:1,this.a=null,1<this.f&&(this.a=new Set),this.b=null,this.c=[]}(me=ci.prototype).add=function(t,e){hi(this),this.c=null,t=di(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},me.forEach=function(t,e){hi(this),this.a.forEach((function(n,r){Me(n,(function(n){t.call(e,n,r,this)}),this)}),this)},me.L=function(){hi(this);for(var t=this.a.K(),e=this.a.L(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},me.K=function(t){hi(this);var e=[];if("string"==typeof t)li(this,t)&&(e=Ve(e,this.a.get(di(this,t))));else{t=this.a.K();for(var n=0;n<t.length;n++)e=Ve(e,t[n])}return e},me.set=function(t,e){return hi(this),this.c=null,li(this,t=di(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},me.get=function(t,e){return t&&0<(t=this.K(t)).length?String(t[0]):e},me.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.L(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.K(r);for(var o=0;o<r.length;o++){var s=i;""!==r[o]&&(s+="="+encodeURIComponent(String(r[o]))),t.push(s)}}return this.c=t.join("&")};var gi=10;function mi(t){return!!t.b||!!t.a&&t.a.size>=t.f}function bi(t){return t.b?1:t.a?t.a.size:0}function wi(t,e){return t.b?t.b==e:!!t.a&&t.a.has(e)}function Ii(t,e){t.a?t.a.add(e):t.b=e}function Ei(t,e){t.b&&t.b==e?t.b=null:t.a&&t.a.has(e)&&t.a.delete(e)}function Ai(t){var e,n;if(null!=t.b)return t.c.concat(t.b.s);if(null!=t.a&&0!==t.a.size){var r=t.c;try{for(var i=ge(t.a.values()),o=i.next();!o.done;o=i.next()){var s=o.value;r=r.concat(s.s)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return r}return je(t.c)}function _i(){}function Ti(){this.a=new _i}function Si(t,e,n){var r=n||"";try{qr(t,(function(t,n){var i=t;Te(t)&&(i=qn(t)),e.push(r+n+"="+encodeURIComponent(i))}))}catch(t){throw e.push(r+"type="+encodeURIComponent("_badmap")),t}}function Ni(t,e,n,r,i){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(r)}catch(t){}}yi.prototype.cancel=function(){var t,e;if(this.c=Ai(this),this.b)this.b.cancel(),this.b=null;else if(this.a&&0!==this.a.size){try{for(var n=ge(this.a.values()),r=n.next();!r.done;r=n.next())r.value.cancel()}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.a.clear()}},_i.prototype.stringify=function(t){return Ie.JSON.stringify(t,void 0)},_i.prototype.parse=function(t){return Ie.JSON.parse(t,void 0)};var ki=Ie.JSON.parse;function Ci(t){Bn.call(this),this.headers=new Gr,this.H=t||null,this.b=!1,this.s=this.a=null,this.B="",this.h=0,this.f="",this.g=this.A=this.l=this.u=!1,this.o=0,this.m=null,this.I=xi,this.D=this.F=!1}Pe(Ci,Bn);var xi="",Oi=/^https?$/i,Di=["POST","PUT"];function Pi(t){return"content-type"==t.toLowerCase()}function Ri(t,e){t.b=!1,t.a&&(t.g=!0,t.a.abort(),t.g=!1),t.f=e,t.h=5,Li(t),Vi(t)}function Li(t){t.u||(t.u=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Mi(t){if(t.b&&void 0!==we&&(!t.s[1]||4!=Ui(t)||2!=t.X()))if(t.l&&4==Ui(t))er(t.za,0,t);else if(t.dispatchEvent("readystatechange"),4==Ui(t)){t.b=!1;try{var e,n=t.X();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.B).match(Hr)[1]||null;if(!o&&Ie.self&&Ie.self.location){var s=Ie.self.location.protocol;o=s.substr(0,s.length-1)}i=!Oi.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{t.h=6;try{var a=2<Ui(t)?t.a.statusText:""}catch(t){a=""}t.f=a+" ["+t.X()+"]",Li(t)}}finally{Vi(t)}}}function Vi(t,e){if(t.a){ji(t);var n=t.a,r=t.s[0]?Ee:null;t.a=null,t.s=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){}}}function ji(t){t.a&&t.D&&(t.a.ontimeout=null),t.m&&(Ie.clearTimeout(t.m),t.m=null)}function Ui(t){return t.a?t.a.readyState:0}function Bi(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}r||(n=function(t){var e="";return He(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Zr(t,e,n))}function Fi(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function qi(t){this.pa=0,this.g=[],this.c=new ur,this.ga=this.la=this.B=this.fa=this.a=this.na=this.A=this.W=this.i=this.O=this.l=null,this.La=this.R=0,this.Ia=Fi("failFast",!1,t),this.H=this.m=this.j=this.h=this.f=null,this.T=!0,this.I=this.oa=this.P=-1,this.U=this.o=this.u=0,this.Fa=Fi("baseRetryDelayMs",5e3,t),this.Ma=Fi("retryDelaySeedMs",1e4,t),this.Ja=Fi("forwardChannelMaxRetries",2,t),this.ma=Fi("forwardChannelRequestTimeoutMs",2e4,t),this.Ka=t&&t.g||void 0,this.D=void 0,this.C=t&&t.supportsCrossDomainXhr||!1,this.J="",this.b=new yi(t&&t.concurrentRequestLimit),this.ka=new Ti,this.da=t&&t.fastHandshake||!1,this.Ga=t&&t.b||!1,t&&t.f&&(this.c.a=!1),t&&t.forceLongPolling&&(this.T=!1),this.V=!this.da&&this.T&&t&&t.c||!1,this.ea=void 0,this.N=0,this.F=!1,this.s=null}function Gi(t){if(Ki(t),3==t.v){var e=t.R++,n=Xr(t.B);Zr(n,"SID",t.J),Zr(n,"RID",e),Zr(n,"TYPE","terminate"),Yi(t,n),(e=new kr(t,t.c,e,void 0)).H=2,e.i=ti(Xr(n)),n=!1,Ie.navigator&&Ie.navigator.sendBeacon&&(n=Ie.navigator.sendBeacon(e.i.toString(),"")),!n&&Ie.Image&&((new Image).src=e.i,n=!0),n||(e.a=ao(e.g,null),e.a.ba(e.i)),e.u=De(),Mr(e)}oo(t)}function zi(t){t.a&&(Zi(t),t.a.cancel(),t.a=null)}function Ki(t){zi(t),t.j&&(Ie.clearTimeout(t.j),t.j=null),eo(t),t.b.cancel(),t.h&&("number"==typeof t.h&&Ie.clearTimeout(t.h),t.h=null)}function Hi(t,e){t.g.push(new vi(t.La++,e)),3==t.v&&Wi(t)}function Wi(t){mi(t.b)||t.h||(t.h=!0,Yn(t.Ba,t),t.u=0)}function Xi(t,e){var n;n=e?e.f:t.R++;var r=Xr(t.B);Zr(r,"SID",t.J),Zr(r,"RID",n),Zr(r,"AID",t.P),Yi(t,r),t.i&&t.l&&Bi(r,t.i,t.l),n=new kr(t,t.c,n,t.u+1),null===t.i&&(n.B=t.l),e&&(t.g=e.s.concat(t.g)),e=Ji(t,n,1e3),n.setTimeout(Math.round(.5*t.ma)+Math.round(.5*t.ma*Math.random())),Ii(t.b,n),Dr(n,r,e)}function Yi(t,e){t.f&&qr({},(function(t,n){Zr(e,n,t)}))}function Ji(t,e,n){n=Math.min(t.g.length,n);var r=t.f?xe(t.f.Ha,t.f,t):null;t:for(var i=t.g,o=-1;;){var s=["count="+n];-1==o?0<n?(o=i[0].b,s.push("ofs="+o)):o=0:s.push("ofs="+o);for(var a=!0,u=0;u<n;u++){var c=i[u].b,h=i[u].a;if(0>(c-=o))o=Math.max(0,i[u].b-100),a=!1;else try{Si(h,s,"req"+c+"_")}catch(t){r&&r(h)}}if(a){r=s.join("&");break t}}return t=t.g.splice(0,n),e.s=t,r}function Qi(t){t.a||t.j||(t.U=1,Yn(t.Aa,t),t.o=0)}function $i(t){return!(t.a||t.j||3<=t.o||(t.U++,t.j=gr(xe(t.Aa,t),ro(t,t.o)),t.o++,0))}function Zi(t){null!=t.s&&(Ie.clearTimeout(t.s),t.s=null)}function to(t){t.a=new kr(t,t.c,"rpc",t.U),null===t.i&&(t.a.B=t.l),t.a.O=0;var e=Xr(t.la);Zr(e,"RID","rpc"),Zr(e,"SID",t.J),Zr(e,"CI",t.H?"0":"1"),Zr(e,"AID",t.P),Yi(t,e),Zr(e,"TYPE","xmlhttp"),t.i&&t.l&&Bi(e,t.i,t.l),t.D&&t.a.setTimeout(t.D);var n=t.a;t=t.ga,n.H=1,n.i=ti(Xr(e)),n.j=null,n.I=!0,Pr(n,t)}function eo(t){null!=t.m&&(Ie.clearTimeout(t.m),t.m=null)}function no(t,e){var n=null;if(t.a==e){eo(t),Zi(t),t.a=null;var r=2}else{if(!wi(t.b,e))return;n=e.s,Ei(t.b,e),r=1}if(t.I=e.N,0!=t.v)if(e.b)if(1==r){n=e.j?e.j.length:0,e=De()-e.u;var i=t.u;(r=fr()).dispatchEvent(new yr(r,n,e,i)),Wi(t)}else Qi(t);else if(3==(i=e.h)||0==i&&0<t.I||!(1==r&&function(t,e){return!(bi(t.b)>=t.b.f-(t.h?1:0)||(t.h?(t.g=e.s.concat(t.g),0):1==t.v||2==t.v||t.u>=(t.Ia?0:t.Ja)||(t.h=gr(xe(t.Ba,t,e),ro(t,t.u)),t.u++,0)))}(t,e)||2==r&&$i(t)))switch(n&&0<n.length&&(e=t.b,e.c=e.c.concat(n)),i){case 1:io(t,5);break;case 4:io(t,10);break;case 3:io(t,6);break;default:io(t,2)}}function ro(t,e){var n=t.Fa+Math.floor(Math.random()*t.Ma);return t.f||(n*=2),n*e}function io(t,e){if(t.c.info("Error code "+e),2==e){var n=null;t.f&&(n=null);var r=xe(t.Xa,t);n||(n=new Wr("//www.google.com/images/cleardot.gif"),Ie.location&&"http"==Ie.location.protocol||Yr(n,"https"),ti(n)),function(t,e){var n=new ur;if(Ie.Image){var r=new Image;r.onload=Oe(Ni,n,r,"TestLoadImage: loaded",!0,e),r.onerror=Oe(Ni,n,r,"TestLoadImage: error",!1,e),r.onabort=Oe(Ni,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=Oe(Ni,n,r,"TestLoadImage: timeout",!1,e),Ie.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=t}else e(!1)}(n.toString(),r)}else vr(2);t.v=0,t.f&&t.f.ra(e),oo(t),Ki(t)}function oo(t){t.v=0,t.I=-1,t.f&&(0==Ai(t.b).length&&0==t.g.length||(t.b.c.length=0,je(t.g),t.g.length=0),t.f.qa())}function so(t,e,n){var r=function(t){return t instanceof Wr?Xr(t):new Wr(t,void 0)}(n);if(""!=r.c)e&&Jr(r,e+"."+r.c),Qr(r,r.h);else{var i=Ie.location;r=function(t,e,n,r){var i=new Wr(null,void 0);return t&&Yr(i,t),e&&Jr(i,e),n&&Qr(i,n),r&&(i.g=r),i}(i.protocol,e?e+"."+i.hostname:i.hostname,+i.port,n)}return t.W&&He(t.W,(function(t,e){Zr(r,e,t)})),e=t.A,n=t.na,e&&n&&Zr(r,e,n),Zr(r,"VER",t.ha),Yi(t,r),r}function ao(t,e){if(e&&!t.C)throw Error("Can't create secondary domain capable XhrIo object.");return(e=new Ci(t.Ka)).F=t.C,e}function uo(){}function co(){if(tn&&!(10<=Number(pn)))throw Error("Environmental error: no available transport.")}function ho(t,e){Bn.call(this),this.a=new qi(e),this.l=t,this.b=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.a.l=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.a&&(t?t["X-WebChannel-Client-Profile"]=e.a:t={"X-WebChannel-Client-Profile":e.a}),this.a.O=t,(t=e&&e.httpHeadersOverwriteParam)&&!Ue(t)&&(this.a.i=t),this.h=e&&e.supportsCrossDomainXhr||!1,this.g=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!Ue(e)&&(this.a.A=e,null!==(t=this.b)&&e in t&&e in(t=this.b)&&delete t[e]),this.f=new po(this)}function fo(t){Tr.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.c=t)?(t=this.c,this.data=null!==e&&t in e?e[t]:void 0):this.data=e}else this.data=t}function lo(){Sr.call(this),this.status=1}function po(t){this.a=t}(me=Ci.prototype).ba=function(t,e,n,r){if(this.a)throw Error("[goog.net.XhrIo] Object is active with another request="+this.B+"; newUri="+t);e=e?e.toUpperCase():"GET",this.B=t,this.f="",this.h=0,this.u=!1,this.b=!0,this.a=new XMLHttpRequest,this.s=this.H?Ir(this.H):Ir(Ar),this.a.onreadystatechange=xe(this.za,this);try{this.A=!0,this.a.open(e,String(t),!0),this.A=!1}catch(t){return void Ri(this,t)}t=n||"";var i=new Gr(this.headers);r&&qr(r,(function(t,e){i.set(e,t)})),r=function(t){t:{for(var e=Pi,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(i.L()),n=Ie.FormData&&t instanceof Ie.FormData,!(0<=Le(Di,e))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(t,e){this.a.setRequestHeader(e,t)}),this),this.I&&(this.a.responseType=this.I),"withCredentials"in this.a&&this.a.withCredentials!==this.F&&(this.a.withCredentials=this.F);try{ji(this),0<this.o&&((this.D=function(t){return tn&&ln(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.a))?(this.a.timeout=this.o,this.a.ontimeout=xe(this.xa,this)):this.m=er(this.xa,this.o,this)),this.l=!0,this.a.send(t),this.l=!1}catch(t){Ri(this,t)}},me.xa=function(){void 0!==we&&this.a&&(this.f="Timed out after "+this.o+"ms, aborting",this.h=8,this.dispatchEvent("timeout"),this.abort(8))},me.abort=function(t){this.a&&this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1,this.h=t||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Vi(this))},me.G=function(){this.a&&(this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1),Vi(this,!0)),Ci.S.G.call(this)},me.za=function(){this.j||(this.A||this.l||this.g?Mi(this):this.Ta())},me.Ta=function(){Mi(this)},me.X=function(){try{return 2<Ui(this)?this.a.status:-1}catch(t){return-1}},me.$=function(){try{return this.a?this.a.responseText:""}catch(t){return""}},me.Na=function(t){if(this.a){var e=this.a.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),ki(e)}},me.ua=function(){return this.h},me.Qa=function(){return"string"==typeof this.f?this.f:String(this.f)},(me=qi.prototype).ha=8,me.v=1,me.Ba=function(t){if(this.h)if(this.h=null,1==this.v){if(!t){this.R=Math.floor(1e5*Math.random()),t=this.R++;var e,n=new kr(this,this.c,t,void 0),r=this.l;if(this.O&&(r?Ye(r=We(r),this.O):r=this.O),null===this.i&&(n.B=r),this.da)t:{for(var i=e=0;i<this.g.length;i++){var o=this.g[i];if(void 0===(o="__data__"in o.a&&"string"==typeof(o=o.a.__data__)?o.length:void 0))break;if(4096<(e+=o)){e=i;break t}if(4096===e||i===this.g.length-1){e=i+1;break t}}e=1e3}else e=1e3;e=Ji(this,n,e),Zr(i=Xr(this.B),"RID",t),Zr(i,"CVER",22),this.A&&Zr(i,"X-HTTP-Session-Id",this.A),Yi(this,i),this.i&&r&&Bi(i,this.i,r),Ii(this.b,n),this.Ga&&Zr(i,"TYPE","init"),this.da?(Zr(i,"$req",e),Zr(i,"SID","null"),n.V=!0,Dr(n,i,null)):Dr(n,i,e),this.v=2}}else 3==this.v&&(t?Xi(this,t):0==this.g.length||mi(this.b)||Xi(this))},me.Aa=function(){if(this.j=null,to(this),this.V&&!(this.F||null==this.a||0>=this.N)){var t=2*this.N;this.c.info("BP detection timer enabled: "+t),this.s=gr(xe(this.Sa,this),t)}},me.Sa=function(){this.s&&(this.s=null,this.c.info("BP detection timeout reached."),this.c.info("Buffering proxy detected and switch to long-polling!"),this.H=!1,this.F=!0,zi(this),to(this))},me.Ra=function(){null!=this.m&&(this.m=null,zi(this),$i(this),vr(19))},me.Xa=function(t){t?(this.c.info("Successfully pinged google.com"),vr(2)):(this.c.info("Failed to ping google.com"),vr(1))},(me=uo.prototype).ta=function(){},me.sa=function(){},me.ra=function(){},me.qa=function(){},me.Ha=function(){},co.prototype.a=function(t,e){return new ho(t,e)},Pe(ho,Bn),(me=ho.prototype).addEventListener=function(t,e,n,r){ho.S.addEventListener.call(this,t,e,n,r)},me.removeEventListener=function(t,e,n,r){ho.S.removeEventListener.call(this,t,e,n,r)},me.Oa=function(){this.a.f=this.f,this.h&&(this.a.C=!0);var t=this.a,e=this.l,n=this.b||void 0;vr(0),t.fa=e,t.W=n||{},t.H=t.T,t.B=so(t,null,t.fa),Wi(t)},me.close=function(){Gi(this.a)},me.Pa=function(t){if("string"==typeof t){var e={};e.__data__=t,Hi(this.a,e)}else this.g?((e={}).__data__=qn(t),Hi(this.a,e)):Hi(this.a,t)},me.G=function(){this.a.f=null,delete this.f,Gi(this.a),delete this.a,ho.S.G.call(this)},Pe(fo,Tr),Pe(lo,Sr),Pe(po,uo),po.prototype.ta=function(){this.a.dispatchEvent("a")},po.prototype.sa=function(t){this.a.dispatchEvent(new fo(t))},po.prototype.ra=function(t){this.a.dispatchEvent(new lo(t))},po.prototype.qa=function(){this.a.dispatchEvent("b")},co.prototype.createWebChannel=co.prototype.a,ho.prototype.send=ho.prototype.Pa,ho.prototype.open=ho.prototype.Oa,ho.prototype.close=ho.prototype.close,mr.NO_ERROR=0,mr.TIMEOUT=8,mr.HTTP_ERROR=6,br.COMPLETE="complete",Er.EventType=_r,_r.OPEN="a",_r.CLOSE="b",_r.ERROR="c",_r.MESSAGE="d",Bn.prototype.listen=Bn.prototype.va,Ci.prototype.listenOnce=Ci.prototype.wa,Ci.prototype.getLastError=Ci.prototype.Qa,Ci.prototype.getLastErrorCode=Ci.prototype.ua,Ci.prototype.getStatus=Ci.prototype.X,Ci.prototype.getResponseJson=Ci.prototype.Na,Ci.prototype.getResponseText=Ci.prototype.$,Ci.prototype.send=Ci.prototype.ba;var vo=mr,yo=br,go=Er,mo=Ci,bo=function(t,e,n,r,i,o){this.t=t,this.persistenceKey=e,this.host=n,this.ssl=r,this.forceLongPolling=i,this.i=o},wo=function(){function t(t,e){this.projectId=t,this.database=e||"(default)"}return Object.defineProperty(t.prototype,"o",{get:function(){return"(default)"===this.database},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(e){return e instanceof t&&e.projectId===this.projectId&&e.database===this.database},t}(),Io=new B("@firebase/firestore");function Eo(){return Io.logLevel}function Ao(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Io.logLevel<=P.DEBUG){var r=e.map(So);Io.debug.apply(Io,c(["Firestore (8.0.2): "+t],r))}}function _o(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Io.logLevel<=P.ERROR){var r=e.map(So);Io.error.apply(Io,c(["Firestore (8.0.2): "+t],r))}}function To(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Io.logLevel<=P.WARN){var r=e.map(So);Io.warn.apply(Io,c(["Firestore (8.0.2): "+t],r))}}function So(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function No(t){void 0===t&&(t="Unexpected state");var e="FIRESTORE (8.0.2) INTERNAL ASSERTION FAILED: "+t;throw _o(e),new Error(e)}function ko(t,e){t||No()}function Co(t,e){return t}function xo(t){var e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(var r=0;r<t;r++)n[r]=Math.floor(256*Math.random());return n}var Oo=function(){function t(){}return t.u=function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length,n="";n.length<20;)for(var r=xo(40),i=0;i<r.length;++i)n.length<20&&r[i]<e&&(n+=t.charAt(r[i]%t.length));return n},t}();function Do(t,e){return t<e?-1:t>e?1:0}function Po(t,e,n){return t.length===e.length&&t.every((function(t,r){return n(t,e[r])}))}function Ro(t){return t+"\0"}function Lo(t){var e=0;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Mo(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function Vo(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}var jo=function(){function t(t,e){this.h=t,this.l=e,this._={}}return t.prototype.get=function(t){var e=this.h(t),n=this._[e];if(void 0!==n)for(var r=0,i=n;r<i.length;r++){var o=i[r],s=o[0],a=o[1];if(this.l(s,t))return a}},t.prototype.has=function(t){return void 0!==this.get(t)},t.prototype.set=function(t,e){var n=this.h(t),r=this._[n];if(void 0!==r){for(var i=0;i<r.length;i++)if(this.l(r[i][0],t))return void(r[i]=[t,e]);r.push([t,e])}else this._[n]=[[t,e]]},t.prototype.delete=function(t){var e=this.h(t),n=this._[e];if(void 0===n)return!1;for(var r=0;r<n.length;r++)if(this.l(n[r][0],t))return 1===n.length?delete this._[e]:n.splice(r,1),!0;return!1},t.prototype.forEach=function(t){Mo(this._,(function(e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r],s=o[0],a=o[1];t(s,a)}}))},t.prototype.T=function(){return Vo(this._)},t}(),Uo={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"},Bo=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).code=e,r.message=n,r.name="FirebaseError",r.toString=function(){return r.name+": [code="+r.code+"]: "+r.message},r}return e(n,t),n}(Error),Fo=function(){function t(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}return t.now=function(){return t.fromMillis(Date.now())},t.fromDate=function(e){return t.fromMillis(e.getTime())},t.fromMillis=function(e){var n=Math.floor(e/1e3);return new t(n,1e6*(e-1e3*n))},t.prototype.toDate=function(){return new Date(this.toMillis())},t.prototype.toMillis=function(){return 1e3*this.seconds+this.nanoseconds/1e6},t.prototype.I=function(t){return this.seconds===t.seconds?Do(this.nanoseconds,t.nanoseconds):Do(this.seconds,t.seconds)},t.prototype.isEqual=function(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds},t.prototype.toString=function(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"},t.prototype.toJSON=function(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}},t.prototype.valueOf=function(){var t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")},t}(),qo=function(){function t(t){this.timestamp=t}return t.m=function(e){return new t(e)},t.min=function(){return new t(new Fo(0,0))},t.prototype.A=function(t){return this.timestamp.I(t.timestamp)},t.prototype.isEqual=function(t){return this.timestamp.isEqual(t.timestamp)},t.prototype.R=function(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3},t.prototype.toString=function(){return"SnapshotVersion("+this.timestamp.toString()+")"},t.prototype.P=function(){return this.timestamp},t}(),Go=function(){function t(t,e,n){void 0===e?e=0:e>t.length&&No(),void 0===n?n=t.length-e:n>t.length-e&&No(),this.segments=t,this.offset=e,this.g=n}return Object.defineProperty(t.prototype,"length",{get:function(){return this.g},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(e){return 0===t.V(this,e)},t.prototype.child=function(e){var n=this.segments.slice(this.offset,this.limit());return e instanceof t?e.forEach((function(t){n.push(t)})):n.push(e),this.p(n)},t.prototype.limit=function(){return this.offset+this.length},t.prototype.v=function(t){return t=void 0===t?1:t,this.p(this.segments,this.offset+t,this.length-t)},t.prototype.S=function(){return this.p(this.segments,this.offset,this.length-1)},t.prototype.D=function(){return this.segments[this.offset]},t.prototype.C=function(){return this.get(this.length-1)},t.prototype.get=function(t){return this.segments[this.offset+t]},t.prototype.T=function(){return 0===this.length},t.prototype.N=function(t){if(t.length<this.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.F=function(t){if(this.length+1!==t.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.forEach=function(t){for(var e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])},t.prototype.O=function(){return this.segments.slice(this.offset,this.limit())},t.V=function(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r++){var i=t.get(r),o=e.get(r);if(i<o)return-1;if(i>o)return 1}return t.length<e.length?-1:t.length>e.length?1:0},t}(),zo=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.p=function(t,e,r){return new n(t,e,r)},n.prototype.M=function(){return this.O().join("/")},n.prototype.toString=function(){return this.M()},n.k=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=[],i=0,o=t;i<o.length;i++){var s=o[i];if(s.indexOf("//")>=0)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid segment ("+s+"). Paths must not contain // in them.");r.push.apply(r,s.split("/").filter((function(t){return t.length>0})))}return new n(r)},n.$=function(){return new n([])},n}(Go),Ko=/^[_a-zA-Z][_a-zA-Z0-9]*$/,Ho=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.p=function(t,e,r){return new n(t,e,r)},n.L=function(t){return Ko.test(t)},n.prototype.M=function(){return this.O().map((function(t){return t=t.replace("\\","\\\\").replace("`","\\`"),n.L(t)||(t="`"+t+"`"),t})).join(".")},n.prototype.toString=function(){return this.M()},n.prototype.B=function(){return 1===this.length&&"__name__"===this.get(0)},n.q=function(){return new n(["__name__"])},n.U=function(t){for(var e=[],r="",i=0,o=function(){if(0===r.length)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not be empty, begin with '.', end with '.', or contain '..'");e.push(r),r=""},s=!1;i<t.length;){var a=t[i];if("\\"===a){if(i+1===t.length)throw new Bo(Uo.INVALID_ARGUMENT,"Path has trailing escape character: "+t);var u=t[i+1];if("\\"!==u&&"."!==u&&"`"!==u)throw new Bo(Uo.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);r+=u,i+=2}else"`"===a?(s=!s,i++):"."!==a||s?(r+=a,i++):(o(),i++)}if(o(),s)throw new Bo(Uo.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new n(e)},n.$=function(){return new n([])},n}(Go),Wo=function(){function t(t){this.path=t}return t.K=function(e){return new t(zo.k(e))},t.W=function(e){return new t(zo.k(e).v(5))},t.prototype.j=function(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t},t.prototype.isEqual=function(t){return null!==t&&0===zo.V(this.path,t.path)},t.prototype.toString=function(){return this.path.toString()},t.V=function(t,e){return zo.V(t.path,e.path)},t.G=function(t){return t.length%2==0},t.H=function(e){return new t(new zo(e.slice()))},t}();function Xo(t){return null==t}function Yo(t){return 0===t&&1/t==-1/0}function Jo(t){return"number"==typeof t&&Number.isInteger(t)&&!Yo(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}var Qo=function(t,e,n,r,i,o,s){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o=null),void 0===s&&(s=null),this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=o,this.endAt=s,this.J=null};function $o(t,e,n,r,i,o,s){return void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o=null),void 0===s&&(s=null),new Qo(t,e,n,r,i,o,s)}function Zo(t){var e=Co(t);if(null===e.J){var n=e.path.M();null!==e.collectionGroup&&(n+="|cg:"+e.collectionGroup),n+="|f:",n+=e.filters.map((function(t){return function(t){return t.field.M()+t.op.toString()+Ks(t.value)}(t)})).join(","),n+="|ob:",n+=e.orderBy.map((function(t){return(e=t).field.M()+e.dir;var e})).join(","),Xo(e.limit)||(n+="|l:",n+=e.limit),e.startAt&&(n+="|lb:",n+=Yu(e.startAt)),e.endAt&&(n+="|ub:",n+=Yu(e.endAt)),e.J=n}return e.J}function ts(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(var n=0;n<t.orderBy.length;n++)if(!tc(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(var r=0;r<t.filters.length;r++)if(i=t.filters[r],o=e.filters[r],i.op!==o.op||!i.field.isEqual(o.field)||!Fs(i.value,o.value))return!1;var i,o;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!Qu(t.startAt,e.startAt)&&Qu(t.endAt,e.endAt)}function es(t){return Wo.G(t.path)&&null===t.collectionGroup&&0===t.filters.length}var ns=function(){function t(t){this.Y=t}return t.fromBase64String=function(e){return new t(atob(e))},t.fromUint8Array=function(e){return new t(function(t){for(var e="",n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(e))},t.prototype.toBase64=function(){return t=this.Y,btoa(t);var t},t.prototype.toUint8Array=function(){return function(t){for(var e=new Uint8Array(t.length),n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.Y)},t.prototype.X=function(){return 2*this.Y.length},t.prototype.A=function(t){return Do(this.Y,t.Y)},t.prototype.isEqual=function(t){return this.Y===t.Y},t}();ns.Z=new ns("");var rs,is,os=function(){function t(t,e,n,r,i,o,s){void 0===i&&(i=qo.min()),void 0===o&&(o=qo.min()),void 0===s&&(s=ns.Z),this.target=t,this.targetId=e,this.tt=n,this.sequenceNumber=r,this.et=i,this.lastLimboFreeSnapshotVersion=o,this.resumeToken=s}return t.prototype.nt=function(e){return new t(this.target,this.targetId,this.tt,e,this.et,this.lastLimboFreeSnapshotVersion,this.resumeToken)},t.prototype.st=function(e,n){return new t(this.target,this.targetId,this.tt,this.sequenceNumber,n,this.lastLimboFreeSnapshotVersion,e)},t.prototype.it=function(e){return new t(this.target,this.targetId,this.tt,this.sequenceNumber,this.et,e,this.resumeToken)},t}(),ss=function(t){this.count=t};function as(t){switch(t){case Uo.OK:return No();case Uo.CANCELLED:case Uo.UNKNOWN:case Uo.DEADLINE_EXCEEDED:case Uo.RESOURCE_EXHAUSTED:case Uo.INTERNAL:case Uo.UNAVAILABLE:case Uo.UNAUTHENTICATED:return!1;case Uo.INVALID_ARGUMENT:case Uo.NOT_FOUND:case Uo.ALREADY_EXISTS:case Uo.PERMISSION_DENIED:case Uo.FAILED_PRECONDITION:case Uo.ABORTED:case Uo.OUT_OF_RANGE:case Uo.UNIMPLEMENTED:case Uo.DATA_LOSS:return!0;default:return No()}}function us(t){if(void 0===t)return _o("GRPC error has no .code"),Uo.UNKNOWN;switch(t){case rs.OK:return Uo.OK;case rs.CANCELLED:return Uo.CANCELLED;case rs.UNKNOWN:return Uo.UNKNOWN;case rs.DEADLINE_EXCEEDED:return Uo.DEADLINE_EXCEEDED;case rs.RESOURCE_EXHAUSTED:return Uo.RESOURCE_EXHAUSTED;case rs.INTERNAL:return Uo.INTERNAL;case rs.UNAVAILABLE:return Uo.UNAVAILABLE;case rs.UNAUTHENTICATED:return Uo.UNAUTHENTICATED;case rs.INVALID_ARGUMENT:return Uo.INVALID_ARGUMENT;case rs.NOT_FOUND:return Uo.NOT_FOUND;case rs.ALREADY_EXISTS:return Uo.ALREADY_EXISTS;case rs.PERMISSION_DENIED:return Uo.PERMISSION_DENIED;case rs.FAILED_PRECONDITION:return Uo.FAILED_PRECONDITION;case rs.ABORTED:return Uo.ABORTED;case rs.OUT_OF_RANGE:return Uo.OUT_OF_RANGE;case rs.UNIMPLEMENTED:return Uo.UNIMPLEMENTED;case rs.DATA_LOSS:return Uo.DATA_LOSS;default:return No()}}(is=rs||(rs={}))[is.OK=0]="OK",is[is.CANCELLED=1]="CANCELLED",is[is.UNKNOWN=2]="UNKNOWN",is[is.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",is[is.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",is[is.NOT_FOUND=5]="NOT_FOUND",is[is.ALREADY_EXISTS=6]="ALREADY_EXISTS",is[is.PERMISSION_DENIED=7]="PERMISSION_DENIED",is[is.UNAUTHENTICATED=16]="UNAUTHENTICATED",is[is.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",is[is.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",is[is.ABORTED=10]="ABORTED",is[is.OUT_OF_RANGE=11]="OUT_OF_RANGE",is[is.UNIMPLEMENTED=12]="UNIMPLEMENTED",is[is.INTERNAL=13]="INTERNAL",is[is.UNAVAILABLE=14]="UNAVAILABLE",is[is.DATA_LOSS=15]="DATA_LOSS";var cs=function(){function t(t,e){this.V=t,this.root=e||fs.EMPTY}return t.prototype.rt=function(e,n){return new t(this.V,this.root.rt(e,n,this.V).copy(null,null,fs.ot,null,null))},t.prototype.remove=function(e){return new t(this.V,this.root.remove(e,this.V).copy(null,null,fs.ot,null,null))},t.prototype.get=function(t){for(var e=this.root;!e.T();){var n=this.V(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null},t.prototype.indexOf=function(t){for(var e=0,n=this.root;!n.T();){var r=this.V(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1},t.prototype.T=function(){return this.root.T()},Object.defineProperty(t.prototype,"size",{get:function(){return this.root.size},enumerable:!1,configurable:!0}),t.prototype.at=function(){return this.root.at()},t.prototype.ct=function(){return this.root.ct()},t.prototype.ut=function(t){return this.root.ut(t)},t.prototype.forEach=function(t){this.ut((function(e,n){return t(e,n),!1}))},t.prototype.toString=function(){var t=[];return this.ut((function(e,n){return t.push(e+":"+n),!1})),"{"+t.join(", ")+"}"},t.prototype.ht=function(t){return this.root.ht(t)},t.prototype.lt=function(){return new hs(this.root,null,this.V,!1)},t.prototype._t=function(t){return new hs(this.root,t,this.V,!1)},t.prototype.ft=function(){return new hs(this.root,null,this.V,!0)},t.prototype.dt=function(t){return new hs(this.root,t,this.V,!0)},t}(),hs=function(){function t(t,e,n,r){this.wt=r,this.Tt=[];for(var i=1;!t.T();)if(i=e?n(t.key,e):1,r&&(i*=-1),i<0)t=this.wt?t.left:t.right;else{if(0===i){this.Tt.push(t);break}this.Tt.push(t),t=this.wt?t.right:t.left}}return t.prototype.Et=function(){var t=this.Tt.pop(),e={key:t.key,value:t.value};if(this.wt)for(t=t.left;!t.T();)this.Tt.push(t),t=t.right;else for(t=t.right;!t.T();)this.Tt.push(t),t=t.left;return e},t.prototype.It=function(){return this.Tt.length>0},t.prototype.At=function(){if(0===this.Tt.length)return null;var t=this.Tt[this.Tt.length-1];return{key:t.key,value:t.value}},t}(),fs=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:t.EMPTY,this.right=null!=o?o:t.EMPTY,this.size=this.left.size+1+this.right.size}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.T=function(){return!1},t.prototype.ut=function(t){return this.left.ut(t)||t(this.key,this.value)||this.right.ut(t)},t.prototype.ht=function(t){return this.right.ht(t)||t(this.key,this.value)||this.left.ht(t)},t.prototype.min=function(){return this.left.T()?this:this.left.min()},t.prototype.at=function(){return this.min().key},t.prototype.ct=function(){return this.right.T()?this.key:this.right.ct()},t.prototype.rt=function(t,e,n){var r=this,i=n(t,r.key);return(r=i<0?r.copy(null,null,null,r.left.rt(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.rt(t,e,n))).Rt()},t.prototype.Pt=function(){if(this.left.T())return t.EMPTY;var e=this;return e.left.gt()||e.left.left.gt()||(e=e.Vt()),(e=e.copy(null,null,null,e.left.Pt(),null)).Rt()},t.prototype.remove=function(e,n){var r,i=this;if(n(e,i.key)<0)i.left.T()||i.left.gt()||i.left.left.gt()||(i=i.Vt()),i=i.copy(null,null,null,i.left.remove(e,n),null);else{if(i.left.gt()&&(i=i.yt()),i.right.T()||i.right.gt()||i.right.left.gt()||(i=i.vt()),0===n(e,i.key)){if(i.right.T())return t.EMPTY;r=i.right.min(),i=i.copy(r.key,r.value,null,null,i.right.Pt())}i=i.copy(null,null,null,null,i.right.remove(e,n))}return i.Rt()},t.prototype.gt=function(){return this.color},t.prototype.Rt=function(){var t=this;return t.right.gt()&&!t.left.gt()&&(t=t.bt()),t.left.gt()&&t.left.left.gt()&&(t=t.yt()),t.left.gt()&&t.right.gt()&&(t=t.St()),t},t.prototype.Vt=function(){var t=this.St();return t.right.left.gt()&&(t=(t=(t=t.copy(null,null,null,null,t.right.yt())).bt()).St()),t},t.prototype.vt=function(){var t=this.St();return t.left.left.gt()&&(t=(t=t.yt()).St()),t},t.prototype.bt=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.yt=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.St=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.Dt=function(){var t=this.Ct();return Math.pow(2,t)<=this.size+1},t.prototype.Ct=function(){if(this.gt()&&this.left.gt())throw No();if(this.right.gt())throw No();var t=this.left.Ct();if(t!==this.right.Ct())throw No();return t+(this.gt()?0:1)},t}();fs.EMPTY=null,fs.RED=!0,fs.ot=!1,fs.EMPTY=new(function(){function t(){this.size=0}return Object.defineProperty(t.prototype,"key",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){throw No()},enumerable:!1,configurable:!0}),t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.rt=function(t,e,n){return new fs(t,e)},t.prototype.remove=function(t,e){return this},t.prototype.T=function(){return!0},t.prototype.ut=function(t){return!1},t.prototype.ht=function(t){return!1},t.prototype.at=function(){return null},t.prototype.ct=function(){return null},t.prototype.gt=function(){return!1},t.prototype.Dt=function(){return!0},t.prototype.Ct=function(){return 0},t}());var ls=function(){function t(t){this.V=t,this.data=new cs(this.V)}return t.prototype.has=function(t){return null!==this.data.get(t)},t.prototype.first=function(){return this.data.at()},t.prototype.last=function(){return this.data.ct()},Object.defineProperty(t.prototype,"size",{get:function(){return this.data.size},enumerable:!1,configurable:!0}),t.prototype.indexOf=function(t){return this.data.indexOf(t)},t.prototype.forEach=function(t){this.data.ut((function(e,n){return t(e),!1}))},t.prototype.Nt=function(t,e){for(var n=this.data._t(t[0]);n.It();){var r=n.Et();if(this.V(r.key,t[1])>=0)return;e(r.key)}},t.prototype.xt=function(t,e){var n;for(n=void 0!==e?this.data._t(e):this.data.lt();n.It();)if(!t(n.Et().key))return},t.prototype.Ft=function(t){var e=this.data._t(t);return e.It()?e.Et().key:null},t.prototype.lt=function(){return new ps(this.data.lt())},t.prototype._t=function(t){return new ps(this.data._t(t))},t.prototype.add=function(t){return this.copy(this.data.remove(t).rt(t,!0))},t.prototype.delete=function(t){return this.has(t)?this.copy(this.data.remove(t)):this},t.prototype.T=function(){return this.data.T()},t.prototype.Ot=function(t){var e=this;return e.size<t.size&&(e=t,t=this),t.forEach((function(t){e=e.add(t)})),e},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.data.lt(),r=e.data.lt();n.It();){var i=n.Et().key,o=r.Et().key;if(0!==this.V(i,o))return!1}return!0},t.prototype.O=function(){var t=[];return this.forEach((function(e){t.push(e)})),t},t.prototype.toString=function(){var t=[];return this.forEach((function(e){return t.push(e)})),"SortedSet("+t.toString()+")"},t.prototype.copy=function(e){var n=new t(this.V);return n.data=e,n},t}(),ps=function(){function t(t){this.Mt=t}return t.prototype.Et=function(){return this.Mt.Et().key},t.prototype.It=function(){return this.Mt.It()},t}(),ds=new cs(Wo.V);function vs(){return ds}function ys(){return vs()}var gs=new cs(Wo.V);function ms(){return gs}var bs=new cs(Wo.V),ws=new ls(Wo.V);function Is(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=ws,r=0,i=t;r<i.length;r++){var o=i[r];n=n.add(o)}return n}var Es=new ls(Do);function As(){return Es}var _s=function(){function t(t){this.V=t?function(e,n){return t(e,n)||Wo.V(e.key,n.key)}:function(t,e){return Wo.V(t.key,e.key)},this.kt=ms(),this.$t=new cs(this.V)}return t.Lt=function(e){return new t(e.V)},t.prototype.has=function(t){return null!=this.kt.get(t)},t.prototype.get=function(t){return this.kt.get(t)},t.prototype.first=function(){return this.$t.at()},t.prototype.last=function(){return this.$t.ct()},t.prototype.T=function(){return this.$t.T()},t.prototype.indexOf=function(t){var e=this.kt.get(t);return e?this.$t.indexOf(e):-1},Object.defineProperty(t.prototype,"size",{get:function(){return this.$t.size},enumerable:!1,configurable:!0}),t.prototype.forEach=function(t){this.$t.ut((function(e,n){return t(e),!1}))},t.prototype.add=function(t){var e=this.delete(t.key);return e.copy(e.kt.rt(t.key,t),e.$t.rt(t,null))},t.prototype.delete=function(t){var e=this.get(t);return e?this.copy(this.kt.remove(t),this.$t.remove(e)):this},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.$t.lt(),r=e.$t.lt();n.It();){var i=n.Et().key,o=r.Et().key;if(!i.isEqual(o))return!1}return!0},t.prototype.toString=function(){var t=[];return this.forEach((function(e){t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"},t.prototype.copy=function(e,n){var r=new t;return r.V=this.V,r.kt=e,r.$t=n,r},t}(),Ts=function(){function t(){this.Bt=new cs(Wo.V)}return t.prototype.track=function(t){var e=t.doc.key,n=this.Bt.get(e);n?0!==t.type&&3===n.type?this.Bt=this.Bt.rt(e,t):3===t.type&&1!==n.type?this.Bt=this.Bt.rt(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Bt=this.Bt.rt(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Bt=this.Bt.rt(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Bt=this.Bt.remove(e):1===t.type&&2===n.type?this.Bt=this.Bt.rt(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Bt=this.Bt.rt(e,{type:2,doc:t.doc}):No():this.Bt=this.Bt.rt(e,t)},t.prototype.qt=function(){var t=[];return this.Bt.ut((function(e,n){t.push(n)})),t},t}(),Ss=function(){function t(t,e,n,r,i,o,s,a){this.query=t,this.docs=e,this.Ut=n,this.docChanges=r,this.Qt=i,this.fromCache=o,this.Kt=s,this.Wt=a}return t.jt=function(e,n,r,i){var o=[];return n.forEach((function(t){o.push({type:0,doc:t})})),new t(e,n,_s.Lt(n),o,r,i,!0,!1)},Object.defineProperty(t.prototype,"hasPendingWrites",{get:function(){return!this.Qt.T()},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){if(!(this.fromCache===t.fromCache&&this.Kt===t.Kt&&this.Qt.isEqual(t.Qt)&&Ru(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.Ut.isEqual(t.Ut)))return!1;var e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(var r=0;r<e.length;r++)if(e[r].type!==n[r].type||!e[r].doc.isEqual(n[r].doc))return!1;return!0},t}(),Ns=function(){function t(t,e,n,r,i){this.et=t,this.Gt=e,this.zt=n,this.Ht=r,this.Jt=i}return t.Yt=function(e,n){var r=new Map;return r.set(e,ks.Xt(e,n)),new t(qo.min(),r,As(),vs(),Is())},t}(),ks=function(){function t(t,e,n,r,i){this.resumeToken=t,this.Zt=e,this.te=n,this.ee=r,this.ne=i}return t.Xt=function(e,n){return new t(ns.Z,n,Is(),Is(),Is())},t}(),Cs=function(t,e,n,r){this.se=t,this.removedTargetIds=e,this.key=n,this.ie=r},xs=function(t,e){this.targetId=t,this.re=e},Os=function(t,e,n,r){void 0===n&&(n=ns.Z),void 0===r&&(r=null),this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r},Ds=function(){function t(){this.oe=0,this.ae=Ls(),this.ce=ns.Z,this.ue=!1,this.he=!0}return Object.defineProperty(t.prototype,"Zt",{get:function(){return this.ue},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resumeToken",{get:function(){return this.ce},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"le",{get:function(){return 0!==this.oe},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_e",{get:function(){return this.he},enumerable:!1,configurable:!0}),t.prototype.fe=function(t){t.X()>0&&(this.he=!0,this.ce=t)},t.prototype.de=function(){var t=Is(),e=Is(),n=Is();return this.ae.forEach((function(r,i){switch(i){case 0:t=t.add(r);break;case 2:e=e.add(r);break;case 1:n=n.add(r);break;default:No()}})),new ks(this.ce,this.ue,t,e,n)},t.prototype.we=function(){this.he=!1,this.ae=Ls()},t.prototype.Te=function(t,e){this.he=!0,this.ae=this.ae.rt(t,e)},t.prototype.Ee=function(t){this.he=!0,this.ae=this.ae.remove(t)},t.prototype.Ie=function(){this.oe+=1},t.prototype.me=function(){this.oe-=1},t.prototype.Ae=function(){this.he=!0,this.ue=!0},t}(),Ps=function(){function t(t){this.Re=t,this.Pe=new Map,this.ge=vs(),this.Ve=Rs(),this.ye=new ls(Do)}return t.prototype.pe=function(t){for(var e=0,n=t.se;e<n.length;e++){var r=n[e];t.ie instanceof mu?this.ve(r,t.ie):t.ie instanceof bu&&this.be(r,t.key,t.ie)}for(var i=0,o=t.removedTargetIds;i<o.length;i++){var s=o[i];this.be(s,t.key,t.ie)}},t.prototype.Se=function(t){var e=this;this.De(t,(function(n){var r=e.Ce(n);switch(t.state){case 0:e.Ne(n)&&r.fe(t.resumeToken);break;case 1:r.me(),r.le||r.we(),r.fe(t.resumeToken);break;case 2:r.me(),r.le||e.removeTarget(n);break;case 3:e.Ne(n)&&(r.Ae(),r.fe(t.resumeToken));break;case 4:e.Ne(n)&&(e.xe(n),r.fe(t.resumeToken));break;default:No()}}))},t.prototype.De=function(t,e){var n=this;t.targetIds.length>0?t.targetIds.forEach(e):this.Pe.forEach((function(t,r){n.Ne(r)&&e(r)}))},t.prototype.Fe=function(t){var e=t.targetId,n=t.re.count,r=this.Oe(e);if(r){var i=r.target;if(es(i))if(0===n){var o=new Wo(i.path);this.be(e,o,new bu(o,qo.min()))}else ko(1===n);else this.Me(e)!==n&&(this.xe(e),this.ye=this.ye.add(e))}},t.prototype.ke=function(t){var e=this,n=new Map;this.Pe.forEach((function(r,i){var o=e.Oe(i);if(o){if(r.Zt&&es(o.target)){var s=new Wo(o.target.path);null!==e.ge.get(s)||e.$e(i,s)||e.be(i,s,new bu(s,t))}r._e&&(n.set(i,r.de()),r.we())}}));var r=Is();this.Ve.forEach((function(t,n){var i=!0;n.xt((function(t){var n=e.Oe(t);return!n||2===n.tt||(i=!1,!1)})),i&&(r=r.add(t))}));var i=new Ns(t,n,this.ye,this.ge,r);return this.ge=vs(),this.Ve=Rs(),this.ye=new ls(Do),i},t.prototype.ve=function(t,e){if(this.Ne(t)){var n=this.$e(t,e.key)?2:0;this.Ce(t).Te(e.key,n),this.ge=this.ge.rt(e.key,e),this.Ve=this.Ve.rt(e.key,this.Le(e.key).add(t))}},t.prototype.be=function(t,e,n){if(this.Ne(t)){var r=this.Ce(t);this.$e(t,e)?r.Te(e,1):r.Ee(e),this.Ve=this.Ve.rt(e,this.Le(e).delete(t)),n&&(this.ge=this.ge.rt(e,n))}},t.prototype.removeTarget=function(t){this.Pe.delete(t)},t.prototype.Me=function(t){var e=this.Ce(t).de();return this.Re.Be(t).size+e.te.size-e.ne.size},t.prototype.Ie=function(t){this.Ce(t).Ie()},t.prototype.Ce=function(t){var e=this.Pe.get(t);return e||(e=new Ds,this.Pe.set(t,e)),e},t.prototype.Le=function(t){var e=this.Ve.get(t);return e||(e=new ls(Do),this.Ve=this.Ve.rt(t,e)),e},t.prototype.Ne=function(t){var e=null!==this.Oe(t);return e||Ao("WatchChangeAggregator","Detected inactive target",t),e},t.prototype.Oe=function(t){var e=this.Pe.get(t);return e&&e.le?null:this.Re.qe(t)},t.prototype.xe=function(t){var e=this;this.Pe.set(t,new Ds),this.Re.Be(t).forEach((function(n){e.be(t,n,null)}))},t.prototype.$e=function(t,e){return this.Re.Be(t).has(e)},t}();function Rs(){return new cs(Wo.V)}function Ls(){return new cs(Wo.V)}function Ms(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function Vs(t){var e=t.mapValue.fields.__previous_value__;return Ms(e)?Vs(e):e}function js(t){var e=Ws(t.mapValue.fields.__local_write_time__.timestampValue);return new Fo(e.seconds,e.nanos)}var Us=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function Bs(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?Ms(t)?4:10:No()}function Fs(t,e){var n=Bs(t);if(n!==Bs(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return js(t).isEqual(js(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;var n=Ws(t.timestampValue),r=Ws(e.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return Ys(t.bytesValue).isEqual(Ys(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return Xs(t.geoPointValue.latitude)===Xs(e.geoPointValue.latitude)&&Xs(t.geoPointValue.longitude)===Xs(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return Xs(t.integerValue)===Xs(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){var n=Xs(t.doubleValue),r=Xs(e.doubleValue);return n===r?Yo(n)===Yo(r):isNaN(n)&&isNaN(r)}return!1}(t,e);case 9:return Po(t.arrayValue.values||[],e.arrayValue.values||[],Fs);case 10:return function(t,e){var n=t.mapValue.fields||{},r=e.mapValue.fields||{};if(Lo(n)!==Lo(r))return!1;for(var i in n)if(n.hasOwnProperty(i)&&(void 0===r[i]||!Fs(n[i],r[i])))return!1;return!0}(t,e);default:return No()}}function qs(t,e){return void 0!==(t.values||[]).find((function(t){return Fs(t,e)}))}function Gs(t,e){var n=Bs(t),r=Bs(e);if(n!==r)return Do(n,r);switch(n){case 0:return 0;case 1:return Do(t.booleanValue,e.booleanValue);case 2:return function(t,e){var n=Xs(t.integerValue||t.doubleValue),r=Xs(e.integerValue||e.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(t,e);case 3:return zs(t.timestampValue,e.timestampValue);case 4:return zs(js(t),js(e));case 5:return Do(t.stringValue,e.stringValue);case 6:return function(t,e){var n=Ys(t),r=Ys(e);return n.A(r)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){for(var n=t.split("/"),r=e.split("/"),i=0;i<n.length&&i<r.length;i++){var o=Do(n[i],r[i]);if(0!==o)return o}return Do(n.length,r.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){var n=Do(Xs(t.latitude),Xs(e.latitude));return 0!==n?n:Do(Xs(t.longitude),Xs(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){for(var n=t.values||[],r=e.values||[],i=0;i<n.length&&i<r.length;++i){var o=Gs(n[i],r[i]);if(o)return o}return Do(n.length,r.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){var n=t.fields||{},r=Object.keys(n),i=e.fields||{},o=Object.keys(i);r.sort(),o.sort();for(var s=0;s<r.length&&s<o.length;++s){var a=Do(r[s],o[s]);if(0!==a)return a;var u=Gs(n[r[s]],i[o[s]]);if(0!==u)return u}return Do(r.length,o.length)}(t.mapValue,e.mapValue);default:throw No()}}function zs(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return Do(t,e);var n=Ws(t),r=Ws(e),i=Do(n.seconds,r.seconds);return 0!==i?i:Do(n.nanos,r.nanos)}function Ks(t){return Hs(t)}function Hs(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){var e=Ws(t);return"time("+e.seconds+","+e.nanos+")"}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?Ys(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,Wo.W(n).toString()):"geoPointValue"in t?"geo("+(e=t.geoPointValue).latitude+","+e.longitude+")":"arrayValue"in t?function(t){for(var e="[",n=!0,r=0,i=t.values||[];r<i.length;r++)n?n=!1:e+=",",e+=Hs(i[r]);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){for(var e="{",n=!0,r=0,i=Object.keys(t.fields||{}).sort();r<i.length;r++){var o=i[r];n?n=!1:e+=",",e+=o+":"+Hs(t.fields[o])}return e+"}"}(t.mapValue):No();var e,n}function Ws(t){if(ko(!!t),"string"==typeof t){var e=0,n=Us.exec(t);if(ko(!!n),n[1]){var r=n[1];r=(r+"000000000").substr(0,9),e=Number(r)}var i=new Date(t);return{seconds:Math.floor(i.getTime()/1e3),nanos:e}}return{seconds:Xs(t.seconds),nanos:Xs(t.nanos)}}function Xs(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function Ys(t){return"string"==typeof t?ns.fromBase64String(t):ns.fromUint8Array(t)}function Js(t,e){return{referenceValue:"projects/"+t.projectId+"/databases/"+t.database+"/documents/"+e.path.M()}}function Qs(t){return!!t&&"integerValue"in t}function $s(t){return!!t&&"arrayValue"in t}function Zs(t){return!!t&&"nullValue"in t}function ta(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function ea(t){return!!t&&"mapValue"in t}var na={asc:"ASCENDING",desc:"DESCENDING"},ra={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"},ia=function(t,e){this.t=t,this.Ue=e};function oa(t){return{integerValue:""+t}}function sa(t,e){if(t.Ue){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Yo(e)?"-0":e}}function aa(t,e){return Jo(e)?oa(e):sa(t,e)}function ua(t,e){return t.Ue?new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")+"."+("000000000"+e.nanoseconds).slice(-9)+"Z":{seconds:""+e.seconds,nanos:e.nanoseconds}}function ca(t,e){return t.Ue?e.toBase64():e.toUint8Array()}function ha(t,e){return ua(t,e.P())}function fa(t){return ko(!!t),qo.m(function(t){var e=Ws(t);return new Fo(e.seconds,e.nanos)}(t))}function la(t,e){return function(t){return new zo(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).M()}function pa(t){var e=zo.k(t);return ko(Ma(e)),e}function da(t,e){return la(t.t,e.path)}function va(t,e){var n=pa(e);if(n.get(1)!==t.t.projectId)throw new Bo(Uo.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.t.projectId);if(n.get(3)!==t.t.database)throw new Bo(Uo.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.t.database);return new Wo(ba(n))}function ya(t,e){return la(t.t,e)}function ga(t){var e=pa(t);return 4===e.length?zo.$():ba(e)}function ma(t){return new zo(["projects",t.t.projectId,"databases",t.t.database]).M()}function ba(t){return ko(t.length>4&&"documents"===t.get(4)),t.v(5)}function wa(t,e,n){return{name:da(t,e),fields:n.proto.mapValue.fields}}function Ia(t,e){var n;if(e instanceof su)n={update:wa(t,e.key,e.value)};else if(e instanceof lu)n={delete:da(t,e.key)};else if(e instanceof au)n={update:wa(t,e.key,e.data),updateMask:La(e.Qe)};else if(e instanceof cu)n={transform:{document:da(t,e.key),fieldTransforms:e.fieldTransforms.map((function(t){return function(t,e){var n=e.transform;if(n instanceof Fa)return{fieldPath:e.field.M(),setToServerValue:"REQUEST_TIME"};if(n instanceof qa)return{fieldPath:e.field.M(),appendMissingElements:{values:n.elements}};if(n instanceof za)return{fieldPath:e.field.M(),removeAllFromArray:{values:n.elements}};if(n instanceof Ha)return{fieldPath:e.field.M(),increment:n.Ke};throw No()}(0,t)}))}};else{if(!(e instanceof pu))return No();n={verify:da(t,e.key)}}return e.je.We||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:ha(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:No()}(t,e.je)),n}function Ea(t,e){var n=e.currentDocument?function(t){return void 0!==t.updateTime?$a.updateTime(fa(t.updateTime)):void 0!==t.exists?$a.exists(t.exists):$a.Ge()}(e.currentDocument):$a.Ge();if(e.update){e.update.name;var r=va(t,e.update.name),i=new du({mapValue:{fields:e.update.fields}});if(e.updateMask){var o=function(t){var e=t.fieldPaths||[];return new Ya(e.map((function(t){return Ho.U(t)})))}(e.updateMask);return new au(r,i,o,n)}return new su(r,i,n)}if(e.delete){var s=va(t,e.delete);return new lu(s,n)}if(e.transform){var a=va(t,e.transform.document),u=e.transform.fieldTransforms.map((function(e){return function(t,e){var n=null;if("setToServerValue"in e)ko("REQUEST_TIME"===e.setToServerValue),n=new Fa;else if("appendMissingElements"in e){var r=e.appendMissingElements.values||[];n=new qa(r)}else if("removeAllFromArray"in e){var i=e.removeAllFromArray.values||[];n=new za(i)}else"increment"in e?n=new Ha(t,e.increment):No();var o=Ho.U(e.fieldPath);return new Ja(o,n)}(t,e)}));return ko(!0===n.exists),new cu(a,u)}if(e.verify){var c=va(t,e.verify);return new pu(c,n)}return No()}function Aa(t,e){return{documents:[ya(t,e.path)]}}function _a(t,e){var n={structuredQuery:{}},r=e.path;null!==e.collectionGroup?(n.parent=ya(t,r),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=ya(t,r.S()),n.structuredQuery.from=[{collectionId:r.C()}]);var i=function(t){if(0!==t.length){var e=t.map((function(t){return function(t){if("=="===t.op){if(ta(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NAN"}};if(Zs(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(ta(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NOT_NAN"}};if(Zs(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Oa(t.field),op:xa(t.op),value:t.value}}}(t)}));return 1===e.length?e[0]:{compositeFilter:{op:"AND",filters:e}}}}(e.filters);i&&(n.structuredQuery.where=i);var o=function(t){if(0!==t.length)return t.map((function(t){return function(t){return{field:Oa(t.field),direction:Ca(t.dir)}}(t)}))}(e.orderBy);o&&(n.structuredQuery.orderBy=o);var s=function(t,e){return t.Ue||Xo(e)?e:{value:e}}(t,e.limit);return null!==s&&(n.structuredQuery.limit=s),e.startAt&&(n.structuredQuery.startAt=Na(e.startAt)),e.endAt&&(n.structuredQuery.endAt=Na(e.endAt)),n}function Ta(t){var e=ga(t.parent),n=t.structuredQuery,r=n.from?n.from.length:0,i=null;if(r>0){ko(1===r);var o=n.from[0];o.allDescendants?i=o.collectionId:e=e.child(o.collectionId)}var s=[];n.where&&(s=Sa(n.where));var a=[];n.orderBy&&(a=n.orderBy.map((function(t){return function(t){return new $u(Da(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t)})));var u=null;n.limit&&(u=function(t){var e;return Xo(e="object"==typeof t?t.value:t)?null:e}(n.limit));var c=null;n.startAt&&(c=ka(n.startAt));var h=null;return n.endAt&&(h=ka(n.endAt)),Eu(e,i,a,s,u,"F",c,h)}function Sa(t){return t?void 0!==t.unaryFilter?[Ra(t)]:void 0!==t.fieldFilter?[Pa(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((function(t){return Sa(t)})).reduce((function(t,e){return t.concat(e)})):No():[]}function Na(t){return{before:t.before,values:t.position}}function ka(t){var e=!!t.before,n=t.values||[];return new Xu(n,e)}function Ca(t){return na[t]}function xa(t){return ra[t]}function Oa(t){return{fieldPath:t.M()}}function Da(t){return Ho.U(t.fieldPath)}function Pa(t){return Uu.create(Da(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";case"OPERATOR_UNSPECIFIED":default:return No()}}(t.fieldFilter.op),t.fieldFilter.value)}function Ra(t){switch(t.unaryFilter.op){case"IS_NAN":var e=Da(t.unaryFilter.field);return Uu.create(e,"==",{doubleValue:NaN});case"IS_NULL":var n=Da(t.unaryFilter.field);return Uu.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":var r=Da(t.unaryFilter.field);return Uu.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":var i=Da(t.unaryFilter.field);return Uu.create(i,"!=",{nullValue:"NULL_VALUE"});case"OPERATOR_UNSPECIFIED":default:return No()}}function La(t){var e=[];return t.fields.forEach((function(t){return e.push(t.M())})),{fieldPaths:e}}function Ma(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}var Va=function(){this.ze=void 0};function ja(t,e,n){return t instanceof Fa?function(t,e){var n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof qa?Ga(t,e):t instanceof za?Ka(t,e):function(t,e){var n=Ba(t,e),r=Wa(n)+Wa(t.Ke);return Qs(n)&&Qs(t.Ke)?oa(r):sa(t.serializer,r)}(t,e)}function Ua(t,e,n){return t instanceof qa?Ga(t,e):t instanceof za?Ka(t,e):n}function Ba(t,e){return t instanceof Ha?Qs(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}var Fa=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n}(Va),qa=function(t){function n(e){var n=this;return(n=t.call(this)||this).elements=e,n}return e(n,t),n}(Va);function Ga(t,e){for(var n=Xa(e),r=function(t){n.some((function(e){return Fs(e,t)}))||n.push(t)},i=0,o=t.elements;i<o.length;i++)r(o[i]);return{arrayValue:{values:n}}}var za=function(t){function n(e){var n=this;return(n=t.call(this)||this).elements=e,n}return e(n,t),n}(Va);function Ka(t,e){for(var n=Xa(e),r=function(t){n=n.filter((function(e){return!Fs(e,t)}))},i=0,o=t.elements;i<o.length;i++)r(o[i]);return{arrayValue:{values:n}}}var Ha=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).serializer=e,r.Ke=n,r}return e(n,t),n}(Va);function Wa(t){return Xs(t.integerValue||t.doubleValue)}function Xa(t){return $s(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}var Ya=function(){function t(t){this.fields=t,t.sort(Ho.V)}return t.prototype.He=function(t){for(var e=0,n=this.fields;e<n.length;e++)if(n[e].N(t))return!0;return!1},t.prototype.isEqual=function(t){return Po(this.fields,t.fields,(function(t,e){return t.isEqual(e)}))},t}(),Ja=function(t,e){this.field=t,this.transform=e},Qa=function(t,e){this.version=t,this.transformResults=e},$a=function(){function t(t,e){this.updateTime=t,this.exists=e}return t.Ge=function(){return new t},t.exists=function(e){return new t(void 0,e)},t.updateTime=function(e){return new t(e)},Object.defineProperty(t.prototype,"We",{get:function(){return void 0===this.updateTime&&void 0===this.exists},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)},t}();function Za(t,e){return void 0!==t.updateTime?e instanceof mu&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e instanceof mu}var tu=function(){};function eu(t,e,n){return t instanceof su?function(t,e,n){return new mu(t.key,n.version,t.value,{hasCommittedMutations:!0})}(t,0,n):t instanceof au?function(t,e,n){if(!Za(t.je,e))return new wu(t.key,n.version);var r=uu(t,e);return new mu(t.key,n.version,r,{hasCommittedMutations:!0})}(t,e,n):t instanceof cu?function(t,e,n){if(ko(null!=n.transformResults),!Za(t.je,e))return new wu(t.key,n.version);var r=hu(0,e),i=function(t,e,n){var r=[];ko(t.length===n.length);for(var i=0;i<n.length;i++){var o=t[i],s=o.transform,a=null;e instanceof mu&&(a=e.field(o.field)),r.push(Ua(s,a,n[i]))}return r}(t.fieldTransforms,e,n.transformResults),o=n.version,s=fu(t,r.data(),i);return new mu(t.key,o,s,{hasCommittedMutations:!0})}(t,e,n):function(t,e,n){return new bu(t.key,n.version,{hasCommittedMutations:!0})}(t,0,n)}function nu(t,e,n,r){return t instanceof su?function(t,e){if(!Za(t.je,e))return e;var n=ou(e);return new mu(t.key,n,t.value,{Je:!0})}(t,e):t instanceof au?function(t,e){if(!Za(t.je,e))return e;var n=ou(e),r=uu(t,e);return new mu(t.key,n,r,{Je:!0})}(t,e):t instanceof cu?function(t,e,n,r){if(!Za(t.je,e))return e;var i=hu(0,e),o=function(t,e,n,r){for(var i=[],o=0,s=t;o<s.length;o++){var a=s[o],u=a.transform,c=null;n instanceof mu&&(c=n.field(a.field)),null===c&&r instanceof mu&&(c=r.field(a.field)),i.push(ja(u,c,e))}return i}(t.fieldTransforms,n,e,r),s=fu(t,i.data(),o);return new mu(t.key,i.version,s,{Je:!0})}(t,e,r,n):function(t,e){return Za(t.je,e)?new bu(t.key,qo.min()):e}(t,e)}function ru(t,e){return t instanceof cu?function(t,e){for(var n=null,r=0,i=t.fieldTransforms;r<i.length;r++){var o=i[r],s=e instanceof mu?e.field(o.field):void 0,a=Ba(o.transform,s||null);null!=a&&(n=null==n?(new vu).set(o.field,a):n.set(o.field,a))}return n?n.Ye():null}(t,e):null}function iu(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.je.isEqual(e.je)&&(0===t.type?t.value.isEqual(e.value):1===t.type?t.data.isEqual(e.data)&&t.Qe.isEqual(e.Qe):2!==t.type||Po(t.fieldTransforms,t.fieldTransforms,(function(t,e){return function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof qa&&e instanceof qa||t instanceof za&&e instanceof za?Po(t.elements,e.elements,Fs):t instanceof Ha&&e instanceof Ha?Fs(t.Ke,e.Ke):t instanceof Fa&&e instanceof Fa}(t.transform,e.transform)}(t,e)})))}function ou(t){return t instanceof mu?t.version:qo.min()}var su=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).key=e,i.value=n,i.je=r,i.type=0,i}return e(n,t),n}(tu),au=function(t){function n(e,n,r,i){var o=this;return(o=t.call(this)||this).key=e,o.data=n,o.Qe=r,o.je=i,o.type=1,o}return e(n,t),n}(tu);function uu(t,e){return function(t,e){var n=new vu(e);return t.Qe.fields.forEach((function(e){if(!e.T()){var r=t.data.field(e);null!==r?n.set(e,r):n.delete(e)}})),n.Ye()}(t,e instanceof mu?e.data():du.empty())}var cu=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).key=e,r.fieldTransforms=n,r.type=2,r.je=$a.exists(!0),r}return e(n,t),n}(tu);function hu(t,e){return e}function fu(t,e,n){for(var r=new vu(e),i=0;i<t.fieldTransforms.length;i++){var o=t.fieldTransforms[i];r.set(o.field,n[i])}return r.Ye()}var lu=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).key=e,r.je=n,r.type=3,r}return e(n,t),n}(tu),pu=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).key=e,r.je=n,r.type=4,r}return e(n,t),n}(tu),du=function(){function t(t){this.proto=t}return t.empty=function(){return new t({mapValue:{}})},t.prototype.field=function(t){if(t.T())return this.proto;for(var e=this.proto,n=0;n<t.length-1;++n){if(!e.mapValue.fields)return null;if(!ea(e=e.mapValue.fields[t.get(n)]))return null}return(e=(e.mapValue.fields||{})[t.C()])||null},t.prototype.isEqual=function(t){return Fs(this.proto,t.proto)},t}(),vu=function(){function t(t){void 0===t&&(t=du.empty()),this.Xe=t,this.Ze=new Map}return t.prototype.set=function(t,e){return this.tn(t,e),this},t.prototype.delete=function(t){return this.tn(t,null),this},t.prototype.tn=function(t,e){for(var n=this.Ze,r=0;r<t.length-1;++r){var i=t.get(r),o=n.get(i);o instanceof Map?n=o:o&&10===Bs(o)?(o=new Map(Object.entries(o.mapValue.fields||{})),n.set(i,o),n=o):(o=new Map,n.set(i,o),n=o)}n.set(t.C(),e)},t.prototype.Ye=function(){var t=this.en(Ho.$(),this.Ze);return null!=t?new du(t):this.Xe},t.prototype.en=function(t,e){var n=this,r=!1,i=this.Xe.field(t),o=ea(i)?Object.assign({},i.mapValue.fields):{};return e.forEach((function(e,i){if(e instanceof Map){var s=n.en(t.child(i),e);null!=s&&(o[i]=s,r=!0)}else null!==e?(o[i]=e,r=!0):o.hasOwnProperty(i)&&(delete o[i],r=!0)})),r?{mapValue:{fields:o}}:null},t}();function yu(t){var e=[];return Mo(t.fields||{},(function(t,n){var r=new Ho([t]);if(ea(n)){var i=yu(n.mapValue).fields;if(0===i.length)e.push(r);else for(var o=0,s=i;o<s.length;o++){var a=s[o];e.push(r.child(a))}}else e.push(r)})),new Ya(e)}var gu=function(t,e){this.key=t,this.version=e},mu=function(t){function n(e,n,r,i){var o=this;return(o=t.call(this,e,n)||this).nn=r,o.Je=!!i.Je,o.hasCommittedMutations=!!i.hasCommittedMutations,o}return e(n,t),n.prototype.field=function(t){return this.nn.field(t)},n.prototype.data=function(){return this.nn},n.prototype.sn=function(){return this.nn.proto},n.prototype.isEqual=function(t){return t instanceof n&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.Je===t.Je&&this.hasCommittedMutations===t.hasCommittedMutations&&this.nn.isEqual(t.nn)},n.prototype.toString=function(){return"Document("+this.key+", "+this.version+", "+this.nn.toString()+", {hasLocalMutations: "+this.Je+"}), {hasCommittedMutations: "+this.hasCommittedMutations+"})"},Object.defineProperty(n.prototype,"hasPendingWrites",{get:function(){return this.Je||this.hasCommittedMutations},enumerable:!1,configurable:!0}),n}(gu),bu=function(t){function n(e,n,r){var i=this;return(i=t.call(this,e,n)||this).hasCommittedMutations=!(!r||!r.hasCommittedMutations),i}return e(n,t),n.prototype.toString=function(){return"NoDocument("+this.key+", "+this.version+")"},Object.defineProperty(n.prototype,"hasPendingWrites",{get:function(){return this.hasCommittedMutations},enumerable:!1,configurable:!0}),n.prototype.isEqual=function(t){return t instanceof n&&t.hasCommittedMutations===this.hasCommittedMutations&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},n}(gu),wu=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.toString=function(){return"UnknownDocument("+this.key+", "+this.version+")"},Object.defineProperty(n.prototype,"hasPendingWrites",{get:function(){return!0},enumerable:!1,configurable:!0}),n.prototype.isEqual=function(t){return t instanceof n&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},n}(gu),Iu=function(t,e,n,r,i,o,s,a){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o="F"),void 0===s&&(s=null),void 0===a&&(a=null),this.path=t,this.collectionGroup=e,this.rn=n,this.filters=r,this.limit=i,this.limitType=o,this.startAt=s,this.endAt=a,this.on=null,this.an=null,this.startAt,this.endAt};function Eu(t,e,n,r,i,o,s,a){return new Iu(t,e,n,r,i,o,s,a)}function Au(t){return new Iu(t)}function _u(t){return!Xo(t.limit)&&"F"===t.limitType}function Tu(t){return!Xo(t.limit)&&"L"===t.limitType}function Su(t){return t.rn.length>0?t.rn[0].field:null}function Nu(t){for(var e=0,n=t.filters;e<n.length;e++){var r=n[e];if(r.cn())return r.field}return null}function ku(t){return null!==t.collectionGroup}function Cu(t){var e=Co(t);if(null===e.on){e.on=[];var n=Nu(e),r=Su(e);if(null!==n&&null===r)n.B()||e.on.push(new $u(n)),e.on.push(new $u(Ho.q(),"asc"));else{for(var i=!1,o=0,s=e.rn;o<s.length;o++){var a=s[o];e.on.push(a),a.field.B()&&(i=!0)}if(!i){var u=e.rn.length>0?e.rn[e.rn.length-1].dir:"asc";e.on.push(new $u(Ho.q(),u))}}}return e.on}function xu(t){var e=Co(t);if(!e.an)if("F"===e.limitType)e.an=$o(e.path,e.collectionGroup,Cu(e),e.filters,e.limit,e.startAt,e.endAt);else{for(var n=[],r=0,i=Cu(e);r<i.length;r++){var o=i[r],s="desc"===o.dir?"asc":"desc";n.push(new $u(o.field,s))}var a=e.endAt?new Xu(e.endAt.position,!e.endAt.before):null,u=e.startAt?new Xu(e.startAt.position,!e.startAt.before):null;e.an=$o(e.path,e.collectionGroup,n,e.filters,e.limit,a,u)}return e.an}function Ou(t,e,n){return new Iu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}function Du(t,e){return new Iu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,e,t.endAt)}function Pu(t,e){return new Iu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,e)}function Ru(t,e){return ts(xu(t),xu(e))&&t.limitType===e.limitType}function Lu(t){return Zo(xu(t))+"|lt:"+t.limitType}function Mu(t){return"Query(target="+function(t){var e=t.path.M();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=", filters: ["+t.filters.map((function(t){return(e=t).field.M()+" "+e.op+" "+Ks(e.value);var e})).join(", ")+"]"),Xo(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=", orderBy: ["+t.orderBy.map((function(t){return(e=t).field.M()+" ("+e.dir+")";var e})).join(", ")+"]"),t.startAt&&(e+=", startAt: "+Yu(t.startAt)),t.endAt&&(e+=", endAt: "+Yu(t.endAt)),"Target("+e+")"}(xu(t))+"; limitType="+t.limitType+")"}function Vu(t,e){return function(t,e){var n=e.key.path;return null!==t.collectionGroup?e.key.j(t.collectionGroup)&&t.path.N(n):Wo.G(t.path)?t.path.isEqual(n):t.path.F(n)}(t,e)&&function(t,e){for(var n=0,r=t.rn;n<r.length;n++){var i=r[n];if(!i.field.B()&&null===e.field(i.field))return!1}return!0}(t,e)&&function(t,e){for(var n=0,r=t.filters;n<r.length;n++)if(!r[n].matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!Ju(t.startAt,Cu(t),e)||t.endAt&&Ju(t.endAt,Cu(t),e))}(t,e)}function ju(t){return function(e,n){for(var r=!1,i=0,o=Cu(t);i<o.length;i++){var s=o[i],a=Zu(s,e,n);if(0!==a)return a;r=r||s.field.B()}return 0}}var Uu=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).field=e,i.op=n,i.value=r,i}return e(n,t),n.create=function(t,e,r){return t.B()?"in"===e||"not-in"===e?this.un(t,e,r):new Bu(t,e,r):"array-contains"===e?new zu(t,r):"in"===e?new Ku(t,r):"not-in"===e?new Hu(t,r):"array-contains-any"===e?new Wu(t,r):new n(t,e,r)},n.un=function(t,e,n){return"in"===e?new Fu(t,n):new qu(t,n)},n.prototype.matches=function(t){var e=t.field(this.field);return"!="===this.op?null!==e&&this.hn(Gs(e,this.value)):null!==e&&Bs(this.value)===Bs(e)&&this.hn(Gs(e,this.value))},n.prototype.hn=function(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return No()}},n.prototype.cn=function(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0},n}((function(){})),Bu=function(t){function n(e,n,r){var i=this;return(i=t.call(this,e,n,r)||this).key=Wo.W(r.referenceValue),i}return e(n,t),n.prototype.matches=function(t){var e=Wo.V(t.key,this.key);return this.hn(e)},n}(Uu),Fu=function(t){function n(e,n){var r=this;return(r=t.call(this,e,"in",n)||this).keys=Gu(0,n),r}return e(n,t),n.prototype.matches=function(t){return this.keys.some((function(e){return e.isEqual(t.key)}))},n}(Uu),qu=function(t){function n(e,n){var r=this;return(r=t.call(this,e,"not-in",n)||this).keys=Gu(0,n),r}return e(n,t),n.prototype.matches=function(t){return!this.keys.some((function(e){return e.isEqual(t.key)}))},n}(Uu);function Gu(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((function(t){return Wo.W(t.referenceValue)}))}var zu=function(t){function n(e,n){return t.call(this,e,"array-contains",n)||this}return e(n,t),n.prototype.matches=function(t){var e=t.field(this.field);return $s(e)&&qs(e.arrayValue,this.value)},n}(Uu),Ku=function(t){function n(e,n){return t.call(this,e,"in",n)||this}return e(n,t),n.prototype.matches=function(t){var e=t.field(this.field);return null!==e&&qs(this.value.arrayValue,e)},n}(Uu),Hu=function(t){function n(e,n){return t.call(this,e,"not-in",n)||this}return e(n,t),n.prototype.matches=function(t){if(qs(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;var e=t.field(this.field);return null!==e&&!qs(this.value.arrayValue,e)},n}(Uu),Wu=function(t){function n(e,n){return t.call(this,e,"array-contains-any",n)||this}return e(n,t),n.prototype.matches=function(t){var e=this,n=t.field(this.field);return!(!$s(n)||!n.arrayValue.values)&&n.arrayValue.values.some((function(t){return qs(e.value.arrayValue,t)}))},n}(Uu),Xu=function(t,e){this.position=t,this.before=e};function Yu(t){return(t.before?"b":"a")+":"+t.position.map((function(t){return Ks(t)})).join(",")}function Ju(t,e,n){for(var r=0,i=0;i<t.position.length;i++){var o=e[i],s=t.position[i];if(r=o.field.B()?Wo.V(Wo.W(s.referenceValue),n.key):Gs(s,n.field(o.field)),"desc"===o.dir&&(r*=-1),0!==r)break}return t.before?r<=0:r<0}function Qu(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(var n=0;n<t.position.length;n++)if(!Fs(t.position[n],e.position[n]))return!1;return!0}var $u=function(t,e){void 0===e&&(e="asc"),this.field=t,this.dir=e};function Zu(t,e,n){var r=t.field.B()?Wo.V(e.key,n.key):function(t,e,n){var r=e.field(t),i=n.field(t);return null!==r&&null!==i?Gs(r,i):No()}(t.field,e,n);switch(t.dir){case"asc":return r;case"desc":return-1*r;default:return No()}}function tc(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}var ec=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))},nc=function(){function t(t,e,n,r,i){void 0===n&&(n=1e3),void 0===r&&(r=1.5),void 0===i&&(i=6e4),this.ln=t,this._n=e,this.fn=n,this.dn=r,this.wn=i,this.Tn=0,this.En=null,this.In=Date.now(),this.reset()}return t.prototype.reset=function(){this.Tn=0},t.prototype.mn=function(){this.Tn=this.wn},t.prototype.An=function(t){var e=this;this.cancel();var n=Math.floor(this.Tn+this.Rn()),r=Math.max(0,Date.now()-this.In),i=Math.max(0,n-r);i>0&&Ao("ExponentialBackoff","Backing off for "+i+" ms (base delay: "+this.Tn+" ms, delay with jitter: "+n+" ms, last attempt: "+r+" ms ago)"),this.En=this.ln.Pn(this._n,i,(function(){return e.In=Date.now(),t()})),this.Tn*=this.dn,this.Tn<this.fn&&(this.Tn=this.fn),this.Tn>this.wn&&(this.Tn=this.wn)},t.prototype.gn=function(){null!==this.En&&(this.En.Vn(),this.En=null)},t.prototype.cancel=function(){null!==this.En&&(this.En.cancel(),this.En=null)},t.prototype.Rn=function(){return(Math.random()-.5)*this.Tn},t}(),rc=function(){function t(t){var e=this;this.yn=null,this.pn=null,this.result=void 0,this.error=void 0,this.vn=!1,this.bn=!1,t((function(t){e.vn=!0,e.result=t,e.yn&&e.yn(t)}),(function(t){e.vn=!0,e.error=t,e.pn&&e.pn(t)}))}return t.prototype.catch=function(t){return this.next(void 0,t)},t.prototype.next=function(e,n){var r=this;return this.bn&&No(),this.bn=!0,this.vn?this.error?this.Sn(n,this.error):this.Dn(e,this.result):new t((function(t,i){r.yn=function(n){r.Dn(e,n).next(t,i)},r.pn=function(e){r.Sn(n,e).next(t,i)}}))},t.prototype.Cn=function(){var t=this;return new Promise((function(e,n){t.next(e,n)}))},t.prototype.Nn=function(e){try{var n=e();return n instanceof t?n:t.resolve(n)}catch(e){return t.reject(e)}},t.prototype.Dn=function(e,n){return e?this.Nn((function(){return e(n)})):t.resolve(n)},t.prototype.Sn=function(e,n){return e?this.Nn((function(){return e(n)})):t.reject(n)},t.resolve=function(e){return new t((function(t,n){t(e)}))},t.reject=function(e){return new t((function(t,n){n(e)}))},t.xn=function(e){return new t((function(t,n){var r=0,i=0,o=!1;e.forEach((function(e){++r,e.next((function(){++i,o&&i===r&&t()}),(function(t){return n(t)}))})),o=!0,i===r&&t()}))},t.Fn=function(e){for(var n=t.resolve(!1),r=function(e){n=n.next((function(n){return n?t.resolve(n):e()}))},i=0,o=e;i<o.length;i++)r(o[i]);return n},t.forEach=function(t,e){var n=this,r=[];return t.forEach((function(t,i){r.push(e.call(n,t,i))})),this.xn(r)},t}(),ic=function(){function t(e,n,r){this.name=e,this.version=n,this.On=r,12.2===t.Mn(l())&&_o("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.")}return t.delete=function(t){return Ao("SimpleDb","Removing database:",t),hc(window.indexedDB.deleteDatabase(t)).Cn()},t.kn=function(){if("undefined"==typeof indexedDB)return!1;if(t.$n())return!0;var e=l(),n=t.Mn(e),r=0<n&&n<10,i=t.Ln(e),o=0<i&&i<4.5;return!(e.indexOf("MSIE ")>0||e.indexOf("Trident/")>0||e.indexOf("Edge/")>0||r||o)},t.$n=function(){var t;return"undefined"!=typeof process&&"YES"===(null===(t=process.env)||void 0===t?void 0:t.Bn)},t.qn=function(t,e){return t.store(e)},t.Mn=function(t){var e=t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),n=e?e[1].split("_").slice(0,2).join("."):"-1";return Number(n)},t.Ln=function(t){var e=t.match(/Android ([\d.]+)/i),n=e?e[1].split(".").slice(0,2).join("."):"-1";return Number(n)},t.prototype.Un=function(t){return i(this,void 0,void 0,(function(){var e,n=this;return o(this,(function(r){switch(r.label){case 0:return this.db?[3,2]:(Ao("SimpleDb","Opening database:",this.name),e=this,[4,new Promise((function(e,r){var i=indexedDB.open(n.name,n.version);i.onsuccess=function(t){var n=t.target.result;e(n)},i.onblocked=function(){r(new sc(t,"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."))},i.onerror=function(e){var n=e.target.error;"VersionError"===n.name?r(new Bo(Uo.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")):r(new sc(t,n))},i.onupgradeneeded=function(t){Ao("SimpleDb",'Database "'+n.name+'" requires upgrade from version:',t.oldVersion);var e=t.target.result;n.On.createOrUpgrade(e,i.transaction,t.oldVersion,n.version).next((function(){Ao("SimpleDb","Database upgrade to version "+n.version+" complete")}))}}))]);case 1:e.db=r.sent(),r.label=2;case 2:return[2,(this.Qn&&(this.db.onversionchange=function(t){return n.Qn(t)}),this.db)]}}))}))},t.prototype.Kn=function(t){this.Qn=t,this.db&&(this.db.onversionchange=function(e){return t(e)})},t.prototype.runTransaction=function(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a,u,c;return o(this,(function(h){switch(h.label){case 0:i="readonly"===e,s=0,a=function(){var e,a,c,h,f;return o(this,(function(o){switch(o.label){case 0:++s,o.label=1;case 1:return o.trys.push([1,4,,5]),[4,u.Un(t)];case 2:return u.db=o.sent(),e=uc.open(u.db,t,i?"readonly":"readwrite",n),a=r(e).catch((function(t){return e.abort(t),rc.reject(t)})).Cn(),c={},a.catch((function(){})),[4,e.Wn];case 3:return[2,(c.value=(o.sent(),a),c)];case 4:return h=o.sent(),f="FirebaseError"!==h.name&&s<3,Ao("SimpleDb","Transaction failed with error:",h.message,"Retrying:",f),u.close(),f?[3,5]:[2,{value:Promise.reject(h)}];case 5:return[2]}}))},u=this,h.label=1;case 1:return[5,a()];case 2:if("object"==typeof(c=h.sent()))return[2,c.value];h.label=3;case 3:return[3,1];case 4:return[2]}}))}))},t.prototype.close=function(){this.db&&this.db.close(),this.db=void 0},t}(),oc=function(){function t(t){this.jn=t,this.Gn=!1,this.zn=null}return Object.defineProperty(t.prototype,"vn",{get:function(){return this.Gn},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"Hn",{get:function(){return this.zn},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cursor",{set:function(t){this.jn=t},enumerable:!1,configurable:!0}),t.prototype.done=function(){this.Gn=!0},t.prototype.Jn=function(t){this.zn=t},t.prototype.delete=function(){return hc(this.jn.delete())},t}(),sc=function(t){function n(e,n){var r=this;return(r=t.call(this,Uo.UNAVAILABLE,"IndexedDB transaction '"+e+"' failed: "+n)||this).name="IndexedDbTransactionError",r}return e(n,t),n}(Bo);function ac(t){return"IndexedDbTransactionError"===t.name}var uc=function(){function t(t,e){var n=this;this.action=t,this.transaction=e,this.aborted=!1,this.Yn=new ec,this.transaction.oncomplete=function(){n.Yn.resolve()},this.transaction.onabort=function(){e.error?n.Yn.reject(new sc(t,e.error)):n.Yn.resolve()},this.transaction.onerror=function(e){var r=lc(e.target.error);n.Yn.reject(new sc(t,r))}}return t.open=function(e,n,r,i){try{return new t(n,e.transaction(i,r))}catch(e){throw new sc(n,e)}},Object.defineProperty(t.prototype,"Wn",{get:function(){return this.Yn.promise},enumerable:!1,configurable:!0}),t.prototype.abort=function(t){t&&this.Yn.reject(t),this.aborted||(Ao("SimpleDb","Aborting transaction:",t?t.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort())},t.prototype.store=function(t){var e=this.transaction.objectStore(t);return new cc(e)},t}(),cc=function(){function t(t){this.store=t}return t.prototype.put=function(t,e){var n;return void 0!==e?(Ao("SimpleDb","PUT",this.store.name,t,e),n=this.store.put(e,t)):(Ao("SimpleDb","PUT",this.store.name,"<auto-key>",t),n=this.store.put(t)),hc(n)},t.prototype.add=function(t){return Ao("SimpleDb","ADD",this.store.name,t,t),hc(this.store.add(t))},t.prototype.get=function(t){var e=this;return hc(this.store.get(t)).next((function(n){return void 0===n&&(n=null),Ao("SimpleDb","GET",e.store.name,t,n),n}))},t.prototype.delete=function(t){return Ao("SimpleDb","DELETE",this.store.name,t),hc(this.store.delete(t))},t.prototype.count=function(){return Ao("SimpleDb","COUNT",this.store.name),hc(this.store.count())},t.prototype.Xn=function(t,e){var n=this.cursor(this.options(t,e)),r=[];return this.Zn(n,(function(t,e){r.push(e)})).next((function(){return r}))},t.prototype.ts=function(t,e){Ao("SimpleDb","DELETE ALL",this.store.name);var n=this.options(t,e);n.es=!1;var r=this.cursor(n);return this.Zn(r,(function(t,e,n){return n.delete()}))},t.prototype.ns=function(t,e){var n;e?n=t:(n={},e=t);var r=this.cursor(n);return this.Zn(r,e)},t.prototype.ss=function(t){var e=this.cursor({});return new rc((function(n,r){e.onerror=function(t){var e=lc(t.target.error);r(e)},e.onsuccess=function(e){var r=e.target.result;r?t(r.primaryKey,r.value).next((function(t){t?r.continue():n()})):n()}}))},t.prototype.Zn=function(t,e){var n=[];return new rc((function(r,i){t.onerror=function(t){i(t.target.error)},t.onsuccess=function(t){var i=t.target.result;if(i){var o=new oc(i),s=e(i.primaryKey,i.value,o);if(s instanceof rc){var a=s.catch((function(t){return o.done(),rc.reject(t)}));n.push(a)}o.vn?r():null===o.Hn?i.continue():i.continue(o.Hn)}else r()}})).next((function(){return rc.xn(n)}))},t.prototype.options=function(t,e){var n=void 0;return void 0!==t&&("string"==typeof t?n=t:e=t),{index:n,range:e}},t.prototype.cursor=function(t){var e="next";if(t.reverse&&(e="prev"),t.index){var n=this.store.index(t.index);return t.es?n.openKeyCursor(t.range,e):n.openCursor(t.range,e)}return this.store.openCursor(t.range,e)},t}();function hc(t){return new rc((function(e,n){t.onsuccess=function(t){var n=t.target.result;e(n)},t.onerror=function(t){var e=lc(t.target.error);n(e)}}))}var fc=!1;function lc(t){var e=ic.Mn(l());if(e>=12.2&&e<13){var n="An internal error was encountered in the Indexed Database server";if(t.message.indexOf(n)>=0){var r=new Bo("internal","IOS_INDEXEDDB_BUG1: IndexedDb has thrown '"+n+"'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");return fc||(fc=!0,setTimeout((function(){throw r}),0)),r}}return t}function pc(){return"undefined"!=typeof window?window:null}function dc(){return"undefined"!=typeof document?document:null}var vc=function(){function t(t,e,n,r,i){this.rs=t,this._n=e,this.os=n,this.op=r,this.cs=i,this.us=new ec,this.then=this.us.promise.then.bind(this.us.promise),this.us.promise.catch((function(t){}))}return t.hs=function(e,n,r,i,o){var s=new t(e,n,Date.now()+r,i,o);return s.start(r),s},t.prototype.start=function(t){var e=this;this.ls=setTimeout((function(){return e._s()}),t)},t.prototype.Vn=function(){return this._s()},t.prototype.cancel=function(t){null!==this.ls&&(this.clearTimeout(),this.us.reject(new Bo(Uo.CANCELLED,"Operation cancelled"+(t?": "+t:""))))},t.prototype._s=function(){var t=this;this.rs.fs((function(){return null!==t.ls?(t.clearTimeout(),t.op().then((function(e){return t.us.resolve(e)}))):Promise.resolve()}))},t.prototype.clearTimeout=function(){null!==this.ls&&(this.cs(this),clearTimeout(this.ls),this.ls=null)},t}(),yc=function(){function t(){var t=this;this.ds=Promise.resolve(),this.ws=[],this.Ts=!1,this.Es=[],this.Is=null,this.As=!1,this.Rs=[],this.Ps=new nc(this,"async_queue_retry"),this.gs=function(){var e=dc();e&&Ao("AsyncQueue","Visibility state changed to "+e.visibilityState),t.Ps.gn()};var e=dc();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.gs)}return Object.defineProperty(t.prototype,"Vs",{get:function(){return this.Ts},enumerable:!1,configurable:!0}),t.prototype.fs=function(t){this.enqueue(t)},t.prototype.ys=function(t){this.ps(),this.vs(t)},t.prototype.bs=function(){if(!this.Ts){this.Ts=!0;var t=dc();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.gs)}},t.prototype.enqueue=function(t){return this.ps(),this.Ts?new Promise((function(t){})):this.vs(t)},t.prototype.Ss=function(t){var e=this;this.fs((function(){return e.ws.push(t),e.Ds()}))},t.prototype.Ds=function(){return i(this,void 0,void 0,(function(){var t,e=this;return o(this,(function(n){switch(n.label){case 0:if(0===this.ws.length)return[3,5];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.ws[0]()];case 2:return n.sent(),this.ws.shift(),this.Ps.reset(),[3,4];case 3:if(!ac(t=n.sent()))throw t;return Ao("AsyncQueue","Operation failed with retryable error: "+t),[3,4];case 4:this.ws.length>0&&this.Ps.An((function(){return e.Ds()})),n.label=5;case 5:return[2]}}))}))},t.prototype.vs=function(t){var e=this,n=this.ds.then((function(){return e.As=!0,t().catch((function(t){throw e.Is=t,e.As=!1,_o("INTERNAL UNHANDLED ERROR: ",function(t){var e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t)),t})).then((function(t){return e.As=!1,t}))}));return this.ds=n,n},t.prototype.Pn=function(t,e,n){var r=this;this.ps(),this.Rs.indexOf(t)>-1&&(e=0);var i=vc.hs(this,t,e,n,(function(t){return r.Cs(t)}));return this.Es.push(i),i},t.prototype.ps=function(){this.Is&&No()},t.prototype.Ns=function(){},t.prototype.xs=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return[4,t=this.ds];case 1:e.sent(),e.label=2;case 2:if(t!==this.ds)return[3,0];e.label=3;case 3:return[2]}}))}))},t.prototype.Fs=function(t){for(var e=0,n=this.Es;e<n.length;e++)if(n[e]._n===t)return!0;return!1},t.prototype.Os=function(t){var e=this;return this.xs().then((function(){e.Es.sort((function(t,e){return t.os-e.os}));for(var n=0,r=e.Es;n<r.length;n++){var i=r[n];if(i.Vn(),"all"!==t&&i._n===t)break}return e.xs()}))},t.prototype.Ms=function(t){this.Rs.push(t)},t.prototype.Cs=function(t){var e=this.Es.indexOf(t);this.Es.splice(e,1)},t}();function gc(t,e){if(_o("AsyncQueue",e+": "+t),ac(t))return new Bo(Uo.UNAVAILABLE,e+": "+t);throw t}var mc=function(){this.ks=void 0,this.listeners=[]},bc=function(){this.queries=new jo((function(t){return Lu(t)}),Ru),this.onlineState="Unknown",this.$s=new Set};function wc(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:if(n=Co(t),r=e.query,i=!1,(s=n.queries.get(r))||(i=!0,s=new mc),!i)return[3,4];o.label=1;case 1:return o.trys.push([1,3,,4]),a=s,[4,n.Ls(r)];case 2:return a.ks=o.sent(),[3,4];case 3:return u=o.sent(),c=gc(u,"Initialization of query '"+Mu(e.query)+"' failed"),[2,void e.onError(c)];case 4:return n.queries.set(r,s),s.listeners.push(e),e.Bs(n.onlineState),s.ks&&e.qs(s.ks)&&_c(n),[2]}}))}))}function Ic(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a;return o(this,(function(o){return n=Co(t),r=e.query,i=!1,(s=n.queries.get(r))&&(a=s.listeners.indexOf(e))>=0&&(s.listeners.splice(a,1),i=0===s.listeners.length),i?[2,(n.queries.delete(r),n.Us(r))]:[2]}))}))}function Ec(t,e){for(var n=Co(t),r=!1,i=0,o=e;i<o.length;i++){var s=o[i],a=s.query,u=n.queries.get(a);if(u){for(var c=0,h=u.listeners;c<h.length;c++)h[c].qs(s)&&(r=!0);u.ks=s}}r&&_c(n)}function Ac(t,e,n){var r=Co(t),i=r.queries.get(e);if(i)for(var o=0,s=i.listeners;o<s.length;o++)s[o].onError(n);r.queries.delete(e)}function _c(t){t.$s.forEach((function(t){t.next()}))}var Tc=function(){function t(t,e,n){this.query=t,this.Qs=e,this.Ks=!1,this.Ws=null,this.onlineState="Unknown",this.options=n||{}}return t.prototype.qs=function(t){if(!this.options.includeMetadataChanges){for(var e=[],n=0,r=t.docChanges;n<r.length;n++){var i=r[n];3!==i.type&&e.push(i)}t=new Ss(t.query,t.docs,t.Ut,e,t.Qt,t.fromCache,t.Kt,!0)}var o=!1;return this.Ks?this.js(t)&&(this.Qs.next(t),o=!0):this.Gs(t,this.onlineState)&&(this.zs(t),o=!0),this.Ws=t,o},t.prototype.onError=function(t){this.Qs.error(t)},t.prototype.Bs=function(t){this.onlineState=t;var e=!1;return this.Ws&&!this.Ks&&this.Gs(this.Ws,t)&&(this.zs(this.Ws),e=!0),e},t.prototype.Gs=function(t,e){if(!t.fromCache)return!0;var n="Offline"!==e;return!(this.options.Hs&&n||t.docs.T()&&"Offline"!==e)},t.prototype.js=function(t){if(t.docChanges.length>0)return!0;var e=this.Ws&&this.Ws.hasPendingWrites!==t.hasPendingWrites;return!(!t.Kt&&!e)&&!0===this.options.includeMetadataChanges},t.prototype.zs=function(t){t=Ss.jt(t.query,t.docs,t.Qt,t.fromCache),this.Ks=!0,this.Qs.next(t)},t}(),Sc=function(){function t(t){this.uid=t}return t.prototype.Js=function(){return null!=this.uid},t.prototype.Ys=function(){return this.Js()?"uid:"+this.uid:"anonymous-user"},t.prototype.isEqual=function(t){return t.uid===this.uid},t}();Sc.UNAUTHENTICATED=new Sc(null),Sc.Xs=new Sc("google-credentials-uid"),Sc.Zs=new Sc("first-party-uid");var Nc=function(t,e){this.user=e,this.type="OAuth",this.ti={},this.ti.Authorization="Bearer "+t},kc=function(){function t(){this.ei=null}return t.prototype.getToken=function(){return Promise.resolve(null)},t.prototype.ni=function(){},t.prototype.si=function(t){this.ei=t,t(Sc.UNAUTHENTICATED)},t.prototype.ii=function(){this.ei=null},t}(),Cc=function(){function t(t){var e=this;this.ri=null,this.currentUser=Sc.UNAUTHENTICATED,this.oi=!1,this.ai=0,this.ei=null,this.forceRefresh=!1,this.ri=function(){e.ai++,e.currentUser=e.ci(),e.oi=!0,e.ei&&e.ei(e.currentUser)},this.ai=0,this.auth=t.getImmediate({optional:!0}),this.auth?this.auth.addAuthTokenListener(this.ri):(this.ri(null),t.get().then((function(t){e.auth=t,e.ri&&e.auth.addAuthTokenListener(e.ri)}),(function(){})))}return t.prototype.getToken=function(){var t=this,e=this.ai,n=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(n).then((function(n){return t.ai!==e?(Ao("FirebaseCredentialsProvider","getToken aborted due to token change."),t.getToken()):n?(ko("string"==typeof n.accessToken),new Nc(n.accessToken,t.currentUser)):null})):Promise.resolve(null)},t.prototype.ni=function(){this.forceRefresh=!0},t.prototype.si=function(t){this.ei=t,this.oi&&t(this.currentUser)},t.prototype.ii=function(){this.auth&&this.auth.removeAuthTokenListener(this.ri),this.ri=null,this.ei=null},t.prototype.ci=function(){var t=this.auth&&this.auth.getUid();return ko(null===t||"string"==typeof t),new Sc(t)},t}(),xc=function(){function t(t,e){this.ui=t,this.hi=e,this.type="FirstParty",this.user=Sc.Zs}return Object.defineProperty(t.prototype,"ti",{get:function(){var t={"X-Goog-AuthUser":this.hi},e=this.ui.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),t},enumerable:!1,configurable:!0}),t}(),Oc=function(){function t(t,e){this.ui=t,this.hi=e}return t.prototype.getToken=function(){return Promise.resolve(new xc(this.ui,this.hi))},t.prototype.si=function(t){t(Sc.Zs)},t.prototype.ii=function(){},t.prototype.ni=function(){},t}(),Dc=function(){function t(t,e,n,r){this.batchId=t,this.li=e,this.baseMutations=n,this.mutations=r}return t.prototype._i=function(t,e,n){for(var r=n.fi,i=0;i<this.mutations.length;i++){var o=this.mutations[i];o.key.isEqual(t)&&(e=eu(o,e,r[i]))}return e},t.prototype.di=function(t,e){for(var n=0,r=this.baseMutations;n<r.length;n++){var i=r[n];i.key.isEqual(t)&&(e=nu(i,e,e,this.li))}for(var o=e,s=0,a=this.mutations;s<a.length;s++){var u=a[s];u.key.isEqual(t)&&(e=nu(u,e,o,this.li))}return e},t.prototype.wi=function(t){var e=this,n=t;return this.mutations.forEach((function(r){var i=e.di(r.key,t.get(r.key));i&&(n=n.rt(r.key,i))})),n},t.prototype.keys=function(){return this.mutations.reduce((function(t,e){return t.add(e.key)}),Is())},t.prototype.isEqual=function(t){return this.batchId===t.batchId&&Po(this.mutations,t.mutations,(function(t,e){return iu(t,e)}))&&Po(this.baseMutations,t.baseMutations,(function(t,e){return iu(t,e)}))},t}(),Pc=function(){function t(t,e,n,r){this.batch=t,this.Ti=e,this.fi=n,this.Ei=r}return t.from=function(e,n,r){ko(e.mutations.length===r.length);for(var i=bs,o=e.mutations,s=0;s<o.length;s++)i=i.rt(o[s].key,r[s].version);return new t(e,n,r,i)},t}(),Rc=function(){function t(){this.Ii=new jo((function(t){return t.toString()}),(function(t,e){return t.isEqual(e)})),this.mi=!1}return t.prototype.Ai=function(t){var e=this.Ii.get(t);return e?e.readTime:qo.min()},t.prototype.Ri=function(t,e){this.Pi(),this.Ii.set(t.key,{gi:t,readTime:e})},t.prototype.Vi=function(t,e){void 0===e&&(e=null),this.Pi(),this.Ii.set(t,{gi:null,readTime:e})},t.prototype.yi=function(t,e){this.Pi();var n=this.Ii.get(e);return void 0!==n?rc.resolve(n.gi):this.pi(t,e)},t.prototype.getEntries=function(t,e){return this.vi(t,e)},t.prototype.apply=function(t){return this.Pi(),this.mi=!0,this.bi(t)},t.prototype.Pi=function(){},t}();function Lc(t){return new ia(t,!0)}function Mc(t){return function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=t,r=0,i=["next","error","complete"];r<i.length;r++){var o=i[r];if(o in n&&"function"==typeof n[o])return!0}return!1}(t)}var Vc="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.",jc=function(){function t(){this.Si=[]}return t.prototype.Di=function(t){this.Si.push(t)},t.prototype.Ci=function(){this.Si.forEach((function(t){return t()}))},t}(),Uc=function(){function t(t,e,n){this.Ni=t,this.xi=e,this.Fi=n}return t.prototype.Oi=function(t,e){var n=this;return this.xi.Mi(t,e).next((function(r){return n.ki(t,e,r)}))},t.prototype.ki=function(t,e,n){return this.Ni.yi(t,e).next((function(t){for(var r=0,i=n;r<i.length;r++)t=i[r].di(e,t);return t}))},t.prototype.$i=function(t,e,n){var r=ys();return e.forEach((function(t,e){for(var i=0,o=n;i<o.length;i++)e=o[i].di(t,e);r=r.rt(t,e)})),r},t.prototype.Li=function(t,e){var n=this;return this.Ni.getEntries(t,e).next((function(e){return n.Bi(t,e)}))},t.prototype.Bi=function(t,e){var n=this;return this.xi.qi(t,e).next((function(r){var i=n.$i(t,e,r),o=vs();return i.forEach((function(t,e){e||(e=new bu(t,qo.min())),o=o.rt(t,e)})),o}))},t.prototype.Ui=function(t,e,n){return function(t){return Wo.G(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Qi(t,e.path):ku(e)?this.Ki(t,e,n):this.Wi(t,e,n)},t.prototype.Qi=function(t,e){return this.Oi(t,new Wo(e)).next((function(t){var e=ms();return t instanceof mu&&(e=e.rt(t.key,t)),e}))},t.prototype.Ki=function(t,e,n){var r=this,i=e.collectionGroup,o=ms();return this.Fi.ji(t,i).next((function(s){return rc.forEach(s,(function(s){var a=function(t,e){return new Iu(e,null,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,s.child(i));return r.Wi(t,a,n).next((function(t){t.forEach((function(t,e){o=o.rt(t,e)}))}))})).next((function(){return o}))}))},t.prototype.Wi=function(t,e,n){var r,i,o=this;return this.Ni.Ui(t,e,n).next((function(n){return r=n,o.xi.Gi(t,e)})).next((function(e){return i=e,o.zi(t,i,r).next((function(t){r=t;for(var e=0,n=i;e<n.length;e++)for(var o=n[e],s=0,a=o.mutations;s<a.length;s++){var u=a[s],c=u.key,h=r.get(c),f=nu(u,h,h,o.li);r=f instanceof mu?r.rt(c,f):r.remove(c)}}))})).next((function(){return r.forEach((function(t,n){Vu(e,n)||(r=r.remove(t))})),r}))},t.prototype.zi=function(t,e,n){for(var r=Is(),i=0,o=e;i<o.length;i++)for(var s=0,a=o[i].mutations;s<a.length;s++){var u=a[s];u instanceof au&&null===n.get(u.key)&&(r=r.add(u.key))}var c=n;return this.Ni.getEntries(t,r).next((function(t){return t.forEach((function(t,e){null!==e&&e instanceof mu&&(c=c.rt(t,e))})),c}))},t}(),Bc=function(){function t(t,e,n,r){this.targetId=t,this.fromCache=e,this.Hi=n,this.Ji=r}return t.Yi=function(e,n){for(var r=Is(),i=Is(),o=0,s=n.docChanges;o<s.length;o++){var a=s[o];switch(a.type){case 0:r=r.add(a.doc.key);break;case 1:i=i.add(a.doc.key)}}return new t(e,n.fromCache,r,i)},t}(),Fc=function(){function t(t,e){var n=this;this.previousValue=t,e&&(e.Xi=function(t){return n.Zi(t)},this.tr=function(t){return e.er(t)})}return t.prototype.Zi=function(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue},t.prototype.next=function(){var t=++this.previousValue;return this.tr&&this.tr(t),t},t}();function qc(t,e){var n=t[0],r=t[1],i=e[0],o=e[1],s=Do(n,i);return 0===s?Do(r,o):s}Fc.nr=-1;var Gc=function(){function t(t){this.sr=t,this.buffer=new ls(qc),this.ir=0}return t.prototype.rr=function(){return++this.ir},t.prototype.ar=function(t){var e=[t,this.rr()];if(this.buffer.size<this.sr)this.buffer=this.buffer.add(e);else{var n=this.buffer.last();qc(e,n)<0&&(this.buffer=this.buffer.delete(n).add(e))}},Object.defineProperty(t.prototype,"maxValue",{get:function(){return this.buffer.last()[0]},enumerable:!1,configurable:!0}),t}(),zc={cr:!1,ur:0,hr:0,lr:0},Kc=function(){function t(t,e,n){this._r=t,this.dr=e,this.wr=n}return t.Tr=function(e){return new t(e,t.Er,t.Ir)},t}();Kc.Er=10,Kc.Ir=1e3,Kc.mr=new Kc(41943040,Kc.Er,Kc.Ir),Kc.Ar=new Kc(-1,0,0);var Hc=function(){function t(t,e){this.Rr=t,this.rs=e,this.Pr=!1,this.gr=null}return t.prototype.start=function(t){-1!==this.Rr.params._r&&this.Vr(t)},t.prototype.stop=function(){this.gr&&(this.gr.cancel(),this.gr=null)},Object.defineProperty(t.prototype,"yr",{get:function(){return null!==this.gr},enumerable:!1,configurable:!0}),t.prototype.Vr=function(t){var e=this,n=this.Pr?3e5:6e4;Ao("LruGarbageCollector","Garbage collection scheduled in "+n+"ms"),this.gr=this.rs.Pn("lru_garbage_collection",n,(function(){return i(e,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:this.gr=null,this.Pr=!0,n.label=1;case 1:return n.trys.push([1,3,,7]),[4,t.pr(this.Rr)];case 2:return n.sent(),[3,7];case 3:return ac(e=n.sent())?(Ao("LruGarbageCollector","Ignoring IndexedDB error during garbage collection: ",e),[3,6]):[3,4];case 4:return[4,wf(e)];case 5:n.sent(),n.label=6;case 6:return[3,7];case 7:return[4,this.Vr(t)];case 8:return n.sent(),[2]}}))}))}))},t}(),Wc=function(){function t(t,e){this.vr=t,this.params=e}return t.prototype.br=function(t,e){return this.vr.Sr(t).next((function(t){return Math.floor(e/100*t)}))},t.prototype.Dr=function(t,e){var n=this;if(0===e)return rc.resolve(Fc.nr);var r=new Gc(e);return this.vr.De(t,(function(t){return r.ar(t.sequenceNumber)})).next((function(){return n.vr.Cr(t,(function(t){return r.ar(t)}))})).next((function(){return r.maxValue}))},t.prototype.Nr=function(t,e,n){return this.vr.Nr(t,e,n)},t.prototype.Fr=function(t,e){return this.vr.Fr(t,e)},t.prototype.Or=function(t,e){var n=this;return-1===this.params._r?(Ao("LruGarbageCollector","Garbage collection skipped; disabled"),rc.resolve(zc)):this.Mr(t).next((function(r){return r<n.params._r?(Ao("LruGarbageCollector","Garbage collection skipped; Cache size "+r+" is lower than threshold "+n.params._r),zc):n.kr(t,e)}))},t.prototype.Mr=function(t){return this.vr.Mr(t)},t.prototype.kr=function(t,e){var n,r,i,o,s,a,u,c=this,h=Date.now();return this.br(t,this.params.dr).next((function(e){return e>c.params.wr?(Ao("LruGarbageCollector","Capping sequence numbers to collect down to the maximum of "+c.params.wr+" from "+e),r=c.params.wr):r=e,o=Date.now(),c.Dr(t,r)})).next((function(r){return n=r,s=Date.now(),c.Nr(t,n,e)})).next((function(e){return i=e,a=Date.now(),c.Fr(t,n)})).next((function(t){return u=Date.now(),Eo()<=P.DEBUG&&Ao("LruGarbageCollector","LRU Garbage Collection\n\tCounted targets in "+(o-h)+"ms\n\tDetermined least recently used "+r+" in "+(s-o)+"ms\n\tRemoved "+i+" targets in "+(a-s)+"ms\n\tRemoved "+t+" documents in "+(u-a)+"ms\nTotal Duration: "+(u-h)+"ms"),rc.resolve({cr:!0,ur:r,hr:i,lr:t})}))},t}();function Xc(t){for(var e="",n=0;n<t.length;n++)e.length>0&&(e=Jc(e)),e=Yc(t.get(n),e);return Jc(e)}function Yc(t,e){for(var n=e,r=t.length,i=0;i<r;i++){var o=t.charAt(i);switch(o){case"\0":n+="";break;case"":n+="";break;default:n+=o}}return n}function Jc(t){return t+""}function Qc(t){var e=t.length;if(ko(e>=2),2===e)return ko(""===t.charAt(0)&&""===t.charAt(1)),zo.$();for(var n=e-2,r=[],i="",o=0;o<e;){var s=t.indexOf("",o);switch((s<0||s>n)&&No(),t.charAt(s+1)){case"":var a=t.substring(o,s),u=void 0;0===i.length?u=a:(u=i+=a,i=""),r.push(u);break;case"":i+=t.substring(o,s),i+="\0";break;case"":i+=t.substring(o,s+1);break;default:No()}o=s+2}return new zo(r)}var $c=function(t){this.$r=t};function Zc(t,e){if(e.document)return function(t,e,n){var r=va(t,e.name),i=fa(e.updateTime),o=new du({mapValue:{fields:e.fields}});return new mu(r,i,o,{hasCommittedMutations:!!n})}(t.$r,e.document,!!e.hasCommittedMutations);if(e.noDocument){var n=Wo.H(e.noDocument.path),r=ih(e.noDocument.readTime);return new bu(n,r,{hasCommittedMutations:!!e.hasCommittedMutations})}if(e.unknownDocument){var i=Wo.H(e.unknownDocument.path),o=ih(e.unknownDocument.version);return new wu(i,o)}return No()}function th(t,e,n){var r=eh(n),i=e.key.path.S().O();if(e instanceof mu){var o=function(t,e){return{name:da(t,e.key),fields:e.sn().mapValue.fields,updateTime:ua(t,e.version.P())}}(t.$r,e),s=e.hasCommittedMutations;return new Oh(null,null,o,s,r,i)}if(e instanceof bu){var a=e.key.path.O(),u=rh(e.version),c=e.hasCommittedMutations;return new Oh(null,new Ch(a,u),null,c,r,i)}if(e instanceof wu){var h=e.key.path.O(),f=rh(e.version);return new Oh(new xh(h,f),null,null,!0,r,i)}return No()}function eh(t){var e=t.P();return[e.seconds,e.nanoseconds]}function nh(t){var e=new Fo(t[0],t[1]);return qo.m(e)}function rh(t){var e=t.P();return new _h(e.seconds,e.nanoseconds)}function ih(t){var e=new Fo(t.seconds,t.nanoseconds);return qo.m(e)}function oh(t,e){var n=(e.baseMutations||[]).map((function(e){return Ea(t.$r,e)})),r=e.mutations.map((function(e){return Ea(t.$r,e)})),i=Fo.fromMillis(e.localWriteTimeMs);return new Dc(e.batchId,i,n,r)}function sh(t){var e,n,r=ih(t.readTime),i=void 0!==t.lastLimboFreeSnapshotVersion?ih(t.lastLimboFreeSnapshotVersion):qo.min();return void 0!==t.query.documents?(ko(1===(n=t.query).documents.length),e=xu(Au(ga(n.documents[0])))):e=function(t){return xu(Ta(t))}(t.query),new os(e,t.targetId,0,t.lastListenSequenceNumber,r,i,ns.fromBase64String(t.resumeToken))}function ah(t,e){var n,r=rh(e.et),i=rh(e.lastLimboFreeSnapshotVersion);n=es(e.target)?Aa(t.$r,e.target):_a(t.$r,e.target);var o=e.resumeToken.toBase64();return new Ph(e.targetId,Zo(e.target),r,o,e.sequenceNumber,i,n)}function uh(t){var e=Ta({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?Ou(e,e.limit,"L"):e}var ch=function(){function t(t,e,n,r){this.userId=t,this.serializer=e,this.Fi=n,this.Lr=r,this.Br={}}return t.qr=function(e,n,r,i){return ko(""!==e.uid),new t(e.Js()?e.uid:"",n,r,i)},t.prototype.Ur=function(t){var e=!0,n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return lh(t).ns({index:Nh.userMutationsIndex,range:n},(function(t,n,r){e=!1,r.done()})).next((function(){return e}))},t.prototype.Qr=function(t,e,n,r){var i=this,o=ph(t),s=lh(t);return s.add({}).next((function(a){ko("number"==typeof a);for(var u=new Dc(a,e,n,r),c=function(t,e,n){var r=n.baseMutations.map((function(e){return Ia(t.$r,e)})),i=n.mutations.map((function(e){return Ia(t.$r,e)}));return new Nh(e,n.batchId,n.li.toMillis(),r,i)}(i.serializer,i.userId,u),h=[],f=new ls((function(t,e){return Do(t.M(),e.M())})),l=0,p=r;l<p.length;l++){var d=p[l],v=kh.key(i.userId,d.key.path,a);f=f.add(d.key.path.S()),h.push(s.put(c)),h.push(o.put(v,kh.PLACEHOLDER))}return f.forEach((function(e){h.push(i.Fi.Kr(t,e))})),t.Di((function(){i.Br[a]=u.keys()})),rc.xn(h).next((function(){return u}))}))},t.prototype.Wr=function(t,e){var n=this;return lh(t).get(e).next((function(t){return t?(ko(t.userId===n.userId),oh(n.serializer,t)):null}))},t.prototype.jr=function(t,e){var n=this;return this.Br[e]?rc.resolve(this.Br[e]):this.Wr(t,e).next((function(t){if(t){var r=t.keys();return n.Br[e]=r,r}return null}))},t.prototype.Gr=function(t,e){var n=this,r=e+1,i=IDBKeyRange.lowerBound([this.userId,r]),o=null;return lh(t).ns({index:Nh.userMutationsIndex,range:i},(function(t,e,i){e.userId===n.userId&&(ko(e.batchId>=r),o=oh(n.serializer,e)),i.done()})).next((function(){return o}))},t.prototype.zr=function(t){var e=IDBKeyRange.upperBound([this.userId,Number.POSITIVE_INFINITY]),n=-1;return lh(t).ns({index:Nh.userMutationsIndex,range:e,reverse:!0},(function(t,e,r){n=e.batchId,r.done()})).next((function(){return n}))},t.prototype.Hr=function(t){var e=this,n=IDBKeyRange.bound([this.userId,-1],[this.userId,Number.POSITIVE_INFINITY]);return lh(t).Xn(Nh.userMutationsIndex,n).next((function(t){return t.map((function(t){return oh(e.serializer,t)}))}))},t.prototype.Mi=function(t,e){var n=this,r=kh.prefixForPath(this.userId,e.path),i=IDBKeyRange.lowerBound(r),o=[];return ph(t).ns({range:i},(function(r,i,s){var a=r[0],u=r[1],c=r[2],h=Qc(u);if(a===n.userId&&e.path.isEqual(h))return lh(t).get(c).next((function(t){if(!t)throw No();ko(t.userId===n.userId),o.push(oh(n.serializer,t))}));s.done()})).next((function(){return o}))},t.prototype.qi=function(t,e){var n=this,r=new ls(Do),i=[];return e.forEach((function(e){var o=kh.prefixForPath(n.userId,e.path),s=IDBKeyRange.lowerBound(o),a=ph(t).ns({range:s},(function(t,i,o){var s=t[0],a=t[1],u=t[2],c=Qc(a);s===n.userId&&e.path.isEqual(c)?r=r.add(u):o.done()}));i.push(a)})),rc.xn(i).next((function(){return n.Jr(t,r)}))},t.prototype.Gi=function(t,e){var n=this,r=e.path,i=r.length+1,o=kh.prefixForPath(this.userId,r),s=IDBKeyRange.lowerBound(o),a=new ls(Do);return ph(t).ns({range:s},(function(t,e,o){var s=t[0],u=t[1],c=t[2],h=Qc(u);s===n.userId&&r.N(h)?h.length===i&&(a=a.add(c)):o.done()})).next((function(){return n.Jr(t,a)}))},t.prototype.Jr=function(t,e){var n=this,r=[],i=[];return e.forEach((function(e){i.push(lh(t).get(e).next((function(t){if(null===t)throw No();ko(t.userId===n.userId),r.push(oh(n.serializer,t))})))})),rc.xn(i).next((function(){return r}))},t.prototype.Yr=function(t,e){var n=this;return fh(t.Xr,this.userId,e).next((function(r){return t.Di((function(){n.Zr(e.batchId)})),rc.forEach(r,(function(e){return n.Lr.eo(t,e)}))}))},t.prototype.Zr=function(t){delete this.Br[t]},t.prototype.no=function(t){var e=this;return this.Ur(t).next((function(n){if(!n)return rc.resolve();var r=IDBKeyRange.lowerBound(kh.prefixForUser(e.userId)),i=[];return ph(t).ns({range:r},(function(t,n,r){if(t[0]===e.userId){var o=Qc(t[1]);i.push(o)}else r.done()})).next((function(){ko(0===i.length)}))}))},t.prototype.so=function(t,e){return hh(t,this.userId,e)},t.prototype.io=function(t){var e=this;return dh(t).get(this.userId).next((function(t){return t||new Sh(e.userId,-1,"")}))},t}();function hh(t,e,n){var r=kh.prefixForPath(e,n.path),i=r[1],o=IDBKeyRange.lowerBound(r),s=!1;return ph(t).ns({range:o,es:!0},(function(t,n,r){var o=t[0],a=t[1];t[2],o===e&&a===i&&(s=!0),r.done()})).next((function(){return s}))}function fh(t,e,n){var r=t.store(Nh.store),i=t.store(kh.store),o=[],s=IDBKeyRange.only(n.batchId),a=0,u=r.ns({range:s},(function(t,e,n){return a++,n.delete()}));o.push(u.next((function(){ko(1===a)})));for(var c=[],h=0,f=n.mutations;h<f.length;h++){var l=f[h],p=kh.key(e,l.key.path,n.batchId);o.push(i.delete(p)),c.push(l.key)}return rc.xn(o).next((function(){return c}))}function lh(t){return tf.qn(t,Nh.store)}function ph(t){return tf.qn(t,kh.store)}function dh(t){return tf.qn(t,Sh.store)}var vh=function(){function t(t,e){this.serializer=t,this.Fi=e}return t.prototype.Ri=function(t,e,n){return mh(t).put(bh(e),n)},t.prototype.Vi=function(t,e){var n=mh(t),r=bh(e);return n.delete(r)},t.prototype.updateMetadata=function(t,e){var n=this;return this.getMetadata(t).next((function(r){return r.byteSize+=e,n.ro(t,r)}))},t.prototype.yi=function(t,e){var n=this;return mh(t).get(bh(e)).next((function(t){return n.oo(t)}))},t.prototype.ao=function(t,e){var n=this;return mh(t).get(bh(e)).next((function(t){var e=n.oo(t);return e?{gi:e,size:wh(t)}:null}))},t.prototype.getEntries=function(t,e){var n=this,r=ys();return this.co(t,e,(function(t,e){var i=n.oo(e);r=r.rt(t,i)})).next((function(){return r}))},t.prototype.uo=function(t,e){var n=this,r=ys(),i=new cs(Wo.V);return this.co(t,e,(function(t,e){var o=n.oo(e);o?(r=r.rt(t,o),i=i.rt(t,wh(e))):(r=r.rt(t,null),i=i.rt(t,0))})).next((function(){return{ho:r,lo:i}}))},t.prototype.co=function(t,e,n){if(e.T())return rc.resolve();var r=IDBKeyRange.bound(e.first().path.O(),e.last().path.O()),i=e.lt(),o=i.Et();return mh(t).ns({range:r},(function(t,e,r){for(var s=Wo.H(t);o&&Wo.V(o,s)<0;)n(o,null),o=i.Et();o&&o.isEqual(s)&&(n(o,e),o=i.It()?i.Et():null),o?r.Jn(o.path.O()):r.done()})).next((function(){for(;o;)n(o,null),o=i.It()?i.Et():null}))},t.prototype.Ui=function(t,e,n){var r=this,i=ms(),o=e.path.length+1,s={};if(n.isEqual(qo.min())){var a=e.path.O();s.range=IDBKeyRange.lowerBound(a)}else{var u=e.path.O(),c=eh(n);s.range=IDBKeyRange.lowerBound([u,c],!0),s.index=Oh.collectionReadTimeIndex}return mh(t).ns(s,(function(t,n,s){if(t.length===o){var a=Zc(r.serializer,n);e.path.N(a.key.path)?a instanceof mu&&Vu(e,a)&&(i=i.rt(a.key,a)):s.done()}})).next((function(){return i}))},t.prototype._o=function(t){return new yh(this,!!t&&t.fo)},t.prototype.wo=function(t){return this.getMetadata(t).next((function(t){return t.byteSize}))},t.prototype.getMetadata=function(t){return gh(t).get(Dh.key).next((function(t){return ko(!!t),t}))},t.prototype.ro=function(t,e){return gh(t).put(Dh.key,e)},t.prototype.oo=function(t){if(t){var e=Zc(this.serializer,t);return e instanceof bu&&e.version.isEqual(qo.min())?null:e}return null},t}(),yh=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).To=e,r.fo=n,r.Eo=new jo((function(t){return t.toString()}),(function(t,e){return t.isEqual(e)})),r}return e(n,t),n.prototype.bi=function(t){var e=this,n=[],r=0,i=new ls((function(t,e){return Do(t.M(),e.M())}));return this.Ii.forEach((function(o,s){var a=e.Eo.get(o);if(s.gi){var u=th(e.To.serializer,s.gi,e.Ai(o));i=i.add(o.path.S());var c=wh(u);r+=c-a,n.push(e.To.Ri(t,o,u))}else if(r-=a,e.fo){var h=th(e.To.serializer,new bu(o,qo.min()),e.Ai(o));n.push(e.To.Ri(t,o,h))}else n.push(e.To.Vi(t,o))})),i.forEach((function(r){n.push(e.To.Fi.Kr(t,r))})),n.push(this.To.updateMetadata(t,r)),rc.xn(n)},n.prototype.pi=function(t,e){var n=this;return this.To.ao(t,e).next((function(t){return null===t?(n.Eo.set(e,0),null):(n.Eo.set(e,t.size),t.gi)}))},n.prototype.vi=function(t,e){var n=this;return this.To.uo(t,e).next((function(t){var e=t.ho;return t.lo.forEach((function(t,e){n.Eo.set(t,e)})),e}))},n}(Rc);function gh(t){return tf.qn(t,Dh.store)}function mh(t){return tf.qn(t,Oh.store)}function bh(t){return t.path.O()}function wh(t){var e;if(t.document)e=t.document;else if(t.unknownDocument)e=t.unknownDocument;else{if(!t.noDocument)throw No();e=t.noDocument}return JSON.stringify(e).length}var Ih=function(){function t(){this.Io=new Eh}return t.prototype.Kr=function(t,e){return this.Io.add(e),rc.resolve()},t.prototype.ji=function(t,e){return rc.resolve(this.Io.getEntries(e))},t}(),Eh=function(){function t(){this.index={}}return t.prototype.add=function(t){var e=t.C(),n=t.S(),r=this.index[e]||new ls(zo.V),i=!r.has(n);return this.index[e]=r.add(n),i},t.prototype.has=function(t){var e=t.C(),n=t.S(),r=this.index[e];return r&&r.has(n)},t.prototype.getEntries=function(t){return(this.index[t]||new ls(zo.V)).O()},t}(),Ah=function(){function t(t){this.serializer=t}return t.prototype.createOrUpgrade=function(t,e,n,r){var i=this;ko(n<r&&n>=0&&r<=11);var o=new uc("createOrUpgrade",e);n<1&&r>=1&&(function(t){t.createObjectStore(Th.store)}(t),function(t){t.createObjectStore(Sh.store,{keyPath:Sh.keyPath}),t.createObjectStore(Nh.store,{keyPath:Nh.keyPath,autoIncrement:!0}).createIndex(Nh.userMutationsIndex,Nh.userMutationsKeyPath,{unique:!0}),t.createObjectStore(kh.store)}(t),Vh(t),function(t){t.createObjectStore(Oh.store)}(t));var s=rc.resolve();return n<3&&r>=3&&(0!==n&&(function(t){t.deleteObjectStore(Rh.store),t.deleteObjectStore(Ph.store),t.deleteObjectStore(Lh.store)}(t),Vh(t)),s=s.next((function(){return function(t){var e=t.store(Lh.store),n=new Lh(0,0,qo.min().P(),0);return e.put(Lh.key,n)}(o)}))),n<4&&r>=4&&(0!==n&&(s=s.next((function(){return function(t,e){return e.store(Nh.store).Xn().next((function(n){t.deleteObjectStore(Nh.store),t.createObjectStore(Nh.store,{keyPath:Nh.keyPath,autoIncrement:!0}).createIndex(Nh.userMutationsIndex,Nh.userMutationsKeyPath,{unique:!0});var r=e.store(Nh.store),i=n.map((function(t){return r.put(t)}));return rc.xn(i)}))}(t,o)}))),s=s.next((function(){!function(t){t.createObjectStore(jh.store,{keyPath:jh.keyPath})}(t)}))),n<5&&r>=5&&(s=s.next((function(){return i.removeAcknowledgedMutations(o)}))),n<6&&r>=6&&(s=s.next((function(){return function(t){t.createObjectStore(Dh.store)}(t),i.addDocumentGlobal(o)}))),n<7&&r>=7&&(s=s.next((function(){return i.ensureSequenceNumbers(o)}))),n<8&&r>=8&&(s=s.next((function(){return i.createCollectionParentIndex(t,o)}))),n<9&&r>=9&&(s=s.next((function(){!function(t){t.objectStoreNames.contains("remoteDocumentChanges")&&t.deleteObjectStore("remoteDocumentChanges")}(t),function(t){var e=t.objectStore(Oh.store);e.createIndex(Oh.readTimeIndex,Oh.readTimeIndexPath,{unique:!1}),e.createIndex(Oh.collectionReadTimeIndex,Oh.collectionReadTimeIndexPath,{unique:!1})}(e)}))),n<10&&r>=10&&(s=s.next((function(){return i.rewriteCanonicalIds(o)}))),n<11&&r>=11&&(s=s.next((function(){!function(t){t.createObjectStore(Uh.store,{keyPath:Uh.keyPath})}(t),function(t){t.createObjectStore(Bh.store,{keyPath:Bh.keyPath})}(t)}))),s},t.prototype.addDocumentGlobal=function(t){var e=0;return t.store(Oh.store).ns((function(t,n){e+=wh(n)})).next((function(){var n=new Dh(e);return t.store(Dh.store).put(Dh.key,n)}))},t.prototype.removeAcknowledgedMutations=function(t){var e=this,n=t.store(Sh.store),r=t.store(Nh.store);return n.Xn().next((function(n){return rc.forEach(n,(function(n){var i=IDBKeyRange.bound([n.userId,-1],[n.userId,n.lastAcknowledgedBatchId]);return r.Xn(Nh.userMutationsIndex,i).next((function(r){return rc.forEach(r,(function(r){ko(r.userId===n.userId);var i=oh(e.serializer,r);return fh(t,n.userId,i).next((function(){}))}))}))}))}))},t.prototype.ensureSequenceNumbers=function(t){var e=t.store(Rh.store),n=t.store(Oh.store);return t.store(Lh.store).get(Lh.key).next((function(t){var r=[];return n.ns((function(n,i){var o=new zo(n),s=function(t){return[0,Xc(t)]}(o);r.push(e.get(s).next((function(n){return n?rc.resolve():function(n){return e.put(new Rh(0,Xc(n),t.highestListenSequenceNumber))}(o)})))})).next((function(){return rc.xn(r)}))}))},t.prototype.createCollectionParentIndex=function(t,e){t.createObjectStore(Mh.store,{keyPath:Mh.keyPath});var n=e.store(Mh.store),r=new Eh,i=function(t){if(r.add(t)){var e=t.C(),i=t.S();return n.put({collectionId:e,parent:Xc(i)})}};return e.store(Oh.store).ns({es:!0},(function(t,e){var n=new zo(t);return i(n.S())})).next((function(){return e.store(kh.store).ns({es:!0},(function(t,e){t[0];var n=t[1],r=(t[2],Qc(n));return i(r.S())}))}))},t.prototype.rewriteCanonicalIds=function(t){var e=this,n=t.store(Ph.store);return n.ns((function(t,r){var i=sh(r),o=ah(e.serializer,i);return n.put(o)}))},t}(),_h=function(t,e){this.seconds=t,this.nanoseconds=e},Th=function(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n};Th.store="owner",Th.key="owner";var Sh=function(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n};Sh.store="mutationQueues",Sh.keyPath="userId";var Nh=function(t,e,n,r,i){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=r,this.mutations=i};Nh.store="mutations",Nh.keyPath="batchId",Nh.userMutationsIndex="userMutationsIndex",Nh.userMutationsKeyPath=["userId","batchId"];var kh=function(){function t(){}return t.prefixForUser=function(t){return[t]},t.prefixForPath=function(t,e){return[t,Xc(e)]},t.key=function(t,e,n){return[t,Xc(e),n]},t}();kh.store="documentMutations",kh.PLACEHOLDER=new kh;var Ch=function(t,e){this.path=t,this.readTime=e},xh=function(t,e){this.path=t,this.version=e},Oh=function(t,e,n,r,i,o){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r,this.readTime=i,this.parentPath=o};Oh.store="remoteDocuments",Oh.readTimeIndex="readTimeIndex",Oh.readTimeIndexPath="readTime",Oh.collectionReadTimeIndex="collectionReadTimeIndex",Oh.collectionReadTimeIndexPath=["parentPath","readTime"];var Dh=function(t){this.byteSize=t};Dh.store="remoteDocumentGlobal",Dh.key="remoteDocumentGlobalKey";var Ph=function(t,e,n,r,i,o,s){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=o,this.query=s};Ph.store="targets",Ph.keyPath="targetId",Ph.queryTargetsIndexName="queryTargetsIndex",Ph.queryTargetsKeyPath=["canonicalId","targetId"];var Rh=function(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n};Rh.store="targetDocuments",Rh.keyPath=["targetId","path"],Rh.documentTargetsIndex="documentTargetsIndex",Rh.documentTargetsKeyPath=["path","targetId"];var Lh=function(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r};Lh.key="targetGlobalKey",Lh.store="targetGlobal";var Mh=function(t,e){this.collectionId=t,this.parent=e};function Vh(t){t.createObjectStore(Rh.store,{keyPath:Rh.keyPath}).createIndex(Rh.documentTargetsIndex,Rh.documentTargetsKeyPath,{unique:!0}),t.createObjectStore(Ph.store,{keyPath:Ph.keyPath}).createIndex(Ph.queryTargetsIndexName,Ph.queryTargetsKeyPath,{unique:!0}),t.createObjectStore(Lh.store)}Mh.store="collectionParents",Mh.keyPath=["collectionId","parent"];var jh=function(t,e,n,r){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r};jh.store="clientMetadata",jh.keyPath="clientId";var Uh=function(t,e,n){this.bundleId=t,this.createTime=e,this.version=n};Uh.store="bundles",Uh.keyPath="bundleId";var Bh=function(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n};Bh.store="namedQueries",Bh.keyPath="name";var Fh=c(c(c(c([Sh.store,Nh.store,kh.store,Oh.store,Ph.store,Th.store,Lh.store,Rh.store],[jh.store]),[Dh.store]),[Mh.store]),[Uh.store,Bh.store]),qh=function(){function t(t){this.serializer=t}return t.prototype.mo=function(t,e){return Gh(t).get(e).next((function(t){if(t)return{id:(e=t).bundleId,createTime:ih(e.createTime),version:e.version};var e}))},t.prototype.Ao=function(t,e){return Gh(t).put({bundleId:(n=e).id,createTime:rh(fa(n.createTime)),version:n.version});var n},t.prototype.Ro=function(t,e){return zh(t).get(e).next((function(t){if(t)return{name:(e=t).name,query:uh(e.bundledQuery),readTime:ih(e.readTime)};var e}))},t.prototype.Po=function(t,e){return zh(t).put(function(t){return{name:t.name,readTime:rh(fa(t.readTime)),bundledQuery:t.bundledQuery}}(e))},t}();function Gh(t){return tf.qn(t,Uh.store)}function zh(t){return tf.qn(t,Bh.store)}var Kh=function(){function t(){this.Vo=new Eh}return t.prototype.Kr=function(t,e){var n=this;if(!this.Vo.has(e)){var r=e.C(),i=e.S();t.Di((function(){n.Vo.add(e)}));var o={collectionId:r,parent:Xc(i)};return Hh(t).put(o)}return rc.resolve()},t.prototype.ji=function(t,e){var n=[],r=IDBKeyRange.bound([e,""],[Ro(e),""],!1,!0);return Hh(t).Xn(r).next((function(t){for(var r=0,i=t;r<i.length;r++){var o=i[r];if(o.collectionId!==e)break;n.push(Qc(o.parent))}return n}))},t}();function Hh(t){return tf.qn(t,Mh.store)}var Wh=function(){function t(t){this.yo=t}return t.prototype.next=function(){return this.yo+=2,this.yo},t.po=function(){return new t(0)},t.vo=function(){return new t(-1)},t}(),Xh=function(){function t(t,e){this.Lr=t,this.serializer=e}return t.prototype.bo=function(t){var e=this;return this.So(t).next((function(n){var r=new Wh(n.highestTargetId);return n.highestTargetId=r.next(),e.Do(t,n).next((function(){return n.highestTargetId}))}))},t.prototype.Co=function(t){return this.So(t).next((function(t){return qo.m(new Fo(t.lastRemoteSnapshotVersion.seconds,t.lastRemoteSnapshotVersion.nanoseconds))}))},t.prototype.No=function(t){return this.So(t).next((function(t){return t.highestListenSequenceNumber}))},t.prototype.xo=function(t,e,n){var r=this;return this.So(t).next((function(i){return i.highestListenSequenceNumber=e,n&&(i.lastRemoteSnapshotVersion=n.P()),e>i.highestListenSequenceNumber&&(i.highestListenSequenceNumber=e),r.Do(t,i)}))},t.prototype.Fo=function(t,e){var n=this;return this.Oo(t,e).next((function(){return n.So(t).next((function(r){return r.targetCount+=1,n.Mo(e,r),n.Do(t,r)}))}))},t.prototype.ko=function(t,e){return this.Oo(t,e)},t.prototype.$o=function(t,e){var n=this;return this.Lo(t,e.targetId).next((function(){return Yh(t).delete(e.targetId)})).next((function(){return n.So(t)})).next((function(e){return ko(e.targetCount>0),e.targetCount-=1,n.Do(t,e)}))},t.prototype.Nr=function(t,e,n){var r=this,i=0,o=[];return Yh(t).ns((function(s,a){var u=sh(a);u.sequenceNumber<=e&&null===n.get(u.targetId)&&(i++,o.push(r.$o(t,u)))})).next((function(){return rc.xn(o)})).next((function(){return i}))},t.prototype.De=function(t,e){return Yh(t).ns((function(t,n){var r=sh(n);e(r)}))},t.prototype.So=function(t){return Jh(t).get(Lh.key).next((function(t){return ko(null!==t),t}))},t.prototype.Do=function(t,e){return Jh(t).put(Lh.key,e)},t.prototype.Oo=function(t,e){return Yh(t).put(ah(this.serializer,e))},t.prototype.Mo=function(t,e){var n=!1;return t.targetId>e.highestTargetId&&(e.highestTargetId=t.targetId,n=!0),t.sequenceNumber>e.highestListenSequenceNumber&&(e.highestListenSequenceNumber=t.sequenceNumber,n=!0),n},t.prototype.Bo=function(t){return this.So(t).next((function(t){return t.targetCount}))},t.prototype.qo=function(t,e){var n=Zo(e),r=IDBKeyRange.bound([n,Number.NEGATIVE_INFINITY],[n,Number.POSITIVE_INFINITY]),i=null;return Yh(t).ns({range:r,index:Ph.queryTargetsIndexName},(function(t,n,r){var o=sh(n);ts(e,o.target)&&(i=o,r.done())})).next((function(){return i}))},t.prototype.Uo=function(t,e,n){var r=this,i=[],o=Qh(t);return e.forEach((function(e){var s=Xc(e.path);i.push(o.put(new Rh(n,s))),i.push(r.Lr.Qo(t,n,e))})),rc.xn(i)},t.prototype.Ko=function(t,e,n){var r=this,i=Qh(t);return rc.forEach(e,(function(e){var o=Xc(e.path);return rc.xn([i.delete([n,o]),r.Lr.Wo(t,n,e)])}))},t.prototype.Lo=function(t,e){var n=Qh(t),r=IDBKeyRange.bound([e],[e+1],!1,!0);return n.delete(r)},t.prototype.jo=function(t,e){var n=IDBKeyRange.bound([e],[e+1],!1,!0),r=Qh(t),i=Is();return r.ns({range:n,es:!0},(function(t,e,n){var r=Qc(t[1]),o=new Wo(r);i=i.add(o)})).next((function(){return i}))},t.prototype.so=function(t,e){var n=Xc(e.path),r=IDBKeyRange.bound([n],[Ro(n)],!1,!0),i=0;return Qh(t).ns({index:Rh.documentTargetsIndex,es:!0,range:r},(function(t,e,n){var r=t[0];t[1],0!==r&&(i++,n.done())})).next((function(){return i>0}))},t.prototype.qe=function(t,e){return Yh(t).get(e).next((function(t){return t?sh(t):null}))},t}();function Yh(t){return tf.qn(t,Ph.store)}function Jh(t){return tf.qn(t,Lh.store)}function Qh(t){return tf.qn(t,Rh.store)}var $h="Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.",Zh=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).Xr=e,r.Go=n,r}return e(n,t),n}(jc),tf=function(){function t(e,n,r,i,o,s,a,u,c,h){if(this.allowTabSynchronization=e,this.persistenceKey=n,this.clientId=r,this.ln=o,this.window=s,this.document=a,this.zo=c,this.Ho=h,this.Jo=null,this.Yo=!1,this.isPrimary=!1,this.networkEnabled=!0,this.Xo=null,this.inForeground=!1,this.Zo=null,this.ta=null,this.ea=Number.NEGATIVE_INFINITY,this.na=function(t){return Promise.resolve()},!t.kn())throw new Bo(Uo.UNIMPLEMENTED,"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");this.Lr=new rf(this,i),this.sa=n+"main",this.serializer=new $c(u),this.ia=new ic(this.sa,11,new Ah(this.serializer)),this.ra=new Xh(this.Lr,this.serializer),this.Fi=new Kh,this.Ni=function(t,e){return new vh(t,e)}(this.serializer,this.Fi),this.oa=new qh(this.serializer),this.window&&this.window.localStorage?this.aa=this.window.localStorage:(this.aa=null,!1===h&&_o("IndexedDbPersistence","LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."))}return t.qn=function(t,e){if(t instanceof Zh)return ic.qn(t.Xr,e);throw No()},t.prototype.start=function(){var t=this;return this.ca().then((function(){if(!t.isPrimary&&!t.allowTabSynchronization)throw new Bo(Uo.FAILED_PRECONDITION,$h);return t.ua(),t.ha(),t.la(),t.runTransaction("getHighestListenSequenceNumber","readonly",(function(e){return t.ra.No(e)}))})).then((function(e){t.Jo=new Fc(e,t.zo)})).then((function(){t.Yo=!0})).catch((function(e){return t.ia&&t.ia.close(),Promise.reject(e)}))},t.prototype._a=function(t){var e=this;return this.na=function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){return this.yr?[2,t(n)]:[2]}))}))},t(this.isPrimary)},t.prototype.fa=function(t){var e=this;this.ia.Kn((function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return null===n.newVersion?[4,t()]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))}))}))},t.prototype.da=function(t){var e=this;this.networkEnabled!==t&&(this.networkEnabled=t,this.ln.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return this.yr?[4,this.ca()]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))})))},t.prototype.ca=function(){var t=this;return this.runTransaction("updateClientMetadataAndTryBecomePrimary","readwrite",(function(e){return nf(e).put(new jh(t.clientId,Date.now(),t.networkEnabled,t.inForeground)).next((function(){if(t.isPrimary)return t.wa(e).next((function(e){e||(t.isPrimary=!1,t.ln.Ss((function(){return t.na(!1)})))}))})).next((function(){return t.Ta(e)})).next((function(n){return t.isPrimary&&!n?t.Ea(e).next((function(){return!1})):!!n&&t.Ia(e).next((function(){return!0}))}))})).catch((function(e){if(ac(e))return Ao("IndexedDbPersistence","Failed to extend owner lease: ",e),t.isPrimary;if(!t.allowTabSynchronization)throw e;return Ao("IndexedDbPersistence","Releasing owner lease after error during lease refresh",e),!1})).then((function(e){t.isPrimary!==e&&t.ln.Ss((function(){return t.na(e)})),t.isPrimary=e}))},t.prototype.wa=function(t){var e=this;return ef(t).get(Th.key).next((function(t){return rc.resolve(e.ma(t))}))},t.prototype.Aa=function(t){return nf(t).delete(this.clientId)},t.prototype.Ra=function(){return i(this,void 0,void 0,(function(){var e,n,r,i,s=this;return o(this,(function(o){switch(o.label){case 0:return!this.isPrimary||this.Pa(this.ea,18e5)?[3,2]:(this.ea=Date.now(),[4,this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",(function(e){var n=t.qn(e,jh.store);return n.Xn().next((function(t){var e=s.ga(t,18e5),r=t.filter((function(t){return-1===e.indexOf(t)}));return rc.forEach(r,(function(t){return n.delete(t.clientId)})).next((function(){return r}))}))})).catch((function(){return[]}))]);case 1:if(e=o.sent(),this.aa)for(n=0,r=e;n<r.length;n++)i=r[n],this.aa.removeItem(this.Va(i.clientId));o.label=2;case 2:return[2]}}))}))},t.prototype.la=function(){var t=this;this.ta=this.ln.Pn("client_metadata_refresh",4e3,(function(){return t.ca().then((function(){return t.Ra()})).then((function(){return t.la()}))}))},t.prototype.ma=function(t){return!!t&&t.ownerId===this.clientId},t.prototype.Ta=function(t){var e=this;return this.Ho?rc.resolve(!0):ef(t).get(Th.key).next((function(n){if(null!==n&&e.Pa(n.leaseTimestampMs,5e3)&&!e.ya(n.ownerId)){if(e.ma(n)&&e.networkEnabled)return!0;if(!e.ma(n)){if(!n.allowTabSynchronization)throw new Bo(Uo.FAILED_PRECONDITION,$h);return!1}}return!(!e.networkEnabled||!e.inForeground)||nf(t).Xn().next((function(t){return void 0===e.ga(t,5e3).find((function(t){if(e.clientId!==t.clientId){var n=!e.networkEnabled&&t.networkEnabled,r=!e.inForeground&&t.inForeground,i=e.networkEnabled===t.networkEnabled;if(n||r&&i)return!0}return!1}))}))})).next((function(t){return e.isPrimary!==t&&Ao("IndexedDbPersistence","Client "+(t?"is":"is not")+" eligible for a primary lease."),t}))},t.prototype.pa=function(){return i(this,void 0,void 0,(function(){var t=this;return o(this,(function(e){switch(e.label){case 0:return this.Yo=!1,this.va(),this.ta&&(this.ta.cancel(),this.ta=null),this.ba(),this.Sa(),[4,this.ia.runTransaction("shutdown","readwrite",[Th.store,jh.store],(function(e){var n=new Zh(e,Fc.nr);return t.Ea(n).next((function(){return t.Aa(n)}))}))];case 1:return e.sent(),this.ia.close(),this.Da(),[2]}}))}))},t.prototype.ga=function(t,e){var n=this;return t.filter((function(t){return n.Pa(t.updateTimeMs,e)&&!n.ya(t.clientId)}))},t.prototype.Ca=function(){var t=this;return this.runTransaction("getActiveClients","readonly",(function(e){return nf(e).Xn().next((function(e){return t.ga(e,18e5).map((function(t){return t.clientId}))}))}))},Object.defineProperty(t.prototype,"yr",{get:function(){return this.Yo},enumerable:!1,configurable:!0}),t.prototype.Na=function(t){return ch.qr(t,this.serializer,this.Fi,this.Lr)},t.prototype.xa=function(){return this.ra},t.prototype.Fa=function(){return this.Ni},t.prototype.Oa=function(){return this.Fi},t.prototype.Ma=function(){return this.oa},t.prototype.runTransaction=function(t,e,n){var r=this;Ao("IndexedDbPersistence","Starting transaction:",t);var i,o="readonly"===e?"readonly":"readwrite";return this.ia.runTransaction(t,o,Fh,(function(o){return i=new Zh(o,r.Jo?r.Jo.next():Fc.nr),"readwrite-primary"===e?r.wa(i).next((function(t){return!!t||r.Ta(i)})).next((function(e){if(!e)throw _o("Failed to obtain primary lease for action '"+t+"'."),r.isPrimary=!1,r.ln.Ss((function(){return r.na(!1)})),new Bo(Uo.FAILED_PRECONDITION,Vc);return n(i)})).next((function(t){return r.Ia(i).next((function(){return t}))})):r.ka(i).next((function(){return n(i)}))})).then((function(t){return i.Ci(),t}))},t.prototype.ka=function(t){var e=this;return ef(t).get(Th.key).next((function(t){if(null!==t&&e.Pa(t.leaseTimestampMs,5e3)&&!e.ya(t.ownerId)&&!e.ma(t)&&!(e.Ho||e.allowTabSynchronization&&t.allowTabSynchronization))throw new Bo(Uo.FAILED_PRECONDITION,$h)}))},t.prototype.Ia=function(t){var e=new Th(this.clientId,this.allowTabSynchronization,Date.now());return ef(t).put(Th.key,e)},t.kn=function(){return ic.kn()},t.prototype.Ea=function(t){var e=this,n=ef(t);return n.get(Th.key).next((function(t){return e.ma(t)?(Ao("IndexedDbPersistence","Releasing primary lease."),n.delete(Th.key)):rc.resolve()}))},t.prototype.Pa=function(t,e){var n=Date.now();return!(t<n-e||t>n&&(_o("Detected an update time that is in the future: "+t+" > "+n),1))},t.prototype.ua=function(){var t=this;null!==this.document&&"function"==typeof this.document.addEventListener&&(this.Zo=function(){t.ln.fs((function(){return t.inForeground="visible"===t.document.visibilityState,t.ca()}))},this.document.addEventListener("visibilitychange",this.Zo),this.inForeground="visible"===this.document.visibilityState)},t.prototype.ba=function(){this.Zo&&(this.document.removeEventListener("visibilitychange",this.Zo),this.Zo=null)},t.prototype.ha=function(){var t,e=this;"function"==typeof(null===(t=this.window)||void 0===t?void 0:t.addEventListener)&&(this.Xo=function(){e.va(),e.ln.fs((function(){return e.pa()}))},this.window.addEventListener("unload",this.Xo))},t.prototype.Sa=function(){this.Xo&&(this.window.removeEventListener("unload",this.Xo),this.Xo=null)},t.prototype.ya=function(t){var e;try{var n=null!==(null===(e=this.aa)||void 0===e?void 0:e.getItem(this.Va(t)));return Ao("IndexedDbPersistence","Client '"+t+"' "+(n?"is":"is not")+" zombied in LocalStorage"),n}catch(t){return _o("IndexedDbPersistence","Failed to get zombied client id.",t),!1}},t.prototype.va=function(){if(this.aa)try{this.aa.setItem(this.Va(this.clientId),String(Date.now()))}catch(t){_o("Failed to set zombie client id.",t)}},t.prototype.Da=function(){if(this.aa)try{this.aa.removeItem(this.Va(this.clientId))}catch(t){}},t.prototype.Va=function(t){return"firestore_zombie_"+this.persistenceKey+"_"+t},t}();function ef(t){return tf.qn(t,Th.store)}function nf(t){return tf.qn(t,jh.store)}var rf=function(){function t(t,e){this.db=t,this.Rr=new Wc(this,e)}return t.prototype.Sr=function(t){var e=this.$a(t);return this.db.xa().Bo(t).next((function(t){return e.next((function(e){return t+e}))}))},t.prototype.$a=function(t){var e=0;return this.Cr(t,(function(t){e++})).next((function(){return e}))},t.prototype.De=function(t,e){return this.db.xa().De(t,e)},t.prototype.Cr=function(t,e){return this.La(t,(function(t,n){return e(n)}))},t.prototype.Qo=function(t,e,n){return of(t,n)},t.prototype.Wo=function(t,e,n){return of(t,n)},t.prototype.Nr=function(t,e,n){return this.db.xa().Nr(t,e,n)},t.prototype.eo=function(t,e){return of(t,e)},t.prototype.Ba=function(t,e){return function(t,e){var n=!1;return dh(t).ss((function(r){return hh(t,r,e).next((function(t){return t&&(n=!0),rc.resolve(!t)}))})).next((function(){return n}))}(t,e)},t.prototype.Fr=function(t,e){var n=this,r=this.db.Fa()._o(),i=[],o=0;return this.La(t,(function(s,a){if(a<=e){var u=n.Ba(t,s).next((function(e){if(!e)return o++,r.yi(t,s).next((function(){return r.Vi(s),Qh(t).delete([0,Xc(s.path)])}))}));i.push(u)}})).next((function(){return rc.xn(i)})).next((function(){return r.apply(t)})).next((function(){return o}))},t.prototype.removeTarget=function(t,e){var n=e.nt(t.Go);return this.db.xa().ko(t,n)},t.prototype.qa=function(t,e){return of(t,e)},t.prototype.La=function(t,e){var n,r=Qh(t),i=Fc.nr;return r.ns({index:Rh.documentTargetsIndex},(function(t,r){var o=t[0],s=(t[1],r.path),a=r.sequenceNumber;0===o?(i!==Fc.nr&&e(new Wo(Qc(n)),i),i=a,n=s):i=Fc.nr})).next((function(){i!==Fc.nr&&e(new Wo(Qc(n)),i)}))},t.prototype.Mr=function(t){return this.db.Fa().wo(t)},t}();function of(t,e){return Qh(t).put(function(t,e){return new Rh(0,Xc(t.path),e)}(e,t.Go))}function sf(t,e){var n=t.projectId;return t.o||(n+="."+t.database),"firestore/"+e+"/"+n+"/"}var af=function(){function t(t,e,n,r){this.persistence=t,this.Ua=e,this.serializer=r,this.Qa=new cs(Do),this.Ka=new jo((function(t){return Zo(t)}),ts),this.Wa=qo.min(),this.xi=t.Na(n),this.ja=t.Fa(),this.ra=t.xa(),this.Ga=new Uc(this.ja,this.xi,this.persistence.Oa()),this.oa=t.Ma(),this.Ua.za(this.Ga)}return t.prototype.pr=function(t){var e=this;return this.persistence.runTransaction("Collect garbage","readwrite-primary",(function(n){return t.Or(n,e.Qa)}))},t}();function uf(t,e,n,r){return new af(t,e,n,r)}function cf(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=n.xi,i=n.Ga,[4,n.persistence.runTransaction("Handle user change","readonly",(function(t){var o;return n.xi.Hr(t).next((function(s){return o=s,r=n.persistence.Na(e),i=new Uc(n.ja,r,n.persistence.Oa()),r.Hr(t)})).next((function(e){for(var n=[],r=[],s=Is(),a=0,u=o;a<u.length;a++){var c=u[a];n.push(c.batchId);for(var h=0,f=c.mutations;h<f.length;h++){var l=f[h];s=s.add(l.key)}}for(var p=0,d=e;p<d.length;p++){var v=d[p];r.push(v.batchId);for(var y=0,g=v.mutations;y<g.length;y++){var m=g[y];s=s.add(m.key)}}return i.Li(t,s).next((function(t){return{Ha:t,Ja:n,Ya:r}}))}))}))];case 1:return s=o.sent(),[2,(n.xi=r,n.Ga=i,n.Ua.za(n.Ga),s)]}}))}))}function hf(t,e){var n=Co(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(function(t){var r=e.batch.keys(),i=n.ja._o({fo:!0});return function(t,e,n,r){var i=n.batch,o=i.keys(),s=rc.resolve();return o.forEach((function(t){s=s.next((function(){return r.yi(e,t)})).next((function(e){var o=e,s=n.Ei.get(t);ko(null!==s),(!o||o.version.A(s)<0)&&(o=i._i(t,o,n))&&r.Ri(o,n.Ti)}))})),s.next((function(){return t.xi.Yr(e,i)}))}(n,t,e,i).next((function(){return i.apply(t)})).next((function(){return n.xi.no(t)})).next((function(){return n.Ga.Li(t,r)}))}))}function ff(t){var e=Co(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(function(t){return e.ra.Co(t)}))}function lf(t,e){var n=Co(t),r=e.et,i=n.Qa;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(function(t){var o=n.ja._o({fo:!0});i=n.Qa;var s=[];e.Gt.forEach((function(e,o){var a=i.get(o);if(a){s.push(n.ra.Ko(t,e.ne,o).next((function(){return n.ra.Uo(t,e.te,o)})));var u=e.resumeToken;if(u.X()>0){var c=a.st(u,r).nt(t.Go);i=i.rt(o,c),function(t,e,n){return ko(e.resumeToken.X()>0),0===t.resumeToken.X()||e.et.R()-t.et.R()>=3e8||n.te.size+n.ee.size+n.ne.size>0}(a,c,e)&&s.push(n.ra.ko(t,c))}}}));var a=vs();if(e.Ht.forEach((function(r,i){e.Jt.has(r)&&s.push(n.persistence.Lr.qa(t,r))})),s.push(function(t,e,n,r,i){var o=Is();return n.forEach((function(t){return o=o.add(t)})),e.getEntries(t,o).next((function(t){var i=vs();return n.forEach((function(n,o){var s=t.get(n),a=r;o instanceof bu&&o.version.isEqual(qo.min())?(e.Vi(n,a),i=i.rt(n,o)):null==s||o.version.A(s.version)>0||0===o.version.A(s.version)&&s.hasPendingWrites?(e.Ri(o,a),i=i.rt(n,o)):Ao("LocalStore","Ignoring outdated watch update for ",n,". Current version:",s.version," Watch version:",o.version)})),i}))}(t,o,e.Ht,r).next((function(t){a=t}))),!r.isEqual(qo.min())){var u=n.ra.Co(t).next((function(e){return n.ra.xo(t,t.Go,r)}));s.push(u)}return rc.xn(s).next((function(){return o.apply(t)})).next((function(){return n.Ga.Bi(t,a)}))})).then((function(t){return n.Qa=i,t}))}function pf(t,e){var n=Co(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(function(t){return void 0===e&&(e=-1),n.xi.Gr(t,e)}))}function df(t,e){var n=Co(t);return n.persistence.runTransaction("Allocate target","readwrite",(function(t){var r;return n.ra.qo(t,e).next((function(i){return i?(r=i,rc.resolve(r)):n.ra.bo(t).next((function(i){return r=new os(e,i,0,t.Go),n.ra.Fo(t,r).next((function(){return r}))}))}))})).then((function(t){var r=n.Qa.get(t.targetId);return(null===r||t.et.A(r.et)>0)&&(n.Qa=n.Qa.rt(t.targetId,t),n.Ka.set(e,t.targetId)),t}))}function vf(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a;return o(this,(function(o){switch(o.label){case 0:r=Co(t),i=r.Qa.get(e),s=n?"readwrite":"readwrite-primary",o.label=1;case 1:return o.trys.push([1,4,,5]),n?[3,3]:[4,r.persistence.runTransaction("Release target",s,(function(t){return r.persistence.Lr.removeTarget(t,i)}))];case 2:o.sent(),o.label=3;case 3:return[3,5];case 4:if(!ac(a=o.sent()))throw a;return Ao("LocalStore","Failed to update sequence numbers for target "+e+": "+a),[3,5];case 5:return r.Qa=r.Qa.remove(e),r.Ka.delete(i.target),[2]}}))}))}function yf(t,e,n){var r=Co(t),i=qo.min(),o=Is();return r.persistence.runTransaction("Execute query","readonly",(function(t){return function(t,e,n){var r=Co(t),i=r.Ka.get(n);return void 0!==i?rc.resolve(r.Qa.get(i)):r.ra.qo(e,n)}(r,t,xu(e)).next((function(e){if(e)return i=e.lastLimboFreeSnapshotVersion,r.ra.jo(t,e.targetId).next((function(t){o=t}))})).next((function(){return r.Ua.Ui(t,e,n?i:qo.min(),n?o:Is())})).next((function(t){return{documents:t,Xa:o}}))}))}function gf(t,e){var n=Co(t),r=Co(n.ra),i=n.Qa.get(e);return i?Promise.resolve(i.target):n.persistence.runTransaction("Get target data","readonly",(function(t){return r.qe(t,e).next((function(t){return t?t.target:null}))}))}function mf(t){var e=Co(t);return e.persistence.runTransaction("Get new document changes","readonly",(function(t){return function(t,e,n){var r=Co(t),i=vs(),o=eh(n),s=mh(e),a=IDBKeyRange.lowerBound(o,!0);return s.ns({index:Oh.readTimeIndex,range:a},(function(t,e){var n=Zc(r.serializer,e);i=i.rt(n.key,n),o=e.readTime})).next((function(){return{Za:i,readTime:nh(o)}}))}(e.ja,t,e.Wa)})).then((function(t){var n=t.Za,r=t.readTime;return e.Wa=r,n}))}function bf(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){return[2,(e=Co(t)).persistence.runTransaction("Synchronize last document change read time","readonly",(function(t){return function(t){var e=mh(t),n=qo.min();return e.ns({index:Oh.readTimeIndex,reverse:!0},(function(t,e,r){e.readTime&&(n=nh(e.readTime)),r.done()})).next((function(){return n}))}(t)})).then((function(t){e.Wa=t}))]}))}))}function wf(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){if(t.code!==Uo.FAILED_PRECONDITION||t.message!==Vc)throw t;return Ao("LocalStore","Unexpectedly lost primary lease"),[2]}))}))}var If=function(){function t(t,e,n,r,i,o){this.ln=t,this.tc=n,this.ec=r,this.nc=i,this.listener=o,this.state=0,this.sc=0,this.ic=null,this.stream=null,this.Ps=new nc(t,e)}return t.prototype.rc=function(){return 1===this.state||2===this.state||4===this.state},t.prototype.oc=function(){return 2===this.state},t.prototype.start=function(){3!==this.state?this.auth():this.ac()},t.prototype.stop=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return this.rc()?[4,this.close(0)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))},t.prototype.cc=function(){this.state=0,this.Ps.reset()},t.prototype.uc=function(){var t=this;this.oc()&&null===this.ic&&(this.ic=this.ln.Pn(this.tc,6e4,(function(){return t.hc()})))},t.prototype.lc=function(t){this._c(),this.stream.send(t)},t.prototype.hc=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){return this.oc()?[2,this.close(0)]:[2]}))}))},t.prototype._c=function(){this.ic&&(this.ic.cancel(),this.ic=null)},t.prototype.close=function(t,e){return i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return this._c(),this.Ps.cancel(),this.sc++,3!==t?this.Ps.reset():e&&e.code===Uo.RESOURCE_EXHAUSTED?(_o(e.toString()),_o("Using maximum backoff delay to prevent overloading the backend."),this.Ps.mn()):e&&e.code===Uo.UNAUTHENTICATED&&this.nc.ni(),null!==this.stream&&(this.fc(),this.stream.close(),this.stream=null),this.state=t,[4,this.listener.dc(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.fc=function(){},t.prototype.auth=function(){var t=this;this.state=1;var e=this.wc(this.sc),n=this.sc;this.nc.getToken().then((function(e){t.sc===n&&t.Tc(e)}),(function(n){e((function(){var e=new Bo(Uo.UNKNOWN,"Fetching auth token failed: "+n.message);return t.Ec(e)}))}))},t.prototype.Tc=function(t){var e=this,n=this.wc(this.sc);this.stream=this.Ic(t),this.stream.mc((function(){n((function(){return e.state=2,e.listener.mc()}))})),this.stream.dc((function(t){n((function(){return e.Ec(t)}))})),this.stream.onMessage((function(t){n((function(){return e.onMessage(t)}))}))},t.prototype.ac=function(){var t=this;this.state=4,this.Ps.An((function(){return i(t,void 0,void 0,(function(){return o(this,(function(t){return this.state=0,this.start(),[2]}))}))}))},t.prototype.Ec=function(t){return Ao("PersistentStream","close with error: "+t),this.stream=null,this.close(3,t)},t.prototype.wc=function(t){var e=this;return function(n){e.ln.fs((function(){return e.sc===t?n():(Ao("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())}))}},t}(),Ef=function(t){function n(e,n,r,i,o){var s=this;return(s=t.call(this,e,"listen_stream_connection_backoff","listen_stream_idle",n,r,o)||this).serializer=i,s}return e(n,t),n.prototype.Ic=function(t){return this.ec.Ac("Listen",t)},n.prototype.onMessage=function(t){this.Ps.reset();var e=function(t,e){var n;if("targetChange"in e){e.targetChange;var r=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:No()}(e.targetChange.targetChangeType||"NO_CHANGE"),i=e.targetChange.targetIds||[],o=function(t,e){return t.Ue?(ko(void 0===e||"string"==typeof e),ns.fromBase64String(e||"")):(ko(void 0===e||e instanceof Uint8Array),ns.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),s=e.targetChange.cause,a=s&&function(t){var e=void 0===t.code?Uo.UNKNOWN:us(t.code);return new Bo(e,t.message||"")}(s);n=new Os(r,i,o,a||null)}else if("documentChange"in e){e.documentChange;var u=e.documentChange;u.document,u.document.name,u.document.updateTime;var c=va(t,u.document.name),h=fa(u.document.updateTime),f=new du({mapValue:{fields:u.document.fields}}),l=new mu(c,h,f,{}),p=u.targetIds||[],d=u.removedTargetIds||[];n=new Cs(p,d,l.key,l)}else if("documentDelete"in e){e.documentDelete;var v=e.documentDelete;v.document;var y=va(t,v.document),g=v.readTime?fa(v.readTime):qo.min(),m=new bu(y,g),b=v.removedTargetIds||[];n=new Cs([],b,m.key,m)}else if("documentRemove"in e){e.documentRemove;var w=e.documentRemove;w.document;var I=va(t,w.document),E=w.removedTargetIds||[];n=new Cs([],E,I,null)}else{if(!("filter"in e))return No();e.filter;var A=e.filter;A.targetId;var _=A.count||0,T=new ss(_),S=A.targetId;n=new xs(S,T)}return n}(this.serializer,t),n=function(t){if(!("targetChange"in t))return qo.min();var e=t.targetChange;return e.targetIds&&e.targetIds.length?qo.min():e.readTime?fa(e.readTime):qo.min()}(t);return this.listener.Rc(e,n)},n.prototype.Pc=function(t){var e={};e.database=ma(this.serializer),e.addTarget=function(t,e){var n,r=e.target;return(n=es(r)?{documents:Aa(t,r)}:{query:_a(t,r)}).targetId=e.targetId,e.resumeToken.X()>0?n.resumeToken=ca(t,e.resumeToken):e.et.A(qo.min())>0&&(n.readTime=ua(t,e.et.P())),n}(this.serializer,t);var n=function(t,e){var n=function(t,e){switch(e){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return No()}}(0,e.tt);return null==n?null:{"goog-listen-tags":n}}(this.serializer,t);n&&(e.labels=n),this.lc(e)},n.prototype.gc=function(t){var e={};e.database=ma(this.serializer),e.removeTarget=t,this.lc(e)},n}(If),Af=function(t){function n(e,n,r,i,o){var s=this;return(s=t.call(this,e,"write_stream_connection_backoff","write_stream_idle",n,r,o)||this).serializer=i,s.Vc=!1,s}return e(n,t),Object.defineProperty(n.prototype,"yc",{get:function(){return this.Vc},enumerable:!1,configurable:!0}),n.prototype.start=function(){this.Vc=!1,this.lastStreamToken=void 0,t.prototype.start.call(this)},n.prototype.fc=function(){this.Vc&&this.vc([])},n.prototype.Ic=function(t){return this.ec.Ac("Write",t)},n.prototype.onMessage=function(t){if(ko(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Vc){this.Ps.reset();var e=function(t,e){return t&&t.length>0?(ko(void 0!==e),t.map((function(t){return function(t,e){var n=t.updateTime?fa(t.updateTime):fa(e);n.isEqual(qo.min())&&(n=fa(e));var r=null;return t.transformResults&&t.transformResults.length>0&&(r=t.transformResults),new Qa(n,r)}(t,e)}))):[]}(t.writeResults,t.commitTime),n=fa(t.commitTime);return this.listener.bc(n,e)}return ko(!t.writeResults||0===t.writeResults.length),this.Vc=!0,this.listener.Sc()},n.prototype.Dc=function(){var t={};t.database=ma(this.serializer),this.lc(t)},n.prototype.vc=function(t){var e=this,n={streamToken:this.lastStreamToken,writes:t.map((function(t){return Ia(e.serializer,t)}))};this.lc(n)},n}(If),_f=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).credentials=e,i.ec=n,i.serializer=r,i.Cc=!1,i}return e(n,t),n.prototype.Nc=function(){if(this.Cc)throw new Bo(Uo.FAILED_PRECONDITION,"The client has already been terminated.")},n.prototype.xc=function(t,e,n){var r=this;return this.Nc(),this.credentials.getToken().then((function(i){return r.ec.xc(t,e,n,i)})).catch((function(t){throw t.code===Uo.UNAUTHENTICATED&&r.credentials.ni(),t}))},n.prototype.Fc=function(t,e,n){var r=this;return this.Nc(),this.credentials.getToken().then((function(i){return r.ec.Fc(t,e,n,i)})).catch((function(t){throw t.code===Uo.UNAUTHENTICATED&&r.credentials.ni(),t}))},n.prototype.terminate=function(){this.Cc=!1},n}((function(){})),Tf=function(){function t(t,e){this.rs=t,this.Oc=e,this.state="Unknown",this.Mc=0,this.kc=null,this.$c=!0}return t.prototype.Lc=function(){var t=this;0===this.Mc&&(this.Bc("Unknown"),this.kc=this.rs.Pn("online_state_timeout",1e4,(function(){return t.kc=null,t.qc("Backend didn't respond within 10 seconds."),t.Bc("Offline"),Promise.resolve()})))},t.prototype.Uc=function(t){"Online"===this.state?this.Bc("Unknown"):(this.Mc++,this.Mc>=1&&(this.Qc(),this.qc("Connection failed 1 times. Most recent error: "+t.toString()),this.Bc("Offline")))},t.prototype.set=function(t){this.Qc(),this.Mc=0,"Online"===t&&(this.$c=!1),this.Bc(t)},t.prototype.Bc=function(t){t!==this.state&&(this.state=t,this.Oc(t))},t.prototype.qc=function(t){var e="Could not reach Cloud Firestore backend. "+t+"\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";this.$c?(_o(e),this.$c=!1):Ao("OnlineStateTracker",e)},t.prototype.Qc=function(){null!==this.kc&&(this.kc.cancel(),this.kc=null)},t}(),Sf=function(t,e,n,r,s){var a=this;this.Kc=t,this.Wc=e,this.rs=n,this.jc={},this.Gc=[],this.zc=new Map,this.Hc=new Set,this.Jc=[],this.Yc=s,this.Yc.Xc((function(t){n.fs((function(){return i(a,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return Lf(this)?(Ao("RemoteStore","Restarting streams for network reachability change."),[4,function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return(e=Co(t)).Hc.add(4),[4,kf(e)];case 1:return n.sent(),e.Zc.set("Unknown"),e.Hc.delete(4),[4,Nf(e)];case 2:return n.sent(),[2]}}))}))}(this)]):[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))}))})),this.Zc=new Tf(n,r)};function Nf(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:if(!Lf(t))return[3,4];e=0,n=t.Jc,r.label=1;case 1:return e<n.length?[4,(0,n[e])(!0)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))}function kf(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:e=0,n=t.Jc,r.label=1;case 1:return e<n.length?[4,(0,n[e])(!1)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))}function Cf(t,e){var n=Co(t);n.zc.has(e.targetId)||(n.zc.set(e.targetId,e),Rf(n)?Pf(n):Jf(n).oc()&&Of(n,e))}function xf(t,e){var n=Co(t),r=Jf(n);n.zc.delete(e),r.oc()&&Df(n,e),0===n.zc.size&&(r.oc()?r.uc():Lf(n)&&n.Zc.set("Unknown"))}function Of(t,e){t.tu.Ie(e.targetId),Jf(t).Pc(e)}function Df(t,e){t.tu.Ie(e),Jf(t).gc(e)}function Pf(t){t.tu=new Ps({Be:function(e){return t.jc.Be(e)},qe:function(e){return t.zc.get(e)||null}}),Jf(t).start(),t.Zc.Lc()}function Rf(t){return Lf(t)&&!Jf(t).rc()&&t.zc.size>0}function Lf(t){return 0===Co(t).Hc.size}function Mf(t){t.tu=void 0}function Vf(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){return t.zc.forEach((function(e,n){Of(t,e)})),[2]}))}))}function jf(t,e){return i(this,void 0,void 0,(function(){return o(this,(function(n){return Mf(t),Rf(t)?(t.Zc.Uc(e),Pf(t)):t.Zc.set("Unknown"),[2]}))}))}function Uf(t,e,n){return i(this,void 0,void 0,(function(){var r,s,a;return o(this,(function(u){switch(u.label){case 0:if(t.Zc.set("Online"),!(e instanceof Os&&2===e.state&&e.cause))return[3,6];u.label=1;case 1:return u.trys.push([1,3,,5]),[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:n=e.cause,r=0,i=e.targetIds,o.label=1;case 1:return r<i.length?(s=i[r],t.zc.has(s)?[4,t.jc.eu(s,n)]:[3,3]):[3,5];case 2:o.sent(),t.zc.delete(s),t.tu.removeTarget(s),o.label=3;case 3:o.label=4;case 4:return r++,[3,1];case 5:return[2]}}))}))}(t,e)];case 2:return u.sent(),[3,5];case 3:return r=u.sent(),Ao("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),r),[4,Bf(t,r)];case 4:return u.sent(),[3,5];case 5:return[3,13];case 6:if(e instanceof Cs?t.tu.pe(e):e instanceof xs?t.tu.Fe(e):t.tu.Se(e),n.isEqual(qo.min()))return[3,13];u.label=7;case 7:return u.trys.push([7,11,,13]),[4,ff(t.Kc)];case 8:return s=u.sent(),n.A(s)>=0?[4,function(t,e){var n=t.tu.ke(e);return n.Gt.forEach((function(n,r){if(n.resumeToken.X()>0){var i=t.zc.get(r);i&&t.zc.set(r,i.st(n.resumeToken,e))}})),n.zt.forEach((function(e){var n=t.zc.get(e);if(n){t.zc.set(e,n.st(ns.Z,n.et)),Df(t,e);var r=new os(n.target,e,1,n.sequenceNumber);Of(t,r)}})),t.jc.nu(n)}(t,n)]:[3,10];case 9:u.sent(),u.label=10;case 10:return[3,13];case 11:return Ao("RemoteStore","Failed to raise snapshot:",a=u.sent()),[4,Bf(t,a)];case 12:return u.sent(),[3,13];case 13:return[2]}}))}))}function Bf(t,e,n){return i(this,void 0,void 0,(function(){var r=this;return o(this,(function(s){switch(s.label){case 0:if(!ac(e))throw e;return t.Hc.add(1),[4,kf(t)];case 1:return s.sent(),t.Zc.set("Offline"),n||(n=function(){return ff(t.Kc)}),t.rs.Ss((function(){return i(r,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return Ao("RemoteStore","Retrying IndexedDB access"),[4,n()];case 1:return e.sent(),t.Hc.delete(1),[4,Nf(t)];case 2:return e.sent(),[2]}}))}))})),[2]}}))}))}function Ff(t,e){return e().catch((function(n){return Bf(t,n,e)}))}function qf(t){return i(this,void 0,void 0,(function(){var e,n,r,i,s;return o(this,(function(o){switch(o.label){case 0:e=Co(t),n=Qf(e),r=e.Gc.length>0?e.Gc[e.Gc.length-1].batchId:-1,o.label=1;case 1:if(!function(t){return Lf(t)&&t.Gc.length<10}(e))return[3,7];o.label=2;case 2:return o.trys.push([2,4,,6]),[4,pf(e.Kc,r)];case 3:return null===(i=o.sent())?(0===e.Gc.length&&n.uc(),[3,7]):(r=i.batchId,function(t,e){t.Gc.push(e);var n=Qf(t);n.oc()&&n.yc&&n.vc(e.mutations)}(e,i),[3,6]);case 4:return s=o.sent(),[4,Bf(e,s)];case 5:return o.sent(),[3,6];case 6:return[3,1];case 7:return Gf(e)&&zf(e),[2]}}))}))}function Gf(t){return Lf(t)&&!Qf(t).rc()&&t.Gc.length>0}function zf(t){Qf(t).start()}function Kf(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){return Qf(t).Dc(),[2]}))}))}function Hf(t){return i(this,void 0,void 0,(function(){var e,n,r,i;return o(this,(function(o){for(e=Qf(t),n=0,r=t.Gc;n<r.length;n++)i=r[n],e.vc(i.mutations);return[2]}))}))}function Wf(t,e,n){return i(this,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:return r=t.Gc.shift(),i=Pc.from(r,e,n),[4,Ff(t,(function(){return t.jc.su(i)}))];case 1:return o.sent(),[4,qf(t)];case 2:return o.sent(),[2]}}))}))}function Xf(t,e){return i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return e&&Qf(t).yc?[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return as(r=e.code)&&r!==Uo.ABORTED?(n=t.Gc.shift(),Qf(t).cc(),[4,Ff(t,(function(){return t.jc.iu(n.batchId,e)}))]):[3,3];case 1:return i.sent(),[4,qf(t)];case 2:i.sent(),i.label=3;case 3:return[2]}}))}))}(t,e)]:[3,2];case 1:n.sent(),n.label=2;case 2:return Gf(t)&&zf(t),[2]}}))}))}function Yf(t,e){return i(this,void 0,void 0,(function(){var n;return o(this,(function(r){switch(r.label){case 0:return n=Co(t),e?(n.Hc.delete(2),[4,Nf(n)]):[3,2];case 1:return r.sent(),[3,5];case 2:return e?[3,4]:(n.Hc.add(2),[4,kf(n)]);case 3:r.sent(),n.Zc.set("Unknown"),r.label=4;case 4:r.label=5;case 5:return[2]}}))}))}function Jf(t){var e=this;return t.ru||(t.ru=function(t,e,n){var r=Co(t);return r.Nc(),new Ef(e,r.ec,r.credentials,r.serializer,n)}(t.Wc,t.rs,{mc:Vf.bind(null,t),dc:jf.bind(null,t),Rc:Uf.bind(null,t)}),t.Jc.push((function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return n?(t.ru.cc(),Rf(t)?Pf(t):t.Zc.set("Unknown"),[3,3]):[3,1];case 1:return[4,t.ru.stop()];case 2:e.sent(),Mf(t),e.label=3;case 3:return[2]}}))}))}))),t.ru}function Qf(t){var e=this;return t.ou||(t.ou=function(t,e,n){var r=Co(t);return r.Nc(),new Af(e,r.ec,r.credentials,r.serializer,n)}(t.Wc,t.rs,{mc:Kf.bind(null,t),dc:Xf.bind(null,t),Sc:Hf.bind(null,t),bc:Wf.bind(null,t)}),t.Jc.push((function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return n?(t.ou.cc(),[4,qf(t)]):[3,2];case 1:return e.sent(),[3,4];case 2:return[4,t.ou.stop()];case 3:e.sent(),t.Gc.length>0&&(Ao("RemoteStore","Stopping write stream with "+t.Gc.length+" pending writes"),t.Gc=[]),e.label=4;case 4:return[2]}}))}))}))),t.ou}var $f=function(){function t(){this.au=new ls(Zf.cu),this.uu=new ls(Zf.hu)}return t.prototype.T=function(){return this.au.T()},t.prototype.Qo=function(t,e){var n=new Zf(t,e);this.au=this.au.add(n),this.uu=this.uu.add(n)},t.prototype.lu=function(t,e){var n=this;t.forEach((function(t){return n.Qo(t,e)}))},t.prototype.Wo=function(t,e){this._u(new Zf(t,e))},t.prototype.fu=function(t,e){var n=this;t.forEach((function(t){return n.Wo(t,e)}))},t.prototype.du=function(t){var e=this,n=new Wo(new zo([])),r=new Zf(n,t),i=new Zf(n,t+1),o=[];return this.uu.Nt([r,i],(function(t){e._u(t),o.push(t.key)})),o},t.prototype.wu=function(){var t=this;this.au.forEach((function(e){return t._u(e)}))},t.prototype._u=function(t){this.au=this.au.delete(t),this.uu=this.uu.delete(t)},t.prototype.Tu=function(t){var e=new Wo(new zo([])),n=new Zf(e,t),r=new Zf(e,t+1),i=Is();return this.uu.Nt([n,r],(function(t){i=i.add(t.key)})),i},t.prototype.so=function(t){var e=new Zf(t,0),n=this.au.Ft(e);return null!==n&&t.isEqual(n.key)},t}(),Zf=function(){function t(t,e){this.key=t,this.Eu=e}return t.cu=function(t,e){return Wo.V(t.key,e.key)||Do(t.Eu,e.Eu)},t.hu=function(t,e){return Do(t.Eu,e.Eu)||Wo.V(t.key,e.key)},t}();function tl(t,e){return"firestore_clients_"+t+"_"+e}function el(t,e,n){var r="firestore_mutations_"+t+"_"+n;return e.Js()&&(r+="_"+e.uid),r}function nl(t,e){return"firestore_targets_"+t+"_"+e}var rl=function(){function t(t,e,n,r){this.user=t,this.batchId=e,this.state=n,this.error=r}return t.Iu=function(e,n,r){var i=JSON.parse(r),o="object"==typeof i&&-1!==["pending","acknowledged","rejected"].indexOf(i.state)&&(void 0===i.error||"object"==typeof i.error),s=void 0;return o&&i.error&&(o="string"==typeof i.error.message&&"string"==typeof i.error.code)&&(s=new Bo(i.error.code,i.error.message)),o?new t(e,n,i.state,s):(_o("SharedClientState","Failed to parse mutation state for ID '"+n+"': "+r),null)},t.prototype.mu=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),il=function(){function t(t,e,n){this.targetId=t,this.state=e,this.error=n}return t.Iu=function(e,n){var r=JSON.parse(n),i="object"==typeof r&&-1!==["not-current","current","rejected"].indexOf(r.state)&&(void 0===r.error||"object"==typeof r.error),o=void 0;return i&&r.error&&(i="string"==typeof r.error.message&&"string"==typeof r.error.code)&&(o=new Bo(r.error.code,r.error.message)),i?new t(e,r.state,o):(_o("SharedClientState","Failed to parse target state for ID '"+e+"': "+n),null)},t.prototype.mu=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),ol=function(){function t(t,e){this.clientId=t,this.activeTargetIds=e}return t.Iu=function(e,n){for(var r=JSON.parse(n),i="object"==typeof r&&r.activeTargetIds instanceof Array,o=As(),s=0;i&&s<r.activeTargetIds.length;++s)i=Jo(r.activeTargetIds[s]),o=o.add(r.activeTargetIds[s]);return i?new t(e,o):(_o("SharedClientState","Failed to parse client data for instance '"+e+"': "+n),null)},t}(),sl=function(){function t(t,e){this.clientId=t,this.onlineState=e}return t.Iu=function(e){var n=JSON.parse(e);return"object"==typeof n&&-1!==["Unknown","Online","Offline"].indexOf(n.onlineState)&&"string"==typeof n.clientId?new t(n.clientId,n.onlineState):(_o("SharedClientState","Failed to parse online state: "+e),null)},t}(),al=function(){function t(){this.activeTargetIds=As()}return t.prototype.Au=function(t){this.activeTargetIds=this.activeTargetIds.add(t)},t.prototype.Ru=function(t){this.activeTargetIds=this.activeTargetIds.delete(t)},t.prototype.mu=function(){var t={activeTargetIds:this.activeTargetIds.O(),updateTimeMs:Date.now()};return JSON.stringify(t)},t}(),ul=function(){function t(t,e,n,r,i){this.window=t,this.ln=e,this.persistenceKey=n,this.Pu=r,this.gu=null,this.Oc=null,this.Xi=null,this.Vu=this.yu.bind(this),this.pu=new cs(Do),this.yr=!1,this.vu=[];var o=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.window.localStorage,this.currentUser=i,this.bu=tl(this.persistenceKey,this.Pu),this.Su=function(t){return"firestore_sequence_number_"+t}(this.persistenceKey),this.pu=this.pu.rt(this.Pu,new al),this.Du=new RegExp("^firestore_clients_"+o+"_([^_]*)$"),this.Cu=new RegExp("^firestore_mutations_"+o+"_(\\d+)(?:_(.*))?$"),this.Nu=new RegExp("^firestore_targets_"+o+"_(\\d+)$"),this.xu=function(t){return"firestore_online_state_"+t}(this.persistenceKey),this.Fu=function(t){return"firestore_bundle_loaded_"+t}(this.persistenceKey),this.window.addEventListener("storage",this.Vu)}return t.kn=function(t){return!(!t||!t.localStorage)},t.prototype.start=function(){return i(this,void 0,void 0,(function(){var t,e,n,r,i,s,a,u,c,h,f,l=this;return o(this,(function(o){switch(o.label){case 0:return[4,this.gu.Ca()];case 1:for(t=o.sent(),e=0,n=t;e<n.length;e++)(r=n[e])!==this.Pu&&(i=this.getItem(tl(this.persistenceKey,r)))&&(s=ol.Iu(r,i))&&(this.pu=this.pu.rt(s.clientId,s));for(this.Ou(),(a=this.storage.getItem(this.xu))&&(u=this.Mu(a))&&this.ku(u),c=0,h=this.vu;c<h.length;c++)f=h[c],this.yu(f);return this.vu=[],this.window.addEventListener("unload",(function(){return l.pa()})),this.yr=!0,[2]}}))}))},t.prototype.er=function(t){this.setItem(this.Su,JSON.stringify(t))},t.prototype.$u=function(){return this.Lu(this.pu)},t.prototype.Bu=function(t){var e=!1;return this.pu.forEach((function(n,r){r.activeTargetIds.has(t)&&(e=!0)})),e},t.prototype.qu=function(t){this.Uu(t,"pending")},t.prototype.Qu=function(t,e,n){this.Uu(t,e,n),this.Ku(t)},t.prototype.Wu=function(t){var e="not-current";if(this.Bu(t)){var n=this.storage.getItem(nl(this.persistenceKey,t));if(n){var r=il.Iu(t,n);r&&(e=r.state)}}return this.ju.Au(t),this.Ou(),e},t.prototype.Gu=function(t){this.ju.Ru(t),this.Ou()},t.prototype.zu=function(t){return this.ju.activeTargetIds.has(t)},t.prototype.Hu=function(t){this.removeItem(nl(this.persistenceKey,t))},t.prototype.Ju=function(t,e,n){this.Yu(t,e,n)},t.prototype.Xu=function(t,e,n){var r=this;e.forEach((function(t){r.Ku(t)})),this.currentUser=t,n.forEach((function(t){r.qu(t)}))},t.prototype.Zu=function(t){this.th(t)},t.prototype.eh=function(){this.nh()},t.prototype.pa=function(){this.yr&&(this.window.removeEventListener("storage",this.Vu),this.removeItem(this.bu),this.yr=!1)},t.prototype.getItem=function(t){var e=this.storage.getItem(t);return Ao("SharedClientState","READ",t,e),e},t.prototype.setItem=function(t,e){Ao("SharedClientState","SET",t,e),this.storage.setItem(t,e)},t.prototype.removeItem=function(t){Ao("SharedClientState","REMOVE",t),this.storage.removeItem(t)},t.prototype.yu=function(t){var e=this,n=t;if(n.storageArea===this.storage){if(Ao("SharedClientState","EVENT",n.key,n.newValue),n.key===this.bu)return void _o("Received WebStorage notification for local change. Another client might have garbage-collected our state");this.ln.Ss((function(){return i(e,void 0,void 0,(function(){var t,e,r,i,s,a;return o(this,(function(o){if(this.yr){if(null!==n.key)if(this.Du.test(n.key)){if(null==n.newValue)return t=this.sh(n.key),[2,this.ih(t,null)];if(e=this.rh(n.key,n.newValue))return[2,this.ih(e.clientId,e)]}else if(this.Cu.test(n.key)){if(null!==n.newValue&&(r=this.oh(n.key,n.newValue)))return[2,this.ah(r)]}else if(this.Nu.test(n.key)){if(null!==n.newValue&&(i=this.uh(n.key,n.newValue)))return[2,this.hh(i)]}else if(n.key===this.xu){if(null!==n.newValue&&(s=this.Mu(n.newValue)))return[2,this.ku(s)]}else if(n.key===this.Su)(a=function(t){var e=Fc.nr;if(null!=t)try{var n=JSON.parse(t);ko("number"==typeof n),e=n}catch(t){_o("SharedClientState","Failed to read sequence number from WebStorage",t)}return e}(n.newValue))!==Fc.nr&&this.Xi(a);else if(n.key===this.Fu)return[2,this.gu.lh()]}else this.vu.push(n);return[2]}))}))}))}},Object.defineProperty(t.prototype,"ju",{get:function(){return this.pu.get(this.Pu)},enumerable:!1,configurable:!0}),t.prototype.Ou=function(){this.setItem(this.bu,this.ju.mu())},t.prototype.Uu=function(t,e,n){var r=new rl(this.currentUser,t,e,n),i=el(this.persistenceKey,this.currentUser,t);this.setItem(i,r.mu())},t.prototype.Ku=function(t){var e=el(this.persistenceKey,this.currentUser,t);this.removeItem(e)},t.prototype.th=function(t){var e={clientId:this.Pu,onlineState:t};this.storage.setItem(this.xu,JSON.stringify(e))},t.prototype.Yu=function(t,e,n){var r=nl(this.persistenceKey,t),i=new il(t,e,n);this.setItem(r,i.mu())},t.prototype.nh=function(){this.setItem(this.Fu,"value-not-used")},t.prototype.sh=function(t){var e=this.Du.exec(t);return e?e[1]:null},t.prototype.rh=function(t,e){var n=this.sh(t);return ol.Iu(n,e)},t.prototype.oh=function(t,e){var n=this.Cu.exec(t),r=Number(n[1]),i=void 0!==n[2]?n[2]:null;return rl.Iu(new Sc(i),r,e)},t.prototype.uh=function(t,e){var n=this.Nu.exec(t),r=Number(n[1]);return il.Iu(r,e)},t.prototype.Mu=function(t){return sl.Iu(t)},t.prototype.ah=function(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){return t.user.uid===this.currentUser.uid?[2,this.gu._h(t.batchId,t.state,t.error)]:(Ao("SharedClientState","Ignoring mutation for non-active user "+t.user.uid),[2])}))}))},t.prototype.hh=function(t){return this.gu.fh(t.targetId,t.state,t.error)},t.prototype.ih=function(t,e){var n=this,r=e?this.pu.rt(t,e):this.pu.remove(t),i=this.Lu(this.pu),o=this.Lu(r),s=[],a=[];return o.forEach((function(t){i.has(t)||s.push(t)})),i.forEach((function(t){o.has(t)||a.push(t)})),this.gu.dh(s,a).then((function(){n.pu=r}))},t.prototype.ku=function(t){this.pu.get(t.clientId)&&this.Oc(t.onlineState)},t.prototype.Lu=function(t){var e=As();return t.forEach((function(t,n){e=e.Ot(n.activeTargetIds)})),e},t}(),cl=function(){function t(){this.wh=new al,this.Th={},this.Oc=null,this.Xi=null}return t.prototype.qu=function(t){},t.prototype.Qu=function(t,e,n){},t.prototype.Wu=function(t){return this.wh.Au(t),this.Th[t]||"not-current"},t.prototype.Ju=function(t,e,n){this.Th[t]=e},t.prototype.Gu=function(t){this.wh.Ru(t)},t.prototype.zu=function(t){return this.wh.activeTargetIds.has(t)},t.prototype.Hu=function(t){delete this.Th[t]},t.prototype.$u=function(){return this.wh.activeTargetIds},t.prototype.Bu=function(t){return this.wh.activeTargetIds.has(t)},t.prototype.start=function(){return this.wh=new al,Promise.resolve()},t.prototype.Xu=function(t,e,n){},t.prototype.Zu=function(t){},t.prototype.pa=function(){},t.prototype.er=function(t){},t.prototype.eh=function(){},t}(),hl=function(t){this.key=t},fl=function(t){this.key=t},ll=function(){function t(t,e){this.query=t,this.Eh=e,this.Ih=null,this.Zt=!1,this.mh=Is(),this.Qt=Is(),this.Ah=ju(t),this.Rh=new _s(this.Ah)}return Object.defineProperty(t.prototype,"Ph",{get:function(){return this.Eh},enumerable:!1,configurable:!0}),t.prototype.gh=function(t,e){var n=this,r=e?e.Vh:new Ts,i=e?e.Rh:this.Rh,o=e?e.Qt:this.Qt,s=i,a=!1,u=_u(this.query)&&i.size===this.query.limit?i.last():null,c=Tu(this.query)&&i.size===this.query.limit?i.first():null;if(t.ut((function(t,e){var h=i.get(t),f=e instanceof mu?e:null;f&&(f=Vu(n.query,f)?f:null);var l=!!h&&n.Qt.has(h.key),p=!!f&&(f.Je||n.Qt.has(f.key)&&f.hasCommittedMutations),d=!1;h&&f?h.data().isEqual(f.data())?l!==p&&(r.track({type:3,doc:f}),d=!0):n.yh(h,f)||(r.track({type:2,doc:f}),d=!0,(u&&n.Ah(f,u)>0||c&&n.Ah(f,c)<0)&&(a=!0)):!h&&f?(r.track({type:0,doc:f}),d=!0):h&&!f&&(r.track({type:1,doc:h}),d=!0,(u||c)&&(a=!0)),d&&(f?(s=s.add(f),o=p?o.add(t):o.delete(t)):(s=s.delete(t),o=o.delete(t)))})),_u(this.query)||Tu(this.query))for(;s.size>this.query.limit;){var h=_u(this.query)?s.last():s.first();s=s.delete(h.key),o=o.delete(h.key),r.track({type:1,doc:h})}return{Rh:s,Vh:r,ph:a,Qt:o}},t.prototype.yh=function(t,e){return t.Je&&e.hasCommittedMutations&&!e.Je},t.prototype.bi=function(t,e,n){var r=this,i=this.Rh;this.Rh=t.Rh,this.Qt=t.Qt;var o=t.Vh.qt();o.sort((function(t,e){return function(t,e){var n=function(t){switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return No()}};return n(t)-n(e)}(t.type,e.type)||r.Ah(t.doc,e.doc)})),this.bh(n);var s=e?this.Sh():[],a=0===this.mh.size&&this.Zt?1:0,u=a!==this.Ih;return this.Ih=a,0!==o.length||u?{snapshot:new Ss(this.query,t.Rh,i,o,t.Qt,0===a,u,!1),Dh:s}:{Dh:s}},t.prototype.Bs=function(t){return this.Zt&&"Offline"===t?(this.Zt=!1,this.bi({Rh:this.Rh,Vh:new Ts,Qt:this.Qt,ph:!1},!1)):{Dh:[]}},t.prototype.Ch=function(t){return!this.Eh.has(t)&&!!this.Rh.has(t)&&!this.Rh.get(t).Je},t.prototype.bh=function(t){var e=this;t&&(t.te.forEach((function(t){return e.Eh=e.Eh.add(t)})),t.ee.forEach((function(t){})),t.ne.forEach((function(t){return e.Eh=e.Eh.delete(t)})),this.Zt=t.Zt)},t.prototype.Sh=function(){var t=this;if(!this.Zt)return[];var e=this.mh;this.mh=Is(),this.Rh.forEach((function(e){t.Ch(e.key)&&(t.mh=t.mh.add(e.key))}));var n=[];return e.forEach((function(e){t.mh.has(e)||n.push(new fl(e))})),this.mh.forEach((function(t){e.has(t)||n.push(new hl(t))})),n},t.prototype.Nh=function(t){this.Eh=t.Xa,this.mh=Is();var e=this.gh(t.documents);return this.bi(e,!0)},t.prototype.xh=function(){return Ss.jt(this.query,this.Rh,this.Qt,0===this.Ih)},t}(),pl=function(t,e,n){this.query=t,this.targetId=e,this.view=n},dl=function(t){this.key=t,this.Fh=!1},vl=function(){function t(t,e,n,r,i,o){this.Kc=t,this.Oh=e,this.Mh=n,this.kh=r,this.currentUser=i,this.$h=o,this.Lh={},this.Bh=new jo((function(t){return Lu(t)}),Ru),this.qh=new Map,this.Uh=[],this.Qh=new cs(Wo.V),this.Kh=new Map,this.Wh=new $f,this.jh={},this.Gh=new Map,this.zh=Wh.vo(),this.onlineState="Unknown",this.Hh=void 0}return Object.defineProperty(t.prototype,"Jh",{get:function(){return!0===this.Hh},enumerable:!1,configurable:!0}),t}();function yl(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return n=Kl(t),(s=n.Bh.get(e))?(r=s.targetId,n.kh.Wu(r),i=s.view.xh(),[3,4]):[3,1];case 1:return[4,df(n.Kc,xu(e))];case 2:return a=o.sent(),u=n.kh.Wu(a.targetId),r=a.targetId,[4,gl(n,e,r,"current"===u)];case 3:i=o.sent(),n.Jh&&Cf(n.Oh,a),o.label=4;case 4:return[2,i]}}))}))}function gl(t,e,n,r){return i(this,void 0,void 0,(function(){var s,a,u,c,h,f;return o(this,(function(l){switch(l.label){case 0:return t.Yh=function(e,n,r){return function(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a;return o(this,(function(o){switch(o.label){case 0:return(i=e.view.gh(n)).ph?[4,yf(t.Kc,e.query,!1).then((function(t){var n=t.documents;return e.view.gh(n,i)}))]:[3,2];case 1:i=o.sent(),o.label=2;case 2:return s=r&&r.Gt.get(e.targetId),a=e.view.bi(i,t.Jh,s),[2,(xl(t,e.targetId,a.Dh),a.snapshot)]}}))}))}(t,e,n,r)},[4,yf(t.Kc,e,!0)];case 1:return s=l.sent(),a=new ll(e,s.Xa),u=a.gh(s.documents),c=ks.Xt(n,r&&"Offline"!==t.onlineState),h=a.bi(u,t.Jh,c),xl(t,n,h.Dh),f=new pl(e,n,a),[2,(t.Bh.set(e,f),t.qh.has(n)?t.qh.get(n).push(e):t.qh.set(n,[e]),h.snapshot)]}}))}))}function ml(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=n.Bh.get(e),(i=n.qh.get(r.targetId)).length>1?[2,(n.qh.set(r.targetId,i.filter((function(t){return!Ru(t,e)}))),void n.Bh.delete(e))]:n.Jh?(n.kh.Gu(r.targetId),n.kh.Bu(r.targetId)?[3,2]:[4,vf(n.Kc,r.targetId,!1).then((function(){n.kh.Hu(r.targetId),xf(n.Oh,r.targetId),kl(n,r.targetId)})).catch(wf)]):[3,3];case 1:o.sent(),o.label=2;case 2:return[3,5];case 3:return kl(n,r.targetId),[4,vf(n.Kc,r.targetId,!0)];case 4:o.sent(),o.label=5;case 5:return[2]}}))}))}function bl(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a;return o(this,(function(o){switch(o.label){case 0:r=Hl(t),o.label=1;case 1:return o.trys.push([1,5,,6]),[4,function(t,e){var n,r=Co(t),i=Fo.now(),o=e.reduce((function(t,e){return t.add(e.key)}),Is());return r.persistence.runTransaction("Locally write mutations","readwrite",(function(t){return r.Ga.Li(t,o).next((function(o){n=o;for(var s=[],a=0,u=e;a<u.length;a++){var c=u[a],h=ru(c,n.get(c.key));null!=h&&s.push(new au(c.key,h,yu(h.proto.mapValue),$a.exists(!0)))}return r.xi.Qr(t,i,s,e)}))})).then((function(t){var e=t.wi(n);return{batchId:t.batchId,Ii:e}}))}(r.Kc,e)];case 2:return i=o.sent(),r.kh.qu(i.batchId),function(t,e,n){var r=t.jh[t.currentUser.Ys()];r||(r=new cs(Do)),r=r.rt(e,n),t.jh[t.currentUser.Ys()]=r}(r,i.batchId,n),[4,Pl(r,i.Ii)];case 3:return o.sent(),[4,qf(r.Oh)];case 4:return o.sent(),[3,6];case 5:return s=o.sent(),a=gc(s,"Failed to persist write"),n.reject(a),[3,6];case 6:return[2]}}))}))}function wl(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:n=Co(t),i.label=1;case 1:return i.trys.push([1,4,,6]),[4,lf(n.Kc,e)];case 2:return r=i.sent(),e.Gt.forEach((function(t,e){var r=n.Kh.get(e);r&&(ko(t.te.size+t.ee.size+t.ne.size<=1),t.te.size>0?r.Fh=!0:t.ee.size>0?ko(r.Fh):t.ne.size>0&&(ko(r.Fh),r.Fh=!1))})),[4,Pl(n,r,e)];case 3:return i.sent(),[3,6];case 4:return[4,wf(i.sent())];case 5:return i.sent(),[3,6];case 6:return[2]}}))}))}function Il(t,e,n){var r=Co(t);if(r.Jh&&0===n||!r.Jh&&1===n){var i=[];r.Bh.forEach((function(t,n){var r=n.view.Bs(e);r.snapshot&&i.push(r.snapshot)})),function(t,e){var n=Co(t);n.onlineState=e;var r=!1;n.queries.forEach((function(t,n){for(var i=0,o=n.listeners;i<o.length;i++)o[i].Bs(e)&&(r=!0)})),r&&_c(n)}(r.Mh,e),i.length&&r.Lh.Rc(i),r.onlineState=e,r.Jh&&r.kh.Zu(e)}}function El(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return(r=Co(t)).kh.Ju(e,"rejected",n),i=r.Kh.get(e),(s=i&&i.key)?(a=(a=new cs(Wo.V)).rt(s,new bu(s,qo.min())),u=Is().add(s),c=new Ns(qo.min(),new Map,new ls(Do),a,u),[4,wl(r,c)]):[3,2];case 1:return o.sent(),r.Qh=r.Qh.remove(s),r.Kh.delete(e),Dl(r),[3,4];case 2:return[4,vf(r.Kc,e,!1).then((function(){return kl(r,e,n)})).catch(wf)];case 3:o.sent(),o.label=4;case 4:return[2]}}))}))}function Al(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:n=Co(t),r=e.batch.batchId,o.label=1;case 1:return o.trys.push([1,4,,6]),[4,hf(n.Kc,e)];case 2:return i=o.sent(),Nl(n,r,null),Sl(n,r),n.kh.Qu(r,"acknowledged"),[4,Pl(n,i)];case 3:return o.sent(),[3,6];case 4:return[4,wf(o.sent())];case 5:return o.sent(),[3,6];case 6:return[2]}}))}))}function _l(t,e,n){return i(this,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:r=Co(t),o.label=1;case 1:return o.trys.push([1,4,,6]),[4,function(t,e){var n=Co(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(function(t){var r;return n.xi.Wr(t,e).next((function(e){return ko(null!==e),r=e.keys(),n.xi.Yr(t,e)})).next((function(){return n.xi.no(t)})).next((function(){return n.Ga.Li(t,r)}))}))}(r.Kc,e)];case 2:return i=o.sent(),Nl(r,e,n),Sl(r,e),r.kh.Qu(e,"rejected",n),[4,Pl(r,i)];case 3:return o.sent(),[3,6];case 4:return[4,wf(o.sent())];case 5:return o.sent(),[3,6];case 6:return[2]}}))}))}function Tl(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a;return o(this,(function(o){switch(o.label){case 0:Lf((n=Co(t)).Oh)||Ao("SyncEngine","The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,function(t){var e=Co(t);return e.persistence.runTransaction("Get highest unacknowledged batch id","readonly",(function(t){return e.xi.zr(t)}))}(n.Kc)];case 2:return-1===(r=o.sent())?[2,void e.resolve()]:((i=n.Gh.get(r)||[]).push(e),n.Gh.set(r,i),[3,4]);case 3:return s=o.sent(),a=gc(s,"Initialization of waitForPendingWrites() operation failed"),e.reject(a),[3,4];case 4:return[2]}}))}))}function Sl(t,e){(t.Gh.get(e)||[]).forEach((function(t){t.resolve()})),t.Gh.delete(e)}function Nl(t,e,n){var r=Co(t),i=r.jh[r.currentUser.Ys()];if(i){var o=i.get(e);o&&(n?o.reject(n):o.resolve(),i=i.remove(e)),r.jh[r.currentUser.Ys()]=i}}function kl(t,e,n){void 0===n&&(n=null),t.kh.Gu(e);for(var r=0,i=t.qh.get(e);r<i.length;r++){var o=i[r];t.Bh.delete(o),n&&t.Lh.Xh(o,n)}t.qh.delete(e),t.Jh&&t.Wh.du(e).forEach((function(e){t.Wh.so(e)||Cl(t,e)}))}function Cl(t,e){var n=t.Qh.get(e);null!==n&&(xf(t.Oh,n),t.Qh=t.Qh.remove(e),t.Kh.delete(n),Dl(t))}function xl(t,e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r];o instanceof hl?(t.Wh.Qo(o.key,e),Ol(t,o)):o instanceof fl?(Ao("SyncEngine","Document no longer in limbo: "+o.key),t.Wh.Wo(o.key,e),t.Wh.so(o.key)||Cl(t,o.key)):No()}}function Ol(t,e){var n=e.key;t.Qh.get(n)||(Ao("SyncEngine","New document in limbo: "+n),t.Uh.push(n),Dl(t))}function Dl(t){for(;t.Uh.length>0&&t.Qh.size<t.$h;){var e=t.Uh.shift(),n=t.zh.next();t.Kh.set(n,new dl(e)),t.Qh=t.Qh.rt(e,n),Cf(t.Oh,new os(xu(Au(e.path)),n,2,Fc.nr))}}function Pl(t,e,n){return i(this,void 0,void 0,(function(){var r,s,a,u;return o(this,(function(c){switch(c.label){case 0:return r=Co(t),s=[],a=[],u=[],r.Bh.T()?[3,3]:(r.Bh.forEach((function(t,i){u.push(r.Yh(i,e,n).then((function(t){if(t){r.Jh&&r.kh.Ju(i.targetId,t.fromCache?"not-current":"current"),s.push(t);var e=Bc.Yi(i.targetId,t);a.push(e)}})))})),[4,Promise.all(u)]);case 1:return c.sent(),r.Lh.Rc(s),[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,h,f;return o(this,(function(o){switch(o.label){case 0:n=Co(t),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(function(t){return rc.forEach(e,(function(e){return rc.forEach(e.Hi,(function(r){return n.persistence.Lr.Qo(t,e.targetId,r)})).next((function(){return rc.forEach(e.Ji,(function(r){return n.persistence.Lr.Wo(t,e.targetId,r)}))}))}))}))];case 2:return o.sent(),[3,4];case 3:if(!ac(r=o.sent()))throw r;return Ao("LocalStore","Failed to update sequence numbers: "+r),[3,4];case 4:for(i=0,s=e;i<s.length;i++)a=s[i],u=a.targetId,a.fromCache||(c=n.Qa.get(u),h=c.et,f=c.it(h),n.Qa=n.Qa.rt(u,f));return[2]}}))}))}(r.Kc,a)];case 2:c.sent(),c.label=3;case 3:return[2]}}))}))}function Rl(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return(n=Co(t)).currentUser.isEqual(e)?[3,3]:(Ao("SyncEngine","User change. New user:",e.Ys()),[4,cf(n.Kc,e)]);case 1:return r=i.sent(),n.currentUser=e,function(t,e){t.Gh.forEach((function(t){t.forEach((function(t){t.reject(new Bo(Uo.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Gh.clear()}(n),n.kh.Xu(e,r.Ja,r.Ya),[4,Pl(n,r.Ha)];case 2:i.sent(),i.label=3;case 3:return[2]}}))}))}function Ll(t,e){var n=Co(t),r=n.Kh.get(e);if(r&&r.Fh)return Is().add(r.key);var i=Is(),o=n.qh.get(e);if(!o)return i;for(var s=0,a=o;s<a.length;s++){var u=a[s],c=n.Bh.get(u);i=i.Ot(c.view.Ph)}return i}function Ml(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return[4,yf((n=Co(t)).Kc,e.query,!0)];case 1:return r=o.sent(),i=e.view.Nh(r),[2,(n.Jh&&xl(n,e.targetId,i.Dh),i)]}}))}))}function Vl(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){return[2,mf((e=Co(t)).Kc).then((function(t){return Pl(e,t)}))]}))}))}function jl(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s;return o(this,(function(o){switch(o.label){case 0:return[4,function(t,e){var n=Co(t),r=Co(n.xi);return n.persistence.runTransaction("Lookup mutation documents","readonly",(function(t){return r.jr(t,e).next((function(e){return e?n.Ga.Li(t,e):rc.resolve(null)}))}))}((i=Co(t)).Kc,e)];case 1:return null===(s=o.sent())?[3,6]:"pending"!==n?[3,3]:[4,qf(i.Oh)];case 2:return o.sent(),[3,4];case 3:"acknowledged"===n||"rejected"===n?(Nl(i,e,r||null),Sl(i,e),function(t,e){Co(Co(t).xi).Zr(e)}(i.Kc,e)):No(),o.label=4;case 4:return[4,Pl(i,s)];case 5:return o.sent(),[3,7];case 6:Ao("SyncEngine","Cannot apply mutation batch with id: "+e),o.label=7;case 7:return[2]}}))}))}function Ul(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,h;return o(this,(function(o){switch(o.label){case 0:return Kl(n=Co(t)),Hl(n),!0!==e||!0===n.Hh?[3,3]:(r=n.kh.$u(),[4,Bl(n,r.O())]);case 1:return i=o.sent(),n.Hh=!0,[4,Yf(n.Oh,!0)];case 2:for(o.sent(),s=0,a=i;s<a.length;s++)u=a[s],Cf(n.Oh,u);return[3,7];case 3:return!1!==e||!1===n.Hh?[3,7]:(c=[],h=Promise.resolve(),n.qh.forEach((function(t,e){n.kh.zu(e)?c.push(e):h=h.then((function(){return kl(n,e),vf(n.Kc,e,!0)})),xf(n.Oh,e)})),[4,h]);case 4:return o.sent(),[4,Bl(n,c)];case 5:return o.sent(),function(t){var e=Co(t);e.Kh.forEach((function(t,n){xf(e.Oh,n)})),e.Wh.wu(),e.Kh=new Map,e.Qh=new cs(Wo.V)}(n),n.Hh=!1,[4,Yf(n.Oh,!1)];case 6:o.sent(),o.label=7;case 7:return[2]}}))}))}function Bl(t,e,n){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,h,f,l,p,d,v,y;return o(this,(function(o){switch(o.label){case 0:n=Co(t),r=[],i=[],s=0,a=e,o.label=1;case 1:return s<a.length?(u=a[s],c=void 0,(h=n.qh.get(u))&&0!==h.length?[4,df(n.Kc,xu(h[0]))]:[3,7]):[3,13];case 2:c=o.sent(),f=0,l=h,o.label=3;case 3:return f<l.length?(p=l[f],d=n.Bh.get(p),[4,Ml(n,d)]):[3,6];case 4:(v=o.sent()).snapshot&&i.push(v.snapshot),o.label=5;case 5:return f++,[3,3];case 6:return[3,11];case 7:return[4,gf(n.Kc,u)];case 8:return y=o.sent(),[4,df(n.Kc,y)];case 9:return c=o.sent(),[4,gl(n,Fl(y),u,!1)];case 10:o.sent(),o.label=11;case 11:r.push(c),o.label=12;case 12:return s++,[3,1];case 13:return[2,(n.Lh.Rc(i),r)]}}))}))}function Fl(t){return Eu(t.path,t.collectionGroup,t.orderBy,t.filters,t.limit,"F",t.startAt,t.endAt)}function ql(t){var e=Co(t);return Co(Co(e.Kc).persistence).Ca()}function Gl(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a;return o(this,(function(o){switch(o.label){case 0:return(i=Co(t)).Hh?(Ao("SyncEngine","Ignoring unexpected query state notification."),[3,8]):[3,1];case 1:if(!i.qh.has(e))return[3,8];switch(n){case"current":case"not-current":return[3,2];case"rejected":return[3,5]}return[3,7];case 2:return[4,mf(i.Kc)];case 3:return s=o.sent(),a=Ns.Yt(e,"current"===n),[4,Pl(i,s,a)];case 4:return o.sent(),[3,8];case 5:return[4,vf(i.Kc,e,!0)];case 6:return o.sent(),kl(i,e,r),[3,8];case 7:No(),o.label=8;case 8:return[2]}}))}))}function zl(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a,u,c,h,f,l,p;return o(this,(function(d){switch(d.label){case 0:if(!(r=Kl(t)).Hh)return[3,10];i=0,s=e,d.label=1;case 1:return i<s.length?(a=s[i],r.qh.has(a)?(Ao("SyncEngine","Adding an already active target "+a),[3,5]):[4,gf(r.Kc,a)]):[3,6];case 2:return u=d.sent(),[4,df(r.Kc,u)];case 3:return c=d.sent(),[4,gl(r,Fl(u),c.targetId,!1)];case 4:d.sent(),Cf(r.Oh,c),d.label=5;case 5:return i++,[3,1];case 6:h=function(t){return o(this,(function(e){switch(e.label){case 0:return r.qh.has(t)?[4,vf(r.Kc,t,!1).then((function(){xf(r.Oh,t),kl(r,t)})).catch(wf)]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))},f=0,l=n,d.label=7;case 7:return f<l.length?(p=l[f],[5,h(p)]):[3,10];case 8:d.sent(),d.label=9;case 9:return f++,[3,7];case 10:return[2]}}))}))}function Kl(t){var e=Co(t);return e.Oh.jc.nu=wl.bind(null,e),e.Oh.jc.Be=Ll.bind(null,e),e.Oh.jc.eu=El.bind(null,e),e.Lh.Rc=Ec.bind(null,e.Mh),e.Lh.Xh=Ac.bind(null,e.Mh),e}function Hl(t){var e=Co(t);return e.Oh.jc.su=Al.bind(null,e),e.Oh.jc.iu=_l.bind(null,e),e}var Wl=function(){function t(){}return t.prototype.za=function(t){this.Zh=t},t.prototype.Ui=function(t,e,n,r){var i=this;return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.rn.length||1===t.rn.length&&t.rn[0].field.B())}(e)||n.isEqual(qo.min())?this.tl(t,e):this.Zh.Li(t,r).next((function(o){var s=i.el(e,o);return(_u(e)||Tu(e))&&i.ph(e.limitType,s,r,n)?i.tl(t,e):(Eo()<=P.DEBUG&&Ao("IndexFreeQueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),Mu(e)),i.Zh.Ui(t,e,n).next((function(t){return s.forEach((function(e){t=t.rt(e.key,e)})),t})))}))},t.prototype.el=function(t,e){var n=new ls(ju(t));return e.forEach((function(e,r){r instanceof mu&&Vu(t,r)&&(n=n.add(r))})),n},t.prototype.ph=function(t,e,n,r){if(n.size!==e.size)return!0;var i="F"===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.A(r)>0)},t.prototype.tl=function(t,e){return Eo()<=P.DEBUG&&Ao("IndexFreeQueryEngine","Using full collection scan to execute query:",Mu(e)),this.Zh.Ui(t,e,qo.min())},t}(),Xl=function(){function t(t,e){this.Fi=t,this.Lr=e,this.xi=[],this.nl=1,this.sl=new ls(Zf.cu)}return t.prototype.Ur=function(t){return rc.resolve(0===this.xi.length)},t.prototype.Qr=function(t,e,n,r){var i=this.nl;this.nl++,this.xi.length>0&&this.xi[this.xi.length-1];var o=new Dc(i,e,n,r);this.xi.push(o);for(var s=0,a=r;s<a.length;s++){var u=a[s];this.sl=this.sl.add(new Zf(u.key,i)),this.Fi.Kr(t,u.key.path.S())}return rc.resolve(o)},t.prototype.Wr=function(t,e){return rc.resolve(this.il(e))},t.prototype.Gr=function(t,e){var n=e+1,r=this.rl(n),i=r<0?0:r;return rc.resolve(this.xi.length>i?this.xi[i]:null)},t.prototype.zr=function(){return rc.resolve(0===this.xi.length?-1:this.nl-1)},t.prototype.Hr=function(t){return rc.resolve(this.xi.slice())},t.prototype.Mi=function(t,e){var n=this,r=new Zf(e,0),i=new Zf(e,Number.POSITIVE_INFINITY),o=[];return this.sl.Nt([r,i],(function(t){var e=n.il(t.Eu);o.push(e)})),rc.resolve(o)},t.prototype.qi=function(t,e){var n=this,r=new ls(Do);return e.forEach((function(t){var e=new Zf(t,0),i=new Zf(t,Number.POSITIVE_INFINITY);n.sl.Nt([e,i],(function(t){r=r.add(t.Eu)}))})),rc.resolve(this.ol(r))},t.prototype.Gi=function(t,e){var n=e.path,r=n.length+1,i=n;Wo.G(i)||(i=i.child(""));var o=new Zf(new Wo(i),0),s=new ls(Do);return this.sl.xt((function(t){var e=t.key.path;return!!n.N(e)&&(e.length===r&&(s=s.add(t.Eu)),!0)}),o),rc.resolve(this.ol(s))},t.prototype.ol=function(t){var e=this,n=[];return t.forEach((function(t){var r=e.il(t);null!==r&&n.push(r)})),n},t.prototype.Yr=function(t,e){var n=this;ko(0===this.al(e.batchId,"removed")),this.xi.shift();var r=this.sl;return rc.forEach(e.mutations,(function(i){var o=new Zf(i.key,e.batchId);return r=r.delete(o),n.Lr.eo(t,i.key)})).next((function(){n.sl=r}))},t.prototype.Zr=function(t){},t.prototype.so=function(t,e){var n=new Zf(e,0),r=this.sl.Ft(n);return rc.resolve(e.isEqual(r&&r.key))},t.prototype.no=function(t){return this.xi.length,rc.resolve()},t.prototype.al=function(t,e){return this.rl(t)},t.prototype.rl=function(t){return 0===this.xi.length?0:t-this.xi[0].batchId},t.prototype.il=function(t){var e=this.rl(t);return e<0||e>=this.xi.length?null:this.xi[e]},t}(),Yl=function(){function t(t,e){this.Fi=t,this.cl=e,this.docs=new cs(Wo.V),this.size=0}return t.prototype.Ri=function(t,e,n){var r=e.key,i=this.docs.get(r),o=i?i.size:0,s=this.cl(e);return this.docs=this.docs.rt(r,{gi:e,size:s,readTime:n}),this.size+=s-o,this.Fi.Kr(t,r.path.S())},t.prototype.Vi=function(t){var e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)},t.prototype.yi=function(t,e){var n=this.docs.get(e);return rc.resolve(n?n.gi:null)},t.prototype.getEntries=function(t,e){var n=this,r=ys();return e.forEach((function(t){var e=n.docs.get(t);r=r.rt(t,e?e.gi:null)})),rc.resolve(r)},t.prototype.Ui=function(t,e,n){for(var r=ms(),i=new Wo(e.path.child("")),o=this.docs._t(i);o.It();){var s=o.Et(),a=s.key,u=s.value,c=u.gi,h=u.readTime;if(!e.path.N(a.path))break;h.A(n)<=0||c instanceof mu&&Vu(e,c)&&(r=r.rt(c.key,c))}return rc.resolve(r)},t.prototype.ul=function(t,e){return rc.forEach(this.docs,(function(t){return e(t)}))},t.prototype._o=function(t){return new Jl(this)},t.prototype.wo=function(t){return rc.resolve(this.size)},t}(),Jl=function(t){function n(e){var n=this;return(n=t.call(this)||this).To=e,n}return e(n,t),n.prototype.bi=function(t){var e=this,n=[];return this.Ii.forEach((function(r,i){i&&i.gi?n.push(e.To.Ri(t,i.gi,e.Ai(r))):e.To.Vi(r)})),rc.xn(n)},n.prototype.pi=function(t,e){return this.To.yi(t,e)},n.prototype.vi=function(t,e){return this.To.getEntries(t,e)},n}(Rc),Ql=function(){function t(t){this.persistence=t,this.hl=new jo((function(t){return Zo(t)}),ts),this.lastRemoteSnapshotVersion=qo.min(),this.highestTargetId=0,this.ll=0,this._l=new $f,this.targetCount=0,this.fl=Wh.po()}return t.prototype.De=function(t,e){return this.hl.forEach((function(t,n){return e(n)})),rc.resolve()},t.prototype.Co=function(t){return rc.resolve(this.lastRemoteSnapshotVersion)},t.prototype.No=function(t){return rc.resolve(this.ll)},t.prototype.bo=function(t){return this.highestTargetId=this.fl.next(),rc.resolve(this.highestTargetId)},t.prototype.xo=function(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.ll&&(this.ll=e),rc.resolve()},t.prototype.Oo=function(t){this.hl.set(t.target,t);var e=t.targetId;e>this.highestTargetId&&(this.fl=new Wh(e),this.highestTargetId=e),t.sequenceNumber>this.ll&&(this.ll=t.sequenceNumber)},t.prototype.Fo=function(t,e){return this.Oo(e),this.targetCount+=1,rc.resolve()},t.prototype.ko=function(t,e){return this.Oo(e),rc.resolve()},t.prototype.$o=function(t,e){return this.hl.delete(e.target),this._l.du(e.targetId),this.targetCount-=1,rc.resolve()},t.prototype.Nr=function(t,e,n){var r=this,i=0,o=[];return this.hl.forEach((function(s,a){a.sequenceNumber<=e&&null===n.get(a.targetId)&&(r.hl.delete(s),o.push(r.Lo(t,a.targetId)),i++)})),rc.xn(o).next((function(){return i}))},t.prototype.Bo=function(t){return rc.resolve(this.targetCount)},t.prototype.qo=function(t,e){var n=this.hl.get(e)||null;return rc.resolve(n)},t.prototype.Uo=function(t,e,n){return this._l.lu(e,n),rc.resolve()},t.prototype.Ko=function(t,e,n){this._l.fu(e,n);var r=this.persistence.Lr,i=[];return r&&e.forEach((function(e){i.push(r.eo(t,e))})),rc.xn(i)},t.prototype.Lo=function(t,e){return this._l.du(e),rc.resolve()},t.prototype.jo=function(t,e){var n=this._l.Tu(e);return rc.resolve(n)},t.prototype.so=function(t,e){return rc.resolve(this._l.so(e))},t}(),$l=function(){function t(t){this.serializer=t,this.dl=new Map,this.wl=new Map}return t.prototype.mo=function(t,e){return rc.resolve(this.dl.get(e))},t.prototype.Ao=function(t,e){var n;return this.dl.set(e.id,{id:(n=e).id,version:n.version,createTime:fa(n.createTime)}),rc.resolve()},t.prototype.Ro=function(t,e){return rc.resolve(this.wl.get(e))},t.prototype.Po=function(t,e){var n;return this.wl.set(e.name,{name:(n=e).name,query:uh(n.bundledQuery),readTime:fa(n.readTime)}),rc.resolve()},t}(),Zl=function(){function t(t,e){var n=this;this.Tl={},this.Jo=new Fc(0),this.Yo=!1,this.Yo=!0,this.Lr=t(this),this.ra=new Ql(this),this.Fi=new Ih,this.Ni=function(t,e){return new Yl(t,(function(t){return n.Lr.El(t)}))}(this.Fi),this.serializer=new $c(e),this.oa=new $l(this.serializer)}return t.prototype.start=function(){return Promise.resolve()},t.prototype.pa=function(){return this.Yo=!1,Promise.resolve()},Object.defineProperty(t.prototype,"yr",{get:function(){return this.Yo},enumerable:!1,configurable:!0}),t.prototype.fa=function(){},t.prototype.da=function(){},t.prototype.Oa=function(){return this.Fi},t.prototype.Na=function(t){var e=this.Tl[t.Ys()];return e||(e=new Xl(this.Fi,this.Lr),this.Tl[t.Ys()]=e),e},t.prototype.xa=function(){return this.ra},t.prototype.Fa=function(){return this.Ni},t.prototype.Ma=function(){return this.oa},t.prototype.runTransaction=function(t,e,n){var r=this;Ao("MemoryPersistence","Starting transaction:",t);var i=new tp(this.Jo.next());return this.Lr.Il(),n(i).next((function(t){return r.Lr.ml(i).next((function(){return t}))})).Cn().then((function(t){return i.Ci(),t}))},t.prototype.Al=function(t,e){return rc.Fn(Object.values(this.Tl).map((function(n){return function(){return n.so(t,e)}})))},t}(),tp=function(t){function n(e){var n=this;return(n=t.call(this)||this).Go=e,n}return e(n,t),n}(jc),ep=function(){function t(t){this.persistence=t,this.Rl=new $f,this.Pl=null}return t.gl=function(e){return new t(e)},Object.defineProperty(t.prototype,"Vl",{get:function(){if(this.Pl)return this.Pl;throw No()},enumerable:!1,configurable:!0}),t.prototype.Qo=function(t,e,n){return this.Rl.Qo(n,e),this.Vl.delete(n.toString()),rc.resolve()},t.prototype.Wo=function(t,e,n){return this.Rl.Wo(n,e),this.Vl.add(n.toString()),rc.resolve()},t.prototype.eo=function(t,e){return this.Vl.add(e.toString()),rc.resolve()},t.prototype.removeTarget=function(t,e){var n=this;this.Rl.du(e.targetId).forEach((function(t){return n.Vl.add(t.toString())}));var r=this.persistence.xa();return r.jo(t,e.targetId).next((function(t){t.forEach((function(t){return n.Vl.add(t.toString())}))})).next((function(){return r.$o(t,e)}))},t.prototype.Il=function(){this.Pl=new Set},t.prototype.ml=function(t){var e=this,n=this.persistence.Fa()._o();return rc.forEach(this.Vl,(function(r){var i=Wo.K(r);return e.yl(t,i).next((function(t){t||n.Vi(i)}))})).next((function(){return e.Pl=null,n.apply(t)}))},t.prototype.qa=function(t,e){var n=this;return this.yl(t,e).next((function(t){t?n.Vl.delete(e.toString()):n.Vl.add(e.toString())}))},t.prototype.El=function(t){return 0},t.prototype.yl=function(t,e){var n=this;return rc.Fn([function(){return rc.resolve(n.Rl.so(e))},function(){return n.persistence.xa().so(t,e)},function(){return n.persistence.Al(t,e)}])},t}(),np=function(){function t(t){this.pl=t.pl,this.vl=t.vl}return t.prototype.mc=function(t){this.bl=t},t.prototype.dc=function(t){this.Sl=t},t.prototype.onMessage=function(t){this.Dl=t},t.prototype.close=function(){this.vl()},t.prototype.send=function(t){this.pl(t)},t.prototype.Cl=function(){this.bl()},t.prototype.Nl=function(t){this.Sl(t)},t.prototype.xl=function(t){this.Dl(t)},t}(),rp={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"},ip=function(t){function n(e){var n=this;return(n=t.call(this,e)||this).forceLongPolling=e.forceLongPolling,n.i=e.i,n}return e(n,t),n.prototype.Ll=function(t,e,n,r){return new Promise((function(i,o){var s=new mo;s.listenOnce(yo.COMPLETE,(function(){try{switch(s.getLastErrorCode()){case vo.NO_ERROR:var e=s.getResponseJson();Ao("Connection","XHR received:",JSON.stringify(e)),i(e);break;case vo.TIMEOUT:Ao("Connection",'RPC "'+t+'" timed out'),o(new Bo(Uo.DEADLINE_EXCEEDED,"Request time out"));break;case vo.HTTP_ERROR:var n=s.getStatus();if(Ao("Connection",'RPC "'+t+'" failed with status:',n,"response text:",s.getResponseText()),n>0){var r=s.getResponseJson().error;if(r&&r.status&&r.message){var a=function(t){var e=t.toLowerCase().replace("_","-");return Object.values(Uo).indexOf(e)>=0?e:Uo.UNKNOWN}(r.status);o(new Bo(a,r.message))}else o(new Bo(Uo.UNKNOWN,"Server responded with status "+s.getStatus()))}else o(new Bo(Uo.UNAVAILABLE,"Connection failed."));break;default:No()}}finally{Ao("Connection",'RPC "'+t+'" completed.')}}));var a=JSON.stringify(r);s.send(e,"POST",a,n,15)}))},n.prototype.Ac=function(t,e){var n=[this.Ol,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=new co,i={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:"projects/"+this.t.projectId+"/databases/"+this.t.database},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.i};this.$l(i.initMessageHeaders,e),"undefined"!=typeof window&&(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(l())||"object"==typeof navigator&&"ReactNative"===navigator.product||l().indexOf("Electron/")>=0||function(){var t=l();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}()||l().indexOf("MSAppHost/")>=0||d()||(i.httpHeadersOverwriteParam="$httpHeaders");var o=n.join("");Ao("Connection","Creating WebChannel: "+o,i);var s=r.createWebChannel(o,i),a=!1,u=!1,c=new np({pl:function(t){u?Ao("Connection","Not sending because WebChannel is closed:",t):(a||(Ao("Connection","Opening WebChannel transport."),s.open(),a=!0),Ao("Connection","WebChannel sending:",t),s.send(t))},vl:function(){return s.close()}}),h=function(t,e){s.listen(t,(function(t){try{e(t)}catch(t){setTimeout((function(){throw t}),0)}}))};return h(go.EventType.OPEN,(function(){u||Ao("Connection","WebChannel transport opened.")})),h(go.EventType.CLOSE,(function(){u||(u=!0,Ao("Connection","WebChannel transport closed"),c.Nl())})),h(go.EventType.ERROR,(function(t){u||(u=!0,To("Connection","WebChannel transport errored:",t),c.Nl(new Bo(Uo.UNAVAILABLE,"The operation could not be completed")))})),h(go.EventType.MESSAGE,(function(t){var e;if(!u){var n=t.data[0];ko(!!n);var r=n,i=r.error||(null===(e=r[0])||void 0===e?void 0:e.error);if(i){Ao("Connection","WebChannel received error:",i);var o=i.status,a=function(t){var e=rs[t];if(void 0!==e)return us(e)}(o),h=i.message;void 0===a&&(a=Uo.INTERNAL,h="Unknown error status: "+o+" with message "+i.message),u=!0,c.Nl(new Bo(a,h)),s.close()}else Ao("Connection","WebChannel received:",n),c.xl(n)}})),setTimeout((function(){c.Cl()}),0),c},n}(function(){function t(t){this.Fl=t,this.t=t.t;var e=t.ssl?"https":"http";this.Ol=e+"://"+t.host,this.Ml="projects/"+this.t.projectId+"/databases/"+this.t.database+"/documents"}return t.prototype.xc=function(t,e,n,r){var i=this.kl(t,e);Ao("RestConnection","Sending: ",i,n);var o={};return this.$l(o,r),this.Ll(t,i,o,n).then((function(t){return Ao("RestConnection","Received: ",t),t}),(function(e){throw To("RestConnection",t+" failed with error: ",e,"url: ",i,"request:",n),e}))},t.prototype.Fc=function(t,e,n,r){return this.xc(t,e,n,r)},t.prototype.$l=function(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/8.0.2",t["Content-Type"]="text/plain",e)for(var n in e.ti)e.ti.hasOwnProperty(n)&&(t[n]=e.ti[n])},t.prototype.kl=function(t,e){var n=rp[t];return this.Ol+"/v1/"+e+":"+n},t}()),op=function(){function t(){var t=this;this.Bl=function(){return t.ql()},this.Ul=function(){return t.Ql()},this.Kl=[],this.Wl()}return t.prototype.Xc=function(t){this.Kl.push(t)},t.prototype.pa=function(){window.removeEventListener("online",this.Bl),window.removeEventListener("offline",this.Ul)},t.prototype.Wl=function(){window.addEventListener("online",this.Bl),window.addEventListener("offline",this.Ul)},t.prototype.ql=function(){Ao("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(var t=0,e=this.Kl;t<e.length;t++)(0,e[t])(0)},t.prototype.Ql=function(){Ao("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(var t=0,e=this.Kl;t<e.length;t++)(0,e[t])(1)},t.kn=function(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener},t}(),sp=function(){function t(){}return t.prototype.Xc=function(t){},t.prototype.pa=function(){},t}(),ap=function(){function t(){this.synchronizeTabs=!1}return t.prototype.initialize=function(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return this.serializer=Lc(t.Fl.t),this.kh=this.jl(t),this.persistence=this.Gl(t),[4,this.persistence.start()];case 1:return e.sent(),this.zl=this.Hl(t),this.Kc=this.Jl(t),[2]}}))}))},t.prototype.Hl=function(t){return null},t.prototype.Jl=function(t){return uf(this.persistence,new Wl,t.Yl,this.serializer)},t.prototype.Gl=function(t){return new Zl(ep.gl,this.serializer)},t.prototype.jl=function(t){return new cl},t.prototype.terminate=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return this.zl&&this.zl.stop(),[4,this.kh.pa()];case 1:return t.sent(),[4,this.persistence.pa()];case 2:return t.sent(),[2]}}))}))},t}(),up=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).Xl=e,i.cacheSizeBytes=n,i.forceOwnership=r,i.synchronizeTabs=!1,i}return e(n,t),n.prototype.initialize=function(e){return i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,t.prototype.initialize.call(this,e)];case 1:return n.sent(),[4,bf(this.Kc)];case 2:return n.sent(),[4,this.Xl.initialize(this,e)];case 3:return n.sent(),[4,Hl(this.Xl.gu)];case 4:return n.sent(),[4,qf(this.Xl.Oh)];case 5:return n.sent(),[2]}}))}))},n.prototype.Jl=function(t){return uf(this.persistence,new Wl,t.Yl,this.serializer)},n.prototype.Hl=function(t){var e=this.persistence.Lr.Rr;return new Hc(e,t.rs)},n.prototype.Gl=function(t){var e=sf(t.Fl.t,t.Fl.persistenceKey),n=void 0!==this.cacheSizeBytes?Kc.Tr(this.cacheSizeBytes):Kc.mr;return new tf(this.synchronizeTabs,e,t.clientId,n,t.rs,pc(),dc(),this.serializer,this.kh,!!this.forceOwnership)},n.prototype.jl=function(t){return new cl},n}(ap),cp=function(t){function n(e,n){var r=this;return(r=t.call(this,e,n,!1)||this).Xl=e,r.cacheSizeBytes=n,r.synchronizeTabs=!0,r}return e(n,t),n.prototype.initialize=function(e){return i(this,void 0,void 0,(function(){var n,r=this;return o(this,(function(s){switch(s.label){case 0:return[4,t.prototype.initialize.call(this,e)];case 1:return s.sent(),n=this.Xl.gu,this.kh instanceof ul?(this.kh.gu={_h:jl.bind(null,n),fh:Gl.bind(null,n),dh:zl.bind(null,n),Ca:ql.bind(null,n),lh:Vl.bind(null,n)},[4,this.kh.start()]):[3,3];case 2:s.sent(),s.label=3;case 3:return[4,this.persistence._a((function(t){return i(r,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,Ul(this.Xl.gu,t)];case 1:return e.sent(),this.zl&&(t&&!this.zl.yr?this.zl.start(this.Kc):t||this.zl.stop()),[2]}}))}))}))];case 4:return s.sent(),[2]}}))}))},n.prototype.jl=function(t){var e=pc();if(!ul.kn(e))throw new Bo(Uo.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");var n=sf(t.Fl.t,t.Fl.persistenceKey);return new ul(e,t.rs,n,t.clientId,t.Yl)},n}(up),hp=function(){function t(){}return t.prototype.initialize=function(t,e){return i(this,void 0,void 0,(function(){var n=this;return o(this,(function(r){switch(r.label){case 0:return this.Kc?[3,2]:(this.Kc=t.Kc,this.kh=t.kh,this.Wc=this.Zl(e),this.Oh=this.t_(e),this.Mh=this.e_(e),this.gu=this.n_(e,!t.synchronizeTabs),this.kh.Oc=function(t){return Il(n.gu,t,1)},this.Oh.jc.s_=Rl.bind(null,this.gu),[4,Yf(this.Oh,this.gu.Jh)]);case 1:r.sent(),r.label=2;case 2:return[2]}}))}))},t.prototype.e_=function(t){return new bc},t.prototype.Zl=function(t){var e,n=Lc(t.Fl.t),r=(e=t.Fl,new ip(e));return function(t,e,n){return new _f(t,e,n)}(t.credentials,r,n)},t.prototype.t_=function(t){var e,n,r,i,o,s=this;return e=this.Kc,n=this.Wc,r=t.rs,i=function(t){return Il(s.gu,t,0)},o=op.kn()?new op:new sp,new Sf(e,n,r,i,o)},t.prototype.n_=function(t,e){return function(t,e,n,r,i,o,s){var a=new vl(t,e,n,r,i,o);return s&&(a.Hh=!0),a}(this.Kc,this.Oh,this.Mh,this.kh,t.Yl,t.$h,e)},t.prototype.terminate=function(){return function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=Co(t),Ao("RemoteStore","RemoteStore shutting down."),e.Hc.add(5),[4,kf(e)];case 1:return n.sent(),e.Yc.pa(),e.Zc.set("Unknown"),[2]}}))}))}(this.Oh)},t}(),fp=function(){function t(t){this.observer=t,this.muted=!1}return t.prototype.next=function(t){this.observer.next&&this.i_(this.observer.next,t)},t.prototype.error=function(t){this.observer.error?this.i_(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t)},t.prototype.r_=function(){this.muted=!0},t.prototype.i_=function(t,e){var n=this;this.muted||setTimeout((function(){n.muted||t(e)}),0)},t}(),lp=function(t){this.o_=t};function pp(t,e,n){if(!n)throw new Bo(Uo.INVALID_ARGUMENT,"Function "+t+"() cannot be called with an empty "+e+".")}function dp(t,e){if(void 0===e)return{merge:!1};if(void 0!==e.mergeFields&&void 0!==e.merge)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid options passed to function "+t+'(): You cannot specify both "merge" and "mergeFields".');return e}function vp(t,e,n,r){if(!0===e&&!0===r)throw new Bo(Uo.INVALID_ARGUMENT,t+" and "+n+" cannot be used together.")}function yp(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=t.substring(0,20)+"..."),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";var e=function(t){if(t.constructor){var e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?"a custom "+e+" object":"an object"}return"function"==typeof t?"a function":No()}function gp(t,e){if(t instanceof lp&&(t=t.o_),!(t instanceof e)){if(e.name===t.constructor.name)throw new Bo(Uo.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");var n=yp(t);throw new Bo(Uo.INVALID_ARGUMENT,"Expected type '"+e.name+"', but it was: "+n)}return t}function mp(t,e){if(e<=0)throw new Bo(Uo.INVALID_ARGUMENT,"Function "+t+"() requires a positive number, but it was: "+e+".")}var bp=function(t){this.a_=t},wp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.c_=function(t){if(2!==t.u_)throw 1===t.u_?t.h_(this.a_+"() can only appear at the top level of your update data"):t.h_(this.a_+"() cannot be used with set() unless you pass {merge:true}");return t.Qe.push(t.path),null},n.prototype.isEqual=function(t){return t instanceof n},n}(bp);function Ip(t,e,n){return new Wp({u_:3,l_:e.settings.l_,methodName:t.a_,__:n},e.t,e.serializer,e.ignoreUndefinedProperties)}var Ep=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.c_=function(t){return new Ja(t.path,new Fa)},n.prototype.isEqual=function(t){return t instanceof n},n}(bp),Ap=function(t){function n(e,n){var r=this;return(r=t.call(this,e)||this).f_=n,r}return e(n,t),n.prototype.c_=function(t){var e=Ip(this,t,!0),n=this.f_.map((function(t){return Zp(t,e)})),r=new qa(n);return new Ja(t.path,r)},n.prototype.isEqual=function(t){return this===t},n}(bp),_p=function(t){function n(e,n){var r=this;return(r=t.call(this,e)||this).f_=n,r}return e(n,t),n.prototype.c_=function(t){var e=Ip(this,t,!0),n=this.f_.map((function(t){return Zp(t,e)})),r=new za(n);return new Ja(t.path,r)},n.prototype.isEqual=function(t){return this===t},n}(bp),Tp=function(t){function n(e,n){var r=this;return(r=t.call(this,e)||this).d_=n,r}return e(n,t),n.prototype.c_=function(t){var e=new Ha(t.serializer,aa(t.serializer,this.d_));return new Ja(t.path,e)},n.prototype.isEqual=function(t){return this===t},n}(bp),Sp=function(){function t(t,e){if(!isFinite(t)||t<-90||t>90)throw new Bo(Uo.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new Bo(Uo.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this.w_=t,this.T_=e}return Object.defineProperty(t.prototype,"latitude",{get:function(){return this.w_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"longitude",{get:function(){return this.T_},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){return this.w_===t.w_&&this.T_===t.T_},t.prototype.toJSON=function(){return{latitude:this.w_,longitude:this.T_}},t.prototype.I=function(t){return Do(this.w_,t.w_)||Do(this.T_,t.T_)},t}(),Np=function(){function t(t){this.E_=t}return t.fromBase64String=function(e){try{return new t(ns.fromBase64String(e))}catch(e){throw new Bo(Uo.INVALID_ARGUMENT,"Failed to construct Bytes from Base64 string: "+e)}},t.fromUint8Array=function(e){return new t(ns.fromUint8Array(e))},t.prototype.toBase64=function(){return this.E_.toBase64()},t.prototype.toUint8Array=function(){return this.E_.toUint8Array()},t.prototype.toString=function(){return"Bytes(base64: "+this.toBase64()+")"},t.prototype.isEqual=function(t){return this.E_.isEqual(t.E_)},t}(),kp=new Map,Cp=function(){function t(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new Bo(Uo.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new Bo(Uo.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,vp("experimentalForceLongPolling",t.experimentalForceLongPolling,"experimentalAutoDetectLongPolling",t.experimentalAutoDetectLongPolling)}return t.prototype.isEqual=function(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties},t}();function xp(){if("undefined"==typeof Uint8Array)throw new Bo(Uo.UNIMPLEMENTED,"Uint8Arrays are not available in this environment.")}function Op(){if("undefined"==typeof atob)throw new Bo(Uo.UNIMPLEMENTED,"Blobs are unavailable in Firestore in this environment.")}var Dp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.fromBase64String=function(t){Op();try{return new n(ns.fromBase64String(t))}catch(t){throw new Bo(Uo.INVALID_ARGUMENT,"Failed to construct Blob from Base64 string: "+t)}},n.fromUint8Array=function(t){return xp(),new n(ns.fromUint8Array(t))},n.prototype.toBase64=function(){return Op(),t.prototype.toBase64.call(this)},n.prototype.toUint8Array=function(){return xp(),t.prototype.toUint8Array.call(this)},n.prototype.toString=function(){return"Blob(base64: "+this.toBase64()+")"},n}(Np),Pp=function(){function t(){}return t.prototype.I_=function(t,e){switch(void 0===e&&(e="none"),Bs(t)){case 0:return null;case 1:return t.booleanValue;case 2:return Xs(t.integerValue||t.doubleValue);case 3:return this.m_(t.timestampValue);case 4:return this.A_(t,e);case 5:return t.stringValue;case 6:return this.R_(Ys(t.bytesValue));case 7:return this.P_(t.referenceValue);case 8:return this.g_(t.geoPointValue);case 9:return this.V_(t.arrayValue,e);case 10:return this.y_(t.mapValue,e);default:throw No()}},t.prototype.y_=function(t,e){var n=this,r={};return Mo(t.fields||{},(function(t,i){r[t]=n.I_(i,e)})),r},t.prototype.g_=function(t){return new Sp(Xs(t.latitude),Xs(t.longitude))},t.prototype.V_=function(t,e){var n=this;return(t.values||[]).map((function(t){return n.I_(t,e)}))},t.prototype.A_=function(t,e){switch(e){case"previous":var n=Vs(t);return null==n?null:this.I_(n,e);case"estimate":return this.m_(js(t));default:return null}},t.prototype.m_=function(t){var e=Ws(t);return new Fo(e.seconds,e.nanos)},t.prototype.p_=function(t,e){var n=zo.k(t);ko(Ma(n));var r=new wo(n.get(1),n.get(3)),i=new Wo(n.v(5));return r.isEqual(e)||_o("Document "+i+" contains a document reference within a different database ("+r.projectId+"/"+r.database+") which is not supported. It will be treated as a reference in the current database ("+e.projectId+"/"+e.database+") instead."),i},t}(),Rp=function(t){function n(e){var n=this;return(n=t.call(this)||this).firestore=e,n}return e(n,t),n.prototype.R_=function(t){return new Dp(t)},n.prototype.P_=function(t){var e=this.p_(t,this.firestore.v_);return Fd.b_(e,this.firestore,null)},n}(Pp),Lp=function(){function t(t,e,n,r,i){this.S_=t,this.D_=e,this.C_=n,this.N_=r,this.x_=i}return Object.defineProperty(t.prototype,"id",{get:function(){return this.C_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"ref",{get:function(){return new Up(this.S_,this.x_,this.C_)},enumerable:!1,configurable:!0}),t.prototype.exists=function(){return null!==this.N_},t.prototype.data=function(){if(this.N_){if(this.x_){var t=new Mp(this.S_,this.D_,this.C_,this.N_,null);return this.x_.fromFirestore(t)}return this.D_.I_(this.N_.sn())}},t.prototype.get=function(t){if(this.N_){var e=this.N_.data().field(Vp("DocumentSnapshot.get",t));if(null!==e)return this.D_.I_(e)}},t}(),Mp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.data=function(){return t.prototype.data.call(this)},n}(Lp);function Vp(t,e){return"string"==typeof e?od(t,e):e instanceof lp?e.o_.F_:e.F_}var jp=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=0;n<t.length;++n)if(0===t[n].length)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this.F_=new Ho(t)}return t.prototype.isEqual=function(t){return this.F_.isEqual(t.F_)},t}(),Up=function(){function t(t,e,n){this.x_=e,this.C_=n,this.type="document",this.firestore=t}return Object.defineProperty(t.prototype,"O_",{get:function(){return this.C_.path},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"id",{get:function(){return this.C_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"path",{get:function(){return this.C_.path.M()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return new Fp(this.firestore,this.x_,this.C_.path.S())},enumerable:!1,configurable:!0}),t.prototype.withConverter=function(e){return new t(this.firestore,e,this.C_)},t}(),Bp=function(){function t(t,e,n){this.x_=e,this.M_=n,this.type="query",this.firestore=t}return t.prototype.withConverter=function(e){return new t(this.firestore,e,this.M_)},t}(),Fp=function(t){function n(e,n,r){var i=this;return(i=t.call(this,e,n,Au(r))||this).firestore=e,i.O_=r,i.type="collection",i}return e(n,t),Object.defineProperty(n.prototype,"id",{get:function(){return this.M_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"path",{get:function(){return this.M_.path.M()},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"parent",{get:function(){var t=this.O_.S();return t.T()?null:new Up(this.firestore,null,new Wo(t))},enumerable:!1,configurable:!0}),n.prototype.withConverter=function(t){return new n(this.firestore,t,this.O_)},n}(Bp);function qp(t){var e=t.k_(),n=Lc(t.v_);return new Xp(t.v_,!!e.ignoreUndefinedProperties,n)}var Gp=/^__.*__$/,zp=function(){function t(t,e,n){this.data=t,this.Qe=e,this.fieldTransforms=n}return t.prototype.L_=function(t,e){var n=[];return null!==this.Qe?n.push(new au(t,this.data,this.Qe,e)):n.push(new su(t,this.data,e)),this.fieldTransforms.length>0&&n.push(new cu(t,this.fieldTransforms)),n},t}(),Kp=function(){function t(t,e,n){this.data=t,this.Qe=e,this.fieldTransforms=n}return t.prototype.L_=function(t,e){var n=[new au(t,this.data,this.Qe,e)];return this.fieldTransforms.length>0&&n.push(new cu(t,this.fieldTransforms)),n},t}();function Hp(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw No()}}var Wp=function(){function t(t,e,n,r,i,o){this.settings=t,this.t=e,this.serializer=n,this.ignoreUndefinedProperties=r,void 0===i&&this.B_(),this.fieldTransforms=i||[],this.Qe=o||[]}return Object.defineProperty(t.prototype,"path",{get:function(){return this.settings.path},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"u_",{get:function(){return this.settings.u_},enumerable:!1,configurable:!0}),t.prototype.q_=function(e){return new t(Object.assign(Object.assign({},this.settings),e),this.t,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.Qe)},t.prototype.U_=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.q_({path:n,__:!1});return r.Q_(t),r},t.prototype.K_=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.q_({path:n,__:!1});return r.B_(),r},t.prototype.W_=function(t){return this.q_({path:void 0,__:!0})},t.prototype.h_=function(t){return sd(t,this.settings.methodName,this.settings.j_||!1,this.path,this.settings.l_)},t.prototype.contains=function(t){return void 0!==this.Qe.find((function(e){return t.N(e)}))||void 0!==this.fieldTransforms.find((function(e){return t.N(e.field)}))},t.prototype.B_=function(){if(this.path)for(var t=0;t<this.path.length;t++)this.Q_(this.path.get(t))},t.prototype.Q_=function(t){if(0===t.length)throw this.h_("Document fields must not be empty");if(Hp(this.u_)&&Gp.test(t))throw this.h_('Document fields cannot begin and end with "__"')},t}(),Xp=function(){function t(t,e,n){this.t=t,this.ignoreUndefinedProperties=e,this.serializer=n||Lc(t)}return t.prototype.G_=function(t,e,n,r){return void 0===r&&(r=!1),new Wp({u_:t,methodName:e,l_:n,path:Ho.$(),__:!1,j_:r},this.t,this.serializer,this.ignoreUndefinedProperties)},t}();function Yp(t,e,n,r,i,o){void 0===o&&(o={});var s=t.G_(o.merge||o.mergeFields?2:0,e,n,i);nd("Data must be an object, but it was:",s,r);var a,u,c=td(r,s);if(o.merge)a=new Ya(s.Qe),u=s.fieldTransforms;else if(o.mergeFields){for(var h=[],f=0,l=o.mergeFields;f<l.length;f++){var p=rd(e,l[f],n);if(!s.contains(p))throw new Bo(Uo.INVALID_ARGUMENT,"Field '"+p+"' is specified in your field mask but missing from your input data.");ad(h,p)||h.push(p)}a=new Ya(h),u=s.fieldTransforms.filter((function(t){return a.He(t.field)}))}else a=null,u=s.fieldTransforms;return new zp(new du(c),a,u)}function Jp(t,e,n,r){var i=t.G_(1,e,n);nd("Data must be an object, but it was:",i,r);var o=[],s=new vu;Mo(r,(function(t,r){var a=od(e,t,n);r instanceof lp&&(r=r.o_);var u=i.K_(a);if(r instanceof wp)o.push(a);else{var c=Zp(r,u);null!=c&&(o.push(a),s.set(a,c))}}));var a=new Ya(o);return new Kp(s.Ye(),a,i.fieldTransforms)}function Qp(t,e,n,r,i,o){var s=t.G_(1,e,n),a=[rd(e,r,n)],u=[i];if(o.length%2!=0)throw new Bo(Uo.INVALID_ARGUMENT,"Function "+e+"() needs to be called with an even number of arguments that alternate between field names and values.");for(var c=0;c<o.length;c+=2)a.push(rd(e,o[c])),u.push(o[c+1]);for(var h=[],f=new vu,l=a.length-1;l>=0;--l)if(!ad(h,a[l])){var p=a[l],d=u[l];d instanceof lp&&(d=d.o_);var v=s.K_(p);if(d instanceof wp)h.push(p);else{var y=Zp(d,v);null!=y&&(h.push(p),f.set(p,y))}}var g=new Ya(h);return new Kp(f.Ye(),g,s.fieldTransforms)}function $p(t,e,n,r){return void 0===r&&(r=!1),Zp(n,t.G_(r?4:3,e))}function Zp(t,e){if(t instanceof lp&&(t=t.o_),ed(t))return nd("Unsupported field value:",e,t),td(t,e);if(t instanceof bp)return function(t,e){if(!Hp(e.u_))throw e.h_(t.a_+"() can only be used with update() and set()");if(!e.path)throw e.h_(t.a_+"() is not currently supported inside arrays");var n=t.c_(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(e.path&&e.Qe.push(e.path),t instanceof Array){if(e.settings.__&&4!==e.u_)throw e.h_("Nested arrays are not supported");return function(t,e){for(var n=[],r=0,i=0,o=t;i<o.length;i++){var s=Zp(o[i],e.W_(r));null==s&&(s={nullValue:"NULL_VALUE"}),n.push(s),r++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(t instanceof lp&&(t=t.o_),null===t)return{nullValue:"NULL_VALUE"};if("number"==typeof t)return aa(e.serializer,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){var n=Fo.fromDate(t);return{timestampValue:ua(e.serializer,n)}}if(t instanceof Fo){var r=new Fo(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:ua(e.serializer,r)}}if(t instanceof Sp)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof Np)return{bytesValue:ca(e.serializer,t.E_)};if(t instanceof Up){var i=e.t,o=t.firestore.v_;if(!o.isEqual(i))throw e.h_("Document reference is for database "+o.projectId+"/"+o.database+" but should be for database "+i.projectId+"/"+i.database);return{referenceValue:la(t.firestore.v_||e.t,t.C_.path)}}if(void 0===t&&e.ignoreUndefinedProperties)return null;throw e.h_("Unsupported field value: "+yp(t))}(t,e)}function td(t,e){var n={};return Vo(t)?e.path&&e.path.length>0&&e.Qe.push(e.path):Mo(t,(function(t,r){var i=Zp(r,e.U_(t));null!=i&&(n[t]=i)})),{mapValue:{fields:n}}}function ed(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof Fo||t instanceof Sp||t instanceof Np||t instanceof Up||t instanceof bp)}function nd(t,e,n){if(!ed(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){var r=yp(n);throw"an object"===r?e.h_(t+" a custom object"):e.h_(t+" "+r)}}function rd(t,e,n){if(e instanceof lp&&(e=e.o_),e instanceof jp)return e.F_;if("string"==typeof e)return od(t,e);throw sd("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}var id=new RegExp("[~\\*/\\[\\]]");function od(t,e,n){if(e.search(id)>=0)throw sd("Invalid field path ("+e+"). Paths must not contain '~', '*', '/', '[', or ']'",t,!1,void 0,n);try{return(new(jp.bind.apply(jp,c([void 0],e.split("."))))).F_}catch(r){throw sd("Invalid field path ("+e+"). Paths must not be empty, begin with '.', end with '.', or contain '..'",t,!1,void 0,n)}}function sd(t,e,n,r,i){var o=r&&!r.T(),s=void 0!==i,a="Function "+e+"() called with invalid data";n&&(a+=" (via `toFirestore()`)");var u="";return(o||s)&&(u+=" (found",o&&(u+=" in field "+r),s&&(u+=" in document "+i),u+=")"),new Bo(Uo.INVALID_ARGUMENT,(a+=". ")+t+u)}function ad(t,e){return t.some((function(t){return t.isEqual(e)}))}var ud=function(){function t(t){this.Wc=t,this.z_=new Map,this.mutations=[],this.H_=!1,this.J_=null,this.Y_=new Set}return t.prototype.X_=function(t){return i(this,void 0,void 0,(function(){var e,n=this;return o(this,(function(r){switch(r.label){case 0:if(this.Z_(),this.mutations.length>0)throw new Bo(Uo.INVALID_ARGUMENT,"Firestore transactions require all reads to be executed before all writes.");return[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=ma(n.serializer)+"/documents",i={documents:e.map((function(t){return da(n.serializer,t)}))},[4,n.Fc("BatchGetDocuments",r,i)];case 1:return s=o.sent(),a=new Map,s.forEach((function(t){var e=function(t,e){return"found"in e?function(t,e){ko(!!e.found),e.found.name,e.found.updateTime;var n=va(t,e.found.name),r=fa(e.found.updateTime),i=new du({mapValue:{fields:e.found.fields}});return new mu(n,r,i,{})}(t,e):"missing"in e?function(t,e){ko(!!e.missing),ko(!!e.readTime);var n=va(t,e.missing),r=fa(e.readTime);return new bu(n,r)}(t,e):No()}(n.serializer,t);a.set(e.key.toString(),e)})),u=[],[2,(e.forEach((function(t){var e=a.get(t.toString());ko(!!e),u.push(e)})),u)]}}))}))}(this.Wc,t)];case 1:return[2,((e=r.sent()).forEach((function(t){t instanceof bu||t instanceof mu?n.tf(t):No()})),e)]}}))}))},t.prototype.set=function(t,e){this.write(e.L_(t,this.je(t))),this.Y_.add(t.toString())},t.prototype.update=function(t,e){try{this.write(e.L_(t,this.ef(t)))}catch(t){this.J_=t}this.Y_.add(t.toString())},t.prototype.delete=function(t){this.write([new lu(t,this.je(t))]),this.Y_.add(t.toString())},t.prototype.commit=function(){return i(this,void 0,void 0,(function(){var t,e=this;return o(this,(function(n){switch(n.label){case 0:if(this.Z_(),this.J_)throw this.J_;return t=this.z_,this.mutations.forEach((function(e){t.delete(e.key.toString())})),t.forEach((function(t,n){var r=Wo.K(n);e.mutations.push(new pu(r,e.je(r)))})),[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=ma(n.serializer)+"/documents",i={writes:e.map((function(t){return Ia(n.serializer,t)}))},[4,n.xc("Commit",r,i)];case 1:return o.sent(),[2]}}))}))}(this.Wc,this.mutations)];case 1:return n.sent(),this.H_=!0,[2]}}))}))},t.prototype.tf=function(t){var e;if(t instanceof mu)e=t.version;else{if(!(t instanceof bu))throw No();e=qo.min()}var n=this.z_.get(t.key.toString());if(n){if(!e.isEqual(n))throw new Bo(Uo.ABORTED,"Document version changed between two reads.")}else this.z_.set(t.key.toString(),e)},t.prototype.je=function(t){var e=this.z_.get(t.toString());return!this.Y_.has(t.toString())&&e?$a.updateTime(e):$a.Ge()},t.prototype.ef=function(t){var e=this.z_.get(t.toString());if(!this.Y_.has(t.toString())&&e){if(e.isEqual(qo.min()))throw new Bo(Uo.INVALID_ARGUMENT,"Can't update a document that doesn't exist.");return $a.updateTime(e)}return $a.exists(!0)},t.prototype.write=function(t){this.Z_(),this.mutations=this.mutations.concat(t)},t.prototype.Z_=function(){},t}(),cd=function(){function t(t,e,n,r){this.rs=t,this.Wc=e,this.updateFunction=n,this.us=r,this.nf=5,this.Ps=new nc(this.rs,"transaction_retry")}return t.prototype.run=function(){this.sf()},t.prototype.sf=function(){var t=this;this.Ps.An((function(){return i(t,void 0,void 0,(function(){var t,e,n=this;return o(this,(function(r){return t=new ud(this.Wc),(e=this.rf(t))&&e.then((function(e){n.rs.fs((function(){return t.commit().then((function(){n.us.resolve(e)})).catch((function(t){n.af(t)}))}))})).catch((function(t){n.af(t)})),[2]}))}))}))},t.prototype.rf=function(t){try{var e=this.updateFunction(t);return!Xo(e)&&e.catch&&e.then?e:(this.us.reject(Error("Transaction callback must return a Promise")),null)}catch(t){return this.us.reject(t),null}},t.prototype.af=function(t){var e=this;this.nf>0&&this.cf(t)?(this.nf-=1,this.rs.fs((function(){return e.sf(),Promise.resolve()}))):this.us.reject(t)},t.prototype.cf=function(t){if("FirebaseError"===t.name){var e=t.code;return"aborted"===e||"failed-precondition"===e||!as(e)}return!1},t}(),hd=function(){function t(t,e,n){var r=this;this.credentials=t,this.rs=e,this.Fl=n,this.user=Sc.UNAUTHENTICATED,this.clientId=Oo.u(),this.uf=function(){},this.oi=new ec,this.credentials.si((function(t){Ao("FirestoreClient","Received user=",t.uid),r.user.isEqual(t)||(r.user=t,r.uf(t)),r.oi.resolve()}))}return t.prototype.getConfiguration=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.oi.promise];case 1:return[2,(t.sent(),{rs:this.rs,Fl:this.Fl,clientId:this.clientId,credentials:this.credentials,Yl:this.user,$h:100})]}}))}))},t.prototype.hf=function(t){var e=this;this.uf=t,this.oi.promise.then((function(){return e.uf(e.user)}))},t.prototype.lf=function(){if(this.rs.Vs)throw new Bo(Uo.FAILED_PRECONDITION,"The client has already been terminated.")},t.prototype.terminate=function(){var t=this;this.rs.bs();var e=new ec;return this.rs.ys((function(){return i(t,void 0,void 0,(function(){var t,n;return o(this,(function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),this._f?[4,this._f.terminate()]:[3,2];case 1:r.sent(),r.label=2;case 2:return this.ff?[4,this.ff.terminate()]:[3,4];case 3:r.sent(),r.label=4;case 4:return this.credentials.ii(),e.resolve(),[3,6];case 5:return t=r.sent(),n=gc(t,"Failed to shutdown persistence"),e.reject(n),[3,6];case 6:return[2]}}))}))})),e.promise},t}();function fd(t,e){return i(this,void 0,void 0,(function(){var n,r=this;return o(this,(function(s){switch(s.label){case 0:return t.rs.Ns(),Ao("FirestoreClient","Initializing OfflineComponentProvider"),[4,t.getConfiguration()];case 1:return n=s.sent(),[4,e.initialize(n)];case 2:return s.sent(),t.hf((function(n){return t.rs.Ss((function(){return i(r,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,cf(e.Kc,n)];case 1:return t.sent(),[2]}}))}))}))})),e.persistence.fa((function(){return t.terminate()})),t.ff=e,[2]}}))}))}function ld(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(s){switch(s.label){case 0:return t.rs.Ns(),[4,pd(t)];case 1:return n=s.sent(),Ao("FirestoreClient","Initializing OnlineComponentProvider"),[4,t.getConfiguration()];case 2:return r=s.sent(),[4,e.initialize(n,r)];case 3:return s.sent(),t.hf((function(n){return t.rs.Ss((function(){return function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return(n=Co(t)).rs.Ns(),Ao("RemoteStore","RemoteStore received new credentials"),r=Lf(n),n.Hc.add(3),[4,kf(n)];case 1:return i.sent(),r&&n.Zc.set("Unknown"),[4,n.jc.s_(e)];case 2:return i.sent(),n.Hc.delete(3),[4,Nf(n)];case 3:return i.sent(),[2]}}))}))}(e.Oh,n)}))})),t._f=e,[2]}}))}))}function pd(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return t.ff?[3,2]:(Ao("FirestoreClient","Using default OfflineComponentProvider"),[4,fd(t,new ap)]);case 1:e.sent(),e.label=2;case 2:return[2,t.ff]}}))}))}function dd(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return t._f?[3,2]:(Ao("FirestoreClient","Using default OnlineComponentProvider"),[4,ld(t,new hp)]);case 1:e.sent(),e.label=2;case 2:return[2,t._f]}}))}))}function vd(t){return pd(t).then((function(t){return t.persistence}))}function yd(t){return pd(t).then((function(t){return t.Kc}))}function gd(t){return dd(t).then((function(t){return t.Oh}))}function md(t){return dd(t).then((function(t){return t.gu}))}function bd(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,dd(t)];case 1:return e=r.sent(),[2,((n=e.Mh).Ls=yl.bind(null,e.gu),n.Us=ml.bind(null,e.gu),n)]}}))}))}function wd(t,e){var n=this,r=new ec;return t.rs.fs((function(){return i(n,void 0,void 0,(function(){var n;return o(this,(function(i){switch(i.label){case 0:return n=bl,[4,md(t)];case 1:return[2,n.apply(void 0,[i.sent(),e,r])]}}))}))})),r.promise}function Id(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,function(t,e){var n=Co(t);return n.persistence.runTransaction("read document","readonly",(function(t){return n.Ga.Oi(t,e)}))}(t,e)];case 1:return(r=o.sent())instanceof mu?n.resolve(r):r instanceof bu?n.resolve(null):n.reject(new Bo(Uo.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")),[3,3];case 2:return i=o.sent(),s=gc(i,"Failed to get document '"+e+" from cache"),n.reject(s),[3,3];case 3:return[2]}}))}))}function Ed(t,e,n,r,i){var o=new fp({next:function(o){e.fs((function(){return Ic(t,s)}));var a=o.docs.has(n);!a&&o.fromCache?i.reject(new Bo(Uo.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&o.fromCache&&r&&"server"===r.source?i.reject(new Bo(Uo.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(o)},error:function(t){return i.reject(t)}}),s=new Tc(Au(n.path),o,{includeMetadataChanges:!0,Hs:!0});return wc(t,s)}var Ad=function(t){function n(e,n){var r=this;return(r=t.call(this,e,n)||this).yf=new yc,r.df="name"in e?e.name:"[DEFAULT]",r}return e(n,t),n.prototype.Vf=function(){return this.pf||jd(this),this.pf.terminate()},n}(function(){function t(t,e){this.df="(lite)",this.wf=new Cp({}),this.Tf=!1,t instanceof wo?(this.v_=t,this.Ef=new kc):(this.If=t,this.v_=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new Bo(Uo.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new wo(t.options.projectId)}(t),this.Ef=new Cc(e))}return Object.defineProperty(t.prototype,"app",{get:function(){if(!this.If)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.If},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"mf",{get:function(){return this.Tf},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"Af",{get:function(){return void 0!==this.Rf},enumerable:!1,configurable:!0}),t.prototype.Pf=function(t){if(this.Tf)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this.wf=new Cp(t),void 0!==t.credentials&&(this.Ef=function(t){if(!t)return new kc;switch(t.type){case"gapi":var e=t.client;return ko(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new Oc(e,t.sessionIndex||"0");case"provider":return t.client;default:throw new Bo(Uo.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))},t.prototype.gf=function(){return this.wf},t.prototype.k_=function(){return this.Tf=!0,this.wf},t.prototype._delete=function(){return this.Rf||(this.Rf=this.Vf()),this.Rf},t.prototype.Vf=function(){return function(t){var e=kp.get(t);e&&(Ao("ComponentProvider","Removing Datastore"),kp.delete(t),e.terminate())}(this),Promise.resolve()},t}());function _d(t,e,n){var r=this,s=new ec;return t.rs.enqueue((function(){return i(r,void 0,void 0,(function(){var r;return o(this,(function(i){switch(i.label){case 0:return i.trys.push([0,3,,4]),[4,fd(t,n)];case 1:return i.sent(),[4,ld(t,e)];case 2:return i.sent(),s.resolve(),[3,4];case 3:if(!function(t){return"FirebaseError"===t.name?t.code===Uo.FAILED_PRECONDITION||t.code===Uo.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||22===t.code||20===t.code||11===t.code}(r=i.sent()))throw r;return console.warn("Error enabling offline persistence. Falling back to persistence disabled: "+r),s.reject(r),[3,4];case 4:return[2]}}))}))})).then((function(){return s.promise}))}function Td(t){if(t.mf||t.Af)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.")}var Sd=function(t){function n(e,n,r,i,o,s){var a=this;return(a=t.call(this,e,n,r,i,s)||this).S_=e,a.vf=e,a.metadata=o,a}return e(n,t),n.prototype.exists=function(){return t.prototype.exists.call(this)},n.prototype.data=function(t){if(void 0===t&&(t={}),this.N_){if(this.x_){var e=new Nd(this.S_,this.D_,this.C_,this.N_,this.metadata,null);return this.x_.fromFirestore(e,t)}return this.D_.I_(this.N_.sn(),t.serverTimestamps)}},n.prototype.get=function(t,e){if(void 0===e&&(e={}),this.N_){var n=this.N_.data().field(Vp("DocumentSnapshot.get",t));if(null!==n)return this.D_.I_(n,e.serverTimestamps)}},n}(Lp),Nd=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.data=function(e){return void 0===e&&(e={}),t.prototype.data.call(this,e)},n}(Sd),kd=function(){function t(t,e,n,r){this.S_=t,this.D_=e,this.bf=r,this.metadata=new Gd(r.hasPendingWrites,r.fromCache),this.query=n}return Object.defineProperty(t.prototype,"docs",{get:function(){var t=[];return this.forEach((function(e){return t.push(e)})),t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.bf.docs.size},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"empty",{get:function(){return 0===this.size},enumerable:!1,configurable:!0}),t.prototype.forEach=function(t,e){var n=this;this.bf.docs.forEach((function(r){t.call(e,new Nd(n.S_,n.D_,r.key,r,new Gd(n.bf.Qt.has(r.key),n.bf.fromCache),n.query.x_))}))},t.prototype.docChanges=function(t){void 0===t&&(t={});var e=!!t.includeMetadataChanges;if(e&&this.bf.Wt)throw new Bo(Uo.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this.Sf&&this.Df===e||(this.Sf=function(t,e){if(t.bf.Ut.T()){var n=0;return t.bf.docChanges.map((function(e){var r=new Nd(t.S_,t.D_,e.doc.key,e.doc,new Gd(t.bf.Qt.has(e.doc.key),t.bf.fromCache),t.query.x_);return e.doc,{type:"added",doc:r,oldIndex:-1,newIndex:n++}}))}var r=t.bf.Ut;return t.bf.docChanges.filter((function(t){return e||3!==t.type})).map((function(e){var n=new Nd(t.S_,t.D_,e.doc.key,e.doc,new Gd(t.bf.Qt.has(e.doc.key),t.bf.fromCache),t.query.x_),i=-1,o=-1;return 0!==e.type&&(i=r.indexOf(e.doc.key),r=r.delete(e.doc.key)),1!==e.type&&(o=(r=r.add(e.doc)).indexOf(e.doc.key)),{type:Cd(e.type),doc:n,oldIndex:i,newIndex:o}}))}(this,e),this.Df=e),this.Sf},t}();function Cd(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return No()}}function xd(t,e){return t instanceof Sd&&e instanceof Sd?t.S_===e.S_&&t.C_.isEqual(e.C_)&&(null===t.N_?null===e.N_:t.N_.isEqual(e.N_))&&t.x_===e.x_:t instanceof kd&&e instanceof kd&&t.S_===e.S_&&function(t,e){return t instanceof Bp&&e instanceof Bp&&t.firestore===e.firestore&&Ru(t.M_,e.M_)&&t.x_===e.x_}(t.query,e.query)&&t.metadata.isEqual(e.metadata)&&t.bf.isEqual(e.bf)}var Od=function(t){function n(e){var n=this;return(n=t.call(this)||this).firestore=e,n}return e(n,t),n.prototype.R_=function(t){return new Np(t)},n.prototype.P_=function(t){var e=this.p_(t,this.firestore.v_);return new Up(this.firestore,null,e)},n}(Pp);function Dd(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];var o=gp(t.firestore,Ad),s=qp(o);return e instanceof lp&&(e=e.o_),Pd(o,("string"==typeof e||e instanceof jp?Qp(s,"updateDoc",t.C_,e,n,r):Jp(s,"updateDoc",t.C_,e)).L_(t.C_,$a.exists(!0)))}function Pd(t,e){return wd(Vd(t),e)}function Rd(t,e,n){var r=n.docs.get(e.C_),i=new Od(t);return new Sd(t,i,e.C_,r,new Gd(n.hasPendingWrites,n.fromCache),e.x_)}var Ld=function(){function t(){}return t.prototype.enableIndexedDbPersistence=function(t,e){return function(t,e){Td(t);var n=Vd(t),r=t.k_(),i=new hp;return _d(n,i,new up(i,r.cacheSizeBytes,null==e?void 0:e.forceOwnership))}(t.o_,{forceOwnership:e})},t.prototype.enableMultiTabIndexedDbPersistence=function(t){return function(t){Td(t);var e=Vd(t),n=t.k_(),r=new hp;return _d(e,r,new cp(r,n.cacheSizeBytes))}(t.o_)},t.prototype.clearIndexedDbPersistence=function(t){return function(t){var e=this;if(t.mf&&!t.Af)throw new Bo(Uo.FAILED_PRECONDITION,"Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");var n=new ec;return t.yf.ys((function(){return i(e,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return ic.kn()?(e=t+"main",[4,ic.delete(e)]):[2,Promise.resolve()];case 1:return n.sent(),[2]}}))}))}(sf(t.v_,t.df))];case 1:return r.sent(),n.resolve(),[3,3];case 2:return e=r.sent(),n.reject(e),[3,3];case 3:return[2]}}))}))})),n.promise}(t.o_)},t}(),Md=function(t){function n(e,n,r){var i=this;return(i=t.call(this,n)||this).Cf=r,i.INTERNAL={delete:function(){return i.terminate()}},e instanceof wo||(i.Nf=e),i}return e(n,t),Object.defineProperty(n.prototype,"v_",{get:function(){return this.o_.v_},enumerable:!1,configurable:!0}),n.prototype.settings=function(t){t.merge&&delete(t=Object.assign(Object.assign({},this.o_.gf()),t)).merge,this.o_.Pf(t)},n.prototype.useEmulator=function(t,e){"firestore.googleapis.com"!==this.o_.gf().host&&To("Host has been set in both settings() and useEmulator(), emulator host will be used"),this.settings({host:t+":"+e,ssl:!1,merge:!0})},n.prototype.enableNetwork=function(){return function(t){var e=this;return t.rs.enqueue((function(){return i(e,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,vd(t)];case 1:return e=r.sent(),[4,gd(t)];case 2:return n=r.sent(),[2,(e.da(!0),function(t){var e=Co(t);return e.Hc.delete(0),Nf(e)}(n))]}}))}))}))}(Vd(this.o_))},n.prototype.disableNetwork=function(){return function(t){var e=this;return t.rs.enqueue((function(){return i(e,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,vd(t)];case 1:return e=r.sent(),[4,gd(t)];case 2:return n=r.sent(),[2,(e.da(!1),function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return(e=Co(t)).Hc.add(0),[4,kf(e)];case 1:return n.sent(),e.Zc.set("Offline"),[2]}}))}))}(n))]}}))}))}))}(Vd(this.o_))},n.prototype.enablePersistence=function(t){var e=!1,n=!1;return t&&vp("synchronizeTabs",e=!!t.synchronizeTabs,"experimentalForceOwningTab",n=!!t.experimentalForceOwningTab),e?this.Cf.enableMultiTabIndexedDbPersistence(this):this.Cf.enableIndexedDbPersistence(this,n)},n.prototype.clearPersistence=function(){return this.Cf.clearIndexedDbPersistence(this)},n.prototype.terminate=function(){return this.app._removeServiceInstance("firestore"),this.app._removeServiceInstance("firestore-exp"),this.o_._delete()},n.prototype.waitForPendingWrites=function(){return function(t){var e=this,n=new ec;return t.rs.fs((function(){return i(e,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return e=Tl,[4,md(t)];case 1:return[2,e.apply(void 0,[r.sent(),n])]}}))}))})),n.promise}(Vd(this.o_))},n.prototype.onSnapshotsInSync=function(t){return function(t,e){var n=this,r=Vd(t),s=Mc(e)?e:{next:e},a=new fp(s);return t.yf.fs((function(){return i(n,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=function(t,e){Co(t).$s.add(e),e.next()},[4,bd(r)];case 1:return t.apply(void 0,[e.sent(),a]),[2]}}))}))})),function(){a.r_(),t.yf.fs((function(){return i(n,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=function(t,e){Co(t).$s.delete(e)},[4,bd(r)];case 1:return t.apply(void 0,[e.sent(),a]),[2]}}))}))}))}}(this.o_,t)},Object.defineProperty(n.prototype,"app",{get:function(){if(!this.Nf)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.Nf},enumerable:!1,configurable:!0}),n.prototype.collection=function(t){return pp("Firestore.collection","path",t),Vd(this.o_),new Zd(zo.k(t),this,null)},n.prototype.doc=function(t){return pp("Firestore.doc","path",t),Vd(this.o_),Fd.xf(zo.k(t),this,null)},n.prototype.collectionGroup=function(t){if(pp("Firestore.collectionGroup","collectionId",t),t.indexOf("/")>=0)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid collection ID '"+t+"' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");return Vd(this.o_),new Jd(function(t){return new Iu(zo.$(),t)}(t),this,null)},n.prototype.runTransaction=function(t){var e=this;return function(t,e){var n=this,r=new ec;return t.rs.fs((function(){return i(n,void 0,void 0,(function(){var n;return o(this,(function(i){switch(i.label){case 0:return[4,function(t){return dd(t).then((function(t){return t.Wc}))}(t)];case 1:return n=i.sent(),new cd(t.rs,n,e,r).run(),[2]}}))}))})),r.promise}(Vd(this.o_),(function(n){return t(new Ud(e,n))}))},n.prototype.batch=function(){return Vd(this.o_),new Bd(this)},n}(lp);function Vd(t){return t.pf||jd(t),t.pf.lf(),t.pf}function jd(t){var e=t.k_(),n=function(t,e,n){return new bo(t,e,n.host,n.ssl,n.experimentalForceLongPolling,n.experimentalAutoDetectLongPolling)}(t.v_,t.df,e);t.pf=new hd(t.Ef,t.yf,n)}var Ud=function(){function t(t,e){this.S_=t,this.Ff=e,this.Of=qp(this.S_.o_)}return t.prototype.get=function(t){var e=this,n=tv(0,t,this.S_),r=new Rp(this.S_);return this.Ff.X_([n.C_]).then((function(t){if(!t||1!==t.length)return No();var i=t[0];if(i instanceof bu)return new zd(e.S_,new Sd(e.S_.o_,r,n.C_,null,new Gd(!1,!1),n.x_));if(i instanceof mu)return new zd(e.S_,new Sd(e.S_.o_,r,n.C_,i,new Gd(!1,!1),n.x_));throw No()}))},t.prototype.set=function(t,e,n){var r=tv(0,t,this.S_);n=dp("Transaction.set",n);var i=ev(r.x_,e,n),o=Yp(this.Of,"Transaction.set",r.C_,i,null!==r.x_,n);return this.Ff.set(r.C_,o),this},t.prototype.update=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];var o,s=tv(0,t,this.S_);return e instanceof lp&&(e=e.o_),o="string"==typeof e||e instanceof jp?Qp(this.Of,"Transaction.update",s.C_,e,n,r):Jp(this.Of,"Transaction.update",s.C_,e),this.Ff.update(s.C_,o),this},t.prototype.delete=function(t){var e=tv(0,t,this.S_);return this.Ff.delete(e.C_),this},t}(),Bd=function(){function t(t){this.S_=t,this.Mf=[],this.kf=!1,this.Of=qp(this.S_.o_)}return t.prototype.set=function(t,e,n){this.$f();var r=tv(0,t,this.S_);n=dp("WriteBatch.set",n);var i=ev(r.x_,e,n),o=Yp(this.Of,"WriteBatch.set",r.C_,i,null!==r.x_,n);return this.Mf=this.Mf.concat(o.L_(r.C_,$a.Ge())),this},t.prototype.update=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];this.$f();var o,s=tv(0,t,this.S_);return e instanceof lp&&(e=e.o_),o="string"==typeof e||e instanceof jp?Qp(this.Of,"WriteBatch.update",s.C_,e,n,r):Jp(this.Of,"WriteBatch.update",s.C_,e),this.Mf=this.Mf.concat(o.L_(s.C_,$a.exists(!0))),this},t.prototype.delete=function(t){this.$f();var e=tv(0,t,this.S_);return this.Mf=this.Mf.concat(new lu(e.C_,$a.Ge())),this},t.prototype.commit=function(){return this.$f(),this.kf=!0,this.Mf.length>0?wd(Vd(this.S_.o_),this.Mf):Promise.resolve()},t.prototype.$f=function(){if(this.kf)throw new Bo(Uo.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")},t}(),Fd=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).firestore=e,r.D_=new Rp(e),r}return e(n,t),n.xf=function(t,e,r){if(t.length%2!=0)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid document reference. Document references must have an even number of segments, but "+t.M()+" has "+t.length);return new n(e,new Up(e.o_,r,new Wo(t)))},n.b_=function(t,e,r){return new n(e,new Up(e.o_,r,t))},Object.defineProperty(n.prototype,"id",{get:function(){return this.o_.id},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"parent",{get:function(){return new Zd(this.o_.O_.S(),this.firestore,this.o_.x_)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"path",{get:function(){return this.o_.path},enumerable:!1,configurable:!0}),n.prototype.collection=function(t){if(pp("DocumentReference.collection","path",t),!t)throw new Bo(Uo.INVALID_ARGUMENT,"Must provide a non-empty collection name to collection()");var e=zo.k(t);return new Zd(this.o_.O_.child(e),this.firestore,null)},n.prototype.isEqual=function(t){return t instanceof lp&&(t=t.o_),t instanceof Up&&(n=t,((e=this.o_)instanceof Up||e instanceof Fp)&&(n instanceof Up||n instanceof Fp)&&e.firestore===n.firestore&&e.path===n.path&&e.x_===n.x_);var e,n},n.prototype.set=function(t,e){e=dp("DocumentReference.set",e);try{return function(t,e,n){var r=gp(t.firestore,Ad),i=ev(t.x_,e,n);return Pd(r,Yp(qp(r),"setDoc",t.C_,i,null!==t.x_,n).L_(t.C_,$a.Ge()))}(this.o_,t,e)}catch(t){throw qd(t,"setDoc","DocumentReference.set")}},n.prototype.update=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];try{return 1===arguments.length?Dd(this.o_,t):Dd.apply(void 0,c([this.o_,t,e],n))}catch(t){throw qd(t,"updateDoc","DocumentReference.update")}},n.prototype.delete=function(){return Pd(gp((t=this.o_).firestore,Ad),[new lu(t.C_,$a.Ge())]);var t},n.prototype.onSnapshot=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];if("object"==typeof r&&!Mc(r))return r}return{}}(e),s=function(e,n){var r,i,o;return{next:function(e){o.next&&o.next(function(e){return new zd(t.firestore,new Sd(t.firestore.o_,t.D_,e.C_,e.N_,e.metadata,t.o_.x_))}(e))},error:null===(r=(o=Mc(e[0])?e[0]:Mc(e[1])?e[1]:"function"==typeof e[0]?{next:e[0],error:e[1],complete:e[2]}:{next:e[1],error:e[2],complete:e[3]}).error)||void 0===r?void 0:r.bind(o),complete:null===(i=o.complete)||void 0===i?void 0:i.bind(o)}}(e);return function(t){for(var e,n,r,s=this,a=[],u=1;u<arguments.length;u++)a[u-1]=arguments[u];var c={includeMetadataChanges:!1},h=0;"object"!=typeof a[h]||Mc(a[h])||(c=a[h],h++);var f,l,p,d={includeMetadataChanges:c.includeMetadataChanges};if(Mc(a[h])){var v=a[h];a[h]=null===(e=v.next)||void 0===e?void 0:e.bind(v),a[h+1]=null===(n=v.error)||void 0===n?void 0:n.bind(v),a[h+2]=null===(r=v.complete)||void 0===r?void 0:r.bind(v)}if(t instanceof Up)l=gp(t.firestore,Ad),p=Au(t.C_.path),f={next:function(e){a[h]&&a[h](Rd(l,t,e))},error:a[h+1],complete:a[h+2]};else{l=gp(t.firestore,Ad),p=t.M_;var y=new Od(l);f={next:function(e){a[h]&&a[h](new kd(l,y,t,e))},error:a[h+1],complete:a[h+2]},Yd(t.M_)}var g=Vd(l),m=new fp(f),b=new Tc(p,m,d);return l.yf.fs((function(){return i(s,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=wc,[4,bd(g)];case 1:return[2,t.apply(void 0,[e.sent(),b])]}}))}))})),function(){m.r_(),l.yf.fs((function(){return i(s,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=Ic,[4,bd(g)];case 1:return[2,t.apply(void 0,[e.sent(),b])]}}))}))}))}}(this.o_,r,s)},n.prototype.get=function(t){var e=this;return("cache"===(null==t?void 0:t.source)?function(t){var e=this,n=gp(t.firestore,Ad),r=Vd(n),s=new Od(n),a=new ec;return n.yf.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,yd(r)];case 1:return[4,Id(e.sent(),t.C_,a)];case 2:return e.sent(),[2]}}))}))})),a.promise.then((function(e){return new Sd(n,s,t.C_,e,new Gd(e instanceof mu&&e.Je,!0),t.x_)}))}(this.o_):"server"===(null==t?void 0:t.source)?function(t){var e=this,n=gp(t.firestore,Ad),r=Vd(n),s=new ec;return n.yf.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,bd(r)];case 1:return[4,Ed(e.sent(),n.yf,t.C_,{source:"server"},s)];case 2:return e.sent(),[2]}}))}))})),s.promise.then((function(e){return Rd(n,t,e)}))}(this.o_):function(t){var e=this,n=gp(t.firestore,Ad),r=Vd(n),s=new ec;return n.yf.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,bd(r)];case 1:return[4,Ed(e.sent(),n.yf,t.C_,{source:"default"},s)];case 2:return e.sent(),[2]}}))}))})),s.promise.then((function(e){return Rd(n,t,e)}))}(this.o_)).then((function(t){return new zd(e.firestore,new Sd(e.firestore.o_,e.D_,t.C_,t.N_,t.metadata,e.o_.x_))}))},n.prototype.withConverter=function(t){return new n(this.firestore,this.o_.withConverter(t))},n}(lp);function qd(t,e,n){return t.message=t.message.replace(e+"()",n+"()"),t}var Gd=function(){function t(t,e){this.hasPendingWrites=t,this.fromCache=e}return t.prototype.isEqual=function(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache},t}(),zd=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return e(n,t),Object.defineProperty(n.prototype,"ref",{get:function(){return new Fd(this.S_,this.o_.ref)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"id",{get:function(){return this.o_.id},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"metadata",{get:function(){return this.o_.metadata},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"exists",{get:function(){return this.o_.exists()},enumerable:!1,configurable:!0}),n.prototype.data=function(t){return this.o_.data(t)},n.prototype.get=function(t,e){return this.o_.get(t,e)},n.prototype.isEqual=function(t){return xd(this.o_,t.o_)},n}(lp),Kd=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.data=function(t){return this.o_.data(t)},n}(zd);function Hd(t,e,n){if(n instanceof lp&&(n=n.o_),"string"==typeof n){if(""===n)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");if(!ku(e)&&-1!==n.indexOf("/"))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '"+n+"' contains a '/' character.");var r=e.path.child(zo.k(n));if(!Wo.G(r))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '"+r+"' is not because it has an odd number of segments ("+r.length+").");return Js(t,new Wo(r))}if(n instanceof Up)return Js(t,n.C_);throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: "+yp(n)+".")}function Wd(t,e){if(!Array.isArray(t)||0===t.length)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid Query. A non-empty array is required for '"+e.toString()+"' filters.");if(t.length>10)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid Query. '"+e.toString()+"' filters support a maximum of 10 elements in the value array.")}function Xd(t,e,n){if(!n.isEqual(e))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '"+e.toString()+"' and so you must also use '"+e.toString()+"' as your first orderBy(), but your first orderBy() is on field '"+n.toString()+"' instead.")}function Yd(t){if(Tu(t)&&0===t.rn.length)throw new Bo(Uo.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}var Jd=function(){function t(t,e,n){this.M_=t,this.firestore=e,this.x_=n,this.Lf=qp(e.o_),this.D_=new Rp(e)}return t.prototype.where=function(e,n,r){var i=rd("Query.where",e),o=function(t,e,n,r,i,o,s){var a;if(i.B()){if("array-contains"===o||"array-contains-any"===o)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid Query. You can't perform '"+o+"' queries on FieldPath.documentId().");if("in"===o||"not-in"===o){Wd(s,o);for(var u=[],c=0,h=s;c<h.length;c++){var f=h[c];u.push(Hd(r,t,f))}a={arrayValue:{values:u}}}else a=Hd(r,t,s)}else"in"!==o&&"not-in"!==o&&"array-contains-any"!==o||Wd(s,o),a=$p(n,"Query.where",s,"in"===o||"not-in"===o);var l=Uu.create(i,o,a);return function(t,e){if(e.cn()){var n=Nu(t);if(null!==n&&!n.isEqual(e.field))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '"+n.toString()+"' and '"+e.field.toString()+"'");var r=Su(t);null!==r&&Xd(0,e.field,r)}var i=function(t,e){for(var n=0,r=t.filters;n<r.length;n++){var i=r[n];if(e.indexOf(i.op)>=0)return i.op}return null}(t,function(t){switch(t){case"!=":return["!=","not-in"];case"array-contains":return["array-contains","array-contains-any","not-in"];case"in":return["array-contains-any","in","not-in"];case"array-contains-any":return["array-contains","array-contains-any","in","not-in"];case"not-in":return["array-contains","array-contains-any","in","not-in","!="];default:return[]}}(e.op));if(null!==i)throw i===e.op?new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You cannot use more than one '"+e.op.toString()+"' filter."):new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You cannot use '"+e.op.toString()+"' filters with '"+i.toString()+"' filters.")}(t,l),l}(this.M_,0,this.Lf,this.firestore.v_,i,n,r);return new t(function(t,e){var n=t.filters.concat([e]);return new Iu(t.path,t.collectionGroup,t.rn.slice(),n,t.limit,t.limitType,t.startAt,t.endAt)}(this.M_,o),this.firestore,this.x_)},t.prototype.orderBy=function(e,n){var r;if(void 0===n||"asc"===n)r="asc";else{if("desc"!==n)throw new Bo(Uo.INVALID_ARGUMENT,"Function Query.orderBy() has unknown direction '"+n+"', expected 'asc' or 'desc'.");r="desc"}var i=rd("Query.orderBy",e),o=function(t,e,n){if(null!==t.startAt)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You must not call startAt() or startAfter() before calling orderBy().");if(null!==t.endAt)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You must not call endAt() or endBefore() before calling orderBy().");var r=new $u(e,n);return function(t,e){if(null===Su(t)){var n=Nu(t);null!==n&&Xd(0,n,e.field)}}(t,r),r}(this.M_,i,r);return new t(function(t,e){var n=t.rn.concat([e]);return new Iu(t.path,t.collectionGroup,n,t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(this.M_,o),this.firestore,this.x_)},t.prototype.limit=function(e){return mp("Query.limit",e),new t(Ou(this.M_,e,"F"),this.firestore,this.x_)},t.prototype.limitToLast=function(e){return mp("Query.limitToLast",e),new t(Ou(this.M_,e,"L"),this.firestore,this.x_)},t.prototype.startAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.startAt",e,n,!0);return new t(Du(this.M_,i),this.firestore,this.x_)},t.prototype.startAfter=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.startAfter",e,n,!1);return new t(Du(this.M_,i),this.firestore,this.x_)},t.prototype.endBefore=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.endBefore",e,n,!0);return new t(Pu(this.M_,i),this.firestore,this.x_)},t.prototype.endAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.endAt",e,n,!1);return new t(Pu(this.M_,i),this.firestore,this.x_)},t.prototype.isEqual=function(e){return e instanceof t&&this.firestore===e.firestore&&Ru(this.M_,e.M_)&&this.x_===e.x_},t.prototype.withConverter=function(e){return new t(this.M_,this.firestore,e)},t.prototype.Bf=function(t,e,n,r){if(e instanceof zd)return function(t,e,n,r,i){if(!r)throw new Bo(Uo.NOT_FOUND,"Can't use a DocumentSnapshot that doesn't exist for "+n+"().");for(var o=[],s=0,a=Cu(t);s<a.length;s++){var u=a[s];if(u.field.B())o.push(Js(e,r.key));else{var c=r.field(u.field);if(Ms(c))throw new Bo(Uo.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+u.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===c){var h=u.field.M();throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a document for which the field '"+h+"' (used as the orderBy) does not exist.")}o.push(c)}}return new Xu(o,i)}(this.M_,this.firestore.v_,t,e.o_.N_,r);var i=[e].concat(n);return function(t,e,n,r,i,o){var s=t.rn;if(i.length>s.length)throw new Bo(Uo.INVALID_ARGUMENT,"Too many arguments provided to "+r+"(). The number of arguments must be less than or equal to the number of orderBy() clauses");for(var a=[],u=0;u<i.length;u++){var c=i[u];if(s[u].field.B()){if("string"!=typeof c)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. Expected a string for document ID in "+r+"(), but got a "+typeof c);if(!ku(t)&&-1!==c.indexOf("/"))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to "+r+"() must be a plain document ID, but '"+c+"' contains a slash.");var h=t.path.child(zo.k(c));if(!Wo.G(h))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to "+r+"() must result in a valid document path, but '"+h+"' is not because it contains an odd number of segments.");var f=new Wo(h);a.push(Js(e,f))}else{var l=$p(n,r,c);a.push(l)}}return new Xu(a,o)}(this.M_,this.firestore.v_,this.Lf,t,i,r)},t.prototype.onSnapshot=function(){for(var t,e,n,r=this,s=[],a=0;a<arguments.length;a++)s[a]=arguments[a];var u={},c=0;if("object"!=typeof s[c]||Mc(s[c])||(u=s[c],c++),Mc(s[c])){var h=s[c];s[c]=null===(t=h.next)||void 0===t?void 0:t.bind(h),s[c+1]=null===(e=h.error)||void 0===e?void 0:e.bind(h),s[c+2]=null===(n=h.complete)||void 0===n?void 0:n.bind(h)}var f={next:function(t){s[c]&&s[c](new $d(r.firestore,new kd(r.firestore.o_,r.D_,new Bp(r.firestore.o_,r.x_,r.M_),t)))},error:s[c+1],complete:s[c+2]};return Yd(this.M_),function(t,e,n,r){var s=this,a=new fp(r),u=new Tc(e,a,n);return t.rs.fs((function(){return i(s,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=wc,[4,bd(t)];case 1:return[2,e.apply(void 0,[n.sent(),u])]}}))}))})),function(){a.r_(),t.rs.fs((function(){return i(s,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=Ic,[4,bd(t)];case 1:return[2,e.apply(void 0,[n.sent(),u])]}}))}))}))}}(Vd(this.firestore.o_),this.M_,u,f)},t.prototype.get=function(t){var e=this;Yd(this.M_);var n=Vd(this.firestore.o_);return(t&&"cache"===t.source?function(t,e){var n=this,r=new ec;return t.rs.fs((function(){return i(n,void 0,void 0,(function(){var n;return o(this,(function(s){switch(s.label){case 0:return n=function(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,yf(t,e,!0)];case 1:return r=o.sent(),i=new ll(e,r.Xa),s=i.gh(r.documents),a=i.bi(s,!1),n.resolve(a.snapshot),[3,3];case 2:return u=o.sent(),c=gc(u,"Failed to execute query '"+e+" against cache"),n.reject(c),[3,3];case 3:return[2]}}))}))},[4,yd(t)];case 1:return[2,n.apply(void 0,[s.sent(),e,r])]}}))}))})),r.promise}(n,this.M_):function(t,e,n){var r=this;void 0===n&&(n={});var s=new ec;return t.rs.fs((function(){return i(r,void 0,void 0,(function(){var r;return o(this,(function(i){switch(i.label){case 0:return r=function(t,e,n,r,i){var o=new fp({next:function(n){e.fs((function(){return Ic(t,s)})),n.fromCache&&"server"===r.source?i.reject(new Bo(Uo.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:function(t){return i.reject(t)}}),s=new Tc(n,o,{includeMetadataChanges:!0,Hs:!0});return wc(t,s)},[4,bd(t)];case 1:return[2,r.apply(void 0,[i.sent(),t.rs,e,n,s])]}}))}))})),s.promise}(n,this.M_,t)).then((function(t){return new $d(e.firestore,new kd(e.firestore.o_,e.D_,new Bp(e.firestore.o_,e.x_,e.M_),t))}))},t}(),Qd=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return e(n,t),Object.defineProperty(n.prototype,"type",{get:function(){return this.o_.type},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"doc",{get:function(){return new Kd(this.S_,this.o_.doc)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"oldIndex",{get:function(){return this.o_.oldIndex},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"newIndex",{get:function(){return this.o_.oldIndex},enumerable:!1,configurable:!0}),n}(lp),$d=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return e(n,t),Object.defineProperty(n.prototype,"query",{get:function(){return new Jd(this.o_.query.M_,this.S_,this.o_.query.x_)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"metadata",{get:function(){return this.o_.metadata},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"size",{get:function(){return this.o_.size},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"empty",{get:function(){return this.o_.empty},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"docs",{get:function(){var t=this;return this.o_.docs.map((function(e){return new Kd(t.S_,e)}))},enumerable:!1,configurable:!0}),n.prototype.docChanges=function(t){var e=this;return this.o_.docChanges(t).map((function(t){return new Qd(e.S_,t)}))},n.prototype.forEach=function(t,e){var n=this;this.o_.forEach((function(r){t.call(e,new Kd(n.S_,r))}))},n.prototype.isEqual=function(t){return xd(this.o_,t.o_)},n}(lp),Zd=function(t){function n(e,n,r){var i=this;if((i=t.call(this,Au(e),n,r)||this).O_=e,e.length%2!=1)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid collection reference. Collection references must have an odd number of segments, but "+e.M()+" has "+e.length);return i}return e(n,t),Object.defineProperty(n.prototype,"id",{get:function(){return this.M_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"parent",{get:function(){var t=this.M_.path.S();return t.T()?null:Fd.xf(t,this.firestore,null)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"path",{get:function(){return this.M_.path.M()},enumerable:!1,configurable:!0}),n.prototype.doc=function(t){0===arguments.length&&(t=Oo.u()),pp("CollectionReference.doc","path",t);var e=zo.k(t);return Fd.xf(this.M_.path.child(e),this.firestore,this.x_)},n.prototype.add=function(t){var e=this.x_?this.x_.toFirestore(t):t,n=this.doc();return Fd.b_(n.o_.C_,this.firestore,null).set(e).then((function(){return n}))},n.prototype.withConverter=function(t){return new n(this.O_,this.firestore,t)},n}(Jd);function tv(t,e,n){var r=gp(e,Up);if(r.firestore!==n.o_)throw new Bo(Uo.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return r}function ev(t,e,n){return t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e}var nv,rv=function(t){function n(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.call(this,new(jp.bind.apply(jp,c([void 0],e))))||this}return e(n,t),n.documentId=function(){return new n(Ho.q().M())},n.prototype.isEqual=function(t){return t instanceof lp&&(t=t.o_),t instanceof jp&&this.o_.F_.isEqual(t.F_)},n}(lp),iv=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.serverTimestamp=function(){var t=new Ep("serverTimestamp");return t.a_="FieldValue.serverTimestamp",new n(t)},n.delete=function(){var t=new wp("deleteField");return t.a_="FieldValue.delete",new n(t)},n.arrayUnion=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new Ap("arrayUnion",t)}.apply(void 0,t);return r.a_="FieldValue.arrayUnion",new n(r)},n.arrayRemove=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new _p("arrayRemove",t)}.apply(void 0,t);return r.a_="FieldValue.arrayRemove",new n(r)},n.increment=function(t){var e=function(t){return new Tp("increment",t)}(t);return e.a_="FieldValue.increment",new n(e)},n.prototype.isEqual=function(t){return this.o_.isEqual(t.o_)},n}(lp),ov={Firestore:Md,GeoPoint:Sp,Timestamp:Fo,Blob:Dp,Transaction:Ud,WriteBatch:Bd,DocumentReference:Fd,DocumentSnapshot:zd,Query:Jd,QueryDocumentSnapshot:Kd,QuerySnapshot:$d,CollectionReference:Zd,FieldPath:rv,FieldValue:iv,setLogLevel:function(t){var e;e=t,Io.setLogLevel(e)},CACHE_SIZE_UNLIMITED:-1};(function(t,e){t.INTERNAL.registerComponent(new k("firestore",(function(t){return function(t,e){return new Md(t,new Ad(t,e),new Ld)}(t.getProvider("app").getImmediate(),t.getProvider("auth-internal"))}),"PUBLIC").setServiceProps(Object.assign({},ov)))})(nv=et),nv.registerVersion("@firebase/firestore","2.0.2");var sv=et.initializeApp({apiKey:"AIzaSyAbBLFWMfjWFqAzmRU8J5h7DHH0bDesYzU",authDomain:"chicago-sense.firebaseapp.com",databaseURL:"https://chicago-sense.firebaseio.com",projectId:"chicago-sense",storageBucket:"chicago-sense.appspot.com",messagingSenderId:"448695709527",appId:"1:448695709527:web:0317d5ce41565937311812",measurementId:"G-VRPVS0PHMV"}),av=(et.firestore(),n(379)),uv=n.n(av),cv=n(538);uv()(cv.Z,{insert:"head",singleton:!1}),cv.Z.locals;var hv=n(340);uv()(hv.Z,{insert:"head",singleton:!1}),hv.Z.locals,document.querySelector("form").addEventListener("submit",(function(t){t.preventDefault();var e=document.querySelectorAll("input"),n=e[0].value,r=e[1].value,i=e[2].checked;console.log(sv.auth),i?sv.auth().setPersistence(et.auth.Auth.Persistence.LOCAL).then((function(){return sv.auth().signInWithEmailAndPassword(n,r)})).then((function(t){window.location="./home.html"})).catch((function(t){return alert(t.message)})):sv.auth().setPersistence(et.auth.Auth.Persistence.SESSION).then((function(){return sv.auth().signInWithEmailAndPassword(n,r)})).then((function(t){window.location="./home.html"})).catch((function(t){return alert(t.message)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vc3JjL2Nzcy9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS8uL3NyYy9jc3MvcmVzZXQuY3NzIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pZGIuanMiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2Uvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2UvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvY29tcG9uZW50L2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2xvZ2dlci9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hbmFseXRpY3MvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9kaXN0L2F1dGguZXNtLmpzIiwid2VicGFjazovL2NoaWNhZ28tc2Vuc2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3dlYmNoYW5uZWwtd3JhcHBlci9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9maXJlc3RvcmUvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vY2hpY2Fnby1zZW5zZS8uL3NyYy9maXJlYmFzZS5qcyIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vc3JjL2Nzcy9yZXNldC5jc3M/MTUyYiIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vc3JjL2Nzcy9pbmRleC5jc3M/ZjdlYSIsIndlYnBhY2s6Ly9jaGljYWdvLXNlbnNlLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwidXJsIiwib3B0aW9ucyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwidG9BcnJheSIsInByb21pc2lmeVJlcXVlc3QiLCJyZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbnN1Y2Nlc3MiLCJyZXN1bHQiLCJvbmVycm9yIiwiZXJyb3IiLCJwcm9taXNpZnlSZXF1ZXN0Q2FsbCIsIm9iaiIsIm1ldGhvZCIsImFyZ3MiLCJwIiwiYXBwbHkiLCJ0aGVuIiwicHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwiLCJDdXJzb3IiLCJwcm94eVByb3BlcnRpZXMiLCJQcm94eUNsYXNzIiwidGFyZ2V0UHJvcCIsInByb3BlcnRpZXMiLCJmb3JFYWNoIiwicHJvcCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwidmFsIiwicHJveHlSZXF1ZXN0TWV0aG9kcyIsIkNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicHJveHlNZXRob2RzIiwicHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyIsIkluZGV4IiwiaW5kZXgiLCJfaW5kZXgiLCJjdXJzb3IiLCJfY3Vyc29yIiwiX3JlcXVlc3QiLCJPYmplY3RTdG9yZSIsInN0b3JlIiwiX3N0b3JlIiwiVHJhbnNhY3Rpb24iLCJpZGJUcmFuc2FjdGlvbiIsIl90eCIsImNvbXBsZXRlIiwib25jb21wbGV0ZSIsIm9uYWJvcnQiLCJVcGdyYWRlREIiLCJkYiIsIm9sZFZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsIl9kYiIsIkRCIiwiSURCSW5kZXgiLCJJREJDdXJzb3IiLCJtZXRob2ROYW1lIiwiY3JlYXRlSW5kZXgiLCJJREJPYmplY3RTdG9yZSIsIm9iamVjdFN0b3JlIiwiSURCVHJhbnNhY3Rpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsIklEQkRhdGFiYXNlIiwiZnVuY05hbWUiLCJjYWxsYmFjayIsIm5hdGl2ZU9iamVjdCIsImdldEFsbCIsInF1ZXJ5IiwiY291bnQiLCJpbnN0YW5jZSIsIml0ZW1zIiwiaXRlcmF0ZUN1cnNvciIsImNvbnRpbnVlIiwib3BlbkRiIiwidmVyc2lvbiIsInVwZ3JhZGVDYWxsYmFjayIsImluZGV4ZWREQiIsIm9udXBncmFkZW5lZWRlZCIsImV2ZW50IiwiZGVsZXRlRGIiLCJmYWN0b3J5IiwibWVtbyIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYmluZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJlbnVtZXJhYmxlIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImhhc093blByb3BlcnR5Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImV4dGVuZFN0YXRpY3MiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfX2V4dGVuZHMiLCJfXyIsImNyZWF0ZSIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsInYiLCJvcCIsInBvcCIsIl9fdmFsdWVzIiwibSIsIl9fcmVhZCIsInIiLCJhciIsIl9fc3ByZWFkIiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImsiLCJqIiwiamwiLCJkZWVwRXh0ZW5kIiwiRGF0ZSIsImdldFRpbWUiLCJEZWZlcnJlZCIsIl90aGlzIiwicHJvbWlzZSIsIndyYXBDYWxsYmFjayIsImNhdGNoIiwiZ2V0VUEiLCJuYXZpZ2F0b3IiLCJpc05vZGUiLCJwcm9jZXNzIiwiaXNCcm93c2VyRXh0ZW5zaW9uIiwicnVudGltZSIsImNocm9tZSIsImJyb3dzZXIiLCJpc0luZGV4ZWREQkF2YWlsYWJsZSIsInNlbGYiLCJ2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlIiwicHJlRXhpc3RfMSIsIkRCX0NIRUNLX05BTUVfMSIsInJlcXVlc3RfMSIsIm9wZW4iLCJjbG9zZSIsImRlbGV0ZURhdGFiYXNlIiwiX2EiLCJtZXNzYWdlIiwiYXJlQ29va2llc0VuYWJsZWQiLCJjb29raWVFbmFibGVkIiwiRmlyZWJhc2VFcnJvciIsIl9zdXBlciIsImNvZGUiLCJjdXN0b21EYXRhIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJFcnJvckZhY3RvcnkiLCJzZXJ2aWNlIiwic2VydmljZU5hbWUiLCJlcnJvcnMiLCJmdWxsQ29kZSIsInRlbXBsYXRlIiwicmVwbGFjZVRlbXBsYXRlIiwiZnVsbE1lc3NhZ2UiLCJQQVRURVJOIiwiU3RyaW5nIiwiY29udGFpbnMiLCJjcmVhdGVTdWJzY3JpYmUiLCJleGVjdXRvciIsIm9uTm9PYnNlcnZlcnMiLCJwcm94eSIsIk9ic2VydmVyUHJveHkiLCJzdWJzY3JpYmUiLCJTaGExIiwiY2hhaW5fIiwiYnVmXyIsIldfIiwicGFkXyIsImluYnVmXyIsInRvdGFsXyIsImJsb2NrU2l6ZSIsInJlc2V0IiwiY29tcHJlc3NfIiwiYnVmIiwib2Zmc2V0IiwiVyIsImNoYXJDb2RlQXQiLCJjIiwiYnl0ZXMiLCJsZW5ndGhNaW51c0Jsb2NrIiwiaW5idWYiLCJkaWdlc3QiLCJ0b3RhbEJpdHMiLCJvYnNlcnZlcnMiLCJ1bnN1YnNjcmliZXMiLCJvYnNlcnZlckNvdW50IiwidGFzayIsImZpbmFsaXplZCIsImZvckVhY2hPYnNlcnZlciIsIm9ic2VydmVyIiwibmV4dE9yT2JzZXJ2ZXIiLCJtZXRob2RzIiwibWV0aG9kc18xIiwiaW1wbGVtZW50c0FueU1ldGhvZHMiLCJub29wIiwidW5zdWIiLCJ1bnN1YnNjcmliZU9uZSIsImZpbmFsRXJyb3IiLCJmbiIsInNlbmRPbmUiLCJjb25zb2xlIiwiY2FsY3VsYXRlQmFja29mZk1pbGxpcyIsImJhY2tvZmZDb3VudCIsImludGVydmFsTWlsbGlzIiwiYmFja29mZkZhY3RvciIsImN1cnJCYXNlVmFsdWUiLCJNYXRoIiwicG93IiwicmFuZG9tV2FpdCIsInJvdW5kIiwicmFuZG9tIiwibWluIiwiQ29tcG9uZW50IiwiaW5zdGFuY2VGYWN0b3J5IiwidHlwZSIsIm11bHRpcGxlSW5zdGFuY2VzIiwic2VydmljZVByb3BzIiwiaW5zdGFudGlhdGlvbk1vZGUiLCJzZXRJbnN0YW50aWF0aW9uTW9kZSIsIm1vZGUiLCJzZXRNdWx0aXBsZUluc3RhbmNlcyIsInNldFNlcnZpY2VQcm9wcyIsInByb3BzIiwiREVGQVVMVF9FTlRSWV9OQU1FIiwiUHJvdmlkZXIiLCJjb250YWluZXIiLCJjb21wb25lbnQiLCJpbnN0YW5jZXMiLCJNYXAiLCJpbnN0YW5jZXNEZWZlcnJlZCIsIm5vcm1hbGl6ZWRJZGVudGlmaWVyIiwibm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyIiwiaGFzIiwiZGVmZXJyZWQiLCJnZXRPckluaXRpYWxpemVTZXJ2aWNlIiwiZ2V0SW1tZWRpYXRlIiwib3B0aW9uYWwiLCJnZXRDb21wb25lbnQiLCJzZXRDb21wb25lbnQiLCJlXzEiLCJpc0NvbXBvbmVudEVhZ2VyIiwiX2IiLCJlbnRyaWVzIiwiX2MiLCJpbnN0YW5jZUlkZW50aWZpZXIiLCJpbnN0YW5jZURlZmVycmVkIiwiZV8xXzEiLCJyZXR1cm4iLCJjbGVhckluc3RhbmNlIiwiZGVsZXRlIiwic2VydmljZXMiLCJ2YWx1ZXMiLCJJTlRFUk5BTCIsIl9kZWxldGUiLCJpc0NvbXBvbmVudFNldCIsIm5vcm1hbGl6ZUlkZW50aWZpZXJGb3JGYWN0b3J5IiwiQ29tcG9uZW50Q29udGFpbmVyIiwicHJvdmlkZXJzIiwiYWRkQ29tcG9uZW50IiwicHJvdmlkZXIiLCJnZXRQcm92aWRlciIsImFkZE9yT3ZlcndyaXRlQ29tcG9uZW50IiwiZ2V0UHJvdmlkZXJzIiwiTG9nTGV2ZWwiLCJsZXZlbFN0cmluZ1RvRW51bSIsIkRFQlVHIiwiVkVSQk9TRSIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJTSUxFTlQiLCJkZWZhdWx0TG9nTGV2ZWwiLCJDb25zb2xlTWV0aG9kIiwiZGVmYXVsdExvZ0hhbmRsZXIiLCJsb2dUeXBlIiwibG9nTGV2ZWwiLCJub3ciLCJ0b0lTT1N0cmluZyIsIkxvZ2dlciIsIl9sb2dMZXZlbCIsIl9sb2dIYW5kbGVyIiwiX3VzZXJMb2dIYW5kbGVyIiwiY29uZmlndXJhYmxlIiwic2V0TG9nTGV2ZWwiLCJkZWJ1ZyIsImxvZyIsImluZm8iLCJ3YXJuIiwibGV2ZWwiLCJpbnN0IiwiX2EkMSIsIkVSUk9SUyIsIkVSUk9SX0ZBQ1RPUlkiLCJuYW1lJDEiLCJQTEFURk9STV9MT0dfU1RSSU5HIiwibG9nZ2VyIiwiRmlyZWJhc2VBcHBJbXBsIiwiY29uZmlnIiwiZmlyZWJhc2VfIiwiaXNEZWxldGVkXyIsIm5hbWVfIiwiYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXyIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIm9wdGlvbnNfIiwiX2FkZENvbXBvbmVudCIsImNvbXBvbmVudHMiLCJjaGVja0Rlc3Ryb3llZF8iLCJyZW1vdmVBcHAiLCJfZ2V0U2VydmljZSIsIl9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UiLCJfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQiLCJhcHBOYW1lIiwiZmlyZWJhc2UiLCJjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsImZpcmViYXNlQXBwSW1wbCIsImFwcHMiLCJpbml0aWFsaXplQXBwIiwicmF3Q29uZmlnIiwiYXBwIiwicmVnaXN0ZXJWZXJzaW9uIiwibGlicmFyeUtleU9yTmFtZSIsInZhcmlhbnQiLCJsaWJyYXJ5IiwibGlicmFyeU1pc21hdGNoIiwibWF0Y2giLCJ2ZXJzaW9uTWlzbWF0Y2giLCJ3YXJuaW5nIiwicmVnaXN0ZXJDb21wb25lbnQiLCJvbkxvZyIsImxvZ0NhbGxiYWNrIiwiX2xvb3BfMSIsImN1c3RvbUxvZ0xldmVsIiwidXNlckxvZ0hhbmRsZXIiLCJhcmciLCJpZ25vcmVkIiwidG9Mb3dlckNhc2UiLCJpbnN0YW5jZXNfMSIsInNldFVzZXJMb2dIYW5kbGVyIiwiU0RLX1ZFUlNJT04iLCJ1c2VBc1NlcnZpY2UiLCJjb21wb25lbnROYW1lIiwic2VydmljZU5hbWVzcGFjZSIsImFwcEFyZyIsImNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlQ29yZSIsImV4dGVuZE5hbWVzcGFjZSIsIlBsYXRmb3JtTG9nZ2VyU2VydmljZSIsImdldFBsYXRmb3JtSW5mb1N0cmluZyIsImlzVmVyc2lvblNlcnZpY2VQcm92aWRlciIsImxvZ1N0cmluZyIsInNka1ZlcnNpb24iLCJpbmRleE9mIiwiZmlyZWJhc2UkMSIsInJlZ2lzdGVyQ29yZUNvbXBvbmVudHMiLCJQQUNLQUdFX1ZFUlNJT04iLCJFUlJPUl9ERVNDUklQVElPTl9NQVAiLCJpc1NlcnZlckVycm9yIiwiaW5jbHVkZXMiLCJnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQiLCJJTlNUQUxMQVRJT05TX0FQSV9VUkwiLCJwcm9qZWN0SWQiLCJleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZSIsInJlc3BvbnNlIiwidG9rZW4iLCJyZXF1ZXN0U3RhdHVzIiwiZXhwaXJlc0luIiwicmVzcG9uc2VFeHBpcmVzSW4iLCJOdW1iZXIiLCJjcmVhdGlvblRpbWUiLCJnZXRFcnJvckZyb21SZXNwb25zZSIsInJlcXVlc3ROYW1lIiwicmVzcG9uc2VKc29uIiwiZXJyb3JEYXRhIiwianNvbiIsInNlcnZlckNvZGUiLCJzZXJ2ZXJNZXNzYWdlIiwic2VydmVyU3RhdHVzIiwic3RhdHVzIiwiZ2V0SGVhZGVycyIsImFwaUtleSIsIkhlYWRlcnMiLCJBY2NlcHQiLCJnZXRIZWFkZXJzV2l0aEF1dGgiLCJhcHBDb25maWciLCJyZWZyZXNoVG9rZW4iLCJoZWFkZXJzIiwiYXBwZW5kIiwiSU5URVJOQUxfQVVUSF9WRVJTSU9OIiwiZ2V0QXV0aG9yaXphdGlvbkhlYWRlciIsInJldHJ5SWZTZXJ2ZXJFcnJvciIsImNyZWF0ZUluc3RhbGxhdGlvblJlcXVlc3QiLCJmaWQiLCJlbmRwb2ludCIsInJlc3BvbnNlVmFsdWUiLCJhdXRoVmVyc2lvbiIsImFwcElkIiwiZmV0Y2giLCJvayIsInJlZ2lzdHJhdGlvblN0YXR1cyIsImF1dGhUb2tlbiIsInNsZWVwIiwibXMiLCJzZXRUaW1lb3V0IiwiVkFMSURfRklEX1BBVFRFUk4iLCJnZW5lcmF0ZUZpZCIsImZpZEJ5dGVBcnJheSIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImFycmF5IiwiZnJvbUNoYXJDb2RlIiwic3Vic3RyIiwiZW5jb2RlIiwiZ2V0S2V5IiwiZmlkQ2hhbmdlQ2FsbGJhY2tzIiwiZmlkQ2hhbmdlZCIsImNhbGxGaWRDaGFuZ2VDYWxsYmFja3MiLCJjaGFubmVsIiwiZ2V0QnJvYWRjYXN0Q2hhbm5lbCIsInBvc3RNZXNzYWdlIiwiY2xvc2VCcm9hZGNhc3RDaGFubmVsIiwiYnJvYWRjYXN0RmlkQ2hhbmdlIiwiY2FsbGJhY2tzIiwiY2FsbGJhY2tzXzEiLCJjYWxsYmFja3NfMV8xIiwiYnJvYWRjYXN0Q2hhbm5lbCIsIkJyb2FkY2FzdENoYW5uZWwiLCJvbm1lc3NhZ2UiLCJzaXplIiwiT0JKRUNUX1NUT1JFX05BTUUiLCJkYlByb21pc2UiLCJnZXREYlByb21pc2UiLCJ1cGdyYWRlREIiLCJ0eCIsIm9sZFZhbHVlIiwicHV0IiwidXBkYXRlRm4iLCJuZXdWYWx1ZSIsImdldEluc3RhbGxhdGlvbkVudHJ5IiwicmVnaXN0cmF0aW9uUHJvbWlzZSIsImluc3RhbGxhdGlvbkVudHJ5Iiwib2xkRW50cnkiLCJjbGVhclRpbWVkT3V0UmVxdWVzdCIsInVwZGF0ZU9yQ3JlYXRlSW5zdGFsbGF0aW9uRW50cnkiLCJlbnRyeVdpdGhQcm9taXNlIiwib25MaW5lIiwiaW5Qcm9ncmVzc0VudHJ5IiwicmVnaXN0cmF0aW9uVGltZSIsInJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeSIsInJlZ2lzdGVySW5zdGFsbGF0aW9uIiwid2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uIiwidHJpZ2dlclJlZ2lzdHJhdGlvbklmTmVjZXNzYXJ5IiwiZW50cnkiLCJ1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0IiwiZ2VuZXJhdGVBdXRoVG9rZW5SZXF1ZXN0IiwicGxhdGZvcm1Mb2dnZXJQcm92aWRlciIsInBsYXRmb3JtTG9nZ2VyIiwiZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludCIsImluc3RhbGxhdGlvbiIsInJlZnJlc2hBdXRoVG9rZW4iLCJkZXBlbmRlbmNpZXMiLCJmb3JjZVJlZnJlc2giLCJ0b2tlblByb21pc2UiLCJpc0VudHJ5UmVnaXN0ZXJlZCIsIm9sZEF1dGhUb2tlbiIsImlzQXV0aFRva2VuRXhwaXJlZCIsInVwZGF0ZUF1dGhUb2tlblJlcXVlc3QiLCJ3YWl0VW50aWxBdXRoVG9rZW5SZXF1ZXN0IiwiaW5Qcm9ncmVzc0F1dGhUb2tlbiIsInJlcXVlc3RUaW1lIiwibWFrZUF1dGhUb2tlblJlcXVlc3RJblByb2dyZXNzRW50cnkiLCJ1cGRhdGVkSW5zdGFsbGF0aW9uRW50cnkiLCJmZXRjaEF1dGhUb2tlbkZyb21TZXJ2ZXIiLCJjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbiIsImRlbGV0ZUluc3RhbGxhdGlvblJlcXVlc3QiLCJnZXREZWxldGVFbmRwb2ludCIsImdldE1pc3NpbmdWYWx1ZUVycm9yIiwidmFsdWVOYW1lIiwiY29uZmlnS2V5c18xIiwiY29uZmlnS2V5c18xXzEiLCJrZXlOYW1lIiwiZXh0cmFjdEFwcENvbmZpZyIsImdldElkIiwiZ2V0VG9rZW4iLCJkZWxldGVJbnN0YWxsYXRpb24iLCJvbklkQ2hhbmdlIiwiY2FsbGJhY2tTZXQiLCJTZXQiLCJhZGQiLCJhZGRDYWxsYmFjayIsInJlbW92ZUNhbGxiYWNrIiwiR3RhZ0NvbW1hbmQiLCJFdmVudE5hbWUiLCJHVEFHX1VSTCIsImd0YWdPbkNvbmZpZyIsImd0YWdDb3JlIiwiaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCIsImR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QiLCJtZWFzdXJlbWVudElkVG9BcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJndGFnUGFyYW1zIiwiY29ycmVzcG9uZGluZ0FwcElkIiwiZHluYW1pY0NvbmZpZ1Jlc3VsdHMiLCJmb3VuZENvbmZpZyIsImZpbmQiLCJDT05GSUciLCJndGFnT25FdmVudCIsImluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IiLCJnYVNlbmRUb0xpc3QiLCJnYVNlbmRUb0xpc3RfMSIsInNlbmRUb0lkIiwiZV8yIiwiaW5pdGlhbGl6YXRpb25Qcm9taXNlIiwiRVZFTlQiLCJkZWZhdWx0UmV0cnlEYXRhIiwiUmV0cnlEYXRhIiwidGhyb3R0bGVNZXRhZGF0YSIsImdldFRocm90dGxlTWV0YWRhdGEiLCJzZXRUaHJvdHRsZU1ldGFkYXRhIiwibWV0YWRhdGEiLCJkZWxldGVUaHJvdHRsZU1ldGFkYXRhIiwiZmV0Y2hEeW5hbWljQ29uZmlnIiwiYXBwRmllbGRzIiwiYXBwVXJsIiwiZXJyb3JNZXNzYWdlIiwianNvblJlc3BvbnNlIiwiaHR0cFN0YXR1cyIsInJlc3BvbnNlTWVzc2FnZSIsImF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkiLCJzaWduYWwiLCJyZXRyeURhdGEiLCJ0aHJvdHRsZUVuZFRpbWVNaWxsaXMiLCJiYWNrb2ZmTWlsbGlzIiwic2V0QWJvcnRhYmxlVGltZW91dCIsImlzUmV0cmlhYmxlRXJyb3IiLCJtYXgiLCJ0aW1lb3V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsZWFyVGltZW91dCIsIkFuYWx5dGljc0Fib3J0U2lnbmFsIiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJhYm9ydCIsImd0YWdDb3JlRnVuY3Rpb24iLCJ3cmFwcGVkR3RhZ0Z1bmN0aW9uIiwiZGF0YUxheWVyTmFtZSIsImd0YWdOYW1lIiwiZ2xvYmFsSW5pdERvbmUiLCJzZXR0aW5ncyIsImluc3RhbGxhdGlvbnMiLCJtaXNtYXRjaGVkRW52TWVzc2FnZXMiLCJkZXRhaWxzIiwiZXJyb3JJbmZvIiwid2Fybk9uQnJvd3NlckNvbnRleHRNaXNtYXRjaCIsInNjcmlwdFRhZ3MiLCJ0YWciLCJmaW5kR3RhZ1NjcmlwdE9uUGFnZSIsInNjcmlwdCIsImFzeW5jIiwiaW5zZXJ0U2NyaXB0VGFnIiwiZGF0YUxheWVyIiwiZ2V0T3JDcmVhdGVEYXRhTGF5ZXIiLCJndGFnRnVuY3Rpb25OYW1lIiwiX2FyZ3MiLCJjb21tYW5kIiwiaWRPck5hbWVPclBhcmFtcyIsImVfMyIsIlNFVCIsIndyYXBHdGFnIiwid3JhcHBlZEd0YWciLCJ3cmFwT3JDcmVhdGVHdGFnIiwiZHluYW1pY0NvbmZpZ1Byb21pc2UiLCJmaWRQcm9taXNlIiwiZHluYW1pY0NvbmZpZyIsImNvbmZpZ1Byb3BlcnRpZXMiLCJ0aW1lb3V0TWlsbGlzIiwiZmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5IiwidmFsaWRhdGVJbmRleGVkREIiLCJlbnZJc1ZhbGlkIiwiaW5pdGlhbGl6ZUlkcyIsImxvZ0V2ZW50IiwiZXZlbnROYW1lIiwiZXZlbnRQYXJhbXMiLCJndGFnRnVuY3Rpb24iLCJwYXJhbXMiLCJnbG9iYWwiLCJzZXRDdXJyZW50U2NyZWVuIiwic2NyZWVuTmFtZSIsInNldFVzZXJJZCIsInNldFVzZXJQcm9wZXJ0aWVzIiwiZmxhdFByb3BlcnRpZXMiLCJzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZCIsImVuYWJsZWQiLCJBTkFMWVRJQ1NfVFlQRSIsImlzU3VwcG9ydGVkIiwicmVhc29uIiwicmVnaXN0ZXJBbmFseXRpY3MiLCJhYSIsImRlZmluZVByb3BlcnRpZXMiLCJjYSIsImJhIiwiZWEiLCJmYSIsInNwbGl0Iiwid3JpdGFibGUiLCJkYSIsImgiLCJ1IiwibCIsIlBhIiwiQSIsIlEiLCJ4YSIsIkFkIiwiQiIsInJhY2UiLCJoYSIsImlhIiwiamEiLCJrYSIsImdldEF0dHJpYnV0ZSIsImxhIiwibWEiLCJuYSIsIm9hIiwicGEiLCJxYSIsInJhIiwic2EiLCJ0YSIsInVuc2hpZnQiLCJxIiwidWEiLCJ2YSIsIiRhIiwid2EiLCJ5YSIsInphIiwiQWEiLCJzdWJzdHJpbmciLCJzZXJ2ZXJSZXNwb25zZSIsInciLCJ0b0pTT04iLCJEYSIsIkJhIiwia2QiLCJTYSIsIllhIiwiVmEiLCJyZCIsInRkIiwidWQiLCJDYSIsImZpcmViYXNlRW5kcG9pbnQiLCJzZWN1cmVUb2tlbkVuZHBvaW50IiwiaWRlbnRpdHlQbGF0Zm9ybUVuZHBvaW50IiwiRWEiLCIkZ29vZ19UaGVuYWJsZSIsInN0YWNrIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkxhIiwiS2EiLCJNYSIsIk5hIiwiT2EiLCJRYSIsIlJhIiwic29tZSIsIldhIiwiWGEiLCJaYSIsImliIiwidHJpbSIsImV4ZWMiLCJhYiIsImJiIiwiY2IiLCJlYiIsImZiIiwiZ2IiLCJ4IiwiaGIiLCJqYiIsImtiIiwidXNlckFnZW50IiwibGIiLCJtYiIsIm5iIiwib2IiLCJ6IiwicGIiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJFbGVtZW50IiwiTG9jYXRpb24iLCJkaXNwbGF5TmFtZSIsInFiIiwicmIiLCJzYiIsInRiIiwidWIiLCJ2YiIsInRydXN0ZWRUeXBlcyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJjcmVhdGVTY3JpcHQiLCJjcmVhdGVTY3JpcHRVUkwiLCJ3YiIsInhiIiwieWIiLCJ6YiIsIkFiIiwiQ2IiLCJCYiIsIkMiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIlBiIiwiUWIiLCJzaGlmdCIsIlJiIiwiU2IiLCJiYyIsIlZiIiwiV2IiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiZG9jdW1lbnRNb2RlIiwiY2MiLCJkYyIsImVjIiwicGFyc2VGbG9hdCIsImdjIiwiVWIiLCJmYyIsIlRiIiwicGFyc2VJbnQiLCJpYyIsIk9mZnNjcmVlbkNhbnZhcyIsImdldENvbnRleHQiLCJqYyIsImtjIiwiZ2V0RWxlbWVudEJ5SWQiLCJsYyIsImNsYXNzTmFtZSIsImh0bWxGb3IiLCJtYyIsImxhc3RJbmRleE9mIiwicmMiLCJ1YyIsImNlbGxwYWRkaW5nIiwiY2VsbHNwYWNpbmciLCJjb2xzcGFuIiwiZnJhbWVib3JkZXIiLCJoZWlnaHQiLCJtYXhsZW5ndGgiLCJyb2xlIiwicm93c3BhbiIsInVzZW1hcCIsInZhbGlnbiIsIndpZHRoIiwicGMiLCJub2RlVHlwZSIsIm9jIiwiY29udGVudFR5cGUiLCJxYyIsInRjIiwieGMiLCJzZXRJbW1lZGlhdGUiLCJXaW5kb3ciLCJNZXNzYWdlQ2hhbm5lbCIsImRpc3BsYXkiLCJkb2N1bWVudEVsZW1lbnQiLCJjb250ZW50V2luZG93IiwicHJvdG9jb2wiLCJob3N0Iiwib3JpZ2luIiwicG9ydDEiLCJwb3J0MiIsInNjIiwidmMiLCJ3YyIsIkQiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiRSIsIkYiLCJHYyIsIkhjIiwiSmMiLCJPYiIsIk1jIiwiTmMiLCJPYyIsIkxjIiwiUGMiLCJLYyIsIlpjIiwiJGMiLCJUYyIsIlFjIiwiUmMiLCJTYyIsImNhbmNlbCIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJmcmVlemUiLCJhZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJHIiwiZGVmYXVsdFByZXZlbnRlZCIsImJkIiwicmVsYXRlZFRhcmdldCIsImJ1dHRvbiIsInNjcmVlblkiLCJzY3JlZW5YIiwiY2xpZW50WSIsImNsaWVudFgiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJjaGFuZ2VkVG91Y2hlcyIsInNyY0VsZW1lbnQiLCJub2RlTmFtZSIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwicGFnZVgiLCJwYWdlWSIsImNkIiwicHJldmVudERlZmF1bHQiLCIyIiwiMyIsIjQiLCJyZXR1cm5WYWx1ZSIsImtleUNvZGUiLCJkZCIsImVkIiwiZmQiLCJjYXB0dXJlIiwiVWEiLCJnZCIsImhkIiwiamQiLCJsZCIsIm5kIiwib25jZSIsIm9kIiwicGQiLCJxZCIsInNkIiwidmQiLCJhdHRhY2hFdmVudCIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJ3ZCIsIkgiLCJ4ZCIsImRldGFjaEV2ZW50IiwieWQiLCJ6ZCIsIkJkIiwiaGFuZGxlRXZlbnQiLCJJIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJWIiwiR2QiLCJZIiwiSWQiLCJKZCIsIktkIiwiZGlzcGF0Y2hFdmVudCIsImNsZWFyIiwiTGQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImlzTmFOIiwiZWUiLCJpZSIsImdlIiwiWmQiLCJVZCIsIiRkIiwiSiIsImFlIiwiYmUiLCJjZSIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImRlIiwiVmQiLCJjaGFyQXQiLCJXZCIsIlhkIiwiWWQiLCJNZCIsImZlIiwiaGUiLCJqZSIsImtlIiwibGUiLCJtZSIsIm5lIiwidmFsdWVPZiIsImlzRmluaXRlIiwib2UiLCJwZSIsInFlIiwiSyIsInJlIiwiaHJlZiIsInNlIiwidGUiLCJ4ZSIsInllIiwiemUiLCJmbG9vciIsInNjcmVlbiIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsInRvcCIsImxlZnQiLCJyZXNpemFibGUiLCJzdGF0dXNiYXIiLCJ0b29sYmFyIiwidmUiLCJBZSIsInNjcm9sbGJhcnMiLCJzdGFuZGFsb25lIiwibm9yZWZlcnJlciIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJvcGVuZXIiLCJ3cml0ZSIsIk5iIiwibm9vcGVuZXIiLCJmb2N1cyIsIkNlIiwiRGUiLCJFZSIsInJlYWR5U3RhdGUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIldvcmtlckdsb2JhbFNjb3BlIiwiS2UiLCJMZSIsIndlIiwiTmUiLCJPZSIsInNvcnQiLCJMIiwiUGUiLCJsb2NhbFN0b3JhZ2UiLCJRZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwicGFyc2UiLCJYZSIsIlllIiwiX19fanNsIiwiQ1AiLCJaZSIsIiRlIiwidmlzaWJpbGl0eVN0YXRlIiwiYmYiLCJjZiIsInRvVVRDU3RyaW5nIiwiZGYiLCJjb25uZWN0aW9uIiwiamYiLCJnZiIsImhmIiwia2YiLCJhYmNkIiwiTSIsIk4iLCJsZiIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJ1aWQiLCJmYWN0b3JJZCIsImVucm9sbG1lbnRUaW1lIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsInBob25lTnVtYmVyIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIm9wZXJhdGlvbiIsImNvbnRpbnVlVXJsIiwiUGYiLCJsYW5ndWFnZUNvZGUiLCJRZiIsInRlbmFudElkIiwiUmYiLCJyZWNvdmVyRW1haWwiLCJyZXNldFBhc3N3b3JkIiwicmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb24iLCJzaWduSW4iLCJ2ZXJpZnlBbmRDaGFuZ2VFbWFpbCIsInZlcmlmeUVtYWlsIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiY2FuSGFuZGxlQ29kZUluQXBwIiwiYW5kcm9pZFBhY2thZ2VOYW1lIiwiYW5kcm9pZE1pbmltdW1WZXJzaW9uIiwiYW5kcm9pZEluc3RhbGxBcHAiLCJpT1NCdW5kbGVJZCIsImR5bmFtaWNMaW5rRG9tYWluIiwiZWciLCJpZyIsImpnIiwic3ViIiwiaXNzIiwiYXVkIiwiZXhwIiwicHJvdmlkZXJfaWQiLCJzaWduX2luX3Byb3ZpZGVyIiwidGVuYW50IiwiaXNfYW5vbnltb3VzIiwia2ciLCJoZyIsImdnIiwiZmciLCJTIiwibGciLCJtZyIsIm5nIiwibWQiLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsImlzTmV3VXNlciIsImtpbmQiLCJyYXdVc2VySW5mbyIsInByb3ZpZGVySWQiLCJwcm9maWxlIiwibG9naW4iLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiSGciLCJwZW5kaW5nVG9rZW4iLCJyZXF1ZXN0VXJpIiwiS2ciLCJzaWduSW5NZXRob2QiLCJMZyIsImlkVG9rZW4iLCJhY2Nlc3NUb2tlbiIsIm9hdXRoVG9rZW4iLCJvYXV0aFRva2VuU2VjcmV0IiwiTWciLCJpZF90b2tlbiIsImFjY2Vzc190b2tlbiIsInNlY3JldCIsIm9hdXRoX3Rva2VuX3NlY3JldCIsInBvc3RCb2R5IiwiTmciLCJvYXV0aElkVG9rZW4iLCJvYXV0aEFjY2Vzc1Rva2VuIiwiT2ciLCJpc09BdXRoUHJvdmlkZXIiLCJQZyIsIlFnIiwiUmciLCJTZyIsImNyZWRlbnRpYWwiLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRCIsIkVNQUlMX1BBU1NXT1JEX1NJR05fSU5fTUVUSE9EIiwiZWgiLCJlbWFpbCIsInBhc3N3b3JkIiwiZmgiLCJnaCIsImhoIiwibGgiLCJ2ZXJpZmljYXRpb25JZCIsInZlcmlmaWNhdGlvbkNvZGUiLCJ0ZW1wb3JhcnlQcm9vZiIsImloIiwic2Vzc2lvbkluZm8iLCJtaCIsInFoIiwicmgiLCJyYXdOb25jZSIsInNoIiwidGgiLCJ1aCIsImV2ZW50SWQiLCJ1cmxSZXNwb25zZSIsInNlc3Npb25JZCIsInZoIiwibXVsdGlGYWN0b3JTZXNzaW9uIiwicGVuZGluZ0NyZWRlbnRpYWwiLCJHZyIsIklnIiwiSmciLCJPIiwiYWgiLCJvb2JDb2RlIiwiYmgiLCJjaCIsImRoIiwiUFJPVklERVJfSUQiLCJqaCIsImtoIiwidmVyaWZ5Iiwic2Vzc2lvbiIsInBqIiwicGhvbmVTZXNzaW9uSW5mbyIsIm5oIiwicGhvbmVFbnJvbGxtZW50SW5mbyIsInJlY2FwdGNoYVRva2VuIiwicmoiLCJwaG9uZVJlc3BvbnNlSW5mbyIsIm9oIiwibWZhUGVuZGluZ0NyZWRlbnRpYWwiLCJtZmFFbnJvbGxtZW50SWQiLCJtdWx0aUZhY3RvckhpbnQiLCJtdWx0aUZhY3RvclVpZCIsInBob25lU2lnbkluSW5mbyIsIm5qIiwicGgiLCJQSE9ORV9TSUdOX0lOX01FVEhPRCIsImdldFVpZCIsIkRoIiwid2giLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRWgiLCJGaCIsIlhNTEh0dHBSZXF1ZXN0IiwiQWN0aXZlWE9iamVjdCIsIkdoIiwiSGgiLCJYRG9tYWluUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmxvYWQiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiSWgiLCJKaCIsIkxoIiwiTWgiLCJzZW5kIiwic2V0UmVxdWVzdEhlYWRlciIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiYWkiLCJyZWFkIiwiVGEiLCIkaCIsIlpoIiwiYmkiLCJjaSIsIlIiLCJjcmVkZW50aWFscyIsImNhY2hlIiwiUmVxdWVzdCIsImFycmF5QnVmZmVyIiwiUmVhZGFibGVTdHJlYW0iLCJnZXRSZWFkZXIiLCJUZXh0RGVjb2RlciIsInRleHQiLCJkZWNvZGUiLCJzdHJlYW0iLCJkaSIsImVpIiwiaGkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwiZ2kiLCJpaSIsInFpIiwicmkiLCJ1aSIsInZpIiwidGkiLCJ3aSIsInlpIiwiemkiLCJBaSIsIkJpIiwic2kiLCJJYyIsImdldFJlc3BvbnNlIiwibW96UmVzcG9uc2VBcnJheUJ1ZmZlciIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJjaGFyc2V0IiwiSGkiLCJ0YWdOYW1lIiwiSWkiLCJKaSIsInNlY3VyZVRva2VuVGltZW91dCIsIktpIiwic2VjdXJlVG9rZW5IZWFkZXJzIiwiTGkiLCJmaXJlYmFzZVRpbWVvdXQiLCJNaSIsImZpcmViYXNlSGVhZGVycyIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJTaSIsIlRpIiwidWUiLCJnYXBpIiwiY2xpZW50IiwiV2kiLCJ4aSIsIlZpIiwiVWkiLCJwaSIsInRvVXBwZXJDYXNlIiwiSGQiLCJGb3JtRGF0YSIsIndpdGhDcmVkZW50aWFscyIsImppIiwiZmkiLCIkaSIsImFqIiwiZmoiLCJzZXRBcGlLZXkiLCJhdXRoIiwic2V0VG9rZW4iLCJwYXRoIiwiYXV0aFR5cGUiLCJnaiIsImhqIiwiaWoiLCJwaG90b1VybCIsInFqIiwicGhvbmVWZXJpZmljYXRpb25JbmZvIiwidWoiLCJ2aiIsIndqIiwibmVlZENvbmZpcm1hdGlvbiIsInhqIiwicmV0dXJuSWRwQ3JlZGVudGlhbCIsInlqIiwiemoiLCJhdXRvQ3JlYXRlIiwiQWoiLCJCaiIsImRlbGV0ZUF0dHJpYnV0ZSIsInJlcXVlc3RUeXBlIiwiamoiLCJraiIsImxqIiwibmV3RW1haWwiLCJtaiIsIm9qIiwiQ2oiLCJuZXdQYXNzd29yZCIsIkRqIiwiRWoiLCJaIiwiRmoiLCJVIiwiY2oiLCJHaiIsInRqIiwiZGVsZXRlUHJvdmlkZXIiLCJIaiIsIklqIiwiSmoiLCJlaiIsIktqIiwicmVjYXB0Y2hhU2l0ZUtleSIsIkxqIiwiVVNFUl9OT1RfRk9VTkQiLCJNaiIsIm5mIiwicmV0dXJuU2VjdXJlVG9rZW4iLCJZaSIsIlppIiwia2V5SW52YWxpZCIsImlwUmVmZXJlckJsb2NrZWQiLCJJTlZBTElEX0NVU1RPTV9UT0tFTiIsIkNSRURFTlRJQUxfTUlTTUFUQ0giLCJNSVNTSU5HX0NVU1RPTV9UT0tFTiIsIklOVkFMSURfSURFTlRJRklFUiIsIk1JU1NJTkdfQ09OVElOVUVfVVJJIiwiSU5WQUxJRF9FTUFJTCIsIklOVkFMSURfUEFTU1dPUkQiLCJVU0VSX0RJU0FCTEVEIiwiTUlTU0lOR19QQVNTV09SRCIsIkVNQUlMX0VYSVNUUyIsIlBBU1NXT1JEX0xPR0lOX0RJU0FCTEVEIiwiSU5WQUxJRF9JRFBfUkVTUE9OU0UiLCJJTlZBTElEX1BFTkRJTkdfVE9LRU4iLCJGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRCIsIk1JU1NJTkdfT1JfSU5WQUxJRF9OT05DRSIsIklOVkFMSURfTUVTU0FHRV9QQVlMT0FEIiwiSU5WQUxJRF9SRUNJUElFTlRfRU1BSUwiLCJJTlZBTElEX1NFTkRFUiIsIkVNQUlMX05PVF9GT1VORCIsIlJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVCIsIkVYUElSRURfT09CX0NPREUiLCJJTlZBTElEX09PQl9DT0RFIiwiTUlTU0lOR19PT0JfQ09ERSIsIklOVkFMSURfUFJPVklERVJfSUQiLCJDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU4iLCJJTlZBTElEX0lEX1RPS0VOIiwiVE9LRU5fRVhQSVJFRCIsIkNPUlNfVU5TVVBQT1JURUQiLCJEWU5BTUlDX0xJTktfTk9UX0FDVElWQVRFRCIsIklOVkFMSURfQVBQX0lEIiwiVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSIiwiV0VBS19QQVNTV09SRCIsIk9QRVJBVElPTl9OT1RfQUxMT1dFRCIsIlVTRVJfQ0FOQ0VMTEVEIiwiQ0FQVENIQV9DSEVDS19GQUlMRUQiLCJJTlZBTElEX0FQUF9DUkVERU5USUFMIiwiSU5WQUxJRF9DT0RFIiwiSU5WQUxJRF9QSE9ORV9OVU1CRVIiLCJJTlZBTElEX1NFU1NJT05fSU5GTyIsIklOVkFMSURfVEVNUE9SQVJZX1BST09GIiwiTUlTU0lOR19BUFBfQ1JFREVOVElBTCIsIk1JU1NJTkdfQ09ERSIsIk1JU1NJTkdfUEhPTkVfTlVNQkVSIiwiTUlTU0lOR19TRVNTSU9OX0lORk8iLCJRVU9UQV9FWENFRURFRCIsIlNFU1NJT05fRVhQSVJFRCIsIlJFSkVDVEVEX0NSRURFTlRJQUwiLCJJTlZBTElEX0NPTlRJTlVFX1VSSSIsIk1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUUiLCJNSVNTSU5HX0lPU19CVU5ETEVfSUQiLCJVTkFVVEhPUklaRURfRE9NQUlOIiwiSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOIiwiSU5WQUxJRF9PQVVUSF9DTElFTlRfSUQiLCJJTlZBTElEX0NFUlRfSEFTSCIsIlVOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT04iLCJJTlZBTElEX1RFTkFOVF9JRCIsIlRFTkFOVF9JRF9NSVNNQVRDSCIsIkFETUlOX09OTFlfT1BFUkFUSU9OIiwiSU5WQUxJRF9NRkFfUEVORElOR19DUkVERU5USUFMIiwiTUZBX0VOUk9MTE1FTlRfTk9UX0ZPVU5EIiwiTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMIiwiTUlTU0lOR19NRkFfRU5ST0xMTUVOVF9JRCIsIkVNQUlMX0NIQU5HRV9ORUVEU19WRVJJRklDQVRJT04iLCJTRUNPTkRfRkFDVE9SX0VYSVNUUyIsIlNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQiLCJVTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1IiLCJVTlZFUklGSUVEX0VNQUlMIiwiTmoiLCJWaiIsIlVqIiwiVGoiLCJ3aGVyZSIsIm1lc3NhZ2VIYW5kbGVyc0ZpbHRlciIsInBvc2l0aW9uIiwiZG9udGNsZWFyIiwicmVzdHlsZSIsInNldEhpZGVPbkxlYXZlIiwiUWoiLCJwaW5nIiwiT2oiLCJXaiIsIlhqIiwiWWoiLCJaaiIsImFrIiwiYXV0aG9yaXplZERvbWFpbnMiLCJkaiIsIlJlZ0V4cCIsImJrIiwicmVnaXN0ZXIiLCJTaiIsImF1dGhFdmVudCIsImNrIiwiZWsiLCJmayIsImdrIiwiaGsiLCJSaiIsIndlYlN0b3JhZ2VTdXBwb3J0IiwiZGsiLCJjbG9zZWQiLCJCZSIsImdldEl0ZW0iLCJUIiwic2siLCJpayIsImtrIiwibGsiLCJtayIsIm5rIiwic3RhcnQiLCJtZXNzYWdlQ2hhbm5lbCIsIm9uTWVzc2FnZSIsImV2ZW50VHlwZSIsInBrIiwicWsiLCJqayIsInJrIiwia2V5UHJvY2Vzc2VkIiwic2VydmljZVdvcmtlciIsInJlYWR5IiwiYWN0aXZlIiwiZmYiLCJ1ayIsImtleVBhdGgiLCJvYmplY3RTdG9yZU5hbWVzIiwidGsiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJjb250cm9sbGVyIiwiZWYiLCJvcGVuQ3Vyc29yIiwiZmJhc2Vfa2V5IiwiQ2siLCJEayIsIkVrIiwiRmsiLCJIayIsIkdrIiwiSWsiLCJKayIsIkxrIiwiS2siLCJzZXNzaW9uU3RvcmFnZSIsIk1rIiwiQnJvd3NlciIsIk5rIiwiTm9kZSIsIk9rIiwiUmVhY3ROYXRpdmUiLCJQayIsIldvcmtlciIsIlFrIiwicG9ydHMiLCJCayIsIlJrIiwiVmsiLCJTayIsIk5PTkUiLCJVayIsIldrIiwiWGsiLCJZayIsIiRrIiwiYmwiLCJjbGVhckludGVydmFsIiwiY2wiLCJzZXRJbnRlcnZhbCIsImFsIiwiZGwiLCJmbCIsImhsIiwiSW50MzJBcnJheSIsImtsIiwibGwiLCJtbCIsIm5sIiwib2wiLCJwbCIsInFsIiwicmwiLCJzbCIsInRsIiwidWwiLCJBbCIsInhsIiwiemwiLCJoYW5kbGVPcGVuVVJMIiwieGgiLCJCbCIsImVsIiwiQ2wiLCJ2bCIsImliaSIsImFwbiIsImFwcERpc3BsYXlOYW1lIiwiZGciLCJ3bCIsInlsIiwiRGwiLCJGbCIsIkhsIiwiSWwiLCJKbCIsIktsIiwidW5rbm93biIsInNpZ25JblZpYVJlZGlyZWN0IiwibGlua1ZpYVJlZGlyZWN0IiwicmVhdXRoVmlhUmVkaXJlY3QiLCJzaWduSW5WaWFQb3B1cCIsImxpbmtWaWFQb3B1cCIsInJlYXV0aFZpYVBvcHVwIiwiTGwiLCJNbCIsIk5sIiwiT2wiLCJQbCIsIlFsIiwiR2wiLCJSbCIsIlNsIiwiVGwiLCJVbCIsIlZsIiwiRWwiLCJXbCIsIlhsIiwiWWwiLCJabCIsImFtIiwiY20iLCJibSIsInVzZXIiLCJmbSIsImdtIiwiaG0iLCJpbSIsImF1dGhfdGltZSIsImlhdCIsImV4cGlyYXRpb25UaW1lIiwiYXV0aFRpbWUiLCJpc3N1ZWRBdFRpbWUiLCJzaWduSW5Qcm92aWRlciIsInNpZ25JblNlY29uZEZhY3RvciIsInNpZ25faW5fc2Vjb25kX2ZhY3RvciIsImNsYWltcyIsImptIiwia20iLCJsbSIsIiRsIiwiZG0iLCJlbSIsImNvbmZpcm0iLCJtbSIsIm5tIiwib20iLCJybSIsInNtIiwidG0iLCJ1bSIsIm11bHRpRmFjdG9yIiwiZW5yb2xsZWRGYWN0b3JzIiwidm0iLCJ5bSIsInptIiwic3RvcCIsIkFtIiwiYWYiLCJCbSIsIkNtIiwiRG0iLCJHbSIsImxhc3RTaWduSW5UaW1lIiwiSW0iLCJwaG90b1VSTCIsIkptIiwiYXV0aERvbWFpbiIsImVtdWxhdG9yQ29uZmlnIiwiS20iLCJMbSIsIk1tIiwiJCIsIlgiLCJObSIsIk9tIiwiUG0iLCJRbSIsIlJtIiwiU20iLCJUbSIsIlZtIiwiV20iLCJlbWFpbFZlcmlmaWVkIiwiaXNBbm9ueW1vdXMiLCJjcmVhdGVkQXQiLCJsYXN0TG9naW5BdCIsInByb3ZpZGVyRGF0YSIsIlhtIiwiWW0iLCJabSIsIiRtIiwiYW4iLCJibiIsImNuIiwiSG0iLCJFbSIsImRuIiwiZW4iLCJ4bSIsImhuIiwiZ24iLCJhZGRpdGlvbmFsVXNlckluZm8iLCJvcGVyYXRpb25UeXBlIiwiam4iLCJyZWxvYWQiLCJrbiIsImxuIiwibW4iLCJnYSIsIm5uIiwib24iLCJwbiIsInFuIiwic3RzVG9rZW5NYW5hZ2VyIiwicmVkaXJlY3RFdmVudElkIiwidG4iLCJwbSIsInFtIiwibWZhSW5mbyIsIndtIiwiZ3JhbnRfdHlwZSIsInJlZnJlc2hfdG9rZW4iLCJYaSIsIkZtIiwibmMiLCJ1c2VycyIsImxvY2FsSWQiLCJwcm92aWRlclVzZXJJbmZvIiwicmF3SWQiLCJwYXNzd29yZEhhc2giLCJzaiIsIm1mIiwidm4iLCJ4biIsIlprIiwiQW4iLCJ6biIsInduIiwieW4iLCJDbiIsIkRuIiwiRW4iLCJGbiIsIkduIiwidW4iLCJVbiIsIkhuIiwiUm4iLCJJbiIsIkpuIiwibG9nRnJhbWV3b3JrIiwiS24iLCJMbiIsIk1uIiwiTm4iLCJQbiIsIlVtIiwiUW4iLCJybiIsIlNuIiwiVG4iLCJjdXJyZW50VXNlciIsIlduIiwiX2xhdCIsIlhuIiwiWW4iLCJUayIsImxhbmd1YWdlcyIsImxhbmd1YWdlIiwidXNlckxhbmd1YWdlIiwiaW5uZXJUZXh0IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiY29sb3IiLCJib3R0b20iLCJtYXJnaW4iLCJ6SW5kZXgiLCJ0ZXh0QWxpZ24iLCJjbGFzc0xpc3QiLCJoYyIsIkJuIiwic24iLCJhZGRBdXRoVG9rZW5MaXN0ZW5lciIsIlZuIiwicmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIiLCJjb250aW51ZVVyaSIsInNpZ25pbk1ldGhvZHMiLCJiaiIsInJlbmRlciIsImV4ZWN1dGUiLCJabiIsImFvIiwiYm8iLCIkbiIsImNvIiwiZW8iLCJmbyIsIk1lIiwiZ28iLCJobyIsImdyZWNhcHRjaGEiLCJJbmZpbml0eSIsImlvIiwiam8iLCJrbyIsImxvIiwidGhlbWUiLCJtbyIsIm5vIiwiaGFzQ2hpbGROb2RlcyIsIm9vIiwicG8iLCJxbyIsInNvIiwidG8iLCJ1byIsImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZyIsInZvIiwid28iLCJybyIsInhvIiwieW8iLCJ6byIsIkRvIiwiR28iLCJIbyIsIkpvIiwiS28iLCJMbyIsIlBlcnNpc3RlbmNlIiwiTE9DQUwiLCJTRVNTSU9OIiwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWQiLCJBY3Rpb25Db2RlSW5mbyIsIk9wZXJhdGlvbiIsIkVNQUlMX1NJR05JTiIsIlBBU1NXT1JEX1JFU0VUIiwiUkVDT1ZFUl9FTUFJTCIsIlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OIiwiVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwiLCJWRVJJRllfRU1BSUwiLCJBdXRoIiwiQXV0aENyZWRlbnRpYWwiLCJVc2VyIiwiY29tbW9uanNHbG9iYWwiLCJnb29nIiwiY2xhc3NfMSIsIk5PX0VSUk9SIiwiVElNRU9VVCIsIk9QRU4iLCJhYnMiLCJQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmciLCJwZXJmb3JtYW5jZSIsImdldEVudHJpZXNCeVR5cGUiLCJuZXh0SG9wUHJvdG9jb2wiLCJlXzJfMSIsImludGVybmFsQ2hhbm5lbFBhcmFtcyIsInN1cHBvcnRzQ3Jvc3NEb21haW5YaHIiLCJjb25jdXJyZW50UmVxdWVzdExpbWl0IiwiZmFzdEhhbmRzaGFrZSIsImZvcmNlTG9uZ1BvbGxpbmciLCJzZW5kQmVhY29uIiwiSW1hZ2UiLCJob3N0bmFtZSIsInBvcnQiLCJtZXNzYWdlVXJsUGFyYW1zIiwibWVzc2FnZUhlYWRlcnMiLCJjbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkIiwiaW5pdE1lc3NhZ2VIZWFkZXJzIiwibWVzc2FnZUNvbnRlbnRUeXBlIiwiaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSIsInNlbmRSYXdKc29uIiwiaHR0cFNlc3Npb25JZFBhcmFtIiwiX19zbV9fIiwiX19kYXRhX18iLCJjcmVhdGVXZWJDaGFubmVsIiwiSFRUUF9FUlJPUiIsIkNPTVBMRVRFIiwiRXZlbnRUeXBlIiwiQ0xPU0UiLCJNRVNTQUdFIiwibGlzdGVuIiwibGlzdGVuT25jZSIsImdldExhc3RFcnJvciIsImdldExhc3RFcnJvckNvZGUiLCJnZXRTdGF0dXMiLCJnZXRSZXNwb25zZUpzb24iLCJnZXRSZXNwb25zZVRleHQiLCJFcnJvckNvZGUiLCJXZWJDaGFubmVsIiwiWGhySW8iLCJwZXJzaXN0ZW5jZUtleSIsInNzbCIsImRhdGFiYXNlIiwiaXNFcXVhbCIsImV2ZXJ5IiwiT0siLCJDQU5DRUxMRUQiLCJVTktOT1dOIiwiSU5WQUxJRF9BUkdVTUVOVCIsIkRFQURMSU5FX0VYQ0VFREVEIiwiTk9UX0ZPVU5EIiwiQUxSRUFEWV9FWElTVFMiLCJQRVJNSVNTSU9OX0RFTklFRCIsIlVOQVVUSEVOVElDQVRFRCIsIlJFU09VUkNFX0VYSEFVU1RFRCIsIkZBSUxFRF9QUkVDT05ESVRJT04iLCJBQk9SVEVEIiwiT1VUX09GX1JBTkdFIiwiVU5JTVBMRU1FTlRFRCIsIlVOQVZBSUxBQkxFIiwiREFUQV9MT1NTIiwic2Vjb25kcyIsIm5hbm9zZWNvbmRzIiwiZnJvbU1pbGxpcyIsImZyb21EYXRlIiwidG9EYXRlIiwidG9NaWxsaXMiLCJwYWRTdGFydCIsInRpbWVzdGFtcCIsInNlZ21lbnRzIiwiY2hpbGQiLCJsaW1pdCIsImlzSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiY29sbGVjdGlvbkdyb3VwIiwib3JkZXJCeSIsImZpbHRlcnMiLCJzdGFydEF0IiwiZW5kQXQiLCJ0dCIsImZpZWxkIiwiUXQiLCJkaXIiLCJldCIsIm5yIiwiQnQiLCJudCIsInJ0IiwiZnJvbUJhc2U2NFN0cmluZyIsImZyb21VaW50OEFycmF5IiwidG9CYXNlNjQiLCJ0b1VpbnQ4QXJyYXkiLCJpdCIsIm90IiwidXQiLCJ0YXJnZXRJZCIsInNlcXVlbmNlTnVtYmVyIiwibGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiIsInJlc3VtZVRva2VuIiwic3QiLCJhdCIsImN0IiwiaHQiLCJyb290IiwibHQiLCJFTVBUWSIsImNvcHkiLCJyaWdodCIsImZ0IiwiX3QiLCJkdCIsInd0IiwiVHQiLCJFdCIsIkl0IiwiQXQiLCJSRUQiLCJSdCIsIlB0IiwiZ3QiLCJWdCIsInl0IiwidnQiLCJidCIsIlN0IiwiRHQiLCJDdCIsInB0IiwiZmlyc3QiLCJsYXN0IiwiTnQiLCJ4dCIsIkZ0IiwiT3QiLCJNdCIsIm10Iiwia3QiLCIkdCIsIkx0IiwidHJhY2siLCJkb2MiLCJxdCIsImRvY3MiLCJVdCIsImRvY0NoYW5nZXMiLCJmcm9tQ2FjaGUiLCJLdCIsIld0IiwianQiLCJHdCIsInp0IiwiSHQiLCJKdCIsIll0IiwiWHQiLCJadCIsInJlbW92ZWRUYXJnZXRJZHMiLCJzdGF0ZSIsInRhcmdldElkcyIsImNhdXNlIiwicmVtb3ZlVGFyZ2V0IiwiRmUiLCJtYXBWYWx1ZSIsImZpZWxkcyIsIl9fdHlwZV9fIiwic3RyaW5nVmFsdWUiLCJfX3ByZXZpb3VzX3ZhbHVlX18iLCJfX2xvY2FsX3dyaXRlX3RpbWVfXyIsInRpbWVzdGFtcFZhbHVlIiwibmFub3MiLCJib29sZWFuVmFsdWUiLCJieXRlc1ZhbHVlIiwicmVmZXJlbmNlVmFsdWUiLCJnZW9Qb2ludFZhbHVlIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJpbnRlZ2VyVmFsdWUiLCJkb3VibGVWYWx1ZSIsImFycmF5VmFsdWUiLCJhc2MiLCJkZXNjIiwiaW4iLCJwcm90byIsInVwZGF0ZU1hc2siLCJ0cmFuc2Zvcm0iLCJmaWVsZFRyYW5zZm9ybXMiLCJmaWVsZFBhdGgiLCJzZXRUb1NlcnZlclZhbHVlIiwiYXBwZW5kTWlzc2luZ0VsZW1lbnRzIiwiZWxlbWVudHMiLCJyZW1vdmVBbGxGcm9tQXJyYXkiLCJpbmNyZW1lbnQiLCJjdXJyZW50RG9jdW1lbnQiLCJ1cGRhdGVUaW1lIiwiZXhpc3RzIiwiZmllbGRQYXRocyIsImRvY3VtZW50cyIsInN0cnVjdHVyZWRRdWVyeSIsInBhcmVudCIsImNvbGxlY3Rpb25JZCIsImFsbERlc2NlbmRhbnRzIiwidW5hcnlGaWx0ZXIiLCJmaWVsZEZpbHRlciIsImNvbXBvc2l0ZUZpbHRlciIsImRpcmVjdGlvbiIsInRyIiwicmVkdWNlIiwiYmVmb3JlIiwiTmFOIiwibnVsbFZhbHVlIiwic2VyaWFsaXplciIsInRyYW5zZm9ybVJlc3VsdHMiLCJoYXNDb21taXR0ZWRNdXRhdGlvbnMiLCJlbXB0eSIsImxpbWl0VHlwZSIsIk9uIiwibWF0Y2hlcyIsImVyIiwicnIiLCJpciIsIm9yIiwidXIiLCJsciIsImVudiIsIm9uYmxvY2tlZCIsImNyZWF0ZU9yVXBncmFkZSIsIm9udmVyc2lvbmNoYW5nZSIsInJ1blRyYW5zYWN0aW9uIiwiaHIiLCJzciIsImNyIiwiYWN0aW9uIiwiYWJvcnRlZCIsImRyIiwiZnIiLCJ0cyIsImVzIiwibnMiLCJzcyIsInByaW1hcnlLZXkiLCJyYW5nZSIsInJldmVyc2UiLCJvcGVuS2V5Q3Vyc29yIiwicHIiLCJ2ciIsInlyIiwiZ3IiLCJycyIsIm9zIiwiY3MiLCJ1cyIsImhzIiwibHMiLCJmcyIsIm1yIiwiZHMiLCJ3cyIsIlRzIiwiRXMiLCJJcyIsIkFzIiwiUnMiLCJQcyIsImdzIiwiZW5xdWV1ZSIsInlzIiwicHMiLCJ2cyIsImJzIiwiU3MiLCJEcyIsIkNzIiwiTnMiLCJ4cyIsIkZzIiwiT3MiLCJNcyIsIndyIiwiYnIiLCJrcyIsIl9yIiwicXVlcmllcyIsIm9ubGluZVN0YXRlIiwiJHMiLCJJciIsIkxzIiwib25FcnJvciIsIkJzIiwicXMiLCJ4ciIsIkVyIiwiVXMiLCJUciIsIk5yIiwiQXIiLCJRcyIsIktzIiwiV3MiLCJpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzIiwianMiLCJHcyIsInpzIiwiSHMiLCJoYXNQZW5kaW5nV3JpdGVzIiwiU3IiLCJKcyIsIllzIiwiWHMiLCJacyIsImtyIiwiQXV0aG9yaXphdGlvbiIsIkRyIiwiT3IiLCJQciIsImdldEF1dGhIZWFkZXJWYWx1ZUZvckZpcnN0UGFydHkiLCJWciIsIkNyIiwiYmF0Y2hJZCIsImJhc2VNdXRhdGlvbnMiLCJtdXRhdGlvbnMiLCJMciIsImJhdGNoIiwiUnIiLCJyZWFkVGltZSIsImdldEVudHJpZXMiLCJNciIsIlVyIiwicXIiLCJGciIsImpyIiwiQnIiLCJ6ciIsInByZXZpb3VzVmFsdWUiLCJHciIsIktyIiwiYnVmZmVyIiwiUXIiLCJXciIsIllyIiwiSW8iLCJIciIsIm1heFZhbHVlIiwiSnIiLCIkciIsIlhyIiwiWnIiLCJub0RvY3VtZW50IiwidW5rbm93bkRvY3VtZW50IiwibG9jYWxXcml0ZVRpbWVNcyIsImxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciIsInVzZXJJZCIsIklEQktleVJhbmdlIiwiYm91bmQiLCJORUdBVElWRV9JTkZJTklUWSIsIlBPU0lUSVZFX0lORklOSVRZIiwidXNlck11dGF0aW9uc0luZGV4IiwiUExBQ0VIT0xERVIiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsInByZWZpeEZvclBhdGgiLCJwcmVmaXhGb3JVc2VyIiwib25seSIsInVwZGF0ZU1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJieXRlU2l6ZSIsImNvbGxlY3Rpb25SZWFkVGltZUluZGV4IiwiX28iLCJUbyIsIkVvIiwiYXV0b0luY3JlbWVudCIsInVzZXJNdXRhdGlvbnNLZXlQYXRoIiwidW5pcXVlIiwiZGVsZXRlT2JqZWN0U3RvcmUiLCJyZW1vdmVBY2tub3dsZWRnZWRNdXRhdGlvbnMiLCJhZGREb2N1bWVudEdsb2JhbCIsImVuc3VyZVNlcXVlbmNlTnVtYmVycyIsImNyZWF0ZUNvbGxlY3Rpb25QYXJlbnRJbmRleCIsInJlYWRUaW1lSW5kZXgiLCJyZWFkVGltZUluZGV4UGF0aCIsImNvbGxlY3Rpb25SZWFkVGltZUluZGV4UGF0aCIsInJld3JpdGVDYW5vbmljYWxJZHMiLCJsYXN0QWNrbm93bGVkZ2VkQmF0Y2hJZCIsImhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciIsIm93bmVySWQiLCJhbGxvd1RhYlN5bmNocm9uaXphdGlvbiIsImxlYXNlVGltZXN0YW1wTXMiLCJsYXN0U3RyZWFtVG9rZW4iLCJwYXJlbnRQYXRoIiwiY2Fub25pY2FsSWQiLCJxdWVyeVRhcmdldHNJbmRleE5hbWUiLCJxdWVyeVRhcmdldHNLZXlQYXRoIiwiZG9jdW1lbnRUYXJnZXRzSW5kZXgiLCJkb2N1bWVudFRhcmdldHNLZXlQYXRoIiwiaGlnaGVzdFRhcmdldElkIiwibGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiIsInRhcmdldENvdW50IiwiY2xpZW50SWQiLCJ1cGRhdGVUaW1lTXMiLCJuZXR3b3JrRW5hYmxlZCIsImluRm9yZWdyb3VuZCIsImJ1bmRsZUlkIiwiY3JlYXRlVGltZSIsImJ1bmRsZWRRdWVyeSIsIkFvIiwiUm8iLCJQbyIsIlZvIiwiU28iLCJDbyIsIk5vIiwiRm8iLCJPbyIsIk1vIiwiJG8iLCJCbyIsIlVvIiwiUW8iLCJXbyIsIllvIiwiaXNQcmltYXJ5IiwiWG8iLCJabyIsIm5ld1ZlcnNpb24iLCJwZXJzaXN0ZW5jZSIsInRhcmdldENoYW5nZSIsInRhcmdldENoYW5nZVR5cGUiLCJkb2N1bWVudENoYW5nZSIsImRvY3VtZW50RGVsZXRlIiwiZG9jdW1lbnRSZW1vdmUiLCJhZGRUYXJnZXQiLCJsYWJlbHMiLCJzdHJlYW1Ub2tlbiIsIndyaXRlUmVzdWx0cyIsImNvbW1pdFRpbWUiLCJ3cml0ZXMiLCJ0ZXJtaW5hdGUiLCJ0dSIsImV1IiwibnUiLCJzdSIsIml1IiwicnUiLCJvdSIsImF1IiwiY3UiLCJ1dSIsImh1IiwibHUiLCJfdSIsImZ1IiwiZHUiLCJ3dSIsIlR1IiwiRXUiLCJJdSIsIm11IiwiYWN0aXZlVGFyZ2V0SWRzIiwiQXUiLCJSdSIsIlB1IiwiZ3UiLCJWdSIsInl1IiwicHUiLCJ2dSIsInN0b3JhZ2UiLCJidSIsIlN1IiwiRHUiLCJDdSIsIk51IiwieHUiLCJGdSIsIk91IiwiTXUiLCJrdSIsIiR1IiwiTHUiLCJCdSIsInF1IiwiVXUiLCJRdSIsIkt1IiwiV3UiLCJqdSIsIkd1IiwienUiLCJIdSIsIkp1IiwiWXUiLCJYdSIsIlp1Iiwic3RvcmFnZUFyZWEiLCJfaCIsInNuYXBzaG90IiwidmlldyIsIktoIiwiX2wiLCJnbCIsImlzIiwiQmF0Y2hHZXREb2N1bWVudHMiLCJDb21taXQiLCJSdW5RdWVyeSIsImZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNcyIsImRldGVjdEJ1ZmZlcmluZ1Byb3h5IiwiYXMiLCJzeW5jaHJvbml6ZVRhYnMiLCJpbml0aWFsaXplIiwiY2FjaGVTaXplQnl0ZXMiLCJmb3JjZU93bmVyc2hpcCIsInRfIiwiZV8iLCJuXyIsInNfIiwibXV0ZWQiLCJpXyIsInJfIiwib18iLCJtZXJnZSIsIm1lcmdlRmllbGRzIiwiYV8iLCJjXyIsInVfIiwiaF8iLCJsXyIsImlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMiLCJmXyIsImRfIiwid18iLCJUXyIsIkVfIiwiZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZyIsImV4cGVyaW1lbnRhbEF1dG9EZXRlY3RMb25nUG9sbGluZyIsIlZzIiwiSV8iLCJtXyIsIkFfIiwiUl8iLCJQXyIsImdfIiwiVl8iLCJ5XyIsInBfIiwiZmlyZXN0b3JlIiwidl8iLCJiXyIsIlNfIiwiRF8iLCJDXyIsIk5fIiwieF8iLCJmcm9tRmlyZXN0b3JlIiwiRl8iLCJ3aXRoQ29udmVydGVyIiwiTV8iLCJPXyIsImtfIiwiTF8iLCJCXyIsInFfIiwiVV8iLCJRXyIsIktfIiwial8iLCJHXyIsImdldFByb3RvdHlwZU9mIiwic2VhcmNoIiwiel8iLCJIXyIsIkpfIiwiWV8iLCJYXyIsIlpfIiwiZm91bmQiLCJtaXNzaW5nIiwiY29tbWl0IiwidXBkYXRlRnVuY3Rpb24iLCJydW4iLCJnZXRDb25maWd1cmF0aW9uIiwiX2YiLCJzZXNzaW9uSW5kZXgiLCJET01FeGNlcHRpb24iLCJzZXJ2ZXJUaW1lc3RhbXBzIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsImVuYWJsZUluZGV4ZWREYlBlcnNpc3RlbmNlIiwiZW5hYmxlTXVsdGlUYWJJbmRleGVkRGJQZXJzaXN0ZW5jZSIsImNsZWFySW5kZXhlZERiUGVyc2lzdGVuY2UiLCJ1c2VFbXVsYXRvciIsImVuYWJsZU5ldHdvcmsiLCJkaXNhYmxlTmV0d29yayIsImVuYWJsZVBlcnNpc3RlbmNlIiwiZXhwZXJpbWVudGFsRm9yY2VPd25pbmdUYWIiLCJjbGVhclBlcnNpc3RlbmNlIiwid2FpdEZvclBlbmRpbmdXcml0ZXMiLCJvblNuYXBzaG90c0luU3luYyIsImNvbGxlY3Rpb24iLCJvblNuYXBzaG90IiwicmVmIiwibGltaXRUb0xhc3QiLCJzdGFydEFmdGVyIiwiZW5kQmVmb3JlIiwidG9GaXJlc3RvcmUiLCJkb2N1bWVudElkIiwic2VydmVyVGltZXN0YW1wIiwiYXJyYXlVbmlvbiIsImFycmF5UmVtb3ZlIiwiRmlyZXN0b3JlIiwiR2VvUG9pbnQiLCJUaW1lc3RhbXAiLCJCbG9iIiwiV3JpdGVCYXRjaCIsIkRvY3VtZW50UmVmZXJlbmNlIiwiRG9jdW1lbnRTbmFwc2hvdCIsIlF1ZXJ5IiwiUXVlcnlEb2N1bWVudFNuYXBzaG90IiwiUXVlcnlTbmFwc2hvdCIsIkNvbGxlY3Rpb25SZWZlcmVuY2UiLCJGaWVsZFBhdGgiLCJGaWVsZFZhbHVlIiwiQ0FDSEVfU0laRV9VTkxJTUlURUQiLCJkYXRhYmFzZVVSTCIsInN0b3JhZ2VCdWNrZXQiLCJtZXNzYWdpbmdTZW5kZXJJZCIsImlucHV0IiwicXVlcnlTZWxlY3RvckFsbCIsImNoZWNrZWQiLCJzZXRQZXJzaXN0ZW5jZSIsInNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkIiwiYWxlcnQiXSwibWFwcGluZ3MiOiI7MkhBS0lBLEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQyxHQUV6RUQsRUFBd0JFLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxzTEFBd0xILEVBQXFDLCt1SEFBbXZILEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLGlDQUFpQyxNQUFRLEdBQUcsU0FBVyw2ckRBQTZyRCxlQUFpQixDQUFDLDA3SEFBKzdILFdBQWEsTUFFdHVULFcsOEdDTElELEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQyxHQUV6RUQsRUFBd0JFLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSx5REFBNkRILEVBQXFDLHVYQUE0WCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxpQ0FBaUMsTUFBUSxHQUFHLFNBQVcsME1BQTBNLGVBQWlCLENBQUMsNmNBQXFkLFdBQWEsTUFFdnhDLFcscUJDRkFFLEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQXVEWCxPQXJEQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVU4sRUFBdUJLLEdBRXJDLE9BQUlBLEVBQUssR0FDQSxVQUFVRSxPQUFPRixFQUFLLEdBQUksTUFBTUUsT0FBT0QsRUFBUyxLQUdsREEsS0FDTkUsS0FBSyxLQUtWUCxFQUFLUSxFQUFJLFNBQVVDLEVBQVNDLEVBQVlDLEdBQ2YsaUJBQVpGLElBRVRBLEVBQVUsQ0FBQyxDQUFDLEtBQU1BLEVBQVMsTUFHN0IsSUFBSUcsRUFBeUIsR0FFN0IsR0FBSUQsRUFDRixJQUFLLElBQUlILEVBQUksRUFBR0EsRUFBSU4sS0FBS1csT0FBUUwsSUFBSyxDQUVwQyxJQUFJWCxFQUFLSyxLQUFLTSxHQUFHLEdBRVAsTUFBTlgsSUFDRmUsRUFBdUJmLElBQU0sR0FLbkMsSUFBSyxJQUFJaUIsRUFBSyxFQUFHQSxFQUFLTCxFQUFRSSxPQUFRQyxJQUFNLENBQzFDLElBQUlWLEVBQU8sR0FBR0UsT0FBT0csRUFBUUssSUFFekJILEdBQVVDLEVBQXVCUixFQUFLLE1BS3RDTSxJQUNHTixFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHRSxPQUFPSSxFQUFZLFNBQVNKLE9BQU9GLEVBQUssSUFGckRBLEVBQUssR0FBS00sR0FNZFYsRUFBS0wsS0FBS1MsTUFJUEosSSxvQkN4RFQsU0FBU2UsRUFBa0JDLEVBQUtDLElBQWtCLE1BQVBBLEdBQWVBLEVBQU1ELEVBQUlILFVBQVFJLEVBQU1ELEVBQUlILFFBQVEsSUFBSyxJQUFJTCxFQUFJLEVBQUdVLEVBQU8sSUFBSUMsTUFBTUYsR0FBTVQsRUFBSVMsRUFBS1QsSUFBT1UsRUFBS1YsR0FBS1EsRUFBSVIsR0FBTSxPQUFPVSxFQU1oTHRCLEVBQU9FLFFBQVUsU0FBZ0NNLEdBQy9DLElBYnNCWSxFQUFLUixFQWF2QlksR0FidUJaLEVBYU0sRUFIbkMsU0FBeUJRLEdBQU8sR0FBSUcsTUFBTUUsUUFBUUwsR0FBTSxPQUFPQSxFQVZ0Qk0sQ0FBakJOLEVBYUtaLElBTDdCLFNBQStCWSxFQUFLUixHQUFLLEdBQXNCLG9CQUFYZSxRQUE0QkEsT0FBT0MsWUFBWUMsT0FBT1QsR0FBakUsQ0FBZ0YsSUFBSVUsRUFBTyxHQUFRQyxHQUFLLEVBQVVDLEdBQUssRUFBV0MsT0FBS0MsRUFBVyxJQUFNLElBQUssSUFBaUNDLEVBQTdCakIsRUFBS0UsRUFBSU8sT0FBT0MsY0FBbUJHLEdBQU1JLEVBQUtqQixFQUFHa0IsUUFBUUMsUUFBb0JQLEVBQUsvQixLQUFLb0MsRUFBR0csUUFBWTFCLEdBQUtrQixFQUFLYixTQUFXTCxHQUEzRG1CLEdBQUssSUFBb0UsTUFBT1EsR0FBT1AsR0FBSyxFQUFNQyxFQUFLTSxFQUFPLFFBQVUsSUFBV1IsR0FBc0IsTUFBaEJiLEVBQVcsUUFBV0EsRUFBVyxTQUFPLFFBQVUsR0FBSWMsRUFBSSxNQUFNQyxHQUFRLE9BQU9ILEdBUmphVSxDQUFzQnBCLEVBQUtSLElBSTVGLFNBQXFDNkIsRUFBR0MsR0FBVSxHQUFLRCxFQUFMLENBQWdCLEdBQWlCLGlCQUFOQSxFQUFnQixPQUFPdEIsRUFBa0JzQixFQUFHQyxHQUFTLElBQUlDLEVBQUlkLE9BQU9lLFVBQVV2QyxTQUFTd0MsS0FBS0osR0FBR0ssTUFBTSxHQUFJLEdBQWlFLE1BQW5ELFdBQU5ILEdBQWtCRixFQUFFTSxjQUFhSixFQUFJRixFQUFFTSxZQUFZQyxNQUFnQixRQUFOTCxHQUFxQixRQUFOQSxFQUFvQnBCLE1BQU0wQixLQUFLUixHQUFjLGNBQU5FLEdBQXFCLDJDQUEyQ08sS0FBS1AsR0FBV3hCLEVBQWtCc0IsRUFBR0MsUUFBekcsR0FKM01TLENBQTRCL0IsRUFBS1IsSUFFbkksV0FBOEIsTUFBTSxJQUFJd0MsVUFBVSw2SUFGdUZDLElBY25JNUMsRUFBVWUsRUFBTSxHQUNoQjhCLEVBQWE5QixFQUFNLEdBRXZCLEdBQW9CLG1CQUFUK0IsS0FBcUIsQ0FFOUIsSUFBSUMsRUFBU0QsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVTixNQUN6RE8sRUFBTywrREFBK0RuRCxPQUFPOEMsR0FDN0VNLEVBQWdCLE9BQU9wRCxPQUFPbUQsRUFBTSxPQUNwQ0UsRUFBYVQsRUFBV1UsUUFBUXpELEtBQUksU0FBVTBELEdBQ2hELE1BQU8saUJBQWlCdkQsT0FBTzRDLEVBQVdZLFlBQWMsSUFBSXhELE9BQU91RCxFQUFRLFVBRTdFLE1BQU8sQ0FBQ3hELEdBQVNDLE9BQU9xRCxHQUFZckQsT0FBTyxDQUFDb0QsSUFBZ0JuRCxLQUFLLE1BR25FLE1BQU8sQ0FBQ0YsR0FBU0UsS0FBSyxRLHFCQzVCeEJYLEVBQU9FLFFBQVUsU0FBVWlFLEVBQUtDLEdBUzlCLE9BUktBLElBRUhBLEVBQVUsSUFNTyxpQkFGbkJELEVBQU1BLEdBQU9BLEVBQUlFLFdBQWFGLEVBQUlHLFFBQVVILEdBR25DQSxHQUlMLGVBQWVqQixLQUFLaUIsS0FFdEJBLEVBQU1BLEVBQUlyQixNQUFNLEdBQUksSUFHbEJzQixFQUFRRyxPQUVWSixHQUFPQyxFQUFRRyxNQUtiLGNBQWNyQixLQUFLaUIsSUFBUUMsRUFBUUksV0FDOUIsSUFBSzlELE9BQU95RCxFQUFJTSxRQUFRLEtBQU0sT0FBT0EsUUFBUSxNQUFPLE9BQVEsS0FHOUROLEssbUJDNUJELFNBQVVqRSxHQUFXLGFBRTNCLFNBQVN3RSxFQUFRdEQsR0FDZixPQUFPRyxNQUFNcUIsVUFBVUUsTUFBTUQsS0FBS3pCLEdBR3BDLFNBQVN1RCxFQUFpQkMsR0FDeEIsT0FBTyxJQUFJQyxTQUFRLFNBQVNDLEVBQVNDLEdBQ25DSCxFQUFRSSxVQUFZLFdBQ2xCRixFQUFRRixFQUFRSyxTQUdsQkwsRUFBUU0sUUFBVSxXQUNoQkgsRUFBT0gsRUFBUU8sV0FLckIsU0FBU0MsRUFBcUJDLEVBQUtDLEVBQVFDLEdBQ3pDLElBQUlYLEVBQ0FZLEVBQUksSUFBSVgsU0FBUSxTQUFTQyxFQUFTQyxHQUVwQ0osRUFEQUMsRUFBVVMsRUFBSUMsR0FBUUcsTUFBTUosRUFBS0UsSUFDUEcsS0FBS1osRUFBU0MsTUFJMUMsT0FEQVMsRUFBRVosUUFBVUEsRUFDTFksRUFHVCxTQUFTRyxFQUEyQk4sRUFBS0MsRUFBUUMsR0FDL0MsSUFBSUMsRUFBSUosRUFBcUJDLEVBQUtDLEVBQVFDLEdBQzFDLE9BQU9DLEVBQUVFLE1BQUssU0FBU3BELEdBQ3JCLEdBQUtBLEVBQ0wsT0FBTyxJQUFJc0QsRUFBT3RELEVBQU9rRCxFQUFFWixZQUkvQixTQUFTaUIsRUFBZ0JDLEVBQVlDLEVBQVlDLEdBQy9DQSxFQUFXQyxTQUFRLFNBQVNDLEdBQzFCckUsT0FBT3NFLGVBQWVMLEVBQVdsRCxVQUFXc0QsRUFBTSxDQUNoREUsSUFBSyxXQUNILE9BQU85RixLQUFLeUYsR0FBWUcsSUFFMUJHLElBQUssU0FBU0MsR0FDWmhHLEtBQUt5RixHQUFZRyxHQUFRSSxRQU1qQyxTQUFTQyxFQUFvQlQsRUFBWUMsRUFBWVMsRUFBYVIsR0FDaEVBLEVBQVdDLFNBQVEsU0FBU0MsR0FDcEJBLEtBQVFNLEVBQVk1RCxZQUMxQmtELEVBQVdsRCxVQUFVc0QsR0FBUSxXQUMzQixPQUFPZCxFQUFxQjlFLEtBQUt5RixHQUFhRyxFQUFNTyxnQkFLMUQsU0FBU0MsRUFBYVosRUFBWUMsRUFBWVMsRUFBYVIsR0FDekRBLEVBQVdDLFNBQVEsU0FBU0MsR0FDcEJBLEtBQVFNLEVBQVk1RCxZQUMxQmtELEVBQVdsRCxVQUFVc0QsR0FBUSxXQUMzQixPQUFPNUYsS0FBS3lGLEdBQVlHLEdBQU1ULE1BQU1uRixLQUFLeUYsR0FBYVUsZ0JBSzVELFNBQVNFLEVBQTBCYixFQUFZQyxFQUFZUyxFQUFhUixHQUN0RUEsRUFBV0MsU0FBUSxTQUFTQyxHQUNwQkEsS0FBUU0sRUFBWTVELFlBQzFCa0QsRUFBV2xELFVBQVVzRCxHQUFRLFdBQzNCLE9BQU9QLEVBQTJCckYsS0FBS3lGLEdBQWFHLEVBQU1PLGdCQUtoRSxTQUFTRyxFQUFNQyxHQUNidkcsS0FBS3dHLE9BQVNELEVBdUJoQixTQUFTakIsRUFBT21CLEVBQVFuQyxHQUN0QnRFLEtBQUswRyxRQUFVRCxFQUNmekcsS0FBSzJHLFNBQVdyQyxFQStCbEIsU0FBU3NDLEVBQVlDLEdBQ25CN0csS0FBSzhHLE9BQVNELEVBdUNoQixTQUFTRSxFQUFZQyxHQUNuQmhILEtBQUtpSCxJQUFNRCxFQUNYaEgsS0FBS2tILFNBQVcsSUFBSTNDLFNBQVEsU0FBU0MsRUFBU0MsR0FDNUN1QyxFQUFlRyxXQUFhLFdBQzFCM0MsS0FFRndDLEVBQWVwQyxRQUFVLFdBQ3ZCSCxFQUFPdUMsRUFBZW5DLFFBRXhCbUMsRUFBZUksUUFBVSxXQUN2QjNDLEVBQU91QyxFQUFlbkMsV0FrQjVCLFNBQVN3QyxFQUFVQyxFQUFJQyxFQUFZQyxHQUNqQ3hILEtBQUt5SCxJQUFNSCxFQUNYdEgsS0FBS3VILFdBQWFBLEVBQ2xCdkgsS0FBS3dILFlBQWMsSUFBSVQsRUFBWVMsR0FrQnJDLFNBQVNFLEVBQUdKLEdBQ1Z0SCxLQUFLeUgsSUFBTUgsRUEvSWIvQixFQUFnQmUsRUFBTyxTQUFVLENBQy9CLE9BQ0EsVUFDQSxhQUNBLFdBR0ZMLEVBQW9CSyxFQUFPLFNBQVVxQixTQUFVLENBQzdDLE1BQ0EsU0FDQSxTQUNBLGFBQ0EsVUFHRnRCLEVBQTBCQyxFQUFPLFNBQVVxQixTQUFVLENBQ25ELGFBQ0Esa0JBUUZwQyxFQUFnQkQsRUFBUSxVQUFXLENBQ2pDLFlBQ0EsTUFDQSxhQUNBLFVBR0ZXLEVBQW9CWCxFQUFRLFVBQVdzQyxVQUFXLENBQ2hELFNBQ0EsV0FJRixDQUFDLFVBQVcsV0FBWSxzQkFBc0JqQyxTQUFRLFNBQVNrQyxHQUN2REEsS0FBY0QsVUFBVXRGLFlBQzlCZ0QsRUFBT2hELFVBQVV1RixHQUFjLFdBQzdCLElBQUlwQixFQUFTekcsS0FDVGlGLEVBQU9rQixVQUNYLE9BQU81QixRQUFRQyxVQUFVWSxNQUFLLFdBRTVCLE9BREFxQixFQUFPQyxRQUFRbUIsR0FBWTFDLE1BQU1zQixFQUFPQyxRQUFTekIsR0FDMUNaLEVBQWlCb0MsRUFBT0UsVUFBVXZCLE1BQUssU0FBU3BELEdBQ3JELEdBQUtBLEVBQ0wsT0FBTyxJQUFJc0QsRUFBT3RELEVBQU95RSxFQUFPRSxxQkFVeENDLEVBQVl0RSxVQUFVd0YsWUFBYyxXQUNsQyxPQUFPLElBQUl4QixFQUFNdEcsS0FBSzhHLE9BQU9nQixZQUFZM0MsTUFBTW5GLEtBQUs4RyxPQUFRWCxhQUc5RFMsRUFBWXRFLFVBQVVpRSxNQUFRLFdBQzVCLE9BQU8sSUFBSUQsRUFBTXRHLEtBQUs4RyxPQUFPUCxNQUFNcEIsTUFBTW5GLEtBQUs4RyxPQUFRWCxhQUd4RFosRUFBZ0JxQixFQUFhLFNBQVUsQ0FDckMsT0FDQSxVQUNBLGFBQ0Esa0JBR0ZYLEVBQW9CVyxFQUFhLFNBQVVtQixlQUFnQixDQUN6RCxNQUNBLE1BQ0EsU0FDQSxRQUNBLE1BQ0EsU0FDQSxTQUNBLGFBQ0EsVUFHRjFCLEVBQTBCTyxFQUFhLFNBQVVtQixlQUFnQixDQUMvRCxhQUNBLGtCQUdGM0IsRUFBYVEsRUFBYSxTQUFVbUIsZUFBZ0IsQ0FDbEQsZ0JBa0JGaEIsRUFBWXpFLFVBQVUwRixZQUFjLFdBQ2xDLE9BQU8sSUFBSXBCLEVBQVk1RyxLQUFLaUgsSUFBSWUsWUFBWTdDLE1BQU1uRixLQUFLaUgsSUFBS2QsYUFHOURaLEVBQWdCd0IsRUFBYSxNQUFPLENBQ2xDLG1CQUNBLFNBR0ZYLEVBQWFXLEVBQWEsTUFBT2tCLGVBQWdCLENBQy9DLFVBU0ZaLEVBQVUvRSxVQUFVNEYsa0JBQW9CLFdBQ3RDLE9BQU8sSUFBSXRCLEVBQVk1RyxLQUFLeUgsSUFBSVMsa0JBQWtCL0MsTUFBTW5GLEtBQUt5SCxJQUFLdEIsYUFHcEVaLEVBQWdCOEIsRUFBVyxNQUFPLENBQ2hDLE9BQ0EsVUFDQSxxQkFHRmpCLEVBQWFpQixFQUFXLE1BQU9jLFlBQWEsQ0FDMUMsb0JBQ0EsVUFPRlQsRUFBR3BGLFVBQVVrRixZQUFjLFdBQ3pCLE9BQU8sSUFBSVQsRUFBWS9HLEtBQUt5SCxJQUFJRCxZQUFZckMsTUFBTW5GLEtBQUt5SCxJQUFLdEIsYUFHOURaLEVBQWdCbUMsRUFBSSxNQUFPLENBQ3pCLE9BQ0EsVUFDQSxxQkFHRnRCLEVBQWFzQixFQUFJLE1BQU9TLFlBQWEsQ0FDbkMsVUFLRixDQUFDLGFBQWMsaUJBQWlCeEMsU0FBUSxTQUFTeUMsR0FDL0MsQ0FBQ3hCLEVBQWFOLEdBQU9YLFNBQVEsU0FBU08sR0FFOUJrQyxLQUFZbEMsRUFBWTVELFlBRTlCNEQsRUFBWTVELFVBQVU4RixFQUFTakUsUUFBUSxPQUFRLFlBQWMsV0FDM0QsSUFBSWMsRUFBT2IsRUFBUStCLFdBQ2ZrQyxFQUFXcEQsRUFBS0EsRUFBS3RFLE9BQVMsR0FDOUIySCxFQUFldEksS0FBSzhHLFFBQVU5RyxLQUFLd0csT0FDbkNsQyxFQUFVZ0UsRUFBYUYsR0FBVWpELE1BQU1tRCxFQUFjckQsRUFBS3pDLE1BQU0sR0FBSSxJQUN4RThCLEVBQVFJLFVBQVksV0FDbEIyRCxFQUFTL0QsRUFBUUssaUJBT3pCLENBQUMyQixFQUFPTSxHQUFhakIsU0FBUSxTQUFTTyxHQUNoQ0EsRUFBWTVELFVBQVVpRyxTQUMxQnJDLEVBQVk1RCxVQUFVaUcsT0FBUyxTQUFTQyxFQUFPQyxHQUM3QyxJQUFJQyxFQUFXMUksS0FDWDJJLEVBQVEsR0FFWixPQUFPLElBQUlwRSxTQUFRLFNBQVNDLEdBQzFCa0UsRUFBU0UsY0FBY0osR0FBTyxTQUFTL0IsR0FDaENBLEdBSUxrQyxFQUFNbEosS0FBS2dILEVBQU96RSxZQUVKSixJQUFWNkcsR0FBdUJFLEVBQU1oSSxRQUFVOEgsRUFJM0NoQyxFQUFPb0MsV0FITHJFLEVBQVFtRSxJQU5SbkUsRUFBUW1FLGNBb0NsQi9JLEVBQVFrSixPQXJCUixTQUFnQnBHLEVBQU1xRyxFQUFTQyxHQUM3QixJQUFJOUQsRUFBSUosRUFBcUJtRSxVQUFXLE9BQVEsQ0FBQ3ZHLEVBQU1xRyxJQUNuRHpFLEVBQVVZLEVBQUVaLFFBVWhCLE9BUklBLElBQ0ZBLEVBQVE0RSxnQkFBa0IsU0FBU0MsR0FDN0JILEdBQ0ZBLEVBQWdCLElBQUkzQixFQUFVL0MsRUFBUUssT0FBUXdFLEVBQU01QixXQUFZakQsRUFBUWtELGdCQUt2RXRDLEVBQUVFLE1BQUssU0FBU2tDLEdBQ3JCLE9BQU8sSUFBSUksRUFBR0osT0FTbEIxSCxFQUFRd0osU0FMUixTQUFrQjFHLEdBQ2hCLE9BQU9vQyxFQUFxQm1FLFVBQVcsaUJBQWtCLENBQUN2RyxLQU01RG5CLE9BQU9zRSxlQUFlakcsRUFBUyxhQUFjLENBQUVvQyxPQUFPLElBeFRTcUgsQ0FBUXpKLEksMkJDQ3pFLElBQ00wSixFQWVGQyxFQUFZLFdBQ2QsSUFBSUQsRUFBTyxHQUNYLE9BQU8sU0FBa0JFLEdBQ3ZCLFFBQTRCLElBQWpCRixFQUFLRSxHQUF5QixDQUN2QyxJQUFJQyxFQUFjQyxTQUFTQyxjQUFjSCxHQUV6QyxHQUFJSSxPQUFPQyxtQkFBcUJKLGFBQXVCRyxPQUFPQyxrQkFDNUQsSUFHRUosRUFBY0EsRUFBWUssZ0JBQWdCQyxLQUMxQyxNQUFPQyxHQUVQUCxFQUFjLEtBSWxCSCxFQUFLRSxHQUFVQyxFQUdqQixPQUFPSCxFQUFLRSxJQXBCQSxHQXdCWlMsRUFBYyxHQUVsQixTQUFTQyxFQUFxQkMsR0FHNUIsSUFGQSxJQUFJeEYsR0FBVSxFQUVMckUsRUFBSSxFQUFHQSxFQUFJMkosRUFBWXRKLE9BQVFMLElBQ3RDLEdBQUkySixFQUFZM0osR0FBRzZKLGFBQWVBLEVBQVksQ0FDNUN4RixFQUFTckUsRUFDVCxNQUlKLE9BQU9xRSxFQUdULFNBQVN5RixFQUFhdEssRUFBTWdFLEdBSTFCLElBSEEsSUFBSXVHLEVBQWEsR0FDYkMsRUFBYyxHQUVUaEssRUFBSSxFQUFHQSxFQUFJUixFQUFLYSxPQUFRTCxJQUFLLENBQ3BDLElBQUlKLEVBQU9KLEVBQUtRLEdBQ1pYLEVBQUttRSxFQUFReUcsS0FBT3JLLEVBQUssR0FBSzRELEVBQVF5RyxLQUFPckssRUFBSyxHQUNsRHVJLEVBQVE0QixFQUFXMUssSUFBTyxFQUMxQndLLEVBQWEsR0FBRy9KLE9BQU9ULEVBQUksS0FBS1MsT0FBT3FJLEdBQzNDNEIsRUFBVzFLLEdBQU04SSxFQUFRLEVBQ3pCLElBQUlsQyxFQUFRMkQsRUFBcUJDLEdBQzdCcEYsRUFBTSxDQUNSeUYsSUFBS3RLLEVBQUssR0FDVnVLLE1BQU92SyxFQUFLLEdBQ1p3SyxVQUFXeEssRUFBSyxLQUdILElBQVhxRyxHQUNGMEQsRUFBWTFELEdBQU9vRSxhQUNuQlYsRUFBWTFELEdBQU9xRSxRQUFRN0YsSUFFM0JrRixFQUFZeEssS0FBSyxDQUNmMEssV0FBWUEsRUFDWlMsUUFBU0MsRUFBUzlGLEVBQUtqQixHQUN2QjZHLFdBQVksSUFJaEJMLEVBQVk3SyxLQUFLMEssR0FHbkIsT0FBT0csRUFHVCxTQUFTUSxFQUFtQmhILEdBQzFCLElBQUlpSCxFQUFRckIsU0FBU3NCLGNBQWMsU0FDL0JDLEVBQWFuSCxFQUFRbUgsWUFBYyxHQUV2QyxRQUFnQyxJQUFyQkEsRUFBV0MsTUFBdUIsQ0FDM0MsSUFBSUEsRUFBbUQsS0FFbkRBLElBQ0ZELEVBQVdDLE1BQVFBLEdBUXZCLEdBSkEzSixPQUFPNEosS0FBS0YsR0FBWXRGLFNBQVEsU0FBVXlGLEdBQ3hDTCxFQUFNTSxhQUFhRCxFQUFLSCxFQUFXRyxPQUdQLG1CQUFuQnRILEVBQVF3SCxPQUNqQnhILEVBQVF3SCxPQUFPUCxPQUNWLENBQ0wsSUFBSXZCLEVBQVNELEVBQVV6RixFQUFRd0gsUUFBVSxRQUV6QyxJQUFLOUIsRUFDSCxNQUFNLElBQUkrQixNQUFNLDJHQUdsQi9CLEVBQU9nQyxZQUFZVCxHQUdyQixPQUFPQSxFQWNULElBQ01VLEVBREZDLEdBQ0VELEVBQVksR0FDVCxTQUFpQmxGLEVBQU9vRixHQUU3QixPQURBRixFQUFVbEYsR0FBU29GLEVBQ1pGLEVBQVVHLE9BQU9DLFNBQVN4TCxLQUFLLFFBSTFDLFNBQVN5TCxFQUFvQmYsRUFBT3hFLEVBQU93RixFQUFRaEgsR0FDakQsSUFBSXlGLEVBQU11QixFQUFTLEdBQUtoSCxFQUFJMEYsTUFBUSxVQUFVckssT0FBTzJFLEVBQUkwRixNQUFPLE1BQU1ySyxPQUFPMkUsRUFBSXlGLElBQUssS0FBT3pGLEVBQUl5RixJQUlqRyxHQUFJTyxFQUFNaUIsV0FDUmpCLEVBQU1pQixXQUFXQyxRQUFVUCxFQUFZbkYsRUFBT2lFLE9BQ3pDLENBQ0wsSUFBSTBCLEVBQVV4QyxTQUFTeUMsZUFBZTNCLEdBQ2xDNEIsRUFBYXJCLEVBQU1xQixXQUVuQkEsRUFBVzdGLElBQ2J3RSxFQUFNc0IsWUFBWUQsRUFBVzdGLElBRzNCNkYsRUFBV3pMLE9BQ2JvSyxFQUFNdUIsYUFBYUosRUFBU0UsRUFBVzdGLElBRXZDd0UsRUFBTVMsWUFBWVUsSUFLeEIsU0FBU0ssRUFBV3hCLEVBQU9qSCxFQUFTaUIsR0FDbEMsSUFBSXlGLEVBQU16RixFQUFJeUYsSUFDVkMsRUFBUTFGLEVBQUkwRixNQUNaQyxFQUFZM0YsRUFBSTJGLFVBZXBCLEdBYklELEVBQ0ZNLEVBQU1NLGFBQWEsUUFBU1osR0FFNUJNLEVBQU15QixnQkFBZ0IsU0FHcEI5QixHQUE2QixvQkFBVHpILE9BQ3RCdUgsR0FBTyx1REFBdURwSyxPQUFPNkMsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVb0gsTUFBZSxRQU1sSUssRUFBTWlCLFdBQ1JqQixFQUFNaUIsV0FBV0MsUUFBVXpCLE1BQ3RCLENBQ0wsS0FBT08sRUFBTTBCLFlBQ1gxQixFQUFNc0IsWUFBWXRCLEVBQU0wQixZQUcxQjFCLEVBQU1TLFlBQVk5QixTQUFTeUMsZUFBZTNCLEtBSTlDLElBQUlrQyxFQUFZLEtBQ1pDLEVBQW1CLEVBRXZCLFNBQVM5QixFQUFTOUYsRUFBS2pCLEdBQ3JCLElBQUlpSCxFQUNBNkIsRUFDQWIsRUFFSixHQUFJakksRUFBUTRJLFVBQVcsQ0FDckIsSUFBSUcsRUFBYUYsSUFDakI1QixFQUFRMkIsSUFBY0EsRUFBWTVCLEVBQW1CaEgsSUFDckQ4SSxFQUFTZCxFQUFvQmdCLEtBQUssS0FBTS9CLEVBQU84QixHQUFZLEdBQzNEZCxFQUFTRCxFQUFvQmdCLEtBQUssS0FBTS9CLEVBQU84QixHQUFZLFFBRTNEOUIsRUFBUUQsRUFBbUJoSCxHQUMzQjhJLEVBQVNMLEVBQVdPLEtBQUssS0FBTS9CLEVBQU9qSCxHQUV0Q2lJLEVBQVMsWUF4RmIsU0FBNEJoQixHQUUxQixHQUF5QixPQUFyQkEsRUFBTWdDLFdBQ1IsT0FBTyxFQUdUaEMsRUFBTWdDLFdBQVdWLFlBQVl0QixHQW1GekJpQyxDQUFtQmpDLElBS3ZCLE9BREE2QixFQUFPN0gsR0FDQSxTQUFxQmtJLEdBQzFCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPekMsTUFBUXpGLEVBQUl5RixLQUFPeUMsRUFBT3hDLFFBQVUxRixFQUFJMEYsT0FBU3dDLEVBQU92QyxZQUFjM0YsRUFBSTJGLFVBQ25GLE9BR0ZrQyxFQUFPN0gsRUFBTWtJLFFBRWJsQixLQUtOck0sRUFBT0UsUUFBVSxTQUFVRSxFQUFNZ0UsSUFDL0JBLEVBQVVBLEdBQVcsSUFHUjRJLFdBQTBDLGtCQUF0QjVJLEVBQVE0SSxZQUN2QzVJLEVBQVE0SSxnQkFyT1ksSUFBVHBELElBTVRBLEVBQU91QyxRQUFRakMsUUFBVUYsVUFBWUEsU0FBU3dELE1BQVF0RCxPQUFPdUQsT0FHeEQ3RCxJQWdPVCxJQUFJOEQsRUFBa0JoRCxFQUR0QnRLLEVBQU9BLEdBQVEsR0FDMEJnRSxHQUN6QyxPQUFPLFNBQWdCdUosR0FHckIsR0FGQUEsRUFBVUEsR0FBVyxHQUUyQixtQkFBNUM5TCxPQUFPZSxVQUFVdkMsU0FBU3dDLEtBQUs4SyxHQUFuQyxDQUlBLElBQUssSUFBSS9NLEVBQUksRUFBR0EsRUFBSThNLEVBQWdCek0sT0FBUUwsSUFBSyxDQUMvQyxJQUNJaUcsRUFBUTJELEVBREtrRCxFQUFnQjlNLElBRWpDMkosRUFBWTFELEdBQU9vRSxhQUtyQixJQUZBLElBQUkyQyxFQUFxQmxELEVBQWFpRCxFQUFTdkosR0FFdENsRCxFQUFLLEVBQUdBLEVBQUt3TSxFQUFnQnpNLE9BQVFDLElBQU0sQ0FDbEQsSUFFSTRGLEVBQVMwRCxFQUZLa0QsRUFBZ0J4TSxJQUlLLElBQW5DcUosRUFBWXpELEdBQVFtRSxhQUN0QlYsRUFBWXpELEdBQVFvRSxVQUVwQlgsRUFBWXNELE9BQU8vRyxFQUFRLElBSS9CNEcsRUFBa0JFLE0sMklDelFsQkUsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVTlOLFFBRzNDLElBQUlGLEVBQVM4TixFQUF5QkUsR0FBWSxDQUNqRC9OLEdBQUkrTixFQUVKOU4sUUFBUyxJQU9WLE9BSEErTixFQUFvQkQsR0FBVW5MLEtBQUs3QyxFQUFPRSxRQUFTRixFQUFRQSxFQUFPRSxRQUFTNk4sR0FHcEUvTixFQUFPRSxRQ25CZjZOLEVBQW9CcEwsRUFBSzNDLElBQ3hCLElBQUlrTyxFQUFTbE8sR0FBVUEsRUFBT3FFLFdBQzdCLElBQU1yRSxFQUFnQixRQUN0QixJQUFNQSxFQUVQLE9BREErTixFQUFvQkksRUFBRUQsRUFBUSxDQUFFRSxFQUFHRixJQUM1QkEsR0NMUkgsRUFBb0JJLEVBQUksQ0FBQ2pPLEVBQVNtTyxLQUNqQyxJQUFJLElBQUkzQyxLQUFPMkMsRUFDWE4sRUFBb0J0TCxFQUFFNEwsRUFBWTNDLEtBQVNxQyxFQUFvQnRMLEVBQUV2QyxFQUFTd0wsSUFDNUU3SixPQUFPc0UsZUFBZWpHLEVBQVN3TCxFQUFLLENBQUU0QyxZQUFZLEVBQU1sSSxJQUFLaUksRUFBVzNDLE1DSjNFcUMsRUFBb0JRLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZDLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT2xPLE1BQVEsSUFBSW1PLFNBQVMsY0FBYixHQUNkLE1BQU9uRSxHQUNSLEdBQXNCLGlCQUFYSixPQUFxQixPQUFPQSxRQUxqQixHQ0F4QjZELEVBQW9CdEwsRUFBSSxDQUFDNEMsRUFBS2EsSUFBU3JFLE9BQU9lLFVBQVU4TCxlQUFlN0wsS0FBS3dDLEVBQUthLEcsTUNBakYsSUFBSXlJLEVBQ0FaLEVBQW9CUSxFQUFFSyxnQkFBZUQsRUFBWVosRUFBb0JRLEVBQUVNLFNBQVcsSUFDdEYsSUFBSTdFLEVBQVcrRCxFQUFvQlEsRUFBRXZFLFNBQ3JDLElBQUsyRSxHQUFhM0UsSUFDYkEsRUFBUzhFLGdCQUNaSCxFQUFZM0UsRUFBUzhFLGNBQWNDLE1BQy9CSixHQUFXLENBQ2YsSUFBSUssRUFBVWhGLEVBQVNpRixxQkFBcUIsVUFDekNELEVBQVEvTixTQUFRME4sRUFBWUssRUFBUUEsRUFBUS9OLE9BQVMsR0FBRzhOLEtBSzdELElBQUtKLEVBQVcsTUFBTSxJQUFJOUMsTUFBTSx5REFDaEM4QyxFQUFZQSxFQUFVbEssUUFBUSxPQUFRLElBQUlBLFFBQVEsUUFBUyxJQUFJQSxRQUFRLFlBQWEsS0FDcEZzSixFQUFvQnZJLEVBQUltSixHLHNCQ0N4QixJQUFJTyxFQUFnQixTQUFTZixFQUFHZ0IsR0FJNUIsT0FIQUQsRUFBZ0JyTixPQUFPdU4sZ0JBQ2xCLENBQUVDLFVBQVcsY0FBZ0I5TixPQUFTLFNBQVU0TSxFQUFHZ0IsR0FBS2hCLEVBQUVrQixVQUFZRixJQUN2RSxTQUFVaEIsRUFBR2dCLEdBQUssSUFBSyxJQUFJM0osS0FBSzJKLEVBQU9BLEVBQUVULGVBQWVsSixLQUFJMkksRUFBRTNJLEdBQUsySixFQUFFM0osTUFDcEQySSxFQUFHZ0IsSUFHckIsU0FBU0csRUFBVW5CLEVBQUdnQixHQUV6QixTQUFTSSxJQUFPalAsS0FBS3lDLFlBQWNvTCxFQURuQ2UsRUFBY2YsRUFBR2dCLEdBRWpCaEIsRUFBRXZMLFVBQWtCLE9BQU51TSxFQUFhdE4sT0FBTzJOLE9BQU9MLElBQU1JLEVBQUczTSxVQUFZdU0sRUFBRXZNLFVBQVcsSUFBSTJNLEdBRzVFLElBQUlFLEVBQVcsV0FRbEIsT0FQQUEsRUFBVzVOLE9BQU82TixRQUFVLFNBQWtCQyxHQUMxQyxJQUFLLElBQUlDLEVBQUdoUCxFQUFJLEVBQUcrQixFQUFJOEQsVUFBVXhGLE9BQVFMLEVBQUkrQixFQUFHL0IsSUFFNUMsSUFBSyxJQUFJNEUsS0FEVG9LLEVBQUluSixVQUFVN0YsR0FDT2lCLE9BQU9lLFVBQVU4TCxlQUFlN0wsS0FBSytNLEVBQUdwSyxLQUFJbUssRUFBRW5LLEdBQUtvSyxFQUFFcEssSUFFOUUsT0FBT21LLElBRUtsSyxNQUFNbkYsS0FBTW1HLFlBOEJ6QixTQUFTb0osRUFBVUMsRUFBU0MsRUFBWUMsRUFBR0MsR0FFOUMsT0FBTyxJQUFLRCxJQUFNQSxFQUFJbkwsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTbUwsRUFBVTVOLEdBQVMsSUFBTTZOLEVBQUtGLEVBQVU3TixLQUFLRSxJQUFXLE1BQU9nSSxHQUFLdkYsRUFBT3VGLElBQ3BGLFNBQVM4RixFQUFTOU4sR0FBUyxJQUFNNk4sRUFBS0YsRUFBaUIsTUFBRTNOLElBQVcsTUFBT2dJLEdBQUt2RixFQUFPdUYsSUFDdkYsU0FBUzZGLEVBQUtsTCxHQUpsQixJQUFlM0MsRUFJYTJDLEVBQU81QyxLQUFPeUMsRUFBUUcsRUFBTzNDLFFBSjFDQSxFQUl5RDJDLEVBQU8zQyxNQUpoREEsYUFBaUIwTixFQUFJMU4sRUFBUSxJQUFJME4sR0FBRSxTQUFVbEwsR0FBV0EsRUFBUXhDLE9BSVRvRCxLQUFLd0ssRUFBV0UsR0FDbEdELEdBQU1GLEVBQVlBLEVBQVV4SyxNQUFNcUssRUFBU0MsR0FBYyxLQUFLM04sV0FJL0QsU0FBU2lPLEVBQVlQLEVBQVNRLEdBQ2pDLElBQXNHQyxFQUFHQyxFQUFHYixFQUFHcEIsRUFBM0drQyxFQUFJLENBQUVDLE1BQU8sRUFBR0MsS0FBTSxXQUFhLEdBQVcsRUFBUGhCLEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxJQUFPaUIsS0FBTSxHQUFJQyxJQUFLLElBQ2hHLE9BQU90QyxFQUFJLENBQUVuTSxLQUFNME8sRUFBSyxHQUFJLE1BQVNBLEVBQUssR0FBSSxPQUFVQSxFQUFLLElBQXdCLG1CQUFYblAsU0FBMEI0TSxFQUFFNU0sT0FBT0MsVUFBWSxXQUFhLE9BQU90QixPQUFVaU8sRUFDdkosU0FBU3VDLEVBQUtuTyxHQUFLLE9BQU8sU0FBVW9PLEdBQUssT0FDekMsU0FBY0MsR0FDVixHQUFJVCxFQUFHLE1BQU0sSUFBSW5OLFVBQVUsbUNBQzNCLEtBQU9xTixPQUNILEdBQUlGLEVBQUksRUFBR0MsSUFBTWIsRUFBWSxFQUFScUIsRUFBRyxHQUFTUixFQUFVLE9BQUlRLEVBQUcsR0FBS1IsRUFBUyxTQUFPYixFQUFJYSxFQUFVLFNBQU1iLEVBQUU5TSxLQUFLMk4sR0FBSSxHQUFLQSxFQUFFcE8sU0FBV3VOLEVBQUlBLEVBQUU5TSxLQUFLMk4sRUFBR1EsRUFBRyxLQUFLM08sS0FBTSxPQUFPc04sRUFFM0osT0FESWEsRUFBSSxFQUFHYixJQUFHcUIsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUXJCLEVBQUVyTixRQUN6QjBPLEVBQUcsSUFDUCxLQUFLLEVBQUcsS0FBSyxFQUFHckIsRUFBSXFCLEVBQUksTUFDeEIsS0FBSyxFQUFjLE9BQVhQLEVBQUVDLFFBQWdCLENBQUVwTyxNQUFPME8sRUFBRyxHQUFJM08sTUFBTSxHQUNoRCxLQUFLLEVBQUdvTyxFQUFFQyxRQUFTRixFQUFJUSxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBS1AsRUFBRUksSUFBSUksTUFBT1IsRUFBRUcsS0FBS0ssTUFBTyxTQUN4QyxRQUNJLE1BQWtCdEIsR0FBWkEsRUFBSWMsRUFBRUcsTUFBWTNQLE9BQVMsR0FBSzBPLEVBQUVBLEVBQUUxTyxPQUFTLEtBQWtCLElBQVYrUCxFQUFHLElBQXNCLElBQVZBLEVBQUcsSUFBVyxDQUFFUCxFQUFJLEVBQUcsU0FDakcsR0FBYyxJQUFWTyxFQUFHLE1BQWNyQixHQUFNcUIsRUFBRyxHQUFLckIsRUFBRSxJQUFNcUIsRUFBRyxHQUFLckIsRUFBRSxJQUFNLENBQUVjLEVBQUVDLE1BQVFNLEVBQUcsR0FBSSxNQUM5RSxHQUFjLElBQVZBLEVBQUcsSUFBWVAsRUFBRUMsTUFBUWYsRUFBRSxHQUFJLENBQUVjLEVBQUVDLE1BQVFmLEVBQUUsR0FBSUEsRUFBSXFCLEVBQUksTUFDN0QsR0FBSXJCLEdBQUtjLEVBQUVDLE1BQVFmLEVBQUUsR0FBSSxDQUFFYyxFQUFFQyxNQUFRZixFQUFFLEdBQUljLEVBQUVJLElBQUk5USxLQUFLaVIsR0FBSyxNQUN2RHJCLEVBQUUsSUFBSWMsRUFBRUksSUFBSUksTUFDaEJSLEVBQUVHLEtBQUtLLE1BQU8sU0FFdEJELEVBQUtWLEVBQUt6TixLQUFLaU4sRUFBU1csR0FDMUIsTUFBT25HLEdBQUswRyxFQUFLLENBQUMsRUFBRzFHLEdBQUlrRyxFQUFJLEVBQUssUUFBVUQsRUFBSVosRUFBSSxFQUN0RCxHQUFZLEVBQVJxQixFQUFHLEdBQVEsTUFBTUEsRUFBRyxHQUFJLE1BQU8sQ0FBRTFPLE1BQU8wTyxFQUFHLEdBQUtBLEVBQUcsUUFBSyxFQUFRM08sTUFBTSxHQXJCOUI4TixDQUFLLENBQUN4TixFQUFHb08sTUFrQ3RELFNBQVNHLEVBQVN6TyxHQUNyQixJQUFJbU4sRUFBc0IsbUJBQVhqTyxRQUF5QkEsT0FBT0MsU0FBVXVQLEVBQUl2QixHQUFLbk4sRUFBRW1OLEdBQUloUCxFQUFJLEVBQzVFLEdBQUl1USxFQUFHLE9BQU9BLEVBQUV0TyxLQUFLSixHQUNyQixHQUFJQSxHQUF5QixpQkFBYkEsRUFBRXhCLE9BQXFCLE1BQU8sQ0FDMUNtQixLQUFNLFdBRUYsT0FESUssR0FBSzdCLEdBQUs2QixFQUFFeEIsU0FBUXdCLE9BQUksR0FDckIsQ0FBRUgsTUFBT0csR0FBS0EsRUFBRTdCLEtBQU15QixNQUFPSSxLQUc1QyxNQUFNLElBQUlXLFVBQVV3TSxFQUFJLDBCQUE0QixtQ0FHakQsU0FBU3dCLEVBQU8zTyxFQUFHRSxHQUN0QixJQUFJd08sRUFBc0IsbUJBQVh4UCxRQUF5QmMsRUFBRWQsT0FBT0MsVUFDakQsSUFBS3VQLEVBQUcsT0FBTzFPLEVBQ2YsSUFBbUI0TyxFQUFZL0csRUFBM0IxSixFQUFJdVEsRUFBRXRPLEtBQUtKLEdBQU82TyxFQUFLLEdBQzNCLElBQ0ksV0FBYyxJQUFOM08sR0FBZ0JBLEtBQU0sTUFBUTBPLEVBQUl6USxFQUFFd0IsUUFBUUMsTUFBTWlQLEVBQUd2UixLQUFLc1IsRUFBRS9PLE9BRXhFLE1BQU82QyxHQUFTbUYsRUFBSSxDQUFFbkYsTUFBT0EsR0FDN0IsUUFDSSxJQUNRa00sSUFBTUEsRUFBRWhQLE9BQVM4TyxFQUFJdlEsRUFBVSxTQUFJdVEsRUFBRXRPLEtBQUtqQyxHQUVsRCxRQUFVLEdBQUkwSixFQUFHLE1BQU1BLEVBQUVuRixPQUU3QixPQUFPbU0sRUFHSixTQUFTQyxJQUNaLElBQUssSUFBSUQsRUFBSyxHQUFJMVEsRUFBSSxFQUFHQSxFQUFJNkYsVUFBVXhGLE9BQVFMLElBQzNDMFEsRUFBS0EsRUFBRzVRLE9BQU8wUSxFQUFPM0ssVUFBVTdGLEtBQ3BDLE9BQU8wUSxFQUdKLFNBQVNFLElBQ1osSUFBSyxJQUFJNUIsRUFBSSxFQUFHaFAsRUFBSSxFQUFHNlEsRUFBS2hMLFVBQVV4RixPQUFRTCxFQUFJNlEsRUFBSTdRLElBQUtnUCxHQUFLbkosVUFBVTdGLEdBQUdLLE9BQ3hFLElBQUlvUSxFQUFJOVAsTUFBTXFPLEdBQUk4QixFQUFJLEVBQTNCLElBQThCOVEsRUFBSSxFQUFHQSxFQUFJNlEsRUFBSTdRLElBQ3pDLElBQUssSUFBSXdOLEVBQUkzSCxVQUFVN0YsR0FBSStRLEVBQUksRUFBR0MsRUFBS3hELEVBQUVuTixPQUFRMFEsRUFBSUMsRUFBSUQsSUFBS0QsSUFDMURMLEVBQUVLLEdBQUt0RCxFQUFFdUQsR0FDakIsT0FBT04sRUM2UFgsU0FBU1EsRUFBVy9ILEVBQVE3RixHQUN4QixLQUFNQSxhQUFrQnBDLFFBQ3BCLE9BQU9vQyxFQUVYLE9BQVFBLEVBQU9sQixhQUNYLEtBQUsrTyxLQUlELE9BQU8sSUFBSUEsS0FESzdOLEVBQ1U4TixXQUM5QixLQUFLbFEsWUFDY0ssSUFBWDRILElBQ0FBLEVBQVMsSUFFYixNQUNKLEtBQUt2SSxNQUVEdUksRUFBUyxHQUNULE1BQ0osUUFFSSxPQUFPN0YsRUFFZixJQUFLLElBQUlpQyxLQUFRakMsRUFFUkEsRUFBT3lLLGVBQWV4SSxJQVFoQixjQVJxQ0EsSUFHaEQ0RCxFQUFPNUQsR0FBUTJMLEVBQVcvSCxFQUFPNUQsR0FBT2pDLEVBQU9pQyxLQUVuRCxPQUFPNEQsRUFzQlgsSUFBSWtJLEVBQTBCLFdBQzFCLFNBQVNBLElBQ0wsSUFBSUMsRUFBUTNSLEtBQ1pBLEtBQUt5RSxPQUFTLGFBQ2R6RSxLQUFLd0UsUUFBVSxhQUNmeEUsS0FBSzRSLFFBQVUsSUFBSXJOLFNBQVEsU0FBVUMsRUFBU0MsR0FDMUNrTixFQUFNbk4sUUFBVUEsRUFDaEJtTixFQUFNbE4sT0FBU0EsS0FnQ3ZCLE9BeEJBaU4sRUFBU3BQLFVBQVV1UCxhQUFlLFNBQVV4SixHQUN4QyxJQUFJc0osRUFBUTNSLEtBQ1osT0FBTyxTQUFVNkUsRUFBTzdDLEdBQ2hCNkMsRUFDQThNLEVBQU1sTixPQUFPSSxHQUdiOE0sRUFBTW5OLFFBQVF4QyxHQUVNLG1CQUFicUcsSUFHUHNKLEVBQU1DLFFBQVFFLE9BQU0sZUFHSSxJQUFwQnpKLEVBQVMxSCxPQUNUMEgsRUFBU3hELEdBR1R3RCxFQUFTeEQsRUFBTzdDLE1BS3pCMFAsRUF2Q2tCLEdBOEQ3QixTQUFTSyxJQUNMLE1BQXlCLG9CQUFkQyxXQUMyQixpQkFBM0JBLFVBQXFCLFVBQ3JCQSxVQUFxQixVQUdyQixHQXVCZixTQUFTQyxJQUNMLElBQ0ksTUFBMkQscUJBQW5EMVEsT0FBT2UsVUFBVXZDLFNBQVN3QyxLQUFLLEVBQUEwTCxFQUFPaUUsU0FFbEQsTUFBT2xJLEdBQ0gsT0FBTyxHQVNmLFNBQVNtSSxJQUNMLElBQUlDLEVBQTRCLGlCQUFYQyxPQUNmQSxPQUFPRCxRQUNZLGlCQUFaRSxRQUNIQSxRQUFRRixhQUNSeFEsRUFDVixNQUEwQixpQkFBWndRLFFBQXVDeFEsSUFBZndRLEVBQVF6UyxHQXlDbEQsU0FBUzRTLElBQ0wsTUFBTyxjQUFlQyxNQUFxQixNQUFidkosVUFNbEMsU0FBU3dKLElBQ0wsT0FBTyxJQUFJbE8sU0FBUSxTQUFVQyxFQUFTQyxHQUNsQyxJQUNJLElBQUlpTyxHQUFhLEVBQ2JDLEVBQWtCLDBEQUNsQkMsRUFBWWhKLE9BQU9YLFVBQVU0SixLQUFLRixHQUN0Q0MsRUFBVWxPLFVBQVksV0FDbEJrTyxFQUFVak8sT0FBT21PLFFBRVpKLEdBQ0Q5SSxPQUFPWCxVQUFVOEosZUFBZUosR0FFcENuTyxHQUFRLElBRVpvTyxFQUFVMUosZ0JBQWtCLFdBQ3hCd0osR0FBYSxHQUVqQkUsRUFBVWhPLFFBQVUsV0FDaEIsSUFBSW9PLEVBQ0p2TyxHQUFtQyxRQUExQnVPLEVBQUtKLEVBQVUvTixhQUEwQixJQUFQbU8sT0FBZ0IsRUFBU0EsRUFBR0MsVUFBWSxLQUczRixNQUFPcE8sR0FDSEosRUFBT0ksT0FTbkIsU0FBU3FPLElBQ0wsU0FBS2xCLFlBQWNBLFVBQVVtQixlQXNCakMsSUFHSUMsRUFBK0IsU0FBVUMsR0FFekMsU0FBU0QsRUFBY0UsRUFBTUwsRUFBU00sR0FDbEMsSUFBSTVCLEVBQVEwQixFQUFPOVEsS0FBS3ZDLEtBQU1pVCxJQUFZalQsS0FZMUMsT0FYQTJSLEVBQU0yQixLQUFPQSxFQUNiM0IsRUFBTTRCLFdBQWFBLEVBQ25CNUIsRUFBTWpQLEtBVEcsZ0JBWVRuQixPQUFPdU4sZUFBZTZDLEVBQU95QixFQUFjOVEsV0FHdkNpSixNQUFNaUksbUJBQ05qSSxNQUFNaUksa0JBQWtCN0IsRUFBTzhCLEVBQWFuUixVQUFVNE0sUUFFbkR5QyxFQUVYLE9BaEJBM0MsRUFBVW9FLEVBQWVDLEdBZ0JsQkQsRUFqQnVCLENBa0JoQzdILE9BQ0VrSSxFQUE4QixXQUM5QixTQUFTQSxFQUFhQyxFQUFTQyxFQUFhQyxHQUN4QzVULEtBQUswVCxRQUFVQSxFQUNmMVQsS0FBSzJULFlBQWNBLEVBQ25CM1QsS0FBSzRULE9BQVNBLEVBZ0JsQixPQWRBSCxFQUFhblIsVUFBVTRNLE9BQVMsU0FBVW9FLEdBRXRDLElBREEsSUFBSS9QLEVBQU8sR0FDRjNDLEVBQUssRUFBR0EsRUFBS3VGLFVBQVV4RixPQUFRQyxJQUNwQzJDLEVBQUszQyxFQUFLLEdBQUt1RixVQUFVdkYsR0FFN0IsSUFBSTJTLEVBQWFoUSxFQUFLLElBQU0sR0FDeEJzUSxFQUFXN1QsS0FBSzBULFFBQVUsSUFBTUosRUFDaENRLEVBQVc5VCxLQUFLNFQsT0FBT04sR0FDdkJMLEVBQVVhLEVBQVdDLEVBQWdCRCxFQUFVUCxHQUFjLFFBRTdEUyxFQUFjaFUsS0FBSzJULFlBQWMsS0FBT1YsRUFBVSxLQUFPWSxFQUFXLEtBQ3BFaFAsRUFBUSxJQUFJdU8sRUFBY1MsRUFBVUcsRUFBYVQsR0FDckQsT0FBTzFPLEdBRUo0TyxFQXBCc0IsR0FzQmpDLFNBQVNNLEVBQWdCRCxFQUFVdlEsR0FDL0IsT0FBT3VRLEVBQVMzUCxRQUFROFAsR0FBUyxTQUFVOUQsRUFBRy9FLEdBQzFDLElBQUlwSixFQUFRdUIsRUFBSzZILEdBQ2pCLE9BQWdCLE1BQVRwSixFQUFnQmtTLE9BQU9sUyxHQUFTLElBQU1vSixFQUFNLFFBRzNELElBQUk2SSxFQUFVLGdCQW1LZCxTQUFTRSxFQUFTcFAsRUFBS3FHLEdBQ25CLE9BQU83SixPQUFPZSxVQUFVOEwsZUFBZTdMLEtBQUt3QyxFQUFLcUcsR0E0VnJELFNBQVNnSixFQUFnQkMsRUFBVUMsR0FDL0IsSUFBSUMsRUFBUSxJQUFJQyxFQUFjSCxFQUFVQyxHQUN4QyxPQUFPQyxFQUFNRSxVQUFVM0gsS0FBS3lILElBcE9OLFdBQ3RCLFNBQVNHLElBTUwxVSxLQUFLMlUsT0FBUyxHQUtkM1UsS0FBSzRVLEtBQU8sR0FNWjVVLEtBQUs2VSxHQUFLLEdBS1Y3VSxLQUFLOFUsS0FBTyxHQUlaOVUsS0FBSytVLE9BQVMsRUFJZC9VLEtBQUtnVixPQUFTLEVBQ2RoVixLQUFLaVYsVUFBWSxHQUNqQmpWLEtBQUs4VSxLQUFLLEdBQUssSUFDZixJQUFLLElBQUl4VSxFQUFJLEVBQUdBLEVBQUlOLEtBQUtpVixZQUFhM1UsRUFDbENOLEtBQUs4VSxLQUFLeFUsR0FBSyxFQUVuQk4sS0FBS2tWLFFBRVRSLEVBQUtwUyxVQUFVNFMsTUFBUSxXQUNuQmxWLEtBQUsyVSxPQUFPLEdBQUssV0FDakIzVSxLQUFLMlUsT0FBTyxHQUFLLFdBQ2pCM1UsS0FBSzJVLE9BQU8sR0FBSyxXQUNqQjNVLEtBQUsyVSxPQUFPLEdBQUssVUFDakIzVSxLQUFLMlUsT0FBTyxHQUFLLFdBQ2pCM1UsS0FBSytVLE9BQVMsRUFDZC9VLEtBQUtnVixPQUFTLEdBUWxCTixFQUFLcFMsVUFBVTZTLFVBQVksU0FBVUMsRUFBS0MsR0FDakNBLElBQ0RBLEVBQVMsR0FFYixJQUFJQyxFQUFJdFYsS0FBSzZVLEdBRWIsR0FBbUIsaUJBQVJPLEVBQ1AsSUFBSyxJQUFJOVUsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBU3BCZ1YsRUFBRWhWLEdBQ0c4VSxFQUFJRyxXQUFXRixJQUFXLEdBQ3RCRCxFQUFJRyxXQUFXRixFQUFTLElBQU0sR0FDOUJELEVBQUlHLFdBQVdGLEVBQVMsSUFBTSxFQUMvQkQsRUFBSUcsV0FBV0YsRUFBUyxHQUNoQ0EsR0FBVSxPQUlkLElBQVMvVSxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDcEJnVixFQUFFaFYsR0FDRzhVLEVBQUlDLElBQVcsR0FDWEQsRUFBSUMsRUFBUyxJQUFNLEdBQ25CRCxFQUFJQyxFQUFTLElBQU0sRUFDcEJELEVBQUlDLEVBQVMsR0FDckJBLEdBQVUsRUFJbEIsSUFBUy9VLEVBQUksR0FBSUEsRUFBSSxHQUFJQSxJQUFLLENBQzFCLElBQUkrTyxFQUFJaUcsRUFBRWhWLEVBQUksR0FBS2dWLEVBQUVoVixFQUFJLEdBQUtnVixFQUFFaFYsRUFBSSxJQUFNZ1YsRUFBRWhWLEVBQUksSUFDaERnVixFQUFFaFYsR0FBK0IsWUFBeEIrTyxHQUFLLEVBQU1BLElBQU0sSUFFOUIsSUFLSVksRUFBR21CLEVBTEh0RCxFQUFJOU4sS0FBSzJVLE9BQU8sR0FDaEI5RixFQUFJN08sS0FBSzJVLE9BQU8sR0FDaEJhLEVBQUl4VixLQUFLMlUsT0FBTyxHQUNoQjlHLEVBQUk3TixLQUFLMlUsT0FBTyxHQUNoQjNLLEVBQUloSyxLQUFLMlUsT0FBTyxHQUdwQixJQUFTclUsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ2hCQSxFQUFJLEdBQ0FBLEVBQUksSUFDSjJQLEVBQUlwQyxFQUFLZ0IsR0FBSzJHLEVBQUkzSCxHQUNsQnVELEVBQUksYUFHSm5CLEVBQUlwQixFQUFJMkcsRUFBSTNILEVBQ1p1RCxFQUFJLFlBSUo5USxFQUFJLElBQ0oyUCxFQUFLcEIsRUFBSTJHLEVBQU0zSCxHQUFLZ0IsRUFBSTJHLEdBQ3hCcEUsRUFBSSxhQUdKbkIsRUFBSXBCLEVBQUkyRyxFQUFJM0gsRUFDWnVELEVBQUksWUFHUi9CLEdBQU92QixHQUFLLEVBQU1BLElBQU0sSUFBT21DLEVBQUlqRyxFQUFJb0gsRUFBSWtFLEVBQUVoVixHQUFNLFdBQ3ZEMEosRUFBSTZELEVBQ0pBLEVBQUkySCxFQUNKQSxFQUE4QixZQUF4QjNHLEdBQUssR0FBT0EsSUFBTSxHQUN4QkEsRUFBSWYsRUFDSkEsRUFBSXVCLEVBRVJyUCxLQUFLMlUsT0FBTyxHQUFNM1UsS0FBSzJVLE9BQU8sR0FBSzdHLEVBQUssV0FDeEM5TixLQUFLMlUsT0FBTyxHQUFNM1UsS0FBSzJVLE9BQU8sR0FBSzlGLEVBQUssV0FDeEM3TyxLQUFLMlUsT0FBTyxHQUFNM1UsS0FBSzJVLE9BQU8sR0FBS2EsRUFBSyxXQUN4Q3hWLEtBQUsyVSxPQUFPLEdBQU0zVSxLQUFLMlUsT0FBTyxHQUFLOUcsRUFBSyxXQUN4QzdOLEtBQUsyVSxPQUFPLEdBQU0zVSxLQUFLMlUsT0FBTyxHQUFLM0ssRUFBSyxZQUU1QzBLLEVBQUtwUyxVQUFVc0ssT0FBUyxTQUFVNkksRUFBTzlVLEdBRXJDLEdBQWEsTUFBVDhVLEVBQUosTUFHZTdULElBQVhqQixJQUNBQSxFQUFTOFUsRUFBTTlVLFFBUW5CLElBTkEsSUFBSStVLEVBQW1CL1UsRUFBU1gsS0FBS2lWLFVBQ2pDNVMsRUFBSSxFQUVKK1MsRUFBTXBWLEtBQUs0VSxLQUNYZSxFQUFRM1YsS0FBSytVLE9BRVYxUyxFQUFJMUIsR0FBUSxDQUtmLEdBQWMsSUFBVmdWLEVBQ0EsS0FBT3RULEdBQUtxVCxHQUNSMVYsS0FBS21WLFVBQVVNLEVBQU9wVCxHQUN0QkEsR0FBS3JDLEtBQUtpVixVQUdsQixHQUFxQixpQkFBVlEsR0FDUCxLQUFPcFQsRUFBSTFCLEdBSVAsR0FIQXlVLEVBQUlPLEdBQVNGLEVBQU1GLFdBQVdsVCxLQUU1QkEsSUFEQXNULElBRVkzVixLQUFLaVYsVUFBVyxDQUMxQmpWLEtBQUttVixVQUFVQyxHQUNmTyxFQUFRLEVBRVIsWUFLUixLQUFPdFQsRUFBSTFCLEdBSVAsR0FIQXlVLEVBQUlPLEdBQVNGLEVBQU1wVCxLQUVqQkEsSUFEQXNULElBRVkzVixLQUFLaVYsVUFBVyxDQUMxQmpWLEtBQUttVixVQUFVQyxHQUNmTyxFQUFRLEVBRVIsT0FLaEIzVixLQUFLK1UsT0FBU1ksRUFDZDNWLEtBQUtnVixRQUFVclUsSUFHbkIrVCxFQUFLcFMsVUFBVXNULE9BQVMsV0FDcEIsSUFBSUEsRUFBUyxHQUNUQyxFQUEwQixFQUFkN1YsS0FBS2dWLE9BRWpCaFYsS0FBSytVLE9BQVMsR0FDZC9VLEtBQUs0TSxPQUFPNU0sS0FBSzhVLEtBQU0sR0FBSzlVLEtBQUsrVSxRQUdqQy9VLEtBQUs0TSxPQUFPNU0sS0FBSzhVLEtBQU05VSxLQUFLaVYsV0FBYWpWLEtBQUsrVSxPQUFTLEtBRzNELElBQUssSUFBSXpVLEVBQUlOLEtBQUtpVixVQUFZLEVBQUczVSxHQUFLLEdBQUlBLElBQ3RDTixLQUFLNFUsS0FBS3RVLEdBQWlCLElBQVp1VixFQUNmQSxHQUFhLElBRWpCN1YsS0FBS21WLFVBQVVuVixLQUFLNFUsTUFDcEIsSUFBSXZTLEVBQUksRUFDUixJQUFTL0IsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ25CLElBQUssSUFBSStRLEVBQUksR0FBSUEsR0FBSyxFQUFHQSxHQUFLLEVBQzFCdUUsRUFBT3ZULEdBQU1yQyxLQUFLMlUsT0FBT3JVLElBQU0rUSxFQUFLLE1BQ2xDaFAsRUFHVixPQUFPdVQsR0FyTlUsR0EwT3pCLElBQUlwQixFQUErQixXQU0vQixTQUFTQSxFQUFjSCxFQUFVQyxHQUM3QixJQUFJM0MsRUFBUTNSLEtBQ1pBLEtBQUs4VixVQUFZLEdBQ2pCOVYsS0FBSytWLGFBQWUsR0FDcEIvVixLQUFLZ1csY0FBZ0IsRUFFckJoVyxLQUFLaVcsS0FBTzFSLFFBQVFDLFVBQ3BCeEUsS0FBS2tXLFdBQVksRUFDakJsVyxLQUFLc1UsY0FBZ0JBLEVBSXJCdFUsS0FBS2lXLEtBQ0E3USxNQUFLLFdBQ05pUCxFQUFTMUMsTUFFUkcsT0FBTSxTQUFVOUgsR0FDakIySCxFQUFNOU0sTUFBTW1GLE1BZ0pwQixPQTdJQXdLLEVBQWNsUyxVQUFVUixLQUFPLFNBQVVFLEdBQ3JDaEMsS0FBS21XLGlCQUFnQixTQUFVQyxHQUMzQkEsRUFBU3RVLEtBQUtFLE9BR3RCd1MsRUFBY2xTLFVBQVV1QyxNQUFRLFNBQVVBLEdBQ3RDN0UsS0FBS21XLGlCQUFnQixTQUFVQyxHQUMzQkEsRUFBU3ZSLE1BQU1BLE1BRW5CN0UsS0FBSzhTLE1BQU1qTyxJQUVmMlAsRUFBY2xTLFVBQVU0RSxTQUFXLFdBQy9CbEgsS0FBS21XLGlCQUFnQixTQUFVQyxHQUMzQkEsRUFBU2xQLGNBRWJsSCxLQUFLOFMsU0FRVDBCLEVBQWNsUyxVQUFVbVMsVUFBWSxTQUFVNEIsRUFBZ0J4UixFQUFPcUMsR0FDakUsSUFDSWtQLEVBREF6RSxFQUFRM1IsS0FFWixRQUF1QjRCLElBQW5CeVUsUUFDVXpVLElBQVZpRCxRQUNhakQsSUFBYnNGLEVBQ0EsTUFBTSxJQUFJcUUsTUFBTSwwQkFpQkUzSixLQU5sQndVLEVBNkhaLFNBQThCclIsRUFBS3VSLEdBQy9CLEdBQW1CLGlCQUFSdlIsR0FBNEIsT0FBUkEsRUFDM0IsT0FBTyxFQUVYLElBQUssSUFBSW5FLEVBQUssRUFBRzJWLEVBekk0QixDQUNyQyxPQUNBLFFBQ0EsWUFzSThCM1YsRUFBSzJWLEVBQVU1VixPQUFRQyxJQUFNLENBQy9ELElBQUlvRSxFQUFTdVIsRUFBVTNWLEdBQ3ZCLEdBQUlvRSxLQUFVRCxHQUE4QixtQkFBaEJBLEVBQUlDLEdBQzVCLE9BQU8sRUFHZixPQUFPLEVBL0lDd1IsQ0FBcUJILEdBS1ZBLEVBR0EsQ0FDUHZVLEtBQU11VSxFQUNOeFIsTUFBT0EsRUFDUHFDLFNBQVVBLElBR0xwRixPQUNUc1UsRUFBU3RVLEtBQU8yVSxRQUVHN1UsSUFBbkJ3VSxFQUFTdlIsUUFDVHVSLEVBQVN2UixNQUFRNFIsUUFFSzdVLElBQXRCd1UsRUFBU2xQLFdBQ1RrUCxFQUFTbFAsU0FBV3VQLEdBRXhCLElBQUlDLEVBQVExVyxLQUFLMlcsZUFBZTdKLEtBQUs5TSxLQUFNQSxLQUFLOFYsVUFBVW5WLFFBc0IxRCxPQWxCSVgsS0FBS2tXLFdBRUxsVyxLQUFLaVcsS0FBSzdRLE1BQUssV0FDWCxJQUNRdU0sRUFBTWlGLFdBQ05SLEVBQVN2UixNQUFNOE0sRUFBTWlGLFlBR3JCUixFQUFTbFAsV0FHakIsTUFBTzhDLFFBTWZoSyxLQUFLOFYsVUFBVXJXLEtBQUsyVyxHQUNiTSxHQUlYbEMsRUFBY2xTLFVBQVVxVSxlQUFpQixTQUFVclcsUUFDeEJzQixJQUFuQjVCLEtBQUs4VixnQkFBaURsVSxJQUF0QjVCLEtBQUs4VixVQUFVeFYsWUFHNUNOLEtBQUs4VixVQUFVeFYsR0FDdEJOLEtBQUtnVyxlQUFpQixFQUNLLElBQXZCaFcsS0FBS2dXLG9CQUE4Q3BVLElBQXZCNUIsS0FBS3NVLGVBQ2pDdFUsS0FBS3NVLGNBQWN0VSxRQUczQndVLEVBQWNsUyxVQUFVNlQsZ0JBQWtCLFNBQVVVLEdBQ2hELElBQUk3VyxLQUFLa1csVUFNVCxJQUFLLElBQUk1VixFQUFJLEVBQUdBLEVBQUlOLEtBQUs4VixVQUFVblYsT0FBUUwsSUFDdkNOLEtBQUs4VyxRQUFReFcsRUFBR3VXLElBTXhCckMsRUFBY2xTLFVBQVV3VSxRQUFVLFNBQVV4VyxFQUFHdVcsR0FDM0MsSUFBSWxGLEVBQVEzUixLQUdaQSxLQUFLaVcsS0FBSzdRLE1BQUssV0FDWCxRQUF3QnhELElBQXBCK1AsRUFBTW1FLGdCQUFrRGxVLElBQXZCK1AsRUFBTW1FLFVBQVV4VixHQUNqRCxJQUNJdVcsRUFBR2xGLEVBQU1tRSxVQUFVeFYsSUFFdkIsTUFBTzBKLEdBSW9CLG9CQUFaK00sU0FBMkJBLFFBQVFsUyxPQUMxQ2tTLFFBQVFsUyxNQUFNbUYsUUFNbEN3SyxFQUFjbFMsVUFBVXdRLE1BQVEsU0FBVTdRLEdBQ3RDLElBQUkwUCxFQUFRM1IsS0FDUkEsS0FBS2tXLFlBR1RsVyxLQUFLa1csV0FBWSxPQUNMdFUsSUFBUkssSUFDQWpDLEtBQUs0VyxXQUFhM1UsR0FJdEJqQyxLQUFLaVcsS0FBSzdRLE1BQUssV0FDWHVNLEVBQU1tRSxlQUFZbFUsRUFDbEIrUCxFQUFNMkMsbUJBQWdCMVMsT0FHdkI0UyxFQXZLdUIsR0EyTWxDLFNBQVNpQyxLQTBQVCxTQUFTTyxFQUF1QkMsRUFBY0MsRUFBZ0JDLFFBQ25DLElBQW5CRCxJQUE2QkEsRUEzQlAsVUE0QkosSUFBbEJDLElBQTRCQSxFQXZCUCxHQTJCekIsSUFBSUMsRUFBZ0JGLEVBQWlCRyxLQUFLQyxJQUFJSCxFQUFlRixHQUd6RE0sRUFBYUYsS0FBS0csTUFmTixHQW1CWkosR0FHQ0MsS0FBS0ksU0FBVyxJQUNqQixHQUVKLE9BQU9KLEtBQUtLLElBbENPLE1Ba0NlTixFQUFnQkcsR0M3cUR0RCxJQ2lDSXZFLEVEakNBMkUsRUFBMkIsV0FPM0IsU0FBU0EsRUFBVWpWLEVBQU1rVixFQUFpQkMsR0FDdEM3WCxLQUFLMEMsS0FBT0EsRUFDWjFDLEtBQUs0WCxnQkFBa0JBLEVBQ3ZCNVgsS0FBSzZYLEtBQU9BLEVBQ1o3WCxLQUFLOFgsbUJBQW9CLEVBSXpCOVgsS0FBSytYLGFBQWUsR0FDcEIvWCxLQUFLZ1ksa0JBQW9CLE9BYzdCLE9BWkFMLEVBQVVyVixVQUFVMlYscUJBQXVCLFNBQVVDLEdBRWpELE9BREFsWSxLQUFLZ1ksa0JBQW9CRSxFQUNsQmxZLE1BRVgyWCxFQUFVclYsVUFBVTZWLHFCQUF1QixTQUFVTCxHQUVqRCxPQURBOVgsS0FBSzhYLGtCQUFvQkEsRUFDbEI5WCxNQUVYMlgsRUFBVXJWLFVBQVU4VixnQkFBa0IsU0FBVUMsR0FFNUMsT0FEQXJZLEtBQUsrWCxhQUFlTSxFQUNiclksTUFFSjJYLEVBOUJtQixHQWlEMUJXLEVBQXFCLFlBc0JyQkMsRUFBMEIsV0FDMUIsU0FBU0EsRUFBUzdWLEVBQU04VixHQUNwQnhZLEtBQUswQyxLQUFPQSxFQUNaMUMsS0FBS3dZLFVBQVlBLEVBQ2pCeFksS0FBS3lZLFVBQVksS0FDakJ6WSxLQUFLMFksVUFBWSxJQUFJQyxJQUNyQjNZLEtBQUs0WSxrQkFBb0IsSUFBSUQsSUFtSmpDLE9BN0lBSixFQUFTalcsVUFBVXdELElBQU0sU0FBVXFFLFFBQ1osSUFBZkEsSUFBeUJBLEVBQWFtTyxHQUUxQyxJQUFJTyxFQUF1QjdZLEtBQUs4WSw0QkFBNEIzTyxHQUM1RCxJQUFLbkssS0FBSzRZLGtCQUFrQkcsSUFBSUYsR0FBdUIsQ0FDbkQsSUFBSUcsRUFBVyxJQUFJdEgsRUFDbkIxUixLQUFLNFksa0JBQWtCN1MsSUFBSThTLEVBQXNCRyxHQUVqRCxJQUNJLElBQUl0USxFQUFXMUksS0FBS2laLHVCQUF1QkosR0FDdkNuUSxHQUNBc1EsRUFBU3hVLFFBQVFrRSxHQUd6QixNQUFPc0IsS0FLWCxPQUFPaEssS0FBSzRZLGtCQUFrQjlTLElBQUkrUyxHQUFzQmpILFNBRTVEMkcsRUFBU2pXLFVBQVU0VyxhQUFlLFNBQVVwVixHQUN4QyxJQUFJa1AsRUFBSzdELEVBQVMsQ0FBRWhGLFdBQVltTyxFQUFvQmEsVUFBVSxHQUFTclYsR0FBVXFHLEVBQWE2SSxFQUFHN0ksV0FBWWdQLEVBQVduRyxFQUFHbUcsU0FFdkhOLEVBQXVCN1ksS0FBSzhZLDRCQUE0QjNPLEdBQzVELElBQ0ksSUFBSXpCLEVBQVcxSSxLQUFLaVosdUJBQXVCSixHQUMzQyxJQUFLblEsRUFBVSxDQUNYLEdBQUl5USxFQUNBLE9BQU8sS0FFWCxNQUFNNU4sTUFBTSxXQUFhdkwsS0FBSzBDLEtBQU8scUJBRXpDLE9BQU9nRyxFQUVYLE1BQU9zQixHQUNILEdBQUltUCxFQUNBLE9BQU8sS0FHUCxNQUFNblAsSUFJbEJ1TyxFQUFTalcsVUFBVThXLGFBQWUsV0FDOUIsT0FBT3BaLEtBQUt5WSxXQUVoQkYsRUFBU2pXLFVBQVUrVyxhQUFlLFNBQVVaLEdBQ3hDLElBQUlhLEVBQUt0RyxFQUNULEdBQUl5RixFQUFVL1YsT0FBUzFDLEtBQUswQyxLQUN4QixNQUFNNkksTUFBTSx5QkFBMkJrTixFQUFVL1YsS0FBTyxpQkFBbUIxQyxLQUFLMEMsS0FBTyxLQUUzRixHQUFJMUMsS0FBS3lZLFVBQ0wsTUFBTWxOLE1BQU0saUJBQW1CdkwsS0FBSzBDLEtBQU8sOEJBSS9DLEdBRkExQyxLQUFLeVksVUFBWUEsRUE0RnpCLFNBQTBCQSxHQUN0QixNQUF1QyxVQUFoQ0EsRUFBVVQsa0JBM0ZUdUIsQ0FBaUJkLEdBQ2pCLElBQ0l6WSxLQUFLaVosdUJBQXVCWCxHQUVoQyxNQUFPdE8sSUFPWCxJQUlJLElBQUssSUFBSXdQLEVBQUs1SSxFQUFTNVEsS0FBSzRZLGtCQUFrQmEsV0FBWUMsRUFBS0YsRUFBRzFYLFFBQVM0WCxFQUFHM1gsS0FBTTJYLEVBQUtGLEVBQUcxWCxPQUFRLENBQ2hHLElBQUlKLEVBQUtvUCxFQUFPNEksRUFBRzFYLE1BQU8sR0FBSTJYLEVBQXFCalksRUFBRyxHQUFJa1ksRUFBbUJsWSxFQUFHLEdBQzVFbVgsRUFBdUI3WSxLQUFLOFksNEJBQTRCYSxHQUM1RCxJQUVJLElBQUlqUixFQUFXMUksS0FBS2laLHVCQUF1QkosR0FDM0NlLEVBQWlCcFYsUUFBUWtFLEdBRTdCLE1BQU9zQixNQU1mLE1BQU82UCxHQUFTUCxFQUFNLENBQUV6VSxNQUFPZ1YsR0FDL0IsUUFDSSxJQUNRSCxJQUFPQSxFQUFHM1gsT0FBU2lSLEVBQUt3RyxFQUFHTSxTQUFTOUcsRUFBR3pRLEtBQUtpWCxHQUVwRCxRQUFVLEdBQUlGLEVBQUssTUFBTUEsRUFBSXpVLFNBR3JDMFQsRUFBU2pXLFVBQVV5WCxjQUFnQixTQUFVNVAsUUFDdEIsSUFBZkEsSUFBeUJBLEVBQWFtTyxHQUMxQ3RZLEtBQUs0WSxrQkFBa0JvQixPQUFPN1AsR0FDOUJuSyxLQUFLMFksVUFBVXNCLE9BQU83UCxJQUkxQm9PLEVBQVNqVyxVQUFVMFgsT0FBUyxXQUN4QixPQUFPekssRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlpYSxFQUNKLE9BQU9sSyxFQUFZL1AsTUFBTSxTQUFVZ1QsR0FDL0IsT0FBUUEsRUFBRzVDLE9BQ1AsS0FBSyxFQUVELE9BREE2SixFQUFXaFosTUFBTTBCLEtBQUszQyxLQUFLMFksVUFBVXdCLFVBQzlCLENBQUMsRUFBYTNWLFFBQVEySSxJQUFJK0QsRUFBU2dKLEVBQ2pDck8sUUFBTyxTQUFVOEgsR0FBVyxNQUFPLGFBQWNBLEtBRWpEelQsS0FBSSxTQUFVeVQsR0FBVyxPQUFPQSxFQUFReUcsU0FBU0gsWUFBY0MsRUFDL0RyTyxRQUFPLFNBQVU4SCxHQUFXLE1BQU8sWUFBYUEsS0FFaER6VCxLQUFJLFNBQVV5VCxHQUFXLE9BQU9BLEVBQVEwRyxnQkFDckQsS0FBSyxFQUVELE9BREFwSCxFQUFHM0MsT0FDSSxDQUFDLFdBSzVCa0ksRUFBU2pXLFVBQVUrWCxlQUFpQixXQUNoQyxPQUF5QixNQUFsQnJhLEtBQUt5WSxXQUVoQkYsRUFBU2pXLFVBQVUyVyx1QkFBeUIsU0FBVTlPLEdBQ2xELElBQUl6QixFQUFXMUksS0FBSzBZLFVBQVU1UyxJQUFJcUUsR0FLbEMsT0FKS3pCLEdBQVkxSSxLQUFLeVksWUFDbEIvUCxFQUFXMUksS0FBS3lZLFVBQVViLGdCQUFnQjVYLEtBQUt3WSxVQWdCM0QsU0FBdUNyTyxHQUNuQyxPQUFPQSxJQUFlbU8sT0FBcUIxVyxFQUFZdUksRUFqQldtUSxDQUE4Qm5RLElBQ3hGbkssS0FBSzBZLFVBQVUzUyxJQUFJb0UsRUFBWXpCLElBRTVCQSxHQUFZLE1BRXZCNlAsRUFBU2pXLFVBQVV3Vyw0QkFBOEIsU0FBVTNPLEdBQ3ZELE9BQUluSyxLQUFLeVksVUFDRXpZLEtBQUt5WSxVQUFVWCxrQkFBb0IzTixFQUFhbU8sRUFHaERuTyxHQUdSb08sRUF6SmtCLEdBc0x6QmdDLEVBQW9DLFdBQ3BDLFNBQVNBLEVBQW1CN1gsR0FDeEIxQyxLQUFLMEMsS0FBT0EsRUFDWjFDLEtBQUt3YSxVQUFZLElBQUk3QixJQTZDekIsT0FsQ0E0QixFQUFtQmpZLFVBQVVtWSxhQUFlLFNBQVVoQyxHQUNsRCxJQUFJaUMsRUFBVzFhLEtBQUsyYSxZQUFZbEMsRUFBVS9WLE1BQzFDLEdBQUlnWSxFQUFTTCxpQkFDVCxNQUFNLElBQUk5TyxNQUFNLGFBQWVrTixFQUFVL1YsS0FBTyxxQ0FBdUMxQyxLQUFLMEMsTUFFaEdnWSxFQUFTckIsYUFBYVosSUFFMUI4QixFQUFtQmpZLFVBQVVzWSx3QkFBMEIsU0FBVW5DLEdBQzlDelksS0FBSzJhLFlBQVlsQyxFQUFVL1YsTUFDN0IyWCxrQkFFVHJhLEtBQUt3YSxVQUFVUixPQUFPdkIsRUFBVS9WLE1BRXBDMUMsS0FBS3lhLGFBQWFoQyxJQVN0QjhCLEVBQW1CalksVUFBVXFZLFlBQWMsU0FBVWpZLEdBQ2pELEdBQUkxQyxLQUFLd2EsVUFBVXpCLElBQUlyVyxHQUNuQixPQUFPMUMsS0FBS3dhLFVBQVUxVSxJQUFJcEQsR0FHOUIsSUFBSWdZLEVBQVcsSUFBSW5DLEVBQVM3VixFQUFNMUMsTUFFbEMsT0FEQUEsS0FBS3dhLFVBQVV6VSxJQUFJckQsRUFBTWdZLEdBQ2xCQSxHQUVYSCxFQUFtQmpZLFVBQVV1WSxhQUFlLFdBQ3hDLE9BQU81WixNQUFNMEIsS0FBSzNDLEtBQUt3YSxVQUFVTixXQUU5QkssRUFoRDRCLEdDcFB2QyxTQUFTLElBQ0wsSUFBSyxJQUFJakwsRUFBSSxFQUFHaFAsRUFBSSxFQUFHNlEsRUFBS2hMLFVBQVV4RixPQUFRTCxFQUFJNlEsRUFBSTdRLElBQUtnUCxHQUFLbkosVUFBVTdGLEdBQUdLLE9BQ3hFLElBQUlvUSxFQUFJOVAsTUFBTXFPLEdBQUk4QixFQUFJLEVBQTNCLElBQThCOVEsRUFBSSxFQUFHQSxFQUFJNlEsRUFBSTdRLElBQ3pDLElBQUssSUFBSXdOLEVBQUkzSCxVQUFVN0YsR0FBSStRLEVBQUksRUFBR0MsRUFBS3hELEVBQUVuTixPQUFRMFEsRUFBSUMsRUFBSUQsSUFBS0QsSUFDMURMLEVBQUVLLEdBQUt0RCxFQUFFdUQsR0FDakIsT0FBT04sRUF1QlgsSUFZSStKLEVBWkFwQyxFQUFZLElBYWhCLFNBQVdvQyxHQUNQQSxFQUFTQSxFQUFnQixNQUFJLEdBQUssUUFDbENBLEVBQVNBLEVBQWtCLFFBQUksR0FBSyxVQUNwQ0EsRUFBU0EsRUFBZSxLQUFJLEdBQUssT0FDakNBLEVBQVNBLEVBQWUsS0FBSSxHQUFLLE9BQ2pDQSxFQUFTQSxFQUFnQixNQUFJLEdBQUssUUFDbENBLEVBQVNBLEVBQWlCLE9BQUksR0FBSyxTQU52QyxDQU9HQSxJQUFhQSxFQUFXLEtBQzNCLElDM0NJLEVEMkNBQyxFQUFvQixDQUNwQixNQUFTRCxFQUFTRSxNQUNsQixRQUFXRixFQUFTRyxRQUNwQixLQUFRSCxFQUFTSSxLQUNqQixLQUFRSixFQUFTSyxLQUNqQixNQUFTTCxFQUFTTSxNQUNsQixPQUFVTixFQUFTTyxRQUtuQkMsRUFBa0JSLEVBQVNJLEtBTzNCSyxJQUFpQnZJLEVBQUssSUFDbkI4SCxFQUFTRSxPQUFTLE1BQ3JCaEksRUFBRzhILEVBQVNHLFNBQVcsTUFDdkJqSSxFQUFHOEgsRUFBU0ksTUFBUSxPQUNwQmxJLEVBQUc4SCxFQUFTSyxNQUFRLE9BQ3BCbkksRUFBRzhILEVBQVNNLE9BQVMsUUFDckJwSSxHQU1Bd0ksRUFBb0IsU0FBVTlTLEVBQVUrUyxHQUV4QyxJQURBLElBQUl4VyxFQUFPLEdBQ0ZyRSxFQUFLLEVBQUdBLEVBQUt1RixVQUFVeEYsT0FBUUMsSUFDcENxRSxFQUFLckUsRUFBSyxHQUFLdUYsVUFBVXZGLEdBRTdCLEtBQUk2YSxFQUFVL1MsRUFBU2dULFVBQXZCLENBR0EsSUFBSUMsR0FBTSxJQUFJbkssTUFBT29LLGNBQ2pCNVcsRUFBU3VXLEVBQWNFLEdBQzNCLElBQUl6VyxFQUlBLE1BQU0sSUFBSXVHLE1BQU0sOERBQWdFa1EsRUFBVSxLQUgxRjFFLFFBQVEvUixHQUFRRyxNQUFNNFIsUUFBUyxFQUFlLENBQUMsSUFBTTRFLEVBQU0sTUFBUWpULEVBQVNoRyxLQUFPLEtBQU11QyxNQU03RjRXLEVBQXdCLFdBT3hCLFNBQVNBLEVBQU9uWixHQUNaMUMsS0FBSzBDLEtBQU9BLEVBSVoxQyxLQUFLOGIsVUFBWVIsRUFLakJ0YixLQUFLK2IsWUFBY1AsRUFJbkJ4YixLQUFLZ2MsZ0JBQWtCLEtBSXZCdEQsRUFBVWpaLEtBQUtPLE1BcUZuQixPQW5GQXVCLE9BQU9zRSxlQUFlZ1csRUFBT3ZaLFVBQVcsV0FBWSxDQUNoRHdELElBQUssV0FDRCxPQUFPOUYsS0FBSzhiLFdBRWhCL1YsSUFBSyxTQUFVQyxHQUNYLEtBQU1BLEtBQU84VSxHQUNULE1BQU0sSUFBSWhZLFVBQVUsa0JBQXFCa0QsRUFBTSw0QkFFbkRoRyxLQUFLOGIsVUFBWTlWLEdBRXJCZ0ksWUFBWSxFQUNaaU8sY0FBYyxJQUdsQkosRUFBT3ZaLFVBQVU0WixZQUFjLFNBQVVsVyxHQUNyQ2hHLEtBQUs4YixVQUEyQixpQkFBUjlWLEVBQW1CK1UsRUFBa0IvVSxHQUFPQSxHQUV4RXpFLE9BQU9zRSxlQUFlZ1csRUFBT3ZaLFVBQVcsYUFBYyxDQUNsRHdELElBQUssV0FDRCxPQUFPOUYsS0FBSytiLGFBRWhCaFcsSUFBSyxTQUFVQyxHQUNYLEdBQW1CLG1CQUFSQSxFQUNQLE1BQU0sSUFBSWxELFVBQVUscURBRXhCOUMsS0FBSytiLFlBQWMvVixHQUV2QmdJLFlBQVksRUFDWmlPLGNBQWMsSUFFbEIxYSxPQUFPc0UsZUFBZWdXLEVBQU92WixVQUFXLGlCQUFrQixDQUN0RHdELElBQUssV0FDRCxPQUFPOUYsS0FBS2djLGlCQUVoQmpXLElBQUssU0FBVUMsR0FDWGhHLEtBQUtnYyxnQkFBa0JoVyxHQUUzQmdJLFlBQVksRUFDWmlPLGNBQWMsSUFLbEJKLEVBQU92WixVQUFVNlosTUFBUSxXQUVyQixJQURBLElBQUlsWCxFQUFPLEdBQ0ZyRSxFQUFLLEVBQUdBLEVBQUt1RixVQUFVeEYsT0FBUUMsSUFDcENxRSxFQUFLckUsR0FBTXVGLFVBQVV2RixHQUV6QlosS0FBS2djLGlCQUFtQmhjLEtBQUtnYyxnQkFBZ0I3VyxNQUFNbkYsS0FBTSxFQUFlLENBQUNBLEtBQU04YSxFQUFTRSxPQUFRL1YsSUFDaEdqRixLQUFLK2IsWUFBWTVXLE1BQU1uRixLQUFNLEVBQWUsQ0FBQ0EsS0FBTThhLEVBQVNFLE9BQVEvVixLQUV4RTRXLEVBQU92WixVQUFVOFosSUFBTSxXQUVuQixJQURBLElBQUluWCxFQUFPLEdBQ0ZyRSxFQUFLLEVBQUdBLEVBQUt1RixVQUFVeEYsT0FBUUMsSUFDcENxRSxFQUFLckUsR0FBTXVGLFVBQVV2RixHQUV6QlosS0FBS2djLGlCQUFtQmhjLEtBQUtnYyxnQkFBZ0I3VyxNQUFNbkYsS0FBTSxFQUFlLENBQUNBLEtBQU04YSxFQUFTRyxTQUFVaFcsSUFDbEdqRixLQUFLK2IsWUFBWTVXLE1BQU1uRixLQUFNLEVBQWUsQ0FBQ0EsS0FBTThhLEVBQVNHLFNBQVVoVyxLQUUxRTRXLEVBQU92WixVQUFVK1osS0FBTyxXQUVwQixJQURBLElBQUlwWCxFQUFPLEdBQ0ZyRSxFQUFLLEVBQUdBLEVBQUt1RixVQUFVeEYsT0FBUUMsSUFDcENxRSxFQUFLckUsR0FBTXVGLFVBQVV2RixHQUV6QlosS0FBS2djLGlCQUFtQmhjLEtBQUtnYyxnQkFBZ0I3VyxNQUFNbkYsS0FBTSxFQUFlLENBQUNBLEtBQU04YSxFQUFTSSxNQUFPalcsSUFDL0ZqRixLQUFLK2IsWUFBWTVXLE1BQU1uRixLQUFNLEVBQWUsQ0FBQ0EsS0FBTThhLEVBQVNJLE1BQU9qVyxLQUV2RTRXLEVBQU92WixVQUFVZ2EsS0FBTyxXQUVwQixJQURBLElBQUlyWCxFQUFPLEdBQ0ZyRSxFQUFLLEVBQUdBLEVBQUt1RixVQUFVeEYsT0FBUUMsSUFDcENxRSxFQUFLckUsR0FBTXVGLFVBQVV2RixHQUV6QlosS0FBS2djLGlCQUFtQmhjLEtBQUtnYyxnQkFBZ0I3VyxNQUFNbkYsS0FBTSxFQUFlLENBQUNBLEtBQU04YSxFQUFTSyxNQUFPbFcsSUFDL0ZqRixLQUFLK2IsWUFBWTVXLE1BQU1uRixLQUFNLEVBQWUsQ0FBQ0EsS0FBTThhLEVBQVNLLE1BQU9sVyxLQUV2RTRXLEVBQU92WixVQUFVdUMsTUFBUSxXQUVyQixJQURBLElBQUlJLEVBQU8sR0FDRnJFLEVBQUssRUFBR0EsRUFBS3VGLFVBQVV4RixPQUFRQyxJQUNwQ3FFLEVBQUtyRSxHQUFNdUYsVUFBVXZGLEdBRXpCWixLQUFLZ2MsaUJBQW1CaGMsS0FBS2djLGdCQUFnQjdXLE1BQU1uRixLQUFNLEVBQWUsQ0FBQ0EsS0FBTThhLEVBQVNNLE9BQVFuVyxJQUNoR2pGLEtBQUsrYixZQUFZNVcsTUFBTW5GLEtBQU0sRUFBZSxDQUFDQSxLQUFNOGEsRUFBU00sT0FBUW5XLEtBRWpFNFcsRUE5R2dCLEdBZ0gzQixTQUFTSyxFQUFZSyxHQUNqQjdELEVBQVUvUyxTQUFRLFNBQVU2VyxHQUN4QkEsRUFBS04sWUFBWUssTUMzTXpCLElBcURJRSxFQXJEQUMsSUFBVSxFQUFLLElBQ1osVUFBeUIsb0ZBRTVCLEVBQUcsZ0JBQXFDLGdDQUN4QyxFQUFHLGlCQUF1QyxpREFDMUMsRUFBRyxlQUFtQyxrREFDdEMsRUFBRyx3QkFBcUQsNkVBRXhELEVBQUcsd0JBQXFELHdEQUN4RCxHQUNBQyxFQUFnQixJQUFJbEosRUFBYSxNQUFPLFdBQVlpSixHQUVwREUsRUFBUyxnQkEwQ1QsRUFBcUIsWUFDckJDLElBQXVCSixFQUFPLElBQ3pCRyxHQUFVLFlBQ2ZILEVBMUNTLHVCQTBDTSxpQkFDZkEsRUF6Q1Msa0JBeUNNLFlBQ2ZBLEVBeENTLHNCQXdDTSxZQUNmQSxFQXZDUyx1QkF1Q00sVUFDZkEsRUF0Q1MsMkJBc0NNLFdBQ2ZBLEVBckNTLHVCQXFDTSxXQUNmQSxFQXBDUyx5QkFvQ00sWUFDZkEsRUFuQ1MsMkJBbUNNLFVBQ2ZBLEVBbENTLHFCQWtDTSxXQUNmQSxFQWpDUyx1QkFpQ00sV0FDZkEsRUFBSyxXQUFhLFVBQ2xCQSxFQWpDUyxvQkFpQ00sY0FDZkEsR0FrQkFLLEVBQVMsSUFBSWpCLEVBQU8saUJBc0JwQmtCLEVBQWlDLFdBQ2pDLFNBQVNBLEVBQWdCalosRUFBU2taLEVBQVFDLEdBQ3RDLElBQUkzRCxFQUFLdEcsRUFDTHJCLEVBQVEzUixLQUNaQSxLQUFLaWQsVUFBWUEsRUFDakJqZCxLQUFLa2QsWUFBYSxFQUNsQmxkLEtBQUttZCxNQUFRSCxFQUFPdGEsS0FDcEIxQyxLQUFLb2QsZ0NBQ0RKLEVBQU9LLGlDQUFrQyxFQUM3Q3JkLEtBQUtzZCxTSDJQRi9MLE9BQVczUCxFRzNQV2tDLEdBQ3pCOUQsS0FBS3dZLFVBQVksSUFBSStCLEVBQW1CeUMsRUFBT3RhLE1BRS9DMUMsS0FBS3VkLGNBQWMsSUFBSTVGLEVBQVUsT0FBTyxXQUFjLE9BQU9oRyxJQUFVLFdBQ3ZFLElBRUksSUFBSyxJQUFJNkgsRUFBSzVJLEVBQVM1USxLQUFLaWQsVUFBVTlDLFNBQVNxRCxXQUFXdEQsVUFBV1IsRUFBS0YsRUFBRzFYLFFBQVM0WCxFQUFHM1gsS0FBTTJYLEVBQUtGLEVBQUcxWCxPQUFRLENBQzNHLElBQUkyVyxFQUFZaUIsRUFBRzFYLE1BQ25CaEMsS0FBS3VkLGNBQWM5RSxJQUczQixNQUFPb0IsR0FBU1AsRUFBTSxDQUFFelUsTUFBT2dWLEdBQy9CLFFBQ0ksSUFDUUgsSUFBT0EsRUFBRzNYLE9BQVNpUixFQUFLd0csRUFBR00sU0FBUzlHLEVBQUd6USxLQUFLaVgsR0FFcEQsUUFBVSxHQUFJRixFQUFLLE1BQU1BLEVBQUl6VSxRQXlHckMsT0F0R0F0RCxPQUFPc0UsZUFBZWtYLEVBQWdCemEsVUFBVyxpQ0FBa0MsQ0FDL0V3RCxJQUFLLFdBRUQsT0FEQTlGLEtBQUt5ZCxrQkFDRXpkLEtBQUtvZCxpQ0FFaEJyWCxJQUFLLFNBQVVDLEdBQ1hoRyxLQUFLeWQsa0JBQ0x6ZCxLQUFLb2QsZ0NBQWtDcFgsR0FFM0NnSSxZQUFZLEVBQ1ppTyxjQUFjLElBRWxCMWEsT0FBT3NFLGVBQWVrWCxFQUFnQnphLFVBQVcsT0FBUSxDQUNyRHdELElBQUssV0FFRCxPQURBOUYsS0FBS3lkLGtCQUNFemQsS0FBS21kLE9BRWhCblAsWUFBWSxFQUNaaU8sY0FBYyxJQUVsQjFhLE9BQU9zRSxlQUFla1gsRUFBZ0J6YSxVQUFXLFVBQVcsQ0FDeER3RCxJQUFLLFdBRUQsT0FEQTlGLEtBQUt5ZCxrQkFDRXpkLEtBQUtzZCxVQUVoQnRQLFlBQVksRUFDWmlPLGNBQWMsSUFFbEJjLEVBQWdCemEsVUFBVTBYLE9BQVMsV0FDL0IsSUFBSXJJLEVBQVEzUixLQUNaLE9BQU8sSUFBSXVFLFNBQVEsU0FBVUMsR0FDekJtTixFQUFNOEwsa0JBQ05qWixPQUVDWSxNQUFLLFdBRU4sT0FEQXVNLEVBQU1zTCxVQUFVOUMsU0FBU3VELFVBQVUvTCxFQUFNd0wsT0FDbEM1WSxRQUFRMkksSUFBSXlFLEVBQU02RyxVQUFVcUMsZUFBZTVhLEtBQUksU0FBVXlhLEdBQVksT0FBT0EsRUFBU1YsZ0JBRTNGNVUsTUFBSyxXQUNOdU0sRUFBTXVMLFlBQWEsTUFpQjNCSCxFQUFnQnphLFVBQVVxYixZQUFjLFNBQVVqYixFQUFNaVgsR0FJcEQsWUFIMkIsSUFBdkJBLElBQWlDQSxFQUFxQixHQUMxRDNaLEtBQUt5ZCxrQkFFRXpkLEtBQUt3WSxVQUFVbUMsWUFBWWpZLEdBQU13VyxhQUFhLENBQ2pEL08sV0FBWXdQLEtBYXBCb0QsRUFBZ0J6YSxVQUFVc2IsdUJBQXlCLFNBQVVsYixFQUFNaVgsUUFDcEMsSUFBdkJBLElBQWlDQSxFQUFxQixHQUUxRDNaLEtBQUt3WSxVQUFVbUMsWUFBWWpZLEdBQU1xWCxjQUFjSixJQUtuRG9ELEVBQWdCemEsVUFBVWliLGNBQWdCLFNBQVU5RSxHQUNoRCxJQUNJelksS0FBS3dZLFVBQVVpQyxhQUFhaEMsR0FFaEMsTUFBT3pPLEdBQ0g4UyxFQUFPWCxNQUFNLGFBQWUxRCxFQUFVL1YsS0FBTyx3Q0FBMEMxQyxLQUFLMEMsS0FBTXNILEtBRzFHK1MsRUFBZ0J6YSxVQUFVdWIseUJBQTJCLFNBQVVwRixHQUMzRHpZLEtBQUt3WSxVQUFVb0Msd0JBQXdCbkMsSUFNM0NzRSxFQUFnQnphLFVBQVVtYixnQkFBa0IsV0FDeEMsR0FBSXpkLEtBQUtrZCxXQUNMLE1BQU1QLEVBQWN6TixPQUFPLGNBQWlDLENBQUU0TyxRQUFTOWQsS0FBS21kLFNBRzdFSixFQWxJeUIsR0FzSW5DQSxFQUFnQnphLFVBQVVJLE1BQVFxYSxFQUFnQnphLFVBQVV3QixTQUN6RGlaLEVBQWdCemEsVUFBVTBYLFFBQzFCakQsUUFBUXFGLElBQUksTUFrUmhCLElBQUkyQixFQWpCSixTQUFTQyxJQUNMLElBQUlDLEVBdk9SLFNBQXFDQyxHQUNqQyxJQUFJQyxFQUFPLEdBRVBYLEVBQWEsSUFBSTdFLElBRWpCc0YsRUFBWSxDQUlabGEsWUFBWSxFQUNacWEsY0FtREosU0FBdUJ0YSxFQUFTdWEsUUFDVixJQUFkQSxJQUF3QkEsRUFBWSxJQUNmLGlCQUFkQSxHQUF3QyxPQUFkQSxJQUVqQ0EsRUFBWSxDQUFFM2IsS0FERDJiLElBR2pCLElBQUlyQixFQUFTcUIsT0FDT3pjLElBQWhCb2IsRUFBT3RhLE9BQ1BzYSxFQUFPdGEsS0FBTyxHQUVsQixJQUFJQSxFQUFPc2EsRUFBT3RhLEtBQ2xCLEdBQW9CLGlCQUFUQSxJQUFzQkEsRUFDN0IsTUFBTWlhLEVBQWN6TixPQUFPLGVBQW1DLENBQzFENE8sUUFBUzVKLE9BQU94UixLQUd4QixHQUFJeVIsRUFBU2dLLEVBQU16YixHQUNmLE1BQU1pYSxFQUFjek4sT0FBTyxnQkFBcUMsQ0FBRTRPLFFBQVNwYixJQUUvRSxJQUFJNGIsRUFBTSxJQUFJSixFQUFnQnBhLEVBQVNrWixFQUFRaUIsR0FFL0MsT0FEQUUsRUFBS3piLEdBQVE0YixFQUNOQSxHQXRFUEEsSUFBS0EsRUFDTEMsZ0JBa0pKLFNBQXlCQyxFQUFrQnpWLEVBQVMwVixHQUNoRCxJQUFJekwsRUFHQTBMLEVBQTJELFFBQWhEMUwsRUFBSzZKLEVBQW9CMkIsVUFBc0MsSUFBUHhMLEVBQWdCQSxFQUFLd0wsRUFDeEZDLElBQ0FDLEdBQVcsSUFBTUQsR0FFckIsSUFBSUUsRUFBa0JELEVBQVFFLE1BQU0sU0FDaENDLEVBQWtCOVYsRUFBUTZWLE1BQU0sU0FDcEMsR0FBSUQsR0FBbUJFLEVBQWlCLENBQ3BDLElBQUlDLEVBQVUsQ0FDViwrQkFBa0NKLEVBQVUsbUJBQXVCM1YsRUFBVSxNQVlqRixPQVZJNFYsR0FDQUcsRUFBUXJmLEtBQUssaUJBQW9CaWYsRUFBVSxxREFFM0NDLEdBQW1CRSxHQUNuQkMsRUFBUXJmLEtBQUssT0FFYm9mLEdBQ0FDLEVBQVFyZixLQUFLLGlCQUFvQnNKLEVBQVUsMERBRS9DK1QsRUFBT1IsS0FBS3dDLEVBQVF6ZSxLQUFLLE1BRzdCMGUsRUFBa0IsSUFBSXBILEVBQVUrRyxFQUFVLFlBQVksV0FBYyxNQUFPLENBQUdBLFFBQVNBLEVBQVMzVixRQUFTQSxLQUFlLGFBM0t4SG1ULFlBQWFBLEVBQ2I4QyxNQTRLSixTQUFlQyxFQUFhbmIsR0FDeEIsR0FBb0IsT0FBaEJtYixHQUErQyxtQkFBaEJBLEVBQy9CLE1BQU10QyxFQUFjek4sT0FBTyx1QkFBbUQsQ0FDMUU0TyxRQUFTcGIsUURoUXpCLFNBQTJCdWMsRUFBYW5iLEdBbURwQyxJQWxEQSxJQUFJb2IsRUFBVSxTQUFVeFcsR0FDcEIsSUFBSXlXLEVBQWlCLEtBQ2pCcmIsR0FBV0EsRUFBUXlZLFFBQ25CNEMsRUFBaUJwRSxFQUFrQmpYLEVBQVF5WSxRQUczQzdULEVBQVMwVyxlQURPLE9BQWhCSCxFQUMwQixLQUdBLFNBQVV2VyxFQUFVNlQsR0FFMUMsSUFEQSxJQUFJdFgsRUFBTyxHQUNGckUsRUFBSyxFQUFHQSxFQUFLdUYsVUFBVXhGLE9BQVFDLElBQ3BDcUUsRUFBS3JFLEVBQUssR0FBS3VGLFVBQVV2RixHQUU3QixJQUFJcVMsRUFBVWhPLEVBQ1RoRixLQUFJLFNBQVVvZixHQUNmLEdBQVcsTUFBUEEsRUFDQSxPQUFPLEtBRU4sR0FBbUIsaUJBQVJBLEVBQ1osT0FBT0EsRUFFTixHQUFtQixpQkFBUkEsR0FBbUMsa0JBQVJBLEVBQ3ZDLE9BQU9BLEVBQUl0ZixXQUVWLEdBQUlzZixhQUFlOVQsTUFDcEIsT0FBTzhULEVBQUlwTSxRQUdYLElBQ0ksT0FBTzVQLEtBQUtDLFVBQVUrYixHQUUxQixNQUFPQyxHQUNILE9BQU8sU0FJZDFULFFBQU8sU0FBVXlULEdBQU8sT0FBT0EsS0FDL0JoZixLQUFLLEtBQ05rYyxJQUFVNEMsUUFBdURBLEVBQWlCelcsRUFBU2dULFdBQzNGdUQsRUFBWSxDQUNSMUMsTUFBT3pCLEVBQVN5QixHQUFPZ0QsY0FDdkJ0TSxRQUFTQSxFQUNUaE8sS0FBTUEsRUFDTjRTLEtBQU1uUCxFQUFTaEcsU0FNMUI5QixFQUFLLEVBQUc0ZSxFQUFjOUcsRUFBVzlYLEVBQUs0ZSxFQUFZN2UsT0FBUUMsSUFFL0RzZSxFQURlTSxFQUFZNWUsSUMrTTNCNmUsQ0FBa0JSLEVBQWFuYixJQWhML0JxYSxLQUFNLEtBQ051QixZQTNDUSxRQTRDUnZGLFNBQVUsQ0FDTjRFLGtCQUFtQkEsRUFDbkJyQixVQXlCUixTQUFtQmhiLFVBQ1J5YixFQUFLemIsSUF6QlI4YSxXQUFZQSxFQUNabUMsYUE4S1IsU0FBc0JyQixFQUFLNWIsR0FDdkIsTUFBYSxlQUFUQSxFQUNPLEtBRU1BLEtBckpyQixTQUFTNGIsRUFBSTViLEdBRVQsSUFBS3lSLEVBQVNnSyxFQURkemIsRUFBT0EsR0FBUSxHQUVYLE1BQU1pYSxFQUFjek4sT0FBTyxTQUF1QixDQUFFNE8sUUFBU3BiLElBRWpFLE9BQU95YixFQUFLemIsR0FrQ2hCLFNBQVNxYyxFQUFrQnRHLEdBQ3ZCLElBQUlhLEVBQUt0RyxFQUNMNE0sRUFBZ0JuSCxFQUFVL1YsS0FDOUIsR0FBSThhLEVBQVd6RSxJQUFJNkcsR0FFZixPQURBOUMsRUFBT1gsTUFBTSxzREFBd0R5RCxFQUFnQixLQUMzRCxXQUFuQm5ILEVBQVVaLEtBRVRvRyxFQUFVMkIsR0FDWixLQUlWLEdBRkFwQyxFQUFXelgsSUFBSTZaLEVBQWVuSCxHQUVQLFdBQW5CQSxFQUFVWixLQUFnQyxDQUUxQyxJQUFJZ0ksRUFBbUIsU0FBVUMsR0FHN0IsUUFGZSxJQUFYQSxJQUFxQkEsRUFBU3hCLEtBRUcsbUJBQTFCd0IsRUFBT0YsR0FHZCxNQUFNakQsRUFBY3pOLE9BQU8sdUJBQW1ELENBQzFFNE8sUUFBUzhCLElBS2pCLE9BQU9FLEVBQU9GLFdBR2FoZSxJQUEzQjZXLEVBQVVWLGNBQ1Z4RyxFQUFXc08sRUFBa0JwSCxFQUFVVixjQUczQ2tHLEVBQVUyQixHQUFpQkMsRUFHM0IzQixFQUFnQjViLFVBQVVzZCxHQUl0QixXQUVJLElBREEsSUFBSTNhLEVBQU8sR0FDRnJFLEVBQUssRUFBR0EsRUFBS3VGLFVBQVV4RixPQUFRQyxJQUNwQ3FFLEVBQUtyRSxHQUFNdUYsVUFBVXZGLEdBR3pCLE9BRGlCWixLQUFLMmQsWUFBWTdRLEtBQUs5TSxLQUFNNGYsR0FDM0J6YSxNQUFNbkYsS0FBTXlZLEVBQVVYLGtCQUFvQjdTLEVBQU8sS0FHL0UsSUFFSSxJQUFLLElBQUl1VSxFQUFLNUksRUFBU3JQLE9BQU80SixLQUFLZ1QsSUFBUXpFLEVBQUtGLEVBQUcxWCxRQUFTNFgsRUFBRzNYLEtBQU0yWCxFQUFLRixFQUFHMVgsT0FBUSxDQUNqRixJQUFJZ2MsRUFBVXBFLEVBQUcxWCxNQUNqQm1jLEVBQUtMLEdBQVNQLGNBQWM5RSxJQUdwQyxNQUFPb0IsR0FBU1AsRUFBTSxDQUFFelUsTUFBT2dWLEdBQy9CLFFBQ0ksSUFDUUgsSUFBT0EsRUFBRzNYLE9BQVNpUixFQUFLd0csRUFBR00sU0FBUzlHLEVBQUd6USxLQUFLaVgsR0FFcEQsUUFBVSxHQUFJRixFQUFLLE1BQU1BLEVBQUl6VSxPQUVqQyxNQUEwQixXQUFuQjRULEVBQVVaLEtBRVRvRyxFQUFVMkIsR0FDWixLQStDVixPQXZLQTNCLEVBQW1CLFFBQUlBLEVBRXZCMWMsT0FBT3NFLGVBQWVvWSxFQUFXLE9BQVEsQ0FDckNuWSxJQStDSixXQUVJLE9BQU92RSxPQUFPNEosS0FBS2dULEdBQU1sZSxLQUFJLFNBQVV5QyxHQUFRLE9BQU95YixFQUFLemIsU0E3Qi9ENGIsRUFBUyxJQUFJSixFQWdKTkQsRUEyQlM4QixDQUE0QmhELEdBYzVDLE9BYkFrQixFQUFVOUQsU0FBV2hMLEVBQVNBLEVBQVMsR0FBSThPLEVBQVU5RCxVQUFXLENBQUU2RCx3QkFBeUJBLEVBQ3ZGZ0MsZ0JBU0osU0FBeUIzSCxHQUNyQjlHLEVBQVcwTSxFQUFXNUYsSUFUdEJqRSxnQkFBaUJBLEVBQ2pCWCxhQUFjQSxFQUNkbEMsV0FBWUEsSUFTVDBNLEVBRUlELEdBa0JYaUMsRUFBdUMsV0FDdkMsU0FBU0EsRUFBc0J6SCxHQUMzQnhZLEtBQUt3WSxVQUFZQSxFQXFCckIsT0FqQkF5SCxFQUFzQjNkLFVBQVU0ZCxzQkFBd0IsV0FJcEQsT0FIZ0JsZ0IsS0FBS3dZLFVBQVVxQyxlQUkxQjVhLEtBQUksU0FBVXlhLEdBQ2YsR0FxQlosU0FBa0NBLEdBQzlCLElBQUlqQyxFQUFZaUMsRUFBU3RCLGVBQ3pCLE1BQWtGLGFBQTFFWCxhQUE2QyxFQUFTQSxFQUFVWixNQXZCNURzSSxDQUF5QnpGLEdBQVcsQ0FDcEMsSUFBSWhILEVBQVVnSCxFQUFTeEIsZUFDdkIsT0FBT3hGLEVBQVFnTCxRQUFVLElBQU1oTCxFQUFRM0ssUUFHdkMsT0FBTyxRQUdWNkMsUUFBTyxTQUFVd1UsR0FBYSxPQUFPQSxLQUNyQy9mLEtBQUssTUFFUDRmLEVBdkIrQixHQWdGMUMsR0g3RTJCLGlCQUFUek4sTUFBcUJBLEtBQUtBLE9BQVNBLFdHNkVoQjVRLElBQWxCNFEsS0FBS3VMLFNBQXdCLENBQzVDakIsRUFBT1IsS0FBSyxtSUFFWixJQUFJK0QsRUFBYTdOLEtBQUt1TCxTQUFTMkIsWUFDM0JXLEdBQWNBLEVBQVdDLFFBQVEsU0FBVyxHQUM1Q3hELEVBQU9SLEtBQUssc05BR3BCLElBQUk4QixFQUFnQkwsRUFBU0ssY0FJN0JMLEVBQVNLLGNBQWdCLFdBRXJCLElBREEsSUFBSW5aLEVBQU8sR0FDRnJFLEVBQUssRUFBR0EsRUFBS3VGLFVBQVV4RixPQUFRQyxJQUNwQ3FFLEVBQUtyRSxHQUFNdUYsVUFBVXZGLEdBUXpCLE9BSElxUixLQUNBNkssRUFBT1IsS0FBSywycEJBRVQ4QixFQUFjalosV0FBTXZELEVBQVdxRCxJQUUxQyxJQUFJc2IsR0FBYXhDLEdBbkRqQixTQUFnQ0EsRUFBVVUsR0FDdENWLEVBQVM1RCxTQUFTNEUsa0JBQWtCLElBQUlwSCxFQUFVLG1CQUFtQixTQUFVYSxHQUFhLE9BQU8sSUFBSXlILEVBQXNCekgsS0FBZSxZQUU1SXVGLEVBQVNRLGdCQUFnQjNCLEVBcmtCZixjQXNuQmQ0RCxHQS9DSXpDLEVBQVNRLGdCQUFnQixVQUFXLElBK0N4Q2lDLENBQXVCRCxJQUV2QixZQ3JvQkEsbUJBbkJXLFdBQ0csUUFrQjBCLE8sSUMyQnBDLEcsVUF2QkFFLEdBQWtCLFdBd0JsQkMsS0FBeUIsR0FBSyxJQUMzQiw2QkFBK0Qsa0RBQ2xFLEdBQUcsa0JBQXlDLDJDQUM1QyxHQUFHLDBCQUF5RCxtQ0FDNUQsR0FBRyxrQkFBeUMsNkZBQzVDLEdBQUcsZUFBbUMsa0RBQ3RDLEdBQUcsK0JBQW1FLDJFQUN0RSxJQUNBLEdBQWdCLElBQUlqTixFQTVCVixnQkFDSyxnQkEyQnlDaU4sSUFFNUQsU0FBU0MsR0FBYzliLEdBQ25CLE9BQVFBLGFBQWlCdU8sR0FDckJ2TyxFQUFNeU8sS0FBS3NOLFNBQVMsa0JBbUI1QixTQUFTQyxHQUF5QjdOLEdBRTlCLE1BQU84Tiw0REFEUzlOLEVBQUcrTixVQUN1QyxpQkFFOUQsU0FBU0MsR0FBaUNDLEdBQ3RDLE1BQU8sQ0FDSEMsTUFBT0QsRUFBU0MsTUFDaEJDLGNBQWUsRUFDZkMsV0EyRG1DQyxFQTNEVUosRUFBU0csVUE2RG5ERSxPQUFPRCxFQUFrQmxkLFFBQVEsSUFBSyxTQTVEekNvZCxhQUFjL1AsS0FBS21LLE9BMEQzQixJQUEyQzBGLEVBdkQzQyxTQUFTRyxHQUFxQkMsRUFBYVIsR0FDdkMsT0FBTzFSLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJMGhCLEVBQWNDLEVBQ2xCLE9BQU81UixFQUFZL1AsTUFBTSxTQUFVZ1QsR0FDL0IsT0FBUUEsRUFBRzVDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhNlEsRUFBU1csUUFDdEMsS0FBSyxFQUdELE9BRkFGLEVBQWUxTyxFQUFHM0MsT0FDbEJzUixFQUFZRCxFQUFhN2MsTUFDbEIsQ0FBQyxFQUFjLEdBQWNxSyxPQUFPLGlCQUF1QyxDQUMxRXVTLFlBQWFBLEVBQ2JJLFdBQVlGLEVBQVVyTyxLQUN0QndPLGNBQWVILEVBQVUxTyxRQUN6QjhPLGFBQWNKLEVBQVVLLGlCQU1wRCxTQUFTQyxHQUFXalAsR0FDaEIsSUFBSWtQLEVBQVNsUCxFQUFHa1AsT0FDaEIsT0FBTyxJQUFJQyxRQUFRLENBQ2YsZUFBZ0IsbUJBQ2hCQyxPQUFRLG1CQUNSLGlCQUFrQkYsSUFHMUIsU0FBU0csR0FBbUJDLEVBQVd0UCxHQUNuQyxJQUFJdVAsRUFBZXZQLEVBQUd1UCxhQUNsQkMsRUFBVVAsR0FBV0ssR0FFekIsT0FEQUUsRUFBUUMsT0FBTyxnQkE2Qm5CLFNBQWdDRixHQUM1QixNQUFPRyxVQUE4QkgsRUE5QkxJLENBQXVCSixJQUNoREMsRUFPWCxTQUFTSSxHQUFtQi9MLEdBQ3hCLE9BQU90SCxFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSTJFLEVBQ0osT0FBT29MLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWF5RyxLQUM3QixLQUFLLEVBRUQsT0FEQWxTLEVBQVNxTyxFQUFHM0MsUUFDRDJSLFFBQVUsS0FBT3JkLEVBQU9xZCxPQUFTLElBRWpDLENBQUMsRUFBY25MLEtBRW5CLENBQUMsRUFBY2xTLFVBNkIxQyxTQUFTa2UsR0FBMEJQLEVBQVd0UCxHQUMxQyxJQUFJOFAsRUFBTTlQLEVBQUc4UCxJQUNiLE9BQU92VCxFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSStpQixFQUFVUCxFQUFTeFMsRUFBTTFMLEVBQVMyYyxFQUFVK0IsRUFDaEQsT0FBT2pULEVBQVkvUCxNQUFNLFNBQVV3WixHQUMvQixPQUFRQSxFQUFHcEosT0FDUCxLQUFLLEVBY0QsT0FiQTJTLEVBQVdsQyxHQUF5QnlCLEdBQ3BDRSxFQUFVUCxHQUFXSyxHQUNyQnRTLEVBQU8sQ0FDSDhTLElBQUtBLEVBQ0xHLFlBNUpJLFNBNkpKQyxNQUFPWixFQUFVWSxNQUNqQjdDLFdBQVlJLElBRWhCbmMsRUFBVSxDQUNOVSxPQUFRLE9BQ1J3ZCxRQUFTQSxFQUNUeFMsS0FBTTNNLEtBQUtDLFVBQVUwTSxJQUVsQixDQUFDLEVBQWE0UyxJQUFtQixXQUFjLE9BQU9PLE1BQU1KLEVBQVV6ZSxPQUNqRixLQUFLLEVBRUQsT0FEQTJjLEVBQVd6SCxFQUFHbkosUUFDQStTLEdBQ1AsQ0FBQyxFQUFhbkMsRUFBU1csUUFETCxDQUFDLEVBQWEsR0FFM0MsS0FBSyxFQVFELE1BQU8sQ0FBQyxFQU5zQixDQUMxQmtCLEtBRkpFLEVBQWdCeEosRUFBR25KLFFBRUl5UyxLQUFPQSxFQUMxQk8sbUJBQW9CLEVBQ3BCZCxhQUFjUyxFQUFjVCxhQUM1QmUsVUFBV3RDLEdBQWlDZ0MsRUFBY00sYUFHbEUsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhOUIsR0FBcUIsc0JBQXVCUCxJQUN6RSxLQUFLLEVBQUcsTUFBTXpILEVBQUduSixjQXVCakMsU0FBU2tULEdBQU1DLEdBQ1gsT0FBTyxJQUFJamYsU0FBUSxTQUFVQyxHQUN6QmlmLFdBQVdqZixFQUFTZ2YsTUF5QzVCLElBQUlFLEdBQW9CLG9CQU14QixTQUFTQyxLQUNMLElBR0ksSUFBSUMsRUFBZSxJQUFJQyxXQUFXLEtBQ25CclIsS0FBS3NSLFFBQVV0UixLQUFLdVIsVUFDMUJDLGdCQUFnQkosR0FFekJBLEVBQWEsR0FBSyxJQUFPQSxFQUFhLEdBQUssR0FDM0MsSUFBSWQsRUFTWixTQUFnQmMsR0FJWixPQWpEMkJLLEVBOENXTCxFQTdDNUIzZ0IsS0FBS2lSLE9BQU9nUSxhQUFhL2UsTUFBTStPLE9BQVFqRCxFQUFTZ1QsS0FDL0M5ZixRQUFRLE1BQU8sS0FBS0EsUUFBUSxNQUFPLE1BK0M3QmdnQixPQUFPLEVBQUcsSUFqRC9CLElBQStCRixFQW9DYkcsQ0FBT1IsR0FDakIsT0FBT0YsR0FBa0I5Z0IsS0FBS2tnQixHQUFPQSxFQWYzQixHQWlCZCxNQUFPOVAsR0FFSCxNQW5CVSxJQStDbEIsU0FBU3FSLEdBQU8vQixHQUNaLE9BQU9BLEVBQVV4RSxRQUFVLElBQU13RSxFQUFVWSxNQW1CL0MsSUFBSW9CLEdBQXFCLElBQUkzTCxJQUs3QixTQUFTNEwsR0FBV2pDLEVBQVdRLEdBQzNCLElBQUkxWCxFQUFNaVosR0FBTy9CLEdBQ2pCa0MsR0FBdUJwWixFQUFLMFgsR0FnRGhDLFNBQTRCMVgsRUFBSzBYLEdBQzdCLElBQUkyQixFQUFVQyxLQUNWRCxHQUNBQSxFQUFRRSxZQUFZLENBQUV2WixJQUFLQSxFQUFLMFgsSUFBS0EsSUFFekM4QixLQXBEQUMsQ0FBbUJ6WixFQUFLMFgsR0EyQjVCLFNBQVMwQixHQUF1QnBaLEVBQUswWCxHQUNqQyxJQUFJeEosRUFBS3RHLEVBQ0w4UixFQUFZUixHQUFtQnhlLElBQUlzRixHQUN2QyxHQUFLMFosRUFHTCxJQUNJLElBQUssSUFBSUMsRUFBY25VLEVBQVNrVSxHQUFZRSxFQUFnQkQsRUFBWWpqQixRQUFTa2pCLEVBQWNqakIsS0FBTWlqQixFQUFnQkQsRUFBWWpqQixRQUU3SHVHLEVBRGUyYyxFQUFjaGpCLE9BQ3BCOGdCLEdBR2pCLE1BQU9qSixHQUFTUCxFQUFNLENBQUV6VSxNQUFPZ1YsR0FDL0IsUUFDSSxJQUNRbUwsSUFBa0JBLEVBQWNqakIsT0FBU2lSLEVBQUsrUixFQUFZakwsU0FBUzlHLEVBQUd6USxLQUFLd2lCLEdBRW5GLFFBQVUsR0FBSXpMLEVBQUssTUFBTUEsRUFBSXpVLFFBVXJDLElBQUlvZ0IsR0FBbUIsS0FFdkIsU0FBU1AsS0FPTCxPQU5LTyxJQUFvQixxQkFBc0J6UyxRQUMzQ3lTLEdBQW1CLElBQUlDLGlCQUFpQiwwQkFDdkJDLFVBQVksU0FBVW5iLEdBQ25Dd2EsR0FBdUJ4YSxFQUFFekcsS0FBSzZILElBQUtwQixFQUFFekcsS0FBS3VmLE9BRzNDbUMsR0FFWCxTQUFTTCxLQUMyQixJQUE1Qk4sR0FBbUJjLE1BQWNILEtBQ2pDQSxHQUFpQm5TLFFBQ2pCbVMsR0FBbUIsTUFvQjNCLElBKzFCK0J2YyxHQTcxQjNCMmMsR0FBb0IsK0JBQ3BCQyxHQUFZLEtBQ2hCLFNBQVNDLEtBY0wsT0FiS0QsS0FDREEsSUFBWSxLQUFBeGMsUUFOQSxrQ0FDRyxHQUtxQyxTQUFVMGMsR0FNMUQsT0FBUUEsRUFBVWplLFlBQ2QsS0FBSyxFQUNEaWUsRUFBVXRkLGtCQUFrQm1kLFNBSXJDQyxHQUdYLFNBQVN2ZixHQUFJdWMsRUFBV3RnQixHQUNwQixPQUFPdU4sRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlvTCxFQUFLOUQsRUFBSW1lLEVBQUl6ZCxFQUFhMGQsRUFDOUIsT0FBTzNWLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBRUQsT0FEQWhGLEVBQU1pWixHQUFPL0IsR0FDTixDQUFDLEVBQWFpRCxNQUN6QixLQUFLLEVBSUQsT0FIQWplLEVBQUswTCxFQUFHM0MsT0FDUm9WLEVBQUtuZSxFQUFHRSxZQUFZNmQsR0FBbUIsYUFFaEMsQ0FBQyxHQURScmQsRUFBY3lkLEVBQUd6ZCxZQUFZcWQsS0FDSXZmLElBQUlzRixJQUN6QyxLQUFLLEVBRUQsT0FEQXNhLEVBQVcxUyxFQUFHM0MsT0FDUCxDQUFDLEVBQWFySSxFQUFZMmQsSUFBSTNqQixFQUFPb0osSUFDaEQsS0FBSyxFQUVELE9BREE0SCxFQUFHM0MsT0FDSSxDQUFDLEVBQWFvVixFQUFHdmUsVUFDNUIsS0FBSyxFQUtELE9BSkE4TCxFQUFHM0MsT0FDRXFWLEdBQVlBLEVBQVM1QyxNQUFROWdCLEVBQU04Z0IsS0FDcEN5QixHQUFXakMsRUFBV3RnQixFQUFNOGdCLEtBRXpCLENBQUMsRUFBYzlnQixVQU0xQyxTQUFTK0osR0FBT3VXLEdBQ1osT0FBTy9TLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJb0wsRUFBSzlELEVBQUltZSxFQUNiLE9BQU8xVixFQUFZL1AsTUFBTSxTQUFVZ1QsR0FDL0IsT0FBUUEsRUFBRzVDLE9BQ1AsS0FBSyxFQUVELE9BREFoRixFQUFNaVosR0FBTy9CLEdBQ04sQ0FBQyxFQUFhaUQsTUFDekIsS0FBSyxFQUdELE9BRkFqZSxFQUFLMEwsRUFBRzNDLE9BRUQsQ0FBQyxHQURSb1YsRUFBS25lLEVBQUdFLFlBQVk2ZCxHQUFtQixjQUNmcmQsWUFBWXFkLElBQW1CckwsT0FBTzVPLElBQ2xFLEtBQUssRUFFRCxPQURBNEgsRUFBRzNDLE9BQ0ksQ0FBQyxFQUFhb1YsRUFBR3ZlLFVBQzVCLEtBQUssRUFFRCxPQURBOEwsRUFBRzNDLE9BQ0ksQ0FBQyxVQVc1QixTQUFTekQsR0FBTzBWLEVBQVdzRCxHQUN2QixPQUFPclcsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlvTCxFQUFLOUQsRUFBSW1lLEVBQUk1ZSxFQUFPNmUsRUFBVUcsRUFDbEMsT0FBTzlWLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBRUQsT0FEQWhGLEVBQU1pWixHQUFPL0IsR0FDTixDQUFDLEVBQWFpRCxNQUN6QixLQUFLLEVBSUQsT0FIQWplLEVBQUswTCxFQUFHM0MsT0FDUm9WLEVBQUtuZSxFQUFHRSxZQUFZNmQsR0FBbUIsYUFFaEMsQ0FBQyxHQURSeGUsRUFBUTRlLEVBQUd6ZCxZQUFZcWQsS0FDSXZmLElBQUlzRixJQUNuQyxLQUFLLEVBR0QsT0FGQXNhLEVBQVcxUyxFQUFHM0MsWUFFS3pPLEtBRG5CaWtCLEVBQVdELEVBQVNGLElBQ2tCLENBQUMsRUFBYSxHQUM3QyxDQUFDLEVBQWE3ZSxFQUFNbVQsT0FBTzVPLElBQ3RDLEtBQUssRUFFRCxPQURBNEgsRUFBRzNDLE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYXhKLEVBQU04ZSxJQUFJRSxFQUFVemEsSUFDakQsS0FBSyxFQUNENEgsRUFBRzNDLE9BQ0gyQyxFQUFHNUMsTUFBUSxFQUNmLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYXFWLEVBQUd2ZSxVQUNoQyxLQUFLLEVBS0QsT0FKQThMLEVBQUczQyxRQUNDd1YsR0FBY0gsR0FBWUEsRUFBUzVDLE1BQVErQyxFQUFTL0MsS0FDcER5QixHQUFXakMsRUFBV3VELEVBQVMvQyxLQUU1QixDQUFDLEVBQWMrQyxVQTBCMUMsU0FBU0MsR0FBcUJ4RCxHQUMxQixPQUFPL1MsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUkrbEIsRUFBcUJDLEVBQ3JCaFQsRUFDSixPQUFPakQsRUFBWS9QLE1BQU0sU0FBVXdaLEdBQy9CLE9BQVFBLEVBQUdwSixPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYXhELEdBQU8wVixHQUFXLFNBQVUyRCxHQUNqRCxJQUFJRCxFQXlCNUIsU0FBeUNDLEdBS3JDLE9BQU9DLEdBSktELEdBQVksQ0FDcEJuRCxJQUFLYSxLQUNMTixtQkFBb0IsSUE1Qm9COEMsQ0FBZ0NGLEdBQ3BERyxFQXNDNUIsU0FBd0M5RCxFQUFXMEQsR0FDL0MsR0FBNkMsSUFBekNBLEVBQWtCM0MsbUJBQTRDLENBQzlELElBQUtyUixVQUFVcVUsT0FHWCxNQUFPLENBQ0hMLGtCQUFtQkEsRUFDbkJELG9CQUgrQnhoQixRQUFRRSxPQUFPLEdBQWN5SyxPQUFPLGlCQU8zRSxJQUFJb1gsRUFBa0IsQ0FDbEJ4RCxJQUFLa0QsRUFBa0JsRCxJQUN2Qk8sbUJBQW9CLEVBQ3BCa0QsaUJBQWtCL1UsS0FBS21LLE9BRzNCLE1BQU8sQ0FBRXFLLGtCQUFtQk0sRUFBaUJQLG9CQWFyRCxTQUE4QnpELEVBQVcwRCxHQUNyQyxPQUFPelcsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUl3bUIsRUFBNkJsTixFQUNqQyxPQUFPdkosRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFFRCxPQURBNEMsRUFBRzFDLEtBQUs3USxLQUFLLENBQUMsRUFBRyxFQUFHLENBQUUsSUFDZixDQUFDLEVBQWFvakIsR0FBMEJQLEVBQVcwRCxJQUM5RCxLQUFLLEVBRUQsT0FEQVEsRUFBOEJ4VCxFQUFHM0MsT0FDMUIsQ0FBQyxFQUFjdEssR0FBSXVjLEVBQVdrRSxJQUN6QyxLQUFLLEVBRUQsT0FBTTdGLEdBRE5ySCxFQUFNdEcsRUFBRzNDLFNBQ2lELE1BQTlCaUosRUFBSS9GLFdBQVdzTyxXQUdwQyxDQUFDLEVBQWE5VixHQUFPdVcsSUFIMkMsQ0FBQyxFQUFhLEdBSXpGLEtBQUssRUFJRCxPQURBdFAsRUFBRzNDLE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFFTCxNQUFPLENBQUMsRUFBYXRLLEdBQUl1YyxFQUFXLENBQzVCUSxJQUFLa0QsRUFBa0JsRCxJQUN2Qk8sbUJBQW9CLEtBRTVCLEtBQUssRUFFRHJRLEVBQUczQyxPQUNIMkMsRUFBRzVDLE1BQVEsRUFDZixLQUFLLEVBQUcsTUFBTWtKLEVBQ2QsS0FBSyxFQUFHLE1BQU8sQ0FBQyxVQS9DRW1OLENBQXFCbkUsRUFBV2dFLElBR3pELE9BQTZDLElBQXpDTixFQUFrQjNDLG1CQUNoQixDQUNIMkMsa0JBQW1CQSxFQUNuQkQsb0JBQXFCVyxHQUF5QnBFLElBSTNDLENBQUUwRCxrQkFBbUJBLEdBaEVXVyxDQUErQnJFLEVBQVcwRCxHQUVqRSxPQURBRCxFQUFzQkssRUFBaUJMLG9CQUNoQ0ssRUFBaUJKLHNCQUVoQyxLQUFLLEVBRUQsTUF6VEYsTUF3VEVBLEVBQW9CeE0sRUFBR25KLFFBQ0N5UyxJQUE2QixDQUFDLEVBQWEsSUFDbkU5UCxFQUFLLEdBQ0UsQ0FBQyxFQUFhK1MsSUFDekIsS0FBSyxFQUVMLE1BQU8sQ0FBQyxHQUFlL1MsRUFBR2dULGtCQUFvQnhNLEVBQUduSixPQUFRMkMsSUFDekQsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFjLENBQ3RCZ1Qsa0JBQW1CQSxFQUNuQkQsb0JBQXFCQSxXQTZGN0MsU0FBU1csR0FBeUJwRSxHQUM5QixPQUFPL1MsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUk0bUIsRUFBTzVULEVBQUlnVCxFQUFtQkQsRUFDbEMsT0FBT2hXLEVBQVkvUCxNQUFNLFNBQVV3WixHQUMvQixPQUFRQSxFQUFHcEosT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWF5VyxHQUEwQnZFLElBQ3ZELEtBQUssRUFDRHNFLEVBQVFwTixFQUFHbkosT0FDWG1KLEVBQUdwSixNQUFRLEVBQ2YsS0FBSyxFQUNELE9BQW1DLElBQTdCd1csRUFBTXZELG1CQUFvRCxDQUFDLEVBQWEsR0FFdkUsQ0FBQyxFQUFhRSxHQUFNLE1BQy9CLEtBQUssRUFHRCxPQURBL0osRUFBR25KLE9BQ0ksQ0FBQyxFQUFhd1csR0FBMEJ2RSxJQUNuRCxLQUFLLEVBRUQsT0FEQXNFLEVBQVFwTixFQUFHbkosT0FDSixDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUNELE9BQW1DLElBQTdCdVcsRUFBTXZELG1CQUFvRCxDQUFDLEVBQWEsR0FDdkUsQ0FBQyxFQUFheUMsR0FBcUJ4RCxJQUM5QyxLQUFLLEVBRUQsT0FEQXRQLEVBQUt3RyxFQUFHbkosT0FBUTJWLEVBQW9CaFQsRUFBR2dULG1CQUFtQkQsRUFBc0IvUyxFQUFHK1MscUJBRXhFLENBQUMsRUFBY0EsR0FJZixDQUFDLEVBQWNDLEdBRTlCLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBY1ksVUFhOUMsU0FBU0MsR0FBMEJ2RSxHQUMvQixPQUFPMVYsR0FBTzBWLEdBQVcsU0FBVTJELEdBQy9CLElBQUtBLEVBQ0QsTUFBTSxHQUFjL1csT0FBTywwQkFFL0IsT0FBT2dYLEdBQXFCRCxNQUdwQyxTQUFTQyxHQUFxQlUsR0FDMUIsT0FTaUQsS0FEYlosRUFSRFksR0FTVHZELG9CQUN0QjJDLEVBQWtCTyxpQkF2dEJELElBdXRCeUMvVSxLQUFLbUssTUFUeEQsQ0FDSG1ILElBQUs4RCxFQUFNOUQsSUFDWE8sbUJBQW9CLEdBR3JCdUQsRUFFWCxJQUF3Q1osRUFxQnhDLFNBQVNjLEdBQXlCOVQsRUFBSWdULEdBQ2xDLElBQUkxRCxFQUFZdFAsRUFBR3NQLFVBQVd5RSxFQUF5Qi9ULEVBQUcrVCx1QkFDMUQsT0FBT3hYLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJK2lCLEVBQVVQLEVBQVN3RSxFQUFnQmhYLEVBQU0xTCxFQUFTMmMsRUFDdEQsT0FBT2xSLEVBQVkvUCxNQUFNLFNBQVV3WixHQUMvQixPQUFRQSxFQUFHcEosT0FDUCxLQUFLLEVBbUJELE9BbEJBMlMsRUFpQ3BCLFNBQXNDVCxFQUFXdFAsR0FDN0MsSUFBSThQLEVBQU05UCxFQUFHOFAsSUFDYixPQUFPakMsR0FBeUJ5QixHQUFhLElBQU1RLEVBQU0sdUJBbkM5Qm1FLENBQTZCM0UsRUFBVzBELEdBQ25EeEQsRUFBVUgsR0FBbUJDLEVBQVcwRCxJQUN4Q2dCLEVBQWlCRCxFQUF1QjdOLGFBQWEsQ0FDakRDLFVBQVUsTUFHVnFKLEVBQVFDLE9BQU8sb0JBQXFCdUUsRUFBZTlHLHlCQUV2RGxRLEVBQU8sQ0FDSGtYLGFBQWMsQ0FDVjdHLFdBQVlJLEtBR3BCbmMsRUFBVSxDQUNOVSxPQUFRLE9BQ1J3ZCxRQUFTQSxFQUNUeFMsS0FBTTNNLEtBQUtDLFVBQVUwTSxJQUVsQixDQUFDLEVBQWE0UyxJQUFtQixXQUFjLE9BQU9PLE1BQU1KLEVBQVV6ZSxPQUNqRixLQUFLLEVBRUQsT0FEQTJjLEVBQVd6SCxFQUFHbkosUUFDQStTLEdBQ1AsQ0FBQyxFQUFhbkMsRUFBU1csUUFETCxDQUFDLEVBQWEsR0FFM0MsS0FBSyxFQUdELE1BQU8sQ0FBQyxFQURhWixHQURMeEgsRUFBR25KLFNBR3ZCLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYW1SLEdBQXFCLHNCQUF1QlAsSUFDekUsS0FBSyxFQUFHLE1BQU16SCxFQUFHbkosY0FnQ2pDLFNBQVM4VyxHQUFpQkMsRUFBY0MsR0FFcEMsWUFEcUIsSUFBakJBLElBQTJCQSxHQUFlLEdBQ3ZDOVgsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlzbkIsRUFBY1YsRUFBa0I1VCxFQUNwQyxPQUFPakQsRUFBWS9QLE1BQU0sU0FBVXdaLEdBQy9CLE9BQVFBLEVBQUdwSixPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYXhELEdBQU93YSxFQUFhOUUsV0FBVyxTQUFVMkQsR0FDOUQsSUFBS3NCLEdBQWtCdEIsR0FDbkIsTUFBTSxHQUFjL1csT0FBTyxrQkFFL0IsSUEySUVvVSxFQTNJRWtFLEVBQWV2QixFQUFTM0MsVUFDNUIsSUFBSytELElBMklXLEtBRGQvRCxFQTFJb0NrRSxHQTJJeENyRyxnQkFHdEIsU0FBNEJtQyxHQUN4QixJQUFJM0gsRUFBTW5LLEtBQUttSyxNQUNmLE9BQVFBLEVBQU0ySCxFQUFVL0IsY0FDcEIrQixFQUFVL0IsYUFBZStCLEVBQVVsQyxVQUFZekYsRUFyOEJ6QixLQWc4QnJCOEwsQ0FBbUJuRSxJQTFJQSxPQUFPMkMsRUFFTixHQUFtQyxJQUEvQnVCLEVBQWFyRyxjQUdsQixPQURBbUcsRUFvQzVCLFNBQW1DRixFQUFjQyxHQUM3QyxPQUFPOVgsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUk0bUIsRUFBT3RELEVBQ1gsT0FBT3ZULEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWFzWCxHQUF1Qk4sRUFBYTlFLFlBQ2pFLEtBQUssRUFDRHNFLEVBQVE1VCxFQUFHM0MsT0FDWDJDLEVBQUc1QyxNQUFRLEVBQ2YsS0FBSyxFQUNELE9BQXdDLElBQWxDd1csRUFBTXRELFVBQVVuQyxjQUErQyxDQUFDLEVBQWEsR0FFNUUsQ0FBQyxFQUFhb0MsR0FBTSxNQUMvQixLQUFLLEVBR0QsT0FEQXZRLEVBQUczQyxPQUNJLENBQUMsRUFBYXFYLEdBQXVCTixFQUFhOUUsWUFDN0QsS0FBSyxFQUVELE9BREFzRSxFQUFRNVQsRUFBRzNDLE9BQ0osQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFFRCxPQUFnQyxLQURoQ2lULEVBQVlzRCxFQUFNdEQsV0FDSm5DLGNBRUgsQ0FBQyxFQUFjZ0csR0FBaUJDLEVBQWNDLElBRzlDLENBQUMsRUFBYy9ELFVBL0RIcUUsQ0FBMEJQLEVBQWNDLEdBQ2hEcEIsRUFJUCxJQUFLalUsVUFBVXFVLE9BQ1gsTUFBTSxHQUFjblgsT0FBTyxlQUUvQixJQUFJb1gsRUFzSWhDLFNBQTZDTCxHQUN6QyxJQUFJMkIsRUFBc0IsQ0FDdEJ6RyxjQUFlLEVBQ2YwRyxZQUFhclcsS0FBS21LLE9BRXRCLE9BQU94TSxFQUFTQSxFQUFTLEdBQUk4VyxHQUFXLENBQUUzQyxVQUFXc0UsSUEzSVBFLENBQW9DN0IsR0FFMUQsT0FEQXFCLEVBZ0Y1QixTQUFrQ0YsRUFBY3BCLEdBQzVDLE9BQU96VyxFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSXNqQixFQUFxQ2hLLEVBQUt5TyxFQUM5QyxPQUFPaFksRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFFRCxPQURBNEMsRUFBRzFDLEtBQUs3USxLQUFLLENBQUMsRUFBRyxFQUFHLENBQUUsSUFDZixDQUFDLEVBQWFxbkIsR0FBeUJNLEVBQWNwQixJQUNoRSxLQUFLLEVBR0QsT0FGQTFDLEVBQVl0USxFQUFHM0MsT0FDZjBYLEVBQTJCNVksRUFBU0EsRUFBUyxHQUFJNlcsR0FBb0IsQ0FBRTFDLFVBQVdBLElBQzNFLENBQUMsRUFBYXZkLEdBQUlxaEIsRUFBYTlFLFVBQVd5RixJQUNyRCxLQUFLLEVBRUQsT0FEQS9VLEVBQUczQyxPQUNJLENBQUMsRUFBY2lULEdBQzFCLEtBQUssRUFFRCxPQUFNM0MsR0FETnJILEVBQU10RyxFQUFHM0MsU0FFMEIsTUFBOUJpSixFQUFJL0YsV0FBV3NPLFlBQW9ELE1BQTlCdkksRUFBSS9GLFdBQVdzTyxXQUE2QixDQUFDLEVBQWEsR0FHN0YsQ0FBQyxFQUFhOVYsR0FBT3FiLEVBQWE5RSxZQUM3QyxLQUFLLEVBSUQsT0FEQXRQLEVBQUczQyxPQUNJLENBQUMsRUFBYSxHQUN6QixLQUFLLEVBRUQsT0FEQTBYLEVBQTJCNVksRUFBU0EsRUFBUyxHQUFJNlcsR0FBb0IsQ0FBRTFDLFVBQVcsQ0FBRW5DLGNBQWUsS0FDNUYsQ0FBQyxFQUFhcGIsR0FBSXFoQixFQUFhOUUsVUFBV3lGLElBQ3JELEtBQUssRUFDRC9VLEVBQUczQyxPQUNIMkMsRUFBRzVDLE1BQVEsRUFDZixLQUFLLEVBQUcsTUFBTWtKLEVBQ2QsS0FBSyxFQUFHLE1BQU8sQ0FBQyxVQWxIVzBPLENBQXlCWixFQUFjZCxHQUMvQ0EsTUFHbkIsS0FBSyxFQUVELE9BREFNLEVBQVFwTixFQUFHbkosT0FDTmlYLEVBQ0UsQ0FBQyxFQUFhQSxHQURLLENBQUMsRUFBYSxHQUU1QyxLQUFLLEVBRUQsT0FEQXRVLEVBQUt3RyxFQUFHbkosT0FDRCxDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUNEMkMsRUFBSzRULEVBQU10RCxVQUNYOUosRUFBR3BKLE1BQVEsRUFDZixLQUFLLEVBRUQsTUFBTyxDQUFDLEVBREk0QyxVQXFEaEMsU0FBUzBVLEdBQXVCcEYsR0FDNUIsT0FBTzFWLEdBQU8wVixHQUFXLFNBQVUyRCxHQUMvQixJQUFLc0IsR0FBa0J0QixHQUNuQixNQUFNLEdBQWMvVyxPQUFPLGtCQUUvQixJQW1FNkJvVSxFQWxFN0IsT0FtRWdDLEtBREhBLEVBbkVWMkMsRUFBUzNDLFdBb0VkbkMsZUFDZG1DLEVBQVV1RSxZQXI5Qk8sSUFxOUI0QnJXLEtBQUttSyxNQW5FdkN4TSxFQUFTQSxFQUFTLEdBQUk4VyxHQUFXLENBQUUzQyxVQUFXLENBQUVuQyxjQUFlLEtBRW5FOEUsS0EwQ2YsU0FBU3NCLEdBQWtCdkIsR0FDdkIsWUFBOEJwa0IsSUFBdEJva0IsR0FDcUMsSUFBekNBLEVBQWtCM0MsbUJBK0YxQixTQUFTNEUsR0FBaUMzRixHQUN0QyxPQUFPL1MsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUkrbEIsRUFDSixPQUFPaFcsRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYTBWLEdBQXFCeEQsSUFDbEQsS0FBSyxFQUVELE9BREF5RCxFQUF1Qi9TLEVBQUczQyxPQUFRMFYscUJBRzNCLENBQUMsRUFBYUEsR0FGWSxDQUFDLEVBQWEsR0FHbkQsS0FBSyxFQUVEL1MsRUFBRzNDLE9BQ0gyQyxFQUFHNUMsTUFBUSxFQUNmLEtBQUssRUFBRyxNQUFPLENBQUMsVUFzQmhDLFNBQVM4WCxHQUEwQjVGLEVBQVcwRCxHQUMxQyxPQUFPelcsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUkraUIsRUFBVVAsRUFBU2xlLEVBQVMyYyxFQUNoQyxPQUFPbFIsRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFPRCxPQU5BMlMsRUFpQnBCLFNBQTJCVCxFQUFXdFAsR0FDbEMsSUFBSThQLEVBQU05UCxFQUFHOFAsSUFDYixPQUFPakMsR0FBeUJ5QixHQUFhLElBQU1RLEVBbkJ4QnFGLENBQWtCN0YsRUFBVzBELEdBQ3hDeEQsRUFBVUgsR0FBbUJDLEVBQVcwRCxHQUN4QzFoQixFQUFVLENBQ05VLE9BQVEsU0FDUndkLFFBQVNBLEdBRU4sQ0FBQyxFQUFhSSxJQUFtQixXQUFjLE9BQU9PLE1BQU1KLEVBQVV6ZSxPQUNqRixLQUFLLEVBRUQsT0FEQTJjLEVBQVdqTyxFQUFHM0MsUUFDQytTLEdBQVcsQ0FBQyxFQUFhLEdBQ2pDLENBQUMsRUFBYTVCLEdBQXFCLHNCQUF1QlAsSUFDckUsS0FBSyxFQUFHLE1BQU1qTyxFQUFHM0MsT0FDakIsS0FBSyxFQUFHLE1BQU8sQ0FBQyxVQStJaEMsU0FBUytYLEdBQXFCQyxHQUMxQixPQUFPLEdBQWNuWixPQUFPLDRCQUE2RCxDQUNyRm1aLFVBQVdBLEtBb0JZM2YsR0EwQlQsSUF4QlR5UixTQUFTNEUsa0JBQWtCLElBQUlwSCxFQURoQixpQkFDNkMsU0FBVWEsR0FDM0UsSUFBSThGLEVBQU05RixFQUFVbUMsWUFBWSxPQUFPekIsZUFJbkNrTyxFQUFlLENBQ2Y5RSxVQWxFWixTQUEwQmhFLEdBQ3RCLElBQUloRixFQUFLdEcsRUFDVCxJQUFLc0wsSUFBUUEsRUFBSXhhLFFBQ2IsTUFBTXNrQixHQUFxQixxQkFFL0IsSUFBSzlKLEVBQUk1YixLQUNMLE1BQU0wbEIsR0FBcUIsWUFRL0IsSUFDSSxJQUFLLElBQUlFLEVBQWUxWCxFQU5YLENBQ2IsWUFDQSxTQUNBLFVBRzhDMlgsRUFBaUJELEVBQWF4bUIsUUFBU3ltQixFQUFleG1CLEtBQU13bUIsRUFBaUJELEVBQWF4bUIsT0FBUSxDQUM1SSxJQUFJMG1CLEVBQVVELEVBQWV2bUIsTUFDN0IsSUFBS3NjLEVBQUl4YSxRQUFRMGtCLEdBQ2IsTUFBTUosR0FBcUJJLElBSXZDLE1BQU8zTyxHQUFTUCxFQUFNLENBQUV6VSxNQUFPZ1YsR0FDL0IsUUFDSSxJQUNRME8sSUFBbUJBLEVBQWV4bUIsT0FBU2lSLEVBQUtzVixFQUFheE8sU0FBUzlHLEVBQUd6USxLQUFLK2xCLEdBRXRGLFFBQVUsR0FBSWhQLEVBQUssTUFBTUEsRUFBSXpVLE9BRWpDLE1BQU8sQ0FDSGlaLFFBQVNRLEVBQUk1YixLQUNicWUsVUFBV3pDLEVBQUl4YSxRQUFRaWQsVUFDdkJtQixPQUFRNUQsRUFBSXhhLFFBQVFvZSxPQUNwQmdCLE1BQU81RSxFQUFJeGEsUUFBUW9mLE9BOEJIdUYsQ0FBaUJuSyxHQUk3QnlJLHVCQUh5QnZPLEVBQVVtQyxZQUFZLG9CQWdCbkQsTUFYb0IsQ0FDaEIyRCxJQUFLQSxFQUNMb0ssTUFBTyxXQUFjLE9BaFNqQyxTQUFldEIsR0FDWCxPQUFPN1gsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlnVCxFQUFJZ1QsRUFBbUJELEVBQzNCLE9BQU9oVyxFQUFZL1AsTUFBTSxTQUFVd1osR0FDL0IsT0FBUUEsRUFBR3BKLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhMFYsR0FBcUJzQixFQUFhOUUsWUFDL0QsS0FBSyxFQVVELE9BVEF0UCxFQUFLd0csRUFBR25KLE9BQVEyVixFQUFvQmhULEVBQUdnVCxtQkFBbUJELEVBQXNCL1MsRUFBRytTLHFCQUUvRUEsRUFBb0JqVSxNQUFNaUYsUUFBUWxTLE9BS2xDc2lCLEdBQWlCQyxHQUFjdFYsTUFBTWlGLFFBQVFsUyxPQUUxQyxDQUFDLEVBQWNtaEIsRUFBa0JsRCxZQWdScEI0RixDQUFNdEIsSUFDbEN1QixTQUFVLFNBQVV0QixHQUNoQixPQTVQaEIsU0FBa0JELEVBQWNDLEdBRTVCLFlBRHFCLElBQWpCQSxJQUEyQkEsR0FBZSxHQUN2QzlYLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUVuQyxPQUFPK1AsRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYTZYLEdBQWlDYixFQUFhOUUsWUFDM0UsS0FBSyxFQUVELE9BREF0UCxFQUFHM0MsT0FDSSxDQUFDLEVBQWE4VyxHQUFpQkMsRUFBY0MsSUFDeEQsS0FBSyxFQUVELE1BQU8sQ0FBQyxFQURJclUsRUFBRzNDLE9BQ2lCNlEsY0FnUDdCeUgsQ0FBU3ZCLEVBQWNDLElBRWxDck4sT0FBUSxXQUFjLE9BNUpsQyxTQUE0Qm9OLEdBQ3hCLE9BQU83WCxFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSXNpQixFQUFXc0UsRUFDZixPQUFPN1csRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFFRCxNQUFPLENBQUMsRUFBYXhELEdBRHJCMFYsRUFBWThFLEVBQWE5RSxXQUNjLFNBQVUyRCxHQUN6QyxJQUFJQSxHQUE0QyxJQUFoQ0EsRUFBUzVDLG1CQUl6QixPQUFPNEMsTUFFbkIsS0FBSyxFQUVELEtBREFXLEVBQVE1VCxFQUFHM0MsUUFDQyxNQUFPLENBQUMsRUFBYSxHQUNqQyxHQUFtQyxJQUE3QnVXLEVBQU12RCxtQkFBNkMsTUFBTyxDQUFDLEVBQWEsR0FFOUUsTUFBTSxHQUFjblUsT0FBTywrQkFDL0IsS0FBSyxFQUNELEdBQW1DLElBQTdCMFgsRUFBTXZELG1CQUEyQyxNQUFPLENBQUMsRUFBYSxHQUM1RSxHQUFNclIsVUFBVXFVLE9BQVEsTUFBTyxDQUFDLEVBQWEsR0FDN0MsTUFBTSxHQUFjblgsT0FBTyxlQUMvQixLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWFnWixHQUEwQjVGLEVBQVdzRSxJQUNsRSxLQUFLLEVBRUQsT0FEQTVULEVBQUczQyxPQUNJLENBQUMsRUFBYXRFLEdBQU91VyxJQUNoQyxLQUFLLEVBQ0R0UCxFQUFHM0MsT0FDSDJDLEVBQUc1QyxNQUFRLEVBQ2YsS0FBSyxFQUFHLE1BQU8sQ0FBQyxVQTZIU3dZLENBQW1CeEIsSUFDaER5QixXQUFZLFNBQVV4Z0IsR0FDbEIsT0FyR2hCLFNBQW9CMkssRUFBSTNLLEdBQ3BCLElBQUlpYSxFQUFZdFAsRUFBR3NQLFVBRW5CLE9BdDJCSixTQUFxQkEsRUFBV2phLEdBRzVCcWMsS0FDQSxJQUFJdFosRUFBTWlaLEdBQU8vQixHQUNid0csRUFBY3hFLEdBQW1CeGUsSUFBSXNGLEdBQ3BDMGQsSUFDREEsRUFBYyxJQUFJQyxJQUNsQnpFLEdBQW1CdmUsSUFBSXFGLEVBQUswZCxJQUVoQ0EsRUFBWUUsSUFBSTNnQixHQTIxQmhCNGdCLENBQVkzRyxFQUFXamEsR0FDaEIsWUExMUJYLFNBQXdCaWEsRUFBV2phLEdBQy9CLElBQUkrQyxFQUFNaVosR0FBTy9CLEdBQ2J3RyxFQUFjeEUsR0FBbUJ4ZSxJQUFJc0YsR0FDcEMwZCxJQUdMQSxFQUFZOU8sT0FBTzNSLEdBQ00sSUFBckJ5Z0IsRUFBWTFELE1BQ1pkLEdBQW1CdEssT0FBTzVPLEdBRzlCd1osTUFnMUJJc0UsQ0FBZTVHLEVBQVdqYSxJQWlHWHdnQixDQUFXekIsRUFBYy9lLE9BSXpDLFdBQ0hLLEdBQVM2VixnQkF0eUNGLDBCQUNHLFVDaUJkLElBS0k0SyxHQVVBQyxHQVhBQyxHQUFXLDRDQUVmLFNBQVdGLEdBQ1BBLEVBQW1CLE1BQUksUUFDdkJBLEVBQWlCLElBQUksTUFDckJBLEVBQW9CLE9BQUksU0FINUIsQ0FJR0EsS0FBZ0JBLEdBQWMsS0FNakMsU0FBV0MsR0FDUEEsRUFBNkIsa0JBQUksb0JBQ2pDQSxFQUE0QixpQkFBSSxtQkFDaENBLEVBQXVCLFlBQUksY0FDM0JBLEVBQTJCLGdCQUFJLGtCQUMvQkEsRUFBMEIsZUFBSSxpQkFFOUJBLEVBQTZCLGtCQUFJLG9CQUNqQ0EsRUFBcUIsVUFBSSxZQUN6QkEsRUFBeUIsY0FBSSxnQkFDN0JBLEVBQWlCLE1BQUksUUFDckJBLEVBQXFCLFVBQUksWUFDekJBLEVBQW9CLFNBQUksV0FDeEJBLEVBQWtCLE9BQUksU0FDdEJBLEVBQTRCLGlCQUFJLG1CQUNoQ0EsRUFBdUIsWUFBSSxjQUMzQkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBMEIsZUFBSSxpQkFDOUJBLEVBQXVCLFlBQUksY0FDM0JBLEVBQTRCLGlCQUFJLG1CQUVoQ0EsRUFBK0Isb0JBQUksc0JBQ25DQSxFQUFpQixNQUFJLFFBQ3JCQSxFQUFtQixRQUFJLFVBQ3ZCQSxFQUEyQixnQkFBSSxrQkFDL0JBLEVBQXFCLFVBQUksWUFDekJBLEVBQXFCLFVBQUksWUFDekJBLEVBQTBCLGVBQUksaUJBQzlCQSxFQUEwQixlQUFJLGlCQUM5QkEsRUFBK0Isb0JBQUksc0JBN0J2QyxDQThCR0EsS0FBY0EsR0FBWSxLQTJLN0IsSUEwU0ksR0ExU0EsR0FBUyxJQUFJdk4sRUFBTyx1QkF1RHhCLFNBQVN5TixHQUFhQyxFQUFVQyxFQUEyQkMsRUFBMkJDLEVBQXNCQyxFQUFlQyxHQUN2SCxPQUFPcmEsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUk2cEIsRUFBb0JDLEVBQXNCQyxFQUFhelEsRUFDM0QsT0FBT3ZKLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQ0R5WixFQUFxQkgsRUFBcUJDLEdBQzFDM1csRUFBRzVDLE1BQVEsRUFDZixLQUFLLEVBRUQsT0FEQTRDLEVBQUcxQyxLQUFLN1EsS0FBSyxDQUFDLEVBQUcsRUFBRyxDQUFFLElBQ2pCb3FCLEVBQ0UsQ0FBQyxFQUFhTCxFQUEwQkssSUFEZixDQUFDLEVBQWEsR0FFbEQsS0FBSyxFQUVELE9BREE3VyxFQUFHM0MsT0FDSSxDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhOUwsUUFBUTJJLElBQUl1YyxJQUN6QyxLQUFLLEVBR0QsT0FGQUssRUFBdUI5VyxFQUFHM0MsUUFDMUIwWixFQUFjRCxFQUFxQkUsTUFBSyxTQUFVaE4sR0FBVSxPQUFPQSxFQUFPMk0sZ0JBQWtCQSxNQUVyRixDQUFDLEVBQWFILEVBQTBCTyxFQUFZN0csUUFEbEMsQ0FBQyxFQUFhLEdBRTNDLEtBQUssRUFDRGxRLEVBQUczQyxPQUNIMkMsRUFBRzVDLE1BQVEsRUFDZixLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQWEsR0FDN0IsS0FBSyxFQUdELE9BRkFrSixFQUFNdEcsRUFBRzNDLE9BQ1QsR0FBT3hMLE1BQU15VSxHQUNOLENBQUMsRUFBYSxHQUN6QixLQUFLLEVBRUQsT0FEQWlRLEVBQVNKLEdBQVljLE9BQVFOLEVBQWVDLEdBQ3JDLENBQUMsVUFjNUIsU0FBU00sR0FBWVgsRUFBVUMsRUFBMkJDLEVBQTJCRSxFQUFlQyxHQUNoRyxPQUFPcmEsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUltcUIsRUFBaUNDLEVBQWNOLEVBQXNCNUssRUFBU3RlLEVBQUl5cEIsRUFBZ0JDLEVBQW1CQyxFQUN6SCxPQUFPeGEsRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFHRCxPQUZBNEMsRUFBRzFDLEtBQUs3USxLQUFLLENBQUMsRUFBRyxFQUFHLENBQUUsSUFDdEIwcUIsRUFBa0MsR0FDNUJQLEdBQWNBLEVBQW9CLFNBQ3hDUSxFQUFlUixFQUFvQixRQUU5QjNvQixNQUFNRSxRQUFRaXBCLEtBQ2ZBLEVBQWUsQ0FBQ0EsSUFFYixDQUFDLEVBQWE3bEIsUUFBUTJJLElBQUl1YyxLQU5rQixDQUFDLEVBQWEsR0FPckUsS0FBSyxFQWlCRCxJQWhCQUssRUFBdUI5VyxFQUFHM0MsT0FDMUI2TyxFQUFVLFNBQVVvTCxHQUVoQixJQUFJUCxFQUFjRCxFQUFxQkUsTUFBSyxTQUFVaE4sR0FBVSxPQUFPQSxFQUFPMk0sZ0JBQWtCVyxLQUM1RkUsRUFBd0JULEdBQWVQLEVBQTBCTyxFQUFZN0csT0FDakYsSUFBSXNILEVBUUEsT0FEQUwsRUFBa0MsR0FDM0IsUUFQUEEsRUFBZ0MxcUIsS0FBSytxQixJQVV4QzVwQixFQUFLLEVBQUd5cEIsRUFBaUJELEVBQWN4cEIsRUFBS3lwQixFQUFlMXBCLFNBQzVEMnBCLEVBQVdELEVBQWV6cEIsR0FFVixVQUROc2UsRUFBUW9MLElBRmtEMXBCLEtBTXhFb1MsRUFBRzVDLE1BQVEsRUFDZixLQUFLLEVBU0QsT0FMK0MsSUFBM0MrWixFQUFnQ3hwQixTQUNoQ3dwQixFQUFrQzVvQixPQUFPMlksT0FBT3NQLElBSTdDLENBQUMsRUFBYWpsQixRQUFRMkksSUFBSWlkLElBQ3JDLEtBQUssRUFNRCxPQUhBblgsRUFBRzNDLE9BRUhrWixFQUFTSixHQUFZc0IsTUFBT2QsRUFBZUMsR0FBYyxJQUNsRCxDQUFDLEVBQWEsR0FDekIsS0FBSyxFQUdELE9BRkFXLEVBQU12WCxFQUFHM0MsT0FDVCxHQUFPeEwsTUFBTTBsQixHQUNOLENBQUMsRUFBYSxHQUN6QixLQUFLLEVBQUcsTUFBTyxDQUFDLFVBMkloQyxJQUFJLEtBQVUsR0FBSyxJQUNaLGtCQUF5QywwSUFHNUMsR0FBRyx1QkFBbUQsaUpBR3RELEdBQUcsZ0NBQXFFLHdFQUN4RSxHQUFHLDZCQUErRCxvTUFHbEUsR0FBRyx5QkFBdUQsb01BRzFELEdBQUcsa0JBQXlDLHlLQUU1QyxHQUFHLHVCQUFtRCxrRUFDdEQsR0FBRyxjQUFpQyw4SEFFcEMsR0FBRyxhQUErQiw0SEFFbEMsSUFDQSxHQUFnQixJQUFJOVcsRUFBYSxZQUFhLFlBQWEsSUFrRDNEaVgsR0FBbUIsSUFsQlEsV0FDM0IsU0FBU0MsRUFBVUMsRUFBa0IxVCxRQUNSLElBQXJCMFQsSUFBK0JBLEVBQW1CLFNBQy9CLElBQW5CMVQsSUFBNkJBLEVBUGQsS0FRbkJsWCxLQUFLNHFCLGlCQUFtQkEsRUFDeEI1cUIsS0FBS2tYLGVBQWlCQSxFQVcxQixPQVRBeVQsRUFBVXJvQixVQUFVdW9CLG9CQUFzQixTQUFVM0gsR0FDaEQsT0FBT2xqQixLQUFLNHFCLGlCQUFpQjFILElBRWpDeUgsRUFBVXJvQixVQUFVd29CLG9CQUFzQixTQUFVNUgsRUFBTzZILEdBQ3ZEL3FCLEtBQUs0cUIsaUJBQWlCMUgsR0FBUzZILEdBRW5DSixFQUFVcm9CLFVBQVUwb0IsdUJBQXlCLFNBQVU5SCxVQUM1Q2xqQixLQUFLNHFCLGlCQUFpQjFILElBRTFCeUgsRUFoQm1CLElBdUI5QixTQUFTLEdBQVd6SSxHQUNoQixPQUFPLElBQUlDLFFBQVEsQ0FDZkMsT0FBUSxtQkFDUixpQkFBa0JGLElBTzFCLFNBQVMrSSxHQUFtQkMsR0FDeEIsSUFBSWxZLEVBQ0osT0FBT3pELEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJa2pCLEVBQU9oQixFQUFRNWQsRUFBUzZtQixFQUFRbEssRUFBVW1LLEVBQWNDLEVBQzVELE9BQU90YixFQUFZL1AsTUFBTSxTQUFVd1osR0FDL0IsT0FBUUEsRUFBR3BKLE9BQ1AsS0FBSyxFQU9ELE9BTkE4UyxFQUFRZ0ksRUFBVWhJLE1BQU9oQixFQUFTZ0osRUFBVWhKLE9BQzVDNWQsRUFBVSxDQUNOVSxPQUFRLE1BQ1J3ZCxRQUFTLEdBQVdOLElBRXhCaUosRUFwbUJLLDZFQW9tQnVCaG5CLFFBQVEsV0FBWStlLEdBQ3pDLENBQUMsRUFBYUMsTUFBTWdJLEVBQVE3bUIsSUFDdkMsS0FBSyxFQUVELEdBQTBCLE9BRDFCMmMsRUFBV3pILEVBQUduSixRQUNDMlIsUUFBc0MsTUFBcEJmLEVBQVNlLE9BQWlCLE1BQU8sQ0FBQyxFQUFhLEdBQ2hGb0osRUFBZSxHQUNmNVIsRUFBR3BKLE1BQVEsRUFDZixLQUFLLEVBRUQsT0FEQW9KLEVBQUdsSixLQUFLN1EsS0FBSyxDQUFDLEVBQUcsRUFBRyxDQUFFLElBQ2YsQ0FBQyxFQUFhd2hCLEVBQVNXLFFBQ2xDLEtBQUssRUFLRCxPQUpBeUosRUFBZ0I3UixFQUFHbkosUUFDZSxRQUE3QjJDLEVBQUtxWSxFQUFheG1CLGFBQTBCLElBQVBtTyxPQUFnQixFQUFTQSxFQUFHQyxXQUNsRW1ZLEVBQWVDLEVBQWF4bUIsTUFBTW9PLFNBRS9CLENBQUMsRUFBYSxHQUN6QixLQUFLLEVBRUQsT0FEYXVHLEVBQUduSixPQUNULENBQUMsRUFBYSxHQUN6QixLQUFLLEVBQUcsTUFBTSxHQUFjbkIsT0FBTyxzQkFBaUQsQ0FDaEZvYyxXQUFZckssRUFBU2UsT0FDckJ1SixnQkFBaUJILElBRXJCLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBY25LLEVBQVNXLGVBb0R2RCxTQUFTNEosR0FBbUNOLEVBQVdsWSxFQUFJeVksRUFBUUMsR0FFL0QsSUFBSUMsRUFBd0IzWSxFQUFHMlksc0JBQXVCMVUsRUFBZWpFLEVBQUdpRSxhQUV4RSxZQURrQixJQUFkeVUsSUFBd0JBLEVBQVloQixJQUNqQ25iLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJa2pCLEVBQU95RyxFQUFlclEsRUFBSzJILEVBQVVzSixFQUFLcUIsRUFBZWhCLEVBQzdELE9BQU83YSxFQUFZL1AsTUFBTSxTQUFVd1osR0FDL0IsT0FBUUEsRUFBR3BKLE9BQ1AsS0FBSyxFQUNEOFMsRUFBUWdJLEVBQVVoSSxNQUFPeUcsRUFBZ0J1QixFQUFVdkIsY0FDbkRuUSxFQUFHcEosTUFBUSxFQUNmLEtBQUssRUFFRCxPQURBb0osRUFBR2xKLEtBQUs3USxLQUFLLENBQUMsRUFBRyxFQUFHLENBQUUsSUFDZixDQUFDLEVBQWFvc0IsR0FBb0JKLEVBQVFFLElBQ3JELEtBQUssRUFFRCxPQURBblMsRUFBR25KLE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFFRCxHQURBaUosRUFBTUUsRUFBR25KLE9BQ0xzWixFQUlBLE9BSEEsR0FBT3JOLEtBQUssNkdBQ2tDcU4sRUFDekMseUVBQTZFclEsRUFBSXJHLFFBQVUsS0FDekYsQ0FBQyxFQUFjLENBQUVpUSxNQUFPQSxFQUFPeUcsY0FBZUEsSUFFekQsTUFBTXJRLEVBQ1YsS0FBSyxFQUVELE9BREFFLEVBQUdsSixLQUFLN1EsS0FBSyxDQUFDLEVBQUcsRUFBRyxDQUFFLElBQ2YsQ0FBQyxFQUFhd3JCLEdBQW1CQyxJQUM1QyxLQUFLLEVBSUQsT0FIQWpLLEVBQVd6SCxFQUFHbkosT0FFZHFiLEVBQVVWLHVCQUF1QjlILEdBQzFCLENBQUMsRUFBY2pDLEdBQzFCLEtBQUssRUFFRCxJQTBEcEIsU0FBMEJqWCxHQUN0QixLQUFNQSxhQUFhb0osR0FBbUJwSixFQUFFdUosWUFDcEMsT0FBTyxFQUdYLElBQUkrWCxFQUFhaEssT0FBT3RYLEVBQUV1SixXQUF1QixZQUNqRCxPQUF1QixNQUFmK1gsR0FDVyxNQUFmQSxHQUNlLE1BQWZBLEdBQ2UsTUFBZkEsRUFuRWlCUSxDQURMdkIsRUFBTS9RLEVBQUduSixRQUNtQixDQUV4QixHQURBcWIsRUFBVVYsdUJBQXVCOUgsR0FDN0J5RyxFQUlBLE9BSEEsR0FBT3JOLEtBQUssMEdBQ2tDcU4sRUFDekMseUVBQTZFWSxFQUFJdFgsUUFBVSxLQUN6RixDQUFDLEVBQWMsQ0FBRWlRLE1BQU9BLEVBQU95RyxjQUFlQSxJQUdyRCxNQUFNWSxFQWFkLE9BVkFxQixFQUFzRCxNQUF0Q3RLLE9BQU9pSixFQUFJaFgsV0FBVytYLFlBQ2hDdFUsRUFBdUJDLEVBQWN5VSxFQUFVeFUsZUFqTGpELElBa0xFRixFQUF1QkMsRUFBY3lVLEVBQVV4VSxnQkFDckQwVCxFQUFtQixDQUNmZSxzQkFBdUJuYSxLQUFLbUssTUFBUWlRLEVBQ3BDM1UsYUFBY0EsRUFBZSxHQUdqQ3lVLEVBQVVaLG9CQUFvQjVILEVBQU8wSCxHQUNyQyxHQUFPek8sTUFBTSxpQ0FBbUN5UCxFQUFnQixXQUN6RCxDQUFDLEVBQWNKLEdBQW1DTixFQUFXTixFQUFrQmEsRUFBUUMsSUFDbEcsS0FBSyxFQUFHLE1BQU8sQ0FBQyxVQWlCaEMsU0FBU0csR0FBb0JKLEVBQVFFLEdBQ2pDLE9BQU8sSUFBSXBuQixTQUFRLFNBQVVDLEVBQVNDLEdBRWxDLElBQUltbkIsRUFBZ0J2VSxLQUFLMFUsSUFBSUosRUFBd0JuYSxLQUFLbUssTUFBTyxHQUM3RHFRLEVBQVV2SSxXQUFXamYsRUFBU29uQixHQUVsQ0gsRUFBT1Esa0JBQWlCLFdBQ3BCQyxhQUFhRixHQUVidm5CLEVBQU8sR0FBY3lLLE9BQU8saUJBQXVDLENBQy9EeWMsc0JBQXVCQSxXQTJCdkMsSUFBSVEsR0FBc0MsV0FDdEMsU0FBU0EsSUFDTG5zQixLQUFLb3NCLFVBQVksR0FRckIsT0FOQUQsRUFBcUI3cEIsVUFBVTJwQixpQkFBbUIsU0FBVUksR0FDeERyc0IsS0FBS29zQixVQUFVM3NCLEtBQUs0c0IsSUFFeEJGLEVBQXFCN3BCLFVBQVVncUIsTUFBUSxXQUNuQ3RzQixLQUFLb3NCLFVBQVV6bUIsU0FBUSxTQUFVMG1CLEdBQVksT0FBT0EsUUFFakRGLEVBVjhCLEdBdUp6QyxJQTBCSUksR0FLQUMsR0EvQkFoRCxHQUE0QixHQU01QkMsR0FBNEIsR0FPNUJDLEdBQXVCLEdBSXZCK0MsR0FBZ0IsWUFJaEJDLEdBQVcsT0FlWEMsSUFBaUIsRUE0QnJCLFNBQVNDLEdBQVM5b0IsR0FDZCxHQUFJNm9CLEdBQ0EsTUFBTSxHQUFjemQsT0FBTyx1QkFFM0JwTCxFQUFRMm9CLGdCQUNSQSxHQUFnQjNvQixFQUFRMm9CLGVBRXhCM29CLEVBQVE0b0IsV0FDUkEsR0FBVzVvQixFQUFRNG9CLFVBMEIzQixTQUFTcmpCLEdBQVFpVixFQUFLdU8sSUFsQnRCLFdBQ0ksSUFBSUMsRUFBd0IsR0FPNUIsR0FOSTNhLEtBQ0EyYSxFQUFzQnJ0QixLQUFLLDRDQUUxQnlULEtBQ0Q0WixFQUFzQnJ0QixLQUFLLDhCQUUzQnF0QixFQUFzQm5zQixPQUFTLEVBQUcsQ0FDbEMsSUFBSW9zQixFQUFVRCxFQUNUN3NCLEtBQUksU0FBVWdULEVBQVMxTSxHQUFTLE1BQU8sS0FBT0EsRUFBUSxHQUFLLEtBQU8wTSxLQUNsRTVTLEtBQUssS0FDTjRCLEVBQU0sR0FBY2lOLE9BQU8sNEJBQTZELENBQ3hGOGQsVUFBV0QsSUFFZixHQUFPelEsS0FBS3JhLEVBQUlnUixVQUlwQmdhLEdBQ0EsSUFBSS9KLEVBQVE1RSxFQUFJeGEsUUFBUW9mLE1BQ3hCLElBQUtBLEVBQ0QsTUFBTSxHQUFjaFUsT0FBTyxhQUUvQixJQUFLb1AsRUFBSXhhLFFBQVFvZSxPQUFRLENBQ3JCLElBQUk1RCxFQUFJeGEsUUFBUTZsQixjQU1aLE1BQU0sR0FBY3phLE9BQU8sY0FMM0IsR0FBT29OLEtBQUsseUtBQ3dFZ0MsRUFBSXhhLFFBQVE2bEIsY0FDNUYsd0VBTVosR0FBd0MsTUFBcENILEdBQTBCdEcsR0FDMUIsTUFBTSxHQUFjaFUsT0FBTyxpQkFBdUMsQ0FDOUR2UCxHQUFJdWpCLElBR1osSUFBS3lKLEdBQWdCLEVBemtCekIsV0FFSSxJQURBLElBQUlPLEVBQWF0akIsT0FBT0YsU0FBU2lGLHFCQUFxQixVQUM3Qy9OLEVBQUssRUFBR29TLEVBQUt6UixPQUFPMlksT0FBT2dULEdBQWF0c0IsRUFBS29TLEVBQUdyUyxPQUFRQyxJQUFNLENBQ25FLElBQUl1c0IsRUFBTW5hLEVBQUdwUyxHQUNiLEdBQUl1c0IsRUFBSTFlLEtBQU8wZSxFQUFJMWUsSUFBSW1TLFNBQVN5SSxJQUM1QixPQUFPOEQsRUFHZixPQUFPLE1BcWtCRUMsSUF0MEJiLFNBQXlCWCxHQUNyQixJQUFJWSxFQUFTM2pCLFNBQVNzQixjQUFjLFVBR3BDcWlCLEVBQU81ZSxJQUFNNGEsR0FBVyxNQUFRb0QsRUFDaENZLEVBQU9DLE9BQVEsRUFDZjVqQixTQUFTSyxLQUFLeUIsWUFBWTZoQixHQWkwQmxCRSxDQUFnQmQsSUEzekI1QixTQUE4QkEsR0FFMUIsSUFBSWUsRUFBWSxHQUNadnNCLE1BQU1FLFFBQVF5SSxPQUFPNmlCLElBQ3JCZSxFQUFZNWpCLE9BQU82aUIsR0FHbkI3aUIsT0FBTzZpQixHQUFpQmUsRUFzekJ4QkMsQ0FBcUJoQixJQUNyQixJQUFJelosRUExbUJaLFNBQTBCd1csRUFBMkJDLEVBQTJCQyxFQUFzQitDLEVBQWVpQixHQUVqSCxJQUFJbkUsRUFBVyxXQUVYLElBREEsSUFBSW9FLEVBQVEsR0FDSC9zQixFQUFLLEVBQUdBLEVBQUt1RixVQUFVeEYsT0FBUUMsSUFDcEMrc0IsRUFBTS9zQixHQUFNdUYsVUFBVXZGLEdBRzFCZ0osT0FBTzZpQixHQUFlaHRCLEtBQUswRyxZQVMvQixPQU5JeUQsT0FBTzhqQixJQUM2QixtQkFBN0I5akIsT0FBTzhqQixLQUVkbkUsRUFBVzNmLE9BQU84akIsSUFFdEI5akIsT0FBTzhqQixHQXhGWCxTQUFrQm5FLEVBS2xCQyxFQUtBQyxFQU1BQyxHQTJDSSxPQXBDQSxTQUFxQmtFLEVBQVNDLEVBQWtCakUsR0FDNUMsT0FBT3JhLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJOHRCLEVBQ0osT0FBTy9kLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBRUQsT0FEQTRDLEVBQUcxQyxLQUFLN1EsS0FBSyxDQUFDLEVBQUcsRUFBRyxDQUFFLElBQ2hCbXVCLElBQVl6RSxHQUFZc0IsTUFBZSxDQUFDLEVBQWEsR0FFcEQsQ0FBQyxFQUFhUCxHQUFZWCxFQUFVQyxFQUEyQkMsRUFBMkJvRSxFQUFrQmpFLElBQ3ZILEtBQUssRUFHRCxPQURBNVcsRUFBRzNDLE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFDRCxPQUFNdWQsSUFBWXpFLEdBQVljLE9BQWdCLENBQUMsRUFBYSxHQUVyRCxDQUFDLEVBQWFYLEdBQWFDLEVBQVVDLEVBQTJCQyxFQUEyQkMsRUFBc0JtRSxFQUFrQmpFLElBQzlJLEtBQUssRUFHRCxPQURBNVcsRUFBRzNDLE9BQ0ksQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFFRGtaLEVBQVNKLEdBQVk0RSxJQUFLRixHQUMxQjdhLEVBQUc1QyxNQUFRLEVBQ2YsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhLEdBQzdCLEtBQUssRUFHRCxPQUZBMGQsRUFBTTlhLEVBQUczQyxPQUNULEdBQU94TCxNQUFNaXBCLEdBQ04sQ0FBQyxFQUFhLEdBQ3pCLEtBQUssRUFBRyxNQUFPLENBQUMsV0FrQ0xFLENBQVN6RSxFQUFVQyxFQUEyQkMsRUFBMkJDLEdBQzdGLENBQ0hILFNBQVVBLEVBQ1YwRSxZQUFhcmtCLE9BQU84akIsSUF1bEJYUSxDQUFpQjFFLEdBQTJCQyxHQUEyQkMsR0FBc0IrQyxHQUFlQyxJQUFXdUIsRUFBY2piLEVBQUdpYixZQUFhMUUsRUFBV3ZXLEVBQUd1VyxTQUM1S2lELEdBQXNCeUIsRUFDdEIxQixHQUFtQmhELEVBQ25Cb0QsSUFBaUIsRUErQnJCLE9BM0JBbkQsR0FBMEJ0RyxHQXZOOUIsU0FBdUI1RSxFQUFLbUwsRUFBMkJDLEVBQXNCbUQsRUFBZXRELEdBQ3hGLE9BQU9oYSxFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSW11QixFQUFzQkMsRUFBWXBiLEVBQUlxYixFQUFldkwsRUFBS3dMLEVBQzFEOVUsRUFDSixPQUFPekosRUFBWS9QLE1BQU0sU0FBVTBaLEdBQy9CLE9BQVFBLEVBQUd0SixPQUNQLEtBQUssRUEwQkQsT0F6QkErZCxFQXpPcEIsU0FBcUM3UCxFQUVyQ29OLEVBQVc2QyxHQUVQLFlBRGtCLElBQWQ3QyxJQUF3QkEsRUFBWWhCLElBQ2pDbmIsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlnVCxFQUFJa1EsRUFBT2hCLEVBQVF5SCxFQUFlaUIsRUFBa0JhLEVBQ3BEOVosRUFBUTNSLEtBQ1osT0FBTytQLEVBQVkvUCxNQUFNLFNBQVV3WixHQUUvQixHQURBeEcsRUFBS3NMLEVBQUl4YSxRQUFTb2YsRUFBUWxRLEVBQUdrUSxNQUFPaEIsRUFBU2xQLEVBQUdrUCxPQUFReUgsRUFBZ0IzVyxFQUFHMlcsZUFDdEV6RyxFQUNELE1BQU0sR0FBY2hVLE9BQU8sYUFFL0IsSUFBS2dULEVBQVEsQ0FDVCxHQUFJeUgsRUFDQSxNQUFPLENBQUMsRUFBYyxDQUNkQSxjQUFlQSxFQUNmekcsTUFBT0EsSUFHbkIsTUFBTSxHQUFjaFUsT0FBTyxjQWMvQixPQVpBMGIsRUFBbUJjLEVBQVViLG9CQUFvQjNILElBQVUsQ0FDdkRqTSxhQUFjLEVBQ2QwVSxzQkFBdUJuYSxLQUFLbUssT0FFaEM4UCxFQUFTLElBQUlVLEdBQ2IxSSxZQUFXLFdBQWMsT0FBT2xVLEVBQVVvQyxPQUFPLE9BQVEsR0FBUSxXQUM3RCxPQUFPNUIsRUFBWS9QLE1BQU0sU0FBVWdULEdBRy9CLE9BREF5WSxFQUFPYSxRQUNBLENBQUMsV0FucUJELEtBc3FCUixDQUFDLEVBQWNkLEdBQW1DLENBQUV0SSxNQUFPQSxFQUFPaEIsT0FBUUEsRUFBUXlILGNBQWVBLEdBQWlCaUIsRUFBa0JhLEVBQVFDLFVBd01wSDhDLENBQTRCbFEsSUFHOUNsWixNQUFLLFNBQVU0WCxHQUNoQjBNLEVBQXFCMU0sRUFBTzJNLGVBQWlCM00sRUFBT2tHLE1BQ2hENUUsRUFBSXhhLFFBQVE2bEIsZUFDWjNNLEVBQU8yTSxnQkFBa0JyTCxFQUFJeGEsUUFBUTZsQixlQUNyQyxHQUFPck4sS0FBSyxvREFBc0RnQyxFQUFJeGEsUUFBUTZsQixjQUFsRSxnRUFDMEQzTSxFQUFPMk0sY0FEakUsK0tBT2Y3WCxPQUFNLFNBQVU5SCxHQUFLLE9BQU8sR0FBT25GLE1BQU1tRixNQUU5Q3lmLEVBQTBCaHFCLEtBQUswdUIsR0FDL0JDLEVBakVwQixXQUNJLE9BQU83ZSxFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSXNaLEVBQ0osT0FBT3ZKLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQ0QsT0FBTW1DLElBQStCLENBQUMsRUFBYSxJQUNuRCxHQUFPK0osS0FBSyxHQUFjcE4sT0FBTyx3QkFBcUQsQ0FDbEY4ZCxVQUFXLG9EQUNaL1osU0FDSSxDQUFDLEdBQWMsSUFDMUIsS0FBSyxFQUVELE9BREFELEVBQUcxQyxLQUFLN1EsS0FBSyxDQUFDLEVBQUcsRUFBRyxDQUFFLElBQ2YsQ0FBQyxFQUFhZ1QsS0FDekIsS0FBSyxFQUVELE9BREFPLEVBQUczQyxPQUNJLENBQUMsRUFBYSxHQUN6QixLQUFLLEVBS0QsT0FKQWlKLEVBQU10RyxFQUFHM0MsT0FDVCxHQUFPaU0sS0FBSyxHQUFjcE4sT0FBTyx3QkFBcUQsQ0FDbEY4ZCxVQUFXMVQsSUFDWnJHLFNBQ0ksQ0FBQyxHQUFjLEdBQzFCLEtBQUssRUFBRyxNQUFPLENBQUMsR0FBYyxVQTBDYndiLEdBQW9CcnBCLE1BQUssU0FBVXNwQixHQUM1QyxPQUFJQSxFQUNPN0IsRUFBY25FLGFBR3JCLEtBR0QsQ0FBQyxFQUFhbmtCLFFBQVEySSxJQUFJLENBQ3pCaWhCLEVBQ0FDLEtBRVosS0FBSyxFQWtCRCxPQWpCQXBiLEVBQUswRyxFQUFHckosT0FBUWdlLEVBQWdCcmIsRUFBRyxHQUFJOFAsRUFBTTlQLEVBQUcsR0FLaER1VyxFQUFTLEtBQU0sSUFBSS9YLE9BQ0NnSSxFQUFLLElBRVIsT0FBSSxXQUNqQkEsRUFBRzVNLFFBQVMsRUFIaEIwaEIsRUFJSTlVLEVBQ08sTUFBUHNKLElBQ0F3TCxFQUEyQixZQUFJeEwsR0FJbkN5RyxFQUFTSixHQUFZYyxPQUFRb0UsRUFBYzFFLGNBQWUyRSxHQUNuRCxDQUFDLEVBQWNELEVBQWMxRSxzQkFpS2pCZ0YsQ0FBY3JRLEVBQUttTCxHQUEyQkMsR0FBc0JtRCxFQUFlTixJQUM5RixDQUNwQmpPLElBQUtBLEVBR0xzUSxTQUFVLFNBQVVDLEVBQVdDLEVBQWFockIsSUE5L0JwRCxTQUFrQmlyQixFQUFjdkUsRUFBdUJxRSxFQUFXQyxFQUFhaHJCLEdBQzNFLE9BQU95TCxFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSTJwQixFQUFlcUYsRUFDbkIsT0FBT2pmLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQ0QsT0FBTXRNLEdBQVdBLEVBQVFtckIsUUFDekJGLEVBQWE1RixHQUFZc0IsTUFBT29FLEVBQVdDLEdBQ3BDLENBQUMsSUFGaUMsQ0FBQyxFQUFhLEdBRzNELEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYXRFLEdBQzdCLEtBQUssRUFDRGIsRUFBZ0IzVyxFQUFHM0MsT0FDbkIyZSxFQUFTN2YsRUFBU0EsRUFBUyxHQUFJMmYsR0FBYyxDQUFFLFFBQVduRixJQUMxRG9GLEVBQWE1RixHQUFZc0IsTUFBT29FLEVBQVdHLEdBQzNDaGMsRUFBRzVDLE1BQVEsRUFDZixLQUFLLEVBQUcsTUFBTyxDQUFDLFdBZy9CcEJ3ZSxDQUFTcEMsR0FBcUJoRCxHQUEwQnRHLEdBQVEyTCxFQUFXQyxFQUFhaHJCLEdBQVNnTyxPQUFNLFNBQVU5SCxHQUFLLE9BQU8sR0FBT25GLE1BQU1tRixPQUU5SWtsQixpQkFBa0IsU0FBVUMsRUFBWXJyQixJQXYrQmhELFNBQTBCaXJCLEVBQWN2RSxFQUF1QjJFLEVBQVlyckIsR0FDdkUsT0FBT3lMLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJMnBCLEVBQ0osT0FBTzVaLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQ0QsT0FBTXRNLEdBQVdBLEVBQVFtckIsUUFDekJGLEVBQWE1RixHQUFZNEUsSUFBSyxDQUFFLFlBQWVvQixJQUN4QyxDQUFDLEVBQWM1cUIsUUFBUUMsWUFGVyxDQUFDLEVBQWEsR0FHM0QsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhZ21CLEdBQzdCLEtBQUssRUFDRGIsRUFBZ0IzVyxFQUFHM0MsT0FDbkIwZSxFQUFhNUYsR0FBWWMsT0FBUU4sRUFBZSxDQUM1Qy9jLFFBQVEsRUFDUixZQUFldWlCLElBRW5CbmMsRUFBRzVDLE1BQVEsRUFDZixLQUFLLEVBQUcsTUFBTyxDQUFDLFdBdTlCcEI4ZSxDQUFpQjFDLEdBQXFCaEQsR0FBMEJ0RyxHQUFRaU0sRUFBWXJyQixHQUFTZ08sT0FBTSxTQUFVOUgsR0FBSyxPQUFPLEdBQU9uRixNQUFNbUYsT0FFMUlvbEIsVUFBVyxTQUFVenZCLEVBQUltRSxJQTk4QmpDLFNBQW1CaXJCLEVBQWN2RSxFQUF1QjdxQixFQUFJbUUsR0FDeEQsT0FBT3lMLEVBQVV2UCxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJMnBCLEVBQ0osT0FBTzVaLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQ0QsT0FBTXRNLEdBQVdBLEVBQVFtckIsUUFDekJGLEVBQWE1RixHQUFZNEUsSUFBSyxDQUFFLFFBQVdwdUIsSUFDcEMsQ0FBQyxFQUFjNEUsUUFBUUMsWUFGVyxDQUFDLEVBQWEsR0FHM0QsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhZ21CLEdBQzdCLEtBQUssRUFDRGIsRUFBZ0IzVyxFQUFHM0MsT0FDbkIwZSxFQUFhNUYsR0FBWWMsT0FBUU4sRUFBZSxDQUM1Qy9jLFFBQVEsRUFDUixRQUFXak4sSUFFZnFULEVBQUc1QyxNQUFRLEVBQ2YsS0FBSyxFQUFHLE1BQU8sQ0FBQyxXQTg3QnBCZ2YsQ0FBVTVDLEdBQXFCaEQsR0FBMEJ0RyxHQUFRdmpCLEVBQUltRSxHQUFTZ08sT0FBTSxTQUFVOUgsR0FBSyxPQUFPLEdBQU9uRixNQUFNbUYsT0FFM0hxbEIsa0JBQW1CLFNBQVUzcEIsRUFBWTVCLElBcjdCakQsU0FBMkJpckIsRUFBY3ZFLEVBQXVCOWtCLEVBQVk1QixHQUN4RSxPQUFPeUwsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlzdkIsRUFBZ0IxdUIsRUFBSW9TLEVBQUk1SCxFQUFLdWUsRUFDakMsT0FBTzVaLEVBQVkvUCxNQUFNLFNBQVV3WixHQUMvQixPQUFRQSxFQUFHcEosT0FDUCxLQUFLLEVBQ0QsSUFBTXRNLElBQVdBLEVBQVFtckIsT0FBUyxNQUFPLENBQUMsRUFBYSxHQUV2RCxJQURBSyxFQUFpQixHQUNaMXVCLEVBQUssRUFBR29TLEVBQUt6UixPQUFPNEosS0FBS3pGLEdBQWE5RSxFQUFLb1MsRUFBR3JTLE9BQVFDLElBQ3ZEd0ssRUFBTTRILEVBQUdwUyxHQUVUMHVCLEVBQWUsbUJBQXFCbGtCLEdBQU8xRixFQUFXMEYsR0FHMUQsT0FEQTJqQixFQUFhNUYsR0FBWTRFLElBQUt1QixHQUN2QixDQUFDLEVBQWMvcUIsUUFBUUMsV0FDbEMsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFhZ21CLEdBQzdCLEtBQUssRUFDRGIsRUFBZ0JuUSxFQUFHbkosT0FDbkIwZSxFQUFhNUYsR0FBWWMsT0FBUU4sRUFBZSxDQUM1Qy9jLFFBQVEsRUFDUixnQkFBbUJsSCxJQUV2QjhULEVBQUdwSixNQUFRLEVBQ2YsS0FBSyxFQUFHLE1BQU8sQ0FBQyxXQSs1QnBCaWYsQ0FBa0I3QyxHQUFxQmhELEdBQTBCdEcsR0FBUXhkLEVBQVk1QixHQUFTZ08sT0FBTSxTQUFVOUgsR0FBSyxPQUFPLEdBQU9uRixNQUFNbUYsT0FFM0l1bEIsOEJBQStCLFNBQVVDLElBdjVCakQsU0FBdUNoRixFQUF1QmdGLEdBQzFELE9BQU9qZ0IsRUFBVXZQLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUkycEIsRUFDSixPQUFPNVosRUFBWS9QLE1BQU0sU0FBVWdULEdBQy9CLE9BQVFBLEVBQUc1QyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBYW9hLEdBQzdCLEtBQUssRUFHRCxPQUZBYixFQUFnQjNXLEVBQUczQyxPQUNuQnpHLE9BQU8sY0FBZ0IrZixJQUFrQjZGLEVBQ2xDLENBQUMsV0ErNEJoQkQsQ0FBOEIvRixHQUEwQnRHLEdBQVFzTSxHQUFTMWQsT0FBTSxTQUFVOUgsR0FBSyxPQUFPLEdBQU9uRixNQUFNbUYsT0FFdEhtUSxTQUFVLENBQ05ILE9BQVEsV0FFSixjQURPd1AsR0FBMEJ0RyxHQUMxQjNlLFFBQVFDLGFBTy9CLElBTUlpckIsR0FBaUIsWUF3Q3JCLFNBQVNDLEtBQ0wsT0FBT25nQixFQUFVdlAsVUFBTSxPQUFRLEdBQVEsV0FFbkMsT0FBTytQLEVBQVkvUCxNQUFNLFNBQVVnVCxHQUMvQixPQUFRQSxFQUFHNUMsT0FDUCxLQUFLLEVBQ0QsR0FBSStCLElBQ0EsTUFBTyxDQUFDLEdBQWMsR0FFMUIsSUFBS2UsSUFDRCxNQUFPLENBQUMsR0FBYyxHQUUxQixJQUFLWCxJQUNELE1BQU8sQ0FBQyxHQUFjLEdBRTFCUyxFQUFHNUMsTUFBUSxFQUNmLEtBQUssRUFFRCxPQURBNEMsRUFBRzFDLEtBQUs3USxLQUFLLENBQUMsRUFBRyxFQUFHLENBQUUsSUFDZixDQUFDLEVBQWFnVCxLQUN6QixLQUFLLEVBRUQsTUFBTyxDQUFDLEVBRE9PLEVBQUczQyxRQUV0QixLQUFLLEVBRUQsT0FEVTJDLEVBQUczQyxPQUNOLENBQUMsR0FBYyxHQUMxQixLQUFLLEVBQUcsTUFBTyxDQUFDLFdBaEVoQyxTQUEyQjNILEdBQ3ZCQSxFQUFTeVIsU0FBUzRFLGtCQUFrQixJQUFJcEgsRUFBVThYLElBQWdCLFNBQVVqWCxHQU14RSxPQUFPblAsR0FKR21QLEVBQVVtQyxZQUFZLE9BQU96QixlQUNuQlYsRUFDZm1DLFlBQVksaUJBQ1p6QixrQkFFTixVQUF1QmQsZ0JBQWdCLENBQ3RDd1UsU0FBVUEsR0FDVnhELFVBQVdBLEdBQ1hzRyxZQUFhQSxNQUVqQmhuQixFQUFTeVIsU0FBUzRFLGtCQUFrQixJQUFJcEgsRUFBVSxzQkFFbEQsU0FBeUJhLEdBQ3JCLElBRUksTUFBTyxDQUNIb1csU0FGWXBXLEVBQVVtQyxZQUFZOFUsSUFBZ0J2VyxlQUU5QjBWLFVBRzVCLE1BQU81a0IsR0FDSCxNQUFNLEdBQWNrRixPQUFPLCtCQUFtRSxDQUMxRnlnQixPQUFRM2xCLE9BWHFFLFlBQ3pGdEIsRUFBUzZWLGdCQXJCRixzQkFDRyxTQW1DZHFSLENBQWtCLElDMXBDbUIsV0FLckMsSUFBSXhlLEVBQUV5ZSxFQUFHLG1CQUFtQnR1QixPQUFPdXVCLGlCQUFpQnZ1QixPQUFPc0UsZUFBZSxTQUFTaUksRUFBRWUsRUFBRTJHLEdBQUcxSCxHQUFHN00sTUFBTXFCLFdBQVd3TCxHQUFHdk0sT0FBT2UsWUFBWXdMLEVBQUVlLEdBQUcyRyxFQUFFeFQsUUFBa04rdEIsRUFBMU0sU0FBWWppQixHQUFHQSxFQUFFLENBQUMsaUJBQWlCbEUsUUFBUUEsT0FBTyxpQkFBaUI0SSxNQUFNQSxLQUFLLGlCQUFpQixFQUFBdkUsR0FBUSxFQUFBQSxFQUFPSCxHQUFHLElBQUksSUFBSWUsRUFBRSxFQUFFQSxFQUFFZixFQUFFbk4sU0FBU2tPLEVBQUUsQ0FBQyxJQUFJMkcsRUFBRTFILEVBQUVlLEdBQUcsR0FBRzJHLEdBQUdBLEVBQUU2QixNQUFNQSxLQUFLLE9BQU83QixFQUFFLE9BQU90SCxXQUFrQjhoQixDQUFHaHdCLE1BQ3RKLFNBQVNpd0IsRUFBR25pQixHQUFHLElBQUllLEVBQUUsRUFBRSxPQUFPLFdBQVcsT0FBT0EsRUFBRWYsRUFBRW5OLE9BQU8sQ0FBQ29CLE1BQUssRUFBR0MsTUFBTThMLEVBQUVlLE1BQU0sQ0FBQzlNLE1BQUssSUFBSyxTQUFTbXVCLEVBQUdwaUIsR0FBRyxJQUFJZSxFQUFFLG9CQUFvQnhOLFFBQVFBLE9BQU9DLFVBQVV3TSxFQUFFek0sT0FBT0MsVUFBVSxPQUFPdU4sRUFBRUEsRUFBRXRNLEtBQUt1TCxHQUFHLENBQUNoTSxLQUFLbXVCLEVBQUduaUIsS0FBM1osU0FBWUEsRUFBRWUsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSTJHLEVBQUV1YSxFQUFHamlCLEVBQUVBLEVBQUVxaUIsTUFBTSxLQUFLLElBQUksSUFBSXRpQixFQUFFLEVBQUVBLEVBQUVDLEVBQUVuTixPQUFPLEVBQUVrTixJQUFJLENBQUMsSUFBSTdELEVBQUU4RCxFQUFFRCxHQUFHN0QsS0FBS3dMLElBQUlBLEVBQUV4TCxHQUFHLElBQUl3TCxFQUFFQSxFQUFFeEwsSUFBMEI2RSxFQUFFQSxFQUFUaEIsRUFBRTJILEVBQWxCMUgsRUFBRUEsRUFBRUEsRUFBRW5OLE9BQU8sT0FBb0JrTixHQUFHLE1BQU1nQixHQUFHZ2hCLEVBQUdyYSxFQUFFMUgsRUFBRSxDQUFDbU8sY0FBYSxFQUFHbVUsVUFBUyxFQUFHcHVCLE1BQU02TSxLQUN4TXdoQixDQUFHLFdBQVUsU0FBU3ZpQixHQUFHLFNBQVNlLEVBQUVaLEdBQUdqTyxLQUFLNk8sRUFBRSxFQUFFN08sS0FBS3dWLE9BQUUsRUFBT3hWLEtBQUs4TixFQUFFLEdBQUcsSUFBSXdpQixFQUFFdHdCLEtBQUtpUSxJQUFJLElBQUloQyxFQUFFcWlCLEVBQUU5ckIsUUFBUThyQixFQUFFN3JCLFFBQVEsTUFBTXBDLEdBQUdpdUIsRUFBRTdyQixPQUFPcEMsSUFBSSxTQUFTbVQsSUFBSXhWLEtBQUs4TixFQUFFLEtBQUssU0FBU0QsRUFBRUksR0FBRyxPQUFPQSxhQUFhWSxFQUFFWixFQUFFLElBQUlZLEdBQUUsU0FBU3loQixHQUFHQSxFQUFFcmlCLE1BQUssR0FBR0gsRUFBRSxPQUFPQSxFQUFFMEgsRUFBRWxULFVBQVV1TSxFQUFFLFNBQVNaLEdBQUcsR0FBRyxNQUFNak8sS0FBSzhOLEVBQUUsQ0FBQzlOLEtBQUs4TixFQUFFLEdBQUcsSUFBSXdpQixFQUFFdHdCLEtBQUtBLEtBQUt3VixHQUFFLFdBQVc4YSxFQUFFcmlCLE9BQU1qTyxLQUFLOE4sRUFBRXJPLEtBQUt3TyxJQUFJLElBQUlqRSxFQUFFK2xCLEVBQUd0TSxXQUFXak8sRUFBRWxULFVBQVVrVCxFQUFFLFNBQVN2SCxHQUFHakUsRUFBRWlFLEVBQUUsSUFBSXVILEVBQUVsVCxVQUFVMkwsRUFBRSxXQUFXLEtBQUtqTyxLQUFLOE4sR0FBRzlOLEtBQUs4TixFQUFFbk4sUUFBUSxDQUFDLElBQUlzTixFQUFFak8sS0FBSzhOLEVBQUU5TixLQUFLOE4sRUFBRSxHQUFHLElBQUksSUFBSXdpQixFQUFFLEVBQUVBLEVBQUVyaUIsRUFBRXROLFNBQVMydkIsRUFBRSxDQUFDLElBQUlqdUIsRUFDMWY0TCxFQUFFcWlCLEdBQUdyaUIsRUFBRXFpQixHQUFHLEtBQUssSUFBSWp1QixJQUFJLE1BQU02QyxHQUFHbEYsS0FBS2lRLEVBQUUvSyxLQUFLbEYsS0FBSzhOLEVBQUUsTUFBTTBILEVBQUVsVCxVQUFVMk4sRUFBRSxTQUFTaEMsR0FBR2pPLEtBQUt3VixHQUFFLFdBQVcsTUFBTXZILE1BQU1ZLEVBQUV2TSxVQUFVMk4sRUFBRSxXQUFXLFNBQVNoQyxFQUFFL0ksR0FBRyxPQUFPLFNBQVN1TCxHQUFHcE8sSUFBSUEsR0FBRSxFQUFHNkMsRUFBRTNDLEtBQUsrdEIsRUFBRTdmLEtBQUssSUFBSTZmLEVBQUV0d0IsS0FBS3FDLEdBQUUsRUFBRyxNQUFNLENBQUNtQyxRQUFReUosRUFBRWpPLEtBQUt5USxHQUFHaE0sT0FBT3dKLEVBQUVqTyxLQUFLaU8sS0FBS1ksRUFBRXZNLFVBQVVtTyxFQUFFLFNBQVN4QyxHQUFHLEdBQUdBLElBQUlqTyxLQUFLQSxLQUFLaU8sRUFBRSxJQUFJbkwsVUFBVSw0Q0FBNEMsR0FBR21MLGFBQWFZLEVBQUU3TyxLQUFLbUMsRUFBRThMLE9BQU8sQ0FBQ0gsRUFBRSxjQUFjRyxHQUFHLElBQUssU0FBUyxJQUFJcWlCLEVBQUUsTUFBTXJpQixFQUFFLE1BQU1ILEVBQUUsSUFBSyxXQUFXd2lCLEdBQUUsRUFBRyxNQUFNeGlCLEVBQUUsUUFBUXdpQixHQUFFLEVBQUdBLEVBQUV0d0IsS0FBSzZRLEVBQUU1QyxHQUFHak8sS0FBS3N3QixFQUFFcmlCLEtBQzFmWSxFQUFFdk0sVUFBVXVPLEVBQUUsU0FBUzVDLEdBQUcsSUFBSXFpQixPQUFFLEVBQU8sSUFBSUEsRUFBRXJpQixFQUFFN0ksS0FBSyxNQUFNL0MsR0FBYSxZQUFWckMsS0FBS2lPLEVBQUU1TCxHQUFVLG1CQUFtQml1QixFQUFFdHdCLEtBQUt1d0IsRUFBRUQsRUFBRXJpQixHQUFHak8sS0FBS3N3QixFQUFFcmlCLElBQUlZLEVBQUV2TSxVQUFVMkwsRUFBRSxTQUFTQSxHQUFHak8sS0FBS00sRUFBRSxFQUFFMk4sSUFBSVksRUFBRXZNLFVBQVVndUIsRUFBRSxTQUFTcmlCLEdBQUdqTyxLQUFLTSxFQUFFLEVBQUUyTixJQUFJWSxFQUFFdk0sVUFBVWhDLEVBQUUsU0FBUzJOLEVBQUVxaUIsR0FBRyxHQUFHLEdBQUd0d0IsS0FBSzZPLEVBQUUsTUFBTXRELE1BQU0saUJBQWlCMEMsRUFBRSxLQUFLcWlCLEVBQUUsc0NBQXNDdHdCLEtBQUs2TyxHQUFHN08sS0FBSzZPLEVBQUVaLEVBQUVqTyxLQUFLd1YsRUFBRThhLEVBQUV0d0IsS0FBS3d3QixLQUFLM2hCLEVBQUV2TSxVQUFVa3VCLEVBQUUsV0FBVyxHQUFHLE1BQU14d0IsS0FBSzhOLEVBQUUsQ0FBQyxJQUFJLElBQUlHLEVBQUUsRUFBRUEsRUFBRWpPLEtBQUs4TixFQUFFbk4sU0FBU3NOLEVBQUVnQyxFQUFFcEIsRUFBRTdPLEtBQUs4TixFQUFFRyxJQUFJak8sS0FBSzhOLEVBQUUsT0FBTyxJQUFJbUMsRUFBRSxJQUFJdUYsRUFFTSxPQUZKM0csRUFBRXZNLFVBQVVILEVBQUUsU0FBUzhMLEdBQUcsSUFBSXFpQixFQUFFdHdCLEtBQUtpUSxJQUN6ZmhDLEVBQUV3aUIsR0FBR0gsRUFBRTlyQixRQUFROHJCLEVBQUU3ckIsU0FBU29LLEVBQUV2TSxVQUFVaXVCLEVBQUUsU0FBU3RpQixFQUFFcWlCLEdBQUcsSUFBSWp1QixFQUFFckMsS0FBS2lRLElBQUksSUFBSWhDLEVBQUUxTCxLQUFLK3RCLEVBQUVqdUIsRUFBRW1DLFFBQVFuQyxFQUFFb0MsUUFBUSxNQUFNUyxHQUFHN0MsRUFBRW9DLE9BQU9TLEtBQUsySixFQUFFdk0sVUFBVThDLEtBQUssU0FBUzZJLEVBQUVxaUIsR0FBRyxTQUFTanVCLEVBQUVxdUIsRUFBRUMsR0FBRyxNQUFNLG1CQUFtQkQsRUFBRSxTQUFTRSxHQUFJLElBQUkxckIsRUFBRXdyQixFQUFFRSxJQUFLLE1BQU1DLEdBQUlwZ0IsRUFBRW9nQixLQUFNRixFQUFFLElBQUl6ckIsRUFBRXVMLEVBQUVxZ0IsRUFBRSxJQUFJamlCLEdBQUUsU0FBUzZoQixFQUFFQyxHQUFHenJCLEVBQUV3ckIsRUFBRWpnQixFQUFFa2dCLEtBQTJCLE9BQXZCM3dCLEtBQUt5d0IsR0FBR3B1QixFQUFFNEwsRUFBRS9JLEdBQUc3QyxFQUFFaXVCLEVBQUU3ZixJQUFXcWdCLEdBQUdqaUIsRUFBRXZNLFVBQVV3UCxNQUFNLFNBQVM3RCxHQUFHLE9BQU9qTyxLQUFLb0YsVUFBSyxFQUFPNkksSUFBSVksRUFBRXZNLFVBQVVtdUIsR0FBRyxTQUFTeGlCLEVBQUVxaUIsR0FBRyxTQUFTanVCLElBQUksT0FBTzZDLEVBQUUySixHQUFHLEtBQUssRUFBRVosRUFBRS9JLEVBQUVzUSxHQUFHLE1BQU0sS0FBSyxFQUFFOGEsRUFBRXByQixFQUFFc1EsR0FBRyxNQUFNLFFBQVEsTUFBTWpLLE1BQU0scUJBQzFlckcsRUFBRTJKLElBQUssSUFBSTNKLEVBQUVsRixLQUFLLE1BQU1BLEtBQUs4TixFQUFFbUMsRUFBRXBCLEVBQUV4TSxHQUFHckMsS0FBSzhOLEVBQUVyTyxLQUFLNEMsSUFBSXdNLEVBQUVySyxRQUFRcUosRUFBRWdCLEVBQUVwSyxPQUFPLFNBQVN3SixHQUFHLE9BQU8sSUFBSVksR0FBRSxTQUFTeWhCLEVBQUVqdUIsR0FBR0EsRUFBRTRMLE9BQU1ZLEVBQUVraUIsS0FBSyxTQUFTOWlCLEdBQUcsT0FBTyxJQUFJWSxHQUFFLFNBQVN5aEIsRUFBRWp1QixHQUFHLElBQUksSUFBSTZDLEVBQUVnckIsRUFBR2ppQixHQUFHd0MsRUFBRXZMLEVBQUVwRCxRQUFRMk8sRUFBRTFPLEtBQUswTyxFQUFFdkwsRUFBRXBELE9BQU8rTCxFQUFFNEMsRUFBRXpPLE9BQU95dUIsR0FBR0gsRUFBRWp1QixPQUFNd00sRUFBRTNCLElBQUksU0FBU2UsR0FBRyxJQUFJcWlCLEVBQUVKLEVBQUdqaUIsR0FBRzVMLEVBQUVpdUIsRUFBRXh1QixPQUFPLE9BQU9PLEVBQUVOLEtBQUs4TCxFQUFFLElBQUksSUFBSWdCLEdBQUUsU0FBUzNKLEVBQUV1TCxHQUFHLFNBQVNxZ0IsRUFBRUYsR0FBSSxPQUFPLFNBQVNDLEdBQUlILEVBQUVFLEdBQUlDLEVBQU8sS0FBSkYsR0FBVXpyQixFQUFFd3JCLElBQUksSUFBSUEsRUFBRSxHQUFHQyxFQUFFLEVBQUUsR0FBR0QsRUFBRWp4QixVQUFLLEdBQVFreEIsSUFBSTlpQixFQUFFeEwsRUFBRUwsT0FBT3l1QixHQUFHSyxFQUFFSixFQUFFL3ZCLE9BQU8sR0FBRzhQLEdBQUdwTyxFQUFFaXVCLEVBQUV4dUIsY0FBY08sRUFBRU4sVUFBZ0I4TSxLQUMvZCxJQUFJbWlCLEVBQUdBLEdBQUksR0FBR1IsRUFBRXh3QixNQUFNd1MsS0FBS3llLEVBQUcsc0JBQXNCQyxFQUFHLEtBQUssU0FBU0MsRUFBR3JqQixHQUFHLE9BQU9BLEVBQUVBLEVBQUVuRSxlQUFlbUUsRUFBRW5FLGNBQWMsb0JBQW9CbUUsRUFBRUEsRUFBRTVDLE9BQU80QyxFQUFFc2pCLGFBQWEsV0FBV0gsRUFBR3J1QixLQUFLa0wsR0FBR0EsRUFBRSxHQUFHLFNBQVN1akIsS0FBTSxTQUFTQyxFQUFHeGpCLEdBQUcsSUFBSWUsU0FBU2YsRUFBRSxNQUFNLFVBQVVlLEVBQUVBLEVBQUVmLEVBQUU3TSxNQUFNRSxRQUFRMk0sR0FBRyxRQUFRZSxFQUFFLE9BQU8sU0FBUzBpQixFQUFHempCLEdBQUcsSUFBSWUsRUFBRXlpQixFQUFHeGpCLEdBQUcsTUFBTSxTQUFTZSxHQUFHLFVBQVVBLEdBQUcsaUJBQWlCZixFQUFFbk4sT0FBTyxTQUFTNndCLEVBQUcxakIsR0FBRyxNQUFNLFlBQVl3akIsRUFBR3hqQixHQUFHLFNBQVMrQyxFQUFFL0MsR0FBRyxJQUFJZSxTQUFTZixFQUFFLE1BQU0sVUFBVWUsR0FBRyxNQUFNZixHQUFHLFlBQVllLEVBQ25lLFNBQVM0aUIsRUFBRzNqQixHQUFHLE9BQU92TSxPQUFPZSxVQUFVOEwsZUFBZTdMLEtBQUt1TCxFQUFFNGpCLElBQUs1akIsRUFBRTRqQixLQUFNNWpCLEVBQUU0akIsS0FBTUMsR0FBSSxJQUFJRCxFQUFHLGdCQUFnQixJQUFJcmEsS0FBS0ksV0FBVyxHQUFHa2EsRUFBRyxFQUFFLFNBQVNDLEVBQUc5akIsRUFBRWUsRUFBRTJHLEdBQUcsT0FBTzFILEVBQUV2TCxLQUFLNEMsTUFBTTJJLEVBQUVoQixLQUFLM0csV0FBVyxTQUFTMHJCLEVBQUcvakIsRUFBRWUsRUFBRTJHLEdBQUcsSUFBSTFILEVBQUUsTUFBTXZDLFFBQVEsR0FBRyxFQUFFcEYsVUFBVXhGLE9BQU8sQ0FBQyxJQUFJa04sRUFBRTVNLE1BQU1xQixVQUFVRSxNQUFNRCxLQUFLNEQsVUFBVSxHQUFHLE9BQU8sV0FBVyxJQUFJNkQsRUFBRS9JLE1BQU1xQixVQUFVRSxNQUFNRCxLQUFLNEQsV0FBOEMsT0FBbkNsRixNQUFNcUIsVUFBVXd2QixRQUFRM3NCLE1BQU02RSxFQUFFNkQsR0FBVUMsRUFBRTNJLE1BQU0wSixFQUFFN0UsSUFBSSxPQUFPLFdBQVcsT0FBTzhELEVBQUUzSSxNQUFNMEosRUFBRTFJLFlBQ3ZjLFNBQVM0ckIsRUFBRWprQixFQUFFZSxFQUFFMkcsR0FBb0csT0FBVnVjLEVBQXZGNWpCLFNBQVM3TCxVQUFVd0ssT0FBTyxHQUFHcUIsU0FBUzdMLFVBQVV3SyxLQUFLL00sV0FBV3VnQixRQUFRLGVBQWlCc1IsRUFBS0MsR0FBWTFzQixNQUFNLEtBQUtnQixXQUFXLFNBQVM2ckIsRUFBR2xrQixFQUFFZSxHQUFHLElBQUkyRyxFQUFFdlUsTUFBTXFCLFVBQVVFLE1BQU1ELEtBQUs0RCxVQUFVLEdBQUcsT0FBTyxXQUFXLElBQUkwSCxFQUFFMkgsRUFBRWhULFFBQWtDLE9BQTFCcUwsRUFBRXBPLEtBQUswRixNQUFNMEksRUFBRTFILFdBQWtCMkgsRUFBRTNJLE1BQU1uRixLQUFLNk4sSUFBSSxJQUFJb2tCLEVBQUd6Z0IsS0FBS21LLElBQUksU0FBUzVLLEVBQUVqRCxFQUFFZSxHQUFHLFNBQVMyRyxLQUFLQSxFQUFFbFQsVUFBVXVNLEVBQUV2TSxVQUFVd0wsRUFBRW9rQixHQUFHcmpCLEVBQUV2TSxVQUFVd0wsRUFBRXhMLFVBQVUsSUFBSWtULEVBQUUxSCxFQUFFeEwsVUFBVUcsWUFBWXFMLEVBQUUsU0FBU3FrQixFQUFHcmtCLEdBQUcsT0FBT0EsRUFnQjliLFNBQVN1QixFQUFFdkIsRUFBRWUsRUFBRTJHLEdBQUd4VixLQUFLc1QsS0FBSzhlLEVBQUd0a0IsRUFBRTlOLEtBQUtpVCxRQUFRcEUsR0FBR3dqQixFQUFHdmtCLElBQUksR0FBRzlOLEtBQUs4TixFQUFFMEgsR0FBRyxLQUFnTCxTQUFTOGMsRUFBR3hrQixHQUFHLElBQUllLEVBQUVmLEdBQUdBLEVBQUV3RixLQUFLLE9BQU96RSxFQUFFLElBQUlRLEVBQUVSLEVBQUUwakIsVUFBVUgsRUFBR3p4QixRQUFRbU4sRUFBRW1GLFFBQVFuRixFQUFFMGtCLGdCQUFnQixLQUE1UXpoQixFQUFFMUIsRUFBRTlELE9BQU84RCxFQUFFL00sVUFBVW13QixFQUFFLFdBQVcsSUFBSTNrQixFQUFFLENBQUN3RixLQUFLdFQsS0FBS3NULEtBQUtMLFFBQVFqVCxLQUFLaVQsU0FBMkMsT0FBbENqVCxLQUFLOE4sSUFBSUEsRUFBRTBrQixlQUFleHlCLEtBQUs4TixHQUFVQSxHQUFHdUIsRUFBRS9NLFVBQVVvd0IsT0FBTyxXQUFXLE9BQU8xeUIsS0FBS3l5QixLQUNoUCxJQW1DNkpFLEVBbkN6SlAsRUFBRyxRQUFRQyxFQUFHLENBQUMsNkJBQTZCLHVEQUF1RCxpQkFBaUIsR0FBRyxxQkFBcUIsNkxBQTZMLG9CQUFvQixxSkFDalcsdUJBQXVCLGtLQUFrSyxlQUFlLCtFQUErRSxvQkFBb0Isa0NBQWtDLG1CQUFtQixpQ0FBaUMsNEJBQTRCLHVFQUF1RSx3QkFBd0Isd0RBQzVmLHdCQUF3Qiw2R0FBNkcsNkJBQTZCLCtGQUErRixrQ0FBa0Msd0RBQXdELHVCQUF1QiwwREFBMEQsc0JBQXNCLGdDQUFnQywwQkFBMEIsbUZBQzVmLGlCQUFpQixrQ0FBa0MseUJBQXlCLHNJQUFzSSxpQkFBaUIscUVBQXFFLHFCQUFxQixzTEFBc0wscUJBQXFCLGtDQUN4Z0IsNEJBQTRCLHFMQUFxTCx1QkFBdUIsdURBQXVELGdDQUFnQyxnT0FDL1QsdUJBQXVCLHdFQUF3RSw4QkFBOEIsNEZBQTRGLGdCQUFnQix3Q0FBd0Msa0JBQWtCLHNFQUFzRSxvQkFBb0Isa0RBQWtELHFCQUFxQiw0REFDcGMsMEJBQTBCLCtLQUErSywrQkFBK0IsaUZBQWlGLHlCQUF5Qix1R0FBdUcsMEJBQTBCLDBGQUNuZCxzQkFBc0IsK0lBQStJLHNCQUFzQiwyR0FBMkcsaUJBQWlCLGdFQUFnRSwyQkFBMkIsb0ZBQW9GLHVCQUF1QixnUEFDN2Ysc0JBQXNCLHdDQUF3QywwQkFBMEIsNEdBQTRHLGlCQUFpQiw2S0FBNkssMEJBQTBCLDJFQUEyRSxvQkFBb0IsNENBQzNmLDhCQUE4QiwyRUFBMkUsNkJBQTZCLHlFQUF5RSwyQkFBMkIsMkZBQTJGLDhCQUE4Qiw4SEFBOEgseUJBQXlCLGdJQUMxZiw0QkFBNEIsNkVBQTZFLHVCQUF1QixrREFBa0QsdUJBQXVCLGtDQUFrQyx3QkFBd0Isb0VBQW9FLDRCQUE0QiwyQ0FBMkMsK0JBQStCLG1FQUFtRSwyQkFBMkIsb0tBQzNnQix1QkFBdUIsd0VBQXdFLDBCQUEwQix1RUFBdUUsY0FBYyxpREFBaUQsMkNBQTJDLHdKQUF3Six5QkFBeUIsOEZBQzNkLGdCQUFnQixrQ0FBa0MsbUJBQW1CLDZEQUE2RCxZQUFZLDBHQUEwRyx3QkFBd0IseUpBQXlKLDhDQUE4QyxrTEFDdmQsZ0JBQWdCLDRGQUE0Rix1QkFBdUIseUVBQXlFLDBCQUEwQixrRUFBa0UsaUJBQWlCLDREQUE0RCw2QkFBNkIsMkVBQTJFLDZCQUE2QixtREFDMWYsc0JBQXNCLDZEQUE2RCwrQkFBK0IseURBQXlELHVDQUF1Qyw0RUFBNEUscUJBQXFCLHNFQUFzRXJHLFFBQVEsK0JBQStCLHFCQUFxQix5RUFDcmIsb0JBQW9CLDBGQUEwRiw0QkFBNEIsMkdBQTJHLDJCQUEyQixzSEFBc0gsK0JBQStCLDJFQUEyRSwrQkFBK0IsNkRBQy9nQixtQkFBbUIsMkNBQTJDLGlCQUFpQix3RUFBd0UsaUJBQWlCLDRGQUE0RixnQkFBZ0IsMERBQTBELGdCQUFnQiwrRUFBK0Usa0JBQWtCLEdBQUcsZ0JBQWdCLGtEQUNsZCwwQkFBMEIsZ0ZBZ0J0QjRHLEVBQUcsQ0FBQ0MsR0FBRyxDQUFDQyxHQUFHLDBGQUEwRkMsR0FBRyw4REFBOERDLEdBQUcsNkRBQTZEcnpCLEdBQUcsS0FBS3N6QixHQUFHLENBQUNILEdBQUcsOERBQThEQyxHQUFHLDhDQUE4Q0MsR0FBRyw2Q0FBNkNyekIsR0FBRyxLQUFLdXpCLEdBQUcsQ0FBQ0osR0FBRyw4RUFDdmFDLEdBQUcsOERBQThEQyxHQUFHLDZEQUE2RHJ6QixHQUFHLEtBQUt3ekIsR0FBRyxDQUFDTCxHQUFHLGtGQUFrRkMsR0FBRywyREFBMkRDLEdBQUcsMERBQTBEcnpCLEdBQUcsTUFDaFcsU0FBU3l6QixFQUFHdGxCLEdBQUcsSUFBSSxJQUFJZSxLQUFLK2pCLEVBQUcsR0FBR0EsRUFBRy9qQixHQUFHbFAsS0FBS21PLEVBQUUsTUFBZSxDQUFDdWxCLGtCQUFUdmxCLEVBQUU4a0IsRUFBRy9qQixJQUF1QmlrQixHQUFHUSxvQkFBb0J4bEIsRUFBRWlsQixHQUFHUSx5QkFBeUJ6bEIsRUFBRWtsQixJQUFJLE9BQU8sS0FBOEMsU0FBU1EsRUFBRzFsQixHQUFHLElBQUlBLEVBQUUsT0FBTSxFQUFHLElBQUksUUFBUUEsRUFBRTJsQixlQUFlLE1BQU01a0IsR0FBRyxPQUFNLEdBQUssU0FBUzBoQixFQUFFemlCLEdBQUcsR0FBR3ZDLE1BQU1pSSxrQkFBa0JqSSxNQUFNaUksa0JBQWtCeFQsS0FBS3V3QixPQUFPLENBQUMsSUFBSTFoQixFQUFFdEQsUUFBUW1vQixNQUFNN2tCLElBQUk3TyxLQUFLMHpCLE1BQU03a0IsR0FBR2YsSUFBSTlOLEtBQUtpVCxRQUFRaUIsT0FBT3BHLElBQThDLFNBQVM2bEIsRUFBRzdsQixFQUFFZSxHQUFtQixJQUFJLElBQUkyRyxFQUFFLEdBQUczSCxHQUE3QkMsRUFBRUEsRUFBRXFpQixNQUFNLE9BQXVCeHZCLE9BQU8sRUFBRXFKLEVBQUUsRUFBRUEsRUFBRTZELEVBQUU3RCxJQUFJd0wsR0FBRzFILEVBQUU5RCxJQUFJQSxFQUFFNkUsRUFBRWxPLE9BQU9rTyxFQUFFN0UsR0FBRyxNQUFNdW1CLEVBQUVodUIsS0FBS3ZDLEtBQUt3VixFQUFFMUgsRUFBRUQsSUFBK0MsU0FBUytsQixFQUFHOWxCLEVBQUVlLEdBQUcsTUFBTSxJQUFJOGtCLEVBQUcsV0FBVzdsQixFQUFFLEtBQUtBLEVBQUUsSUFBSTdNLE1BQU1xQixVQUFVRSxNQUFNRCxLQUFLNEQsVUFBVSxJQUFNLFNBQVMwdEIsRUFBRy9sQixFQUFFZSxHQUFHN08sS0FBS3dWLEVBQUUxSCxFQUFFOU4sS0FBS2lRLEVBQUVwQixFQUFFN08sS0FBSzZPLEVBQUUsRUFBRTdPLEtBQUs4TixFQUFFLEtBQXdILFNBQVNnbUIsRUFBR2htQixFQUFFZSxHQUFHZixFQUFFbUMsRUFBRXBCLEdBQUcsSUFBSWYsRUFBRWUsSUFBSWYsRUFBRWUsSUFBSUEsRUFBRS9NLEtBQUtnTSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFZSxHQUFJLFNBQVNrbEIsSUFBSy96QixLQUFLNk8sRUFBRTdPLEtBQUs4TixFQUFFLEtBQW56QjZrQixFQUFHUyxFQUFHLFdBQVcsZUFBVSxFQUFzT3JpQixFQUFFd2YsRUFBRWhsQixPQUFPZ2xCLEVBQUVqdUIsVUFBVUksS0FBSyxjQUF3SXFPLEVBQUU0aUIsRUFBR3BELEdBQUdvRCxFQUFHcnhCLFVBQVVJLEtBQUssaUJBQTBLbXhCLEVBQUd2eEIsVUFBVXdELElBQUksV0FBVyxHQUFHLEVBQUU5RixLQUFLNk8sRUFBRSxDQUFDN08sS0FBSzZPLElBQUksSUFBSWYsRUFBRTlOLEtBQUs4TixFQUFFOU4sS0FBSzhOLEVBQUVBLEVBQUVoTSxLQUFLZ00sRUFBRWhNLEtBQUssVUFBVWdNLEVBQUU5TixLQUFLd1YsSUFBSSxPQUFPMUgsR0FBK0YsSUFBSWttQixFQUFHLElBQUlILEdBQUcsV0FBVyxPQUFPLElBQUlJLEtBQUksU0FBU25tQixHQUFHQSxFQUFFb0gsV0FBMkcsU0FBU2dmLElBQUssSUFBSXBtQixFQUFFcW1CLEdBQUd0bEIsRUFBRSxLQUEyRCxPQUF0RGYsRUFBRUEsSUFBSWUsRUFBRWYsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRWhNLEtBQUtnTSxFQUFFQSxJQUFJQSxFQUFFZSxFQUFFLE1BQU1BLEVBQUUvTSxLQUFLLE1BQWErTSxFQUFFLFNBQVNvbEIsSUFBS2owQixLQUFLOEIsS0FBSzlCLEtBQUs2TyxFQUFFN08sS0FBSzhOLEVBQUUsS0FBcE9pbUIsRUFBR3p4QixVQUFVMG1CLElBQUksU0FBU2xiLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUV3ZSxFQUFHbHVCLE1BQU0wUCxFQUFFelAsSUFBSStILEVBQUVlLEdBQUc3TyxLQUFLNk8sRUFBRTdPLEtBQUs2TyxFQUFFL00sS0FBSzBULEVBQUV4VixLQUFLOE4sRUFBRTBILEVBQUV4VixLQUFLNk8sRUFBRTJHLEdBQTJJeWUsRUFBRzN4QixVQUFVeUQsSUFBSSxTQUFTK0gsRUFBRWUsR0FBRzdPLEtBQUs4TixFQUFFQSxFQUFFOU4sS0FBSzZPLEVBQUVBLEVBQUU3TyxLQUFLOEIsS0FBSyxNQUFNbXlCLEVBQUczeEIsVUFBVTRTLE1BQU0sV0FBV2xWLEtBQUs4QixLQUFLOUIsS0FBSzZPLEVBQUU3TyxLQUFLOE4sRUFBRSxNQUFNLElBQUlzbUIsRUFBR256QixNQUFNcUIsVUFBVWdlLFFBQVEsU0FBU3hTLEVBQUVlLEdBQUcsT0FBTzVOLE1BQU1xQixVQUFVZ2UsUUFBUS9kLEtBQUt1TCxFQUFFZSxPQUFFLElBQVMsU0FBU2YsRUFBRWUsR0FBRyxHQUFHLGlCQUFrQmYsRUFBRSxNQUFNLGlCQUFrQmUsR0FBRyxHQUFHQSxFQUFFbE8sUUFBUSxFQUFFbU4sRUFBRXdTLFFBQVF6UixFQUFFLEdBQUcsSUFBSSxJQUFJMkcsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRW5OLE9BQU82VSxJQUFJLEdBQUdBLEtBQUsxSCxHQUFHQSxFQUFFMEgsS0FBSzNHLEVBQUUsT0FBTzJHLEVBQUUsT0FBTyxHQUFHaWQsRUFBRXh4QixNQUFNcUIsVUFBVXFELFFBQVEsU0FBU21JLEVBQUVlLEVBQUUyRyxHQUFHdlUsTUFBTXFCLFVBQVVxRCxRQUFRcEQsS0FBS3VMLEVBQUVlLEVBQUUyRyxJQUFJLFNBQVMxSCxFQUFFZSxFQUFFMkcsR0FBRyxJQUFJLElBQUkzSCxFQUFFQyxFQUFFbk4sT0FBT3FKLEVBQUUsaUJBQWtCOEQsRUFBRUEsRUFBRXFpQixNQUFNLElBQUlyaUIsRUFBRW1DLEVBQUUsRUFBRUEsRUFBRXBDLEVBQUVvQyxJQUFJQSxLQUFLakcsR0FBRzZFLEVBQUV0TSxLQUFLaVQsRUFBRXhMLEVBQUVpRyxHQUFHQSxFQUFFbkMsSUFFbHpEdW1CLEVBQUdwekIsTUFBTXFCLFVBQVVzSixPQUFPLFNBQVNrQyxFQUFFZSxHQUFHLE9BQU81TixNQUFNcUIsVUFBVXNKLE9BQU9ySixLQUFLdUwsRUFBRWUsT0FBRSxJQUFTLFNBQVNmLEVBQUVlLEdBQUcsSUFBSSxJQUFJMkcsRUFBRTFILEVBQUVuTixPQUFPa04sRUFBRSxHQUFHN0QsRUFBRSxFQUFFaUcsRUFBRSxpQkFBa0JuQyxFQUFFQSxFQUFFcWlCLE1BQU0sSUFBSXJpQixFQUFFRyxFQUFFLEVBQUVBLEVBQUV1SCxFQUFFdkgsSUFBSSxHQUFHQSxLQUFLZ0MsRUFBRSxDQUFDLElBQUlxZ0IsRUFBRXJnQixFQUFFaEMsR0FBR1ksRUFBRXRNLFVBQUssRUFBTyt0QixFQUFFcmlCLEVBQUVILEtBQUtELEVBQUU3RCxLQUFLc21CLEdBQUcsT0FBT3ppQixHQUFHeW1CLEVBQUdyekIsTUFBTXFCLFVBQVVyQyxJQUFJLFNBQVM2TixFQUFFZSxHQUFHLE9BQU81TixNQUFNcUIsVUFBVXJDLElBQUlzQyxLQUFLdUwsRUFBRWUsT0FBRSxJQUFTLFNBQVNmLEVBQUVlLEdBQUcsSUFBSSxJQUFJMkcsRUFBRTFILEVBQUVuTixPQUFPa04sRUFBRTVNLE1BQU11VSxHQUFHeEwsRUFBRSxpQkFBa0I4RCxFQUFFQSxFQUFFcWlCLE1BQU0sSUFBSXJpQixFQUFFbUMsRUFBRSxFQUFFQSxFQUFFdUYsRUFBRXZGLElBQUlBLEtBQUtqRyxJQUFJNkQsRUFBRW9DLEdBQUdwQixFQUFFdE0sVUFBSyxFQUFPeUgsRUFBRWlHLEdBQUdBLEVBQUVuQyxJQUFJLE9BQU9ELEdBQUdpbEIsRUFBRzd4QixNQUFNcUIsVUFBVWl5QixLQUFLLFNBQVN6bUIsRUFDdmZlLEdBQUcsT0FBTzVOLE1BQU1xQixVQUFVaXlCLEtBQUtoeUIsS0FBS3VMLEVBQUVlLE9BQUUsSUFBUyxTQUFTZixFQUFFZSxHQUFHLElBQUksSUFBSTJHLEVBQUUxSCxFQUFFbk4sT0FBT2tOLEVBQUUsaUJBQWtCQyxFQUFFQSxFQUFFcWlCLE1BQU0sSUFBSXJpQixFQUFFOUQsRUFBRSxFQUFFQSxFQUFFd0wsRUFBRXhMLElBQUksR0FBR0EsS0FBSzZELEdBQUdnQixFQUFFdE0sVUFBSyxFQUFPc0wsRUFBRTdELEdBQUdBLEVBQUU4RCxHQUFHLE9BQU0sRUFBRyxPQUFNLEdBQTRNLFNBQVNrbEIsRUFBR2xsQixFQUFFZSxHQUFHLE9BQU8sR0FBR3VsQixFQUFHdG1CLEVBQUVlLEdBQ2hhLFNBQVMybEIsRUFBRzFtQixFQUFFZSxHQUFhLElBQUkyRyxFQUErQyxPQUE1Q0EsRUFBRSxJQUFuQjNHLEVBQUV1bEIsRUFBR3RtQixFQUFFZSxNQUFtQjVOLE1BQU1xQixVQUFVaUwsT0FBT2hMLEtBQUt1TCxFQUFFZSxFQUFFLEdBQVUyRyxFQUFFLFNBQVNpZixFQUFHM21CLEVBQUVlLElBSHJHLFNBQVlmLEVBQUVlLEdBQUcsSUFBSSxJQUFJMkcsRUFBRSxpQkFBa0IxSCxFQUFFQSxFQUFFcWlCLE1BQU0sSUFBSXJpQixFQUFFRCxFQUFFQyxFQUFFbk4sT0FBTyxFQUFFLEdBQUdrTixJQUFJQSxFQUFFQSxLQUFLMkgsR0FBRzNHLEVBQUV0TSxVQUFLLEVBQU9pVCxFQUFFM0gsR0FBR0EsRUFBRUMsR0FHQTJpQixDQUFHM2lCLEdBQUUsU0FBU0QsRUFBRTdELEdBQUc2RSxFQUFFdE0sVUFBSyxFQUFPc0wsRUFBRTdELEVBQUU4RCxJQUFPN00sTUFBTXFCLFVBQVVpTCxPQUFPaEwsS0FBS3VMLEVBQUU5RCxFQUFFLEdBQUdySixVQUFjLFNBQVNveUIsRUFBR2psQixHQUFHLE9BQU83TSxNQUFNcUIsVUFBVWxDLE9BQU8rRSxNQUFNLEdBQUdnQixXQUFXLFNBQVN1dUIsRUFBRzVtQixHQUFHLElBQUllLEVBQUVmLEVBQUVuTixPQUFPLEdBQUcsRUFBRWtPLEVBQUUsQ0FBQyxJQUFJLElBQUkyRyxFQUFFdlUsTUFBTTROLEdBQUdoQixFQUFFLEVBQUVBLEVBQUVnQixFQUFFaEIsSUFBSTJILEVBQUUzSCxHQUFHQyxFQUFFRCxHQUFHLE9BQU8ySCxFQUFFLE1BQU0sR0FBSSxJQUFnUm1mLEVBQTVRekMsR0FBR2hlLE9BQU81UixVQUFVc3lCLEtBQUssU0FBUzltQixHQUFHLE9BQU9BLEVBQUU4bUIsUUFBUSxTQUFTOW1CLEdBQUcsTUFBTSxpQ0FBaUMrbUIsS0FBSy9tQixHQUFHLElBQUlnbkIsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBSzF0QixHQUFHLEtBQUsydEIsR0FBRyxLQUFLQyxHQUFHLFFBQVFDLEdBQUcsY0FBYyxTQUFTQyxHQUFFdG5CLEVBQUVlLEdBQUcsT0FBTyxHQUFHZixFQUFFd1MsUUFBUXpSLEdBQUcsU0FBU3dtQixHQUFHdm5CLEVBQUVlLEdBQUcsT0FBT2YsRUFBRWUsR0FBRyxFQUFFZixFQUFFZSxFQUFFLEVBQUUsRUFBVWYsRUFBRSxDQUFDLElBQUl3bkIsR0FBRzlFLEVBQUV4ZSxVQUFVLEdBQUdzakIsR0FBRyxDQUFDLElBQUlDLEdBQUdELEdBQUdFLFVBQVUsR0FBR0QsR0FBRyxDQUFDWixFQUFHWSxHQUFHLE1BQU16bkIsR0FBRzZtQixFQUFHLEdBQUcsU0FBU3prQixHQUFFcEMsR0FBRyxPQUFPc25CLEdBQUVULEVBQUc3bUIsR0FBSSxTQUFTMm5CLEdBQUczbkIsRUFBRWUsR0FBRyxJQUFJLElBQUkyRyxLQUFLMUgsRUFBRWUsRUFBRXRNLFVBQUssRUFBT3VMLEVBQUUwSCxHQUFHQSxFQUFFMUgsR0FBRyxTQUFTNG5CLEdBQUc1bkIsR0FBRyxJQUFJLElBQUllLEtBQUtmLEVBQUUsT0FBTSxFQUFHLE9BQU0sRUFBRyxTQUFTNm5CLEdBQUc3bkIsR0FBRyxJQUFTMEgsRUFBTDNHLEVBQUUsR0FBSyxJQUFJMkcsS0FBSzFILEVBQUVlLEVBQUUyRyxHQUFHMUgsRUFBRTBILEdBQUcsT0FBTzNHLEVBQUUsSUFBSSttQixHQUFHLGdHQUFnR3pGLE1BQU0sS0FBSyxTQUFTMEYsR0FBRS9uQixFQUFFZSxHQUFHLElBQUksSUFBSTJHLEVBQUUzSCxFQUFFN0QsRUFBRSxFQUFFQSxFQUFFN0QsVUFBVXhGLE9BQU9xSixJQUFJLENBQWdCLElBQUl3TCxLQUFuQjNILEVBQUUxSCxVQUFVNkQsR0FBYzhELEVBQUUwSCxHQUFHM0gsRUFBRTJILEdBQUcsSUFBSSxJQUFJdkYsRUFBRSxFQUFFQSxFQUFFMmxCLEdBQUdqMUIsT0FBT3NQLElBQUl1RixFQUFFb2dCLEdBQUczbEIsR0FBRzFPLE9BQU9lLFVBQVU4TCxlQUFlN0wsS0FBS3NMLEVBQUUySCxLQUFLMUgsRUFBRTBILEdBQUczSCxFQUFFMkgsS0FBTSxTQUFTc2dCLEdBQUdob0IsRUFBRWUsR0FBR2YsRUFBRSxDQUFDLElBQUksSUFBSTBILEVBQUUxSCxHQUFHQSxFQUFFaW9CLGNBQWNsb0IsRUFBRTJILElBQUlBLEVBQUV3Z0IsYUFBYXhnQixFQUFFeWdCLGNBQXFCLElBQVBwb0IsRUFBRUEsR0FBRzJpQixHQUFPMEYsU0FBU3JvQixFQUFFc29CLFNBQVMsQ0FBQyxJQUFJbnNCLEVBQUU2RCxFQUFFLE1BQU1DLEdBQUcsTUFBTUcsSUFBSWpFLEVBQUUsS0FBSyxHQUFHQSxRQUFHLElBQW9CQSxFQUFFNkUsTUFBTWYsS0FBS0EsYUFBYTlELEVBQUU2RSxNQUFNZixhQUFhOUQsRUFBRW1zQixVQUFVcm9CLGFBQWE5RCxFQUFFa3NCLFVBQVUsQ0FBQyxHQUFHcmxCLEVBQUUvQyxHQUFHLElBQUksSUFBSW1DLEVBQUVuQyxFQUFFckwsWUFBWTJ6QixhQUFhdG9CLEVBQUVyTCxZQUFZQyxNQUFNbkIsT0FBT2UsVUFBVXZDLFNBQVN3QyxLQUFLdUwsR0FBRyxNQUFNRyxHQUFHZ0MsRUFBRSx5Q0FBeUNBLE9BQUUsSUFBU25DLEVBQUUsWUFBWSxPQUFPQSxFQUFFLGNBQWNBLEVBQUU4bEIsRUFBRyxzRUFDN29EL2tCLEVBQUVvQixJQUFLLFNBQVNvbUIsR0FBR3ZvQixFQUFFZSxHQUFHN08sS0FBSzhOLEVBQUVBLElBQUl3b0IsSUFBSXpuQixHQUFHLEdBQUc3TyxLQUFLNk8sRUFBRTBuQixHQUE0SCxTQUFTQyxHQUFHMW9CLEdBQUcsT0FBR0EsYUFBYXVvQixJQUFJdm9CLEVBQUVyTCxjQUFjNHpCLElBQUl2b0IsRUFBRWUsSUFBSTBuQixHQUFVem9CLEVBQUVBLEdBQUU4bEIsRUFBRyx1Q0FBdUM5bEIsRUFBRSxLQUFXLG9CQUEzUHVvQixHQUFHL3pCLFVBQVVzdkIsSUFBRyxFQUFHeUUsR0FBRy96QixVQUFVcXZCLEdBQUcsV0FBVyxPQUFPM3hCLEtBQUs4TixHQUFHdW9CLEdBQUcvekIsVUFBVXZDLFNBQVMsV0FBVyxNQUFNLFNBQVNDLEtBQUs4TixFQUFFLEtBQTBKLElBQW9CMm9CLEdBQWhCRixHQUFHLEdBQUdELEdBQUcsR0FBVSxTQUFTSSxLQUFLLFFBQUcsSUFBU0QsR0FBRyxDQUFDLElBQUkzb0IsRUFBRSxLQUFLZSxFQUFFMmhCLEVBQUVtRyxhQUFhLEdBQUc5bkIsR0FBR0EsRUFBRStuQixhQUFhLENBQUMsSUFBSTlvQixFQUFFZSxFQUFFK25CLGFBQWEsWUFBWSxDQUFDQyxXQUFXMUUsRUFBRzJFLGFBQWEzRSxFQUFHNEUsZ0JBQWdCNUUsSUFBSyxNQUFNM2MsR0FBR2diLEVBQUV6WixTQUFTeVosRUFBRXpaLFFBQVFsUyxNQUFNMlEsRUFBRXZDLFNBQVN3akIsR0FBRzNvQixPQUFPMm9CLEdBQUczb0IsRUFBRSxPQUFPMm9CLEdBQUksU0FBU08sR0FBR2xwQixFQUFFZSxHQUFHN08sS0FBSzhOLEVBQUVlLElBQUlvb0IsR0FBR25wQixFQUFFLEdBQW9KLFNBQVNvcEIsR0FBR3BwQixHQUFHLE9BQUdBLGFBQWFrcEIsSUFBSWxwQixFQUFFckwsY0FBY3UwQixHQUFVbHBCLEVBQUVBLEdBQUU4bEIsRUFBRyxvREFBb0Q5bEIsRUFBRSxhQUFhd2pCLEVBQUd4akIsSUFBVSxpQ0FDbjVCLFNBQVNxcEIsR0FBR3JwQixFQUFFZSxHQUFHLElBQUkyRyxFQUFFZ2hCLEdBQUcxb0IsR0FBRyxJQUFJc3BCLEdBQUd4MEIsS0FBSzRTLEdBQUcsTUFBTWpLLE1BQU0sc0NBQXNDaUssR0FBZ1IsT0FDOVcsU0FBWTFILEdBQUcsSUFBSWUsRUFBRTZuQixLQUFnQyxPQUFPLElBQUlNLEdBQXRDbHBCLEVBQUVlLEVBQUVBLEVBQUVrb0IsZ0JBQWdCanBCLEdBQUdBLEVBQWtCbXBCLElBRGdUSSxDQUFwUnZwQixFQUFFMEgsRUFBRXJSLFFBQVFtekIsSUFBRyxTQUFTenBCLEVBQUU3RCxHQUFHLElBQUl6SSxPQUFPZSxVQUFVOEwsZUFBZTdMLEtBQUtzTSxFQUFFN0UsR0FBRyxNQUFNdUIsTUFBTSxrQkFBa0J2QixFQUFFLHlCQUF5QndMLEVBQUUsZ0RBQWdEblMsS0FBS0MsVUFBVXVMLElBQVcsT0FBUGhCLEVBQUVnQixFQUFFN0UsY0FBdUJxc0IsR0FBR0csR0FBRzNvQixHQUFHekssbUJBQW1COFEsT0FBT3JHLFFBRHNRbXBCLEdBQUcxMEIsVUFBVXN2QixJQUFHLEVBQUdvRixHQUFHMTBCLFVBQVVxdkIsR0FBRyxXQUFXLE9BQU8zeEIsS0FBSzhOLEVBQUUvTixZQUFZaTNCLEdBQUcxMEIsVUFBVXZDLFNBQVMsV0FBVyxNQUFNLHNCQUFzQkMsS0FBSzhOLEVBQUUsS0FDL1gsSUFBSXdwQixHQUFHLFlBQVlGLEdBQUcscUZBQXFGSCxHQUFHLEdBQy9aLFNBQVNNLEdBQUV6cEIsRUFBRWUsR0FBRzdPLEtBQUs4TixFQUFFZSxJQUFJMm9CLEdBQUcxcEIsRUFBRSxHQUFzSSxTQUFTMnBCLEdBQUczcEIsR0FBRyxPQUFHQSxhQUFheXBCLElBQUd6cEIsRUFBRXJMLGNBQWM4MEIsR0FBU3pwQixFQUFFQSxHQUFFOGxCLEVBQUcseUNBQXlDOWxCLEVBQUUsYUFBYXdqQixFQUFHeGpCLElBQVUsc0JBQTFReXBCLEdBQUVqMUIsVUFBVXN2QixJQUFHLEVBQUcyRixHQUFFajFCLFVBQVVxdkIsR0FBRyxXQUFXLE9BQU8zeEIsS0FBSzhOLEVBQUUvTixZQUFZdzNCLEdBQUVqMUIsVUFBVXZDLFNBQVMsV0FBVyxNQUFNLFdBQVdDLEtBQUs4TixFQUFFLEtBQzNPLElBQUk0cEIsR0FBRywwUEFBMFBDLEdBQUcscUNBQXFDQyxHQUFHLG1EQUM1UyxTQUFTQyxHQUFHL3BCLEdBQUcsR0FBR0EsYUFBYXlwQixHQUFFLE9BQU96cEIsRUFBOEMsR0FBNUNBLEVBQUUsaUJBQWlCQSxHQUFHQSxFQUFFOGpCLEdBQUc5akIsRUFBRTZqQixLQUFLemQsT0FBT3BHLEdBQU04cEIsR0FBR2gxQixLQUFLa0wsR0FBR0EsRUFBRSxJQUFJeXBCLEdBQUV6cEIsRUFBRTBwQixRQUFRLENBQTBDLElBQUkzb0IsR0FBakNmLEdBQVpBLEVBQUVvRyxPQUFPcEcsSUFBTzNKLFFBQVEsYUFBYSxLQUFZeWEsTUFBTStZLElBQUk3cEIsRUFBRWUsR0FBRzZvQixHQUFHOTBCLEtBQUtpTSxFQUFFLElBQUksSUFBSTBvQixHQUFFenBCLEVBQUUwcEIsSUFBSSxLQUFLLE9BQU8xcEIsRUFBRSxTQUFTZ3FCLEdBQUdocUIsR0FBRyxPQUFHQSxhQUFheXBCLEdBQVN6cEIsR0FBRUEsRUFBRSxpQkFBaUJBLEdBQUdBLEVBQUU4akIsR0FBRzlqQixFQUFFNmpCLEtBQUt6ZCxPQUFPcEcsR0FBRzhwQixHQUFHaDFCLEtBQUtrTCxLQUFLQSxFQUFFLDJCQUFrQyxJQUFJeXBCLEdBQUV6cEIsRUFBRTBwQixLQUFJLElBQUlBLEdBQUcsR0FBR08sR0FBRyxJQUFJUixHQUFFLDBCQUEwQkMsSUFBSSxTQUFTUSxHQUFHbHFCLEVBQUVlLEVBQUUyRyxHQUFHeFYsS0FBSzhOLEVBQUUwSCxJQUFJeWlCLEdBQUducUIsRUFBRSxHQUFHa3FCLEdBQUcxMUIsVUFBVXN2QixJQUFHLEVBQUdvRyxHQUFHMTFCLFVBQVVxdkIsR0FBRyxXQUFXLE9BQU8zeEIsS0FBSzhOLEVBQUUvTixZQUFZaTRCLEdBQUcxMUIsVUFBVXZDLFNBQVMsV0FBVyxNQUFNLFlBQVlDLEtBQUs4TixFQUFFLEtBQXFLLElBQUltcUIsR0FBRyxHQUFxTSxTQUFTQyxHQUFHcHFCLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBaUUsT0FBOURDLEVBQUVBLGFBQWF5cEIsR0FBRXpwQixFQUFFZ3FCLEdBQUdocUIsR0FBR2UsRUFBRUEsR0FBRzJoQixFQUFFaGIsRUFBRUEsYUFBYTZnQixHQUFHRyxHQUFHaGhCLEdBQUdBLEdBQUcsR0FBVTNHLEVBQUVnRSxLQUFLNGtCLEdBQUczcEIsR0FBRzBILEVBQUUzSCxPQUFFLEdBQVMsU0FBU3NxQixHQUFHcnFCLEVBQUVlLEdBQUcsSUFBSSxJQUFJMkcsRUFBRTFILEVBQUVxaUIsTUFBTSxNQUFNdGlCLEVBQUUsR0FBRzdELEVBQUUvSSxNQUFNcUIsVUFBVUUsTUFBTUQsS0FBSzRELFVBQVUsR0FBRzZELEVBQUVySixRQUFRLEVBQUU2VSxFQUFFN1UsUUFBUWtOLEdBQUcySCxFQUFFNGlCLFFBQVFwdUIsRUFBRW91QixRQUFRLE9BQU92cUIsRUFBRTJILEVBQUVuVixLQUFLLE1BQU0sU0FBU2c0QixHQUFHdnFCLEdBQXNTLE9BQW5TcW5CLEdBQUd2eUIsS0FBS2tMLE1BQU0sR0FBR0EsRUFBRXdTLFFBQVEsT0FBT3hTLEVBQUVBLEVBQUUzSixRQUFRMndCLEdBQUcsV0FBVyxHQUFHaG5CLEVBQUV3UyxRQUFRLE9BQU94UyxFQUFFQSxFQUFFM0osUUFBUTR3QixHQUFHLFVBQVUsR0FBR2puQixFQUFFd1MsUUFBUSxPQUFPeFMsRUFBRUEsRUFBRTNKLFFBQVE2d0IsR0FBRyxVQUFVLEdBQUdsbkIsRUFBRXdTLFFBQVEsT0FBT3hTLEVBQUVBLEVBQUUzSixRQUFRbUQsR0FBRyxZQUFZLEdBQUd3RyxFQUFFd1MsUUFBUSxPQUFPeFMsRUFBRUEsRUFBRTNKLFFBQVE4d0IsR0FBRyxXQUFXLEdBQUdubkIsRUFBRXdTLFFBQVEsUUFBVXhTLEVBQUVBLEVBQUUzSixRQUFRK3dCLEdBQUcsVUFBaUJwbkIsRUFBRyxTQUFTd3FCLEdBQUd4cUIsR0FBYyxPQUFYd3FCLEdBQUcsS0FBS3hxQixHQUFVQSxFQUFFd3FCLEdBQUcsS0FBS2pILEVBQThGLElBQXFSa0gsR0FDdDREenFCLEdBRHFuRDBxQixHQUFHdG9CLEdBQUUsU0FBU3VvQixHQUFHdm9CLEdBQUUsWUFBWUEsR0FBRSxRQUFRd29CLEdBQUd4b0IsR0FBRSxRQUFReW9CLEdBQUdELElBQUlELEdBQUdHLEdBQUcxb0IsR0FBRSxZQUFZa2xCLEdBQUVULEVBQUdwVixjQUFjLFlBQVlyUCxHQUFFLFlBQVlBLEdBQUUsWUFBWUEsR0FBRSxXQUFXQSxHQUFFLFFBQVEyb0IsR0FBR3pELEdBQUVULEVBQUdwVixjQUFjLFlBQVlyUCxHQUFFLFFBQVEsU0FBUzRvQixLQUFLLElBQUlockIsRUFBRTBpQixFQUFFOW1CLFNBQVMsT0FBT29FLEVBQUVBLEVBQUVpckIsa0JBQWEsRUFDMTVEanJCLEVBQUUsQ0FBQyxJQUFJa3JCLEdBQUcsR0FBR0MsSUFBa0JuckIsR0FBRTZtQixFQUFNaUUsR0FBUyxxQkFBcUIvRCxLQUFLL21CLElBQU00cUIsR0FBUyxrQkFBa0I3RCxLQUFLL21CLElBQU0ycUIsR0FBUyxtQ0FBbUM1RCxLQUFLL21CLElBQU0rcUIsR0FBUyxnQkFBZ0JoRSxLQUFLL21CLElBQU0wcUIsR0FBUyx5QkFBeUIzRCxLQUFLL21CLFNBQTFDLEdBQXFFLEdBQXJCbXJCLEtBQUtELEdBQUdDLEdBQUdBLEdBQUcsR0FBRyxJQUFPUixHQUFHLENBQUMsSUFBSVMsR0FBR0osS0FBSyxHQUFHLE1BQU1JLElBQUlBLEdBQUdDLFdBQVdILElBQUksQ0FBQ1QsR0FBR3JrQixPQUFPZ2xCLElBQUksTUFBTXByQixHQUFHeXFCLEdBQUdTLEdBQUcsSUFDMEhJLEdBRHRIQyxHQUFHLEdBQzFXLFNBQVNDLEdBQUd4ckIsR0FBRyxPQUZzaUQsU0FBWUEsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRTZqQixHQUFHLE9BQU85M0IsT0FBT2UsVUFBVThMLGVBQWU3TCxLQUFLaVQsRUFBRTFILEdBQUcwSCxFQUFFMUgsR0FBRzBILEVBQUUxSCxHQUFHZSxJQUVwbkQwcUIsQ0FBR3pyQixHQUFFLFdBQVcsSUFBSSxJQUFJZSxFQUFFLEVBQUUyRyxFQUFFMGMsR0FBR2hlLE9BQU9xa0IsS0FBS3BJLE1BQU0sS0FBS3RpQixFQUFFcWtCLEdBQUdoZSxPQUFPcEcsSUFBSXFpQixNQUFNLEtBQUtubUIsRUFBRXFOLEtBQUswVSxJQUFJdlcsRUFBRTdVLE9BQU9rTixFQUFFbE4sUUFBUXNQLEVBQUUsRUFBRSxHQUFHcEIsR0FBR29CLEVBQUVqRyxFQUFFaUcsSUFBSSxDQUFDLElBQUloQyxFQUFFdUgsRUFBRXZGLElBQUksR0FBR3FnQixFQUFFemlCLEVBQUVvQyxJQUFJLEdBQUcsRUFBRSxDQUFxRixHQUFwRmhDLEVBQUUsaUJBQWlCNG1CLEtBQUs1bUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUlxaUIsRUFBRSxpQkFBaUJ1RSxLQUFLdkUsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQU8sR0FBR3JpQixFQUFFLEdBQUd0TixRQUFRLEdBQUcydkIsRUFBRSxHQUFHM3ZCLE9BQU8sTUFBTWtPLEVBQUV3bUIsR0FBRyxHQUFHcG5CLEVBQUUsR0FBR3ROLE9BQU8sRUFBRTY0QixTQUFTdnJCLEVBQUUsR0FBRyxJQUFJLEdBQUdxaUIsRUFBRSxHQUFHM3ZCLE9BQU8sRUFBRTY0QixTQUFTbEosRUFBRSxHQUFHLE1BQU0rRSxHQUFHLEdBQUdwbkIsRUFBRSxHQUFHdE4sT0FBTyxHQUFHMnZCLEVBQUUsR0FBRzN2QixTQUFTMDBCLEdBQUdwbkIsRUFBRSxHQUFHcWlCLEVBQUUsSUFBSXJpQixFQUFFQSxFQUFFLEdBQUdxaUIsRUFBRUEsRUFBRSxTQUFTLEdBQUd6aEIsR0FBRyxPQUFPLEdBQUdBLEtBQ2xkMmhCLEVBQUU5bUIsVUFBVSt1QixHQUFnQlcsR0FBTE4sTUFBY1UsU0FBU2pCLEdBQUcsVUFBSyxFQUFZYSxRQUFHLEVBQU8sSUFBSUssR0FBR0wsR0FBRyxJQUFJLElBQUs1bUIsS0FBS2tuQixnQkFBZ0IsRUFBRSxHQUFJQyxXQUFXLE1BQU0sTUFBTTdyQixLQUFJLElBQUk4ckIsSUFBSW5CLElBQUksR0FBR25YLE9BQU9tWSxJQUFJLFNBQVNJLEdBQUcvckIsR0FBRyxJQUFJZSxFQUFFbkYsU0FBUyxNQUFNLGlCQUFrQm9FLEVBQUVlLEVBQUVpckIsZUFBZWhzQixHQUFHQSxFQUFFLFNBQVNpc0IsR0FBR2pzQixFQUFFZSxHQUFHNG1CLEdBQUc1bUIsR0FBRSxTQUFTMkcsRUFBRTNILEdBQUcySCxHQUFHLGlCQUFpQkEsR0FBR0EsRUFBRW9jLEtBQUtwYyxFQUFFQSxFQUFFbWMsTUFBTSxTQUFTOWpCLEVBQUVDLEVBQUUvQyxNQUFNa0IsUUFBUXVKLEVBQUUsU0FBUzNILEVBQUVDLEVBQUVrc0IsVUFBVXhrQixFQUFFLE9BQU8zSCxFQUFFQyxFQUFFbXNCLFFBQVF6a0IsRUFBRTBrQixHQUFHOXJCLGVBQWVQLEdBQUdDLEVBQUV6QyxhQUFhNnVCLEdBQUdyc0IsR0FBRzJILEdBQUcsR0FBRzNILEVBQUVzc0IsWUFBWSxRQUFRLElBQUksR0FBR3RzQixFQUFFc3NCLFlBQVksUUFBUSxHQUFHcnNCLEVBQUV6QyxhQUFhd0MsRUFBRTJILEdBQUcxSCxFQUFFRCxHQUFHMkgsS0FDdGhCLElBRTRnQjRrQixHQUU3RkMsR0FKM2FILEdBQUcsQ0FBQ0ksWUFBWSxjQUFjQyxZQUFZLGNBQWNDLFFBQVEsVUFBVUMsWUFBWSxjQUFjQyxPQUFPLFNBQVNDLFVBQVUsWUFBWXp2QixNQUFNLFFBQVEwdkIsS0FBSyxPQUFPQyxRQUFRLFVBQVVoakIsS0FBSyxPQUFPaWpCLE9BQU8sU0FBU0MsT0FBTyxTQUFTQyxNQUFNLFNBRTVPLFNBQVNDLEdBQUdudEIsRUFBRWUsRUFBRTJHLEdBQUcsU0FBUzNILEVBQUV5aUIsR0FBR0EsR0FBR3poQixFQUFFckQsWUFBWSxpQkFBa0I4a0IsRUFBRXhpQixFQUFFM0IsZUFBZW1rQixHQUFHQSxHQUFHLElBQUksSUFBSXRtQixFQUFFLEVBQUVBLEVBQUV3TCxFQUFFN1UsT0FBT3FKLElBQUksQ0FBQyxJQUFJaUcsRUFBRXVGLEVBQUV4TCxHQUFHLElBQUl1bkIsRUFBR3RoQixJQUFJWSxFQUFFWixJQUFJLEVBQUVBLEVBQUVpckIsU0FBU3J0QixFQUFFb0MsT0FBTyxDQUFDbkMsRUFBRSxDQUFDLEdBQUdtQyxHQUFHLGlCQUFpQkEsRUFBRXRQLE9BQU8sQ0FBQyxHQUFHa1EsRUFBRVosR0FBRyxDQUFDLElBQUloQyxFQUFFLG1CQUFtQmdDLEVBQUUvUCxNQUFNLGlCQUFpQitQLEVBQUUvUCxLQUFLLE1BQU00TixFQUFFLEdBQUcwakIsRUFBR3ZoQixHQUFHLENBQUNoQyxFQUFFLG1CQUFtQmdDLEVBQUUvUCxLQUFLLE1BQU00TixHQUFHRyxHQUFFLEVBQUd3a0IsRUFBRXhrQixFQUFFeW1CLEVBQUd6a0IsR0FBR0EsRUFBRXBDLEtBQUssU0FBU3N0QixHQUFHcnRCLEVBQUVlLEdBQTRFLE9BQXpFQSxFQUFFcUYsT0FBT3JGLEdBQUcsMEJBQTBCZixFQUFFc3RCLGNBQWN2c0IsRUFBRUEsRUFBRTBRLGVBQXNCelIsRUFBRTlDLGNBQWM2RCxHQUFJLFNBQVN3c0IsR0FBR3Z0QixHQUFHMGlCLEVBQUUvTSxZQUFXLFdBQVcsTUFBTTNWLElBQUksR0FFakosU0FBU3d0QixHQUFHeHRCLEVBQUVlLEdBQUd3ckIsSUFBNkMsV0FBYyxHQUFHN0osRUFBRWpzQixTQUFTaXNCLEVBQUVqc0IsUUFBUUMsUUFBUSxDQUFDLElBQUlzSixFQUFFMGlCLEVBQUVqc0IsUUFBUUMsYUFBUSxHQUFRNjFCLEdBQUcsV0FBV3ZzQixFQUFFMUksS0FBS20yQixVQUFVbEIsR0FBRyxXQUFXLElBQUl4ckIsRUFBRTBzQixJQUFJL0osRUFBR2hCLEVBQUVnTCxlQUFlaEwsRUFBRWlMLFFBQVFqTCxFQUFFaUwsT0FBT241QixZQUFZNE4sR0FBRSxTQUFTc2dCLEVBQUVpTCxPQUFPbjVCLFVBQVVrNUIsY0FBY2hMLEVBQUVnTCxjQUFjcEIsS0FBS0EsR0FENXFCLFdBQWMsSUFBSXRzQixFQUFFMGlCLEVBQUVrTCxlQUNxRixRQUR0RSxJQUFxQjV0QixHQUFHLG9CQUFxQmxFLFFBQVFBLE9BQU8rYSxhQUFhL2EsT0FBT3FpQixtQkFBbUIvYixHQUFFLFlBQVlwQyxFQUFFLFdBQVcsSUFBSTlELEVBQUVteEIsR0FBR3p4QixTQUFTLFVBQVVNLEVBQUVlLE1BQU00d0IsUUFBUSxPQUFPanlCLFNBQVNreUIsZ0JBQWdCcHdCLFlBQVl4QixHQUFHLElBQUlpRyxFQUFFakcsRUFBRTZ4QixlQUFjN3hCLEVBQUVpRyxFQUFFdkcsVUFBV21KLE9BQU83SSxFQUFFOEksUUFBUSxJQUFJN0UsRUFBRSxnQkFBZ0JvSixLQUFLSSxTQUFTNlksRUFBRSxTQUFTcmdCLEVBQUUxQixTQUFTdXRCLFNBQVMsSUFBSTdyQixFQUFFMUIsU0FBU3V0QixTQUFTLEtBQUs3ckIsRUFBRTFCLFNBQVN3dEIsS0FBSy94QixFQUFFK25CLEdBQUUsU0FBUzF2QixHQUFPLEtBQUtpdUIsR0FBR2p1QixFQUFFMjVCLFFBQVExTCxHQUFJanVCLEVBQUVrQixNQUFNMEssR0FBRWpPLEtBQUtpOEIsTUFBTTlXLGNBQWFubEIsTUFDaGZpUSxFQUFFZ2MsaUJBQWlCLFVBQVVqaUIsR0FBRSxHQUFJaEssS0FBS2k4QixNQUFNLEdBQUdqOEIsS0FBS2s4QixNQUFNLENBQUN2WCxZQUFZLFdBQVcxVSxFQUFFMFUsWUFBWTFXLEVBQUVxaUIsWUFBVSxJQUFxQnhpQixJQUFJb0MsR0FBRSxhQUFhQSxHQUFFLFFBQVEsQ0FBQyxJQUFJckIsRUFBRSxJQUFJZixFQUFFMEgsRUFBRSxHQUFHM0gsRUFBRTJILEVBQXVGLE9BQXJGM0csRUFBRW90QixNQUFNOVcsVUFBVSxXQUFXLFFBQUcsSUFBUzNQLEVBQUUxVCxLQUFLLENBQVUsSUFBSWtJLEdBQWJ3TCxFQUFFQSxFQUFFMVQsTUFBYTQxQixHQUFHbGlCLEVBQUVraUIsR0FBRyxLQUFLMXRCLE1BQWEsU0FBU0EsR0FBRzZELEVBQUUvTCxLQUFLLENBQUM0MUIsR0FBRzF0QixHQUFHNkQsRUFBRUEsRUFBRS9MLEtBQUsrTSxFQUFFcXRCLE1BQU12WCxZQUFZLElBQUksT0FBTyxTQUFTM2EsR0FBR3dtQixFQUFFL00sV0FBV3paLEVBQUUsSUFBZ1VteUIsSUFBTS9CLEdBQUd2ckIsSUFBSTJoQixFQUFFZ0wsYUFBYTNzQixJQUFsVXV0QixHQUFLQyxLQUFLaEMsS0FBS2dDLElBQUcsR0FBSWxJLEdBQUduTCxJQUFJbGIsRUFBRWUsR0FBdVMsSUFBSXd0QixJQUFHLEVBQUdsSSxHQUFHLElBQUlKLEVBQUcsU0FBU3dILEtBQUssSUFBSSxJQUFJenRCLEVBQUVBLEVBQUVvbUIsS0FBTSxDQUFDLElBQUlwbUIsRUFBRUEsRUFBRXZMLEtBQUt1TCxFQUFFZSxHQUFHLE1BQU1BLEdBQUd3c0IsR0FBR3hzQixHQUFHaWxCLEVBQUdFLEVBQUdsbUIsR0FBR3V1QixJQUFHLEVBQUksU0FBU0MsR0FBRXh1QixFQUFFZSxHQUFzRSxHQUFuRTdPLEtBQUs4TixFQUFFeXVCLEdBQUd2OEIsS0FBS00sT0FBRSxFQUFPTixLQUFLaVEsRUFBRWpRLEtBQUs2TyxFQUFFN08sS0FBS3dWLEVBQUUsS0FBS3hWLEtBQUtpTyxFQUFFak8sS0FBS3N3QixHQUFFLEVBQU14aUIsR0FBR3VqQixFQUFHLElBQUksSUFBSTdiLEVBQUV4VixLQUFLOE4sRUFBRXZMLEtBQUtzTSxHQUFFLFNBQVNoQixHQUFHMnVCLEdBQUdobkIsRUFBRWluQixHQUFHNXVCLE1BQUksU0FBU0EsR0FBRyxLQUFLQSxhQUFhNnVCLElBQUksSUFBSSxHQUFHN3VCLGFBQWF0QyxNQUFNLE1BQU1zQyxFQUFFLE1BQU10QyxNQUFNLHFCQUFzQixNQUFNdkIsSUFBSXd5QixHQUFHaG5CLEVBQUVtbkIsR0FBRzl1QixNQUFLLE1BQU1BLEdBQUcydUIsR0FBR3g4QixLQUFLMjhCLEdBQUc5dUIsSUFBSSxJQUFJMHVCLEdBQUcsRUFBRUUsR0FBRyxFQUFFRSxHQUFHLEVBQUUsU0FBU0MsS0FBSzU4QixLQUFLOEIsS0FBSzlCLEtBQUtpUSxFQUFFalEsS0FBSzZPLEVBQUU3TyxLQUFLaU8sRUFBRWpPLEtBQUs4TixFQUFFLEtBQUs5TixLQUFLd1YsR0FBRSxFQUFHb25CLEdBQUd0NkIsVUFBVTRTLE1BQU0sV0FBV2xWLEtBQUtpUSxFQUFFalEsS0FBSzZPLEVBQUU3TyxLQUFLaU8sRUFBRWpPLEtBQUs4TixFQUFFLEtBQUs5TixLQUFLd1YsR0FBRSxHQUFJLElBQUlxbkIsR0FBRyxJQUFJaEosR0FBRyxXQUFXLE9BQU8sSUFBSStJLE1BQUksU0FBUzl1QixHQUFHQSxFQUFFb0gsV0FDNXlDLFNBQVM0bkIsR0FBR2h2QixFQUFFZSxFQUFFMkcsR0FBRyxJQUFJM0gsRUFBRWd2QixHQUFHLzJCLE1BQXdCLE9BQWxCK0gsRUFBRUksRUFBRUgsRUFBRUQsRUFBRWdCLEVBQUVBLEVBQUVoQixFQUFFb0MsRUFBRXVGLEVBQVMzSCxFQUFFLFNBQVNrdkIsR0FBRWp2QixHQUFHLEdBQUdBLGFBQWF3dUIsR0FBRSxPQUFPeHVCLEVBQUUsSUFBSWUsRUFBRSxJQUFJeXRCLEdBQUVqTCxHQUFlLE9BQVhtTCxHQUFHM3RCLEVBQUU0dEIsR0FBRzN1QixHQUFVZSxFQUFFLFNBQVNtdUIsR0FBRWx2QixHQUFHLE9BQU8sSUFBSXd1QixJQUFFLFNBQVN6dEIsRUFBRTJHLEdBQUdBLEVBQUUxSCxNQUFLLFNBQVNtdkIsR0FBR252QixFQUFFZSxFQUFFMkcsR0FBRzBuQixHQUFHcHZCLEVBQUVlLEVBQUUyRyxFQUFFLE9BQU84bEIsR0FBR3RKLEVBQUduakIsRUFBRWYsSUFDck8sU0FBU3F2QixHQUFHcnZCLEdBQUcsT0FBTyxJQUFJd3VCLElBQUUsU0FBU3p0QixHQUFHLElBQUkyRyxFQUFFMUgsRUFBRW5OLE9BQU9rTixFQUFFLEdBQUcsR0FBRzJILEVBQUUsSUFBSSxJQUFJeEwsRUFBRSxTQUFTc21CLEVBQUVqdUIsRUFBRTZDLEdBQUdzUSxJQUFJM0gsRUFBRXlpQixHQUFHanVCLEVBQUUsQ0FBQys2QixJQUFHLEVBQUdwN0IsTUFBTWtELEdBQUcsQ0FBQ2s0QixJQUFHLEVBQUd6TixPQUFPenFCLEdBQUcsR0FBR3NRLEdBQUczRyxFQUFFaEIsSUFBSW9DLEVBQUUsRUFBSUEsRUFBRW5DLEVBQUVuTixPQUFPc1AsSUFBV2d0QixHQUFMbnZCLEVBQUVtQyxHQUFRK2hCLEVBQUdob0IsRUFBRWlHLEdBQUUsR0FBSStoQixFQUFHaG9CLEVBQUVpRyxHQUFFLFNBQVVwQixFQUFFaEIsTUFDNUgsU0FBU3d2QixHQUFHdnZCLEVBQUVlLEdBQUcsR0FBR2YsRUFBRUEsR0FBR3l1QixHQUFHLEdBQUd6dUIsRUFBRTBILEVBQUUsQ0FBQyxJQUFJQSxFQUFFMUgsRUFBRTBILEVBQUUsR0FBR0EsRUFBRTNHLEVBQUUsQ0FBQyxJQUFJLElBQUloQixFQUFFLEVBQUU3RCxFQUFFLEtBQUtpRyxFQUFFLEtBQUtoQyxFQUFFdUgsRUFBRTNHLEVBQUVaLElBQUlBLEVBQUV1SCxJQUFJM0gsSUFBSUksRUFBRUgsR0FBR0EsSUFBSTlELEVBQUVpRSxLQUFLakUsR0FBRyxFQUFFNkQsS0FBS0ksRUFBRUEsRUFBRW5NLEtBQUtrSSxJQUFJaUcsRUFBRWhDLEdBQUdqRSxJQUFJd0wsRUFBRTFILEdBQUd5dUIsSUFBSSxHQUFHMXVCLEVBQUV3dkIsR0FBRzduQixFQUFFM0csSUFBSW9CLElBQUdwQyxFQUFFb0MsR0FBSW5PLE1BQU0wVCxFQUFFdkYsSUFBSXVGLEVBQUV2RixFQUFFcEMsR0FBR0EsRUFBRS9MLEtBQUsrTCxFQUFFL0wsS0FBS0EsTUFBTXc3QixHQUFHOW5CLEdBQUcrbkIsR0FBRy9uQixFQUFFeEwsRUFBRTJ5QixHQUFHOXRCLEtBQUtmLEVBQUUwSCxFQUFFLFVBQVVnbkIsR0FBRzF1QixFQUFFNnVCLEdBQUc5dEIsR0FBRyxTQUFTMnVCLEdBQUcxdkIsRUFBRWUsR0FBR2YsRUFBRWUsR0FBR2YsRUFBRUEsR0FBRzJ1QixJQUFJM3VCLEVBQUVBLEdBQUc2dUIsSUFBSWMsR0FBRzN2QixHQUFHQSxFQUFFbUMsRUFBRW5DLEVBQUVtQyxFQUFFbk8sS0FBSytNLEVBQUVmLEVBQUVlLEVBQUVBLEVBQUVmLEVBQUVtQyxFQUFFcEIsRUFDdGEsU0FBUzZ1QixHQUFHNXZCLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxJQUFJN0QsRUFBRTh5QixHQUFHLEtBQUssS0FBSyxNQUErTSxPQUF6TTl5QixFQUFFOEQsRUFBRSxJQUFJd3VCLElBQUUsU0FBU3JzQixFQUFFaEMsR0FBR2pFLEVBQUVpRSxFQUFFWSxFQUFFLFNBQVN5aEIsR0FBRyxJQUFJLElBQUlqdUIsRUFBRXdNLEVBQUV0TSxLQUFLc0wsRUFBRXlpQixHQUFHcmdCLEVBQUU1TixHQUFHLE1BQU02QyxHQUFHK0ksRUFBRS9JLEtBQUsrSyxFQUFFakcsRUFBRTZFLEVBQUUyRyxFQUFFLFNBQVM4YSxHQUFHLElBQUksSUFBSWp1QixFQUFFbVQsRUFBRWpULEtBQUtzTCxFQUFFeWlCLFFBQUcsSUFBU2p1QixHQUFHaXVCLGFBQWFvTSxHQUFHenVCLEVBQUVxaUIsR0FBR3JnQixFQUFFNU4sR0FBRyxNQUFNNkMsR0FBRytJLEVBQUUvSSxLQUFLK0ksS0FBSWpFLEVBQUU4RCxFQUFFMEgsRUFBRTFILEVBQUUwdkIsR0FBRzF2QixFQUFFOUQsR0FBVUEsRUFBRThELEVBQ2hRLFNBQVMwdUIsR0FBRzF1QixFQUFFZSxFQUFFMkcsR0FBRzFILEVBQUVBLEdBQUd5dUIsS0FBS3p1QixJQUFJMEgsSUFBSTNHLEVBQUU4dEIsR0FBR25uQixFQUFFLElBQUkxUyxVQUFVLHFDQUFxQ2dMLEVBQUVBLEVBQUUsRUFBRW92QixHQUFHMW5CLEVBQUUxSCxFQUFFNnZCLEdBQUc3dkIsRUFBRTh2QixHQUFHOXZCLEtBQUtBLEVBQUV4TixFQUFFa1YsRUFBRTFILEVBQUVBLEVBQUVlLEVBQUVmLEVBQUUwSCxFQUFFLEtBQUtpb0IsR0FBRzN2QixHQUFHZSxHQUFHOHRCLElBQUlubkIsYUFBYWtuQixJQUUyRCxTQUFZNXVCLEVBQUVlLEdBQUdmLEVBQUVHLEdBQUUsRUFBR3F0QixJQUFHLFdBQVd4dEIsRUFBRUcsR0FBRzR2QixHQUFHdDdCLEtBQUssS0FBS3NNLE1BRi9HaXZCLENBQUdod0IsRUFBRTBILEtBQUssU0FBUzBuQixHQUFHcHZCLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxHQUFHQyxhQUFhd3VCLEdBQUUsT0FBT2tCLEdBQUcxdkIsRUFBRWd2QixHQUFHanVCLEdBQUd3aUIsRUFBRzdiLEdBQUcsS0FBSzNILEtBQUksRUFBRyxHQUFHMmxCLEVBQUcxbEIsR0FBRyxPQUFPQSxFQUFFMUksS0FBS3lKLEVBQUUyRyxFQUFFM0gsSUFBRyxFQUFHLEdBQUdnRCxFQUFFL0MsR0FBRyxJQUFJLElBQUk5RCxFQUFFOEQsRUFBRTFJLEtBQUssR0FBR29zQixFQUFHeG5CLEdBQUcsT0FDcFUsU0FBWThELEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsU0FBU2lHLEVBQUU1TixHQUFHaXVCLElBQUlBLEdBQUUsRUFBR3ppQixFQUFFdEwsS0FBS3lILEVBQUUzSCxJQUF3QyxJQUFJaXVCLEdBQUUsRUFBRyxJQUFJemhCLEVBQUV0TSxLQUFLdUwsR0FBeEQsU0FBV3pMLEdBQUdpdUIsSUFBSUEsR0FBRSxFQUFHOWEsRUFBRWpULEtBQUt5SCxFQUFFM0gsTUFBNEI0TixHQUFHLE1BQU01TixHQUFHNE4sRUFBRTVOLElBRHNNMDdCLENBQUdqd0IsRUFBRTlELEVBQUU2RSxFQUFFMkcsRUFBRTNILElBQUcsRUFBRyxNQUFNb0MsR0FBRyxPQUFPdUYsRUFBRWpULEtBQUtzTCxFQUFFb0MsSUFBRyxFQUFHLE9BQU0sRUFDeFAsU0FBU3d0QixHQUFHM3ZCLEdBQUdBLEVBQUV3aUIsSUFBSXhpQixFQUFFd2lCLEdBQUUsRUFBR2dMLEdBQUd4dEIsRUFBRXdyQixHQUFHeHJCLElBQUksU0FBU3d2QixHQUFHeHZCLEdBQUcsSUFBSWUsRUFBRSxLQUF5RCxPQUFwRGYsRUFBRWUsSUFBSUEsRUFBRWYsRUFBRWUsRUFBRWYsRUFBRWUsRUFBRUEsRUFBRS9NLEtBQUsrTSxFQUFFL00sS0FBSyxNQUFNZ00sRUFBRWUsSUFBSWYsRUFBRW1DLEVBQUUsTUFBYXBCLEVBQ3RRLFNBQVMwdUIsR0FBR3p2QixFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUcsR0FBRzJILEdBQUdtbkIsSUFBSTl0QixFQUFFQSxJQUFJQSxFQUFFMkcsRUFBRSxLQUFLMUgsR0FBR0EsRUFBRUcsRUFBRUgsRUFBRUEsRUFBRTBILEVBQUUxSCxFQUFFRyxHQUFFLEVBQUcsR0FBR1ksRUFBRWYsRUFBRWUsRUFBRWYsRUFBRTBILEVBQUUsS0FBS3dvQixHQUFHbnZCLEVBQUUyRyxFQUFFM0gsUUFBUSxJQUFJZ0IsRUFBRTJHLEVBQUUzRyxFQUFFWixFQUFFMUwsS0FBS3NNLEVBQUVvQixHQUFHK3RCLEdBQUdudkIsRUFBRTJHLEVBQUUzSCxHQUFHLE1BQU03RCxHQUFHNnpCLEdBQUd0N0IsS0FBSyxLQUFLeUgsR0FBRzhwQixFQUFHK0ksR0FBR2h1QixHQUFHLFNBQVNtdkIsR0FBR2x3QixFQUFFZSxFQUFFMkcsR0FBRzNHLEdBQUc0dEIsR0FBRzN1QixFQUFFRyxFQUFFMUwsS0FBS3VMLEVBQUVtQyxFQUFFdUYsR0FBRzFILEVBQUVlLEdBQUdmLEVBQUVlLEVBQUV0TSxLQUFLdUwsRUFBRW1DLEVBQUV1RixHQUxUOG1CLEdBQUVoNkIsVUFBVThDLEtBQUssU0FBUzBJLEVBQUVlLEVBQUUyRyxHQUFHLE9BQU9rb0IsR0FBRzE5QixLQUFLd3hCLEVBQUcxakIsR0FBR0EsRUFBRSxLQUFLMGpCLEVBQUczaUIsR0FBR0EsRUFBRSxLQUFLMkcsSUFBSThtQixHQUFFaDZCLFVBQVVteEIsZ0JBQWUsR0FBR3JpQixFQUFFa3JCLEdBQUVoNkIsV0FBWWl2QixHQUFHLFNBQVN6akIsRUFBRWUsR0FBaUMsT0FBOUJmLEVBQUVndkIsR0FBR2h2QixFQUFFQSxFQUFFZSxJQUFLMkcsR0FBRSxFQUFHZ29CLEdBQUd4OUIsS0FBSzhOLEdBQVU5TixNQUFNb1IsRUFBRTlCLEVBQUUsU0FBU3hCLEVBQUVlLEdBQUcsT0FBTzZ1QixHQUFHMTlCLEtBQUssS0FBSzhOLEVBQUVlLElBQ3ZidUMsRUFBRTZzQixPQUFPLFNBQVNud0IsR0FBRyxHQUFHOU4sS0FBSzhOLEdBQUd5dUIsR0FBRyxDQUFDLElBQUkxdEIsRUFBRSxJQUFJNnRCLEdBQUc1dUIsR0FBR3d0QixJQUFHLFdBQVcrQixHQUFHcjlCLEtBQUs2TyxLQUFJN08sUUFDb0xvUixFQUFFdXNCLEdBQUcsU0FBUzd2QixHQUFHOU4sS0FBSzhOLEVBQUV5dUIsR0FBR0MsR0FBR3g4QixLQUFLeThCLEdBQUczdUIsSUFBSXNELEVBQUV3c0IsR0FBRyxTQUFTOXZCLEdBQUc5TixLQUFLOE4sRUFBRXl1QixHQUFHQyxHQUFHeDhCLEtBQUsyOEIsR0FBRzd1QixJQUUxRXNELEVBQUVrb0IsR0FBRyxXQUFXLElBQUksSUFBSXhyQixFQUFFQSxFQUFFd3ZCLEdBQUd0OUIsT0FBT3U5QixHQUFHdjlCLEtBQUs4TixFQUFFOU4sS0FBSzhOLEVBQUU5TixLQUFLTSxHQUFHTixLQUFLc3dCLEdBQUUsR0FDOUMsSUFBSXVOLEdBQUd4QyxHQUFHLFNBQVNxQixHQUFHNXVCLEdBQUd5aUIsRUFBRWh1QixLQUFLdkMsS0FBSzhOLEdBQXNDLFNBQVNvd0IsS0FBSyxHQUFHQyxLQUFLQyxHQUFHM00sRUFBR3p4QixPQUFPQSxNQUFNQSxLQUFLNHdCLEdBQUc1d0IsS0FBSzR3QixHQUFHNXdCLEtBQUt3eEIsR0FBR3h4QixLQUFLd3hCLEdBQXpHemdCLEVBQUUyckIsR0FBR25NLEdBQUdtTSxHQUFHcDZCLFVBQVVJLEtBQUssU0FBa0YsSUFBSXk3QixHQUFHLEVBQUVDLEdBQUcsR0FBc0IsU0FBU0MsR0FBR3Z3QixHQUFHLElBQUlBLEVBQUU4aUIsS0FBSzlpQixFQUFFOGlCLElBQUcsRUFBRzlpQixFQUFFNmtCLEtBQUssR0FBR3dMLElBQUksQ0FBQyxJQUFJdHZCLEVBQUU0aUIsRUFBRzNqQixHQUFHLEdBQUcsR0FBR3F3QixJQUFJcndCLEVBQUUwakIsSUFBSSxFQUFFMWpCLEVBQUUwakIsR0FBRzd3QixPQUFPLE1BQU00SyxNQUFNdUMsRUFBRSw4SkFBOEpzd0IsR0FBR3Z2QixJQUE3UnF2QixHQUFHNTdCLFVBQVVzdUIsSUFBRyxFQUFpUnNOLEdBQUc1N0IsVUFBVXF3QixHQUFHLFdBQVcsR0FBRzN5QixLQUFLd3hCLEdBQUcsS0FBS3h4QixLQUFLd3hCLEdBQUc3d0IsUUFBUVgsS0FBS3d4QixHQUFHNEcsT0FBUnA0QixJQUFtQixJQUFJcytCLEdBQUcvOEIsT0FBT2c5QixRQUFRLFNBQVN6d0IsR0FBRyxPQUFPQSxHQUFPNnZCLElBQUlsRixJQUFJLEdBQUduWCxPQUFPbVksSUFBSW1FLEdBQUduRixLQUFLYSxHQUFHLEtBQUtrRixHQUFHLFdBQVcsSUFBSWhPLEVBQUV2RSxtQkFBbUIxcUIsT0FBT3NFLGVBQWUsT0FBTSxFQUFHLElBQUlpSSxHQUFFLEVBQUdlLEVBQUV0TixPQUFPc0UsZUFBZSxHQUFHLFVBQVUsQ0FBQ0MsSUFBSSxXQUFXZ0ksR0FBRSxLQUFNLElBQUkwaUIsRUFBRXZFLGlCQUFpQixPQUFPb0YsRUFBR3hpQixHQUFHMmhCLEVBQUVpTyxvQkFBb0IsT0FBT3BOLEVBQUd4aUIsR0FBRyxNQUFNMkcsSUFBSSxPQUFPMUgsRUFBak8sR0FBc08sU0FBUzR3QixHQUFFNXdCLEVBQUVlLEdBQUc3TyxLQUFLNlgsS0FBSy9KLEVBQUU5TixLQUFLNk8sRUFBRTdPLEtBQUt3SixPQUFPcUYsRUFBRTdPLEtBQUsyK0Isa0JBQWlCLEVBQW1FLFNBQVNDLEdBQUc5d0IsRUFBRWUsR0FBNlAsR0FBMVA2dkIsR0FBRW44QixLQUFLdkMsS0FBSzhOLEVBQUVBLEVBQUUrSixLQUFLLElBQUk3WCxLQUFLNitCLGNBQWM3K0IsS0FBSzZPLEVBQUU3TyxLQUFLd0osT0FBTyxLQUFLeEosS0FBSzgrQixPQUFPOStCLEtBQUsrK0IsUUFBUS8rQixLQUFLZy9CLFFBQVFoL0IsS0FBS2kvQixRQUFRai9CLEtBQUtrL0IsUUFBUSxFQUFFbC9CLEtBQUtvTCxJQUFJLEdBQUdwTCxLQUFLbS9CLFFBQVFuL0IsS0FBS28vQixTQUFTcC9CLEtBQUtxL0IsT0FBT3IvQixLQUFLcy9CLFNBQVEsRUFBR3QvQixLQUFLdS9CLFVBQVUsRUFBRXYvQixLQUFLdy9CLFlBQVksR0FBR3gvQixLQUFLOE4sRUFBRSxLQUFRQSxFQUFFLENBQUMsSUFBSTBILEVBQUV4VixLQUFLNlgsS0FBSy9KLEVBQUUrSixLQUFLaEssRUFBRUMsRUFBRTJ4QixnQkFBZ0IzeEIsRUFBRTJ4QixlQUFlOStCLE9BQU9tTixFQUFFMnhCLGVBQWUsR0FBRyxLQUFpRCxHQUE1Q3ovQixLQUFLd0osT0FBT3NFLEVBQUV0RSxRQUFRc0UsRUFBRTR4QixXQUFXMS9CLEtBQUs2TyxFQUFFQSxFQUFLQSxFQUFFZixFQUFFK3dCLGVBQWUsR0FBR2pHLEdBQUcsQ0FBQzlxQixFQUFFLENBQUMsSUFBSXdxQixHQUFHenBCLEVBQUU4d0IsVUFBVSxJQUFJMzFCLEdBQUUsRUFBRyxNQUFNOEQsRUFBRSxNQUFNbUMsSUFBSWpHLEdBQUUsRUFBR0EsSUFBSTZFLEVBQUUsV0FBVyxhQUN4dkQyRyxFQUFFM0csRUFBRWYsRUFBRTh4QixZQUFZLFlBQVlwcUIsSUFBSTNHLEVBQUVmLEVBQUUreEIsV0FBVzcvQixLQUFLNitCLGNBQWNod0IsRUFBRWhCLEdBQUc3TixLQUFLay9CLGFBQVEsSUFBU3J4QixFQUFFcXhCLFFBQVFyeEIsRUFBRXF4QixRQUFRcnhCLEVBQUVpeUIsTUFBTTkvQixLQUFLaS9CLGFBQVEsSUFBU3B4QixFQUFFb3hCLFFBQVFweEIsRUFBRW94QixRQUFRcHhCLEVBQUVreUIsTUFBTS8vQixLQUFLZy9CLFFBQVFueEIsRUFBRW14QixTQUFTLEVBQUVoL0IsS0FBSysrQixRQUFRbHhCLEVBQUVreEIsU0FBUyxJQUFJLytCLEtBQUtrL0IsYUFBUSxJQUFTcHhCLEVBQUVveEIsUUFBUXB4QixFQUFFb3hCLFFBQVFweEIsRUFBRWd5QixNQUFNOS9CLEtBQUtpL0IsYUFBUSxJQUFTbnhCLEVBQUVteEIsUUFBUW54QixFQUFFbXhCLFFBQVFueEIsRUFBRWl5QixNQUFNLy9CLEtBQUtnL0IsUUFBUWx4QixFQUFFa3hCLFNBQVMsRUFBRWgvQixLQUFLKytCLFFBQVFqeEIsRUFBRWl4QixTQUFTLEdBQUcvK0IsS0FBSzgrQixPQUFPaHhCLEVBQUVneEIsT0FBTzkrQixLQUFLb0wsSUFBSTBDLEVBQUUxQyxLQUFLLEdBQUdwTCxLQUFLcy9CLFFBQVF4eEIsRUFBRXd4QixRQUFRdC9CLEtBQUtxL0IsT0FBT3Z4QixFQUFFdXhCLE9BQU9yL0IsS0FBS28vQixTQUFTdHhCLEVBQUVzeEIsU0FBU3AvQixLQUFLbS9CLFFBQzllcnhCLEVBQUVxeEIsUUFBUW4vQixLQUFLdS9CLFVBQVV6eEIsRUFBRXl4QixXQUFXLEVBQUV2L0IsS0FBS3cvQixZQUFZLGlCQUFrQjF4QixFQUFFMHhCLFlBQVkxeEIsRUFBRTB4QixZQUFZUSxHQUFHbHlCLEVBQUUweEIsY0FBYyxHQUFHeC9CLEtBQUs4TixFQUFFQSxFQUFFQSxFQUFFNndCLGtCQUFrQjMrQixLQUFLaWdDLGtCQUY0aEN2QixHQUFFcDhCLFVBQVUyOUIsZUFBZSxXQUFXamdDLEtBQUsyK0Isa0JBQWlCLEdBRXRrQzV0QixFQUFFNnRCLEdBQUdGLElBQUcsSUFBSXNCLEdBQUcxQixHQUFHLENBQUM0QixFQUFFLFFBQVFDLEVBQUUsTUFBTUMsRUFBRSxVQUFVeEIsR0FBR3Q4QixVQUFVMjlCLGVBQWUsV0FBV3JCLEdBQUcxTSxHQUFHK04sZUFBZTE5QixLQUFLdkMsTUFBTSxJQUFJOE4sRUFBRTlOLEtBQUs4TixFQUFFLEdBQUdBLEVBQUVteUIsZUFBZW55QixFQUFFbXlCLHNCQUFzQixHQUFHbnlCLEVBQUV1eUIsYUFBWSxFQUFHekMsR0FBRyxLQUFPOXZCLEVBQUV3eEIsU0FBUyxLQUFLeHhCLEVBQUV3eUIsU0FBUyxLQUFLeHlCLEVBQUV3eUIsV0FBUXh5QixFQUFFd3lCLFNBQVMsR0FBRSxNQUFNenhCLE1BQU0rdkIsR0FBR3Q4QixVQUFVMkwsRUFBRSxXQUFXLE9BQU9qTyxLQUFLOE4sR0FBRyxJQUFJeXlCLEdBQUcsdUJBQXVCLElBQUlscEIsS0FBS0ksU0FBUyxHQUFHK29CLEdBQUcsRUFBRSxTQUFTQyxHQUFHM3lCLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUdoSyxLQUFLcXNCLFNBQVN2ZSxFQUFFOU4sS0FBS3VVLE1BQU0sS0FBS3ZVLEtBQUt5TyxJQUFJSSxFQUFFN08sS0FBSzZYLEtBQUtyQyxFQUFFeFYsS0FBSzBnQyxVQUFVN3lCLEVBQUU3TixLQUFLMmdDLEdBQUczMkIsRUFBRWhLLEtBQUtvTCxNQUFNbzFCLEdBQUd4Z0MsS0FBS2l5QixHQUFHanlCLEtBQUtvMEIsSUFBRyxFQUFHLFNBQVN3TSxHQUFHOXlCLEdBQUdBLEVBQUVta0IsSUFBRyxFQUFHbmtCLEVBQUV1ZSxTQUFTLEtBQUt2ZSxFQUFFeUcsTUFBTSxLQUFLekcsRUFBRVcsSUFBSSxLQUFLWCxFQUFFNnlCLEdBQUcsS0FBTSxTQUFTRSxHQUFHL3lCLEdBQUc5TixLQUFLeU8sSUFBSVgsRUFBRTlOLEtBQUs4TixFQUFFLEdBQUc5TixLQUFLNk8sRUFBRSxFQUEwTSxTQUFTaXlCLEdBQUdoekIsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRTNHLEVBQUVnSixLQUFLckMsS0FBSzFILEVBQUVBLEdBQUcwbUIsRUFBRzFtQixFQUFFQSxFQUFFMEgsR0FBRzNHLEtBQUsreEIsR0FBRy94QixHQUFHLEdBQUdmLEVBQUVBLEVBQUUwSCxHQUFHN1UsZ0JBQWdCbU4sRUFBRUEsRUFBRTBILEdBQUcxSCxFQUFFZSxNQUFNLFNBQVNsUCxHQUFHbU8sRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHLElBQUksSUFBSTdELEVBQUUsRUFBRUEsRUFBRThELEVBQUVuTixTQUFTcUosRUFBRSxDQUFDLElBQUlpRyxFQUFFbkMsRUFBRTlELEdBQUcsSUFBSWlHLEVBQUVnaUIsSUFBSWhpQixFQUFFb2MsVUFBVXhkLEdBQUdvQixFQUFFeXdCLFdBQVdsckIsR0FBR3ZGLEVBQUUwd0IsSUFBSTl5QixFQUFFLE9BQU83RCxFQUFFLE9BQU8sRUFBM2E2MkIsR0FBR3YrQixVQUFVMG1CLElBQUksU0FBU2xiLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsSUFBSWlHLEVBQUVuQyxFQUFFL04sWUFBVytOLEVBQUU5TixLQUFLOE4sRUFBRW1DLE1BQU9uQyxFQUFFOU4sS0FBSzhOLEVBQUVtQyxHQUFHLEdBQUdqUSxLQUFLNk8sS0FBSyxJQUFJWixFQUFFdE8sR0FBR21PLEVBQUVlLEVBQUVoQixFQUFFN0QsR0FBOEUsT0FBMUUsRUFBRWlFLEdBQUdZLEVBQUVmLEVBQUVHLEdBQUd1SCxJQUFJM0csRUFBRXVsQixJQUFHLE1BQU12bEIsRUFBRSxJQUFJNHhCLEdBQUc1eEIsRUFBRTdPLEtBQUt5TyxJQUFJd0IsSUFBSXBDLEVBQUU3RCxJQUFLb3FCLEdBQUc1ZSxFQUFFMUgsRUFBRXJPLEtBQUtvUCxJQUFXQSxHQUF5TyxJQUFJZ2tCLEdBQUcsZUFBZSxJQUFJeGIsS0FBS0ksU0FBUyxHQUFHc3BCLEdBQUcsR0FBUSxTQUFTQyxHQUFHbHpCLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsR0FBRzZELEdBQUdBLEVBQUVvekIsS0FBS0MsR0FBR3B6QixFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxRQUFRLEdBQUcvSSxNQUFNRSxRQUFRME4sR0FBRyxJQUFJLElBQUlvQixFQUFFLEVBQUVBLEVBQUVwQixFQUFFbE8sT0FBT3NQLElBQUkrd0IsR0FBR2x6QixFQUFFZSxFQUFFb0IsR0FBR3VGLEVBQUUzSCxFQUFFN0QsUUFBUXdMLEVBQUUyckIsR0FBRzNyQixHQUFHMUgsR0FBR0EsRUFBRXl5QixJQUFJYSxHQUFHdHpCLEVBQUVlLEVBQUUyRyxFQUFFM0UsRUFBRWhELEtBQUtBLEVBQUU2eUIsVUFBVTd5QixFQUFFN0QsR0FBR2lwQixHQUFHbmxCLEVBQUVlLEVBQUUyRyxHQUFFLEVBQUczSCxFQUFFN0QsR0FDcjhDLFNBQVNpcEIsR0FBR25sQixFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxFQUFFaUcsR0FBRyxJQUFJcEIsRUFBRSxNQUFNdEQsTUFBTSxzQkFBc0IsSUFBSTBDLEVBQUU0QyxFQUFFN0csS0FBS0EsRUFBRTAyQixVQUFVMTJCLEVBQUVzbUIsRUFBRStRLEdBQUd2ekIsR0FBNkMsR0FBMUN3aUIsSUFBSXhpQixFQUFFK2tCLElBQUl2QyxFQUFFLElBQUl1USxHQUFHL3lCLE1BQUkwSCxFQUFFOGEsRUFBRXRILElBQUluYSxFQUFFMkcsRUFBRTNILEVBQUVJLEVBQUVnQyxJQUFTc0UsTUFBNkMsR0FBdEMxRyxFQUMzSixXQUFjLElBQUlDLEVBQUV3ekIsR0FBR3p5QixFQUFFOHVCLEdBQUcsU0FBU25vQixHQUFHLE9BQU8xSCxFQUFFdkwsS0FBS3NNLEVBQUVKLElBQUlJLEVBQUV3ZCxTQUFTN1csSUFBSSxTQUFTQSxHQUFnQyxLQUE3QkEsRUFBRTFILEVBQUV2TCxLQUFLc00sRUFBRUosSUFBSUksRUFBRXdkLFNBQVM3VyxJQUFTLE9BQU9BLEdBQUcsT0FBTzNHLEVBRGtCcWtCLEdBQUsxZCxFQUFFakIsTUFBTTFHLEVBQUVBLEVBQUVZLElBQUlYLEVBQUVELEVBQUV3ZSxTQUFTN1csRUFBSzFILEVBQUVtZSxpQkFBaUJ1UyxLQUFLeDBCLEVBQUVpRSxRQUFHLElBQVNqRSxJQUFJQSxHQUFFLEdBQUk4RCxFQUFFbWUsaUJBQWlCcGQsRUFBRTlPLFdBQVc4TixFQUFFN0QsUUFBUSxHQUFHOEQsRUFBRXl6QixZQUFZenpCLEVBQUV5ekIsWUFBWXBPLEdBQUd0a0IsRUFBRTlPLFlBQVk4TixPQUFRLEtBQUdDLEVBQUUwekIsY0FBYTF6QixFQUFFMnpCLGVBQXFDLE1BQU1sMkIsTUFBTSxxREFBbEN1QyxFQUFFMHpCLFlBQVkzekIsSUFDMVAsU0FBU3F6QixHQUFHcHpCLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsR0FBRy9JLE1BQU1FLFFBQVEwTixHQUFHLElBQUksSUFBSW9CLEVBQUUsRUFBRUEsRUFBRXBCLEVBQUVsTyxPQUFPc1AsSUFBSWl4QixHQUFHcHpCLEVBQUVlLEVBQUVvQixHQUFHdUYsRUFBRTNILEVBQUU3RCxRQUFRd0wsRUFBRTJyQixHQUFHM3JCLEdBQUcxSCxHQUFHQSxFQUFFeXlCLElBQUltQixHQUFHNXpCLEVBQUVlLEVBQUUyRyxFQUFFM0UsRUFBRWhELEtBQUtBLEVBQUU2eUIsVUFBVTd5QixFQUFFN0QsR0FBR2lwQixHQUFHbmxCLEVBQUVlLEVBQUUyRyxHQUFFLEVBQUczSCxFQUFFN0QsR0FDelMsU0FBUzIzQixHQUFFN3pCLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsR0FBRy9JLE1BQU1FLFFBQVEwTixHQUFHLElBQUksSUFBSW9CLEVBQUUsRUFBRUEsRUFBRXBCLEVBQUVsTyxPQUFPc1AsSUFBSTB4QixHQUFFN3pCLEVBQUVlLEVBQUVvQixHQUFHdUYsRUFBRTNILEVBQUU3RCxRQUFRNkQsRUFBRWdELEVBQUVoRCxLQUFLQSxFQUFFNnlCLFVBQVU3eUIsRUFBRTJILEVBQUUyckIsR0FBRzNyQixHQUFHMUgsR0FBR0EsRUFBRXl5QixLQUFNenlCLEVBQUVBLEVBQUUyQyxHQUFFNUIsRUFBRXFGLE9BQU9yRixHQUFHOU8sY0FBZ0IrTixFQUFFQSxJQUE0QixHQUFmMEgsRUFBRTdWLEdBQVhzUSxFQUFFbkMsRUFBRUEsRUFBRWUsR0FBVTJHLEVBQUUzSCxFQUFFN0QsTUFBVTQyQixHQUFHM3dCLEVBQUV1RixJQUFJdlUsTUFBTXFCLFVBQVVpTCxPQUFPaEwsS0FBSzBOLEVBQUV1RixFQUFFLEdBQUcsR0FBR3ZGLEVBQUV0UCxnQkFBZ0JtTixFQUFFQSxFQUFFZSxHQUFHZixFQUFFZSxPQUFRZixJQUFJQSxFQUFFdXpCLEdBQUd2ekIsTUFBTWUsRUFBRWYsRUFBRUEsRUFBRWUsRUFBRTlPLFlBQVkrTixHQUFHLEVBQUVlLElBQUlmLEVBQUVuTyxHQUFHa1AsRUFBRTJHLEVBQUUzSCxFQUFFN0QsS0FBS3dMLEdBQUcsRUFBRTFILEVBQUVlLEVBQUVmLEdBQUcsT0FBTzh6QixHQUFHcHNCLElBQzlXLFNBQVNvc0IsR0FBRzl6QixHQUFHLEdBQUcsaUJBQWtCQSxHQUFHQSxJQUFJQSxFQUFFbWtCLEdBQUcsQ0FBQyxJQUFJcGpCLEVBQUVmLEVBQUVXLElBQUksR0FBR0ksR0FBR0EsRUFBRTB4QixJQUFJTyxHQUFHanlCLEVBQUU0QixFQUFFM0MsT0FBTyxDQUFDLElBQUkwSCxFQUFFMUgsRUFBRStKLEtBQUtoSyxFQUFFQyxFQUFFeUcsTUFBTTFGLEVBQUU0dkIsb0JBQW9CNXZCLEVBQUU0dkIsb0JBQW9CanBCLEVBQUUzSCxFQUFFQyxFQUFFNHlCLFNBQVM3eEIsRUFBRWd6QixZQUFZaHpCLEVBQUVnekIsWUFBWTFPLEdBQUczZCxHQUFHM0gsR0FBR2dCLEVBQUUyeUIsYUFBYTN5QixFQUFFNHlCLGdCQUFnQjV5QixFQUFFNHlCLGVBQWU1ekIsSUFBUzJILEVBQUU2ckIsR0FBR3h5QixLQUFLaXlCLEdBQUd0ckIsRUFBRTFILEdBQUcsR0FBRzBILEVBQUUzRyxJQUFJMkcsRUFBRS9HLElBQUksS0FBS0ksRUFBRWdrQixJQUFJLE9BQU8rTixHQUFHOXlCLEtBQUssU0FBU3FsQixHQUFHcmxCLEdBQUcsT0FBT0EsS0FBS2l6QixHQUFHQSxHQUFHanpCLEdBQUdpekIsR0FBR2p6QixHQUFHLEtBQUtBLEVBQ3BYLFNBQVNnMEIsR0FBR2gwQixFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUcsSUFBSTdELEdBQUUsRUFBRyxJQUFHOEQsRUFBRXV6QixHQUFHdnpCLE1BQU1lLEVBQUVmLEVBQUVBLEVBQUVlLEVBQUU5TyxhQUFZLElBQUk4TyxFQUFFQSxFQUFFek8sU0FBUzBOLEVBQUUsRUFBRUEsRUFBRWUsRUFBRWxPLE9BQU9tTixJQUFJLENBQUMsSUFBSW1DLEVBQUVwQixFQUFFZixHQUFHbUMsR0FBR0EsRUFBRXl3QixTQUFTbHJCLElBQUl2RixFQUFFZ2lCLEtBQUtoaUIsRUFBRTh4QixHQUFHOXhCLEVBQUVwQyxHQUFHN0QsRUFBRUEsSUFBRyxJQUFLaUcsR0FBRyxPQUFPakcsRUFBRSxTQUFTKzNCLEdBQUdqMEIsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRTFILEVBQUV1ZSxTQUFTeGUsRUFBRUMsRUFBRTZ5QixJQUFJN3lCLEVBQUVXLElBQWdCLE9BQVpYLEVBQUVzbUIsSUFBSXdOLEdBQUc5ekIsR0FBVTBILEVBQUVqVCxLQUFLc0wsRUFBRWdCLEdBQ3JQLFNBQVN5eUIsR0FBR3h6QixFQUFFZSxHQUFHLEdBQUdmLEVBQUVta0IsR0FBRyxPQUFNLEVBQUcsSUFBSTBMLEdBQUcsQ0FBQyxJQUFJOXVCLEVBQUVmLEVBQUUsQ0FBQ2UsRUFBRSxDQUFDLFNBQVMsU0FBUyxJQUFJLElBQUkyRyxFQUFFZ2IsRUFBRTNpQixFQUFFLEVBQUVBLEVBQUVnQixFQUFFbE8sT0FBT2tOLElBQUksR0FBYSxPQUFWMkgsRUFBRUEsRUFBRTNHLEVBQUVoQixLQUFZLENBQUNnQixFQUFFLEtBQUssTUFBTWYsRUFBRWUsRUFBRTJHLEVBQTRCLEdBQXRCM0csRUFBRSxJQUFJK3ZCLEdBQVYvd0IsRUFBRWdCLEVBQWE3TyxNQUFNd1YsR0FBRSxJQUFRLEVBQUUzSCxFQUFFeXlCLFNBQVMsTUFBUXp5QixFQUFFd3lCLGFBQWEsQ0FBQ3Z5QixFQUFFLENBQUMsSUFBSTlELEdBQUUsRUFBRyxHQUFHLEdBQUc2RCxFQUFFeXlCLFFBQVEsSUFBSXp5QixFQUFFeXlCLFNBQVMsRUFBRSxNQUFNeHlCLEVBQUUsTUFBTUcsR0FBR2pFLEdBQUUsR0FBTUEsR0FBRyxNQUFRNkQsRUFBRXd5QixlQUFZeHlCLEVBQUV3eUIsYUFBWSxHQUFRLElBQUx4eUIsRUFBRSxHQUFPN0QsRUFBRTZFLEVBQUVBLEVBQUU3RSxFQUFFQSxFQUFFQSxFQUFFK0MsV0FBV2MsRUFBRXBPLEtBQUt1SyxHQUFZLElBQVQ4RCxFQUFFQSxFQUFFK0osS0FBUzdOLEVBQUU2RCxFQUFFbE4sT0FBTyxFQUFFLEdBQUdxSixFQUFFQSxJQUFJLENBQUM2RSxFQUFFQSxFQUFFaEIsRUFBRTdELEdBQUcsSUFBSWlHLEVBQUU2eEIsR0FBR2owQixFQUFFN0QsR0FBRzhELEdBQUUsRUFBR2UsR0FBRzJHLEVBQUVBLEdBQUd2RixFQUFFLElBQUlqRyxFQUFFLEVBQUVBLEVBQUU2RCxFQUFFbE4sT0FBT3FKLElBQUk2RSxFQUFFQSxFQUFFaEIsRUFBRTdELEdBQUdpRyxFQUFFNnhCLEdBQUdqMEIsRUFBRTdELEdBQUc4RCxHQUFFLEVBQUdlLEdBQUcyRyxFQUFFQSxHQUFHdkYsRUFBRSxPQUFPdUYsRUFBRSxPQUFPdXNCLEdBQUdqMEIsRUFDcGdCLElBQUk4d0IsR0FBRy92QixFQUFFN08sT0FBTyxTQUFTcWhDLEdBQUd2ekIsR0FBVyxPQUFSQSxFQUFFQSxFQUFFK2tCLGVBQXdCZ08sR0FBRy95QixFQUFFLEtBQUssSUFBSWswQixHQUFHLHdCQUF3QixJQUFJM3FCLEtBQUtJLFdBQVcsR0FBRyxTQUFTMHBCLEdBQUdyekIsR0FBRyxPQUFHMGpCLEVBQUcxakIsR0FBVUEsR0FBRUEsRUFBRWswQixNQUFNbDBCLEVBQUVrMEIsSUFBSSxTQUFTbnpCLEdBQUcsT0FBT2YsRUFBRW0wQixZQUFZcHpCLEtBQVlmLEVBQUVrMEIsS0FBSyxTQUFTRSxLQUFJaEUsR0FBRzM3QixLQUFLdkMsTUFBTUEsS0FBS3lRLEVBQUUsSUFBSW93QixHQUFHN2dDLE1BQU1BLEtBQUs2NEIsR0FBRzc0QixLQUFLQSxLQUFLazFCLEdBQUcsS0FFckgsU0FBU2tNLEdBQUd0ekIsRUFBRWUsRUFBRTJHLEVBQUUzSCxFQUFFN0QsR0FBRzhELEVBQUUyQyxFQUFFdVksSUFBSTlVLE9BQU9yRixHQUFHMkcsR0FBRSxFQUFHM0gsRUFBRTdELEdBQUcsU0FBUzAzQixHQUFHNXpCLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUc4RCxFQUFFMkMsRUFBRXVZLElBQUk5VSxPQUFPckYsR0FBRzJHLEdBQUUsRUFBRzNILEVBQUU3RCxHQUNoUixTQUFTbTRCLEdBQUdyMEIsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFzQixLQUFuQmdCLEVBQUVmLEVBQUUyQyxFQUFFM0MsRUFBRW9HLE9BQU9yRixLQUFVLE9BQU0sRUFBR0EsRUFBRUEsRUFBRXpPLFNBQVMsSUFBSSxJQUFJNEosR0FBRSxFQUFHaUcsRUFBRSxFQUFFQSxFQUFFcEIsRUFBRWxPLFNBQVNzUCxFQUFFLENBQUMsSUFBSWhDLEVBQUVZLEVBQUVvQixHQUFHLEdBQUdoQyxJQUFJQSxFQUFFZ2tCLElBQUloa0IsRUFBRXl5QixTQUFTbHJCLEVBQUUsQ0FBQyxJQUFJOGEsRUFBRXJpQixFQUFFb2UsU0FBU2hxQixFQUFFNEwsRUFBRTB5QixJQUFJMXlCLEVBQUVRLElBQUlSLEVBQUVtbUIsSUFBSTBNLEdBQUdoekIsRUFBRTJDLEVBQUV4QyxHQUFHakUsR0FBRSxJQUFLc21CLEVBQUUvdEIsS0FBS0YsRUFBRXdMLElBQUk3RCxHQUFHLE9BQU9BLElBQUk2RCxFQUFFOHdCLGlCQUFrQixTQUFTeUQsR0FBR3QwQixFQUFFZSxFQUFFMkcsR0FBRyxHQUFHZ2MsRUFBRzFqQixHQUFHMEgsSUFBSTFILEVBQUVpa0IsRUFBRWprQixFQUFFMEgsUUFBUyxLQUFHMUgsR0FBRyxtQkFBbUJBLEVBQUVtMEIsWUFBc0MsTUFBTTEyQixNQUFNLDZCQUF0Q3VDLEVBQUVpa0IsRUFBRWprQixFQUFFbTBCLFlBQVluMEIsR0FBaUQsT0FBTyxXQUFXd1QsT0FBT3pTLElBQUksRUFBRTJoQixFQUFFL00sV0FBVzNWLEVBQUVlLEdBQUcsR0FBRyxTQUFTd3pCLEdBQUd2MEIsR0FBRyxJQUFJZSxFQUFFLEtBQUssT0FBTSxJQUFLeXRCLElBQUUsU0FBUzltQixFQUFFM0gsSUFBa0MsSUFBL0JnQixFQUFFdXpCLElBQUcsV0FBVzVzQixPQUFFLEtBQVMxSCxLQUFVRCxFQUFFdEMsTUFBTSxpQ0FBaUMrRCxHQUFFLFNBQVNrRyxHQUFxQixNQUFsQmdiLEVBQUV0RSxhQUFhcmQsR0FBUzJHLEtBQU0sU0FBUzhzQixHQUFHeDBCLEdBQUcsR0FBR0EsRUFBRXkwQixHQUFHLG1CQUFtQnowQixFQUFFeTBCLEVBQUUsT0FBT3owQixFQUFFeTBCLElBQUksR0FBRyxpQkFBa0J6MEIsRUFBRSxPQUFPQSxFQUFFcWlCLE1BQU0sSUFBSSxHQUFHb0IsRUFBR3pqQixHQUFHLENBQUMsSUFBSSxJQUFJZSxFQUFFLEdBQUcyRyxFQUFFMUgsRUFBRW5OLE9BQU9rTixFQUFFLEVBQUVBLEVBQUUySCxFQUFFM0gsSUFBSWdCLEVBQUVwUCxLQUFLcU8sRUFBRUQsSUFBSSxPQUFPZ0IsRUFBVyxJQUFJaEIsS0FBYmdCLEVBQUUsR0FBRzJHLEVBQUUsRUFBVzFILEVBQUVlLEVBQUUyRyxLQUFLMUgsRUFBRUQsR0FBRyxPQUFPZ0IsRUFBRSxTQUFTMnpCLEdBQUcxMEIsR0FBRyxHQUFHQSxFQUFFMjBCLEdBQUcsbUJBQW1CMzBCLEVBQUUyMEIsRUFBRSxPQUFPMzBCLEVBQUUyMEIsSUFBSSxJQUFJMzBCLEVBQUV5MEIsR0FBRyxtQkFBbUJ6MEIsRUFBRXkwQixFQUFFLENBQUMsR0FBR2hSLEVBQUd6akIsSUFBSSxpQkFBa0JBLEVBQUUsQ0FBQyxJQUFJZSxFQUFFLEdBQUdmLEVBQUVBLEVBQUVuTixPQUFPLElBQUksSUFBSTZVLEVBQUUsRUFBRUEsRUFBRTFILEVBQUUwSCxJQUFJM0csRUFBRXBQLEtBQUsrVixHQUFHLE9BQU8zRyxFQUFXLElBQUksSUFBSWhCLEtBQWpCZ0IsRUFBRSxHQUFHMkcsRUFBRSxFQUFlMUgsRUFBRWUsRUFBRTJHLEtBQUszSCxFQUFFLE9BQU9nQixHQUN4MEIsU0FBUzZ6QixHQUFHNTBCLEVBQUVlLEdBQUc3TyxLQUFLNk8sRUFBRSxHQUFHN08sS0FBSzhOLEVBQUUsR0FBRzlOLEtBQUt3VixFQUFFLEVBQUUsSUFBSUEsRUFBRXJQLFVBQVV4RixPQUFPLEdBQUcsRUFBRTZVLEVBQUUsQ0FBQyxHQUFHQSxFQUFFLEVBQUUsTUFBTWpLLE1BQU0sOEJBQThCLElBQUksSUFBSXNDLEVBQUUsRUFBRUEsRUFBRTJILEVBQUUzSCxHQUFHLEVBQUU3TixLQUFLK0YsSUFBSUksVUFBVTBILEdBQUcxSCxVQUFVMEgsRUFBRSxTQUFTLEdBQUdDLEVBQUUsR0FBR0EsYUFBYTQwQixHQUFHLElBQUlsdEIsRUFBRTFILEVBQUUyMEIsSUFBSTUwQixFQUFFLEVBQUVBLEVBQUUySCxFQUFFN1UsT0FBT2tOLElBQUk3TixLQUFLK0YsSUFBSXlQLEVBQUUzSCxHQUFHQyxFQUFFaEksSUFBSTBQLEVBQUUzSCxVQUFVLElBQUlBLEtBQUtDLEVBQUU5TixLQUFLK0YsSUFBSThILEVBQUVDLEVBQUVELElBQzVjLFNBQVM4MEIsR0FBRzcwQixHQUFHLEdBQUdBLEVBQUUwSCxHQUFHMUgsRUFBRUEsRUFBRW5OLE9BQU8sQ0FBQyxJQUFJLElBQUlrTyxFQUFFLEVBQUUyRyxFQUFFLEVBQUUzRyxFQUFFZixFQUFFQSxFQUFFbk4sUUFBUSxDQUFDLElBQUlrTixFQUFFQyxFQUFFQSxFQUFFZSxHQUFHK3pCLEdBQUc5MEIsRUFBRWUsRUFBRWhCLEtBQUtDLEVBQUVBLEVBQUUwSCxLQUFLM0gsR0FBR2dCLElBQUlmLEVBQUVBLEVBQUVuTixPQUFPNlUsRUFBRSxHQUFHMUgsRUFBRTBILEdBQUcxSCxFQUFFQSxFQUFFbk4sT0FBTyxDQUFDLElBQUlxSixFQUFFLEdBQUcsSUFBSXdMLEVBQUUzRyxFQUFFLEVBQUVBLEVBQUVmLEVBQUVBLEVBQUVuTixRQUFpQmlpQyxHQUFHNTRCLEVBQVo2RCxFQUFFQyxFQUFFQSxFQUFFZSxNQUFhZixFQUFFQSxFQUFFMEgsS0FBSzNILEVBQUU3RCxFQUFFNkQsR0FBRyxHQUFHZ0IsSUFBSWYsRUFBRUEsRUFBRW5OLE9BQU82VSxHQUMxSyxTQUFTb3RCLEdBQUc5MEIsRUFBRWUsR0FBRyxPQUFPdE4sT0FBT2UsVUFBVThMLGVBQWU3TCxLQUFLdUwsRUFBRWUsR0FOMkhrQyxFQUFFbXhCLEdBQUVoRSxJQUFJZ0UsR0FBRTUvQixVQUFVaStCLEtBQUksRUFBRzJCLEdBQUU1L0IsVUFBVTJwQixpQkFBaUIsU0FBU25lLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBR216QixHQUFHaGhDLEtBQUs4TixFQUFFZSxFQUFFMkcsRUFBRTNILElBQUlxMEIsR0FBRTUvQixVQUFVbThCLG9CQUFvQixTQUFTM3dCLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRzh6QixHQUFFM2hDLEtBQUs4TixFQUFFZSxFQUFFMkcsRUFBRTNILElBQ2xjcTBCLEdBQUU1L0IsVUFBVXVnQyxjQUFjLFNBQVMvMEIsR0FBRyxJQUFJZSxFQUFFMkcsRUFBRXhWLEtBQUtrMUIsR0FBRyxHQUFHMWYsRUFBRSxJQUFJM0csRUFBRSxHQUFHMkcsRUFBRUEsRUFBRUEsRUFBRTBmLEdBQUdybUIsRUFBRXBQLEtBQUsrVixHQUFHQSxFQUFFeFYsS0FBSzY0QixHQUFHLElBQUlockIsRUFBRUMsRUFBRStKLE1BQU0vSixFQUFFLEdBQUcsaUJBQWtCQSxFQUFFQSxFQUFFLElBQUk0d0IsR0FBRTV3QixFQUFFMEgsUUFBUSxHQUFHMUgsYUFBYTR3QixHQUFFNXdCLEVBQUV0RSxPQUFPc0UsRUFBRXRFLFFBQVFnTSxNQUFNLENBQUMsSUFBSXhMLEVBQUU4RCxFQUFlK25CLEdBQWIvbkIsRUFBRSxJQUFJNHdCLEdBQUU3d0IsRUFBRTJILEdBQU94TCxHQUFRLEdBQUxBLEdBQUUsRUFBTTZFLEVBQUUsSUFBSSxJQUFJb0IsRUFBRXBCLEVBQUVsTyxPQUFPLEVBQUUsR0FBR3NQLEVBQUVBLElBQUksQ0FBQyxJQUFJaEMsRUFBRUgsRUFBRWUsRUFBRUEsRUFBRW9CLEdBQUdqRyxFQUFFbTRCLEdBQUdsMEIsRUFBRUosR0FBRSxFQUFHQyxJQUFJOUQsRUFBOEMsR0FBcENBLEVBQUVtNEIsR0FBVmwwQixFQUFFSCxFQUFFZSxFQUFFMkcsRUFBUzNILEdBQUUsRUFBR0MsSUFBSTlELEVBQUVBLEVBQUVtNEIsR0FBR2wwQixFQUFFSixHQUFFLEVBQUdDLElBQUk5RCxFQUFLNkUsRUFBRSxJQUFJb0IsRUFBRSxFQUFFQSxFQUFFcEIsRUFBRWxPLE9BQU9zUCxJQUFlakcsRUFBRW00QixHQUFibDBCLEVBQUVILEVBQUVlLEVBQUVBLEVBQUVvQixHQUFVcEMsR0FBRSxFQUFHQyxJQUFJOUQsRUFBRSxPQUFPQSxHQUN4Wms0QixHQUFFNS9CLFVBQVVxd0IsR0FBRyxXQUE4QixHQUFuQnVQLEdBQUVoUSxHQUFHUyxHQUFHcHdCLEtBQUt2QyxNQUFTQSxLQUFLeVEsRUFBRSxDQUFDLElBQWlCK0UsRUFBYjFILEVBQUU5TixLQUFLeVEsRUFBUSxJQUFJK0UsS0FBSzFILEVBQUVBLEVBQUUsQ0FBQyxJQUFJLElBQUlELEVBQUVDLEVBQUVBLEVBQUUwSCxHQUFHeEwsRUFBRSxFQUFFQSxFQUFFNkQsRUFBRWxOLE9BQU9xSixJQUFRNDJCLEdBQUcveUIsRUFBRTdELFdBQVc4RCxFQUFFQSxFQUFFMEgsR0FBRzFILEVBQUVlLEtBQUs3TyxLQUFLazFCLEdBQUcsT0FFOFY5akIsRUFBRXN4QixHQUFHcGdDLFdBQVlpZ0MsRUFBRSxXQUFXSSxHQUFHM2lDLE1BQU0sSUFBSSxJQUFJOE4sRUFBRSxHQUFHZSxFQUFFLEVBQUVBLEVBQUU3TyxLQUFLOE4sRUFBRW5OLE9BQU9rTyxJQUFJZixFQUFFck8sS0FBS08sS0FBSzZPLEVBQUU3TyxLQUFLOE4sRUFBRWUsS0FBSyxPQUFPZixHQUFHc0QsRUFBRXF4QixFQUFFLFdBQW9CLE9BQVRFLEdBQUczaUMsTUFBYUEsS0FBSzhOLEVBQUUxTixVQUMzcEJnUixFQUFFMHhCLE1BQU0sV0FBVzlpQyxLQUFLNk8sRUFBRSxHQUFHN08sS0FBS3dWLEVBQUV4VixLQUFLOE4sRUFBRW5OLE9BQU8sR0FBd095USxFQUFFdEwsSUFBSSxTQUFTZ0ksRUFBRWUsR0FBRyxPQUFPK3pCLEdBQUc1aUMsS0FBSzZPLEVBQUVmLEdBQUc5TixLQUFLNk8sRUFBRWYsR0FBR2UsR0FBR3VDLEVBQUVyTCxJQUFJLFNBQVMrSCxFQUFFZSxHQUFHK3pCLEdBQUc1aUMsS0FBSzZPLEVBQUVmLEtBQUs5TixLQUFLd1YsSUFBSXhWLEtBQUs4TixFQUFFck8sS0FBS3FPLElBQUk5TixLQUFLNk8sRUFBRWYsR0FBR2UsR0FDclp1QyxFQUFFekwsUUFBUSxTQUFTbUksRUFBRWUsR0FBRyxJQUFJLElBQUkyRyxFQUFFeFYsS0FBS3lpQyxJQUFJNTBCLEVBQUUsRUFBRUEsRUFBRTJILEVBQUU3VSxPQUFPa04sSUFBSSxDQUFDLElBQUk3RCxFQUFFd0wsRUFBRTNILEdBQUdvQyxFQUFFalEsS0FBSzhGLElBQUlrRSxHQUFHOEQsRUFBRXZMLEtBQUtzTSxFQUFFb0IsRUFBRWpHLEVBQUVoSyxRQUEyRSxJQUFJK2lDLEdBQUcsNkhBQXlWLFNBQVNDLEdBQUdsMUIsRUFBRWUsR0FBa0UsSUFBSTJHLEVBQW5FeFYsS0FBSzhOLEVBQUU5TixLQUFLd3dCLEVBQUV4d0IsS0FBS2lRLEVBQUUsR0FBR2pRLEtBQUtpTyxFQUFFLEtBQUtqTyxLQUFLc3dCLEVBQUV0d0IsS0FBS3dWLEVBQUUsR0FBR3hWLEtBQUtNLEdBQUUsRUFBU3dOLGFBQWFrMUIsSUFBSWhqQyxLQUFLTSxPQUFFLElBQVN1TyxFQUFFQSxFQUFFZixFQUFFeE4sRUFBRTJpQyxHQUFHampDLEtBQUs4TixFQUFFbUMsR0FBR2pRLEtBQUt3d0IsRUFBRTFpQixFQUFFMGlCLEVBQUV4d0IsS0FBSzhOLEVBQUVBLEVBQUVBLEVBQUVvMUIsR0FBR2xqQyxLQUFLOE4sRUFBRUcsR0FBR2pPLEtBQUt3VixFQUFFMUgsRUFBRTBILEVBQUUydEIsR0FBR25qQyxLQUFLb2pDLEdBQUd0MUIsRUFBRWUsSUFBSTdPLEtBQUtzd0IsRUFBRXhpQixFQUFFd2lCLEdBQUd4aUIsSUFBSTBILEVBQUV0QixPQUFPcEcsR0FBRzhRLE1BQU1ta0IsTUFBTS9pQyxLQUFLTSxJQUFJdU8sRUFBRW8wQixHQUFHampDLEtBQUt3VixFQUFFLElBQUksSUFBRyxHQUFJeFYsS0FBS3d3QixFQUFFNlMsR0FBRzd0QixFQUFFLElBQUksSUFBSXhWLEtBQUs4TixFQUFFdTFCLEdBQUc3dEIsRUFBRSxJQUFJLElBQUcsR0FBSTB0QixHQUFHbGpDLEtBQUt3VixFQUFFLElBQUl4VixLQUFLd1YsRUFBRTZ0QixHQUFHN3RCLEVBQUUsSUFBSSxJQUFHLEdBQUkydEIsR0FBR25qQyxLQUFLd1YsRUFBRSxJQUFJLElBQUcsR0FBSXhWLEtBQUtzd0IsRUFBRStTLEdBQUc3dEIsRUFBRSxJQUFJLE1BQU14VixLQUFLTSxJQUFJdU8sRUFBRTdPLEtBQUs2TyxFQUFFLElBQUl5MEIsR0FBRyxLQUFLdGpDLEtBQUtNLElBR2h6QixTQUFTMmlDLEdBQUduMUIsRUFBRWUsRUFBRTJHLEdBQUcxSCxFQUFFbUMsRUFBRXVGLEVBQUU2dEIsR0FBR3gwQixHQUFFLEdBQUlBLEVBQUVmLEVBQUVtQyxJQUFJbkMsRUFBRW1DLEVBQUVuQyxFQUFFbUMsRUFBRTlMLFFBQVEsS0FBSyxLQUFLLFNBQVMrK0IsR0FBR3AxQixFQUFFZSxHQUFHLEdBQUdBLEVBQUUsQ0FBYSxHQUFaQSxFQUFFeVMsT0FBT3pTLEdBQU0wMEIsTUFBTTEwQixJQUFJLEVBQUVBLEVBQUUsTUFBTXRELE1BQU0sbUJBQW1Cc0QsR0FBR2YsRUFBRUcsRUFBRVksT0FBT2YsRUFBRUcsRUFBRSxLQUFLLFNBQVNrMUIsR0FBR3IxQixFQUFFZSxFQUFFMkcsR0FBRzNHLGFBQWF5MEIsSUFBSXgxQixFQUFFZSxFQUFFQSxFQU01TixTQUFZZixFQUFFZSxHQUFHQSxJQUFJZixFQUFFbUMsSUFBSXV6QixHQUFHMTFCLEdBQUdBLEVBQUUwSCxFQUFFLEtBQUsxSCxFQUFFQSxFQUFFbkksU0FBUSxTQUFTNlAsRUFBRTNILEdBQUcsSUFBSTdELEVBQUU2RCxFQUFFMFIsY0FBYzFSLEdBQUc3RCxJQUFJeTVCLEdBQUd6akMsS0FBSzZOLEdBQUc2MUIsR0FBRzFqQyxLQUFLZ0ssRUFBRXdMLE1BQUsxSCxJQUFJQSxFQUFFbUMsRUFBRXBCLEVBTjJGODBCLENBQUc3MUIsRUFBRWUsRUFBRWYsRUFBRXhOLEtBQUtrVixJQUFJM0csRUFBRSswQixHQUFHLzBCLEVBQUVnMUIsS0FBSy8xQixFQUFFZSxFQUFFLElBQUl5MEIsR0FBR3owQixFQUFFZixFQUFFeE4sSUFBSSxTQUFTd2pDLEdBQUVoMkIsRUFBRWUsRUFBRTJHLEdBQUcxSCxFQUFFZSxFQUFFOUksSUFBSThJLEVBQUUyRyxHQUFHLFNBQVN1dUIsR0FBR2oyQixFQUFFZSxHQUFHLE9BQU9mLEVBQUVlLEVBQUUvSSxJQUFJK0ksR0FDemQsU0FBU20xQixHQUFHbDJCLEdBQUcsT0FBT0EsYUFBYWsxQixHQUFHLElBQUlBLEdBQUdsMUIsR0FBRyxJQUFJazFCLEdBQUdsMUIsT0FBRSxHQUFRLFNBQVNtMkIsR0FBR24yQixFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUcsSUFBSTdELEVBQUUsSUFBSWc1QixHQUFHLFVBQUssR0FBb0QsT0FBNUNsMUIsR0FBR20xQixHQUFHajVCLEVBQUU4RCxHQUFHZSxJQUFJN0UsRUFBRThELEVBQUVlLEdBQUcyRyxHQUFHMHRCLEdBQUdsNUIsRUFBRXdMLEdBQUczSCxJQUFJN0QsRUFBRXdMLEVBQUUzSCxHQUFVN0QsRUFBRSxTQUFTcTVCLEdBQUd2MUIsRUFBRWUsR0FBRyxPQUFPZixFQUFFZSxFQUFFcTFCLFVBQVVwMkIsRUFBRTNKLFFBQVEsT0FBTyxVQUFVZ2dDLG1CQUFtQnIyQixHQUFHLEdBQUcsU0FBUzgxQixHQUFHOTFCLEVBQUVlLEVBQUUyRyxHQUFHLE1BQU0saUJBQWtCMUgsR0FBR0EsRUFBRXMyQixVQUFVdDJCLEdBQUczSixRQUFRMEssRUFBRXcxQixJQUFJN3VCLElBQUkxSCxFQUFFQSxFQUFFM0osUUFBUSx1QkFBdUIsUUFBUTJKLEdBQUcsS0FBSyxTQUFTdTJCLEdBQUd2MkIsR0FBcUIsTUFBTSxNQUF4QkEsRUFBRUEsRUFBRXlILFdBQVcsS0FBaUIsRUFBRSxJQUFJeFYsU0FBUyxLQUFPLEdBQUYrTixHQUFNL04sU0FBUyxJQUhuZGlqQyxHQUFHMWdDLFVBQVV2QyxTQUFTLFdBQVcsSUFBSStOLEVBQUUsR0FBR2UsRUFBRTdPLEtBQUtpUSxFQUFFcEIsR0FBR2YsRUFBRXJPLEtBQUtta0MsR0FBRy8wQixFQUFFeTFCLElBQUcsR0FBSSxLQUFLLElBQUk5dUIsRUFBRXhWLEtBQUs4TixFQUF1VixPQUFsVjBILEdBQUcsUUFBUTNHLEtBQUVmLEVBQUVyTyxLQUFLLE9BQU9vUCxFQUFFN08sS0FBS3d3QixJQUFJMWlCLEVBQUVyTyxLQUFLbWtDLEdBQUcvMEIsRUFBRXkxQixJQUFHLEdBQUksS0FBS3gyQixFQUFFck8sS0FBSzJELG1CQUFtQjhRLE9BQU9zQixJQUFJclIsUUFBUSx1QkFBdUIsUUFBaUIsT0FBVHFSLEVBQUV4VixLQUFLaU8sSUFBV0gsRUFBRXJPLEtBQUssSUFBSXlVLE9BQU9zQixNQUFPQSxFQUFFeFYsS0FBS3dWLEtBQUV4VixLQUFLOE4sR0FBRyxLQUFLMEgsRUFBRSt1QixPQUFPLElBQUl6MkIsRUFBRXJPLEtBQUssS0FBS3FPLEVBQUVyTyxLQUFLbWtDLEdBQUdwdUIsRUFBRSxLQUFLQSxFQUFFK3VCLE9BQU8sR0FBR0MsR0FBR0MsSUFBRyxNQUFNanZCLEVBQUV4VixLQUFLNk8sRUFBRTlPLGFBQWErTixFQUFFck8sS0FBSyxJQUFJK1YsSUFBSUEsRUFBRXhWLEtBQUtzd0IsSUFBSXhpQixFQUFFck8sS0FBSyxJQUFJbWtDLEdBQUdwdUIsRUFBRWt2QixLQUFZNTJCLEVBQUV6TixLQUFLLEtBQzliMmlDLEdBQUcxZ0MsVUFBVWtDLFFBQVEsU0FBU3NKLEdBQUcsSUFBSWUsRUFBRSxJQUFJbTBCLEdBQUdoakMsTUFBTXdWLElBQUkxSCxFQUFFbUMsRUFBRXVGLEVBQUV5dEIsR0FBR3AwQixFQUFFZixFQUFFbUMsR0FBR3VGLElBQUkxSCxFQUFFMGlCLEVBQUVoYixFQUFFM0csRUFBRTJoQixFQUFFMWlCLEVBQUUwaUIsRUFBRWhiLElBQUkxSCxFQUFFQSxFQUFFMEgsRUFBRTNHLEVBQUVmLEVBQUVBLEVBQUVBLEVBQUUwSCxFQUFFLE1BQU0xSCxFQUFFRyxFQUFFLElBQUlKLEVBQUVDLEVBQUUwSCxFQUFFLEdBQUdBLEVBQUUwdEIsR0FBR3IwQixFQUFFZixFQUFFRyxRQUFRLEdBQUd1SCxJQUFJMUgsRUFBRTBILEVBQUUsQ0FBQyxHQUFHLEtBQUszSCxFQUFFMDJCLE9BQU8sR0FBRyxHQUFHdmtDLEtBQUs4TixJQUFJOU4sS0FBS3dWLEVBQUUzSCxFQUFFLElBQUlBLE1BQU0sQ0FBQyxJQUFJN0QsRUFBRTZFLEVBQUUyRyxFQUFFMmtCLFlBQVksTUFBTSxHQUFHbndCLElBQUk2RCxFQUFFZ0IsRUFBRTJHLEVBQUUyTyxPQUFPLEVBQUVuYSxFQUFFLEdBQUc2RCxHQUFPLEdBQUcsT0FBUDdELEVBQUU2RCxJQUFjLEtBQUs3RCxFQUFFNkQsRUFBRSxRQUFRLEdBQUd1bkIsR0FBRXByQixFQUFFLE9BQU9vckIsR0FBRXByQixFQUFFLE1BQU0sQ0FBQzZELEVBQUUsR0FBRzdELEVBQUVtd0IsWUFBWSxJQUFJLEdBQUdud0IsRUFBRUEsRUFBRW1tQixNQUFNLEtBQUssSUFBSSxJQUFJbGdCLEVBQUUsR0FBR2hDLEVBQUUsRUFBRUEsRUFBRWpFLEVBQUVySixRQUFRLENBQUMsSUFBSTJ2QixFQUFFdG1CLEVBQUVpRSxLQUFLLEtBQUtxaUIsRUFBRXppQixHQUFHSSxHQUFHakUsRUFBRXJKLFFBQVFzUCxFQUFFeFEsS0FBSyxJQUFJLE1BQU02d0IsSUFBSSxFQUFFcmdCLEVBQUV0UCxRQUFRLEdBQUdzUCxFQUFFdFAsUUFBUSxJQUFJc1AsRUFBRSxLQUFLQSxFQUFFVSxNQUNoZjlDLEdBQUdJLEdBQUdqRSxFQUFFckosUUFBUXNQLEVBQUV4USxLQUFLLE1BQU13USxFQUFFeFEsS0FBSzZ3QixHQUFHemlCLEdBQUUsR0FBSUEsRUFBRW9DLEVBQUU1UCxLQUFLLFVBQVV3TixFQUFFN0QsRUFBcUUsT0FBbkV3TCxFQUFFM0csRUFBRTJHLEVBQUUzSCxFQUFFMkgsRUFBRSxLQUFLMUgsRUFBRWUsRUFBRTlPLFdBQVd5VixFQUFFMnRCLEdBQUd0MEIsRUFBRXUwQixHQUFHdDFCLEVBQUVlLElBQUkyRyxJQUFJMUgsRUFBRXdpQixFQUFFOWEsSUFBSTNHLEVBQUV5aEIsRUFBRXhpQixFQUFFd2lCLEdBQVV6aEIsR0FFOUksSUFBSXkxQixHQUFHLFlBQVlHLEdBQUcsVUFBVUQsR0FBRyxTQUFTWCxHQUFHLFVBQVVhLEdBQUcsS0FBSyxTQUFTcEIsR0FBR3gxQixFQUFFZSxHQUFHN08sS0FBSzZPLEVBQUU3TyxLQUFLOE4sRUFBRSxLQUFLOU4sS0FBS3dWLEVBQUUxSCxHQUFHLEtBQUs5TixLQUFLaVEsSUFBSXBCLEVBQUUsU0FBUzIwQixHQUFHMTFCLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLEVBQUUsSUFBSTQwQixHQUFHNTBCLEVBQUVlLEVBQUUsRUFBRWYsRUFBRTBILEdBTDZJLFNBQVkxSCxFQUFFZSxHQUFHLEdBQUdmLEVBQUUsQ0FBQ0EsRUFBRUEsRUFBRXFpQixNQUFNLEtBQUssSUFBSSxJQUFJM2EsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRW5OLE9BQU82VSxJQUFJLENBQUMsSUFBSTNILEVBQUVDLEVBQUUwSCxHQUFHOEssUUFBUSxLQUFLdFcsRUFBRSxLQUFLLEdBQUcsR0FBRzZELEVBQUUsQ0FBQyxJQUFJb0MsRUFBRW5DLEVBQUUwSCxHQUFHK2MsVUFBVSxFQUFFMWtCLEdBQUc3RCxFQUFFOEQsRUFBRTBILEdBQUcrYyxVQUFVMWtCLEVBQUUsUUFBUW9DLEVBQUVuQyxFQUFFMEgsR0FBRzNHLEVBQUVvQixFQUFFakcsRUFBRW02QixtQkFBbUJuNkIsRUFBRTdGLFFBQVEsTUFBTSxNQUFNLE1BSy9Wd2dDLENBQUc3MkIsRUFBRTBILEdBQUUsU0FBUzNHLEVBQUUyRyxHQUFHMUgsRUFBRWtiLElBQUltYixtQkFBbUJ0MUIsRUFBRTFLLFFBQVEsTUFBTSxNQUFNcVIsT0FBTSxTQUFTb3ZCLEdBQUc5MkIsR0FBRyxJQUFJZSxFQUFFMnpCLEdBQUcxMEIsR0FBRyxRQUFHLElBQW9CZSxFQUFFLE1BQU10RCxNQUFNLHNCQUFzQixJQUFJaUssRUFBRSxJQUFJOHRCLEdBQUcsVUFBSyxHQUFReDFCLEVBQUV3MEIsR0FBR3gwQixHQUFHLElBQUksSUFBSUQsRUFBRSxFQUFFQSxFQUFFZ0IsRUFBRWxPLE9BQU9rTixJQUFJLENBQUMsSUFBSTdELEVBQUU2RSxFQUFFaEIsR0FBR29DLEVBQUVuQyxFQUFFRCxHQUFHNU0sTUFBTUUsUUFBUThPLEdBQUd5ekIsR0FBR2x1QixFQUFFeEwsRUFBRWlHLEdBQUd1RixFQUFFd1QsSUFBSWhmLEVBQUVpRyxHQUFHLE9BQU91RixFQUN0VSxTQUFTaXVCLEdBQUczMUIsRUFBRWUsR0FBRzIwQixHQUFHMTFCLEdBQUdlLEVBQUVnMkIsR0FBRy8yQixFQUFFZSxHQUFHK3pCLEdBQUc5MEIsRUFBRUEsRUFBRWUsRUFBRUEsS0FBS2YsRUFBRTBILEVBQUUsS0FBSzFILEVBQUVlLEdBQUdmLEVBQUVBLEVBQUVoSSxJQUFJK0ksR0FBR2xPLE9BQWFpaUMsSUFBTjkwQixFQUFFQSxFQUFFQSxHQUFPZSxFQUFFQSxZQUFZZixFQUFFZSxFQUFFQSxHQUFHZixFQUFFMEgsSUFBSTFILEVBQUVBLEVBQUVuTixPQUFPLEVBQUVtTixFQUFFMEgsR0FBR210QixHQUFHNzBCLEtBQXFELFNBQVNnM0IsR0FBR2gzQixFQUFFZSxHQUFtQixPQUFoQjIwQixHQUFHMTFCLEdBQUdlLEVBQUVnMkIsR0FBRy8yQixFQUFFZSxHQUFVK3pCLEdBQUc5MEIsRUFBRUEsRUFBRWUsRUFBRUEsR0FFaFMsU0FBUzYwQixHQUFHNTFCLEVBQUVlLEVBQUUyRyxHQUFHaXVCLEdBQUczMUIsRUFBRWUsR0FBRyxFQUFFMkcsRUFBRTdVLFNBQVNtTixFQUFFMEgsRUFBRSxLQUFLMUgsRUFBRUEsRUFBRS9ILElBQUk4K0IsR0FBRy8yQixFQUFFZSxHQUFHNmxCLEVBQUdsZixJQUFJMUgsRUFBRWUsR0FBRzJHLEVBQUU3VSxRQUNoSyxTQUFTeWlDLEdBQUd0MUIsR0FBRyxJQUFJZSxFQUFFLElBQUl5MEIsR0FBMEMsT0FBdkN6MEIsRUFBRTJHLEVBQUUxSCxFQUFFMEgsRUFBRTFILEVBQUVBLElBQUllLEVBQUVmLEVBQUUsSUFBSTQwQixHQUFHNTBCLEVBQUVBLEdBQUdlLEVBQUVBLEVBQUVmLEVBQUVlLEdBQVVBLEVBQUUsU0FBU2cyQixHQUFHLzJCLEVBQUVlLEdBQXdDLE9BQXJDQSxFQUFFcUYsT0FBT3JGLEdBQUdmLEVBQUVtQyxJQUFJcEIsRUFBRUEsRUFBRTBRLGVBQXNCMVEsRUFBd0ksU0FBU2syQixHQUFHajNCLEdBQUcsSUFBSWUsRUFBRSxHQUFrQixPQUFmbTJCLEdBQUcsSUFBSUMsR0FBR24zQixFQUFFZSxHQUFVQSxFQUFFeE8sS0FBSyxJQUFJLFNBQVM0a0MsTUFDblYsU0FBU0QsR0FBR2wzQixFQUFFZSxFQUFFMkcsR0FBRyxHQUFHLE1BQU0zRyxFQUFFMkcsRUFBRS9WLEtBQUssWUFBWSxDQUFDLEdBQUcsaUJBQWlCb1AsRUFBRSxDQUFDLEdBQUc1TixNQUFNRSxRQUFRME4sR0FBRyxDQUFDLElBQUloQixFQUFFZ0IsRUFBRUEsRUFBRWhCLEVBQUVsTixPQUFPNlUsRUFBRS9WLEtBQUssS0FBSyxJQUFJLElBQUl1SyxFQUFFLEdBQUdpRyxFQUFFLEVBQUVBLEVBQUVwQixFQUFFb0IsSUFBSXVGLEVBQUUvVixLQUFLdUssR0FBR2c3QixHQUFHbDNCLEVBQUVELEVBQUVvQyxHQUFHdUYsR0FBR3hMLEVBQUUsSUFBZ0IsWUFBWndMLEVBQUUvVixLQUFLLEtBQVksS0FBR29QLGFBQWFxRixRQUFRckYsYUFBYXlTLFFBQVF6UyxhQUFhaEQsU0FBMEIsQ0FBa0IsSUFBSWdDLEtBQXJCMkgsRUFBRS9WLEtBQUssS0FBS3VLLEVBQUUsR0FBWTZFLEVBQUV0TixPQUFPZSxVQUFVOEwsZUFBZTdMLEtBQUtzTSxFQUFFaEIsSUFBWSxtQkFBUG9DLEVBQUVwQixFQUFFaEIsTUFBMEIySCxFQUFFL1YsS0FBS3VLLEdBQUdrN0IsR0FBR3IzQixFQUFFMkgsR0FBR0EsRUFBRS9WLEtBQUssS0FBS3VsQyxHQUFHbDNCLEVBQUVtQyxFQUFFdUYsR0FBR3hMLEVBQUUsS0FBa0IsWUFBWndMLEVBQUUvVixLQUFLLEtBQWhMb1AsRUFBRUEsRUFBRXMyQixVQUF5TCxjQUFjdDJCLEdBQUcsSUFBSyxTQUFTcTJCLEdBQUdyMkIsRUFBRTJHLEdBQUcsTUFBTSxJQUFLLFNBQVNBLEVBQUUvVixLQUFLMmxDLFNBQVN2MkIsS0FDL2dCMDBCLE1BQU0xMEIsR0FBR3FGLE9BQU9yRixHQUFHLFFBQVEsTUFBTSxJQUFLLFVBQVUyRyxFQUFFL1YsS0FBS3lVLE9BQU9yRixJQUFJLE1BQU0sSUFBSyxXQUFXMkcsRUFBRS9WLEtBQUssUUFBUSxNQUFNLFFBQVEsTUFBTThMLE1BQU0sd0JBQXdCc0QsTUFOK1N1QyxFQUFFa3lCLEdBQUdoaEMsV0FDNWMwbUIsSUFBSSxTQUFTbGIsRUFBRWUsR0FBRzIwQixHQUFHeGpDLE1BQU1BLEtBQUt3VixFQUFFLEtBQUsxSCxFQUFFKzJCLEdBQUc3a0MsS0FBSzhOLEdBQUcsSUFBSTBILEVBQUV4VixLQUFLOE4sRUFBRWhJLElBQUlnSSxHQUE2QyxPQUExQzBILEdBQUd4VixLQUFLOE4sRUFBRS9ILElBQUkrSCxFQUFFMEgsRUFBRSxJQUFJQSxFQUFFL1YsS0FBS29QLEdBQUc3TyxLQUFLNk8sR0FBRyxFQUFTN08sTUFBcUpvUixFQUFFMHhCLE1BQU0sV0FBVzlpQyxLQUFLOE4sRUFBRTlOLEtBQUt3VixFQUFFLEtBQUt4VixLQUFLNk8sRUFBRSxHQUF1RHVDLEVBQUV6TCxRQUFRLFNBQVNtSSxFQUFFZSxHQUFHMjBCLEdBQUd4akMsTUFBTUEsS0FBSzhOLEVBQUVuSSxTQUFRLFNBQVM2UCxFQUFFM0gsR0FBRzRrQixFQUFFamQsR0FBRSxTQUFTeEwsR0FBRzhELEVBQUV2TCxLQUFLc00sRUFBRTdFLEVBQUU2RCxFQUFFN04sUUFBT0EsUUFBT0EsT0FDN2RvUixFQUFFcXhCLEVBQUUsV0FBV2UsR0FBR3hqQyxNQUFNLElBQUksSUFBSThOLEVBQUU5TixLQUFLOE4sRUFBRXkwQixJQUFJMXpCLEVBQUU3TyxLQUFLOE4sRUFBRTIwQixJQUFJanRCLEVBQUUsR0FBRzNILEVBQUUsRUFBRUEsRUFBRWdCLEVBQUVsTyxPQUFPa04sSUFBSSxJQUFJLElBQUk3RCxFQUFFOEQsRUFBRUQsR0FBR29DLEVBQUUsRUFBRUEsRUFBRWpHLEVBQUVySixPQUFPc1AsSUFBSXVGLEVBQUUvVixLQUFLb1AsRUFBRWhCLElBQUksT0FBTzJILEdBQUdwRSxFQUFFbXhCLEVBQUUsU0FBU3owQixHQUFHMDFCLEdBQUd4akMsTUFBTSxJQUFJNk8sRUFBRSxHQUFHLEdBQUcsaUJBQWtCZixFQUFFZzNCLEdBQUc5a0MsS0FBSzhOLEtBQUtlLEVBQUVra0IsRUFBR2xrQixFQUFFN08sS0FBSzhOLEVBQUVoSSxJQUFJKytCLEdBQUc3a0MsS0FBSzhOLFVBQVUsQ0FBQ0EsRUFBRTlOLEtBQUs4TixFQUFFeTBCLElBQUksSUFBSSxJQUFJL3NCLEVBQUUsRUFBRUEsRUFBRTFILEVBQUVuTixPQUFPNlUsSUFBSTNHLEVBQUVra0IsRUFBR2xrQixFQUFFZixFQUFFMEgsSUFBSSxPQUFPM0csR0FBR3VDLEVBQUVyTCxJQUFJLFNBQVMrSCxFQUFFZSxHQUE0RyxPQUF6RzIwQixHQUFHeGpDLE1BQU1BLEtBQUt3VixFQUFFLEtBQWtCc3ZCLEdBQUc5a0MsS0FBaEI4TixFQUFFKzJCLEdBQUc3a0MsS0FBSzhOLE1BQWdCOU4sS0FBSzZPLEdBQUc3TyxLQUFLOE4sRUFBRWhJLElBQUlnSSxHQUFHbk4sUUFBUVgsS0FBSzhOLEVBQUUvSCxJQUFJK0gsRUFBRSxDQUFDZSxJQUFJN08sS0FBSzZPLEdBQUcsRUFBUzdPLE1BQ3pib1IsRUFBRXRMLElBQUksU0FBU2dJLEVBQUVlLEdBQUcsT0FBSWYsR0FBOEIsR0FBbkJBLEVBQUU5TixLQUFLdWlDLEVBQUV6MEIsSUFBY25OLE9BQU91VCxPQUFPcEcsRUFBRSxJQUF6Q2UsR0FBdUl1QyxFQUFFclIsU0FBUyxXQUFXLEdBQUdDLEtBQUt3VixFQUFFLE9BQU94VixLQUFLd1YsRUFBRSxJQUFJeFYsS0FBSzhOLEVBQUUsTUFBTSxHQUFHLElBQUksSUFBSUEsRUFBRSxHQUFHZSxFQUFFN08sS0FBSzhOLEVBQUUyMEIsSUFBSWp0QixFQUFFLEVBQUVBLEVBQUUzRyxFQUFFbE8sT0FBTzZVLElBQUksQ0FBQyxJQUFJM0gsRUFBRWdCLEVBQUUyRyxHQUFHeEwsRUFBRTVHLG1CQUFtQjhRLE9BQU9yRyxJQUFJQSxFQUFFN04sS0FBS3VpQyxFQUFFMTBCLEdBQUcsSUFBSSxJQUFJb0MsRUFBRSxFQUFFQSxFQUFFcEMsRUFBRWxOLE9BQU9zUCxJQUFJLENBQUMsSUFBSWhDLEVBQUVqRSxFQUFFLEtBQUs2RCxFQUFFb0MsS0FBS2hDLEdBQUcsSUFBSTdLLG1CQUFtQjhRLE9BQU9yRyxFQUFFb0MsTUFBTW5DLEVBQUVyTyxLQUFLd08sSUFBSSxPQUFPak8sS0FBS3dWLEVBQUUxSCxFQUFFek4sS0FBSyxNQUd4UyxJQUFJZ2xDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sS0FBSyxPQUFPLElBQUksTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQU8sV0FBV0MsR0FBRyxTQUFTMWlDLEtBQUssS0FBVSw2QkFBNkIsMkJBQ3pVLFNBQVNzaUMsR0FBR3AzQixFQUFFZSxHQUFHQSxFQUFFcFAsS0FBSyxJQUFJcU8sRUFBRTNKLFFBQVFtaEMsSUFBRyxTQUFTOXZCLEdBQUcsSUFBSTNILEVBQUV3M0IsR0FBRzd2QixHQUF1RSxPQUFwRTNILElBQUlBLEVBQUUsT0FBdUIsTUFBaEIySCxFQUFFRCxXQUFXLElBQVV4VixTQUFTLElBQUlva0IsT0FBTyxHQUFHa2hCLEdBQUc3dkIsR0FBRzNILEdBQVVBLEtBQUksS0FBTSxTQUFTMDNCLEtBQUssSUFBSXozQixFQUFFMDNCLEtBQUksT0FBTy9NLE1BQU1nQixJQUFJLElBQUlBLElBQUksWUFBWTcyQixLQUFLa0wsR0FBRyxTQUFTMjNCLEtBQUssT0FBT2pWLEVBQUU1bUIsUUFBUTRtQixFQUFFNW1CLE9BQU8yRSxTQUFTbTNCLE1BQU1sekIsTUFBTUEsS0FBS2pFLFVBQVVpRSxLQUFLakUsU0FBU20zQixNQUFNLEdBQUcsU0FBU0MsR0FBRzczQixFQUFFZSxHQUFHQSxFQUFFQSxHQUFHMmhCLEVBQUU1bUIsT0FBTyxJQUFJNEwsRUFBRSxjQUFjMUgsSUFBSTBILEVBQUVpaUIsR0FBR0ksR0FBRy9wQixJQUFJaXFCLEtBQUtscEIsRUFBRU4sU0FBU20zQixLQUFLbHdCLEVBQUUsU0FBU293QixHQUFHOTNCLEVBQUVlLEdBQUcsSUFBU2hCLEVBQUwySCxFQUFFLEdBQUssSUFBSTNILEtBQUtDLEVBQUVELEtBQUtnQixTQUFTZixFQUFFRCxXQUFXZ0IsRUFBRWhCLEdBQUcySCxFQUFFL1YsS0FBS29PLEdBQUcsaUJBQWlCQyxFQUFFRCxJQUFJLE1BQU1DLEVBQUVELElBQUksTUFBTWdCLEVBQUVoQixHQUFHLEVBQUUrM0IsR0FBRzkzQixFQUFFRCxHQUFHZ0IsRUFBRWhCLElBQUlsTixRQUFRNlUsRUFBRS9WLEtBQUtvTyxHQUFHQyxFQUFFRCxLQUFLZ0IsRUFBRWhCLElBQUkySCxFQUFFL1YsS0FBS29PLEdBQUcySCxFQUFFL1YsS0FBS29PLEdBQUcsSUFBSUEsS0FBS2dCLEVBQUVoQixLQUFLQyxHQUFHMEgsRUFBRS9WLEtBQUtvTyxHQUFHLE9BQU8ySCxFQUNoZixTQUFTcXdCLEdBQUcvM0IsR0FBNEIsVUFBekJBLEdBQUdBLEdBQUcwM0IsTUFBS2ptQixlQUF1QlgsTUFBTSxZQUFZOVEsRUFBRThRLE1BQU0sVUFBVTlRLEVBQUU4USxNQUFNLHFCQUFxQjlRLEVBQUU4USxNQUFNLGVBQWU5USxFQUFFOFEsTUFBTSxrQkFBa0I5USxFQUFFOFEsTUFBTSxhQUFrQixTQUFTa25CLEdBQUdoNEIsR0FBR0EsRUFBRUEsR0FBRzBpQixFQUFFNW1CLE9BQU8sSUFBSWtFLEVBQUVnRixRQUFRLE1BQU1qRSxLQUM1WCxTQUFTazNCLEdBQUdqNEIsRUFBRWUsRUFBRTJHLEdBQUcsSUFBSTNILEVBQUV3SixLQUFLMnVCLE1BQU0sSUFBSTN1QixLQUFLSSxVQUFVMVgsV0FBVzhPLEVBQUVBLEdBQUcsSUFBSTJHLEVBQUVBLEdBQUcsSUFBSSxJQUFJeEwsR0FBR0osT0FBT3E4QixPQUFPQyxZQUFZMXdCLEdBQUcsRUFBRXZGLEdBQUdyRyxPQUFPcThCLE9BQU9FLFdBQVd0M0IsR0FBRyxFQUN0SixJQUFJWixLQURvSlksRUFBRSxDQUFDbXNCLE1BQU1uc0IsRUFBRTZyQixPQUFPbGxCLEVBQUU0d0IsSUFBSSxFQUFFcDhCLEVBQUVBLEVBQUUsRUFBRXE4QixLQUFLLEVBQUVwMkIsRUFBRUEsRUFBRSxFQUFFMUIsVUFBUyxFQUFHKzNCLFdBQVUsRUFBR0MsV0FBVSxFQUFHQyxTQUFRLEdBQUloeEIsRUFBRWd3QixLQUFJam1CLGNBQWMxUixJQUFJZ0IsRUFBRXJGLE9BQU9xRSxFQUFFdW5CLEdBQUU1ZixFQUFFLFlBQVkzRyxFQUFFckYsT0FBTyxXQUFXaTlCLEdBQUdqQixPQUFNa0IsS0FBSzU0QixFQUFFQSxHQUFHLG1CQUFtQmUsRUFBRTgzQixZQUFXLEdBQUlueEIsRUFBRTFILEdBQUcsSUFBSUEsRUFBRWUsS0FBS2YsRUFBRSxJQUFJRCxFQUFFakUsT0FBT2lGLEVBQUUyRyxhQUFhK2hCLEdBQUUvaEIsRUFBRXFpQixRQUFHLElBQW9CcmlCLEVBQUVrd0IsS0FBS2x3QixFQUFFa3dCLEtBQUt4eEIsT0FBT3NCLEtBQUt1aUIsR0FBR3ZpQixFQUFFMUgsRUFBRXRFLFFBQVFnTSxFQUFFaE0sT0FBT1EsRUFDbmYsR0FBWThELEVBQUUsT0FBT0csR0FBRyxJQUFLLFFBQVEsSUFBSyxTQUFTLElBQUssTUFBTSxJQUFLLE9BQU9qRSxFQUFFdkssS0FBS3dPLEVBQUUsSUFBSUgsRUFBRUcsSUFBSSxNQUFNLElBQUssU0FBUyxJQUFLLFdBQVcsSUFBSyxhQUFhLE1BQU0sUUFBUWpFLEVBQUV2SyxLQUFLd08sRUFBRSxLQUFLSCxFQUFFRyxHQUFHLEVBQUUsSUFBSSxJQUFJQSxFQUFFakUsRUFBRTNKLEtBQUssS0FDdU4sSUFEOU02UCxHQUFFLFlBQVlBLEdBQUUsVUFBVUEsR0FBRSxTQUFTQSxHQUFFLFNBQVNBLEdBQUUsVUFBVXJDLEVBQUVtRSxXQUFXbkUsRUFBRW1FLFVBQVU0MEIsWUFBWXB4QixHQUFHLFNBQVNBLEdBQXFCc2dCLEdBQW5CN25CLEVBQUVrdEIsR0FBR3p4QixTQUFTLEtBQVUscUJBQXFCbUYsRUFBRUEsYUFBYTBvQixHQUFFMW9CLEVBQUVpcEIsR0FBR2pwQixHQUFHWixFQUFFeTNCLEtBQUtqTyxHQUFHNW9CLEdBQUdaLEVBQUU1QyxhQUFhLFNBQVNtSyxHQUFHMUgsRUFBRSs0QixZQUFZNTRCLEVBQUU1QyxhQUFhLE1BQU0sZUFBY3lDLEVBQUVwRSxTQUFTbzlCLFlBQVksZUFDbmZDLGVBQWUsU0FBUSxHQUFHLEVBQUdsNUIsRUFBRSxHQUFHSSxFQUFFNDBCLGNBQWMvMEIsR0FBR0csRUFBRSxJQUFXSCxFQUFFKzRCLFlBQWU1NEIsRUFBRWlxQixHQUFHLEdBQUdycUIsRUFBRTJILEVBQUV2SCxHQUFHSCxFQUFFMnBCLEdBQUc1b0IsR0FBR1osSUFBSTBxQixJQUFJdkQsR0FBRXRuQixFQUFFLE9BQU9BLEVBQUUsSUFBSUEsRUFBRTNKLFFBQVEsS0FBSyxPQUFPLEtBQUs4SixFQUFFKzRCLE9BQU8sS0FBS2w1QixFQUFFLDBGQUEwRnVxQixHQUFHdnFCLEdBQUcsS0FBa0NBLEVBQUUsSUFBSWtxQixHQUFuQ2xxQixHQUFHRCxFQUFFNm9CLE1BQU03b0IsRUFBRWdwQixXQUFXL29CLEdBQUdBLEVBQWEsS0FBS21xQixJQUFJcHFCLEVBQUVJLEVBQUV2RSxZQUFVbUUsRUFBRW81QixNQTlDMFAsU0FBWW41QixHQUFHLE9BQUdBLGFBQWFrcUIsSUFBSWxxQixFQUFFckwsY0FBY3UxQixHQUFVbHFCLEVBQUVBLEdBQUU4bEIsRUFBRywwQ0FBMEM5bEIsRUFBRSxhQUFhd2pCLEVBQUd4akIsSUFBVSx1QkE4QzlYbzVCLENBQUdwNUIsSUFBSUQsRUFBRWlGLFdBQWE3RSxFQUFFaXFCLEdBQUdycEIsRUFBRWhCLEVBQUUySCxFQUFFdkgsS0FBS0gsRUFBRXE1QixXQUFXbDVCLEVBQUUrNEIsT0FBTyxNQUFTLzRCLEVBQUUsSUFBSUEsRUFBRW01QixRQUFRLE1BQU05VyxJQUFJLE9BQU9yaUIsRUFDbFUsSUFBSW81QixHQUFHLHVDQUF1Q0MsR0FBRyxnQkFBZ0IsU0FBU0MsS0FBSyxJQUFJejVCLEVBQUUsS0FBSyxPQUFNLElBQUt3dUIsSUFBRSxTQUFTenRCLEdBQUcsWUFBWTJoQixFQUFFOW1CLFNBQVM4OUIsV0FBVzM0QixLQUFLZixFQUFFLFdBQVdlLEtBQUtxeUIsR0FBR3QzQixPQUFPLE9BQU9rRSxPQUFPd0IsR0FBRSxTQUFTVCxHQUFzQixNQUFuQjh5QixHQUFFLzNCLE9BQU8sT0FBT2tFLEdBQVNlLEtBQ3hELFNBQVM0NEIsR0FBRzM1QixHQUFZLE9BQVRBLEVBQUVBLEdBQUcwM0IsT0FBWSxVQUFVa0MsTUFBTSxXQUFXQSxPQUFPNTVCLEVBQUV5UixjQUFjWCxNQUFNLDZCQUE2QixTQUFTK29CLEtBQUssSUFBSTc1QixFQUFFMGlCLEVBQUU1bUIsT0FBTyxJQUFJLFNBQVNrRSxHQUFHQSxHQUFHQSxFQUFFczRCLEtBQUssTUFBTXYzQixHQUFHLE9BQU0sR0FDOWUsU0FBUys0QixLQUFLLFlBQU0sSUFBcUJwWCxFQUFFcVgsbUJBQW1CLG1CQUFvQnJYLEVBQUVsaUIsY0FBYyxTQUFTdzVCLEtBQUssT0FBTywyQkFBaUMsZUFBZSxjQUFjLDJCQUFpQyxRQUFRLE9BQU9GLEtBQUssU0FBUyxVQUFVLFNBQVNHLEtBQUssSUFBSWo2QixFQUFFZzZCLEtBQUssTUFBTSxnQkFBZ0JoNkIsR0FBRyxTQUFTQSxFQUN4VCxJQUFJNDRCLEdBQUcsVUFBVXNCLEdBQUcsU0FDcEIsU0FBU3ZCLEdBQUczNEIsR0FBRyxJQUFJZSxFQUFFZixFQUFFeVIsY0FBYyxPQUFHNlYsR0FBRXZtQixFQUFFLFdBQVd1bUIsR0FBRXZtQixFQUFFLFNBQVN1bUIsR0FBRXZtQixFQUFFLFVBQWdCLFFBQVd1bUIsR0FBRXZtQixFQUFFLFlBQWtCLFdBQWN1bUIsR0FBRXZtQixFQUFFLFNBQVN1bUIsR0FBRXZtQixFQUFFLFlBQWtCLEtBQVF1bUIsR0FBRXZtQixFQUFFLFNBQWUsT0FBVXVtQixHQUFFdm1CLEVBQUUsWUFBbUI2M0IsR0FBTXRSLEdBQUV2bUIsRUFBRSxTQUFlLE9BQVV1bUIsR0FBRXZtQixFQUFFLGNBQW9CLGFBQWdCdW1CLEdBQUV2bUIsRUFBRSxTQUFlLFNBQVl1bUIsR0FBRXZtQixFQUFFLFlBQVl1bUIsR0FBRXZtQixFQUFFLFlBQVl1bUIsR0FBRXZtQixFQUFFLFdBQVd1bUIsR0FBRXZtQixFQUFFLFlBQWV1bUIsR0FBRXZtQixFQUFFLGFBQWF1bUIsR0FBRXZtQixFQUFFLFdBQVd1bUIsR0FBRXZtQixFQUFFLFNBQWF1bUIsR0FBRXZtQixFQUFFLFdBQWlCLFdBQWNmLEVBQUVBLEVBQUU4USxNQUFNLHFDQUNoZixHQUFHOVEsRUFBRW5OLE9BQWNtTixFQUFFLEdBQTRDLFFBQTdCazZCLEdBQWMsU0FBdUIsSUFBSUMsR0FBRyxDQUFDbEgsR0FBRyxtQkFBbUJDLEdBQUcsa0JBQWtCLFNBQVNrSCxHQUFHcDZCLEVBQUVlLEdBQUdBLEVBQUVBLEdBQUcsR0FBRyxJQUFjN0UsRUFBVndMLEVBQUUsR0FBRzNILEVBQUUsR0FBSyxJQUFJN0QsS0FBS2krQixHQUFHcDZCLEVBQUVvNkIsR0FBR2orQixLQUFJLEVBQUcsSUFBSUEsRUFBRSxFQUFFQSxFQUFFNkUsRUFBRWxPLE9BQU9xSixTQUFJLElBQXFCNkQsRUFBRWdCLEVBQUU3RSxhQUFhNkQsRUFBRWdCLEVBQUU3RSxJQUFJd0wsRUFBRS9WLEtBQUtvUCxFQUFFN0UsS0FBOEgsT0FBekh3TCxFQUFFMnlCLFFBQU90NUIsRUFBRTJHLEdBQUk3VSxTQUFTa08sRUFBRSxDQUFDLHFCQUE0QixhQUFQMkcsRUFBRXN5QixNQUEwQnR5QixFQUFFaXhCLEdBQVI1NEIsRUFBRTIzQixNQUFhLFdBQVdod0IsSUFBVUEsRUFBRWl4QixHQUFSNTRCLEVBQUUyM0IsTUFBWSxJQUFJaHdCLEdBQVVBLEVBQUUsV0FBVzFILEVBQUUsSUFBSWUsRUFBRXhPLEtBQUssS0FBSyxTQUFTbWxDLEtBQUksT0FBT2hWLEVBQUV4ZSxXQUFXd2UsRUFBRXhlLFVBQVV3akIsV0FBVyxHQUN2ZSxTQUFTNFMsR0FBRXQ2QixFQUFFZSxHQUFHZixFQUFFQSxFQUFFcWlCLE1BQU0sS0FBS3RoQixFQUFFQSxHQUFHMmhCLEVBQUUsSUFBSSxJQUFJaGIsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRW5OLFFBQVEsaUJBQWlCa08sR0FBRyxNQUFNQSxFQUFFMkcsSUFBSTNHLEVBQUVBLEVBQUVmLEVBQUUwSCxJQUE0QixPQUF4QkEsR0FBRzFILEVBQUVuTixTQUFTa08sT0FBRSxHQUFlQSxFQUFFLFNBQVN3NUIsS0FBSyxJQUFJLElBQUl2NkIsRUFBRTBpQixFQUFFOFgsYUFBYXo1QixFQUFFMDVCLEtBQUssR0FBR3o2QixFQUFFLE9BQU9BLEVBQUUwNkIsUUFBUTM1QixFQUFFLEtBQUtmLEVBQUUyNkIsV0FBVzU1QixJQUFHMDJCLFFBQU8vVSxFQUFFdm5CLFVBQWEsTUFBTXVNLEdBQUcsT0FBT295QixRQUFRcFgsRUFBRXZuQixVQUFVLE9BQU0sRUFBRyxTQUFTeS9CLEtBQUssT0FBT0MsTUFBTSxzQkFBc0JqQixNQUFNRCxRQUFRTSxNQUFNTSxPQUFPVCxLQUFLLFNBQVNlLEtBQUssTUFBTSxVQUFVakIsTUFBTSxXQUFXQSxLQUFLLFNBQVNBLEtBQUssT0FBT2xYLEVBQUVqaUIsVUFBVWlpQixFQUFFamlCLFNBQVN1dEIsVUFBVSxLQUNsZSxTQUFTOE0sR0FBRzk2QixHQUFZLE9BQU8rM0IsR0FBaEIvM0IsRUFBRUEsR0FBRzAzQixPQUFrQmlCLEdBQUczNEIsSUFBSTQ0QixHQUFTLFNBQVNtQyxHQUFHLzZCLEdBQUcsWUFBTSxJQUFxQkEsRUFBRSxLQUFLaTNCLEdBQUdqM0IsR0FBRyxTQUFTZzdCLEdBQUdoN0IsR0FBRyxJQUFTMEgsRUFBTDNHLEVBQUUsR0FBSyxJQUFJMkcsS0FBSzFILEVBQUVBLEVBQUVNLGVBQWVvSCxJQUFJLE9BQU8xSCxFQUFFMEgsU0FBSSxJQUFTMUgsRUFBRTBILEtBQUszRyxFQUFFMkcsR0FBRzFILEVBQUUwSCxJQUFJLE9BQU8zRyxFQUFFLFNBQVNrNkIsR0FBR2o3QixHQUFHLEdBQUcsT0FBT0EsRUFBRSxPQUFPekssS0FBSzJsQyxNQUFNbDdCLEdBQUcsU0FBU3k2QixHQUFHejZCLEdBQUcsT0FBT0EsR0FBSXVKLEtBQUsydUIsTUFBTSxJQUFJM3VCLEtBQUtJLFVBQVUxWCxXQUFXLFNBQVNrcEMsR0FBR243QixHQUFZLE1BQU0sVUFBVTI0QixHQUF6QjM0QixFQUFFQSxHQUFHMDNCLFFBQTJCMTNCLEVBQUV5UixjQUFjWCxNQUFNLG9CQUNoWixTQUFTc3FCLEtBQUssSUFBSXA3QixFQUFFMGlCLEVBQUUyWSxPQUFPLEdBQUdyN0IsR0FBR0EsRUFBRTZ6QixFQUFFLElBQUksSUFBSTl5QixLQUFLZixFQUFFNnpCLEVBQUUsR0FBRzd6QixFQUFFNnpCLEVBQUU5eUIsR0FBR2tDLEVBQUVqRCxFQUFFNnpCLEVBQUU5eUIsR0FBR2tDLEdBQUcsR0FBR2pELEVBQUU2ekIsRUFBRTl5QixHQUFHdTVCLEVBQUV0NkIsRUFBRTZ6QixFQUFFOXlCLEdBQUd1NUIsR0FBRyxHQUFHdDZCLEVBQUU2ekIsRUFBRTl5QixHQUFHa0MsRUFBRWpELEVBQUU2ekIsRUFBRTl5QixHQUFHdTVCLEVBQUVob0MsU0FBUzBOLEVBQUVzN0IsR0FBRyxJQUFJLElBQUk1ekIsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRXM3QixHQUFHem9DLE9BQU82VSxJQUFJMUgsRUFBRXM3QixHQUFHNXpCLEdBQUcsS0FBSyxTQUFTNnpCLEdBQUd2N0IsRUFBRWUsR0FBRyxHQUFHZixFQUFFZSxFQUFFLE1BQU10RCxNQUFNLCtDQUErQ3ZMLEtBQUs4TixFQUFFQSxFQUFFOU4sS0FBS3dWLEVBQUUzRyxFQUFFZixFQUFFMDNCLEtBQUkzMkIsRUFBRWk1QixLQUFLOW5DLEtBQUs2TyxFQUFFZzNCLEdBQUcvM0IsSUFBSSxnQkFBZ0JlLEVBQ2hILFNBQVN5NkIsS0FBSyxJQUFJeDdCLEVBQUUwaUIsRUFBRTltQixTQUFTLE9BQU9vRSxRQUFHLElBQXFCQSxFQUFFeTdCLGlCQUFnQixXQUFXejdCLEVBQUV5N0IsZ0JBQ2xDLFNBQVNDLEdBQUcxN0IsR0FBRyxvQkFBcUJpSixTQUFTLG1CQUFvQkEsUUFBUXVGLE1BQU12RixRQUFRdUYsS0FBS3hPLEdBQ3pXLFNBQVMyN0IsR0FBRzM3QixHQUFHLElBQUksSUFBSWUsRUFBRSxJQUFJMkMsS0FBS2dvQixTQUFTMXJCLEVBQUUsS0FBSyxJQUFJeTFCLE1BQU0xMEIsRUFBRTRDLGFBQWEsU0FBUzdPLEtBQUtrTCxHQUFHLE9BQU9lLEVBQUU2NkIsY0FBYyxNQUFNbDBCLElBQUksT0FBTyxLQUFLLFNBQVNtMEIsS0FBSyxTQUFTdkIsR0FBRSx1QkFBdUI1WCxLQUFLNFgsR0FBRSxrQkFBa0I1WCxJQUZsTjZZLEdBQUcvbUMsVUFBVXdELElBQUksV0FBVyxJQUFJZ0ksRUFBRTBpQixFQUFFeGUsVUFBVSxPQUFPbEUsR0FBRyxrQkFBbUJBLEVBQUV1WSxTQUFTc2lCLE1BQU0sc0JBQXNCakIsV0FBTSxJQUFxQjU1QixFQUFFODdCLFlBQVk5N0IsRUFBRXVZLE9BQVVybUIsS0FBSzZPLEVBQUU3TyxLQUFLd1YsRUFBRXhWLEtBQUs4TixFQUFFdUosS0FBS0ssSUFBSSxJQUFJMVgsS0FBSzhOLElBRThSLElBQXNEKzdCLEdBQWxEQyxHQUFHLEdBQUcsU0FBU0MsR0FBR2o4QixHQUFHZzhCLEdBQUdoOEIsS0FBS2c4QixHQUFHaDhCLElBQUcsRUFBRzA3QixHQUFHMTdCLElBQVksSUFBSSxJQUFJazhCLEdBQUcsR0FBR3pvQyxPQUFPc0UsZUFBZW1rQyxHQUFHLE9BQU8sQ0FBQy90QixjQUFhLEVBQUdqTyxZQUFXLEVBQUdoTSxNQUFNLElBQUlULE9BQU9zRSxlQUFlbWtDLEdBQUcsT0FBTyxDQUFDL3RCLGNBQWEsRUFBR2pPLFlBQVcsRUFBR2hNLE1BQU0sSUFBSTZuQyxHQUFHLEdBQUdHLEdBQUdDLEtBQUssTUFBTW44QixJQUFHKzdCLElBQUcsRUFBRyxTQUFTSyxHQUFFcDhCLEVBQUVlLEVBQUUyRyxHQUFHcTBCLEdBQUd0b0MsT0FBT3NFLGVBQWVpSSxFQUFFZSxFQUFFLENBQUNvTixjQUFhLEVBQUdqTyxZQUFXLEVBQUdoTSxNQUFNd1QsSUFBSTFILEVBQUVlLEdBQUcyRyxFQUFFLFNBQVMyMEIsR0FBRXI4QixFQUFFZSxHQUFHLEdBQUdBLEVBQUUsSUFBSSxJQUFJMkcsS0FBSzNHLEVBQUVBLEVBQUVULGVBQWVvSCxJQUFJMDBCLEdBQUVwOEIsRUFBRTBILEVBQUUzRyxFQUFFMkcsSUFBSSxTQUFTNDBCLEdBQUd0OEIsR0FBRyxJQUFJZSxFQUFFLEdBQVUsT0FBUHM3QixHQUFFdDdCLEVBQUVmLEdBQVVlLEVBQ3R4QixTQUFTdzdCLEdBQUd2OEIsR0FBRyxJQUFJZSxFQUFFZixFQUFFLEdBQUcsaUJBQWlCQSxHQUFHLE1BQU1BLEVBQXdCLElBQUksSUFBSTBILEtBQTdCM0csRUFBRSxXQUFXZixFQUFFLEdBQUcsR0FBZ0JBLEVBQUVvOEIsR0FBRXI3QixFQUFFMkcsRUFBRTYwQixHQUFHdjhCLEVBQUUwSCxLQUFLLE9BQU8zRyxFQWdCeFEsU0FBU3k3QixHQUFHeDhCLEdBQUcsSUFBSWUsRUFBRWYsSUFBSUEsRUFBRXk4QixJQUFJLFFBQVEsTUFBTSxLQUFHMTdCLEdBQUdmLEdBQUdBLEVBQUUwOEIsS0FBc0ssTUFBTSxJQUFJbjdCLEVBQUUsaUJBQWlCLG1EQUE5TDY2QixHQUFFbHFDLEtBQUssTUFBTThOLEVBQUUwOEIsS0FBS04sR0FBRWxxQyxLQUFLLGNBQWM4TixFQUFFMjhCLEtBQUssTUFBTSxJQUFJajFCLEVBQUUsS0FBSzFILEVBQUU0OEIsTUFBTWwxQixFQUFFLElBQUtoRSxLQUFLMUQsRUFBRTQ4QixLQUFNaEIsZUFBZVEsR0FBRWxxQyxLQUFLLGlCQUFpQndWLEdBQUcwMEIsR0FBRWxxQyxLQUFLLFdBQVc2TyxHQUFnTyxTQUFTODdCLEdBQUc3OEIsR0FBRyxJQUFJLElBQUllLEVBQUUsSUFBSSs3QixHQUFHOThCLEdBQUcsTUFBTTBILEdBQUczRyxFQUFFLEtBQUssT0FBT0EsRUFBak15N0IsR0FBR2hvQyxVQUFVbXdCLEVBQUUsV0FBVyxNQUFNLENBQUNvWSxJQUFJN3FDLEtBQUs2cUMsSUFBSXpVLFlBQVlwMkIsS0FBS28yQixZQUFZMFUsU0FBUzlxQyxLQUFLOHFDLFNBQVNDLGVBQWUvcUMsS0FBSytxQyxpQkFDcmEsSUFBSU4sR0FBRyxjQUFjQyxHQUFHLGFBQWFGLEdBQUcsa0JBQWtCRCxHQUFHLFlBQVksU0FBU0ssR0FBRzk4QixHQUFHdzhCLEdBQUcvbkMsS0FBS3ZDLEtBQUs4TixHQUFHbzhCLEdBQUVscUMsS0FBSyxjQUFjOE4sRUFBRXk4QixLQUEwRyxTQUFTUyxHQUFHbDlCLEdBQUcsSUFBSWUsRUFBRSxHQUFHMkcsRUFBRTFILEVBQUVtOUIsSUFBSXA5QixFQUFFQyxFQUFFbzlCLElBQUlsaEMsRUFBRThELEVBQUVxOUIsSUFBZ0IsR0FBWnI5QixFQUFFNjhCLEdBQUc3OEIsRUFBRXM5QixNQUFTcGhDLEdBQUdBLEdBQUdxaEMsSUFBSXJoQyxHQUFHc2hDLEtBQUs5MUIsR0FBR3hMLEdBQUdzaEMsS0FBS3o5QixHQUFHN0QsR0FBR3VoQyxLQUFLejlCLEVBQUUsTUFBTXZDLE1BQU0scUNBQXFDdkIsR0FBR3NoQyxJQUFJejhCLEVBQUUyOEIsSUFBSWgyQixHQUFHLEtBQUszRyxFQUFFNDhCLElBQUlqMkIsR0FBRyxLQUFLM0csRUFBRTY4QixJQUFJNzlCLElBQUlnQixFQUFFMjhCLElBQUkzOUIsR0FBRyxLQUFLZ0IsRUFBRTQ4QixJQUFJNTlCLEdBQUcsS0FBS2dCLEVBQUU2OEIsSUFBSWwyQixHQUFHLE1BQU0zRyxFQUFFODhCLElBQUk3OUIsR0FBRyxLQUFLbzhCLEdBQUVscUMsS0FBSzRyQyxHQUFHNWhDLEdBQUdrZ0MsR0FBRWxxQyxLQUFLNnJDLEdBQUd4QixHQUFHeDdCLElBQWhZa0MsRUFBRTY1QixHQUFHTixJQUFJTSxHQUFHdG9DLFVBQVVtd0IsRUFBRSxXQUFXLElBQUkza0IsRUFBRTg4QixHQUFHMVksR0FBR08sRUFBRWx3QixLQUFLdkMsTUFBcUMsT0FBL0I4TixFQUFFZytCLFlBQVk5ckMsS0FBSzhyQyxZQUFtQmgrQixHQUN0TyxJQUFJeTlCLEdBQUcsZ0NBQWdDRixHQUFHLGVBQWVDLEdBQUcsMEJBQTBCTCxHQUFHLFFBQVFHLEdBQUcsVUFBVUYsR0FBRyxXQUFXQyxHQUFHLGNBQWNPLEdBQUcsUUFBUUYsR0FBRyxZQUFZRyxHQUFHLGtCQUFrQkYsR0FBRyxnQkFBZ0JJLEdBQUcsT0FBT0QsR0FBRyxZQUFZLFNBQVNHLEdBQUdqK0IsR0FBVyxJQUFJZSxFQUFFazFCLEdBQWRqMkIsRUFBRWsyQixHQUFHbDJCLEdBQWNrK0IsS0FBSyxLQUFLeDJCLEVBQUV1dUIsR0FBR2oyQixFQUFFbStCLEtBQUssS0FBS3ArQixFQUFFazJCLEdBQUdqMkIsRUFBRW8rQixLQUFLLEtBQTBCLEdBQXJCcitCLEVBQUVBLEdBQUVzK0IsR0FBR3QrQixJQUFTLE1BQVNnQixJQUFJMkcsSUFBSTNILEVBQUUsTUFBTSxJQUFJd0IsRUFBRSxpQkFBaUIyOEIsR0FBRyxLQUFLQyxHQUFHLE9BQU9DLEdBQUcsNkNBQTZDL0IsR0FBRW5xQyxLQUFLLENBQUNraUIsT0FBT3JULEVBQUV1OUIsVUFBVXYrQixFQUFFeUYsS0FBS2tDLEVBQUU2MkIsWUFBWXRJLEdBQUdqMkIsRUFBRXcrQixLQUFLLEtBQUtDLGFBQWF4SSxHQUFHajJCLEVBQUUwK0IsS0FBSyxLQUFLQyxTQUFTMUksR0FBR2oyQixFQUFFNCtCLEtBQUssT0FDdGlCLElBQUlWLEdBQUcsU0FBU0MsR0FBRyxVQUFVSyxHQUFHLGNBQWNFLEdBQUcsZUFBZU4sR0FBRyxPQUFPUSxHQUFHLFdBQVdQLEdBQUcsQ0FBQ1EsYUFBYSxnQkFBZ0JDLGNBQWMsaUJBQWlCQywyQkFBMkJ0QixHQUFHdUIsT0FBT3pCLEdBQUcwQixxQkFBcUJ6QixHQUFHMEIsWUFBWSxnQkFBZ0IsU0FBU0MsR0FBR24vQixHQUFHLElBQUksT0FBTyxJQUFJaStCLEdBQUdqK0IsR0FBRyxNQUFNZSxHQUFHLE9BQU8sTUFBTyxTQUFTcStCLEdBQUdwL0IsR0FBRyxJQUFJZSxFQUFFZixFQUFFcS9CLElBQUksUUFBRyxJQUFxQnQrQixFQUFFLE1BQU0sSUFBSVEsRUFBRSx3QkFBd0IsR0FBRyxpQkFBa0JSLEdBQUcsaUJBQWtCQSxJQUFJQSxFQUFFbE8sT0FBTyxNQUFNLElBQUkwTyxFQUFFLHdCQUF3QnJQLEtBQUtzd0IsRUFBRXpoQixFQUFFN08sS0FBSzZPLEVBQUU3TyxLQUFLOE4sRUFBRSxLQUFLOU4sS0FBS2lPLEdBQUUsRUFBRyxJQUFJdUgsRUFBRTFILEVBQUVzL0IsSUFBSSxHQUFHNTNCLEdBQUcsaUJBQWtCQSxFQUFFLENBQUMzRyxFQUFFMkcsRUFBRTYzQixJQUFJLElBQUl4L0IsRUFBRTJILEVBQUU4M0IsSUFBWSxHQUFSOTNCLEVBQUVBLEVBQUUrM0IsSUFBTyxpQkFBa0IxK0IsR0FBR0EsRUFBRWxPLE9BQU8sQ0FBVSxHQUFUWCxLQUFLOE4sRUFBRWUsT0FBSyxJQUFxQmhCLEdBQUcsa0JBQW1CQSxFQUFFLE1BQU0sSUFBSXdCLEVBQUUsaUJBQWlCaStCLEdBQUcsK0NBQTBELEdBQVh0dEMsS0FBS2lPLElBQUlKLE9BQUssSUFBcUIySCxJQUFJLGlCQUN0eEJBLEdBQUcsaUJBQWtCQSxJQUFJQSxFQUFFN1UsUUFBUSxNQUFNLElBQUkwTyxFQUFFLGlCQUFpQmsrQixHQUFHLHdEQUF3RHZ0QyxLQUFLNk8sRUFBRTJHLEdBQUcsU0FBUyxDQUFDLFFBQUcsSUFBcUIzRyxFQUFFLE1BQU0sSUFBSVEsRUFBRSxpQkFBaUJnK0IsR0FBRyx3REFBd0QsUUFBRyxJQUFxQngvQixRQUFHLElBQXFCMkgsRUFBRSxNQUFNLElBQUluRyxFQUFFLGtDQUFtQyxRQUFHLElBQXFCbUcsRUFBRSxNQUFNLElBQUluRyxFQUFFLGlCQUFpQis5QixHQUFHLHVEQUFtRSxHQUFacHRDLEtBQUtpUSxFQUFFLE1BQVNwQixFQUFFZixFQUFFMC9CLE1BQU0saUJBQzdlMytCLEdBQUUsR0FBVyxpQkFBUkEsRUFBRUEsRUFBRTQrQixNQUF5QjUrQixFQUFFbE8sT0FBT1gsS0FBS2lRLEVBQUVwQixPQUFPLFFBQUcsSUFBcUJBLEVBQUUsTUFBTSxJQUFJUSxFQUFFLGlCQUFpQm8rQixHQUFHLDZEQUE4RCxRQUFHLElBQXFCNStCLEVBQUUsTUFBTSxJQUFJUSxFQUFFLGlCQUFpQm0rQixHQUFHLHVEQUErRCxRQUFHLEtBQVgzK0IsRUFBRWYsRUFBRTQvQixNQUErQixrQkFBbUI3K0IsRUFBRSxNQUFNLElBQUlRLEVBQUUsaUJBQWlCcStCLEdBQUcsK0NBQWtFLEdBQW5CMXRDLEtBQUt3VixJQUFJM0csT0FBYSxLQUFYZixFQUFFQSxFQUFFNi9CLE9BQWdDLGlCQUFrQjcvQixHQUFHLGlCQUM3ZUEsSUFBSUEsRUFBRW5OLFFBQVEsTUFBTSxJQUFJME8sRUFBRSxpQkFBaUJzK0IsR0FBRyx3REFBd0QzdEMsS0FBS00sRUFBRXdOLEdBQUcsS0FBSyxJQUFJcy9CLEdBQUcsVUFBVU8sR0FBRyxvQkFBb0JELEdBQUcsa0JBQWtCRixHQUFHLE1BQU1MLEdBQUcsTUFBTUcsR0FBRyxhQUFhQyxHQUFHLGlCQUFpQkYsR0FBRyxjQUFjSSxHQUFHLFdBQ25RLFNBQVNHLEdBQUc5L0IsR0FBRyxJQUFJZSxFQUFFLEdBQXdLLElBQUksSUFBSTJHLEtBQTdLM0csRUFBRXc5QixZQUFZditCLEVBQUV3aUIsRUFBRXpoQixFQUFFZy9CLG1CQUFtQi8vQixFQUFFMEgsR0FBSzNHLEVBQUVpL0IsbUJBQW1CaGdDLEVBQUVBLEtBQUVlLEVBQUVrL0Isc0JBQXNCamdDLEVBQUVlLEVBQUVBLEVBQUVtL0Isa0JBQWtCbGdDLEVBQUVHLEdBQUVZLEVBQUVvL0IsWUFBWW5nQyxFQUFFbUMsRUFBRXBCLEVBQUVxL0Isa0JBQWtCcGdDLEVBQUV4TixFQUFldU8sRUFBRSxPQUFPQSxFQUFFMkcsV0FBVzNHLEVBQUUyRyxHQUFHLE9BQU8zRyxFQUFpRyxJQUFJcy9CLEdBQUcsS0FDeEYsU0FBU0MsR0FBR3RnQyxHQUFHLElBQUllLEVBQUV3L0IsR0FBR3ZnQyxHQUFHLEtBQUtlLEdBQUdBLEVBQUV5L0IsS0FBS3ovQixFQUFFMC9CLEtBQUsxL0IsRUFBRTIvQixLQUFLMy9CLEVBQUU0L0IsS0FBSyxNQUFNbGpDLE1BQU0sZUFBZXZMLEtBQUtpTyxFQUFFSCxFQUFFOU4sS0FBS3dWLEVBQUUzRyxFQUFFNC9CLElBQUl6dUMsS0FBS3N3QixFQUFFemhCLEVBQUV5L0IsSUFBSXJjLElBQUtqeUIsS0FBSzhOLEVBQUVlLEVBQUU2L0IsYUFBYTcvQixFQUFFa1AsVUFBVWxQLEVBQUVrUCxTQUFTNHdCLGtCQUFrQixLQUFLM3VDLEtBQUtpUSxFQUFFcEIsRUFBRWtQLFVBQVVsUCxFQUFFa1AsU0FBUzZ3QixRQUFRLEtBQUs1dUMsS0FBSzZPLElBQUlBLEVBQUVnZ0MsY0FBYyxhQUFhN3VDLEtBQUs4TixFQUFvSSxTQUFTZ2hDLEdBQUdoaEMsR0FBRyxJQUFJLE9BQU8sSUFBSXNnQyxHQUFHdGdDLEdBQUcsTUFBTWUsR0FBRyxPQUFPLE1BQ2h0QixTQUFTdy9CLEdBQUd2Z0MsR0FBRyxJQUFJQSxFQUFFLE9BQU8sS0FBb0IsR0FBRyxJQUFsQkEsRUFBRUEsRUFBRXFpQixNQUFNLE1BQWF4dkIsT0FBTyxPQUFPLEtBQVksSUFBSSxJQUFJa08sR0FBRyxHQUFsQmYsRUFBRUEsRUFBRSxJQUFrQm5OLE9BQU8sR0FBRyxFQUFFNlUsRUFBRSxFQUFFQSxFQUFFM0csRUFBRTJHLElBQUkxSCxHQUFHLElBQUksSUFBSSxPQUFPekssS0FBSzJsQyxNQUZ5TSxTQUFZbDdCLEdBQUcsSUFBSWUsRUFBRSxHQUFnRCxPQUFTLFNBQVlmLEVBQUVlLEdBQUcsU0FBUzJHLEVBQUVuVCxHQUFHLEtBQUt3TCxFQUFFQyxFQUFFbk4sUUFBUSxDQUFDLElBQUl1RSxFQUFFNEksRUFBRXkyQixPQUFPMTJCLEtBQUs0QyxFQUFFMDlCLEdBQUdqcEMsR0FBRyxHQUFHLE1BQU11TCxFQUFFLE9BQU9BLEVBQUUsSUFBSSxjQUFjN04sS0FBS3NDLEdBQUcsTUFBTXFHLE1BQU0sb0NBQW9DckcsR0FBSSxPQUFPN0MsR0FDN2xCLFdBQWMsSUFBSThyQyxHQUFHLENBQUNBLEdBQUcsR0FBRyxJQUFJLElBQUlyZ0MsRUFBRSxpRUFBaUVxaUIsTUFBTSxJQUFJdGhCLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxNQUFNLE1BQU0yRyxFQUFFLEVBQUUsRUFBRUEsRUFBRUEsSUFBSSxJQUFJLElBQUkzSCxFQUFFQyxFQUFFMU4sT0FBT3lPLEVBQUUyRyxHQUFHMmEsTUFBTSxLQUFLbm1CLEVBQUUsRUFBRUEsRUFBRTZELEVBQUVsTixPQUFPcUosSUFBSSxDQUFDLElBQUlpRyxFQUFFcEMsRUFBRTdELFFBQUcsSUFBU21rQyxHQUFHbCtCLEtBQUtrK0IsR0FBR2wrQixHQUFHakcsS0FEeVcra0MsR0FBSyxJQUFJLElBQUlsaEMsRUFBRSxJQUFJLENBQUMsSUFBSTdELEVBQUV3TCxHQUFHLEdBQUd2RixFQUFFdUYsRUFBRSxHQUFHdkgsRUFBRXVILEVBQUUsSUFBSThhLEVBQUU5YSxFQUFFLElBQUksR0FBRyxLQUFLOGEsSUFBSSxJQUFJdG1CLEVBQUUsTUFBTTZFLEVBQUU3RSxHQUFHLEVBQUVpRyxHQUFHLEdBQUcsSUFBSWhDLElBQUlZLEVBQUVvQixHQUFHLEVBQUUsSUFBSWhDLEdBQUcsR0FBRyxJQUFJcWlCLEdBQUd6aEIsRUFBRVosR0FBRyxFQUFFLElBQUlxaUIsS0FBclgwZSxDQUFHbGhDLEdBQUUsU0FBUzBILEdBQUczRyxHQUFHcUYsT0FBT2dRLGFBQWExTyxNQUFZM0csRUFFL1FvZ0MsQ0FBR25oQyxJQUFJLE1BQU1ELElBQUksT0FBTyxLQUQ0V3VnQyxHQUFHOXJDLFVBQVU0c0MsRUFBRSxXQUFXLE9BQU9sdkMsS0FBS2lRLEdBQUdtK0IsR0FBRzlyQyxVQUFVaEMsRUFBRSxXQUFXLE9BQU9OLEtBQUs2TyxHQUFHdS9CLEdBQUc5ckMsVUFBVXZDLFNBQVMsV0FBVyxPQUFPQyxLQUFLaU8sR0FDcmUsSUFBSWtoQyxHQUFHLGtIQUFrSGhmLE1BQU0sS0FBS2lmLEdBQUcsQ0FBQyxZQUFZLGdCQUFnQixRQUFRLGVBQWUsU0FBU0MsR0FBRyxDQUFDQyxHQUFHLENBQUN2YixHQUFHLFNBQVMvQixHQUFHLElBQUlILEdBQUcsSUFBSTNCLEdBQUcsZUFBZXNFLEdBQUc0YSxJQUFJbE8sR0FBRyxDQUFDbk4sR0FBRyxLQUFLL0IsR0FBRyxJQUFJSCxHQUFHLElBQUkzQixHQUFHLGFBQWFzRSxHQUFHNGEsSUFBSWpPLEdBQUcsQ0FBQ3BOLEdBQUcsS0FBSy9CLEdBQUcsSUFBSUgsR0FBRyxJQUFJM0IsR0FBRyxhQUFhc0UsR0FBRzRhLElBQUk5TixHQUFHLENBQUN2TixHQUFHLE9BQU8vQixHQUFHLElBQUlILEdBQUcsSUFBSTNCLEdBQUcsY0FBY3NFLEdBQUcyYSxJQUFJck8sR0FBRyxDQUFDL00sR0FBRyxTQUFTL0IsR0FBRyxJQUFJSCxHQUFHLElBQUkzQixHQUFHLFlBQVlzRSxHQUFHLEtBQ3puQixTQUFTK2EsR0FBR3poQyxHQUFHLElBQUksSUFBSWUsS0FBS3dnQyxHQUFHLEdBQUdBLEdBQUd4Z0MsR0FBR3FoQixJQUFJcGlCLEVBQUUsT0FBT3VoQyxHQUFHeGdDLEdBQUcsT0FBTyxLQUFNLFNBQVMyZ0MsR0FBRzFoQyxHQUFHLElBQUllLEVBQUUsR0FBR0EsRUFBRSxnQkFBZ0I0Z0MsR0FBRzVnQyxFQUFFLGNBQWM2Z0MsR0FBRzdnQyxFQUFFLGNBQWM4Z0MsR0FBRzlnQyxFQUFFLGVBQWUrZ0MsR0FBRyxJQUFJcDZCLEVBQUUxSCxHQUFHQSxFQUFFK2hDLElBQUksSUFBSSxHQUFHcjZCLEVBQUUsT0FBTzNHLEVBQUUyRyxHQUFHLElBQUkzRyxFQUFFMkcsR0FBRzFILEdBQUcsSUFBSWdpQyxHQUFHaGlDLEdBQUcsUUFBRyxJQUFxQkEsRUFBRWlpQyxJQUFJLE9BQU8sSUFBSUMsR0FBR2xpQyxHQUFHLE1BQU1ELElBQUksT0FBTyxLQUFLLElBQUlraUMsR0FBRyxVQUFVRixHQUFHLGFBQ2xVLFNBQVNHLEdBQUdsaUMsR0FBRyxJQUFJZSxFQUFFZixFQUFFK2hDLElBQUksSUFBSWhoQyxHQUFHZixFQUFFaWlDLElBQUksQ0FBQyxJQUFJdjZCLEVBQUVzNUIsR0FBR2hoQyxFQUFFaWlDLEtBQUt2NkIsR0FBR0EsRUFBRTFILElBQUllLEVBQUUyRyxFQUFFMUgsR0FBRyxJQUFJZSxFQUFFLE1BQU10RCxNQUFNLGlDQUFvQyxhQUFhc0QsR0FBRyxVQUFVQSxJQUFFQSxFQUFFLE1BQUsyRyxHQUFFLE9BQUcsSUFBcUIxSCxFQUFFbWlDLFVBQVV6NkIsSUFBSTFILEVBQUVtaUMsVUFBVSwwQ0FBMENuaUMsRUFBRW9pQyxPQUFPMTZCLEdBQUUsR0FBSTAwQixHQUFFbHFDLEtBQUssYUFBYTZPLEdBQUdxN0IsR0FBRWxxQyxLQUFLLFlBQVl3VixHQUFHLFNBQVNzNkIsR0FBR2hpQyxHQUFHa2lDLEdBQUd6dEMsS0FBS3ZDLEtBQUs4TixHQUE2Qm84QixHQUFFbHFDLEtBQUssVUFBVXFxQyxJQUEzQ3Y4QixFQUFFaTdCLEdBQUdqN0IsRUFBRXFpQyxhQUFhLFFBQTZCLEtBQzlZLFNBQVNWLEdBQUczaEMsR0FBbUIsR0FBaEJnaUMsR0FBR3Z0QyxLQUFLdkMsS0FBSzhOLEdBQU0sZ0JBQWdCOU4sS0FBS293QyxXQUFXLE1BQU03a0MsTUFBTSx3QkFBa0MsU0FBU29rQyxHQUFHN2hDLEdBQW1CLEdBQWhCZ2lDLEdBQUd2dEMsS0FBS3ZDLEtBQUs4TixHQUFNLGNBQWM5TixLQUFLb3dDLFdBQVcsTUFBTTdrQyxNQUFNLHdCQUF3QjIrQixHQUFFbHFDLEtBQUssV0FBV0EsS0FBS3F3QyxTQUFTcndDLEtBQUtxd0MsUUFBUUMsT0FBTyxNQUFlLFNBQVNaLEdBQUc1aEMsR0FBbUIsR0FBaEJnaUMsR0FBR3Z0QyxLQUFLdkMsS0FBSzhOLEdBQU0sY0FBYzlOLEtBQUtvd0MsV0FBVyxNQUFNN2tDLE1BQU0sd0JBQ25XLFNBQVNxa0MsR0FBRzloQyxHQUFtQixHQUFoQmdpQyxHQUFHdnRDLEtBQUt2QyxLQUFLOE4sR0FBTSxlQUFlOU4sS0FBS293QyxXQUFXLE1BQU03a0MsTUFBTSx3QkFBd0IyK0IsR0FBRWxxQyxLQUFLLFdBQVc4TixFQUFFcWhCLFlBQVksTUFBZSxTQUFTb2hCLEdBQUd6aUMsR0FBRyxJQUFJZSxFQUFFbTFCLEdBQUdsMkIsR0FBRzBILEVBQUV1dUIsR0FBR2wxQixFQUFFLFFBQVFoQixFQUFFazJCLEdBQUdDLEdBQUd4dUIsR0FBRyxRQUErQixPQUF2QjNHLEVBQUVrMUIsR0FBR2wxQixFQUFFLGdCQUF1QmsxQixHQUFHQyxHQUFHbjFCLEdBQUcsU0FBU0EsR0FBR2hCLEdBQUcySCxHQUFHMUgsRUFBRyxTQUFTMGlDLEdBQUcxaUMsRUFBRWUsR0FBRyxJQUFJZixJQUFJZSxFQUFFLE1BQU0sSUFBSVEsRUFBRSxpQkFBaUIsb0RBQW9ELEdBQUd2QixHQUFHZSxFQUFFLE1BQU0sSUFBSVEsRUFBRSxpQkFBaUIseURBQXlEclAsS0FBSzhOLEVBQUVBLEdBQUcsS0FBSzlOLEtBQUs2TyxFQUFFQSxHQUFHLEtBQUs3TyxLQUFLNlgsS0FBSzdYLEtBQUs4TixFQUFFMmlDLEdBQUdDLEdBRnRIMy9CLEVBQUUrK0IsR0FBR0UsSUFDalRqL0IsRUFBRTArQixHQUFHSyxJQUFrSy8rQixFQUFFNCtCLEdBQUdHLElBQXlHLytCLEVBQUUyK0IsR0FBR0ksSUFDdFAvK0IsRUFBRTYrQixHQUFHRSxJQUE0WCxJQUFJVyxHQUFHLFNBQVNDLEdBQUcsU0FBNk0sU0FBU0MsTUFBdUgsU0FBU0MsR0FBRzlpQyxFQUFFZSxHQUFHLE9BQU9mLEVBQUUxSSxNQUFLLFNBQVNvUSxHQUFHLEdBQUdBLEVBQUVxN0IsSUFBSSxDQUFDLElBQUloakMsRUFBRWloQyxHQUFHdDVCLEVBQUVxN0IsS0FBSyxJQUFJaGpDLEdBQUdnQixHQUFHaEIsRUFBRXlpQixFQUFFLE1BQU0sSUFBSWpoQixFQUFFLGlCQUFpQixPQUFPbUcsRUFBRSxNQUFNLElBQUluRyxFQUFFLG9CQUFvQkMsR0FBRSxTQUFTa0csR0FBRyxNQUFNQSxHQUFHQSxFQUFFbEMsTUFBTWtDLEVBQUVsQyxNQUFNOGUsRUFBRyxpQkFBaUIsSUFBSS9pQixFQUFFLGlCQUFpQm1HLEtBQ3ZsQyxTQUFTczdCLEdBQUdoakMsRUFBRWUsR0FBRyxJQUFHQSxFQUFnQixNQUFNLElBQUlRLEVBQUUsaUJBQWlCLG9DQUEzQ3JQLEtBQUs4TixFQUFFZSxFQUF3RXE3QixHQUFFbHFDLEtBQUssYUFBYThOLEdBQUdvOEIsR0FBRWxxQyxLQUFLLGVBQWU4TixHQUF3TCxTQUFTaWpDLEdBQUdqakMsR0FBRyxNQUFNLENBQUNrakMsYUFBYWxqQyxFQUFFQSxFQUFFbWpDLFdBQVcsb0JBQzVYLFNBQVNDLEdBQUdwakMsR0FBRyxHQUFHQSxHQUFHQSxFQUFFc2lDLFlBQVl0aUMsRUFBRXFqQyxjQUFjLEdBQUdyakMsRUFBRXNpQyxXQUFXOXZCLFFBQVEsVUFBVXhTLEVBQUVrakMsYUFBYSxJQUFJLE9BQU8sSUFBSUYsR0FBR2hqQyxFQUFFc2lDLFdBQVd0aUMsRUFBRWtqQyxjQUFjLE1BQU1uaUMsSUFBSSxPQUFPLEtBQ3BLLFNBQVN1aUMsR0FBR3RqQyxFQUFFZSxFQUFFMkcsR0FBZSxHQUFaeFYsS0FBSzhOLEVBQUUsS0FBUWUsRUFBRXdpQyxTQUFTeGlDLEVBQUV5aUMsWUFBWXppQyxFQUFFd2lDLFNBQVNuSCxHQUFFbHFDLEtBQUssVUFBVTZPLEVBQUV3aUMsU0FBU3hpQyxFQUFFeWlDLGFBQWFwSCxHQUFFbHFDLEtBQUssY0FBYzZPLEVBQUV5aUMsYUFBYXppQyxFQUFFM0QsUUFBUTJELEVBQUVtaUMsY0FBYzlHLEdBQUVscUMsS0FBSyxRQUFRNk8sRUFBRTNELE9BQU8yRCxFQUFFbWlDLGVBQWVoeEMsS0FBSzhOLEVBQUVlLEVBQUVtaUMsa0JBQW1CLEtBQUduaUMsRUFBRTBpQyxhQUFZMWlDLEVBQUUyaUMsaUJBQTZGLE1BQU0sSUFBSW5pQyxFQUFFLGlCQUFpQixvQ0FBekc2NkIsR0FBRWxxQyxLQUFLLGNBQWM2TyxFQUFFMGlDLFlBQVlySCxHQUFFbHFDLEtBQUssU0FBUzZPLEVBQUUyaUMsa0JBQXdGdEgsR0FBRWxxQyxLQUFLLGFBQWE4TixHQUFHbzhCLEdBQUVscUMsS0FBSyxlQUFld1YsR0FFbGQsU0FBU2k4QixHQUFHM2pDLEdBQUcsSUFBSWUsRUFBRSxHQUFnUyxPQUE3UmYsRUFBRXVqQyxVQUFVeGlDLEVBQUU2aUMsU0FBUzVqQyxFQUFFdWpDLFNBQVN2akMsRUFBRXdqQyxjQUFjemlDLEVBQUU4aUMsYUFBYTdqQyxFQUFFd2pDLGFBQWF4akMsRUFBRThqQyxTQUFTL2lDLEVBQUVnakMsbUJBQW1CL2pDLEVBQUU4akMsUUFBUS9pQyxFQUFFdWhDLFdBQVd0aUMsRUFBRXNpQyxXQUFXdGlDLEVBQUU1QyxRQUFRNEMsRUFBRUEsSUFBSWUsRUFBRTNELE1BQU00QyxFQUFFNUMsT0FBTzJELEVBQUUsQ0FBQ2lqQyxTQUFTbE4sR0FBRy8xQixHQUFHOU8sV0FBV2t4QyxXQUFXLG9CQUFvQm5qQyxFQUFFQSxXQUFXZSxFQUFFaWpDLFNBQVNqakMsRUFBRW1pQyxhQUFhbGpDLEVBQUVBLEdBQVVlLEVBRTVULFNBQVNrakMsR0FBR2prQyxHQUFHLEdBQUdBLEdBQUdBLEVBQUVzaUMsWUFBWXRpQyxFQUFFcWpDLGFBQWEsQ0FBQyxJQUFJdGlDLEVBQUUsQ0FBQ3dpQyxRQUFRdmpDLEVBQUVra0MsYUFBYVYsWUFBWXhqQyxFQUFFMGpDLGlCQUFpQixLQUFLMWpDLEVBQUVta0MsaUJBQWlCVCxpQkFBaUIxakMsRUFBRTBqQyxpQkFBaUJELFdBQVd6akMsRUFBRTBqQyxrQkFBa0IxakMsRUFBRW1rQyxpQkFBaUIvbUMsTUFBTTRDLEVBQUU1QyxNQUFNOGxDLGFBQWFsakMsRUFBRWtqQyxjQUFjLElBQUksT0FBTyxJQUFJSSxHQUFHdGpDLEVBQUVzaUMsV0FBV3ZoQyxFQUFFZixFQUFFcWpDLGNBQWMsTUFBTTM3QixLQUFLLE9BQU8sS0FBSyxTQUFTMDhCLEdBQUdwa0MsRUFBRWUsR0FBRzdPLEtBQUt5OUIsR0FBRzV1QixHQUFHLEdBQUdzN0IsR0FBRW5xQyxLQUFLLENBQUNvd0MsV0FBV3RpQyxFQUFFcWtDLGlCQUFnQixJQUFLbnlDLEtBQUs0M0IsR0FBRyxHQUFHNTNCLEtBQUs0MUIsSUFBSTJaLEdBQUd6aEMsSUFBSSxJQUFJaW1CLElBQUksS0FBSy96QixLQUFLMjFCLEdBQUcsS0FDblosU0FBU3ljLEdBQUd0a0MsR0FBRyxHQUFHLGlCQUFrQkEsR0FBRyxHQUFHQSxFQUFFd1MsUUFBUSxTQUFTLE1BQU0sSUFBSWpSLEVBQUUsaUJBQWlCLG1EQUFtRDZpQyxHQUFHM3ZDLEtBQUt2QyxLQUFLOE4sRUFBRSxJQUFhLFNBQVN1a0MsR0FBR3ZrQyxHQUFHb2tDLEdBQUczdkMsS0FBS3ZDLEtBQUs4TixFQUFFc2hDLElBQUlwdkMsS0FBSzhOLEVBQUUsR0FDeUYsU0FBU3drQyxLQUFLRCxHQUFHOXZDLEtBQUt2QyxLQUFLLGdCQUM3WCxTQUFTdXlDLEdBQUd6a0MsR0FBRyxJQUFJQSxFQUFFLE1BQU0sSUFBSXVCLEVBQUUsaUJBQWlCLG9FQUFvRSxJQUFJUixFQUFFZixFQUEwQixPQUF4QitDLEVBQUUvQyxLQUFLZSxFQUFFZixFQUFFd2pDLGNBQW1CLElBQUtnQixJQUFJRSxXQUFXLENBQUNsQixZQUFZemlDLElBQUksU0FBUzRqQyxLQUFLSixHQUFHOXZDLEtBQUt2QyxLQUFLLGNBQzVOLFNBQVMweUMsR0FBRzVrQyxHQUFHLElBQUlBLEVBQUUsTUFBTSxJQUFJdUIsRUFBRSxpQkFBaUIsb0VBQW9FLElBQUlSLEVBQUVmLEVBQTBCLE9BQXhCK0MsRUFBRS9DLEtBQUtlLEVBQUVmLEVBQUV3akMsY0FBbUIsSUFBS21CLElBQUlELFdBQVcsQ0FBQ2xCLFlBQVl6aUMsSUFBSSxTQUFTOGpDLEtBQUtOLEdBQUc5dkMsS0FBS3ZDLEtBQUssY0FBY0EsS0FBS296QixHQUFHLFdBQWdHLFNBQVN3ZixHQUFHOWtDLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUUxSCxFQUFzQyxPQUFwQytDLEVBQUUvQyxLQUFLMEgsRUFBRTFILEVBQUV1akMsUUFBUXhpQyxFQUFFZixFQUFFd2pDLGNBQW1CLElBQUtxQixJQUFJSCxXQUFXLENBQUNuQixRQUFRNzdCLEVBQUU4N0IsWUFBWXppQyxJQUFJLFNBQVNna0MsS0FBS1gsR0FBRzN2QyxLQUFLdkMsS0FBSyxjQUFjbXZDLElBQ3JaLFNBQVMyRCxHQUFHaGxDLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUUxSCxFQUE4QyxHQUE1QytDLEVBQUUyRSxLQUFLQSxFQUFFLENBQUMrN0IsV0FBV3pqQyxFQUFFMGpDLGlCQUFpQjNpQyxLQUFRMkcsRUFBRSs3QixhQUFhLzdCLEVBQUVnOEIsaUJBQWlCLE1BQU0sSUFBSW5pQyxFQUFFLGlCQUFpQixnRkFBZ0YsT0FBTyxJQUFJK2hDLEdBQUcsY0FBYzU3QixFQUFFLGVBQzlVLFNBQVN1OUIsR0FBR2psQyxFQUFFZSxFQUFFMkcsR0FBR3hWLEtBQUs4TixFQUFFQSxFQUFFOU4sS0FBS2lRLEVBQUVwQixFQUFFcTdCLEdBQUVscUMsS0FBSyxhQUFhLFlBQVlrcUMsR0FBRWxxQyxLQUFLLGVBQWV3VixJQUFJdzlCLEdBQUdDLDBCQUEwQkQsR0FBR0MsMEJBQTBCRCxHQUFHRSwrQkFDK0ssU0FBU0MsR0FBR3JsQyxHQUFHLE9BQU9BLEdBQUdBLEVBQUVzbEMsT0FBT3RsQyxFQUFFdWxDLFNBQVMsSUFBSU4sR0FBR2psQyxFQUFFc2xDLE1BQU10bEMsRUFBRXVsQyxTQUFTdmxDLEVBQUVxakMsY0FBYyxLQUFLLFNBQVM2QixLQUFLN0ksR0FBRW5xQyxLQUFLLENBQUNvd0MsV0FBVyxXQUFXK0IsaUJBQWdCLElBQ25lLFNBQVNtQixHQUFHeGxDLEVBQUVlLEdBQVcsS0FBUkEsRUFBRTBrQyxHQUFHMWtDLElBQVMsTUFBTSxJQUFJUSxFQUFFLGlCQUFpQix1QkFBdUIsT0FBTyxJQUFJMGpDLEdBQUdqbEMsRUFBRWUsRUFBRXlFLEtBQUswL0IsR0FBR0MsMkJBQTJCLFNBQVNNLEdBQUd6bEMsR0FBVyxPQUFPQSxFQUFFbS9CLEdBQWpCbi9CLEVBQUV5aUMsR0FBR3ppQyxNQUFvQkEsRUFBRXMrQixZQUFZZixHQUFHdjlCLEVBQUUsS0FBbUksU0FBUzBsQyxHQUFHMWxDLEdBQUcsS0FBS0EsRUFBRWtuQixJQUFJbG5CLEVBQUVpbkIsSUFBSWpuQixFQUFFa21CLElBQUlsbUIsRUFBRW1pQixJQUFJLE1BQU0sSUFBSTVnQixFQUFFLGtCQUFrQnJQLEtBQUs4TixFQUFFQSxFQUFFbzhCLEdBQUVscUMsS0FBSyxhQUFhLFNBQVNBLEtBQUtrd0IsR0FBRyxRQUFRZ2EsR0FBRWxxQyxLQUFLLGVBQWUsU0FFNWQsU0FBU3l6QyxHQUFHM2xDLEdBQUcsR0FBR0EsR0FBRyxVQUFVQSxFQUFFc2lDLGFBQWF0aUMsRUFBRTRsQyxnQkFBZ0I1bEMsRUFBRTZsQyxrQkFBa0I3bEMsRUFBRThsQyxnQkFBZ0I5bEMsRUFBRWcrQixhQUFhLENBQUMsSUFBSWo5QixFQUFFLEdBQTBHLE9BQXZHNGpCLEVBQUUsQ0FBQyxpQkFBaUIsbUJBQW1CLGlCQUFpQixnQkFBZSxTQUFTamQsR0FBRzFILEVBQUUwSCxLQUFLM0csRUFBRTJHLEdBQUcxSCxFQUFFMEgsT0FBYSxJQUFJZytCLEdBQUcza0MsR0FBRyxPQUFPLEtBQUssU0FBU2dsQyxHQUFHL2xDLEdBQUcsT0FBT0EsRUFBRUEsRUFBRWttQixJQUFJbG1CLEVBQUVBLEVBQUVtaUIsR0FBRyxDQUFDMmpCLGVBQWU5bEMsRUFBRUEsRUFBRWttQixHQUFHOFgsWUFBWWgrQixFQUFFQSxFQUFFbWlCLElBQUksQ0FBQzZqQixZQUFZaG1DLEVBQUVBLEVBQUVrbkIsR0FBRzFoQixLQUFLeEYsRUFBRUEsRUFBRWluQixJQUNoWCxTQUFTZ2YsR0FBR2ptQyxHQUFHLElBQUk5TixLQUFLOE4sRUFBRUEsR0FBRyxVQUFnQixNQUFNZSxHQUFHLE1BQU0sSUFBSVEsRUFBRSxpQkFBaUIscU5BQXNOODZCLEdBQUVucUMsS0FBSyxDQUFDb3dDLFdBQVcsUUFBUStCLGlCQUFnQixJQUdwVixTQUFTNkIsR0FBR2xtQyxFQUFFZSxHQUFHLElBQUlmLEVBQUUsTUFBTSxJQUFJdUIsRUFBRSwyQkFBMkIsSUFBSVIsRUFBRSxNQUFNLElBQUlRLEVBQUUsNkJBQTZCLE9BQU8sSUFBSW1rQyxHQUFHLENBQUN4ZSxHQUFHbG5CLEVBQUVpbkIsR0FBR2xtQixJQUNwSSxTQUFTb2xDLEdBQUdubUMsR0FBRyxHQUFHQSxFQUFFOGxDLGdCQUFnQjlsQyxFQUFFZytCLFlBQVksT0FBTyxJQUFJMEgsR0FBRyxDQUFDeGYsR0FBR2xtQixFQUFFOGxDLGVBQWUzakIsR0FBR25pQixFQUFFZytCLGNBQWMsSUFBSWo5QixFQUFFZixHQUFHQSxFQUFFc2lDLFdBQVcsSUFBSXZoQyxHQUFHLGFBQWFBLEVBQUUsT0FBTyxLQUFLLElBQUkyRyxFQUFFMUgsR0FBR0EsRUFBRW1rQyxpQkFBaUJwa0MsRUFBRUMsR0FBR0EsRUFBRTBqQyxpQkFBaUJ4bkMsRUFBRThELEdBQUdBLEVBQUU1QyxNQUFNK0UsRUFBRW5DLEdBQUdBLEVBQUVra0MsYUFBYS9qQyxFQUFFSCxHQUFHQSxFQUFFa2pDLGFBQWEsSUFBSSxPQUFPbmlDLEdBQUcsSUFBSyxhQUFhLE9BQU8rakMsR0FBRzNpQyxFQUFFdUYsR0FBRyxJQUFLLGVBQWUsT0FBTys4QixHQUFHLzhCLEdBQUcsSUFBSyxhQUFhLE9BQU9rOUIsR0FBR2w5QixHQUFHLElBQUssY0FBYyxPQUFPczlCLEdBQUd0OUIsRUFBRTNILEdBQUcsUUFBUSxPQUFPMkgsR0FBRzNILEdBQUdvQyxHQUFHaEMsRUFBRUEsRUFBRSxHQUFHWSxFQUFFeVIsUUFBUSxTQUFTLElBQUl3d0IsR0FBR2ppQyxFQUFFWixHQUFHLElBQUltakMsR0FBR3ZpQyxFQUFFLENBQUNtaUMsYUFBYS9pQyxFQUFFb2pDLFFBQVF2akMsRUFBRWtrQyxhQUMzZlYsWUFBWXhqQyxFQUFFbWtDLGtCQUFrQnBqQyxHQUFHLElBQUt3akMsR0FBR3hqQyxHQUFJMmpDLFdBQVcsQ0FBQ25CLFFBQVFwaEMsRUFBRXFoQyxZQUFZOTdCLEVBQUUwK0IsU0FBU2xxQyxJQUFJLE1BQU0sTUFBTXNtQixHQUFHLE9BQU8sTUFBTSxTQUFTNmpCLEdBQUdybUMsR0FBRyxJQUFJQSxFQUFFcWtDLGdCQUFnQixNQUFNLElBQUk5aUMsRUFBRSwwQkFBNEIsU0FBUytrQyxHQUFHdG1DLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEVBQUVpRyxFQUFFaEMsR0FBc0csR0FBbkdqTyxLQUFLd1YsRUFBRTFILEVBQUU5TixLQUFLNk8sRUFBRUEsR0FBRyxLQUFLN08sS0FBS2lPLEVBQUV1SCxHQUFHLEtBQUt4VixLQUFLaVEsRUFBRXBDLEdBQUcsS0FBSzdOLEtBQUtNLEVBQUUyUCxHQUFHLEtBQUtqUSxLQUFLc3dCLEVBQUVyaUIsR0FBRyxLQUFLak8sS0FBSzhOLEVBQUU5RCxHQUFHLE1BQVFoSyxLQUFLaU8sSUFBR2pPLEtBQUs4TixFQUFrSCxNQUFNLElBQUl1QixFQUFFLHNCQUEzSCxHQUFHclAsS0FBS2lPLEdBQUdqTyxLQUFLOE4sRUFBRSxNQUFNLElBQUl1QixFQUFFLHNCQUFzQixHQUFHclAsS0FBS2lPLElBQUlqTyxLQUFLaVEsRUFBRSxNQUFNLElBQUlaLEVBQUUsc0JBQ2xSLFNBQVNnbEMsR0FBR3ZtQyxHQUFXLE9BQVJBLEVBQUVBLEdBQUcsSUFBWStKLEtBQUssSUFBSXU4QixHQUFHdG1DLEVBQUUrSixLQUFLL0osRUFBRXdtQyxRQUFReG1DLEVBQUV5bUMsWUFBWXptQyxFQUFFMG1DLFVBQVUxbUMsRUFBRWpKLE9BQU95dEIsRUFBR3hrQixFQUFFakosT0FBT2lKLEVBQUVna0MsU0FBU2hrQyxFQUFFMitCLFVBQVUsS0FnQjlSLFNBQVNnSSxLQUFLejBDLEtBQUs2TyxFQUFFLEtBQUs3TyxLQUFLOE4sRUFBRSxHQXhDdWdCMGlDLEdBQUdsdUMsVUFBVXV4QixHQUFHLFdBQVcsT0FBTzd6QixLQUFLOE4sRUFBRWl2QixHQUFFLzhCLEtBQUs4TixHQUFHaXZCLEdBQUUvOEIsS0FBSzZPLElBQUkyaEMsR0FBR2x1QyxVQUFVbXdCLEVBQUUsV0FBVyxPQUFPenlCLEtBQUs2WCxNQUFNNDRCLEdBQUcsQ0FBQ2lFLG1CQUFtQixDQUFDckQsUUFBUXJ4QyxLQUFLOE4sSUFBSSxDQUFDNG1DLG1CQUFtQixDQUFDQyxrQkFBa0IzMEMsS0FBSzZPLEtBQW9COGhDLEdBQUdydUMsVUFBVTR1QixHQUFHLGFBQWF5ZixHQUFHcnVDLFVBQVV1TSxFQUFFLGFBQWE4aEMsR0FBR3J1QyxVQUFVa1QsRUFBRSxhQUFhbTdCLEdBQUdydUMsVUFBVW13QixFQUFFLGFBQzFzQnFlLEdBQUd4dUMsVUFBVTR1QixHQUFHLFNBQVNwakIsR0FBRyxPQUFPOG1DLEdBQUc5bUMsRUFBRWlqQyxHQUFHL3dDLFFBQVE4d0MsR0FBR3h1QyxVQUFVdU0sRUFBRSxTQUFTZixFQUFFZSxHQUFHLElBQUkyRyxFQUFFdTdCLEdBQUcvd0MsTUFBa0IsT0FBWndWLEVBQUU2N0IsUUFBUXhpQyxFQUFTZ21DLEdBQUcvbUMsRUFBRTBILElBQUlzN0IsR0FBR3h1QyxVQUFVa1QsRUFBRSxTQUFTMUgsRUFBRWUsR0FBRyxPQUFPK2hDLEdBQUdrRSxHQUFHaG5DLEVBQUVpakMsR0FBRy93QyxPQUFPNk8sSUFBMEVpaUMsR0FBR3h1QyxVQUFVbXdCLEVBQUUsV0FBVyxNQUFNLENBQUMyZCxXQUFXcHdDLEtBQUtvd0MsV0FBV2UsYUFBYW54QyxLQUFLbXhDLGFBQWFILGFBQWFoeEMsS0FBSzhOLElBRzdmc2pDLEdBQUc5dUMsVUFBVTR1QixHQUFHLFNBQVNwakIsR0FBRyxPQUFPOG1DLEdBQUc5bUMsRUFBRTJqQyxHQUFHenhDLFFBQVFveEMsR0FBRzl1QyxVQUFVdU0sRUFBRSxTQUFTZixFQUFFZSxHQUFHLElBQUkyRyxFQUFFaThCLEdBQUd6eEMsTUFBa0IsT0FBWndWLEVBQUU2N0IsUUFBUXhpQyxFQUFTZ21DLEdBQUcvbUMsRUFBRTBILElBQUk0N0IsR0FBRzl1QyxVQUFVa1QsRUFBRSxTQUFTMUgsRUFBRWUsR0FBa0IsT0FBTytoQyxHQUFHa0UsR0FBR2huQyxFQUF0QjJqQyxHQUFHenhDLE9BQXdCNk8sSUFFekx1aUMsR0FBRzl1QyxVQUFVbXdCLEVBQUUsV0FBVyxJQUFJM2tCLEVBQUUsQ0FBQ3NpQyxXQUFXcHdDLEtBQUtvd0MsV0FBV2UsYUFBYW54QyxLQUFLbXhDLGNBQWlPLE9BQW5ObnhDLEtBQUtxeEMsVUFBVXZqQyxFQUFFa2tDLGFBQWFoeUMsS0FBS3F4QyxTQUFTcnhDLEtBQUtzeEMsY0FBY3hqQyxFQUFFbWtDLGlCQUFpQmp5QyxLQUFLc3hDLGFBQWF0eEMsS0FBSzR4QyxTQUFTOWpDLEVBQUUwakMsaUJBQWlCeHhDLEtBQUs0eEMsUUFBUTV4QyxLQUFLa0wsUUFBUTRDLEVBQUU1QyxNQUFNbEwsS0FBS2tMLE9BQU9sTCxLQUFLOE4sSUFBSUEsRUFBRWtqQyxhQUFhaHhDLEtBQUs4TixHQUFVQSxHQUV0VG9rQyxHQUFHNXZDLFVBQVUyeEIsR0FBRyxTQUFTbm1CLEdBQWlCLE9BQWQ5TixLQUFLNDNCLEdBQUdqQyxHQUFHN25CLEdBQVU5TixNQUFzSytRLEVBQUVxaEMsR0FBR0YsSUFBZ0RuaEMsRUFBRXNoQyxHQUFHSCxJQUFJRyxHQUFHL3ZDLFVBQVU4d0IsR0FBRyxTQUFTdGxCLEdBQWdDLE9BQTdCa2xCLEVBQUdoekIsS0FBSzhOLEVBQUVBLElBQUk5TixLQUFLOE4sRUFBRXJPLEtBQUtxTyxHQUFVOU4sTUFBTXF5QyxHQUFHL3ZDLFVBQVU0MUIsR0FBRyxXQUFXLE9BQU94RCxFQUFHMTBCLEtBQUs4TixJQUNyWXVrQyxHQUFHL3ZDLFVBQVVrd0MsV0FBVyxTQUFTMWtDLEVBQUVlLEdBQUcsSUFBSTJHLEVBQWtJLEtBQTNIQSxFQUFMM0UsRUFBRS9DLEdBQUssQ0FBQ3VqQyxRQUFRdmpDLEVBQUV1akMsU0FBUyxLQUFLQyxZQUFZeGpDLEVBQUV3akMsYUFBYSxLQUFLcG1DLE1BQU00QyxFQUFFb21DLFVBQVUsTUFBUSxDQUFDN0MsUUFBUXZqQyxHQUFHLEtBQUt3akMsWUFBWXppQyxHQUFHLE9BQVl3aUMsVUFBVTc3QixFQUFFODdCLFlBQVksTUFBTSxJQUFJamlDLEVBQUUsaUJBQWlCLHlFQUF5RSxPQUFPLElBQUkraEMsR0FBR3B4QyxLQUFLb3dDLFdBQVc1NkIsRUFBRXhWLEtBQUtvd0MsYUFBd0RyL0IsRUFBRXVoQyxHQUFHRCxJQUFJbkksR0FBRW9JLEdBQUcsY0FBYyxnQkFBZ0JwSSxHQUFFb0ksR0FBRywwQkFBMEIsZ0JBQzlPdmhDLEVBQUUwaEMsR0FBR0osSUFBSW5JLEdBQUV1SSxHQUFHLGNBQWMsY0FBY3ZJLEdBQUV1SSxHQUFHLHdCQUF3QixjQUNwRDFoQyxFQUFFNGhDLEdBQUdOLElBQUluSSxHQUFFeUksR0FBRyxjQUFjLGNBQWN6SSxHQUFFeUksR0FBRyx3QkFBd0IsY0FDcFU1aEMsRUFBRThoQyxHQUFHWCxJQUFJaEksR0FBRTJJLEdBQUcsY0FBYyxlQUFlM0ksR0FBRTJJLEdBQUcseUJBQXlCLGVBQ2tIRSxHQUFHendDLFVBQVU0dUIsR0FBRyxTQUFTcGpCLEdBQUcsT0FBTzlOLEtBQUtteEMsY0FBYzZCLEdBQUdDLDBCQUEwQjhCLEdBQUVqbkMsRUFBRWtuQyxHQUFHLENBQUM1QixNQUFNcHpDLEtBQUs4TixFQUFFbW5DLFFBQVFqMUMsS0FBS2lRLElBQUk4a0MsR0FBRWpuQyxFQUFFb25DLEdBQUcsQ0FBQzlCLE1BQU1wekMsS0FBSzhOLEVBQUV1bEMsU0FBU3J6QyxLQUFLaVEsS0FDdlY4aUMsR0FBR3p3QyxVQUFVdU0sRUFBRSxTQUFTZixFQUFFZSxHQUFHLE9BQU83TyxLQUFLbXhDLGNBQWM2QixHQUFHQywwQkFBMEI4QixHQUFFam5DLEVBQUVxbkMsR0FBRyxDQUFDOUQsUUFBUXhpQyxFQUFFdWtDLE1BQU1wekMsS0FBSzhOLEVBQUVtbkMsUUFBUWoxQyxLQUFLaVEsSUFBSThrQyxHQUFFam5DLEVBQUVzbkMsR0FBRyxDQUFDL0QsUUFBUXhpQyxFQUFFdWtDLE1BQU1wekMsS0FBSzhOLEVBQUV1bEMsU0FBU3J6QyxLQUFLaVEsS0FBSzhpQyxHQUFHendDLFVBQVVrVCxFQUFFLFNBQVMxSCxFQUFFZSxHQUFHLE9BQU8raEMsR0FBRzV3QyxLQUFLa3hCLEdBQUdwakIsR0FBR2UsSUFBSWtrQyxHQUFHendDLFVBQVVtd0IsRUFBRSxXQUFXLE1BQU0sQ0FBQzJnQixNQUFNcHpDLEtBQUs4TixFQUFFdWxDLFNBQVNyekMsS0FBS2lRLEVBQUVraEMsYUFBYW54QyxLQUFLbXhDLGVBQ3BIaEgsR0FBRTZJLEdBQUcsQ0FBQ3FDLFlBQVksYUFBYWxMLEdBQUU2SSxHQUFHLENBQUNDLDBCQUEwQixjQUFjOUksR0FBRTZJLEdBQUcsQ0FBQ0UsOEJBQThCLGFBQ3pUTSxHQUFHbHhDLFVBQVU0dUIsR0FBRyxTQUFTcGpCLEdBQUcsT0FBT0EsRUFBRW1uQixHQUFHNGUsR0FBRzd6QyxRQUFRd3pDLEdBQUdseEMsVUFBVXVNLEVBQUUsU0FBU2YsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRXErQixHQUFHN3pDLE1BQWtCLE9BQVp3VixFQUFFNjdCLFFBQVF4aUMsRUFBU2ttQyxHQUFFam5DLEVBQUV3bkMsR0FBRzkvQixJQUFJZytCLEdBQUdseEMsVUFBVWtULEVBQUUsU0FBUzFILEVBQUVlLEdBQUcsSUFBSTJHLEVBQUVxK0IsR0FBRzd6QyxNQUF1QyxPQUFqQ3dWLEVBQUU0MkIsVUFBVSxTQUE0QndFLEdBQW5COWlDLEVBQUVpbkMsR0FBRWpuQyxFQUFFeW5DLEdBQUcvL0IsR0FBZTNHLElBQUkya0MsR0FBR2x4QyxVQUFVbXdCLEVBQUUsV0FBVyxJQUFJM2tCLEVBQUUsQ0FBQ3NpQyxXQUFXLFNBQXdLLE9BQS9KcHdDLEtBQUs4TixFQUFFa25CLEtBQUtsbkIsRUFBRTRsQyxlQUFlMXpDLEtBQUs4TixFQUFFa25CLElBQUloMUIsS0FBSzhOLEVBQUVpbkIsS0FBS2puQixFQUFFNmxDLGlCQUFpQjN6QyxLQUFLOE4sRUFBRWluQixJQUFJLzBCLEtBQUs4TixFQUFFa21CLEtBQUtsbUIsRUFBRThsQyxlQUFlNXpDLEtBQUs4TixFQUFFa21CLElBQUloMEIsS0FBSzhOLEVBQUVtaUIsS0FBS25pQixFQUFFZytCLFlBQVk5ckMsS0FBSzhOLEVBQUVtaUIsSUFBV25pQixHQUdyYmltQyxHQUFHenhDLFVBQVUyeUIsR0FBRyxTQUFTbm5CLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUV4VixLQUFLOE4sRUFBRUEsRUFBRSxPQUFPaXZCLEdBQUVsdUIsRUFBRTJtQyxVQUFVcHdDLE1BQUssU0FBU3lJLEdBQUcsR0FBRyxpQkFBa0JBLEVBQUUsTUFBTSxJQUFJd0IsRUFBRSxpQkFBaUIseUlBQXlJLE9BQU9SLEVBQUVnSixNQUFNLElBQUssWUFBWSxJQUFJN04sRUFBRTZHLEVBQUUvQyxHQUFHQSxFQUFFMm5DLFFBQVEsS0FBS3hsQyxFQUFFWSxFQUFFL0MsR0FBR0EsRUFBRWcrQixZQUFZaCtCLEVBQzVLLE9BRGdMOUQsR0FBR0EsRUFBRTZOLE1BQU00NEIsR0FBS3ptQyxFQUFFNnBCLEtBQUt6dUIsTUFBSyxTQUFTa3JCLEdBQUcsT0FrRW5OLFNBQVl4aUIsRUFBRWUsR0FBRyxPQUFPa21DLEdBQUVqbkMsRUFBRTRuQyxHQUFHN21DLEdBQUd6SixNQUFLLFNBQVNvUSxHQUFHLE9BQU9BLEVBQUVtZ0MsaUJBQWlCN0IsZUFsRTZJOEIsQ0FBR3BnQyxFQUFFLENBQUM2N0IsUUFBUS9nQixFQUFFdWxCLG9CQUFvQixDQUFDL0osWUFBWTc3QixFQUFFNmxDLGVBQWVqb0MsUUFBTzdELEdBQUdBLEVBQUU2TixNQUFNNjRCLEdBQUsxbUMsRUFBRTZwQixLQUFLenVCLE1BQUssU0FBU2tyQixHQUFHLE9BbUVoUyxTQUFZeGlCLEVBQUVlLEdBQUcsT0FBT2ttQyxHQUFFam5DLEVBQUVpb0MsR0FBR2xuQyxHQUFHekosTUFBSyxTQUFTb1EsR0FBRyxPQUFPQSxFQUFFd2dDLGtCQUFrQmxDLGVBbkV5Tm1DLENBQUd6Z0MsRUFDN2dCLENBQUMwZ0MscUJBQXFCNWxCLEVBQUU2bEIsZ0JBQWdCcm9DLEVBQUVzb0MsaUJBQWlCdG9DLEVBQUVzb0MsZ0JBQWdCdkwsS0FBSy84QixFQUFFdW9DLGVBQWVDLGdCQUFnQixDQUFDUixlQUFlam9DLFFBaUVuQixTQUFZQyxFQUFFZSxHQUFHLE9BQU9rbUMsR0FBRWpuQyxFQUFFeW9DLEdBQUcxbkMsR0FqRUgybkMsQ0FBR2hoQyxFQUFFLENBQUNzMkIsWUFBWTc3QixFQUFFNmxDLGVBQWVqb0MsS0FBYXpJLE1BQUssU0FBU2tyQixHQUEwQyxNQUF2QyxtQkFBb0J6aEIsRUFBRXFHLE9BQU9yRyxFQUFFcUcsUUFBZW9iLEtBQUcsU0FBU0EsR0FBMEMsS0FBdkMsbUJBQW9CemhCLEVBQUVxRyxPQUFPckcsRUFBRXFHLFFBQWNvYixLQUFLLFFBQVEsTUFBTSxJQUFJamhCLEVBQUUsaUJBQWlCLCtGQUN6Tjg2QixHQUFFNEosR0FBRyxDQUFDc0IsWUFBWSxVQUFVbEwsR0FBRTRKLEdBQUcsQ0FBQzBDLHFCQUFxQixVQUU2U3JDLEdBQUc5eEMsVUFBVW8wQyxPQUFPLFdBQVcsSUFBSTVvQyxFQUFFLEdBQXVGLE9BQXBGQSxFQUFFck8sS0FBS08sS0FBS3dWLEdBQUd4VixLQUFLNk8sR0FBR2YsRUFBRXJPLEtBQUtPLEtBQUs2TyxHQUFHN08sS0FBS2lRLEdBQUduQyxFQUFFck8sS0FBS08sS0FBS2lRLEdBQUdqUSxLQUFLc3dCLEdBQUd4aUIsRUFBRXJPLEtBQUtPLEtBQUtzd0IsR0FBVXhpQixFQUFFek4sS0FBSyxNQUFNK3pDLEdBQUc5eEMsVUFBVTRzQyxFQUFFLFdBQVcsT0FBT2x2QyxLQUFLc3dCLEdBQ2xxQjhqQixHQUFHOXhDLFVBQVVtd0IsRUFBRSxXQUFXLE1BQU0sQ0FBQzVhLEtBQUs3WCxLQUFLd1YsRUFBRTgrQixRQUFRdDBDLEtBQUs2TyxFQUFFMGxDLFlBQVl2MEMsS0FBS2lPLEVBQUV1bUMsVUFBVXgwQyxLQUFLaVEsRUFBRTZoQyxTQUFTOXhDLEtBQUtNLEVBQUVtc0MsU0FBU3pzQyxLQUFLc3dCLEVBQUV6ckIsTUFBTTdFLEtBQUs4TixHQUFHOU4sS0FBSzhOLEVBQUUya0IsTUFnQmpILElBRTZVa2tCLEdBRnpVQyxHQUFHLEtBQThLLFNBQVNDLEdBQUcvb0MsR0FBRyxJQUFJZSxFQUFFLHNCQUFzQjJHLE9BQUUsRUFBTzNILEVBQUVtMkIsR0FBR2wyQixHQUFHQSxFQUFFRCxFQUFFQyxFQUFRLHFCQUFORCxFQUFFQSxFQUFFb0MsR0FBd0J1RixFQUFFMmlCLEdBQUcscU1BQXFNcnFCLEdBQUcsUUFBUUQsR0FBRyxTQUFTQSxFQUFFMkgsRUFBRTJpQixHQUFHLHFLQUFxS3JxQixHQUFHZSxFQUFFLDhDQUN6c0JRLEVBQUU5TSxLQUFLdkMsS0FBSzZPLEVBQUUyRyxHQUFXLFNBQVNzaEMsR0FBR2hwQyxFQUFFZSxFQUFFMkcsR0FBR25HLEVBQUU5TSxLQUFLdkMsS0FBSzhOLEVBQUUwSCxJQUFHMUgsRUFBRWUsR0FBRyxJQUFLZ3BCLElBQUlxUyxHQUFFbHFDLEtBQUssUUFBUThOLEVBQUUrcEIsSUFBSS9wQixFQUFFbWlCLElBQUlpYSxHQUFFbHFDLEtBQUssY0FBYzhOLEVBQUVtaUIsSUFBSW5pQixFQUFFMGtDLFlBQVl0SSxHQUFFbHFDLEtBQUssYUFBYThOLEVBQUUwa0MsWUFBWTFrQyxFQUFFNnFCLElBQUl1UixHQUFFbHFDLEtBQUssV0FBVzhOLEVBQUU2cUIsSUFDM00sU0FBU29lLEdBQUdqcEMsR0FBRyxHQUFHQSxFQUFFd0YsS0FBSyxDQUFDLElBQUl6RSxFQUFFZixFQUFFd0YsTUFBTSxHQUFHLEdBQUd6RSxFQUFFeVIsUUFBUThSLEtBQU12akIsRUFBRUEsRUFBRTBqQixVQUFVSCxFQUFHenhCLFNBQVMsSUFBSTZVLEVBQUUsQ0FBQ2c5QixXQUFXeUIsR0FBR25tQyxHQUFHNnFCLEdBQUc3cUIsRUFBRTIrQixVQUFVLEdBQUczK0IsRUFBRXNsQyxNQUFNNTlCLEVBQUVxaUIsR0FBRy9wQixFQUFFc2xDLFdBQVcsR0FBR3RsQyxFQUFFZytCLFlBQVl0MkIsRUFBRXlhLEdBQUduaUIsRUFBRWcrQixpQkFBaUIsSUFBSXQyQixFQUFFZzlCLFdBQVcsT0FBTyxJQUFJbmpDLEVBQUVSLEVBQUVmLEVBQUVtRixjQUFTLEdBQVEsT0FBTyxJQUFJNmpDLEdBQUdqb0MsRUFBRTJHLEVBQUUxSCxFQUFFbUYsU0FBUyxPQUFPLEtBQU0sU0FBUytqQyxNQUEwQixTQUFTQyxHQUFHbnBDLEdBQUcsT0FBT0EsRUFBRTBILElBQUkxSCxFQUFFMEgsRUFBRTFILEVBQUVlLEtBQWEsU0FBU3FvQyxNQUM3WCxTQUFTQyxHQUFHcnBDLEdBQUcsSUFBSUEsRUFBRW1DLEdBQUcsb0JBQW9CbW5DLGdCQUFnQixvQkFBb0JDLGNBQWMsQ0FBQyxJQUFJLElBQUl4b0MsRUFBRSxDQUFDLHFCQUFxQixxQkFBcUIsaUJBQWlCLHFCQUFxQjJHLEVBQUUsRUFBRUEsRUFBRTNHLEVBQUVsTyxPQUFPNlUsSUFBSSxDQUFDLElBQUkzSCxFQUFFZ0IsRUFBRTJHLEdBQUcsSUFBSSxPQUFPLElBQUk2aEMsY0FBY3hwQyxHQUFHQyxFQUFFbUMsRUFBRXBDLEVBQUUsTUFBTTdELEtBQUssTUFBTXVCLE1BQU0sOEZBQStGLE9BQU91QyxFQUFFbUMsRUFBWSxTQUFTcW5DLE1BQ25aLFNBQVNDLEtBQUt2M0MsS0FBSzhOLEVBQUUsSUFBSTBwQyxlQUFleDNDLEtBQUt3bkMsV0FBVyxFQUFFeG5DLEtBQUt5M0MsbUJBQW1CLEtBQUt6M0MsS0FBSzAzQyxhQUFhMTNDLEtBQUsyM0MsYUFBYTMzQyxLQUFLaWhCLFNBQVMsR0FBR2poQixLQUFLZ2lCLFFBQVEsRUFBRWhpQixLQUFLNDNDLFdBQVcsR0FBRzUzQyxLQUFLOE4sRUFBRStwQyxPQUFPOWxCLEVBQUUveEIsS0FBS2k3QixHQUFHajdCLE1BQU1BLEtBQUs4TixFQUFFbEosUUFBUW10QixFQUFFL3hCLEtBQUtxNEIsR0FBR3I0QixNQUFNQSxLQUFLOE4sRUFBRWdxQyxXQUFXL2xCLEVBQUUveEIsS0FBS3E3QixHQUFHcjdCLE1BQU1BLEtBQUs4TixFQUFFaXFDLFVBQVVobUIsRUFBRS94QixLQUFLcTZCLEdBQUdyNkIsTUFFNVAsU0FBU2c0QyxHQUFHbHFDLEVBQUVlLEdBQUdmLEVBQUUwNUIsV0FBVzM0QixFQUFLZixFQUFFMnBDLG9CQUFtQjNwQyxFQUFFMnBDLHFCQUFtRyxTQUFTUSxHQUFHbnFDLEVBQUVlLEVBQUUyRyxHQUFHeFYsS0FBS2tWLE1BQU1wSCxFQUFFZSxFQUFFMkcsT0FBRSxPQUFPLEdBQTRILFNBQVMwaUMsR0FBR3BxQyxHQUFHOU4sS0FBS2lRLEVBQUVuQyxFQUFFOU4sS0FBSzZPLEVBQUU3TyxLQUFLd1YsRUFBRXhWLEtBQUs4TixFQUFFLEtBQUssU0FBU3FxQyxHQUFHcnFDLEVBQUVlLEdBQUc3TyxLQUFLMEMsS0FBS29MLEVBQUU5TixLQUFLZ0MsTUFBTTZNLEVBTHpia0MsRUFBRThsQyxHQUFHeG5DLEdBQXlMMEIsRUFBRStsQyxHQUFHem5DLEdBQUd5bkMsR0FBR3gwQyxVQUFVbXdCLEVBQUUsV0FBVyxJQUFJM2tCLEVBQUUsQ0FBQ3dGLEtBQUt0VCxLQUFLc1QsS0FBS0wsUUFBUWpULEtBQUtpVCxTQUFTalQsS0FBS296QyxRQUFRdGxDLEVBQUVzbEMsTUFBTXB6QyxLQUFLb3pDLE9BQU9wekMsS0FBSzhyQyxjQUFjaCtCLEVBQUVnK0IsWUFBWTlyQyxLQUFLOHJDLGFBQWE5ckMsS0FBS3lzQyxXQUFXMytCLEVBQUUyK0IsU0FBU3pzQyxLQUFLeXNDLFVBQVUsSUFBSTU5QixFQUFFN08sS0FBS3d5QyxZQUFZeHlDLEtBQUt3eUMsV0FBVy9mLElBQWMsT0FBVjVqQixHQUFHZ25CLEdBQUUvbkIsRUFBRWUsR0FBVWYsR0FBR2dwQyxHQUFHeDBDLFVBQVVvd0IsT0FBTyxXQUFXLE9BQU8xeUIsS0FBS3l5QixLQUNwTnVrQixHQUFHMTBDLFVBQVVrVCxFQUFFLEtBQW1FekUsRUFBRW1tQyxHQUFHRixJQUFJRSxHQUFHNTBDLFVBQVV3TCxFQUFFLFdBQVcsSUFBSUEsRUFBRXFwQyxHQUFHbjNDLE1BQU0sT0FBTzhOLEVBQUUsSUFBSXVwQyxjQUFjdnBDLEdBQUcsSUFBSXNwQyxnQkFBZ0JGLEdBQUc1MEMsVUFBVXVNLEVBQUUsV0FBVyxJQUFJZixFQUFFLEdBQStCLE9BQTVCcXBDLEdBQUduM0MsUUFBUThOLEVBQUUsSUFBRyxFQUFHQSxFQUFFLElBQUcsR0FBV0EsR0FDN0s2b0MsR0FBRyxJQUFJTyxHQUFrQm5tQyxFQUFFdW1DLEdBQUdOLElBQUlNLEdBQUdoMUMsVUFBVXdMLEVBQUUsV0FBVyxJQUFJQSxFQUFFLElBQUlzcEMsZUFBZSxHQUFHLG9CQUFvQnRwQyxFQUFFLE9BQU9BLEVBQUUsR0FBRyxvQkFBb0IwcEMsZUFBZSxPQUFPLElBQUlELEdBQUcsTUFBTWhzQyxNQUFNLHdCQUF5QityQyxHQUFHaDFDLFVBQVV1TSxFQUFFLFdBQVcsTUFBTSxLQUNsVXVDLEVBQUVtbUMsR0FBR2oxQyxXQUFZdVEsS0FBSyxTQUFTL0UsRUFBRWUsRUFBRTJHLEdBQUcsR0FBRyxNQUFNQSxJQUFJQSxFQUFFLE1BQU1qSyxNQUFNLHNDQUFzQ3ZMLEtBQUs4TixFQUFFK0UsS0FBSy9FLEVBQUVlLElBQ25hdUMsRUFBRWduQyxLQUFLLFNBQVN0cUMsR0FBRyxHQUFHQSxFQUFFLElBQUcsaUJBQWlCQSxFQUFzQixNQUFNdkMsTUFBTSxpQ0FBaEN2TCxLQUFLOE4sRUFBRXNxQyxLQUFLdHFDLFFBQTBEOU4sS0FBSzhOLEVBQUVzcUMsUUFBUWhuQyxFQUFFa2IsTUFBTSxXQUFXdHNCLEtBQUs4TixFQUFFd2UsU0FBU2xiLEVBQUVpbkMsaUJBQWlCLGFBQWFqbkMsRUFBRWtuQyxrQkFBa0IsU0FBU3hxQyxHQUFHLE1BQU0sZ0JBQWdCQSxFQUFFeVIsY0FBY3ZmLEtBQUs4TixFQUFFc3RCLFlBQVksSUFBSWhxQixFQUFFNnBCLEdBQUcsV0FBV2o3QixLQUFLZ2lCLE9BQU8sSUFBSWhpQixLQUFLaWhCLFNBQVNqaEIsS0FBSzIzQyxhQUFhMzNDLEtBQUs4TixFQUFFNnBDLGFBQWFLLEdBQUdoNEMsS0FBSyxJQUFJb1IsRUFBRWluQixHQUFHLFdBQVdyNEIsS0FBS2dpQixPQUFPLElBQUloaUIsS0FBS2loQixTQUFTamhCLEtBQUsyM0MsYUFBYSxHQUFHSyxHQUFHaDRDLEtBQUssSUFBSW9SLEVBQUVpcEIsR0FBRyxXQUFXcjZCLEtBQUtxNEIsTUFDdmVqbkIsRUFBRWlxQixHQUFHLFdBQVdyN0IsS0FBS2dpQixPQUFPLElBQUlnMkIsR0FBR2g0QyxLQUFLLElBQW1Gb1IsRUFBRW1uQyxzQkFBc0IsV0FBVyxNQUFNLGlCQUFpQnY0QyxLQUFLOE4sRUFBRXN0QixhQUFnRTZjLEdBQUczMUMsVUFBVXdMLEVBQUUsS0FBY21xQyxHQUFHMzFDLFVBQVU0UyxNQUFNLFNBQVNwSCxFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxHQUE0QjZELEdBQUdva0IsV0FBWWp5QixLQUFLOE4sR0FBK0ZxcUMsR0FBRzcxQyxVQUFVdkMsU0FBUyxXQUFXLE9BQU9DLEtBQUswQyxNQUFNLElBQUk4MUMsR0FBRyxJQUFJTCxHQUFHLFNBQVMsS0FBS00sR0FBRyxJQUFJTixHQUFHLFVBQVUsS0FBS08sR0FBRyxJQUFJUCxHQUFHLFNBQVMsS0FBS1EsR0FBRyxJQUFJUixHQUFHLE9BQU8sS0FBSyxTQUFTUyxHQUFHOXFDLEdBQUcsT0FBR0EsRUFBRTBILEVBQVMxSCxFQUFFMEgsRUFBSzFILEVBQUVBLEVBQVM4cUMsR0FBRzlxQyxFQUFFQSxJQUFHOGxCLEVBQUcsaUNBQXdDLE1BQUtza0IsR0FBRzUxQyxVQUFVOFosSUFBSSxTQUFTdE8sRUFBRWUsRUFBRTJHLEdBQUcsR0FBRzFILEVBQUU5TCxPQUFPNDJDLEdBQUc1NEMsTUFBTWdDLE1BQU0sSUFBSXd2QixFQUFHM2lCLEtBQUtBLEVBQUVBLEtBQUtmLEVBQUUsSUFBSW1xQyxHQUFHbnFDLEVBQUVvRyxPQUFPckYsR0FBRzdPLEtBQUtpUSxHQUFHdUYsSUFBSTFILEVBQUVBLEVBQUUwSCxHQUFHQSxFQUFFeFYsS0FBS3dWLEdBQUdBLEVBQUVBLEVBQUUxSCxHQUFHLElBQUkrcUMsR0FBRyxHQUFHQyxHQUFHLEtBQzkxQixTQUFTQyxHQUFHanJDLEdBQXlDLElBQUllLEVBQUUsR0FBNUNpcUMsS0FBS0EsR0FBRyxJQUFJWixHQUFHLElBQUlXLEdBQUcsSUFBSUMsR0FBR0EsR0FBR3RqQyxFQUFFa2pDLE1BQWU3cEMsRUFBRWdxQyxHQUFHL3FDLElBQUksQ0FBQ2UsRUFBRSxJQUFJcXBDLEdBQUdwcUMsR0FBRyxJQUFJMEgsRUFBRTFILEVBQUVxc0IsWUFBWSxLQUFLdHNCLEVBQUVDLEVBQUVxVyxPQUFPM08sRUFBRSxJQUFHQSxFQUFFdWpDLEdBQUdqckMsRUFBRXFXLE9BQU8sRUFBRTNPLEtBQU0zRyxJQUFJMkcsRUFBRTNHLEVBQUUsSUFBSTJHLEVBQUUzRyxFQUFFaEIsR0FBR2dCLEVBQUVBLEVBQUVmLEVBQUUwSCxFQUFFcWpDLEdBQUcvcUMsR0FBR2UsRUFBRSxPQUFPQSxFQUFHLFNBQVNtcUMsR0FBR2xyQyxFQUFFZSxHQUFHZixHQUFHQSxFQUFFc08sSUFBSXU4QixHQUFHOXBDLE9BQUUsR0FBUyxTQUFTb3FDLEdBQUduckMsR0FBRzlOLEtBQUtpUSxFQUFFbkMsRUFBd0gsU0FBU29yQyxHQUFHcHJDLEdBQUdvMEIsR0FBRTMvQixLQUFLdkMsTUFBTUEsS0FBS3V3QixFQUFFemlCLEVBQUU5TixLQUFLc3dCLE9BQUUsRUFBT3R3QixLQUFLd25DLFdBQVcyUixHQUFHbjVDLEtBQUtnaUIsT0FBTyxFQUFFaGlCLEtBQUswM0MsYUFBYTEzQyxLQUFLMjNDLGFBQWEzM0MsS0FBS2loQixTQUFTamhCLEtBQUs0M0MsV0FBVyxHQUFHNTNDLEtBQUt5M0MsbUJBQW1CLEtBQUt6M0MsS0FBS3d3QixFQUFFLElBQUlyTyxRQUFRbmlCLEtBQUs2TyxFQUFFLEtBQUs3TyxLQUFLbUMsRUFBRSxNQUFNbkMsS0FBS2lRLEVBQUUsR0FBR2pRLEtBQUs4TixHQUFFLEVBQUc5TixLQUFLTSxFQUFFeTRDLEdBQUcseUJBQXlCLzRDLEtBQUs2USxFQUFFN1EsS0FBS3dWLEVBQUV4VixLQUFLaU8sRUFBRSxLQUFwYThDLEVBQUVrb0MsR0FBR2pDLElBQUlpQyxHQUFHMzJDLFVBQVV3TCxFQUFFLFdBQVcsT0FBTyxJQUFJb3JDLEdBQUdsNUMsS0FBS2lRLElBQUlncEMsR0FBRzMyQyxVQUFVdU0sRUFBRSxTQUFTZixHQUFHLE9BQU8sV0FBVyxPQUFPQSxHQUFyQyxDQUF5QyxJQUF1VGlELEVBQUVtb0MsR0FBR2hYLElBQUcsSUFBSWlYLEdBQUcsRUFJMXJCLFNBQVNDLEdBQUd0ckMsR0FBR0EsRUFBRTBILEVBQUU2akMsT0FBT2owQyxLQUFLMEksRUFBRXF0QixHQUFHcnVCLEtBQUtnQixJQUFJZ0UsTUFBTWhFLEVBQUV3ckMsR0FBR3hzQyxLQUFLZ0IsSUFDN0QsU0FBU3lyQyxHQUFHenJDLEdBQUdBLEVBQUUwNUIsV0FBVyxFQUFFMTVCLEVBQUVHLEVBQUUsS0FBS0gsRUFBRTBILEVBQUUsS0FBSzFILEVBQUUrQyxFQUFFLEtBQUsyb0MsR0FBRzFyQyxHQUNnUCxTQUFTMHJDLEdBQUcxckMsR0FBR0EsRUFBRTJwQyxvQkFBb0IzcEMsRUFBRTJwQyxtQkFBbUJsMUMsS0FBS3VMLEdBQXNKLFNBQVMyckMsR0FBRzNyQyxHQUFHbzBCLEdBQUUzL0IsS0FBS3ZDLE1BQU1BLEtBQUt3aUIsUUFBUSxJQUFJa2dCLEdBQUcxaUMsS0FBSyswQyxFQUFFam5DLEdBQUcsS0FBSzlOLEtBQUt3VixHQUFFLEVBQUd4VixLQUFLMHdCLEVBQUUxd0IsS0FBSzhOLEVBQUUsS0FBSzlOLEtBQUtzd0IsRUFBRXR3QixLQUFLMFAsRUFBRTFQLEtBQUt3d0IsRUFBRSxHQUFHeHdCLEtBQUtpUSxFQUFFalEsS0FBS21xQyxFQUFFbnFDLEtBQUtNLEVBQUVOLEtBQUswK0IsR0FBRSxFQUFHMStCLEtBQUtpTyxFQUFFLEVBQUVqTyxLQUFLbUMsRUFBRSxLQUFLbkMsS0FBSzZRLEVBQUU2b0MsR0FBRzE1QyxLQUFLdXdCLEVBQUV2d0IsS0FBSzI1QyxHQUFFLEdBTkx2b0MsRUFBRThuQyxHQUFHNTJDLFdBQy9yQnVRLEtBQUssU0FBUy9FLEVBQUVlLEdBQUcsR0FBRzdPLEtBQUt3bkMsWUFBWTJSLEdBQUcsTUFBTW41QyxLQUFLc3NCLFFBQVEvZ0IsTUFBTSxnQ0FBZ0N2TCxLQUFLbUMsRUFBRTJMLEVBQUU5TixLQUFLaVEsRUFBRXBCLEVBQUU3TyxLQUFLd25DLFdBQVcsRUFBRWdTLEdBQUd4NUMsT0FBT29SLEVBQUVnbkMsS0FBSyxTQUFTdHFDLEdBQUcsR0FBRyxHQUFHOU4sS0FBS3duQyxXQUFXLE1BQU14bkMsS0FBS3NzQixRQUFRL2dCLE1BQU0sK0JBQStCdkwsS0FBSzhOLEdBQUUsRUFBRyxJQUFJZSxFQUFFLENBQUMyVCxRQUFReGlCLEtBQUt3d0IsRUFBRXhyQixPQUFPaEYsS0FBS21DLEVBQUV5M0MsWUFBWTU1QyxLQUFLc3dCLEVBQUV1cEIsV0FBTSxHQUFRL3JDLElBQUllLEVBQUVtQixLQUFLbEMsR0FBRzlOLEtBQUt1d0IsRUFBRXBOLE1BQU0sSUFBSTIyQixRQUFROTVDLEtBQUtpUSxFQUFFcEIsSUFBSXpKLEtBQUtwRixLQUFLczdCLEdBQUd4dUIsS0FBSzlNLE1BQU1BLEtBQUtzNUMsR0FBR3hzQyxLQUFLOU0sUUFDMVpvUixFQUFFa2IsTUFBTSxXQUFXdHNCLEtBQUtpaEIsU0FBU2poQixLQUFLMjNDLGFBQWEsR0FBRzMzQyxLQUFLd3dCLEVBQUUsSUFBSXJPLFFBQVFuaUIsS0FBS2dpQixPQUFPLEVBQUVoaUIsS0FBS3dWLEdBQUd4VixLQUFLd1YsRUFBRXlvQixPQUFPLHdCQUF3QixHQUFHaitCLEtBQUt3bkMsWUFBWXhuQyxLQUFLOE4sR0FBRyxHQUFHOU4sS0FBS3duQyxhQUFheG5DLEtBQUs4TixHQUFFLEVBQUd5ckMsR0FBR3Y1QyxPQUFPQSxLQUFLd25DLFdBQVcyUixJQUMxTi9uQyxFQUFFa3FCLEdBQUcsU0FBU3h0QixHQUFHOU4sS0FBSzhOLElBQUk5TixLQUFLaU8sRUFBRUgsRUFBRTlOLEtBQUs2TyxJQUFJN08sS0FBS2dpQixPQUFPaGlCLEtBQUtpTyxFQUFFK1QsT0FBT2hpQixLQUFLNDNDLFdBQVc1M0MsS0FBS2lPLEVBQUUycEMsV0FBVzUzQyxLQUFLNk8sRUFBRWYsRUFBRTBVLFFBQVF4aUIsS0FBS3duQyxXQUFXLEVBQUVnUyxHQUFHeDVDLE9BQU9BLEtBQUs4TixJQUFJOU4sS0FBS3duQyxXQUFXLEVBQUVnUyxHQUFHeDVDLE1BQU1BLEtBQUs4TixJQUFJLGdCQUFnQjlOLEtBQUswM0MsYUFBYTVwQyxFQUFFaXNDLGNBQWMzMEMsS0FBS3BGLEtBQUtvNkIsR0FBR3R0QixLQUFLOU0sTUFBTUEsS0FBS3M1QyxHQUFHeHNDLEtBQUs5TSxZQUFPLElBQXFCd3dCLEVBQUV3cEIsZ0JBQWdCLFNBQVNsc0MsR0FBRzlOLEtBQUtpaEIsU0FBU2poQixLQUFLMjNDLGFBQWEsR0FBRzMzQyxLQUFLd1YsRUFBRTFILEVBQUVrQyxLQUFLaXFDLFlBQVlqNkMsS0FBSzZRLEVBQUUsSUFBSXFwQyxZQUFZZCxHQUFHcDVDLE9BQU84TixFQUFFcXNDLE9BQU8vMEMsS0FBS3BGLEtBQUttOEIsR0FBR3J2QixLQUFLOU0sTUFBTUEsS0FBS3M1QyxHQUFHeHNDLEtBQUs5TSxXQUM5Wm9SLEVBQUUrcEIsR0FBRyxTQUFTcnRCLEdBQUcsR0FBRzlOLEtBQUs4TixFQUFFLENBQUMsSUFBSWUsRUFBRTdPLEtBQUs2USxFQUFFdXBDLE9BQU90c0MsRUFBRTlMLE1BQU04TCxFQUFFOUwsTUFBTSxJQUFJNmhCLFdBQVcsR0FBRyxDQUFDdzJCLFFBQVF2c0MsRUFBRS9MLE9BQU84TSxJQUFJN08sS0FBS2loQixTQUFTamhCLEtBQUsyM0MsY0FBYzlvQyxHQUFHZixFQUFFL0wsS0FBS3czQyxHQUFHdjVDLE1BQU13NUMsR0FBR3g1QyxNQUFNLEdBQUdBLEtBQUt3bkMsWUFBWTRSLEdBQUdwNUMsUUFBUW9SLEVBQUUrcUIsR0FBRyxTQUFTcnVCLEdBQUc5TixLQUFLOE4sSUFBSTlOLEtBQUtpaEIsU0FBU2poQixLQUFLMjNDLGFBQWE3cEMsRUFBRXlyQyxHQUFHdjVDLFFBQVFvUixFQUFFZ3BCLEdBQUcsU0FBU3RzQixHQUFHOU4sS0FBSzhOLElBQUk5TixLQUFLaWhCLFNBQVNuVCxFQUFFeXJDLEdBQUd2NUMsUUFBUW9SLEVBQUVrb0MsR0FBRyxTQUFTeHJDLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUtNLEVBQUV1TyxHQUFHQSxFQUFFdU4sSUFBSXE4QixHQUFHLHVCQUF1Qno0QyxLQUFLaVEsRUFBRW5DLGFBQWF2QyxNQUFNdUMsRUFBRXZDLE1BQU11QyxJQUFJOU4sS0FBSzhOLEdBQUd5ckMsR0FBR3Y1QyxPQUNwYm9SLEVBQUVpbkMsaUJBQWlCLFNBQVN2cUMsRUFBRWUsR0FBRzdPLEtBQUt3d0IsRUFBRS9OLE9BQU8zVSxFQUFFZSxJQUFJdUMsRUFBRWtuQyxrQkFBa0IsU0FBU3hxQyxHQUFHLE9BQU85TixLQUFLNk8sRUFBRTdPLEtBQUs2TyxFQUFFL0ksSUFBSWdJLEVBQUV5UixnQkFBZ0IsS0FBS3pSLEVBQUU5TixLQUFLTSxJQUFJd04sRUFBRXNPLElBQUlxOEIsR0FBRyxnRkFBZ0Z6NEMsS0FBS2lRLE9BQUUsR0FBUSxLQUN2VG1CLEVBQUVtbkMsc0JBQXNCLFdBQVcsSUFBSXY0QyxLQUFLNk8sRUFBRSxDQUFDLElBQUlmLEVBQUU5TixLQUFLTSxFQUFrSCxPQUFoSHdOLEdBQUdBLEVBQUVzTyxJQUFJcThCLEdBQUcscUZBQXFGejRDLEtBQUtpUSxPQUFFLEdBQWMsR0FBR25DLEVBQUUsR0FBRyxJQUFJLElBQUllLEVBQUU3TyxLQUFLNk8sRUFBRTRLLFVBQVVqRSxFQUFFM0csRUFBRS9NLFFBQVEwVCxFQUFFelQsTUFBTXlULEVBQUVBLEVBQUV4VCxNQUFNOEwsRUFBRXJPLEtBQUsrVixFQUFFLEdBQUcsS0FBS0EsRUFBRSxJQUFJQSxFQUFFM0csRUFBRS9NLE9BQU8sT0FBT2dNLEVBQUV6TixLQUFLLFNBQTJFa0IsT0FBT3NFLGVBQWVxekMsR0FBRzUyQyxVQUFVLGtCQUFrQixDQUFDd0QsSUFBSSxXQUFXLE1BQU0sWUFBWTlGLEtBQUtzd0IsR0FBR3ZxQixJQUFJLFNBQVMrSCxHQUFHOU4sS0FBS3N3QixFQUFFeGlCLEVBQUUsVUFBVSxpQkFBb05pRCxFQUFFMG9DLEdBQUd2WCxJQUFHLElBQUl3WCxHQUFHLEdBQUdELEdBQUduM0MsVUFBVXVNLEVBQUVrcUMsR0FBRyxrQkFBa0IsSUFBSXVCLEdBQUcsWUFBWUMsR0FBRyxDQUFDLE9BQU8sT0FHNXBCLFNBQVM1WixHQUFHN3lCLEdBQUcsTUFBTSxnQkFBZ0JBLEVBQUV5UixjQUF1TSxTQUFTaTdCLEdBQUcxc0MsRUFBRWUsR0FBR2YsRUFBRTBILEdBQUUsRUFBRzFILEVBQUVBLElBQUlBLEVBQUVtQyxHQUFFLEVBQUduQyxFQUFFQSxFQUFFd2UsUUFBUXhlLEVBQUVtQyxHQUFFLEdBQUluQyxFQUFFd2lCLEVBQUV6aEIsRUFBRTRyQyxHQUFHM3NDLEdBQUc0c0MsR0FBRzVzQyxHQUNsYixTQUFTMnNDLEdBQUczc0MsR0FBR0EsRUFBRTR3QixJQUFJNXdCLEVBQUU0d0IsR0FBRSxFQUFHNXdCLEVBQUUrMEIsY0FBYyxZQUFZLzBCLEVBQUUrMEIsY0FBYyxVQUN4RSxTQUFTOFgsR0FBRzdzQyxHQUFHLEdBQUdBLEVBQUUwSCxRQUFHLElBQW9Cd2IsRUFBRyxHQUFHbGpCLEVBQUU0aUIsRUFBRSxJQUFJLEdBQUdrcUIsR0FBRzlzQyxJQUFJLEdBQUcrc0MsR0FBRy9zQyxHQUFHa3JDLEdBQUdsckMsRUFBRWUsRUFBRWlzQyxHQUFHaHRDLEVBQUUsa0RBQWtELEdBQUdBLEVBQUV4TixHQUFHLEdBQUdzNkMsR0FBRzlzQyxHQUFHczBCLEdBQUd0MEIsRUFBRXVyQixHQUFHLEVBQUV2ckIsUUFBUSxHQUFHQSxFQUFFKzBCLGNBQWMsb0JBQW9CLEdBQUcrWCxHQUFHOXNDLEdBQUcsQ0FBQ2tyQyxHQUFHbHJDLEVBQUVlLEVBQUVpc0MsR0FBR2h0QyxFQUFFLHFCQUFxQkEsRUFBRTBILEdBQUUsRUFBRyxJQUFJLElBQTBIM0gsRUFBdEhnQixFQUFFZ3NDLEdBQUcvc0MsR0FBR0EsRUFBRSxPQUFPZSxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJMkcsR0FBRSxFQUFHLE1BQU0xSCxFQUFFLFFBQVEwSCxHQUFFLEVBQVMsS0FBSzNILEVBQUUySCxHQUFHLENBQUMsSUFBSXhMLEVBQUUsR0FBR0EsRUFBRSxJQUFJNkUsRUFBRSxDQUFDLElBQUlvQixFQUFFaUUsT0FBT3BHLEVBQUUwaUIsR0FBRzVSLE1BQU1ta0IsSUFBSSxJQUFJLEtBQUssSUFBSTl5QixHQUFHdWdCLEVBQUVoZSxNQUFNZ2UsRUFBRWhlLEtBQUtqRSxTQUFTLENBQUMsSUFBSU4sRUFBRXVpQixFQUFFaGUsS0FBS2pFLFNBQVN1dEIsU0FDOWY3ckIsRUFBRWhDLEVBQUVrVyxPQUFPLEVBQUVsVyxFQUFFdE4sT0FBTyxHQUFHcUosR0FBR3N3QyxHQUFHMTNDLEtBQUtxTixFQUFFQSxFQUFFc1AsY0FBYyxJQUFJMVIsRUFBRTdELEVBQUUsR0FBRzZELEVBQUVDLEVBQUUrMEIsY0FBYyxZQUFZLzBCLEVBQUUrMEIsY0FBYyxlQUFlLENBQUMsSUFBSSxJQUFJdlMsRUFBRSxFQUFFc3FCLEdBQUc5c0MsR0FBR0EsRUFBRUEsRUFBRThwQyxXQUFXLEdBQUcsTUFBTXYxQyxHQUFHMjJDLEdBQUdsckMsRUFBRWUsRUFBRSx1QkFBdUJ4TSxFQUFFNFEsU0FBU3FkLEVBQUUsR0FBR3hpQixFQUFFd2lCLEVBQUVBLEVBQUUsS0FBS3VxQixHQUFHL3NDLEdBQUcsSUFBSTJzQyxHQUFHM3NDLElBQUksUUFBUTRzQyxHQUFHNXNDLEtBQUssU0FBUzRzQyxHQUFHNXNDLEVBQUVlLEdBQUcsR0FBR2YsRUFBRUEsRUFBRSxDQUFDaXRDLEdBQUdqdEMsR0FBRyxJQUFJMEgsRUFBRTFILEVBQUVBLEVBQUVELEVBQUVDLEVBQUU0aUIsRUFBRSxHQUFHVyxFQUFHLEtBQUt2akIsRUFBRUEsRUFBRSxLQUFLQSxFQUFFNGlCLEVBQUUsS0FBSzdoQixHQUFHZixFQUFFKzBCLGNBQWMsU0FBUyxJQUFJcnRCLEVBQUVpaUMsbUJBQW1CNXBDLEVBQUUsTUFBTTdELElBQUk4RCxFQUFFQSxFQUFFZSxJQUFJZixFQUFFc08sSUFBSW84QixHQUFHLHFEQUFxRHh1QyxFQUFFaUosYUFBUSxLQUNuZSxTQUFTOG5DLEdBQUdqdEMsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRXlpQixJQUFJemlCLEVBQUVBLEVBQUVpcUMsVUFBVSxNQUFNanFDLEVBQUUzTCxJQUFJcXVCLEVBQUV0RSxhQUFhcGUsRUFBRTNMLEdBQUcyTCxFQUFFM0wsRUFBRSxNQUFNLFNBQVN5NEMsR0FBRzlzQyxHQUFHLE9BQU9BLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUUwNUIsV0FBVyxFQUFFLFNBQVNxVCxHQUFHL3NDLEdBQUcsSUFBSSxPQUFPLEVBQUU4c0MsR0FBRzlzQyxHQUFHQSxFQUFFQSxFQUFFa1UsUUFBUSxFQUFFLE1BQU1uVCxHQUFHLE9BQU8sR0FDOE8sU0FBU2lzQyxHQUFHaHRDLEVBQUVlLEdBQUcsT0FBT0EsRUFBRSxLQUFLZixFQUFFNEIsRUFBRSxJQUFJNUIsRUFBRTBpQixFQUFFLElBQUlxcUIsR0FBRy9zQyxHQUFHLElBS2hlLFNBQVNrdEMsR0FBR2x0QyxHQUFHLElBQUllLEVBQUVvc0MsR0FBR2o3QyxLQUFLaU8sRUFBRSxHQUFHak8sS0FBS3V3QixFQUFFMWhCLEVBQUU3TyxLQUFLbUMsRUFBRTJMLEdBQUcsS0FBSzlOLEtBQUtpUSxFQUFFalEsS0FBSzhOLEdBQUUsRUFBRzlOLEtBQUt3VixPQUFFLEVBQU94VixLQUFLNlEsRUFBRTdRLEtBQUswd0IsRUFBRTF3QixLQUFLTSxHQUFFLEVBQUdOLEtBQUtzd0IsRUFBRSxFQUFFdHdCLEtBQUs2TyxFQUFFLEtBQUs3TyxLQUFLd3dCLEVBQUUsRUFBdVQsU0FBUzBxQixHQUFHcHRDLEVBQUVlLEVBQUUyRyxHQUFHMUgsRUFBRUEsR0FBRSxFQUFHQSxFQUFFMEgsRUFBRUEsRUFBRTFILEVBQUVtQyxHQUFHcEIsRUFBRXNzQyxHQUFHcnRDLEdBQzllLFNBQVNzdEMsR0FBR3R0QyxHQUFHLEdBQUdBLEVBQUVBLEVBQUUsQ0FBQyxJQUFJQSxFQUFFK0MsRUFBRSxNQUFNLElBQUl3cUMsR0FBR3Z0QyxHQUFHQSxFQUFFK0MsR0FBRSxHQUF5QyxTQUFTeXFDLEdBQUd4dEMsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHQyxFQUFFRyxFQUFFeE8sS0FBSyxDQUFDb1AsRUFBRTJHLEVBQUUzSCxJQUFJQyxFQUFFQSxHQUFHcXRDLEdBQUdydEMsR0FBMEwsU0FBU3l0QyxHQUFHenRDLEdBQUcsT0FBT2dsQixFQUFHaGxCLEVBQUVHLEdBQUUsU0FBU1ksR0FBRyxPQUFPMmlCLEVBQUczaUIsRUFBRSxPQUMxWCxTQUFTc3NDLEdBQUdydEMsR0FBRyxHQUFHQSxFQUFFd2lCLEdBQUd4aUIsRUFBRUEsR0FBR3l0QyxHQUFHenRDLEdBQUcsQ0FBQyxJQUFJZSxFQUFFZixFQUFFd2lCLEVBQUU5YSxFQUFFZ21DLEdBQUczc0MsR0FBRzJHLElBQUlnYixFQUFFdEUsYUFBYTFXLEVBQUUxSCxVQUFVMHRDLEdBQUczc0MsSUFBSWYsRUFBRXdpQixFQUFFLEVBQUV4aUIsRUFBRWUsSUFBSWYsRUFBRWUsRUFBRTJoQixXQUFXMWlCLEVBQUVlLEdBQUdBLEVBQUVmLEVBQUUwSCxFQUFFLElBQUksSUFBSTNILEVBQUUySCxHQUFFLEVBQUcxSCxFQUFFRyxFQUFFdE4sU0FBU21OLEVBQUV4TixHQUFHLENBQUMsSUFBSTBKLEVBQUU4RCxFQUFFRyxFQUFFbXFCLFFBQVFub0IsRUFBRWpHLEVBQUUsR0FBR2lFLEVBQUVqRSxFQUFFLEdBQVUsR0FBUEEsRUFBRUEsRUFBRSxHQUFNaUcsRUFBRW5DLEVBQUVtQyxFQUFFaEMsRUFBRWdDLEVBQUUsSUFBSSxJQUFJcWdCLEVBQUVyZ0IsRUFBRTFOLEtBQUt5SCxHQUFHOEQsRUFBRTNMLEVBQUUwTSxRQUFHLElBQVN5aEIsSUFBSXhpQixFQUFFbUMsRUFBRW5DLEVBQUVtQyxJQUFJcWdCLEdBQUd6aEIsR0FBR3loQixhQUFhL2tCLE9BQU91QyxFQUFFMEgsRUFBRTNHLEVBQUV5aEIsSUFBTWtELEVBQUcza0IsSUFBSSxtQkFBb0IyaEIsRUFBRWpzQixTQUFTc0ssYUFBYTJoQixFQUFFanNCLFdBQVFzSixHQUFFLEVBQUdDLEVBQUV4TixHQUFFLEdBQUcsTUFBTStCLEdBQUd3TSxFQUFFeE0sRUFBRXlMLEVBQUVtQyxHQUFFLEVBQUdzckMsR0FBR3p0QyxLQUFLMEgsR0FBRSxJQUFLMUgsRUFBRTBILEVBQUUzRyxFQUFFaEIsSUFBSXlpQixFQUFFeUIsRUFBRWprQixFQUFFMkMsRUFBRTNDLEdBQUUsR0FBSUQsRUFBRWtrQixFQUFFamtCLEVBQUUyQyxFQUFFM0MsR0FBRSxHQUFJZSxhQUFhbXNDLElBQUlNLEdBQUd6c0MsRUFBRXloQixFQUFFemlCLEdBQUdnQixFQUFFNmhCLEdBQUUsR0FBSTdoQixFQUFFekosS0FBS2tyQixFQUFFemlCLElBQUkySCxJQUFJM0csRUFDcmYsSUFBSTRzQyxHQUFHNXNDLEdBQUcyc0MsR0FBRzNzQyxFQUFFZixHQUFHZSxFQUFFZixFQUFFd2lCLEVBQUV6aEIsRUFBRWYsR0FBRyxTQUFTdXRDLEtBQUs5cUIsRUFBRWh1QixLQUFLdkMsTUFBdUcsU0FBUzA3QyxLQUFLbnJCLEVBQUVodUIsS0FBS3ZDLE1BQTZGLFNBQVN5N0MsR0FBRzN0QyxHQUFHOU4sS0FBSzhOLEVBQUUwaUIsRUFBRS9NLFdBQVdzTyxFQUFFL3hCLEtBQUt3VixFQUFFeFYsTUFBTSxHQUFHQSxLQUFLNk8sRUFBRWYsR0FidEpzRCxFQUFFcW9DLEdBQUduM0MsV0FBWTR4QixHQUFHLGdCQUFXLElBQW9CbEQsR0FBSWh4QixLQUFLOE4sSUFBSTlOLEtBQUtzd0IsRUFBRSxtQkFBbUJ0d0IsS0FBS2lPLEVBQUUsZUFBZStxQyxHQUFHaDVDLEtBQUs2TyxFQUFFaXNDLEdBQUc5NkMsS0FBS0EsS0FBS3N3QixJQUFJdHdCLEtBQUs2aUMsY0FBYyxXQUFXN2lDLEtBQUtzc0IsTUFBTSxLQUNuUmxiLEVBQUVrYixNQUFNLFdBQVd0c0IsS0FBSzhOLEdBQUc5TixLQUFLd1YsSUFBSXdqQyxHQUFHaDVDLEtBQUs2TyxFQUFFaXNDLEdBQUc5NkMsS0FBSyxhQUFhQSxLQUFLd1YsR0FBRSxFQUFHeFYsS0FBS2lRLEdBQUUsRUFBR2pRLEtBQUs4TixFQUFFd2UsUUFBUXRzQixLQUFLaVEsR0FBRSxFQUFHalEsS0FBSzZpQyxjQUFjLFlBQVk3aUMsS0FBSzZpQyxjQUFjLFNBQVM2WCxHQUFHMTZDLFFBQVFvUixFQUFFdWhCLEdBQUcsV0FBVzN5QixLQUFLOE4sSUFBSTlOLEtBQUt3VixJQUFJeFYsS0FBS3dWLEdBQUUsRUFBR3hWLEtBQUtpUSxHQUFFLEVBQUdqUSxLQUFLOE4sRUFBRXdlLFFBQVF0c0IsS0FBS2lRLEdBQUUsR0FBSXlxQyxHQUFHMTZDLE1BQUssSUFBS3k1QyxHQUFHdm5CLEdBQUdTLEdBQUdwd0IsS0FBS3ZDLE9BQU9vUixFQUFFaW9CLEdBQUcsV0FBV3I1QixLQUFLNHdCLEtBQUs1d0IsS0FBS21xQyxHQUFHbnFDLEtBQUtNLEdBQUdOLEtBQUtpUSxFQUFFMHFDLEdBQUczNkMsTUFBTUEsS0FBSzI3QyxPQUFPdnFDLEVBQUV1cUMsR0FBRyxXQUFXaEIsR0FBRzM2QyxPQUluZG9SLEVBQUV3cUMsWUFBWSxXQUFXLElBQUksSUFBSTU3QyxLQUFLOE4sRUFBRSxPQUFPLEtBQUssR0FBRyxhQUFhOU4sS0FBSzhOLEVBQUUsT0FBTzlOLEtBQUs4TixFQUFFbVQsU0FBUyxPQUFPamhCLEtBQUs2USxHQUFHLEtBQUs2b0MsR0FBRyxJQUFLLE9BQU8sT0FBTzE1QyxLQUFLOE4sRUFBRTZwQyxhQUFhLElBQUssY0FBYyxHQUFHLDJCQUEyQjMzQyxLQUFLOE4sRUFBRSxPQUFPOU4sS0FBSzhOLEVBQUUrdEMsdUJBQXVCLElBQUkvdEMsRUFBRTlOLEtBQUs2TyxFQUFrRixPQUFoRmYsR0FBR0EsRUFBRXNPLElBQUlvOEIsR0FBRyxpQkFBaUJ4NEMsS0FBSzZRLEVBQUUseUNBQW9DLEdBQWUsS0FBSyxNQUFNaEMsR0FBRyxPQUFPbXFDLEdBQUdoNUMsS0FBSzZPLEVBQUUseUJBQXlCQSxFQUFFb0UsU0FBUyxPQUtyUituQyxHQUFHMTRDLFVBQVUyN0IsT0FBTyxTQUFTbndCLEdBQUcsR0FBRzlOLEtBQUs4TixFQUFFOU4sS0FBS3dWLGFBQWF3bEMsSUFBSWg3QyxLQUFLd1YsRUFBRXlvQixhQUFhLENBQUMsR0FBR2orQixLQUFLNk8sRUFBRSxDQUFDLElBQUlBLEVBQUU3TyxLQUFLNk8sU0FBUzdPLEtBQUs2TyxFQUFFZixFQUFFZSxFQUFFb3ZCLE9BQU9ud0IsSUFBSWUsRUFBRTJoQixJQUFJLEdBQUczaEIsRUFBRTJoQixHQUFHM2hCLEVBQUVvdkIsVUFBVWorQixLQUFLdXdCLEVBQUV2d0IsS0FBS3V3QixFQUFFaHVCLEtBQUt2QyxLQUFLbUMsRUFBRW5DLE1BQU1BLEtBQUs2USxHQUFFLEVBQUc3USxLQUFLOE4sSUFBSUEsRUFBRSxJQUFJNHRDLEdBQUcxN0MsTUFBTW83QyxHQUFHcDdDLE1BQU1rN0MsR0FBR2w3QyxNQUFLLEVBQUc4TixNQUFNa3RDLEdBQUcxNEMsVUFBVW1PLEVBQUUsU0FBUzNDLEVBQUVlLEdBQUc3TyxLQUFLTSxHQUFFLEVBQUc0NkMsR0FBR2w3QyxLQUFLOE4sRUFBRWUsSUFDbFRtc0MsR0FBRzE0QyxVQUFVOEMsS0FBSyxTQUFTMEksRUFBRWUsRUFBRTJHLEdBQUcsSUFBSTNILEVBQUU3RCxFQUFFaUcsRUFBRSxJQUFJcXNCLElBQUUsU0FBU3J1QixFQUFFcWlCLEdBQUd6aUIsRUFBRUksRUFBRWpFLEVBQUVzbUIsS0FBNEQsT0FBeERnckIsR0FBR3Q3QyxLQUFLNk4sR0FBRSxTQUFTSSxHQUFHQSxhQUFheXRDLEdBQUd6ckMsRUFBRWd1QixTQUFTajBCLEVBQUVpRSxNQUFZZ0MsRUFBRTdLLEtBQUswSSxFQUFFZSxFQUFFMkcsSUFBSXdsQyxHQUFHMTRDLFVBQVVteEIsZ0JBQWUsRUFFMVExaUIsRUFBRXNxQyxHQUFHOXFCLEdBQUc4cUIsR0FBRy80QyxVQUFVMlEsUUFBUSw2QkFBNkJvb0MsR0FBRy80QyxVQUFVSSxLQUFLLHFCQUFnRHFPLEVBQUUycUMsR0FBR25yQixHQUFHbXJCLEdBQUdwNUMsVUFBVTJRLFFBQVEsd0JBQXdCeW9DLEdBQUdwNUMsVUFBVUksS0FBSyxnQkFBOEUrNEMsR0FBR241QyxVQUFVa1QsRUFBRSxXQUE2QixhQUFYZ21DLEdBQUd4N0MsS0FBSzhOLEdBQVM5TixLQUFLNk8sR0FBSSxJQUFJMnNDLEdBQUcsR0FBRyxTQUFTTSxHQUFHaHVDLEdBQUcsSUFBSWUsRUFBRSxHQUFHMkcsRUFBRTNHLEVBQUVuRixVQUFVQSxTQUFTbUUsRUFBRXFwQixHQUFHcHBCLEdBQUcvTixXQUFXaUssRUFBRW14QixHQUFHenhCLFNBQVMsVUFBVXVHLEVBQUUsQ0FBQ3VvQixHQUFHeHVCLEVBQUVrcUIsUUFBRyxHQUFRam1CLEVBQUUsSUFBSStzQyxHQUFHL3FDLEdBQUdxZ0IsRUFBRSxLQUFLanVCLEVBQUUsTUFBTXdNLEVBQUVtZCxRQUFRbmQsRUFBRW1kLFFBQVEsSUFDL2EsT0FEbWIsRUFBRTNwQixJQUFJaXVCLEVBQUUxbUIsT0FBTzZaLFlBQVcsV0FBV3M0QixHQUFHL3hDLEdBQUUsR0FBSSxJQUFJOUUsRUFBRSxJQUFJODJDLEdBQUdDLEdBQUcsc0NBQXNDcHVDLEdBQUd1dEMsR0FBR250QyxHQUFHaXRDLEdBQUdqdEMsR0FBRSxFQUFHL0ksS0FBSTdDLEdBQUc0TixFQUFFaWtCLEdBQUc1RCxHQUFHdG1CLEVBQUU2dEMsT0FBTzd0QyxFQUFFeXRDLG1CQUFtQixXQUFXenRDLEVBQUV3OUIsWUFBWSxVQUFVeDlCLEVBQUV3OUIsWUFBWSxZQUFZeDlCLEVBQUV3OUIsYUFBYXVVLEdBQUcveEMsRUFBRTZFLEVBQUU2eUIsS0FBSSxFQUFHcFIsR0FBRzhxQixHQUFHbnRDLEdBQUdpdEMsR0FBR2p0QyxHQUFFLEVBQUcsUUFBUWpFLEVBQUVwRixRQUFRLFdBQVdtM0MsR0FBRy94QyxHQUFFLEVBQUdzbUIsR0FBRyxJQUFJcHJCLEVBQUUsSUFBSTgyQyxHQUFHRSxHQUFHLDhCQUNuM0JydUMsR0FBR3V0QyxHQUFHbnRDLEdBQUdpdEMsR0FBR2p0QyxHQUFFLEVBQUcvSSxJQUF1QjJ3QixHQUFuQjVsQixFQUFFcEIsRUFBRTVELFlBQVksR0FBTyxDQUFDNE0sS0FBSyxrQkFBa0Jza0MsUUFBUSxVQUFVcGlCLEdBQUcvdkIsRUFBRWlHLEdBOUorcEIsU0FBWW5DLEVBQUVlLEdBQUdpbkIsR0FBR2hvQixFQUFFLHFCQUFxQkEsRUFBRVcsSUFBSXlvQixHQUFHcm9CLElBQUlBLEVBQUVmLEVBQUVpb0IsZUFBZWpvQixFQUFFaW9CLGNBQWNDLGNBQWNubkIsR0FBRzJoQixFQUFFM2hCLEVBQUVzaUIsRUFBR3RpQixFQUFFbkYsV0FBVyxPQUFPd25CLElBQUtBLEVBQUdDLEVBQUdYLEVBQUU5bUIsV0FBV21GLEVBQUVxaUIsR0FBSXJpQixHQUFHZixFQUFFekMsYUFBYSxRQUFRd0QsR0E4SjMxQnV1QixDQUFHcHpCLEVBQUU4RCxHQUFpQyxTQUFZQSxHQUFHLElBQUllLEVBQUUsT0FBT0EsR0FBR2YsR0FBR3BFLFVBQVVpRixxQkFBcUIsVUFBVSxHQUFHRSxFQUFFbE8sT0FBT2tPLEVBQUUsR0FBR2YsRUFBRTh0QixnQkFBNUh3Z0IsQ0FBRzVtQyxHQUFHaEssWUFBWXhCLEdBQVVpRSxFQUFnSCxTQUFTZ3RDLEtBQUssR0FBR2o3QyxNQUFNQSxLQUFLdzRCLEdBQUcsQ0FBQyxJQUFJMXFCLEVBQUU5TixLQUFLdzRCLEdBQUcxcUIsR0FBRyxVQUFVQSxFQUFFdXVDLFNBQVNOLEdBQUdqdUMsR0FBRSxFQUFHOU4sS0FBS2swQixLQUNyVSxTQUFTNm5CLEdBQUdqdUMsRUFBRWUsRUFBRTJHLEdBQUcsTUFBTUEsR0FBR2diLEVBQUV0RSxhQUFhMVcsR0FBRzFILEVBQUUrcEMsT0FBT3htQixFQUFHdmpCLEVBQUVsSixRQUFReXNCLEVBQUd2akIsRUFBRTJwQyxtQkFBbUJwbUIsRUFBR3hpQixHQUFHakYsT0FBTzZaLFlBQVcsV0FBVzNWLEdBQUdBLEVBQUVmLFlBQVllLEVBQUVmLFdBQVdWLFlBQVl5QixLQUFJLEdBQUcsSUFBSW91QyxHQUFHLEVBQUVELEdBQUcsRUFBRSxTQUFTRCxHQUFHbHVDLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUUseUJBQXlCMUgsRUFBRSxJQUFJZSxJQUFJMkcsR0FBRyxLQUFLM0csR0FBRzBoQixFQUFFaHVCLEtBQUt2QyxLQUFLd1YsR0FBR3hWLEtBQUtzVCxLQUFLeEYsRUFBVSxTQUFTd3VDLEdBQUd4dUMsR0FBRzlOLEtBQUtpUSxFQUFFbkMsRUFDNVQsU0FBU3l1QyxHQUFHenVDLEVBQUVlLEVBQUUyRyxHQUNpRCxHQUQ5Q3hWLEtBQUt3VixFQUFFMUgsRUFBRUEsRUFBRWUsR0FBRyxHQUFHN08sS0FBS3d3QixFQUFFMWlCLEVBQUV3bEIscUJBQXFCLDhDQUE4Q3R6QixLQUFLeVEsRUFBRTNDLEVBQUUwdUMsb0JBQW9CQyxHQUFHejhDLEtBQUtpTyxFQUFFMG5CLEdBQUc3bkIsRUFBRTR1QyxvQkFBb0JDLElBQUkzOEMsS0FBS3N3QixFQUFFeGlCLEVBQUV1bEIsa0JBQWtCLDhEQUE4RHJ6QixLQUFLTSxFQUFFd04sRUFBRXlsQiwwQkFBMEIsNkNBQTZDdnpCLEtBQUs2USxFQUFFL0MsRUFBRTh1QyxpQkFBaUJDLEdBQUc3OEMsS0FBSzhOLEVBQUU2bkIsR0FBRzduQixFQUFFZ3ZDLGlCQUFpQkMsSUFBSXZuQyxJQUFJeFYsS0FBSzhOLEVBQUUsb0JBQW9CMEgsRUFBRXhWLEtBQUtpTyxFQUFFLG9CQUFvQnVILEdBQUdBLEVBQUUsUUFBUXN5QixPQUFLdHlCLEVBQUVnYixFQUFFNG1CLGdCQUM3ZTVoQyxHQUFHLGtCQUF3QixtQ0FBOENveUIsS0FBSyxNQUFNLElBQUl2NEIsRUFBRSxpQkFBaUIsMkRBQTJEclAsS0FBS2lRLE9BQUUsRUFBTzIzQixLQUFLNW5DLEtBQUtpUSxFQUFFLElBQUlncEMsR0FBR3ptQyxNQUFNdTFCLEtBQUsvbkMsS0FBS2lRLEVBQUUsSUFBSXFzQyxHQUFHOW1DLEdBQUd4VixLQUFLaVEsRUFBRSxJQUFJcW5DLEdBQUd0M0MsS0FBSzZPLEVBQUUsS0FGc0NrQyxFQUFFaXJDLEdBQUd6ckIsR0FBMkJ4ZixFQUFFdXJDLEdBQUd0RixJQUFJc0YsR0FBR2g2QyxVQUFVd0wsRUFBRSxXQUFXLE9BQU8sSUFBSTlOLEtBQUtpUSxHQUFHcXNDLEdBQUdoNkMsVUFBVXVNLEVBQUUsV0FBVyxNQUFNLElBRXZKLElBQUltdUMsR0FBR25NLEdBQUcsVUFBVTRMLEdBQUcsSUFBSXBULEdBQUcsSUFBSSxLQUFLc1QsR0FBRyxDQUFDLGVBQWUscUNBQXFDRSxHQUFHLElBQUl4VCxHQUFHLElBQUksS0FBSzBULEdBQUcsQ0FBQyxlQUFlLG9CQUFvQixTQUFTRSxHQUFHbnZDLEVBQUVlLEdBQUdBLEVBQUVmLEVBQUVBLEVBQUUscUJBQXFCZSxTQUFTZixFQUFFQSxFQUFFLHFCQUMvYyxTQUFTb3ZDLEdBQUdwdkMsRUFBRWUsR0FBR0EsSUFBSWYsRUFBRTBpQixFQUFFMnNCLEdBQUcsOENBQThDdHVDLEdBQUdmLEVBQUV3aUIsRUFBRTZzQixHQUFHLDhEQUE4RHR1QyxHQUFHZixFQUFFeE4sRUFBRTY4QyxHQUFHLDZDQUE2Q3R1QyxJQUFJLFNBQVNzdUMsR0FBR3J2QyxFQUFFZSxHQUErRCxPQUE1RGYsRUFBRWsyQixHQUFHbDJCLEdBQUdlLEVBQUVtMUIsR0FBR24xQixFQUFFaEwsS0FBS2lLLEVBQUUwSCxFQUFFMUgsRUFBRUEsRUFBRUEsRUFBRTBILEVBQUV5dEIsR0FBR24xQixFQUFFZSxFQUFFb0IsR0FBR25DLEVBQUVBLEVBQUVlLEVBQUVmLEVBQUVvMUIsR0FBR3AxQixFQUFFZSxFQUFFWixHQUFVSCxFQUFFL04sV0FBVyxTQUFTcTlDLEdBQUd0dkMsRUFBRWUsR0FBR0EsR0FBR2YsRUFBRUEsRUFBRSxvQkFBb0JlLEVBQUVmLEVBQUVHLEVBQUUsb0JBQW9CWSxXQUFXZixFQUFFQSxFQUFFLDJCQUEyQkEsRUFBRUcsRUFBRSxxQkFDbGEsU0FBU292QyxHQUFHdnZDLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEVBQUVpRyxFQUFFaEMsSUF4SHhCLFdBQWMsSUFBSUgsRUFBRTAzQixLQUF5RixTQUFyRjEzQixFQUFFMjRCLEdBQUczNEIsSUFBSWs2QixHQUFHLE1BQU1sNkIsRUFBRUEsRUFBRThRLE1BQU0sc0JBQXNCLEdBQUc5USxFQUFFbk4sT0FBTzY0QixTQUFTMXJCLEVBQUUsR0FBRyxJQUFJLE9BQWUsR0FBR0EsR0FBTTJxQixJQUFLZ0IsTUFBSSxFQUFFQSxNQXdIaEg2akIsSUFBTTFWLEtBQUs5NUIsRUFBRWlrQixFQUFFamtCLEVBQUV5aUIsRUFBRXppQixJQUFJa3ZDLEtBQUtBLEdBQUcsSUFBSTFnQixJQUFFLFNBQVNoTSxFQUFFanVCLElBRzNFLFNBQVl5TCxFQUFFZSxLQUFRakYsT0FBTzJ6QyxNQUFNLElBQUlDLFFBQVEsSUFBSWw1QyxRQUFRd0osS0FBUzBpQixFQUFFaXRCLElBQUksYUFBYTd6QyxPQUFPMnpDLE1BQU0sSUFBSUMsUUFBUSxJQUFJbDVDLFFBQVF3SixJQUFJZSxFQUFFdEQsTUFBTSxzQkFYakYsU0FBWXVDLEVBQUVlLEdBQUd5c0MsR0FBR3h0QyxFQUFFLEtBQUtlLE9BQUUsR0FXbUc2dUMsQ0FBRzVCLEdBQXRCM2tCLEdBQUd3bUIsR0FBRyxDQUFDOUYsT0FBTzRGLE9BQWMsV0FBVzV1QyxFQUFFdEQsTUFBTSx5QkFIcklxeUMsQ0FBR3R0QixFQUFFanVCLE9BQU15TCxFQUFFaWtCLEVBQUVqa0IsRUFBRTNMLEVBQUUyTCxJQUFJQSxFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxFQUFFaUcsRUFBRWhDLEdBRHNVc3VDLEdBQUdqNkMsVUFBVTRzQyxFQUFFLFdBQVcsT0FBT2x2QyxLQUFLNk8sR0FFN2QwdEMsR0FBR2o2QyxVQUFVaXVCLEVBQUUsU0FBU3ppQixFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxFQUFFaUcsR0FBRyxHQUFHMjNCLFlBQU8sSUFBcUJwWCxFQUFFck4sWUFBTyxJQUFxQnFOLEVBQUVyTyxjQUFTLElBQXFCcU8sRUFBRXNwQixTQUFTLE1BQU0sSUFBSXpxQyxFQUFFLDhDQUE4Qyx3SUFBd0ksSUFBSXBCLEVBQUUsSUFBSXdyQyxHQUFHejVDLEtBQUtpUSxHQUFHLEdBQUdBLEVBQUUsQ0FBQ2hDLEVBQUVBLEVBQUVvSixLQUFLMFUsSUFBSSxFQUFFOWIsR0FBRyxJQUFJcWdCLEVBQUU3TSxZQUFXLFdBQVd4VixFQUFFNDBCLGNBQWMsYUFBWTV5QixHQUFHbXhCLEdBQUduekIsRUFBRSxZQUFXLFdBQVdxaUIsR0FBR3BFLGFBQWFvRSxHQUFHLElBQUlqdUIsRUFBRSxLQUFLLElBQUlBLEVBQ3BmZ0IsS0FBSzJsQyxNQWpCMkwsU0FBWWw3QixHQUFHLElBQUksT0FBT0EsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRTZwQyxhQUFhLEdBQUcsTUFBTTlvQyxHQUFHLE9BQU9tcUMsR0FBR2xyQyxFQUFFZSxFQUFFLDZCQUE2QkEsRUFBRW9FLFNBQVMsSUFpQnRTNHFDLENBQUc3OUMsUUFBUSxLQUFLLE1BQU1rRixHQUFHN0MsRUFBRSxLQUFLd00sR0FBR0EsRUFBRXhNLE1BQUtxL0IsR0FBR3p6QixFQUFFLFNBQVEsV0FBV3FpQixHQUFHcEUsYUFBYW9FLEdBQUcrTixHQUFHcitCLFNBQVEwaEMsR0FBR3p6QixFQUFFLFdBQVUsV0FBV3FpQixHQUFHcEUsYUFBYW9FLEdBQUcrTixHQUFHcitCLE1BQU02TyxHQUFHQSxFQUFFLFNBdkJ0SyxTQUFZZixFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxHQUFHLEdBQUc4RCxFQUFFQSxFQUFFLE1BQU12QyxNQUFNLDBEQUEwRHVDLEVBQUUwaUIsRUFBRSxZQUFZM2hCLEdBQUcyRyxFQUFFQSxFQUFFQSxFQUFFc29DLGNBQWMsTUFBTWh3QyxFQUFFMGlCLEVBQUUzaEIsRUFBRWYsRUFBRXdpQixFQUFFLEdBQUd4aUIsRUFBRTRCLEVBQUU4RixFQUFFMUgsRUFBRTR3QixHQUFFLEVBQUc1d0IsRUFBRTBILEdBQUUsRUFBRzFILEVBQUVBLEVBQUVBLEVBQUVpbkMsRUFBRWpuQyxFQUFFaW5DLEVBQUVqbkMsSUFBSTZvQyxHQUFHN29DLElBQUlBLEVBQUU0aUIsRUFBRTVpQixFQUFFaW5DLEVBQUVrQyxHQUFHbnBDLEVBQUVpbkMsR0FBR2tDLEdBQUdOLElBQUk3b0MsRUFBRUEsRUFBRTJwQyxtQkFBbUIxbEIsRUFBRWprQixFQUFFdXJCLEdBQUd2ckIsR0FBRyxJQUFJa3JDLEdBQUdsckMsRUFBRWUsRUFBRWlzQyxHQUFHaHRDLEVBQUUsZ0JBQWdCQSxFQUFFcThCLEdBQUUsRUFBR3I4QixFQUFFQSxFQUFFK0UsS0FBSzJDLEVBQUV0QixPQUFPckYsSUFBRyxHQUFJZixFQUFFcThCLEdBQUUsRUFBRyxNQUFNbDhCLEdBQXlELE9BQXREK3FDLEdBQUdsckMsRUFBRWUsRUFBRWlzQyxHQUFHaHRDLEVBQUUsc0JBQXNCRyxFQUFFZ0YsZUFBVXVuQyxHQUFHMXNDLEVBQUVHLEdBQVVZLEVBQUVoQixHQUFHLEdBQUcsSUFBSW9DLEVBQUUsSUFBSXl5QixHQUFHNTBCLEVBQUUwVSxTQUFTeFksR0FsSDlhLFNBQVk4RCxFQUFFZSxHQUFHLEdBQUdmLEVBQUVuSSxTQUFTLG1CQUFtQm1JLEVBQUVuSSxRQUFRbUksRUFBRW5JLFFBQVFrSixPQUFFLFFBQWEsR0FBRzBpQixFQUFHempCLElBQUksaUJBQWtCQSxFQUFFMmtCLEVBQUUza0IsRUFBRWUsT0FBRSxRQUFhLElBQUksSUFBSTJHLEVBQUVndEIsR0FBRzEwQixHQUFHRCxFQUFFeTBCLEdBQUd4MEIsR0FBRzlELEVBQUU2RCxFQUFFbE4sT0FBT3NQLEVBQUUsRUFBRUEsRUFBRWpHLEVBQUVpRyxJQUFJcEIsRUFBRXRNLFVBQUssRUFBT3NMLEVBQUVvQyxHQUFHdUYsR0FBR0EsRUFBRXZGLEdBQUduQyxHQWtIaU9pd0MsQ0FBRy96QyxHQUFFLFNBQVNpRSxFQUFFcWlCLEdBQUdyZ0IsRUFBRWxLLElBQUl1cUIsRUFBRXJpQixNQUFLakUsRUFwSnpSLFNBQVk4RCxHQUFHQSxFQUFFLENBQVUsSUFBVCxJQUFJZSxFQUFFOHhCLEdBQVduckIsRUFBRTFILEVBQUVuTixPQUFPa04sRUFBRSxpQkFBa0JDLEVBQUVBLEVBQUVxaUIsTUFBTSxJQUFJcmlCLEVBQUU5RCxFQUFFLEVBQUVBLEVBQUV3TCxFQUFFeEwsSUFBSSxHQUFHQSxLQUFLNkQsR0FBR2dCLEVBQUV0TSxVQUFLLEVBQU9zTCxFQUFFN0QsR0FBR0EsRUFBRThELEdBQUcsQ0FBQ2UsRUFBRTdFLEVBQUUsTUFBTThELEVBQUVlLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEVBQUUsS0FBSyxpQkFBa0JmLEVBQUVBLEVBQUV5MkIsT0FBTzExQixHQUFHZixFQUFFZSxHQW9Kc0Z5cUMsQ0FBR3JwQyxFQUFFd3lCLEtBQUs1MEIsRUFBRTJpQixFQUFFd3RCLFVBQVVudkMsYUFDM2UyaEIsRUFBRXd0QixVQUFVaHJCLEVBQUd1bkIsR0FBRy9rQyxJQUFJeEwsR0FBRzZELEdBQUdvQyxFQUFFbEssSUFBSSxlQUFlLG1EQUFtRGtLLEVBQUV0SyxTQUFRLFNBQVNzSSxFQUFFcWlCLEdBQUd0d0IsS0FBSzhOLEVBQUV1cUMsaUJBQWlCL25CLEVBQUVyaUIsS0FBSUgsR0FBR0EsRUFBRStDLElBQUkvQyxFQUFFQSxFQUFFNHBDLGFBQWE1cEMsRUFBRStDLEdBQUcsb0JBQW9CL0MsRUFBRUEsR0FBR0EsRUFBRUEsRUFBRW13QyxrQkFBa0Jud0MsRUFBRTZyQyxJQUFJN3JDLEVBQUVBLEVBQUVtd0MsZ0JBQWdCbndDLEVBQUU2ckMsR0FBRyxJQUFJb0IsR0FBR2p0QyxHQUFHLEVBQUVBLEVBQUVHLElBQUlILEVBQUV5aUIsRUFDbFAsU0FBWXppQixHQUFHLE9BQU8ycUIsSUFBSWEsR0FBRyxJQUFJLGlCQUFrQnhyQixFQUFFa2UsY0FBUyxJQUFTbGUsRUFBRWlxQyxVQUQyS21HLENBQUdwd0MsRUFBRUEsR0FBR2tyQyxHQUFHbHJDLEVBQUVlLEVBQUVpc0MsR0FBR2h0QyxFQUFFLG9CQUFvQkEsRUFBRUcsRUFBRSwwQkFBMEJILEVBQUV5aUIsSUFBSXppQixFQUFFeWlCLEdBQUd6aUIsRUFBRUEsRUFBRWtlLFFBQVFsZSxFQUFFRyxFQUFFSCxFQUFFQSxFQUFFaXFDLFVBQVVobUIsRUFBRWprQixFQUFFb21CLEdBQUdwbUIsSUFBSUEsRUFBRTNMLEVBQUVpZ0MsR0FBR3QwQixFQUFFb21CLEdBQUdwbUIsRUFBRUcsRUFBRUgsSUFBSWtyQyxHQUFHbHJDLEVBQUVlLEVBQUVpc0MsR0FBR2h0QyxFQUFFLG9CQUFvQkEsRUFBRXhOLEdBQUUsRUFBR3dOLEVBQUVBLEVBQUVzcUMsS0FBS3ZwQyxHQUFHZixFQUFFeE4sR0FBRSxFQUFHLE1BQU0yTixHQUFHK3FDLEdBQUdsckMsRUFBRWUsRUFDbmZpc0MsR0FBR2h0QyxFQUFFLGVBQWVHLEVBQUVnRixVQUFVdW5DLEdBQUcxc0MsRUFBRUcsSUFxQnlJa3dDLENBQUdsd0MsRUFBRUgsRUFBRTBILEVBQUUzSCxFQUFFN0QsSUFBSSxJQUFJMnpDLEdBQUcsSUFBSXRuQixHQUFHQyxHQUFHLHlEQUF5RG1uQixHQUFHLFFBQVFwbUMsS0FBSzJ1QixNQUFNLElBQUkzdUIsS0FBS0ksVUFBVTFYLFdBSVUsU0FBU3ErQyxHQUFHdHdDLEdBQWEsR0FBRyxpQkFBYkEsRUFBRUEsRUFBRXNsQyxTQUErQjlMLEdBQUcxa0MsS0FBS2tMLEdBQUcsTUFBTSxJQUFJdUIsRUFBRSxpQkFBa0IsU0FBU2d2QyxHQUFHdndDLEdBQUcsVUFBVUEsR0FBR3N3QyxHQUFHdHdDLEdBQzNOLFNBQVM0QixHQUFFNUIsR0FBRyxJQUFJQSxFQUFFK2lDLElBQUksQ0FBQyxHQUFHL2lDLEVBQUVvb0MscUJBQXFCLE1BQU0sSUFBSTdtQyxFQUFFLDZCQUE2QixLQUFLc21CLEdBQUc3bkIsSUFBSSxNQUFNLElBQUl1QixFQUFFLG1CQUM3VSxTQUFTaXZDLEdBQUd4d0MsR0FBRyxHQUFHQSxFQUFFZytCLGFBQWFoK0IsRUFBRThsQyxnQkFBZ0IsSUFBSTlsQyxFQUFFZytCLGNBQWNoK0IsRUFBRThsQyxlQUFlLE1BQU0sSUFBSXZrQyxFQUFFLHNCQUF1QixDQUFDLElBQUl2QixFQUFFZ21DLFlBQVksTUFBTSxJQUFJemtDLEVBQUUsMkJBQTJCLElBQUl2QixFQUFFd0YsS0FBSyxNQUFNLElBQUlqRSxFQUFFLDhCQUo1TWt0QyxHQUFHajZDLFVBQVVILEVBQUUsU0FBUzJMLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsSUFBSWlHLEVBQUVqUSxLQUFLZzlDLEdBQUc1M0MsTUFBSyxXQUFXd0UsT0FBTzJ6QyxLQUFLQyxPQUFPZSxVQUFVdHVDLEVBQUV1RixHQUFHLElBQUl2SCxFQUFFckUsT0FBTzJ6QyxLQUFLaUIsS0FBSzcxQixXQUFXL2UsT0FBTzJ6QyxLQUFLaUIsS0FBS0MsU0FBUyxNQUFNNzBDLE9BQU8yekMsS0FBS0MsT0FBT2w1QyxRQUFRLENBQUNvNkMsS0FBSzV3QyxFQUFFOUksT0FBT3dRLEVBQUV4RixLQUFLbkMsRUFBRTJVLFFBQVF4WSxFQUFFMjBDLFNBQVMsT0FBT3QyQyxTQUFTLFNBQVNpb0IsR0FBRzFtQixPQUFPMnpDLEtBQUtpQixLQUFLQyxTQUFTeHdDLEdBQUdZLEdBQUdBLEVBQUV5aEIsU0FBUWhoQixHQUFFLFNBQVNyQixHQUFHWSxHQUFHQSxFQUFFLENBQUNoSyxNQUFNLENBQUNvTyxRQUFRaEYsR0FBR0EsRUFBRWdGLFNBQVMsMEJBSXZIc3BDLEdBQUdqNkMsVUFBVTQwQixHQUFHLFdBQVcsT0FBTzZkLEdBQUUvMEMsS0FBSzQrQyxHQUFHLEtBQUtyQyxHQUFHajZDLFVBQVU4MEIsR0FBRyxTQUFTdHBCLEVBQUVlLEdBQUcsT0FBT2ttQyxHQUFFLzBDLEtBQUs2K0MsR0FBRyxDQUFDeE4sUUFBUXZqQyxFQUFFc2xDLE1BQU12a0MsS0FBSzB0QyxHQUFHajZDLFVBQVVnMUIsR0FBRyxTQUFTeHBCLEVBQUVlLEdBQUcsT0FBT2ttQyxHQUFFLzBDLEtBQUtvMUMsR0FBRyxDQUFDL0QsUUFBUXZqQyxFQUFFdWxDLFNBQVN4a0MsS0FBSyxJQUFJaXdDLEdBQUcsQ0FBQzFvQixZQUFZLGVBQWUyb0IsU0FBUyxhQUdyZCxTQUFTQyxHQUFHbHhDLEdBQUcsSUFBSUEsRUFBRW14QyxzQkFBc0IsTUFBTSxJQUFJNXZDLEVBQUUsa0JBQWtCLElBQUl2QixFQUFFbXhDLHNCQUFzQm5MLFlBQVksTUFBTSxJQUFJemtDLEVBQUUsMkJBQTJCLElBQUl2QixFQUFFbXhDLHNCQUFzQjNyQyxLQUFLLE1BQU0sSUFBSWpFLEVBQUUsNkJBQXlMLFNBQVM2dkMsR0FBR3B4QyxHQUFHLElBQUlBLEVBQUVtakMsYUFBYW5qQyxFQUFFMG1DLFlBQVkxbUMsRUFBRWdrQyxXQUFXaGtDLEVBQUVrakMsYUFBYSxNQUFNLElBQUkzaEMsRUFBRSxrQkFDdGQsU0FBUzh2QyxHQUFHcnhDLEVBQUVlLEdBQWlNLE9BQTlMQSxFQUFFbWpDLGNBQWNuakMsRUFBRXVoQyxZQUFZLEdBQUd2aEMsRUFBRXVoQyxXQUFXOXZCLFFBQVEsV0FBV3pSLEVBQUVtaUMsZUFBZWxqQyxFQUFFMG1DLFVBQVUzbEMsRUFBRTNELE1BQU00QyxFQUFFMG1DLFVBQVUxbUMsRUFBRWdrQyxVQUFnQ2hOLEdBQXJCaDNCLEVBQUUsSUFBSXcxQixHQUFHeDFCLEVBQUVna0MsVUFBZSxXQUFXampDLEVBQUUzRCxNQUFNNEMsRUFBRWhJLElBQUksV0FBbUIrSSxFQUN0TixTQUFTdXdDLEdBQUd0eEMsR0FBRyxJQUFJZSxFQUFFLEtBQWtTLEdBQTdSZixFQUFFdXhDLGtCQUFrQnZ4QyxFQUFFd0YsS0FBSywyQ0FBMkN6RSxFQUFFa29DLEdBQUdqcEMsSUFBSSxvQ0FBb0NBLEVBQUVzZCxjQUFjdGQsRUFBRXdGLEtBQUssNEJBQTRCekUsRUFBRWtvQyxHQUFHanBDLElBQUksZ0JBQWdCQSxFQUFFc2QsY0FBY3RkLEVBQUV3RixLQUFLLHVCQUF1QnpFLEVBQUVrb0MsR0FBR2pwQyxJQUFJQSxFQUFFc2QsZUFBZXZjLEVBQUV5d0MsR0FBR3h4QyxFQUFFc2QsZUFBa0J2YyxFQUFFLE1BQU1BLEVBQUVhLEdBQUU1QixHQUFHLFNBQVM4bUMsR0FBRzltQyxFQUFFZSxHQUE0QixPQUF6QkEsRUFBRTB3QyxxQkFBb0IsRUFBVXhLLEdBQUVqbkMsRUFBRTB4QyxHQUFHM3dDLEdBQUcsU0FBU2dtQyxHQUFHL21DLEVBQUVlLEdBQTRCLE9BQXpCQSxFQUFFMHdDLHFCQUFvQixFQUFVeEssR0FBRWpuQyxFQUFFMnhDLEdBQUc1d0MsR0FDNWIsU0FBU2ltQyxHQUFHaG5DLEVBQUVlLEdBQTRDLE9BQXpDQSxFQUFFMHdDLHFCQUFvQixFQUFHMXdDLEVBQUU2d0MsWUFBVyxFQUFVM0ssR0FBRWpuQyxFQUFFNnhDLEdBQUc5d0MsR0FBRyxTQUFTK3dDLEdBQUc5eEMsR0FBRyxJQUFJQSxFQUFFbW5DLFFBQVEsTUFBTSxJQUFJNWxDLEVBQUUsd0JBTjhXK0IsRUFBRW1yQyxHQUFHajZDLFdBQ3JlKzBCLEdBQUcsU0FBU3ZwQixFQUFFZSxHQUFHLElBQUkyRyxFQUFFLENBQUM2N0IsUUFBUXZqQyxHQUFHRCxFQUFFLEdBQXdHLE9BQXJHNG5CLEdBQUdxcEIsSUFBRyxTQUFTOTBDLEVBQUVpRyxHQUFHLElBQUloQyxFQUFFWSxFQUFFb0IsR0FBRyxPQUFPaEMsRUFBRUosRUFBRXBPLEtBQUt1SyxHQUFHaUcsS0FBS3BCLElBQUkyRyxFQUFFdkYsR0FBR2hDLE1BQUtKLEVBQUVsTixTQUFTNlUsRUFBRXFxQyxnQkFBZ0JoeUMsR0FBVWtuQyxHQUFFLzBDLEtBQUs2K0MsR0FBR3JwQyxJQUFJcEUsRUFBRXFsQixHQUFHLFNBQVMzb0IsRUFBRWUsR0FBbUQsT0FBUGduQixHQUF6Qy9uQixFQUFFLENBQUNneUMsWUFBWSxpQkFBaUIxTSxNQUFNdGxDLEdBQU9lLEdBQVVrbUMsR0FBRS8wQyxLQUFLKy9DLEdBQUdqeUMsSUFBSXNELEVBQUVzbEIsR0FBRyxTQUFTNW9CLEVBQUVlLEdBQWlELE9BQVBnbkIsR0FBdkMvbkIsRUFBRSxDQUFDZ3lDLFlBQVksZUFBZTFNLE1BQU10bEMsR0FBT2UsR0FBVWttQyxHQUFFLzBDLEtBQUtnZ0QsR0FBR2x5QyxJQUFJc0QsRUFBRW9sQixHQUFHLFNBQVMxb0IsRUFBRWUsR0FBbUQsT0FBUGduQixHQUF6Qy9uQixFQUFFLENBQUNneUMsWUFBWSxlQUFlek8sUUFBUXZqQyxHQUFPZSxHQUFVa21DLEdBQUUvMEMsS0FBS2lnRCxHQUFHbnlDLElBQ3Rhc0QsRUFBRW9tQixHQUFHLFNBQVMxcEIsRUFBRWUsRUFBRTJHLEdBQXlFLE9BQVBxZ0IsR0FBL0QvbkIsRUFBRSxDQUFDZ3lDLFlBQVksMEJBQTBCek8sUUFBUXZqQyxFQUFFb3lDLFNBQVNyeEMsR0FBTzJHLEdBQVV1L0IsR0FBRS8wQyxLQUFLbWdELEdBQUdyeUMsSUFBc0NzRCxFQUFFNmpCLEdBQUcsU0FBU25uQixHQUFHLE9BQU9pbkMsR0FBRS8wQyxLQUFLb2dELEdBQUd0eUMsSUFJeENzRCxFQUFFc2tCLEdBQUcsU0FBUzVuQixFQUFFZSxHQUFHLE9BQU9rbUMsR0FBRS8wQyxLQUFLcWdELEdBQUcsQ0FBQ3BMLFFBQVFubkMsRUFBRXd5QyxZQUFZenhDLEtBQUt1QyxFQUFFaWpCLEdBQUcsU0FBU3ZtQixHQUFHLE9BQU9pbkMsR0FBRS8wQyxLQUFLdWdELEdBQUcsQ0FBQ3RMLFFBQVFubkMsS0FBS3NELEVBQUV1akIsR0FBRyxTQUFTN21CLEdBQUcsT0FBT2luQyxHQUFFLzBDLEtBQUt3Z0QsR0FBRyxDQUFDdkwsUUFBUW5uQyxLQUN2UyxJQUFJMHlDLEdBQUcsQ0FBQ3o5QixTQUFTLGlCQUFpQitOLEVBQUU4dUIsR0FBR2EsRUFBRSxRQUFRbHBCLEdBQUUsR0FBSWdwQixHQUFHLENBQUN4OUIsU0FBUyxnQkFBZ0IrTixFQUFFOHVCLEdBQUc1aUIsRUFBRSxTQUFTbHZCLEdBQUcsSUFBSWUsRUFBRWYsRUFBRWd5QyxZQUFZLElBQUlqeEMsSUFBSWYsRUFBRXNsQyxPQUFPLGdCQUFnQnZrQyxHQUFHLDJCQUEyQkEsRUFBRSxNQUFNLElBQUlRLEVBQUUsbUJBQW9Ca29CLEdBQUUsR0FBSW1wQixHQUFHLENBQUMzOUIsU0FBUyxnQkFBZ0IrTixFQUFFLFNBQVNoakIsR0FBUyxHQUFOc3dDLEdBQUd0d0MsSUFBT0EsRUFBRXVsQyxTQUFTLE1BQU0sSUFBSWhrQyxFQUFFLGtCQUFtQjJ0QixFQUFFdHRCLEdBQUVpeEMsR0FBRSxFQUFHcHBCLEdBQUUsR0FBSXFwQixHQUFHLENBQUM3OUIsU0FBUyxnQkFBZ0J3VSxHQUFFLEdBQUlzcEIsR0FBRyxDQUFDOTlCLFNBQVMsZ0JBQWdCbW5CLEVBQUUsQ0FBQyxZQUFZNFcsR0FBRyxDQUFDLzlCLFNBQVMsaUJBQWlCbW5CLEVBQUUsQ0FBQyxVQUFVLGtCQUFrQnBaLEVBQUUsU0FBU2hqQixHQUFHLElBQUk3TSxNQUFNRSxRQUFRMk0sRUFBRWl6QyxnQkFBZ0IsTUFBTSxJQUFJMXhDLEVBQUUsb0JBQ3ZoQjJsQyxHQUFHLENBQUNqeUIsU0FBUyxrQkFBa0JtbkIsRUFBRSxDQUFDLFFBQVEsV0FBV3BaLEVBQUVzdEIsR0FBR3BoQixFQUFFdHRCLEdBQUVpeEMsR0FBRSxFQUFHcHBCLEdBQUUsR0FBSTRkLEdBQUcsQ0FBQ3B5QixTQUFTLGtCQUFrQm1uQixFQUFFLENBQUMsVUFBVSxRQUFRLFdBQVdwWixFQUFFc3RCLEdBQUdwaEIsRUFBRXR0QixHQUFFaXhDLEdBQUUsR0FBSUssR0FBRyxDQUFDaitCLFNBQVMsa0NBQWtDbW5CLEVBQUUsQ0FBQyxVQUFVLHlCQUF5QnBaLEVBQUVrdUIsR0FBR2hpQixFQUFFdHRCLEdBQUU2bkIsR0FBRSxFQUFHcEQsSUFBRyxHQUFJOHNCLEdBQUcsQ0FBQ2wrQixTQUFTLDhCQUE4Qm1uQixFQUFFLENBQUMsdUJBQXVCLHlCQUF5QnBaLEVBQUVrdUIsR0FBR2hpQixFQUFFdHRCLEdBQUU2bkIsR0FBRSxFQUFHcEQsSUFBRyxHQUFJK3NCLEdBQUcsQ0FBQ24rQixTQUFTLGtCQUFrQmk5QixHQUFHLENBQUNqOUIsU0FBUyx5QkFBeUJtbkIsRUFBRSxDQUFDLGVBQWVwWixFQUFFLFNBQVNoakIsR0FBRyxHQUFHLGdCQUFnQkEsRUFBRWd5QyxZQUFZLE1BQU0sSUFBSXp3QyxFQUFFLGtCQUN6Z0IrdUMsR0FBR3R3QyxJQUFJMnlDLEVBQUUsUUFBUWxwQixHQUFFLEdBQUkwb0IsR0FBRyxDQUFDbDlCLFNBQVMseUJBQXlCbW5CLEVBQUUsQ0FBQyxVQUFVLGVBQWVwWixFQUFFLFNBQVNoakIsR0FBRyxHQUFHLGdCQUFnQkEsRUFBRWd5QyxZQUFZLE1BQU0sSUFBSXp3QyxFQUFFLG1CQUFvQm94QyxFQUFFLFFBQVFscEIsR0FBRSxHQUFJNG9CLEdBQUcsQ0FBQ3A5QixTQUFTLHlCQUF5Qm1uQixFQUFFLENBQUMsVUFBVSxXQUFXLGVBQWVwWixFQUFFLFNBQVNoakIsR0FBRyxHQUFHLDJCQUEyQkEsRUFBRWd5QyxZQUFZLE1BQU0sSUFBSXp3QyxFQUFFLG1CQUFvQm94QyxFQUFFLFFBQVFscEIsR0FBRSxHQUFJd29CLEdBQUcsQ0FBQ2g5QixTQUFTLHlCQUF5Qm1uQixFQUFFLENBQUMsZUFBZXBaLEVBQUUsU0FBU2hqQixHQUFHLEdBQUcsa0JBQWtCQSxFQUFFZ3lDLFlBQVksTUFBTSxJQUFJendDLEVBQUUsa0JBQ3BlK3VDLEdBQUd0d0MsSUFBSTJ5QyxFQUFFLFFBQVFscEIsR0FBRSxHQUFJNHBCLEdBQUcsQ0FBQzVyQixJQUFHLEVBQUd4UyxTQUFTLG1CQUFtQndXLEdBQUcsT0FBTzZuQixHQUFHLENBQUM3ckIsSUFBRyxFQUFHeFMsU0FBUyxvQkFBb0J3VyxHQUFHLE1BQU15RCxFQUFFLFNBQVNsdkIsR0FBRyxJQUFJQSxFQUFFdXpDLGlCQUFpQixNQUFNLElBQUloeUMsRUFBRSxvQkFBcUJneEMsR0FBRyxDQUFDdDlCLFNBQVMsZ0JBQWdCK04sRUFBRTh1QixHQUFHYSxFQUFFLFFBQVFscEIsR0FBRSxHQUFJZ2YsR0FBRyxDQUFDeHpCLFNBQVMsdUJBQXVCbW5CLEVBQUUsQ0FBQyxjQUFjLGtCQUFrQnVXLEVBQUUsY0FBY2xwQixHQUFFLEdBQUlzbkIsR0FBRyxDQUFDOTdCLFNBQVMsaUJBQWlCbW5CLEVBQUUsQ0FBQyxXQUFXcFosRUFBRXV0QixHQUFHc0MsR0FBRSxHQUFJdkwsR0FBRyxDQUFDcnlCLFNBQVMsaUJBQWlCbW5CLEVBQUUsQ0FBQyxXQUFXcFosRUFBRSxTQUFTaGpCLEdBQVMsR0FBTnV3QyxHQUFHdndDLElBQU9BLEVBQUV1bEMsU0FBUyxNQUFNLElBQUloa0MsRUFBRSxrQkFBbUIydEIsRUFBRXR0QixHQUNuZml4QyxHQUFFLEdBQUkvQixHQUFHLENBQUM3N0IsU0FBUyxnQkFBZ0JpYSxFQUFFdHRCLEdBQUVpeEMsR0FBRSxFQUFHcHBCLEdBQUUsR0FBSW1lLEdBQUcsQ0FBQzN5QixTQUFTLCtCQUErQm1uQixFQUFFLENBQUMsVUFBVSx1QkFBdUJwWixFQUFFLFNBQVNoakIsR0FBRyxJQUFJQSxFQUFFK25DLG9CQUFvQixNQUFNLElBQUl4bUMsRUFBRSxrQkFBa0IsSUFBSXZCLEVBQUUrbkMsb0JBQW9CL0osWUFBWSxNQUFNLElBQUl6OEIsRUFBRSx3QkFBd0IsSUFBSXZCLEVBQUUrbkMsb0JBQW9CQyxlQUFlLE1BQU0sSUFBSXptQyxFQUFFLDJCQUE0QjJ0QixFQUFFLFNBQVNsdkIsR0FBRyxJQUFJQSxFQUFFNm5DLG1CQUFtQjduQyxFQUFFNm5DLGlCQUFpQjdCLFlBQVksTUFBTSxJQUFJemtDLEVBQUUsbUJBQW9Ca29CLEdBQUUsRUFBR3BELElBQUcsR0FBSTRoQixHQUFHLENBQUNoekIsU0FBUywyQkFDbGVtbkIsRUFBRSxDQUFDLHVCQUF1QixrQkFBa0IsbUJBQW1CcFosRUFBRSxTQUFTaGpCLEdBQUcsSUFBSUEsRUFBRXdvQyxrQkFBa0J4b0MsRUFBRXdvQyxnQkFBZ0JSLGVBQWUsTUFBTSxJQUFJem1DLEVBQUUsMkJBQTRCMnRCLEVBQUUsU0FBU2x2QixHQUFHLElBQUlBLEVBQUVrb0Msb0JBQW9CbG9DLEVBQUVrb0Msa0JBQWtCbEMsWUFBWSxNQUFNLElBQUl6a0MsRUFBRSxtQkFBb0Jrb0IsR0FBRSxFQUFHcEQsSUFBRyxHQUFJcXJCLEdBQUcsQ0FBQ3o4QixTQUFTLGtCQUFrQitOLEVBQUVvdUIsR0FBR3pxQixHQUFHMHFCLEdBQUduaUIsRUFBRW9pQixHQUFHdUIsR0FBRSxFQUFHcHBCLEdBQUUsR0FBSW9vQixHQUFHLENBQUM1OEIsU0FBUyxrQkFBa0IrTixFQUFFb3VCLEdBQUd6cUIsR0FBRzBxQixHQUFHbmlCLEVBQUUsU0FBU2x2QixHQUFHLEdBQUdBLEVBQUVzZCxjQUFjLGtCQUFrQnRkLEVBQUVzZCxhQUFhLE1BQU0sSUFBSS9iLEVBQUUsa0JBQWtCLEdBQUd2QixFQUFFc2QsYUFBYSxNQUFNazBCLEdBQUd4eEMsRUFBRXNkLGNBQ25nQjFiLEdBQUU1QixJQUFJNnlDLEdBQUUsRUFBR3BwQixHQUFFLEdBQUlrb0IsR0FBRyxDQUFDMThCLFNBQVMsa0JBQWtCK04sRUFBRSxTQUFTaGpCLEdBQVMsR0FBTm94QyxHQUFHcHhDLElBQU9BLEVBQUV1akMsUUFBUSxNQUFNLElBQUloaUMsRUFBRSxtQkFBb0JvbEIsR0FBRzBxQixHQUFHbmlCLEVBQUVvaUIsR0FBR3VCLEdBQUUsR0FBSVcsR0FBRyxDQUFDditCLFNBQVMsb0JBQW9CK04sRUFBRSxTQUFTaGpCLEdBQUcsSUFBSUEsRUFBRW9ULE1BQU0sTUFBTSxJQUFJN1IsRUFBRSx5QkFBMEIydEIsRUFBRXR0QixHQUFFaXhDLEdBQUUsRUFBR3BwQixHQUFFLEdBQUkyZCxHQUFHLENBQUNueUIsU0FBUyxpQkFBaUIrTixFQUFFLFNBQVNoakIsR0FBUyxHQUFOc3dDLEdBQUd0d0MsSUFBT0EsRUFBRXVsQyxTQUFTLE1BQU0sSUFBSWhrQyxFQUFFLG1CQUFvQjJ0QixFQUFFdHRCLEdBQUVpeEMsR0FBRSxFQUFHcHBCLEdBQUUsR0FBSTZvQixHQUFHLENBQUNyOUIsU0FBUyxvQkFBb0IrTixFQUFFd3RCLEdBQUd0aEIsRUFBRXR0QixHQUFFNm5CLEdBQUUsR0FBSStkLEdBQUcsQ0FBQ3Z5QixTQUFTLG9CQUFvQitOLEVBQUUsU0FBU2hqQixHQUFHLElBQUlBLEVBQUV1akMsUUFBUSxNQUFNLElBQUloaUMsRUFBRSxrQkFBa0JpdkMsR0FBR3h3QyxJQUNqZmt2QixFQUFFLFNBQVNsdkIsR0FBRyxHQUFHQSxFQUFFOGxDLGVBQWUsTUFBTTlsQyxFQUFFd0YsS0FBSyw0QkFBNEJ5akMsR0FBR2pwQyxHQUFHNEIsR0FBRTVCLEtBQUt5bkMsR0FBRyxDQUFDNWQsR0FBRyxDQUFDNHBCLGVBQWUsa0JBQWtCeCtCLFNBQVMsb0JBQW9CK04sRUFBRXd0QixHQUFHdGhCLEVBQUV0dEIsR0FBRTZuQixHQUFFLEdBQUlpcUIsR0FBRyxDQUFDeitCLFNBQVMsa0NBQWtDbW5CLEVBQUUsQ0FBQyxVQUFVLG1CQUFtQmxOLEVBQUUsU0FBU2x2QixHQUFHLEtBQUtBLEVBQUUraUMsTUFBTS9pQyxFQUFFeVUsYUFBYSxNQUFNLElBQUlsVCxFQUFFLG1CQUFvQmtvQixHQUFFLEVBQUdwRCxJQUFHLEdBQzlVLFNBQVM0Z0IsR0FBRWpuQyxFQUFFZSxFQUFFMkcsR0FBRyxJQS9IbEIsU0FBWTFILEVBQUVlLEdBQUcsSUFBSUEsSUFBSUEsRUFBRWxPLE9BQU8sT0FBTSxFQUFHLElBQUltTixFQUFFLE9BQU0sRUFBRyxJQUFJLElBQUkwSCxFQUFFLEVBQUVBLEVBQUUzRyxFQUFFbE8sT0FBTzZVLElBQUksQ0FBQyxJQUFJM0gsRUFBRUMsRUFBRWUsRUFBRTJHLElBQUksR0FBRyxNQUFTM0gsR0FBYSxLQUFLQSxFQUFFLE9BQU0sRUFBRyxPQUFNLEVBK0g3SDR6QyxDQUFHanNDLEVBQUUzRyxFQUFFcTdCLEdBQUcsT0FBT2xOLEdBQUUsSUFBSTN0QixFQUFFLG1CQUFtQixJQUE0QlksRUFBeEJwQyxJQUFJZ0IsRUFBRXNsQixHQUFHbnFCLEVBQUU2RSxFQUFFMHFCLElBQUksT0FBUyxPQUFPd0QsR0FBRXZuQixHQUFHcFEsS0FBS3lKLEVBQUVpaUIsR0FBRzFyQixNQUFLLFdBQXFHLE9BQTFGeUosRUFBRTh4QyxJQUFJbnJDLEVBQUVrc0MsbUJBQWtCLEdBQUk3eUMsRUFBRTBvQixHQUFHenBCLEVBQUVlLFFBQUcsSUFBcUIyRyxFQUFFaTNCLFdBQVdqM0IsRUFBRWkzQixTQUFTMytCLEVBQUVlLEdBakI3TixTQUFZZixFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxFQUFFaUcsRUFBRWhDLEdBQUcsSUFBSXFpQixFQUFFMFQsR0FBR24xQixFQUFFMkcsR0FBR3N1QixHQUFFeFQsRUFBRSxNQUFNeGlCLEVBQUUwSCxHQUFHdkgsR0FBRzYxQixHQUFFeFQsRUFBRSxLQUFLMkIsSUFBS2x5QixZQUFZLElBQUlzQyxFQUFFLE9BQU93TCxFQUFFLEdBQUd4TCxFQUFFLElBQUksSUFBSTZDLEtBQUs4RSxFQUFFQSxFQUFFb0UsZUFBZWxKLElBQUk0K0IsR0FBRXhULEVBQUVwckIsRUFBRThFLEVBQUU5RSxJQUFJLE9BQU8sSUFBSW8zQixJQUFFLFNBQVM3ckIsRUFBRXFnQixHQUFHdXNCLEdBQUd2dkMsRUFBRXdpQixFQUFFdndCLFlBQVcsU0FBUzJ3QixHQUFHQSxFQUFFQSxFQUFFN3JCLE1BQU1pc0IsRUFBRTZ3QixHQUFHanhCLEVBQUV6Z0IsR0FBRyxLQUFLUSxFQUFFaWdCLEdBQUdJLEVBQUUsSUFBSXpoQixFQUFFLDZCQUE0QnhCLEVBQUV4TCxPQUFFLEVBQU8waUMsR0FBRytELEdBQUc5K0IsSUFBSThELEVBQUVBLEVBQUVBLEVBQUUrQyxFQUFFL0ssVUFpQnhFODdDLENBQUc5ekMsRUFBTEQsRUFBT0MsRUFBRXhOLEVBQXFDd04sRUFBRXdpQixFQUFyQ3poQixFQUFFa1UsU0FBUy9ZLEVBQUV3TCxFQUFFM0csRUFBRThvQixHQUFHOW9CLEVBQUUwbUIsS0FBSSxNQUE2Q253QixNQUFLLFNBQVM2SSxHQUFPLE9BQUpnQyxFQUFFaEMsRUFBU1ksRUFBRTRsQixHQUFHNWxCLEVBQUU0bEIsR0FBR2pmLEVBQUV2RixHQUFHQSxLQUFJN0ssS0FBS3lKLEVBQUVtdUIsR0FBRzUzQixNQUFLLFdBQVcsSUFBSXlKLEVBQUU0eEMsRUFBRSxPQUFPeHdDLEVBQUUsS0FBS3BCLEVBQUU0eEMsS0FBS3h3QyxHQUFHLE1BQU0sSUFBSVosRUFBRSxrQkFBa0IsT0FBT1ksRUFBRXBCLEVBQUU0eEMsTUFDM2MsU0FBU25CLEdBQUd4eEMsR0FBRyxPQUFPNnpDLEdBQUcsQ0FBQzk4QyxNQUFNLENBQUMrTyxPQUFPLENBQUMsQ0FBQ1gsUUFBUW5GLElBQUl3RixLQUFLLElBQUlMLFFBQVFuRixLQUN2RSxTQUFTNnpDLEdBQUc3ekMsRUFBRWUsR0FBRyxJQUFJMkcsR0FBRzFILEVBQUVqSixPQUFPaUosRUFBRWpKLE1BQU0rTyxRQUFROUYsRUFBRWpKLE1BQU0rTyxPQUFPLElBQUksSUFBSStiLFFBQVEsR0FBTzloQixFQUFFLENBQUNnMEMsV0FBVyxrQkFBa0JDLGlCQUFpQixzQkFBc0IsR0FBR3RzQyxFQUFFM0gsRUFBRTJILEdBQUcsSUFBSW5HLEVBQUV4QixFQUFFMkgsSUFBSSxLQUFLLE9BQU9BLEVBTTFCLElBQUksSUFBSXhMLEtBTm9Cd0wsRUFBRTFILEVBQUVqSixPQUFPaUosRUFBRWpKLE1BQU1vTyxTQUFTLEdBTXJJNGlCLEdBTndJaG9CLEVBQUUsQ0FBQ2swQyxxQkFBcUIsdUJBQXVCQyxvQkFBb0Isd0JBQXdCQyxxQkFBcUIsaUJBQWlCQyxtQkFBbUIsZ0JBQWdCQyxxQkFBcUIsaUJBQWlCQyxjQUFjLGdCQUFnQkMsaUJBQWlCLGlCQUFpQkMsY0FBYyxnQkFDemZDLGlCQUFpQixpQkFBaUJDLGFBQWEsdUJBQXVCQyx3QkFBd0Isd0JBQXdCQyxxQkFBcUIscUJBQXFCQyxzQkFBc0IscUJBQXFCQyxpQ0FBaUMsNEJBQTRCQyx5QkFBeUIsMkJBQTJCQyx3QkFBd0IsMEJBQTBCQyx3QkFBd0IsMEJBQTBCQyxlQUFlLGlCQUFpQkMsZ0JBQWdCLGlCQUFpQkMsNEJBQTRCLG9CQUM3ZkMsaUJBQWlCLHNCQUFzQkMsaUJBQWlCLHNCQUFzQkMsaUJBQWlCLGlCQUFpQkMsb0JBQW9CLHNCQUFzQkMsK0JBQStCLHdCQUF3QkMsaUJBQWlCLHFCQUFxQkMsY0FBYyxxQkFBcUJsQyxlQUFlLHFCQUFxQm1DLGlCQUFpQixtQkFBbUJDLDJCQUEyQiw2QkFBNkJDLGVBQWUsaUJBQWlCQyw0QkFBNEIsb0JBQW9CQyxjQUFjLGdCQUN4ZkMsc0JBQXNCLHdCQUF3QkMsZUFBZSxpQkFBaUJDLHFCQUFxQix1QkFBdUJDLHVCQUF1Qix5QkFBeUJDLGFBQWEsNEJBQTRCQyxxQkFBcUIsdUJBQXVCQyxxQkFBcUIsMEJBQTBCQyx3QkFBd0IscUJBQXFCQyx1QkFBdUIseUJBQXlCQyxhQUFhLDRCQUE0QkMscUJBQXFCLHVCQUF1QkMscUJBQXFCLDBCQUNyZkMsZUFBZSxpQkFBaUJDLGdCQUFnQixlQUFlQyxvQkFBb0Isc0JBQXNCQyxxQkFBcUIsdUJBQXVCQyw2QkFBNkIsMkJBQTJCQyxzQkFBc0Isd0JBQXdCQyxvQkFBb0IsNEJBQTRCQyw0QkFBNEIsOEJBQThCQyx3QkFBd0IsMEJBQTBCQyxrQkFBa0Isb0JBQW9CQyw2QkFBNkIsK0JBQzFkQyxrQkFBa0Isb0JBQW9CQyxtQkFBbUIscUJBQXFCQyxxQkFBcUIsNkJBQTZCQywrQkFBK0IsK0JBQStCQyx5QkFBeUIsOEJBQThCQywrQkFBK0IsK0JBQStCQywwQkFBMEIsNEJBQTRCQyxnQ0FBZ0Msa0NBQWtDQyxxQkFBcUIsK0JBQStCQyw2QkFBNkIsdUNBQzVmQyx5QkFBeUIsMkJBQTJCQyxpQkFBaUIsb0JBQXdCcDNDLEdBQUcsSUFBSUEsR0FBR0EsRUFBRTJHLEVBQUVvSixNQUFNLDhCQUE4QixFQUFFL1AsRUFBRWxPLE9BQU9rTyxFQUFFLFFBQUcsRUFBb0JoQixFQUFFLEdBQUcsSUFBSTJILEVBQUU4SyxRQUFRdFcsR0FBRyxPQUFPLElBQUlxRixFQUFFeEIsRUFBRTdELEdBQUc2RSxHQUFvQixPQUFoQkEsR0FBR2YsSUFBSWUsRUFBRWc2QixHQUFHLzZCLElBQVcsSUFBSXVCLEVBQUUsaUJBQWlCUixHQUFJLFNBQVNxM0MsR0FBR3A0QyxHQUFHOU4sS0FBSzZPLEVBQUVmLEVBQUU5TixLQUFLOE4sRUFBRSxLQUFLOU4sS0FBS3EyQixHQUMxVCxTQUFZdm9CLEdBQUcsT0FFTXE0QyxLQUFNQSxHQUFHLElBQUs3cEIsSUFBRSxTQUFTeHVCLEVBQUVlLEdBQUcsU0FBUzJHLElBQUkwekIsS0FBS2QsR0FBRSxZQUFGQSxDQUFlLGVBQWUsQ0FBQy8vQixTQUFTeUYsRUFBRWlxQyxVQUFVLFdBQVc3TyxLQUFLcjZCLEVBQUV0RCxNQUFNLG1CQUFtQnlnQixRQUFRbzZCLEdBQUd0Z0QsUUFBUSxHQUFHc2lDLEdBQUUsdUJBQXVCdDZCLFNBQVMsR0FBR3M2QixHQUFFLGFBQWE1eUIsUUFBUSxDQUFDLElBQUkzSCxFQUFFLGNBQWN3SixLQUFLMnVCLE1BQU0sSUFBSTN1QixLQUFLSSxVQUFVMVgsV0FBV3l3QixFQUFFM2lCLEdBQUcsV0FBV3U2QixHQUFFLGFBQWE1eUIsSUFBSTNHLEVBQUV0RCxNQUFNLG1CQUF1Q3d4QixHQUFFK2UsR0FBdEJqdUMsRUFBRXNwQixHQUFHa3ZCLEdBQUcsQ0FBQ3hPLE9BQU9ocUMsTUFBYXlCLEdBQUUsV0FBV1QsRUFBRXRELE1BQU0seUJBQXdCK0QsR0FBRSxTQUFTeEIsR0FBVyxNQUFScTRDLEdBQUcsS0FBV3I0QyxPQUY3YjFJLE1BQUssV0FBVyxPQUFPLElBQUlrM0IsSUFBRSxTQUFTenRCLEVBQUUyRyxHQUFHNHlCLEdBQUUsMEJBQUZBLEdBQStCdjFCLEtBQUssQ0FBQ3l6QyxNQUFNNThDLFNBQVNzRyxLQUFLbk0sSUFBSWlLLEVBQUVlLEVBQUUwM0Msc0JBQXNCbmUsR0FBRSw0Q0FBNENuOUIsV0FBVyxDQUFDRixNQUFNLENBQUN5N0MsU0FBUyxXQUFXcGdCLElBQUksU0FBU3BMLE1BQU0sTUFBTU4sT0FBTyxRQUFRK3JCLFdBQVUsSUFBSSxTQUFTNTRDLEdBQUcsU0FBUzdELElBQUlraUIsYUFBYWpjLEdBQUdwQixJQUFJZixFQUFFQSxFQUFFRCxFQUFFQyxFQUFFQSxFQUFFNDRDLFFBQVEsQ0FBQ0MsZ0JBQWUsSUFBSyxJQUFJMTJDLEVBQUV3VCxZQUFXLFdBQVdqTyxFQUFFakssTUFBTSxvQkFBbUJxN0MsR0FBRzlnRCxPQUFPK0gsRUFBRWc1QyxLQUFLNzhDLEdBQUc1RSxLQUFLNEUsR0FBRSxXQUFXd0wsRUFBRWpLLE1BQU0sOEJBRHBLdTdDLENBQUc5bUQsTUFFakUsSUFBSXFtRCxHQUFHLElBQUlod0IsR0FBR0MsR0FBRyxzREFBc0Q4dkIsR0FBRyxJQUFJL2MsR0FBRyxJQUFJLEtBQUt1ZCxHQUFHLElBQUl2ZCxHQUFHLElBQUksTUFBTThjLEdBQUcsS0FDOEcsU0FBU1ksR0FBR2o1QyxFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUc3TixLQUFLd3dCLEVBQUUxaUIsRUFBRTlOLEtBQUtzd0IsRUFBRXpoQixFQUFFN08sS0FBS00sRUFBRWtWLEVBQUV4VixLQUFLaU8sRUFBRUosRUFBRTdOLEtBQUtpUSxFQUFFLEtBQThCbkMsRUFBekI5TixLQUFLaU8sRUFBc0JnMkIsSUFBbkJuMkIsRUFBRWsyQixHQUFHaGtDLEtBQUtpTyxFQUFFcEssTUFBWW9NLEVBQUVuQyxFQUFFQSxFQUFFQSxFQUFFRyxFQUFFLHlCQUE0QmcyQixHQUFHLFFBQVFqa0MsS0FBS3d3QixFQUFFLEtBQUssbUJBQW1CeHdCLEtBQUs4TixFQUFFQSxFQUFFZzJCLEdBQUU5akMsS0FBSzhOLEVBQUUsU0FBUzlOLEtBQUtzd0IsR0FBR3dULEdBQUU5akMsS0FBSzhOLEVBQUUsVUFBVTlOLEtBQUtNLEdBQUdOLEtBQUs2TyxFQUFFLEtBQUs3TyxLQUFLd1YsRUFBRSxHQUNwdUIsU0FBU3d4QyxHQUFHbDVDLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEVBQUVpRyxHQUFHalEsS0FBS3V3QixFQUFFemlCLEVBQUU5TixLQUFLbUMsRUFBRTBNLEVBQUU3TyxLQUFLd1YsRUFBRUEsRUFBRXhWLEtBQUt5USxFQUFFNUMsRUFBRTdOLEtBQUs2USxFQUFFWixFQUFFalEsS0FBS00sRUFBRU4sS0FBS2lPLEVBQUVqTyxLQUFLd3dCLEVBQUUsS0FBS3h3QixLQUFLOE4sRUFBRTlELEVBQUVoSyxLQUFLc3dCLEVBQUV0d0IsS0FBS2lRLEVBQUUsS0FHdkgsU0FBU2czQyxHQUFHbjVDLEdBQUcsSUFBSSxPQUFPLE9BQWFBLEdBQUcwd0MsT0FBTzVxQixLQUFLLE1BQU0va0IsR0FBRyxNQUFNLElBQUksU0FBU3E0QyxHQUFHcDVDLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEVBQUVpRyxHQUFHalEsS0FBS21DLEVBQUUyTCxFQUFFOU4sS0FBS2lPLEVBQUVZLEVBQUU3TyxLQUFLNk8sRUFBRTJHLEVBQUV4VixLQUFLaVEsRUFBRUEsRUFBRWpRLEtBQUt3VixFQUFFM0gsR0FBRyxLQUFLN04sS0FBS00sRUFBRTBKLEdBQUcsS0FBS2hLLEtBQUt3d0IsRUFBRXh3QixLQUFLdXdCLEVBQUV2d0IsS0FBSzB3QixFQUFFLEtBQUsxd0IsS0FBS3N3QixFQUFFLEdBQUd0d0IsS0FBS3lRLEVBQUV6USxLQUFLOE4sRUFBRSxLQUN0TixTQUFTcTVDLEdBQUdyNUMsR0FBRyxJQUFJZSxFQUFFNDJCLEtBQUssT0FoQzRHLFNBQVkzM0IsR0FBRyxPQUFPaW5DLEdBQUVqbkMsRUFBRXF6QyxHQUFHLElBQUkvN0MsTUFBSyxTQUFTeUosR0FBRyxPQUFPQSxFQUFFdTRDLG1CQUFtQixNQWdDbkxDLENBQUd2NUMsR0FBRzFJLE1BQUssU0FBU29RLEdBQUcxSCxFQUFFLENBQUMsSUFBSUQsRUFBRW0yQixHQUFHbjFCLEdBQUc3RSxFQUFFNkQsRUFBRW9DLEVBQUVwQyxFQUFFQSxFQUFFQyxFQUFFLElBQUksSUFBSW1DLEVBQUUsRUFBRUEsRUFBRXVGLEVBQUU3VSxPQUFPc1AsSUFBSSxDQUFDLElBQUloQyxFQUFFdUgsRUFBRXZGLEdBQU9xZ0IsRUFBRXppQixFQUFNeEwsRUFBRTJILEVBQXVNLEdBQXJNLEdBQUdpRSxFQUFFcVMsUUFBUSx1QkFBdUJnUSxFQUFFMFQsR0FBRy8xQixHQUFHSCxHQUFHd2lCLEdBQUcsb0JBQW9CanVCLEVBQUUsUUFBUUEsR0FBRyxTQUFTQSxFQUFFaXVCLEdBQUUsRUFBRytXLEdBQUd6a0MsS0FBS3FMLEdBQUdxaUIsRUFBRUEsR0FBR3JpQixHQUFHQSxFQUFFQSxFQUFFa2lCLE1BQU0sS0FBSzl2QixLQUFLLE9BQU9pd0IsRUFBRSxJQUFLZzNCLE9BQU8sVUFBVXI1QyxFQUFFLElBQUlBLEVBQUUsS0FBSyxLQUFNckwsS0FBSzB0QixJQUFPQSxFQUFFLENBQUM5YSxHQUFFLEVBQUcsTUFBTTFILEdBQUcwSCxHQUFFLEVBQUcsSUFBSUEsRUFBRSxNQUFNLElBQUlxaEMsR0FBR3BSLFNBQzNYLFNBQVM4aEIsR0FBR3o1QyxHQUFHLE9BQUdBLEVBQUUyQyxJQUFhM0MsRUFBRTJDLEVBQUU4MkIsS0FBS25pQyxNQUFLLFdBQVcsSUFBSTBJLEVBQUV5aUIsRUFBRSxDQUFDLElBQUkxaEIsRUFBRWYsRUFBRTBILEVBQUVBLEVBQUUxSCxFQUFFeE4sRUFBRXVOLEVBQUVvNUMsR0FBR241QyxFQUFFZSxHQUFHN0UsRUFBRSxJQUFJKzhDLEdBQUdqNUMsRUFBRTNMLEVBQUUyTCxFQUFFRyxFQUFFSCxFQUFFZSxFQUFFZixFQUFFbUMsR0FBR2pHLEVBQUVpRyxFQUFFcEIsRUFBRTdFLEVBQUU2RSxFQUFFMkcsRUFBRXhMLEVBQUV3TCxFQUFFa2YsRUFBRzdtQixHQUFHLElBQUlDLEVBQUV5aUIsRUFBRXZtQixFQUFFakssV0FBVytOLEVBQUUrQyxFQUFFLElBQUlxMUMsR0FBR3A0QyxFQUFFeWlCLEdBSWxELFNBQVl6aUIsR0FBRyxJQUFJQSxFQUFFK0MsRUFBRSxNQUFNdEYsTUFBTSxvQ0FYbkIsU0FBWXVDLEVBQUVlLEdBQUdmLEVBQUV1b0IsR0FBR2p4QixNQUFLLFdBQVcwSSxFQUFFQSxFQUFFMDVDLFNBQVMsWUFBWTM0QyxFQUFFdTVCLEdBQUUsZ0RBV2JxZixDQUFHMzVDLEVBQUUrQyxHQUFFLFNBQVNoQyxHQUFHLElBQUkyRyxFQUFFLEdBQUcsR0FBRzNHLEdBQUdBLEVBQUU2NEMsVUFBVSxDQUFDLElBQUk3NUMsR0FBRSxFQUFxQixJQUFsQmdCLEVBQUV3bEMsR0FBR3hsQyxFQUFFNjRDLFdBQWVseUMsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRXdpQixFQUFFM3ZCLE9BQU82VSxJQUFJM0gsRUFBRUMsRUFBRXdpQixFQUFFOWEsR0FBRzNHLElBQUloQixFQUFnQyxPQUE5QjJILEVBQUUsSUFBS3dNLE9BQU9uVSxFQUFFLE1BQU0sUUFBZWt2QixHQUFFdm5CLEdBQW9CLE9BQWpCQSxFQUFFd00sT0FBTyxRQUFlK2EsR0FBRXZuQixNQUp2TW15QyxDQUFHNzVDLE9BQXhKQSxFQUFFMkMsRUFHL0IsU0FBU20zQyxHQUFHOTVDLEdBQW9GLE9BQWpGQSxFQUFFMGlCLElBQUkxaUIsRUFBRTRpQixFQUFFNWlCLEVBQUUwSCxFQUFFMHlCLEdBQUdwNkIsRUFBRTBILEVBQUV5eEMsR0FBR241QyxFQUFFZSxJQUFJLEtBQUtmLEVBQUUwaUIsRUFBRSxJQUFJK3JCLEdBQUd6dUMsRUFBRUcsRUFBRW1sQixFQUFHdGxCLEVBQUV4TixHQUFHd04sRUFBRTRpQixHQUFHNWlCLEVBQUVtQyxHQUFHaXRDLEdBQUdwdkMsRUFBRTBpQixFQUFFMWlCLEVBQUVtQyxJQUFXbkMsRUFBRTBpQixFQUN6RyxTQUFTcTNCLEdBQUcvNUMsRUFBRWUsRUFBRTJHLEVBQUUzSCxFQUFFN0QsRUFBRWlHLEVBQUVoQyxFQUFFcWlCLEVBQUVqdUIsRUFBRTZDLEVBQUV1TCxFQUFFcWdCLEdBQWlFLE9BQTlEaGpCLEVBQUUsSUFBSWs1QyxHQUFHbDVDLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEVBQUU4bUIsSUFBS04sRUFBRXZnQixFQUFFbkMsRUFBRUcsRUFBRUEsRUFBRUgsRUFBRXhOLEVBQUVnd0IsRUFBRXhpQixFQUFFZSxFQUFFOG1CLEdBQUd0ekIsR0FBRyxNQUFNeUwsRUFBRW1DLEVBQUUvSyxFQUFTNEksRUFBRW1wQixHQUFHeG1CLEdBQUcxUSxXQUNpTSxTQUFTK25ELEdBQUdoNkMsR0FBdUYsR0FBcEY5TixLQUFLOE4sRUFBRUEsR0FBRyx5QkFBK0Isc0NBQStDOU4sS0FBSzhOLEVBQUUsTUFBTSxJQUFJdUIsRUFBRSxpQkFBaUIseURBQXlEclAsS0FBSzZYLEtBQUssZUFBMlAsU0FBU2t3QyxHQUFHajZDLEdBQUc5TixLQUFLNk8sRUFBRWYsRUFBRTlOLEtBQUs4TixFQUFFLEdBQUc5TixLQUFLaVEsRUFBRThoQixFQUFFL3hCLEtBQUt3VixFQUFFeFYsTUFYdkUrbUQsR0FBR3prRCxVQUFVdkMsU0FBUyxXQUF5SyxPQUE5SkMsS0FBS2lRLEVBQUU2ekIsR0FBRTlqQyxLQUFLOE4sRUFBRSxJQUFJOU4sS0FBS2lRLEdBQUd3ekIsR0FBR3pqQyxLQUFLOE4sRUFBRWUsRUFBRSxLQUFLN08sS0FBSzZPLEVBQUVpMUIsR0FBRTlqQyxLQUFLOE4sRUFBRSxNQUFNOU4sS0FBSzZPLEdBQUc0MEIsR0FBR3pqQyxLQUFLOE4sRUFBRWUsRUFBRSxPQUFPN08sS0FBS3dWLEVBQUU3VSxPQUFPbWpDLEdBQUU5akMsS0FBSzhOLEVBQUUsS0FBSzlOLEtBQUt3VixFQUFFblYsS0FBSyxNQUFNb2pDLEdBQUd6akMsS0FBSzhOLEVBQUVlLEVBQUUsTUFBYTdPLEtBQUs4TixFQUFFL04sWUFDeHpCaW5ELEdBQUcxa0QsVUFBVTIwQixHQUFHLFNBQVNucEIsR0FBWSxPQUFUOU4sS0FBS3N3QixFQUFFeGlCLEVBQVM5TixNQUN4S2duRCxHQUFHMWtELFVBQVV2QyxTQUFTLFdBQVcsR0FBR0MsS0FBSzZRLEVBQUUsQ0FBQyxJQUFJL0MsRUFBRWsyQixHQUFHaGtDLEtBQUs2USxFQUFFaE4sS0FBS2lLLEVBQUVtMkIsR0FBR24yQixFQUFFbUMsRUFBRW5DLEVBQUVBLEVBQUVBLEVBQUVHLEVBQUUsK0JBQStCSCxFQUFFbTJCLEdBQUcsUUFBUWprQyxLQUFLdXdCLEVBQUUsS0FBSyxvQkFBc0YsR0FBbEV1VCxHQUFFaDJCLEVBQUUsU0FBUzlOLEtBQUttQyxHQUFHMmhDLEdBQUVoMkIsRUFBRSxVQUFVOU4sS0FBS3dWLEdBQUdzdUIsR0FBRWgyQixFQUFFLFdBQVc5TixLQUFLeVEsR0FBTXpRLEtBQUs4TixFQUFFcWtDLGdCQUFnQixDQUFDLElBQUl0akMsRUFBRTdPLEtBQUs4TixFQUFFLElBQUksSUFBSTBILEVBQUUsT0FBYXhWLEtBQUt3VixHQUFHZ3BDLE9BQU9ydEIsS0FBSyxNQUFNYixHQUFHOWEsRUFBRSxLQUFvRSxJQUFJLElBQUkzSCxLQUF2RWdCLEVBQUU4bUIsR0FBR25nQixFQUFFc3VCLEdBQUVoMkIsRUFBRSxhQUFhOU4sS0FBSzhOLEVBQUVzaUMsWUFBcUJ2aEMsRUFBRWk2QixJQUFYdHpCLEVBQUV4VixLQUFLOE4sR0FBUzhwQixJQUFtQi9vQixFQUFFaEIsR0FBR2dCLEVBQUVoQixHQUFHOU4sV0FBVzhOLEVBQUUySCxFQUFFaW9CLEdBQUc1dUIsRUFBRThtQixHQUFHOW1CLEdBQUcsSUFBSSxJQUFJN0UsRUFBRSxFQUFFQSxFQUFFNkQsRUFBRWxOLE9BQU9xSixJQUFJLENBQUMsSUFBSWlHLEVBQUVwQyxFQUFFN0QsR0FBR2lHLEtBQUtwQixVQUFVQSxFQUFFb0IsR0FBR3VGLEVBQUVvZ0IsSUFDbGZwZ0IsRUFBRW1nQixLQUFLOW1CLEVBQUUyRyxFQUFFb2dCLE1BQU0vbUIsRUFBRTJHLEVBQUVvZ0IsSUFBSXBnQixFQUFFbWdCLElBQUlELEdBQUc3bUIsSUFBSWkxQixHQUFFaDJCLEVBQUUsbUJBQW1CKzZCLEdBQUdoNkIsSUFBZ08sR0FBNU4sbUJBQW9CN08sS0FBSzhOLEVBQUVvcUIsS0FBSzFpQixFQUFFeFYsS0FBSzhOLEVBQUVvcUIsTUFBT3YzQixRQUFRbWpDLEdBQUVoMkIsRUFBRSxTQUFTMEgsRUFBRW5WLEtBQUssTUFBT0wsS0FBS3d3QixFQUFFc1QsR0FBRWgyQixFQUFFLGNBQWM5TixLQUFLd3dCLEdBQUdpVCxHQUFHMzFCLEVBQUVlLEVBQUUsZUFBZTdPLEtBQUtpTyxFQUFFNjFCLEdBQUVoMkIsRUFBRSxVQUFVOU4sS0FBS2lPLEdBQUd3MUIsR0FBRzMxQixFQUFFZSxFQUFFLFdBQVc3TyxLQUFLTSxFQUFFd2pDLEdBQUVoMkIsRUFBRSxJQUFJOU4sS0FBS00sR0FBR21qQyxHQUFHMzFCLEVBQUVlLEVBQUUsS0FBUTdPLEtBQUs2TyxFQUFFLElBQUksSUFBSVosS0FBS2pPLEtBQUs2TyxFQUFFN08sS0FBSzZPLEVBQUVULGVBQWVILEtBQUs4MUIsR0FBR2oyQixFQUFFRyxJQUFJNjFCLEdBQUVoMkIsRUFBRUcsRUFBRWpPLEtBQUs2TyxFQUFFWixJQUErSCxPQUEzSGpPLEtBQUtzd0IsRUFBRXdULEdBQUVoMkIsRUFBRSxNQUFNOU4sS0FBS3N3QixHQUFHbVQsR0FBRzMxQixFQUFFZSxFQUFFLE9BQU83TyxLQUFLaVEsRUFBRTZ6QixHQUFFaDJCLEVBQUUsTUFBTTlOLEtBQUtpUSxHQUFHd3pCLEdBQUczMUIsRUFBRWUsRUFBRSxRQUFPWixFQUFFZzVDLEdBQUdqbkQsS0FBS3dWLElBQUs3VSxRQUFRbWpDLEdBQUVoMkIsRUFBRSxLQUFLRyxFQUFFNU4sS0FBSyxNQUFheU4sRUFBRS9OLGFBR2xUcVIsRUFBRTgxQyxHQUFHNWtELFdBQVk0a0MsR0FBRyxTQUFTcDVCLEVBQUVlLEVBQUUyRyxHQUFHLElBQUkzSCxFQUFFLElBQUl3QixFQUFFLHdCQUF3QnJGLEVBQUUsSUFBSXFGLEVBQUUsMkJBQTJCWSxFQUFFalEsS0FBS2lPLEdBQUUsRUFBRyxPQUFPak8sS0FBS3F4QixLQUFLanNCLE1BQUssWUFLbFYsU0FBWTBJLEdBQUcsSUFBSWUsRUFBRSxDQUFDZ0osS0FBSyxxQkFBcUIsT0FBTzB2QyxHQUFHejVDLEdBQUcxSSxNQUFLLFdBQVcsT0FaN0UsU0FBWTBJLEVBQUVlLEdBQUcsT0FBT2YsRUFBRXVvQixHQUFHanhCLE1BQUssV0FBVyxPQUFPLElBQUlrM0IsSUFBRSxTQUFTOW1CLEdBQUcxSCxFQUFFQSxFQUFFc3FDLEtBQUt2cEMsRUFBRWdKLEtBQUtoSixFQUFFMkcsRUFBRTR5QixHQUFFLG1EQVlSNGYsQ0FBR2w2QyxFQUFFK0MsRUFBRWhDLE1BQUt6SixNQUFLLFNBQVNvUSxHQUFHLEdBQUdBLEdBQUdBLEVBQUU3VSxhQUFRLElBQXFCNlUsRUFBRSxHQUFHeXlDLGtCQUFrQixPQUFPenlDLEVBQUUsR0FBR3l5QyxrQkFBa0IsTUFBTTE4QyxZQUw0STI4QyxDQUFHajRDLEdBQUc3SyxNQUFLLFNBQVNrckIsR0FBR0EsSUFBSXhpQixHQUFHZzRCLEdBQUdoNEIsR0FBR2UsRUFBRTdFLEdBQUdpRSxHQUFFLFNBQVFxQixHQUFFLGVBQWNsSyxNQUFLLFdBQVcsSUFBSTZJLEVBQUUsT0E1SnRiLFNBQVlILEdBQUcsT0FBTyxJQUFJd3VCLElBQUUsU0FBU3p0QixHQUE4RSxPQUEzRSxTQUFTMkcsSUFBSTZzQixHQUFHLEtBQUtqOUIsTUFBSyxXQUFXLEdBQUkwSSxJQUFHQSxFQUFFcTZDLE9BQWdCLE9BQU8zeUMsSUFBaEIzRyxPQUE2QjJHLE1BNEptVTR5QyxDQUFHdDZDLE1BQUsxSSxNQUFLLFdBQVcsSUFBSTZJLEVBQUUsT0FBT28wQixHQUFHN3NCLEdBQUdwUSxNQUFLLFdBQVd5SixFQUFFaEIsVUFDMWZ1RCxFQUFFcW5CLEdBQUcsV0FBVyxJQUFJM3FCLEVBQUUwM0IsS0FBSSxPQUFPb0QsR0FBRzk2QixLQUFLbTdCLEdBQUduN0IsSUFBSXNELEVBQUVrbkIsR0FBRyxXQUFXLE9BQU0sR0FDdEVsbkIsRUFBRTRtQixHQUFHLFNBQVNscUIsRUFBRWUsRUFBRTJHLEVBQUUzSCxFQUFFN0QsRUFBRWlHLEVBQUVoQyxFQUFFcWlCLEdBQUcsSUFBSXhpQixFQUFFLE9BQU9rdkIsR0FBRSxJQUFJM3RCLEVBQUUsa0JBQWtCLEdBQUdwQixJQUFJMjZCLEtBQUssT0FBTzVvQyxLQUFLcXhCLEtBQUsvaEIsR0FBRSxTQUFTcEssR0FBRzRnQyxHQUFHaDRCLEdBQUc5RCxFQUFFOUUsTUFBSzJJLElBQUlrdkIsS0FBSS84QixLQUFLOE4sSUFBSTlOLEtBQUs4TixFQUFFcTVDLEdBQUdTLEdBQUc1bkQsUUFBUSxJQUFJcUMsRUFBRXJDLEtBQUssT0FBT0EsS0FBSzhOLEVBQUUxSSxNQUFLLFdBQVcsSUFBSUYsRUFBRTdDLEVBQUVndkIsS0FBSy9oQixHQUFFLFNBQVNtQixHQUFjLE1BQVhxMUIsR0FBR2g0QixHQUFHOUQsRUFBRXlHLEdBQVNBLEtBQVMsT0FBSjVDLElBQVczSSxLQUFJRSxNQUFLLFdBQVcrdUMsR0FBRzMrQixHQUFPdkgsR0FBeUQwM0IsR0FBaERraUIsR0FBR3hsRCxFQUFFRixFQUFFRSxFQUFFNEwsRUFBRTVMLEVBQUV3TSxFQUFFQSxFQUFFMkcsRUFBRSxLQUFLdkYsRUFBRTVOLEVBQUVtVCxPQUFFLEVBQU9uVCxFQUFFL0IsRUFBRWd3QixFQUFFanVCLEVBQUU0TixHQUFRbkMsTUFBTXdCLEdBQUUsU0FBU3BLLEdBQXFELEtBQWxELCtCQUErQkEsRUFBRW9PLE9BQU9qUixFQUFFeUwsRUFBRSxNQUFZNUksTUFDdFVrTSxFQUFFNm1CLEdBQUcsU0FBU25xQixFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUc3TixLQUFLOE4sSUFBSTlOLEtBQUs4TixFQUFFcTVDLEdBQUdTLEdBQUc1bkQsUUFBUSxJQUFJZ0ssRUFBRWhLLEtBQUssT0FBT0EsS0FBSzhOLEVBQUUxSSxNQUFLLFdBQVcrdUMsR0FBR3RsQyxHQUF5RDgyQixHQUFoRGtpQixHQUFHNzlDLEVBQUU3SCxFQUFFNkgsRUFBRWlFLEVBQUVqRSxFQUFFNkUsRUFBRWYsRUFBRWUsRUFBRTQyQixLQUFLandCLEVBQUV4TCxFQUFFd0wsT0FBRSxFQUFPeEwsRUFBRTFKLEVBQUV1TixFQUFFN0QsRUFBRWlHLE9BQVdYLEdBQUUsU0FBU1csR0FBcUQsS0FBbEQsK0JBQStCQSxFQUFFcUQsT0FBT3RKLEVBQUU4RCxFQUFFLE1BQVltQyxNQUFNbUIsRUFBRWlnQixHQUFHLFdBQVcsSUFBSXZqQixFQUFFOU4sS0FBSyxPQUFPdW5ELEdBQUd2bkQsTUFBTW9GLE1BQUssV0FBVyxPQUFPMEksRUFBRStDLEVBQUV3bEIsTUFBSy9tQixHQUFFLFdBQW9CLE1BQVR4QixFQUFFQSxFQUFFLEtBQVcsSUFBSXVCLEVBQUUsOEJBQThCK0IsRUFBRXduQixHQUFHLFdBQVcsT0FBTSxHQUU5UnhuQixFQUFFb2lCLEdBQUcsU0FBUzFsQixHQUFHOU4sS0FBS3N3QixFQUFFN3dCLEtBQUtxTyxJQUFJc0QsRUFBRWtqQixHQUFHLFNBQVN4bUIsR0FBRzJtQixFQUFHejBCLEtBQUtzd0IsR0FBRSxTQUFTemhCLEdBQUcsT0FBT0EsR0FBR2YsT0FBa09zRCxFQUFFMDJDLEdBQUd4bEQsV0FBWXdELElBQUksU0FBU2dJLEdBQUcsT0FBT2l2QixHQUFFLzhCLEtBQUs4TixFQUFFdTZDLFFBQVF2NkMsSUFBSTFJLE1BQUssU0FBU3lKLEdBQUcsT0FBT0EsR0FBR2s2QixHQUFHbDZCLE9BQU11QyxFQUFFckwsSUFBSSxTQUFTK0gsRUFBRWUsR0FBRyxPQUFPa3VCLEdBQUUvOEIsS0FBSzhOLEVBQUUwNkIsUUFBUTE2QixFQUFFKzZCLEdBQUdoNkIsTUFBTXVDLEVBQUVrM0MsRUFBRSxTQUFTeDZDLEdBQUcsT0FBT2l2QixHQUFFLzhCLEtBQUs4TixFQUFFMjZCLFdBQVczNkIsS0FBS3NELEVBQUUyZSxHQUFHLGFBQWEzZSxFQUFFNmYsR0FBRyxhQUFxRSxJQU10dkJzM0IsR0FOMHZCQyxHQUFHLEdBRTl4QixTQUFTQyxHQUFHMzZDLEVBQUVlLEVBQUUyRyxHQUFHa2dCLEdBQUc1bkIsRUFBRUEsSUFBSUEsRUFBRWUsRUFBRW9kLGlCQUFpQixVQUFVbmUsRUFBRW1DLFFBQUcsSUFBcUJuQyxFQUFFQSxFQUFFZSxLQUFLZixFQUFFQSxFQUFFZSxHQUFHLElBQUlmLEVBQUVBLEVBQUVlLEdBQUdwUCxLQUFLK1YsR0FBSSxTQUFTa3pDLEdBQUc1NkMsR0FBRzlOLEtBQUs4TixFQUFFQSxFQUFrRSxTQUFTNjZDLEdBQUc3NkMsR0FBRzlOLEtBQUt3VixFQUFFMUgsRUFBRTlOLEtBQUs2TyxHQUFFLEVBQUc3TyxLQUFLOE4sRUFBRSxHQUN2UixTQUFTODZDLEdBQUc5NkMsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHLElBQUk3RCxFQUFVaUUsRUFBRXFpQixFQUFFanVCLEVBQVo0TixFQUFFdUYsR0FBRyxHQUFTdFEsRUFBRSxLQUFLLEdBQUc0SSxFQUFFZSxFQUFFLE9BQU9tdUIsR0FBRXp4QixNQUFNLDJCQUEyQixJQUFJa0YsRUFBRTVDLEVBQUUsSUFBSSxHQUFHaWpCLEVBQUUsb0JBQXFCNEssZUFBZSxJQUFJQSxlQUFlLEtBQUssT0FBTSxJQUFLWSxJQUFFLFNBQVM1TCxFQUFFQyxHQUFHRyxHQUFHOW1CLEVBQUVxTixLQUFLMnVCLE1BQU0zdUIsS0FBS0ksU0FBU0osS0FBS0MsSUFBSSxHQUFHLEtBQUt2WCxXQUFXK3dCLEVBQUVtTCxNQUFNNHNCLFFBQVF2NEIsRUFBRTdNLFlBQVcsV0FBV2tOLEVBQUVwbEIsTUFBTSx3QkFBdUJrRixHQUNwTHZMLEVBQUUsQ0FBQzRqRCxlQUFlaDRCLEVBQUVpNEIsVUFEbUs5NkMsRUFBRSxTQUFTMmlCLEdBQUlBLEVBQUdydEIsS0FBSyt3QyxVQUFVdHFDLElBQUksUUFBUTRtQixFQUFHcnRCLEtBQUt5ZSxRQUFRa0ssYUFBYW9FLEdBQUdqdUIsRUFBRW9oQixZQUFXLFdBQVdrTixFQUFFcGxCLE1BQU0sY0FBYSxNQUFNLFNBQVNxbEIsRUFBR3J0QixLQUFLeWUsUUFBUWtLLGFBQWE3cEIsUUFDbmYsSUFBcUJ1dUIsRUFBR3J0QixLQUFLMGQsU0FBU3lQLEVBQUVFLEVBQUdydEIsS0FBSzBkLFVBQVUwUCxFQUFFcGxCLE1BQU0sb0JBQW9CMmdCLGFBQWFvRSxHQUFHcEUsYUFBYTdwQixHQUFHc3VCLEVBQUVwbEIsTUFBTSx5QkFBeUR1QyxFQUFFQSxFQUFFck8sS0FBS3lGLEdBQUc0ckIsRUFBRW1MLE1BQU1oUSxpQkFBaUIsVUFBVWhlLEdBQUdILEVBQUUwSCxFQUFFbVAsWUFBWSxDQUFDcWtDLFVBQVVuNkMsRUFBRXlsQyxRQUFRdHFDLEVBQUV6RyxLQUFLME0sR0FBRyxDQUFDNmdCLEVBQUVvTCxTQUFTdkwsRUFBRXBsQixNQUFNLDhCQUE4Qm5HLE1BQUssU0FBU3NyQixHQUFXLE9BQVJ0TixHQUFHdFYsRUFBRTVJLEdBQVV3ckIsS0FBSXBoQixHQUFFLFNBQVNvaEIsR0FBVyxNQUFSdE4sR0FBR3RWLEVBQUU1SSxHQUFTd3JCLEtBQzFZLFNBQVN0TixHQUFHdFYsRUFBRWUsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSTJHLEVBQUUzRyxFQUFFaTZDLGVBQWVqN0MsRUFBRWdCLEVBQUVrNkMsVUFBVXZ6QyxJQUFJQSxFQUFFeW1CLE1BQU13QyxvQkFBb0IsVUFBVTV3QixHQUFHMkgsRUFBRXltQixNQUFNbnBCLFNBQVMyaEIsRUFBRzNtQixFQUFFQSxHQUFFLFNBQVM5RCxHQUFHLE9BQU9BLEdBQUc2RSxNQUF1RixTQUFTbzZDLEtBQUssSUFBSUMsS0FBSyxNQUFNLElBQUk3NUMsRUFBRSwyQkFBMkJyUCxLQUFLd1YsRUFBRSxHQUFHeFYsS0FBSzhOLEVBQUUsR0FBRzlOLEtBQUs2TyxFQUFFLEVBQUU3TyxLQUFLeVEsRUFBRStmLEVBQUV2bkIsVUFBVWpKLEtBQUs2WCxLQUFLLFlBQVk3WCxLQUFLaU8sRUFBRWpPLEtBQUs2USxFQUFFN1EsS0FBS2lRLEVBQUVqUSxLQUFLd3dCLEVBQUUsS0FBS3h3QixLQUFLbUMsR0FBRSxFQUFHbkMsS0FBS3N3QixFQUFFLEtBQUssSUFBSXhpQixFQUFFOU4sS0FBSzRuQyxNQUFNcDFCLE1BQU14UyxLQUFLNlEsRUFMeVgsV0FBYyxJQUFJL0MsRUFBRTg1QixLQUFLcDFCLEtBQUssS0FBc0MsR0FBakNpZ0IsRUFBRSsxQixJQUFHLFNBQVNoekMsR0FBR0EsRUFBRTNHLEdBQUdmLElBQUllLEVBQUUyRyxPQUFTM0csRUFBRSxDQUFDLElBQUlBLEVBQUUsSUFBSWs1QyxHQUFHajZDLEdBQUcwNkMsR0FBRy9vRCxLQUFLb1AsR0FBRyxPQUFPQSxFQUtwZXM2QyxHQUFLVixHQUFHem9ELEtBQUs2USxFQUFFLGNBQWEsU0FBU2hDLEVBQUUyRyxHQUFHLE9BQU80ekMsR0FBR3Q3QyxHQUFHMUksTUFBSyxTQUFTeUksR0FBd0MsT0FBckMsRUFBRUEsRUFBRWxOLFFBQVE4eEIsRUFBRTNrQixFQUFFQSxHQUFFLFNBQVM5RCxHQUFHQSxFQUFFNkQsTUFBVyxDQUFDdzdDLGFBQWFyMkIsRUFBR25sQixFQUFFMkgsRUFBRXBLLFlBQVVxOUMsR0FBR3pvRCxLQUFLNlEsRUFBRSxRQUFPLFdBQVcsT0FBT2tzQixHQUFFLENBQUMsbUJBM0o3VSxXQUFjLElBQUlqdkIsRUFBRTBpQixFQUFFeGUsVUFBVSxPQUFPbEUsR0FBR0EsRUFBRXc3QyxjQUFjdnNCLEtBQUkzM0IsTUFBSyxXQUFXLE9BQU8wSSxFQUFFdzdDLGNBQWNDLFNBQVFua0QsTUFBSyxTQUFTeUosR0FBRyxPQUFPQSxFQUFFMjZDLFFBQVEsUUFBT2w2QyxHQUFFLFdBQVcsT0FBTyxRQUFPeXRCLEdBQUUsTUEySjRLMHNCLEdBQUtya0QsTUFBSyxTQUFTeUosSUFBTWYsRUFBRXdpQixFQUFFemhCLEtBQUVmLEVBQUVHLEVBQUUsSUFBSTA2QyxHQUFHLElBQUlELEdBQUc3NUMsSUFBSSs1QyxHQUFHOTZDLEVBQUVHLEVBQUUsT0FBTyxNQUFLLEdBQUk3SSxNQUFLLFNBQVNvUSxHQUFHQSxFQUFFLEdBQUc1RixXQUNudkJvakIsRUFBR3hkLEVBQUUsR0FBR3hULE1BQU0sZ0JBQWdCOEwsRUFBRTNMLEdBQUUsTUFBTW1OLEdBQUUsbUJBQzFDLFNBQVNvNkMsR0FBRzU3QyxHQUFHLE9BQU8sSUFBSXd1QixJQUFFLFNBQVN6dEIsRUFBRTJHLEdBQUcsSUFBSTNILEVBQUVDLEVBQUUyQyxFQUFFb0MsS0FBSyx5QkFBeUIsR0FBR2hGLEVBQUVqSixRQUFRLFNBQVNvRixHQUFHLElBQUlBLEVBQUVpMkIsaUJBQWlCLE1BQU1od0IsSUFBSXVGLEVBQUVqSyxNQUFNdkIsRUFBRVIsT0FBTzNFLFNBQVNnSixFQUFFM0UsZ0JBQWdCLFNBQVNjLEdBQUdBLEVBQUVBLEVBQUVSLE9BQU83RSxPQUFPLElBQUlxRixFQUFFOUIsa0JBQWtCLHVCQUF1QixDQUFDeWhELFFBQVEsY0FBYyxNQUFNMTVDLEdBQUd1RixFQUFFdkYsS0FBS3BDLEVBQUVuSixVQUFVLFNBQVNzRixJQUFHQSxFQUFFQSxFQUFFUixPQUFPN0UsUUFBU2lsRCxpQkFBaUJ6MUMsU0FBUyx3QkFBd0J0RixFQUFFN0UsR0FEM1UsU0FBWThELEdBQUcsT0FBTyxJQUFJd3VCLElBQUUsU0FBU3p0QixFQUFFMkcsR0FBRyxJQUFJM0gsRUFBRUMsRUFBRTJDLEVBQUVzQyxlQUFlLDBCQUEwQmxGLEVBQUVuSixVQUFVLFdBQVdtSyxLQUFLaEIsRUFBRWpKLFFBQVEsU0FBU29GLEdBQUd3TCxFQUFFakssTUFBTXZCLEVBQUVSLE9BQU8zRSxZQUM4S2dsRCxDQUFHLzdDLEdBQUcxSSxNQUFLLFdBQVcsT0FBT3NrRCxHQUFHNTdDLE1BQUsxSSxNQUFLLFNBQVM2SyxHQUFHcEIsRUFBRW9CLE1BQUtYLEdBQUUsU0FBU1csR0FBR3VGLEVBQUV2RixVQUM1ZCxTQUFTNjVDLEdBQUdoOEMsR0FBb0IsT0FBakJBLEVBQUV4TixJQUFJd04sRUFBRXhOLEVBQUVvcEQsR0FBRzU3QyxJQUFXQSxFQUFFeE4sRUFBRSxTQUFTeXBELEdBQUdqOEMsRUFBRWUsR0FBK0ksSUFBSWhCLEVBQUUsRUFBRSxPQUFPLElBQUl5dUIsSUFBL0osU0FBUzltQixFQUFFeEwsRUFBRWlHLEdBQUc2NUMsR0FBR2g4QyxHQUFHMUksS0FBS3lKLEdBQUd6SixLQUFLNEUsR0FBR3NGLEdBQUUsU0FBU3JCLEdBQUcsS0FBRyxJQUFJSixHQUFZLE9BQU9pOEMsR0FBR2g4QyxHQUFHMUksTUFBSyxTQUFTa3JCLEdBQXdCLE9BQXJCQSxFQUFFeGQsUUFBUWhGLEVBQUV4TixPQUFFLEVBQWNrVixFQUFFeEwsRUFBRWlHLE1BQXhFQSxFQUFFaEMsU0FBcUcsU0FBU2k3QyxLQUFLLElBQUksUUFBUTE0QixFQUFFdm5CLFVBQVUsTUFBTTZFLEdBQUcsT0FBTSxHQUFJLFNBQVNrOEMsR0FBR2w4QyxHQUFHLE9BQU9BLEVBQUU5RixZQUFZLHdCQUF3QixTQUFTaWlELEdBQUduOEMsRUFBRWUsR0FBRyxPQUFPZixFQUFFdEcsWUFBWSxDQUFDLHdCQUF3QnFILEVBQUUsWUFBWSxZQUNsYSxTQUFTcTdDLEdBQUdwOEMsR0FBRyxPQUFPLElBQUl3dUIsSUFBRSxTQUFTenRCLEVBQUUyRyxHQUFHMUgsRUFBRXBKLFVBQVUsU0FBU21KLEdBQUdBLEdBQUdBLEVBQUVyRSxPQUFPcUYsRUFBRWhCLEVBQUVyRSxPQUFPN0UsUUFBUWtLLEtBQUtmLEVBQUVsSixRQUFRLFNBQVNpSixHQUFHMkgsRUFBRTNILEVBQUVyRSxPQUFPM0UsV0FDdkksU0FBU3NsRCxHQUFHcjhDLEVBQUVlLEdBQUcsT0FBT2YsRUFBRUcsR0FBR0gsRUFBRXdpQixHQWhLdUwsV0FBYyxJQUFJeGlCLEVBQUUwaUIsRUFBRXhlLFVBQVUsT0FBT2xFLEdBQUdBLEVBQUV3N0MsZUFBZXg3QyxFQUFFdzdDLGNBQWNjLFlBQVksS0FnSzNRQyxLQUFPdjhDLEVBQUV3aUIsRUFBRXM0QixHQUFHOTZDLEVBQUVHLEVBQUUsYUFBYSxDQUFDN0MsSUFBSXlELEdBQUdmLEVBQUUzTCxHQUFHaUQsTUFBSyxlQUFja0ssR0FBRSxlQUFjeXRCLEtBQ2pILFNBQVNxc0IsR0FBR3Q3QyxHQUFHLE9BQU9nOEMsR0FBR2g4QyxHQUFHMUksTUFBSyxTQUFTeUosR0FBRyxJQUFJMkcsRUFBRXcwQyxHQUFHQyxHQUFHcDdDLEdBQUUsSUFBSyxPQUFPMkcsRUFBRWpOLE9BQU8yaEQsR0FBRzEwQyxFQUFFak4sVUFBVSxJQUFJK3pCLElBQUUsU0FBU3p1QixFQUFFN0QsR0FBRyxJQUFJaUcsRUFBRSxHQUFHaEMsRUFBRXVILEVBQUU4MEMsYUFBYXI4QyxFQUFFdkosVUFBVSxTQUFTNHJCLElBQUlBLEVBQUVBLEVBQUU5bUIsT0FBTzdFLFNBQVNzTCxFQUFFeFEsS0FBSzZ3QixFQUFFdHVCLE9BQU9zdUIsRUFBWSxZQUFLemlCLEVBQUVvQyxJQUFJaEMsRUFBRXJKLFFBQVEsU0FBUzByQixHQUFHdG1CLEVBQUVzbUIsRUFBRTltQixPQUFPM0UsY0FBWU8sTUFBSyxTQUFTeUosR0FBRyxJQUFJMkcsRUFBRSxHQUFHM0gsRUFBRSxHQUFHLEdBQUcsR0FBR0MsRUFBRWUsRUFBRSxDQUFDLElBQUloQixFQUFFLEVBQUVBLEVBQUVnQixFQUFFbE8sT0FBT2tOLElBQUkySCxFQUFFM0csRUFBRWhCLEdBQUcwOEMsV0FBVzE3QyxFQUFFaEIsR0FBRzdMLE1BQU02TCxFQUFFKzNCLEdBQUc5M0IsRUFBRTBILEVBQUVBLEdBQUcxSCxFQUFFMEgsRUFBRUEsRUFBRSxPQUFPM0gsS0FDekcsU0FBUzI4QyxHQUFHMThDLEdBQUdBLEVBQUUwaUIsR0FBRzFpQixFQUFFMGlCLEVBQUV5TixPQUFPLGNBQWNud0IsRUFBRW1DLElBQUlpYyxhQUFhcGUsRUFBRW1DLEdBQUduQyxFQUFFbUMsRUFBRSxNQUFPLFNBQVN3NkMsR0FBRzM4QyxHQUFHLElBQUllLEVBQUU3TyxLQUFLd1YsRUFBRSxLQUFLeFYsS0FBSzhOLEVBQUUsR0FBRzlOLEtBQUs2WCxLQUFLLFlBQVk3WCxLQUFLd1YsRUFBRTFILEVBQUU5TixLQUFLNk8sRUFBRWt1QixLQUFJMzNCLE1BQUssV0FBVyxHQUFHOGpELEtBQUssQ0FBQyxJQUFJcjdDLEVBQUUwNkIsS0FBS3YrQixFQUFFLFFBQVE2RCxFQUF1QixPQUFyQjA2QyxLQUFLQSxHQUFHLElBQUlVLEtBQUl6ekMsRUFBRSt5QyxJQUFZeGlELElBQUlpRSxFQUFFNkQsR0FBR3pJLE1BQUssV0FBVyxPQUFPb1EsRUFBRTFQLElBQUlrRSxNQUFLNUUsTUFBSyxTQUFTNkssR0FBRyxHQUFHQSxJQUFJcEMsRUFBRSxNQUFNdEMsTUFBTSw0QkFBNEIsT0FBT2lLLEVBQUU4eUMsRUFBRXQrQyxNQUFLNUUsTUFBSyxXQUFXLE9BQU9vUSxLQUFJbEcsR0FBRSxXQUFXLE9BQU9ULEVBQUUyRyxLQUFJLE9BQU8zRyxFQUFFMkcsS0FBSXBRLE1BQUssU0FBU3lJLEdBQTZELE9BQTFEZ0IsRUFBRWdKLEtBQUtoSyxFQUFFZ0ssS0FBS2hLLEVBQUVraUIsSUFBRyxTQUFTL2xCLEdBQUd5b0IsRUFBRTVqQixFQUFFZixHQUFFLFNBQVNtQyxHQUFHQSxFQUFFakcsU0FBYzZELEtBQ2prQixTQUFTNjhDLEtBQUsxcUQsS0FBSzhOLEVBQUUsR0FBRzlOLEtBQUs2WCxLQUFLLFdBQThMLFNBQVM4eUMsS0FBSyxJQUM3YyxXQUFjLElBQUk3OEMsRUFBRSxRQUFRZzZCLEtBQTRFLEtBQXZFaDZCLEVBQUU4OEMsTUFBTTk4QyxHQUFHLGtCQUF3QiwrQkFBMEMsT0FBTSxFQUFHLElBQUksT0FBT0EsRUFBRTA2QixRQUFRLFFBQVEsS0FBSzE2QixFQUFFMjZCLFdBQVcsVUFBUyxFQUFHLE1BQU01NUIsR0FBRyxPQUFNLEdBRGdSZzhDLEdBQUssQ0FBQyxHQUFHLFFBQVEvaUIsS0FBSyxNQUFNLElBQUl6NEIsRUFBRSxpQkFBaUIseURBQXlELE1BQU0sSUFBSUEsRUFBRSwyQkFBNEJyUCxLQUFLOE4sRUFBRTg4QyxNQUFNLDhCQUFvQzVxRCxLQUFLNlgsS0FBSyxlQUFlLFNBQVMreUMsS0FBSyxJQUFJLElBQUk5OEMsRUFBRTBpQixFQUFFOFgsYUFBYXo1QixFQUFFMDVCLEtBQTJDLE9BQXRDejZCLElBQUlBLEVBQUUwNkIsUUFBUTM1QixFQUFFLEtBQUtmLEVBQUUyNkIsV0FBVzU1QixJQUFXZixFQUFFLE1BQU0wSCxHQUFHLE9BQU8sTUFFbnJCLFNBQVNzMUMsS0FBSzlxRCxLQUFLNlgsS0FBSyxjQUEwSixTQUFTa3pDLEtBQUssSUFDelMsV0FBYyxJQUFJajlDLEVBQUUsUUFBUWc2QixLQUE4RSxLQUF6RWg2QixFQUFFazlDLE1BQU1sOUMsR0FBRyxrQkFBd0IsaUNBQTRDLE9BQU0sRUFBRyxJQUFJLE9BQU9BLEVBQUUwNkIsUUFBUSxRQUFRLEtBQUsxNkIsRUFBRTI2QixXQUFXLFVBQVMsRUFBRyxNQUFNNTVCLEdBQUcsT0FBTSxHQUQwR284QyxHQUFLLENBQUMsR0FBRyxRQUFRbmpCLEtBQUssTUFBTSxJQUFJejRCLEVBQUUsaUJBQWlCLDJEQUEyRCxNQUFNLElBQUlBLEVBQUUsMkJBQTRCclAsS0FBSzhOLEVBQUVrOUMsTUFBTSxnQ0FBc0NockQsS0FBSzZYLEtBQUssaUJBQWlCLFNBQVNtekMsS0FBSyxJQUFJLElBQUlsOUMsRUFBRTBpQixFQUFFMDZCLGVBQWVyOEMsRUFBRTA1QixLQUEyQyxPQUF0Q3o2QixJQUFJQSxFQUFFMDZCLFFBQVEzNUIsRUFBRSxLQUFLZixFQUFFMjZCLFdBQVc1NUIsSUFBV2YsRUFBRSxNQUFNMEgsR0FBRyxPQUFPLE1BRTltQixTQUFTMjFDLEtBQUssSUFBSXI5QyxFQUFFLEdBQUdBLEVBQUVzOUMsUUFBUUMsR0FBR3Y5QyxFQUFFdzlDLEtBQUtDLEdBQUd6OUMsRUFBRTA5QyxZQUFZQyxHQUFHMzlDLEVBQUU0OUMsT0FBT0MsR0FBRzNyRCxLQUFLOE4sRUFBRUEsRUFBRWc2QixNQWhCdEdpZ0IsR0FBR3psRCxVQUFVa1QsRUFBRSxTQUFTMUgsR0FBRyxJQUFJZSxFQUFFZixFQUFFdkssS0FBS3lsRCxVQUFVeHpDLEVBQUUxSCxFQUFFdkssS0FBSyt3QyxRQUFRem1DLEVBQUU3TixLQUFLOE4sRUFBRWUsR0FBRyxHQUFHaEIsR0FBRyxFQUFFQSxFQUFFbE4sT0FBTyxDQUFDbU4sRUFBRTg5QyxNQUFNLEdBQUdqbkMsWUFBWSxDQUFDM0MsT0FBTyxNQUFNc3lCLFFBQVE5K0IsRUFBRXd6QyxVQUFVbjZDLEVBQUVvUyxTQUFTLE9BQU8sSUFBSWpYLEVBQUUsR0FBR3lvQixFQUFFNWtCLEdBQUUsU0FBU29DLEdBQUdqRyxFQUFFdkssS0FBS3M5QixLQUFJMzNCLE1BQUssV0FBVyxPQUFPNkssRUFBRW5DLEVBQUVrdUIsT0FBT2x1QixFQUFFdkssS0FBS0EsYUFBVzQ1QixHQUFHbnpCLEdBQUc1RSxNQUFLLFNBQVM2SyxHQUFHLElBQUloQyxFQUFFLEdBQUd3a0IsRUFBRXhpQixHQUFFLFNBQVNxZ0IsR0FBR3JpQixFQUFFeE8sS0FBSyxDQUFDbVEsVUFBVTBnQixFQUFFOE0sR0FBR3A3QixNQUFNc3VCLEVBQUV0dUIsTUFBTTJ0QixPQUFPVyxFQUFFWCxPQUFPVyxFQUFFWCxPQUFPMWMsYUFBUSxPQUFXd2YsRUFBRXhrQixHQUFFLFNBQVNxaUIsR0FBRyxJQUFJLElBQUlqdUIsS0FBS2l1QixPQUFFLElBQXFCQSxFQUFFanVCLFdBQVdpdUIsRUFBRWp1QixNQUFLeUwsRUFBRTg5QyxNQUFNLEdBQUdqbkMsWUFBWSxDQUFDM0MsT0FBTyxPQUFPc3lCLFFBQVE5K0IsRUFDM2Z3ekMsVUFBVW42QyxFQUFFb1MsU0FBU2hULFNBQXlKeTZDLEdBQUdwbUQsVUFBVXFpQixZQUFZLFNBQVM3VyxFQUFFZSxHQUFHN08sS0FBSzhOLEVBQUU2VyxZQUFZN1csRUFBRWUsSUFHOUU4NUMsR0FBR3JtRCxVQUFVd1EsTUFBTSxXQUFXLEtBQUssRUFBRTlTLEtBQUs4TixFQUFFbk4sUUFBUXlpQixHQUFHcGpCLEtBQUtBLEtBQUs4TixFQUFFLElBQUk5TixLQUFLNk8sR0FBRSxJQUl6RnVDLEVBQUU2M0MsR0FBRzNtRCxXQUFZeUQsSUFBSSxTQUFTK0gsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRXhWLEtBQUs2TixHQUFFLEVBQUcsT0FBT2s4QyxHQUFHL3BELE1BQUssU0FBU2dLLEdBQWtCLE9BQU9rZ0QsSUFBdEJsZ0QsRUFBRWdnRCxHQUFHQyxHQUFHamdELEdBQUUsS0FBaUJsRSxJQUFJZ0ksT0FBTTFJLE1BQUssU0FBUzRFLEdBQUcsT0FBTysvQyxHQUFHdjBDLEdBQUUsU0FBU3ZGLEdBQWtCLEdBQWZBLEVBQUUrNUMsR0FBR0MsR0FBR2g2QyxHQUFFLElBQVFqRyxFQUFFLE9BQU9BLEVBQUVoSSxNQUFNNk0sRUFBRXE3QyxHQUFHajZDLEVBQUUwVixJQUFJM2IsSUFBSXdMLEVBQUUzRyxJQUFJaEIsR0FBRSxFQUFHLElBQUlJLEVBQUUsR0FBMkIsT0FBeEJBLEVBQUVzOEMsVUFBVXo4QyxFQUFFRyxFQUFFak0sTUFBTTZNLEVBQVNxN0MsR0FBR2o2QyxFQUFFK1ksSUFBSS9hLFVBQVE3SSxNQUFLLFdBQW9CLE9BQVRvUSxFQUFFQSxFQUFFMUgsR0FBR2UsRUFBU3M3QyxHQUFHMzBDLEVBQUUxSCxNQUFLeWpCLElBQUcsV0FBVzFqQixHQUFHMkgsRUFBRTNHLFFBQzNXdUMsRUFBRXRMLElBQUksU0FBU2dJLEdBQUcsT0FBT2k4QyxHQUFHL3BELE1BQUssU0FBUzZPLEdBQUcsT0FBT3E3QyxHQUFHRixHQUFHQyxHQUFHcDdDLEdBQUUsSUFBSy9JLElBQUlnSSxPQUFNMUksTUFBSyxTQUFTeUosR0FBRyxPQUFPQSxHQUFHQSxFQUFFN00sVUFBU29QLEVBQUVrM0MsRUFBRSxTQUFTeDZDLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUt3VixHQUFFLEVBQUcsT0FBT3UwQyxHQUFHL3BELE1BQUssU0FBUzZOLEdBQWMsT0FBWDJILEdBQUUsRUFBRzNHLEVBQUVBLElBQVdxN0MsR0FBR0YsR0FBR0MsR0FBR3A4QyxHQUFFLElBQWEsT0FBRUMsT0FBTTFJLE1BQUssV0FBeUIsY0FBUHlKLEVBQUUyRyxFQUFFMUgsR0FBVXE4QyxHQUFHdDdDLEVBQUVmLE1BQUt5akIsSUFBRyxXQUFXL2IsR0FBRzNHLEVBQUVBLFFBQ2Z1QyxFQUFFMmUsR0FBRyxTQUFTamlCLEdBQUcsR0FBRzlOLEtBQUs4TixFQUFFbk4sUUFDblYsU0FBWW1OLEdBQXFMMDhDLEdBQUcxOEMsR0FBckwsU0FBU2UsSUFBSWYsRUFBRW1DLEVBQUV3VCxZQUFXLFdBQVczVixFQUFFMGlCLEVBQUU0NEIsR0FBR3Q3QyxHQUFHMUksTUFBSyxTQUFTb1EsR0FBRyxFQUFFQSxFQUFFN1UsUUFBUTh4QixFQUFFM2tCLEVBQUVBLEdBQUUsU0FBU0QsR0FBR0EsRUFBRTJILFNBQU9wUSxNQUFLLFdBQVd5SixPQUFNUyxHQUFFLFNBQVNrRyxHQUFHLGNBQWNBLEVBQUV2QyxTQUFTcEUsU0FBTyxLQUFXQSxHQURvSmc5QyxDQUFHN3JELE1BQU1BLEtBQUs4TixFQUFFck8sS0FBS3FPLElBQ2pjc0QsRUFBRTZmLEdBQUcsU0FBU25qQixHQUFHMm1CLEVBQUd6MEIsS0FBSzhOLEdBQUUsU0FBU2UsR0FBRyxPQUFPQSxHQUFHZixLQUFJLEdBQUc5TixLQUFLOE4sRUFBRW5OLFFBQVE2cEQsR0FBR3hxRCxRQUEwdEJvUixFQUFFcTVDLEdBQUdub0QsV0FBWXdELElBQUksU0FBU2dJLEdBQUcsT0FBTzlOLEtBQUs2TyxFQUFFekosTUFBSyxTQUFTeUosR0FBRyxPQUFPQSxFQUFFL0ksSUFBSWdJLE9BQ2ozQnNELEVBQUVyTCxJQUFJLFNBQVMrSCxFQUFFZSxHQUFHLE9BQU83TyxLQUFLNk8sRUFBRXpKLE1BQUssU0FBU29RLEdBQUcsT0FBT0EsRUFBRXpQLElBQUkrSCxFQUFFZSxPQUFNdUMsRUFBRWszQyxFQUFFLFNBQVN4NkMsR0FBRyxPQUFPOU4sS0FBSzZPLEVBQUV6SixNQUFLLFNBQVN5SixHQUFHLE9BQU9BLEVBQUV5NUMsRUFBRXg2QyxPQUFNc0QsRUFBRTJlLEdBQUcsU0FBU2ppQixHQUFHOU4sS0FBSzhOLEVBQUVyTyxLQUFLcU8sSUFBSXNELEVBQUU2ZixHQUFHLFNBQVNuakIsR0FBRzJtQixFQUFHejBCLEtBQUs4TixHQUFFLFNBQVNlLEdBQUcsT0FBT0EsR0FBR2YsT0FBa0RzRCxFQUFFczVDLEdBQUdwb0QsV0FBWXdELElBQUksU0FBU2dJLEdBQUcsT0FBT2l2QixHQUFFLzhCLEtBQUs4TixFQUFFQSxLQUFLc0QsRUFBRXJMLElBQUksU0FBUytILEVBQUVlLEdBQWUsT0FBWjdPLEtBQUs4TixFQUFFQSxHQUFHZSxFQUFTa3VCLE1BQUszckIsRUFBRWszQyxFQUFFLFNBQVN4NkMsR0FBb0IsY0FBVjlOLEtBQUs4TixFQUFFQSxHQUFVaXZCLE1BQUszckIsRUFBRTJlLEdBQUcsYUFBYTNlLEVBQUU2ZixHQUFHLGNBQzdPN2YsRUFBRXU1QyxHQUFHcm9ELFdBQVl3RCxJQUFJLFNBQVNnSSxHQUFHLElBQUllLEVBQUU3TyxLQUFLLE9BQU8rOEIsS0FBSTMzQixNQUFLLFdBQWdDLE9BQU8yakMsR0FBdEJsNkIsRUFBRWYsRUFBRXU2QyxRQUFRdjZDLFFBQW1Cc0QsRUFBRXJMLElBQUksU0FBUytILEVBQUVlLEdBQUcsSUFBSTJHLEVBQUV4VixLQUFLLE9BQU8rOEIsS0FBSTMzQixNQUFLLFdBQVcsSUFBSXlJLEVBQUVnN0IsR0FBR2g2QixHQUFHLE9BQU9oQixFQUFFMkgsRUFBRTh5QyxFQUFFeDZDLEdBQUcwSCxFQUFFMUgsRUFBRTA2QixRQUFRMTZCLEVBQUVELE9BQU11RCxFQUFFazNDLEVBQUUsU0FBU3g2QyxHQUFHLElBQUllLEVBQUU3TyxLQUFLLE9BQU8rOEIsS0FBSTMzQixNQUFLLFdBQVd5SixFQUFFZixFQUFFMjZCLFdBQVczNkIsT0FDaGVzRCxFQUFFMmUsR0FBRyxTQUFTamlCLEdBQUcwaUIsRUFBRTVtQixRQUFRbzNCLEdBQUd4USxFQUFFNW1CLE9BQU8sVUFBVWtFLElBQUlzRCxFQUFFNmYsR0FBRyxTQUFTbmpCLEdBQUcwaUIsRUFBRTVtQixRQUFRKzNCLEdBQUVuUixFQUFFNW1CLE9BQU8sVUFBVWtFLEtBQTBDc0QsRUFBRTA1QyxHQUFHeG9ELFdBQVl3RCxJQUFJLFdBQVcsT0FBT2kzQixHQUFFLE9BQU8zckIsRUFBRXJMLElBQUksV0FBVyxPQUFPZzNCLE1BQUszckIsRUFBRWszQyxFQUFFLFdBQVcsT0FBT3ZyQixNQUFLM3JCLEVBQUUyZSxHQUFHLGFBQWEzZSxFQUFFNmYsR0FBRyxjQUN2RTdmLEVBQUUyNUMsR0FBR3pvRCxXQUFZd0QsSUFBSSxTQUFTZ0ksR0FBRyxJQUFJZSxFQUFFN08sS0FBSyxPQUFPKzhCLEtBQUkzM0IsTUFBSyxXQUFnQyxPQUFPMmpDLEdBQXRCbDZCLEVBQUVmLEVBQUV1NkMsUUFBUXY2QyxRQUFtQnNELEVBQUVyTCxJQUFJLFNBQVMrSCxFQUFFZSxHQUFHLElBQUkyRyxFQUFFeFYsS0FBSyxPQUFPKzhCLEtBQUkzM0IsTUFBSyxXQUFXLElBQUl5SSxFQUFFZzdCLEdBQUdoNkIsR0FBRyxPQUFPaEIsRUFBRTJILEVBQUU4eUMsRUFBRXg2QyxHQUFHMEgsRUFBRTFILEVBQUUwNkIsUUFBUTE2QixFQUFFRCxPQUFNdUQsRUFBRWszQyxFQUFFLFNBQVN4NkMsR0FBRyxJQUFJZSxFQUFFN08sS0FBSyxPQUFPKzhCLEtBQUkzM0IsTUFBSyxXQUFXeUosRUFBRWYsRUFBRTI2QixXQUFXMzZCLE9BQU1zRCxFQUFFMmUsR0FBRyxhQUM3ZTNlLEVBQUU2ZixHQUFHLGFBQXVHLElBQUk2NkIsR0FDK01DLEdBRDVNVixHQUFHLENBQUMvdUIsRUFBRXF1QixHQUFHNzFCLEdBQUdpMkIsSUFBSVEsR0FBRyxDQUFDanZCLEVBQUVxdUIsR0FBRzcxQixHQUFHaTJCLElBQUlVLEdBQUcsQ0FBQ252QixFQUFFd3JCLEdBQUdoekIsR0FBR2cyQixJQUFJYSxHQUFHLENBQUNydkIsRUFBRXF1QixHQUFHNzFCLEdBQUdnMkIsSUFBUWtCLEdBQUcsQ0FBQzVxQixHQUFHLFFBQVE2cUIsS0FBSyxPQUFPNXFCLEdBQUcsV0FDck4sU0FBUzZxQixLQUFLLElBQUlwK0MsSUFBR203QixHQUFHekQsUUFBTW1DLE1BQVc5NEIsRUFBRSs1QixLQUFLcHpCLEVBQUU2eUIsS0FBS3JvQyxLQUFLeVEsRUFBRTNDLEVBQUU5TixLQUFLc3dCLEVBQUV6aEIsRUFBRTdPLEtBQUt3d0IsRUFBRWhiLEVBQUV4VixLQUFLOE4sRUFBRSxHQUFHZytDLEtBQUtBLEdBQUcsSUFBSVgsSUFBSXI5QyxFQUFFZytDLEdBQUcsSUFBSTlyRCxLQUFLaU8sR0FBR3MzQixNQUFNb0UsT0FBT25aLEVBQUV2bkIsVUFBVSxJQUFJNkUsRUFBRUEsRUFBRXd1QixFQUFFLElBQUltdUIsR0FBRzdpQixLQUFLLElBQUk4aUIsR0FBRyxJQUFJNThDLEVBQUVBLEVBQUV3dUIsR0FBRyxNQUFNenVCLEdBQUc3TixLQUFLaU8sRUFBRSxJQUFJeThDLEdBQUcxcUQsS0FBS3N3QixHQUFFLEVBQUcsSUFBSXR3QixLQUFLTSxFQUFFLElBQUl3TixFQUFFQSxFQUFFZ25CLEdBQUcsTUFBTWpuQixHQUFHN04sS0FBS00sRUFBRSxJQUFJb3FELEdBQUcxcUQsS0FBSzZRLEVBQUUsSUFBSTY1QyxHQUFHMXFELEtBQUtpUSxFQUFFOGhCLEVBQUUveEIsS0FBSzA0QixHQUFHMTRCLE1BQU1BLEtBQUs2TyxFQUFFLEdBQVUsU0FBU3M5QyxLQUFxQixPQUFoQkosS0FBS0EsR0FBRyxJQUFJRyxJQUFXSCxHQUFHLFNBQVNLLEdBQUd0K0MsRUFBRWUsR0FBRyxPQUFPQSxHQUFHLElBQUssVUFBVSxPQUFPZixFQUFFeE4sRUFBRSxJQUFLLE9BQU8sT0FBT3dOLEVBQUUrQyxFQUFFLFFBQVEsT0FBTy9DLEVBQUVHLEdBQ3ZjLFNBQVNvK0MsR0FBR3YrQyxFQUFFZSxHQUFHLE1BQU0sWUFBWWYsRUFBRXBMLE1BQU1tTSxFQUFFLElBQUlBLEVBQUUsSUFBeVUsU0FBU3k5QyxHQUFHeCtDLEVBQUVlLEVBQUUyRyxHQUF5QyxPQUF0Q0EsRUFBRTYyQyxHQUFHeDlDLEVBQUUyRyxHQUFHLFNBQVMzRyxFQUFFeXRCLElBQUl4dUIsRUFBRWUsRUFBRTJHLEdBQUcsTUFBYTQyQyxHQUFHdCtDLEVBQUVlLEVBQUV5dEIsR0FBR2dzQixFQUFFOXlDLEdBRTFELFNBQVMrMkMsR0FBR3orQyxHQUFHQSxFQUFFMEgsSUFBSWczQyxjQUFjMStDLEVBQUUwSCxHQUFHMUgsRUFBRTBILEVBQUUsTUFFN0osU0FBU2kzQyxHQUFHMytDLEdBQUc5TixLQUFLOE4sRUFBRUEsRUFBRTlOLEtBQUs2TyxFQUFFczlDLE1BSkwvNkMsRUFBRTg2QyxHQUFHNXBELFdBQVl3RCxJQUFJLFNBQVNnSSxFQUFFZSxHQUFHLE9BQU91OUMsR0FBR3BzRCxLQUFLOE4sRUFBRXd1QixHQUFHeDJCLElBQUl1bUQsR0FBR3YrQyxFQUFFZSxLQUN2WHVDLEVBQUVyTCxJQUFJLFNBQVMrSCxFQUFFZSxFQUFFMkcsR0FBRyxJQUFJM0gsRUFBRXcrQyxHQUFHditDLEVBQUUwSCxHQUFHeEwsRUFBRWhLLEtBQUtpUSxFQUFFbThDLEdBQUdwc0QsS0FBSzhOLEVBQUV3dUIsR0FBRyxPQUFPcnNCLEVBQUVsSyxJQUFJOEgsRUFBRWdCLEdBQUd6SixNQUFLLFdBQVcsT0FBTzZLLEVBQUVuSyxJQUFJK0gsTUFBS3pJLE1BQUssU0FBUzZJLEdBQUcsU0FBU0gsRUFBRXd1QixJQUFJdHlCLEVBQUU2RSxFQUFFaEIsR0FBR0ksT0FBTW1ELEVBQUVvd0IsWUFBWSxTQUFTMXpCLEVBQUVlLEVBQUUyRyxHQUFHMUgsRUFBRXUrQyxHQUFHditDLEVBQUVlLEdBQUc3TyxLQUFLd3dCLElBQUl4d0IsS0FBSzZPLEVBQUVmLEdBQUcwaUIsRUFBRThYLGFBQWErZixRQUFRdjZDLElBQUk0bkIsR0FBRzExQixLQUFLOE4sS0FBS3MrQyxHQUFHcHNELEtBQUssU0FBUyt2QixHQUFHL3ZCLEtBQUtpUSxHQUFHalEsS0FBS3N3QixJQUFJaVYsT0FBT29FLE9BQU9uWixFQUFFdm5CLFlBQVlqSixLQUFLd3dCLEdBQzNJLFNBQVkxaUIsR0FBR3krQyxHQUFHeitDLEdBQUdBLEVBQUUwSCxFQUFFazNDLGFBQVksV0FBVyxJQUFJLElBQUk3OUMsS0FBS2YsRUFBRUEsRUFBRSxDQUFDLElBQUkwSCxFQUFFZ2IsRUFBRThYLGFBQWErZixRQUFReDVDLEdBQUdoQixFQUFFQyxFQUFFZSxFQUFFQSxHQUFHMkcsR0FBRzNILElBQUlDLEVBQUVlLEVBQUVBLEdBQUcyRyxFQUFFQSxFQUFFLElBQUlvcEIsR0FBRyxDQUFDL21CLEtBQUssVUFBVXpNLElBQUl5RCxFQUFFckYsT0FBT0ksT0FBTzhiLFNBQVM3WCxFQUFFZ1ksU0FBU3JRLEVBQUUxSCxHQUFFLElBQUtBLEVBQUU0cUIsR0FBR2xqQixPQUFNLEtBRGxFbTNDLENBQUczc0QsT0FBT0EsS0FBSzhOLEVBQUVBLEtBQUs5TixLQUFLOE4sRUFBRUEsR0FBRyxJQUFJOU4sS0FBSzhOLEVBQUVBLEdBQUdyTyxLQUFLK1YsSUFDMVhwRSxFQUFFcXdCLGVBQWUsU0FBUzN6QixFQUFFZSxFQUFFMkcsR0FBRzFILEVBQUV1K0MsR0FBR3YrQyxFQUFFZSxHQUFHN08sS0FBSzhOLEVBQUVBLEtBQUsybUIsRUFBR3owQixLQUFLOE4sRUFBRUEsSUFBRyxTQUFTRCxHQUFHLE9BQU9BLEdBQUcySCxLQUFJLEdBQUd4VixLQUFLOE4sRUFBRUEsR0FBR25OLGVBQWVYLEtBQUs4TixFQUFFQSxJQUFJNG5CLEdBQUcxMUIsS0FBSzhOLEtBQUtzK0MsR0FBR3BzRCxLQUFLLFNBQVNpeEIsR0FBR2p4QixLQUFLaVEsR0FBR3M4QyxHQUFHdnNELFFBQ2pMb1IsRUFBRXNuQixHQUFHLFNBQVM1cUIsR0FBRyxHQUFHQSxHQUFHQSxFQUFFRyxFQUFFLENBQUMsSUFBSVksRUFBRWYsRUFBRUEsRUFBRTFDLElBQUksR0FBRyxNQUFNeUQsRUFBRSxJQUFJLElBQUkyRyxLQUFLeFYsS0FBSzhOLEVBQUUsQ0FBQyxJQUFJRCxFQUFFN04sS0FBSzZPLEVBQUUyRyxRQUFHLElBQXFCM0gsSUFBSUEsRUFBRSxNQUFNLElBQUk3RCxFQUFFd21CLEVBQUU4WCxhQUFhK2YsUUFBUTd5QyxHQUFHeEwsSUFBSTZELElBQUk3TixLQUFLNk8sRUFBRTJHLEdBQUd4TCxFQUFFaEssS0FBS3kxQixHQUFHamdCLFNBQVMsR0FBRyxHQUFHM0csRUFBRXlSLFFBQVEsY0FBY3RnQixLQUFLOE4sRUFBRWUsR0FBRyxDQUFpRSxRQUFoRSxJQUFxQmYsRUFBRUEsRUFBRUEsRUFBRXMrQyxHQUFHcHNELEtBQUssU0FBU2l4QixHQUFHanhCLEtBQUtpUSxHQUFHczhDLEdBQUd2c0QsTUFBU0EsS0FBS3lRLEVBQUUsR0FBRytFLEVBQUVnYixFQUFFOFgsYUFBYStmLFFBQVF4NUMsSUFBR2hCLEVBQUVDLEVBQUVBLEVBQUUrWCxZQUFhclEsRUFBRSxPQUFPM0gsRUFBRTJpQixFQUFFOFgsYUFBYUUsUUFBUTM1QixFQUFFaEIsR0FBRzJpQixFQUFFOFgsYUFBYUcsV0FBVzU1QixRQUFRLEdBQUc3TyxLQUFLNk8sRUFBRUEsS0FBS2hCLFFBQUcsSUFBcUJDLEVBQUVBLEVBQUVBLEVBQUUsT0FBTyxJQUFJbUMsRUFBRWpRLEtBQUt3VixFQUFFLGdCQUFjLElBQ3RmMUgsRUFBRUEsRUFBRUEsR0FBR21DLEVBQUVwQixFQUFFQSxLQUFLMmhCLEVBQUU4WCxhQUFhK2YsUUFBUXg1QyxLQUFHb0IsRUFBRXBCLEVBQUVBLEdBQUcyaEIsRUFBRThYLGFBQWErZixRQUFReDVDLEdBQUdvQixFQUFFd2xCLEdBQUc1bUIsS0FBSTRwQixJQUFJZ0IsSUFBSSxJQUFJQSxJQUFJakosRUFBRThYLGFBQWErZixRQUFReDVDLEtBQUtmLEVBQUVBLEVBQUUrWCxVQUFVL1gsRUFBRUEsRUFBRStYLFdBQVcvWCxFQUFFQSxFQUFFNFgsU0FBU2pDLFdBQVdqTyxFQUFFLElBQUlBLFVBQVVpZCxFQUFFM2tCLEVBQUVpa0IsRUFBRS94QixLQUFLeTFCLEdBQUd6MUIsUUFBUW9SLEVBQUVxa0IsR0FBRyxTQUFTM25CLEdBQUc5TixLQUFLOE4sRUFBRUEsSUFBSTJrQixFQUFFenlCLEtBQUs4TixFQUFFQSxJQUFHLFNBQVNlLEdBQUdBLFFBQTJDLElBQXlaeUMsR0FBclpzN0MsR0FBRyxDQUFDbHFELEtBQUssWUFBWTQ1QixFQUFFLFNBQWdGLFNBQVN1d0IsS0FBSzdzRCxLQUFLOE4sRUFBRXErQyxLQUErQixTQUFTVyxHQUFHaC9DLEVBQUVlLEdBQUc3TyxLQUFLNk8sRUFBRXNDLEdBQUduUixLQUFLaVEsRUFBRXVnQixFQUFFM00sV0FBVyxJQUFJQSxXQUFXN2pCLEtBQUs2TyxHQUFHNU4sTUFBTWpCLEtBQUs2TyxHQUFHN08sS0FBS2lPLEVBQUVqTyxLQUFLd1YsRUFBRSxFQUFFeFYsS0FBSzhOLEVBQUUsR0FBRzlOLEtBQUtNLEVBQUV3TixFQUFFOU4sS0FBS3N3QixFQUFFemhCLEVBQUU3TyxLQUFLd3dCLEVBQUVBLEVBQUV1OEIsV0FBVyxJQUFJQSxXQUFXLElBQUk5ckQsTUFBTSxTQUFJLElBQVNxUSxLQUFrQkEsR0FBYmtmLEVBQUV1OEIsV0FBYyxJQUFJQSxXQUFXQyxJQUFPQSxJQUFJaHRELEtBQUtrVixRQUFlbkUsRUFBRSs3QyxJQUF4UixXQUFjOXNELEtBQUs2TyxHQUFHLEtBQXlRLElBQUksSUFBSXNDLEdBQUcsR0FBRzg3QyxHQUFHOTdDLEdBQUcsRUFBRSs3QyxHQUFHLEdBQUdDLEdBQUcsRUFBRUEsR0FBR0YsR0FBR0UsS0FBS0QsR0FBR0MsSUFBSSxFQUFFLElBQUlDLEdBQUdyNkIsRUFBRyxJQUFJbTZCLElBQ3p5QixTQUFTRyxHQUFHdi9DLEdBQUcsSUFBSSxJQUFJZSxFQUFFZixFQUFFbUMsRUFBRXVGLEVBQUUxSCxFQUFFMGlCLEVBQUUzaUIsRUFBRSxFQUFFN0QsRUFBRSxFQUFFQSxFQUFFNkUsRUFBRWxPLFFBQVE2VSxFQUFFM0gsS0FBS2dCLEVBQUU3RSxJQUFJLEdBQUc2RSxFQUFFN0UsRUFBRSxJQUFJLEdBQUc2RSxFQUFFN0UsRUFBRSxJQUFJLEVBQUU2RSxFQUFFN0UsRUFBRSxHQUFHQSxFQUFFLEVBQUU2RCxFQUFFLElBQUlnQixFQUFFLEdBQUcsR0FBR0EsRUFBRUEsSUFBSSxDQUFDN0UsRUFBVSxFQUFSd0wsRUFBRTNHLEVBQUUsSUFBTWhCLEVBQVMsRUFBUDJILEVBQUUzRyxFQUFFLEdBQUssSUFBSW9CLEdBQVcsRUFBUnVGLEVBQUUzRyxFQUFFLE9BQVM3RSxJQUFJLEVBQUVBLEdBQUcsS0FBS0EsSUFBSSxHQUFHQSxHQUFHLElBQUlBLElBQUksR0FBRyxFQUFFaUUsR0FBVSxFQUFQdUgsRUFBRTNHLEVBQUUsTUFBUWhCLElBQUksR0FBR0EsR0FBRyxLQUFLQSxJQUFJLEdBQUdBLEdBQUcsSUFBSUEsSUFBSSxJQUFJLEVBQUUySCxFQUFFM0csR0FBR29CLEVBQUVoQyxFQUFFLEVBQUVKLEVBQVMsRUFBUEMsRUFBRUEsRUFBRSxHQUFLOUQsRUFBUyxFQUFQOEQsRUFBRUEsRUFBRSxHQUFLLElBQUl3aUIsRUFBUyxFQUFQeGlCLEVBQUVBLEVBQUUsR0FBS3pMLEVBQVMsRUFBUHlMLEVBQUVBLEVBQUUsR0FBSzVJLEVBQVMsRUFBUDRJLEVBQUVBLEVBQUUsR0FBSzJDLEVBQVMsRUFBUDNDLEVBQUVBLEVBQUUsR0FBS2dqQixFQUFTLEVBQVBoakIsRUFBRUEsRUFBRSxHQUFnQixJQUFYbUMsRUFBUyxFQUFQbkMsRUFBRUEsRUFBRSxHQUFTZSxFQUFFLEVBQUUsR0FBR0EsRUFBRUEsSUFBSSxDQUFDLElBQUk2aEIsSUFBSTdpQixJQUFJLEVBQUVBLEdBQUcsS0FBS0EsSUFBSSxHQUFHQSxHQUFHLEtBQUtBLElBQUksR0FBR0EsR0FBRyxNQUFNQSxFQUFFN0QsRUFBRTZELEVBQUV5aUIsRUFBRXRtQixFQUFFc21CLEdBQUcsRUFDdmFyaUIsR0FEb2JnQyxFQUFFQSxJQUFJL0ssSUFBSSxFQUFFQSxHQUFHLEtBQUtBLElBQUksR0FBR0EsR0FBRyxLQUFLQSxJQUFJLEdBQUdBLEdBQ3BmLElBQUksS0FBRStJLEdBRHliQSxFQUFFL0ksRUFBRXVMLEdBQUd2TCxFQUFFNHJCLElBQ3ZiLEVBQU54ZixHQUFHekMsSUFBTSxJQUFlLEVBQUwyRyxFQUFFM0csSUFBTSxHQUFHLEVBQUVvQixFQUFFNmdCLEVBQUVBLEVBQUVyZ0IsRUFBRUEsRUFBRXZMLEVBQUVBLEVBQUU3QyxFQUFFNEwsRUFBRSxFQUFFNUwsRUFBRWl1QixFQUFFQSxFQUFFdG1CLEVBQUVBLEVBQUU2RCxFQUFFQSxFQUFFSSxFQUFFeWlCLEVBQUUsRUFBRTVpQixFQUFFQSxFQUFFLEdBQUdBLEVBQUVBLEVBQUUsR0FBR0QsRUFBRSxFQUFFQyxFQUFFQSxFQUFFLEdBQUdBLEVBQUVBLEVBQUUsR0FBRzlELEVBQUUsRUFBRThELEVBQUVBLEVBQUUsR0FBR0EsRUFBRUEsRUFBRSxHQUFHd2lCLEVBQUUsRUFBRXhpQixFQUFFQSxFQUFFLEdBQUdBLEVBQUVBLEVBQUUsR0FBR3pMLEVBQUUsRUFBRXlMLEVBQUVBLEVBQUUsR0FBR0EsRUFBRUEsRUFBRSxHQUFHNUksRUFBRSxFQUFFNEksRUFBRUEsRUFBRSxHQUFHQSxFQUFFQSxFQUFFLEdBQUcyQyxFQUFFLEVBQUUzQyxFQUFFQSxFQUFFLEdBQUdBLEVBQUVBLEVBQUUsR0FBR2dqQixFQUFFLEVBQUVoakIsRUFBRUEsRUFBRSxHQUFHQSxFQUFFQSxFQUFFLEdBQUdtQyxFQUFFLEVBQ2pPLFNBQVNxOUMsR0FBR3gvQyxFQUFFZSxFQUFFMkcsUUFBRyxJQUFTQSxJQUFJQSxFQUFFM0csRUFBRWxPLFFBQVEsSUFBSWtOLEVBQUUsRUFBRTdELEVBQUU4RCxFQUFFMEgsRUFBRSxHQUFHLGlCQUFrQjNHLEVBQUUsS0FBS2hCLEVBQUUySCxHQUFHMUgsRUFBRW1DLEVBQUVqRyxLQUFLNkUsRUFBRTBHLFdBQVcxSCxLQUFLN0QsR0FBRzhELEVBQUVlLElBQUl3K0MsR0FBR3YvQyxHQUFHOUQsRUFBRSxPQUFRLEtBQUd1bkIsRUFBRzFpQixHQUE0SixNQUFNdEQsTUFBTSxtQ0FBckssS0FBS3NDLEVBQUUySCxHQUFHLENBQUMsSUFBSXZGLEVBQUVwQixFQUFFaEIsS0FBSyxLQUFLLGlCQUFpQm9DLEdBQUcsR0FBR0EsR0FBRyxLQUFLQSxHQUFHQSxJQUFNLEVBQUZBLElBQU0sTUFBTTFFLE1BQU0sZ0NBQWdDdUMsRUFBRW1DLEVBQUVqRyxLQUFLaUcsRUFBRWpHLEdBQUc4RCxFQUFFZSxJQUFJdytDLEdBQUd2L0MsR0FBRzlELEVBQUUsSUFBdUQ4RCxFQUFFMEgsRUFBRXhMLEVBQUU4RCxFQUFFRyxHQUFHdUgsRUFIa2NzM0MsR0FBR3hxRCxVQUFVNFMsTUFBTSxXQUFXbFYsS0FBS2lPLEVBQUVqTyxLQUFLd1YsRUFBRSxFQUFFeFYsS0FBSzhOLEVBQUUwaUIsRUFBRXU4QixXQUFXLElBQUlBLFdBQVcvc0QsS0FBS3N3QixHQUFHb0UsRUFBRzEwQixLQUFLc3dCLElBSTk0QixJQUFJMDhCLEdBQUcsQ0FBQyxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxXQUFXLFdBQVcsV0FBVyxVQUFVLFVBQVUsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxVQUFVLFVBQVUsVUFBVSxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUM3ZSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsWUFBWSxTQUFTTyxLQUFLVCxHQUFHdnFELEtBQUt2QyxLQUFLLEVBQUV3dEQsSUFBSXo4QyxFQUFFdzhDLEdBQUdULElBQUksSUFBSVUsR0FBRyxDQUFDLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsWUFBWSxTQUFTQyxHQUFHMy9DLEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEVBQUVpRyxHQUFHalEsS0FBSzZRLEVBQUUvQyxFQUFFOU4sS0FBS00sRUFBRXVPLEVBQUU3TyxLQUFLd3dCLEVBQUVoYixFQUFFeFYsS0FBS3lRLEVBQUU1QyxHQUFHLEtBQUs3TixLQUFLdXdCLEVBQUV2bUIsR0FBRyxLQUFLaEssS0FBS21DLEVBQUU4TixFQUFFalEsS0FBS3N3QixFQUFFemhCLEVBQUUsSUFBSTJHLEVBQUV4VixLQUFLMHdCLEVBQUUsSUFBSW04QixHQUFHN3NELEtBQUtpTyxFQUFFLElBQUl3K0MsR0FBR3pzRCxLQUFLc3dCLEdBQUd0d0IsS0FBS2lRLEVBQUUsS0FBS2pRLEtBQUs2TyxFQUFFLEdBQUc3TyxLQUFLOE4sRUFBRTlOLEtBQUt3VixFQUFFLEtBQUssU0FBU2s0QyxHQUFHNS9DLEdBQUcsT0FBTyxJQUFJdUIsRUFBRSxnQ0FBZ0N2QixHQVF0aEIsU0FBUzYvQyxHQUFHNy9DLEVBQUVlLEdBQUcsSUFBSSxJQUFJMkcsRUFBRSxFQUFFQSxFQUFFMUgsRUFBRWUsRUFBRWxPLE9BQU82VSxJQUFJLElBQUkxSCxFQUFFZSxFQUFFMkcsR0FBRzNHLEdBQUcsTUFBTWhCLEtBQUssU0FBUysvQyxHQUFHOS9DLEdBQW9ILE9BQWpIQSxFQUFFbUMsSUFBSW5DLEVBQUVtQyxFQUFFbkMsRUFBRXVqQixLQUFLanNCLE1BQUssV0FBVyxPQUFPLElBQUlrM0IsSUFBRSxTQUFTenRCLEdBQXVDZixFQUFFMGxCLElBQXRDLFNBQVNoZSxFQUFFM0gsR0FBZ0IsT0FBYmdCLEVBQUVoQixHQUFHQyxFQUFFd21CLEdBQUc5ZSxJQUFTLEtBQ3pOLFNBQVkxSCxHQUFHLFNBQVNlLEVBQUVaLEdBQUdKLEdBQUUsRUFBRzdELEdBQUdBLEVBQUVpMEIsU0FBUzR2QixHQUFHLy9DLEdBQUcxSSxNQUFLLFNBQVNrckIsR0FBRyxJQUFJanVCLEVBQUVtVCxFQUFFLEdBQUc4YSxHQUFHcmlCLEdBQUdBLEVBQUVwSyxJQUFJLENBQUMsSUFBSXFCLEVBQUUsTUFBa0IsSUFBYjdDLEVBQUVrdUMsR0FBR3RpQyxFQUFFcEssTUFBV3ljLFFBQVEsdUJBQWlFcGIsR0FBR0EsRUFBRSxpQkFBdkNBLEVBQUU2akMsR0FBR2hGLEdBQWI3K0IsRUFBRTgrQixHQUFHM2hDLEdBQWEsa0JBQWtCLE9BQStCaXdCLEVBQUdwdEIsR0FBRyxNQUFNLElBQUlrdkMsR0FBRzlqQixFQUFFOWEsRUFBRThhLEVBQUV6aEIsRUFBRSxLQUFLLEtBQUszSixFQUFFLEtBQUtvckIsRUFBRTRlLEtBQUssSUFBSWtGLEdBQUc5akIsRUFBRTlhLEVBQUU4YSxFQUFFemhCLEVBQUV4TSxFQUFFaXVCLEVBQUVyZ0IsRUFBRSxLQUFLLEtBQUtxZ0IsRUFBRTRlLE1BQU03c0MsRUFBRTZDLEdBQUdzUSxFQUFFbTRDLEdBQUc3L0MsRUFBRXpMLE1BQUssSUFBSW1ULEVBQUUsSUFBSTQrQixHQUFHLFVBQVUsS0FBSyxLQUFLLEtBQUssSUFBSS9rQyxFQUFFLGtCQUFrQnhCLEdBQUUsRUFBRzdELEVBQUVxNEIsR0FBRyxLQUFLajlCLE1BQUssV0FBVyxPQUFPeW9ELEdBQUcvL0MsR0FBRzFJLE1BQUssV0FBV3lJLEdBQUc4L0MsR0FBRzcvQyxFQUFFMEgsU0FBT3ZGLEVBQUV1Z0IsRUFBRXM5QixjQUFjdDlCLEVBQUVzOUIsY0FBYyxTQUFTNy9DLEdBQ3ZhLEdBRDBhLEdBQ2hnQkEsRUFBRXNSLGNBQWNlLFFBQVE4bkIsR0FBRSx3QkFBd0I1WCxHQUFHalIsY0FBYyxRQUFRMVEsRUFBRSxDQUFDaEwsSUFBSW9LLElBQU8sbUJBQW9CZ0MsRUFBRSxJQUFJQSxFQUFFaEMsR0FBRyxNQUFNcWlCLEdBQUd2WixRQUFRbFMsTUFBTXlyQixLQUFLc21CLEtBQUtBLEdBQUcsSUFBSW5DLElBdEhoSCxTQUFZM21DLEdBQUcsSUFBSWUsRUFBRStuQyxHQUFHL25DLEVBQUVmLEVBQUVyTyxLQUFLcU8sR0FBR2UsRUFBRUEsSUFBSUEsRUFBRUEsRUFBRSxTQUFTMkcsR0FBRyxJQUFJLElBQUkzSCxFQUFFLEVBQUVBLEVBQUVnQixFQUFFZixFQUFFbk4sT0FBT2tOLElBQUlnQixFQUFFZixFQUFFRCxHQUFHMkgsSUFBc0MsbUJBQWxDMUgsRUFBRXM2QixHQUFFLDJCQUEyQjVYLEtBQTBCMWlCLEVBQUUsS0FBS2UsRUFBRUEsSUFzSGhEay9DLENBQUdsL0MsR0FGNkRtL0MsQ0FBR2xnRCxVQUFlQSxFQUFFbUMsRUFBRSxTQUFTNDlDLEdBQUcvL0MsR0FBRyxJQUFJZSxFQUFFLEtBQUssT0FiaUYsU0FBWWYsR0FBRyxPQUFPQSxFQUFFZSxFQUFFL0ksSUFBSThtRCxHQUFHOStDLEVBQUVBLEdBQUcxSSxNQUFLLFNBQVN5SixHQUFHLE9BQU93bEMsR0FBR3hsQyxNQWEzSW8vQyxDQUFHbmdELEVBQUVHLEdBQUc3SSxNQUFLLFNBQVNvUSxHQUFhLE9BQVYzRyxFQUFFMkcsRUFBZTgyQyxJQUFiOTJDLEVBQUUxSCxFQUFFRyxHQUFjWSxFQUFFKzlDLEdBQUdwM0MsRUFBRTFILE1BQUsxSSxNQUFLLFdBQVcsT0FBT3lKLEtBRTZCLFNBQVNxL0MsR0FBR3BnRCxHQUFHOU4sS0FBSzhOLEVBQUVBLEVBQUU5TixLQUFLNk8sRUFBRXM5QyxNQVZ3Si82QyxFQUFFcThDLEdBQUduckQsV0FDcGtCK3VCLEdBQUcsV0FBVyxPQUFPcnhCLEtBQUs4ekIsR0FBRzl6QixLQUFLOHpCLEdBQUc5ekIsS0FBSzh6QixJQTdMdkIyVCxRQUFHLEdBQVFGLEtBQUtuaUMsTUFBSyxXQUFXLE9BQU8sSUFBSWszQixJQUFFLFNBQVN4dUIsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRWdiLEVBQUU5bUIsU0FBU21FLEVBQUU0VixZQUFXLFdBQVc1VSxFQUFFdEQsTUFBTSxzQ0FBcUMsS0FBS2lLLEVBQUV5VyxpQkFBaUIsZUFBYyxXQUFXQyxhQUFhcmUsR0FBR0MsT0FBSyxTQUFRa3ZCLEdBQUV6eEIsTUFBTSx3REE2THhNbkcsTUFBSyxXQUFXLEdBQUcsbUJBQW9CZ2pDLEdBQUUsMkJBQTJCNVgsR0FBRyxNQUFNazlCLEdBQUcsdURBQXVELFFBQUcsSUFBcUJ0bEIsR0FBRSx3QkFBd0I1WCxHQUFHLE1BQU1rOUIsR0FBRyw2Q0FBNkMsR0FBRyxtQkFBb0J0bEIsR0FBRSxxQ0FBcUM1WCxHQUFHLE1BQU1rOUIsR0FBRyw4Q0FBOEMsR0FBRyxtQkFBb0J0bEIsR0FBRSw0QkFBNEI1WCxHQUFHLE1BQU1rOUIsR0FBRyxtREFDN2QsV0FBVyxNQUFNLElBQUlyK0MsRUFBRSx5QkFDekIrQixFQUFFODFCLEdBQUcsU0FBU3A1QixFQUFFZSxHQUEyRCxPQUF4REEsRUFBRSxJQUFJUSxFQUFFLGdEQUF1RDB0QixNQUFLM3JCLEVBQUU0bUIsR0FBRyxXQUFXLE9BQU9nRixHQUFFLElBQUkzdEIsRUFBRSxpREFBaUQrQixFQUFFd25CLEdBQUcsV0FBVyxPQUFNLEdBQUl4bkIsRUFBRXFuQixHQUFHLFdBQVcsT0FBTSxHQUFJcm5CLEVBQUVrbkIsR0FBRyxXQUFXLE9BQU0sR0FDalBsbkIsRUFBRTZtQixHQUFHLFNBQVNucUIsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHLEdBQUc3TixLQUFLd1YsRUFBRSxPQUFPd25CLEdBQUUsSUFBSTN0QixFQUFFLCtCQUErQixJQUFJckYsRUFBRWhLLEtBQUtpUSxFQUFFdWdCLEVBQUU5bUIsU0FBU3VFLEVBQUUsS0FBS3FpQixFQUFFLEtBQUtqdUIsRUFBRSxLQUFLNkMsRUFBRSxLQUFLLE9BQU9sRixLQUFLd1YsRUFBRXVuQixLQUFJMzNCLE1BQUssV0FBaUIsT0FBTit1QyxHQUFHdGxDLEdBQVUrK0MsR0FBRzVqRCxNQUFLNUUsTUFBSyxXQUFXLE9BRTFNLFNBQVkwSSxFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxHQUFHLElBQUlpRyxFQUp1QixXQUFjLElBQUksSUFBSW5DLEVBQUUsR0FBR2UsRUFBRSxHQUFHLEVBQUVmLEdBQUdlLEVBQUVwUCxLQUFLLGlFQUFpRThrQyxPQUFPbHRCLEtBQUsydUIsTUFBTSxHQUFHM3VCLEtBQUtJLFlBQVkzSixJQUFJLE9BQU9lLEVBQUV4TyxLQUFLLElBSTFMOHRELEdBQUtsZ0QsRUFBRSxJQUFJbW1DLEdBQUd2bEMsRUFBRWhCLEVBQUUsS0FBS29DLEVBQUUsSUFBSVosRUFBRSxpQkFBaUIsS0FBS3JGLEdBQUdzbUIsRUFBRThYLEdBQUUsd0JBQXdCNVgsR0FBRyxHQUFHLGlCQUFrQkYsRUFBRSxNQUFNLElBQUlqaEIsRUFBRSxpQ0FBaUMsSUFBSWhOLEVBQUUrbEMsR0FBRSx3QkFBd0I1WCxHQUFHdHJCLEVBQUUsR0FBRyxHQUFHc2dDLEtBQUlqbUIsY0FBY1gsTUFBTSxvQkFBb0IxWixFQUFFa3BELElBQUk5OUIsTUFBTyxLQUFHa1YsS0FBSWptQixjQUFjWCxNQUFNLFdBQXdCLE9BQU9vZSxHQUFFLElBQUkzdEIsRUFBRSxnREFBNUJuSyxFQUFFbXBELElBQUkvOUIsRUFBc0VqdUIsSUFBSTZDLEVBQUVvcEQsZUFBZWpzRCxHQUFHNE4sRUFKM00sU0FBWW5DLEdBQUcsSUFBSWUsRUFBRSxJQUFJMCtDLEdBQUdELEdBQUd6K0MsRUFBRWYsR0FBR0EsRUFBRSxHQUFHLElBQUkwSCxFQUFFLEVBQUUzRyxFQUFFWixFQUFFLEdBQUdZLEVBQUUyRyxFQUFFODNDLEdBQUd6K0MsRUFBRXUrQyxHQUFHLEdBQUd2K0MsRUFBRTJHLEdBQUc4M0MsR0FBR3orQyxFQUFFdStDLEdBQUd2K0MsRUFBRUEsR0FBR0EsRUFBRTJHLEVBQUUsS0FBSyxJQUFJLElBQUkzSCxFQUFFLEdBQUcsSUFBSUEsRUFBRUEsSUFBSWdCLEVBQUVvQixFQUFFcEMsR0FBSyxJQUFGMkgsRUFBTUEsR0FBRyxJQUFVLElBQU42M0MsR0FBR3grQyxHQUFPaEIsRUFBRTJILEVBQUUsRUFBRTNILEVBQUVnQixFQUFFdk8sRUFBRXVOLElBQUksSUFBSSxJQUFJN0QsRUFBRSxHQUFHLEdBQUdBLEVBQUVBLEdBQUcsRUFBRThELEVBQUUwSCxLQUFLM0csRUFBRWYsRUFBRUQsSUFBSTdELEVBQUUsSUFBSSxPQTVKL0wsU0FBWThELEdBQUcsT0FBT3dtQixFQUFHeG1CLEdBQUUsU0FBU2UsR0FBb0IsT0FBTyxHQUF4QkEsRUFBRUEsRUFBRTlPLFNBQVMsS0FBZVksT0FBT2tPLEVBQUUsSUFBSUEsS0FBSXhPLEtBQUssSUE0SjZHa3VELENBQUd6Z0QsR0FJaEIwZ0QsQ0FBR3YrQyxHQUFHL0ssRUFBRXN2QyxVQUFVdmtDLEVBQUUsSUFBSVEsRUFBRW8zQyxHQUFHLzVDLEVBQUUrQyxFQUFFL0MsRUFBRXhOLEVBQUV3TixFQUFFMGlCLEVBQUUzaEIsRUFBRTJHLEVBQUUsS0FBSzNILEVBQUVDLEVBQUUyQyxFQUFFdkwsRUFBRTRJLEVBQUV5aUIsRUFBRXZtQixFQUFFOEQsRUFBRTNMLEdBQUcsT0FBTzJMLEVBQUV1akIsS0FBS2pzQixNQUFLLFdBQVcsSUFBSTByQixFQUMvZ0JoakIsRUFBRXdpQixFQUFFLE9BQU94aUIsRUFBRTRpQixFQUFFNWlCLEVBQUUvSCxJQUFJNm1ELEdBQUczK0MsRUFBRXdrQixJQUFJM0IsTUFBSzFyQixNQUFLLFdBQVcsSUFBSTByQixFQUFFc1gsR0FBRSx5Q0FBeUM1WCxHQUFHLEdBQUcsbUJBQW9CTSxFQUFFLE1BQU0sSUFBSXpoQixFQUFFLGlDQUFpQyxJQUFJcWhCLEVBQUUsS0FBS0ksR0FBRSxTQUFTSCxHQUFHLEdBQUdBLEVBQUUsQ0FBNkMsR0FBRyxtQkFBL0NELEVBQUUwWCxHQUFFLHFDQUFxQzVYLElBQTRCLE1BQU0sSUFBSW5oQixFQUFFLGlDQUFpQ3FoQixFQUFFamdCLE9BQU8sQ0FBb0MsR0FBRyxtQkFBdENpZ0IsRUFBRTBYLEdBQUUsNEJBQTRCNVgsSUFBNEIsTUFBTSxJQUFJbmhCLEVBQUUsaUNBQWlDc2hCLEVBQUU2VSxLQUFJMTNCLEVBQUVBLEVBQUU0aUIsRUFBRWpnQixFQUFFa2dCLEVBQUUvUixNQUFNLGlDQUFpQytSLEVBQUUvUixNQUFNLGdDQUNoZixTQUFTLFVBQVUsdUJBSjhMNnZDLENBQUd6a0QsRUFBRThELEVBQUVlLEVBQUUyRyxFQUFFM0gsTUFBS3pJLE1BQUssV0FBVyxPQUFNLElBQUtrM0IsSUFBRSxTQUFTN3JCLEVBQUVxZ0IsR0FBR1IsRUFBRSxXQUFXLElBQUlJLEVBQUUwWCxHQUFFLG1DQUFtQzVYLEdBQTZGLE9BQTFGL2YsSUFBSSxtQkFBb0JpZ0IsR0FBR0EsSUFBSTFtQixFQUFFOEQsR0FBRyxtQkFBb0I5RCxFQUFFOEQsRUFBRWdGLFFBQVE5SSxFQUFFOEQsRUFBRWdGLFFBQVE5SSxFQUFFOEQsRUFBRSxPQUFZLEdBQUk5RCxFQUFFd3BCLEdBQUdsRCxHQUFHanVCLEVBQUUsV0FBVzRMLElBQUlBLEVBQUVvMEIsR0FBRyxLQUFLajlCLE1BQUssV0FBVzByQixFQUFFLElBQUl6aEIsRUFBRSxvQ0FDdGVuSyxFQUFFLFdBQVdva0MsTUFBTWpuQyxLQUFLNE4sRUFBRWdjLGlCQUFpQixTQUFTNXBCLEdBQUUsR0FBSW1qQyxLQUFJam1CLGNBQWNYLE1BQU0sWUFBWTNPLEVBQUVnYyxpQkFBaUIsbUJBQW1CL21CLEdBQUUsTUFBT29LLEdBQUUsU0FBU21CLEdBQUcsT0FBT285QyxHQUFHN2pELEdBQUc1RSxNQUFLLFdBQVcsTUFBTXFMLFdBQVM4Z0IsSUFBRyxXQUFXbHZCLEdBQUc0TixFQUFFd3VCLG9CQUFvQixTQUFTcDhCLEdBQUUsR0FBSTZDLEdBQUcrSyxFQUFFd3VCLG9CQUFvQixtQkFBbUJ2NUIsR0FBRSxHQUFJK0ksR0FBR0EsRUFBRWd3QixTQUFTM04sR0FBR3RtQixFQUFFc3FCLEdBQUdoRSxHQUFHdG1CLEVBQUV3TCxFQUFFLFNBS2xLcEUsRUFBRW9pQixHQUFHLFNBQVMxbEIsR0FBRzlOLEtBQUs2TyxFQUFFcFAsS0FBS3FPLEdBQUc4L0MsR0FBRzV0RCxNQUFNc1AsR0FBRSxTQUFTVCxHQUFHLHVDQUF1Q0EsRUFBRXlFLE9BQU96RSxFQUFFLElBQUl1bEMsR0FBRyxVQUFVLEtBQUssS0FBSyxLQUFLLElBQUkva0MsRUFBRSxrQkFBa0J2QixFQUFFZSxRQUFPdUMsRUFBRWtqQixHQUFHLFNBQVN4bUIsR0FBRzJtQixFQUFHejBCLEtBQUs2TyxHQUFFLFNBQVNBLEdBQUcsT0FBT0EsR0FBR2YsTUFBeUMsSUFBSTRnRCxHQUFHLENBQUNoc0QsS0FBSyxrQkFBa0I0NUIsRUFBRSxXQUEyRCxTQUFTcXlCLEdBQUc3Z0QsR0FBRyxPQUFPdytDLEdBQUd4K0MsRUFBRWUsRUFBRTYvQyxHQUFHNWdELEVBQUVBLEdBQWdGLFNBQVM4Z0QsR0FBRzlnRCxFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUc3TixLQUFLTSxFQUFFLEdBQUdOLEtBQUt1d0IsRUFBRSxFQUFFdndCLEtBQUsrMEMsRUFBRWpuQyxFQUFFOU4sS0FBSzZRLEVBQUVoQyxFQUFFN08sS0FBS3lRLEVBQUUrRSxFQUFFeFYsS0FBSzArQixFQUFFN3dCLEVBQUU3TixLQUFLc3dCLEVBQUUsR0FBR3R3QixLQUFLaVEsR0FBRSxFQUFHalEsS0FBS3d3QixFQUFFdUIsRUFBRS94QixLQUFLbUMsRUFBRW5DLE1BQU1BLEtBQUs2TyxFQUFFLElBQUlnZ0QsR0FBRzd1RCxLQUFLMHdCLEVBQUUsSUFBSW8rQixHQUFHOXVELEtBQUtpTyxFQUFFLElBQUlpZ0QsR0FBR2EsR0FBRy91RCxLQUFLNlEsRUFBRTdRLEtBQUt5USxJQUFJelEsS0FBS3dWLEVBQUUsR0FBR3hWLEtBQUt3VixFQUFFdzVDLFFBQVFodkQsS0FBSzZPLEVBQUU3TyxLQUFLd1YsRUFBRXk1QyxrQkFBa0JqdkQsS0FBSzZPLEVBQUU3TyxLQUFLd1YsRUFBRTA1QyxnQkFBZ0JsdkQsS0FBSzZPLEVBQUU3TyxLQUFLd1YsRUFBRTI1QyxrQkFBa0JudkQsS0FBSzZPLEVBQUU3TyxLQUFLd1YsRUFBRTQ1QyxlQUFlcHZELEtBQUswd0IsRUFBRTF3QixLQUFLd1YsRUFBRTY1QyxhQUFhcnZELEtBQUswd0IsRUFBRTF3QixLQUFLd1YsRUFBRTg1QyxlQUFldHZELEtBQUswd0IsRUFBRTF3QixLQUFLOE4sRUFBRXloRCxHQUFHdnZELEtBQUsrMEMsRUFBRS8wQyxLQUFLNlEsRUFBRTdRLEtBQUt5USxFQUFFa2lCLEVBQUczeUIsS0FBSzArQixHQUN6aUMsU0FBUzZ3QixHQUFHemhELEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsSUFBSWlHLEVBQUUsZ0JBQXNCLEtBQUssT0FBT3czQixLQUFLLElBQUlnbUIsR0FBRzMvQyxFQUFFZSxFQUFFMkcsRUFBRXZGLEVBQUVwQyxFQUFFN0QsR0FBRyxJQUFJazlDLEdBQUdwNUMsRUFBRWUsRUFBRTJHLEVBQUV2RixFQUFFcEMsRUFBRTdELEdBQW9ILFNBQVN3bEQsR0FBRzFoRCxHQUFHQSxFQUFFbUMsSUFBSW5DLEVBQUVtQyxHQUFFLEVBQUduQyxFQUFFQSxFQUFFMGxCLEdBQUcxbEIsRUFBRTBpQixJQUFJLElBQUkzaEIsRUFBRWYsRUFBRUEsRUFBRSxPQUFPQSxFQUFFQSxFQUFFdWpCLEtBQUsvaEIsR0FBRSxTQUFTa0csR0FBcUIsTUFBbEIxSCxFQUFFQSxHQUFHZSxHQUFHZixFQUFFb0gsUUFBY00sS0FDdFUsU0FBU2k2QyxHQUFHM2hELEdBQUdBLEVBQUVBLEVBQUUycUIsTUFBTSsyQixHQUFHMWhELEdBQUd3QixHQUFFLFNBQVNULEdBQUcsSUFBSTJHLEVBQUUsSUFBSTQrQixHQUFHLFVBQVUsS0FBSyxLQUFLLEtBQUssSUFBSS9rQyxFQUFFLGdEQUFnRHFnRCxHQUFHN2dELElBQUlmLEVBQUUzTCxFQUFFcVQsTUFBSzFILEVBQUVBLEVBQUV3cUIsTUFBTXEzQixHQUFHN2hELEVBQUVlLEdBQUcsU0FBUytnRCxHQUFHOWhELEVBQUVlLEdBQUdta0IsRUFBR2xsQixFQUFFd2lCLEVBQUV6aEIsSUFBSWYsRUFBRXdpQixFQUFFN3dCLEtBQUtvUCxHQUFHZixFQUFFbUMsR0FGMFYsU0FBWW5DLEdBQUcsT0FBT0EsRUFBRWUsRUFBRS9JLElBQUk0b0QsR0FBRzVnRCxFQUFFQSxHQUFHMUksTUFBSyxTQUFTeUosR0FBRyxNQUFNLFdBQVdBLEtBRS9aZ2hELENBQUcvaEQsRUFBRUcsR0FBRzdJLE1BQUssU0FBU29RLEdBQUdBLEVBQUVtNUMsR0FBRzdnRCxFQUFFRyxHQUFHN0ksTUFBSyxXQUFXb3FELEdBQUcxaEQsR0FBR3dCLEdBQUUsU0FBU3pCLEdBQUcsSUFBSTdELEVBQUUsSUFBSW9xQyxHQUFHLFVBQVUsS0FBSyxLQUFLLEtBQUssSUFBSS9rQyxFQUFFLGdEQUFnRHFnRCxHQUFHN2hELElBQUlDLEVBQUUzTCxFQUFFNkgsU0FBT3lsRCxHQUFHM2hELE1BQUt3QixHQUFFLFdBQVdtZ0QsR0FBRzNoRCxNQUFLLFNBQVNnaUQsR0FBR2hpRCxFQUFFZSxHQUFHNGxCLEVBQUczbUIsRUFBRXdpQixHQUFFLFNBQVM5YSxHQUFHLE9BQU9BLEdBQUczRyxLQUQ1VysvQyxHQUFHdHNELFVBQVU0UyxNQUFNLFdBQVdsVixLQUFLaVEsR0FBRSxFQUFHalEsS0FBSzhOLEVBQUV3bUIsR0FBR3QwQixLQUFLd3dCLEdBQUd4d0IsS0FBSzhOLEVBQUV5aEQsR0FBR3Z2RCxLQUFLKzBDLEVBQUUvMEMsS0FBSzZRLEVBQUU3USxLQUFLeVEsRUFBRSxLQUFLelEsS0FBSzArQixHQUFHMStCLEtBQUtNLEVBQUUsSUFFek5zdUQsR0FBR3RzRCxVQUFVSCxFQUFFLFNBQVMyTCxHQUFHLElBQUlBLEVBQUUsTUFBTSxJQUFJdUIsRUFBRSxzQkFBNkQsR0FBdkMsS0FBSzRpQixJQUFLanlCLEtBQUt1d0IsSUFBSXZ3QixLQUFLTSxFQUFFLEdBQUdOLEtBQUt1d0IsRUFBRSxHQUFNemlCLEdBQUdBLEVBQUU0b0MsVUFBVTEyQyxLQUFLTSxFQUFFOE4sZUFBZU4sRUFBRTRvQyxVQUFVLE9BQU0sRUFBRyxJQUFJLElBQUk3bkMsR0FBRSxFQUFHMkcsRUFBRSxFQUFFQSxFQUFFeFYsS0FBS3N3QixFQUFFM3ZCLE9BQU82VSxJQUFJLENBQUMsSUFBSTNILEVBQUU3TixLQUFLc3dCLEVBQUU5YSxHQUFHLEdBQUczSCxFQUFFNHBCLEdBQUczcEIsRUFBRTBILEVBQUUxSCxFQUFFZSxHQUFHLEVBQUlBLEVBQUU3TyxLQUFLd1YsRUFBRTFILEVBQUUwSCxNQUFHM0csRUFBRXloQixFQUFFeGlCLEVBQUVELEdBQUdDLElBQUlBLEVBQUVtQyxHQUFHbkMsRUFBRWUsS0FBSzdPLEtBQUtNLEVBQUV3TixFQUFFNG9DLFdBQVUsRUFBRzEyQyxLQUFLdXdCLEVBQUUwQixNQUFNcGpCLEdBQUUsRUFBRyxPQUFrQixPQUFYOGdELEdBQUczdkQsS0FBSzZPLEdBQVVBLEdBQUcsSUFBSWtoRCxHQUFHLElBQUkxbUIsR0FBRyxJQUFJLEtBQUsybUIsR0FBRyxJQUFJM21CLEdBQUcsSUFBSSxLQUNsWSxTQUFTNG1CLEdBQUduaUQsRUFBRWUsRUFBRTJHLEVBQUUzSCxFQUFFN0QsRUFBRWlHLEVBQUVoQyxHQUFHLE9BQU9ILEVBQUVBLEVBQUVrcUIsR0FBR25wQixFQUFFMkcsRUFBRTNILEdBQUUsV0FBV0MsRUFBRW1DLElBQUluQyxFQUFFbUMsR0FBRSxFQUFHbkMsRUFBRUEsRUFBRTBsQixHQUFHMWxCLEVBQUUwaUIsT0FBSyxXQUFXMWlCLEVBQUVvSCxVQUFTbEwsRUFBRWlHLEVBQUVoQyxHQUFHLFNBQVN5aEQsR0FBRzVoRCxHQUFHLFNBQU9BLEdBQUcsMEJBQTBCQSxFQUFFd0YsTUFDdkssU0FBUzQ4QyxHQUFHcGlELEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsSUFBSWlHLEVBQUUsT0FMNmIsU0FBWW5DLEdBQUcsT0FBT0EsRUFBRWUsRUFBRTlJLElBQUkyb0QsR0FBRyxVQUFVNWdELEVBQUVBLEdBS25lcWlELENBQUdyaUQsRUFBRUcsR0FBRzdJLE1BQUssV0FBVyxPQUFPMEksRUFBRUEsRUFBRW1xQixHQUFHcHBCLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUdzRixHQUFFLFNBQVNyQixHQUFHLEdBQUd5aEQsR0FBR3poRCxHQUFHLE1BQU0sSUFBSW9CLEVBQUUsK0NBQW1ELE9BQUpZLEVBQUVoQyxFQUFTMGdELEdBQUc3Z0QsRUFBRUcsR0FBRzdJLE1BQUssV0FBVyxNQUFNNkssUUFBTzdLLE1BQUssV0FBVyxPQUFPMEksRUFBRUEsRUFBRThxQixLQUFLLElBQUkwRCxJQUFFLGVBQWNxeUIsR0FBRzdnRCxFQUFFRyxHQUFHN0ksTUFBSyxXQUFXLE9BQU8wSSxFQUFFNGpCLFFBQU90c0IsTUFBSyxlQUFja0ssR0FBRSxxQkFBa0IsU0FBUzhnRCxHQUFHdGlELEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsT0FBTzhELEVBQUVBLEVBQUVvNUIsR0FBR3I1QixHQUFFLFNBQVNvQyxHQUFHcEIsRUFBRXlpQixHQUFHOWIsRUFBRSxLQUFLdkYsRUFBRWpHLEtBQUkrbEQsR0FBR2pxRCxPQUZ6QjhvRCxHQUFHdHNELFVBQVVvdkIsR0FBRyxXQUFXLE9BQU8xeEIsS0FBSzZPLEVBQUU2aUIsTUFFVCxJQUFJMitCLEdBQUcsR0FBRyxTQUFTdEIsR0FBR2poRCxFQUFFZSxFQUFFMkcsR0FBZ0MsT0FBN0IxSCxFQUFFQSxFQUFFLElBQUllLEVBQUUyRyxJQUFJMUgsRUFBRUEsRUFBRSxJQUFJMEgsRUFBRTNSLEtBQVlpSyxFQUN4ZSxTQUFTd2lELEdBQUd4aUQsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHLElBQUk3RCxFQUFFK2tELEdBQUdsZ0QsRUFBRTJHLEVBQUUzSCxHQUFrQyxPQUEvQndpRCxHQUFHcm1ELEtBQUtxbUQsR0FBR3JtRCxHQUFHLElBQUk0a0QsR0FBRzlnRCxFQUFFZSxFQUFFMkcsRUFBRTNILElBQVd3aUQsR0FBR3JtRCxHQUFHLFNBQVM2a0QsS0FBSzd1RCxLQUFLNk8sRUFBRSxLQUFLN08sS0FBS2lRLEVBQUUsR0FBR2pRLEtBQUt3VixFQUFFLEdBQUd4VixLQUFLOE4sRUFBRSxLQUFLOU4sS0FBS00sRUFBRU4sS0FBS2lPLEdBQUUsRUFDK04sU0FBUzBoRCxHQUFHN2hELEdBQUdBLEVBQUVHLElBQUlILEVBQUVHLEdBQUUsRUFBR3NpRCxHQUFHemlELEdBQUUsRUFBRyxLQUFLLE9BQU8sU0FBUzBpRCxHQUFHMWlELEdBQUdBLEVBQUVHLElBQUlILEVBQUV4TixHQUFHaXdELEdBQUd6aUQsR0FBRSxFQUFHLEtBQUssTUFDck0sU0FBUzJpRCxHQUFHM2lELEVBQUVlLEdBQStCLEdBQTVCZixFQUFFZSxFQUFFLFdBQVcsT0FBT2t1QixHQUFFbHVCLElBQU9mLEVBQUVtQyxFQUFFdFAsT0FBTyxJQUFJLElBQUk2VSxFQUFFLEVBQUVBLEVBQUUxSCxFQUFFbUMsRUFBRXRQLE9BQU82VSxJQUFJMUgsRUFBRW1DLEVBQUV1RixHQUFHM0csR0FBRyxTQUFTMGhELEdBQUd6aUQsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHZ0IsRUFBRWhCLEVBQTNOLFNBQVlDLEVBQUVlLEdBQStCLEdBQTVCZixFQUFFZSxFQUFFLFdBQVcsT0FBT211QixHQUFFbnVCLElBQU9mLEVBQUUwSCxFQUFFN1UsT0FBTyxJQUFJLElBQUk2VSxFQUFFLEVBQUVBLEVBQUUxSCxFQUFFMEgsRUFBRTdVLE9BQU82VSxJQUFJMUgsRUFBRTBILEVBQUVBLEdBQUczRyxHQUE4SDZoRCxDQUFHNWlELEVBQUVELEdBQUc0aUQsR0FBRzNpRCxFQUFFMEgsR0FBR2k3QyxHQUFHM2lELEVBQUUsQ0FBQzZpRCxLQUFLLE9BQU83aUQsRUFBRW1DLEVBQUUsR0FBR25DLEVBQUUwSCxFQUFFLEdBQ2pNLFNBQVNzNUMsTUFDdEgsU0FBUzhCLEtBQUs1d0QsS0FBS3ExQixJQUFHLEVBQUc5ekIsT0FBT3NFLGVBQWU3RixLQUFLLDBCQUEwQixDQUFDOEYsSUFBSSxXQUFXLE9BQU85RixLQUFLcTFCLElBQUl0dkIsSUFBSSxTQUFTK0gsR0FBRzlOLEtBQUtxMUIsR0FBR3ZuQixHQUFHRSxZQUFXLElBQU0sU0FBUzZpRCxHQUFHL2lELEVBQUVlLEdBQUc3TyxLQUFLOE4sRUFBRWUsRUFBRXE3QixHQUFFbHFDLEtBQUssaUJBQWlCOE4sR0FBa0YsU0FBU2dqRCxHQUFHaGpELEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxPQUFNLElBQUtrbUMsR0FBR2ptQyxHQUFJbW5CLEdBQUdwbUIsRUFBRTJHLEdBQUdwUSxNQUFLLFNBQVM0RSxHQUFHLE9BQU8sSUFBSTZtRCxHQUFHN21ELEVBQUU2RCxNQUFNLFNBQVNrakQsR0FBR2pqRCxHQUFHLElBQUllLEVBQUV3L0IsR0FBR3ZnQyxHQUFHLEtBQUtlLEdBQUdBLEVBQUU0L0IsS0FBSzUvQixFQUFFbWlELFdBQVduaUQsRUFBRW9pRCxLQUFLLE1BQU0sSUFBSTVoRCxFQUFFLGlCQUFpQixtSEFBbUg4NkIsR0FBRW5xQyxLQUFLLENBQUNraEIsTUFBTXBULEVBQUVvakQsZUFBZXpuQixHQUFHLElBQUk1NkIsRUFBRTQvQixLQUFLMGlCLFNBQVMxbkIsR0FBRyxJQUFJNTZCLEVBQUVtaUQsV0FBV0ksYUFBYTNuQixHQUFHLElBQUk1NkIsRUFBRW9pRCxLQUFLSSxlQUFleGlELEVBQUVrUCxVQUFVbFAsRUFBRWtQLFNBQVM0d0IsaUJBQWlCOS9CLEVBQUVrUCxTQUFTNHdCLGlCQUFpQixLQUFLMmlCLG1CQUFtQnppRCxFQUFFa1AsVUFBVWxQLEVBQUVrUCxTQUFTd3pDLHNCQUFzQjFpRCxFQUFFa1AsU0FBU3d6QyxzQkFBc0IsS0FBS0MsT0FBTzNpRCxJQUMvK0IsU0FBUzRpRCxHQUFHM2pELEVBQUVlLEVBQUUyRyxHQUFHLElBQUkzSCxFQUFFZ0IsR0FBR0EsRUFBRTZpRCxJQUFJLElBQUk3akQsRUFBRSxNQUFNLElBQUl3QixFQUFFLGlCQUFpQixnREFBZ0RyUCxLQUFLOE4sRUFBRUEsRUFBRTlOLEtBQUtpUSxFQUFFMGxCLEdBQUc5bUIsR0FBRzdPLEtBQUtpTyxFQUFFdUgsRUFBRXhWLEtBQUt3VixFQUFFLElBQUlnN0IsR0FBRyxLQUFLM2lDLEdBQUc3TixLQUFLNk8sRUFBRSxHQUFHLElBQUk3RSxFQUFFaEssS0FBS3l5QixFQUFFNWpCLEVBQUU4aUQsS0FBSyxJQUFHLFNBQVMxaEQsSUFBSUEsRUFBRTA2QixHQUFHMTZCLEtBQUtqRyxFQUFFNkUsRUFBRXBQLEtBQUt3USxNQUFLaTZCLEdBQUVscUMsS0FBSyxPQUFPQSxLQUFLOE4sR0FBR284QixHQUFFbHFDLEtBQUssVUFBVUEsS0FBS3dWLEdBQUcwMEIsR0FBRWxxQyxLQUFLLFFBQVFBLEtBQUs2TyxHQUx4SmdnRCxHQUFHdnNELFVBQVU0UyxNQUFNLFdBQVdsVixLQUFLNk8sRUFBRSxLQUFLN08sS0FBSzhOLElBQUk5TixLQUFLOE4sRUFBRW13QixTQUFTaitCLEtBQUs4TixFQUFFLE9BQ3RPK2dELEdBQUd2c0QsVUFBVWd1QixFQUFFLFNBQVN4aUIsRUFBRWUsR0FBRyxHQUFHZixFQUFFLENBQUM5TixLQUFLa1YsUUFBUWxWLEtBQUtpTyxHQUFFLEVBQUcsSUFBSXVILEVBQUUxSCxFQUFFMEgsRUFBRTNILEVBQUVDLEVBQUVlLEVBQUU3RSxFQUFFOEQsRUFBRUEsR0FBRyxnQ0FBZ0NBLEVBQUVBLEVBQUV3RixLQUFLckQsRUFBRW5DLEVBQUVBLEdBQUcsb0RBQW9EQSxFQUFFQSxFQUFFd0YsS0FBS3RULEtBQUtNLEtBQUswSixJQUFJaUcsR0FBRyxXQUFXdUYsR0FBR3hMLEdBQUdpRyxFQUFFbkMsRUFBRUEsR0FBR3lpRCxHQUFHdndELE1BQUssRUFBRyxLQUFLOE4sRUFBRUEsR0FBR2l2QixNQUFLbHVCLEVBQUU4a0IsR0FBR25lLEVBQUUzSCxHQUN4USxTQUFZQyxFQUFFZSxFQUFFMkcsR0FBR0EsRUFBRUEsRUFBRW1lLEdBQUc5a0IsRUFBRTJHLEVBQUUzRyxFQUFFQSxHQUFHLElBQUloQixFQUFFZ0IsRUFBRVosRUFBRWpFLEVBQUU2RSxFQUFFb0IsRUFBRUEsRUFBRXBCLEVBQUV2TyxFQUFFMk4sRUFBRVksRUFBRXFnQyxJQUFJNWUsSUFBSXpoQixFQUFFMkcsRUFBRW9KLE1BQU0sYUFBYXBKLEVBQUUzSCxFQUFFN0QsRUFBRWlFLEVBQUVnQyxHQUFHN0ssTUFBSyxTQUFTL0MsR0FBR2t1RCxHQUFHemlELEVBQUV3aUIsRUFBRWp1QixFQUFFLFNBQVFpTixHQUFFLFNBQVNqTixHQUFHa3VELEdBQUd6aUQsRUFBRXdpQixFQUFFLEtBQUtqdUIsTUFEd0d1dkQsQ0FBRzV4RCxLQUFLOE4sRUFBRWUsR0FBR211QixHQUFFLElBQUkzdEIsRUFBRSx3QkFBd0JraEQsR0FBR3Z3RCxNQUFLLEVBQUcsS0FBSyxNQUFNKzhCLFdBQVVDLEdBQUUsSUFBSTN0QixFQUFFLHdCQUVoV3cvQyxHQUFHdnNELFVBQVVvdkIsR0FBRyxXQUFXLElBQUk1akIsRUFBRTlOLEtBQUssT0FBTyxJQUFJczhCLElBQUUsU0FBU3p0QixFQUFFMkcsR0FBRzFILEVBQUVlLEVBQUVmLEVBQUVlLElBQUl6SixLQUFLeUosRUFBRTJHLElBQUkxSCxFQUFFbUMsRUFBRXhRLEtBQUtvUCxHQUFHZixFQUFFMEgsRUFBRS9WLEtBQUsrVixHQUFhLFNBQVkxSCxHQUFHLElBQUllLEVBQUUsSUFBSVEsRUFBRSxXQUFXdkIsRUFBRUEsR0FBR0EsRUFBRUEsRUFBRW13QixTQUFTbndCLEVBQUVBLEVBQUV1MEIsR0FBRzJ0QixHQUFHbHFELE9BQU9WLE1BQUssV0FBVzBJLEVBQUVlLElBQUlmLEVBQUVHLEdBQUUsRUFBR3NpRCxHQUFHemlELEdBQUUsRUFBRyxLQUFLZSxPQUE3SGdqRCxDQUFHL2pELFFBQStJZ2hELEdBQUd4c0QsVUFBVWd1QixFQUFFLFNBQVN4aUIsRUFBRWUsR0FBRyxHQUFHZixFQUFFLENBQUMsSUFBSTBILEVBQUUxSCxFQUFFMEgsRUFBRTNILEVBQUVDLEVBQUVlLEVBQUVmLEVBQUVBLEdBQUdlLEVBQUV5aUIsR0FBR3hqQixFQUFFMEgsRUFBRSxLQUFLMUgsRUFBRUEsRUFBRUEsRUFBRWUsR0FBR2t1QixNQUFLbHVCLEVBQUU4a0IsR0FBR25lLEVBQUUzSCxHQUMzVixTQUFZQyxFQUFFZSxHQUFHLElBQUkyRyxFQUFFMUgsRUFBRWUsRUFBRWhCLEVBQUVDLEVBQUUwSCxFQUFFM0csRUFBRThrQixHQUFHOWxCLEVBQUUySCxFQUFQM0csQ0FBVWYsRUFBRUcsRUFBRUgsRUFBRW1DLEVBQUVuQyxFQUFFb2hDLElBQUlwaEMsRUFBRXhOLEdBQUc4RSxNQUFLLFNBQVM0RSxHQUFHNkUsRUFBRXlpQixHQUFHempCLEVBQUU3RCxFQUFFLEtBQUt3TCxNQUFLbEcsR0FBRSxTQUFTdEYsR0FBRzZFLEVBQUV5aUIsR0FBR3pqQixFQUFFLEtBQUs3RCxFQUFFd0wsTUFEZ09zOEMsQ0FBR2hrRCxFQUFFZSxHQUFHbXVCLEdBQUUsSUFBSTN0QixFQUFFLDRCQUE0QjJ0QixHQUFFLElBQUkzdEIsRUFBRSx3QkFDL0R3aEQsR0FBR3Z1RCxVQUFVeXZELFFBQVEsU0FBU2prRCxHQUErQixPQUE1QkEsRUFBRWttQyxHQUFHaDBDLEtBQUswekMsZUFBZTVsQyxHQUFVOU4sS0FBSzhOLEVBQUVBLElBQ3ZHLElBQUk2akQsR0FBRyxVQUFVRCxHQUFHLHVCQUE0SyxTQUFTTSxHQUFHbGtELEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBR3dCLEVBQUU5TSxLQUFLdkMsS0FBSyw2QkFBNkI2TixFQUFFZ0IsR0FBRzdPLEtBQUs2TyxFQUFFLElBQUk0aUQsR0FBRzNqRCxFQUFFZSxFQUFFMkcsR0FBRzAwQixHQUFFbHFDLEtBQUssV0FBV0EsS0FBSzZPLEdBQVcsU0FBU29qRCxHQUFHbmtELEVBQUVlLEVBQUUyRyxHQUFHLEdBQUcxSCxHQUFHK0MsRUFBRS9DLEVBQUUwa0IsaUJBQWlCLG9DQUFvQzFrQixFQUFFd0YsS0FBSyxJQUFJLE9BQU8sSUFBSTArQyxHQUFHbmpELEVBQUVmLEVBQUUwa0IsZUFBZWhkLEVBQUUxSCxFQUFFbUYsU0FBUyxNQUFNcEYsSUFBSSxPQUFPLEtBQU0sU0FBU3FrRCxNQUE4WCxTQUFTQyxHQUFHcmtELEdBQUdvOEIsR0FBRWxxQyxLQUFLLFdBQVc4TixFQUFFb2lCLElBQUlsd0IsS0FBSzhOLEVBQUVBLEVBQ3hzQyxTQUFTc2tELEdBQUd0a0QsR0FBbUIsR0FBaEJxa0QsR0FBRzV2RCxLQUFLdkMsS0FBSzhOLEdBQU05TixLQUFLOE4sRUFBRW9pQixJQUFJNmpCLEdBQUdzQixZQUFZLE1BQU0sSUFBSWhtQyxFQUFFLGlCQUFpQiw4RkFBd0csU0FBU2dqRCxHQUFHdmtELEVBQUVlLEdBQWtCLElBQUksSUFBSTJHLEtBQXZCa3BCLEdBQUVuOEIsS0FBS3ZDLEtBQUs4TixHQUFnQmUsRUFBRTdPLEtBQUt3VixHQUFHM0csRUFBRTJHLEdBQVcsU0FBUzg4QyxHQUFHeGtELEVBQUVlLEdBQUc3TyxLQUFLOE4sRUFBRUEsRUFBRTlOLEtBQUs2TyxFQUFFLEdBQUc3TyxLQUFLd1YsRUFBRXVjLEVBQUUveEIsS0FBS3U3QixHQUFHdjdCLE1BQU1naEMsR0FBR2hoQyxLQUFLOE4sRUFBRSxlQUFlOU4sS0FBS3dWLEdBQUcsSUFBSUEsRUFBRSxHQUFHM0csR0FBR0EsRUFBRTBqRCxhQUFhMWpELEVBQUUwakQsWUFBWUMsaUJBQWlCLy9CLEVBQUU1akIsRUFBRTBqRCxZQUFZQyxpQkFBZ0IsU0FBUzNrRCxHQUFHLElBQUk3RCxFQUFFLEtBQUtpRyxFQUFFLEdBQUcsR0FBR3BDLEVBQUUsQ0FBQ0EsRUFBRWc5QixNQUFNNTZCLEVBQUV1NkIsSUFBSTM4QixFQUFFZzlCLEtBQUtoOUIsRUFBRXVvQixjQUFjbm1CLEVBQUV3NkIsSUFBSTU4QixFQUFFdW9CLGFBQWF2b0IsRUFBRWs5QixpQkFBaUI5NkIsRUFBRXk2QixJQUFJLElBQUtsNUIsS0FBSzNELEVBQUVrOUIsZ0JBQWlCbnZCLGVBQWUvTixFQUFFaStCLGNBQWM3N0IsRUFBRXM2QixJQUFJMThCLEVBQUVpK0IsYUFBYSxJQUFJOWhDLEVBQUUsSUFBSTRnQyxHQUFHMzZCLEdBQUcsTUFBTWhDLElBQUlKLEVBQUU3RCxPQUFPNkQsRUFBRSxLQUFLQSxHQUFHMkgsRUFBRS9WLEtBQUtvTyxNQUFLNGtELEdBQUd6eUQsS0FBS3dWLEdBQzNqQixTQUFTaTlDLEdBQUcza0QsRUFBRWUsR0FBR2YsRUFBRWUsRUFBRUEsRUFBRXE3QixHQUFFcDhCLEVBQUUsa0JBQWtCZSxHQUNpTyxTQUFTNmpELEdBQUc1a0QsRUFBRWUsRUFBRTJHLEdBQStFLEdBQTVFeFYsS0FBS3N3QixFQUFFeGlCLEVBQUU5TixLQUFLTSxFQUFFdU8sRUFBRTdPLEtBQUtpTyxFQUFFdUgsRUFBRXhWLEtBQUt3VixFQUFFLElBQUl4VixLQUFLaVEsRUFBRSxLQUFLalEsS0FBSzZPLEVBQUUsS0FBSzdPLEtBQUs4TixFQUFFOU4sS0FBS3dWLEVBQUt4VixLQUFLaVEsRUFBRWpRLEtBQUt3VixFQUFFLE1BQU1qSyxNQUFNLDJEQUF5TSxTQUFTb25ELEdBQUc3a0QsRUFBRWUsR0FBR2YsRUFBRThrRCxPQUFPOWtELEVBQUVlLEVBQUV3ekIsR0FBbEgsU0FBWXYwQixFQUFFZSxHQUFHLE9BQUdBLEdBQVNmLEVBQUVBLEVBQUVBLEVBQUUwSCxFQUFFMUgsRUFBRUcsTUFBSVksRUFBRWYsRUFBRUEsRUFBRUEsRUFBRUEsR0FBRyxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFbUMsSUFBSW5DLEVBQUVBLEVBQUVBLEVBQUVtQyxHQUFVcEIsR0FBbUNna0QsQ0FBRy9rRCxFQUFFZSxJQUFJekosTUFBSyxXQUFXLE9BM01weEIsV0FBYyxJQUFJMEksRUFBRTBpQixFQUFFOW1CLFNBQVNtRixFQUFFLEtBQUssT0FBT3k2QixPQUFPeDdCLEVBQUVpdkIsS0FBSSxJQUFLVCxJQUFFLFNBQVM5bUIsR0FBRzNHLEVBQUUsV0FBV3k2QixPQUFPeDdCLEVBQUUyd0Isb0JBQW9CLG1CQUFtQjV2QixHQUFFLEdBQUkyRyxNQUFNMUgsRUFBRW1lLGlCQUFpQixtQkFBbUJwZCxHQUFFLE1BQU9TLEdBQUUsU0FBU2tHLEdBQWtELE1BQS9DMUgsRUFBRTJ3QixvQkFBb0IsbUJBQW1CNXZCLEdBQUUsR0FBVTJHLEtBMk1taEJzOUMsTUFBTzF0RCxNQUFLLFdBQVcsT0FBTzBJLEVBQUV3aUIsT0FBTWxyQixNQUFLLFdBQVd1dEQsR0FBRzdrRCxHQUFFLE1BQU13QixHQUFFLFNBQVNrRyxHQUFHMUgsRUFBRXhOLEVBQUVrVixJQUFJbTlDLEdBQUc3a0QsR0FBRSxNQUNuekIsU0FBU2lsRCxHQUFHamxELEdBQUc5TixLQUFLd1YsRUFBRTFILEVBQUU5TixLQUFLNk8sRUFBRTdPLEtBQUs4TixFQUFFLEtBQTBJLFNBQVNrbEQsR0FBR2xsRCxHQUFHLE9BQU9BLEVBQUVlLEdBQUcsSUFBSWYsRUFBRWUsRUFBRTJHLEdBQUcsRUFBRSxTQUFTeTlDLEdBQUdubEQsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRTNHLEVBQUUwVCxhQUFhelUsRUFBRWUsRUFBRWlnQyxHQUFHamdDLEVBQUVnaUMsS0FBSyxJQUFJL2lDLEVBQUVBLEVBQUUwSCxFQUNpSSxTQUFTMDlDLEdBQUdwbEQsRUFBRWUsR0FBRzdPLEtBQUs4TixFQUFFQSxHQUFHLEtBQUs5TixLQUFLNk8sRUFBRUEsR0FBRyxLQUFLczdCLEdBQUVucUMsS0FBSyxDQUFDbXpELGVBQWUxcEIsR0FBRzU2QixHQUFHLE1BQU0wUyxhQUFha29CLEdBQUczN0IsR0FBRyxRQUFxSCxTQUFTc2xELEdBQUd0bEQsRUFBRWUsRUFBRTJHLEVBQUUzSCxFQUFFN0QsRUFBRWlHLEdBQUdrNkIsR0FBRW5xQyxLQUFLLENBQUM2cUMsSUFBSS84QixFQUFFc29CLFlBQVl2b0IsR0FBRyxLQUFLd2xELFNBQVNycEQsR0FBRyxLQUFLb3BDLE1BQU01OUIsR0FBRyxLQUFLczJCLFlBQVk3N0IsR0FBRyxLQUFLbWdDLFdBQVd2aEMsSUFDNXlCLFNBQVN5a0QsR0FBR3hsRCxFQUFFZSxFQUFFMkcsR0FBR3hWLEtBQUswK0IsRUFBRSxHQUFHMStCLEtBQUt3d0IsRUFBRTFpQixFQUFFb1UsT0FBT2xpQixLQUFLNlEsRUFBRS9DLEVBQUVnUSxRQUFROWQsS0FBS21DLEVBQUUyTCxFQUFFeWxELFlBQVksS0FBSyxJQUFJMWxELEVBQUUsZUFBcUJxNkIsR0FBRyxnQkFBc0IsS0FBS2xvQyxLQUFLOE4sRUFBRSxJQUFJeXVDLEdBQUd2OEMsS0FBS3d3QixFQUFFNEMsRUFBR1QsR0FBSTlrQixHQUFHQyxFQUFFMGxELGdCQUFnQnRXLEdBQUdsOUMsS0FBSzhOLEVBQUVBLEVBQUUwbEQsZ0JBQWdCeHpELEtBQUs2TyxFQUFFLElBQUlra0QsR0FBRy95RCxLQUFLOE4sR0FBRzJsRCxHQUFHenpELEtBQUs2TyxFQUFFZ2lDLEtBQUtvaUIsR0FBR2p6RCxLQUFLNk8sRUFBRUEsR0FBR3E3QixHQUFFbHFDLEtBQUssZUFBZUEsS0FBSzZPLEVBQUVmLEdBQUc0bEQsR0FBRzF6RCxLQUFLd1YsR0FBRyxJQUFJMHNCLEdBQUUzL0IsS0FBS3ZDLE1BQU1BLEtBQUswUCxHQUFFLEVBQUcxUCxLQUFLbUMsR0FBR3VtQyxPQUFPMW9DLEtBQUtNLEVBQUVnd0QsR0FBR3R3RCxLQUFLbUMsRUFBRW5DLEtBQUt3d0IsRUFBRXh3QixLQUFLNlEsSUFBSTdRLEtBQUsyNUMsRUFBRSxHQUFHMzVDLEtBQUtpUSxFQUFFLEtBQUtqUSxLQUFLdXdCLEVBR2phLFNBQVl6aUIsR0FBRyxPQUFPLElBQUk0a0QsSUFBRyxXQUFXLE9BQU81a0QsRUFBRW8wQixHQUFFLE1BQUssU0FBU3J6QixHQUFHLFNBQU9BLEdBQUcsK0JBQStCQSxFQUFFeUUsU0FBWSxXQUFXLElBQUl6RSxFQUFFbWtELEdBQUdsbEQsRUFBRWUsR0FBR29qQixJQUFLLElBQUksT0FBTyxFQUFFcGpCLEVBQUVBLEVBQUUsS0FIeVA4a0QsQ0FBRzN6RCxNQUFNQSxLQUFLNHpELEVBQUU3aEMsRUFBRS94QixLQUFLbTFCLEdBQUduMUIsTUFBTSxJQUFJZ0ssRUFBRWhLLEtBQUtBLEtBQUt5eEIsR0FBRyxLQUFLenhCLEtBQUs0eUIsR0FBRyxTQUFTM2lCLEdBQUdqRyxFQUFFbW9CLEdBQUdsaUIsRUFBRXFnQixJQUN0ZnR3QixLQUFLZ3dCLEdBQUcsS0FBS2h3QixLQUFLcXlCLEdBQUcsU0FBU3BpQixHQUFHaXRDLEdBQUdsekMsRUFBRThELEVBQUVtQyxFQUFFdUYsSUFBSXhWLEtBQUtzVixFQUFFLEtBQUt0VixLQUFLNnpELEVBQUUsR0FBRzd6RCxLQUFLc3lCLEdBQUcsU0FBU3JpQixHQUFHNmpELEdBQUc5cEQsRUFBRWlHLEVBQUVBLElBQUlqUSxLQUFLNnZCLEdBQUcsS0FBSzd2QixLQUFLbXFDLEVBQUUsSUFBSW1vQixHQUFHdHlELEtBQUt3VixHQUFHMDBCLEdBQUVscUMsS0FBSyxjQUFjQSxLQUFLbXFDLEdBQTBHLFNBQVM0cEIsR0FBR2ptRCxFQUFFZSxHQUFHZixFQUFFa2lCLElBQUkyUixHQUFFN3pCLEVBQUVraUIsR0FBRyxzQkFBc0JsaUIsRUFBRThrQixLQUFLOWtCLEVBQUVraUIsR0FBR25oQixJQUFJbXlCLEdBQUdueUIsRUFBRSxzQkFBc0JmLEVBQUU4a0IsSUFBSSxTQUFTb2hDLEdBQUdsbUQsRUFBRWUsR0FBR2YsRUFBRXdILEdBQUdxc0IsR0FBRTd6QixFQUFFd0gsRUFBRSx3QkFBd0J4SCxFQUFFdWtCLEtBQUt2a0IsRUFBRXdILEVBQUV6RyxJQUFJbXlCLEdBQUdueUIsRUFBRSx3QkFBd0JmLEVBQUV1a0IsSUFDamQsU0FBU3loQyxHQUFHaG1ELEVBQUVlLEdBQUdmLEVBQUUrbEQsRUFBRWhsRCxFQUFFdXVDLEdBQUd0dkMsRUFBRUEsRUFBRSxlQUFxQm82QixHQUFHLGVBQXFCcDZCLEVBQUUrbEQsR0FBRyxNQUFvRCxTQUFTSSxHQUFHbm1ELEVBQUVlLEdBQUdmLEVBQUUraEIsSUFBSThSLEdBQUU3ekIsRUFBRStoQixHQUFHLG1CQUFtQi9oQixFQUFFd2tCLEtBQUt4a0IsRUFBRStoQixHQUFHaGhCLElBQUlteUIsR0FBR255QixFQUFFLG1CQUFtQmYsRUFBRXdrQixJQUF5RSxTQUFTNGhDLEdBQUdwbUQsR0FBRyxJQUFJLE9BQU8sT0FBYUEsRUFBRStDLEdBQUcydEMsT0FBTyxNQUFNM3ZDLEdBQUcsTUFBTSxJQUFJUSxFQUFFLGlCQUFpQixxRUFBcUV2QixFQUFFK0MsRUFBRSxPQUM1UixTQUFTc2pELEdBQUdybUQsR0FBR0EsRUFBRTRpQixHQUFHNWlCLEVBQUV5aUIsRUFBRTFoQixJQUFJZixFQUFFeWlCLEVBQUVzNEIsUUFBUWxuQixHQUFFN3pCLEVBQUUsZUFBZUEsRUFBRThsRCxHQUFHNXlCLEdBQUdsekIsRUFBRSxlQUFlQSxFQUFFOGxELElBQUksU0FBU1EsR0FBR3RtRCxHQUFHNnpCLEdBQUU3ekIsRUFBRSxlQUFlQSxFQUFFOGxELEdBQUc5bEQsRUFBRXlpQixFQUFFcWlDLE9BQU8sU0FBU2EsR0FBRzNsRCxFQUFFZSxHQUFHZixFQUFFc2tCLEdBQUd2akIsRUFBRXE3QixHQUFFcDhCLEVBQUUsT0FBT2UsR0FDN1YsU0FBU3dsRCxHQUFHdm1ELEdBQUcsSUFBSSxJQUFJZSxFQUFFLEdBQUcyRyxFQUFFLEVBQUVBLEVBQUUxSCxFQUFFNnJDLEVBQUVoNUMsT0FBTzZVLElBQUkzRyxFQUFFcFAsS0FBS3FPLEVBQUU2ckMsRUFBRW5rQyxHQUFHMUgsSUFBSSxPQUFPcXZCLEdBQUd0dUIsR0FBR3pKLE1BQUssV0FBVyxPQUFPMEksS0FBSSxTQUFTd21ELEdBQUd4bUQsR0FBR0EsRUFBRXhOLElBQUl3TixFQUFFNEIsSUFBSTVCLEVBQUU0QixHQUFFLEVBQUdrZ0QsR0FBRzloRCxFQUFFeE4sRUFBRXdOLElBQUksU0FBUzRsRCxHQUFHNWxELEVBQUVlLEdBQUdzN0IsR0FBRXI4QixFQUFFLENBQUMrOEIsSUFBSWg4QixFQUFFZzhCLElBQUl6VSxZQUFZdm5CLEVBQUV1bkIsYUFBYSxLQUFLaTlCLFNBQVN4a0QsRUFBRXdrRCxVQUFVLEtBQUtqZ0IsTUFBTXZrQyxFQUFFdWtDLE9BQU8sS0FBS21oQixjQUFjMWxELEVBQUUwbEQsZ0JBQWUsRUFBR3pvQixZQUFZajlCLEVBQUVpOUIsYUFBYSxLQUFLMG9CLFlBQVkzbEQsRUFBRTJsRCxjQUFhLEVBQUcvbkIsU0FBUzU5QixFQUFFNDlCLFVBQVUsS0FBSzFoQixTQUFTLElBQUltb0MsR0FBR3JrRCxFQUFFNGxELFVBQVU1bEQsRUFBRTZsRCxhQUFhQyxhQUFhLEtBQUs3bUQsRUFBRUEsRUFBRWUsRUFBRWYsRUFBRTIrQixTQUNyYyxTQUFTbW9CLE1BQU0sU0FBU0MsR0FBRy9tRCxHQUFHLE9BQU9pdkIsS0FBSTMzQixNQUFLLFdBQVcsR0FBRzBJLEVBQUU0aUIsRUFBRSxNQUFNLElBQUlyaEIsRUFBRSxrQkFBa0IsU0FBU3lsRCxHQUFHaG5ELEdBQUcsT0FBT3dtQixFQUFHeG1CLEVBQUU2bUQsY0FBYSxTQUFTOWxELEdBQUcsT0FBT0EsRUFBRXVoQyxjQUFhLFNBQVMya0IsR0FBR2puRCxFQUFFZSxHQUFHQSxJQUFJbW1ELEdBQUdsbkQsRUFBRWUsRUFBRXVoQyxZQUFZdGlDLEVBQUU2bUQsYUFBYWwxRCxLQUFLb1AsSUFBSSxTQUFTbW1ELEdBQUdsbkQsRUFBRWUsR0FBRzRsQixFQUFHM21CLEVBQUU2bUQsY0FBYSxTQUFTbi9DLEdBQUcsT0FBT0EsRUFBRTQ2QixZQUFZdmhDLEtBQUksU0FBU29tRCxHQUFHbm5ELEVBQUVlLEVBQUUyRyxJQUFJLE9BQU8zRyxHQUFHMkcsSUFBSTFILEVBQUVNLGVBQWVTLElBQUlxN0IsR0FBRXA4QixFQUFFZSxFQUFFMkcsR0FDN1csU0FBUzAvQyxHQUFHcG5ELEVBQUVlLEdBQUdmLEdBQUdlLElBQUlzN0IsR0FBRXI4QixFQUFFLENBQUMrOEIsSUFBSWg4QixFQUFFZzhCLElBQUl6VSxZQUFZdm5CLEVBQUV1bkIsWUFBWWk5QixTQUFTeGtELEVBQUV3a0QsU0FBU2pnQixNQUFNdmtDLEVBQUV1a0MsTUFBTW1oQixjQUFjMWxELEVBQUUwbEQsY0FBY3pvQixZQUFZajlCLEVBQUVpOUIsWUFBWTBvQixZQUFZM2xELEVBQUUybEQsWUFBWS9uQixTQUFTNTlCLEVBQUU0OUIsU0FBU2tvQixhQUFhLEtBQUs5bEQsRUFBRWtjLFNBQVNtZixHQUFFcDhCLEVBQUUsV0FQNFYsU0FBWUEsR0FBRyxPQUFPLElBQUlvbEQsR0FBR3BsRCxFQUFFQSxFQUFFQSxFQUFFZSxHQU9wWHNtRCxDQUFHdG1ELEVBQUVrYyxXQUFXbWYsR0FBRXA4QixFQUFFLFdBQVcsSUFBSW9sRCxJQUFJemdDLEVBQUU1akIsRUFBRThsRCxjQUFhLFNBQVNuL0MsR0FBR3UvQyxHQUFHam5ELEVBQUUwSCxNQVI0QixTQUFZMUgsRUFBRWUsR0FBR2YsRUFBRWUsRUFBRUEsRUFBRUEsRUFBRWYsRUFBRUEsRUFBRWUsRUFBRWYsRUFRdERzbkQsQ0FBR3RuRCxFQUFFZSxFQUFFQSxFQUFFQSxHQUFHcTdCLEdBQUVwOEIsRUFBRSxlQUFlQSxFQUFFZSxFQUFFZixHQUFHMmtELEdBQUcza0QsRUFBRXE4QixFQUFFdDdCLEVBQUVzN0IsRUFBRXQ3QixJQUNwWCxTQUFTd21ELEdBQUd2bkQsR0FBRyxPQUFPQSxFQUFFbzBCLElBQUk5OEIsTUFBSyxTQUFTeUosR0FBRyxJQUFJMkcsRUFBRTFILEVBQUUwbUQsWUFBWSxPQUMrRCxTQUFZMW1ELEVBQUVlLEdBQUcsT0FBT2ttQyxHQUFFam5DLEVBQUVBLEVBQUVvekMsR0FBRyxDQUFDN1AsUUFBUXhpQyxJQUFJekosS0FBSzJzQixFQUFFamtCLEVBQUVxdkIsR0FBR3J2QixJQURsSHduRCxDQUFHeG5ELEVBQUVlLEdBQUd6SixNQUFLLFdBQXFDLE9BQTFCb1EsR0FBR3kvQyxHQUFHbm5ELEVBQUUsZUFBYyxHQUFXZSxRQUNqSSxTQUFTMG1ELEdBQUd6bkQsRUFBRWUsR0FBR0EsRUFBRWdpQyxLQUFLL2lDLEVBQUVza0IsSUFBSXZqQixFQUFFZ2lDLE1BQU1vaUIsR0FBR25sRCxFQUFFZSxFQUFFQSxHQUFHZixFQUFFKzBCLGNBQWMsSUFBSXd2QixHQUFHLGlCQUFpQm9CLEdBQUczbEQsRUFBRWUsRUFBRWdpQyxLQUFLb2tCLEdBQUdubkQsRUFBRSxlQUFlQSxFQUFFZSxFQUFFZixJQUcyRCxTQUFTMG5ELEdBQUcxbkQsRUFBRWUsR0FBRyxPQUFPd21ELEdBQUd2bkQsR0FBRzFJLE1BQUssV0FBVyxHQUFHNHRCLEVBQUc4aEMsR0FBR2huRCxHQUFHZSxHQUFHLE9BQU93bEQsR0FBR3ZtRCxHQUFHMUksTUFBSyxXQUFXLE1BQU0sSUFBSWlLLEVBQUUsaUNBRTdSLFNBQVNvbUQsR0FBRzNuRCxFQUFFZSxFQUFFMkcsR0FBdUIsT0FBTzQwQixHQUFHLENBQUN1bUIsS0FBSzdpRCxFQUFFMGtDLFdBQWhDeUIsR0FBR3BsQyxHQUEwQzZtRCxtQkFBdkM3bUQsRUFBRTJnQyxHQUFHM2dDLEdBQXVEOG1ELGNBQWNuZ0QsSUFBSSxTQUFTb2dELEdBQUc5bkQsRUFBRWUsR0FBVyxPQUFSMG1ELEdBQUd6bkQsRUFBRWUsR0FBVWYsRUFBRStuRCxTQUFTendELE1BQUssV0FBVyxPQUFPMEksS0FPL0ssU0FBU2dvRCxHQUFHaG9ELEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsSUFBSTArQixLQUFLLE9BQU8xTCxHQUFFLElBQUkzdEIsRUFBRSxnREFBZ0QsR0FBR3ZCLEVBQUVtQyxJQUFJakcsRUFBRSxPQUFPZ3pCLEdBQUVsdkIsRUFBRW1DLEdBQUcsSUFBSUEsRUFBRXMvQixHQUFHLzVCLEVBQUU0NkIsWUFBWW5pQyxFQUFFczZCLEdBQUd6NkIsRUFBRSs4QixJQUFJLE9BQU92YSxFQUFFLE9BQU9zWSxNQUFNakIsT0FBTzc1QixFQUFFM0wsR0FBR3FULEVBQUUyOEIsa0JBQWtCN2hCLEVBQUV1M0IsR0FBRy81QyxFQUFFM0wsRUFBRTJMLEVBQUUwaUIsRUFBRTFpQixFQUFFK0MsRUFBRWhDLEVBQUUyRyxFQUFFLEtBQUt2SCxFQUFFLGdCQUFzQixLQUFLLEtBQUssS0FBS0gsRUFBRTIrQixXQUFXLElBQUlwcUMsRUFBRTBqQyxHQUFHelYsRUFBRXJnQixHQUFHQSxFQUFFK2hCLEdBQUcvaEIsR0FBR0EsRUFBRTRoQixJQUMvSyxPQURtTGhrQixFQUFFQSxJQUFJekksTUFBSyxXQUFpQixHQUFOMndELEdBQUdqb0QsSUFBTzlELEVBQUUsT0FBTzhELEVBQUVvMEIsSUFBSTk4QixNQUFLLGtCQUFnQkEsTUFBSyxXQUFXLE9BQU82cUQsR0FBR25pRCxFQUFFeE4sRUFBRStCLEVBQUV3TSxFQUFFMkcsRUFBRXZILElBQUlxaUIsRUFBRXhpQixFQUFFMitCLGFBQVlybkMsTUFBSyxXQUFXLE9BQU8sSUFBSWszQixJQUFFLFNBQVNwM0IsRUFBRXVMLEdBQUczQyxFQUFFd2pCLEdBQUd6aUIsRUFBRSxLQUFLLElBQUlRLEVBQUUsMkJBQ25mdkIsRUFBRXdpQixHQUFHLE1BQU14aUIsRUFBRUcsRUFBRS9JLEVBQUU0SSxFQUFFaW5DLEVBQUV0a0MsRUFBRTNDLEVBQUV3aUIsRUFBRXJpQixFQUFFSCxFQUFFMEgsRUFBRTQ2QyxHQUFHdGlELEVBQUV4TixFQUFFd04sRUFBRWUsRUFBRXhNLEVBQUU0TCxTQUFPN0ksTUFBSyxTQUFTRixHQUFZLE9BQVQ3QyxHQUFHeWpDLEdBQUd6akMsR0FBVTZDLEVBQUVrbEMsR0FBR2xsQyxHQUFHLFFBQU9vSyxHQUFFLFNBQVNwSyxHQUFZLE1BQVQ3QyxHQUFHeWpDLEdBQUd6akMsR0FBUzZDLEtBQVl5MEMsR0FBRTdyQyxFQUFFRCxFQUFFN0QsR0FDcEosU0FBU2dzRCxHQUFHbG9ELEVBQUVlLEVBQUUyRyxFQUFFM0gsRUFBRTdELEdBQUcsSUFBSTArQixLQUFLLE9BQU8xTCxHQUFFLElBQUkzdEIsRUFBRSxnREFBZ0QsR0FBR3ZCLEVBQUVtQyxJQUFJakcsRUFBRSxPQUFPZ3pCLEdBQUVsdkIsRUFBRW1DLEdBQUcsSUFBSUEsRUFBRSxLQUFLaEMsRUFBRXM2QixHQUFHejZCLEVBQUUrOEIsSUFBSSxPQUEyVCxPQUFwVGg5QixFQUFFQSxJQUFJekksTUFBSyxXQUFpQixHQUFOMndELEdBQUdqb0QsSUFBTzlELEVBQUUsT0FBTzhELEVBQUVvMEIsSUFBSTk4QixNQUFLLGtCQUFnQkEsTUFBSyxXQUFrQixPQUFQMEksRUFBRW1vRCxHQUFHaG9ELEVBQVNvbUQsR0FBR3ZtRCxNQUFLMUksTUFBSyxTQUFTa3JCLEdBQTBDLE9BQXZDeGlCLEVBQUVrakIsS0FBWVYsR0FBUEEsRUFBRXhpQixFQUFFa2pCLElBQU9uaUIsRUFBRTlJLElBQUltd0QsR0FBR3BvRCxFQUFFMmtCLElBQUluQyxFQUFFeGlCLElBQVd3aUIsS0FBSWxyQixNQUFLLFdBQVcsT0FBTzhxRCxHQUFHcGlELEVBQUV4TixFQUFFdU8sRUFBRTJHLEVBQUV2SCxFQUFFSCxFQUFFMitCLGFBQVluOUIsR0FBRSxTQUFTZ2hCLEdBQU8sR0FBSnJnQixFQUFFcWdCLEVBQUt4aUIsRUFBRWtqQixHQUFHLE9BQU9tbEMsR0FBR3JvRCxFQUFFa2pCLElBQUksTUFBTS9nQixLQUFLN0ssTUFBSyxXQUFXLEdBQUc2SyxFQUFFLE1BQU1BLEtBQVkwcEMsR0FBRTdyQyxFQUFFRCxFQUFFN0QsR0FDdGQsU0FBUytyRCxHQUFHam9ELEdBQUcsSUFBSUEsRUFBRXhOLElBQUl3TixFQUFFNEIsRUFBRSxDQUFDLEdBQUc1QixFQUFFeE4sSUFBSXdOLEVBQUU0QixFQUFFLE1BQU0sSUFBSUwsRUFBRSxrQkFBa0IsTUFBTSxJQUFJQSxFQUFFLGdDQUdyRixTQUFTc3FDLEdBQUU3ckMsRUFBRWUsRUFBRTJHLEdBQUcsSUFBSTNILEVBQ3RCLFNBQVlDLEVBQUVlLEVBQUUyRyxHQUFHLE9BQU8xSCxFQUFFbUMsSUFBSXVGLEdBQUczRyxFQUFFb3ZCLFNBQVNqQixHQUFFbHZCLEVBQUVtQyxJQUFJcEIsRUFBRVMsR0FBRSxTQUFTekIsR0FBZ0ksTUFBNUhBLEdBQUcsc0JBQXNCQSxFQUFFeUYsTUFBTSwyQkFBMkJ6RixFQUFFeUYsT0FBT3hGLEVBQUVtQyxHQUFHbkMsRUFBRSswQixjQUFjLElBQUl3dkIsR0FBRyxvQkFBb0J2a0QsRUFBRW1DLEVBQUVwQyxHQUFTQSxLQURqTHVvRCxDQUFHdG9ELEVBQUVlLEVBQUUyRyxHQUEyQyxPQUF4QzFILEVBQUU0d0IsRUFBRWovQixLQUFLb08sR0FBR0EsRUFBRTBqQixJQUFHLFdBQVdpRCxFQUFHMW1CLEVBQUU0d0IsRUFBRTd3QixNQUFZQSxFQUFFeUIsR0FBRSxTQUFTdEYsR0FBRyxJQUFJaUcsRUFBRSxLQUFrRixNQUE3RWpHLEdBQUcsb0NBQW9DQSxFQUFFc0osT0FBT3JELEVBQUVnaUQsR0FBR2pvRCxFQUFFeW9CLElBQUl5aEMsR0FBR3BtRCxHQUFHaWtCLEVBQUVqa0IsRUFBRTJyQixHQUFHM3JCLEtBQVdtQyxHQUFHakcsS0FHbE0sU0FBU3FzRCxHQUFHdm9ELEdBQUcsSUFBSUEsRUFBRW9VLE9BQU8sT0FBTyxLQUFLLElBQUlyVCxFQUFFLENBQUNxVCxPQUFPcFUsRUFBRW9VLE9BQU9xeEMsV0FBV3psRCxFQUFFeWxELFdBQVd6MUMsUUFBUWhRLEVBQUVnUSxRQUFRMDFDLGVBQWUxbEQsRUFBRTBsRCxnQkFBZ0JoK0MsRUFBRSxHQUFHLElBQUcxSCxFQUFFd29ELGtCQUFpQnhvRCxFQUFFd29ELGdCQUFnQmhsQixZQUF5RyxPQUFPLEtBQXBHOTdCLEVBQUVxN0IsSUFBSS9pQyxFQUFFd29ELGdCQUFnQmhsQixZQUFZOTdCLEVBQUUrTSxhQUFhelUsRUFBRXdvRCxnQkFBZ0IvekMsY0FBYyxLQUFzQixJQUFJMVUsRUFBRSxJQUFJeWxELEdBQUd6a0QsRUFBRTJHLEVBQUUxSCxHQUE2RyxPQUExR0EsRUFBRTZtRCxjQUFjbGlDLEVBQUUza0IsRUFBRTZtRCxjQUFhLFNBQVMzcUQsR0FBR0EsR0FBRytxRCxHQUFHbG5ELEVBQUV1OEIsR0FBR3BnQyxPQUFNOEQsRUFBRXlvRCxrQkFBa0Ixb0QsRUFBRW9vRCxHQUFHbm9ELEVBQUV5b0QsaUJBQXdCMW9ELEVBQ3JKLFNBQVMyb0QsR0FBRzFvRCxHQUFHOU4sS0FBSzhOLEVBQUVBLEVBQUU5TixLQUFLNk8sRUFBRXM5QyxLQXBDdUNzRixHQUFHbnZELFVBQVV3N0IsR0FBRyxTQUFTaHdCLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUssT0FBTzhOLEVBQUV3b0IsR0FBR3QyQixLQUFLOE4sRUFBRUEsRUFBRTlOLEtBQUt3VixHQUFHcFEsTUFBSyxTQUFTb1EsR0FBRyxJQUFJM0gsRUFBRThuQixHQUFHOW1CLEVBQUVvQixHQUFvQyxjQUExQnBDLEVBQUU4akQsV0FBVzlqRCxFQUFFNmpELElBQUk3N0IsR0FBRWhvQixFQUFFMkgsR0FBVTNHLEVBQUVaLEVBQUVKLE9BQXdIa0QsRUFBRWloRCxHQUFHM2lELEdBQW9MNmlELEdBQUc1dkQsVUFBVWcwQixHQUFHLFNBQVN4b0IsRUFBRWUsRUFBRTJHLEdBQUcsT0FBTzNHLEVBQUVnSixNQUFNNDRCLEdBQWdDLFNBQVkzaUMsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHLE9BQU8ySCxFQUFFcWUsS0FBS3p1QixNQUFLLFNBQVM0RSxHQUFnRyxPQUE3RkEsRUFBRSxDQUFDcW5DLFFBQVFybkMsUUFBRyxJQUFxQjZELElBQUk3RCxFQUFFb3NCLFlBQVl2b0IsR0FBR2dvQixHQUFFN3JCLEVBQUUsQ0FBQ2kxQyxzQkFBc0JwTCxHQUFHL2xDLEVBQUVBLEtBQVlpbkMsR0FBRWxtQyxFQUFFbXlDLEdBQUdoM0MsTUFBNUx5c0QsQ0FBR3oyRCxLQUFLOE4sRUFBRWUsRUFBRTJHLEdBQXFMLFNBQVkxSCxFQUFFZSxFQUFFMkcsR0FBRyxPQUFPQSxFQUFFcWUsS0FBS3p1QixNQUFLLFNBQVN5SSxHQUFtRSxPQUFyQ2dvQixHQUEzQmhvQixFQUFFLENBQUNxb0MscUJBQXFCcm9DLEdBQU8sQ0FBQ294QyxzQkFBc0JwTCxHQUFHL2xDLEVBQUVBLEtBQVlpbkMsR0FBRWxtQyxFQUFFb3lDLEdBQUdwekMsTUFBbFQ2b0QsQ0FBRzEyRCxLQUFLOE4sRUFBRWUsSUFBNlZrQyxFQUFFb2hELEdBQUdELElBQ3ZoQ25oRCxFQUFFcWhELEdBQUdELElBQWdFcGhELEVBQUVzaEQsR0FBRzN6QixLQUM5S3R0QixFQUFFa2hELEdBQUdod0QsV0FBWWk1QixHQUFHLFNBQVN6dEIsR0FBRzJrRCxHQUFHenlELEtBQXZILFNBQVk4TixHQUFHLElBQUllLEVBQUUsR0FBc0QsT0FBbkQ0akIsRUFBRTNrQixFQUFFNm9ELFNBQVMsSUFBRyxTQUFTbmhELElBQUlBLEVBQUVtMUIsR0FBR24xQixLQUFLM0csRUFBRXBQLEtBQUsrVixNQUFZM0csRUFBMEMrbkQsQ0FBRzlvRCxFQUFFOHlCLE1BQXNEeHZCLEVBQUUrbUIsR0FBRyxXQUFXLE9BQU9uNEIsS0FBSzhOLEVBQUVvMEIsSUFBSTk4QixNQUFLLFNBQVMwSSxHQUFHLE9BQU8sSUFBSTBpQyxHQUFHMWlDLEVBQUUsVUFBU3NELEVBQUU4bkIsR0FBRyxTQUFTcHJCLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUV4VixLQUFLNk4sRUFBRTdOLEtBQUs4TixFQUFFQSxFQUFFLE9BQU85TixLQUFLbTRCLEtBQUsveUIsTUFBSyxTQUFTNEUsR0FBRyxPQUFPOEQsRUFBRXdvQixHQUFHem9CLEVBQUU3RCxFQUFFNkUsTUFBS3pKLE1BQUssU0FBUzRFLEdBQWEsT0FBVnVyRCxHQUFHLy9DLEVBQUUxSCxFQUFFOUQsR0FBVXdMLEVBQUUxSCxFQUFFK25ELGFBQ3pZemtELEVBQUVvdEIsR0FBRyxTQUFTMXdCLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUt3VixFQUFFLGlCQUFrQjFILEVBQUVBLEVBQUVBLEVBQUUrOEIsSUFBSWg5QixFQUFFN04sS0FBSzhOLEVBQUVBLEVBQUUsT0FBTzlOLEtBQUs4TixFQUFFbzBCLElBQUk5OEIsTUFBSyxTQUFTNEUsR0FBRyxPQUFPK3FDLEdBQUVsbkMsRUFBRTJ6QyxHQUFHLENBQUNuUSxRQUFRcm5DLEVBQUVtc0MsZ0JBQWdCM2dDLE9BQU1wUSxNQUFLLFNBQVM0RSxHQUFHLElBQUlpRyxFQUFFb2tCLEVBQUd4bEIsRUFBRUEsR0FBRSxTQUFTWixHQUFHLE9BQU9BLEVBQUU0OEIsS0FBS3IxQixLQUFzQixPQUFsQmk5QyxHQUFHNWpELEVBQUVvQixHQUFHc2xELEdBQUcxbUQsRUFBRWYsRUFBRTlELEdBQVU2RSxFQUFFZixFQUFFK25ELFNBQVN2bUQsR0FBRSxTQUFTckIsR0FBRyxHQUFHLDJCQUEyQkEsRUFBRXFGLEtBQUssTUFBTXJGLFNBQVFtRCxFQUFFcWhCLEVBQUUsV0FBVyxNQUFNLENBQUM4L0IsWUFBWSxDQUFDQyxnQkFBZ0JsK0IsRUFBR3QwQixLQUFLNk8sR0FBRSxTQUFTZixHQUFHLE9BQU9BLEVBQUUya0IsVUFBaU1pZ0MsR0FBR3B3RCxVQUFVdW1ELE1BQU0sV0FBVzdvRCxLQUFLOE4sRUFBRTlOLEtBQUt3VixFQUFFbTlDLEdBQUczeUQsTUFBSyxJQUNqb0IweUQsR0FBR3B3RCxVQUFVc3dELEtBQUssV0FBVzV5RCxLQUFLNk8sSUFBSTdPLEtBQUs2TyxFQUFFb3ZCLFNBQVNqK0IsS0FBSzZPLEVBQUUsT0FBa0Rra0QsR0FBR3p3RCxVQUFVbXdCLEVBQUUsV0FBVyxNQUFNLENBQUN2USxPQUFPbGlCLEtBQUt3VixFQUFFQSxFQUFFK00sYUFBYXZpQixLQUFLOE4sRUFBRXdqQyxZQUFZdHhDLEtBQUs2TyxHQUFHN08sS0FBSzZPLEVBQUU5TyxXQUFXbXhELGVBQWU4QixHQUFHaHpELFFBQ2pCK3lELEdBQUd6d0QsVUFBVXFtQixTQUFTLFNBQVM3YSxHQUFTLE9BQU5BLElBQUlBLEVBQVM5TixLQUFLNk8sSUFBSTdPLEtBQUs4TixFQUFFa3ZCLEdBQUUsSUFBSTN0QixFQUFFLHVCQUF1QnZCLElBQUk5TixLQUFLNk8sR0FBR29qQixJQUFLK2dDLEdBQUdoekQsTUFBTSxJQUFJQSxLQUFLOE4sRUFBNVYsU0FBWUEsRUFBRWUsR0FBRyxPQTlGakIsU0FBWWYsRUFBRWUsR0FBRyxPQUFPLElBQUl5dEIsSUFBRSxTQUFTOW1CLEVBQUUzSCxHQUFHLGlCQUFpQmdCLEVBQUVnb0QsWUFBWWhvRCxFQUFFaW9ELGVBQWUsc0JBQXNCam9ELEVBQUVnb0QsWUFBWWhvRCxFQUFFeUUsS0FBSytwQyxHQUFHdnZDLEVBQUVBLEVBQUUwaUIsRUFBRSxRQUFRcHRCLG1CQUFtQjBLLEVBQUUwSCxJQUFHLFNBQVN4TCxHQUFHQSxFQUFFQSxFQUFFbkYsTUFBTWdKLEVBQUU4ekMsR0FBRzMzQyxJQUFJQSxFQUFFMm5DLGNBQWMzbkMsRUFBRThzRCxjQUFjdGhELEVBQUV4TCxHQUFHNkQsRUFBRSxJQUFJd0IsRUFBRSxtQkFBbUJ4QixFQUFFLElBQUl3QixFQUFFLDZCQUE0QixPQUFPdTFCLEdBQUcvMUIsR0FBRzlPLFdBQVcrTixFQUFFRyxFQUFFSCxFQUFFMkMsRUFBRTNLLE9BQU8rSCxFQUFFLElBQUl3QixFQUFFLHNCQThGMVUwbkQsQ0FBR2pwRCxFQUFFMEgsRUFBRTNHLEdBQUd6SixNQUFLLFNBQVNvUSxHQUE4QyxPQUEzQzFILEVBQUVlLEVBQUVpZ0MsR0FBR3Q1QixFQUFFbThCLGNBQWM3akMsRUFBRUEsRUFBRTBILEVBQUVzaEQsY0FBb0IsQ0FBQ3hsQixZQUFZeGpDLEVBQUVlLEVBQUU5TyxXQUFXd2lCLGFBQWF6VSxFQUFFQSxNQUFLd0IsR0FBRSxTQUFTa0csR0FBaUQsS0FBOUMsMkJBQTJCQSxFQUFFbEMsT0FBT3hGLEVBQUVBLEVBQUUsTUFBWTBILEtBQXdJd2hELENBQUdoM0QsS0FBSyxDQUFDNjJELFdBQVcsZ0JBQWdCQyxjQUFjOTJELEtBQUs4TixJQUFJaXZCLEdBQUUsTUFBTUEsR0FBRSxDQUFDdVUsWUFBWXR4QyxLQUFLNk8sRUFBRTlPLFdBQVd3aUIsYUFBYXZpQixLQUFLOE4sS0FBd0pvbEQsR0FBRzV3RCxVQUFVbXdCLEVBQUUsV0FBVyxNQUFNLENBQUNpaUMsWUFBWTEwRCxLQUFLNk8sRUFBRTRsRCxVQUFVejBELEtBQUs4TixJQUU1Z0JpRCxFQUFFdWlELEdBQUdweEIsSUFBR294QixHQUFHaHhELFVBQVU2dkIsR0FBRyxTQUFTcmtCLEdBQUc5TixLQUFLeXhCLEdBQUczakIsRUFBRW12QyxHQUFHajlDLEtBQUs4TixFQUFFQSxJQUFJd2xELEdBQUdoeEQsVUFBVTZ1QixHQUFHLFdBQVcsT0FBT254QixLQUFLeXhCLElBQ2hMNmhDLEdBQUdoeEQsVUFBVXN4QixHQUFHLFdBQVcsT0FBT2MsRUFBRzEwQixLQUFLNnpELElBQW1HUCxHQUFHaHhELFVBQVU2eUIsR0FBRyxXQUFXbjFCLEtBQUt1d0IsRUFBRTFoQixJQUFJN08sS0FBS3V3QixFQUFFcWlDLE9BQU81eUQsS0FBS3V3QixFQUFFczRCLFVBRWdMM2UsR0FBRW9wQixHQUFHaHhELFVBQVUsYUFBYSxhQUVsSDhPLEVBQUVraUQsR0FBR2h4RCxXQUFZdXpELE9BQU8sV0FBVyxJQUFJL25ELEVBQUU5TixLQUFLLE9BQU8yNUMsR0FBRTM1QyxLQUFLNjBELEdBQUc3MEQsTUFBTW9GLE1BQUssV0FBVyxPQUFPaXdELEdBQUd2bkQsR0FBRzFJLE1BQUssV0FBVyxPQUFPaXZELEdBQUd2bUQsTUFBSzFJLEtBQUt3dkQsU0FDdlh4akQsRUFBRTZsRCxHQUFHLFNBQVNucEQsR0FBRyxPQUFPOU4sS0FBS2tpQyxFQUFFcDBCLEdBQUcxSSxNQUFLLFNBQVN5SixHQUFHLE9BQU8sSUFBSWtpRCxHQUFHbGlELE9BQU11QyxFQUFFOHdCLEVBQUUsU0FBU3AwQixHQUFHLElBQUllLEVBQUU3TyxLQUFLLE9BQU8yNUMsR0FBRTM1QyxLQUFLNjBELEdBQUc3MEQsTUFBTW9GLE1BQUssV0FBVyxPQUFPeUosRUFBRUEsRUFBRThaLFNBQVM3YSxNQUFLMUksTUFBSyxTQUFTb1EsR0FBRyxJQUFJQSxFQUFFLE1BQU0sSUFBSW5HLEVBQUUsa0JBQXlJLE9BQXZIbUcsRUFBRTg3QixhQUFhemlDLEVBQUV1akIsS0FBS3FoQyxHQUFHNWtELEVBQUUyRyxFQUFFODdCLGFBQWF6aUMsRUFBRWcwQixjQUFjLElBQUl3dkIsR0FBRyxrQkFBa0I0QyxHQUFHcG1ELEVBQUUsZUFBZTJHLEVBQUUrTSxjQUFxQi9NLEVBQUU4N0IsaUJBRTlkbGdDLEVBQUUrckIsR0FBRyxTQUFTcnZCLEdBQWEsS0FBVkEsRUFBRUEsRUFBRW9wRCxTQUFjcHBELEVBQUVuTixPQUFPLE1BQU0sSUFBSTBPLEVBQUUsa0JBQXlCcWtELEdBQUcxekQsS0FBSyxDQUFDNnFDLEtBQWhCLzhCLEVBQUVBLEVBQUUsSUFBa0JxcEQsUUFBUS9nQyxZQUFZdG9CLEVBQUVzb0IsWUFBWWk5QixTQUFTdmxELEVBQUVpeEMsU0FBUzNMLE1BQU10bEMsRUFBRXNsQyxNQUFNbWhCLGdCQUFnQnptRCxFQUFFeW1ELGNBQWN6b0IsWUFBWWgrQixFQUFFZytCLFlBQVk0b0IsWUFBWTVtRCxFQUFFNG1ELFlBQVlELFVBQVUzbUQsRUFBRTJtRCxVQUFVaG9CLFNBQVMzK0IsRUFBRTIrQixXQUFXLElBQUksSUFBSTU5QixFQUM1UyxTQUFZZixHQUFHLE9BQU9BLEVBQUVBLEVBQUVzcEQsbUJBQW1CdHBELEVBQUVuTixPQUFPMnpCLEVBQUd4bUIsR0FBRSxTQUFTZSxHQUFHLE9BQU8sSUFBSXVrRCxHQUFHdmtELEVBQUV3b0QsTUFBTXhvRCxFQUFFdWhDLFdBQVd2aEMsRUFBRXVrQyxNQUFNdmtDLEVBQUV1bkIsWUFBWXZuQixFQUFFa3dDLFNBQVNsd0MsRUFBRWk5QixnQkFBZSxHQURrSmoxQixDQUFHL0ksR0FBRzBILEVBQUUsRUFBRUEsRUFBRTNHLEVBQUVsTyxPQUFPNlUsSUFBSXUvQyxHQUFHLzBELEtBQUs2TyxFQUFFMkcsSUFBSXkvQyxHQUFHajFELEtBQUssZ0JBQWdCQSxLQUFLb3pDLE9BQU90bEMsRUFBRXdwRCxjQUFpQnQzRCxLQUFLMjBELGNBQWMzMEQsS0FBSzIwRCxhQUFhaDBELFNBQVNYLEtBQUs2aUMsY0FBYyxJQUFJd3ZCLEdBQUcsZUFBZSxDQUFDenhCLEdBQUc5eUIsTUFDeFVzRCxFQUFFc3NCLEdBQUcsU0FBUzV2QixHQUFxSyxPQUFsS2k4QixHQUFHLCtKQUFzSy9wQyxLQUFLdTJCLEdBQUd6b0IsSUFDaldzRCxFQUFFbWxCLEdBQUcsU0FBU3pvQixHQUFHLElBQUllLEVBQUU3TyxLQUFLd1YsRUFBRSxLQUFLLE9BQU9ta0MsR0FBRTM1QyxLQUFLOE4sRUFBRTBILEVBQUV4VixLQUFLOE4sRUFBRTlOLEtBQUs2cUMsS0FBS3psQyxNQUFLLFNBQVN5SSxHQUErQyxPQUE1QzBuRCxHQUFHMW1ELEVBQUVoQixHQUFHMkgsRUFBRWlnRCxHQUFHNW1ELEVBQUVoQixFQUFFLGtCQUFrQmdCLEVBQUVvQixFQUFFLEtBQVlwQixFQUFFZ25ELFlBQVd6d0QsTUFBSyxXQUFXLE9BQU9vUSxNQUFJLElBQTJJcEUsRUFBRXNyQixHQUFHLFNBQVM1dUIsR0FBaUosT0FBOUlpOEIsR0FBRywySUFBa0ovcEMsS0FBSzgxQixHQUFHaG9CLElBQzNlc0QsRUFBRTBrQixHQUFHLFNBQVNob0IsR0FBRyxJQUFJZSxFQUFFN08sS0FBS3dWLEVBQUUsS0FBSyxPQUFPbWtDLEdBQUUzNUMsS0FBS3cxRCxHQUFHeDFELEtBQUs4TixFQUFFc2lDLFlBQVlockMsTUFBSyxXQUFXLE9BQU95SixFQUFFcXpCLE9BQU05OEIsTUFBSyxTQUFTeUksR0FBRyxPQUFPQyxFQUFFZSxFQUFFQSxFQUFFZixFQUFFRCxNQUFLekksTUFBSyxTQUFTeUksR0FBb0IsT0FBakIySCxFQUFFaWdELEdBQUc1bUQsRUFBRWhCLEVBQUUsUUFBZStuRCxHQUFHL21ELEVBQUVoQixNQUFLekksTUFBSyxXQUFXLE9BQU9vUSxPQUFNcEUsRUFBRXVyQixHQUFHLFNBQVM3dUIsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRXhWLEtBQUssT0FBTzI1QyxHQUFFMzVDLEtBQUt3MUQsR0FBR3gxRCxLQUFLLFNBQVNvRixNQUFLLFdBQVcsT0FBTzByRCxHQUFHb0QsR0FBRzErQyxHQUFHMUgsRUFBRWUsRUFBRWtqQixFQUFFdmMsRUFBRXNnQixHQUFHdGdCLFNBQVFwRSxFQUFFb3NCLEdBQUcsU0FBUzF2QixFQUFFZSxHQUFHLElBQUkyRyxFQUFFeFYsS0FBSyxPQUFPMjVDLEdBQUUzNUMsS0FBSys4QixLQUFJMzNCLE1BQUssV0FBVyxPQUFPMHJELEdBQUdvRCxHQUFHMStDLEdBQUcxSCxFQUFFZSxFQUFFa2pCLEVBQUV2YyxFQUFFK2dCLEdBQUcvZ0IsUUFBTSxJQUN6UHBFLEVBQUVnbUIsR0FBRyxTQUFTdHBCLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUssT0FBTzI1QyxHQUFFMzVDLEtBQUtBLEtBQUtraUMsSUFBSTk4QixNQUFLLFNBQVNvUSxHQUFHLE9BQU8zRyxFQUFFZixFQUFFc3BCLEdBQUc1aEIsRUFBRTFILE1BQUsxSSxNQUFLLFNBQVNvUSxHQUFXLE9BQVIrL0MsR0FBRzFtRCxFQUFFMkcsR0FBVTNHLEVBQUVnbkQsY0FBYXprRCxFQUFFbXZCLEdBQUcsU0FBU3p5QixHQUFHLElBQUllLEVBQUU3TyxLQUFLLE9BQU8yNUMsR0FBRTM1QyxLQUFLQSxLQUFLa2lDLElBQUk5OEIsTUFBSyxTQUFTb1EsR0FBRyxPQUFPMUgsRUFBRWUsRUFBRUEsRUFBRWYsRUFBRTBILE1BQUtwUSxNQUFLLFNBQVNvUSxHQUFXLE9BQVIrL0MsR0FBRzFtRCxFQUFFMkcsR0FBVTNHLEVBQUVnbkQsY0FDcmJ6a0QsRUFBRWttQixHQUFHLFNBQVN4cEIsR0FBRyxJQUFJZSxFQUFFN08sS0FBSyxPQUFPMjVDLEdBQUUzNUMsS0FBS0EsS0FBS2tpQyxJQUFJOThCLE1BQUssU0FBU29RLEdBQUcsT0FBTzNHLEVBQUVmLEVBQUV3cEIsR0FBRzloQixFQUFFMUgsTUFBSzFJLE1BQUssU0FBU29RLEdBQVcsT0FBUisvQyxHQUFHMW1ELEVBQUUyRyxHQUFVM0csRUFBRWduRCxjQUMzSHprRCxFQUFFaW1CLEdBQUcsU0FBU3ZwQixHQUFHLFFBQUcsSUFBU0EsRUFBRXNvQixrQkFBYSxJQUFTdG9CLEVBQUV1bEQsU0FBUyxPQUFPd0IsR0FBRzcwRCxNQUFNLElBQUk2TyxFQUFFN08sS0FBSyxPQUFPMjVDLEdBQUUzNUMsS0FBS0EsS0FBS2tpQyxJQUFJOThCLE1BQUssU0FBU29RLEdBQUcsT0FBTzNHLEVBQUVmLEVBQUV1cEIsR0FBRzdoQixFQUFFLENBQUM0Z0IsWUFBWXRvQixFQUFFc29CLFlBQVkyb0IsU0FBU2p4QyxFQUFFdWxELGNBQWFqdUQsTUFBSyxTQUFTb1EsR0FBNk0sT0FBMU0rL0MsR0FBRzFtRCxFQUFFMkcsR0FBR3kvQyxHQUFHcG1ELEVBQUUsY0FBYzJHLEVBQUU0Z0IsYUFBYSxNQUFNNitCLEdBQUdwbUQsRUFBRSxXQUFXMkcsRUFBRXVwQyxVQUFVLE1BQU10c0IsRUFBRTVqQixFQUFFOGxELGNBQWEsU0FBUzltRCxHQUFHLGFBQWFBLEVBQUV1aUMsYUFBYWxHLEdBQUVyOEIsRUFBRSxjQUFjZ0IsRUFBRXVuQixhQUFhOFQsR0FBRXI4QixFQUFFLFdBQVdnQixFQUFFd2tELGNBQW9CZ0IsR0FBR3hsRCxNQUFLekosS0FBS3d2RCxNQUNyYnhqRCxFQUFFd3RCLEdBQUcsU0FBUzl3QixHQUFHLElBQUllLEVBQUU3TyxLQUFLLE9BQU8yNUMsR0FBRTM1QyxLQUFLcTFELEdBQUdyMUQsTUFBTW9GLE1BQUssU0FBU29RLEdBQUcsT0FBT3dkLEVBQUc4aEMsR0FBR2ptRCxHQUFHZixHQXpHMk8sU0FBWUEsRUFBRWUsRUFBRTJHLEdBQUcsT0FBT3UvQixHQUFFam5DLEVBQUVnekMsR0FBRyxDQUFDelAsUUFBUXhpQyxFQUFFa3lDLGVBQWV2ckMsSUF5R25TK2hELENBQUcxb0QsRUFBRWYsRUFBRTBILEVBQUUsQ0FBQzFILElBQUkxSSxNQUFLLFNBQVN5SSxHQUFHLElBQUk3RCxFQUFFLEdBQTRJLE9BQXpJeW9CLEVBQUU1a0IsRUFBRXVwRCxrQkFBa0IsSUFBRyxTQUFTbm5ELEdBQUdqRyxFQUFFaUcsRUFBRW1nQyxhQUFZLEtBQUszZCxFQUFFcWlDLEdBQUdqbUQsSUFBRyxTQUFTb0IsR0FBR2pHLEVBQUVpRyxJQUFJK2tELEdBQUdubUQsRUFBRW9CLE1BQUtqRyxFQUFFK3BDLEdBQUdzQixjQUFjbkwsR0FBRXI3QixFQUFFLGNBQWMsTUFBYXdsRCxHQUFHeGxELE1BQUt3bEQsR0FBR3hsRCxHQUFHekosTUFBSyxXQUFXLE1BQU0sSUFBSWlLLEVBQUUsNEJBQ3pUK0IsRUFBRTRJLE9BQU8sV0FBVyxJQUFJbE0sRUFBRTlOLEtBQUssT0FBTzI1QyxHQUFFMzVDLEtBQUtBLEtBQUtraUMsSUFBSTk4QixNQUFLLFNBQVN5SixHQUFHLE9BQU9rbUMsR0FBRWpuQyxFQUFFQSxFQUFFK3lDLEdBQUcsQ0FBQ3hQLFFBQVF4aUMsT0FBTXpKLE1BQUssV0FBVzBJLEVBQUUrMEIsY0FBYyxJQUFJd3ZCLEdBQUcsb0JBQW1CanRELE1BQUssV0FBVyxJQUFJLElBQUl5SixFQUFFLEVBQUVBLEVBQUVmLEVBQUU0d0IsRUFBRS85QixPQUFPa08sSUFBSWYsRUFBRTR3QixFQUFFN3ZCLEdBQUdvdkIsT0FBTyxlQUFlODFCLEdBQUdqbUQsRUFBRSxNQUFNa21ELEdBQUdsbUQsRUFBRSxNQUFNbW1ELEdBQUdubUQsRUFBRSxNQUFNQSxFQUFFNHdCLEVBQUUsR0FBRzV3QixFQUFFNGlCLEdBQUUsRUFBRzBqQyxHQUFHdG1ELEdBQUdvOEIsR0FBRXA4QixFQUFFLGVBQWUsTUFBTUEsRUFBRXhOLEdBQUd3dkQsR0FBR2hpRCxFQUFFeE4sRUFBRXdOLE9BQ3BVc0QsRUFBRXFtQixHQUFHLFNBQVMzcEIsRUFBRWUsR0FBRyxTQUFNLGdCQUFnQmYsSUFBSTlOLEtBQUtzd0IsR0FBRyxPQUFPemhCLEdBQUc3TyxLQUFLaU8sR0FBRyxrQkFBa0JILElBQUk5TixLQUFLc3dCLEdBQUcsT0FBT3poQixHQUFHN08sS0FBS2lPLEdBQUcsbUJBQW1CSCxJQUFJOU4sS0FBS2kyRCxJQUFJLE9BQU9wbkQsR0FBRyxxQkFBcUJmLElBQUk5TixLQUFLaTJELElBQUksT0FBT3BuRCxJQUFTdUMsRUFBRWtnQixHQUFHLFNBQVN4akIsRUFBRWUsRUFBRTJHLEVBQUUzSCxHQUFHLGdCQUFnQkMsR0FBRyxrQkFBa0JBLEdBQUdELElBQUk3TixLQUFLc3dCLEdBQUcsUUFBUTlhLEdBQUd4VixLQUFLKzBDLEVBQUUvMEMsS0FBSyswQyxFQUFFdi9CLEdBQUczRyxJQUFJMkcsR0FBR3hWLEtBQUtpTyxHQUFHak8sS0FBS2lPLEVBQUVZLEdBQUc3TyxLQUFLd1YsSUFBSXhWLEtBQUt3VixFQUFFeW9CLFNBQVNqK0IsS0FBS3dWLEVBQUUsYUFBYXhWLEtBQUtpTyxTQUFTak8sS0FBSyswQyxJQUNuWjNqQyxFQUFFdWlCLEdBQUcsU0FBUzdsQixFQUFFZSxHQUFHLE1BQU0sZ0JBQWdCZixHQUFHZSxJQUFJN08sS0FBS3N3QixHQUFHLE1BQU15QixFQUFFL3hCLEtBQUs4M0IsR0FBRzkzQixNQUFNLGtCQUFrQjhOLEdBQUdlLElBQUk3TyxLQUFLc3dCLEdBQUcsTUFBTXlCLEVBQUUveEIsS0FBSyszQixHQUFHLzNCLE1BQU0sbUJBQW1COE4sSUFBSTlOLEtBQUtpMkQsSUFBSSxPQUFPcG5ELEVBQUVrakIsRUFBRS94QixLQUFLODNCLEdBQUc5M0IsTUFBTSxxQkFBcUI4TixJQUFJOU4sS0FBS2kyRCxJQUFJLE9BQU9wbkQsRUFBRWtqQixFQUFFL3hCLEtBQUsrM0IsR0FBRy8zQixNQUFNLE1BQU1vUixFQUFFd3JCLEdBQUcsU0FBUzl1QixHQUFHLElBQUllLEVBQUU3TyxLQUFLLE9BQU84MUQsR0FBRzkxRCxLQUFLLGVBQWU4TixHQUFFLFdBQVcsT0FBTzBuRCxHQUFHM21ELEVBQUVmLEVBQUVzaUMsWUFBWWhyQyxNQUFLLFdBQVcsT0FBT2l2RCxHQUFHeGxELFNBQU0sSUFBS3VDLEVBQUVpc0IsR0FBRyxTQUFTdnZCLEdBQUcsT0FBT2dvRCxHQUFHOTFELEtBQUssaUJBQWlCOE4sR0FBRSxXQUFXLE9BQU9pdkIsUUFBSyxJQUV4VDNyQixFQUFFeXJCLEdBQUcsU0FBUy91QixHQUFHLElBQUllLEVBQUU3TyxLQUFLLE9BQU9nMkQsR0FBR2gyRCxLQUFLLGtCQUFrQjhOLEdBQUUsV0FBVyxPQUFPMG5ELEdBQUczbUQsRUFBRWYsRUFBRXNpQyxlQUFhLElBQUtoL0IsRUFBRWtzQixHQUFHLFNBQVN4dkIsR0FBRyxPQUFPa29ELEdBQUdoMkQsS0FBSyxvQkFBb0I4TixHQUFFLFdBQVcsT0FBT2l2QixRQUFLLElBRXhOM3JCLEVBQUUwbUIsR0FBRyxTQUFTaHFCLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxJQUFJN0QsRUFBRWhLLEtBQUtBLEtBQUt3VixJQUFJeFYsS0FBS3dWLEVBQUV5b0IsU0FBU2orQixLQUFLd1YsRUFBRSxNQUFNLElBQUl2RixFQUFFLEtBQWdMLE9BQU8wcEMsR0FBRTM1QyxLQUFsTEEsS0FBS2tpQyxJQUFJOThCLE1BQUssU0FBUzZJLEdBQUcsT0FBTzRtQyxHQUFHN3FDLEVBQUU4RCxFQUFFLENBQUNtakMsV0FBV25qQyxFQUFFZ2tDLFNBQVNqa0MsRUFBRTJtQyxVQUFVM2xDLEVBQUV3aUMsUUFBUXBqQyxPQUFNN0ksTUFBSyxTQUFTNkksR0FBb0IsT0FBakJnQyxFQUFFd2xELEdBQUd6ckQsRUFBRWlFLEVBQUUsUUFBZTJuRCxHQUFHNXJELEVBQUVpRSxNQUFLN0ksTUFBSyxXQUFXLE9BQU82SyxPQUNoWG1CLEVBQUUybUIsR0FBRyxTQUFTanFCLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxJQUFJN0QsRUFBRWhLLEtBQUtBLEtBQUt3VixJQUFJeFYsS0FBS3dWLEVBQUV5b0IsU0FBU2orQixLQUFLd1YsRUFBRSxNQUFNLElBQUl2RixFQUFFLEtBQW1OLE9BQU8wcEMsR0FBRTM1QyxLQUFyTis4QixLQUFJMzNCLE1BQUssV0FBVyxPQUFPd3JDLEdBQUdrRSxHQUFHOXFDLEVBQUU4RCxFQUFFLENBQUNtakMsV0FBV25qQyxFQUFFMG1DLFVBQVUzbEMsRUFBRWlqQyxTQUFTamtDLEVBQUU0K0IsU0FBU2ozQixJQUFJeEwsRUFBRTZnQyxRQUFPemxDLE1BQUssU0FBU2tyQixHQUErQyxPQUE1Q3JnQixFQUFFd2xELEdBQUd6ckQsRUFBRXNtQixFQUFFLGtCQUFrQmlsQyxHQUFHdnJELEVBQUVzbUIsR0FBR3RtQixFQUFFaUcsRUFBRSxLQUFZakcsRUFBRTZyRCxZQUFXendELE1BQUssV0FBVyxPQUFPNkssTUFBb0IsSUFDalRtQixFQUFFb2xCLEdBQUcsU0FBUzFvQixHQUFHLElBQUllLEVBQUU3TyxLQUFLd1YsRUFBRSxLQUFLLE9BQU9ta0MsR0FBRTM1QyxLQUFLQSxLQUFLa2lDLElBQUk5OEIsTUFBSyxTQUFTeUksR0FBTyxPQUFKMkgsRUFBRTNILE9BQVEsSUFBcUJDLEdBQUc0bkIsR0FBRzVuQixHQUFHLEdBQUc4L0IsR0FBRyxJQUFJVixHQUFHcC9CLE9BQU0xSSxNQUFLLFNBQVN5SSxHQUFHLE9BQU9nQixFQUFFZixFQUFFMG9CLEdBQUdoaEIsRUFBRTNILE1BQUt6SSxNQUFLLFNBQVN5SSxHQUFHLEdBQUdnQixFQUFFdWtDLE9BQU92bEMsRUFBRSxPQUFPZ0IsRUFBRWduRCxZQUFXendELE1BQUssaUJBQWdCZ00sRUFBRW9tQixHQUFHLFNBQVMxcEIsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRXhWLEtBQUs2TixFQUFFLEtBQUssT0FBTzhyQyxHQUFFMzVDLEtBQUtBLEtBQUtraUMsSUFBSTk4QixNQUFLLFNBQVM0RSxHQUFPLE9BQUo2RCxFQUFFN0QsT0FBUSxJQUFxQjZFLEdBQUc2bUIsR0FBRzdtQixHQUFHLEdBQUcrK0IsR0FBRyxJQUFJVixHQUFHcitCLE9BQU16SixNQUFLLFNBQVM0RSxHQUFHLE9BQU93TCxFQUFFMUgsRUFBRTBwQixHQUFHM3BCLEVBQUVDLEVBQUU5RCxNQUFLNUUsTUFBSyxTQUFTNEUsR0FBRyxHQUFHd0wsRUFBRTQ5QixPQUFPcHBDLEVBQUUsT0FBT3dMLEVBQUVxZ0QsWUFBV3p3RCxNQUFLLGlCQUNyUmdNLEVBQUVxb0IsR0FBRyxTQUFTM3JCLEdBQUcsSUFBSWUsRUFBRSxLQUFLMkcsRUFBRXhWLEtBQWtJLE9BQU8yNUMsR0FBRTM1QyxLQUF0SThOLEVBQUU4aUMsR0FBRzdULEdBQUVqdkIsR0FBRzBILEVBQUVxMUIsS0FBS3psQyxNQUFLLFNBQVN5SSxHQUErQyxPQUE1Q2dCLEVBQUU0bUQsR0FBR2pnRCxFQUFFM0gsRUFBRSxrQkFBa0IwbkQsR0FBRy8vQyxFQUFFM0gsR0FBRzJILEVBQUV2RixFQUFFLEtBQVl1RixFQUFFcWdELFlBQVd6d0QsTUFBSyxXQUFXLE9BQU95SixNQUFvQixJQUN6S3VDLEVBQUVzaEIsT0FBTyxXQUFXLE9BQU8xeUIsS0FBS3l5QixLQUM5T3JoQixFQUFFcWhCLEVBQUUsV0FBVyxJQUFJM2tCLEVBQUUsQ0FBQys4QixJQUFJN3FDLEtBQUs2cUMsSUFBSXpVLFlBQVlwMkIsS0FBS28yQixZQUFZaTlCLFNBQVNyekQsS0FBS3F6RCxTQUFTamdCLE1BQU1wekMsS0FBS296QyxNQUFNbWhCLGNBQWN2MEQsS0FBS3UwRCxjQUFjem9CLFlBQVk5ckMsS0FBSzhyQyxZQUFZMG9CLFlBQVl4MEQsS0FBS3cwRCxZQUFZL25CLFNBQVN6c0MsS0FBS3lzQyxTQUFTa29CLGFBQWEsR0FBR3p5QyxPQUFPbGlCLEtBQUt3d0IsRUFBRTFTLFFBQVE5ZCxLQUFLNlEsRUFBRTBpRCxXQUFXdnpELEtBQUttQyxFQUFFbTBELGdCQUFnQnQyRCxLQUFLNk8sRUFBRTRqQixJQUFJOGpDLGdCQUFnQnYyRCxLQUFLaTJELElBQUksTUFBeUgsT0FBbkhqMkQsS0FBSytxQixVQUFVOEssR0FBRS9uQixFQUFFOU4sS0FBSytxQixTQUFTMEgsS0FBS0EsRUFBRXp5QixLQUFLMjBELGNBQWEsU0FBUzlsRCxHQUFHZixFQUFFNm1ELGFBQWFsMUQsS0F6T3NnQixTQUFZcU8sR0FBRyxJQUFTMEgsRUFBTDNHLEVBQUUsR0FBSyxJQUFJMkcsS0FBSzFILEVBQUVBLEVBQUVNLGVBQWVvSCxLQUFLM0csRUFBRTJHLEdBQUcxSCxFQUFFMEgsSUFBSSxPQUFPM0csRUF5TzlrQjJvRCxDQUFHM29ELE9BQU1nbkIsR0FBRS9uQixFQUFFOU4sS0FBS21xQyxFQUFFMVgsS0FBWTNrQixHQUU3SSxJQUFJb29ELEdBQUcsQ0FBQ3h6RCxLQUFLLGVBQWU0NUIsRUFBRSxXQUFXLFNBQVM2NUIsR0FBR3JvRCxHQUFHLE9BQU93K0MsR0FBR3grQyxFQUFFZSxFQUFFcW5ELEdBQUdwb0QsRUFBRUEsR0FBdUcsU0FBUzJwRCxHQUFHM3BELEdBQUc5TixLQUFLOE4sRUFBRUEsRUFBRTlOLEtBQUs2TyxFQUFFczlDLEtBQUtuc0QsS0FBS3dWLEVBQUUsS0FBS3hWLEtBQUtpUSxFQUN2aUIsU0FBWW5DLEdBQUcsSUFBSWUsRUFBRTZvRCxHQUFHLFNBQVNsaUQsRUFBRWtpRCxHQUFHLFdBQVc3cEQsRUFBRTZwRCxHQUFHLFFBQVEsT0FuRVAsU0FBWTVwRCxFQUFFZSxFQUFFMkcsR0FBRyxJQUFJM0gsRUFBRXcrQyxHQUFHeDlDLEVBQUUyRyxHQUFHeEwsRUFBRW9pRCxHQUFHdCtDLEVBQUVlLEVBQUV5dEIsR0FBRyxPQUFPeHVCLEVBQUVoSSxJQUFJK0ksRUFBRTJHLEdBQUdwUSxNQUFLLFNBQVM2SyxHQUFHLElBQUloQyxFQUFFLEtBQUssSUFBSUEsRUFBRTg2QixHQUFHdlksRUFBRThYLGFBQWErZixRQUFReDZDLElBQUksTUFBTXlpQixJQUFJLEdBQUdyaUIsSUFBSWdDLEVBQUUsT0FBT3VnQixFQUFFOFgsYUFBYUcsV0FBVzU2QixHQUFHQyxFQUFFL0gsSUFBSThJLEVBQUVaLEVBQUV1SCxHQUFHdkgsR0FBR2dDLEdBQUcsZ0JBQWdCakcsRUFBRTZOLE1BQU0yWSxFQUFFOFgsYUFBYUcsV0FBVzU2QixNQW1FN084cEQsQ0FBRzdwRCxFQUFFZSxFQUFFQSxFQUFFZixFQUFFQSxHQUFHMUksTUFBSyxXQUFXLE9BQU8wSSxFQUFFZSxFQUFFL0ksSUFBSTBQLEVBQUUxSCxFQUFFQSxNQUFLMUksTUFBSyxTQUFTNEUsR0FBRyxPQUFPQSxFQUFFd0wsRUFBRTFILEVBQUVlLEVBQUUvSSxJQUFJK0gsRUFBRUMsRUFBRUEsR0FBRzFJLE1BQUssU0FBUzZLLEdBQUcsT0FBT0EsRUFBRXBDLEVBQUVDLEVBQUVlLEVBQUUvSSxJQUFJK0ksRUFBRWYsRUFBRUEsR0FBRzFJLE1BQUssU0FBUzZJLEdBQUcsT0FBT0EsRUFBRVksRUFBRWYsRUFBRWUsRUFBRS9JLElBQUk4eEQsR0FBRzlwRCxFQUFFQSxHQUFHMUksTUFBSyxTQUFTa3JCLEdBQUcsT0FBT0EsRUFBRW9uQyxHQUFHcG5DLEdBQUd6aEIsY0FBVXpKLE1BQUssU0FBUzRFLEdBQVMsT0FBTjhELEVBQUUwSCxFQUFFeEwsRUFBUzZ0RCxHQUFHL3BELEVBQUU5RCxFQUFFc3lCLE1BQUtodEIsR0FBRSxXQUFXeEIsRUFBRTBILElBQUkxSCxFQUFFMEgsRUFBRTNHLE1BRGlNaXBELENBQUc5M0QsTUFBTUEsS0FBSzZPLEVBQUUyeUIsWUFBWWsyQixHQUFHLFNBQVMxM0QsS0FBSzhOLEVBQUVpa0IsRUFBRS94QixLQUFLaU8sRUFBRWpPLE9BQWlPLFNBQVM2M0QsR0FBRy9wRCxFQUFFZSxHQUFHLElBQVNoQixFQUFMMkgsRUFBRSxHQUFLLElBQUkzSCxLQUFLbStDLEdBQUdBLEdBQUduK0MsS0FBS2dCLEdBQUcyRyxFQUFFL1YsS0FBSzZzRCxHQUFHeCtDLEVBQUVlLEVBQUU2b0QsR0FBRzFMLEdBQUduK0MsSUFBSUMsRUFBRUEsSUFBMkIsT0FBdkIwSCxFQUFFL1YsS0FBSzZzRCxHQUFHeCtDLEVBQUVlLEVBQUUrb0QsR0FBRzlwRCxFQUFFQSxJQTVSN3JCLFNBQVlBLEdBQUcsT0FBTyxJQUFJd3VCLElBQUUsU0FBU3p0QixFQUFFMkcsR0FBRyxJQUFJM0gsRUFBRUMsRUFBRW5OLE9BQU9xSixFQUFFLEdBQUcsR0FBRzZELEVBQUUsSUFBSSxJQUFJb0MsRUFBRSxTQUFTL0ssRUFBRXVMLEdBQUc1QyxJQUFJN0QsRUFBRTlFLEdBQUd1TCxFQUFFLEdBQUc1QyxHQUFHZ0IsRUFBRTdFLElBQUlpRSxFQUFFLFNBQVMvSSxHQUFHc1EsRUFBRXRRLElBQUlvckIsRUFBRSxFQUFJQSxFQUFFeGlCLEVBQUVuTixPQUFPMnZCLElBQVcyTSxHQUFMbnZCLEVBQUV3aUIsR0FBUTBCLEVBQUcvaEIsRUFBRXFnQixHQUFHcmlCLFFBQVFZLEVBQUU3RSxNQTRSK2dCMnhDLENBQUdubUMsR0FBNVVpaUQsR0FBR24xRCxVQUFVMkwsRUFBRSxXQUFXLElBQUlILEVBQUU5TixLQUFLNk8sRUFBRTZvRCxHQUFHLFNBQVNLLEdBQUcvM0QsTUFBSyxXQUFXLE9BQU8rOEIsS0FBSTMzQixNQUFLLFdBQVcsT0FBTzBJLEVBQUUwSCxHQUFHLFNBQVMxSCxFQUFFMEgsRUFBRThtQixFQUFFeHVCLEVBQUVlLEVBQUUvSSxJQUFJK0ksRUFBRWYsRUFBRUEsR0FBRyxRQUFPMUksTUFBSyxTQUFTb1EsR0FBRyxHQUFHQSxFQUFFLE9BQU9xaUQsR0FBRy9wRCxFQUFFLFNBQVMxSSxNQUFLLFdBQVcwSSxFQUFFMEgsRUFBRTNHLFlBQzVjLElBQUkrb0QsR0FBRyxDQUFDbDFELEtBQUssY0FBYzQ1QixFQUFFLFdBQVcsU0FBU283QixHQUFHNXBELEdBQUcsTUFBTSxDQUFDcEwsS0FBSyxXQUFXNDVCLEVBQUV4dUIsR0FDakssU0FBU2txRCxHQUFHbHFELEVBQUVlLEdBQUcsT0FBT2twRCxHQUFHanFELEdBQUUsV0FBVyxPQUFPQSxFQUFFZSxFQUFFOUksSUFBSStILEVBQUUwSCxFQUFFM0csRUFBRTRqQixJQUFJM2tCLEVBQUVBLE1BQUssU0FBU21xRCxHQUFHbnFELEdBQUcsT0FBT2lxRCxHQUFHanFELEdBQUUsV0FBVyxPQUFPdytDLEdBQUd4K0MsRUFBRWUsRUFBRWYsRUFBRTBILEVBQUUxSCxFQUFFQSxNQUM5WixTQUFTb3FELEdBQUdwcUQsRUFBRWUsRUFBRTJHLEdBQUcsT0FBT3VpRCxHQUFHanFELEdBQUUsV0FBVyxPQUFPQSxFQUFFZSxFQUFFL0ksSUFBSWdJLEVBQUUwSCxFQUFFMUgsRUFBRUEsR0FBRzFJLE1BQUssU0FBU3lJLEdBQXFELE9BQWxEQSxHQUFHZ0IsSUFBSWhCLEVBQUUwbEQsV0FBVzFrRCxHQUFHaEIsR0FBRzJILElBQUkzSCxFQUFFMmxELGVBQWVoK0MsR0FBVTZnRCxHQUFHeG9ELEdBQUcsVUFBUSxTQUFTa3FELEdBQUdqcUQsRUFBRWUsR0FBcUIsT0FBbEJmLEVBQUVtQyxFQUFFbkMsRUFBRW1DLEVBQUU3SyxLQUFLeUosRUFBRUEsR0FBVWYsRUFBRW1DLEVBQUcsU0FBU2tvRCxHQUFHcnFELEdBQXVELEdBQXBEOU4sS0FBSzZRLEdBQUUsRUFBR3E1QixHQUFFbHFDLEtBQUssV0FBVyxJQUFJNHdELElBQUkxbUIsR0FBRWxxQyxLQUFLLE1BQU04TixJQUFNb2hDLEdBQUVsdkMsTUFBTThELFVBQVNvckMsR0FBRWx2QyxNQUFNOEQsUUFBUW9lLE9BQWlJLE1BQU0sSUFBSTdTLEVBQUUsbUJBQXRJdkIsRUFBRSxlQUFxQm82QixHQUFHLGdCQUFzQixLQUFLbG9DLEtBQUs4TixFQUFFLElBQUl5dUMsR0FBR3JOLEdBQUVsdkMsTUFBTThELFNBQVNvckMsR0FBRWx2QyxNQUFNOEQsUUFBUW9lLE9BQU9rUixFQUFHVCxHQUFJN2tCLEdBQXVDOU4sS0FBSzI1QyxFQUFFLEdBQUczNUMsS0FBS3V3QixFQUFFLEdBQUd2d0IsS0FBSzBQLEVBQUUsR0FBRzFQLEtBQUs4NEIsR0FBRyw0QkFBa0MvRyxFQUFFL3hCLEtBQUt1OEIsR0FBR3Y4QixPQUFPQSxLQUFLNnpELE9BQUUsRUFBTzd6RCxLQUFLdTRCLEdBQUcsNEJBQWtDeEcsRUFBRS94QixLQUFLdzhCLEdBQUd4OEIsT0FBT280RCxHQUFHcDRELEtBQUssTUFBTUEsS0FBS3d3QixFQUFFLElBQUlpbkMsR0FBR3ZvQixHQUFFbHZDLE1BQU04RCxRQUFRb2UsT0FBTyxJQUFJZ3RCLEdBQUVsdkMsTUFBTTBDLE1BQU0xQyxLQUFLMCtCLEVBQzVyQixJQUFJODNCLEdBQUd0bkIsR0FBRWx2QyxNQUFNOEQsUUFBUW9lLE9BQU8sSUFBSWd0QixHQUFFbHZDLE1BQU0wQyxNQUFNMUMsS0FBSzR6RCxFQUFFdEwsR0FBRXRvRCxLQWM4RCxTQUFZOE4sR0FBRyxJQUFJZSxFQUFFcWdDLEdBQUVwaEMsR0FBR2hLLFFBQVF5dkQsV0FBVy85QyxFQUFwSyxTQUFZMUgsR0FBRyxJQUFJZSxFQWxCMlgsU0FBWWYsRUFBRWUsR0FBRyxPQUFPZixFQUFFZSxFQUFFL0ksSUFBSW93RCxHQUFHcG9ELEVBQUVBLEdBQUcxSSxNQUFLLFNBQVNvUSxHQUEwQixPQUF2QkEsR0FBRzNHLElBQUkyRyxFQUFFKzlDLFdBQVcxa0QsR0FBVXduRCxHQUFHN2dELEdBQUcsT0FrQnRkNmlELENBQUd2cUQsRUFBRTR3QixFQUFFd1EsR0FBRXBoQyxHQUFHaEssUUFBUXl2RCxZQUFZbnVELE1BQUssU0FBU29RLEdBQXFCLE9BQWYxSCxFQUFFM0wsRUFBRXFULEtBQUVBLEVBQUV3YixHQUFHbGpCLEVBQUU0d0IsR0FBU3kzQixHQUFHcm9ELEVBQUU0d0IsTUFBSyxPQUFPNHBCLEdBQUV4NkMsRUFBRWUsR0FBa0R5cEQsQ0FBR3hxRCxHQUFHMUksTUFBSyxXQUFXLE9BQU84eUQsR0FBR3BxRCxFQUFFMGlCLEVBQUUzaEIsRUFBRWYsRUFBRW1DLE1BQUs3SyxNQUFLLFNBQVN5SSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVtakIsR0FBR2xqQixFQUFFNHdCLEVBQUU1d0IsRUFBRTNMLElBQUkyTCxFQUFFM0wsRUFBRTh6RCxJQUFJLFFBQVFwb0QsRUFBRW9vRCxJQUFJLE1BQU1wb0QsRUFBRUEsRUFBRWdvRCxTQUFTendELE1BQUssV0FBVyxPQUFPNHlELEdBQUdscUQsRUFBRTBpQixFQUFFM2lCLEdBQUd6SSxNQUFLLFdBQVcsT0FBT3lJLFFBQU15QixHQUFFLFNBQVN0RixHQUFHLE1BQU0sK0JBQStCQSxFQUFFc0osS0FBS3pGLEVBQUVvcUQsR0FBR25xRCxFQUFFMGlCLE9BQU0sUUFBT3ByQixNQUFLLFNBQVN5SSxHQUFHdXFELEdBQUd0cUQsRUFBRUQsR0FBRyxTQUFRLE9BQU95NkMsR0FBRXg2QyxFQUFFMEgsR0FkaGEraUQsQ0FBR3Y0RCxPQUFPQSxLQUFLTSxFQUFFZ29ELEdBQUV0b0QsS0FlakYsU0FBWThOLEdBQUcsT0FBT0EsRUFBRThsRCxFQUFFeHVELE1BQUssV0FBVyxPQUFPb3pELEdBQUcxcUQsTUFBS3dCLEdBQUUsZUFBY2xLLE1BQUssV0FBVyxJQUFJMEksRUFBRStDLEVBQUUsT0FBTy9DLEVBQUUyakIsUUFBT25pQixHQUFFLGVBQWNsSyxNQUFLLFdBQVcsSUFBSTBJLEVBQUUrQyxFQUFFLENBQUMvQyxFQUFFa2lCLElBQUcsRUFBRyxJQUFJbmhCLEVBQUVmLEVBQUUwaUIsRUFBRTNoQixFQUFFQSxFQUFFMnlCLFlBQVlrMkIsR0FBRyxTQUFTN29ELEVBQUVmLEVBQUVBLEVBQUUyakIsUUFmeEhnbkMsQ0FBR3o0RCxPQUFPQSxLQUFLZ3dCLElBQUcsRUFBR2h3QixLQUFLeXhCLEdBQUdNLEVBQUUveEIsS0FBS3MrQixHQUFHdCtCLE1BQU1BLEtBQUs0eUIsR0FBR2IsRUFBRS94QixLQUFLcXdCLEdBQUdyd0IsTUFBTUEsS0FBS295QixHQUFHTCxFQUFFL3hCLEtBQUs2NUIsR0FBRzc1QixNQUFNQSxLQUFLcXlCLEdBQUdOLEVBQUUveEIsS0FBS284QixHQUFHcDhCLE1BQU1BLEtBQUtzeUIsR0FBR1AsRUFBRS94QixLQUFLcThCLEdBQUdyOEIsTUFBTUEsS0FBSzZPLEVBQUUsS0FNMU8sU0FBWWYsR0FBRyxJQUFJZSxFQUFFcWdDLEdBQUVwaEMsR0FBR2hLLFFBQVF5dkQsV0FBVy85QyxFQUFFMDVCLEdBQUVwaEMsR0FBR2hLLFFBQVFvZSxPQUFPclQsR0FBRzY1QixPQUFPNTZCLEVBQUVxbkIsR0FBR3JuQixFQUFFOGxELEVBQUV4dUQsTUFBSyxXQUFXLElBQUkwSSxFQUFFK0MsRUFBRSxDQUFvRCxHQUFuRC9DLEVBQUVlLEVBQUV5aEQsR0FBR3poRCxFQUFFMkcsRUFBRTA1QixHQUFFcGhDLEdBQUdwTCxLQUFLb0wsRUFBRW1DLEdBQUcyL0MsR0FBRzloRCxFQUFFZSxFQUFFZixHQUFHNnlDLEdBQUU3eUMsSUFBSXdtRCxHQUFHM1QsR0FBRTd5QyxJQUFPQSxFQUFFM0wsRUFBRSxDQUFDbXlELEdBQUd4bUQsRUFBRTNMLEdBQUcsSUFBSTBMLEVBQUVDLEVBQUUzTCxFQUFFMEwsRUFBRXNrQixHQUFHcmtCLEVBQUVxakIsTUFBTTRpQyxHQUFHbG1ELEVBQUVDLEdBQVNnbUQsR0FBTmptRCxFQUFFQyxFQUFFM0wsRUFBTzJMLEVBQUVxOEIsR0FBRzhwQixHQUFHcG1ELEVBQUVDLEdBQVNvdkMsSUFBTnJ2QyxFQUFFQyxFQUFFM0wsR0FBTzJMLEVBQUVBLEVBQUVtQyxHQUFHK2pELEdBQUdubUQsRUFBRUMsR0FBR0EsRUFBRTNMLEVBQUUsS0FBSyxPQUFPMkwsRUFBRWUsT0FOdEM2cEQsQ0FBRzE0RCxNQUFNQSxLQUFLbWEsU0FBUyxHQUFHbmEsS0FBS21hLFNBQWlCLE9BQUU0WCxFQUFFL3hCLEtBQUtnYSxPQUFPaGEsTUFBTUEsS0FBS21hLFNBQVN3K0MsYUFBYTVtQyxFQUFFL3hCLEtBQUs4OEIsR0FBRzk4QixNQUFNQSxLQUFLMHdCLEVBQUUsRUFBRXdSLEdBQUUzL0IsS0FBS3ZDLE1BS2hYLFNBQVk4TixHQUFHdk0sT0FBT3NFLGVBQWVpSSxFQUFFLEtBQUssQ0FBQ2hJLElBQUksV0FBVyxPQUFPOUYsS0FBS214QixNQUFNcHJCLElBQUksU0FBUzhJLEdBQUc3TyxLQUFLbXlCLEdBQUd0akIsSUFBSWIsWUFBVyxJQUFLRixFQUFFK2hCLEdBQUcsS0FBS3R1QixPQUFPc0UsZUFBZWlJLEVBQUUsS0FBSyxDQUFDaEksSUFBSSxXQUFXLE9BQU85RixLQUFLa3ZDLEtBQUtucEMsSUFBSSxTQUFTOEksR0FBRzdPLEtBQUtpM0IsR0FBR3BvQixJQUFJYixZQUFXLElBQUtGLEVBQUV3SCxFQUFFLEtBTG9Jc2pELENBQUc1NEQsTUFBTUEsS0FBS21xQyxFQUFFLEdBQUducUMsS0FBS2lRLEVBQUUsS0FBYSxTQUFTNG9ELEdBQUcvcUQsR0FBRzR3QixHQUFFbjhCLEtBQUt2QyxLQUFLLHVCQUF1QkEsS0FBS3N3QixFQUFFeGlCLEVBQ3RkLFNBQVNnckQsR0FBR2hyRCxHQUFHNHdCLEdBQUVuOEIsS0FBS3ZDLEtBQUsseUJBQXlCQSxLQUFLd1YsRUFBRTFILEVBQVUsU0FBU2lyRCxHQUFHanJELEdBQUc0d0IsR0FBRW44QixLQUFLdkMsS0FBSyxvQkFBb0JBLEtBQUtpUSxFQUFFbkMsRUFJbVIsU0FBU2tyRCxHQUFHbHJELEdBQUcsT0FBT0EsRUFBRXFuQixJQUFJNkgsR0FBRSxJQUFJM3RCLEVBQUUsZ0NBS2xiLFNBQVNtcEQsR0FBRzFxRCxHQUFHLElBQUk0NkIsS0FBSyxPQUFPMUwsR0FBRSxJQUFJM3RCLEVBQUUsZ0RBQWdELElBQUlSLEVBQUVtcUQsR0FBR2xyRCxHQUFHMUksTUFBSyxXQUFXLE9BQU8wSSxFQUFFZSxFQUFFNmlCLFFBQU90c0IsTUFBSyxTQUFTb1EsR0FBRyxPQUFPQSxFQUFFNDBCLEdBQUc1MEIsR0FBRyxRQUFPLE9BQU84eUMsR0FBRXg2QyxFQUFFZSxHQUd2TCxTQUFTdXBELEdBQUd0cUQsRUFBRWUsR0FBRzh4QyxHQUFFN3lDLEtBNUM2VSxTQUFZQSxFQUFFZSxHQUFHNGxCLEVBQUczbUIsRUFBRTZyQyxHQUFFLFNBQVNua0MsR0FBRyxPQUFPQSxHQUFHM0csS0E0Q3RYb3FELENBQUd0WSxHQUFFN3lDLEdBQUdBLEVBQUU4a0IsSUFBSStPLEdBQUVnZixHQUFFN3lDLEdBQUcsZUFBZUEsRUFBRXNrQixJQUFJdVAsR0FBRWdmLEdBQUU3eUMsR0FBRyxjQUFjQSxFQUFFdWtCLElBQUlzUCxHQUFFZ2YsR0FBRTd5QyxHQUFHLGtCQUFrQkEsRUFBRXdrQixJQUFJOGhDLEdBQUd6VCxHQUFFN3lDLEtBQUtlLElBQUlBLEVBQUU4cUMsRUFBRWw2QyxLQUFLcU8sRUFBRThrQixJQUFJb08sR0FBR255QixFQUFFLGVBQWVmLEVBQUVza0IsSUFBSTRPLEdBQUdueUIsRUFBRSxjQUFjZixFQUFFdWtCLElBQUkyTyxHQUFHbnlCLEVBQUUsa0JBQWtCZixFQUFFd2tCLElBQUksRUFBRXhrQixFQUFFNGlCLEdBQUd5akMsR0FBR3RsRCxJQUFJcTdCLEdBQUVwOEIsRUFBRSxjQUFjZSxHQUFHQSxJQUFJQSxFQUFFc2pCLEdBQUdya0IsRUFBRXFqQixNQUFNNGlDLEdBQUdsbEQsRUFBRWYsR0FBR2dtRCxHQUFHamxELEVBQUVmLEVBQUVxOEIsR0FBRzhwQixHQUFHcGxELEVBQUVmLEdBQUdvdkMsR0FBR3J1QyxFQUFFZixFQUFFQSxFQUFFbUMsR0FBRytqRCxHQUFHbmxELEVBQUVmLElBSXhVLFNBQVNvckQsR0FBR3ByRCxFQUFFZSxHQUFHLElBQUkyRyxFQUFFLEtBQUszSCxFQUFFLEtBQUssT0FBT3k2QyxHQUFFeDZDLEVBQUVlLEVBQUV6SixNQUFLLFNBQVM0RSxHQUFtQixPQUFoQndMLEVBQUV5K0IsR0FBR2pxQyxHQUFHNkQsRUFBRTJoQyxHQUFHeGxDLEdBTDlFLFNBQVk4RCxFQUFFZSxHQUFHLElBQUkyRyxFQUFFLEdBQXFILE9BQWxIQSxFQUFFME0sT0FBT2d0QixHQUFFcGhDLEdBQUdoSyxRQUFRb2UsT0FBTzFNLEVBQUUrOUMsV0FBV3JrQixHQUFFcGhDLEdBQUdoSyxRQUFReXZELFdBQVcvOUMsRUFBRXNJLFFBQVFveEIsR0FBRXBoQyxHQUFHcEwsS0FBS29MLEVBQUVtQyxJQUFJdUYsRUFBRWcrQyxlQUFlMWxELEVBQUVtQyxHQUFVbkMsRUFBRThsRCxFQUFFeHVELE1BQUssV0FBVyxPQWhCdkssU0FBWTBJLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxJQUFJN0QsRUFBRSxJQUFJc3BELEdBQUd4bEQsRUFBRWUsR0FBMEIsT0FBdkIyRyxJQUFJeEwsRUFBRWduQixHQUFHeGIsR0FBRzNILEdBQUdpbUQsR0FBRzlwRCxFQUFFNkQsR0FBVTdELEVBQUU2ckQsU0FBU3p3RCxNQUFLLFdBQVcsT0FBTzRFLEtBZ0J1RW12RCxDQUFHM2pELEVBQUUzRyxFQUFFZixFQUFFNHdCLEVBQUU1d0IsRUFBRThsQixTQUFReHVCLE1BQUssU0FBU3lJLEdBQUcsT0FBRzh5QyxHQUFFN3lDLElBQUlELEVBQUVnOUIsS0FBSzhWLEdBQUU3eUMsR0FBRys4QixLQUFXcXFCLEdBQUd2VSxHQUFFN3lDLEdBQUdELEdBQUdDLEVBQUV1aUIsR0FBR3hpQixLQUFHdXFELEdBQUd0cUQsRUFBRUQsR0FBR3ltRCxHQUFHem1ELEdBQVVDLEVBQUV1aUIsR0FBR3hpQixPQUFLekksTUFBSyxXQUFXZzBELEdBQUd0ckQsTUFLak91ckQsQ0FBR3ZyRCxFQUFFOUQsTUFBSSxTQUFTQSxHQUFHLElBQUlpRyxFQUFFLEtBQThFLE1BQXpFakcsR0FBRyxvQ0FBb0NBLEVBQUVzSixPQUFPckQsRUFBRWdpRCxHQUFHam9ELEVBQUV5b0IsSUFBSTNrQixFQUFFaWtCLEVBQUVqa0IsRUFBRThyQixHQUFHOXJCLEtBQVdtQyxHQUFHakcsS0FBSzVFLE1BQUssV0FBVyxPQUFPZ2xDLEdBQUcsQ0FBQ3VtQixLQUFLaFEsR0FBRTd5QyxHQUFHMGtDLFdBQVdoOUIsRUFBRWtnRCxtQkFBbUI3bkQsRUFBRThuRCxjQUFjLGVBSWUsU0FBU3ptQixHQUFFcGhDLEdBQUcsT0FBT0EsRUFBRXdRLElBQUksU0FBU3FpQyxHQUFFN3lDLEdBQUcsT0FBT0EsRUFBRXdyRCxZQUFtRSxTQUFTQyxHQUFHenJELEdBQUcsT0FBTzZ5QyxHQUFFN3lDLElBQUk2eUMsR0FBRTd5QyxHQUFHMHJELE1BQU0sS0FDL2MsU0FBU0osR0FBR3RyRCxHQUFHLEdBQUdBLEVBQUVraUIsR0FBRyxDQUFDLElBQUksSUFBSW5oQixFQUFFLEVBQUVBLEVBQUVmLEVBQUV5aUIsRUFBRTV2QixPQUFPa08sSUFBT2YsRUFBRXlpQixFQUFFMWhCLElBQUdmLEVBQUV5aUIsRUFBRTFoQixHQUFHMHFELEdBQUd6ckQsSUFBSSxHQUFHQSxFQUFFK2xELElBQUkvbEQsRUFBRTRvQyxVQUFVNW9DLEVBQUU0QixFQUFFL08sT0FBTyxJQUFJbU4sRUFBRStsRCxFQUFFL2xELEVBQUU0b0MsU0FBUzduQyxFQUFFLEVBQUVBLEVBQUVmLEVBQUU0QixFQUFFL08sT0FBT2tPLElBQU9mLEVBQUU0QixFQUFFYixJQUFHZixFQUFFNEIsRUFBRWIsR0FBRzBxRCxHQUFHenJELEtBRStELFNBQVN3NkMsR0FBRXg2QyxFQUFFZSxHQUEyQyxPQUF4Q2YsRUFBRTZyQyxFQUFFbDZDLEtBQUtvUCxHQUFHQSxFQUFFMGlCLElBQUcsV0FBV2lELEVBQUcxbUIsRUFBRTZyQyxFQUFFOXFDLE1BQVlBLEVBR2xFLFNBQVM0cUQsTUFBK0ksU0FBU0MsS0FBSzE1RCxLQUFLOE4sRUFBRSxHQUFHOU4sS0FBSzZPLEVBQUUsS0E3QjVaNG9ELEdBQUduMUQsVUFBVTAwQixHQUFHLFNBQVNscEIsR0FBRyxJQUFJZSxFQUFFLEtBQUsyRyxFQUFFeFYsS0FBVyxPQXRFNEssU0FBWThOLEdBQUcsSUFBSWUsRUFBRSxJQUFJUSxFQUFFLDRCQUE0Qm1HLEVBQUUsSUFBSW5HLEVBQUUsZ0NBQWdDdkIsRUFBRSxDQUFDLElBQUlELEtBQUttK0MsR0FBRyxHQUFHQSxHQUFHbitDLElBQUlDLEVBQUUsQ0FBQyxJQUFJRCxHQUFFLEVBQUcsTUFBTUMsRUFBRUQsR0FBRSxFQUFHLElBQUlBLEdBQUcsaUJBQWtCQyxFQUFFLE1BQU1lLEVBQUUsT0FBT2k1QixNQUFNLElBQUssY0FBYyxHQUFHLFlBQVloNkIsRUFBRSxNQUFNMEgsRUFBRSxNQUFNLElBQUssT0FBTyxHQUFHLFNBQVMxSCxFQUFFLE1BQU0wSCxFQUFFLE1BQU0sSUFBSyxTQUFTLEdBQUcsWUFBWTFILElBQUlvN0MsTUFBTSxTQUFTcDdDLEVBQUUsTUFBTTBILEVBQUUsTUFBTSxRQUFRLElBQUk2eUIsTUFBTSxTQUFTdjZCLEVBQUUsTUFBTTBILEdBc0VoakJta0QsQ0FBRzdyRCxHQUFVaXFELEdBQUcvM0QsTUFBSyxXQUFXLE9BQU84TixHQUFHMEgsRUFBRUEsRUFBRThtQixFQUFFOW1CLEVBQUUzRyxFQUFFL0ksSUFBSTBQLEVBQUVBLEVBQUVBLEVBQUUxSCxHQUFHMUksTUFBSyxTQUFTeUksR0FBTyxPQUFKZ0IsRUFBRWhCLEVBQVNncUQsR0FBR3JpRCxFQUFFMUgsTUFBSzFJLE1BQUssV0FBcUIsR0FBVm9RLEVBQUVBLEVBQUVraUQsR0FBRzVwRCxHQUFNZSxFQUFFLE9BQU8yRyxFQUFFM0csRUFBRTlJLElBQUl5UCxFQUFFQSxFQUFFM0csRUFBRTJHLEVBQUUxSCxNQUFLaXZCLFNBRXFNaHNCLEVBQUVvbkQsR0FBR2oyQixJQUE4RG54QixFQUFFOG5ELEdBQUduNkIsSUFDaGEzdEIsRUFBRStuRCxHQUFHcDZCLElBQTJEM3RCLEVBQUVnb0QsR0FBR3I2QixLQUFHdHRCLEVBQUUrbUQsR0FBRzcxRCxXQUFZMDBCLEdBQUcsU0FBU2xwQixHQUFrQixPQUFPdzZDLEdBQUV0b0QsS0FBeEI4TixFQUFFOU4sS0FBS3d3QixFQUFFd0csR0FBR2xwQixLQUFxQnNELEVBQUUrZ0IsR0FBRyxTQUFTcmtCLEdBQUc5TixLQUFLNnZCLEtBQUsvaEIsR0FBRzlOLEtBQUs2USxJQUFJN1EsS0FBSzZ2QixHQUFHL2hCLEVBQUVtdkMsR0FBR2o5QyxLQUFLOE4sRUFBRTlOLEtBQUs2dkIsSUFBSTd2QixLQUFLNmlDLGNBQWMsSUFBSWcyQixHQUFHNzRELEtBQUtteEIsU0FBUy9mLEVBQUUrZixHQUFHLFdBQVcsT0FBT254QixLQUFLNnZCLElBQUl6ZSxFQUFFb3ZCLEdBQUcsV0FBVyxJQUFJMXlCLEVBQUUwaUIsRUFBRXhlLFVBQVVoUyxLQUFLbXlCLEdBQUdya0IsSUFBRUEsRUFBRThyRCxXQUFXOXJELEVBQUU4ckQsVUFBVSxJQUFJOXJELEVBQUUrckQsVUFBVS9yRCxFQUFFZ3NELGVBQW1CLE9BQzViMW9ELEVBQUVxdkIsR0FBRyxTQUFTM3lCLEdBQUcsSUFBSTlOLEtBQUtpUSxFQUFFLENBQUMsSUFBSSxlQUFlck4sS0FBS2tMLEdBQUcsTUFBTSxJQUFJdUIsRUFBRSxpQkFBaUIsc0VBQ3ZFbTZCLEdBQUcsZ0lBQWdJaFosRUFBRTltQixVQUFVNjlCLEtBQUtuaUMsTUFBSyxXQUFXLElBQUkwSSxFQUFFMGlCLEVBQUU5bUIsU0FBU3NCLGNBQWMsT0FBTzhDLEVBQUVpc0QsVUFBVSxvRUFBb0Vqc0QsRUFBRS9DLE1BQU15N0MsU0FBUyxRQUFRMTRDLEVBQUUvQyxNQUFNaXdCLE1BQU0sT0FBT2x0QixFQUFFL0MsTUFBTWl2RCxnQkFBZ0IsVUFBVWxzRCxFQUFFL0MsTUFBTWt2RCxPQUFPLHFCQUFxQm5zRCxFQUFFL0MsTUFBTW12RCxNQUFNLFVBQVVwc0QsRUFBRS9DLE1BQU1vdkQsT0FBTyxNQUFNcnNELEVBQUUvQyxNQUFNczdCLEtBQUssTUFBTXY0QixFQUFFL0MsTUFBTXF2RCxPQUFPLE1BQU10c0QsRUFBRS9DLE1BQU1zdkQsT0FDemYsSUFBSXZzRCxFQUFFL0MsTUFBTXV2RCxVQUFVLFNBQVN4c0QsRUFBRXlzRCxVQUFVdnhDLElBQUksNkJBQTZCd0gsRUFBRTltQixTQUFTc0csS0FBS3hFLFlBQVlzQyxNQUZ3RDlOLEtBQUtpUSxFQUFFLENBQUNwTSxJQUFJaUssR0FBRzlOLEtBQUs0c0IsU0FBU3lJLElBQUcsRUFBRzZuQixHQUFHbDlDLEtBQUs4TixFQUFFOU4sS0FBS2lRLEdBQUdqUSxLQUFLNmlDLGNBQWMsSUFBSWkyQixHQUFHOTRELEtBQUtpUSxNQUV2SW1CLEVBQUUwckIsR0FBRyxTQUFTaHZCLEdBQUc5TixLQUFLbXFDLEVBQUUxcUMsS0FBS3FPLEdBQUdzdkMsR0FBR3A5QyxLQUFLOE4sRUFBRSxlQUFxQm82QixHQUFHLGVBQXFCbG9DLEtBQUttcUMsR0FBRyxNQUFNbnFDLEtBQUs2aUMsY0FBYyxJQUFJazJCLEdBQUcvNEQsS0FBS21xQyxLQUFLLzRCLEVBQUV3aUIsR0FBRyxXQUFXLE9BQU9jLEVBQUcxMEIsS0FBS21xQyxJQUFJLzRCLEVBQUU2bEIsR0FBRyxTQUFTbnBCLEdBQUc5TixLQUFLc1YsSUFBSXhILEdBQUc5TixLQUFLNlEsSUFBSTdRLEtBQUtzVixFQUFFeEgsRUFBRTlOLEtBQUs4TixFQUFFZSxFQUFFN08sS0FBS3NWLElBQUlsRSxFQUFFODlCLEVBQUUsV0FBVyxPQUFPbHZDLEtBQUtzVixHQUM5SGxFLEVBQUVzaEIsT0FBTyxXQUFXLE1BQU0sQ0FBQ3hRLE9BQU9ndEIsR0FBRWx2QyxNQUFNOEQsUUFBUW9lLE9BQU9xeEMsV0FBV3JrQixHQUFFbHZDLE1BQU04RCxRQUFReXZELFdBQVd6MUMsUUFBUW94QixHQUFFbHZDLE1BQU0wQyxLQUFLNDJELFlBQVkzWSxHQUFFM2dELE9BQU8yZ0QsR0FBRTNnRCxNQUFNeXlCLE1BQzdHcmhCLEVBQUVxbUIsR0FBRyxTQUFTM3BCLEVBQUVlLEdBQUcsT0FBT2YsR0FBRyxJQUFLLFVBQVUsSUFBSyxvQkFBb0IsT0FBTSxFQUFHLElBQUssaUJBQWlCLE9BQU85TixLQUFLc3dCLEdBQUd6aEIsS0FBSzdPLEtBQUtpTyxFQUFFLFFBQVEsT0FBTSxJQUN4YW1ELEVBQUVrZ0IsR0FBRyxTQUFTeGpCLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxrQkFBa0JDLEdBQUc5TixLQUFLc3dCLEdBQUd6aUIsSUFBSTJILEdBQUd4VixLQUFLKzBDLEVBQUUvMEMsS0FBSyswQyxFQUFFdi9CLEdBQUczRyxJQUFJMkcsR0FBR3hWLEtBQUtpTyxHQUFHak8sS0FBS2lPLEVBQUVZLEdBQUc3TyxLQUFLd1YsSUFBSXhWLEtBQUt3VixFQUFFeW9CLFNBQVNqK0IsS0FBS3dWLEVBQUUsYUFBYXhWLEtBQUtpTyxTQUFTak8sS0FBSyswQyxJQUFJM2pDLEVBQUV1aUIsR0FBRyxTQUFTN2xCLEVBQUVlLEdBQUcsTUFBTSxxQkFBcUJmLEdBQUcsa0JBQWtCQSxHQUFHOU4sS0FBS3N3QixHQUFHemhCLEdBQUc3TyxLQUFLaU8sRUFBRThqQixFQUFFL3hCLEtBQUt3NkQsR0FBR3g2RCxNQUFNLE1BQU1vUixFQUFFb3BELEdBQUcsU0FBUzFzRCxFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUcsSUFBSTdELEVBQUVoSyxLQUFLaVEsRUFBRSxDQUFDZ2hDLFdBQVduakMsRUFBRWdrQyxTQUFTamtDLEVBQUUybUMsVUFBVTNsQyxFQUFFNDlCLFNBQVNqM0IsR0FBeUMsT0FBdEN4VixLQUFLd1YsSUFBSXhWLEtBQUt3VixFQUFFeW9CLFNBQVNqK0IsS0FBS3dWLEVBQUUsTUFBYXhMLEVBQUU0cEQsRUFBRXh1RCxNQUFLLFdBQVcsT0FBTzh6RCxHQUFHbHZELEVBQUU0cUMsR0FBRzVxQyxFQUFFOEQsRUFBRW1DLFFBQ2hjbUIsRUFBRWd0QixHQUFHLFNBQVN0d0IsR0FBRyxJQUFJNDZCLEtBQUssT0FBTzFMLEdBQUUsSUFBSTN0QixFQUFFLGdEQUFnRCxJQUFJUixFQUFFN08sS0FBS3dWLEVBQUUrNUIsR0FBR3poQyxFQUFFc2lDLFlBQVl2aUMsRUFBRTA2QixLQUFLditCLEVBQUUsT0FBTzQrQixNQUFNakIsT0FBT3VILEdBQUVsdkMsTUFBTThELFFBQVF5dkQsWUFBWXpsRCxFQUFFcWtDLGtCQUFrQm5vQyxFQUFFNjlDLEdBQUczWSxHQUFFbHZDLE1BQU04RCxRQUFReXZELFdBQVdya0IsR0FBRWx2QyxNQUFNOEQsUUFBUW9lLE9BQU9ndEIsR0FBRWx2QyxNQUFNMEMsS0FBSyxpQkFBaUJvTCxFQUFFLEtBQUtELEVBQUUsZ0JBQXNCLEtBQUssS0FBSyxLQUFLN04sS0FBS2t2QyxJQUFJbHZDLEtBQUtpUSxJQUFJLElBQUlBLEVBQUU4MUIsR0FBRy83QixFQUFFd0wsR0FBR0EsRUFBRXdjLEdBQUd4YyxHQUFHQSxFQUFFcWMsSUFDM0wsT0FBT3kyQixHQUFFdG9ELEtBRHNMd1YsRUFBRXdqRCxHQUFHaDVELE1BQU1vRixNQUFLLFNBQVM2SSxHQUFHLE9BQU9naUQsR0FBR2hpRCxFQUFFZ0MsRUFBRSxpQkFBaUJuQyxFQUFFRCxJQUFJN0QsRUFBRTZFLEVBQUVxZ0MsUUFBTzlwQyxNQUFLLFdBQVcsT0FBTyxJQUFJazNCLElBQUUsU0FBU3J1QixFQUFFcWlCLEdBQUd6aEIsRUFBRXlpQixHQUFHLGlCQUNqZixLQUFLLElBQUlqaUIsRUFBRSwyQkFBMkJSLEVBQUV5aEIsR0FBR3poQixFQUFFWixFQUFFQSxFQUFFWSxFQUFFa21DLEVBQUV6a0IsRUFBRXpoQixFQUFFeWhCLEVBQUV6aUIsRUFBRWdCLEVBQUUyRyxFQUFFNDZDLEdBQUd2aEQsRUFBRUEsRUFBRUEsRUFBRSxpQkFBaUJvQixFQUFFcEMsU0FBT3pJLE1BQUssU0FBUzZJLEdBQVksT0FBVGdDLEdBQUc2MUIsR0FBRzcxQixHQUFVaEMsRUFBRW04QixHQUFHbjhCLEdBQUcsUUFBT3FCLEdBQUUsU0FBU3JCLEdBQVksTUFBVGdDLEdBQUc2MUIsR0FBRzcxQixHQUFTaEMsT0FBdUJtRCxFQUFFaXRCLEdBQUcsU0FBU3Z3QixHQUFHLElBQUk0NkIsS0FBSyxPQUFPMUwsR0FBRSxJQUFJM3RCLEVBQUUsZ0RBQWdELElBQUlSLEVBQUU3TyxLQUFxSCxPQUFPc29ELEdBQUV0b0QsS0FBdkhnNUQsR0FBR2g1RCxNQUFNb0YsTUFBSyxXQUFXLE9BWGhILFNBQVkwSSxHQUFHLE9BQU9pcUQsR0FBR2pxRCxHQUFFLFdBQVcsT0FBT0EsRUFBRWUsRUFBRTlJLElBQUk2eEQsR0FBRzlwRCxFQUFFMEgsRUFBRThtQixFQUFFeHVCLEVBQUVBLE1BV3VEMnNELENBQUc1ckQsRUFBRTJoQixNQUFLcHJCLE1BQUssV0FBVyxPQUFPOHFELEdBQUdyaEQsRUFBRUEsRUFBRSxvQkFBb0JmLE9BQUUsRUFBT2UsRUFBRXFnQyxVQUMzTjk5QixFQUFFc2dCLEdBQUcsV0FBVyxJQUFJNWpCLEVBQUU5TixLQUFLLE9BQU93NEQsR0FBR3g0RCxNQUFNb0YsTUFBSyxTQUFTeUosR0FBa0IsT0FBZmYsRUFBRWUsR0FBRzJoRCxHQUFHMWlELEVBQUVlLEVBQUVBLEdBQVVBLEtBQUlTLEdBQUUsU0FBU1QsR0FBa0IsTUFBZmYsRUFBRWUsR0FBRzJoRCxHQUFHMWlELEVBQUVlLEVBQUVBLEdBQVNBLE1BQ25UdUMsRUFBRTR1QixHQUFHLFNBQVNseUIsR0FBRyxJQUFJQSxFQUFFLE9BQU9rdkIsR0FBRSxJQUFJM3RCLEVBQUUsY0FBYyxHQUFHclAsS0FBS3NWLEdBQUd4SCxFQUFFMitCLFNBQVMsT0FBT3pQLEdBQUUsSUFBSTN0QixFQUFFLHVCQUF1QixJQUFJUixFQUFFN08sS0FBS3dWLEVBQUUsR0FBR0EsRUFBRTBNLE9BQU9ndEIsR0FBRWx2QyxNQUFNOEQsUUFBUW9lLE9BQU8xTSxFQUFFKzlDLFdBQVdya0IsR0FBRWx2QyxNQUFNOEQsUUFBUXl2RCxXQUFXLzlDLEVBQUVzSSxRQUFRb3hCLEdBQUVsdkMsTUFBTTBDLEtBQUssSUFBSW1MLEVBZnhILFNBQVlDLEVBQUVlLEVBQUUyRyxFQUFFM0gsR0FBRyxJQUFJN0QsRUFBRThELEVBQUVlLEVBQUVvQixFQUFFLEdBQXNJLE9BQW5JQSxFQUFFNGdDLElBQUk3bUMsRUFBRTZFLEdBQUc3RSxFQUFFNkUsRUFBRTlPLFdBQVdrUSxFQUFFc1MsYUFBYXZZLEVBQUU4RCxFQUFFZSxFQUFFLElBQUl5a0QsR0FBR3prRCxHQUFHLENBQUNxVCxPQUFPcFUsRUFBRTBpQixFQUFFK2lDLFdBQVd6bEQsRUFBRTNMLEVBQUUyYixRQUFRaFEsRUFBRStDLEdBQUdaLEdBQUd1RixJQUFJM0csRUFBRW1pQixHQUFHeGIsR0FBRzNILEdBQUdpbUQsR0FBR2psRCxFQUFFaEIsR0FBR3FuRCxHQUFHcm1ELEVBQUVmLEdBQVVlLEVBZXBENnJELENBQUc1c0QsRUFBRTBILEVBQUUzRyxFQUFFNnZCLEVBQUU3dkIsRUFBRStrQixNQUFNLE9BQU8wMEIsR0FBRXRvRCxLQUFLQSxLQUFLTSxFQUFFOEUsTUFBSyxXQUFXLEdBQUc4cEMsR0FBRXJnQyxHQUFHL0ssUUFBUW9lLFFBQVFwVSxFQUFFMGlCLEVBQUUsT0FBTzNpQixFQUFFZ29ELFlBQVd6d0QsTUFBSyxXQUFXLE9BQUd1N0MsR0FBRTl4QyxJQUFJZixFQUFFKzhCLEtBQUs4VixHQUFFOXhDLEdBQUdnOEIsS0FBV3FxQixHQUFHdlUsR0FBRTl4QyxHQUFHZixHQUFHZSxFQUFFd2hCLEdBQUd2aUIsS0FBR3NxRCxHQUFHdnBELEVBQUVoQixHQUFHeW1ELEdBQUd6bUQsR0FBVWdCLEVBQUV3aEIsR0FBR3hpQixPQUFLekksTUFBSyxXQUFXZzBELEdBQUd2cUQsUUFFdEh1QyxFQUFFK2xCLEdBQUcsV0FBVyxJQUFJcnBCLEVBQUU5TixLQUFxSCxPQUFPc29ELEdBQUV0b0QsS0FBdkhBLEtBQUtNLEVBQUU4RSxNQUFLLFdBQTBCLE9BQWYwSSxFQUFFZSxHQUFHMmhELEdBQUcxaUQsRUFBRWUsRUFBRUEsR0FBTzh4QyxHQUFFN3lDLElBQWNzcUQsR0FBR3RxRCxFQUFFLE1BQWFtcUQsR0FBR25xRCxFQUFFMGlCLEdBQUdwckIsTUFBSyxXQUFXZzBELEdBQUd0ckQsT0FBakRpdkIsVUFHL1ozckIsRUFBRWt0QixHQUFHLFdBQVcsSUFBSXh3QixFQUFFOU4sS0FBSyxPQUFPazRELEdBQUdsNEQsS0FBS3d3QixFQUFFMGUsR0FBRWx2QyxNQUFNOEQsUUFBUXl2RCxZQUFZbnVELE1BQUssU0FBU3lKLEdBQUcsSUFBSWYsRUFBRStDLEVBQUUsQ0FBQyxJQUFJMkUsRUFBRSxHQUFHQSxFQUFFbXJDLEdBQUU3eUMsSUFBSWUsRUFBRSxDQUFDMkcsRUFBRW1yQyxHQUFFN3lDLEdBQUcrOEIsSUFBSSxJQUFJaDlCLEVBQUVnQixFQUFFZzhCLElBQUlyMUIsRUFBRSxNQUFTQSxHQUFhLEtBQUtBLEdBQTNCLE1BQXVDM0gsR0FBYSxLQUFLQSxHQUFLMkgsR0FBRzNILEVBQUUsR0FBRzJILEVBQUUsT0FBTzAvQyxHQUFHdlUsR0FBRTd5QyxHQUFHZSxHQUFHOHhDLEdBQUU3eUMsR0FBR28wQixLQUFPeWUsR0FBRTd5QyxJQUFJZSxLQUFFdXBELEdBQUd0cUQsRUFBRWUsR0FBR0EsSUFBSXlsRCxHQUFHemxELEdBQUdBLEVBQUVtaUIsR0FBR2xqQixFQUFFNHdCLEdBQUc1d0IsRUFBRWUsR0FBRytnRCxHQUFHOWhELEVBQUVlLEVBQUVmLEdBQUdzckQsR0FBR3RyRCxTQUFPc0QsRUFBRWlmLEdBQUcsU0FBU3ZpQixHQUFHLE9BQU9rcUQsR0FBR2g0RCxLQUFLd3dCLEVBQUUxaUIsSUFBSXNELEVBQUV5b0IsR0FBRyxXQUFXdS9CLEdBQUdwNUQsTUFBTUEsS0FBS3F3QixHQUFHc3dCLEdBQUUzZ0QsUUFBUW9SLEVBQUVnckIsR0FBRyxXQUFXcDhCLEtBQUttM0IsTUFBTS9sQixFQUFFaXJCLEdBQUcsV0FBV3I4QixLQUFLbTNCLE1BQ2pJL2xCLEVBQUV3b0IsR0FBRyxTQUFTOXJCLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUssT0FBT0EsS0FBS00sRUFBRThFLE1BQUssV0FBVyxPQUFPOHpELEdBQUdycUQsRUFBRWt1QixHQUFFanZCLFFBQU9zRCxFQUFFbXJCLEdBQUcsU0FBU3p1QixHQUFHLElBQUllLEVBQUU3TyxLQUFLQSxLQUFLMjZELHNCQUFxQixXQUFXN3NELEVBQUVoTSxLQUFLNitDLEdBQUU5eEMsUUFDM2N1QyxFQUFFb3JCLEdBQUcsU0FBUzF1QixHQUFHLElBQUllLEVBQUU3TyxNQUs0SyxTQUFZOE4sRUFBRWUsR0FBR2YsRUFBRTRCLEVBQUVqUSxLQUFLb1AsR0FBR3k1QyxHQUFFeDZDLEVBQUVBLEVBQUV4TixFQUFFOEUsTUFBSyxZQUFZMEksRUFBRStDLEdBQUdtaUIsRUFBR2xsQixFQUFFNEIsRUFBRWIsSUFBSWYsRUFBRStsRCxJQUFJL2xELEVBQUU0b0MsV0FBVzVvQyxFQUFFK2xELEVBQUUvbEQsRUFBRTRvQyxTQUFTN25DLEVBQUUwcUQsR0FBR3pyRCxTQUxwUjhzRCxDQUFHNTZELE1BQUssV0FBVzhOLEVBQUVoTSxLQUFLNitDLEdBQUU5eEMsUUFBT3VDLEVBQUU4ckIsR0FBRyxTQUFTcHZCLEVBQUVlLEVBQUUyRyxHQUFHLElBQUkzSCxFQUFFN04sS0FBeUgsT0FBcEhBLEtBQUtnd0IsSUFBSXpyQixRQUFRQyxVQUFVWSxNQUFLLFdBQVcsbUJBQW9CMEksRUFBRUEsRUFBRTZ5QyxHQUFFOXlDLElBQUksbUJBQW9CQyxFQUFFaE0sTUFBTWdNLEVBQUVoTSxLQUFLNitDLEdBQUU5eUMsT0FBYTdOLEtBQUs4NEIsR0FBR2hyQixFQUFFZSxFQUFFMkcsSUFBSXBFLEVBQUU2ckIsR0FBRyxTQUFTbnZCLEVBQUVlLEVBQUUyRyxHQUFHLElBQUkzSCxFQUFFN04sS0FBd0ksT0FBbklBLEtBQUtnd0IsSUFBSXpyQixRQUFRQyxVQUFVWSxNQUFLLFdBQVd5SSxFQUFFZ21ELEVBQUVobUQsRUFBRTZvQyxTQUFTLG1CQUFvQjVvQyxFQUFFQSxFQUFFNnlDLEdBQUU5eUMsSUFBSSxtQkFBb0JDLEVBQUVoTSxNQUFNZ00sRUFBRWhNLEtBQUs2K0MsR0FBRTl5QyxPQUFhN04sS0FBS3U0QixHQUFHenFCLEVBQUVlLEVBQUUyRyxJQUNoYXBFLEVBQUU4b0IsR0FBRyxTQUFTcHNCLEdBQUcsSUFBSWUsRUFBRTdPLEtBQW9HLE9BQU9zb0QsR0FBRXRvRCxLQUF0R0EsS0FBS00sRUFBRThFLE1BQUssV0FBVyxPQUFPdTdDLEdBQUU5eEMsR0FBRzh4QyxHQUFFOXhDLEdBQUdxekIsRUFBRXAwQixHQUFHMUksTUFBSyxTQUFTeUksR0FBRyxNQUFNLENBQUN5akMsWUFBWXpqQyxNQUFLLFVBQXlCdUQsRUFBRTRzQixHQUFHLFNBQVNsd0IsR0FBRyxJQUFJZSxFQUFFN08sS0FBSyxPQUFPQSxLQUFLTSxFQUFFOEUsTUFBSyxXQUFXLE9BQU84ekQsR0FBR3JxRCxFQUFFa21DLEdBQUVsbUMsRUFBRWYsRUFBRXd6QyxHQUFHLENBQUNwZ0MsTUFBTXBULFFBQU8xSSxNQUFLLFNBQVNvUSxHQUFHLElBQUkzSCxFQUFFMkgsRUFBRW03QyxLQUFvQyxPQUEvQnNFLEdBQUdwbkQsRUFBRSxlQUFjLEdBQUlnQixFQUFFd2hCLEdBQUd4aUIsR0FBVTJILE1BQUtwRSxFQUFFeXNCLEdBQUcsU0FBUy92QixFQUFFZSxHQUFHLElBQUkyRyxFQUFFeFYsS0FBSyxPQUFPQSxLQUFLTSxFQUFFOEUsTUFBSyxXQUFXLE9BQU84ekQsR0FBRzFqRCxFQUFFdS9CLEdBQUV2L0IsRUFBRTFILEVBQUVvbkMsR0FBRyxDQUFDOUIsTUFBTXRsQyxFQUFFdWxDLFNBQVN4a0MsU0FDdFp1QyxFQUFFNm5CLEdBQUcsU0FBU25yQixFQUFFZSxHQUFHLElBQUkyRyxFQUFFeFYsS0FBSyxPQUFPQSxLQUFLTSxFQUFFOEUsTUFBSyxXQUFXLE9BQU84ekQsR0FBRzFqRCxFQUFFdS9CLEdBQUV2L0IsRUFBRTFILEVBQUU0eUMsR0FBRyxDQUFDdE4sTUFBTXRsQyxFQUFFdWxDLFNBQVN4a0MsU0FBUXVDLEVBQUVzakIsR0FBRyxTQUFTNW1CLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUssT0FBT0EsS0FBS00sRUFBRThFLE1BQUssV0FBVyxPQUFPOHpELEdBQUdycUQsRUFBRWYsRUFBRW9qQixHQUFHcmlCLEVBQUVmLFFBQU9zRCxFQUFFMnNCLEdBQUcsU0FBU2p3QixHQUErSixPQUE1Smk4QixHQUFHLHlKQUFnSy9wQyxLQUFLMDBCLEdBQUc1bUIsSUFDM1hzRCxFQUFFOGxCLEdBQUcsV0FBVyxJQUFJcHBCLEVBQUU5TixLQUFLLE9BQU9BLEtBQUtNLEVBQUU4RSxNQUFLLFdBQVcsSUFBSXlKLEVBQUU4eEMsR0FBRTd5QyxHQUFHLEdBQUdlLEdBQUdBLEVBQUUybEQsWUFBWSxDQUFDLElBQUloL0MsRUFBRTQwQixHQUFHLENBQUNnRyxXQUFXLEtBQUtILFdBQVUsSUFBSyxPQUFPN0YsR0FBRyxDQUFDdW1CLEtBQUs5aEQsRUFBRTJqQyxXQUFXLEtBQUtrakIsbUJBQW1CbGdELEVBQUVtZ0QsY0FBYyxXQUFXLE9BQU91RCxHQUFHcHJELEVBQUVBLEVBQUVBLEVBQUVvcEIsTUFBTTl4QixNQUFLLFNBQVN5SSxHQUFHLElBQUk3RCxFQUFFNkQsRUFBRThpRCxLQUFvQyxPQUEvQnNFLEdBQUdqckQsRUFBRSxlQUFjLEdBQUk4RCxFQUFFdWlCLEdBQUdybUIsR0FBVTZELFNBQXFFdUQsRUFBRXNsQyxPQUFPLFdBQVcsT0FBT2lLLEdBQUUzZ0QsT0FBTzJnRCxHQUFFM2dELE1BQU02cUMsS0FBSyxNQUNwUHo1QixFQUFFNG5CLEdBQUcsU0FBU2xyQixHQUFHOU4sS0FBSzI2RCxxQkFBcUI3c0QsR0FBRzlOLEtBQUswd0IsSUFBSSxFQUFFMXdCLEtBQUswd0IsR0FBR2l3QixHQUFFM2dELE9BQU9tMEQsR0FBR3hULEdBQUUzZ0QsUUFBUW9SLEVBQUVtc0IsR0FBRyxTQUFTenZCLEdBQUcsSUFBSWUsRUFBRTdPLEtBQUt5eUIsRUFBRXp5QixLQUFLdXdCLEdBQUUsU0FBUy9hLEdBQUdBLEdBQUcxSCxHQUFHZSxFQUFFNmhCLE9BQU0sRUFBRTF3QixLQUFLMHdCLElBQUkxd0IsS0FBSzB3QixFQUFFLEdBQUcsR0FBRzF3QixLQUFLMHdCLEdBQUdpd0IsR0FBRTNnRCxPQUFPbzBELEdBQUd6VCxHQUFFM2dELE9BQU9BLEtBQUs2NkQsd0JBQXdCL3NELElBQ3Rac0QsRUFBRXVwRCxxQkFBcUIsU0FBUzdzRCxHQUFHLElBQUllLEVBQUU3TyxLQUFLQSxLQUFLdXdCLEVBQUU5d0IsS0FBS3FPLEdBQUd3NkMsR0FBRXRvRCxLQUFLQSxLQUFLTSxFQUFFOEUsTUFBSyxXQUFXeUosRUFBRWdDLEdBQUdtaUIsRUFBR25rQixFQUFFMGhCLEVBQUV6aUIsSUFBSUEsRUFBRXlyRCxHQUFHMXFELFNBQVF1QyxFQUFFeXBELHdCQUF3QixTQUFTL3NELEdBQUcybUIsRUFBR3owQixLQUFLdXdCLEdBQUUsU0FBUzFoQixHQUFHLE9BQU9BLEdBQUdmLE1BQzlMc0QsRUFBRTRJLE9BQU8sV0FBV2hhLEtBQUs2USxHQUFFLEVBQUcsSUFBSSxJQUFJL0MsRUFBRSxFQUFFQSxFQUFFOU4sS0FBSzI1QyxFQUFFaDVDLE9BQU9tTixJQUFJOU4sS0FBSzI1QyxFQUFFN3JDLEdBQUdtd0IsT0FBTyxlQUErSCxPQUFoSGorQixLQUFLMjVDLEVBQUUsR0FBRzM1QyxLQUFLd3dCLElBQUkxaUIsRUFBRTlOLEtBQUt3d0IsR0FBSTNoQixFQUFFNHlCLGVBQWVpMkIsR0FBRyxTQUFTNXBELEVBQUVBLEVBQUU5TixLQUFLeXhCLElBQUt6eEIsS0FBSzZPLElBQUlpaEQsR0FBRzl2RCxLQUFLNk8sRUFBRTdPLE1BQU13d0QsR0FBR3h3RCxLQUFLNk8sRUFBRUEsSUFBV3RLLFFBQVFDLFdBQTRFNE0sRUFBRWdvQixHQUFHLFNBQVN0ckIsR0FBRyxPQUFPdzZDLEdBQUV0b0QsS0F2Sm5VLFNBQVk4TixFQUFFZSxHQUFHLE9BQU9rbUMsR0FBRWpuQyxFQUFFOHlDLEdBQUcsQ0FBQ3oyQyxXQUFXMEUsRUFBRWlzRCxZQUFZbnlCLEtBQUtsRCxLQUFLLHFCQUFxQnJnQyxNQUFLLFNBQVNvUSxHQUFHLE9BQU9BLEVBQUV1bEQsZUFBZSxNQXVKdU1DLENBQUdoN0QsS0FBSzhOLEVBQUVBLEtBQUtzRCxFQUFFcXJCLEdBQUcsU0FBUzN1QixHQUFHLFFBQVF5bEMsR0FBR3psQyxJQUNuWHNELEVBQUVzbEIsR0FBRyxTQUFTNW9CLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUV4VixLQUFLLE9BQU9zb0QsR0FBRXRvRCxLQUFLKzhCLEtBQUkzM0IsTUFBSyxXQUFXLElBQUl5SSxFQUFFLElBQUlxL0IsR0FBR3IrQixHQUFHLElBQUloQixFQUFFMkgsRUFBRSxNQUFNLElBQUluRyxFQUFFLGlCQUFpQnErQixHQUFHLG9EQUFvRCxPQUFPRSxHQUFHLy9CLE1BQUt6SSxNQUFLLFNBQVN5SSxHQUFHLE9BQU8ySCxFQUFFMUgsRUFBRTRvQixHQUFHNW9CLEVBQUVELE1BQUt6SSxNQUFLLGlCQUFnQmdNLEVBQUV5dkIsR0FBRyxTQUFTL3lCLEdBQUcsT0FBTzlOLEtBQUtxMEIsR0FBR3ZtQixHQUFHMUksTUFBSyxTQUFTeUosR0FBRyxPQUFPQSxFQUFFdEwsS0FBSzZ2QyxVQUFTaGlDLEVBQUVza0IsR0FBRyxTQUFTNW5CLEVBQUVlLEdBQUcsT0FBT3k1QyxHQUFFdG9ELEtBQUtBLEtBQUs4TixFQUFFNG5CLEdBQUc1bkIsRUFBRWUsR0FBR3pKLE1BQUssaUJBQWdCZ00sRUFBRWlqQixHQUFHLFNBQVN2bUIsR0FBRyxPQUFPdzZDLEdBQUV0b0QsS0FBS0EsS0FBSzhOLEVBQUV1bUIsR0FBR3ZtQixHQUFHMUksTUFBSyxTQUFTeUosR0FBRyxPQUFPLElBQUltOEIsR0FBR244QixRQUNqZHVDLEVBQUV1akIsR0FBRyxTQUFTN21CLEdBQUcsT0FBT3c2QyxHQUFFdG9ELEtBQUtBLEtBQUs4TixFQUFFNm1CLEdBQUc3bUIsR0FBRzFJLE1BQUssaUJBQWdCZ00sRUFBRXFsQixHQUFHLFNBQVMzb0IsRUFBRWUsR0FBRyxJQUFJMkcsRUFBRXhWLEtBQUssT0FBT3NvRCxHQUFFdG9ELEtBQUsrOEIsS0FBSTMzQixNQUFLLFdBQVcsWUFBTSxJQUFxQnlKLEdBQUc2bUIsR0FBRzdtQixHQUFHLEdBQUcrK0IsR0FBRyxJQUFJVixHQUFHcitCLE9BQU16SixNQUFLLFNBQVN5SSxHQUFHLE9BQU8ySCxFQUFFMUgsRUFBRTJvQixHQUFHM29CLEVBQUVELE1BQUt6SSxNQUFLLGlCQUFnQmdNLEVBQUUrc0IsR0FBRyxTQUFTcndCLEVBQUVlLEdBQUcsT0FBT3k1QyxHQUFFdG9ELEtBQUs4d0QsR0FBRzl3RCxLQUFLOE4sRUFBRWUsRUFBRWtqQixFQUFFL3hCLEtBQUswMEIsR0FBRzEwQixTQUMxU29SLEVBQUU4c0IsR0FBRyxTQUFTcHdCLEVBQUVlLEdBQUcsSUFBSTJHLEVBQUV4VixLQUFLLE9BQU9zb0QsR0FBRXRvRCxLQUFLKzhCLEtBQUkzM0IsTUFBSyxXQUFXLElBQUl5SSxFQUFFZ0IsR0FBRzQyQixLQUFLejdCLEVBQUVzcEMsR0FBR3hsQyxFQUFFRCxHQUFXLEtBQVJBLEVBQUUwbEMsR0FBRzFsQyxJQUFTLE1BQU0sSUFBSXdCLEVBQUUsaUJBQWlCLHVCQUF1QixHQUFHeEIsRUFBRTQrQixXQUFXajNCLEVBQUUwNUIsSUFBSSxNQUFNLElBQUk3L0IsRUFBRSxzQkFBc0IsT0FBT21HLEVBQUVrZixHQUFHMXFCLFFBQXNCeXZELEdBQUduM0QsVUFBVTI0RCxPQUFPLGFBQWF4QixHQUFHbjNELFVBQVU0UyxNQUFNLGFBQWF1a0QsR0FBR24zRCxVQUFVczVDLFlBQVksYUFBYTZkLEdBQUduM0QsVUFBVTQ0RCxRQUFRLGFBQWlELElBQUlDLEdBQUcsS0FBeVUsU0FBU0MsR0FBR3R0RCxFQUFFZSxHQUFHLE9BQU9BLEVBQUV3c0QsR0FBR3hzRCxLQUFJZixFQUFFQSxFQUFFZSxJQUFTLEtBQUssU0FBU3dzRCxHQUFHdnRELEdBQUcsT0FBT0EsT0FBRSxJQUFxQkEsRUFBRSxLQUFLQSxHQUFHQSxFQUFFL04sV0FBVyxLQUN4MkIsU0FBU3U3RCxHQUFHeHRELEVBQUVlLEdBQUc3TyxLQUFLaU8sR0FBRSxFQUFHak8sS0FBS3dWLEVBQUUzRyxFQUFFN08sS0FBSzhOLEVBQUU5TixLQUFLNk8sRUFBRSxLQUFLN08sS0FBS3N3QixFQUFFLGNBQWN0d0IsS0FBS3dWLEVBQUU0UCxLQUFLcGxCLEtBQUtpUSxFQUFFNHBCLEdBQUcvckIsR0FBRyxJQUFJMEgsRUFBRXhWLEtBQUtBLEtBQUtNLEVBQUUsV0FBV2tWLEVBQUUwbEQsV0FBV2w3RCxLQUFLc3dCLEVBQUV0d0IsS0FBS2s3RCxVQUFVbDZCLEdBQUdoaEMsS0FBS2lRLEVBQUUsUUFBUWpRLEtBQUtNLEdBQzZMLFNBQVNpN0QsR0FBR3p0RCxHQUFHLEdBQUdBLEVBQUVHLEVBQUUsTUFBTTFDLE1BQU0sdUNBQXlDLFNBQVNpd0QsTUFBZ0MsU0FBU0MsTUFGekUvQixHQUFHcDNELFVBQVUyNEQsT0FBTyxTQUFTbnRELEVBQUVlLEdBQXlDLE9BQXRDN08sS0FBSzhOLEVBQUU5TixLQUFLNk8sRUFBRTlPLFlBQVksSUFBSXU3RCxHQUFHeHRELEVBQUVlLEdBQVU3TyxLQUFLNk8sS0FBSzZxRCxHQUFHcDNELFVBQVU0UyxNQUFNLFNBQVNwSCxHQUFHLElBQUllLEVBQUV1c0QsR0FBR3A3RCxLQUFLOE4sR0FBR0EsRUFBRXV0RCxHQUFHdnRELEdBQUdlLEdBQUdmLElBQUllLEVBQUVtTCxnQkFBZ0JoYSxLQUFLOE4sRUFBRUEsS0FBSzRyRCxHQUFHcDNELFVBQVVzNUMsWUFBWSxTQUFTOXRDLEdBQUcsT0FBT0EsRUFBRXN0RCxHQUFHcDdELEtBQUs4TixJQUFJQSxFQUFFOHRDLGNBQWMsTUFBTThkLEdBQUdwM0QsVUFBVTQ0RCxRQUFRLFNBQVNwdEQsSUFBSUEsRUFBRXN0RCxHQUFHcDdELEtBQUs4TixLQUFLQSxFQUFFb3RELFdBQ3ZpQkksR0FBR2g1RCxVQUFVczVDLFlBQVksV0FBb0IsT0FBVDJmLEdBQUd2N0QsTUFBYUEsS0FBSzZPLEdBQ3hQeXNELEdBQUdoNUQsVUFBVTQ0RCxRQUFRLFdBQVdLLEdBQUd2N0QsTUFBTSxJQUFJOE4sRUFBRTlOLEtBQUtBLEtBQUs4TixJQUFJOU4sS0FBSzhOLEVBQUUyVixZQUFXLFdBQVczVixFQUFFZSxFQXJSOE4sV0FBYyxJQUFJLElBQUlmLEVBQUUsR0FBR2UsRUFBRSxHQUFHLEVBQUVmLEdBQUdlLEVBQUVwUCxLQUFLLGlFQUFpRThrQyxPQUFPbHRCLEtBQUsydUIsTUFBTSxHQUFHM3VCLEtBQUtJLFlBQVkzSixJQUFJLE9BQU9lLEVBQUV4TyxLQUFLLElBcVJqWXE3RCxHQUFLLElBQUk3c0QsRUFBRWYsRUFBRTBILEVBQUVuTixTQUFTbU4sRUFBRTFILEVBQUUwSCxFQUFFLG9CQUFvQixHQUFHM0csRUFBRSxJQUFJQSxFQUFFZixFQUFFZSxHQUFHLE1BQU1oQixJQUFJQyxFQUFFQSxFQUFFMlYsWUFBVyxXQUE2QixHQUFsQjNWLEVBQUVBLEVBQUUsS0FBS0EsRUFBRWUsRUFBRSxLQUFRMkcsRUFBRSxJQUFJQSxJQUFJLE1BQU0zSCxJQUFJQyxFQUFFd2lCLEdBQUd4aUIsRUFBRW90RCxZQUFXLE9BQU0sT0FBT0ksR0FBR2g1RCxVQUFVMFgsT0FBTyxXQUFXdWhELEdBQUd2N0QsTUFBTUEsS0FBS2lPLEdBQUUsRUFBR2llLGFBQWFsc0IsS0FBSzhOLEdBQUc5TixLQUFLOE4sRUFBRSxLQUFLNnpCLEdBQUUzaEMsS0FBS2lRLEVBQUUsUUFBUWpRLEtBQUtNLElBQThGNHBDLEdBQUVzeEIsR0FBRyxZQUFZLFNBQXdCQyxHQUFHbjVELFVBQVUyTCxFQUFFLFdBQTJCLE9BQWhCa3RELEtBQUtBLEdBQUcsSUFBSXpCLElBQVczOEIsR0FBRW8rQixLQUFLTSxHQUFHbjVELFVBQVVrVCxFQUFFLGFBQWEsSUFBSW1tRCxHQUFHLEtBQUssU0FBU0MsS0FBSzU3RCxLQUFLNk8sRUFBRTJoQixFQUFFcXJDLFdBQVdDLElBQVMsRUFBRTk3RCxLQUFLaVEsRUFBRSxLQUFLalEsS0FBSzhOLEVBQUUsUUFBUXVKLEtBQUsydUIsTUFBTSxJQUFJM3VCLEtBQUtJLFVBQVUxWCxXQUFXLElBQUlnOEQsR0FBRyxJQUFJMWxDLEdBQUdDLEdBQUcscUZBQXFGMGxDLEdBQUcsSUFBSTN5QixHQUFHLElBQUksS0FDajBCdXlCLEdBQUd0NUQsVUFBVTJMLEVBQUUsU0FBU0gsR0FBRyxJQUFJZSxFQUFFN08sS0FBSyxPQUFPLElBQUlzOEIsSUFBRSxTQUFTOW1CLEVBQUUzSCxHQUFHLElBQUk3RCxFQUFFeVosWUFBVyxXQUFXNVYsRUFBRSxJQUFJd0IsRUFBRSw2QkFBNEIyc0QsR0FBR2wyRCxRQUFXMHFCLEVBQUVxckMsWUFBWS90RCxJQUFJZSxFQUFFb0IsSUFBSXBCLEVBQUVBLEdBQUcyaEIsRUFBRTNoQixFQUFFZixHQUFHLFdBQVcsR0FBRzBpQixFQUFFcXJDLFdBQVcsQ0FBQ2h0RCxFQUFFb0IsRUFBRW5DLEVBQUUsSUFBSUcsRUFBRXVpQixFQUFFcXJDLFdBQVdaLE9BQU96cUMsRUFBRXFyQyxXQUFXWixPQUFPLFNBQVMzcUMsRUFBRWp1QixHQUFrQixPQUFmaXVCLEVBQUVyaUIsRUFBRXFpQixFQUFFanVCLEdBQUd3TSxFQUFFQSxJQUFXeWhCLEdBQUdwRSxhQUFhbGlCLEdBQUd3TCxFQUFFZ2IsRUFBRXFyQyxpQkFBaUIzdkMsYUFBYWxpQixHQUFHNkQsRUFBRSxJQUFJd0IsRUFBRSwwQkFBMEJtaEIsRUFBRTNoQixFQUFFZixJQUF1Q2l2QixHQUFFK2UsR0FBL0Iza0IsR0FBRzRrQyxHQUFHLENBQUNsa0IsT0FBT2hwQyxFQUFFZixFQUFFZy9DLEdBQUdoL0MsR0FBRyxPQUFjd0IsR0FBRSxXQUFXNGMsYUFBYWxpQixHQUFHNkQsRUFBRSxJQUFJd0IsRUFBRSxpQkFBaUIseURBQTJENmMsYUFBYWxpQixHQUNuakJ3TCxFQUFFZ2IsRUFBRXFyQyxpQkFBZUQsR0FBR3Q1RCxVQUFVa1QsRUFBRSxXQUFXeFYsS0FBSzZPLEtBQUssSUFBSW90RCxHQUFHLEtBQUssU0FBU0MsR0FBR3B1RCxFQUFFZSxFQUFFMkcsRUFBRTNILEVBQUU3RCxFQUFFaUcsRUFBRWhDLEdBQTBMLEdBQXZMaThCLEdBQUVscUMsS0FBSyxPQUFPLGFBQWFBLEtBQUt3VixFQUFFeFYsS0FBS2lRLEVBQUUsS0FBS2pRLEtBQUswd0IsR0FBRSxFQUFHMXdCLEtBQUs2USxFQUFFaEMsRUFBRTdPLEtBQUtpTyxFQUFFLEtBQUtBLEdBQUcwdEQsS0FBS0EsR0FBRyxJQUFJRixJQUFJeHRELEVBQUUwdEQsS0FBS00sS0FBS0EsR0FBRyxJQUFJTCxJQUFJM3RELEVBQUVndUQsSUFBSWo4RCxLQUFLeVEsRUFBRXhDLEVBQUVqTyxLQUFLOE4sRUFBRTBILEdBQUcsQ0FBQzJtRCxNQUFNLFFBQVF0a0QsS0FBSyxTQUFTN1gsS0FBS3N3QixFQUFFLEdBQU10d0IsS0FBSzhOLEVBQUVzdUQsSUFBSSxNQUFNLElBQUkvc0QsRUFBRSxpQkFBaUIsNkdBQTZJLEdBQWhDclAsS0FBS00sRUFBRSxjQUFjTixLQUFLOE4sRUFBRXV1RCxLQUFRN3JDLEVBQUU5bUIsU0FBUyxNQUFNLElBQUkyRixFQUFFLDhDQUE4Qyw2RkFDdGhCLElBQUl3cUIsR0FBR2hyQixLQUFLN08sS0FBS00sR0FBR3U1QixHQUFHaHJCLEdBQUd5dEQsZ0JBQWdCLE1BQU0sSUFBSWp0RCxFQUFFLGlCQUFpQiwrRUFBK0VyUCxLQUFLbUMsRUFBRSxJQUFJbzZDLEdBQUd6dUMsRUFBRW1DLEdBQUcsS0FBS2pHLEdBQUcsTUFBTWhLLEtBQUt1d0IsRUFBRTFpQixHQUFHLFdBQVcsT0FBTyxNQUFNLElBQUl5aUIsRUFBRXR3QixLQUFLQSxLQUFLd3dCLEVBQUUsR0FBRyxJQUFJbnVCLEVBQUVyQyxLQUFLOE4sRUFBRXl1RCxJQUFJdjhELEtBQUs4TixFQUFFeXVELElBQUksU0FBUzlyRCxHQUFXLEdBQVIrckQsR0FBR2xzQyxFQUFFN2YsR0FBTSxtQkFBb0JwTyxFQUFFQSxFQUFFb08sUUFBUSxHQUFHLGlCQUFrQnBPLEVBQUUsQ0FBQyxJQUFJeXVCLEVBQUVzWCxHQUFFL2xDLEVBQUVtdUIsR0FBRyxtQkFBb0JNLEdBQUdBLEVBQUVyZ0IsS0FBSyxJQUFJdkwsRUFBRWxGLEtBQUs4TixFQUFFMnVELElBQUl6OEQsS0FBSzhOLEVBQUUydUQsSUFBSSxXQUFzQixHQUFYRCxHQUFHbHNDLEVBQUUsTUFBUyxtQkFBb0JwckIsRUFBRUEsU0FBUyxHQUFHLGlCQUFrQkEsRUFBRSxDQUFDLElBQUl1TCxFQUNwZjIzQixHQUFFbGpDLEVBQUVzckIsR0FBRyxtQkFBb0IvZixHQUFHQSxNQUFNLElBQUk4ckQsR0FBRyxXQUFXRSxHQUFHLG1CQUFtQkwsR0FBRyxVQUFVQyxHQUFHLE9BQU8sU0FBU0csR0FBRzF1RCxFQUFFZSxHQUFHLElBQUksSUFBSTJHLEVBQUUsRUFBRUEsRUFBRTFILEVBQUUwaUIsRUFBRTd2QixPQUFPNlUsSUFBSSxJQUFJMUgsRUFBRTBpQixFQUFFaGIsR0FBRzNHLEdBQUcsTUFBTWhCLEtBQXVELFNBQVM2dUQsR0FBRzV1RCxFQUFFZSxHQUEyQyxPQUF4Q2YsRUFBRXdpQixFQUFFN3dCLEtBQUtvUCxHQUFHQSxFQUFFMGlCLElBQUcsV0FBV2lELEVBQUcxbUIsRUFBRXdpQixFQUFFemhCLE1BQVlBLEVBRzVSLFNBQVM4dEQsR0FBRzd1RCxHQUFHLEdBQUdBLEVBQUU0aUIsRUFBRSxNQUFNLElBQUlyaEIsRUFBRSxpQkFBaUIsa0RBQ25ELFNBQVN1dEQsR0FBRzl1RCxFQUFFZSxFQUFFMkcsR0FBRyxJQUFJM0gsR0FBRSxFQUFHLElBQUk3TixLQUFLNk8sRUFBRTJHLEdBQUcsU0FBZSxNQUFNdkgsR0FBRyxNQUFNLElBQUlvQixFQUFFLGlCQUFpQiwwREFBMkQsSUFBR3JQLEtBQUs2TyxFQUFFL0ssVUFBUzlELEtBQUs2TyxFQUFFL0ssUUFBUW9lLE9BQW9DLE1BQU0sSUFBSTdTLEVBQUUsbUJBQXpDbUcsRUFBRXhWLEtBQUs2TyxFQUFFL0ssUUFBUW9lLE9BQTJDLElBQUlsWSxFQUFFaEssS0FBS2lRLEVBQUUsS0FBSyxJQUFJQSxFQUFFalEsS0FBSzZPLEVBQUUydkMsT0FBTzVxQixLQUFLLE1BQU0zbEIsSUFBSSxJQUFJSixFQUFFN04sS0FBSzZPLEVBQUUydkMsT0FBTzV4QixTQUFTaXdDLGtDQUFrQyxNQUFNNXVELElBQUlnQyxFQUFFLGVBQXFCaTRCLEdBQUcsZUFBcUJqNEIsR0FBRyxLQUFLaXNELEdBQUczNUQsS0FBS3ZDLEtBQUt3VixFQUFFMUgsRUFBRWUsR0FBRSxXQUFXLElBQUksSUFBSVosRUFBRWpFLEVBQUU2RSxFQUFFMnZDLE9BQU9ydEIsS0FBSyxNQUFNYixHQUFHcmlCLEVBQ3JmLEtBQUssT0FBT0EsSUFBR2dDLEVBQUVtakIsRUFBR1QsR0FBSTlrQixHQUFZLFNBQVNpdkQsR0FBR2h2RCxFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUdDLEVBQUUsQ0FBQzBILEVBQUV2VSxNQUFNcUIsVUFBVUUsTUFBTUQsS0FBS2lULEdBQVcsSUFBUixJQUFJeEwsRUFBRSxFQUFVaUcsR0FBRSxFQUFHaEMsRUFBRSxFQUFFQSxFQUFFWSxFQUFFbE8sT0FBT3NOLElBQUksR0FBR1ksRUFBRVosR0FBR2tMLFNBQVNsSixHQUFFLE1BQU8sQ0FBQyxHQUFHQSxFQUFFLE1BQU0sSUFBSVosRUFBRSxpQkFBaUIsa0ZBQWtGckYsSUFBZSxHQUFYaUcsRUFBRXBCLEVBQUVsTyxPQUFVNlUsRUFBRTdVLE9BQU9xSixHQUFHaUcsRUFBRXVGLEVBQUU3VSxPQUFPa04sRUFBRSxhQUFhN0QsR0FBR2lHLEVBQUUsR0FBR2pHLEVBQUUsYUFBYUEsRUFBRSxhQUFhQSxFQUFFLElBQUlpRyxFQUFFLGNBQWMsWUFBWXVGLEVBQUU3VSxPQUFPLFFBQVEsQ0FBQyxJQUFJcUosRUFBRSxFQUFFQSxFQUFFd0wsRUFBRTdVLE9BQU9xSixJQUFJLEdBQUdpRyxFQUFFcEIsRUFBRTdFLEdBQUdtUCxlQUFVLElBQVMzRCxFQUFFeEwsSUFBSTZFLEVBQUU3RSxHQUFHdzdCLEVBQUVod0IsRUFBRXhMLE1BQU1pRyxFQUFFLENBQVEsR0FBUHBCLEVBQUVBLEVBQUU3RSxHQUFNLEVBQUVBLEdBQUdBLEdBQUcreUQsR0FBR3A4RCxPQUFPLE1BQU0sSUFBSTBPLEVBQUUsaUJBQ3poQixtRUFBbUVtRyxFQUFFdW5ELEdBQUcveUQsR0FBRzZELEdBQUdBLEVBQUUsR0FBRzJILEVBQUUsZUFBZTNHLEVBQUVuTSxLQUFLLElBQUltTSxFQUFFbk0sS0FBSyxLQUFLLElBQUksV0FBV21NLEVBQUVpMUIsRUFBRSxJQUFJLE1BQU1oMkIsRUFBRUQsRUFBRSxNQUFNLEdBQUdBLEVBQUUsTUFBTSxJQUFJd0IsRUFBRSxpQkFBaUJ2QixFQUFFLFlBQVlELElBTjRFdUQsRUFBRThxRCxHQUFHNTVELFdBQ2pTd3hCLEdBQUcsV0FBVyxJQUFJaG1CLEVBQUU5TixLQUFLLE9BQU9BLEtBQUtpUSxFQUFFalEsS0FBS2lRLEVBQUVqUSxLQUFLaVEsRUFBRXlzRCxHQUFHMThELEtBQUsrOEIsS0FBSTMzQixNQUFLLFdBQVcsR0FBR3VqQyxPQUFPZixLQUFLLE9BQU9MLEtBQUssTUFBTSxJQUFJbDRCLEVBQUUsOENBQThDLCtFQUErRWpLLE1BQUssV0FBVyxPQUFPMEksRUFBRTJDLEVBQUV4QyxFQUFFSCxFQUFFeWlCLFFBQU9uckIsTUFBSyxTQUFTeUosR0FBUyxPQUFOZixFQUFFRyxFQUFFWSxFQUFTa21DLEdBQUVqbkMsRUFBRTNMLEVBQUVpL0MsR0FBRyxPQUFNaDhDLE1BQUssU0FBU3lKLEdBQUdmLEVBQUVBLEVBQUVzdUQsSUFBSXZ0RCxFQUFFd3lDLG9CQUFtQi94QyxHQUFFLFNBQVNULEdBQVksTUFBVGYsRUFBRW1DLEVBQUUsS0FBV3BCLE9BQ3JadUMsRUFBRTZwRCxPQUFPLFdBQVcwQixHQUFHMzhELE1BQU0sSUFBSThOLEVBQUU5TixLQUFLLE9BQU8wOEQsR0FBRzE4RCxLQUFLQSxLQUFLOHpCLEtBQUsxdUIsTUFBSyxXQUFXLEdBQUcsT0FBTzBJLEVBQUUwSCxFQUFFLENBQUMsSUFBSTNHLEVBQUVmLEVBQUUrQyxFQUFFLElBQUkvQyxFQUFFeE4sRUFBRSxDQUFDLElBQUlrVixFQUFFcWtCLEdBQUdockIsR0FBR0EsRUF2VS9ILFNBQVlmLEVBQUVlLEVBQUUyRyxHQUFHLElBQUkzSCxFQUFFMUgsVUFBVTZELEVBQUVOLFNBQVN1RyxFQUFFaUUsT0FBT3JHLEVBQUUsSUFBSUksRUFBRUosRUFBRSxHQUFHLElBQUkrckIsSUFBSTNyQixJQUFJQSxFQUFFdkwsTUFBTXVMLEVBQUU0SixNQUFNLENBQW9ELEdBQW5ENUgsRUFBRSxDQUFDLElBQUlBLEdBQUdoQyxFQUFFdkwsTUFBTXVOLEVBQUV4USxLQUFLLFVBQVU0NEIsR0FBR3BxQixFQUFFdkwsTUFBTSxLQUFRdUwsRUFBRTRKLEtBQUssQ0FBQzVILEVBQUV4USxLQUFLLFVBQVU0NEIsR0FBR3BxQixFQUFFNEosTUFBTSxLQUFLLElBQUl5WSxFQUFFLEdBQUd1RixHQUFFdkYsRUFBRXJpQixVQUFVcWlCLEVBQUV6WSxLQUFLNUosRUFBRXFpQixFQUFFcmdCLEVBQUV4USxLQUFLLEtBQUt3USxFQUFFQSxFQUFFNVAsS0FBSyxJQUE0SCxPQUF4SDRQLEVBQUVrckIsR0FBR254QixFQUFFaUcsR0FBR2hDLElBQUksaUJBQWtCQSxFQUFFZ0MsRUFBRStwQixVQUFVL3JCLEVBQUVoTixNQUFNRSxRQUFROE0sR0FBR2dDLEVBQUUrcEIsVUFBVS9yQixFQUFFNU4sS0FBSyxLQUFLMDVCLEdBQUc5cEIsRUFBRWhDLElBQUksRUFBRUosRUFBRWxOLFFBQVFzNkIsR0FBR2p4QixFQUFFaUcsRUFBRXBDLEdBQVVvQyxFQXVVelBnbkQsQ0FBRyxPQUFPemhELEVBQUVoSyxZQUFZcUQsR0FBR2YsRUFBRTBILEVBQUUxSCxFQUFFRyxFQUFFZ3RELE9BQU9wc0QsRUFBRWYsRUFBRUEsR0FBRyxPQUFPQSxFQUFFMEgsT0FBTXBFLEVBQUVva0MsT0FBTyxXQUFXbW5CLEdBQUczOEQsTUFBTSxJQUFJOE4sRUFBRTlOLEtBQUssT0FBTzA4RCxHQUFHMThELEtBQUtBLEtBQUtpN0QsU0FBUzcxRCxNQUFLLFNBQVN5SixHQUFHLE9BQU8sSUFBSXl0QixJQUFFLFNBQVM5bUIsR0FBRyxJQUFJM0gsRUFBRUMsRUFBRUcsRUFBRTJ0QyxZQUFZL3NDLEdBQUcsR0FBR2hCLEVBQUUySCxFQUFFM0gsT0FBTyxDQUFDLElBQUk3RCxFQUFFLFNBQVNpRyxHQUFHQSxJQUZoTSxTQUFZbkMsRUFBRWUsR0FBRzRsQixFQUFHM21CLEVBQUUwaUIsR0FBRSxTQUFTaGIsR0FBRyxPQUFPQSxHQUFHM0csS0FFc0ptdUQsQ0FBR2x2RCxFQUFFOUQsR0FBR3dMLEVBQUV2RixLQUFLbkMsRUFBRTBpQixFQUFFL3dCLEtBQUt1SyxHQUFHOEQsRUFBRXhOLEdBQUd3TixFQUFFRyxFQUFFaXRELFFBQVFwdEQsRUFBRTBILFlBQVVwRSxFQUFFOEQsTUFBTSxXQUFXeW5ELEdBQUczOEQsTUFBTSxPQUFPQSxLQUFLd1YsR0FBR3hWLEtBQUtpTyxFQUFFaUgsTUFBTWxWLEtBQUt3VixJQUM3WHBFLEVBQUUweEIsTUFBTSxXQUFXNjVCLEdBQUczOEQsTUFBTUEsS0FBSzB3QixHQUFFLEVBQUcxd0IsS0FBS3lRLEVBQUUrRSxJQUFJLElBQUksSUFBSTFILEVBQUUsRUFBRUEsRUFBRTlOLEtBQUtzd0IsRUFBRTN2QixPQUFPbU4sSUFBSTlOLEtBQUtzd0IsRUFBRXhpQixHQUFHbXdCLE9BQU8sa0RBQWtELElBQUlqK0IsS0FBS00sRUFBRSxDQUFDd04sRUFBRStyQixHQUFHNzVCLEtBQUs2USxHQUFHLElBQUksSUFBSWhDLEVBQUVBLEVBQUVmLEVBQUVyQixZQUFZcUIsRUFBRXpCLFlBQVl3QyxLQUVoU2tDLEVBQUU2ckQsR0FBR1YsSUFDc0wsSUFBSWEsR0FBRyw2REFBNkQ1c0MsTUFBTSxLQUFLLFNBQVNvUyxHQUFFejBCLEVBQUVlLEdBQUcsTUFBTSxDQUFDbk0sS0FBS29MLEdBQUcsR0FBR2cyQixFQUFFLGlCQUFpQjNxQixXQUFXdEssRUFBRTIyQixFQUFFLFNBQVNod0IsR0FBRyxNQUFNLGlCQUFrQkEsSUFDN1ksU0FBU3luRCxHQUFHbnZELEVBQUVlLEdBQUcsTUFBTSxDQUFDbk0sS0FBS29MLEdBQUcsR0FBR2cyQixFQUFFLFlBQVkzcUIsV0FBV3RLLEVBQUUyMkIsRUFBRSxTQUFTaHdCLEdBQUcsTUFBTSxrQkFBbUJBLElBQUksU0FBU0YsR0FBRXhILEVBQUVlLEdBQUcsTUFBTSxDQUFDbk0sS0FBS29MLEdBQUcsR0FBR2cyQixFQUFFLGlCQUFpQjNxQixXQUFXdEssRUFBRTIyQixFQUFFMzBCLEdBQUcsU0FBU3FzRCxHQUFHcHZELEVBQUVlLEdBQUcsTUFBTSxDQUFDbk0sS0FBS29MLEdBQUcsR0FBR2cyQixFQUFFLGFBQWEzcUIsV0FBV3RLLEVBQUUyMkIsRUFBRSxTQUFTaHdCLEdBQUcsTUFBTSxtQkFBb0JBLElBQUksU0FBUzJuRCxHQUFHcnZELEVBQUVlLEdBQUcsTUFBTSxDQUFDbk0sS0FBS29MLEdBQUcsR0FBR2cyQixFQUFFLE9BQU8zcUIsV0FBV3RLLEVBQUUyMkIsRUFBRSxTQUFTaHdCLEdBQUcsT0FBTyxPQUFPQSxJQUM5RyxTQUFTNG5ELEdBQUd0dkQsR0FBRyxNQUFNLENBQUNwTCxLQUFLb0wsRUFBRUEsRUFBRSxhQUFhLGFBQWFnMkIsRUFBRWgyQixFQUFFLFdBQVdBLEVBQUUsY0FBYyxxQkFBcUJxTCxVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMzJCLEdBQUcsSUFBSUEsRUFBRSxPQUFNLEVBQUcsSUFBSTJHLEdBQUcxSCxHQUFHZSxFQUFFdWhDLGFBQWF0aUMsRUFBRSxTQUFTZSxFQUFFcWlCLEtBQUsxYixLQUNsSixTQUFTNm5ELEdBQUd2dkQsRUFBRWUsR0FBRyxPQUFPZ0MsRUFBRS9DLElBQUksaUJBQWtCQSxFQUFFK0osTUFBTS9KLEVBQUUrSixPQUFPaEosR0FBRyxtQkFBb0JmLEVBQUUrbEIsR0FBRyxTQUFTeXBDLEdBQUd4dkQsR0FBRyxPQUFPK0MsRUFBRS9DLElBQUksaUJBQWtCQSxFQUFFKzhCLElBQ25QLFNBQVNncEIsR0FBRS9sRCxFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUcsTUFBTSxDQUFDbkwsS0FBSzhTLEdBQUcsR0FBR3N1QixFQUFFaDJCLEVBQUVnMkIsRUFBRSxPQUFPajFCLEVBQUVpMUIsRUFBRTNxQixXQUFXdEwsRUFBRTIzQixFQUFFLFNBQVN4N0IsR0FBRyxPQUFPOEQsRUFBRTAzQixFQUFFeDdCLElBQUk2RSxFQUFFMjJCLEVBQUV4N0IsS0FBTSxTQUFTeTRCLEdBQUUzMEIsRUFBRWUsR0FBRyxJQUFJLElBQUkyRyxLQUFLM0csRUFBRSxDQUFDLElBQUloQixFQUFFZ0IsRUFBRTJHLEdBQUc5UyxLQUFLb0wsRUFBRUQsR0FBRzB2RCxHQUFHMXZELEVBQUVDLEVBQUUwSCxHQUFHM0csRUFBRTJHLEdBQUduRSxJQUFJLFNBQVNtc0QsR0FBRzF2RCxFQUFFZSxHQUFHLElBQUksSUFBSTJHLEtBQUszRyxFQUFFLENBQUMsSUFBSWhCLEVBQUVnQixFQUFFMkcsR0FBRzlTLEtBQUttTCxJQUFJMkgsR0FBR2pVLE9BQU9zRSxlQUFlaUksRUFBRUQsRUFBRSxDQUFDL0gsSUFBSWtzQixHQUFHLFNBQVNob0IsR0FBRyxPQUFPaEssS0FBS2dLLEtBQUl3TCxHQUFHelAsSUFBSWlzQixHQUFHLFNBQVNob0IsRUFBRWlHLEVBQUVoQyxFQUFFcWlCLEdBQUd3c0MsR0FBRzl5RCxFQUFFLENBQUNpRSxHQUFHLENBQUNxaUIsSUFBRyxHQUFJdHdCLEtBQUtpUSxHQUFHcWdCLElBQUd6aUIsRUFBRTJILEVBQUUzRyxFQUFFMkcsR0FBRzhmLElBQUl0bkIsWUFBVyxLQUFNLFNBQVN5eUMsR0FBRTN5QyxFQUFFZSxFQUFFMkcsRUFBRTNILEdBQUdDLEVBQUVlLEdBQUcwdUQsR0FBRzF1RCxFQUFFMkcsRUFBRTNILEdBQzFtQixTQUFTMHZELEdBQUd6dkQsRUFBRWUsRUFBRTJHLEdBQUcsU0FBUzNILElBQUksSUFBSUksRUFBRWhOLE1BQU1xQixVQUFVRSxNQUFNRCxLQUFLNEQsV0FBcUIsT0FBVjIyRCxHQUFHOXlELEVBQUV3TCxFQUFFdkgsR0FBVVksRUFBRTFKLE1BQU1uRixLQUFLaU8sR0FBRyxJQUFJdUgsRUFBRSxPQUFPM0csRUFBRSxJQUFZb0IsRUFBUmpHLEVBQTJGLFNBQVk4RCxHQUFrQixPQUFmQSxFQUFFQSxFQUFFcWlCLE1BQU0sTUFBY3JpQixFQUFFbk4sT0FBTyxHQUF6STg4RCxDQUFHM3ZELEdBQUssSUFBSW1DLEtBQUtwQixFQUFFaEIsRUFBRW9DLEdBQUdwQixFQUFFb0IsR0FBRyxJQUFJQSxLQUFLcEIsRUFBRXZNLFVBQVV1TCxFQUFFdkwsVUFBVTJOLEdBQUdwQixFQUFFdk0sVUFBVTJOLEdBQUcsT0FBT3BDLEVBQXNENDBCLEdBQUUwMUIsR0FBRzcxRCxVQUFVLENBQUNxeUIsR0FBRyxDQUFDanlCLEtBQUssa0JBQWtCMk8sRUFBRSxDQUFDa3hCLEdBQUUsVUFBVWxPLEdBQUcsQ0FBQzN4QixLQUFLLGtCQUFrQjJPLEVBQUUsQ0FBQ2t4QixHQUFFLFVBQVU3TSxHQUFHLENBQUNoekIsS0FBSyx1QkFBdUIyTyxFQUFFLENBQUNreEIsR0FBRSxRQUFRQSxHQUFFLGlCQUFpQnRKLEdBQUcsQ0FBQ3YyQixLQUFLLGlDQUFpQzJPLEVBQUUsQ0FBQ2t4QixHQUFFLFNBQVNBLEdBQUUsY0FBY25KLEdBQUcsQ0FBQzEyQixLQUFLLDZCQUE2QjJPLEVBQUUsQ0FBQ2t4QixHQUFFLFdBQVc3USxHQUFHLENBQUNodkIsS0FBSyxvQkFBb0IyTyxFQUFFLElBQUlvckIsR0FBRyxDQUFDLzVCLEtBQUssd0JBQXdCMk8sRUFBRSxDQUFDa3hCLEdBQUUsZUFBZXRGLEdBQUcsQ0FBQ3Y2QixLQUFLLHFCQUFxQjJPLEVBQUUsQ0FBQ3dpRCxHQUFFditDLEtBQUk0bkQsS0FBSyxrQkFBa0JBLEdBQUcsYUFBWSxHQUFJQSxHQUFHLGlCQUFnQixLQUFNaGdDLEdBQUcsQ0FBQ3g2QixLQUFLLG1CQUM1dkIyTyxFQUFFLENBQUN3aUQsR0FBRXYrQyxLQUFJNG5ELEtBQUssa0JBQWtCQSxHQUFHLGFBQVksR0FBSUEsR0FBRyxpQkFBZ0IsS0FBTXptQyxHQUFHLENBQUMvekIsS0FBSyx5QkFBeUIyTyxFQUFFLENBQUNreEIsR0FBRSxTQUFTc3hCLEdBQUV2K0MsR0FBRSwwQkFBeUIsR0FBSTZuRCxHQUFHLE1BQUssR0FBSSwwQkFBeUIsS0FBTXptQyxHQUFHLENBQUNoMEIsS0FBSyx3QkFBd0IyTyxFQUFFLENBQUNreEIsR0FBRSxTQUFTanRCLEdBQUUsd0JBQXdCMGhCLEdBQUcsQ0FBQ3QwQixLQUFLLGlCQUFpQjJPLEVBQUUsQ0FBQ2t4QixHQUFFLGlCQUFpQnhFLEdBQUcsQ0FBQ3I3QixLQUFLLHNDQUFzQzJPLEVBQUUsQ0FBQytyRCxPQUFPbG1DLEdBQUcsQ0FBQ3gwQixLQUFLLG9CQUFvQjJPLEVBQUUsSUFBSXFqQixHQUFHLENBQUNoeUIsS0FBSyx1QkFBdUIyTyxFQUFFLENBQUMrckQsT0FBT3AvQixHQUFHLENBQUN0N0IsS0FBSyx3QkFBd0IyTyxFQUFFLENBQUNreEIsR0FBRSxXQUM3ZTFFLEdBQUcsQ0FBQ243QixLQUFLLDZCQUE2QjJPLEVBQUUsQ0FBQ2t4QixHQUFFLFNBQVNBLEdBQUUsY0FBY3JFLEdBQUcsQ0FBQ3g3QixLQUFLLHNCQUFzQjJPLEVBQUUsQ0FBQ2t4QixHQUFFLFNBQVNBLEdBQUUsYUFBWSxLQUFNcEUsR0FBRyxDQUFDejdCLEtBQUssd0JBQXdCMk8sRUFBRSxDQUFDa3hCLEdBQUUsZUFIdkosQ0FBQzcvQixLQUFLLHNCQUFzQm9oQyxFQUFFLHlEQUF5RDNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsU0FBU0EsR0FBRyxpQkFBa0JBLEVBQUUrSixNQUFNLG1CQUFvQi9KLEVBQUUwbkMsWUFHQXBYLEdBQUcsQ0FBQzE3QixLQUFLLGtCQUFrQjJPLEVBQUUsQ0FKekUsQ0FBQzNPLEtBQUssZUFBZW9oQyxFQUFFLHdCQUF3QjNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsU0FBU0EsR0FBR0EsRUFBRXNpQyxZQUFZdGlDLEVBQUVNLGdCQUFnQk4sRUFBRU0sZUFBZSx3QkFJckRpd0IsR0FBRyxDQUFDMzdCLEtBQUsscUJBQXFCMk8sRUFBRSxDQUpqSCxDQUFDM08sS0FBSyxlQUFlb2hDLEVBQUUsd0JBQXdCM3FCLFVBQVMsRUFBR3FzQixFQUFFLFNBQVMxM0IsR0FBRyxTQUFTQSxHQUFHQSxFQUFFc2lDLFlBQVl0aUMsRUFBRU0sZ0JBQWdCTixFQUFFTSxlQUFlLHdCQUliNHhCLEdBQUcsQ0FBQ3Q5QixLQUFLLG9CQUFvQjJPLEVBQUUsQ0FBQ3dpRCxHQUFvQixDQUFDbnhELEtBQUssT0FBT29oQyxFQUFFLCtCQUErQjNxQixVQUFTLEVBQUlxc0IsRUFBRSxTQUFTMzJCLEdBQUcsU0FBU0EsR0FBR0EsYUFBYXlrRCxNQUFTNkosS0FBSyxVQUFVaG1DLEdBQUcsQ0FBQ3owQixLQUFLLFVBQVUyTyxFQUFFLElBQUlxaEIsT0FBTyxDQUFDaHdCLEtBQUssU0FBUzJPLEVBQUUsQ0FBQ2t4QixHQUFFLE1BQ2hmLEtBQU0vQixHQUFHLENBQUM5OUIsS0FBSyxvQkFBb0IyTyxFQUFFLElBQUlvdkIsR0FBRyxDQUFDLzlCLEtBQUssY0FBYzJPLEVBQUUsQ0FBQ2t4QixHQUFFLFNBQVMxQixHQUFHLENBQUNuK0IsS0FBSywwQkFBMEIyTyxFQUFFLENBQUNreEIsR0FBRSxZQUFZaTdCLEdBQUdyRixHQUFHNzFELFVBQVUsQ0FBQ3kzQixHQUFHLENBQUNyM0IsS0FBSyxlQUFlNHlCLEdBQUd1K0IsR0FBRXR4QixLQUFJNDZCLEtBQUssaUJBQWlCL2hCLEdBQUcsQ0FBQzE0QyxLQUFLLFdBQVc0eUIsR0FBR3UrQixHQUFFdHhCLEtBQUk0NkIsS0FBSyxlQUFlaEYsR0FBR3VGLFlBQVkxUixHQUFHbU0sR0FBR3VGLFlBQVlDLE1BQU0sUUFBUXhGLEdBQUd1RixZQUFZRSxRQUFRLFVBQVV6RixHQUFHdUYsWUFBWXpSLEtBQUssT0FDL1Z4cEIsR0FBRTZ3QixHQUFHaHhELFVBQVUsQ0FBQyxPQUFTLENBQUNJLEtBQUssU0FBUzJPLEVBQUUsSUFBSTRsRCxHQUFHLENBQUN2MEQsS0FBSyxtQkFBbUIyTyxFQUFFLENBQUM0ckQsR0FBRyxvQkFBbUIsS0FBTS82QixFQUFFLENBQUN4L0IsS0FBSyxhQUFhMk8sRUFBRSxDQUFDNHJELEdBQUcsb0JBQW1CLEtBQU12Z0MsR0FBRyxDQUFDaDZCLEtBQUssb0NBQW9DMk8sRUFBRSxDQUFDK3JELE9BQU90bkMsR0FBRyxDQUFDcHpCLEtBQUsscUJBQXFCMk8sRUFBRSxDQUFDK3JELE9BQU96Z0MsR0FBRyxDQUFDajZCLEtBQUssc0JBQXNCMk8sRUFBRSxDQUFDa3hCLEdBQUUsZUFMNVEsQ0FBQzcvQixLQUFLLHNCQUFzQm9oQyxFQUFFLHlEQUF5RDNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsU0FBU0EsR0FBRyxpQkFBa0JBLEVBQUUrSixNQUFNLG1CQUFvQi9KLEVBQUUwbkMsWUFLcUg1WSxHQUFHLENBQUNsNkIsS0FBSyxnQkFBZ0IyTyxFQUFFLENBTjVMLENBQUMzTyxLQUFLLGVBQWVvaEMsRUFBRSx3QkFBd0IzcUIsVUFBUyxFQUFHcXNCLEVBQUUsU0FBUzEzQixHQUFHLFNBQVNBLEdBQUdBLEVBQUVzaUMsWUFBWXRpQyxFQUFFTSxnQkFBZ0JOLEVBQUVNLGVBQWUsd0JBTThEeXVCLEdBQUcsQ0FBQ242QixLQUFLLG1CQUFtQjJPLEVBQUUsQ0FObE8sQ0FBQzNPLEtBQUssZUFBZW9oQyxFQUFFLHdCQUF3QjNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsU0FBU0EsR0FBR0EsRUFBRXNpQyxZQUFZdGlDLEVBQUVNLGdCQUFnQk4sRUFBRU0sZUFBZSx3QkFNb0dzdkIsR0FBRyxDQUFDaDdCLEtBQUssOENBQThDMk8sRUFBRSxDQUFDK3JELE9BQU83bUMsR0FBRyxDQUFDN3pCLEtBQUssK0JBQStCMk8sRUFBRSxDQUFDK3JELE9BQU81L0IsR0FBRyxDQUFDOTZCLEtBQUssZ0NBQzNmMk8sRUFBRSxDQUFDa3hCLEdBQUUsZUFOZSxDQUFDNy9CLEtBQUssc0JBQXNCb2hDLEVBQUUseURBQXlEM3FCLFVBQVMsRUFBR3FzQixFQUFFLFNBQVMxM0IsR0FBRyxTQUFTQSxHQUFHLGlCQUFrQkEsRUFBRStKLE1BQU0sbUJBQW9CL0osRUFBRTBuQyxZQU10S25ZLEdBQUcsQ0FBQzM2QixLQUFLLDBCQUEwQjJPLEVBQUUsQ0FQcUYsQ0FBQzNPLEtBQUssZUFBZW9oQyxFQUFFLHdCQUF3QjNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsU0FBU0EsR0FBR0EsRUFBRXNpQyxZQUFZdGlDLEVBQUVNLGdCQUFnQk4sRUFBRU0sZUFBZSx3QkFPbk5rdkIsR0FBRyxDQUFDNTZCLEtBQUssNkJBQTZCMk8sRUFBRSxDQVBxQyxDQUFDM08sS0FBSyxlQUFlb2hDLEVBQUUsd0JBQXdCM3FCLFVBQVMsRUFBR3FzQixFQUFFLFNBQVMxM0IsR0FBRyxTQUFTQSxHQUFHQSxFQUFFc2lDLFlBQVl0aUMsRUFBRU0sZ0JBQWdCTixFQUFFTSxlQUFlLHdCQU9uS3luRCxPQUFPLENBQUNuekQsS0FBSyxTQUFTMk8sRUFBRSxJQUFJbWxCLEdBQUcsQ0FBQzl6QixLQUFLLHdCQUF3QjJPLEVBQUUsQ0FBQ3dpRCxHQUFFditDLEdBQUUsMEJBQXlCLEdBQUk2bkQsR0FBRyxNQUFLLEdBQUksMEJBQXlCLEtBQU16cUMsT0FBTyxDQUFDaHdCLEtBQUssU0FBUzJPLEVBQUUsQ0FBQ2t4QixHQUFFLE1BQUssS0FBTTNELEdBQUcsQ0FBQ2w4QixLQUFLLFNBQVMyTyxFQUFFLENBQUNreEIsR0FBRSxjQUFjbkwsR0FBRyxDQUFDMTBCLEtBQUssY0FBYzJPLEVBQUUsQ0FBQ2t4QixHQUFFLFdBQVdqTCxHQUFHLENBQUM1MEIsS0FBSyxpQkFBaUIyTyxFQUFFLENBQUNreEIsR0FBRSxjQUFjaEMsR0FBRyxDQUFDNzlCLEtBQUssb0JBQW9CMk8sRUFBRSxDQUFDK3JELEdBQUcsV0FBVy9sQyxHQUFHLENBQUMzMEIsS0FBSyxnQkFBZ0IyTyxFQUFFLENBQUNpRSxHQUFFLGFBQy9la2lCLEdBQUcsQ0FBQzkwQixLQUFLLDBCQUEwQjJPLEVBQUUsQ0FBQ2t4QixHQUFFLFNBQVNzeEIsR0FBRXYrQyxHQUFFLDBCQUF5QixHQUFJNm5ELEdBQUcsTUFBSyxHQUFJLDBCQUF5QixPQUFRMTZCLEdBQUVpM0IsR0FBR3AzRCxVQUFVLENBQUM0NEQsUUFBUSxDQUFDeDRELEtBQUssV0FBV3U0RCxPQUFPLENBQUN2NEQsS0FBSyxVQUFVd1MsTUFBTSxDQUFDeFMsS0FBSyxTQUFTazVDLFlBQVksQ0FBQ2w1QyxLQUFLLGlCQUFpQisvQixHQUFFZzNCLEdBQUduM0QsVUFBVSxDQUFDNDRELFFBQVEsQ0FBQ3g0RCxLQUFLLFdBQVd1NEQsT0FBTyxDQUFDdjRELEtBQUssVUFBVXdTLE1BQU0sQ0FBQ3hTLEtBQUssU0FBU2s1QyxZQUFZLENBQUNsNUMsS0FBSyxpQkFBaUIrL0IsR0FBRW5HLEdBQUVoNkIsVUFBVSxDQUFDaXZCLEdBQUcsQ0FBQzd1QixLQUFLLFdBQVc0TSxFQUFFLENBQUM1TSxLQUFLLFNBQVMwQyxLQUFLLENBQUMxQyxLQUFLLFVBQzlhODZELEdBQUc1TSxHQUFHdHVELFVBQVUsQ0FBQ3U3RCx3QkFBd0IsQ0FBQ243RCxLQUFLLG9DQUFvQzR5QixHQUFHMm5DLEdBQUcsd0NBQXdDeDZCLEdBQUVvdUIsR0FBR3Z1RCxVQUFVLENBQUN5dkQsUUFBUSxDQUFDcnZELEtBQUssVUFBVTJPLEVBQUUsQ0FBQ2t4QixHQUFFLHdCQUF3QmtlLEdBQUU5UCxHQUFHLFlBQVcsU0FBUzdpQyxHQUFHQSxFQUFFLGlCQUFrQkEsRUFBRXpLLEtBQUsybEMsTUFBTWw3QixHQUFHQSxFQUFFLElBQUksSUFBSWUsRUFBRTJHLEVBQUUsQ0FBQ3U4QixHQUFHb0IsR0FBR00sR0FBR3ZDLElBQUlyakMsRUFBRSxFQUFFQSxFQUFFMkgsRUFBRTdVLE9BQU9rTixJQUFJLEdBQUdnQixFQUFFMkcsRUFBRTNILEdBQUdDLEdBQUcsT0FBT2UsRUFBRSxPQUFPLE9BQU0sQ0FBQ2dsRCxHQUFFdHhCLEtBQUlqdEIsS0FBSSxVQUFVbXJDLEdBQUV6TixHQUFHLGNBQWEsU0FBU2xsQyxFQUFFZSxHQUFHLE9BQU8sSUFBSWtrQyxHQUFHamxDLEVBQUVlLEtBQUksQ0FBQzB6QixHQUFFLFNBQVNBLEdBQUUsY0FBY0UsR0FBRXNRLEdBQUd6d0MsVUFBVSxDQUFDbXdCLEVBQUUsQ0FBQy92QixLQUFLLFNBQVMyTyxFQUFFLENBQUNreEIsR0FBRSxNQUFLLE9BQ3hlRSxHQUFFNlAsR0FBR2h3QyxVQUFVLENBQUM4d0IsR0FBRyxDQUFDMXdCLEtBQUssV0FBVzJPLEVBQUUsQ0FBQ2t4QixHQUFFLFdBQVd0TyxHQUFHLENBQUN2eEIsS0FBSyxzQkFBc0IyTyxFQUFFLENBQUNpRSxHQUFFLDZCQUE2Qm1yQyxHQUFFbk8sR0FBRyxhQUFhQyxHQUFHLENBQUNzaEIsR0FBRXR4QixLQUFJanRCLEtBQUksV0FBV21yQyxHQUFFek4sR0FBRyxxQkFBcUJNLEdBQUcsQ0FBQy9RLEdBQUUsU0FBU0EsR0FBRSxlQUFlRSxHQUFFZ1EsR0FBR253QyxVQUFVLENBQUM4d0IsR0FBRyxDQUFDMXdCLEtBQUssV0FBVzJPLEVBQUUsQ0FBQ2t4QixHQUFFLFdBQVd0TyxHQUFHLENBQUN2eEIsS0FBSyxzQkFBc0IyTyxFQUFFLENBQUNpRSxHQUFFLDZCQUE2Qm1yQyxHQUFFaE8sR0FBRyxhQUFhQyxHQUFHLENBQUNtaEIsR0FBRXR4QixLQUFJanRCLEtBQUksV0FBV210QixHQUFFa1EsR0FBR3J3QyxVQUFVLENBQUM4d0IsR0FBRyxDQUFDMXdCLEtBQUssV0FBVzJPLEVBQUUsQ0FBQ2t4QixHQUFFLFdBQVd0TyxHQUFHLENBQUN2eEIsS0FBSyxzQkFBc0IyTyxFQUFFLENBQUNpRSxHQUFFLDZCQUNsZG1yQyxHQUFFOU4sR0FBRyxhQUFhQyxHQUFHLENBQUNpaEIsR0FBRXR4QixLQUFJc3hCLEdBQUV2K0MsS0FBSTZuRCxNQUFNLFdBQVd0SixHQUFFdHhCLEtBQUk0NkIsS0FBSyxlQUFjLEtBQU0xNkIsR0FBRW9RLEdBQUd2d0MsVUFBVSxDQUFDMnhCLEdBQUcsQ0FBQ3Z4QixLQUFLLHNCQUFzQjJPLEVBQUUsQ0FBQ2lFLEdBQUUsNkJBQTZCbXJDLEdBQUU1TixHQUFHLGFBQWFDLEdBQUcsQ0FBQytnQixHQUFFdHhCLEtBQUlqdEIsS0FBSSxTQUFTaXRCLEdBQUUsVUFBUyxLQUFNRSxHQUFFNFAsR0FBRy92QyxVQUFVLENBQUM4d0IsR0FBRyxDQUFDMXdCLEtBQUssV0FBVzJPLEVBQUUsQ0FBQ2t4QixHQUFFLFdBQVdpUSxXQUFXLENBQUM5dkMsS0FBSyxhQUFhMk8sRUFBRSxDQUFDd2lELEdBQUV0eEIsS0FBSXN4QixHQUFFditDLEtBQUk2bkQsTUFBTSxvQkFBb0J0SixHQUFFdHhCLEtBQUk0NkIsS0FBSyxlQUFjLEtBQU1scEMsR0FBRyxDQUFDdnhCLEtBQUssc0JBQXNCMk8sRUFBRSxDQUFDaUUsR0FBRSw2QkFBNkJtdEIsR0FBRTJPLEdBQUc5dUMsVUFBVSxDQUFDbXdCLEVBQUUsQ0FBQy92QixLQUFLLFNBQVMyTyxFQUFFLENBQUNreEIsR0FBRSxNQUFLLE9BQ25lRSxHQUFFcU8sR0FBR3h1QyxVQUFVLENBQUNtd0IsRUFBRSxDQUFDL3ZCLEtBQUssU0FBUzJPLEVBQUUsQ0FBQ2t4QixHQUFFLE1BQUssT0FBUWtlLEdBQUUxTSxHQUFHLGFBQWFDLEdBQUcsQ0FBQ3pSLEdBQUUsa0JBQWtCQSxHQUFFLHNCQUMvRkUsR0FBRXNSLEdBQUd6eEMsVUFBVSxDQUFDMnlCLEdBQUcsQ0FBQ3Z5QixLQUFLLG9CQUFvQjJPLEVBQUUsQ0FBQ3dpRCxHQUFFdHhCLEtBQXdCLENBQUM3L0IsS0FBUSxtQkFBbUJvaEMsRUFBRSwyQkFBMkIzcUIsVUFBUyxFQUFJcXNCLEVBQUUsU0FBU2h3QixHQUFHLFFBQU9BLElBQUVBLEVBQUVpZ0MsU0FBU2pnQyxFQUFFczJCLFlBQVl1eEIsR0FBRzduRCxFQUFFaWdDLFFBQVFoRixLQUFLLGlCQUFrQmo3QixFQUFFczJCLFlBQVl0MkIsRUFBRWlnQyxTQUFTamdDLEVBQUU0Z0MsZ0JBQWdCaW5CLEdBQUc3bkQsRUFBRWlnQyxRQUFRL0UsS0FBSzRzQixHQUFHOW5ELEVBQUU0Z0MsaUJBQWlCNWdDLEVBQUVpZ0MsU0FBU2pnQyxFQUFFNmdDLGVBQWVnbkIsR0FBRzduRCxFQUFFaWdDLFFBQVEvRSxLQUFLLGlCQUFrQmw3QixFQUFFNmdDLGlCQUFlN2dDLEVBQUVzMkIsYUFBWSxpQkFBa0J0MkIsRUFBRXMyQixlQUF1QixvQkFaN2EsQ0FBQ3BwQyxLQUFLLHNCQUFzQm9oQyxFQUFFLHlEQUF5RDNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsU0FBU0EsR0FBRyxpQkFBa0JBLEVBQUUrSixNQUFNLG1CQUFvQi9KLEVBQUUwbkMsY0Fhak0vUyxHQUFFK1EsR0FBR2x4QyxVQUFVLENBQUNtd0IsRUFBRSxDQUFDL3ZCLEtBQUssU0FBUzJPLEVBQUUsQ0FBQ2t4QixHQUFFLE1BQUssT0FBUUUsR0FBRXB6QixFQUFFL00sVUFBVSxDQUFDb3dCLE9BQU8sQ0FBQ2h3QixLQUFLLFNBQVMyTyxFQUFFLENBQUNreEIsR0FBRSxNQUFLLE9BQVFFLEdBQUVxVSxHQUFHeDBDLFVBQVUsQ0FBQ293QixPQUFPLENBQUNod0IsS0FBSyxTQUFTMk8sRUFBRSxDQUFDa3hCLEdBQUUsTUFBSyxPQUFRRSxHQUFFb1UsR0FBR3YwQyxVQUFVLENBQUNvd0IsT0FBTyxDQUFDaHdCLEtBQUssU0FBUzJPLEVBQUUsQ0FBQ2t4QixHQUFFLE1BQUssT0FBUUUsR0FBRXV2QixHQUFHMXZELFVBQVUsQ0FBQ293QixPQUFPLENBQUNod0IsS0FBSyxTQUFTMk8sRUFBRSxDQUFDa3hCLEdBQUUsTUFBSyxPQUFRRSxHQUFFZ3ZCLEdBQUdudkQsVUFBVSxDQUFDdzdCLEdBQUcsQ0FBQ3A3QixLQUFLLGdCQUFnQjJPLEVBQUUsQ0FkelMsQ0FBQzNPLEtBQUssdUJBQXVCb2hDLEVBQUUsK0JBQStCM3FCLFVBQVMsRUFBR3FzQixFQUFFLFNBQVMxM0IsR0FBRyxRQUFPQSxLQUFJQSxFQUFFd29CLFNBZXpIbU0sR0FBRTZ2QixHQUFHaHdELFVBQVUsQ0FBQzYxQixHQUFHLENBQUN6MUIsS0FBSyxhQUFhMk8sRUFBRSxJQUFJNm5CLEdBQUcsQ0FBQ3gyQixLQUFLLFNBQVMyTyxFQUFFLENBZjVDLENBQUMzTyxLQUFLLHVCQUF1Qm9oQyxFQUFFLCtCQUErQjNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsUUFBT0EsS0FBSUEsRUFBRXdvQixLQWVuRGlNLEdBQUUsZUFBYyxLQUFNL0QsR0FBRyxDQUFDOTdCLEtBQUssV0FBVzJPLEVBQUUsQ0FBQ3dpRCxHQUFFLENBQUNueEQsS0FBSyxrQkFBa0JvaEMsRUFBRSwwQkFBMEIzcUIsVUFBUyxFQUFHcXNCLEVBQUU4M0IsSUFBSS82QixLQUFJLGlDQUFpQ0UsR0FBRW02QixHQUFHdDZELFVBQVUsQ0FBQ3dnQyxNQUFNLENBQUNwZ0MsS0FBSyxRQUFRMk8sRUFBRSxJQUFJNHBELE9BQU8sQ0FBQ3Y0RCxLQUFLLFNBQVMyTyxFQUFFLElBQUlta0MsT0FBTyxDQUFDOXlDLEtBQUssU0FBUzJPLEVBQUUsTUFBTW92QyxHQUFFMVUsR0FBRyxZQUFZa0IsR0FBRyxDQUFDMUssR0FBRSxVQUFVa2UsR0FBRSthLEdBQUcsYUFBWSxTQUFTMXRELEdBQUcsT0FBTyxJQUFJc2tELEdBQUd0a0QsS0FBSSxDQUFDc3ZELEdBQUcsV0FDeFosV0FBWSxRQUFHLElBQXFCLEtBQVUsY0FBbUIsOEJBRXlSLE1BQU03eEQsTUFBTSwrRkFGaFEsSUFBSXVDLEVBQUUsQ0FBQ2d3RCxlQUFlLENBQUNDLFVBQVUsQ0FBQ0MsYUFBYTN5QixHQUFHNHlCLGVBQWUsaUJBQWlCQyxjQUFjLGdCQUFnQkMsOEJBQThCNXlCLEdBQUc2eUIsd0JBQXdCOXlCLEdBQUcreUIsYUFBYSxpQkFBaUJDLEtBQUtuRyxHQUFHb0csZUFBZTV0QixHQUFHcGxDLE1BQU04RCxHQUFHb3hDLEdBQUUzeUMsRUFBRSxvQkFBb0JrbEMsR0FBRyxJQUFJeU4sR0FBRTN5QyxFQUFFLHVCQUF1QndrQyxHQUFHLElBQUltTyxHQUFFM3lDLEVBQUUscUJBQXFCMmtDLEdBQUcsSUFBSWdPLEdBQUUzeUMsRUFBRSxxQkFBcUI2a0MsR0FBRyxJQUFJOE4sR0FBRTN5QyxFQUFFLHNCQUFzQitrQyxHQUFHLElBQ2pmNE4sR0FBRTN5QyxFQUFFLGdCQUFnQnVrQyxHQUFHLENBQUM5UCxHQUFFLGdCQUFnQmtlLEdBQUUzeUMsRUFBRSxtQkFBbUJza0MsR0FBRyxDQUFDN1AsR0FBRSxnQkFBZ0JrZSxHQUFFM3lDLEVBQUUsb0JBQW9CaW1DLEdBQUcsQ0FsQjlGLENBQUNyeEMsS0FBSyxPQUFPb2hDLEVBQUUsK0JBQStCM3FCLFVBQVMsRUFBR3FzQixFQUFFLFNBQVMxM0IsR0FBRyxTQUFTQSxHQUFHQSxhQUFhcXFELFFBa0JLMVgsR0FBRTN5QyxFQUFFLG9CQUFvQjh1RCxHQUFHLENBQUMvSSxHQUFFdHhCLEtBbkJnUCxDQUFDNy9CLEtBQUssR0FBR29oQyxFQUFFLGtCQUFrQjNxQixVQUFTLEVBQUdxc0IsRUFBRSxTQUFTMTNCLEdBQUcsU0FBU0EsR0FBR0EsYUFBYW9vQixXQW1CdlQsc0JBQXNCNWdCLEdBQUUsdUJBQXNCLEdBbEJoRSxDQUFDNVMsS0FBSyxNQUFNb2hDLEVBQUUsOEJBQThCM3FCLFVBQVMsRUFBR3FzQixFQUFFLFNBQVMxM0IsR0FBRyxTQUFTQSxHQUFHQSxhQUFhLGdCQWtCcEIyeUMsR0FBRTN5QyxFQUFFLGdCQUFnQmkrQixHQUFHLElBQUkwVSxHQUFFM3lDLEVBQUUsNEJBQTRCMHRELEdBQUcsSUFBSSw4QkFBb0MsQ0FBQzk0RCxLQUFLLE9BQU9rVixnQkFBZ0IsU0FBUy9JLEdBQXlDLE9BQU8sSUFBSXNwRCxHQUFqRHRwRCxFQUFFQSxFQUFFOEwsWUFBWSxPQUFPekIsaUJBQWlDcEIsbUJBQWtCLEVBQUdDLGFBQWFqSyxFQUFFa0ssa0JBQWtCLE9BQU9ILEtBQUssV0FBVyw4QkFBb0MsQ0FBQ25WLEtBQUssZ0JBQ3hoQmtWLGdCQUFnQixTQUFTL0ksR0FBMEMsTUFBTSxDQUFDNm5DLE9BQU8za0IsR0FBckRsakIsRUFBRUEsRUFBRThMLFlBQVksUUFBUXpCLGdCQUFpQ3c5QixPQUFPN25DLEdBQUc4WixTQUFTb0osRUFBRWxqQixFQUFFcXJCLEdBQUdyckIsR0FBRzhyRCxxQkFBcUI1b0MsRUFBRWxqQixFQUFFbXFCLEdBQUducUIsR0FBR2dzRCx3QkFBd0I5b0MsRUFBRWxqQixFQUFFMHVCLEdBQUcxdUIsS0FBS2lKLG1CQUFrQixFQUFHRSxrQkFBa0IsT0FBT0gsS0FBSyxZQUFZLG1CQUF5QixpQkFBaUIsVUFBVSw0QkFBa0MsQ0FBQzJtRCxLQUFLbEwsS0FGaFYsSUFFNmNudUQsV0FBd0IsSUFBWCxFQUFBOEksRUFBeUIsRUFBQUEsRUFBeUIsb0JBQVR1RSxLQUF1QkEsS0FBeUIsb0JBQVg1SSxPQUF5QkEsT0FBUyxJQ2hhMWtCLElBQUksR0FBZ0IsU0FBU2lFLEVBQUdnQixHQUk1QixPQUhBLEdBQWdCdE4sT0FBT3VOLGdCQUNsQixDQUFFQyxVQUFXLGNBQWdCOU4sT0FBUyxTQUFVNE0sRUFBR2dCLEdBQUtoQixFQUFFa0IsVUFBWUYsSUFDdkUsU0FBVWhCLEVBQUdnQixHQUFLLElBQUssSUFBSTNKLEtBQUsySixFQUFPdE4sT0FBT2UsVUFBVThMLGVBQWU3TCxLQUFLc00sRUFBRzNKLEtBQUkySSxFQUFFM0ksR0FBSzJKLEVBQUUzSixNQUMzRTJJLEVBQUdnQixJQVM1QixTQUFTLEdBQVMxTSxHQUNkLElBQUltTixFQUFzQixtQkFBWGpPLFFBQXlCQSxPQUFPQyxTQUFVdVAsRUFBSXZCLEdBQUtuTixFQUFFbU4sR0FBSWhQLEVBQUksRUFDNUUsR0FBSXVRLEVBQUcsT0FBT0EsRUFBRXRPLEtBQUtKLEdBQ3JCLEdBQUlBLEdBQXlCLGlCQUFiQSxFQUFFeEIsT0FBcUIsTUFBTyxDQUMxQ21CLEtBQU0sV0FFRixPQURJSyxHQUFLN0IsR0FBSzZCLEVBQUV4QixTQUFRd0IsT0FBSSxHQUNyQixDQUFFSCxNQUFPRyxHQUFLQSxFQUFFN0IsS0FBTXlCLE1BQU9JLEtBRzVDLE1BQU0sSUFBSVcsVUFBVXdNLEVBQUksMEJBQTRCLG1DQUd4RCxJQUVJckIsR0FGQXd3RCxHQUF1QyxvQkFBZnZ3RCxXQUE2QkEsV0FBK0Isb0JBQVh0RSxPQUF5QkEsWUFBMkIsSUFBWCxFQUFBcUUsRUFBeUIsRUFBQUEsRUFBeUIsb0JBQVR1RSxLQUF1QkEsS0FBTyxHQUV0TGtzRCxHQUFPQSxJQUFRLEdBQUl0dEQsR0FBSXF0RCxJQUFrQmpzRCxLQUNoRCxTQUFTcWQsTUFDVCxTQUFTRyxHQUFHbGlCLEdBQUssSUFBSWUsU0FBV2YsRUFBRyxNQUFPLFVBQVllLEVBQUlBLEVBQUlmLEVBQUk3TSxNQUFNRSxRQUFRMk0sR0FBSyxRQUFVZSxFQUFJLE9BQ25HLFNBQVNraEIsR0FBR2ppQixHQUFLLElBQUllLEVBQUltaEIsR0FBR2xpQixHQUFJLE1BQU8sU0FBV2UsR0FBSyxVQUFZQSxHQUFLLGlCQUFtQmYsRUFBRW5OLE9BQzdGLFNBQVMwQixHQUFFeUwsR0FBSyxJQUFJZSxTQUFXZixFQUFHLE1BQU8sVUFBWWUsR0FBSyxNQUFRZixHQUFLLFlBQWNlLEVBRXJGLElBQUlvaEIsR0FBSyxnQkFBa0IsSUFBTTVZLEtBQUtJLFdBQWEsR0FBSXlZLEdBQUssRUFDNUQsU0FBU2MsR0FBR2xqQixFQUFHZSxFQUFHMkcsR0FBSyxPQUFPMUgsRUFBRXZMLEtBQUs0QyxNQUFNMkksRUFBRWhCLEtBQU0zRyxXQUNuRCxTQUFTK3FCLEdBQUdwakIsRUFBR2UsRUFBRzJHLEdBQUssSUFBSzFILEVBQ3hCLE1BQU12QyxRQUFTLEdBQUksRUFBSXBGLFVBQVV4RixPQUFRLENBQ3pDLElBQUlrTixFQUFJNU0sTUFBTXFCLFVBQVVFLE1BQU1ELEtBQUs0RCxVQUFXLEdBQzlDLE9BQU8sV0FBYyxJQUFJNkQsRUFBSS9JLE1BQU1xQixVQUFVRSxNQUFNRCxLQUFLNEQsV0FBaUQsT0FBckNsRixNQUFNcUIsVUFBVXd2QixRQUFRM3NCLE1BQU02RSxFQUFHNkQsR0FBV0MsRUFBRTNJLE1BQU0wSixFQUFHN0UsSUFDN0gsT0FBTyxXQUFjLE9BQU84RCxFQUFFM0ksTUFBTTBKLEVBQUcxSSxZQUN6QyxTQUFTakIsR0FBRTRJLEVBQUdlLEVBQUcyRyxHQUFtSCxPQUFqQnRRLEdBQTdGaUosU0FBUzdMLFVBQVV3SyxPQUFTLEdBQUtxQixTQUFTN0wsVUFBVXdLLEtBQUsvTSxXQUFXdWdCLFFBQVEsZUFBcUIwUSxHQUFTRSxJQUFhL3JCLE1BQU0sS0FBTWdCLFdBQ3pKLFNBQVNnckIsR0FBR3JqQixFQUFHZSxHQUFLLElBQUkyRyxFQUFJdlUsTUFBTXFCLFVBQVVFLE1BQU1ELEtBQUs0RCxVQUFXLEdBQUksT0FBTyxXQUFjLElBQUkwSCxFQUFJMkgsRUFBRWhULFFBQXFDLE9BQTVCcUwsRUFBRXBPLEtBQUswRixNQUFNMEksRUFBRzFILFdBQW1CMkgsRUFBRTNJLE1BQU1uRixLQUFNNk4sSUFDL0osSUFBSWtrQixHQUFJdmdCLEtBQUttSyxJQUNiLFNBQVM1SyxHQUFFakQsRUFBR2UsR0FBSyxTQUFTMkcsS0FBUUEsRUFBRWxULFVBQVl1TSxFQUFFdk0sVUFBV3dMLEVBQUVvaEMsRUFBSXJnQyxFQUFFdk0sVUFBV3dMLEVBQUV4TCxVQUFZLElBQUlrVCxFQUFHMUgsRUFBRXhMLFVBQVVHLFlBQWNxTCxFQUNqSSxTQUFTeWlCLEtBQU12d0IsS0FBS3FSLEVBQUlyUixLQUFLcVIsRUFBR3JSLEtBQUtNLEVBQUlOLEtBQUtNLEVBRTlDaXdCLEdBQUVqdUIsVUFBVStPLEdBQUksRUFDaEJrZixHQUFFanVCLFVBQVU0dUIsR0FBSyxZQUFtQmx4QixLQUFLcVIsSUFBTXJSLEtBQUtxUixHQUFJLEVBQUlyUixLQUFLMCtCLElBQUssSUFmdEUsU0FBWTV3QixHQUFZdk0sT0FBT2UsVUFBVThMLGVBQWU3TCxLQUFLdUwsRUFBR21pQixLQUFPbmlCLEVBQUVtaUIsTUFBUW5pQixFQUFFbWlCLE1BQVFDLElBZ0IvRUcsQ0FBR3J3QixPQUVmdXdCLEdBQUVqdUIsVUFBVW84QixFQUFJLFdBQWMsR0FBSTErQixLQUFLTSxFQUNuQyxLQUFPTixLQUFLTSxFQUFFSyxRQUNWWCxLQUFLTSxFQUFFODNCLE9BQVBwNEIsSUFDUixJQUFJdXhCLEdBQUt0d0IsTUFBTXFCLFVBQVVnZSxRQUFVLFNBQVV4UyxFQUFHZSxHQUFLLE9BQU81TixNQUFNcUIsVUFBVWdlLFFBQVEvZCxLQUFLdUwsRUFBR2UsT0FBRyxJQUFhLFNBQVVmLEVBQUdlLEdBQUssR0FBSSxpQkFBb0JmLEVBQ2xKLE1BQU8saUJBQW9CZSxHQUFLLEdBQUtBLEVBQUVsTyxRQUFVLEVBQUltTixFQUFFd1MsUUFBUXpSLEVBQUcsR0FBSSxJQUFLLElBQUkyRyxFQUFJLEVBQUdBLEVBQUkxSCxFQUFFbk4sT0FBUTZVLElBQ3BHLEdBQUlBLEtBQUsxSCxHQUFLQSxFQUFFMEgsS0FBTzNHLEVBQ25CLE9BQU8yRyxFQUFHLE9BQVEsR0FBTWdjLEdBQUt2d0IsTUFBTXFCLFVBQVVxRCxRQUFVLFNBQVVtSSxFQUFHZSxFQUFHMkcsR0FBS3ZVLE1BQU1xQixVQUFVcUQsUUFBUXBELEtBQUt1TCxFQUFHZSxFQUFHMkcsSUFBUSxTQUFVMUgsRUFBR2UsRUFBRzJHLEdBQUssSUFBSyxJQUFJM0gsRUFBSUMsRUFBRW5OLE9BQVFxSixFQUFJLGlCQUFvQjhELEVBQUlBLEVBQUVxaUIsTUFBTSxJQUFNcmlCLEVBQUdtQyxFQUFJLEVBQUdBLEVBQUlwQyxFQUFHb0MsSUFDbE9BLEtBQUtqRyxHQUFLNkUsRUFBRXRNLEtBQUtpVCxFQUFHeEwsRUFBRWlHLEdBQUlBLEVBQUduQyxJQVVqQyxTQUFTNmpCLEdBQUc3akIsR0FBSyxPQUFPN00sTUFBTXFCLFVBQVVsQyxPQUFPK0UsTUFBTSxHQUFJZ0IsV0FDekQsU0FBU3lyQixHQUFHOWpCLEdBQUssSUFBSWUsRUFBSWYsRUFBRW5OLE9BQVEsR0FBSSxFQUFJa08sRUFBRyxDQUMxQyxJQUFLLElBQUkyRyxFQUFJdlUsTUFBTTROLEdBQUloQixFQUFJLEVBQUdBLEVBQUlnQixFQUFHaEIsSUFDakMySCxFQUFFM0gsR0FBS0MsRUFBRUQsR0FDYixPQUFPMkgsRUFDVCxNQUFPLEdBQ1QsU0FBU3FjLEdBQUcvakIsR0FBSyxNQUFPLGNBQWNsTCxLQUFLa0wsR0FDM0MsSUFHSTJrQixHQUhBVCxHQUFLOWQsT0FBTzVSLFVBQVVzeUIsS0FBTyxTQUFVOW1CLEdBQUssT0FBT0EsRUFBRThtQixRQUFZLFNBQVU5bUIsR0FBSyxNQUFPLGlDQUFpQyttQixLQUFLL21CLEdBQUcsSUFDcEksU0FBUzJDLEdBQUUzQyxFQUFHZSxHQUFLLE9BQVEsR0FBS2YsRUFBRXdTLFFBQVF6UixHQUMxQyxTQUFTK2hCLEdBQUc5aUIsRUFBR2UsR0FBSyxPQUFPZixFQUFJZSxHQUFLLEVBQUlmLEVBQUllLEVBQUksRUFBSSxFQUVwRGYsRUFBRyxDQUNDLElBQUlza0IsR0FBS2hoQixHQUFFWSxVQUNYLEdBQUlvZ0IsR0FBSSxDQUNKLElBQUlDLEdBQUtELEdBQUdvRCxVQUNaLEdBQUluRCxHQUFJLENBQ0pJLEdBQUlKLEdBQ0osTUFBTXZrQixHQUdkMmtCLEdBQUksR0FFUixTQUFTSCxHQUFHeGtCLEVBQUdlLEVBQUcyRyxHQUFLLElBQUssSUFBSTNILEtBQUtDLEVBQ2pDZSxFQUFFdE0sS0FBS2lULEVBQUcxSCxFQUFFRCxHQUFJQSxFQUFHQyxHQUN2QixTQUFTOGtCLEdBQUc5a0IsR0FBSyxJQUFJZSxFQUFJLEdBQUksSUFBSyxJQUFJMkcsS0FBSzFILEVBQ3ZDZSxFQUFFMkcsR0FBSzFILEVBQUUwSCxHQUFJLE9BQU8zRyxFQUN4QixJQUFJdWtCLEdBQUssZ0dBQWdHakQsTUFBTSxLQUMvRyxTQUFTd0MsR0FBRzdrQixFQUFHZSxHQUFlLElBQVYsSUFBSTJHLEVBQUczSCxFQUFZN0QsRUFBSSxFQUFHQSxFQUFJN0QsVUFBVXhGLE9BQVFxSixJQUFLLENBRXJFLElBQUt3TCxLQURMM0gsRUFBSTFILFVBQVU2RCxHQUVWOEQsRUFBRTBILEdBQUszSCxFQUFFMkgsR0FDYixJQUFLLElBQUl2RixFQUFJLEVBQUdBLEVBQUltakIsR0FBR3p5QixPQUFRc1AsSUFDM0J1RixFQUFJNGQsR0FBR25qQixHQUFJMU8sT0FBT2UsVUFBVThMLGVBQWU3TCxLQUFLc0wsRUFBRzJILEtBQU8xSCxFQUFFMEgsR0FBSzNILEVBQUUySCxLQUUzRSxTQUFTZ2UsR0FBRzFsQixHQUFpQixPQUFaMGxCLEdBQUcsS0FBSzFsQixHQUFXQSxFQUNwQzBsQixHQUFHLEtBQU8zRCxHQUVWLElBRUlzRSxHQUVvQ3JtQixHQUpwQytsQixHQUFLcGpCLEdBQUVnaUIsR0FBRyxTQUFVMkMsR0FBSTNrQixHQUFFZ2lCLEdBQUcsWUFBY2hpQixHQUFFZ2lCLEdBQUcsUUFBU3FCLEdBQUtyakIsR0FBRWdpQixHQUFHLFFBQVNzQixHQUFLRCxJQUFNc0IsR0FBR25CLEdBQUt4akIsR0FBRWdpQixHQUFHLFlBQWNoaUIsR0FBRWdpQixHQUFFbFQsY0FBZSxZQUFjOU8sR0FBRWdpQixHQUFHLFlBQWNoaUIsR0FBRWdpQixHQUFHLFlBQWNoaUIsR0FBRWdpQixHQUFHLFdBQWFoaUIsR0FBRWdpQixHQUFHLFFBQVN1QixHQUFLdmpCLEdBQUVnaUIsR0FBRWxULGNBQWUsWUFBYzlPLEdBQUVnaUIsR0FBRyxRQUN4USxTQUFTeUIsS0FBTyxJQUFJcG1CLEVBQUlzRCxHQUFFMUgsU0FBVSxPQUFPb0UsRUFBSUEsRUFBRWlyQixrQkFBZSxFQUVoRWpyQixFQUFHLENBQ0MsSUFBSXNtQixHQUFLLEdBQUkzRCxJQUF1QjNpQixHQUFJMmtCLEdBQU93QixHQUNwQyxxQkFBcUJZLEtBQUsvbUIsSUFBUWdtQixHQUNsQyxrQkFBa0JlLEtBQUsvbUIsSUFBUXNuQixHQUMvQixtQ0FBbUNQLEtBQUsvbUIsSUFBUWttQixHQUNoRCxnQkFBZ0JhLEtBQUsvbUIsSUFBUStsQixHQUM3Qix5QkFBeUJnQixLQUFLL21CLFNBREwsR0FHcEMsR0FEQTJpQixLQUFPMkQsR0FBSzNELEdBQUtBLEdBQUcsR0FBSyxJQUNyQjJFLEdBQUcsQ0FDSCxJQUFJZixHQUFLSCxLQUNULEdBQUksTUFBUUcsSUFBTUEsR0FBSzhFLFdBQVcvRSxJQUFLLENBQ25DRCxHQUFLamdCLE9BQU9tZ0IsSUFDWixNQUFNdm1CLEdBR2RxbUIsR0FBS0MsR0FFVCxJQWlCSXRCLEdBakJBYyxHQUFLLEdBQ1QsU0FBU1UsR0FBR3htQixHQUFLLE9BdEJqQixTQUFZQSxFQUFHZSxHQUFLLElBQUkyRyxFQUFJb2UsR0FBSSxPQUFPcnlCLE9BQU9lLFVBQVU4TCxlQUFlN0wsS0FBS2lULEVBQUcxSCxHQUFLMEgsRUFBRTFILEdBQUswSCxFQUFFMUgsR0FBS2UsSUFzQjFFOGtCLENBQUc3bEIsR0FBRyxXQUcxQixJQUZBLElBQUllLEVBQUksRUFDSjdFLEVBQUlnb0IsR0FBRzlkLE9BQU9pZ0IsS0FBS2hFLE1BQU0sS0FBTWxnQixFQUFJK2hCLEdBQUc5ZCxPQUFPcEcsSUFBSXFpQixNQUFNLEtBQU1HLEVBQUlqWixLQUFLMFUsSUFBSS9oQixFQUFFckosT0FBUXNQLEVBQUV0UCxRQUNqRmtRLEVBQUksRUFBRyxHQUFLaEMsR0FBS2dDLEVBQUl5ZixFQUFHemYsSUFBSyxDQUNsQyxJQUFJMkUsRUFBSXhMLEVBQUU2RyxJQUFNLEdBQUloRCxFQUFJb0MsRUFBRVksSUFBTSxHQUNoQyxFQUFHLENBR0MsR0FGQTJFLEVBQUksaUJBQWlCcWYsS0FBS3JmLElBQU0sQ0FBQyxHQUFJLEdBQUksR0FBSSxJQUM3QzNILEVBQUksaUJBQWlCZ25CLEtBQUtobkIsSUFBTSxDQUFDLEdBQUksR0FBSSxHQUFJLElBQ3pDLEdBQUsySCxFQUFFLEdBQUc3VSxRQUFVLEdBQUtrTixFQUFFLEdBQUdsTixPQUM5QixNQUNKa08sRUFBSStoQixHQUFHLEdBQUtwYixFQUFFLEdBQUc3VSxPQUFTLEVBQUk2NEIsU0FBU2hrQixFQUFFLEdBQUksSUFBSyxHQUFLM0gsRUFBRSxHQUFHbE4sT0FBUyxFQUFJNjRCLFNBQVMzckIsRUFBRSxHQUFJLE1BQVEraUIsR0FBRyxHQUFLcGIsRUFBRSxHQUFHN1UsT0FBUSxHQUFLa04sRUFBRSxHQUFHbE4sU0FBV2l3QixHQUFHcGIsRUFBRSxHQUFJM0gsRUFBRSxJQUNySjJILEVBQUlBLEVBQUUsR0FDTjNILEVBQUlBLEVBQUUsU0FDRCxHQUFLZ0IsR0FFcEIsT0FBTyxHQUFLQSxLQUVWdUMsR0FBRTFILFVBQVkwckIsR0FFZHRDLEdBRFNvQixNQUNNc0YsU0FBU3JGLEdBQUksVUFBTyxFQUduQ3JCLFFBQUssRUFDVCxJQUFJNk4sR0FBSzdOLEdBQ0xFLElBQU1vQyxJQUFLLEdBQUs5VCxPQUFPcWYsSUFBS25NLEdBQUtZLEtBQU1kLEdBQUcsS0FBTUcsR0FBSyxXQUFjLElBQUtyakIsR0FBRTZhLG1CQUFxQjFxQixPQUFPc0UsZUFDdEcsT0FBTyxFQUFJLElBQUlpSSxHQUFJLEVBQUllLEVBQUl0TixPQUFPc0UsZUFBZSxHQUFJLFVBQVcsQ0FBRUMsSUFBSyxXQUFjZ0ksR0FBSSxLQUFVLElBQ25Hc0QsR0FBRTZhLGlCQUFpQixPQUFRNEQsR0FBSWhoQixHQUFJdUMsR0FBRXF0QixvQkFBb0IsT0FBUTVPLEdBQUloaEIsR0FFekUsTUFBTzJHLElBQU8sT0FBTzFILEVBSm9DLEdBS3pELFNBQVNvQyxHQUFFcEMsRUFBR2UsR0FBSzdPLEtBQUs2WCxLQUFPL0osRUFBRzlOLEtBQUs4TixFQUFJOU4sS0FBS3dKLE9BQVNxRixFQUFHN08sS0FBSzIrQixrQkFBbUIsRUFFcEYsU0FBU2pPLEdBQUU1aUIsRUFBR2UsR0FTVixHQVJBcUIsR0FBRTNOLEtBQUt2QyxLQUFNOE4sRUFBSUEsRUFBRStKLEtBQU8sSUFDMUI3WCxLQUFLNitCLGNBQWdCNytCLEtBQUs4TixFQUFJOU4sS0FBS3dKLE9BQVMsS0FDNUN4SixLQUFLOCtCLE9BQVM5K0IsS0FBSysrQixRQUFVLytCLEtBQUtnL0IsUUFBVWgvQixLQUFLaS9CLFFBQVVqL0IsS0FBS2svQixRQUFVLEVBQzFFbC9CLEtBQUtvTCxJQUFNLEdBQ1hwTCxLQUFLbS9CLFFBQVVuL0IsS0FBS28vQixTQUFXcC9CLEtBQUtxL0IsT0FBU3IvQixLQUFLcy9CLFNBQVUsRUFDNUR0L0IsS0FBS3UvQixVQUFZLEVBQ2pCdi9CLEtBQUt3L0IsWUFBYyxHQUNuQngvQixLQUFLd1YsRUFBSSxLQUNMMUgsRUFBRyxDQUNILElBQUkwSCxFQUFJeFYsS0FBSzZYLEtBQU8vSixFQUFFK0osS0FBTWhLLEVBQUlDLEVBQUUyeEIsZ0JBQWtCM3hCLEVBQUUyeEIsZUFBZTkrQixPQUFTbU4sRUFBRTJ4QixlQUFlLEdBQUssS0FHcEcsR0FGQXovQixLQUFLd0osT0FBU3NFLEVBQUV0RSxRQUFVc0UsRUFBRTR4QixXQUM1QjEvQixLQUFLOE4sRUFBSWUsRUFDTEEsRUFBSWYsRUFBRSt3QixlQUNOLEdBQUk1SyxHQUFJLENBQ0pubUIsRUFBRyxDQUNDLElBQ0kwbEIsR0FBRzNrQixFQUFFOHdCLFVBQ0wsSUFBSTMxQixHQUFJLEVBQ1IsTUFBTThELEVBRVYsTUFBT21DLElBQ1BqRyxHQUFJLEVBRVJBLElBQU02RSxFQUFJLFdBSWQsYUFDSTJHLEVBQUkzRyxFQUFJZixFQUFFOHhCLFlBQWMsWUFBY3BxQixJQUFNM0csRUFBSWYsRUFBRSt4QixXQUMxRDcvQixLQUFLNitCLGNBQWdCaHdCLEVBQ3JCaEIsR0FBSzdOLEtBQUtrL0IsYUFBVSxJQUFXcnhCLEVBQUVxeEIsUUFBVXJ4QixFQUFFcXhCLFFBQVVyeEIsRUFBRWl5QixNQUFPOS9CLEtBQUtpL0IsYUFBVSxJQUFXcHhCLEVBQUVveEIsUUFBVXB4QixFQUFFb3hCLFFBQVVweEIsRUFBRWt5QixNQUFPLy9CLEtBQUtnL0IsUUFBVW54QixFQUFFbXhCLFNBQVcsRUFBR2gvQixLQUFLKytCLFFBQVVseEIsRUFBRWt4QixTQUFXLElBQU0vK0IsS0FBS2svQixhQUFVLElBQVdweEIsRUFBRW94QixRQUFVcHhCLEVBQUVveEIsUUFBVXB4QixFQUFFZ3lCLE1BQU85L0IsS0FBS2kvQixhQUFVLElBQVdueEIsRUFBRW14QixRQUFVbnhCLEVBQUVteEIsUUFBVW54QixFQUFFaXlCLE1BQU8vL0IsS0FBS2cvQixRQUFVbHhCLEVBQUVreEIsU0FBVyxFQUFHaC9CLEtBQUsrK0IsUUFBVWp4QixFQUFFaXhCLFNBQVcsR0FDN1cvK0IsS0FBSzgrQixPQUFTaHhCLEVBQUVneEIsT0FDaEI5K0IsS0FBS29MLElBQU0wQyxFQUFFMUMsS0FBTyxHQUNwQnBMLEtBQUtzL0IsUUFBVXh4QixFQUFFd3hCLFFBQ2pCdC9CLEtBQUtxL0IsT0FBU3Z4QixFQUFFdXhCLE9BQ2hCci9CLEtBQUtvL0IsU0FBV3R4QixFQUFFc3hCLFNBQ2xCcC9CLEtBQUttL0IsUUFDRHJ4QixFQUFFcXhCLFFBQ05uL0IsS0FBS3UvQixVQUFZenhCLEVBQUV5eEIsV0FBYSxFQUNoQ3YvQixLQUFLdy9CLFlBQWMsaUJBQW9CMXhCLEVBQUUweEIsWUFBYzF4QixFQUFFMHhCLFlBQWN6TSxHQUFHamxCLEVBQUUweEIsY0FBZ0IsR0FDNUZ4L0IsS0FBS3dWLEVBQUkxSCxFQUNUQSxFQUFFNndCLGtCQUFvQjMrQixLQUFLNk8sS0EzQ25DcUIsR0FBRTVOLFVBQVV1TSxFQUFJLFdBQWM3TyxLQUFLMitCLGtCQUFtQixHQThDdEQ1dEIsR0FBRTJmLEdBQUd4Z0IsSUFDTCxJQUFJNmlCLEdBQUssQ0FBRW1OLEVBQUcsUUFBU0MsRUFBRyxNQUFPQyxFQUFHLFNBQ3BDMVAsR0FBRXB1QixVQUFVdU0sRUFBSSxXQUFjNmhCLEdBQUV3ZSxFQUFFcmdDLEVBQUV0TSxLQUFLdkMsTUFBTyxJQUFJOE4sRUFBSTlOLEtBQUt3VixFQUFHLEdBQUkxSCxFQUFFbXlCLGVBQ2xFbnlCLEVBQUVteUIsc0JBQ0QsR0FBSW55QixFQUFFdXlCLGFBQWMsRUFBSTdMLEdBQ3pCLEtBQ1ExbUIsRUFBRXd4QixTQUFXLEtBQU94eEIsRUFBRXd5QixTQUFXLEtBQU94eUIsRUFBRXd5QixXQUMxQ3h5QixFQUFFd3lCLFNBQVcsR0FFckIsTUFBT3p4QixNQUNYLElBQUkwb0IsR0FBSSx1QkFBeUIsSUFBTWxnQixLQUFLSSxTQUFXLEdBQUlpZCxHQUFLLEVBQ2hFLFNBQVN4QyxHQUFHcGtCLEVBQUdlLEVBQUcyRyxFQUFHM0gsRUFBRzdELEdBQUtoSyxLQUFLcXNCLFNBQVd2ZSxFQUFHOU4sS0FBS3VVLE1BQVEsS0FBTXZVLEtBQUt5TyxJQUFNSSxFQUFHN08sS0FBSzZYLEtBQU9yQyxFQUFHeFYsS0FBSzBnQyxVQUFZN3lCLEVBQUc3TixLQUFLK3ZCLEdBQUsvbEIsRUFBR2hLLEtBQUtvTCxNQUFRc3BCLEdBQUkxMEIsS0FBS3lpQyxFQUFJemlDLEtBQUt5Z0QsR0FBSSxFQUNwSyxTQUFTM3JCLEdBQUdobkIsR0FBS0EsRUFBRTIwQixHQUFJLEVBQUkzMEIsRUFBRXVlLFNBQVcsS0FBTXZlLEVBQUV5RyxNQUFRLEtBQU16RyxFQUFFVyxJQUFNLEtBQU1YLEVBQUVpaUIsR0FBSyxLQUNuRixTQUFTZ0YsR0FBR2puQixHQUFLOU4sS0FBS3lPLElBQU1YLEVBQUc5TixLQUFLOE4sRUFBSSxHQUFJOU4sS0FBSzZPLEVBQUksRUFFckQsU0FBU3ZILEdBQUd3RyxFQUFHZSxHQUFLLElBQUkyRyxFQUFJM0csRUFBRWdKLEtBQU0sR0FBSXJDLEtBQUsxSCxFQUFFQSxFQUFHLENBQzlDLElBQThCbUMsRUFBMUJwQyxFQUFJQyxFQUFFQSxFQUFFMEgsR0FBSXhMLEVBQUl1bkIsR0FBRzFqQixFQUFHZ0IsSUFDekJvQixFQUFJLEdBQUtqRyxJQUFNL0ksTUFBTXFCLFVBQVVpTCxPQUFPaEwsS0FBS3NMLEVBQUc3RCxFQUFHLEdBQ2xEaUcsSUFBTTZrQixHQUFHam1CLEdBQUksR0FBS2YsRUFBRUEsRUFBRTBILEdBQUc3VSxnQkFBa0JtTixFQUFFQSxFQUFFMEgsR0FBSTFILEVBQUVlLE9BRXpELFNBQVNtbUIsR0FBR2xuQixFQUFHZSxFQUFHMkcsRUFBRzNILEdBQUssSUFBSyxJQUFJN0QsRUFBSSxFQUFHQSxFQUFJOEQsRUFBRW5OLFNBQVVxSixFQUFHLENBQ3pELElBQUlpRyxFQUFJbkMsRUFBRTlELEdBQ1YsSUFBS2lHLEVBQUV3eUIsR0FBS3h5QixFQUFFb2MsVUFBWXhkLEdBQUtvQixFQUFFeXdCLFdBQWFsckIsR0FBS3ZGLEVBQUU4ZixJQUFNbGlCLEVBQ3ZELE9BQU83RCxFQUNiLE9BQVEsRUFWVitxQixHQUFHenlCLFVBQVUwbUIsSUFBTSxTQUFVbGIsRUFBR2UsRUFBRzJHLEVBQUczSCxFQUFHN0QsR0FBSyxJQUFJaUcsRUFBSW5DLEVBQUUvTixZQUFZK04sRUFBSTlOLEtBQUs4TixFQUFFbUMsTUFBVW5DLEVBQUk5TixLQUFLOE4sRUFBRW1DLEdBQUssR0FBSWpRLEtBQUs2TyxLQUFNLElBQUl5aEIsRUFBSTBFLEdBQUdsbkIsRUFBR2UsRUFBR2hCLEVBQUc3RCxHQUFxRyxPQUFoRyxFQUFJc21CLEdBQUt6aEIsRUFBSWYsRUFBRXdpQixHQUFJOWEsSUFBTTNHLEVBQUU0eEMsR0FBSSxNQUFRNXhDLEVBQUksSUFBSXFqQixHQUFHcmpCLEVBQUc3TyxLQUFLeU8sSUFBS3dCLElBQUtwQyxFQUFHN0QsSUFBTXkyQyxFQUFJanJDLEVBQUcxSCxFQUFFck8sS0FBS29QLElBQVlBLEdBV3hQLElBQUlvbUIsR0FBSyxlQUFpQixJQUFNNWQsS0FBS0ksU0FBVyxHQUFJeWQsR0FBSyxHQUN6RCxTQUFTRyxHQUFHdm5CLEVBQUdlLEVBQUcyRyxFQUFHM0gsRUFBRzdELEdBQUssR0FBSTZELEdBQUtBLEVBQUVvekIsS0FDcEMsT0FBT3RNLEdBQUc3bUIsRUFBR2UsRUFBRzJHLEVBQUczSCxFQUFHN0QsR0FBSSxHQUFJL0ksTUFBTUUsUUFBUTBOLEdBQUksQ0FDaEQsSUFBSyxJQUFJb0IsRUFBSSxFQUFHQSxFQUFJcEIsRUFBRWxPLE9BQVFzUCxJQUMxQm9sQixHQUFHdm5CLEVBQUdlLEVBQUVvQixHQUFJdUYsRUFBRzNILEVBQUc3RCxHQUN0QixPQUFPLEtBQ0UsT0FBWHdMLEVBQUk4ZixHQUFHOWYsR0FBVzFILEdBQUtBLEVBQUV5cEIsSUFBS3pwQixFQUFFbWtCLEdBQUdwakIsRUFBRzJHLEVBQUduVCxHQUFFd0wsS0FBT0EsRUFBRTZ5QixVQUFZN3lCLEVBQUc3RCxHQUFLdXJCLEdBQUd6bkIsRUFBR2UsRUFBRzJHLEdBQUcsRUFBSTNILEVBQUc3RCxHQUM3RixTQUFTdXJCLEdBQUd6bkIsRUFBR2UsRUFBRzJHLEVBQUczSCxFQUFHN0QsRUFBR2lHLEdBQ3ZCLElBQUtwQixFQUNELE1BQU10RCxNQUFNLHNCQUNoQixJQUFJK2tCLEVBQUlqdUIsR0FBRTJILEtBQU9BLEVBQUUwMkIsVUFBWTEyQixFQUMvQixHQUFJc21CLElBQU0wQyxHQUNOLE9BQU8sS0FDWCxJQUFJbmlCLEVBQUk0a0IsR0FBRzNuQixHQUdYLEdBRkErQyxJQUFNL0MsRUFBRW1uQixJQUFNcGtCLEVBQUksSUFBSWtrQixHQUFHam5CLEtBQ3pCMEgsRUFBSTNFLEVBQUVtWSxJQUFJbmEsRUFBRzJHLEVBQUczSCxFQUFHeWlCLEVBQUdyZ0IsSUFDaEJzRSxNQUNGLE9BQU9pQixFQUtYLEdBSkEzSCxFQWNKLFdBQWdCLElBQUlDLEVBQUk4bkIsR0FBSS9tQixFQUFJbWtCLEdBQUssU0FBVXhkLEdBQUssT0FBTzFILEVBQUV2TCxLQUFLc00sRUFBRUosSUFBS0ksRUFBRXdkLFNBQVU3VyxJQUFRLFNBQVVBLEdBQXVDLEtBQWxDQSxFQUFJMUgsRUFBRXZMLEtBQUtzTSxFQUFFSixJQUFLSSxFQUFFd2QsU0FBVTdXLElBQ3RJLE9BQU9BLEdBQU0sT0FBTzNHLEVBZmhCNm1CLEdBQ0psZ0IsRUFBRWpCLE1BQVExRyxFQUNWQSxFQUFFWSxJQUFNWCxFQUNSRCxFQUFFd2UsU0FBVzdXLEVBQ1QxSCxFQUFFbWUsaUJBQ0Z3SSxLQUFPenFCLEVBQUlzbUIsUUFBSSxJQUFXdG1CLElBQU1BLEdBQUksR0FBSzhELEVBQUVtZSxpQkFBaUJwZCxFQUFFOU8sV0FBWThOLEVBQUc3RCxRQUM1RSxHQUFJOEQsRUFBRXl6QixZQUNQenpCLEVBQUV5ekIsWUFBWTVMLEdBQUc5bUIsRUFBRTlPLFlBQWE4TixPQUMvQixLQUFJQyxFQUFFMHpCLGNBQWUxekIsRUFBRTJ6QixlQUd4QixNQUFNbDJCLE1BQU0scURBRlp1QyxFQUFFMHpCLFlBQVkzekIsR0FHbEIsT0FBTzJILEVBSVgsU0FBU21mLEdBQUc3bUIsRUFBR2UsRUFBRzJHLEVBQUczSCxFQUFHN0QsR0FBSyxHQUFJL0ksTUFBTUUsUUFBUTBOLEdBQUksQ0FDL0MsSUFBSyxJQUFJb0IsRUFBSSxFQUFHQSxFQUFJcEIsRUFBRWxPLE9BQVFzUCxJQUMxQjBrQixHQUFHN21CLEVBQUdlLEVBQUVvQixHQUFJdUYsRUFBRzNILEVBQUc3RCxHQUN0QixPQUFPLEtBQ0UsT0FBWHdMLEVBQUk4ZixHQUFHOWYsR0FBVzFILEdBQUtBLEVBQUV5cEIsSUFBS3pwQixFQUFFcWtCLEdBQUd0akIsRUFBRzJHLEVBQUduVCxHQUFFd0wsS0FBT0EsRUFBRTZ5QixVQUFZN3lCLEVBQUc3RCxHQUFLdXJCLEdBQUd6bkIsRUFBR2UsRUFBRzJHLEdBQUcsRUFBSTNILEVBQUc3RCxHQUM3RixTQUFTOHJCLEdBQUdob0IsRUFBR2UsRUFBRzJHLEVBQUczSCxFQUFHN0QsR0FBSyxHQUFJL0ksTUFBTUUsUUFBUTBOLEdBQzNDLElBQUssSUFBSW9CLEVBQUksRUFBR0EsRUFBSXBCLEVBQUVsTyxPQUFRc1AsSUFDMUI2bEIsR0FBR2hvQixFQUFHZSxFQUFFb0IsR0FBSXVGLEVBQUczSCxFQUFHN0QsUUFFckI2RCxFQUFJeEwsR0FBRXdMLEtBQU9BLEVBQUU2eUIsVUFBWTd5QixFQUFHMkgsRUFBSThmLEdBQUc5ZixHQUFJMUgsR0FBS0EsRUFBRXlwQixLQUFPenBCLEVBQUlBLEVBQUUwSCxHQUFHM0csRUFBSXFGLE9BQU9yRixHQUFHOU8sY0FBaUIrTixFQUFFQSxJQUF1QyxHQUFyQjBILEVBQUl3ZixHQUFoQi9rQixFQUFJbkMsRUFBRUEsRUFBRWUsR0FBYzJHLEVBQUczSCxFQUFHN0QsTUFBZThxQixHQUFHN2tCLEVBQUV1RixJQUFLdlUsTUFBTXFCLFVBQVVpTCxPQUFPaEwsS0FBSzBOLEVBQUd1RixFQUFHLEdBQUksR0FBS3ZGLEVBQUV0UCxnQkFBa0JtTixFQUFFQSxFQUFFZSxHQUFJZixFQUFFZSxPQUFVZixJQUFNQSxFQUFJMm5CLEdBQUczbkIsTUFBUWUsRUFBSWYsRUFBRUEsRUFBRWUsRUFBRTlPLFlBQWErTixHQUFLLEVBQUdlLElBQU1mLEVBQUlrbkIsR0FBR25tQixFQUFHMkcsRUFBRzNILEVBQUc3RCxLQUFNd0wsR0FBSyxFQUFJMUgsRUFBSWUsRUFBRWYsR0FBSyxPQUFTd29CLEdBQUc5Z0IsSUFDcFcsU0FBUzhnQixHQUFHeG9CLEdBQUssR0FBSSxpQkFBb0JBLEdBQUtBLElBQU1BLEVBQUUyMEIsRUFBRyxDQUNyRCxJQUFJNXpCLEVBQUlmLEVBQUVXLElBQ1YsR0FBSUksR0FBS0EsRUFBRTBvQixJQUNQandCLEdBQUd1SCxFQUFFMkcsRUFBRzFILE9BQ1AsQ0FDRCxJQUFJMEgsRUFBSTFILEVBQUUrSixLQUFNaEssRUFBSUMsRUFBRXlHLE1BQ3RCMUYsRUFBRTR2QixvQkFBc0I1dkIsRUFBRTR2QixvQkFBb0JqcEIsRUFBRzNILEVBQUdDLEVBQUU0eUIsU0FBVzd4QixFQUFFZ3pCLFlBQWNoekIsRUFBRWd6QixZQUFZbE0sR0FBR25nQixHQUFJM0gsR0FBS2dCLEVBQUUyeUIsYUFBZTN5QixFQUFFNHlCLGdCQUFrQjV5QixFQUFFNHlCLGVBQWU1ekIsSUFDaEsySCxFQUFJaWdCLEdBQUc1bUIsS0FBT3ZILEdBQUdrTyxFQUFHMUgsR0FBSSxHQUFLMEgsRUFBRTNHLElBQU0yRyxFQUFFL0csSUFBTSxLQUFNSSxFQUFFb21CLElBQU0sT0FBU0gsR0FBR2huQixLQUdoRixTQUFTNm5CLEdBQUc3bkIsR0FBSyxPQUFPQSxLQUFLb25CLEdBQUtBLEdBQUdwbkIsR0FBS29uQixHQUFHcG5CLEdBQUssS0FBT0EsRUFDekQsU0FBU3lvQixHQUFHem9CLEVBQUdlLEdBQUssSUFBSTJHLEVBQUkxSCxFQUFFdWUsU0FBVXhlLEVBQUlDLEVBQUVpaUIsSUFBTWppQixFQUFFVyxJQUFtQixPQUFkWCxFQUFFMnlDLEdBQUtucUIsR0FBR3hvQixHQUFXMEgsRUFBRWpULEtBQUtzTCxFQUFHZ0IsR0FDMUYsU0FBUyttQixHQUFHOW5CLEVBQUdlLEdBQUssR0FBSWYsRUFBRTIwQixFQUN0QixPQUFPLEVBQUksSUFBS3pQLEdBQUksQ0FDcEIsSUFBS25rQixFQUNEZixFQUFHLENBQ0NlLEVBQUksQ0FBQyxTQUFVLFNBQ2YsSUFBSyxJQUFJMkcsRUFBSXBFLEdBQUd2RCxFQUFJLEVBQUdBLEVBQUlnQixFQUFFbE8sT0FBUWtOLElBQ2pDLEdBQWlCLE9BQWIySCxFQUFJQSxFQUFFM0csRUFBRWhCLEtBQWdCLENBQ3hCZ0IsRUFBSSxLQUNKLE1BQU1mLEVBRWRlLEVBQUkyRyxFQUdaLE9BQU8rZ0IsR0FBR3pvQixFQURWZSxFQUFJLElBQUk2aEIsR0FBRTdoQixFQUFHN08sT0FFZixPQUFPdTJCLEdBQUd6b0IsRUFBRyxJQUFJNGlCLEdBQUU3aEIsRUFBRzdPLE9BQ3hCLFNBQVN5MUIsR0FBRzNuQixHQUFnQixPQUFYQSxFQUFJQSxFQUFFbW5CLGVBQXlCRixHQUFLam5CLEVBQUksS0FDekQsSUFBSTBvQixHQUFLLHdCQUEwQixJQUFNbmYsS0FBS0ksV0FBYSxHQUMzRCxTQUFTNmQsR0FBR3huQixHQUFLLE1BQUksWUFBY2tpQixHQUFHbGlCLEdBQzNCQSxHQUFHQSxFQUFFMG9CLE1BQVExb0IsRUFBRTBvQixJQUFNLFNBQVUzbkIsR0FBSyxPQUFPZixFQUFFbTBCLFlBQVlwekIsS0FBZWYsRUFBRTBvQixLQUNyRixTQUFTOEYsS0FBTS9MLEdBQUVodUIsS0FBS3ZDLE1BQU9BLEtBQUt3VixFQUFJLElBQUl1ZixHQUFHLzBCLE1BQU9BLEtBQUs4akMsRUFBSTlqQyxLQUFNQSxLQUFLdTNCLEVBQUksS0FrQzVFLFNBQVNkLEdBQUczb0IsRUFBR2UsRUFBRzJHLEVBQUczSCxHQUEyQixLQUF0QmdCLEVBQUlmLEVBQUUwSCxFQUFFMUgsRUFBRW9HLE9BQU9yRixLQUN2QyxPQUFPLEVBQUlBLEVBQUlBLEVBQUV6TyxTQUFVLElBQUssSUFBSTRKLEdBQUksRUFBSWlHLEVBQUksRUFBR0EsRUFBSXBCLEVBQUVsTyxTQUFVc1AsRUFBRyxDQUN0RSxJQUFJcWdCLEVBQUl6aEIsRUFBRW9CLEdBQ1YsR0FBSXFnQixJQUFNQSxFQUFFbVMsR0FBS25TLEVBQUVvUSxTQUFXbHJCLEVBQUcsQ0FDN0IsSUFBSTNFLEVBQUl5ZixFQUFFakUsU0FBVW1FLEVBQUlGLEVBQUVQLElBQU1PLEVBQUU3aEIsSUFDbEM2aEIsRUFBRW13QixHQUFLbjVDLEdBQUd3RyxFQUFFMEgsRUFBRzhhLEdBQ2Z0bUIsR0FBSSxJQUFPNkcsRUFBRXRPLEtBQUtpdUIsRUFBRzNpQixJQUFNN0QsR0FFakMsT0FBT0EsSUFBTTZELEVBQUU4d0IsaUJBekNqQjV0QixHQUFFdXJCLEdBQUcvTCxJQUNMK0wsR0FBRWg2QixVQUFVaTFCLEtBQUssR0FDakJ0cEIsR0FBSXF1QixHQUFFaDZCLFdBQ0oycEIsaUJBQW1CLFNBQVVuZSxFQUFHZSxFQUFHMkcsRUFBRzNILEdBQUt3bkIsR0FBR3IxQixLQUFNOE4sRUFBR2UsRUFBRzJHLEVBQUczSCxJQUMvREksR0FBRXd3QixvQkFBc0IsU0FBVTN3QixFQUFHZSxFQUFHMkcsRUFBRzNILEdBQUtpb0IsR0FBRzkxQixLQUFNOE4sRUFBR2UsRUFBRzJHLEVBQUczSCxJQUNsRUksR0FBRTQwQixjQUFnQixTQUFVLzBCLEdBQUssSUFBSWUsRUFBRzJHLEVBQUl4VixLQUFLdTNCLEVBQUcsR0FBSS9oQixFQUNwRCxJQUFLM0csRUFBSSxHQUFJMkcsRUFBR0EsRUFBSUEsRUFBRStoQixFQUNsQjFvQixFQUFFcFAsS0FBSytWLEdBQUlBLEVBQUl4VixLQUFLOGpDLEVBQUcsSUFBSWoyQixFQUFJQyxFQUFFK0osTUFBUS9KLEVBQUcsR0FBSSxpQkFBb0JBLEVBQ3hFQSxFQUFJLElBQUlvQyxHQUFFcEMsRUFBRzBILFFBQ1osR0FBSTFILGFBQWFvQyxHQUNsQnBDLEVBQUV0RSxPQUFTc0UsRUFBRXRFLFFBQVVnTSxNQUN0QixDQUNELElBQUl4TCxFQUFJOEQsRUFFUjZrQixHQURBN2tCLEVBQUksSUFBSW9DLEdBQUVyQyxFQUFHMkgsR0FDUHhMLEdBQ0EsR0FBUkEsR0FBSSxFQUFRNkUsRUFDVixJQUFLLElBQUlvQixFQUFJcEIsRUFBRWxPLE9BQVMsRUFBRyxHQUFLc1AsRUFBR0EsSUFBSyxDQUNwQyxJQUFJcWdCLEVBQUl4aUIsRUFBRUEsRUFBSWUsRUFBRW9CLEdBQ2hCakcsRUFBSXlzQixHQUFHbkcsRUFBR3ppQixHQUFHLEVBQUlDLElBQU05RCxFQUN3QyxHQUFwREEsRUFBSXlzQixHQUFqQm5HLEVBQUl4aUIsRUFBRUEsRUFBSTBILEVBQWEzSCxHQUFHLEVBQUlDLElBQU05RCxFQUFHQSxFQUFJeXNCLEdBQUduRyxFQUFHemlCLEdBQUcsRUFBSUMsSUFBTTlELEVBQU82RSxFQUN2RSxJQUFLb0IsRUFBSSxFQUFHQSxFQUFJcEIsRUFBRWxPLE9BQVFzUCxJQUNOakcsRUFBSXlzQixHQUFwQm5HLEVBQUl4aUIsRUFBRUEsRUFBSWUsRUFBRW9CLEdBQWNwQyxHQUFHLEVBQUlDLElBQU05RCxFQUFHLE9BQU9BLEdBQ3pEaUUsR0FBRXl3QixFQUFJLFdBQWdDLEdBQWxCcEMsR0FBRTRTLEVBQUV4USxFQUFFbjhCLEtBQUt2QyxNQUFXQSxLQUFLd1YsRUFBRyxDQUM5QyxJQUFnQkEsRUFBWjFILEVBQUk5TixLQUFLd1YsRUFDYixJQUFLQSxLQUFLMUgsRUFBRUEsRUFBRyxDQUNYLElBQUssSUFBSUQsRUFBSUMsRUFBRUEsRUFBRTBILEdBQUl4TCxFQUFJLEVBQUdBLEVBQUk2RCxFQUFFbE4sT0FBUXFKLElBQ3RDOHFCLEdBQUdqbkIsRUFBRTdELFdBQ0Y4RCxFQUFFQSxFQUFFMEgsR0FDWDFILEVBQUVlLEtBRVI3TyxLQUFLdTNCLEVBQUksTUFDWHRwQixHQUFFZ2tCLEdBQUssU0FBVW5rQixFQUFHZSxFQUFHMkcsRUFBRzNILEdBQUssT0FBTzdOLEtBQUt3VixFQUFFd1QsSUFBSTlVLE9BQU9wRyxHQUFJZSxHQUFHLEVBQUkyRyxFQUFHM0gsSUFDdEVJLEdBQUVra0IsR0FBSyxTQUFVcmtCLEVBQUdlLEVBQUcyRyxFQUFHM0gsR0FBSyxPQUFPN04sS0FBS3dWLEVBQUV3VCxJQUFJOVUsT0FBT3BHLEdBQUllLEdBQUcsRUFBSTJHLEVBQUczSCxJQVV0RSxJQUFJNm9CLEdBQUt0bEIsR0FBRS9OLEtBQUtDLFVBQ2hCLFNBQVMwekIsS0FBT2gzQixLQUFLNk8sRUFBSTdPLEtBQUs4TixFQUFJLEtBQ2xDLElBa0JJMHBCLEdBbEJBTixHQUFLLElBQW1CLFdBQ3hCLFNBQVN5bkMsRUFBUTd3RCxFQUFHZSxFQUFHMkcsR0FDbkJ4VixLQUFLaVEsRUFBSXVGLEVBQ1R4VixLQUFLd1YsRUFBSTFILEVBQ1Q5TixLQUFLaU8sRUFBSVksRUFDVDdPLEtBQUs2TyxFQUFJLEVBQ1Q3TyxLQUFLOE4sRUFBSSxLQUdiLE9BREE2d0QsRUFBUXI4RCxVQUFVd0QsSUFBTSxXQUFjLElBQUlnSSxFQUF1RixPQUFwRixFQUFJOU4sS0FBSzZPLEdBQUs3TyxLQUFLNk8sSUFBS2YsRUFBSTlOLEtBQUs4TixFQUFHOU4sS0FBSzhOLEVBQUlBLEVBQUVoTSxLQUFNZ00sRUFBRWhNLEtBQU8sTUFBUWdNLEVBQUk5TixLQUFLd1YsSUFBWTFILEdBQ2pJNndELEVBVGdCLEdBQWxCLEVBVUosV0FBYyxPQUFPLElBQUkxbkMsTUFBTyxTQUFVbnBCLEdBQUtBLEVBQUVvSCxVQUFZLEtBRWxFLFNBQVNpaUIsS0FBTyxJQUFJcnBCLEVBQUlzcEIsR0FBSXZvQixFQUFJLEtBQTRFLE9BQXRFZixFQUFFQSxJQUFNZSxFQUFJZixFQUFFQSxFQUFHQSxFQUFFQSxFQUFJQSxFQUFFQSxFQUFFaE0sS0FBTWdNLEVBQUVBLElBQU1BLEVBQUVlLEVBQUksTUFBT0EsRUFBRS9NLEtBQU8sTUFBYytNLEVBQ25ILFNBQVNvb0IsS0FBT2ozQixLQUFLOEIsS0FBTzlCLEtBQUs2TyxFQUFJN08sS0FBSzhOLEVBQUksS0FHOUMsU0FBU3dwQixHQUFHeHBCLEdBQUtzRCxHQUFFcVMsWUFBVyxXQUFjLE1BQU0zVixJQUFNLEdBQ3hELFNBQVN1cEIsR0FBR3ZwQixFQUFHZSxHQUFLMm9CLElBRXBCLFdBQWdCLElBQUkxcEIsRUFBSXNELEdBQUU3TSxRQUFRQyxhQUFRLEdBQVNnekIsR0FBSyxXQUFjMXBCLEVBQUUxSSxLQUFLdXlCLEtBRm5ERixHQUFNQyxLQUFPRixLQUFNRSxJQUFLLEdBQUtOLEdBQUdwTyxJQUFJbGIsRUFBR2UsR0FOakVtb0IsR0FBRzEwQixVQUFVMG1CLElBQU0sU0FBVWxiLEVBQUdlLEdBQUssSUFBSTJHLEVBQUkwaEIsR0FBR3B4QixNQUFPMFAsRUFBRXpQLElBQUkrSCxFQUFHZSxHQUFJN08sS0FBSzZPLEVBQUk3TyxLQUFLNk8sRUFBRS9NLEtBQU8wVCxFQUFJeFYsS0FBSzhOLEVBQUkwSCxFQUFHeFYsS0FBSzZPLEVBQUkyRyxHQUdwSHloQixHQUFHMzBCLFVBQVV5RCxJQUFNLFNBQVUrSCxFQUFHZSxHQUFLN08sS0FBSzhOLEVBQUlBLEVBQUc5TixLQUFLNk8sRUFBSUEsRUFBRzdPLEtBQUs4QixLQUFPLE1BQ3pFbTFCLEdBQUczMEIsVUFBVTRTLE1BQVEsV0FBY2xWLEtBQUs4QixLQUFPOUIsS0FBSzZPLEVBQUk3TyxLQUFLOE4sRUFBSSxNQUtqRSxJQUFJNHBCLElBQUssRUFBSU4sR0FBSyxJQUFJSixHQUN0QixTQUFTVyxLQUFPLElBQUssSUFBSTdwQixFQUFHQSxFQUFJcXBCLE1BQU8sQ0FDbkMsSUFDSXJwQixFQUFFQSxFQUFFdkwsS0FBS3VMLEVBQUVlLEdBRWYsTUFBTzJHLEdBQ0g4aEIsR0FBRzloQixHQUVQLElBQUkzRyxFQUFJcW9CLEdBQ1Jyb0IsRUFBRVosRUFBRUgsR0FDSmUsRUFBRUEsRUFBSUEsRUFBRW9CLElBQU1wQixFQUFFQSxJQUFLZixFQUFFaE0sS0FBTytNLEVBQUVmLEVBQUdlLEVBQUVmLEVBQUlBLEdBQzNDNHBCLElBQUssRUFDUCxTQUFTRSxHQUFHOXBCLEVBQUdlLEdBQUt5dEIsR0FBRS81QixLQUFLdkMsTUFBT0EsS0FBSzZPLEVBQUlmLEdBQUssRUFBRzlOLEtBQUs4TixFQUFJZSxHQUFLdUMsR0FBR3BSLEtBQUtpUSxFQUFJL0ssR0FBRWxGLEtBQUsreUIsR0FBSS95QixNQUFPQSxLQUFLaU8sRUFBSThqQixLQVV4RyxTQUFTOEYsR0FBRy9wQixHQUFLQSxFQUFFK2hCLElBQUssRUFBSS9oQixFQUFFbzhCLElBQU1wOEIsRUFBRUEsRUFBRW9lLGFBQWFwZSxFQUFFbzhCLEdBQUlwOEIsRUFBRW84QixFQUFJLE1BRWpFLFNBQVNwUyxHQUFHaHFCLEVBQUdlLEVBQUcyRyxHQUFLLEdBQUksWUFBY3dhLEdBQUdsaUIsR0FDeEMwSCxJQUFNMUgsRUFBSTVJLEdBQUU0SSxFQUFHMEgsUUFDZCxLQUFJMUgsR0FBSyxtQkFBcUJBLEVBQUVtMEIsWUFHakMsTUFBTTEyQixNQUFNLDZCQUZadUMsRUFBSTVJLEdBQUU0SSxFQUFFbTBCLFlBQWFuMEIsR0FFcUIsT0FBTyxXQUFhd1QsT0FBT3pTLElBQU0sRUFBSXVDLEdBQUVxUyxXQUFXM1YsRUFBR2UsR0FBSyxHQUN4RyxTQUFTa3BCLEdBQUdqcUIsR0FBS0EsRUFBRUEsRUFBSWdxQixJQUFHLFdBQWNocUIsRUFBRUEsRUFBSSxLQUFNQSxFQUFFMEgsSUFBTTFILEVBQUUwSCxHQUFJLEVBQUl1aUIsR0FBR2pxQixNQUFRQSxFQUFFd2lCLEdBQUksSUFBSXpoQixFQUFJZixFQUFFZSxFQUFHZixFQUFFZSxFQUFJLEtBQU1mLEVBQUVHLEVBQUU5SSxNQUFNLEtBQU0wSixHQWpCaElrQyxHQUFFNm1CLEdBQUkwRSxLQUNOcnVCLEdBQUkycEIsR0FBR3QxQixXQUNMdXRCLElBQUssRUFDUDVoQixHQUFFaThCLEVBQUksS0FDTmo4QixHQUFFOGtCLEdBQUssV0FBYyxHQUFJL3lCLEtBQUs2dkIsR0FBSSxDQUM5QixJQUFJL2hCLEVBQUlpa0IsS0FBTS94QixLQUFLaU8sRUFDbkIsRUFBSUgsR0FBS0EsRUFBSSxHQUFLOU4sS0FBSzZPLEVBQUk3TyxLQUFLa3FDLEVBQUlscUMsS0FBSzhOLEVBQUUyVixXQUFXempCLEtBQUtpUSxFQUFHalEsS0FBSzZPLEVBQUlmLElBQU05TixLQUFLa3FDLElBQU1scUMsS0FBSzhOLEVBQUVvZSxhQUFhbHNCLEtBQUtrcUMsR0FBSWxxQyxLQUFLa3FDLEVBQUksTUFBT2xxQyxLQUFLNmlDLGNBQWMsUUFBUzdpQyxLQUFLNnZCLEtBQU9nSSxHQUFHNzNCLE1BQU9BLEtBQUs2b0QsWUFFaE01NkMsR0FBRTQ2QyxNQUFRLFdBQWM3b0QsS0FBSzZ2QixJQUFLLEVBQUk3dkIsS0FBS2txQyxJQUFNbHFDLEtBQUtrcUMsRUFBSWxxQyxLQUFLOE4sRUFBRTJWLFdBQVd6akIsS0FBS2lRLEVBQUdqUSxLQUFLNk8sR0FBSTdPLEtBQUtpTyxFQUFJOGpCLE9BRXRHOWpCLEdBQUV5d0IsRUFBSSxXQUFjOUcsR0FBR3NYLEVBQUV4USxFQUFFbjhCLEtBQUt2QyxNQUFPNjNCLEdBQUc3M0IsYUFBY0EsS0FBSzhOLEdBUTdELElBQUlrcUIsR0FBb0IsU0FBVTNrQixHQUU5QixTQUFTMmtCLEVBQUdscUIsRUFBR2UsRUFBRzJHLEdBQ2QsSUFBSTdELEVBQVEwQixFQUFPOVEsS0FBS3ZDLE9BQVNBLEtBTWpDLE9BTEEyUixFQUFNMUQsRUFBSSxNQUFRdUgsRUFBSTFILEVBQUVoQixLQUFLMEksR0FBSzFILEVBQ2xDNkQsRUFBTTJlLEVBQUl6aEIsRUFDVjhDLEVBQU05QyxFQUFJLEtBQ1Y4QyxFQUFNNkQsR0FBSSxFQUNWN0QsRUFBTTdELEVBQUksS0FDSDZELEVBSVgsT0FuWkosU0FBbUI5RCxFQUFHZ0IsR0FFbEIsU0FBU0ksSUFBT2pQLEtBQUt5QyxZQUFjb0wsRUFEbkMsR0FBY0EsRUFBR2dCLEdBRWpCaEIsRUFBRXZMLFVBQWtCLE9BQU51TSxFQUFhdE4sT0FBTzJOLE9BQU9MLElBQU1JLEVBQUczTSxVQUFZdU0sRUFBRXZNLFVBQVcsSUFBSTJNLEdBb1kvRSxDQUFVK29CLEVBQUkza0IsR0FVZDJrQixFQUFHMTFCLFVBQVUyTixFQUFJLFNBQVVuQyxHQUFLOU4sS0FBSzZPLEVBQUkxSSxVQUFXbkcsS0FBSzhOLEVBQUk5TixLQUFLd1YsR0FBSSxFQUFLdWlCLEdBQUcvM0IsT0FDOUVnNEIsRUFBRzExQixVQUFVbzhCLEVBQUksV0FBY3JyQixFQUFPL1EsVUFBVW84QixFQUFFbjhCLEtBQUt2QyxNQUFPQSxLQUFLOE4sSUFBTXNELEdBQUU4YSxhQUFhbHNCLEtBQUs4TixHQUFJOU4sS0FBSzhOLEVBQUksS0FBTTlOLEtBQUt3VixHQUFJLEVBQUl4VixLQUFLNk8sRUFBSSxPQUMvSG1wQixFQWJZLENBY3JCekgsSUFDRixTQUFTd00sR0FBRWp2QixHQUFLeWlCLEdBQUVodUIsS0FBS3ZDLE1BQU9BLEtBQUs2TyxFQUFJZixFQUFHOU4sS0FBSzhOLEVBQUksR0FDbkRpRCxHQUFFZ3NCLEdBQUd4TSxJQUNMLElBQUkwSCxHQUFLLEdBQ1QsU0FBU2lQLEdBQUdwNUIsRUFBR2UsRUFBRzJHLEVBQUczSCxHQUFLNU0sTUFBTUUsUUFBUXFVLEtBQU9BLElBQU15aUIsR0FBRyxHQUFLemlCLEVBQUV6VixZQUFheVYsRUFBSXlpQixJQUFLLElBQUssSUFBSWp1QixFQUFJLEVBQUdBLEVBQUl3TCxFQUFFN1UsT0FBUXFKLElBQUssQ0FDcEgsSUFBSWlHLEVBQUlvbEIsR0FBR3htQixFQUFHMkcsRUFBRXhMLEdBQUk2RCxHQUFLQyxFQUFFbTBCLGFBQWEsRUFBSW4wQixFQUFFZSxHQUFLZixHQUNuRCxJQUFLbUMsRUFDRCxNQUNKbkMsRUFBRUEsRUFBRW1DLEVBQUU3RSxLQUFPNkUsR0FFakIsU0FBU210QixHQUFHdHZCLEdBQUt3a0IsR0FBR3hrQixFQUFFQSxHQUFHLFNBQVVlLEVBQUcyRyxHQUFLeFYsS0FBSzhOLEVBQUVNLGVBQWVvSCxJQUFNOGdCLEdBQUd6bkIsS0FBT2YsR0FBSUEsRUFBRUEsRUFBSSxHQUczRixTQUFTb3FCLEtBQU9sNEIsS0FBSzhOLEdBQUksRUFtQnpCLFNBQVNrdkIsR0FBRWx2QixFQUFHZSxFQUFHMkcsRUFBRzNILEdBQUtDLEVBQUV1TyxNQUFLLFdBQWMsTUFBTyxpQkFBbUJ4TixFQUFJLE1BRzVFLFNBQVlmLEVBQUdlLEdBQUssSUFBS2YsRUFBRUEsRUFDdkIsT0FBT2UsRUFBRyxJQUFLQSxFQUNmLE9BQU8sS0FBTSxJQUNiLElBQUkyRyxFQUFJblMsS0FBSzJsQyxNQUFNbjZCLEdBQ25CLEdBQUkyRyxFQUNBLElBQUsxSCxFQUFJLEVBQUdBLEVBQUkwSCxFQUFFN1UsT0FBUW1OLElBQ3RCLEdBQUk3TSxNQUFNRSxRQUFRcVUsRUFBRTFILElBQUssQ0FDckIsSUFBSUQsRUFBSTJILEVBQUUxSCxHQUNWLEtBQU0sRUFBSUQsRUFBRWxOLFFBQVMsQ0FDakIsSUFBSXFKLEVBQUk2RCxFQUFFLEdBQ1YsR0FBSTVNLE1BQU1FLFFBQVE2SSxNQUFRLEVBQUlBLEVBQUVySixRQUFTLENBQ3JDLElBQUlzUCxFQUFJakcsRUFBRSxHQUNWLEdBQUksUUFBVWlHLEdBQUssUUFBVUEsR0FBSyxTQUFXQSxFQUN6QyxJQUFLLElBQUlxZ0IsRUFBSSxFQUFHQSxFQUFJdG1CLEVBQUVySixPQUFRMnZCLElBQzFCdG1CLEVBQUVzbUIsR0FBSyxLQUluQyxPQUFPb0csR0FBR2xoQixHQUVkLE1BQU8zRSxHQUNILE9BQU9oQyxHQXhCeUV5cEIsQ0FBR3hxQixFQUFHMEgsSUFBTTNILEVBQUksSUFBTUEsRUFBSSxPQXJCOUdrdkIsR0FBRXo2QixVQUFVbzhCLEVBQUksV0FBYzNCLEdBQUVtUyxFQUFFeFEsRUFBRW44QixLQUFLdkMsTUFBT285QixHQUFHcDlCLE9BQ25EKzhCLEdBQUV6NkIsVUFBVTIvQixZQUFjLFdBQWMsTUFBTTEyQixNQUFNLDZDQXNCcEQyc0IsR0FBRzUxQixVQUFVK1osS0FBTyxhQXdCcEIsSUFBSWdkLEdBQUssS0FDVCxTQUFTYixLQUFPLE9BQU9hLEdBQUtBLElBQU0sSUFBSWlELEdBQ3RDLFNBQVM3RCxHQUFHM3FCLEdBQUtvQyxHQUFFM04sS0FBS3ZDLEtBQU0scUJBQXNCOE4sR0FFcEQsU0FBUzR3QixHQUFFNXdCLEdBQUssSUFBSWUsRUFBSTJwQixLQUFNM3BCLEVBQUVnMEIsY0FBYyxJQUFJcEssR0FBRzVwQixFQUFHZixJQUN4RCxTQUFTNHFCLEdBQUc1cUIsR0FBS29DLEdBQUUzTixLQUFLdkMsS0FBTSxZQUFhOE4sR0FFM0MsU0FBUzZ6QixHQUFFN3pCLEdBQUssSUFBSWUsRUFBSTJwQixLQUFNM3BCLEVBQUVnMEIsY0FBYyxJQUFJbkssR0FBRzdwQixFQUFHZixJQUN4RCxTQUFTNnFCLEdBQUc3cUIsR0FBS29DLEdBQUUzTixLQUFLdkMsS0FBTSxjQUFlOE4sR0FFN0MsU0FBU28wQixHQUFFcDBCLEVBQUdlLEdBQUssR0FBSSxZQUFjbWhCLEdBQUdsaUIsR0FDcEMsTUFBTXZDLE1BQU0sOENBQStDLE9BQU82RixHQUFFcVMsWUFBVyxXQUFjM1YsTUFBUWUsR0FSekdrQyxHQUFFMG5CLEdBQUl2b0IsSUFHTmEsR0FBRTJuQixHQUFJeG9CLElBR05hLEdBQUU0bkIsR0FBSXpvQixJQUdOLElBQUkwb0IsR0FBSyxDQUFFZ21DLFNBQVUsRUFBR2xxQyxHQUFJLEVBQUdTLEdBQUksRUFBR0QsR0FBSSxFQUFHSCxHQUFJLEVBQUdFLEdBQUksRUFBR0ksR0FBSSxFQUFHMUMsR0FBSSxFQUFHa3NDLFFBQVMsRUFBR3RwQyxHQUFJLEdBQ3JGc0QsR0FBSyxDQUFFL0QsR0FBSSxXQUFZYyxHQUFJLFVBQVdwQyxHQUFJLFFBQVNiLEdBQUksUUFBUytDLEdBQUksUUFBU0MsR0FBSSxtQkFBb0JrcEMsUUFBUyxVQUFXbHFDLEdBQUksa0JBQW1CYyxHQUFJLFdBQVlULEdBQUksbUJBQW9CYyxHQUFJLGtCQUNoTSxTQUFTZ0QsTUFFVCxTQUFTUCxHQUFHenFCLEdBQUssSUFBSWUsRUFBZ0MsT0FBNUJBLEVBQUlmLEVBQUVBLEtBQU9lLEVBQUlmLEVBQUVBLEVBQUksSUFBWWUsRUFDNUQsU0FBU21xQixNQUZURixHQUFHeDJCLFVBQVV3TCxFQUFJLEtBR2pCLElBS0l3ckIsR0FMQXdLLEdBQUksQ0FBRWc3QixLQUFNLElBQUs1c0MsR0FBSSxJQUFLc0IsR0FBSSxJQUFLOEIsR0FBSSxLQUMzQyxTQUFTMkQsS0FBTy9vQixHQUFFM04sS0FBS3ZDLEtBQU0sS0FFN0IsU0FBU2s1QixLQUFPaHBCLEdBQUUzTixLQUFLdkMsS0FBTSxLQUc3QixTQUFTbzVCLE1BR1QsU0FBU29NLEdBQUUxM0IsRUFBR2UsRUFBRzJHLEVBQUczSCxHQUFLN04sS0FBS2lPLEVBQUlILEVBQUc5TixLQUFLd1YsRUFBSTNHLEVBQUc3TyxLQUFLaVEsRUFBSXVGLEVBQUd4VixLQUFLc29ELEVBQUl6NkMsR0FBSyxFQUFHN04sS0FBSzhqQyxFQUFJLElBQUkvRyxHQUFFLzhCLE1BQU9BLEtBQUswUCxFQUFJOHFELEdBQUkxc0QsRUFBSWltQixHQUFLLFNBQU0sRUFBUS96QixLQUFLMjVDLEVBQUksSUFBSS9oQixHQUFHOXBCLEdBQUk5TixLQUFLOHdCLEVBQUksS0FBTTl3QixLQUFLNk8sR0FBSSxFQUFJN08sS0FBS3FSLEVBQUlyUixLQUFLd3dCLEVBQUl4d0IsS0FBS00sRUFBSU4sS0FBSzJoQyxFQUFJM2hDLEtBQUt1d0IsRUFBSXZ3QixLQUFLMmdELEVBQUkzZ0QsS0FBS21DLEVBQUksS0FBTW5DLEtBQUtzUCxFQUFJLEdBQUl0UCxLQUFLOE4sRUFBSSxLQUFNOU4sS0FBS3M4QixFQUFJLEVBQUd0OEIsS0FBS3N3QixFQUFJdHdCLEtBQUs2USxFQUFJLEtBQU03USxLQUFLbXFDLEdBQUssRUFBR25xQyxLQUFLMHdCLEdBQUksRUFBSTF3QixLQUFLKzBDLEVBQUksRUFBRy8wQyxLQUFLZzlCLEVBQUksS0FBTWg5QixLQUFLc1YsRUFBSXRWLEtBQUt1M0IsRUFBSXYzQixLQUFLdWlDLEVBQUl2aUMsS0FBS2tpQyxHQUFJLEVBUHRabnhCLEdBQUVrb0IsR0FBSS9vQixJQUVOYSxHQUFFbW9CLEdBQUlocEIsSUFHTmEsR0FBRXFvQixHQUFJTixJQUNOUSxHQUFLLElBQUlGLEdBRVQsSUFBSW9oQyxHQUFLLEtBQU0vZ0MsR0FBSyxHQUFJRyxHQUFLLEdBRzdCLFNBQVNDLEdBQUcvckIsRUFBR2UsRUFBRzJHLEdBQUsxSCxFQUFFNnpCLEVBQUksRUFBRzd6QixFQUFFeE4sRUFBSXk1QixHQUFHcU8sR0FBRXY1QixJQUFLZixFQUFFdUQsRUFBSW1FLEVBQUcxSCxFQUFFbzBCLEdBQUksRUFBSWhJLEdBQUdwc0IsRUFBRyxNQUN6RSxTQUFTb3NCLEdBQUdwc0IsRUFBR2UsR0FBS2YsRUFBRXlpQixFQUFJd0IsS0FBS21ZLEdBQUVwOEIsR0FBSUEsRUFBRTBpQixFQUFJNFgsR0FBRXQ2QixFQUFFeE4sR0FBSSxJQUFJa1YsRUFBSTFILEVBQUUwaUIsRUFBRzNpQixFQUFJQyxFQUFFdzZDLEVBQUdybkQsTUFBTUUsUUFBUTBNLEtBQU9BLEVBQUksQ0FBQ3FHLE9BQU9yRyxLQUFNb3BELEdBQUd6aEQsRUFBRTNHLEVBQUcsSUFBS2hCLEdBQUlDLEVBQUV3dUIsRUFBSSxFQUFHeHVCLEVBQUVBLEVBQUlxdEIsR0FBR3J0QixFQUFFRyxFQUFHSCxFQUFFRyxFQUFFc3BCLEVBQUkxb0IsRUFBSSxNQUFPLEVBQUlmLEVBQUVpbkMsSUFBTWpuQyxFQUFFa3ZCLEVBQUksSUFBSWhGLEdBQUc5eUIsR0FBRTRJLEVBQUVzbEIsR0FBSXRsQixFQUFHQSxFQUFFQSxHQUFJQSxFQUFFaW5DLElBQUs3TixHQUFHcDVCLEVBQUVnMkIsRUFBR2gyQixFQUFFQSxFQUFHLG1CQUFvQkEsRUFBRTBtQixJQUFLM2xCLEVBQUlmLEVBQUVnakIsRUFBSThCLEdBQUc5a0IsRUFBRWdqQixHQUFLLEdBQUloakIsRUFBRXVELEdBQUt2RCxFQUFFK0MsSUFBTS9DLEVBQUUrQyxFQUFJLFFBQVNoQyxFQUFFLGdCQUFrQixvQ0FBcUNmLEVBQUVBLEVBQUVraUIsR0FBR2xpQixFQUFFMGlCLEVBQUcxaUIsRUFBRStDLEVBQUcvQyxFQUFFdUQsRUFBR3hDLEtBQU9mLEVBQUUrQyxFQUFJLE1BQU8vQyxFQUFFQSxFQUFFa2lCLEdBQUdsaUIsRUFBRTBpQixFQUFHMWlCLEVBQUUrQyxFQUFHLEtBQU1oQyxJQUFLNnZCLEdBQUUsR0E1RTNiLFNBQVk1d0IsRUFBR2UsRUFBRzJHLEVBQUczSCxFQUFHN0QsRUFBR2lHLEdBQUtuQyxFQUFFdU8sTUFBSyxXQUFjLEdBQUl2TyxFQUFFQSxFQUN2RCxHQUFJbUMsRUFFQSxJQURBLElBQUlxZ0IsRUFBSSxHQUNDemYsRUFBSVosRUFBRWtnQixNQUFNLEtBQU1LLEVBQUksRUFBR0EsRUFBSTNmLEVBQUVsUSxPQUFRNnZCLElBQUssQ0FDakQsSUFBSW5oQixFQUFJd0IsRUFBRTJmLEdBQUdMLE1BQU0sS0FDbkIsR0FBSSxFQUFJOWdCLEVBQUUxTyxPQUFRLENBQ2QsSUFBSW13QixFQUFJemhCLEVBQUUsR0FDVkEsRUFBSUEsRUFBRSxHQUNOLElBQUl3bUIsRUFBSS9FLEVBQUVYLE1BQU0sS0FDaEJHLEVBQUksR0FBS3VGLEVBQUVsMUIsUUFBVSxRQUFVazFCLEVBQUUsR0FBS3ZGLEdBQUtRLEVBQUksS0FBTXpoQixFQUFJLElBQU9paEIsR0FBS1EsRUFBSSxvQkFLakZSLEVBQUksVUFFUkEsRUFBSXJnQixFQUFHLE1BQU8sZ0JBQWtCcEMsRUFBSSxjQUFnQjdELEVBQUksTUFBUTZFLEVBQUksS0FBTzJHLEVBQUksS0FBTzhhLEtBNERxVzZILENBQUdycUIsRUFBRTBILEVBQUcxSCxFQUFFK0MsRUFBRy9DLEVBQUUwaUIsRUFBRzFpQixFQUFFbUMsRUFBR25DLEVBQUV3NkMsRUFBR3g2QyxFQUFFdUQsR0FtRDdkLFNBQVNpcUIsR0FBR3h0QixFQUFHZSxFQUFHMkcsR0FBSyxJQUFLLElBQUkzSCxHQUFJLEdBQUtDLEVBQUU0aUIsR0FBSzVpQixFQUFFd3VCLEVBQUk5bUIsRUFBRTdVLFFBQVMsQ0FDN0QsSUFBSXFKLEVBQUlveUIsR0FBR3R1QixFQUFHMEgsR0FDZCxHQUFJeEwsR0FBSzR2QixHQUFJLENBQ1QsR0FBSy9xQixJQUFNZixFQUFFd2lCLEVBQUksRUFBR3FSLEdBQUUsSUFBSzl6QixHQUFJLEdBQy9CbXZCLEdBQUVsdkIsRUFBRTBILEVBQUcxSCxFQUFFbUMsRUFBRyxLQUFNLHlCQUNsQixNQUVDLEdBQUlqRyxHQUFLeXZCLEdBQUksQ0FDZDNyQixFQUFFd2lCLEVBQUksRUFDTnFSLEdBQUUsSUFDRjNFLEdBQUVsdkIsRUFBRTBILEVBQUcxSCxFQUFFbUMsRUFBR3VGLEVBQUcsbUJBQ2YzSCxHQUFJLEVBQ0osTUFHQW12QixHQUFFbHZCLEVBQUUwSCxFQUFHMUgsRUFBRW1DLEVBQUdqRyxFQUFHLE1BQU9xeEIsR0FBR3Z0QixFQUFHOUQsR0FDbEMsR0FBSzZFLEdBQUssR0FBSzJHLEVBQUU3VSxTQUFXbU4sRUFBRXdpQixFQUFJLEVBQUdxUixHQUFFLElBQUs5ekIsR0FBSSxHQUFLQyxFQUFFZSxFQUFJZixFQUFFZSxHQUFLaEIsRUFBR0EsRUFBSSxFQUFJMkgsRUFBRTdVLFNBQVdtTixFQUFFd0gsSUFBTXhILEVBQUV3SCxHQUFJLEdBQUl6RyxFQUFJZixFQUFFRyxHQUFLSCxHQUFLQSxHQUFLZSxFQUFFMHpCLElBQU0xekIsRUFBRW11QixJQUFNbnVCLEVBQUUyRyxFQUFFNkcsS0FBSyx1REFBeUQ3RyxFQUFFN1UsUUFBUzQ2QixHQUFHMXNCLEdBQUlBLEVBQUVtdUIsR0FBSSxLQUFRQSxHQUFFbHZCLEVBQUUwSCxFQUFHMUgsRUFBRW1DLEVBQUd1RixFQUFHLDhCQUErQnUvQixHQUFFam5DLEdBQUlzc0IsR0FBR3RzQixJQUs1UyxTQUFTc3VCLEdBQUd0dUIsRUFBR2UsR0FBSyxJQUFJMkcsRUFBSTFILEVBQUV3dUIsRUFBR3p1QixFQUFJZ0IsRUFBRXlSLFFBQVEsS0FBTTlLLEdBQUksT0FBSyxHQUFLM0gsRUFDeEQrckIsSUFBSXBrQixFQUFJOEwsT0FBT3pTLEVBQUUwakIsVUFBVS9jLEVBQUczSCxJQUFTMDFCLE1BQU0vdEIsR0FDN0Npa0IsSUFBSTVyQixHQUFLLEdBQVcySCxFQUFJM0csRUFBRWxPLE9BQzFCaTVCLElBQUkvcUIsRUFBSUEsRUFBRXNWLE9BQU90VyxFQUFHMkgsR0FBSTFILEVBQUV3dUIsRUFBSXp1QixFQUFJMkgsRUFBVTNHLElBRXZELFNBQVNxN0IsR0FBRXA4QixHQUFLQSxFQUFFNnlDLEVBQUk1dUIsS0FBTWprQixFQUFFNEIsRUFBRzZzQixHQUFHenVCLEVBQUdBLEVBQUU0QixHQUN6QyxTQUFTNnNCLEdBQUd6dUIsRUFBR2UsR0FBSyxHQUFJLE1BQVFmLEVBQUUzTCxFQUM5QixNQUFNb0osTUFBTSwyQkFBNEJ1QyxFQUFFM0wsRUFBSSsvQixHQUFFaDlCLEdBQUU0SSxFQUFFNnlCLEdBQUk3eUIsR0FBSWUsR0FDaEUsU0FBU29zQixHQUFHbnRCLEdBQUtBLEVBQUUzTCxJQUFNaVAsR0FBRThhLGFBQWFwZSxFQUFFM0wsR0FBSTJMLEVBQUUzTCxFQUFJLE1BRXBELFNBQVNpNEIsR0FBR3RzQixHQUFLLEdBQUtBLEVBQUVHLEVBQUV3QyxHQUFLM0MsRUFBRTRpQixHQUFLMkosR0FBR3ZzQixFQUFFRyxFQUFHSCxHQUM5QyxTQUFTaW5DLEdBQUVqbkMsR0FBS210QixHQUFHbnRCLEdBQUksSUFBSWUsRUFBSWYsRUFBRWt2QixFQUFHbnVCLEdBQUssbUJBQXFCQSxFQUFFcWlCLElBQU1yaUIsRUFBRXFpQixLQUFNcGpCLEVBQUVrdkIsRUFBSSxLQUFNbkYsR0FBRy9wQixFQUFFNnJDLEdBQUl2YyxHQUFHdHZCLEVBQUVnMkIsR0FBSWgyQixFQUFFQSxJQUFNZSxFQUFJZixFQUFFQSxFQUFHQSxFQUFFQSxFQUFJLEtBQU1lLEVBQUV5ZCxRQUFTemQsRUFBRXFpQixNQUN0SixTQUFTbUssR0FBR3Z0QixFQUFHZSxHQUNYLElBQ0ksSUFBSTJHLEVBQUkxSCxFQUFFRyxFQUNWLEdBQUksR0FBS3VILEVBQUUvRSxJQUFNK0UsRUFBRTFILEdBQUtBLEdBQUswdUIsR0FBR2huQixFQUFFM0csRUFBR2YsSUFDakMsR0FBSTBILEVBQUUwc0IsRUFBSXAwQixFQUFFcThCLEdBQUlyOEIsRUFBRXlwQixHQUFLaUYsR0FBR2huQixFQUFFM0csRUFBR2YsSUFBTSxHQUFLMEgsRUFBRS9FLEVBQUcsQ0FDM0MsSUFDSSxJQUFJNUMsRUFBSTJILEVBQUUyYixHQUFHcmpCLEVBQUVrN0IsTUFBTW42QixHQUV6QixNQUFPc3RCLEdBQ0h0dUIsRUFBSSxLQUVSLEdBQUk1TSxNQUFNRSxRQUFRME0sSUFBTSxHQUFLQSxFQUFFbE4sT0FBUSxDQUNuQyxJQUFJcUosRUFBSTZELEVBQ1IsR0FBSSxHQUFLN0QsRUFBRSxJQUNQOEQsRUFDSSxJQUFLMEgsRUFBRW5FLEVBQUcsQ0FDTixHQUFJbUUsRUFBRTFILEVBQ0YsTUFBSTBILEVBQUUxSCxFQUFFeWlCLEVBQUksSUFBTXppQixFQUFFeWlCLEdBR2hCLE1BQU16aUIsRUFGTjJ1QixHQUFHam5CLEdBQUlrbkIsR0FBR2xuQixHQUdsQm1uQixHQUFHbm5CLEdBQ0htc0IsR0FBRSxVQUlWbnNCLEVBQUVnYyxHQUFLeG5CLEVBQUUsR0FBSSxFQUFJd0wsRUFBRWdjLEdBQUtoYyxFQUFFOUYsR0FBSyxNQUFRMUYsRUFBRSxJQUFNd0wsRUFBRW1zQixHQUFLLEdBQUtuc0IsRUFBRXJULElBQU1xVCxFQUFFM0UsSUFBTTJFLEVBQUUzRSxFQUFJcXhCLEdBQUVoOUIsR0FBRXNRLEVBQUU4ZSxHQUFJOWUsR0FBSSxNQUNuRyxHQUFJLEdBQUtvbkIsR0FBR3BuQixFQUFFM0csSUFBTTJHLEVBQUV5YSxHQUFJLENBQ3RCLElBQ0l6YSxFQUFFeWEsS0FFTixNQUFPa00sSUFDUDNtQixFQUFFeWEsUUFBSyxRQUlYdmdCLEdBQUU4RixFQUFHLFNBRVIsSUFBSzFILEVBQUV5cEIsR0FBSy9oQixFQUFFMUgsR0FBS0EsSUFBTTJ1QixHQUFHam5CLElBQUtxYyxHQUFHaGpCLEdBQ3JDLElBQUtBLEVBQUloQixFQUFJMkgsRUFBRTJiLEdBQUdyakIsRUFBRWs3QixNQUFNbjZCLEdBQUloQixFQUFJLEVBQUdBLEVBQUlnQixFQUFFbE8sT0FBUWtOLElBQy9DLEdBQUk3RCxFQUNBNkUsRUFBRWhCLEdBQUkySCxFQUFFOUYsRUFBSTFGLEVBQUUsR0FBSUEsRUFBSUEsRUFBRSxHQUFJLEdBQUt3TCxFQUFFL0UsRUFDbkMsR0FBSSxLQUFPekcsRUFBRSxHQUFJLENBQ2J3TCxFQUFFc3VCLEVBQUk5NUIsRUFBRSxHQUNSd0wsRUFBRXlnRCxHQUFLanNELEVBQUUsR0FDVCxJQUFJaUcsRUFBSWpHLEVBQUUsR0FDVixNQUFRaUcsSUFBTXVGLEVBQUV3YixHQUFLL2dCLEVBQUd1RixFQUFFQSxFQUFFNkcsS0FBSyxPQUFTN0csRUFBRXdiLEtBQzVDLElBQUlWLEVBQUl0bUIsRUFBRSxHQUNWLE1BQVFzbUIsSUFBTTlhLEVBQUVpYyxHQUFLbkIsRUFBRzlhLEVBQUVBLEVBQUU2RyxLQUFLLFFBQVU3RyxFQUFFaWMsS0FDN0MsSUFBSTVnQixFQUFJN0csRUFBRSxHQUNWLEdBQUksTUFBUTZHLEdBQUssaUJBQW9CQSxHQUFLLEVBQUlBLEVBQUcsQ0FDN0MsSUFBSTJmLEVBQUksSUFBTTNmLEVBQ2QyRSxFQUFFOG1CLEVBQUk5TCxFQUNOaGIsRUFBRUEsRUFBRTZHLEtBQUssZ0NBQWtDbVUsR0FFL0NBLEVBQUloYixFQUNKLElBQUluRyxFQUFJdkIsRUFBRUEsRUFDVixHQUFJdUIsRUFBRyxDQUNILElBQUl5aEIsRUFBSXpoQixFQUFFdkIsRUFBSXVCLEVBQUV2QixFQUFFd3FDLGtCQUFrQiwwQkFBNEIsS0FDaEUsR0FBSXhuQixFQUFHLENBQ0gsSUFBSStFLEVBQUlyRixFQUFFM2hCLEdBQ1RnbkIsRUFBRS9uQixJQUFNMkMsR0FBRXFnQixFQUFHLFNBQVdyZ0IsR0FBRXFnQixFQUFHLFNBQVdyZ0IsR0FBRXFnQixFQUFHLFNBQVcrRSxFQUFFNWxCLEVBQUk0bEIsRUFBRTVuQixFQUFHNG5CLEVBQUUvbkIsRUFBSSxJQUFJaWIsSUFBSzhNLEVBQUVobkIsSUFBTWd1QixHQUFHaEgsRUFBR0EsRUFBRWhuQixHQUFJZ25CLEVBQUVobkIsRUFBSSxPQUVqSCxHQUFJMmhCLEVBQUVFLEVBQUcsQ0FDTCxJQUFJMkYsRUFBS2huQixFQUFFdkIsRUFBSXVCLEVBQUV2QixFQUFFd3FDLGtCQUFrQixxQkFDakMsS0FDSmppQixJQUFPN0YsRUFBRWUsR0FBSzhFLEVBQUkxRixHQUFFSCxFQUFFTSxFQUFHTixFQUFFRSxFQUFHMkYsS0FHdEM3Z0IsRUFBRS9FLEVBQUksRUFDTitFLEVBQUV2RixHQUFLdUYsRUFBRXZGLEVBQUU0aEIsS0FDWHJjLEVBQUUrc0IsSUFBTS9zQixFQUFFMjBCLEVBQUlwWSxLQUFNamtCLEVBQUV5aUIsRUFBRy9hLEVBQUVBLEVBQUU2RyxLQUFLLGtCQUFvQjdHLEVBQUUyMEIsRUFBSSxPQUU1RCxJQUFJbFksRUFBS25rQixFQUVULElBSEEwaUIsRUFBSWhiLEdBRUY2YixHQUFLeUwsR0FBR3RNLEVBQUdBLEVBQUUrRyxFQUFJL0csRUFBRXlsQyxHQUFLLEtBQU16bEMsRUFBRU4sSUFDOUIrQixFQUFHc0YsRUFBRyxDQUNOMEYsR0FBR3pNLEVBQUUzaEIsRUFBR29qQixHQUNSLElBQUlFLEVBQUtGLEVBQUlvSyxFQUFLN0wsRUFBRThMLEVBQ3BCRCxHQUFNbEssRUFBRzFPLFdBQVc0WSxHQUNwQmxLLEVBQUdod0IsSUFBTTg0QixHQUFHOUksR0FBSytYLEdBQUUvWCxJQUNuQjNCLEVBQUUxaUIsRUFBSW1rQixPQUdOaUwsR0FBRzFNLEdBQ1AsRUFBSWhiLEVBQUV2SCxFQUFFdE4sUUFBVWc3QyxHQUFHbm1DLE9BR3JCLFFBQVV4TCxFQUFFLElBQU0sU0FBV0EsRUFBRSxJQUFNMEYsR0FBRThGLEVBQUcsUUFFOUMsR0FBS0EsRUFBRS9FLElBQU0sUUFBVXpHLEVBQUUsSUFBTSxTQUFXQSxFQUFFLEdBQUssUUFBVUEsRUFBRSxHQUFLMEYsR0FBRThGLEVBQUcsR0FBSzJuQixHQUFHM25CLEdBQUssUUFBVXhMLEVBQUUsSUFBTXdMLEVBQUV2RixHQUFLdUYsRUFBRXZGLEVBQUUyaEIsR0FBRzVuQixHQUFJd0wsRUFBRXJULEVBQUksR0FDOUl1OEIsR0FBRSxHQUVOLE1BQU92QyxLQVVYLFNBQVNxQixHQUFHMXZCLEVBQUdlLEdBQUssR0FBSWYsRUFBRW5JLFNBQVcsbUJBQXFCbUksRUFBRW5JLFFBQ3hEbUksRUFBRW5JLFFBQVFrSixPQUFHLFFBQ1osR0FBSWtoQixHQUFHamlCLElBQU0saUJBQW9CQSxFQUNsQzBqQixHQUFHMWpCLEVBQUdlLE9BQUcsT0FDUixDQUNELEdBQUlmLEVBQUVzNkIsR0FBSyxtQkFBcUJ0NkIsRUFBRXM2QixFQUM5QixJQUFJNXlCLEVBQUkxSCxFQUFFczZCLFNBQ1QsR0FBSXQ2QixFQUFFMDNCLEdBQUssbUJBQXFCMTNCLEVBQUUwM0IsRUFDbkNod0IsT0FBSSxPQUNILEdBQUl1YSxHQUFHamlCLElBQU0saUJBQW9CQSxFQUFHLENBQ3JDMEgsRUFBSSxHQUNKLElBQUssSUFBSTNILEVBQUlDLEVBQUVuTixPQUFRcUosRUFBSSxFQUFHQSxFQUFJNkQsRUFBRzdELElBQ2pDd0wsRUFBRS9WLEtBQUt1SyxRQUdYLElBQUtBLEtBQUt3TCxFQUFJLEdBQUkzSCxFQUFJLEVBQUdDLEVBQ3JCMEgsRUFBRTNILEtBQU83RCxFQUVqQkEsR0FEQTZELEVBekJKLFNBQVlDLEdBQUssR0FBSUEsRUFBRTAzQixHQUFLLG1CQUFxQjEzQixFQUFFMDNCLEVBQy9DLE9BQU8xM0IsRUFBRTAzQixJQUFLLEdBQUksaUJBQW9CMTNCLEVBQ3RDLE9BQU9BLEVBQUVxaUIsTUFBTSxJQUFLLEdBQUlKLEdBQUdqaUIsR0FBSSxDQUMvQixJQUFLLElBQUllLEVBQUksR0FBSTJHLEVBQUkxSCxFQUFFbk4sT0FBUWtOLEVBQUksRUFBR0EsRUFBSTJILEVBQUczSCxJQUN6Q2dCLEVBQUVwUCxLQUFLcU8sRUFBRUQsSUFDYixPQUFPZ0IsRUFDTSxJQUFLaEIsS0FBcEJnQixFQUFJLEdBQUkyRyxFQUFJLEVBQWExSCxFQUN2QmUsRUFBRTJHLEtBQU8xSCxFQUFFRCxHQUFJLE9BQVdnQixFQWtCdEI2dUIsQ0FBRzV2QixJQUNEbk4sT0FDTixJQUFLLElBQUlzUCxFQUFJLEVBQUdBLEVBQUlqRyxFQUFHaUcsSUFDbkJwQixFQUFFdE0sVUFBSyxFQUFRc0wsRUFBRW9DLEdBQUl1RixHQUFLQSxFQUFFdkYsR0FBSW5DLElBRXhDLFNBQVM2ckMsR0FBRTdyQyxFQUFHZSxHQUFLN08sS0FBSzZPLEVBQUksR0FBSTdPLEtBQUs4TixFQUFJLEdBQUk5TixLQUFLd1YsRUFBSSxFQUFHLElBQUlBLEVBQUlyUCxVQUFVeEYsT0FBUSxHQUFJLEVBQUk2VSxFQUFHLENBQzFGLEdBQUlBLEVBQUksRUFDSixNQUFNakssTUFBTSw4QkFDaEIsSUFBSyxJQUFJc0MsRUFBSSxFQUFHQSxFQUFJMkgsRUFBRzNILEdBQUssRUFDeEI3TixLQUFLK0YsSUFBSUksVUFBVTBILEdBQUkxSCxVQUFVMEgsRUFBSSxTQUV4QyxHQUFJQyxFQUNMLEdBQUlBLGFBQWE2ckMsR0FDYixJQUFLbmtDLEVBQUkxSCxFQUFFczZCLElBQUt2NkIsRUFBSSxFQUFHQSxFQUFJMkgsRUFBRTdVLE9BQVFrTixJQUNqQzdOLEtBQUsrRixJQUFJeVAsRUFBRTNILEdBQUlDLEVBQUVoSSxJQUFJMFAsRUFBRTNILFVBRTNCLElBQUtBLEtBQUtDLEVBQ045TixLQUFLK0YsSUFBSThILEVBQUdDLEVBQUVELElBSzFCLFNBQVN3dkIsR0FBR3Z2QixHQUFLLEdBQUlBLEVBQUUwSCxHQUFLMUgsRUFBRUEsRUFBRW5OLE9BQVEsQ0FDcEMsSUFBSyxJQUFJa08sRUFBSSxFQUFHMkcsRUFBSSxFQUFHM0csRUFBSWYsRUFBRUEsRUFBRW5OLFFBQVMsQ0FDcEMsSUFBSWtOLEVBQUlDLEVBQUVBLEVBQUVlLEdBQ1pxZ0MsR0FBRXBoQyxFQUFFZSxFQUFHaEIsS0FBT0MsRUFBRUEsRUFBRTBILEtBQU8zSCxHQUN6QmdCLElBRUpmLEVBQUVBLEVBQUVuTixPQUFTNlUsRUFDZixHQUFJMUgsRUFBRTBILEdBQUsxSCxFQUFFQSxFQUFFbk4sT0FBUSxDQUNyQixJQUFJcUosRUFBSSxHQUNSLElBQUt3TCxFQUFJM0csRUFBSSxFQUFHQSxFQUFJZixFQUFFQSxFQUFFbk4sUUFDUnV1QyxHQUFFbGxDLEVBQWQ2RCxFQUFJQyxFQUFFQSxFQUFFZSxNQUFnQmYsRUFBRUEsRUFBRTBILEtBQU8zSCxFQUFHN0QsRUFBRTZELEdBQUssR0FBSWdCLElBQ3JEZixFQUFFQSxFQUFFbk4sT0FBUzZVLEdBUWpCLFNBQVMwNUIsR0FBRXBoQyxFQUFHZSxHQUFLLE9BQU90TixPQUFPZSxVQUFVOEwsZUFBZTdMLEtBQUt1TCxFQUFHZSxJQXZQbEVaLEdBQUl1M0IsR0FBRWxqQyxXQUNKbWhCLFdBQWEsU0FBVTNWLEdBQUs5TixLQUFLMFAsRUFBSTVCLEdBR3ZDRyxHQUFFdW1CLEdBQUssU0FBVTFtQixHQUFLQSxFQUFJQSxFQUFFdEUsT0FBUSxJQUFJcUYsRUFBSTdPLEtBQUtnOUIsRUFBR251QixHQUFLLEdBQUtzN0IsR0FBRXI4QixHQUFLZSxFQUFFb0IsSUFBTWpRLEtBQUtvekIsR0FBR3RsQixJQUNyRkcsR0FBRW1sQixHQUFLLFNBQVV0bEIsR0FDYixJQUNJLEdBQUlBLEdBQUs5TixLQUFLOE4sRUFDVkEsRUFBRyxDQUNDLElBQUllLEVBQUlzN0IsR0FBRW5xQyxLQUFLOE4sR0FBSTBILEVBQUl4VixLQUFLOE4sRUFBRWtrQixLQUFNbmtCLEVBQUk3TixLQUFLOE4sRUFBRStsRCxJQUMvQyxLQUFNLEVBQUlobEQsR0FBSyxHQUFLQSxJQUFNa2xCLEtBQU8vekIsS0FBSzhOLEVBQUU4bEQsS0FBTSxDQUMxQzV6RCxLQUFLMHdCLEdBQUssR0FBSzdoQixHQUFLLEdBQUsyRyxHQUF5QmtwQixHQUFuQixHQUFLbHBCLEdBQUssR0FBSzNILEVBQU0sRUFBTyxHQUMzRG90QixHQUFHajdCLE1BQ0gsSUFBSWdLLEVBQUloSyxLQUFLOE4sRUFBRStsRCxJQUNmN3pELEtBQUttcUMsRUFBSW5nQyxFQUNULElBQUlpRyxFQUFJalEsS0FBSzhOLEVBQUU4bEQsSUFHZixHQUZBNXpELEtBQUs2TyxFQUFJLEtBQU83RSxFQXhFcEMsU0FBWThELEVBQUdlLEVBQUcyRyxFQUFHM0gsRUFBRzdELEVBQUdpRyxFQUFHcWdCLEdBQUt4aUIsRUFBRXVPLE1BQUssV0FBYyxNQUFPLGlCQUFtQnhPLEVBQUksZUFBaUI3RCxFQUFJLE1BQVE2RSxFQUFJLEtBQU8yRyxFQUFJLEtBQU92RixFQUFJLElBQU1xZ0IsS0F5RS9IK0gsQ0FBR3I0QixLQUFLd1YsRUFBR3hWLEtBQUs2USxFQUFHN1EsS0FBS3d3QixFQUFHeHdCLEtBQUtpUSxFQUFHalEsS0FBS3NvRCxFQUFHejVDLEVBQUc3RSxHQUMxQ2hLLEtBQUs2TyxFQUFHLENBQ1IsR0FBSTdPLEtBQUt1aUMsSUFBTXZpQyxLQUFLdTNCLEVBQUcsQ0FDbkIxb0IsRUFBRyxDQUNDLEdBQUk3TyxLQUFLOE4sRUFBRyxDQUNSLElBQUl3aUIsRUFBR3pmLEVBQUk3USxLQUFLOE4sRUFDaEIsSUFBS3dpQixFQUFJemYsRUFBRS9DLEVBQUkrQyxFQUFFL0MsRUFBRXdxQyxrQkFBa0IsMkJBQTZCLFFBQVV6bUIsR0FBR3ZCLEdBQUksQ0FDL0UsSUFBSUUsRUFBSUYsRUFDUixNQUFNemhCLEdBR2QyaEIsRUFBSSxLQUVSLElBQUlBLEVBR0MsQ0FDRHh3QixLQUFLNk8sR0FBSSxFQUNUN08sS0FBS3N3QixFQUFJLEVBQ1RxUixHQUFFLElBQ0ZvVCxHQUFFLzBDLE1BQ0ZvNkIsR0FBR3A2QixNQUNILE1BQU04TixFQVJOa3ZCLEdBQUVoOUIsS0FBS3dWLEVBQUd4VixLQUFLaVEsRUFBR3VnQixFQUFHLDBEQUNqQnh3QixLQUFLdTNCLEdBQUksRUFBSThELEdBQUdyN0IsS0FBTXd3QixHQVVsQ3h3QixLQUFLa2lDLEdBQUs1RyxHQUFHdDdCLEtBQU02TyxFQUFHb0IsR0FBSThqQixJQUFNL3pCLEtBQUs2TyxHQUFLLEdBQUtBLElBQU1xNEIsR0FBR2xuQyxLQUFLOGpDLEVBQUc5akMsS0FBSzI1QyxFQUFHLE9BQVEzNUMsS0FBS2d6QixJQUFLaHpCLEtBQUsyNUMsRUFBRWtQLFdBQWE3ckIsR0FBRWg5QixLQUFLd1YsRUFBR3hWLEtBQUtpUSxFQUFHQSxFQUFHLE1BQU9vckIsR0FBR3I3QixLQUFNaVEsSUFDbkosR0FBS3BCLEdBQUtrbUMsR0FBRS8wQyxNQUNaQSxLQUFLNk8sSUFBTTdPLEtBQUswd0IsSUFBTSxHQUFLN2hCLEVBQUl3ckIsR0FBR3I2QixLQUFLaU8sRUFBR2pPLE9BQVNBLEtBQUs2TyxHQUFJLEVBQUlxN0IsR0FBRWxxQyxhQUdsRSxLQUFPZ0ssR0FBSyxFQUFJaUcsRUFBRXFRLFFBQVEsZ0JBQWtCdGdCLEtBQUtzd0IsRUFBSSxFQUFHcVIsR0FBRSxNQUFRM2hDLEtBQUtzd0IsRUFBSSxFQUFHcVIsR0FBRSxLQUFNb1QsR0FBRS8wQyxNQUFPbzZCLEdBQUdwNkIsUUFJdEgsTUFBT3FQLE1Bb0JYcEIsR0FBRStrQixHQUFLLFdBQWMsR0FBSWh6QixLQUFLOE4sRUFBRyxDQUM3QixJQUFJQSxFQUFJcThCLEdBQUVucUMsS0FBSzhOLEdBQUllLEVBQUk3TyxLQUFLOE4sRUFBRThsRCxJQUM5QjV6RCxLQUFLczhCLEVBQUl6dEIsRUFBRWxPLFNBQVdzNkIsR0FBR2o3QixNQUFPczdCLEdBQUd0N0IsS0FBTThOLEVBQUdlLEdBQUk3TyxLQUFLNk8sR0FBSyxHQUFLZixHQUFLbzhCLEdBQUVscUMsU0FNMUVpTyxHQUFFZ3dCLE9BQVMsV0FBY2orQixLQUFLMHdCLEdBQUksRUFBSXFrQixHQUFFLzBDLE9BS3hDaU8sR0FBRTB5QixHQUFLLFdBQWMzZ0MsS0FBS21DLEVBQUksS0FBTSxJQUFJMkwsRUFBSWlrQixLQUFLLEdBQUtqa0IsRUFBSTlOLEtBQUsyZ0QsR0ExSS9ELFNBQVk3eUMsRUFBR2UsR0FBS2YsRUFBRXVPLE1BQUssV0FBYyxNQUFPLFlBQWN4TixLQTBJTTBxQixDQUFHdjVCLEtBQUt3VixFQUFHeFYsS0FBS3d3QixHQUFJLEdBQUt4d0IsS0FBSzJoQyxJQUFNakQsR0FBRSxHQUFJaUQsR0FBRSxLQUFNb1QsR0FBRS8wQyxNQUFPQSxLQUFLc3dCLEVBQUksRUFBRzhKLEdBQUdwNkIsT0FBU3U4QixHQUFHdjhCLEtBQU1BLEtBQUsyZ0QsRUFBSTd5QyxLQTRJektHLEdBQUkwckMsR0FBRXIzQyxXQUNKa2pDLEVBQUksV0FBY25JLEdBQUdyOUIsTUFBTyxJQUFLLElBQUk4TixFQUFJLEdBQUllLEVBQUksRUFBR0EsRUFBSTdPLEtBQUs4TixFQUFFbk4sT0FBUWtPLElBQ3JFZixFQUFFck8sS0FBS08sS0FBSzZPLEVBQUU3TyxLQUFLOE4sRUFBRWUsS0FBTSxPQUFPZixHQUN0Q0csR0FBRW02QixFQUFJLFdBQXdCLE9BQVYvSyxHQUFHcjlCLE1BQWNBLEtBQUs4TixFQUFFMU4sVUFjNUM2TixHQUFFbkksSUFBTSxTQUFVZ0ksRUFBR2UsR0FBSyxPQUFPcWdDLEdBQUVsdkMsS0FBSzZPLEVBQUdmLEdBQUs5TixLQUFLNk8sRUFBRWYsR0FBS2UsR0FDNURaLEdBQUVsSSxJQUFNLFNBQVUrSCxFQUFHZSxHQUFLcWdDLEdBQUVsdkMsS0FBSzZPLEVBQUdmLEtBQU85TixLQUFLd1YsSUFBS3hWLEtBQUs4TixFQUFFck8sS0FBS3FPLElBQUs5TixLQUFLNk8sRUFBRWYsR0FBS2UsR0FDbEZaLEdBQUV0SSxRQUFVLFNBQVVtSSxFQUFHZSxHQUFLLElBQUssSUFBSTJHLEVBQUl4VixLQUFLb29DLElBQUt2NkIsRUFBSSxFQUFHQSxFQUFJMkgsRUFBRTdVLE9BQVFrTixJQUFLLENBQzNFLElBQUk3RCxFQUFJd0wsRUFBRTNILEdBQUlvQyxFQUFJalEsS0FBSzhGLElBQUlrRSxHQUMzQjhELEVBQUV2TCxLQUFLc00sRUFBR29CLEVBQUdqRyxFQUFHaEssUUFHcEIsSUFBSXM5QixHQUFLLDZIQWNULFNBQVNnckIsR0FBRXg2QyxFQUFHZSxHQUFzRixHQUFqRjdPLEtBQUt3VixFQUFJeFYsS0FBS3FSLEVBQUlyUixLQUFLaVEsRUFBSSxHQUFJalEsS0FBS3N3QixFQUFJLEtBQU10d0IsS0FBS00sRUFBSU4sS0FBS2lPLEVBQUksR0FBSWpPLEtBQUs4TixHQUFJLEVBQVFBLGFBQWF3NkMsR0FBRyxDQUNwSHRvRCxLQUFLOE4sT0FBSSxJQUFXZSxFQUFJQSxFQUFJZixFQUFFQSxFQUM5QjJ2QixHQUFHejlCLEtBQU04TixFQUFFbUMsR0FDWGpRLEtBQUtxUixFQUFJdkQsRUFBRXVELEVBQ1h5c0IsR0FBRzk5QixLQUFNOE4sRUFBRTBILEdBQ1h1b0IsR0FBRy85QixLQUFNOE4sRUFBRXdpQixHQUNYdHdCLEtBQUtpTyxFQUFJSCxFQUFFRyxFQUNYWSxFQUFJZixFQUFFZSxFQUNOLElBQUkyRyxFQUFJLElBQUltckMsR0FDWm5yQyxFQUFFQSxFQUFJM0csRUFBRTJHLEVBQ1IzRyxFQUFFZixJQUFNMEgsRUFBRTFILEVBQUksSUFBSTZyQyxHQUFFOXFDLEVBQUVmLEdBQUkwSCxFQUFFM0csRUFBSUEsRUFBRUEsR0FDbENtdkIsR0FBR2grQixLQUFNd1YsR0FDVHhWLEtBQUtNLEVBQUl3TixFQUFFeE4sT0FHWHdOLElBQU0wSCxFQUFJdEIsT0FBT3BHLEdBQUc4USxNQUFNMGUsTUFBUXQ5QixLQUFLOE4sSUFBTWUsRUFBRzR1QixHQUFHejlCLEtBQU13VixFQUFFLElBQU0sSUFBSSxHQUFLeFYsS0FBS3FSLEVBQUl3c0IsR0FBR3JvQixFQUFFLElBQU0sSUFBS3NvQixHQUFHOTlCLEtBQU13VixFQUFFLElBQU0sSUFBSSxHQUFLdW9CLEdBQUcvOUIsS0FBTXdWLEVBQUUsSUFBS3hWLEtBQUtpTyxFQUFJNHZCLEdBQUdyb0IsRUFBRSxJQUFNLElBQUksR0FBS3dvQixHQUFHaCtCLEtBQU13VixFQUFFLElBQU0sSUFBSSxHQUFLeFYsS0FBS00sRUFBSXU5QixHQUFHcm9CLEVBQUUsSUFBTSxNQUFReFYsS0FBSzhOLElBQU1lLEVBQUc3TyxLQUFLNk8sRUFBSSxJQUFJOHhDLEdBQUUsS0FBTTNnRCxLQUFLOE4sSUFJNVEsU0FBU3M2QixHQUFFdDZCLEdBQUssT0FBTyxJQUFJdzZDLEdBQUV4NkMsR0FDN0IsU0FBUzJ2QixHQUFHM3ZCLEVBQUdlLEVBQUcyRyxHQUFLMUgsRUFBRW1DLEVBQUl1RixFQUFJcW9CLEdBQUdodkIsR0FBRyxHQUFNQSxFQUFHZixFQUFFbUMsSUFBTW5DLEVBQUVtQyxFQUFJbkMsRUFBRW1DLEVBQUU5TCxRQUFRLEtBQU0sS0FDaEYsU0FBUzI1QixHQUFHaHdCLEVBQUdlLEVBQUcyRyxHQUFLMUgsRUFBRTBILEVBQUlBLEVBQUlxb0IsR0FBR2h2QixHQUFHLEdBQU1BLEVBQzdDLFNBQVNrdkIsR0FBR2p3QixFQUFHZSxHQUFLLEdBQUlBLEVBQUcsQ0FFdkIsR0FEQUEsRUFBSXlTLE9BQU96UyxHQUNQMDBCLE1BQU0xMEIsSUFBTSxFQUFJQSxFQUNoQixNQUFNdEQsTUFBTSxtQkFBcUJzRCxHQUNyQ2YsRUFBRXdpQixFQUFJemhCLE9BR05mLEVBQUV3aUIsRUFBSSxLQUNWLFNBQVMwTixHQUFHbHdCLEVBQUdlLEVBQUcyRyxHQUFLM0csYUFBYTh4QyxJQUFLN3lDLEVBQUVlLEVBQUlBLEVBMEMvQyxTQUFZZixFQUFHZSxHQUFLQSxJQUFNZixFQUFFbUMsSUFBTXN5QixHQUFFejBCLEdBQUlBLEVBQUUwSCxFQUFJLEtBQU0xSCxFQUFFQSxFQUFFbkksU0FBUSxTQUFVNlAsRUFBRzNILEdBQUssSUFBSTdELEVBQUk2RCxFQUFFMFIsY0FBZTFSLEdBQUs3RCxJQUFNdTJCLEdBQUd2Z0MsS0FBTTZOLEdBQUlvcEQsR0FBR2ozRCxLQUFNZ0ssRUFBR3dMLE1BQVExSCxJQUFLQSxFQUFFbUMsRUFBSXBCLEVBMUNoSDh1QixDQUFHN3ZCLEVBQUVlLEVBQUdmLEVBQUVBLEtBQU8wSCxJQUFNM0csRUFBSXF2QixHQUFHcnZCLEVBQUcrdUIsS0FBTTl2QixFQUFFZSxFQUFJLElBQUk4eEMsR0FBRTl4QyxFQUFHZixFQUFFQSxJQUMxRyxTQUFTNmlCLEdBQUU3aUIsRUFBR2UsRUFBRzJHLEdBQUsxSCxFQUFFZSxFQUFFOUksSUFBSThJLEVBQUcyRyxHQUNqQyxTQUFTdWtCLEdBQUdqc0IsR0FBNEksT0FBdkk2aUIsR0FBRTdpQixFQUFHLEtBQU11SixLQUFLMnVCLE1BQU0sV0FBYTN1QixLQUFLSSxVQUFVMVgsU0FBUyxJQUFNc1gsS0FBSzBuRCxJQUFJMW5ELEtBQUsydUIsTUFBTSxXQUFhM3VCLEtBQUtJLFVBQVlzYSxNQUFLaHlCLFNBQVMsS0FBYStOLEVBRy9KLFNBQVMrdkIsR0FBRy92QixFQUFHZSxHQUFLLE9BQU9mLEVBQUllLEVBQUlxMUIsVUFBVXAyQixFQUFFM0osUUFBUSxPQUFRLFVBQVlnZ0MsbUJBQW1CcjJCLEdBQUssR0FDbkcsU0FBU293QixHQUFHcHdCLEVBQUdlLEVBQUcyRyxHQUFLLE1BQU8saUJBQW9CMUgsR0FBS0EsRUFBSXMyQixVQUFVdDJCLEdBQUczSixRQUFRMEssRUFBR214QixJQUFLeHFCLElBQU0xSCxFQUFJQSxFQUFFM0osUUFBUSx1QkFBd0IsUUFBUzJKLEdBQUssS0FDbEosU0FBU2t5QixHQUFHbHlCLEdBQTBCLE1BQU8sTUFBNUJBLEVBQUlBLEVBQUV5SCxXQUFXLEtBQXVCLEVBQUksSUFBSXhWLFNBQVMsS0FBVyxHQUFKK04sR0FBUS9OLFNBQVMsSUFyQmxHdW9ELEdBQUVobUQsVUFBVXZDLFNBQVcsV0FBYyxJQUFJK04sRUFBSSxHQUFJZSxFQUFJN08sS0FBS2lRLEVBQUdwQixHQUFLZixFQUFFck8sS0FBS3krQixHQUFHcnZCLEVBQUdzdkIsSUFBSSxHQUFLLEtBQU0sSUFBSTNvQixFQUFJeFYsS0FBS3dWLEVBRTBFLE9BRm5FQSxHQUFLLFFBQVUzRyxLQUM3SGYsRUFBRXJPLEtBQUssT0FBUW9QLEVBQUk3TyxLQUFLcVIsSUFBTXZELEVBQUVyTyxLQUFLeStCLEdBQUdydkIsRUFBR3N2QixJQUFJLEdBQUssS0FBTXJ3QixFQUFFck8sS0FBSzJELG1CQUFtQjhRLE9BQU9zQixJQUFJclIsUUFBUSx1QkFBd0IsUUFBcUIsT0FBWnFSLEVBQUl4VixLQUFLc3dCLElBQWdCeGlCLEVBQUVyTyxLQUFLLElBQUt5VSxPQUFPc0IsTUFBU0EsRUFBSXhWLEtBQUtpTyxLQUN0TWpPLEtBQUt3VixHQUFLLEtBQU9BLEVBQUUrdUIsT0FBTyxJQUFNejJCLEVBQUVyTyxLQUFLLEtBQU1xTyxFQUFFck8sS0FBS3krQixHQUFHMW9CLEVBQUcsS0FBT0EsRUFBRSt1QixPQUFPLEdBQUtuRyxHQUFLQyxJQUFJLE1BQU83b0IsRUFBSXhWLEtBQUs2TyxFQUFFOU8sYUFBZStOLEVBQUVyTyxLQUFLLElBQUsrVixJQUFLQSxFQUFJeFYsS0FBS00sSUFBTXdOLEVBQUVyTyxLQUFLLElBQUt5K0IsR0FBRzFvQixFQUFHOG9CLEtBQWF4d0IsRUFBRXpOLEtBQUssS0FvQm5NLElBQUk4OUIsR0FBSyxZQUFhRSxHQUFLLFVBQVdELEdBQUssU0FBVVIsR0FBSyxVQUFXVSxHQUFLLEtBQzFFLFNBQVNxaUIsR0FBRTd5QyxFQUFHZSxHQUFLN08sS0FBSzZPLEVBQUk3TyxLQUFLOE4sRUFBSSxLQUFNOU4sS0FBS3dWLEVBQUkxSCxHQUFLLEtBQU05TixLQUFLaVEsSUFBTXBCLEVBQzFFLFNBQVMwekIsR0FBRXowQixHQUFLQSxFQUFFQSxJQUFNQSxFQUFFQSxFQUFJLElBQUk2ckMsR0FBRzdyQyxFQUFFZSxFQUFJLEVBQUdmLEVBQUUwSCxHQXJEaEQsU0FBWTFILEVBQUdlLEdBQUssR0FBSWYsRUFBRyxDQUN2QkEsRUFBSUEsRUFBRXFpQixNQUFNLEtBQ1osSUFBSyxJQUFJM2EsRUFBSSxFQUFHQSxFQUFJMUgsRUFBRW5OLE9BQVE2VSxJQUFLLENBQy9CLElBQUkzSCxFQUFJQyxFQUFFMEgsR0FBRzhLLFFBQVEsS0FBTXRXLEVBQUksS0FDL0IsR0FBSSxHQUFLNkQsRUFBRyxDQUNSLElBQUlvQyxFQUFJbkMsRUFBRTBILEdBQUcrYyxVQUFVLEVBQUcxa0IsR0FDMUI3RCxFQUFJOEQsRUFBRTBILEdBQUcrYyxVQUFVMWtCLEVBQUksUUFHdkJvQyxFQUFJbkMsRUFBRTBILEdBQ1YzRyxFQUFFb0IsRUFBR2pHLEVBQUltNkIsbUJBQW1CbjZCLEVBQUU3RixRQUFRLE1BQU8sTUFBUSxNQTJDUm81QixDQUFHenZCLEVBQUUwSCxHQUFHLFNBQVUzRyxFQUFHMkcsR0FBSzFILEVBQUVrYixJQUFJbWIsbUJBQW1CdDFCLEVBQUUxSyxRQUFRLE1BQU8sTUFBT3FSLE9BR2hJLFNBQVMrcUIsR0FBR3p5QixFQUFHZSxHQUFLMHpCLEdBQUV6MEIsR0FBSWUsRUFBSXlHLEdBQUV4SCxFQUFHZSxHQUFJcWdDLEdBQUVwaEMsRUFBRUEsRUFBRWUsRUFBR0EsS0FBT2YsRUFBRTBILEVBQUksS0FBTTFILEVBQUVlLEdBQUtmLEVBQUVBLEVBQUVoSSxJQUFJK0ksR0FBR2xPLE9BQWlCdXVDLElBQVRwaEMsRUFBSUEsRUFBRUEsR0FBT2UsRUFBR0EsWUFBY2YsRUFBRWUsRUFBRUEsR0FBSWYsRUFBRTBILElBQUsxSCxFQUFFQSxFQUFFbk4sT0FBUyxFQUFJbU4sRUFBRTBILEdBQUs2bkIsR0FBR3Z2QixLQUNySyxTQUFTMHlCLEdBQUcxeUIsRUFBR2UsR0FBd0IsT0FBbkIwekIsR0FBRXowQixHQUFJZSxFQUFJeUcsR0FBRXhILEVBQUdlLEdBQVdxZ0MsR0FBRXBoQyxFQUFFQSxFQUFFZSxFQUFHQSxHQWV2RCxTQUFTb29ELEdBQUducEQsRUFBR2UsRUFBRzJHLEdBQUsrcUIsR0FBR3p5QixFQUFHZSxHQUFJLEVBQUkyRyxFQUFFN1UsU0FBV21OLEVBQUUwSCxFQUFJLEtBQU0xSCxFQUFFQSxFQUFFL0gsSUFBSXVQLEdBQUV4SCxFQUFHZSxHQUFJK2lCLEdBQUdwYyxJQUFLMUgsRUFBRWUsR0FBSzJHLEVBQUU3VSxRQVloRyxTQUFTMlUsR0FBRXhILEVBQUdlLEdBQWtELE9BQTdDQSxFQUFJcUYsT0FBT3JGLEdBQUlmLEVBQUVtQyxJQUFNcEIsRUFBSUEsRUFBRTBRLGVBQXVCMVEsRUFFdkUsU0FBUzR4QixHQUFHM3lCLEVBQUdlLEdBQUs3TyxLQUFLNk8sRUFBSWYsRUFBRzlOLEtBQUs4TixFQUFJZSxFQUN6QyxTQUFTK3hCLEdBQUc5eUIsR0FBSzlOLEtBQUtpTyxFQUFJSCxHQUFLK3lCLEdBQXVGL3lCLEVBQW5Gc0QsR0FBRTR0RCw0QkFBcUYsR0FBdERseEQsRUFBSXNELEdBQUU2dEQsWUFBWUMsaUJBQWlCLGVBQXlCditELFNBQVcsTUFBUW1OLEVBQUUsR0FBR3F4RCxpQkFBbUIsTUFBUXJ4RCxFQUFFLEdBQUdxeEQsb0JBQTJCL3RELEdBQUU2ZixJQUFNN2YsR0FBRTZmLEdBQUdtQixJQUFNaGhCLEdBQUU2ZixHQUFHbUIsTUFBUWhoQixHQUFFNmYsR0FBR21CLEtBQUtpRSxJQUFLcjJCLEtBQUtpUSxFQUFJbkMsRUFBSTlOLEtBQUtpTyxFQUFJLEVBQUdqTyxLQUFLOE4sRUFBSSxLQUFNLEVBQUk5TixLQUFLaVEsSUFBTWpRLEtBQUs4TixFQUFJLElBQUlpYixLQUFNL29CLEtBQUs2TyxFQUFJLEtBQU03TyxLQUFLd1YsRUFBSSxJQWpDcFd2SCxHQUFJMHlDLEdBQUVyK0MsV0FDSjBtQixJQUFNLFNBQVVsYixFQUFHZSxHQUFLMHpCLEdBQUV2aUMsTUFBT0EsS0FBS3dWLEVBQUksS0FBTTFILEVBQUl3SCxHQUFFdFYsS0FBTThOLEdBQUksSUFBSTBILEVBQUl4VixLQUFLOE4sRUFBRWhJLElBQUlnSSxHQUF3RCxPQUFwRDBILEdBQUt4VixLQUFLOE4sRUFBRS9ILElBQUkrSCxFQUFHMEgsRUFBSSxJQUFLQSxFQUFFL1YsS0FBS29QLEdBQUk3TyxLQUFLNk8sR0FBSyxFQUFVN08sTUFHcEppTyxHQUFFdEksUUFBVSxTQUFVbUksRUFBR2UsR0FBSzB6QixHQUFFdmlDLE1BQU9BLEtBQUs4TixFQUFFbkksU0FBUSxTQUFVNlAsRUFBRzNILEdBQUsyakIsR0FBR2hjLEdBQUcsU0FBVXhMLEdBQUs4RCxFQUFFdkwsS0FBS3NNLEVBQUc3RSxFQUFHNkQsRUFBRzdOLFFBQVVBLFFBQVVBLE9BQ2pJaU8sR0FBRW02QixFQUFJLFdBQWM3RixHQUFFdmlDLE1BQU8sSUFBSyxJQUFJOE4sRUFBSTlOLEtBQUs4TixFQUFFMDNCLElBQUszMkIsRUFBSTdPLEtBQUs4TixFQUFFczZCLElBQUs1eUIsRUFBSSxHQUFJM0gsRUFBSSxFQUFHQSxFQUFJZ0IsRUFBRWxPLE9BQVFrTixJQUMvRixJQUFLLElBQUk3RCxFQUFJOEQsRUFBRUQsR0FBSW9DLEVBQUksRUFBR0EsRUFBSWpHLEVBQUVySixPQUFRc1AsSUFDcEN1RixFQUFFL1YsS0FBS29QLEVBQUVoQixJQUFLLE9BQU8ySCxHQUM3QnZILEdBQUV1M0IsRUFBSSxTQUFVMTNCLEdBQUt5MEIsR0FBRXZpQyxNQUFPLElBQUk2TyxFQUFJLEdBQUksR0FBSSxpQkFBb0JmLEVBQzlEMHlCLEdBQUd4Z0MsS0FBTThOLEtBQU9lLEVBQUk4aUIsR0FBRzlpQixFQUFHN08sS0FBSzhOLEVBQUVoSSxJQUFJd1AsR0FBRXRWLEtBQU04TixVQUM1QyxDQUNEQSxFQUFJOU4sS0FBSzhOLEVBQUUwM0IsSUFDWCxJQUFLLElBQUlod0IsRUFBSSxFQUFHQSxFQUFJMUgsRUFBRW5OLE9BQVE2VSxJQUMxQjNHLEVBQUk4aUIsR0FBRzlpQixFQUFHZixFQUFFMEgsSUFDbEIsT0FBTzNHLEdBQ1RaLEdBQUVsSSxJQUFNLFNBQVUrSCxFQUFHZSxHQUErSCxPQUExSDB6QixHQUFFdmlDLE1BQU9BLEtBQUt3VixFQUFJLEtBQXNCZ3JCLEdBQUd4Z0MsS0FBbkI4TixFQUFJd0gsR0FBRXRWLEtBQU04TixNQUFvQjlOLEtBQUs2TyxHQUFLN08sS0FBSzhOLEVBQUVoSSxJQUFJZ0ksR0FBR25OLFFBQVNYLEtBQUs4TixFQUFFL0gsSUFBSStILEVBQUcsQ0FBQ2UsSUFBSzdPLEtBQUs2TyxHQUFLLEVBQVU3TyxNQUMzSmlPLEdBQUVuSSxJQUFNLFNBQVVnSSxFQUFHZSxHQUFLLE9BQUtmLEdBQ0ssR0FBdEJBLEVBQUk5TixLQUFLd2xDLEVBQUUxM0IsSUFBaUJuTixPQUFTdVQsT0FBT3BHLEVBQUUsSUFBakRlLEdBRVhaLEdBQUVsTyxTQUFXLFdBQWMsR0FBSUMsS0FBS3dWLEVBQ2hDLE9BQU94VixLQUFLd1YsRUFBRyxJQUFLeFYsS0FBSzhOLEVBQ3pCLE1BQU8sR0FBSSxJQUFLLElBQUlBLEVBQUksR0FBSWUsRUFBSTdPLEtBQUs4TixFQUFFczZCLElBQUs1eUIsRUFBSSxFQUFHQSxFQUFJM0csRUFBRWxPLE9BQVE2VSxJQUFLLENBQ3RFLElBQUkzSCxFQUFJZ0IsRUFBRTJHLEdBQUl4TCxFQUFJNUcsbUJBQW1COFEsT0FBT3JHLElBQzVDQSxFQUFJN04sS0FBS3dsQyxFQUFFMzNCLEdBQ1gsSUFBSyxJQUFJb0MsRUFBSSxFQUFHQSxFQUFJcEMsRUFBRWxOLE9BQVFzUCxJQUFLLENBQy9CLElBQUlxZ0IsRUFBSXRtQixFQUNSLEtBQU82RCxFQUFFb0MsS0FBT3FnQixHQUFLLElBQU1sdEIsbUJBQW1COFEsT0FBT3JHLEVBQUVvQyxNQUN2RG5DLEVBQUVyTyxLQUFLNndCLElBRWIsT0FBT3R3QixLQUFLd1YsRUFBSTFILEVBQUV6TixLQUFLLE1BS3pCLElBQUl3Z0MsR0FBSyxHQUNULFNBQVNsaEMsR0FBR21PLEdBQUssUUFBT0EsRUFBRWUsS0FBU2YsRUFBRUEsR0FBSUEsRUFBRUEsRUFBRXNYLE1BQVF0WCxFQUFFbUMsRUFDdkQsU0FBUzJzQixHQUFHOXVCLEdBQUssT0FBT0EsRUFBRWUsRUFBSSxFQUFJZixFQUFFQSxFQUFJQSxFQUFFQSxFQUFFc1gsS0FBTyxFQUNuRCxTQUFTb1gsR0FBRzF1QixFQUFHZSxHQUFLLE9BQU9mLEVBQUVlLEVBQUlmLEVBQUVlLEdBQUtBLElBQUlmLEVBQUVBLEdBQUlBLEVBQUVBLEVBQUVpTCxJQUFJbEssR0FDMUQsU0FBU2d1QixHQUFHL3VCLEVBQUdlLEdBQUtmLEVBQUVBLEVBQUlBLEVBQUVBLEVBQUVrYixJQUFJbmEsR0FBS2YsRUFBRWUsRUFBSUEsRUFDN0MsU0FBU291QixHQUFHbnZCLEVBQUdlLEdBQUtmLEVBQUVlLEdBQUtmLEVBQUVlLEdBQUtBLEVBQUlmLEVBQUVlLEVBQUksS0FBT2YsRUFBRUEsR0FBS0EsRUFBRUEsRUFBRWlMLElBQUlsSyxJQUFNZixFQUFFQSxFQUFFa00sT0FBT25MLEdBdUJuRixTQUFTaXlCLEdBQUdoekIsR0FDUixJQUFJeWMsRUFBS3ZYLEVBQ1QsR0FBSSxNQUFRbEYsRUFBRWUsRUFDVixPQUFPZixFQUFFMEgsRUFBRXBWLE9BQU8wTixFQUFFZSxFQUFFUyxHQUMxQixHQUFJLE1BQVF4QixFQUFFQSxHQUFLLElBQU1BLEVBQUVBLEVBQUVzWCxLQUFNLENBQy9CLElBQUl2VyxFQUFJZixFQUFFMEgsRUFDVixJQUNJLElBQUssSUFBSWdFLEVBQUssR0FBUzFMLEVBQUVBLEVBQUVvTSxVQUFXUixFQUFLRixFQUFHMVgsUUFBUzRYLEVBQUczWCxLQUFNMlgsRUFBS0YsRUFBRzFYLE9BQVEsQ0FDNUUsSUFBSTBULEVBQUlrRSxFQUFHMVgsTUFDWDZNLEVBQUlBLEVBQUV6TyxPQUFPb1YsRUFBRWxHLElBR3ZCLE1BQU84dkQsR0FBUzcwQyxFQUFNLENBQUUxbEIsTUFBT3U2RCxHQUMvQixRQUNJLElBQ1ExbEQsSUFBT0EsRUFBRzNYLE9BQVNpUixFQUFLd0csRUFBR00sU0FBUzlHLEVBQUd6USxLQUFLaVgsR0FFcEQsUUFBVSxHQUFJK1EsRUFBSyxNQUFNQSxFQUFJMWxCLE9BRWpDLE9BQU9nSyxFQUVYLE9BQU8raUIsR0FBRzlqQixFQUFFMEgsR0FFaEIsU0FBU3FkLE1BR1QsU0FBU2tPLEtBQU8vZ0MsS0FBSzhOLEVBQUksSUFBSStrQixHQUM3QixTQUFTeWMsR0FBR3hoQyxFQUFHZSxFQUFHMkcsR0FBSyxJQUFJM0gsRUFBSTJILEdBQUssR0FBSSxJQUNwQ2dvQixHQUFHMXZCLEdBQUcsU0FBVTlELEVBQUdpRyxHQUFLLElBQUlxZ0IsRUFBSXRtQixFQUFHM0gsR0FBRTJILEtBQU9zbUIsRUFBSW9HLEdBQUcxc0IsSUFBSzZFLEVBQUVwUCxLQUFLb08sRUFBSW9DLEVBQUksSUFBTTdNLG1CQUFtQmt0QixPQUVwRyxNQUFPdG1CLEdBQ0gsTUFBTTZFLEVBQUVwUCxLQUFLb08sRUFBSSxRQUFVekssbUJBQW1CLFlBQWE0RyxHQWMvRCxTQUFTazNCLEdBQUdwekIsRUFBR2UsRUFBRzJHLEVBQUczSCxFQUFHN0QsR0FBSyxJQUN6QjZFLEVBQUVncEMsT0FBUyxLQUFNaHBDLEVBQUVqSyxRQUFVLEtBQU1pSyxFQUFFekgsUUFBVSxLQUFNeUgsRUFBRWtwQyxVQUFZLEtBQU0vdEMsRUFBRTZELEdBRS9FLE1BQU9vQyxLQXRFUDJ3QixHQUFHdCtCLFVBQVUyN0IsT0FBUyxXQUNsQixJQUFJM2tCLEVBQUt0RyxFQUVULEdBREFoVCxLQUFLd1YsRUFBSXNyQixHQUFHOWdDLE1BQ1JBLEtBQUs2TyxFQUNMN08sS0FBSzZPLEVBQUVvdkIsU0FBVWorQixLQUFLNk8sRUFBSSxVQUN6QixHQUFJN08sS0FBSzhOLEdBQUssSUFBTTlOLEtBQUs4TixFQUFFc1gsS0FBTSxDQUNsQyxJQUNJLElBQUssSUFBSTVMLEVBQUssR0FBU3haLEtBQUs4TixFQUFFb00sVUFBV1IsRUFBS0YsRUFBRzFYLFFBQVM0WCxFQUFHM1gsS0FBTTJYLEVBQUtGLEVBQUcxWCxPQUMvRDRYLEVBQUcxWCxNQUNUaThCLFNBR1YsTUFBT3BrQixHQUFTUCxFQUFNLENBQUV6VSxNQUFPZ1YsR0FDL0IsUUFDSSxJQUNRSCxJQUFPQSxFQUFHM1gsT0FBU2lSLEVBQUt3RyxFQUFHTSxTQUFTOUcsRUFBR3pRLEtBQUtpWCxHQUVwRCxRQUFVLEdBQUlGLEVBQUssTUFBTUEsRUFBSXpVLE9BRWpDN0UsS0FBSzhOLEVBQUVnMUIsVUEyQmZqUSxHQUFHdndCLFVBQVVnQixVQUFZLFNBQVV3SyxHQUFLLE9BQU9zRCxHQUFFL04sS0FBS0MsVUFBVXdLLE9BQUcsSUFDbkUra0IsR0FBR3Z3QixVQUFVMG1DLE1BQVEsU0FBVWw3QixHQUFLLE9BQU9zRCxHQUFFL04sS0FBSzJsQyxNQUFNbDdCLE9BQUcsSUF3QjNELElBQUlxekIsR0FBSy92QixHQUFFL04sS0FBSzJsQyxNQUNoQixTQUFTNnFCLEdBQUUvbEQsR0FBS3d1QixHQUFFLzVCLEtBQUt2QyxNQUFPQSxLQUFLd2lCLFFBQVUsSUFBSW0zQixHQUFHMzVDLEtBQUsyaEMsRUFBSTd6QixHQUFLLEtBQU05TixLQUFLNk8sR0FBSSxFQUFJN08sS0FBS3NQLEVBQUl0UCxLQUFLOE4sRUFBSSxLQUFNOU4sS0FBSzh3QixFQUFJLEdBQUk5d0IsS0FBS3N3QixFQUFJLEVBQUd0d0IsS0FBS2lRLEVBQUksR0FBSWpRLEtBQUtpTyxFQUFJak8sS0FBSzB3QixFQUFJMXdCLEtBQUt3d0IsRUFBSXh3QixLQUFLdXdCLEdBQUksRUFBSXZ3QixLQUFLbUMsRUFBSSxFQUFHbkMsS0FBSzZRLEVBQUksS0FBTTdRLEtBQUtraUMsRUFBSWQsR0FBSXBoQyxLQUFLczhCLEVBQUl0OEIsS0FBS2c5QixHQUFJLEVBQ3JQanNCLEdBQUU4aUQsR0FBR3YzQixJQUNMLElBQUk4RSxHQUFLLEdBQUluTyxHQUFLLFlBQWFvTyxHQUFLLENBQUMsT0FBUSxPQXVDN0MsU0FBUzNQLEdBQUc1akIsR0FBSyxNQUFPLGdCQUFrQkEsRUFBRXlSLGNBRTVDLFNBQVMyVCxHQUFHcGxCLEVBQUdlLEdBQUtmLEVBQUVlLEdBQUksRUFBSWYsRUFBRUEsSUFBTUEsRUFBRUcsR0FBSSxFQUFJSCxFQUFFQSxFQUFFd2UsUUFBU3hlLEVBQUVHLEdBQUksR0FBS0gsRUFBRW1DLEVBQUlwQixFQUFHZixFQUFFd2lCLEVBQUksRUFBR29SLEdBQUc1ekIsR0FBSTh6QixHQUFHOXpCLEdBQ3BHLFNBQVM0ekIsR0FBRzV6QixHQUFLQSxFQUFFeWlCLElBQU16aUIsRUFBRXlpQixHQUFJLEVBQUl6aUIsRUFBRSswQixjQUFjLFlBQWEvMEIsRUFBRSswQixjQUFjLFVBS2hGLFNBQVNmLEdBQUdoMEIsR0FDUixHQUFJQSxFQUFFZSxRQUFLLElBQXNCNnZELE1BQVU1d0QsRUFBRXdCLEVBQUUsSUFBTSxHQUFLNjZCLEdBQUVyOEIsSUFBTSxHQUFLQSxFQUFFK2xELEtBQ3JFLEdBQUkvbEQsRUFBRTBpQixHQUFLLEdBQUsyWixHQUFFcjhCLEdBQ2RncUIsR0FBR2hxQixFQUFFdWtCLEdBQUksRUFBR3ZrQixRQUNYLEdBQUlBLEVBQUUrMEIsY0FBYyxvQkFBcUIsR0FBS3NILEdBQUVyOEIsR0FBSSxDQUNyREEsRUFBRWUsR0FBSSxFQUNOLElBQ0ksSUFhSWhCLEVBYkFnQixFQUFJZixFQUFFK2xELElBQ1YvbEQsRUFBRyxPQUFRZSxHQUNQLEtBQUssSUFDTCxLQUFLLElBQ0wsS0FBSyxJQUNMLEtBQUssSUFDTCxLQUFLLElBQ0wsS0FBSyxJQUNMLEtBQUssS0FDRCxJQUFJMkcsR0FBSSxFQUNSLE1BQU0xSCxFQUNWLFFBQVMwSCxHQUFJLEVBR2pCLEtBQU0zSCxFQUFJMkgsR0FBSSxDQUNWLElBQUl4TCxFQUNKLEdBQUlBLEVBQUksSUFBTTZFLEVBQUcsQ0FDYixJQUFJb0IsRUFBSWlFLE9BQU9wRyxFQUFFZ2pCLEdBQUdsUyxNQUFNMGUsSUFBSSxJQUFNLEtBQ3BDLElBQUtydEIsR0FBS21CLEdBQUVvQixNQUFRcEIsR0FBRW9CLEtBQUtqRSxTQUFVLENBQ2pDLElBQUkraEIsRUFBSWxmLEdBQUVvQixLQUFLakUsU0FBU3V0QixTQUN4QjdyQixFQUFJcWdCLEVBQUVuTSxPQUFPLEVBQUdtTSxFQUFFM3ZCLE9BQVMsR0FFL0JxSixHQUFLaXBCLEdBQUdyd0IsS0FBS3FOLEVBQUlBLEVBQUVzUCxjQUFnQixJQUV2QzFSLEVBQUk3RCxFQUVSLEdBQUk2RCxFQUNBQyxFQUFFKzBCLGNBQWMsWUFDWi8wQixFQUFFKzBCLGNBQWMsZUFDbkIsQ0FDRC8wQixFQUFFd2lCLEVBQUksRUFDTixJQUNJLElBQUl6ZixFQUFJLEVBQUlzNUIsR0FBRXI4QixHQUFLQSxFQUFFQSxFQUFFOHBDLFdBQWEsR0FFeEMsTUFBT3BuQixHQUNIM2YsRUFBSSxHQUVSL0MsRUFBRW1DLEVBQUlZLEVBQUksS0FBTy9DLEVBQUUrbEQsSUFBTSxJQUN6Qm55QixHQUFHNXpCLElBR1gsUUFDSTh6QixHQUFHOXpCLEtBSW5CLFNBQVM4ekIsR0FBRzl6QixFQUFHZSxHQUFLLEdBQUlmLEVBQUVBLEVBQUcsQ0FDekJxbEIsR0FBR3JsQixHQUNILElBQUkwSCxFQUFJMUgsRUFBRUEsRUFBR0QsRUFBSUMsRUFBRXdCLEVBQUUsR0FBS3VnQixHQUFLLEtBQy9CL2hCLEVBQUVBLEVBQUksS0FDTkEsRUFBRXdCLEVBQUksS0FDTlQsR0FBS2YsRUFBRSswQixjQUFjLFNBQ3JCLElBQ0lydEIsRUFBRWlpQyxtQkFBcUI1cEMsRUFFM0IsTUFBTzdELE1BRVgsU0FBU21wQixHQUFHcmxCLEdBQUtBLEVBQUVBLEdBQUtBLEVBQUV3dUIsSUFBTXh1QixFQUFFQSxFQUFFaXFDLFVBQVksTUFBT2pxQyxFQUFFK0MsSUFBTU8sR0FBRThhLGFBQWFwZSxFQUFFK0MsR0FBSS9DLEVBQUUrQyxFQUFJLE1BQzFGLFNBQVNzNUIsR0FBRXI4QixHQUFLLE9BQU9BLEVBQUVBLEVBQUlBLEVBQUVBLEVBQUUwNUIsV0FBYSxFQXFCOUMsU0FBUzNXLEdBQUcvaUIsRUFBR2UsRUFBRzJHLEdBQUsxSCxFQUFHLENBQ3RCLElBQUtELEtBQUsySCxFQUFHLENBQ1QsSUFBSTNILEdBQUksRUFDUixNQUFNQyxFQUVWRCxHQUFJLEVBQ05BLElBQU0ySCxFQVBSLFNBQVkxSCxHQUFLLElBQUllLEVBQUksR0FBdUUsT0FBbkV5akIsR0FBR3hrQixHQUFHLFNBQVUwSCxFQUFHM0gsR0FBS2dCLEdBQUtoQixFQUFHZ0IsR0FBSyxJQUFLQSxHQUFLMkcsRUFBRzNHLEdBQUssVUFBbUJBLEVBTzNGa3pCLENBQUd2c0IsR0FBSSxpQkFBb0IxSCxFQUFLLE1BQVEwSCxHQUFLcFMsbUJBQW1COFEsT0FBT3NCLElBQU9tYixHQUFFN2lCLEVBQUdlLEVBQUcyRyxJQUNsRyxTQUFTd3NCLEdBQUdsMEIsRUFBR2UsRUFBRzJHLEdBQUssT0FBT0EsR0FBS0EsRUFBRTZwRCx1QkFBd0I3cEQsRUFBRTZwRCxzQkFBc0J2eEQsSUFBVWUsRUFDL0YsU0FBU3N6QixHQUFHcjBCLEdBQ1I5TixLQUFLeXhCLEdBQUssRUFDVnp4QixLQUFLaU8sRUFBSSxHQUNUak8sS0FBS3dWLEVBQUksSUFBSTBpQixHQUNibDRCLEtBQUtpMkQsR0FBS2oyRCxLQUFLcXhCLEdBQUtyeEIsS0FBSzh3QixFQUFJOXdCLEtBQUtrd0IsR0FBS2x3QixLQUFLOE4sRUFBSTlOLEtBQUt1eEIsR0FBS3Z4QixLQUFLMHdCLEVBQUkxd0IsS0FBS3NWLEVBQUl0VixLQUFLTSxFQUFJTixLQUFLKzBDLEVBQUkvMEMsS0FBS3d3QixFQUFJLEtBQ3ZHeHdCLEtBQUtnMEIsR0FBS2gwQixLQUFLMjVDLEVBQUksRUFDbkIzNUMsS0FBSzh6QixHQUFLa08sR0FBRyxZQUFZLEVBQUlsMEIsR0FDN0I5TixLQUFLMmhDLEVBQUkzaEMsS0FBSzZRLEVBQUk3USxLQUFLcVIsRUFBSXJSLEtBQUtzd0IsRUFBSXR3QixLQUFLaVEsRUFBSSxLQUM3Q2pRLEtBQUtzb0QsR0FBSSxFQUNUdG9ELEtBQUtraUMsRUFBSWxpQyxLQUFLd3hCLEdBQUt4eEIsS0FBSzBQLEdBQUssRUFDN0IxUCxLQUFLMmdELEVBQUkzZ0QsS0FBS21DLEVBQUluQyxLQUFLdXdCLEVBQUksRUFDM0J2d0IsS0FBSzJ6QixHQUFLcU8sR0FBRyxtQkFBb0IsSUFBS2wwQixHQUN0QzlOLEtBQUtrMEIsR0FBSzhOLEdBQUcsbUJBQW9CLElBQUtsMEIsR0FDdEM5TixLQUFLK3pCLEdBQUtpTyxHQUFHLDJCQUE0QixFQUFHbDBCLEdBQzVDOU4sS0FBS3N4QixHQUFLMFEsR0FBRyxpQ0FBa0MsSUFBS2wwQixHQUNwRDlOLEtBQUtpMEIsR0FBS25tQixHQUFLQSxFQUFFRyxRQUFLLEVBQ3RCak8sS0FBS3M4QixPQUFJLEVBQ1R0OEIsS0FBS3UzQixFQUFJenBCLEdBQUtBLEVBQUV3eEQseUJBQ1osRUFDSnQvRCxLQUFLOGpDLEVBQUksR0FDVDlqQyxLQUFLNk8sRUFBSSxJQUFJK3hCLEdBQUc5eUIsR0FBS0EsRUFBRXl4RCx3QkFDdkJ2L0QsS0FBS214QixHQUFLLElBQUk0UCxHQUNkL2dDLEtBQUtxd0IsR0FBS3ZpQixHQUFLQSxFQUFFMHhELGdCQUFpQixFQUNsQ3gvRCxLQUFLNHpCLEdBQUs5bEIsR0FBS0EsRUFBRWUsSUFBSyxFQUN0QmYsR0FBS0EsRUFBRW1DLElBQU1qUSxLQUFLd1YsRUFBRTFILEdBQUksR0FDeEJBLEdBQUtBLEVBQUUyeEQsbUJBQXFCei9ELEtBQUtzb0QsR0FBSSxHQUNyQ3RvRCxLQUFLdWlDLEdBQUt2aUMsS0FBS3F3QixJQUFNcndCLEtBQUtzb0QsR0FBS3g2QyxHQUFLQSxFQUFFMEgsSUFBSyxFQUMzQ3hWLEtBQUtpd0IsUUFBSyxFQUNWandCLEtBQUttcUMsRUFBSSxFQUNUbnFDLEtBQUtnOUIsR0FBSSxFQUNUaDlCLEtBQUtzUCxFQUFJLEtBS2IsU0FBUzZ0QixHQUFHcnZCLEdBQVksR0FBUHMwQixHQUFHdDBCLEdBQVEsR0FBS0EsRUFBRTJDLEVBQUcsQ0FDbEMsSUFBSTVCLEVBQUlmLEVBQUU2ckMsSUFBS25rQyxFQUFJNHlCLEdBQUV0NkIsRUFBRWdqQixHQUN2QkgsR0FBRW5iLEVBQUcsTUFBTzFILEVBQUVnMkIsR0FDZG5ULEdBQUVuYixFQUFHLE1BQU8zRyxHQUNaOGhCLEdBQUVuYixFQUFHLE9BQVEsYUFDYjZzQixHQUFHdjBCLEVBQUcwSCxJQUNOM0csRUFBSSxJQUFJMjJCLEdBQUUxM0IsRUFBR0EsRUFBRTBILEVBQUczRyxPQUFHLElBQ25COHlCLEVBQUksRUFDTjl5QixFQUFFdk8sRUFBSXk1QixHQUFHcU8sR0FBRTV5QixJQUNYQSxHQUFJLEVBQ0pwRSxHQUFFWSxXQUFhWixHQUFFWSxVQUFVMHRELGFBQWVscUQsRUFBSXBFLEdBQUVZLFVBQVUwdEQsV0FBVzd3RCxFQUFFdk8sRUFBRVAsV0FBWSxNQUNwRnlWLEdBQUtwRSxHQUFFdXVELFNBQVUsSUFBS0EsT0FBT2x4RCxJQUFNSSxFQUFFdk8sRUFBR2tWLEdBQUksR0FDN0NBLElBQU0zRyxFQUFFZixFQUFJcXRCLEdBQUd0c0IsRUFBRVosRUFBRyxNQUFPWSxFQUFFZixFQUFFa2lCLEdBQUduaEIsRUFBRXZPLElBQ3BDdU8sRUFBRTBoQixFQUFJd0IsS0FDTm1ZLEdBQUVyN0IsR0FDSnl6QixHQUFHeDBCLEdBQ0wsU0FBUzR1QixHQUFHNXVCLEdBQUtBLEVBQUVBLElBQU15dEIsR0FBR3p0QixHQUFJQSxFQUFFQSxFQUFFbXdCLFNBQVVud0IsRUFBRUEsRUFBSSxNQUNwRCxTQUFTczBCLEdBQUd0MEIsR0FBSzR1QixHQUFHNXVCLEdBQUlBLEVBQUV1RCxJQUFNRCxHQUFFOGEsYUFBYXBlLEVBQUV1RCxHQUFJdkQsRUFBRXVELEVBQUksTUFBT29yQixHQUFHM3VCLEdBQUlBLEVBQUVlLEVBQUVvdkIsU0FBVW53QixFQUFFd2lCLElBQU0saUJBQW9CeGlCLEVBQUV3aUIsR0FBS2xmLEdBQUU4YSxhQUFhcGUsRUFBRXdpQixHQUFJeGlCLEVBQUV3aUIsRUFBSSxNQUNySixTQUFTa1MsR0FBRzEwQixFQUFHZSxHQUFLZixFQUFFRyxFQUFFeE8sS0FBSyxJQUFJZ2hDLEdBQUczeUIsRUFBRWttQixLQUFNbmxCLElBQUssR0FBS2YsRUFBRTJDLEdBQUtrckMsR0FBRzd0QyxHQUNoRSxTQUFTNnRDLEdBQUc3dEMsR0FBS25PLEdBQUdtTyxFQUFFZSxJQUFNZixFQUFFd2lCLElBQU14aUIsRUFBRXdpQixHQUFJLEVBQUkrRyxHQUFHdnBCLEVBQUU4a0IsR0FBSTlrQixHQUFJQSxFQUFFeWlCLEVBQUksR0EwRGpFLFNBQVNxUyxHQUFHOTBCLEVBQUdlLEdBQUssSUFBSTJHLEVBQU9BLEVBQUozRyxFQUFRQSxFQUFFb0IsRUFBUW5DLEVBQUU2ckMsSUFBSyxJQUFJOXJDLEVBQUl1NkIsR0FBRXQ2QixFQUFFZ2pCLEdBQUlILEdBQUU5aUIsRUFBRyxNQUFPQyxFQUFFZzJCLEdBQUluVCxHQUFFOWlCLEVBQUcsTUFBTzJILEdBQUltYixHQUFFOWlCLEVBQUcsTUFBT0MsRUFBRTRCLEdBQUkyeUIsR0FBR3YwQixFQUFHRCxHQUFJQyxFQUFFeE4sR0FBS3dOLEVBQUUwaUIsR0FBS0ssR0FBR2hqQixFQUFHQyxFQUFFeE4sRUFBR3dOLEVBQUUwaUIsR0FBSWhiLEVBQUksSUFBSWd3QixHQUFFMTNCLEVBQUdBLEVBQUUwSCxFQUFHQSxFQUFHMUgsRUFBRXlpQixFQUFJLEdBQUksT0FBU3ppQixFQUFFeE4sSUFBTWtWLEVBQUVzYixFQUFJaGpCLEVBQUUwaUIsR0FBSTNoQixJQUFNZixFQUFFRyxFQUFJWSxFQUFFUyxFQUFFbFAsT0FBTzBOLEVBQUVHLElBQUtZLEVBQUk4ekIsR0FBRzcwQixFQUFHMEgsRUFBRyxLQUFNQSxFQUFFaU8sV0FBV3BNLEtBQUtHLE1BQU0sR0FBSzFKLEVBQUV3akIsSUFBTWphLEtBQUtHLE1BQU0sR0FBSzFKLEVBQUV3akIsR0FBS2phLEtBQUtJLFdBQVlvbEIsR0FBRy91QixFQUFFZSxFQUFHMkcsR0FBSXFrQixHQUFHcmtCLEVBQUczSCxFQUFHZ0IsR0FDaFgsU0FBU3d6QixHQUFHdjBCLEVBQUdlLEdBQUtmLEVBQUVtQyxHQUFLdXRCLEdBQUcsSUFBSSxTQUFVaG9CLEVBQUczSCxHQUFLOGlCLEdBQUU5aEIsRUFBR2hCLEVBQUcySCxNQUM1RCxTQUFTbXRCLEdBQUc3MEIsRUFBR2UsRUFBRzJHLEdBQUtBLEVBQUk2QixLQUFLSyxJQUFJNUosRUFBRUcsRUFBRXROLE9BQVE2VSxHQUFJLElBQUkzSCxFQUFJQyxFQUFFbUMsRUFBSS9LLEdBQUU0SSxFQUFFbUMsRUFBRTRqQixHQUFJL2xCLEVBQUVtQyxFQUFHbkMsR0FBSyxLQUFNQSxFQUFHLElBQUssSUFBSTlELEVBQUk4RCxFQUFFRyxFQUFHZ0MsR0FBSyxJQUFLLENBQ3ZILElBQUlxZ0IsRUFBSSxDQUFDLFNBQVc5YSxJQUNuQixHQUFLdkYsRUFBSSxFQUFJdUYsR0FBS3ZGLEVBQUlqRyxFQUFFLEdBQUc2RSxFQUFHeWhCLEVBQUU3d0IsS0FBSyxPQUFTd1EsSUFBTUEsRUFBSSxFQUFJcWdCLEVBQUU3d0IsS0FBSyxPQUFTd1EsR0FDN0UsSUFBSyxJQUFJWSxHQUFJLEVBQUkyZixFQUFJLEVBQUdBLEVBQUloYixFQUFHZ2IsSUFBSyxDQUNoQyxJQUFJbmhCLEVBQUlyRixFQUFFd21CLEdBQUczaEIsRUFBR2lpQixFQUFJOW1CLEVBQUV3bUIsR0FBRzFpQixFQUV6QixHQUFJLEdBREp1QixHQUFLWSxHQUVEQSxFQUFJb0gsS0FBSzBVLElBQUksRUFBRy9oQixFQUFFd21CLEdBQUczaEIsRUFBSSxLQUFNZ0MsR0FBSSxPQUVuQyxJQUNJeStCLEdBQUd4ZSxFQUFHUixFQUFHLE1BQVFqaEIsRUFBSSxLQUV6QixNQUFPd21CLEdBQ0hob0IsR0FBS0EsRUFBRWlqQixJQUduQixHQUFJamdCLEVBQUcsQ0FDSGhELEVBQUl5aUIsRUFBRWp3QixLQUFLLEtBQ1gsTUFBTXlOLEdBRW1CLE9BQS9CQSxFQUFJQSxFQUFFRyxFQUFFVixPQUFPLEVBQUdpSSxHQUFJM0csRUFBRVMsRUFBSXhCLEVBQVVELEVBQ3hDLFNBQVNxdkIsR0FBR3B2QixHQUFLQSxFQUFFQSxHQUFLQSxFQUFFdUQsSUFBTXZELEVBQUU2eUMsRUFBSSxFQUFHdHBCLEdBQUd2cEIsRUFBRXdrQixHQUFJeGtCLEdBQUlBLEVBQUUzTCxFQUFJLEdBQzVELFNBQVN3NkIsR0FBRzd1QixHQUFLLFFBQUlBLEVBQUVBLEdBQUtBLEVBQUV1RCxHQUFLLEdBQUt2RCxFQUFFM0wsSUFDM0IyTCxFQUFFNnlDLElBQUs3eUMsRUFBRXVELEVBQUk2d0IsR0FBRWg5QixHQUFFNEksRUFBRXdrQixHQUFJeGtCLEdBQUk0MEIsR0FBRzUwQixFQUFHQSxFQUFFM0wsSUFBSzJMLEVBQUUzTCxJQUFZLElBT3JFLFNBQVNvNUIsR0FBR3p0QixHQUFLLE1BQVFBLEVBQUV3QixJQUFNOEIsR0FBRThhLGFBQWFwZSxFQUFFd0IsR0FBSXhCLEVBQUV3QixFQUFJLE1BQzVELFNBQVN5ekIsR0FBR2oxQixHQUFLQSxFQUFFQSxFQUFJLElBQUkwM0IsR0FBRTEzQixFQUFHQSxFQUFFMEgsRUFBRyxNQUFPMUgsRUFBRTZ5QyxHQUFJLE9BQVM3eUMsRUFBRXhOLElBQU13TixFQUFFQSxFQUFFZ2pCLEVBQUloakIsRUFBRTBpQixHQUFJMWlCLEVBQUVBLEVBQUVpbkMsRUFBSSxFQUFHLElBQUlsbUMsRUFBSXU1QixHQUFFdDZCLEVBQUV1akIsSUFBS1YsR0FBRTloQixFQUFHLE1BQU8sT0FBUThoQixHQUFFOWhCLEVBQUcsTUFBT2YsRUFBRWcyQixHQUFJblQsR0FBRTloQixFQUFHLEtBQU1mLEVBQUU2ekIsRUFBSSxJQUFNLEtBQU1oUixHQUFFOWhCLEVBQUcsTUFBT2YsRUFBRTRCLEdBQUkyeUIsR0FBR3YwQixFQUFHZSxHQUFJOGhCLEdBQUU5aEIsRUFBRyxPQUFRLFdBQVlmLEVBQUV4TixHQUFLd04sRUFBRTBpQixHQUFLSyxHQUFHaGlCLEVBQUdmLEVBQUV4TixFQUFHd04sRUFBRTBpQixHQUFJMWlCLEVBQUV3dUIsR0FBS3h1QixFQUFFQSxFQUFFMlYsV0FBVzNWLEVBQUV3dUIsR0FBSSxJQUFJOW1CLEVBQUkxSCxFQUFFQSxFQUFHQSxFQUFJQSxFQUFFbW9ELEdBQUl6Z0QsRUFBRW1zQixFQUFJLEVBQUduc0IsRUFBRWxWLEVBQUl5NUIsR0FBR3FPLEdBQUV2NUIsSUFBSzJHLEVBQUVuRSxFQUFJLEtBQU1tRSxFQUFFMHNCLEdBQUksRUFBSWhJLEdBQUcxa0IsRUFBRzFILEdBRTVXLFNBQVMydUIsR0FBRzN1QixHQUFLLE1BQVFBLEVBQUUrQyxJQUFNTyxHQUFFOGEsYUFBYXBlLEVBQUUrQyxHQUFJL0MsRUFBRStDLEVBQUksTUFDNUQsU0FBU3dwQixHQUFHdnNCLEVBQUdlLEdBQUssSUFBSTJHLEVBQUksS0FBTSxHQUFJMUgsRUFBRUEsR0FBS2UsRUFBRyxDQUM1QzR0QixHQUFHM3VCLEdBQ0h5dEIsR0FBR3p0QixHQUNIQSxFQUFFQSxFQUFJLEtBQ04sSUFBSUQsRUFBSSxNQUVQLEtBQUkydUIsR0FBRzF1QixFQUFFZSxFQUFHQSxHQUdiLE9BRkEyRyxFQUFJM0csRUFBRVMsRUFBRzJ0QixHQUFHbnZCLEVBQUVlLEVBQUdBLEdBQUloQixFQUFJLEVBRU4sR0FBWEMsRUFBRW8wQixFQUFJcnpCLEVBQUVzN0IsRUFBTyxHQUFLcjhCLEVBQUUyQyxFQUM5QixHQUFJNUIsRUFBRUEsRUFDRixHQUFJLEdBQUtoQixFQUFHLENBQ1IySCxFQUFJM0csRUFBRXdDLEVBQUl4QyxFQUFFd0MsRUFBRTFRLE9BQVMsRUFDdkJrTyxFQUFJa2pCLEtBQU1sakIsRUFBRTBoQixFQUNaLElBQUl2bUIsRUFBSThELEVBQUV5aUIsR0FDVjFpQixFQUFJMnFCLE1BQ0ZxSyxjQUFjLElBQUlsSyxHQUFHOXFCLEVBQUcySCxFQUFHM0csRUFBRzdFLElBQ2hDMnhDLEdBQUc3dEMsUUFHSG92QixHQUFHcHZCLFFBQ04sR0FBYSxJQUFUOUQsRUFBSTZFLEVBQUV5aEIsSUFBYSxHQUFLdG1CLEdBQUssRUFBSThELEVBQUVvMEIsS0FBTyxHQUFLcjBCLEdBbEg1RCxTQUFZQyxFQUFHZSxHQUFLLFFBQUkrdEIsR0FBRzl1QixFQUFFZSxJQUFNZixFQUFFZSxFQUFFb0IsR0FBS25DLEVBQUV3aUIsRUFBSSxFQUFJLEtBQ25DeGlCLEVBQUV3aUIsR0FDVnhpQixFQUFFRyxFQUFJWSxFQUFFUyxFQUFFbFAsT0FBTzBOLEVBQUVHLEdBQUksR0FBUSxHQUFLSCxFQUFFMkMsR0FBSyxHQUFLM0MsRUFBRTJDLEdBQUszQyxFQUFFeWlCLElBQU16aUIsRUFBRWdtQixHQUFLLEVBQUlobUIsRUFBRWltQixNQUN4RWptQixFQUFFd2lCLEVBQUk0UixHQUFFaDlCLEdBQUU0SSxFQUFFOGtCLEdBQUk5a0IsRUFBR2UsR0FBSTZ6QixHQUFHNTBCLEVBQUdBLEVBQUV5aUIsSUFBS3ppQixFQUFFeWlCLElBQVksS0ErR0F3dEIsQ0FBR2p3QyxFQUFHZSxJQUFNLEdBQUtoQixHQUFLOHVCLEdBQUc3dUIsSUFDbEYsT0FBUTBILEdBQUssRUFBSUEsRUFBRTdVLFNBQVdrTyxFQUFJZixFQUFFZSxFQUFHQSxFQUFFMkcsRUFBSTNHLEVBQUUyRyxFQUFFcFYsT0FBT29WLElBQUt4TCxHQUN6RCxLQUFLLEVBQ0QwRixHQUFFNUIsRUFBRyxHQUNMLE1BQ0osS0FBSyxFQUNENEIsR0FBRTVCLEVBQUcsSUFDTCxNQUNKLEtBQUssRUFDRDRCLEdBQUU1QixFQUFHLEdBQ0wsTUFDSixRQUFTNEIsR0FBRTVCLEVBQUcsSUFFMUIsU0FBUzQwQixHQUFHNTBCLEVBQUdlLEdBQUssSUFBSTJHLEVBQUkxSCxFQUFFNmxCLEdBQUt0YyxLQUFLMnVCLE1BQU0zdUIsS0FBS0ksU0FBVzNKLEVBQUVvbUIsSUFBc0IsT0FBakJwbUIsRUFBRW1DLElBQU11RixHQUFLLEdBQVdBLEVBQUkzRyxFQUNqRyxTQUFTYSxHQUFFNUIsRUFBR2UsR0FBa0MsR0FBN0JmLEVBQUUwSCxFQUFFNkcsS0FBSyxjQUFnQnhOLEdBQVEsR0FBS0EsRUFBRyxDQUN4RCxJQUFJMkcsRUFBSSxLQUNSMUgsRUFBRW1DLElBQU11RixFQUFJLE1BQ1osSUFBSTNILEVBQUkzSSxHQUFFNEksRUFBRTJtQixHQUFJM21CLEdBQ2hCMEgsSUFBTUEsRUFBSSxJQUFJOHlDLEdBQUUsd0NBQXlDbDNDLEdBQUU3QyxVQUFZLFFBQVU2QyxHQUFFN0MsU0FBU3V0QixVQUFZMkIsR0FBR2pvQixFQUFHLFNBQVV1a0IsR0FBR3ZrQixJQTNWL0gsU0FBWTFILEVBQUdlLEdBQUssSUFBSTJHLEVBQUksSUFBSTBpQixHQUFJLEdBQUk5bUIsR0FBRXV1RCxNQUFPLENBQzdDLElBQUk5eEQsRUFBSSxJQUFJOHhELE1BQ1o5eEQsRUFBRWdxQyxPQUFTMW1CLEdBQUcrUCxHQUFJMXJCLEVBQUczSCxFQUFHLHlCQUF5QixFQUFJZ0IsR0FDckRoQixFQUFFakosUUFBVXVzQixHQUFHK1AsR0FBSTFyQixFQUFHM0gsRUFBRyx3QkFBd0IsRUFBSWdCLEdBQ3JEaEIsRUFBRXpHLFFBQVUrcEIsR0FBRytQLEdBQUkxckIsRUFBRzNILEVBQUcsd0JBQXdCLEVBQUlnQixHQUNyRGhCLEVBQUVrcUMsVUFBWTVtQixHQUFHK1AsR0FBSTFyQixFQUFHM0gsRUFBRywwQkFBMEIsRUFBSWdCLEdBQ3pEdUMsR0FBRXFTLFlBQVcsV0FBa0I1VixFQUFFa3FDLFdBQzdCbHFDLEVBQUVrcUMsY0FBZ0IsS0FDdEJscUMsRUFBRVksSUFBTVgsT0FHUmUsR0FBRSxHQWlWRm15QixDQUFHeHJCLEVBQUV6VixXQUFZOE4sUUFHakI4ekIsR0FBRSxHQUFJN3pCLEVBQUUyQyxFQUFJLEVBQUczQyxFQUFFbUMsR0FBS25DLEVBQUVtQyxFQUFFMGhCLEdBQUc5aUIsR0FBSXl6QixHQUFHeDBCLEdBQUlzMEIsR0FBR3QwQixHQUUvQyxTQUFTdzBCLEdBQUd4MEIsR0FBS0EsRUFBRTJDLEVBQUksRUFBRzNDLEVBQUVvMEIsR0FBSyxFQUFPcDBCLEVBQUVtQyxJQUNsQyxHQUFLNndCLEdBQUdoekIsRUFBRWUsR0FBR2xPLFFBQVUsR0FBS21OLEVBQUVHLEVBQUV0TixTQUNoQ21OLEVBQUVlLEVBQUUyRyxFQUFFN1UsT0FBUyxFQUFHaXhCLEdBQUc5akIsRUFBRUcsR0FBSUgsRUFBRUcsRUFBRXROLE9BQVMsR0FDNUNtTixFQUFFbUMsRUFBRXloQixNQUVSLFNBQVNvTCxHQUFHaHZCLEVBQUdlLEVBQUcyRyxHQUFLLElBQUkzSCxFQTdjM0IsU0FBWUMsR0FBSyxPQUFPQSxhQUFhdzZDLEdBQUlsZ0IsR0FBRXQ2QixHQUFLLElBQUl3NkMsR0FBRXg2QyxPQUFHLEdBNmMxQjB3QixDQUFHaHBCLEdBQUksR0FBSSxJQUFNM0gsRUFBRTJILEVBQzlDM0csR0FBS2l2QixHQUFHandCLEVBQUdnQixFQUFJLElBQU1oQixFQUFFMkgsR0FBSXVvQixHQUFHbHdCLEVBQUdBLEVBQUV5aUIsT0FDbEMsQ0FDRCxJQUFJdG1CLEVBQUlvSCxHQUFFN0MsU0FDVlYsRUFoZEosU0FBWUMsRUFBR2UsRUFBRzJHLEVBQUczSCxHQUFLLElBQUk3RCxFQUFJLElBQUlzK0MsR0FBRSxVQUFNLEdBQXNFLE9BQTdEeDZDLEdBQUsydkIsR0FBR3p6QixFQUFHOEQsR0FBSWUsR0FBS2l2QixHQUFHOXpCLEVBQUc2RSxHQUFJMkcsR0FBS3VvQixHQUFHL3pCLEVBQUd3TCxHQUFJM0gsSUFBTTdELEVBQUVpRSxFQUFJSixHQUFXN0QsRUFnZG5INDBCLENBQUc1MEIsRUFBRTh4QixTQUFVanRCLEVBQUlBLEVBQUksSUFBTTdFLEVBQUU0MUQsU0FBVzUxRCxFQUFFNDFELFVBQVc1MUQsRUFBRTYxRCxLQUFNcnFELEdBQ2tELE9BQXZIMUgsRUFBRXdILEdBQUtnZCxHQUFHeGtCLEVBQUV3SCxHQUFHLFNBQVVyRixFQUFHcWdCLEdBQUtLLEdBQUU5aUIsRUFBR3lpQixFQUFHcmdCLE1BQVFwQixFQUFJZixFQUFFNGlCLEVBQUdsYixFQUFJMUgsRUFBRXlqQixHQUFJMWlCLEdBQUsyRyxHQUFLbWIsR0FBRTlpQixFQUFHZ0IsRUFBRzJHLEdBQUltYixHQUFFOWlCLEVBQUcsTUFBT0MsRUFBRWtqQixJQUFLcVIsR0FBR3YwQixFQUFHRCxHQUFXQSxFQUNoSSxTQUFTc3RCLEdBQUdydEIsRUFBR2UsR0FBSyxHQUFJQSxJQUFNZixFQUFFeXBCLEVBQzVCLE1BQU1oc0IsTUFBTSx1REFBb0YsT0FBNUJzRCxFQUFJLElBQUlnbEQsR0FBRS9sRCxFQUFFbW1CLEtBQU8rSSxFQUFJbHZCLEVBQUV5cEIsRUFBVTFvQixFQUMzRyxTQUFTODFCLE1BT1QsU0FBUzNCLEtBQU8sR0FBSTVOLE1BQU8sSUFBTTlULE9BQU9xZixLQUNwQyxNQUFNcDFCLE1BQU0sZ0RBRWhCLFNBQVNrM0IsR0FBRTMwQixFQUFHZSxHQUNWeXRCLEdBQUUvNUIsS0FBS3ZDLE1BQ1BBLEtBQUs4TixFQUFJLElBQUlxMEIsR0FBR3R6QixHQUNoQjdPLEtBQUt3d0IsRUFBSTFpQixFQUNUOU4sS0FBSzZPLEVBQUlBLEdBQUtBLEVBQUVpeEQsa0JBQW9CLEtBQ3BDaHlELEVBQUllLEdBQUtBLEVBQUVreEQsZ0JBQWtCLEtBQzdCbHhELEdBQUtBLEVBQUVteEQsK0JBQWlDbHlELEVBQUlBLEVBQUUscUJBQXVCLGFBQWVBLEVBQUksQ0FBRSxvQkFBcUIsZUFDL0c5TixLQUFLOE4sRUFBRTBpQixFQUFJMWlCLEVBQ1hBLEVBQUllLEdBQUtBLEVBQUVveEQsb0JBQXNCLEtBQ2pDcHhELEdBQUtBLEVBQUVxeEQscUJBQXVCcHlELEVBQUlBLEVBQUUsNkJBQStCZSxFQUFFcXhELG1CQUFxQnB5RCxFQUFJLENBQUUsNEJBQTZCZSxFQUFFcXhELHFCQUMvSHJ4RCxHQUFLQSxFQUFFZixJQUFNQSxFQUFJQSxFQUFFLCtCQUFpQ2UsRUFBRWYsRUFBSUEsRUFBSSxDQUFFLDhCQUErQmUsRUFBRWYsSUFDakc5TixLQUFLOE4sRUFBRWluQyxFQUNIam5DLEdBQ0hBLEVBQUllLEdBQUtBLEVBQUVzeEQsNkJBQStCdHVDLEdBQUcvakIsS0FBTzlOLEtBQUs4TixFQUFFeE4sRUFBSXdOLEdBQ2hFOU4sS0FBS3N3QixFQUFJemhCLEdBQUtBLEVBQUV5d0QseUJBQTBCLEVBQzFDdC9ELEtBQUtpTyxFQUFJWSxHQUFLQSxFQUFFdXhELGNBQWUsR0FDOUJ2eEQsRUFBSUEsR0FBS0EsRUFBRXd4RCxzQkFBd0J4dUMsR0FBR2hqQixLQUFPN08sS0FBSzhOLEVBQUU0aUIsRUFBSTdoQixFQUFlLFFBQVpmLEVBQUk5TixLQUFLNk8sSUFBaUJBLEtBQUtmLEdBQWtCZSxLQUFaZixFQUFJOU4sS0FBSzZPLFdBQW9CZixFQUFFZSxJQUNoSTdPLEtBQUtpUSxFQUFJLElBQUl3d0MsR0FBRXpnRCxNQWdCbkIsU0FBU2lqQyxHQUFHbjFCLEdBQUttckIsR0FBRzEyQixLQUFLdkMsTUFBTyxJQUFJNk8sRUFBSWYsRUFBRXd5RCxPQUFRLEdBQUl6eEQsRUFBRyxDQUNyRGYsRUFBRyxDQUNDLElBQUssSUFBSTBILEtBQUszRyxFQUFHLENBQ2JmLEVBQUkwSCxFQUNKLE1BQU0xSCxFQUVWQSxPQUFJLEdBRVA5TixLQUFLd1YsRUFBSTFILElBQU1BLEVBQUk5TixLQUFLd1YsRUFBR3hWLEtBQUt1RCxLQUFPLE9BQVNzTCxHQUFLZixLQUFLZSxFQUFJQSxFQUFFZixRQUFLLEdBQVU5TixLQUFLdUQsS0FBT3NMLE9BRzVGN08sS0FBS3VELEtBQU91SyxFQUVoQixTQUFTbzFCLEtBQU9oSyxHQUFHMzJCLEtBQUt2QyxNQUFPQSxLQUFLZ2lCLE9BQVMsRUFFN0MsU0FBU3krQixHQUFFM3lDLEdBQUs5TixLQUFLOE4sRUFBSUEsR0FwWnpCRyxHQUFJNGxELEdBQUV2eEQsV0FDSjB0QixHQUFLLFNBQVVsaUIsRUFBR2UsRUFBRzJHLEVBQUczSCxHQUN0QixHQUFJN04sS0FBSzhOLEVBQ0wsTUFBTXZDLE1BQU0sMERBQTREdkwsS0FBSzh3QixFQUFJLFlBQWNoakIsR0FDbkdlLEVBQUlBLEVBQUlBLEVBQUVpdkMsY0FBZ0IsTUFDMUI5OUMsS0FBSzh3QixFQUFJaGpCLEVBQ1Q5TixLQUFLaVEsRUFBSSxHQUNUalEsS0FBS3N3QixFQUFJLEVBQ1R0d0IsS0FBS3V3QixHQUFJLEVBQ1R2d0IsS0FBSzZPLEdBQUksRUFDVDdPLEtBQUs4TixFQUFJLElBQUlzcEMsZUFDYnAzQyxLQUFLc1AsRUFBSXRQLEtBQUsyaEMsRUFBSXBKLEdBQUd2NEIsS0FBSzJoQyxHQUFLcEosR0FBR2UsSUFDbEN0NUIsS0FBSzhOLEVBQUUycEMsbUJBQXFCdnlDLEdBQUVsRixLQUFLcXlCLEdBQUlyeUIsTUFDdkMsSUFDSUEsS0FBSzB3QixHQUFJLEVBQUkxd0IsS0FBSzhOLEVBQUUrRSxLQUFLaEUsRUFBR3FGLE9BQU9wRyxJQUFJLEdBQUs5TixLQUFLMHdCLEdBQUksRUFFekQsTUFBT3pnQixHQUVILFlBREFpakIsR0FBR2x6QixLQUFNaVEsR0FHYm5DLEVBQUkwSCxHQUFLLEdBQ1QsSUFBSXhMLEVBQUksSUFBSTJ2QyxHQUFFMzVDLEtBQUt3aUIsU0FDbkIzVSxHQUFLMnZCLEdBQUczdkIsR0FBRyxTQUFVb0MsRUFBR3FnQixHQUFLdG1CLEVBQUVqRSxJQUFJdXFCLEVBQUdyZ0IsTUFDdENwQyxFQWozQkosU0FBWUMsR0FBS0EsRUFBRyxDQUVoQixJQURBLElBQUllLEVBQUk2aUIsR0FDQ2xjLEVBQUkxSCxFQUFFbk4sT0FBUWtOLEVBQUksaUJBQW9CQyxFQUFJQSxFQUFFcWlCLE1BQU0sSUFBTXJpQixFQUFHOUQsRUFBSSxFQUFHQSxFQUFJd0wsRUFBR3hMLElBQzlFLEdBQUlBLEtBQUs2RCxHQUFLZ0IsRUFBRXRNLFVBQUssRUFBUXNMLEVBQUU3RCxHQUFJQSxFQUFHOEQsR0FBSSxDQUN0Q2UsRUFBSTdFLEVBQ0osTUFBTThELEVBRWRlLEdBQUssRUFDUCxPQUFPLEVBQUlBLEVBQUksS0FBTyxpQkFBb0JmLEVBQUlBLEVBQUV5MkIsT0FBTzExQixHQUFLZixFQUFFZSxHQXkyQnhENGlCLENBQUd6bkIsRUFBRW8rQixLQUNUNXlCLEVBQUlwRSxHQUFFNHNDLFVBQVlsd0MsYUFBYXNELEdBQUU0c0MsV0FDL0IsR0FDRXpzQixHQUFHOFAsR0FBSXh5QixLQUFPaEIsR0FBSzJILEdBQUt4TCxFQUFFakUsSUFBSSxlQUFnQixtREFDbERpRSxFQUFFckUsU0FBUSxTQUFVc0ssRUFBR3FnQixHQUFLdHdCLEtBQUs4TixFQUFFdXFDLGlCQUFpQi9uQixFQUFHcmdCLEtBQU9qUSxNQUM5REEsS0FBS2tpQyxJQUFNbGlDLEtBQUs4TixFQUFFNHBDLGFBQWUxM0MsS0FBS2tpQyxHQUN0QyxvQkFBcUJsaUMsS0FBSzhOLEdBQUs5TixLQUFLOE4sRUFBRW13QyxrQkFBb0JqK0MsS0FBS2c5QixJQUFNaDlCLEtBQUs4TixFQUFFbXdDLGdCQUFrQmorQyxLQUFLZzlCLEdBQ25HLElBQ0k3SixHQUFHbnpCLE1BQU8sRUFBSUEsS0FBS21DLEtBQU9uQyxLQUFLczhCLEVBTXZDLFNBQVl4dUIsR0FBSyxPQUFPc25CLElBQUtkLEdBQUcsSUFBTSxpQkFBb0J4bUIsRUFBRWtlLGNBQVcsSUFBV2xlLEVBQUVpcUMsVUFOekN6VyxDQUFHdGhDLEtBQUs4TixLQUFPOU4sS0FBSzhOLEVBQUVrZSxRQUFVaHNCLEtBQUttQyxFQUFHbkMsS0FBSzhOLEVBQUVpcUMsVUFBWTd5QyxHQUFFbEYsS0FBSzR3QixHQUFJNXdCLE9BQVNBLEtBQUs2USxFQUFJaW5CLEdBQUc5M0IsS0FBSzR3QixHQUFJNXdCLEtBQUttQyxFQUFHbkMsT0FBUUEsS0FBS3d3QixHQUFJLEVBQUl4d0IsS0FBSzhOLEVBQUVzcUMsS0FBS3RxQyxHQUFJOU4sS0FBS3d3QixHQUFJLEVBRWpNLE1BQU92Z0IsR0FDSGlqQixHQUFHbHpCLEtBQU1pUSxLQUtqQmhDLEdBQUUyaUIsR0FBSyxnQkFBYyxJQUFzQjh0QyxJQUFRMStELEtBQUs4TixJQUFNOU4sS0FBS2lRLEVBQUksbUJBQXFCalEsS0FBS21DLEVBQUksZUFBZ0JuQyxLQUFLc3dCLEVBQUksRUFBR3R3QixLQUFLNmlDLGNBQWMsV0FBWTdpQyxLQUFLc3NCLE1BQU0sS0FHM0tyZSxHQUFFcWUsTUFBUSxTQUFVeGUsR0FBSzlOLEtBQUs4TixHQUFLOU4sS0FBSzZPLElBQU03TyxLQUFLNk8sR0FBSSxFQUFJN08sS0FBS2lPLEdBQUksRUFBSWpPLEtBQUs4TixFQUFFd2UsUUFBU3RzQixLQUFLaU8sR0FBSSxFQUFJak8sS0FBS3N3QixFQUFJeGlCLEdBQUssRUFBRzlOLEtBQUs2aUMsY0FBYyxZQUFhN2lDLEtBQUs2aUMsY0FBYyxTQUFVakIsR0FBRzVoQyxRQUN0TGlPLEdBQUV5d0IsRUFBSSxXQUFjMStCLEtBQUs4TixJQUFNOU4sS0FBSzZPLElBQU03TyxLQUFLNk8sR0FBSSxFQUFJN08sS0FBS2lPLEdBQUksRUFBSWpPLEtBQUs4TixFQUFFd2UsUUFBU3RzQixLQUFLaU8sR0FBSSxHQUFLMnpCLEdBQUc1aEMsTUFBTSxJQUFNNnpELEdBQUUza0IsRUFBRXhRLEVBQUVuOEIsS0FBS3ZDLE9BQzVIaU8sR0FBRW9rQixHQUFLLFdBQWNyeUIsS0FBS3FSLElBQU1yUixLQUFLMHdCLEdBQUsxd0IsS0FBS3d3QixHQUFLeHdCLEtBQUtpTyxFQUFJNnpCLEdBQUc5aEMsTUFBUUEsS0FBS3M1QyxPQUM3RXJyQyxHQUFFcXJDLEdBQUssV0FBY3hYLEdBQUc5aEMsT0FtRXhCaU8sR0FBRTRsRCxFQUFJLFdBQWMsSUFDaEIsT0FBTyxFQUFJMXBCLEdBQUVucUMsTUFBUUEsS0FBSzhOLEVBQUVrVSxRQUFVLEVBRTFDLE1BQU9sVSxHQUNILE9BQVEsSUFFWkcsR0FBRTJsRCxFQUFJLFdBQWMsSUFDaEIsT0FBTzV6RCxLQUFLOE4sRUFBSTlOLEtBQUs4TixFQUFFNnBDLGFBQWUsR0FFMUMsTUFBTzdwQyxHQUNILE1BQU8sS0FFWEcsR0FBRWttQixHQUFLLFNBQVVybUIsR0FBSyxHQUFJOU4sS0FBSzhOLEVBQUcsQ0FDOUIsSUFBSWUsRUFBSTdPLEtBQUs4TixFQUFFNnBDLGFBRWYsT0FEQTdwQyxHQUFLLEdBQUtlLEVBQUV5UixRQUFReFMsS0FBT2UsRUFBSUEsRUFBRTBqQixVQUFVemtCLEVBQUVuTixTQUN0Q3dnQyxHQUFHdHlCLEtBRWRaLEdBQUUrakIsR0FBSyxXQUFjLE9BQU9oeUIsS0FBS3N3QixHQUNqQ3JpQixHQUFFb21CLEdBQUssV0FBYyxNQUFPLGlCQUFvQnIwQixLQUFLaVEsRUFBSWpRLEtBQUtpUSxFQUFJaUUsT0FBT2xVLEtBQUtpUSxLQTBDOUVoQyxHQUFJazBCLEdBQUc3L0IsV0FDTDB1QixHQUFLLEVBQ1AvaUIsR0FBRXdDLEVBQUksRUF5Qk54QyxHQUFFMmtCLEdBQUssU0FBVTlrQixHQUNiLEdBQUk5TixLQUFLc3dCLEVBQ0wsR0FBSXR3QixLQUFLc3dCLEVBQUksS0FBTSxHQUFLdHdCLEtBQUt5USxHQUN6QixJQUFLM0MsRUFBRyxDQUNKOU4sS0FBSzI1QyxFQUFJdGlDLEtBQUsydUIsTUFBTSxJQUFNM3VCLEtBQUtJLFVBQy9CM0osRUFBSTlOLEtBQUsyNUMsSUFDVCxJQUdJOXJDLEVBSEFnQixFQUFJLElBQUkyMkIsR0FBRXhsQyxLQUFNQSxLQUFLd1YsRUFBRzFILE9BQUcsR0FBUzBILEVBQUl4VixLQUFLd3dCLEVBSWpELEdBSEF4d0IsS0FBSyswQyxJQUFNdi9CLEVBQWdCbWQsR0FBWG5kLEVBQUlvZCxHQUFHcGQsR0FBVXhWLEtBQUsrMEMsR0FBTXYvQixFQUFJeFYsS0FBSyswQyxHQUNyRCxPQUFTLzBDLEtBQUtNLElBQU11TyxFQUFFaWlCLEVBQUl0YixHQUV0QnhWLEtBQUtxd0IsR0FDTHZpQixFQUFHLENBQ0MsSUFBSyxJQUFJOUQsRUFBSTZELEVBQUksRUFBRzdELEVBQUloSyxLQUFLaU8sRUFBRXROLE9BQVFxSixJQUFLLENBRXBDLElBQUlpRyxFQUFJalEsS0FBS2lPLEVBQUVqRSxHQU9uQixRQUFJLEtBTElpRyxFQURBLGFBQWNBLEVBQUVuQyxHQUF3QixpQkFBbEJtQyxFQUFJQSxFQUFFbkMsRUFBRXl5RCxVQUMxQnR3RCxFQUFFdFAsWUFHTixHQUdKLE1BRUosR0FBSSxNQURKa04sR0FBS29DLEdBQ1MsQ0FDVnBDLEVBQUk3RCxFQUNKLE1BQU04RCxFQUVWLEdBQUksT0FBU0QsR0FBSzdELElBQU1oSyxLQUFLaU8sRUFBRXROLE9BQVMsRUFBRyxDQUN2Q2tOLEVBQUk3RCxFQUFJLEVBQ1IsTUFBTThELEdBR2RELEVBQUksU0FHUkEsRUFBSSxJQUNSQSxFQUFJODBCLEdBQUczaUMsS0FBTTZPLEVBQUdoQixHQUVoQjhpQixHQURBM21CLEVBQUlvK0IsR0FBRXBvQyxLQUFLOHdCLEdBQ04sTUFBT2hqQixHQUNaNmlCLEdBQUUzbUIsRUFBRyxPQUFRLElBQ2JoSyxLQUFLMHdCLEdBQUtDLEdBQUUzbUIsRUFBRyxvQkFBcUJoSyxLQUFLMHdCLEdBQ3pDMlIsR0FBR3JpQyxLQUFNZ0ssR0FDVGhLLEtBQUtNLEdBQUtrVixHQUFLcWIsR0FBRzdtQixFQUFHaEssS0FBS00sRUFBR2tWLEdBQzdCcW5CLEdBQUc3OEIsS0FBSzZPLEVBQUdBLEdBQ1g3TyxLQUFLNHpCLElBQU1qRCxHQUFFM21CLEVBQUcsT0FBUSxRQUN4QmhLLEtBQUtxd0IsSUFBTU0sR0FBRTNtQixFQUFHLE9BQVE2RCxHQUFJOGlCLEdBQUUzbUIsRUFBRyxNQUFPLFFBQVM2RSxFQUFFMHpCLEdBQUksRUFBSTFJLEdBQUdockIsRUFBRzdFLEVBQUcsT0FBUzZ2QixHQUFHaHJCLEVBQUc3RSxFQUFHNkQsR0FDdEY3TixLQUFLeVEsRUFBSSxRQUliLEdBQUt6USxLQUFLeVEsSUFBTTNDLEVBQUk4MEIsR0FBRzVpQyxLQUFNOE4sR0FBSyxHQUFLOU4sS0FBS2lPLEVBQUV0TixRQUFVaEIsR0FBR0ssS0FBSzZPLElBQU0rekIsR0FBRzVpQyxRQTRCckZpTyxHQUFFcWtCLEdBQUssV0FBdUMsR0FBekJ0eUIsS0FBS3FSLEVBQUksS0FBTTB4QixHQUFHL2lDLE1BQVdBLEtBQUt1aUMsS0FBT3ZpQyxLQUFLZzlCLEdBQUssTUFBUWg5QixLQUFLOE4sR0FBSyxHQUFLOU4sS0FBS21xQyxHQUFJLENBQ3BHLElBQUlyOEIsRUFBSSxFQUFJOU4sS0FBS21xQyxFQUNqQm5xQyxLQUFLd1YsRUFBRTZHLEtBQUssK0JBQWlDdk8sR0FDN0M5TixLQUFLc1AsRUFBSTR5QixHQUFFaDlCLEdBQUVsRixLQUFLOHlCLEdBQUk5eUIsTUFBTzhOLEtBRWpDRyxHQUFFNmtCLEdBQUssV0FBYzl5QixLQUFLc1AsSUFBTXRQLEtBQUtzUCxFQUFJLEtBQU10UCxLQUFLd1YsRUFBRTZHLEtBQUssaUNBQWtDcmMsS0FBS3dWLEVBQUU2RyxLQUFLLHdEQUF5RHJjLEtBQUsyaEMsR0FBSSxFQUFJM2hDLEtBQUtnOUIsR0FBSSxFQUFJTixHQUFHMThCLE1BQU8raUMsR0FBRy9pQyxRQUd6TWlPLEdBQUVxbUIsR0FBSyxXQUFjLE1BQVF0MEIsS0FBSzZRLElBQU03USxLQUFLNlEsRUFBSSxLQUFNNnJCLEdBQUcxOEIsTUFBTzI4QixHQUFHMzhCLE1BQU8yaEMsR0FBRSxNQThDN0UxekIsR0FBRXdtQixHQUFLLFNBQVUzbUIsR0FBS0EsR0FBSzlOLEtBQUt3VixFQUFFNkcsS0FBSyxrQ0FBbUNzbEIsR0FBRSxLQUFPM2hDLEtBQUt3VixFQUFFNkcsS0FBSyw2QkFBOEJzbEIsR0FBRSxNQWUvSDF6QixHQUFJMDJCLEdBQUdyaUMsV0FDTHV2QixHQUFLLGFBQ1A1akIsR0FBRTJqQixHQUFLLGFBQ1AzakIsR0FBRTBqQixHQUFLLGFBQ1AxakIsR0FBRXlqQixHQUFLLGFBQ1B6akIsR0FBRTRsQixHQUFLLGFBR1BtUCxHQUFHMWdDLFVBQVV3TCxFQUFJLFNBQVVBLEVBQUdlLEdBQUssT0FBTyxJQUFJNHpCLEdBQUUzMEIsRUFBR2UsSUFvQm5Ea0MsR0FBRTB4QixHQUFHbkcsS0FDTHJ1QixHQUFJdzBCLEdBQUVuZ0MsV0FDSjJwQixpQkFBbUIsU0FBVW5lLEVBQUdlLEVBQUcyRyxFQUFHM0gsR0FBSzQwQixHQUFFeU0sRUFBRWpqQixpQkFBaUIxcEIsS0FBS3ZDLEtBQU04TixFQUFHZSxFQUFHMkcsRUFBRzNILElBQ3RGSSxHQUFFd3dCLG9CQUFzQixTQUFVM3dCLEVBQUdlLEVBQUcyRyxFQUFHM0gsR0FBSzQwQixHQUFFeU0sRUFBRXpRLG9CQUFvQmw4QixLQUFLdkMsS0FBTThOLEVBQUdlLEVBQUcyRyxFQUFHM0gsSUFDNUZJLEdBQUVtbUIsR0FBSyxXQUFjcDBCLEtBQUs4TixFQUFFbUMsRUFBSWpRLEtBQUtpUSxFQUFHalEsS0FBS3N3QixJQUFNdHdCLEtBQUs4TixFQUFFeXBCLEdBQUksR0FBSyxJQUFJenBCLEVBQUk5TixLQUFLOE4sRUFBR2UsRUFBSTdPLEtBQUt3d0IsRUFBR2hiLEVBQUl4VixLQUFLNk8sUUFBSyxFQUFROHlCLEdBQUUsR0FBSTd6QixFQUFFb2lCLEdBQUtyaEIsRUFBR2YsRUFBRXdILEVBQUlFLEdBQUssR0FBSTFILEVBQUU2ekIsRUFBSTd6QixFQUFFdzZDLEVBQUd4NkMsRUFBRWdqQixFQUFJZ00sR0FBR2h2QixFQUFHLEtBQU1BLEVBQUVvaUIsSUFBS3lyQixHQUFHN3RDLElBQzNMRyxHQUFFNkUsTUFBUSxXQUFjcXFCLEdBQUduOUIsS0FBSzhOLElBQ2hDRyxHQUFFd2lCLEdBQUssU0FBVTNpQixHQUFLLEdBQUksaUJBQW9CQSxFQUFHLENBQzdDLElBQUllLEVBQUksR0FDUkEsRUFBRTB4RCxTQUFXenlELEVBQ2IwMEIsR0FBR3hpQyxLQUFLOE4sRUFBR2UsUUFHWDdPLEtBQUtpTyxJQUFLWSxFQUFJLElBQU0weEQsU0FBVzdwQyxHQUFHNW9CLEdBQUkwMEIsR0FBR3hpQyxLQUFLOE4sRUFBR2UsSUFBTTJ6QixHQUFHeGlDLEtBQUs4TixFQUFHQSxJQUN0RUcsR0FBRXl3QixFQUFJLFdBQWMxK0IsS0FBSzhOLEVBQUVtQyxFQUFJLFlBQWFqUSxLQUFLaVEsRUFBR2t0QixHQUFHbjlCLEtBQUs4TixVQUFXOU4sS0FBSzhOLEVBQUcyMEIsR0FBRXlNLEVBQUV4USxFQUFFbjhCLEtBQUt2QyxPQWExRitRLEdBQUVreUIsR0FBSWhLLElBRU5sb0IsR0FBRW15QixHQUFJaEssSUFFTm5vQixHQUFFMHZDLEdBQUc5YixJQUNMOGIsR0FBRW4rQyxVQUFVdXZCLEdBQUssV0FBYzd4QixLQUFLOE4sRUFBRSswQixjQUFjLE1BQ3BENGQsR0FBRW4rQyxVQUFVc3ZCLEdBQUssU0FBVTlqQixHQUFLOU4sS0FBSzhOLEVBQUUrMEIsY0FBYyxJQUFJSSxHQUFHbjFCLEtBQzVEMnlDLEdBQUVuK0MsVUFBVXF2QixHQUFLLFNBQVU3akIsR0FBSzlOLEtBQUs4TixFQUFFKzBCLGNBQWMsSUFBSUssR0FBR3AxQixLQUM1RDJ5QyxHQUFFbitDLFVBQVVvdkIsR0FBSyxXQUFjMXhCLEtBQUs4TixFQUFFKzBCLGNBQWMsTUFnQnBERyxHQUFHMWdDLFVBQVVrK0QsaUJBQW1CeDlCLEdBQUcxZ0MsVUFBVXdMLEVBQzdDMjBCLEdBQUVuZ0MsVUFBVTgxQyxLQUFPM1YsR0FBRW5nQyxVQUFVbXVCLEdBQy9CZ1MsR0FBRW5nQyxVQUFVdVEsS0FBTzR2QixHQUFFbmdDLFVBQVU4eEIsR0FDL0JxTyxHQUFFbmdDLFVBQVV3USxNQUFRMnZCLEdBQUVuZ0MsVUFBVXdRLE1BQ2hDOGxCLEdBQUdnbUMsU0FBVyxFQUNkaG1DLEdBQUdpbUMsUUFBVSxFQUNiam1DLEdBQUc2bkMsV0FBYSxFQUNoQjVuQyxHQUFHNm5DLFNBQVcsV0FDZDFuQyxHQUFHMm5DLFVBQVk3OEIsR0FDZkEsR0FBRWc3QixLQUFPLElBQ1RoN0IsR0FBRTg4QixNQUFRLElBQ1Y5OEIsR0FBRTFvQixNQUFRLElBQ1Ywb0IsR0FBRSs4QixRQUFVLElBQ1p2a0MsR0FBRWg2QixVQUFVdytELE9BQVN4a0MsR0FBRWg2QixVQUFVMnZCLEdBQ2pDNGhDLEdBQUV2eEQsVUFBVXkrRCxXQUFhbE4sR0FBRXZ4RCxVQUFVNnZCLEdBQ3JDMGhDLEdBQUV2eEQsVUFBVTArRCxhQUFlbk4sR0FBRXZ4RCxVQUFVK3hCLEdBQ3ZDdy9CLEdBQUV2eEQsVUFBVTIrRCxpQkFBbUJwTixHQUFFdnhELFVBQVUwdkIsR0FDM0M2aEMsR0FBRXZ4RCxVQUFVNCtELFVBQVlyTixHQUFFdnhELFVBQVV1eEQsRUFDcENBLEdBQUV2eEQsVUFBVTYrRCxnQkFBa0J0TixHQUFFdnhELFVBQVU2eEIsR0FDMUMwL0IsR0FBRXZ4RCxVQUFVOCtELGdCQUFrQnZOLEdBQUV2eEQsVUFBVXN4RCxFQUMxQ0MsR0FBRXZ4RCxVQUFVODFDLEtBQU95YixHQUFFdnhELFVBQVUwdEIsR0FDL0IsSUFDSXF4QyxHQUFZem9DLEdBQ1orbkMsR0FBWTluQyxHQUNaeW9DLEdBQWF0b0MsR0FDYnVvQyxHQUFRMU4sR0MzMENKaGxELEdBZVIsU0FBU1EsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixHQUNwQm5DLEtBQUtxUCxFQUFJQSxFQUFHclAsS0FBS3doRSxlQUFpQngzRCxFQUFHaEssS0FBSys3QixLQUFPMTVCLEVBQUdyQyxLQUFLeWhFLElBQU0xd0QsRUFBRy9RLEtBQUt5L0QsaUJBQW1Cbi9ELEVBQzFGTixLQUFLTSxFQUFJNkIsR0FDVmdPLEdBQWtCLFdBQ2pCLFNBQVNkLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBSytnQixVQUFZMVIsRUFBR3JQLEtBQUswaEUsU0FBVzEzRCxHQUFLLFlBRTdDLE9BQU96SSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLElBQUssQ0FDM0N3RCxJQUFLLFdBQ0QsTUFBTyxjQUFnQjlGLEtBQUswaEUsVUFFaEMxekQsWUFBWSxFQUNaaU8sY0FBYyxJQUNkNU0sRUFBRS9NLFVBQVVxL0QsUUFBVSxTQUFTMzNELEdBQy9CLE9BQU9BLGFBQWFxRixHQUFLckYsRUFBRStXLFlBQWMvZ0IsS0FBSytnQixXQUFhL1csRUFBRTAzRCxXQUFhMWhFLEtBQUswaEUsVUFDaEZyeUQsRUFaYyxHQWFoQixHQUFJLElBQUksRUFBRSx1QkFLZixTQUFTLEtBQ0wsT0FBTyxHQUFFcU0sU0FnQlQsU0FBUyxHQUFFck0sR0FDWCxJQUFLLElBQUlyRixFQUFJLEdBQUkzSCxFQUFJLEVBQUdBLEVBQUk4RCxVQUFVeEYsT0FBUTBCLElBQUsySCxFQUFFM0gsRUFBSSxHQUFLOEQsVUFBVTlELEdBQ3hFLEdBQUksR0FBRXFaLFVBQVksUUFBUyxDQUN2QixJQUFJcGIsRUFBSTBKLEVBQUUvSixJQUFJLElBQ2QsR0FBRWtjLE1BQU1oWCxNQUFNLEdBQUcsRUFBRSxDQUFFLHNCQUF3QmtLLEdBQUsvTyxLQUkxRCxTQUFTLEdBQUUrTyxHQUNQLElBQUssSUFBSXJGLEVBQUksR0FBSTNILEVBQUksRUFBR0EsRUFBSThELFVBQVV4RixPQUFRMEIsSUFBSzJILEVBQUUzSCxFQUFJLEdBQUs4RCxVQUFVOUQsR0FDeEUsR0FBSSxHQUFFcVosVUFBWSxRQUFTLENBQ3ZCLElBQUlwYixFQUFJMEosRUFBRS9KLElBQUksSUFDZCxHQUFFNEUsTUFBTU0sTUFBTSxHQUFHLEVBQUUsQ0FBRSxzQkFBd0JrSyxHQUFLL08sS0FJMUQsU0FBUyxHQUFFK08sR0FDUCxJQUFLLElBQUlyRixFQUFJLEdBQUkzSCxFQUFJLEVBQUdBLEVBQUk4RCxVQUFVeEYsT0FBUTBCLElBQUsySCxFQUFFM0gsRUFBSSxHQUFLOEQsVUFBVTlELEdBQ3hFLEdBQUksR0FBRXFaLFVBQVksT0FBUSxDQUN0QixJQUFJcGIsRUFBSTBKLEVBQUUvSixJQUFJLElBQ2QsR0FBRXFjLEtBQUtuWCxNQUFNLEdBQUcsRUFBRSxDQUFFLHNCQUF3QmtLLEdBQUsvTyxLQU1yRCxTQUFTLEdBQUUrTyxHQUNYLEdBQUksaUJBQW1CQSxFQUFHLE9BQU9BLEVBQ2pDLElBQ0ksT0FBT3JGLEVBQUlxRixFQUFHaE0sS0FBS0MsVUFBVTBHLEdBQy9CLE1BQU9BLEdBRUwsT0FBT3FGLEVBa0J5RCxJQUFJckYsRUEwQnhFLFNBQVMsR0FBRXFGLFFBQ1gsSUFBV0EsSUFBTUEsRUFBSSxvQkFHakIsSUFBSXJGLEVBQUksZ0RBQWtEcUYsRUFJMUQsTUFBTSxHQUFFckYsR0FBSSxJQUFJdUIsTUFBTXZCLEdBUzlCLFNBQVMsR0FBRXFGLEVBQUdyRixHQUNWcUYsR0FBSyxLQU1MLFNBQVMsR0FBRUEsRUFFZnJGLEdBQ0ksT0FBT3FGLEVBdUJQLFNBQVMsR0FBRUEsR0FFWCxJQUFJckYsRUFFSixvQkFBc0J3SSxPQUFTQSxLQUFLc1IsUUFBVXRSLEtBQUt1UixVQUFXMWhCLEVBQUksSUFBSXdoQixXQUFXeFUsR0FDakYsR0FBSXJGLEdBQUssbUJBQXFCQSxFQUFFZ2EsZ0JBQWlCaGEsRUFBRWdhLGdCQUFnQjNoQixRQUVuRSxJQUFLLElBQUkwTyxFQUFJLEVBQUdBLEVBQUkxQixFQUFHMEIsSUFBSzFPLEVBQUUwTyxHQUFLc0csS0FBSzJ1QixNQUFNLElBQU0zdUIsS0FBS0ksVUFDekQsT0FBT3BWLEVBa0JQLElBQUksR0FBa0IsV0FDdEIsU0FBU2dOLEtBQ1QsT0FBT0EsRUFBRWtoQixFQUFJLFdBQ1QsSUFFQSxJQUFJbGhCLEVBQUksaUVBQWtFckYsRUFBSXFOLEtBQUsydUIsTUFBTSxJQUFNMzJCLEVBQUUxTyxRQUFVME8sRUFBRTFPLE9BQVEwQixFQUFJLEdBRXZIQSxFQUFFMUIsT0FBUyxJQUFNLElBQUssSUFBSW9RLEVBQUksR0FBRSxJQUFLelEsRUFBSSxFQUFHQSxFQUFJeVEsRUFBRXBRLFNBQVVMLEVBRzlEK0IsRUFBRTFCLE9BQVMsSUFBTW9RLEVBQUV6USxHQUFLMEosSUFBTTNILEdBQUtnTixFQUFFazFCLE9BQU94ekIsRUFBRXpRLEdBQUsrTyxFQUFFMU8sU0FDckQsT0FBTzBCLEdBQ1JnTixFQVptQixHQWUxQixTQUFTLEdBQUVBLEVBQUdyRixHQUNWLE9BQU9xRixFQUFJckYsR0FBSyxFQUFJcUYsRUFBSXJGLEVBQUksRUFBSSxFQUdhLFNBQVMsR0FBRXFGLEVBQUdyRixFQUFHM0gsR0FDOUQsT0FBT2dOLEVBQUUxTyxTQUFXcUosRUFBRXJKLFFBQVUwTyxFQUFFdXlELE9BQU0sU0FBVXZ5RCxFQUFHMEIsR0FDakQsT0FBTzFPLEVBQUVnTixFQUFHckYsRUFBRStHLE9BT2xCLFNBQVMsR0FBRTFCLEdBRVgsT0FBT0EsRUFBSSxLQWtCWCxTQUFTLEdBQUVBLEdBQ1gsSUFBSXJGLEVBQUksRUFDUixJQUFLLElBQUkzSCxLQUFLZ04sRUFBRzlOLE9BQU9lLFVBQVU4TCxlQUFlN0wsS0FBSzhNLEVBQUdoTixJQUFNMkgsSUFDL0QsT0FBT0EsRUFHWCxTQUFTLEdBQUVxRixFQUFHckYsR0FDVixJQUFLLElBQUkzSCxLQUFLZ04sRUFBRzlOLE9BQU9lLFVBQVU4TCxlQUFlN0wsS0FBSzhNLEVBQUdoTixJQUFNMkgsRUFBRTNILEVBQUdnTixFQUFFaE4sSUFHMUUsU0FBUyxHQUFFZ04sR0FDUCxJQUFLLElBQUlyRixLQUFLcUYsRUFBRyxHQUFJOU4sT0FBT2UsVUFBVThMLGVBQWU3TCxLQUFLOE0sRUFBR3JGLEdBQUksT0FBTyxFQUN4RSxPQUFPLEVBd0JQLElBQUksR0FBa0IsV0FDdEIsU0FBU3FGLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBS3N3QixFQUFJamhCLEVBQUdyUCxLQUFLd3dCLEVBQUl4bUIsRUFPckJoSyxLQUFLbVEsRUFBSSxHQUdiLE9BQU9kLEVBQUUvTSxVQUFVd0QsSUFBTSxTQUFTdUosR0FDOUIsSUFBSXJGLEVBQUloSyxLQUFLc3dCLEVBQUVqaEIsR0FBSWhOLEVBQUlyQyxLQUFLbVEsRUFBRW5HLEdBQzlCLFFBQUksSUFBVzNILEVBQUcsSUFBSyxJQUFJME8sRUFBSSxFQUFHelEsRUFBSStCLEVBQUcwTyxFQUFJelEsRUFBRUssT0FBUW9RLElBQUssQ0FDeEQsSUFBSTVPLEVBQUk3QixFQUFFeVEsR0FBSXdmLEVBQUlwdUIsRUFBRSxHQUFJbU4sRUFBSW5OLEVBQUUsR0FDOUIsR0FBSW5DLEtBQUt3d0IsRUFBRUQsRUFBR2xoQixHQUFJLE9BQU9DLElBRTlCRCxFQUFFL00sVUFBVXlXLElBQU0sU0FBUzFKLEdBQzFCLFlBQU8sSUFBV3JQLEtBQUs4RixJQUFJdUosSUFFV0EsRUFBRS9NLFVBQVV5RCxJQUFNLFNBQVNzSixFQUFHckYsR0FDcEUsSUFBSTNILEVBQUlyQyxLQUFLc3dCLEVBQUVqaEIsR0FBSTBCLEVBQUkvUSxLQUFLbVEsRUFBRTlOLEdBQzlCLFFBQUksSUFBVzBPLEVBQUcsQ0FDZCxJQUFLLElBQUl6USxFQUFJLEVBQUdBLEVBQUl5USxFQUFFcFEsT0FBUUwsSUFBSyxHQUFJTixLQUFLd3dCLEVBQUV6ZixFQUFFelEsR0FBRyxHQUFJK08sR0FBSSxZQUFhMEIsRUFBRXpRLEdBQUssQ0FBRStPLEVBQUdyRixJQUNwRitHLEVBQUV0UixLQUFLLENBQUU0UCxFQUFHckYsU0FDVGhLLEtBQUttUSxFQUFFOU4sR0FBSyxDQUFFLENBQUVnTixFQUFHckYsS0FLOUJxRixFQUFFL00sVUFBVTBYLE9BQVMsU0FBUzNLLEdBQzFCLElBQUlyRixFQUFJaEssS0FBS3N3QixFQUFFamhCLEdBQUloTixFQUFJckMsS0FBS21RLEVBQUVuRyxHQUM5QixRQUFJLElBQVczSCxFQUFHLE9BQU8sRUFDekIsSUFBSyxJQUFJME8sRUFBSSxFQUFHQSxFQUFJMU8sRUFBRTFCLE9BQVFvUSxJQUFLLEdBQUkvUSxLQUFLd3dCLEVBQUVudUIsRUFBRTBPLEdBQUcsR0FBSTFCLEdBQUksT0FBTyxJQUFNaE4sRUFBRTFCLGNBQWdCWCxLQUFLbVEsRUFBRW5HLEdBQUszSCxFQUFFa0wsT0FBT3dELEVBQUcsSUFDbEgsRUFDQSxPQUFPLEdBQ1IxQixFQUFFL00sVUFBVXFELFFBQVUsU0FBUzBKLEdBQzlCLEdBQUVyUCxLQUFLbVEsR0FBRyxTQUFVbkcsRUFBRzNILEdBQ25CLElBQUssSUFBSTBPLEVBQUksRUFBR3pRLEVBQUkrQixFQUFHME8sRUFBSXpRLEVBQUVLLE9BQVFvUSxJQUFLLENBQ3RDLElBQUk1TyxFQUFJN0IsRUFBRXlRLEdBQUl3ZixFQUFJcHVCLEVBQUUsR0FBSW1OLEVBQUluTixFQUFFLEdBQzlCa04sRUFBRWtoQixFQUFHamhCLFFBR2RELEVBQUUvTSxVQUFVZ21ELEVBQUksV0FDZixPQUFPLEdBQUV0b0QsS0FBS21RLElBQ2ZkLEVBOUNtQixHQStDckIsR0FBSSxDQUlMd3lELEdBQUksS0FFSkMsVUFBVyxZQUVYQyxRQUFTLFVBT1RDLGlCQUFrQixtQkFRbEJDLGtCQUFtQixvQkFFbkJDLFVBQVcsWUFLWEMsZUFBZ0IsaUJBUWhCQyxrQkFBbUIsb0JBS25CQyxnQkFBaUIsa0JBS2pCQyxtQkFBb0IscUJBcUJwQkMsb0JBQXFCLHNCQVFyQkMsUUFBUyxVQWdCVEMsYUFBYyxlQUVkQyxjQUFlLGdCQUtmdm9ELFNBQVUsV0FRVndvRCxZQUFhLGNBRWJDLFVBQVcsYUFDWnZ4RCxHQUFrQixTQUFTckgsR0FDMUIsU0FBUzNILEVBQUVnTixFQUFHaE4sR0FDVixJQUFJME8sRUFBSS9RLEtBQ1IsT0FBUStRLEVBQUkvRyxFQUFFekgsS0FBS3ZDLEtBQU1xQyxJQUFNckMsTUFBTXNULEtBQU9qRSxFQUFHMEIsRUFBRWtDLFFBQVU1USxFQUFHME8sRUFBRXJPLEtBQU8sZ0JBSXZFcU8sRUFBRWhSLFNBQVcsV0FDVCxPQUFPZ1IsRUFBRXJPLEtBQU8sV0FBYXFPLEVBQUV1QyxLQUFPLE1BQVF2QyxFQUFFa0MsU0FDakRsQyxFQUVQLE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJM0gsRUFYQyxDQVluQmtKLE9BQVF1bEIsR0FBa0IsV0FZeEIsU0FBU3poQixFQUFFQSxFQUFHckYsR0FDVixHQUFJaEssS0FBSzZpRSxRQUFVeHpELEVBQUdyUCxLQUFLOGlFLFlBQWM5NEQsRUFBR0EsRUFBSSxFQUFHLE1BQU0sSUFBSXFILEdBQUUsR0FBRTJ3RCxpQkFBa0IsdUNBQXlDaDRELEdBQzVILEdBQUlBLEdBQUssSUFBSyxNQUFNLElBQUlxSCxHQUFFLEdBQUUyd0QsaUJBQWtCLHVDQUF5Q2g0RCxHQUN2RixHQUFJcUYsR0FBSyxZQUFhLE1BQU0sSUFBSWdDLEdBQUUsR0FBRTJ3RCxpQkFBa0IsbUNBQXFDM3lELEdBRW5GLEdBQUlBLEdBQUssYUFBYyxNQUFNLElBQUlnQyxHQUFFLEdBQUUyd0QsaUJBQWtCLG1DQUFxQzN5RCxHQU1qRyxPQUFPQSxFQUFFc00sSUFBTSxXQUNsQixPQUFPdE0sRUFBRTB6RCxXQUFXdnhELEtBQUttSyxRQVM3QnRNLEVBQUUyekQsU0FBVyxTQUFTaDVELEdBQ2xCLE9BQU9xRixFQUFFMHpELFdBQVcvNEQsRUFBRXlILFlBVTFCcEMsRUFBRTB6RCxXQUFhLFNBQVMvNEQsR0FDcEIsSUFBSTNILEVBQUlnVixLQUFLMnVCLE1BQU1oOEIsRUFBSSxLQUN2QixPQUFPLElBQUlxRixFQUFFaE4sRUFBRyxLQUFPMkgsRUFBSSxJQUFNM0gsS0FTckNnTixFQUFFL00sVUFBVTJnRSxPQUFTLFdBQ2pCLE9BQU8sSUFBSXp4RCxLQUFLeFIsS0FBS2tqRSxhQVN6Qjd6RCxFQUFFL00sVUFBVTRnRSxTQUFXLFdBQ25CLE9BQU8sSUFBTWxqRSxLQUFLNmlFLFFBQVU3aUUsS0FBSzhpRSxZQUFjLEtBQ2hEenpELEVBQUUvTSxVQUFVNC9CLEVBQUksU0FBUzd5QixHQUN4QixPQUFPclAsS0FBSzZpRSxVQUFZeHpELEVBQUV3ekQsUUFBVSxHQUFFN2lFLEtBQUs4aUUsWUFBYXp6RCxFQUFFeXpELGFBQWUsR0FBRTlpRSxLQUFLNmlFLFFBQVN4ekQsRUFBRXd6RCxVQVEvRnh6RCxFQUFFL00sVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDM0IsT0FBT0EsRUFBRXd6RCxVQUFZN2lFLEtBQUs2aUUsU0FBV3h6RCxFQUFFeXpELGNBQWdCOWlFLEtBQUs4aUUsYUFDN0R6ekQsRUFBRS9NLFVBQVV2QyxTQUFXLFdBQ3RCLE1BQU8scUJBQXVCQyxLQUFLNmlFLFFBQVUsaUJBQW1CN2lFLEtBQUs4aUUsWUFBYyxLQUNwRnp6RCxFQUFFL00sVUFBVW93QixPQUFTLFdBQ3BCLE1BQU8sQ0FDSG13QyxRQUFTN2lFLEtBQUs2aUUsUUFDZEMsWUFBYTlpRSxLQUFLOGlFLGNBTzFCenpELEVBQUUvTSxVQUFVNmlDLFFBQVUsV0FPbEIsSUFBSTkxQixFQUFJclAsS0FBSzZpRSxVQUFXLFlBRWhCLE9BQU8zdUQsT0FBTzdFLEdBQUc4ekQsU0FBUyxHQUFJLEtBQU8sSUFBTWp2RCxPQUFPbFUsS0FBSzhpRSxhQUFhSyxTQUFTLEVBQUcsTUFDekY5ekQsRUFwR3FCLEdBcUd2QndtQixHQUFrQixXQUNuQixTQUFTeG1CLEVBQUVBLEdBQ1ByUCxLQUFLb2pFLFVBQVkvekQsRUFFckIsT0FBT0EsRUFBRXdCLEVBQUksU0FBUzdHLEdBQ2xCLE9BQU8sSUFBSXFGLEVBQUVyRixJQUNkcUYsRUFBRXFJLElBQU0sV0FDUCxPQUFPLElBQUlySSxFQUFFLElBQUl5aEIsR0FBRSxFQUFHLEtBQ3ZCemhCLEVBQUUvTSxVQUFVb3VCLEVBQUksU0FBU3JoQixHQUN4QixPQUFPclAsS0FBS29qRSxVQUFVbGhDLEVBQUU3eUIsRUFBRSt6RCxZQUMzQi96RCxFQUFFL00sVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDOUIsT0FBT3JQLEtBQUtvakUsVUFBVXpCLFFBQVF0eUQsRUFBRSt6RCxZQUV5Qy96RCxFQUFFL00sVUFBVXEzQyxFQUFJLFdBRXpGLE9BQU8sSUFBTTM1QyxLQUFLb2pFLFVBQVVQLFFBQVU3aUUsS0FBS29qRSxVQUFVTixZQUFjLEtBQ3BFenpELEVBQUUvTSxVQUFVdkMsU0FBVyxXQUN0QixNQUFPLG1CQUFxQkMsS0FBS29qRSxVQUFVcmpFLFdBQWEsS0FDekRzUCxFQUFFL00sVUFBVW9OLEVBQUksV0FDZixPQUFPMVAsS0FBS29qRSxXQUNiL3pELEVBcEJnQixHQXFCbEIsR0FBa0IsV0FDbkIsU0FBU0EsRUFBRUEsRUFBR3JGLEVBQUczSCxRQUNiLElBQVcySCxFQUFJQSxFQUFJLEVBQUlBLEVBQUlxRixFQUFFMU8sUUFBVSxVQUFLLElBQVcwQixFQUFJQSxFQUFJZ04sRUFBRTFPLE9BQVNxSixFQUFJM0gsRUFBSWdOLEVBQUUxTyxPQUFTcUosR0FBSyxLQUNsR2hLLEtBQUtxakUsU0FBV2gwRCxFQUFHclAsS0FBS3FWLE9BQVNyTCxFQUFHaEssS0FBS2lPLEVBQUk1TCxFQUVqRCxPQUFPZCxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLFNBQVUsQ0FDaER3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtpTyxHQUVoQkQsWUFBWSxFQUNaaU8sY0FBYyxJQUNkNU0sRUFBRS9NLFVBQVVxL0QsUUFBVSxTQUFTMzNELEdBQy9CLE9BQU8sSUFBTXFGLEVBQUVrekIsRUFBRXZpQyxLQUFNZ0ssSUFDeEJxRixFQUFFL00sVUFBVWdoRSxNQUFRLFNBQVN0NUQsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUFLcWpFLFNBQVM3Z0UsTUFBTXhDLEtBQUtxVixPQUFRclYsS0FBS3VqRSxTQUM5QyxPQUFPdjVELGFBQWFxRixFQUFJckYsRUFBRXJFLFNBQVEsU0FBVTBKLEdBQ3hDaE4sRUFBRTVDLEtBQUs0UCxNQUNMaE4sRUFBRTVDLEtBQUt1SyxHQUFJaEssS0FBS2tGLEVBQUU3QyxJQUUrQmdOLEVBQUUvTSxVQUFVaWhFLE1BQVEsV0FDM0UsT0FBT3ZqRSxLQUFLcVYsT0FBU3JWLEtBQUtXLFFBQzNCME8sRUFBRS9NLFVBQVVtTyxFQUFJLFNBQVNwQixHQUN4QixPQUFPQSxPQUFJLElBQVdBLEVBQUksRUFBSUEsRUFBR3JQLEtBQUtrRixFQUFFbEYsS0FBS3FqRSxTQUFVcmpFLEtBQUtxVixPQUFTaEcsRUFBR3JQLEtBQUtXLE9BQVMwTyxJQUN2RkEsRUFBRS9NLFVBQVU0c0MsRUFBSSxXQUNmLE9BQU9sdkMsS0FBS2tGLEVBQUVsRixLQUFLcWpFLFNBQVVyakUsS0FBS3FWLE9BQVFyVixLQUFLVyxPQUFTLElBQ3pEME8sRUFBRS9NLFVBQVVnNkIsRUFBSSxXQUNmLE9BQU90OEIsS0FBS3FqRSxTQUFTcmpFLEtBQUtxVixTQUMzQmhHLEVBQUUvTSxVQUFVaTFCLEVBQUksV0FDZixPQUFPdjNCLEtBQUs4RixJQUFJOUYsS0FBS1csT0FBUyxJQUMvQjBPLEVBQUUvTSxVQUFVd0QsSUFBTSxTQUFTdUosR0FDMUIsT0FBT3JQLEtBQUtxakUsU0FBU3JqRSxLQUFLcVYsT0FBU2hHLElBQ3BDQSxFQUFFL00sVUFBVWdtRCxFQUFJLFdBQ2YsT0FBTyxJQUFNdG9ELEtBQUtXLFFBQ25CME8sRUFBRS9NLFVBQVU2bkMsRUFBSSxTQUFTOTZCLEdBQ3hCLEdBQUlBLEVBQUUxTyxPQUFTWCxLQUFLVyxPQUFRLE9BQU8sRUFDbkMsSUFBSyxJQUFJcUosRUFBSSxFQUFHQSxFQUFJaEssS0FBS1csT0FBUXFKLElBQUssR0FBSWhLLEtBQUs4RixJQUFJa0UsS0FBT3FGLEVBQUV2SixJQUFJa0UsR0FBSSxPQUFPLEVBQzNFLE9BQU8sR0FDUnFGLEVBQUUvTSxVQUFVMDZCLEVBQUksU0FBUzN0QixHQUN4QixHQUFJclAsS0FBS1csT0FBUyxJQUFNME8sRUFBRTFPLE9BQVEsT0FBTyxFQUN6QyxJQUFLLElBQUlxSixFQUFJLEVBQUdBLEVBQUloSyxLQUFLVyxPQUFRcUosSUFBSyxHQUFJaEssS0FBSzhGLElBQUlrRSxLQUFPcUYsRUFBRXZKLElBQUlrRSxHQUFJLE9BQU8sRUFDM0UsT0FBTyxHQUNScUYsRUFBRS9NLFVBQVVxRCxRQUFVLFNBQVMwSixHQUM5QixJQUFLLElBQUlyRixFQUFJaEssS0FBS3FWLE9BQVFoVCxFQUFJckMsS0FBS3VqRSxRQUFTdjVELEVBQUkzSCxFQUFHMkgsSUFBS3FGLEVBQUVyUCxLQUFLcWpFLFNBQVNyNUQsS0FDekVxRixFQUFFL00sVUFBVXl5QyxFQUFJLFdBQ2YsT0FBTy8wQyxLQUFLcWpFLFNBQVM3Z0UsTUFBTXhDLEtBQUtxVixPQUFRclYsS0FBS3VqRSxVQUM5Q2wwRCxFQUFFa3pCLEVBQUksU0FBU2x6QixFQUFHckYsR0FDakIsSUFBSyxJQUFJM0gsRUFBSWdWLEtBQUtLLElBQUlySSxFQUFFMU8sT0FBUXFKLEVBQUVySixRQUFTb1EsRUFBSSxFQUFHQSxFQUFJMU8sRUFBRzBPLElBQUssQ0FDMUQsSUFBSXpRLEVBQUkrTyxFQUFFdkosSUFBSWlMLEdBQUk1TyxFQUFJNkgsRUFBRWxFLElBQUlpTCxHQUM1QixHQUFJelEsRUFBSTZCLEVBQUcsT0FBUSxFQUNuQixHQUFJN0IsRUFBSTZCLEVBQUcsT0FBTyxFQUV0QixPQUFPa04sRUFBRTFPLE9BQVNxSixFQUFFckosUUFBVSxFQUFJME8sRUFBRTFPLE9BQVNxSixFQUFFckosT0FBUyxFQUFJLEdBQzdEME8sRUFwRGdCLEdBcURsQixHQUFrQixTQUFTckYsR0FDNUIsU0FBUzNILElBQ0wsT0FBTyxPQUFTMkgsR0FBS0EsRUFBRTdFLE1BQU1uRixLQUFNbUcsWUFBY25HLEtBRXJELE9BQU8sRUFBRXFDLEVBQUcySCxHQUFJM0gsRUFBRUMsVUFBVTRDLEVBQUksU0FBU21LLEVBQUdyRixFQUFHK0csR0FDM0MsT0FBTyxJQUFJMU8sRUFBRWdOLEVBQUdyRixFQUFHK0csSUFDcEIxTyxFQUFFQyxVQUFVNG5DLEVBQUksV0FJZixPQUFPbHFDLEtBQUsrMEMsSUFBSTEwQyxLQUFLLE1BQ3RCZ0MsRUFBRUMsVUFBVXZDLFNBQVcsV0FDdEIsT0FBT0MsS0FBS2txQyxLQU9oQjduQyxFQUFFK08sRUFBSSxXQUNGLElBQUssSUFBSS9CLEVBQUksR0FBSXJGLEVBQUksRUFBR0EsRUFBSTdELFVBQVV4RixPQUFRcUosSUFBS3FGLEVBQUVyRixHQUFLN0QsVUFBVTZELEdBSTVELElBQUssSUFBSStHLEVBQUksR0FBSXpRLEVBQUksRUFBRzZCLEVBQUlrTixFQUFHL08sRUFBSTZCLEVBQUV4QixPQUFRTCxJQUFLLENBQ3RELElBQUlpd0IsRUFBSXB1QixFQUFFN0IsR0FDVixHQUFJaXdCLEVBQUVqUSxRQUFRLE9BQVMsRUFBRyxNQUFNLElBQUlqUCxHQUFFLEdBQUUyd0QsaUJBQWtCLG9CQUFzQnp4QyxFQUFJLHlDQUV4RXhmLEVBQUV0UixLQUFLMEYsTUFBTTRMLEVBQUd3ZixFQUFFSixNQUFNLEtBQUt2a0IsUUFBTyxTQUFVeUQsR0FDdEQsT0FBT0EsRUFBRTFPLE9BQVMsTUFHMUIsT0FBTyxJQUFJMEIsRUFBRTBPLElBQ2QxTyxFQUFFdXhELEVBQUksV0FDTCxPQUFPLElBQUl2eEQsRUFBRSxLQUNkQSxFQW5DZ0IsQ0FvQ3JCLElBQUksR0FBSSwyQkFBNEIsR0FBa0IsU0FBUzJILEdBQzdELFNBQVMzSCxJQUNMLE9BQU8sT0FBUzJILEdBQUtBLEVBQUU3RSxNQUFNbkYsS0FBTW1HLFlBQWNuRyxLQUVyRCxPQUFPLEVBQUVxQyxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVU0QyxFQUFJLFNBQVNtSyxFQUFHckYsRUFBRytHLEdBQzNDLE9BQU8sSUFBSTFPLEVBQUVnTixFQUFHckYsRUFBRytHLElBTXZCMU8sRUFBRStsQyxFQUFJLFNBQVMvNEIsR0FDWCxPQUFPLEdBQUV6TSxLQUFLeU0sSUFDZmhOLEVBQUVDLFVBQVU0bkMsRUFBSSxXQUNmLE9BQU9scUMsS0FBSyswQyxJQUFJOTBDLEtBQUksU0FBVW9QLEdBQzFCLE9BQU9BLEVBQUlBLEVBQUVsTCxRQUFRLEtBQU0sUUFBUUEsUUFBUSxJQUFLLE9BQVE5QixFQUFFK2xDLEVBQUUvNEIsS0FBT0EsRUFBSSxJQUFNQSxFQUFJLEtBQ2pGQSxLQUNBaFAsS0FBSyxNQUNWZ0MsRUFBRUMsVUFBVXZDLFNBQVcsV0FDdEIsT0FBT0MsS0FBS2txQyxLQUtoQjduQyxFQUFFQyxVQUFVd3VCLEVBQUksV0FDWixPQUFPLElBQU05d0IsS0FBS1csUUFBVSxhQUFlWCxLQUFLOEYsSUFBSSxJQUt4RHpELEVBQUUwdkIsRUFBSSxXQUNGLE9BQU8sSUFBSTF2QixFQUFFLENBQUUsY0FZbkJBLEVBQUVzK0MsRUFBSSxTQUFTdHhDLEdBQ1gsSUFBSyxJQUFJckYsRUFBSSxHQUFJK0csRUFBSSxHQUFJelEsRUFBSSxFQUFHNkIsRUFBSSxXQUNoQyxHQUFJLElBQU00TyxFQUFFcFEsT0FBUSxNQUFNLElBQUkwUSxHQUFFLEdBQUUyd0QsaUJBQWtCLHVCQUF5QjN5RCxFQUFJLDZFQUNqRnJGLEVBQUV2SyxLQUFLc1IsR0FBSUEsRUFBSSxJQUNoQndmLEdBQUksRUFBSWp3QixFQUFJK08sRUFBRTFPLFFBQVUsQ0FDdkIsSUFBSTJPLEVBQUlELEVBQUUvTyxHQUNWLEdBQUksT0FBU2dQLEVBQUcsQ0FDWixHQUFJaFAsRUFBSSxJQUFNK08sRUFBRTFPLE9BQVEsTUFBTSxJQUFJMFEsR0FBRSxHQUFFMndELGlCQUFrQix1Q0FBeUMzeUQsR0FDakcsSUFBSXZCLEVBQUl1QixFQUFFL08sRUFBSSxHQUNkLEdBQUksT0FBU3dOLEdBQUssTUFBUUEsR0FBSyxNQUFRQSxFQUFHLE1BQU0sSUFBSXVELEdBQUUsR0FBRTJ3RCxpQkFBa0IscUNBQXVDM3lELEdBQ2pIMEIsR0FBS2pELEVBQUd4TixHQUFLLE1BQ1YsTUFBUWdQLEdBQUtpaEIsR0FBS0EsRUFBR2p3QixLQUFPLE1BQVFnUCxHQUFLaWhCLEdBQUt4ZixHQUFLekIsRUFBR2hQLE1BQVE2QixJQUFLN0IsS0FFOUUsR0FBSTZCLElBQUtvdUIsRUFBRyxNQUFNLElBQUlsZixHQUFFLEdBQUUyd0QsaUJBQWtCLDJCQUE2QjN5RCxHQUN6RSxPQUFPLElBQUloTixFQUFFMkgsSUFDZDNILEVBQUV1eEQsRUFBSSxXQUNMLE9BQU8sSUFBSXZ4RCxFQUFFLEtBQ2RBLEVBNURpRCxDQTZEdEQsSUFBSSxHQUFrQixXQUNwQixTQUFTZ04sRUFBRUEsR0FDUHJQLEtBQUswK0MsS0FBT3J2QyxFQUVoQixPQUFPQSxFQUFFbTJCLEVBQUksU0FBU3g3QixHQUNsQixPQUFPLElBQUlxRixFQUFFLEdBQUUrQixFQUFFcEgsS0FDbEJxRixFQUFFaUcsRUFBSSxTQUFTdEwsR0FDZCxPQUFPLElBQUlxRixFQUFFLEdBQUUrQixFQUFFcEgsR0FBR3lHLEVBQUUsS0FFNENwQixFQUFFL00sVUFBVStPLEVBQUksU0FBU2hDLEdBQzNGLE9BQU9yUCxLQUFLMCtDLEtBQUsvOUMsUUFBVSxHQUFLWCxLQUFLMCtDLEtBQUs1NEMsSUFBSTlGLEtBQUswK0MsS0FBSy85QyxPQUFTLEtBQU8wTyxHQUN6RUEsRUFBRS9NLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBQzlCLE9BQU8sT0FBU0EsR0FBSyxJQUFNLEdBQUVrekIsRUFBRXZpQyxLQUFLMCtDLEtBQU1ydkMsRUFBRXF2QyxPQUM3Q3J2QyxFQUFFL00sVUFBVXZDLFNBQVcsV0FDdEIsT0FBT0MsS0FBSzArQyxLQUFLMytDLFlBQ2xCc1AsRUFBRWt6QixFQUFJLFNBQVNsekIsRUFBR3JGLEdBQ2pCLE9BQU8sR0FBRXU0QixFQUFFbHpCLEVBQUVxdkMsS0FBTTEwQyxFQUFFMDBDLE9BQ3RCcnZDLEVBQUVxdkIsRUFBSSxTQUFTcnZCLEdBQ2QsT0FBT0EsRUFBRTFPLE9BQVMsR0FBSyxHQVEzQjBPLEVBQUVzeUIsRUFBSSxTQUFTMzNCLEdBQ1gsT0FBTyxJQUFJcUYsRUFBRSxJQUFJLEdBQUVyRixFQUFFeEgsV0FDdEI2TSxFQTVCaUIsR0FrRXhCLFNBQVMsR0FBRUEsR0FDUCxPQUFPLE1BQVFBLEVBRzZCLFNBQVMsR0FBRUEsR0FHdkQsT0FBTyxJQUFNQSxHQUFLLEVBQUlBLElBQUssSUFNM0IsU0FBUyxHQUFFQSxHQUNYLE1BQU8saUJBQW1CQSxHQUFLaVMsT0FBT2tpRCxVQUFVbjBELEtBQU8sR0FBRUEsSUFBTUEsR0FBS2lTLE9BQU9taUQsa0JBQW9CcDBELEdBQUtpUyxPQUFPb2lELGlCQW9CL0csSUFBSTlQLEdBQUksU0FBU3ZrRCxFQUFHckYsRUFBRzNILEVBQUcwTyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsUUFDL0IsSUFBV3ZtQixJQUFNQSxFQUFJLFdBQU8sSUFBVzNILElBQU1BLEVBQUksU0FBSyxJQUFXME8sSUFBTUEsRUFBSSxTQUMzRSxJQUFXelEsSUFBTUEsRUFBSSxXQUFPLElBQVc2QixJQUFNQSxFQUFJLFdBQU8sSUFBV291QixJQUFNQSxFQUFJLE1BQzdFdndCLEtBQUswK0MsS0FBT3J2QyxFQUFHclAsS0FBSzJqRSxnQkFBa0IzNUQsRUFBR2hLLEtBQUs0akUsUUFBVXZoRSxFQUFHckMsS0FBSzZqRSxRQUFVOXlELEVBQUcvUSxLQUFLdWpFLE1BQVFqakUsRUFDMUZOLEtBQUs4akUsUUFBVTNoRSxFQUFHbkMsS0FBSytqRSxNQUFReHpDLEVBQUd2d0IsS0FBSzhqQyxFQUFJLE1BVTNDLFNBQVMsR0FBRXowQixFQUFHckYsRUFBRzNILEVBQUcwTyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsR0FDN0IsWUFBTyxJQUFXdm1CLElBQU1BLEVBQUksV0FBTyxJQUFXM0gsSUFBTUEsRUFBSSxTQUFLLElBQVcwTyxJQUFNQSxFQUFJLFNBQ2xGLElBQVd6USxJQUFNQSxFQUFJLFdBQU8sSUFBVzZCLElBQU1BLEVBQUksV0FBTyxJQUFXb3VCLElBQU1BLEVBQUksTUFDN0UsSUFBSXFqQyxHQUFFdmtELEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxFQUFHNkIsRUFBR291QixHQUc1QixTQUFTeXpDLEdBQUczMEQsR0FDUixJQUFJckYsRUFBSSxHQUFFcUYsR0FDVixHQUFJLE9BQVNyRixFQUFFODVCLEVBQUcsQ0FDZCxJQUFJemhDLEVBQUkySCxFQUFFMDBDLEtBQUt4VSxJQUNmLE9BQVNsZ0MsRUFBRTI1RCxrQkFBb0J0aEUsR0FBSyxPQUFTMkgsRUFBRTI1RCxpQkFBa0J0aEUsR0FBSyxNQUFPQSxHQUFLMkgsRUFBRTY1RCxRQUFRNWpFLEtBQUksU0FBVW9QLEdBQ3RHLE9BQU8sU0FBU0EsR0FJWixPQUFPQSxFQUFFNDBELE1BQU0vNUIsSUFBTTc2QixFQUFFcUIsR0FBRzNRLFdBQWFta0UsR0FBRzcwRCxFQUFFck4sT0FKekMsQ0FLTHFOLE1BQ0ZoUCxLQUFLLEtBQU1nQyxHQUFLLE9BQVFBLEdBQUsySCxFQUFFNDVELFFBQVEzakUsS0FBSSxTQUFVb1AsR0FDckQsT0FBUXJGLEVBQUlxRixHQUFHNDBELE1BQU0vNUIsSUFBTWxnQyxFQUFFbTZELElBQzdCLElBQUluNkQsS0FDSjNKLEtBQUssS0FBTSxHQUFFMkosRUFBRXU1RCxTQUFXbGhFLEdBQUssTUFBT0EsR0FBSzJILEVBQUV1NUQsT0FBUXY1RCxFQUFFODVELFVBQVl6aEUsR0FBSyxPQUM1RUEsR0FBS28zRCxHQUFHenZELEVBQUU4NUQsVUFBVzk1RCxFQUFFKzVELFFBQVUxaEUsR0FBSyxPQUFRQSxHQUFLbzNELEdBQUd6dkQsRUFBRSs1RCxRQUFTLzVELEVBQUU4NUIsRUFBSXpoQyxFQUUzRSxPQUFPMkgsRUFBRTg1QixFQUdiLFNBQVNzZ0MsR0FBRy8wRCxFQUFHckYsR0FDWCxHQUFJcUYsRUFBRWswRCxRQUFVdjVELEVBQUV1NUQsTUFBTyxPQUFPLEVBQ2hDLEdBQUlsMEQsRUFBRXUwRCxRQUFRampFLFNBQVdxSixFQUFFNDVELFFBQVFqakUsT0FBUSxPQUFPLEVBQ2xELElBQUssSUFBSTBCLEVBQUksRUFBR0EsRUFBSWdOLEVBQUV1MEQsUUFBUWpqRSxPQUFRMEIsSUFBSyxJQUFLZ2lFLEdBQUdoMUQsRUFBRXUwRCxRQUFRdmhFLEdBQUkySCxFQUFFNDVELFFBQVF2aEUsSUFBSyxPQUFPLEVBQ3ZGLEdBQUlnTixFQUFFdzBELFFBQVFsakUsU0FBV3FKLEVBQUU2NUQsUUFBUWxqRSxPQUFRLE9BQU8sRUFDbEQsSUFBSyxJQUFJb1EsRUFBSSxFQUFHQSxFQUFJMUIsRUFBRXcwRCxRQUFRbGpFLE9BQVFvUSxJQUFLLEdBQUl6USxFQUFJK08sRUFBRXcwRCxRQUFROXlELEdBQUk1TyxFQUFJNkgsRUFBRTY1RCxRQUFROXlELEdBQy9FelEsRUFBRW9RLEtBQU92TyxFQUFFdU8sS0FBT3BRLEVBQUUyakUsTUFBTXRDLFFBQVF4L0QsRUFBRThoRSxTQUFXSyxHQUFHaGtFLEVBQUUwQixNQUFPRyxFQUFFSCxPQUFRLE9BQU8sRUFDNUUsSUFBSTFCLEVBQUc2QixFQUNQLE9BQU9rTixFQUFFczBELGtCQUFvQjM1RCxFQUFFMjVELG1CQUFxQnQwRCxFQUFFcXZDLEtBQUtpakIsUUFBUTMzRCxFQUFFMDBDLFNBQVd5YyxHQUFHOXJELEVBQUV5MEQsUUFBUzk1RCxFQUFFODVELFVBQVkzSSxHQUFHOXJELEVBQUUwMEQsTUFBTy81RCxFQUFFKzVELE9BRzlILFNBQVNRLEdBQUdsMUQsR0FDUixPQUFPLEdBQUVxdkIsRUFBRXJ2QixFQUFFcXZDLE9BQVMsT0FBU3J2QyxFQUFFczBELGlCQUFtQixJQUFNdDBELEVBQUV3MEQsUUFBUWxqRSxPQTJDcEUsSUFBSTZqRSxHQUFtQixXQUN2QixTQUFTbjFELEVBQUVBLEdBQ1ByUCxLQUFLeWlDLEVBQUlwekIsRUFFYixPQUFPQSxFQUFFbzFELGlCQUFtQixTQUFTejZELEdBQ2pDLE9BQU8sSUFBSXFGLEVBQUVsQyxLQUFLbkQsS0FDbkJxRixFQUFFcTFELGVBQWlCLFNBQVMxNkQsR0FDM0IsT0FBTyxJQUFJcUYsRUFJWCxTQUFTQSxHQUNMLElBQUssSUFBSXJGLEVBQUksR0FBSTNILEVBQUksRUFBR0EsRUFBSWdOLEVBQUUxTyxTQUFVMEIsRUFBRzJILEdBQUtrSyxPQUFPZ1EsYUFBYTdVLEVBQUVoTixJQUN0RSxPQUFPMkgsRUFGWCxDQUdFQSxLQUNIcUYsRUFBRS9NLFVBQVVxaUUsU0FBVyxXQUN0QixPQUFPdDFELEVBQUlyUCxLQUFLeWlDLEVBQUd4L0IsS0FBS29NLEdBQzJDLElBQUlBLEdBRTNFQSxFQUFFL00sVUFBVXNpRSxhQUFlLFdBQ3ZCLE9BQU8sU0FBU3YxRCxHQUNaLElBQUssSUFBSXJGLEVBQUksSUFBSTZaLFdBQVd4VSxFQUFFMU8sUUFBUzBCLEVBQUksRUFBR0EsRUFBSWdOLEVBQUUxTyxPQUFRMEIsSUFBSzJILEVBQUUzSCxHQUFLZ04sRUFBRWtHLFdBQVdsVCxHQUNyRixPQUFPMkgsRUFGSixDQUdMaEssS0FBS3lpQyxJQUNScHpCLEVBQUUvTSxVQUFVdXhELEVBQUksV0FDZixPQUFPLEVBQUk3ekQsS0FBS3lpQyxFQUFFOWhDLFFBQ25CME8sRUFBRS9NLFVBQVVvdUIsRUFBSSxTQUFTcmhCLEdBQ3hCLE9BQU8sR0FBRXJQLEtBQUt5aUMsRUFBR3B6QixFQUFFb3pCLElBQ3BCcHpCLEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUM5QixPQUFPclAsS0FBS3lpQyxJQUFNcHpCLEVBQUVvekIsR0FDckJwekIsRUE5Qm9CLEdBaUMzQm0xRCxHQUFHL2pCLEVBQUksSUFBSStqQixHQUFHLElBRWQsSUFBSUssR0FBSUMsR0FBSUMsR0FBbUIsV0FDM0IsU0FBUzExRCxFQUVUQSxFQUtBckYsRUFFQTNILEVBS0EwTyxFQUVBelEsRUFJTTZCLEVBTUFvdUIsUUFDRixJQUFXandCLElBQU1BLEVBQUl1MUIsR0FBRW5lLFlBQVEsSUFBV3ZWLElBQU1BLEVBQUkwekIsR0FBRW5lLFlBQVEsSUFBVzZZLElBQU1BLEVBQUlpMEMsR0FBRy9qQixHQUN0RnpnRCxLQUFLd0osT0FBUzZGLEVBQUdyUCxLQUFLZ2xFLFNBQVdoN0QsRUFBR2hLLEtBQUtna0UsR0FBSzNoRSxFQUFHckMsS0FBS2lsRSxlQUFpQmwwRCxFQUFHL1EsS0FBS29rRSxHQUFLOWpFLEVBQ3BGTixLQUFLa2xFLDZCQUErQi9pRSxFQUFHbkMsS0FBS21sRSxZQUFjNTBDLEVBRWdCLE9BQU9saEIsRUFBRS9NLFVBQVVpaUUsR0FBSyxTQUFTdjZELEdBQzNHLE9BQU8sSUFBSXFGLEVBQUVyUCxLQUFLd0osT0FBUXhKLEtBQUtnbEUsU0FBVWhsRSxLQUFLZ2tFLEdBQUloNkQsRUFBR2hLLEtBQUtva0UsR0FBSXBrRSxLQUFLa2xFLDZCQUE4QmxsRSxLQUFLbWxFLGNBTTFHOTFELEVBQUUvTSxVQUFVOGlFLEdBQUssU0FBU3A3RCxFQUFHM0gsR0FDekIsT0FBTyxJQUFJZ04sRUFBRXJQLEtBQUt3SixPQUFReEosS0FBS2dsRSxTQUFVaGxFLEtBQUtna0UsR0FBSWhrRSxLQUFLaWxFLGVBQWdCNWlFLEVBQUdyQyxLQUFLa2xFLDZCQUE4Qmw3RCxJQU1qSHFGLEVBQUUvTSxVQUFVdWlFLEdBQUssU0FBUzc2RCxHQUN0QixPQUFPLElBQUlxRixFQUFFclAsS0FBS3dKLE9BQVF4SixLQUFLZ2xFLFNBQVVobEUsS0FBS2drRSxHQUFJaGtFLEtBQUtpbEUsZUFBZ0JqbEUsS0FBS29rRSxHQUFJcDZELEVBQUdoSyxLQUFLbWxFLGNBQ3pGOTFELEVBaER3QixHQWlEMUIrMUQsR0FFTCxTQUFTLzFELEdBQ0xyUCxLQUFLeUksTUFBUTRHLEdBeUJqQixTQUFTZzJELEdBQUdoMkQsR0FDUixPQUFRQSxHQUNOLEtBQUssR0FBRXd5RCxHQUNMLE9BQU8sS0FFVCxLQUFLLEdBQUVDLFVBQ1AsS0FBSyxHQUFFQyxRQUNQLEtBQUssR0FBRUUsa0JBQ1AsS0FBSyxHQUFFSyxtQkFDUCxLQUFLLEdBQUVub0QsU0FDUCxLQUFLLEdBQUV3b0QsWUFHQyxLQUFLLEdBQUVOLGdCQUNiLE9BQU8sRUFFVCxLQUFLLEdBQUVMLGlCQUNQLEtBQUssR0FBRUUsVUFDUCxLQUFLLEdBQUVDLGVBQ1AsS0FBSyxHQUFFQyxrQkFDUCxLQUFLLEdBQUVHLG9CQUlDLEtBQUssR0FBRUMsUUFDZixLQUFLLEdBQUVDLGFBQ1AsS0FBSyxHQUFFQyxjQUNQLEtBQUssR0FBRUUsVUFDTCxPQUFPLEVBRVQsUUFDRSxPQUFPLE1Bc0JYLFNBQVMwQyxHQUFHajJELEdBQ1osUUFBSSxJQUFXQSxFQUdmLE9BQU8sR0FBRSwyQkFBNEIsR0FBRTB5RCxRQUN2QyxPQUFRMXlELEdBQ04sS0FBS3cxRCxHQUFHaEQsR0FDTixPQUFPLEdBQUVBLEdBRVgsS0FBS2dELEdBQUcvQyxVQUNOLE9BQU8sR0FBRUEsVUFFWCxLQUFLK0MsR0FBRzlDLFFBQ04sT0FBTyxHQUFFQSxRQUVYLEtBQUs4QyxHQUFHNUMsa0JBQ04sT0FBTyxHQUFFQSxrQkFFWCxLQUFLNEMsR0FBR3ZDLG1CQUNOLE9BQU8sR0FBRUEsbUJBRVgsS0FBS3VDLEdBQUcxcUQsU0FDTixPQUFPLEdBQUVBLFNBRVgsS0FBSzBxRCxHQUFHbEMsWUFDTixPQUFPLEdBQUVBLFlBRVgsS0FBS2tDLEdBQUd4QyxnQkFDTixPQUFPLEdBQUVBLGdCQUVYLEtBQUt3QyxHQUFHN0MsaUJBQ04sT0FBTyxHQUFFQSxpQkFFWCxLQUFLNkMsR0FBRzNDLFVBQ04sT0FBTyxHQUFFQSxVQUVYLEtBQUsyQyxHQUFHMUMsZUFDTixPQUFPLEdBQUVBLGVBRVgsS0FBSzBDLEdBQUd6QyxrQkFDTixPQUFPLEdBQUVBLGtCQUVYLEtBQUt5QyxHQUFHdEMsb0JBQ04sT0FBTyxHQUFFQSxvQkFFWCxLQUFLc0MsR0FBR3JDLFFBQ04sT0FBTyxHQUFFQSxRQUVYLEtBQUtxQyxHQUFHcEMsYUFDTixPQUFPLEdBQUVBLGFBRVgsS0FBS29DLEdBQUduQyxjQUNOLE9BQU8sR0FBRUEsY0FFWCxLQUFLbUMsR0FBR2pDLFVBQ04sT0FBTyxHQUFFQSxVQUVYLFFBQ0UsT0FBTyxPQVdWa0MsR0FBS0QsS0FBT0EsR0FBSyxLQUFLQyxHQUFHakQsR0FBSyxHQUFLLEtBQU1pRCxHQUFHQSxHQUFHaEQsVUFBWSxHQUFLLFlBQ3JFZ0QsR0FBR0EsR0FBRy9DLFFBQVUsR0FBSyxVQUFXK0MsR0FBR0EsR0FBRzlDLGlCQUFtQixHQUFLLG1CQUM5RDhDLEdBQUdBLEdBQUc3QyxrQkFBb0IsR0FBSyxvQkFBcUI2QyxHQUFHQSxHQUFHNUMsVUFBWSxHQUFLLFlBQzNFNEMsR0FBR0EsR0FBRzNDLGVBQWlCLEdBQUssaUJBQWtCMkMsR0FBR0EsR0FBRzFDLGtCQUFvQixHQUFLLG9CQUM3RTBDLEdBQUdBLEdBQUd6QyxnQkFBa0IsSUFBTSxrQkFBbUJ5QyxHQUFHQSxHQUFHeEMsbUJBQXFCLEdBQUsscUJBQ2pGd0MsR0FBR0EsR0FBR3ZDLG9CQUFzQixHQUFLLHNCQUF1QnVDLEdBQUdBLEdBQUd0QyxRQUFVLElBQU0sVUFDOUVzQyxHQUFHQSxHQUFHckMsYUFBZSxJQUFNLGVBQWdCcUMsR0FBR0EsR0FBR3BDLGNBQWdCLElBQU0sZ0JBQ3ZFb0MsR0FBR0EsR0FBRzNxRCxTQUFXLElBQU0sV0FBWTJxRCxHQUFHQSxHQUFHbkMsWUFBYyxJQUFNLGNBQWVtQyxHQUFHQSxHQUFHbEMsVUFBWSxJQUFNLFlBb0JwRyxJQUFJMkMsR0FBbUIsV0FDbkIsU0FBU2wyRCxFQUFFQSxFQUFHckYsR0FDVmhLLEtBQUt1aUMsRUFBSWx6QixFQUFHclAsS0FBS3dsRSxLQUFPeDdELEdBQUt5N0QsR0FBR0MsTUFHaEMsT0FBT3IyRCxFQUFFL00sVUFBVWtpRSxHQUFLLFNBQVN4NkQsRUFBRzNILEdBQ3BDLE9BQU8sSUFBSWdOLEVBQUVyUCxLQUFLdWlDLEVBQUd2aUMsS0FBS3dsRSxLQUFLaEIsR0FBR3g2RCxFQUFHM0gsRUFBR3JDLEtBQUt1aUMsR0FBR29qQyxLQUFLLEtBQU0sS0FBTUYsR0FBR1gsR0FBSSxLQUFNLFFBR2xGejFELEVBQUUvTSxVQUFVeUosT0FBUyxTQUFTL0IsR0FDMUIsT0FBTyxJQUFJcUYsRUFBRXJQLEtBQUt1aUMsRUFBR3ZpQyxLQUFLd2xFLEtBQUt6NUQsT0FBTy9CLEVBQUdoSyxLQUFLdWlDLEdBQUdvakMsS0FBSyxLQUFNLEtBQU1GLEdBQUdYLEdBQUksS0FBTSxRQUduRnoxRCxFQUFFL00sVUFBVXdELElBQU0sU0FBU3VKLEdBQ3ZCLElBQUssSUFBSXJGLEVBQUloSyxLQUFLd2xFLE1BQU94N0QsRUFBRXMrQyxLQUFPLENBQzlCLElBQUlqbUQsRUFBSXJDLEtBQUt1aUMsRUFBRWx6QixFQUFHckYsRUFBRW9CLEtBQ3BCLEdBQUksSUFBTS9JLEVBQUcsT0FBTzJILEVBQUVoSSxNQUN0QkssRUFBSSxFQUFJMkgsRUFBSUEsRUFBRXE4QixLQUFPaGtDLEVBQUksSUFBTTJILEVBQUlBLEVBQUU0N0QsT0FFekMsT0FBTyxNQUlYdjJELEVBQUUvTSxVQUFVZ2UsUUFBVSxTQUFTalIsR0FDM0IsSUFFQSxJQUFJckYsRUFBSSxFQUFHM0gsRUFBSXJDLEtBQUt3bEUsTUFBT25qRSxFQUFFaW1ELEtBQU8sQ0FDaEMsSUFBSXYzQyxFQUFJL1EsS0FBS3VpQyxFQUFFbHpCLEVBQUdoTixFQUFFK0ksS0FDcEIsR0FBSSxJQUFNMkYsRUFBRyxPQUFPL0csRUFBSTNILEVBQUVna0MsS0FBS2poQixLQUMvQnJVLEVBQUksRUFBSTFPLEVBQUlBLEVBQUVna0MsTUFFZHI4QixHQUFLM0gsRUFBRWdrQyxLQUFLamhCLEtBQU8sRUFBRy9pQixFQUFJQSxFQUFFdWpFLE9BR3hCLE9BQVEsR0FDakJ2MkQsRUFBRS9NLFVBQVVnbUQsRUFBSSxXQUNmLE9BQU90b0QsS0FBS3dsRSxLQUFLbGQsS0FDbEIvbUQsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxPQUFRLENBRTFDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLd2xFLEtBQUtwZ0QsTUFFckJwWCxZQUFZLEVBQ1ppTyxjQUFjLElBR2xCNU0sRUFBRS9NLFVBQVUraUUsR0FBSyxXQUNiLE9BQU9ybEUsS0FBS3dsRSxLQUFLSCxNQUdyQmgyRCxFQUFFL00sVUFBVWdqRSxHQUFLLFdBQ2IsT0FBT3RsRSxLQUFLd2xFLEtBQUtGLE1BTXJCajJELEVBQUUvTSxVQUFVeWlFLEdBQUssU0FBUzExRCxHQUN0QixPQUFPclAsS0FBS3dsRSxLQUFLVCxHQUFHMTFELElBQ3JCQSxFQUFFL00sVUFBVXFELFFBQVUsU0FBUzBKLEdBQzlCclAsS0FBSytrRSxJQUFHLFNBQVUvNkQsRUFBRzNILEdBQ2pCLE9BQU9nTixFQUFFckYsRUFBRzNILElBQUksTUFFckJnTixFQUFFL00sVUFBVXZDLFNBQVcsV0FDdEIsSUFBSXNQLEVBQUksR0FDUixPQUFPclAsS0FBSytrRSxJQUFHLFNBQVUvNkQsRUFBRzNILEdBQ3hCLE9BQU9nTixFQUFFNVAsS0FBS3VLLEVBQUksSUFBTTNILElBQUksS0FDM0IsSUFBTWdOLEVBQUVoUCxLQUFLLE1BQVEsS0FPOUJnUCxFQUFFL00sVUFBVWlqRSxHQUFLLFNBQVNsMkQsR0FDdEIsT0FBT3JQLEtBQUt3bEUsS0FBS0QsR0FBR2wyRCxJQUd4QkEsRUFBRS9NLFVBQVVtakUsR0FBSyxXQUNiLE9BQU8sSUFBSUksR0FBRzdsRSxLQUFLd2xFLEtBQU0sS0FBTXhsRSxLQUFLdWlDLEdBQUcsSUFDeENsekIsRUFBRS9NLFVBQVV3akUsR0FBSyxTQUFTejJELEdBQ3pCLE9BQU8sSUFBSXcyRCxHQUFHN2xFLEtBQUt3bEUsS0FBTW4yRCxFQUFHclAsS0FBS3VpQyxHQUFHLElBQ3JDbHpCLEVBQUUvTSxVQUFVdWpFLEdBQUssV0FDaEIsT0FBTyxJQUFJQSxHQUFHN2xFLEtBQUt3bEUsS0FBTSxLQUFNeGxFLEtBQUt1aUMsR0FBRyxJQUN4Q2x6QixFQUFFL00sVUFBVXlqRSxHQUFLLFNBQVMxMkQsR0FDekIsT0FBTyxJQUFJdzJELEdBQUc3bEUsS0FBS3dsRSxLQUFNbjJELEVBQUdyUCxLQUFLdWlDLEdBQUcsSUFDckNsekIsRUF0RmdCLEdBdUZsQncyRCxHQUFtQixXQUNwQixTQUFTeDJELEVBQUVBLEVBQUdyRixFQUFHM0gsRUFBRzBPLEdBQ2hCL1EsS0FBS2dtRSxHQUFLajFELEVBQUcvUSxLQUFLaW1FLEdBQUssR0FDdkIsSUFBSyxJQUFJM2xFLEVBQUksR0FBSStPLEVBQUVpNUMsS0FBTyxHQUFJaG9ELEVBQUkwSixFQUFJM0gsRUFBRWdOLEVBQUVqRSxJQUFLcEIsR0FBSyxFQUVwRCtHLElBQU16USxJQUFNLEdBQUlBLEVBQUksRUFFcEIrTyxFQUFJclAsS0FBS2dtRSxHQUFLMzJELEVBQUVnM0IsS0FBT2gzQixFQUFFdTJELFVBQVksQ0FDakMsR0FBSSxJQUFNdGxFLEVBQUcsQ0FHVE4sS0FBS2ltRSxHQUFHeG1FLEtBQUs0UCxHQUNiLE1BSVFyUCxLQUFLaW1FLEdBQUd4bUUsS0FBSzRQLEdBQUlBLEVBQUlyUCxLQUFLZ21FLEdBQUszMkQsRUFBRXUyRCxNQUFRdjJELEVBQUVnM0IsTUFHL0QsT0FBT2gzQixFQUFFL00sVUFBVTRqRSxHQUFLLFdBQ3BCLElBQUk3MkQsRUFBSXJQLEtBQUtpbUUsR0FBR3QxRCxNQUFPM0csRUFBSSxDQUN2Qm9CLElBQUtpRSxFQUFFakUsSUFDUHBKLE1BQU9xTixFQUFFck4sT0FFYixHQUFJaEMsS0FBS2dtRSxHQUFJLElBQUszMkQsRUFBSUEsRUFBRWczQixNQUFPaDNCLEVBQUVpNUMsS0FBT3RvRCxLQUFLaW1FLEdBQUd4bUUsS0FBSzRQLEdBQUlBLEVBQUlBLEVBQUV1MkQsV0FBWSxJQUFLdjJELEVBQUlBLEVBQUV1MkQsT0FBUXYyRCxFQUFFaTVDLEtBQU90b0QsS0FBS2ltRSxHQUFHeG1FLEtBQUs0UCxHQUNwSEEsRUFBSUEsRUFBRWczQixLQUNOLE9BQU9yOEIsR0FDUnFGLEVBQUUvTSxVQUFVNmpFLEdBQUssV0FDaEIsT0FBT25tRSxLQUFLaW1FLEdBQUd0bEUsT0FBUyxHQUN6QjBPLEVBQUUvTSxVQUFVOGpFLEdBQUssV0FDaEIsR0FBSSxJQUFNcG1FLEtBQUtpbUUsR0FBR3RsRSxPQUFRLE9BQU8sS0FDakMsSUFBSTBPLEVBQUlyUCxLQUFLaW1FLEdBQUdqbUUsS0FBS2ltRSxHQUFHdGxFLE9BQVMsR0FDakMsTUFBTyxDQUNIeUssSUFBS2lFLEVBQUVqRSxJQUNQcEosTUFBT3FOLEVBQUVyTixRQUVkcU4sRUFwQ2lCLEdBcUNuQm8yRCxHQUFtQixXQUNwQixTQUFTcDJELEVBQUVyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxFQUFHNkIsR0FDbkJuQyxLQUFLb0wsSUFBTXBCLEVBQUdoSyxLQUFLZ0MsTUFBUUssRUFBR3JDLEtBQUtrNkQsTUFBUSxNQUFRbnBELEVBQUlBLEVBQUkxQixFQUFFZzNELElBQUtybUUsS0FBS3FtQyxLQUFPLE1BQVEvbEMsRUFBSUEsRUFBSStPLEVBQUVxMkQsTUFDaEcxbEUsS0FBSzRsRSxNQUFRLE1BQVF6akUsRUFBSUEsRUFBSWtOLEVBQUVxMkQsTUFBTzFsRSxLQUFLb2xCLEtBQU9wbEIsS0FBS3FtQyxLQUFLamhCLEtBQU8sRUFBSXBsQixLQUFLNGxFLE1BQU14Z0QsS0FHbEYsT0FBTy9WLEVBQUUvTSxVQUFVcWpFLEtBQU8sU0FBUzM3RCxFQUFHM0gsRUFBRzBPLEVBQUd6USxFQUFHNkIsR0FDL0MsT0FBTyxJQUFJa04sRUFBRSxNQUFRckYsRUFBSUEsRUFBSWhLLEtBQUtvTCxJQUFLLE1BQVEvSSxFQUFJQSxFQUFJckMsS0FBS2dDLE1BQU8sTUFBUStPLEVBQUlBLEVBQUkvUSxLQUFLazZELE1BQU8sTUFBUTU1RCxFQUFJQSxFQUFJTixLQUFLcW1DLEtBQU0sTUFBUWxrQyxFQUFJQSxFQUFJbkMsS0FBSzRsRSxRQUNoSnYyRCxFQUFFL00sVUFBVWdtRCxFQUFJLFdBQ2YsT0FBTyxHQU1YajVDLEVBQUUvTSxVQUFVeWlFLEdBQUssU0FBUzExRCxHQUN0QixPQUFPclAsS0FBS3FtQyxLQUFLMCtCLEdBQUcxMUQsSUFBTUEsRUFBRXJQLEtBQUtvTCxJQUFLcEwsS0FBS2dDLFFBQVVoQyxLQUFLNGxFLE1BQU1iLEdBQUcxMUQsSUFNdkVBLEVBQUUvTSxVQUFVaWpFLEdBQUssU0FBU2wyRCxHQUN0QixPQUFPclAsS0FBSzRsRSxNQUFNTCxHQUFHbDJELElBQU1BLEVBQUVyUCxLQUFLb0wsSUFBS3BMLEtBQUtnQyxRQUFVaEMsS0FBS3FtQyxLQUFLay9CLEdBQUdsMkQsSUFHdkVBLEVBQUUvTSxVQUFVb1YsSUFBTSxXQUNkLE9BQU8xWCxLQUFLcW1DLEtBQUtpaUIsSUFBTXRvRCxLQUFPQSxLQUFLcW1DLEtBQUszdUIsT0FHNUNySSxFQUFFL00sVUFBVStpRSxHQUFLLFdBQ2IsT0FBT3JsRSxLQUFLMFgsTUFBTXRNLEtBR3RCaUUsRUFBRS9NLFVBQVVnakUsR0FBSyxXQUNiLE9BQU90bEUsS0FBSzRsRSxNQUFNdGQsSUFBTXRvRCxLQUFLb0wsSUFBTXBMLEtBQUs0bEUsTUFBTU4sTUFHbERqMkQsRUFBRS9NLFVBQVVraUUsR0FBSyxTQUFTbjFELEVBQUdyRixFQUFHM0gsR0FDNUIsSUFBSTBPLEVBQUkvUSxLQUFNTSxFQUFJK0IsRUFBRWdOLEVBQUcwQixFQUFFM0YsS0FDekIsT0FBUTJGLEVBQUl6USxFQUFJLEVBQUl5USxFQUFFNDBELEtBQUssS0FBTSxLQUFNLEtBQU01MEQsRUFBRXMxQixLQUFLbStCLEdBQUduMUQsRUFBR3JGLEVBQUczSCxHQUFJLE1BQVEsSUFBTS9CLEVBQUl5USxFQUFFNDBELEtBQUssS0FBTTM3RCxFQUFHLEtBQU0sS0FBTSxNQUFRK0csRUFBRTQwRCxLQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU01MEQsRUFBRTYwRCxNQUFNcEIsR0FBR24xRCxFQUFHckYsRUFBRzNILEtBQUtpa0UsTUFDN0tqM0QsRUFBRS9NLFVBQVVpa0UsR0FBSyxXQUNoQixHQUFJdm1FLEtBQUtxbUMsS0FBS2lpQixJQUFLLE9BQU9qNUMsRUFBRXEyRCxNQUM1QixJQUFJMTdELEVBQUloSyxLQUNSLE9BQU9nSyxFQUFFcThCLEtBQUttZ0MsTUFBUXg4RCxFQUFFcThCLEtBQUtBLEtBQUttZ0MsT0FBU3g4RCxFQUFJQSxFQUFFeThELE9BQVF6OEQsRUFBSUEsRUFBRTI3RCxLQUFLLEtBQU0sS0FBTSxLQUFNMzdELEVBQUVxOEIsS0FBS2tnQyxLQUFNLE9BQU9ELE1BRzlHajNELEVBQUUvTSxVQUFVeUosT0FBUyxTQUFTL0IsRUFBRzNILEdBQzdCLElBQUkwTyxFQUFHelEsRUFBSU4sS0FDWCxHQUFJcUMsRUFBRTJILEVBQUcxSixFQUFFOEssS0FBTyxFQUFHOUssRUFBRStsQyxLQUFLaWlCLEtBQU9ob0QsRUFBRStsQyxLQUFLbWdDLE1BQVFsbUUsRUFBRStsQyxLQUFLQSxLQUFLbWdDLE9BQVNsbUUsRUFBSUEsRUFBRW1tRSxNQUM3RW5tRSxFQUFJQSxFQUFFcWxFLEtBQUssS0FBTSxLQUFNLEtBQU1ybEUsRUFBRStsQyxLQUFLdDZCLE9BQU8vQixFQUFHM0gsR0FBSSxVQUFZLENBQzFELEdBQUkvQixFQUFFK2xDLEtBQUttZ0MsT0FBU2xtRSxFQUFJQSxFQUFFb21FLE1BQU9wbUUsRUFBRXNsRSxNQUFNdGQsS0FBT2hvRCxFQUFFc2xFLE1BQU1ZLE1BQVFsbUUsRUFBRXNsRSxNQUFNdi9CLEtBQUttZ0MsT0FBU2xtRSxFQUFJQSxFQUFFcW1FLE1BQzVGLElBQU10a0UsRUFBRTJILEVBQUcxSixFQUFFOEssS0FBTSxDQUNmLEdBQUk5SyxFQUFFc2xFLE1BQU10ZCxJQUFLLE9BQU9qNUMsRUFBRXEyRCxNQUMxQjMwRCxFQUFJelEsRUFBRXNsRSxNQUFNbHVELE1BQU9wWCxFQUFJQSxFQUFFcWxFLEtBQUs1MEQsRUFBRTNGLElBQUsyRixFQUFFL08sTUFBTyxLQUFNLEtBQU0xQixFQUFFc2xFLE1BQU1XLE1BRXRFam1FLEVBQUlBLEVBQUVxbEUsS0FBSyxLQUFNLEtBQU0sS0FBTSxLQUFNcmxFLEVBQUVzbEUsTUFBTTc1RCxPQUFPL0IsRUFBRzNILElBRXpELE9BQU8vQixFQUFFZ21FLE1BQ1ZqM0QsRUFBRS9NLFVBQVVra0UsR0FBSyxXQUNoQixPQUFPeG1FLEtBQUtrNkQsT0FHaEI3cUQsRUFBRS9NLFVBQVVna0UsR0FBSyxXQUNiLElBQUlqM0QsRUFBSXJQLEtBQ1IsT0FBT3FQLEVBQUV1MkQsTUFBTVksT0FBU24zRCxFQUFFZzNCLEtBQUttZ0MsT0FBU24zRCxFQUFJQSxFQUFFdTNELE1BQU92M0QsRUFBRWczQixLQUFLbWdDLE1BQVFuM0QsRUFBRWczQixLQUFLQSxLQUFLbWdDLE9BQVNuM0QsRUFBSUEsRUFBRXEzRCxNQUMvRnIzRCxFQUFFZzNCLEtBQUttZ0MsTUFBUW4zRCxFQUFFdTJELE1BQU1ZLE9BQVNuM0QsRUFBSUEsRUFBRXczRCxNQUFPeDNELEdBQzlDQSxFQUFFL00sVUFBVW1rRSxHQUFLLFdBQ2hCLElBQUlwM0QsRUFBSXJQLEtBQUs2bUUsS0FDYixPQUFPeDNELEVBQUV1MkQsTUFBTXYvQixLQUFLbWdDLE9BQVNuM0QsR0FBS0EsR0FBS0EsRUFBSUEsRUFBRXMyRCxLQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU10MkQsRUFBRXUyRCxNQUFNYyxPQUFPRSxNQUFNQyxNQUMvRngzRCxHQUNEQSxFQUFFL00sVUFBVXFrRSxHQUFLLFdBQ2hCLElBQUl0M0QsRUFBSXJQLEtBQUs2bUUsS0FDYixPQUFPeDNELEVBQUVnM0IsS0FBS0EsS0FBS21nQyxPQUFTbjNELEdBQUtBLEVBQUlBLEVBQUVxM0QsTUFBTUcsTUFBT3gzRCxHQUNyREEsRUFBRS9NLFVBQVVza0UsR0FBSyxXQUNoQixJQUFJNThELEVBQUloSyxLQUFLMmxFLEtBQUssS0FBTSxLQUFNdDJELEVBQUVnM0QsSUFBSyxLQUFNcm1FLEtBQUs0bEUsTUFBTXYvQixNQUN0RCxPQUFPcm1DLEtBQUs0bEUsTUFBTUQsS0FBSyxLQUFNLEtBQU0zbEUsS0FBS2s2RCxNQUFPbHdELEVBQUcsT0FDbkRxRixFQUFFL00sVUFBVW9rRSxHQUFLLFdBQ2hCLElBQUkxOEQsRUFBSWhLLEtBQUsybEUsS0FBSyxLQUFNLEtBQU10MkQsRUFBRWczRCxJQUFLcm1FLEtBQUtxbUMsS0FBS3UvQixNQUFPLE1BQ3RELE9BQU81bEUsS0FBS3FtQyxLQUFLcy9CLEtBQUssS0FBTSxLQUFNM2xFLEtBQUtrNkQsTUFBTyxLQUFNbHdELElBQ3JEcUYsRUFBRS9NLFVBQVV1a0UsR0FBSyxXQUNoQixJQUFJeDNELEVBQUlyUCxLQUFLcW1DLEtBQUtzL0IsS0FBSyxLQUFNLE1BQU8zbEUsS0FBS3FtQyxLQUFLNnpCLE1BQU8sS0FBTSxNQUFPbHdELEVBQUloSyxLQUFLNGxFLE1BQU1ELEtBQUssS0FBTSxNQUFPM2xFLEtBQUs0bEUsTUFBTTFMLE1BQU8sS0FBTSxNQUMzSCxPQUFPbDZELEtBQUsybEUsS0FBSyxLQUFNLE1BQU8zbEUsS0FBS2s2RCxNQUFPN3FELEVBQUdyRixJQUdqRHFGLEVBQUUvTSxVQUFVd2tFLEdBQUssV0FDYixJQUFJejNELEVBQUlyUCxLQUFLK21FLEtBQ2IsT0FBTzF2RCxLQUFLQyxJQUFJLEVBQUdqSSxJQUFNclAsS0FBS29sQixLQUFPLEdBSXpDL1YsRUFBRS9NLFVBQVV5a0UsR0FBSyxXQUNiLEdBQUkvbUUsS0FBS3dtRSxNQUFReG1FLEtBQUtxbUMsS0FBS21nQyxLQUFNLE1BQU0sS0FDdkMsR0FBSXhtRSxLQUFLNGxFLE1BQU1ZLEtBQU0sTUFBTSxLQUMzQixJQUFJbjNELEVBQUlyUCxLQUFLcW1DLEtBQUswZ0MsS0FDbEIsR0FBSTEzRCxJQUFNclAsS0FBSzRsRSxNQUFNbUIsS0FBTSxNQUFNLEtBQ2pDLE9BQU8xM0QsR0FBS3JQLEtBQUt3bUUsS0FBTyxFQUFJLElBQzdCbjNELEVBakdpQixHQXlHeEJvMkQsR0FBR0MsTUFBUSxLQUFNRCxHQUFHWSxLQUFNLEVBQUlaLEdBQUdYLElBQUssRUFFdENXLEdBQUdDLE1BQVEsSUFBbUIsV0FDMUIsU0FBU3IyRCxJQUNMclAsS0FBS29sQixLQUFPLEVBRWhCLE9BQU83akIsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxNQUFPLENBQzdDd0QsSUFBSyxXQUNELE1BQU0sTUFFVmtJLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsUUFBUyxDQUM1Q3dELElBQUssV0FDRCxNQUFNLE1BRVZrSSxZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLFFBQVMsQ0FDNUN3RCxJQUFLLFdBQ0QsTUFBTSxNQUVWa0ksWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxPQUFRLENBQzNDd0QsSUFBSyxXQUNELE1BQU0sTUFFVmtJLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsUUFBUyxDQUM1Q3dELElBQUssV0FDRCxNQUFNLE1BRVZrSSxZQUFZLEVBQ1ppTyxjQUFjLElBR2xCNU0sRUFBRS9NLFVBQVVxakUsS0FBTyxTQUFTdDJELEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxHQUNwQyxPQUFPTixNQUdYcVAsRUFBRS9NLFVBQVVraUUsR0FBSyxTQUFTbjFELEVBQUdyRixFQUFHM0gsR0FDNUIsT0FBTyxJQUFJb2pFLEdBQUdwMkQsRUFBR3JGLElBR3JCcUYsRUFBRS9NLFVBQVV5SixPQUFTLFNBQVNzRCxFQUFHckYsR0FDN0IsT0FBT2hLLE1BQ1JxUCxFQUFFL00sVUFBVWdtRCxFQUFJLFdBQ2YsT0FBTyxHQUNSajVDLEVBQUUvTSxVQUFVeWlFLEdBQUssU0FBUzExRCxHQUN6QixPQUFPLEdBQ1JBLEVBQUUvTSxVQUFVaWpFLEdBQUssU0FBU2wyRCxHQUN6QixPQUFPLEdBQ1JBLEVBQUUvTSxVQUFVK2lFLEdBQUssV0FDaEIsT0FBTyxNQUNSaDJELEVBQUUvTSxVQUFVZ2pFLEdBQUssV0FDaEIsT0FBTyxNQUNSajJELEVBQUUvTSxVQUFVa2tFLEdBQUssV0FDaEIsT0FBTyxHQUdYbjNELEVBQUUvTSxVQUFVd2tFLEdBQUssV0FDYixPQUFPLEdBQ1J6M0QsRUFBRS9NLFVBQVV5a0UsR0FBSyxXQUNoQixPQUFPLEdBQ1IxM0QsRUFoRVEsSUEwRmYsSUFBSTIzRCxHQUFtQixXQUNuQixTQUFTMzNELEVBQUVBLEdBQ1ByUCxLQUFLdWlDLEVBQUlsekIsRUFBR3JQLEtBQUt1RCxLQUFPLElBQUlnaUUsR0FBR3ZsRSxLQUFLdWlDLEdBRXhDLE9BQU9sekIsRUFBRS9NLFVBQVV5VyxJQUFNLFNBQVMxSixHQUM5QixPQUFPLE9BQVNyUCxLQUFLdUQsS0FBS3VDLElBQUl1SixJQUMvQkEsRUFBRS9NLFVBQVUya0UsTUFBUSxXQUNuQixPQUFPam5FLEtBQUt1RCxLQUFLOGhFLE1BQ2xCaDJELEVBQUUvTSxVQUFVNGtFLEtBQU8sV0FDbEIsT0FBT2xuRSxLQUFLdUQsS0FBSytoRSxNQUNsQi9qRSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLE9BQVEsQ0FDMUN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUt1RCxLQUFLNmhCLE1BRXJCcFgsWUFBWSxFQUNaaU8sY0FBYyxJQUNkNU0sRUFBRS9NLFVBQVVnZSxRQUFVLFNBQVNqUixHQUMvQixPQUFPclAsS0FBS3VELEtBQUsrYyxRQUFRalIsSUFFNkJBLEVBQUUvTSxVQUFVcUQsUUFBVSxTQUFTMEosR0FDckZyUCxLQUFLdUQsS0FBS3doRSxJQUFHLFNBQVUvNkQsRUFBRzNILEdBQ3RCLE9BQU9nTixFQUFFckYsSUFBSSxNQUdnRHFGLEVBQUUvTSxVQUFVNmtFLEdBQUssU0FBUzkzRCxFQUFHckYsR0FDOUYsSUFBSyxJQUFJM0gsRUFBSXJDLEtBQUt1RCxLQUFLdWlFLEdBQUd6MkQsRUFBRSxJQUFLaE4sRUFBRThqRSxNQUFRLENBQ3ZDLElBQUlwMUQsRUFBSTFPLEVBQUU2akUsS0FDVixHQUFJbG1FLEtBQUt1aUMsRUFBRXh4QixFQUFFM0YsSUFBS2lFLEVBQUUsS0FBTyxFQUFHLE9BQzlCckYsRUFBRStHLEVBQUUzRixPQU1aaUUsRUFBRS9NLFVBQVU4a0UsR0FBSyxTQUFTLzNELEVBQUdyRixHQUN6QixJQUFJM0gsRUFDSixJQUFLQSxPQUFJLElBQVcySCxFQUFJaEssS0FBS3VELEtBQUt1aUUsR0FBRzk3RCxHQUFLaEssS0FBS3VELEtBQUtraUUsS0FBTXBqRSxFQUFFOGpFLE1BQVEsSUFBSzkyRCxFQUFFaE4sRUFBRTZqRSxLQUFLOTZELEtBQU0sUUFFNUJpRSxFQUFFL00sVUFBVStrRSxHQUFLLFNBQVNoNEQsR0FDdEYsSUFBSXJGLEVBQUloSyxLQUFLdUQsS0FBS3VpRSxHQUFHejJELEdBQ3JCLE9BQU9yRixFQUFFbThELEtBQU9uOEQsRUFBRWs4RCxLQUFLOTZELElBQU0sTUFDOUJpRSxFQUFFL00sVUFBVW1qRSxHQUFLLFdBQ2hCLE9BQU8sSUFBSU0sR0FBRy9sRSxLQUFLdUQsS0FBS2tpRSxPQUN6QnAyRCxFQUFFL00sVUFBVXdqRSxHQUFLLFNBQVN6MkQsR0FDekIsT0FBTyxJQUFJMDJELEdBQUcvbEUsS0FBS3VELEtBQUt1aUUsR0FBR3oyRCxLQUVNQSxFQUFFL00sVUFBVTBtQixJQUFNLFNBQVMzWixHQUM1RCxPQUFPclAsS0FBSzJsRSxLQUFLM2xFLEtBQUt1RCxLQUFLd0ksT0FBT3NELEdBQUdtMUQsR0FBR24xRCxHQUFHLEtBRXJCQSxFQUFFL00sVUFBVTBYLE9BQVMsU0FBUzNLLEdBQ3BELE9BQU9yUCxLQUFLK1ksSUFBSTFKLEdBQUtyUCxLQUFLMmxFLEtBQUszbEUsS0FBS3VELEtBQUt3SSxPQUFPc0QsSUFBTXJQLE1BQ3ZEcVAsRUFBRS9NLFVBQVVnbUQsRUFBSSxXQUNmLE9BQU90b0QsS0FBS3VELEtBQUsra0QsS0FDbEJqNUMsRUFBRS9NLFVBQVVnbEUsR0FBSyxTQUFTajRELEdBQ3pCLElBQUlyRixFQUFJaEssS0FFQSxPQUFPZ0ssRUFBRW9iLEtBQU8vVixFQUFFK1YsT0FBU3BiLEVBQUlxRixFQUFHQSxFQUFJclAsTUFBT3FQLEVBQUUxSixTQUFRLFNBQVUwSixHQUNyRXJGLEVBQUlBLEVBQUVnZixJQUFJM1osTUFDVHJGLEdBQ05xRixFQUFFL00sVUFBVXEvRCxRQUFVLFNBQVMzM0QsR0FDOUIsS0FBTUEsYUFBYXFGLEdBQUksT0FBTyxFQUM5QixHQUFJclAsS0FBS29sQixPQUFTcGIsRUFBRW9iLEtBQU0sT0FBTyxFQUNqQyxJQUFLLElBQUkvaUIsRUFBSXJDLEtBQUt1RCxLQUFLa2lFLEtBQU0xMEQsRUFBSS9HLEVBQUV6RyxLQUFLa2lFLEtBQU1wakUsRUFBRThqRSxNQUFRLENBQ3BELElBQUk3bEUsRUFBSStCLEVBQUU2akUsS0FBSzk2RCxJQUFLakosRUFBSTRPLEVBQUVtMUQsS0FBSzk2RCxJQUMvQixHQUFJLElBQU1wTCxLQUFLdWlDLEVBQUVqaUMsRUFBRzZCLEdBQUksT0FBTyxFQUVuQyxPQUFPLEdBQ1JrTixFQUFFL00sVUFBVXl5QyxFQUFJLFdBQ2YsSUFBSTFsQyxFQUFJLEdBQ1IsT0FBT3JQLEtBQUsyRixTQUFRLFNBQVVxRSxHQUMxQnFGLEVBQUU1UCxLQUFLdUssTUFDTnFGLEdBQ05BLEVBQUUvTSxVQUFVdkMsU0FBVyxXQUN0QixJQUFJc1AsRUFBSSxHQUNSLE9BQU9yUCxLQUFLMkYsU0FBUSxTQUFVcUUsR0FDMUIsT0FBT3FGLEVBQUU1UCxLQUFLdUssTUFDYixhQUFlcUYsRUFBRXRQLFdBQWEsS0FDcENzUCxFQUFFL00sVUFBVXFqRSxLQUFPLFNBQVMzN0QsR0FDM0IsSUFBSTNILEVBQUksSUFBSWdOLEVBQUVyUCxLQUFLdWlDLEdBQ25CLE9BQU9sZ0MsRUFBRWtCLEtBQU95RyxFQUFHM0gsR0FDcEJnTixFQWhGZ0IsR0FpRmxCMDJELEdBQW1CLFdBQ3BCLFNBQVMxMkQsRUFBRUEsR0FDUHJQLEtBQUt1bkUsR0FBS2w0RCxFQUVkLE9BQU9BLEVBQUUvTSxVQUFVNGpFLEdBQUssV0FDcEIsT0FBT2xtRSxLQUFLdW5FLEdBQUdyQixLQUFLOTZELEtBQ3JCaUUsRUFBRS9NLFVBQVU2akUsR0FBSyxXQUNoQixPQUFPbm1FLEtBQUt1bkUsR0FBR3BCLE1BQ2hCOTJELEVBUmlCLEdBU25CczNELEdBQUssSUFBSXBCLEdBQUcsR0FBRWhqQyxHQUVuQixTQUFTbWtDLEtBQ0wsT0FBT0MsR0FHWCxTQUFTSCxLQUNMLE9BQU9FLEtBR1gsSUFBSWMsR0FBSyxJQUFJakMsR0FBRyxHQUFFaGpDLEdBRWxCLFNBQVN5akMsS0FDTCxPQUFPd0IsR0FHWCxJQUFJWixHQUFLLElBQUlyQixHQUFHLEdBQUVoakMsR0FBSXVqQyxHQUFLLElBQUlrQixHQUFHLEdBQUV6a0MsR0FFcEMsU0FBUzRqQyxLQUNMLElBQUssSUFBSTkyRCxFQUFJLEdBQUlyRixFQUFJLEVBQUdBLEVBQUk3RCxVQUFVeEYsT0FBUXFKLElBQUtxRixFQUFFckYsR0FBSzdELFVBQVU2RCxHQUNwRSxJQUFLLElBQUkzSCxFQUFJeWpFLEdBQUkvMEQsRUFBSSxFQUFHelEsRUFBSStPLEVBQUcwQixFQUFJelEsRUFBRUssT0FBUW9RLElBQUssQ0FDOUMsSUFBSTVPLEVBQUk3QixFQUFFeVEsR0FDVjFPLEVBQUlBLEVBQUUybUIsSUFBSTdtQixHQUVkLE9BQU9FLEVBR1gsSUFBSTZqRSxHQUFLLElBQUljLEdBQUcsSUFFaEIsU0FBU2YsS0FDTCxPQUFPQyxHQXdCUCxJQUFJaUIsR0FBbUIsV0FFdkIsU0FBUzkzRCxFQUFFQSxHQUdQclAsS0FBS3VpQyxFQUFJbHpCLEVBQUksU0FBU3JGLEVBQUczSCxHQUNyQixPQUFPZ04sRUFBRXJGLEVBQUczSCxJQUFNLEdBQUVrZ0MsRUFBRXY0QixFQUFFb0IsSUFBSy9JLEVBQUUrSSxNQUMvQixTQUFTaUUsRUFBR3JGLEdBQ1osT0FBTyxHQUFFdTRCLEVBQUVsekIsRUFBRWpFLElBQUtwQixFQUFFb0IsTUFDckJwTCxLQUFLeW5FLEdBQUt6QixLQUFNaG1FLEtBQUswbkUsR0FBSyxJQUFJbkMsR0FBR3ZsRSxLQUFLdWlDLEdBTTdDLE9BQU9sekIsRUFBRXM0RCxHQUFLLFNBQVMzOUQsR0FDbkIsT0FBTyxJQUFJcUYsRUFBRXJGLEVBQUV1NEIsSUFDaEJsekIsRUFBRS9NLFVBQVV5VyxJQUFNLFNBQVMxSixHQUMxQixPQUFPLE1BQVFyUCxLQUFLeW5FLEdBQUczaEUsSUFBSXVKLElBQzVCQSxFQUFFL00sVUFBVXdELElBQU0sU0FBU3VKLEdBQzFCLE9BQU9yUCxLQUFLeW5FLEdBQUczaEUsSUFBSXVKLElBQ3BCQSxFQUFFL00sVUFBVTJrRSxNQUFRLFdBQ25CLE9BQU9qbkUsS0FBSzBuRSxHQUFHckMsTUFDaEJoMkQsRUFBRS9NLFVBQVU0a0UsS0FBTyxXQUNsQixPQUFPbG5FLEtBQUswbkUsR0FBR3BDLE1BQ2hCajJELEVBQUUvTSxVQUFVZ21ELEVBQUksV0FDZixPQUFPdG9ELEtBQUswbkUsR0FBR3BmLEtBTW5CajVDLEVBQUUvTSxVQUFVZ2UsUUFBVSxTQUFTalIsR0FDM0IsSUFBSXJGLEVBQUloSyxLQUFLeW5FLEdBQUczaEUsSUFBSXVKLEdBQ3BCLE9BQU9yRixFQUFJaEssS0FBSzBuRSxHQUFHcG5ELFFBQVF0VyxJQUFNLEdBQ2xDekksT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxPQUFRLENBQzFDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLMG5FLEdBQUd0aUQsTUFFbkJwWCxZQUFZLEVBQ1ppTyxjQUFjLElBRXlDNU0sRUFBRS9NLFVBQVVxRCxRQUFVLFNBQVMwSixHQUN0RnJQLEtBQUswbkUsR0FBRzNDLElBQUcsU0FBVS82RCxFQUFHM0gsR0FDcEIsT0FBT2dOLEVBQUVyRixJQUFJLE1BR2tDcUYsRUFBRS9NLFVBQVUwbUIsSUFBTSxTQUFTM1osR0FFOUUsSUFBSXJGLEVBQUloSyxLQUFLZ2EsT0FBTzNLLEVBQUVqRSxLQUN0QixPQUFPcEIsRUFBRTI3RCxLQUFLMzdELEVBQUV5OUQsR0FBR2pELEdBQUduMUQsRUFBRWpFLElBQUtpRSxHQUFJckYsRUFBRTA5RCxHQUFHbEQsR0FBR24xRCxFQUFHLFFBRUxBLEVBQUUvTSxVQUFVMFgsT0FBUyxTQUFTM0ssR0FDckUsSUFBSXJGLEVBQUloSyxLQUFLOEYsSUFBSXVKLEdBQ2pCLE9BQU9yRixFQUFJaEssS0FBSzJsRSxLQUFLM2xFLEtBQUt5bkUsR0FBRzE3RCxPQUFPc0QsR0FBSXJQLEtBQUswbkUsR0FBRzM3RCxPQUFPL0IsSUFBTWhLLE1BQzlEcVAsRUFBRS9NLFVBQVVxL0QsUUFBVSxTQUFTMzNELEdBQzlCLEtBQU1BLGFBQWFxRixHQUFJLE9BQU8sRUFDOUIsR0FBSXJQLEtBQUtvbEIsT0FBU3BiLEVBQUVvYixLQUFNLE9BQU8sRUFDakMsSUFBSyxJQUFJL2lCLEVBQUlyQyxLQUFLMG5FLEdBQUdqQyxLQUFNMTBELEVBQUkvRyxFQUFFMDlELEdBQUdqQyxLQUFNcGpFLEVBQUU4akUsTUFBUSxDQUNoRCxJQUFJN2xFLEVBQUkrQixFQUFFNmpFLEtBQUs5NkQsSUFBS2pKLEVBQUk0TyxFQUFFbTFELEtBQUs5NkQsSUFDL0IsSUFBSzlLLEVBQUVxaEUsUUFBUXgvRCxHQUFJLE9BQU8sRUFFOUIsT0FBTyxHQUNSa04sRUFBRS9NLFVBQVV2QyxTQUFXLFdBQ3RCLElBQUlzUCxFQUFJLEdBQ1IsT0FBT3JQLEtBQUsyRixTQUFRLFNBQVVxRSxHQUMxQnFGLEVBQUU1UCxLQUFLdUssRUFBRWpLLGVBQ1IsSUFBTXNQLEVBQUUxTyxPQUFTLGlCQUFtQixvQkFBc0IwTyxFQUFFaFAsS0FBSyxRQUFVLE9BQ2pGZ1AsRUFBRS9NLFVBQVVxakUsS0FBTyxTQUFTMzdELEVBQUczSCxHQUM5QixJQUFJME8sRUFBSSxJQUFJMUIsRUFDWixPQUFPMEIsRUFBRXd4QixFQUFJdmlDLEtBQUt1aUMsRUFBR3h4QixFQUFFMDJELEdBQUt6OUQsRUFBRytHLEVBQUUyMkQsR0FBS3JsRSxFQUFHME8sR0FDMUMxQixFQXZFb0IsR0F3RXRCKzNELEdBQW1CLFdBQ3BCLFNBQVMvM0QsSUFDTHJQLEtBQUtza0UsR0FBSyxJQUFJaUIsR0FBRyxHQUFFaGpDLEdBRXZCLE9BQU9sekIsRUFBRS9NLFVBQVVzbEUsTUFBUSxTQUFTdjRELEdBQ2hDLElBQUlyRixFQUFJcUYsRUFBRXc0RCxJQUFJejhELElBQUsvSSxFQUFJckMsS0FBS3NrRSxHQUFHeCtELElBQUlrRSxHQUNuQzNILEVBRUEsSUFBa0JnTixFQUFFd0ksTUFBUSxJQUFxQnhWLEVBQUV3VixLQUFPN1gsS0FBS3NrRSxHQUFLdGtFLEtBQUtza0UsR0FBR0UsR0FBR3g2RCxFQUFHcUYsR0FBSyxJQUFxQkEsRUFBRXdJLE1BQVEsSUFBb0J4VixFQUFFd1YsS0FBTzdYLEtBQUtza0UsR0FBS3RrRSxLQUFLc2tFLEdBQUdFLEdBQUd4NkQsRUFBRyxDQUN2SzZOLEtBQU14VixFQUFFd1YsS0FDUmd3RCxJQUFLeDRELEVBQUV3NEQsTUFDTixJQUFxQng0RCxFQUFFd0ksTUFBUSxJQUFxQnhWLEVBQUV3VixLQUFPN1gsS0FBS3NrRSxHQUFLdGtFLEtBQUtza0UsR0FBR0UsR0FBR3g2RCxFQUFHLENBQ3RGNk4sS0FBTSxFQUNOZ3dELElBQUt4NEQsRUFBRXc0RCxNQUNOLElBQXFCeDRELEVBQUV3SSxNQUFRLElBQWtCeFYsRUFBRXdWLEtBQU83WCxLQUFLc2tFLEdBQUt0a0UsS0FBS3NrRSxHQUFHRSxHQUFHeDZELEVBQUcsQ0FDbkY2TixLQUFNLEVBQ05nd0QsSUFBS3g0RCxFQUFFdzRELE1BQ04sSUFBb0J4NEQsRUFBRXdJLE1BQVEsSUFBa0J4VixFQUFFd1YsS0FBTzdYLEtBQUtza0UsR0FBS3RrRSxLQUFLc2tFLEdBQUd2NEQsT0FBTy9CLEdBQUssSUFBb0JxRixFQUFFd0ksTUFBUSxJQUFxQnhWLEVBQUV3VixLQUFPN1gsS0FBS3NrRSxHQUFLdGtFLEtBQUtza0UsR0FBR0UsR0FBR3g2RCxFQUFHLENBQzVLNk4sS0FBTSxFQUNOZ3dELElBQUt4bEUsRUFBRXdsRSxNQUNOLElBQWtCeDRELEVBQUV3SSxNQUFRLElBQW9CeFYsRUFBRXdWLEtBQU83WCxLQUFLc2tFLEdBQUt0a0UsS0FBS3NrRSxHQUFHRSxHQUFHeDZELEVBQUcsQ0FDbEY2TixLQUFNLEVBQ05nd0QsSUFBS3g0RCxFQUFFdzRELE1BU1gsS0FBTTduRSxLQUFLc2tFLEdBQUt0a0UsS0FBS3NrRSxHQUFHRSxHQUFHeDZELEVBQUdxRixJQUMvQkEsRUFBRS9NLFVBQVV3bEUsR0FBSyxXQUNoQixJQUFJejRELEVBQUksR0FDUixPQUFPclAsS0FBS3NrRSxHQUFHUyxJQUFHLFNBQVUvNkQsRUFBRzNILEdBQzNCZ04sRUFBRTVQLEtBQUs0QyxNQUNOZ04sR0FDTkEsRUFyQ2lCLEdBc0NuQisyRCxHQUFtQixXQUNwQixTQUFTLzJELEVBQUVBLEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxFQUFHNkIsRUFBR291QixFQUFHamhCLEdBQzVCdFAsS0FBS3dJLE1BQVE2RyxFQUFHclAsS0FBSytuRSxLQUFPLzlELEVBQUdoSyxLQUFLZ29FLEdBQUszbEUsRUFBR3JDLEtBQUtpb0UsV0FBYWwzRCxFQUFHL1EsS0FBS2trRSxHQUFLNWpFLEVBQUdOLEtBQUtrb0UsVUFBWS9sRSxFQUMvRm5DLEtBQUttb0UsR0FBSzUzQyxFQUFHdndCLEtBQUtvb0UsR0FBSzk0RCxFQUczQixPQUFPRCxFQUFFZzVELEdBQUssU0FBU3IrRCxFQUFHM0gsRUFBRzBPLEVBQUd6USxHQUM1QixJQUFJNkIsRUFBSSxHQUNSLE9BQU9FLEVBQUVzRCxTQUFRLFNBQVUwSixHQUN2QmxOLEVBQUUxQyxLQUFLLENBQ0hvWSxLQUFNLEVBQ05nd0QsSUFBS3g0RCxPQUVSLElBQUlBLEVBQUVyRixFQUFHM0gsRUFBRzhrRSxHQUFHUSxHQUFHdGxFLEdBQUlGLEVBQUc0TyxFQUFHelEsR0FDVCxHQUNPLElBQ2hDaUIsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxtQkFBb0IsQ0FDdER3RCxJQUFLLFdBQ0QsT0FBUTlGLEtBQUtra0UsR0FBRzViLEtBRXBCdDZDLFlBQVksRUFDWmlPLGNBQWMsSUFDZDVNLEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUMvQixLQUFNclAsS0FBS2tvRSxZQUFjNzRELEVBQUU2NEQsV0FBYWxvRSxLQUFLbW9FLEtBQU85NEQsRUFBRTg0RCxJQUFNbm9FLEtBQUtra0UsR0FBR3ZDLFFBQVF0eUQsRUFBRTYwRCxLQUFPMUwsR0FBR3g0RCxLQUFLd0ksTUFBTzZHLEVBQUU3RyxRQUFVeEksS0FBSytuRSxLQUFLcEcsUUFBUXR5RCxFQUFFMDRELE9BQVMvbkUsS0FBS2dvRSxHQUFHckcsUUFBUXR5RCxFQUFFMjRELEtBQU0sT0FBTyxFQUM1SyxJQUFJaCtELEVBQUloSyxLQUFLaW9FLFdBQVk1bEUsRUFBSWdOLEVBQUU0NEQsV0FDL0IsR0FBSWorRCxFQUFFckosU0FBVzBCLEVBQUUxQixPQUFRLE9BQU8sRUFDbEMsSUFBSyxJQUFJb1EsRUFBSSxFQUFHQSxFQUFJL0csRUFBRXJKLE9BQVFvUSxJQUFLLEdBQUkvRyxFQUFFK0csR0FBRzhHLE9BQVN4VixFQUFFME8sR0FBRzhHLE9BQVM3TixFQUFFK0csR0FBRzgyRCxJQUFJbEcsUUFBUXQvRCxFQUFFME8sR0FBRzgyRCxLQUFNLE9BQU8sRUFDdEcsT0FBTyxHQUNSeDRELEVBNUJpQixHQTZCbkJ3M0QsR0FBbUIsV0FDcEIsU0FBU3gzRCxFQUlUQSxFQUlBckYsRUFLQTNILEVBS0EwTyxFQUlBelEsR0FDSU4sS0FBS29rRSxHQUFLLzBELEVBQUdyUCxLQUFLc29FLEdBQUt0K0QsRUFBR2hLLEtBQUt1b0UsR0FBS2xtRSxFQUFHckMsS0FBS3dvRSxHQUFLejNELEVBQUcvUSxLQUFLeW9FLEdBQUtub0UsRUFTOUQsT0FBTytPLEVBQUVxNUQsR0FBSyxTQUFTMStELEVBQUczSCxHQUMxQixJQUFJME8sRUFBSSxJQUFJNEgsSUFDWixPQUFPNUgsRUFBRWhMLElBQUlpRSxFQUFHeTlELEdBQUdrQixHQUFHMytELEVBQUczSCxJQUFLLElBQUlnTixFQUFFd21CLEdBQUVuZSxNQUFPM0csRUFBR2sxRCxLQUFNUyxLQUFNUCxPQUM3RDkyRCxFQXBDaUIsR0FxQ25CbzRELEdBQW1CLFdBQ3BCLFNBQVNwNEQsRUFPVEEsRUFNQXJGLEVBS0EzSCxFQUtBME8sRUFLQXpRLEdBQ0lOLEtBQUttbEUsWUFBYzkxRCxFQUFHclAsS0FBSzRvRSxHQUFLNStELEVBQUdoSyxLQUFLNGxDLEdBQUt2akMsRUFBR3JDLEtBQUt3akMsR0FBS3p5QixFQUFHL1EsS0FBS2tsQyxHQUFLNWtDLEVBTzNFLE9BQU8rTyxFQUFFczVELEdBQUssU0FBUzMrRCxFQUFHM0gsR0FDdEIsT0FBTyxJQUFJZ04sRUFBRW0xRCxHQUFHL2pCLEVBQUdwK0MsRUFBRzhqRSxLQUFNQSxLQUFNQSxPQUNuQzkyRCxFQXZDaUIsR0F3Q25CeTNELEdBQUssU0FFVnozRCxFQUVBckYsRUFFQTNILEVBS0EwTyxHQUNJL1EsS0FBSzJsQyxHQUFLdDJCLEVBQUdyUCxLQUFLNm9FLGlCQUFtQjcrRCxFQUFHaEssS0FBS29MLElBQU0vSSxFQUFHckMsS0FBS3lqQyxHQUFLMXlCLEdBQ2pFdTJELEdBQUssU0FBU2o0RCxFQUFHckYsR0FDaEJoSyxLQUFLZ2xFLFNBQVczMUQsRUFBR3JQLEtBQUt5bEMsR0FBS3o3QixHQUM5QnU4RCxHQUFLLFNBRVJsM0QsRUFFQXJGLEVBT0EzSCxFQUN1RDBPLFFBQ25ELElBQVcxTyxJQUFNQSxFQUFJbWlFLEdBQUcvakIsUUFBSSxJQUFXMXZDLElBQU1BLEVBQUksTUFBTy9RLEtBQUs4b0UsTUFBUXo1RCxFQUFHclAsS0FBSytvRSxVQUFZLytELEVBQ3pGaEssS0FBS21sRSxZQUFjOWlFLEVBQUdyQyxLQUFLZ3BFLE1BQVFqNEQsR0FDcEMwMUQsR0FBbUIsV0FDbEIsU0FBU3AzRCxJQUtMclAsS0FBS3FsQyxHQUFLLEVBT1ZybEMsS0FBSytqQyxHQUFLdWlDLEtBRVZ0bUUsS0FBS2lrQyxHQUFLdWdDLEdBQUcvakIsRUFBR3pnRCxLQUFLczlDLElBQUssRUFNMUJ0OUMsS0FBSzZrQyxJQUFLLEVBRWQsT0FBT3RqQyxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FTNUN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtzOUMsSUFFaEJ0dkMsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxjQUFlLENBQ093RCxJQUFLLFdBQzFELE9BQU85RixLQUFLaWtDLElBRWhCajJCLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsS0FBTSxDQUM2QndELElBQUssV0FDdkUsT0FBTyxJQUFNOUYsS0FBS3FsQyxJQUV0QnIzQixZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDaUN3RCxJQUFLLFdBQzNFLE9BQU85RixLQUFLNmtDLElBRWhCNzJCLFlBQVksRUFDWmlPLGNBQWMsSUFNbEI1TSxFQUFFL00sVUFBVXNpQyxHQUFLLFNBQVN2MUIsR0FDdEJBLEVBQUV3a0QsSUFBTSxJQUFNN3pELEtBQUs2a0MsSUFBSyxFQUFJN2tDLEtBQUtpa0MsR0FBSzUwQixJQVExQ0EsRUFBRS9NLFVBQVUraEMsR0FBSyxXQUNiLElBQUloMUIsRUFBSTgyRCxLQUFNbjhELEVBQUltOEQsS0FBTTlqRSxFQUFJOGpFLEtBQzVCLE9BQU9ubUUsS0FBSytqQyxHQUFHcCtCLFNBQVEsU0FBVW9MLEVBQUd6USxHQUNoQyxPQUFRQSxHQUNOLEtBQUssRUFDSCtPLEVBQUlBLEVBQUUyWixJQUFJalksR0FDVixNQUVGLEtBQUssRUFDSC9HLEVBQUlBLEVBQUVnZixJQUFJalksR0FDVixNQUVGLEtBQUssRUFDSDFPLEVBQUlBLEVBQUUybUIsSUFBSWpZLEdBQ1YsTUFFRixRQUNFLFNBRUgsSUFBSTAyRCxHQUFHem5FLEtBQUtpa0MsR0FBSWprQyxLQUFLczlDLEdBQUlqdUMsRUFBR3JGLEVBQUczSCxJQUt4Q2dOLEVBQUUvTSxVQUFVMGxDLEdBQUssV0FDYmhvQyxLQUFLNmtDLElBQUssRUFBSTdrQyxLQUFLK2pDLEdBQUt1aUMsTUFDekJqM0QsRUFBRS9NLFVBQVVzbUMsR0FBSyxTQUFTdjVCLEVBQUdyRixHQUM1QmhLLEtBQUs2a0MsSUFBSyxFQUFJN2tDLEtBQUsrakMsR0FBSy9qQyxLQUFLK2pDLEdBQUd5Z0MsR0FBR24xRCxFQUFHckYsSUFDdkNxRixFQUFFL00sVUFBVWlsQyxHQUFLLFNBQVNsNEIsR0FDekJyUCxLQUFLNmtDLElBQUssRUFBSTdrQyxLQUFLK2pDLEdBQUsvakMsS0FBSytqQyxHQUFHaDRCLE9BQU9zRCxJQUN4Q0EsRUFBRS9NLFVBQVVxbEMsR0FBSyxXQUNoQjNuQyxLQUFLcWxDLElBQU0sR0FDWmgyQixFQUFFL00sVUFBVTJpQyxHQUFLLFdBQ2hCamxDLEtBQUtxbEMsSUFBTSxHQUNaaDJCLEVBQUUvTSxVQUFVb2tDLEdBQUssV0FDaEIxbUMsS0FBSzZrQyxJQUFLLEVBQUk3a0MsS0FBS3M5QyxJQUFLLEdBQ3pCanVDLEVBekdlLEdBMEdqQjAzRCxHQUFtQixXQUNwQixTQUFTMTNELEVBQUVBLEdBQ1ByUCxLQUFLMG9DLEdBQUtyNUIsRUFFVnJQLEtBQUtxb0MsR0FBSyxJQUFJMXZCLElBRWQzWSxLQUFLMGpDLEdBQUtnakMsS0FFVjFtRSxLQUFLOG9DLEdBQUs2K0IsS0FNVjNuRSxLQUFLOGxDLEdBQUssSUFBSWtoQyxHQUFHLElBS3JCLE9BQU8zM0QsRUFBRS9NLFVBQVVnakMsR0FBSyxTQUFTajJCLEdBQzdCLElBQUssSUFBSXJGLEVBQUksRUFBRzNILEVBQUlnTixFQUFFczJCLEdBQUkzN0IsRUFBSTNILEVBQUUxQixPQUFRcUosSUFBSyxDQUN6QyxJQUFJK0csRUFBSTFPLEVBQUUySCxHQUNWcUYsRUFBRW8wQixjQUFjd3hCLEdBQUtqMUQsS0FBS3ltQyxHQUFHMTFCLEVBQUcxQixFQUFFbzBCLElBQU1wMEIsRUFBRW8wQixjQUFjaGlDLElBQU16QixLQUFLZ2tDLEdBQUdqekIsRUFBRzFCLEVBQUVqRSxJQUFLaUUsRUFBRW8wQixJQUV0RixJQUFLLElBQUluakMsRUFBSSxFQUFHNkIsRUFBSWtOLEVBQUV3NUQsaUJBQWtCdm9FLEVBQUk2QixFQUFFeEIsT0FBUUwsSUFBSyxDQUN2RCxJQUFJaXdCLEVBQUlwdUIsRUFBRTdCLEdBQ1ZOLEtBQUtna0MsR0FBR3pULEVBQUdsaEIsRUFBRWpFLElBQUtpRSxFQUFFbzBCLE1BR21EcDBCLEVBQUUvTSxVQUFVcW1DLEdBQUssU0FBU3Q1QixHQUNyRyxJQUFJckYsRUFBSWhLLEtBQ1JBLEtBQUtzbkMsR0FBR2o0QixHQUFHLFNBQVVoTixHQUNqQixJQUFJME8sRUFBSS9HLEVBQUVxOUIsR0FBR2hsQyxHQUNiLE9BQVFnTixFQUFFeTVELE9BQ1IsS0FBSyxFQUNIOStELEVBQUVpK0IsR0FBRzVsQyxJQUFNME8sRUFBRTZ6QixHQUFHdjFCLEVBQUU4MUQsYUFDbEIsTUFFRixLQUFLLEVBR0hwMEQsRUFBRWswQixLQUFNbDBCLEVBQUVpMEIsSUFJVmowQixFQUFFaTNCLEtBQU1qM0IsRUFBRTZ6QixHQUFHdjFCLEVBQUU4MUQsYUFDZixNQUVGLEtBQUssRUFLSHAwRCxFQUFFazBCLEtBQU1sMEIsRUFBRWkwQixJQUFNaDdCLEVBQUVpL0QsYUFBYTVtRSxHQUMvQixNQUVGLEtBQUssRUFDSDJILEVBQUVpK0IsR0FBRzVsQyxLQUFPME8sRUFBRTIxQixLQUFNMzFCLEVBQUU2ekIsR0FBR3YxQixFQUFFODFELGNBQzNCLE1BRUYsS0FBSyxFQUNIbjdELEVBQUVpK0IsR0FBRzVsQyxLQUlMMkgsRUFBRTY3QixHQUFHeGpDLEdBQUkwTyxFQUFFNnpCLEdBQUd2MUIsRUFBRTgxRCxjQUNoQixNQUVGLFFBQ0UsVUFTWjkxRCxFQUFFL00sVUFBVWdsQyxHQUFLLFNBQVNqNEIsRUFBR3JGLEdBQ3pCLElBQUkzSCxFQUFJckMsS0FDUnFQLEVBQUUwNUQsVUFBVXBvRSxPQUFTLEVBQUkwTyxFQUFFMDVELFVBQVVwakUsUUFBUXFFLEdBQUtoSyxLQUFLcW9DLEdBQUcxaUMsU0FBUSxTQUFVMEosRUFBRzBCLEdBQzNFMU8sRUFBRTRsQyxHQUFHbDNCLElBQU0vRyxFQUFFK0csT0FRckIxQixFQUFFL00sVUFBVTRtRSxHQUFLLFNBQVM3NUQsR0FDdEIsSUFBSXJGLEVBQUlxRixFQUFFMjFELFNBQVUzaUUsRUFBSWdOLEVBQUVvMkIsR0FBR2g5QixNQUFPc0ksRUFBSS9RLEtBQUtrb0MsR0FBR2wrQixHQUNoRCxHQUFJK0csRUFBRyxDQUNILElBQUl6USxFQUFJeVEsRUFBRXZILE9BQ1YsR0FBSSs2RCxHQUFHamtFLEdBQUksR0FBSSxJQUFNK0IsRUFBRyxDQU9wQixJQUFJRixFQUFJLElBQUksR0FBRTdCLEVBQUVvK0MsTUFDaEIxK0MsS0FBS2drQyxHQUFHaDZCLEVBQUc3SCxFQUFHLElBQUlWLEdBQUdVLEVBQUcwekIsR0FBRW5lLGFBQ3ZCLEdBQUUsSUFBTXJWLFFBQVNyQyxLQUFLMDdELEdBQUcxeEQsS0FBTzNILElBR3ZDckMsS0FBSzZsQyxHQUFHNzdCLEdBQUloSyxLQUFLOGxDLEdBQUs5bEMsS0FBSzhsQyxHQUFHOWMsSUFBSWhmLE1BTzFDcUYsRUFBRS9NLFVBQVV5aUMsR0FBSyxTQUFTMTFCLEdBQ3RCLElBQUlyRixFQUFJaEssS0FBTXFDLEVBQUksSUFBSXNXLElBQ3RCM1ksS0FBS3FvQyxHQUFHMWlDLFNBQVEsU0FBVW9MLEVBQUd6USxHQUN6QixJQUFJNkIsRUFBSTZILEVBQUVrK0IsR0FBRzVuQyxHQUNiLEdBQUk2QixFQUFHLENBQ0gsR0FBSTRPLEVBQUU2M0QsSUFBTXJFLEdBQUdwaUUsRUFBRXFILFFBQVMsQ0FTdEIsSUFBSSttQixFQUFJLElBQUksR0FBRXB1QixFQUFFcUgsT0FBT2sxQyxNQUN2QixPQUFTMTBDLEVBQUUwNUIsR0FBRzU5QixJQUFJeXFCLElBQU12bUIsRUFBRXMvQixHQUFHaHBDLEVBQUdpd0IsSUFBTXZtQixFQUFFZzZCLEdBQUcxakMsRUFBR2l3QixFQUFHLElBQUk5dUIsR0FBRzh1QixFQUFHbGhCLElBRS9EMEIsRUFBRXBQLEtBQU9VLEVBQUUwRCxJQUFJekYsRUFBR3lRLEVBQUVzekIsTUFBT3R6QixFQUFFaTNCLFVBR3JDLElBQUlqM0IsRUFBSW8xRCxLQUtBbm1FLEtBQUs4b0MsR0FBR25qQyxTQUFRLFNBQVUwSixFQUFHaE4sR0FDakMsSUFBSS9CLEdBQUksRUFDUitCLEVBQUUra0UsSUFBRyxTQUFVLzNELEdBQ1gsSUFBSWhOLEVBQUkySCxFQUFFaytCLEdBQUc3NEIsR0FDYixPQUFRaE4sR0FBSyxJQUE0QkEsRUFBRTJoRSxLQUFPMWpFLEdBQUksR0FBSSxNQUN6REEsSUFBTXlRLEVBQUlBLEVBQUVpWSxJQUFJM1osT0FFekIsSUFBSS9PLEVBQUksSUFBSXVtRSxHQUFHeDNELEVBQUdoTixFQUFHckMsS0FBSzhsQyxHQUFJOWxDLEtBQUswakMsR0FBSTN5QixHQUN2QyxPQUFPL1EsS0FBSzBqQyxHQUFLZ2pDLEtBQU0xbUUsS0FBSzhvQyxHQUFLNitCLEtBQU0zbkUsS0FBSzhsQyxHQUFLLElBQUlraEMsR0FBRyxJQUFJMW1FLEdBT2hFK08sRUFBRS9NLFVBQVVta0MsR0FBSyxTQUFTcDNCLEVBQUdyRixHQUN6QixHQUFJaEssS0FBS2lvQyxHQUFHNTRCLEdBQUksQ0FDWixJQUFJaE4sRUFBSXJDLEtBQUtzcEMsR0FBR2o2QixFQUFHckYsRUFBRW9CLEtBQU8sRUFBbUIsRUFDL0NwTCxLQUFLcW5DLEdBQUdoNEIsR0FBR3U1QixHQUFHNStCLEVBQUVvQixJQUFLL0ksR0FBSXJDLEtBQUswakMsR0FBSzFqQyxLQUFLMGpDLEdBQUc4Z0MsR0FBR3g2RCxFQUFFb0IsSUFBS3BCLEdBQUloSyxLQUFLOG9DLEdBQUs5b0MsS0FBSzhvQyxHQUFHMDdCLEdBQUd4NkQsRUFBRW9CLElBQUtwTCxLQUFLK25DLEdBQUcvOUIsRUFBRW9CLEtBQUs0ZCxJQUFJM1osTUFXaEhBLEVBQUUvTSxVQUFVMGhDLEdBQUssU0FBUzMwQixFQUFHckYsRUFBRzNILEdBQzVCLEdBQUlyQyxLQUFLaW9DLEdBQUc1NEIsR0FBSSxDQUNaLElBQUkwQixFQUFJL1EsS0FBS3FuQyxHQUFHaDRCLEdBQ2hCclAsS0FBS3NwQyxHQUFHajZCLEVBQUdyRixHQUFLK0csRUFBRTYzQixHQUFHNStCLEVBQUcsR0FHeEIrRyxFQUFFdzJCLEdBQUd2OUIsR0FBSWhLLEtBQUs4b0MsR0FBSzlvQyxLQUFLOG9DLEdBQUcwN0IsR0FBR3g2RCxFQUFHaEssS0FBSytuQyxHQUFHLzlCLEdBQUdnUSxPQUFPM0ssSUFBS2hOLElBQU1yQyxLQUFLMGpDLEdBQUsxakMsS0FBSzBqQyxHQUFHOGdDLEdBQUd4NkQsRUFBRzNILE1BRTNGZ04sRUFBRS9NLFVBQVUybUUsYUFBZSxTQUFTNTVELEdBQ25DclAsS0FBS3FvQyxHQUFHcnVCLE9BQU8zSyxJQU9uQkEsRUFBRS9NLFVBQVVvNUQsR0FBSyxTQUFTcnNELEdBQ3RCLElBQUlyRixFQUFJaEssS0FBS3FuQyxHQUFHaDRCLEdBQUdnMUIsS0FDbkIsT0FBT3JrQyxLQUFLMG9DLEdBQUcwZixHQUFHLzRDLEdBQUcrVixLQUFPcGIsRUFBRTQ3QixHQUFHeGdCLEtBQU9wYixFQUFFazdCLEdBQUc5ZixNQU1qRC9WLEVBQUUvTSxVQUFVcWxDLEdBQUssU0FBU3Q0QixHQUN0QnJQLEtBQUtxbkMsR0FBR2g0QixHQUFHczRCLE1BQ1p0NEIsRUFBRS9NLFVBQVUra0MsR0FBSyxTQUFTaDRCLEdBQ3pCLElBQUlyRixFQUFJaEssS0FBS3FvQyxHQUFHdmlDLElBQUl1SixHQUNwQixPQUFPckYsSUFBTUEsRUFBSSxJQUFJeThELEdBQUl6bUUsS0FBS3FvQyxHQUFHdGlDLElBQUlzSixFQUFHckYsSUFBS0EsR0FDOUNxRixFQUFFL00sVUFBVXlsQyxHQUFLLFNBQVMxNEIsR0FDekIsSUFBSXJGLEVBQUloSyxLQUFLOG9DLEdBQUdoakMsSUFBSXVKLEdBQ3BCLE9BQU9yRixJQUFNQSxFQUFJLElBQUlnOUQsR0FBRyxJQUFJaG5FLEtBQUs4b0MsR0FBSzlvQyxLQUFLOG9DLEdBQUcwN0IsR0FBR24xRCxFQUFHckYsSUFBS0EsR0FPN0RxRixFQUFFL00sVUFBVTJsQyxHQUFLLFNBQVM1NEIsR0FDdEIsSUFBSXJGLEVBQUksT0FBU2hLLEtBQUtrb0MsR0FBRzc0QixHQUN6QixPQUFPckYsR0FBSyxHQUFFLHdCQUF5QiwyQkFBNEJxRixHQUFJckYsR0FNM0VxRixFQUFFL00sVUFBVTRsQyxHQUFLLFNBQVM3NEIsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUFLcW9DLEdBQUd2aUMsSUFBSXVKLEdBQ3BCLE9BQU9yRixHQUFLQSxFQUFFZzdCLEdBQUssS0FBT2hsQyxLQUFLMG9DLEdBQUduRCxHQUFHbDJCLElBT3pDQSxFQUFFL00sVUFBVXVqQyxHQUFLLFNBQVN4MkIsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUNSQSxLQUFLcW9DLEdBQUd0aUMsSUFBSXNKLEVBQUcsSUFBSW8zRCxJQUFLem1FLEtBQUswb0MsR0FBRzBmLEdBQUcvNEMsR0FBRzFKLFNBQVEsU0FBVXRELEdBQ3BEMkgsRUFBRWc2QixHQUFHMzBCLEVBQUdoTixFQUF3QixVQU94Q2dOLEVBQUUvTSxVQUFVZ25DLEdBQUssU0FBU2o2QixFQUFHckYsR0FDekIsT0FBT2hLLEtBQUswb0MsR0FBRzBmLEdBQUcvNEMsR0FBRzBKLElBQUkvTyxJQUMxQnFGLEVBek9pQixHQStQcEIsU0FBU3M0RCxLQUNULE9BQU8sSUFBSXBDLEdBQUcsR0FBRWhqQyxHQUdwQixTQUFTK2pDLEtBQ0wsT0FBTyxJQUFJZixHQUFHLEdBQUVoakMsR0FxQ2hCLFNBQVNnbEMsR0FBR2w0RCxHQUNaLElBQUlyRixFQUFHM0gsRUFDUCxNQUFPLHNCQUF3QixRQUFVQSxJQUFNLFFBQVUySCxFQUFJLE1BQVFxRixPQUFJLEVBQVNBLEVBQUU4NUQsZ0JBQWEsSUFBV24vRCxPQUFJLEVBQVNBLEVBQUVvL0QsU0FBVyxJQUFJQyxnQkFBYSxJQUFXaG5FLE9BQUksRUFBU0EsRUFBRWluRSxhQVdqTCxTQUFTdEIsR0FBRzM0RCxHQUNaLElBQUlyRixFQUFJcUYsRUFBRTg1RCxTQUFTQyxPQUFPRyxtQkFDMUIsT0FBT2hDLEdBQUd2OUQsR0FBS2crRCxHQUFHaCtELEdBQUtBLEVBS3ZCLFNBQVM4OUQsR0FBR3o0RCxHQUNaLElBQUlyRixFQUFJMCtELEdBQUdyNUQsRUFBRTg1RCxTQUFTQyxPQUFPSSxxQkFBcUJDLGdCQUNsRCxPQUFPLElBQUkzNEMsR0FBRTltQixFQUFFNjRELFFBQVM3NEQsRUFBRTAvRCxPQW9COUIsSUFBSXJDLEdBQUssSUFBSS9mLE9BQU8saURBRTZDLFNBQVMrZ0IsR0FBR2g1RCxHQUN6RSxNQUFPLGNBQWVBLEVBQUksRUFBb0IsaUJBQWtCQSxFQUFJLEVBQXVCLGlCQUFrQkEsR0FBSyxnQkFBaUJBLEVBQUksRUFBc0IsbUJBQW9CQSxFQUFJLEVBQXlCLGdCQUFpQkEsRUFBSSxFQUFzQixlQUFnQkEsRUFBSSxFQUFvQixtQkFBb0JBLEVBQUksRUFBbUIsa0JBQW1CQSxFQUFJLEVBQXdCLGVBQWdCQSxFQUFJLEVBQXFCLGFBQWNBLEVBQUlrNEQsR0FBR2w0RCxHQUFLLEVBQStCLEdBQXVCLEtBRzNhLFNBQVNpMUQsR0FBR2oxRCxFQUFHckYsR0FDeEYsSUFBSTNILEVBQUlnbUUsR0FBR2g1RCxHQUNYLEdBQUloTixJQUFNZ21FLEdBQUdyK0QsR0FBSSxPQUFPLEVBQ3hCLE9BQVEzSCxHQUNOLEtBQUssRUFDSCxPQUFPLEVBRVQsS0FBSyxFQUNILE9BQU9nTixFQUFFczZELGVBQWlCMy9ELEVBQUUyL0QsYUFFOUIsS0FBSyxFQUNILE9BQU83QixHQUFHejRELEdBQUdzeUQsUUFBUW1HLEdBQUc5OUQsSUFFMUIsS0FBSyxFQUNILE9BQU8sU0FBU3FGLEVBQUdyRixHQUNmLEdBQUksaUJBQW1CcUYsRUFBRW82RCxnQkFBa0IsaUJBQW1Cei9ELEVBQUV5L0QsZ0JBQWtCcDZELEVBQUVvNkQsZUFBZTlvRSxTQUFXcUosRUFBRXkvRCxlQUFlOW9FLE9BRS9ILE9BQU8wTyxFQUFFbzZELGlCQUFtQnovRCxFQUFFeS9ELGVBQzlCLElBQUlwbkUsRUFBSXFtRSxHQUFHcjVELEVBQUVvNkQsZ0JBQWlCMTRELEVBQUkyM0QsR0FBRzErRCxFQUFFeS9ELGdCQUN2QyxPQUFPcG5FLEVBQUV3Z0UsVUFBWTl4RCxFQUFFOHhELFNBQVd4Z0UsRUFBRXFuRSxRQUFVMzRELEVBQUUyNEQsTUFMN0MsQ0FNTHI2RCxFQUFHckYsR0FFUCxLQUFLLEVBQ0gsT0FBT3FGLEVBQUVpNkQsY0FBZ0J0L0QsRUFBRXMvRCxZQUU3QixLQUFLLEVBQ0gsT0FBTyxTQUFTajZELEVBQUdyRixHQUNmLE9BQU95K0QsR0FBR3A1RCxFQUFFdTZELFlBQVlqSSxRQUFROEcsR0FBR3orRCxFQUFFNC9ELGFBRGxDLENBRUx2NkQsRUFBR3JGLEdBRVAsS0FBSyxFQUNILE9BQU9xRixFQUFFdzZELGlCQUFtQjcvRCxFQUFFNi9ELGVBRWhDLEtBQUssRUFDSCxPQUFPLFNBQVN4NkQsRUFBR3JGLEdBQ2YsT0FBT3crRCxHQUFHbjVELEVBQUV5NkQsY0FBY0MsWUFBY3ZCLEdBQUd4K0QsRUFBRTgvRCxjQUFjQyxXQUFhdkIsR0FBR241RCxFQUFFeTZELGNBQWNFLGFBQWV4QixHQUFHeCtELEVBQUU4L0QsY0FBY0UsV0FEMUgsQ0FFTDM2RCxFQUFHckYsR0FFUCxLQUFLLEVBQ0gsT0FBTyxTQUFTcUYsRUFBR3JGLEdBQ2YsR0FBSSxpQkFBa0JxRixHQUFLLGlCQUFrQnJGLEVBQUcsT0FBT3crRCxHQUFHbjVELEVBQUU0NkQsZ0JBQWtCekIsR0FBR3grRCxFQUFFaWdFLGNBQ25GLEdBQUksZ0JBQWlCNTZELEdBQUssZ0JBQWlCckYsRUFBRyxDQUMxQyxJQUFJM0gsRUFBSW1tRSxHQUFHbjVELEVBQUU2NkQsYUFBY241RCxFQUFJeTNELEdBQUd4K0QsRUFBRWtnRSxhQUNwQyxPQUFPN25FLElBQU0wTyxFQUFJLEdBQUUxTyxLQUFPLEdBQUUwTyxHQUFLd3lCLE1BQU1saEMsSUFBTWtoQyxNQUFNeHlCLEdBRXZELE9BQU8sRUFOSixDQU9MMUIsRUFBR3JGLEdBRVAsS0FBSyxFQUNILE9BQU8sR0FBRXFGLEVBQUU4NkQsV0FBV2p3RCxRQUFVLEdBQUlsUSxFQUFFbWdFLFdBQVdqd0QsUUFBVSxHQUFJb3FELElBRWpFLEtBQUssR0FDSCxPQUFPLFNBQVNqMUQsRUFBR3JGLEdBQ2YsSUFBSTNILEVBQUlnTixFQUFFODVELFNBQVNDLFFBQVUsR0FBSXI0RCxFQUFJL0csRUFBRW0vRCxTQUFTQyxRQUFVLEdBQzFELEdBQUksR0FBRS9tRSxLQUFPLEdBQUUwTyxHQUFJLE9BQU8sRUFDMUIsSUFBSyxJQUFJelEsS0FBSytCLEVBQUcsR0FBSUEsRUFBRStMLGVBQWU5TixVQUFPLElBQVd5USxFQUFFelEsS0FBT2drRSxHQUFHamlFLEVBQUUvQixHQUFJeVEsRUFBRXpRLEtBQU0sT0FBTyxFQUN6RixPQUFPLEVBSkosQ0FLTCtPLEVBQUdyRixHQUVQLFFBQ0UsT0FBTyxNQUlmLFNBQVN1K0QsR0FBR2w1RCxFQUFHckYsR0FDWCxZQUFPLEtBQVlxRixFQUFFNkssUUFBVSxJQUFJOFAsTUFBSyxTQUFVM2EsR0FDOUMsT0FBT2kxRCxHQUFHajFELEVBQUdyRixNQUlyQixTQUFTcytELEdBQUdqNUQsRUFBR3JGLEdBQ1gsSUFBSTNILEVBQUlnbUUsR0FBR2g1RCxHQUFJMEIsRUFBSXMzRCxHQUFHcitELEdBQ3RCLEdBQUkzSCxJQUFNME8sRUFBRyxPQUFPLEdBQUUxTyxFQUFHME8sR0FDekIsT0FBUTFPLEdBQ04sS0FBSyxFQUNILE9BQU8sRUFFVCxLQUFLLEVBQ0gsT0FBTyxHQUFFZ04sRUFBRXM2RCxhQUFjMy9ELEVBQUUyL0QsY0FFN0IsS0FBSyxFQUNILE9BQU8sU0FBU3Q2RCxFQUFHckYsR0FDZixJQUFJM0gsRUFBSW1tRSxHQUFHbjVELEVBQUU0NkQsY0FBZ0I1NkQsRUFBRTY2RCxhQUFjbjVELEVBQUl5M0QsR0FBR3grRCxFQUFFaWdFLGNBQWdCamdFLEVBQUVrZ0UsYUFDeEUsT0FBTzduRSxFQUFJME8sR0FBSyxFQUFJMU8sRUFBSTBPLEVBQUksRUFBSTFPLElBQU0wTyxFQUFJLEVBRTFDd3lCLE1BQU1saEMsR0FBS2toQyxNQUFNeHlCLEdBQUssR0FBSyxFQUFJLEVBSjVCLENBS0wxQixFQUFHckYsR0FFUCxLQUFLLEVBQ0gsT0FBT20rRCxHQUFHOTRELEVBQUVvNkQsZUFBZ0J6L0QsRUFBRXkvRCxnQkFFaEMsS0FBSyxFQUNILE9BQU90QixHQUFHTCxHQUFHejRELEdBQUl5NEQsR0FBRzk5RCxJQUV0QixLQUFLLEVBQ0gsT0FBTyxHQUFFcUYsRUFBRWk2RCxZQUFhdC9ELEVBQUVzL0QsYUFFNUIsS0FBSyxFQUNILE9BQU8sU0FBU2o2RCxFQUFHckYsR0FDZixJQUFJM0gsRUFBSW9tRSxHQUFHcDVELEdBQUkwQixFQUFJMDNELEdBQUd6K0QsR0FDdEIsT0FBTzNILEVBQUVxdUIsRUFBRTNmLEdBRlIsQ0FHTDFCLEVBQUV1NkQsV0FBWTUvRCxFQUFFNC9ELFlBRXBCLEtBQUssRUFDSCxPQUFPLFNBQVN2NkQsRUFBR3JGLEdBQ2YsSUFBSyxJQUFJM0gsRUFBSWdOLEVBQUU4Z0IsTUFBTSxLQUFNcGYsRUFBSS9HLEVBQUVtbUIsTUFBTSxLQUFNN3ZCLEVBQUksRUFBR0EsRUFBSStCLEVBQUUxQixRQUFVTCxFQUFJeVEsRUFBRXBRLE9BQVFMLElBQUssQ0FDbkYsSUFBSTZCLEVBQUksR0FBRUUsRUFBRS9CLEdBQUl5USxFQUFFelEsSUFDbEIsR0FBSSxJQUFNNkIsRUFBRyxPQUFPQSxFQUV4QixPQUFPLEdBQUVFLEVBQUUxQixPQUFRb1EsRUFBRXBRLFFBTGxCLENBTUwwTyxFQUFFdzZELGVBQWdCNy9ELEVBQUU2L0QsZ0JBRXhCLEtBQUssRUFDSCxPQUFPLFNBQVN4NkQsRUFBR3JGLEdBQ2YsSUFBSTNILEVBQUksR0FBRW1tRSxHQUFHbjVELEVBQUUwNkQsVUFBV3ZCLEdBQUd4K0QsRUFBRSsvRCxXQUMvQixPQUFPLElBQU0xbkUsRUFBSUEsRUFBSSxHQUFFbW1FLEdBQUduNUQsRUFBRTI2RCxXQUFZeEIsR0FBR3grRCxFQUFFZ2dFLFlBRjFDLENBR0wzNkQsRUFBRXk2RCxjQUFlOS9ELEVBQUU4L0QsZUFFdkIsS0FBSyxFQUNILE9BQU8sU0FBU3o2RCxFQUFHckYsR0FDZixJQUFLLElBQUkzSCxFQUFJZ04sRUFBRTZLLFFBQVUsR0FBSW5KLEVBQUkvRyxFQUFFa1EsUUFBVSxHQUFJNVosRUFBSSxFQUFHQSxFQUFJK0IsRUFBRTFCLFFBQVVMLEVBQUl5USxFQUFFcFEsU0FBVUwsRUFBRyxDQUN2RixJQUFJNkIsRUFBSW1tRSxHQUFHam1FLEVBQUUvQixHQUFJeVEsRUFBRXpRLElBQ25CLEdBQUk2QixFQUFHLE9BQU9BLEVBRWxCLE9BQU8sR0FBRUUsRUFBRTFCLE9BQVFvUSxFQUFFcFEsUUFMbEIsQ0FNTDBPLEVBQUU4NkQsV0FBWW5nRSxFQUFFbWdFLFlBRXBCLEtBQUssR0FDSCxPQUFPLFNBQVM5NkQsRUFBR3JGLEdBQ2YsSUFBSTNILEVBQUlnTixFQUFFKzVELFFBQVUsR0FBSXI0RCxFQUFJeFAsT0FBTzRKLEtBQUs5SSxHQUFJL0IsRUFBSTBKLEVBQUVvL0QsUUFBVSxHQUFJam5FLEVBQUlaLE9BQU80SixLQUFLN0ssR0FLcEV5USxFQUFFbzNCLE9BQVFobUMsRUFBRWdtQyxPQUN4QixJQUFLLElBQUk1WCxFQUFJLEVBQUdBLEVBQUl4ZixFQUFFcFEsUUFBVTR2QixFQUFJcHVCLEVBQUV4QixTQUFVNHZCLEVBQUcsQ0FDL0MsSUFBSWpoQixFQUFJLEdBQUV5QixFQUFFd2YsR0FBSXB1QixFQUFFb3VCLElBQ2xCLEdBQUksSUFBTWpoQixFQUFHLE9BQU9BLEVBQ3BCLElBQUl4QixFQUFJdzZELEdBQUdqbUUsRUFBRTBPLEVBQUV3ZixJQUFLandCLEVBQUU2QixFQUFFb3VCLEtBQ3hCLEdBQUksSUFBTXppQixFQUFHLE9BQU9BLEVBRXhCLE9BQU8sR0FBRWlELEVBQUVwUSxPQUFRd0IsRUFBRXhCLFFBYmxCLENBY0wwTyxFQUFFODVELFNBQVVuL0QsRUFBRW0vRCxVQUVsQixRQUNFLE1BQU0sTUFJZCxTQUFTaEIsR0FBRzk0RCxFQUFHckYsR0FDWCxHQUFJLGlCQUFtQnFGLEdBQUssaUJBQW1CckYsR0FBS3FGLEVBQUUxTyxTQUFXcUosRUFBRXJKLE9BQVEsT0FBTyxHQUFFME8sRUFBR3JGLEdBQ3ZGLElBQUkzSCxFQUFJcW1FLEdBQUdyNUQsR0FBSTBCLEVBQUkyM0QsR0FBRzErRCxHQUFJMUosRUFBSSxHQUFFK0IsRUFBRXdnRSxRQUFTOXhELEVBQUU4eEQsU0FDN0MsT0FBTyxJQUFNdmlFLEVBQUlBLEVBQUksR0FBRStCLEVBQUVxbkUsTUFBTzM0RCxFQUFFMjRELE9BR3RDLFNBQVN4RixHQUFHNzBELEdBQ1IsT0FBTys0RCxHQUFHLzRELEdBR2QsU0FBUys0RCxHQUFHLzRELEdBQ1IsTUFBTyxjQUFlQSxFQUFJLE9BQVMsaUJBQWtCQSxFQUFJLEdBQUtBLEVBQUVzNkQsYUFBZSxpQkFBa0J0NkQsRUFBSSxHQUFLQSxFQUFFNDZELGFBQWUsZ0JBQWlCNTZELEVBQUksR0FBS0EsRUFBRTY2RCxZQUFjLG1CQUFvQjc2RCxFQUFJLFNBQVNBLEdBQ2xNLElBQUlyRixFQUFJMCtELEdBQUdyNUQsR0FDWCxNQUFPLFFBQVVyRixFQUFFNjRELFFBQVUsSUFBTTc0RCxFQUFFMC9ELE1BQVEsSUFGNEksQ0FHM0xyNkQsRUFBRW82RCxnQkFBa0IsZ0JBQWlCcDZELEVBQUlBLEVBQUVpNkQsWUFBYyxlQUFnQmo2RCxFQUFJbzVELEdBQUdwNUQsRUFBRXU2RCxZQUFZakYsV0FBYSxtQkFBb0J0MUQsR0FBS2hOLEVBQUlnTixFQUFFdzZELGVBQzVJLEdBQUV2MEQsRUFBRWpULEdBQUd0QyxZQUFjLGtCQUFtQnNQLEVBQUksUUFBVXJGLEVBQUlxRixFQUFFeTZELGVBQWVDLFNBQVcsSUFBTS8vRCxFQUFFZ2dFLFVBQVksSUFBTSxlQUFnQjM2RCxFQUFJLFNBQVNBLEdBQ3pJLElBQUssSUFBSXJGLEVBQUksSUFBSzNILEdBQUksRUFBSTBPLEVBQUksRUFBR3pRLEVBQUkrTyxFQUFFNkssUUFBVSxHQUFJbkosRUFBSXpRLEVBQUVLLE9BQVFvUSxJQUMvRDFPLEVBQUlBLEdBQUksRUFBSzJILEdBQUssSUFBS0EsR0FBS28rRCxHQUFHOW5FLEVBQUV5USxJQUVyQyxPQUFPL0csRUFBSSxJQUpxSCxDQUtsSXFGLEVBQUU4NkQsWUFBYyxhQUFjOTZELEVBQUksU0FBU0EsR0FDekMsSUFHQSxJQUFJckYsRUFBSSxJQUFLM0gsR0FBSSxFQUFJME8sRUFBSSxFQUFHelEsRUFBSWlCLE9BQU80SixLQUFLa0UsRUFBRSs1RCxRQUFVLElBQUlqaEMsT0FBUXAzQixFQUFJelEsRUFBRUssT0FBUW9RLElBQUssQ0FDbkYsSUFBSTVPLEVBQUk3QixFQUFFeVEsR0FDVjFPLEVBQUlBLEdBQUksRUFBSzJILEdBQUssSUFBS0EsR0FBSzdILEVBQUksSUFBTWltRSxHQUFHLzRELEVBQUUrNUQsT0FBT2puRSxJQUV0RCxPQUFPNkgsRUFBSSxJQVJxQixDQVNsQ3FGLEVBQUU4NUQsVUFBWSxLQUNoQixJQUFJbi9ELEVBQUczSCxFQUdYLFNBQVNxbUUsR0FBR3I1RCxHQUlSLEdBQUksS0FBSUEsR0FBSSxpQkFBbUJBLEVBQUcsQ0FJOUIsSUFBSXJGLEVBQUksRUFBRzNILEVBQUlnbEUsR0FBR3h5QyxLQUFLeGxCLEdBQ3ZCLEdBQUksS0FBSWhOLEdBQUlBLEVBQUUsR0FBSSxDQUVkLElBQUkwTyxFQUFJMU8sRUFBRSxHQUNWME8sR0FBS0EsRUFBSSxhQUFhb1QsT0FBTyxFQUFHLEdBQUluYSxFQUFJc1gsT0FBT3ZRLEdBRzNDLElBQUl6USxFQUFJLElBQUlrUixLQUFLbkMsR0FDekIsTUFBTyxDQUNId3pELFFBQVN4ckQsS0FBSzJ1QixNQUFNMWxDLEVBQUVtUixVQUFZLEtBQ2xDaTRELE1BQU8xL0QsR0FHZixNQUFPLENBQ0g2NEQsUUFBUzJGLEdBQUduNUQsRUFBRXd6RCxTQUNkNkcsTUFBT2xCLEdBQUduNUQsRUFBRXE2RCxRQU9oQixTQUFTbEIsR0FBR241RCxHQUVaLE1BQU8saUJBQW1CQSxFQUFJQSxFQUFJLGlCQUFtQkEsRUFBSWlTLE9BQU9qUyxHQUFLLEVBR0gsU0FBU281RCxHQUFHcDVELEdBQzlFLE1BQU8saUJBQW1CQSxFQUFJbTFELEdBQUdDLGlCQUFpQnAxRCxHQUFLbTFELEdBQUdFLGVBQWVyMUQsR0FHVCxTQUFTczVELEdBQUd0NUQsRUFBR3JGLEdBQy9FLE1BQU8sQ0FDSDYvRCxlQUFnQixZQUFjeDZELEVBQUUwUixVQUFZLGNBQWdCMVIsRUFBRXF5RCxTQUFXLGNBQWdCMTNELEVBQUUwMEMsS0FBS3hVLEtBSXBELFNBQVN3OUIsR0FBR3I0RCxHQUM1RCxRQUFTQSxHQUFLLGlCQUFrQkEsRUFJYSxTQUFTdTVELEdBQUd2NUQsR0FDekQsUUFBU0EsR0FBSyxlQUFnQkEsRUFHYSxTQUFTdTJCLEdBQUd2MkIsR0FDdkQsUUFBU0EsR0FBSyxjQUFlQSxFQUdNLFNBQVNtMEIsR0FBR24wQixHQUMvQyxRQUFTQSxHQUFLLGdCQUFpQkEsR0FBS2swQixNQUFNamlCLE9BQU9qUyxFQUFFNjZELGNBR1QsU0FBU2hsQyxHQUFHNzFCLEdBQ3RELFFBQVNBLEdBQUssYUFBY0EsRUFrQjVCLElBQUlvMkIsR0FBSyxDQUNUMmtDLElBQUssWUFDTEMsS0FBTSxjQUNQNW1DLEdBQUssQ0FDSixJQUFLLFlBQ0wsS0FBTSxxQkFDTixJQUFLLGVBQ0wsS0FBTSx3QkFDTixLQUFNLFFBQ04sS0FBTSxZQUNOLGlCQUFrQixpQkFDbEI2bUMsR0FBSSxLQUNKLFNBQVUsU0FDVixxQkFBc0Isc0JBQ3ZCamxDLEdBQUssU0FBU2gyQixFQUFHckYsR0FDaEJoSyxLQUFLcVAsRUFBSUEsRUFBR3JQLEtBQUs2b0MsR0FBSzcrQixHQW9CMUIsU0FBU3N6QyxHQUFHanVDLEdBQ1IsTUFBTyxDQUNINDZELGFBQWMsR0FBSzU2RCxHQU92QixTQUFTczJCLEdBQUd0MkIsRUFBR3JGLEdBQ2YsR0FBSXFGLEVBQUV3NUIsR0FBSSxDQUNOLEdBQUl0RixNQUFNdjVCLEdBQUksTUFBTyxDQUNqQmtnRSxZQUFhLE9BRWpCLEdBQUlsZ0UsSUFBTSxJQUFPLE1BQU8sQ0FDcEJrZ0UsWUFBYSxZQUVqQixHQUFJbGdFLEtBQU0sSUFBUSxNQUFPLENBQ3JCa2dFLFlBQWEsYUFHckIsTUFBTyxDQUNIQSxZQUFhLEdBQUVsZ0UsR0FBSyxLQUFPQSxHQVEvQixTQUFTKzVCLEdBQUcxMEIsRUFBR3JGLEdBQ2YsT0FBTyxHQUFFQSxHQUFLc3pDLEdBQUd0ekMsR0FBSzI3QixHQUFHdDJCLEVBQUdyRixHQUs1QixTQUFTaTZCLEdBQUc1MEIsRUFBR3JGLEdBQ2YsT0FBT3FGLEVBQUV3NUIsR0FBSyxJQUFJcjNCLEtBQUssSUFBTXhILEVBQUU2NEQsU0FBU2puRCxjQUFjelgsUUFBUSxRQUFTLElBQUlBLFFBQVEsSUFBSyxJQUFNLEtBQU8sWUFBYzZGLEVBQUU4NEQsYUFBYXRnRSxPQUFPLEdBQUssSUFBTSxDQUNoSnFnRSxRQUFTLEdBQUs3NEQsRUFBRTY0RCxRQUNoQjZHLE1BQU8xL0QsRUFBRTg0RCxhQVFiLFNBQVNqK0IsR0FBR3gxQixFQUFHckYsR0FDZixPQUFPcUYsRUFBRXc1QixHQUFLNytCLEVBQUUyNkQsV0FBYTM2RCxFQUFFNDZELGVBSy9CLFNBQVNoZ0MsR0FBR3YxQixFQUFHckYsR0FDZixPQUFPaTZCLEdBQUc1MEIsRUFBR3JGLEVBQUUwRixLQUduQixTQUFTczFCLEdBQUczMUIsR0FDUixPQUFPLEtBQUlBLEdBQUl3bUIsR0FBRWhsQixFQUFFLFNBQVN4QixHQUN4QixJQUFJckYsRUFBSTArRCxHQUFHcjVELEdBQ1gsT0FBTyxJQUFJeWhCLEdBQUU5bUIsRUFBRTY0RCxRQUFTNzRELEVBQUUwL0QsT0FGWCxDQUdqQnI2RCxJQUdOLFNBQVNpMkIsR0FBR2oyQixFQUFHckYsR0FDWCxPQUFPLFNBQVNxRixHQUNaLE9BQU8sSUFBSSxHQUFFLENBQUUsV0FBWUEsRUFBRTBSLFVBQVcsWUFBYTFSLEVBQUVxeUQsV0FEcEQsQ0FFTHJ5RCxHQUFHaTBELE1BQU0sYUFBYUEsTUFBTXQ1RCxHQUFHa2dDLElBR3JDLFNBQVM3RixHQUFHaDFCLEdBQ1IsSUFBSXJGLEVBQUksR0FBRW9ILEVBQUUvQixHQUNaLE9BQU8sR0FBRXFzRCxHQUFHMXhELElBQUtBLEVBR3JCLFNBQVN5OEIsR0FBR3AzQixFQUFHckYsR0FDWCxPQUFPczdCLEdBQUdqMkIsRUFBRUEsRUFBR3JGLEVBQUUwMEMsTUFHckIsU0FBUzVZLEdBQUd6MkIsRUFBR3JGLEdBQ1gsSUFBSTNILEVBQUlnaUMsR0FBR3I2QixHQUNYLEdBQUkzSCxFQUFFeUQsSUFBSSxLQUFPdUosRUFBRUEsRUFBRTBSLFVBQVcsTUFBTSxJQUFJMVAsR0FBRSxHQUFFMndELGlCQUFrQixvREFBc0QzL0QsRUFBRXlELElBQUksR0FBSyxPQUFTdUosRUFBRUEsRUFBRTBSLFdBQzlJLEdBQUkxZSxFQUFFeUQsSUFBSSxLQUFPdUosRUFBRUEsRUFBRXF5RCxTQUFVLE1BQU0sSUFBSXJ3RCxHQUFFLEdBQUUyd0QsaUJBQWtCLHFEQUF1RDMvRCxFQUFFeUQsSUFBSSxHQUFLLE9BQVN1SixFQUFFQSxFQUFFcXlELFVBQzlJLE9BQU8sSUFBSSxHQUFFMTlCLEdBQUczaEMsSUFHcEIsU0FBU3FoQyxHQUFHcjBCLEVBQUdyRixHQUNYLE9BQU9zN0IsR0FBR2oyQixFQUFFQSxFQUFHckYsR0FHbkIsU0FBU2k3QixHQUFHNTFCLEdBQ1IsSUFBSXJGLEVBQUlxNkIsR0FBR2gxQixHQUtQLE9BQU8sSUFBTXJGLEVBQUVySixPQUFTLEdBQUVpekQsSUFBTTV2QixHQUFHaDZCLEdBRzNDLFNBQVNnK0IsR0FBRzM0QixHQUNSLE9BQU8sSUFBSSxHQUFFLENBQUUsV0FBWUEsRUFBRUEsRUFBRTBSLFVBQVcsWUFBYTFSLEVBQUVBLEVBQUVxeUQsV0FBWXgzQixJQUczRSxTQUFTbEcsR0FBRzMwQixHQUNSLE9BQU8sR0FBRUEsRUFBRTFPLE9BQVMsR0FBSyxjQUFnQjBPLEVBQUV2SixJQUFJLElBQUt1SixFQUFFb0IsRUFBRSxHQUk1RCxTQUFTOU8sR0FBRzBOLEVBQUdyRixFQUFHM0gsR0FDZCxNQUFPLENBQ0hLLEtBQU0rakMsR0FBR3AzQixFQUFHckYsR0FDWm8vRCxPQUFRL21FLEVBQUVrb0UsTUFBTXBCLFNBQVNDLFFBSWpDLFNBQVN6aEMsR0FBR3Q0QixFQUFHckYsR0FDWCxJQUFJM0gsRUFDSixHQUFJMkgsYUFBYWdyRCxHQUFJM3lELEVBQUksQ0FDckJ1SyxPQUFRakwsR0FBRzBOLEVBQUdyRixFQUFFb0IsSUFBS3BCLEVBQUVoSSxhQUNuQixHQUFJZ0ksYUFBYXFyRCxHQUFJaHpELEVBQUksQ0FDN0IyWCxPQUFReXNCLEdBQUdwM0IsRUFBR3JGLEVBQUVvQixXQUNaLEdBQUlwQixhQUFha3JELEdBQUk3eUQsRUFBSSxDQUM3QnVLLE9BQVFqTCxHQUFHME4sRUFBR3JGLEVBQUVvQixJQUFLcEIsRUFBRXpHLE1BQ3ZCaW5FLFdBQVk5aEMsR0FBRzErQixFQUFFdStCLFVBQ2IsR0FBSXYrQixhQUFhNk0sR0FBSXhVLEVBQUksQ0FDN0Jvb0UsVUFBVyxDQUNQL2dFLFNBQVUrOEIsR0FBR3AzQixFQUFHckYsRUFBRW9CLEtBQ2xCcy9ELGdCQUFpQjFnRSxFQUFFMGdFLGdCQUFnQnpxRSxLQUFJLFNBQVVvUCxHQUM3QyxPQUFPLFNBQVNBLEVBQUdyRixHQUNmLElBQUkzSCxFQUFJMkgsRUFBRXlnRSxVQUNWLEdBQUlwb0UsYUFBYStsRCxHQUFJLE1BQU8sQ0FDeEJ1aUIsVUFBVzNnRSxFQUFFaTZELE1BQU0vNUIsSUFDbkIwZ0MsaUJBQWtCLGdCQUV0QixHQUFJdm9FLGFBQWEwakMsR0FBSSxNQUFPLENBQ3hCNGtDLFVBQVczZ0UsRUFBRWk2RCxNQUFNLzVCLElBQ25CMmdDLHNCQUF1QixDQUNuQjN3RCxPQUFRN1gsRUFBRXlvRSxXQUdsQixHQUFJem9FLGFBQWF5bEMsR0FBSSxNQUFPLENBQ3hCNmlDLFVBQVczZ0UsRUFBRWk2RCxNQUFNLzVCLElBQ25CNmdDLG1CQUFvQixDQUNoQjd3RCxPQUFRN1gsRUFBRXlvRSxXQUdsQixHQUFJem9FLGFBQWEwbUMsR0FBSSxNQUFPLENBQ3hCNGhDLFVBQVczZ0UsRUFBRWk2RCxNQUFNLzVCLElBQ25COGdDLFVBQVczb0UsRUFBRXlsQyxJQUVqQixNQUFNLEtBdEJILENBdUJMLEVBQUd6NEIsWUFHVCxDQUNKLEtBQU1yRixhQUFheXRELElBQUssT0FBTyxLQUMvQnAxRCxFQUFJLENBQ0FtekMsT0FBUS9PLEdBQUdwM0IsRUFBR3JGLEVBQUVvQixNQUd4QixPQUFPcEIsRUFBRTg2QixHQUFHaUUsS0FBTzFtQyxFQUFFNG9FLGdCQUFrQixTQUFTNTdELEVBQUdyRixHQUMvQyxZQUFPLElBQVdBLEVBQUVraEUsV0FBYSxDQUM3QkEsV0FBWXRtQyxHQUFHdjFCLEVBQUdyRixFQUFFa2hFLGtCQUNwQixJQUFXbGhFLEVBQUVtaEUsT0FBUyxDQUN0QkEsT0FBUW5oRSxFQUFFbWhFLFFBQ1YsS0FMK0IsQ0FNckM5N0QsRUFBR3JGLEVBQUU4NkIsS0FBTXppQyxFQUdqQixTQUFTa2xDLEdBQUdsNEIsRUFBR3JGLEdBQ1gsSUFBSTNILEVBQUkySCxFQUFFaWhFLGdCQUFrQixTQUFTNTdELEdBQ2pDLFlBQU8sSUFBV0EsRUFBRTY3RCxXQUFhN2hDLEdBQUc2aEMsV0FBV2xtQyxHQUFHMzFCLEVBQUU2N0Qsa0JBQWUsSUFBVzc3RCxFQUFFODdELE9BQVM5aEMsR0FBRzhoQyxPQUFPOTdELEVBQUU4N0QsUUFBVTloQyxHQUFHNUIsS0FEMUYsQ0FFMUJ6OUIsRUFBRWloRSxpQkFBbUI1aEMsR0FBRzVCLEtBQzFCLEdBQUl6OUIsRUFBRTRDLE9BQVEsQ0FDVjVDLEVBQUU0QyxPQUFPbEssS0FDVCxJQUFJcU8sRUFBSSswQixHQUFHejJCLEVBQUdyRixFQUFFNEMsT0FBT2xLLE1BQU9wQyxFQUFJLElBQUl5M0QsR0FBRyxDQUNyQ29SLFNBQVUsQ0FDTkMsT0FBUXAvRCxFQUFFNEMsT0FBT3c4RCxVQUd6QixHQUFJcC9ELEVBQUV3Z0UsV0FBWSxDQUNkLElBQUlyb0UsRUFBSSxTQUFTa04sR0FDYixJQUFJckYsRUFBSXFGLEVBQUUrN0QsWUFBYyxHQUN4QixPQUFPLElBQUl4akMsR0FBRzU5QixFQUFFL0osS0FBSSxTQUFVb1AsR0FDMUIsT0FBTyxHQUFFc3hDLEVBQUV0eEMsT0FIWCxDQUtOckYsRUFBRXdnRSxZQUNKLE9BQU8sSUFBSXRWLEdBQUdua0QsRUFBR3pRLEVBQUc2QixFQUFHRSxHQUUzQixPQUFPLElBQUkyeUQsR0FBR2prRCxFQUFHelEsRUFBRytCLEdBRXhCLEdBQUkySCxFQUFFZ1EsT0FBUSxDQUNWLElBQUl1VyxFQUFJdVYsR0FBR3oyQixFQUFHckYsRUFBRWdRLFFBQ2hCLE9BQU8sSUFBSXE3QyxHQUFHOWtDLEVBQUdsdUIsR0FFckIsR0FBSTJILEVBQUV5Z0UsVUFBVyxDQUNiLElBQUluN0QsRUFBSXcyQixHQUFHejJCLEVBQUdyRixFQUFFeWdFLFVBQVUvZ0UsVUFBV29FLEVBQUk5RCxFQUFFeWdFLFVBQVVDLGdCQUFnQnpxRSxLQUFJLFNBQVUrSixHQUMvRSxPQUFPLFNBQVNxRixFQUFHckYsR0FDZixJQUFJM0gsRUFBSSxLQUNSLEdBQUkscUJBQXNCMkgsRUFBRyxHQUFFLGlCQUFtQkEsRUFBRTRnRSxrQkFBbUJ2b0UsRUFBSSxJQUFJK2xELFFBQVMsR0FBSSwwQkFBMkJwK0MsRUFBRyxDQUN0SCxJQUFJK0csRUFBSS9HLEVBQUU2Z0Usc0JBQXNCM3dELFFBQVUsR0FDMUM3WCxFQUFJLElBQUkwakMsR0FBR2gxQixRQUNSLEdBQUksdUJBQXdCL0csRUFBRyxDQUNsQyxJQUFJMUosRUFBSTBKLEVBQUUrZ0UsbUJBQW1CN3dELFFBQVUsR0FDdkM3WCxFQUFJLElBQUl5bEMsR0FBR3huQyxPQUNSLGNBQWUwSixFQUFJM0gsRUFBSSxJQUFJMG1DLEdBQUcxNUIsRUFBR3JGLEVBQUVnaEUsV0FBYSxLQUN2RCxJQUFJN29FLEVBQUksR0FBRXcrQyxFQUFFMzJDLEVBQUUyZ0UsV0FDZCxPQUFPLElBQUkxaEMsR0FBRzltQyxFQUFHRSxHQVZkLENBV0xnTixFQUFHckYsTUFFVCxPQUFPLElBQUUsSUFBTzNILEVBQUU4b0UsUUFBUyxJQUFJdDBELEdBQUd2SCxFQUFHeEIsR0FFekMsR0FBSTlELEVBQUV3ckMsT0FBUSxDQUNWLElBQUloZ0MsRUFBSXN3QixHQUFHejJCLEVBQUdyRixFQUFFd3JDLFFBQ2hCLE9BQU8sSUFBSWlpQixHQUFHamlELEVBQUduVCxHQUVyQixPQUFPLEtBR1gsU0FBU3VtQyxHQUFHdjVCLEVBQUdyRixHQUNYLE1BQU8sQ0FDSHFoRSxVQUFXLENBQUUzbkMsR0FBR3IwQixFQUFHckYsRUFBRTAwQyxRQUk3QixTQUFTelcsR0FBRzU0QixFQUFHckYsR0FFWCxJQUFJM0gsRUFBSSxDQUNKaXBFLGdCQUFpQixJQUNsQnY2RCxFQUFJL0csRUFBRTAwQyxLQUNULE9BQVMxMEMsRUFBRTI1RCxpQkFBbUJ0aEUsRUFBRWtwRSxPQUFTN25DLEdBQUdyMEIsRUFBRzBCLEdBQUkxTyxFQUFFaXBFLGdCQUFnQjNvRSxLQUFPLENBQUUsQ0FDMUU2b0UsYUFBY3hoRSxFQUFFMjVELGdCQUNoQjhILGdCQUFnQixNQUNacHBFLEVBQUVrcEUsT0FBUzduQyxHQUFHcjBCLEVBQUcwQixFQUFFbStCLEtBQU03c0MsRUFBRWlwRSxnQkFBZ0Izb0UsS0FBTyxDQUFFLENBQ3hENm9FLGFBQWN6NkQsRUFBRXdtQixPQUVwQixJQUFJajNCLEVBQUksU0FBUytPLEdBQ2IsR0FBSSxJQUFNQSxFQUFFMU8sT0FBUSxDQUNoQixJQUFJcUosRUFBSXFGLEVBQUVwUCxLQUFJLFNBQVVvUCxHQUVwQixPQUFPLFNBQVNBLEdBQ1osR0FBSSxPQUFxQkEsRUFBRXFCLEdBQUksQ0FDM0IsR0FBSTh5QixHQUFHbjBCLEVBQUVyTixPQUFRLE1BQU8sQ0FDcEIwcEUsWUFBYSxDQUNUekgsTUFBTzU3QixHQUFHaDVCLEVBQUU0MEQsT0FDWnZ6RCxHQUFJLFdBR1osR0FBSWsxQixHQUFHdjJCLEVBQUVyTixPQUFRLE1BQU8sQ0FDcEIwcEUsWUFBYSxDQUNUekgsTUFBTzU3QixHQUFHaDVCLEVBQUU0MEQsT0FDWnZ6RCxHQUFJLGlCQUdULEdBQUksT0FBeUJyQixFQUFFcUIsR0FBSSxDQUN0QyxHQUFJOHlCLEdBQUduMEIsRUFBRXJOLE9BQVEsTUFBTyxDQUNwQjBwRSxZQUFhLENBQ1R6SCxNQUFPNTdCLEdBQUdoNUIsRUFBRTQwRCxPQUNadnpELEdBQUksZUFHWixHQUFJazFCLEdBQUd2MkIsRUFBRXJOLE9BQVEsTUFBTyxDQUNwQjBwRSxZQUFhLENBQ1R6SCxNQUFPNTdCLEdBQUdoNUIsRUFBRTQwRCxPQUNadnpELEdBQUksZ0JBSWhCLE1BQU8sQ0FDSGk3RCxZQUFhLENBQ1QxSCxNQUFPNTdCLEdBQUdoNUIsRUFBRTQwRCxPQUNadnpELEdBQUl3M0IsR0FBRzc0QixFQUFFcUIsSUFDVDFPLE1BQU9xTixFQUFFck4sUUFoQ2QsQ0FtQ0xxTixNQUVOLE9BQU8sSUFBTXJGLEVBQUVySixPQUFTcUosRUFBRSxHQUFLLENBQzNCNGhFLGdCQUFpQixDQUNibDdELEdBQUksTUFDSm16RCxRQUFTNzVELEtBNUNqQixDQWdETkEsRUFBRTY1RCxTQUNKdmpFLElBQU0rQixFQUFFaXBFLGdCQUFnQmhsQixNQUFRaG1ELEdBQ2hDLElBQUk2QixFQUFJLFNBQVNrTixHQUNiLEdBQUksSUFBTUEsRUFBRTFPLE9BQVEsT0FBTzBPLEVBQUVwUCxLQUFJLFNBQVVvUCxHQUV2QyxPQUFPLFNBQVNBLEdBQ1osTUFBTyxDQUNINDBELE1BQU81N0IsR0FBR2g1QixFQUFFNDBELE9BQ1o0SCxVQUFXdmtDLEdBQUdqNEIsRUFBRTgwRCxNQUhqQixDQUtMOTBELE1BUkYsQ0FVTnJGLEVBQUU0NUQsU0FDSnpoRSxJQUFNRSxFQUFFaXBFLGdCQUFnQjFILFFBQVV6aEUsR0FDbEMsSUFBSW91QixFQUFJLFNBQVNsaEIsRUFBR3JGLEdBQ2hCLE9BQU9xRixFQUFFdzVCLElBQU0sR0FBRTcrQixHQUFLQSxFQUFJLENBQ3RCaEksTUFBT2dJLEdBRlAsQ0FJTnFGLEVBQUdyRixFQUFFdTVELE9BQ1AsT0FBTyxPQUFTaHpDLElBQU1sdUIsRUFBRWlwRSxnQkFBZ0IvSCxNQUFRaHpDLEdBQUl2bUIsRUFBRTg1RCxVQUFZemhFLEVBQUVpcEUsZ0JBQWdCeEgsUUFBVW43QixHQUFHMytCLEVBQUU4NUQsVUFDbkc5NUQsRUFBRSs1RCxRQUFVMWhFLEVBQUVpcEUsZ0JBQWdCdkgsTUFBUXA3QixHQUFHMytCLEVBQUUrNUQsUUFBUzFoRSxFQUd4RCxTQUFTd2pDLEdBQUd4MkIsR0FDUixJQUFJckYsRUFBSWk3QixHQUFHNTFCLEVBQUVrOEQsUUFBU2xwRSxFQUFJZ04sRUFBRWk4RCxnQkFBaUJ2NkQsRUFBSTFPLEVBQUVNLEtBQU9OLEVBQUVNLEtBQUtoQyxPQUFTLEVBQUdMLEVBQUksS0FDakYsR0FBSXlRLEVBQUksRUFBRyxDQUNQLEdBQUUsSUFBTUEsR0FDUixJQUFJNU8sRUFBSUUsRUFBRU0sS0FBSyxHQUNmUixFQUFFc3BFLGVBQWlCbnJFLEVBQUk2QixFQUFFcXBFLGFBQWV4aEUsRUFBSUEsRUFBRXM1RCxNQUFNbmhFLEVBQUVxcEUsY0FFMUQsSUFBSWo3QyxFQUFJLEdBQ1JsdUIsRUFBRWlrRCxRQUFVLzFCLEVBQUltVyxHQUFHcmtDLEVBQUVpa0QsUUFDckIsSUFBSWgzQyxFQUFJLEdBQ1JqTixFQUFFdWhFLFVBQVl0MEQsRUFBSWpOLEVBQUV1aEUsUUFBUTNqRSxLQUFJLFNBQVVvUCxHQUN0QyxPQUFPLFNBQVNBLEdBQ1osT0FBTyxJQUFJeThELEdBQUdoakMsR0FBR3o1QixFQUFFNDBELE9BRW5CLFNBQVM1MEQsR0FDTCxPQUFRQSxHQUNOLElBQUssWUFDSCxNQUFPLE1BRVQsSUFBSyxhQUNILE1BQU8sT0FFVCxRQUNFLFFBVFIsQ0FXRUEsRUFBRXc4RCxZQWRELENBZUx4OEQsT0FFTixJQUFJdkIsRUFBSSxLQUNSekwsRUFBRWtoRSxRQUFVejFELEVBQUksU0FBU3VCLEdBQ3JCLElBQUlyRixFQUNKLE9BQU8sR0FBRUEsRUFBSSxpQkFBbUJxRixFQUFJQSxFQUFFck4sTUFBUXFOLEdBQUssS0FBT3JGLEVBRjlDLENBR2QzSCxFQUFFa2hFLFFBQ0osSUFBSS90RCxFQUFJLEtBQ1JuVCxFQUFFeWhFLFVBQVl0dUQsRUFBSXV2QixHQUFHMWlDLEVBQUV5aEUsVUFDdkIsSUFBSXh6QyxFQUFJLEtBQ1IsT0FBT2p1QixFQUFFMGhFLFFBQVV6ekMsRUFBSXlVLEdBQUcxaUMsRUFBRTBoRSxRQUFTMUssR0FBR3J2RCxFQUFHMUosRUFBR2dQLEVBQUdpaEIsRUFBR3ppQixFQUFHLElBQWtCMEgsRUFBRzhhLEdBR2hGLFNBQVNvVyxHQUFHcjNCLEdBQ1IsT0FBT0EsT0FBSSxJQUFXQSxFQUFFcThELFlBQWMsQ0FBRTNqQyxHQUFHMTRCLFNBQU8sSUFBV0EsRUFBRXM4RCxZQUFjLENBQUV0a0MsR0FBR2g0QixTQUFPLElBQVdBLEVBQUV1OEQsZ0JBQWtCdjhELEVBQUV1OEQsZ0JBQWdCL0gsUUFBUTVqRSxLQUFJLFNBQVVvUCxHQUM1SixPQUFPcTNCLEdBQUdyM0IsTUFDVjA4RCxRQUFPLFNBQVUxOEQsRUFBR3JGLEdBQ3BCLE9BQU9xRixFQUFFalAsT0FBTzRKLE1BQ2QsS0FBTSxHQUdoQixTQUFTMitCLEdBQUd0NUIsR0FDUixNQUFPLENBQ0gyOEQsT0FBUTM4RCxFQUFFMjhELE9BQ1Y5eEQsT0FBUTdLLEVBQUVtM0MsVUFJbEIsU0FBU3poQixHQUFHMTFCLEdBQ1IsSUFBSXJGLElBQU1xRixFQUFFMjhELE9BQVEzcEUsRUFBSWdOLEVBQUU2SyxRQUFVLEdBQ3BDLE9BQU8sSUFBSXcrQyxHQUFHcjJELEVBQUcySCxHQUlyQixTQUFTczlCLEdBQUdqNEIsR0FDUixPQUFPbzJCLEdBQUdwMkIsR0FHZCxTQUFTNjRCLEdBQUc3NEIsR0FDUixPQUFPbzBCLEdBQUdwMEIsR0FHZCxTQUFTZzVCLEdBQUdoNUIsR0FDUixNQUFPLENBQ0hzN0QsVUFBV3Q3RCxFQUFFNjZCLEtBSXJCLFNBQVNwQixHQUFHejVCLEdBQ1IsT0FBTyxHQUFFc3hDLEVBQUV0eEMsRUFBRXM3RCxXQUdqQixTQUFTdGpDLEdBQUdoNEIsR0FDUixPQUFPdW1ELEdBQUcxbUQsT0FBTzQ1QixHQUFHejVCLEVBQUVzOEQsWUFBWTFILE9BQVEsU0FBUzUwRCxHQUMvQyxPQUFRQSxHQUNOLElBQUssUUFDSCxNQUFPLEtBRVQsSUFBSyxZQUNILE1BQU8sS0FFVCxJQUFLLGVBQ0gsTUFBTyxJQUVULElBQUssd0JBQ0gsTUFBTyxLQUVULElBQUssWUFDSCxNQUFPLElBRVQsSUFBSyxxQkFDSCxNQUFPLEtBRVQsSUFBSyxpQkFDSCxNQUFPLGlCQUVULElBQUssS0FDSCxNQUFPLEtBRVQsSUFBSyxTQUNILE1BQU8sU0FFVCxJQUFLLHFCQUNILE1BQU8scUJBRVQsSUFBSyx1QkFDTCxRQUNFLE9BQU8sTUFsQzJCLENBb0N4Q0EsRUFBRXM4RCxZQUFZajdELElBQUtyQixFQUFFczhELFlBQVkzcEUsT0FHdkMsU0FBUytsQyxHQUFHMTRCLEdBQ1IsT0FBUUEsRUFBRXE4RCxZQUFZaDdELElBQ3BCLElBQUssU0FDSCxJQUFJMUcsRUFBSTgrQixHQUFHejVCLEVBQUVxOEQsWUFBWXpILE9BQ3pCLE9BQU9yTyxHQUFHMW1ELE9BQU9sRixFQUFHLEtBQW1CLENBQ25Da2dFLFlBQWErQixNQUduQixJQUFLLFVBQ0gsSUFBSTVwRSxFQUFJeW1DLEdBQUd6NUIsRUFBRXE4RCxZQUFZekgsT0FDekIsT0FBT3JPLEdBQUcxbUQsT0FBTzdNLEVBQUcsS0FBbUIsQ0FDbkM2cEUsVUFBVyxlQUdqQixJQUFLLGFBQ0gsSUFBSW43RCxFQUFJKzNCLEdBQUd6NUIsRUFBRXE4RCxZQUFZekgsT0FDekIsT0FBT3JPLEdBQUcxbUQsT0FBTzZCLEVBQUcsS0FBdUIsQ0FDdkNtNUQsWUFBYStCLE1BR25CLElBQUssY0FDSCxJQUFJM3JFLEVBQUl3b0MsR0FBR3o1QixFQUFFcThELFlBQVl6SCxPQUN6QixPQUFPck8sR0FBRzFtRCxPQUFPNU8sRUFBRyxLQUF1QixDQUN2QzRyRSxVQUFXLGVBR2pCLElBQUssdUJBQ0wsUUFDRSxPQUFPLE1BSWYsU0FBU3hqQyxHQUFHcjVCLEdBQ1IsSUFBSXJGLEVBQUksR0FDUixPQUFPcUYsRUFBRSs1RCxPQUFPempFLFNBQVEsU0FBVTBKLEdBQzlCLE9BQU9yRixFQUFFdkssS0FBSzRQLEVBQUU2NkIsUUFDZixDQUNEa2hDLFdBQVlwaEUsR0FJcEIsU0FBUzB4RCxHQUFHcnNELEdBRVIsT0FBT0EsRUFBRTFPLFFBQVUsR0FBSyxhQUFlME8sRUFBRXZKLElBQUksSUFBTSxjQUFnQnVKLEVBQUV2SixJQUFJLEdBbUJuQixJQUFJK2lDLEdBQUssV0FHL0Q3b0MsS0FBSytsQyxRQUFLLEdBTVYsU0FBU1IsR0FBR2wyQixFQUFHckYsRUFBRzNILEdBQ2xCLE9BQU9nTixhQUFhKzRDLEdBQUssU0FBUy80QyxFQUFHckYsR0FDakMsSUFBSTNILEVBQUksQ0FDSittRSxPQUFRLENBQ0pDLFNBQVUsQ0FDTkMsWUFBYSxvQkFFakJFLHFCQUFzQixDQUNsQkMsZUFBZ0IsQ0FDWjVHLFFBQVN4ekQsRUFBRXd6RCxRQUNYNkcsTUFBT3I2RCxFQUFFeXpELGdCQUt6QixPQUFPOTRELElBQU0zSCxFQUFFK21FLE9BQU9HLG1CQUFxQnYvRCxHQUFJLENBQzNDbS9ELFNBQVU5bUUsR0FmTyxDQWlCdkJBLEVBQUcySCxHQUFLcUYsYUFBYTAyQixHQUFLMEIsR0FBR3A0QixFQUFHckYsR0FBS3FGLGFBQWF5NEIsR0FBS1MsR0FBR2w1QixFQUFHckYsR0FBSyxTQUFTcUYsRUFBR3JGLEdBSTVFLElBQUkzSCxFQUFJeWlDLEdBQUd6MUIsRUFBR3JGLEdBQUkrRyxFQUFJbTRCLEdBQUc3bUMsR0FBSzZtQyxHQUFHNzVCLEVBQUV5NEIsSUFDbkMsT0FBTzQvQixHQUFHcmxFLElBQU1xbEUsR0FBR3I0RCxFQUFFeTRCLElBQU13VixHQUFHdnNDLEdBQUs0MEIsR0FBR3QyQixFQUFFODhELFdBQVlwN0QsR0FMWSxDQU1sRTFCLEVBQUdyRixHQU1MLFNBQVNrL0QsR0FBRzc1RCxFQUFHckYsRUFBRzNILEdBSWxCLE9BQU9nTixhQUFhMDJCLEdBQUswQixHQUFHcDRCLEVBQUdyRixHQUFLcUYsYUFBYXk0QixHQUFLUyxHQUFHbDVCLEVBQUdyRixHQUFLM0gsRUFpQmpFLFNBQVN5aUMsR0FBR3oxQixFQUFHckYsR0FDZixPQUFPcUYsYUFBYTA1QixHQUFLMitCLEdBQUdybEUsRUFBSTJILElBQU0sU0FBU3FGLEdBQzNDLFFBQVNBLEdBQUssZ0JBQWlCQSxFQURHLENBRXBDaE4sR0FBSzJILEVBQUksQ0FDUGlnRSxhQUFjLEdBQ2QsS0FDSixJQUFJNW5FLEVBR3FELElBQUkrbEQsR0FBbUIsU0FBU3ArQyxHQUN6RixTQUFTM0gsSUFDTCxPQUFPLE9BQVMySCxHQUFLQSxFQUFFN0UsTUFBTW5GLEtBQU1tRyxZQUFjbkcsS0FFckQsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUpnRSxDQUtsRndtQyxJQUFLOUMsR0FBbUIsU0FBUy83QixHQUMvQixTQUFTM0gsRUFBRWdOLEdBQ1AsSUFBSWhOLEVBQUlyQyxLQUNSLE9BQVFxQyxFQUFJMkgsRUFBRXpILEtBQUt2QyxPQUFTQSxNQUFNOHFFLFNBQVd6N0QsRUFBR2hOLEVBRXBELE9BQU8sRUFBRUEsRUFBRzJILEdBQUkzSCxFQUxNLENBTXhCd21DLElBRXNELFNBQVNwQixHQUFHcDRCLEVBQUdyRixHQUNuRSxJQUFLLElBQUkzSCxFQUFJcWxDLEdBQUcxOUIsR0FBSStHLEVBQUksU0FBUzFCLEdBQzdCaE4sRUFBRWt5QixNQUFLLFNBQVV2cUIsR0FDYixPQUFPczZELEdBQUd0NkQsRUFBR3FGLE9BQ1ZoTixFQUFFNUMsS0FBSzRQLElBQ2YvTyxFQUFJLEVBQUc2QixFQUFJa04sRUFBRXk3RCxTQUFVeHFFLEVBQUk2QixFQUFFeEIsT0FBUUwsSUFDcEN5USxFQUFFNU8sRUFBRTdCLElBRVIsTUFBTyxDQUNINnBFLFdBQVksQ0FDUmp3RCxPQUFRN1gsSUFLcUMsSUFBSXlsQyxHQUFtQixTQUFTOTlCLEdBQ3JGLFNBQVMzSCxFQUFFZ04sR0FDUCxJQUFJaE4sRUFBSXJDLEtBQ1IsT0FBUXFDLEVBQUkySCxFQUFFekgsS0FBS3ZDLE9BQVNBLE1BQU04cUUsU0FBV3o3RCxFQUFHaE4sRUFFcEQsT0FBTyxFQUFFQSxFQUFHMkgsR0FBSTNILEVBTDRELENBTTlFd21DLElBRUYsU0FBU04sR0FBR2w1QixFQUFHckYsR0FDWCxJQUFLLElBQUkzSCxFQUFJcWxDLEdBQUcxOUIsR0FBSStHLEVBQUksU0FBUzFCLEdBQzdCaE4sRUFBSUEsRUFBRXVKLFFBQU8sU0FBVTVCLEdBQ25CLE9BQVFzNkQsR0FBR3Q2RCxFQUFHcUYsT0FFbkIvTyxFQUFJLEVBQUc2QixFQUFJa04sRUFBRXk3RCxTQUFVeHFFLEVBQUk2QixFQUFFeEIsT0FBUUwsSUFDcEN5USxFQUFFNU8sRUFBRTdCLElBRVIsTUFBTyxDQUNINnBFLFdBQVksQ0FDUmp3RCxPQUFRN1gsSUFVaEIsSUFBSTBtQyxHQUFtQixTQUFTLytCLEdBQ2hDLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsSUFBSTBPLEVBQUkvUSxLQUNSLE9BQVErUSxFQUFJL0csRUFBRXpILEtBQUt2QyxPQUFTQSxNQUFNbXNFLFdBQWE5OEQsRUFBRzBCLEVBQUUrMkIsR0FBS3psQyxFQUFHME8sRUFFaEUsT0FBTyxFQUFFMU8sRUFBRzJILEdBQUkzSCxFQUxPLENBTXpCd21DLElBRUYsU0FBU0ssR0FBRzc1QixHQUNSLE9BQU9tNUQsR0FBR241RCxFQUFFNDZELGNBQWdCNTZELEVBQUU2NkQsYUFHbEMsU0FBU3hpQyxHQUFHcjRCLEdBQ1IsT0FBT3U1RCxHQUFHdjVELElBQU1BLEVBQUU4NkQsV0FBV2p3RCxPQUFTN0ssRUFBRTg2RCxXQUFXandELE9BQU8xWCxRQUFVLEdBNEJwRSxJQUFJb2xDLEdBQW1CLFdBQ3ZCLFNBQVN2NEIsRUFBRUEsR0FDUHJQLEtBQUtvcEUsT0FBUy81RCxFQUdkQSxFQUFFODRCLEtBQUssR0FBRTVGLEdBUWIsT0FBT2x6QixFQUFFL00sVUFBVW9sQyxHQUFLLFNBQVNyNEIsR0FDN0IsSUFBSyxJQUFJckYsRUFBSSxFQUFHM0gsRUFBSXJDLEtBQUtvcEUsT0FBUXAvRCxFQUFJM0gsRUFBRTFCLE9BQVFxSixJQUMzQyxHQUFJM0gsRUFBRTJILEdBQUdtZ0MsRUFBRTk2QixHQUFJLE9BQU8sRUFFMUIsT0FBTyxHQUNSQSxFQUFFL00sVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDOUIsT0FBTyxHQUFFclAsS0FBS29wRSxPQUFRLzVELEVBQUUrNUQsUUFBUSxTQUFVLzVELEVBQUdyRixHQUN6QyxPQUFPcUYsRUFBRXN5RCxRQUFRMzNELE9BRXRCcUYsRUF0Qm9CLEdBdUJ0QjQ1QixHQUFLLFNBQVM1NUIsRUFBR3JGLEdBQ2xCaEssS0FBS2lrRSxNQUFRNTBELEVBQUdyUCxLQUFLeXFFLFVBQVl6Z0UsR0FJcUNzL0IsR0FBSyxTQVcvRWo2QixFQVFBckYsR0FDSWhLLEtBQUsrSSxRQUFVc0csRUFBR3JQLEtBQUtvc0UsaUJBQW1CcGlFLEdBQzNDcS9CLEdBQW1CLFdBQ2xCLFNBQVNoNkIsRUFBRUEsRUFBR3JGLEdBQ1ZoSyxLQUFLa3JFLFdBQWE3N0QsRUFBR3JQLEtBQUttckUsT0FBU25oRSxFQUd2QyxPQUFPcUYsRUFBRW80QixHQUFLLFdBQ1YsT0FBTyxJQUFJcDRCLEdBRXdDQSxFQUFFODdELE9BQVMsU0FBU25oRSxHQUN2RSxPQUFPLElBQUlxRixPQUFFLEVBQVFyRixJQUVrRHFGLEVBQUU2N0QsV0FBYSxTQUFTbGhFLEdBQy9GLE9BQU8sSUFBSXFGLEVBQUVyRixJQUNkekksT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxLQUFNLENBQ1d3RCxJQUFLLFdBQ3BELFlBQU8sSUFBVzlGLEtBQUtrckUsaUJBQWMsSUFBV2xyRSxLQUFLbXJFLFFBRXpEbjlELFlBQVksRUFDWmlPLGNBQWMsSUFDZDVNLEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUMvQixPQUFPclAsS0FBS21yRSxTQUFXOTdELEVBQUU4N0QsU0FBV25yRSxLQUFLa3JFLGFBQWU3N0QsRUFBRTY3RCxZQUFjbHJFLEtBQUtrckUsV0FBV3ZKLFFBQVF0eUQsRUFBRTY3RCxhQUFlNzdELEVBQUU2N0QsYUFDcEg3N0QsRUFyQmUsR0FpQ3RCLFNBQVNtbkQsR0FBR25uRCxFQUFHckYsR0FDWCxZQUFPLElBQVdxRixFQUFFNjdELFdBQWFsaEUsYUFBYWlyRCxJQUFNanJELEVBQUVqQixRQUFRNDRELFFBQVF0eUQsRUFBRTY3RCxpQkFBYyxJQUFXNzdELEVBQUU4N0QsUUFBVTk3RCxFQUFFODdELFNBQVduaEUsYUFBYWlyRCxHQW1EdkksSUFBSUssR0FBSyxhQWVULFNBQVNZLEdBQUc3bUQsRUFBR3JGLEVBQUczSCxHQUNsQixPQUFPZ04sYUFBYTJsRCxHQUFLLFNBQVMzbEQsRUFBR3JGLEVBQUczSCxHQUlwQyxPQUFPLElBQUk0eUQsR0FBRzVsRCxFQUFFakUsSUFBSy9JLEVBQUUwRyxRQUFTc0csRUFBRXJOLE1BQU8sQ0FDckNxcUUsdUJBQXVCLElBTE4sQ0FPdkJoOUQsRUFBRyxFQUFHaE4sR0FBS2dOLGFBQWE2bEQsR0FBSyxTQUFTN2xELEVBQUdyRixFQUFHM0gsR0FDMUMsSUFBS20wRCxHQUFHbm5ELEVBQUV5MUIsR0FBSTk2QixHQUtkLE9BQU8sSUFBSXl1RCxHQUFHcHBELEVBQUVqRSxJQUFLL0ksRUFBRTBHLFNBQ3ZCLElBQUlnSSxFQUFJeWtELEdBQUdubUQsRUFBR3JGLEdBQ2QsT0FBTyxJQUFJaXJELEdBQUc1bEQsRUFBRWpFLElBQUsvSSxFQUFFMEcsUUFBU2dJLEVBQUcsQ0FDL0JzN0QsdUJBQXVCLElBVEEsQ0FXN0JoOUQsRUFBR3JGLEVBQUczSCxHQUFLZ04sYUFBYXdILEdBQUssU0FBU3hILEVBQUdyRixFQUFHM0gsR0FDMUMsR0FBSSxHQUFFLE1BQVFBLEVBQUUrcEUsbUJBQW9CNVYsR0FBR25uRCxFQUFFeTFCLEdBQUk5NkIsR0FLN0MsT0FBTyxJQUFJeXVELEdBQUdwcEQsRUFBRWpFLElBQUsvSSxFQUFFMEcsU0FDdkIsSUFBSWdJLEVBQUlnbEQsR0FBRzFtRCxFQUFHckYsR0FBSTFKLEVBV2xCLFNBQVMrTyxFQUFHckYsRUFBRzNILEdBQ1gsSUFBSTBPLEVBQUksR0FDUixHQUFFMUIsRUFBRTFPLFNBQVcwQixFQUFFMUIsUUFDakIsSUFBSyxJQUFJTCxFQUFJLEVBQUdBLEVBQUkrQixFQUFFMUIsT0FBUUwsSUFBSyxDQUMvQixJQUFJNkIsRUFBSWtOLEVBQUUvTyxHQUFJaXdCLEVBQUlwdUIsRUFBRXNvRSxVQUFXbjdELEVBQUksS0FDbkN0RixhQUFhaXJELEtBQU8zbEQsRUFBSXRGLEVBQUVpNkQsTUFBTTloRSxFQUFFOGhFLFFBQVNsekQsRUFBRXRSLEtBQUt5cEUsR0FBRzM0QyxFQUFHamhCLEVBQUdqTixFQUFFL0IsS0FFakUsT0FBT3lRLEVBUFgsQ0FRRTFCLEVBQUVxN0QsZ0JBQWlCMWdFLEVBQUczSCxFQUFFK3BFLGtCQUFtQmpxRSxFQUFJRSxFQUFFMEcsUUFBU3duQixFQUFJNmxDLEdBQUcvbUQsRUFBRzBCLEVBQUV4TixPQUFRakQsR0FDaEYsT0FBTyxJQUFJMjBELEdBQUc1bEQsRUFBRWpFLElBQUtqSixFQUFHb3VCLEVBQUcsQ0FDdkI4N0MsdUJBQXVCLElBNUJBLENBOEI3Qmg5RCxFQUFHckYsRUFBRzNILEdBQUssU0FBU2dOLEVBQUdyRixFQUFHM0gsR0FJeEIsT0FBTyxJQUFJWixHQUFHNE4sRUFBRWpFLElBQUsvSSxFQUFFMEcsUUFBUyxDQUM1QnNqRSx1QkFBdUIsSUFMbEIsQ0FPWGg5RCxFQUFHLEVBQUdoTixHQWtCUixTQUFTODJELEdBQUc5cEQsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FDckIsT0FBTzFCLGFBQWEybEQsR0FBSyxTQUFTM2xELEVBQUdyRixHQUNqQyxJQUFLd3NELEdBQUdubkQsRUFBRXkxQixHQUFJOTZCLEdBQUksT0FBT0EsRUFDekIsSUFBSTNILEVBQUlxNEQsR0FBRzF3RCxHQUNYLE9BQU8sSUFBSWlyRCxHQUFHNWxELEVBQUVqRSxJQUFLL0ksRUFBR2dOLEVBQUVyTixNQUFPLENBQzdCNGxDLElBQUksSUFKYSxDQU12QnY0QixFQUFHckYsR0FBS3FGLGFBQWE2bEQsR0FBSyxTQUFTN2xELEVBQUdyRixHQUNwQyxJQUFLd3NELEdBQUdubkQsRUFBRXkxQixHQUFJOTZCLEdBQUksT0FBT0EsRUFDekIsSUFBSTNILEVBQUlxNEQsR0FBRzF3RCxHQUFJK0csRUFBSXlrRCxHQUFHbm1ELEVBQUdyRixHQUN6QixPQUFPLElBQUlpckQsR0FBRzVsRCxFQUFFakUsSUFBSy9JLEVBQUcwTyxFQUFHLENBQ3ZCNjJCLElBQUksSUFKZ0IsQ0FNMUJ2NEIsRUFBR3JGLEdBQUtxRixhQUFhd0gsR0FBSyxTQUFTeEgsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FDMUMsSUFBS3lsRCxHQUFHbm5ELEVBQUV5MUIsR0FBSTk2QixHQUFJLE9BQU9BLEVBQ3pCLElBQUkxSixFQUFJeTFELEdBQUcxbUQsRUFBR3JGLEdBQUk3SCxFQUFJLFNBQVNrTixFQUFHckYsRUFBRzNILEVBQUcwTyxHQUNwQyxJQUFLLElBQUl6USxFQUFJLEdBQUk2QixFQUFJLEVBQUdvdUIsRUFBSWxoQixFQUFHbE4sRUFBSW91QixFQUFFNXZCLE9BQVF3QixJQUFLLENBQzlDLElBQUltTixFQUFJaWhCLEVBQUVwdUIsR0FBSTJMLEVBQUl3QixFQUFFbTdELFVBQVdqMUQsRUFBSSxLQUNuQ25ULGFBQWE0eUQsS0FBT3ovQyxFQUFJblQsRUFBRTRoRSxNQUFNMzBELEVBQUUyMEQsUUFBUyxPQUFTenVELEdBQUt6RSxhQUFha2tELEtBS3RFei9DLEVBQUl6RSxFQUFFa3pELE1BQU0zMEQsRUFBRTIwRCxRQUFTM2pFLEVBQUViLEtBQUs4bEMsR0FBR3ozQixFQUFHMEgsRUFBR3hMLElBRTNDLE9BQU8xSixFQVZXLENBV3BCK08sRUFBRXE3RCxnQkFBaUJyb0UsRUFBRzJILEVBQUcrRyxHQUFJd2YsRUFBSTZsQyxHQUFHL21ELEVBQUcvTyxFQUFFaUQsT0FBUXBCLEdBQ25ELE9BQU8sSUFBSTh5RCxHQUFHNWxELEVBQUVqRSxJQUFLOUssRUFBRXlJLFFBQVN3bkIsRUFBRyxDQUMvQnFYLElBQUksSUFmZ0IsQ0FpQjFCdjRCLEVBQUdyRixFQUFHK0csRUFBRzFPLEdBQUssU0FBU2dOLEVBQUdyRixHQUN4QixPQUFPd3NELEdBQUdubkQsRUFBRXkxQixHQUFJOTZCLEdBQUssSUFBSXZJLEdBQUc0TixFQUFFakUsSUFBS3lxQixHQUFFbmUsT0FBUzFOLEVBRGxDLENBRWRxRixFQUFHckYsR0FrQkwsU0FBU21zRCxHQUFHOW1ELEVBQUdyRixHQUNmLE9BQU9xRixhQUFhd0gsR0FBSyxTQUFTeEgsRUFBR3JGLEdBQ2pDLElBQUssSUFBSTNILEVBQUksS0FBTTBPLEVBQUksRUFBR3pRLEVBQUkrTyxFQUFFcTdELGdCQUFpQjM1RCxFQUFJelEsRUFBRUssT0FBUW9RLElBQUssQ0FDaEUsSUFBSTVPLEVBQUk3QixFQUFFeVEsR0FBSXdmLEVBQUl2bUIsYUFBYWlyRCxHQUFLanJELEVBQUVpNkQsTUFBTTloRSxFQUFFOGhFLFlBQVMsRUFBUTMwRCxFQUFJdzFCLEdBQUczaUMsRUFBRXNvRSxVQUFXbDZDLEdBQUssTUFDeEYsTUFBUWpoQixJQUFNak4sRUFBSSxNQUFRQSxHQUFJLElBQUtvekQsSUFBSTF2RCxJQUFJNUQsRUFBRThoRSxNQUFPMzBELEdBQUtqTixFQUFFMEQsSUFBSTVELEVBQUU4aEUsTUFBTzMwRCxJQUU1RSxPQUFPak4sRUFBSUEsRUFBRTZtQyxLQUFPLEtBTEMsQ0FNdkI3NUIsRUFBR3JGLEdBQUssS0FHZCxTQUFTcXVELEdBQUdocEQsRUFBR3JGLEdBQ1gsT0FBT3FGLEVBQUV3SSxPQUFTN04sRUFBRTZOLFFBQVV4SSxFQUFFakUsSUFBSXUyRCxRQUFRMzNELEVBQUVvQixRQUFVaUUsRUFBRXkxQixHQUFHNjhCLFFBQVEzM0QsRUFBRTg2QixNQUFRLElBQWdCejFCLEVBQUV3SSxLQUFPeEksRUFBRXJOLE1BQU0yL0QsUUFBUTMzRCxFQUFFaEksT0FBUyxJQUFrQnFOLEVBQUV3SSxLQUFPeEksRUFBRTlMLEtBQUtvK0QsUUFBUTMzRCxFQUFFekcsT0FBUzhMLEVBQUVrNUIsR0FBR281QixRQUFRMzNELEVBQUV1K0IsSUFBTSxJQUFzQmw1QixFQUFFd0ksTUFBUSxHQUFFeEksRUFBRXE3RCxnQkFBaUJyN0QsRUFBRXE3RCxpQkFBaUIsU0FBVXI3RCxFQUFHckYsR0FDOVIsT0FBTyxTQUFTcUYsRUFBR3JGLEdBQ2YsT0FBT3FGLEVBQUU0MEQsTUFBTXRDLFFBQVEzM0QsRUFBRWk2RCxRQUFVLFNBQVM1MEQsRUFBR3JGLEdBQzNDLE9BQU9xRixhQUFhMDJCLElBQU0vN0IsYUFBYSs3QixJQUFNMTJCLGFBQWF5NEIsSUFBTTk5QixhQUFhODlCLEdBQUssR0FBRXo0QixFQUFFeTdELFNBQVU5Z0UsRUFBRThnRSxTQUFVeEcsSUFBTWoxRCxhQUFhMDVCLElBQU0vK0IsYUFBYSsrQixHQUFLdTdCLEdBQUdqMUQsRUFBRXk0QixHQUFJOTlCLEVBQUU4OUIsSUFBTXo0QixhQUFhKzRDLElBQU1wK0MsYUFBYW8rQyxHQUR6SyxDQUVqQy80QyxFQUFFbzdELFVBQVd6Z0UsRUFBRXlnRSxXQUhkLENBSUxwN0QsRUFBR3JGLE9BU1QsU0FBUzB3RCxHQUFHcnJELEdBQ1osT0FBT0EsYUFBYTRsRCxHQUFLNWxELEVBQUV0RyxRQUFVOHNCLEdBQUVuZSxNQU12QyxJQUFJczlDLEdBQW1CLFNBQVNockQsR0FDaEMsU0FBUzNILEVBQUVnTixFQUFHaE4sRUFBRzBPLEdBQ2IsSUFBSXpRLEVBQUlOLEtBQ1IsT0FBUU0sRUFBSTBKLEVBQUV6SCxLQUFLdkMsT0FBU0EsTUFBTW9MLElBQU1pRSxFQUFHL08sRUFBRTBCLE1BQVFLLEVBQUcvQixFQUFFd2tDLEdBQUsvekIsRUFBR3pRLEVBQUV1WCxLQUFPLEVBQzNFdlgsRUFFSixPQUFPLEVBQUUrQixFQUFHMkgsR0FBSTNILEVBTk8sQ0FPekJpekQsSUFBS0osR0FBbUIsU0FBU2xyRCxHQUMvQixTQUFTM0gsRUFBRWdOLEVBQUdoTixFQUFHME8sRUFBR3pRLEdBQ2hCLElBQUk2QixFQUFJbkMsS0FDUixPQUFRbUMsRUFBSTZILEVBQUV6SCxLQUFLdkMsT0FBU0EsTUFBTW9MLElBQU1pRSxFQUFHbE4sRUFBRW9CLEtBQU9sQixFQUFHRixFQUFFb21DLEdBQUt4M0IsRUFBRzVPLEVBQUUyaUMsR0FBS3hrQyxFQUFHNkIsRUFBRTBWLEtBQU8sRUFDcEYxVixFQUVKLE9BQU8sRUFBRUUsRUFBRzJILEdBQUkzSCxFQU5NLENBT3hCaXpELElBRUYsU0FBU0UsR0FBR25tRCxFQUFHckYsR0FDWCxPQUFPLFNBQVNxRixFQUFHckYsR0FDZixJQUFJM0gsRUFBSSxJQUFJb3pELEdBQUd6ckQsR0FDZixPQUFPcUYsRUFBRWs1QixHQUFHNmdDLE9BQU96akUsU0FBUSxTQUFVcUUsR0FDakMsSUFBS0EsRUFBRXMrQyxJQUFLLENBQ1IsSUFBSXYzQyxFQUFJMUIsRUFBRTlMLEtBQUswZ0UsTUFBTWo2RCxHQUNyQixPQUFTK0csRUFBSTFPLEVBQUUwRCxJQUFJaUUsRUFBRytHLEdBQUsxTyxFQUFFMlgsT0FBT2hRLE9BRXZDM0gsRUFBRTZtQyxLQVBKLENBUUw3NUIsRUFBR3JGLGFBQWFpckQsR0FBS2pyRCxFQUFFekcsT0FBU3cwRCxHQUFHdVUsU0FHekMsSUFBSXoxRCxHQUFtQixTQUFTN00sR0FDNUIsU0FBUzNILEVBQUVnTixFQUFHaE4sR0FDVixJQUFJME8sRUFBSS9RLEtBQ1IsT0FBUStRLEVBQUkvRyxFQUFFekgsS0FBS3ZDLE9BQVNBLE1BQU1vTCxJQUFNaUUsRUFBRzBCLEVBQUUyNUQsZ0JBQWtCcm9FLEVBQUcwTyxFQUFFOEcsS0FBTyxFQUkzRTlHLEVBQUUrekIsR0FBS3VFLEdBQUc4aEMsUUFBTyxHQUFLcDZELEVBRTFCLE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJM0gsRUFURyxDQVVyQml6RCxJQUVGLFNBQVNTLEdBQUcxbUQsRUFBR3JGLEdBQ1gsT0FBT0EsRUFHWCxTQUFTb3NELEdBQUcvbUQsRUFBR3JGLEVBQUczSCxHQUNkLElBQUssSUFBSTBPLEVBQUksSUFBSTBrRCxHQUFHenJELEdBQUkxSixFQUFJLEVBQUdBLEVBQUkrTyxFQUFFcTdELGdCQUFnQi9wRSxPQUFRTCxJQUFLLENBQzlELElBQUk2QixFQUFJa04sRUFBRXE3RCxnQkFBZ0JwcUUsR0FDMUJ5USxFQUFFaEwsSUFBSTVELEVBQUU4aEUsTUFBTzVoRSxFQUFFL0IsSUFFckIsT0FBT3lRLEVBQUVtNEIsS0FHaUQsSUFBSW1zQixHQUFtQixTQUFTcnJELEdBQzFGLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsSUFBSTBPLEVBQUkvUSxLQUNSLE9BQVErUSxFQUFJL0csRUFBRXpILEtBQUt2QyxPQUFTQSxNQUFNb0wsSUFBTWlFLEVBQUcwQixFQUFFK3pCLEdBQUt6aUMsRUFBRzBPLEVBQUU4RyxLQUFPLEVBQWlCOUcsRUFFbkYsT0FBTyxFQUFFMU8sRUFBRzJILEdBQUkzSCxFQUxpRSxDQU1uRml6RCxJQUFLbUMsR0FBbUIsU0FBU3p0RCxHQUMvQixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsT0FBU0EsTUFBTW9MLElBQU1pRSxFQUFHMEIsRUFBRSt6QixHQUFLemlDLEVBQUcwTyxFQUFFOEcsS0FBTyxFQUFpQjlHLEVBRW5GLE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJM0gsRUFMTSxDQU14Qml6RCxJQUFLeUMsR0FBbUIsV0FDdEIsU0FBUzFvRCxFQUFFQSxHQUNQclAsS0FBS3VxRSxNQUFRbDdELEVBRWpCLE9BQU9BLEVBQUVpOUQsTUFBUSxXQUNiLE9BQU8sSUFBSWo5RCxFQUFFLENBQ1Q4NUQsU0FBVSxNQVNsQjk1RCxFQUFFL00sVUFBVTJoRSxNQUFRLFNBQVM1MEQsR0FDekIsR0FBSUEsRUFBRWk1QyxJQUFLLE9BQU90b0QsS0FBS3VxRSxNQUN2QixJQUFLLElBQUl2Z0UsRUFBSWhLLEtBQUt1cUUsTUFBT2xvRSxFQUFJLEVBQUdBLEVBQUlnTixFQUFFMU8sT0FBUyxJQUFLMEIsRUFBRyxDQUNuRCxJQUFLMkgsRUFBRW0vRCxTQUFTQyxPQUFRLE9BQU8sS0FDL0IsSUFBS2xrQyxHQUFHbDdCLEVBQUlBLEVBQUVtL0QsU0FBU0MsT0FBTy81RCxFQUFFdkosSUFBSXpELEtBQU0sT0FBTyxLQUVyRCxPQUFRMkgsR0FBS0EsRUFBRW0vRCxTQUFTQyxRQUFVLElBQUkvNUQsRUFBRWtvQixPQUFTLE1BQ2xEbG9CLEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUM5QixPQUFPaTFELEdBQUd0a0UsS0FBS3VxRSxNQUFPbDdELEVBQUVrN0QsUUFDekJsN0QsRUF4Qm1CLEdBeUJyQm9tRCxHQUFtQixXQUlwQixTQUFTcG1ELEVBQUVBLFFBQ1AsSUFBV0EsSUFBTUEsRUFBSTBvRCxHQUFHdVUsU0FBVXRzRSxLQUFLaXBDLEdBQUs1NUIsRUFFNUNyUCxLQUFLcXBDLEdBQUssSUFBSTF3QixJQVFYLE9BQU90SixFQUFFL00sVUFBVXlELElBQU0sU0FBU3NKLEVBQUdyRixHQUN4QyxPQUFPaEssS0FBS3cyRCxHQUFHbm5ELEVBQUdyRixHQUFJaEssTUFTMUJxUCxFQUFFL00sVUFBVTBYLE9BQVMsU0FBUzNLLEdBQzFCLE9BQU9yUCxLQUFLdzJELEdBQUdubkQsRUFBRyxNQUFPclAsTUFNN0JxUCxFQUFFL00sVUFBVWswRCxHQUFLLFNBQVNubkQsRUFBR3JGLEdBQ3pCLElBQUssSUFBSTNILEVBQUlyQyxLQUFLcXBDLEdBQUl0NEIsRUFBSSxFQUFHQSxFQUFJMUIsRUFBRTFPLE9BQVMsSUFBS29RLEVBQUcsQ0FDaEQsSUFBSXpRLEVBQUkrTyxFQUFFdkosSUFBSWlMLEdBQUk1TyxFQUFJRSxFQUFFeUQsSUFBSXhGLEdBQzVCNkIsYUFBYXdXLElBRWJ0VyxFQUFJRixFQUFJQSxHQUFLLEtBQXlCa21FLEdBQUdsbUUsSUFFekNBLEVBQUksSUFBSXdXLElBQUlwWCxPQUFPa1ksUUFBUXRYLEVBQUVnbkUsU0FBU0MsUUFBVSxLQUFNL21FLEVBQUUwRCxJQUFJekYsRUFBRzZCLEdBQUlFLEVBQUlGLElBRXZFQSxFQUFJLElBQUl3VyxJQUFLdFcsRUFBRTBELElBQUl6RixFQUFHNkIsR0FBSUUsRUFBSUYsR0FFbENFLEVBQUUwRCxJQUFJc0osRUFBRWtvQixJQUFLdnRCLElBRXlDcUYsRUFBRS9NLFVBQVU0bUMsR0FBSyxXQUN2RSxJQUFJNzVCLEVBQUlyUCxLQUFLczFELEdBQUcsR0FBRTFCLElBQUs1ekQsS0FBS3FwQyxJQUM1QixPQUFPLE1BQVFoNkIsRUFBSSxJQUFJMG9ELEdBQUcxb0QsR0FBS3JQLEtBQUtpcEMsSUFjeEM1NUIsRUFBRS9NLFVBQVVnekQsR0FBSyxTQUFTam1ELEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSXJDLEtBQU0rUSxHQUFJLEVBQUl6USxFQUFJTixLQUFLaXBDLEdBQUdnN0IsTUFBTTUwRCxHQUFJbE4sRUFBSStpQyxHQUFHNWtDLEdBQ25EaUIsT0FBTzZOLE9BQU8sR0FBSTlPLEVBQUU2b0UsU0FBU0MsUUFBVSxHQUN2QyxPQUFPcC9ELEVBQUVyRSxTQUFRLFNBQVVxRSxFQUFHMUosR0FDMUIsR0FBSTBKLGFBQWEyTyxJQUFLLENBQ2xCLElBQUk0WCxFQUFJbHVCLEVBQUVpekQsR0FBR2ptRCxFQUFFaTBELE1BQU1oakUsR0FBSTBKLEdBQ3pCLE1BQVF1bUIsSUFBTXB1QixFQUFFN0IsR0FBS2l3QixFQUFHeGYsR0FBSSxRQUN6QixPQUFTL0csR0FBSzdILEVBQUU3QixHQUFLMEosRUFBRytHLEdBQUksR0FBTTVPLEVBQUVpTSxlQUFlOU4sWUFBYzZCLEVBQUU3QixHQUFJeVEsR0FBSSxNQUNqRkEsRUFBSSxDQUNMbzRELFNBQVUsQ0FDTkMsT0FBUWpuRSxJQUVaLE1BQ0xrTixFQTFFaUIsR0FnRnhCLFNBQVMybUQsR0FBRzNtRCxHQUNSLElBQUlyRixFQUFJLEdBQ1IsT0FBTyxHQUFFcUYsRUFBRSs1RCxRQUFVLElBQUksU0FBVS81RCxFQUFHaE4sR0FDbEMsSUFBSTBPLEVBQUksSUFBSSxHQUFFLENBQUUxQixJQUNoQixHQUFJNjFCLEdBQUc3aUMsR0FBSSxDQUNQLElBQUkvQixFQUFJMDFELEdBQUczekQsRUFBRThtRSxVQUFVQyxPQUN2QixHQUFJLElBQU05b0UsRUFBRUssT0FFWnFKLEVBQUV2SyxLQUFLc1IsUUFHUCxJQUFLLElBQUk1TyxFQUFJLEVBQUdvdUIsRUFBSWp3QixFQUFHNkIsRUFBSW91QixFQUFFNXZCLE9BQVF3QixJQUFLLENBQ3RDLElBQUltTixFQUFJaWhCLEVBQUVwdUIsR0FDVjZILEVBQUV2SyxLQUFLc1IsRUFBRXV5RCxNQUFNaDBELFVBS3ZCdEYsRUFBRXZLLEtBQUtzUixNQUNOLElBQUk2MkIsR0FBRzU5QixHQXVCaEIsSUFBSTh0RCxHQUFLLFNBQVN6b0QsRUFBR3JGLEdBQ2pCaEssS0FBS29MLElBQU1pRSxFQUFHclAsS0FBSytJLFFBQVVpQixHQUM5QmlyRCxHQUFtQixTQUFTanJELEdBQzNCLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEVBQUcwTyxFQUFHelEsR0FDaEIsSUFBSTZCLEVBQUluQyxLQUNSLE9BQVFtQyxFQUFJNkgsRUFBRXpILEtBQUt2QyxLQUFNcVAsRUFBR2hOLElBQU1yQyxNQUFNazJELEdBQUtubEQsRUFBRzVPLEVBQUV5bEMsS0FBT3RuQyxFQUFFc25DLEdBQUl6bEMsRUFBRWtxRSx3QkFBMEIvckUsRUFBRStyRSxzQkFDN0ZscUUsRUFFSixPQUFPLEVBQUVFLEVBQUcySCxHQUFJM0gsRUFBRUMsVUFBVTJoRSxNQUFRLFNBQVM1MEQsR0FDekMsT0FBT3JQLEtBQUtrMkQsR0FBRytOLE1BQU01MEQsSUFDdEJoTixFQUFFQyxVQUFVaUIsS0FBTyxXQUNsQixPQUFPdkQsS0FBS2syRCxJQUNiN3pELEVBQUVDLFVBQVVvNEQsR0FBSyxXQUNoQixPQUFPMTZELEtBQUtrMkQsR0FBR3FVLE9BQ2hCbG9FLEVBQUVDLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBQzlCLE9BQU9BLGFBQWFoTixHQUFLckMsS0FBS29MLElBQUl1MkQsUUFBUXR5RCxFQUFFakUsTUFBUXBMLEtBQUsrSSxRQUFRNDRELFFBQVF0eUQsRUFBRXRHLFVBQVkvSSxLQUFLNG5DLEtBQU92NEIsRUFBRXU0QixJQUFNNW5DLEtBQUtxc0Usd0JBQTBCaDlELEVBQUVnOUQsdUJBQXlCcnNFLEtBQUtrMkQsR0FBR3lMLFFBQVF0eUQsRUFBRTZtRCxLQUN4TDd6RCxFQUFFQyxVQUFVdkMsU0FBVyxXQUN0QixNQUFPLFlBQWNDLEtBQUtvTCxJQUFNLEtBQU9wTCxLQUFLK0ksUUFBVSxLQUFPL0ksS0FBS2syRCxHQUFHbjJELFdBQWEseUJBQTJCQyxLQUFLNG5DLEdBQUssK0JBQWlDNW5DLEtBQUtxc0Usc0JBQXdCLE1BQ3RMOXFFLE9BQU9zRSxlQUFleEQsRUFBRUMsVUFBVyxtQkFBb0IsQ0FDdER3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUs0bkMsSUFBTTVuQyxLQUFLcXNFLHVCQUUzQnIrRCxZQUFZLEVBQ1ppTyxjQUFjLElBQ2Q1WixFQXRCYyxDQXVCcEJ5MUQsSUFBS3IyRCxHQUFtQixTQUFTdUksR0FDL0IsU0FBUzNILEVBQUVnTixFQUFHaE4sRUFBRzBPLEdBQ2IsSUFBSXpRLEVBQUlOLEtBQ1IsT0FBUU0sRUFBSTBKLEVBQUV6SCxLQUFLdkMsS0FBTXFQLEVBQUdoTixJQUFNckMsTUFBTXFzRSx5QkFBMkJ0N0QsSUFBTUEsRUFBRXM3RCx1QkFDM0UvckUsRUFFSixPQUFPLEVBQUUrQixFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVV2QyxTQUFXLFdBQ25DLE1BQU8sY0FBZ0JDLEtBQUtvTCxJQUFNLEtBQU9wTCxLQUFLK0ksUUFBVSxLQUN6RHhILE9BQU9zRSxlQUFleEQsRUFBRUMsVUFBVyxtQkFBb0IsQ0FDdER3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtxc0UsdUJBRWhCcitELFlBQVksRUFDWmlPLGNBQWMsSUFDZDVaLEVBQUVDLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBQy9CLE9BQU9BLGFBQWFoTixHQUFLZ04sRUFBRWc5RCx3QkFBMEJyc0UsS0FBS3FzRSx1QkFBeUJoOUQsRUFBRXRHLFFBQVE0NEQsUUFBUTNoRSxLQUFLK0ksVUFBWXNHLEVBQUVqRSxJQUFJdTJELFFBQVEzaEUsS0FBS29MLE1BQzFJL0ksRUFoQm1CLENBaUJ4QnkxRCxJQUFLVyxHQUFtQixTQUFTenVELEdBQy9CLFNBQVMzSCxJQUNMLE9BQU8sT0FBUzJILEdBQUtBLEVBQUU3RSxNQUFNbkYsS0FBTW1HLFlBQWNuRyxLQUVyRCxPQUFPLEVBQUVxQyxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVV2QyxTQUFXLFdBQ25DLE1BQU8sbUJBQXFCQyxLQUFLb0wsSUFBTSxLQUFPcEwsS0FBSytJLFFBQVUsS0FDOUR4SCxPQUFPc0UsZUFBZXhELEVBQUVDLFVBQVcsbUJBQW9CLENBQ3REd0QsSUFBSyxXQUNELE9BQU8sR0FFWGtJLFlBQVksRUFDWmlPLGNBQWMsSUFDZDVaLEVBQUVDLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBQy9CLE9BQU9BLGFBQWFoTixHQUFLZ04sRUFBRXRHLFFBQVE0NEQsUUFBUTNoRSxLQUFLK0ksVUFBWXNHLEVBQUVqRSxJQUFJdTJELFFBQVEzaEUsS0FBS29MLE1BQ2hGL0ksRUFkbUIsQ0FleEJ5MUQsSUFBS0ksR0FLUCxTQUFTN29ELEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxFQUFHNkIsRUFBZ0JvdUIsRUFBR2poQixRQUN2QyxJQUFXdEYsSUFBTUEsRUFBSSxXQUFPLElBQVczSCxJQUFNQSxFQUFJLFNBQUssSUFBVzBPLElBQU1BLEVBQUksU0FDM0UsSUFBV3pRLElBQU1BLEVBQUksV0FBTyxJQUFXNkIsSUFBTUEsRUFBSSxVQUFNLElBQVdvdUIsSUFBTUEsRUFBSSxXQUM1RSxJQUFXamhCLElBQU1BLEVBQUksTUFBT3RQLEtBQUswK0MsS0FBT3J2QyxFQUFHclAsS0FBSzJqRSxnQkFBa0IzNUQsRUFBR2hLLEtBQUttNUQsR0FBSzkyRCxFQUMvRXJDLEtBQUs2akUsUUFBVTl5RCxFQUFHL1EsS0FBS3VqRSxNQUFRampFLEVBQUdOLEtBQUt1c0UsVUFBWXBxRSxFQUFHbkMsS0FBSzhqRSxRQUFVdnpDLEVBQUd2d0IsS0FBSytqRSxNQUFRejBELEVBQ3JGdFAsS0FBS20yRCxHQUFLLEtBRVZuMkQsS0FBS2cxRCxHQUFLLEtBQU1oMUQsS0FBSzhqRSxRQUFTOWpFLEtBQUsrakUsT0FPd0IsU0FBUzFLLEdBQUdocUQsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixFQUFHb3VCLEVBQUdqaEIsR0FDNUYsT0FBTyxJQUFJNG9ELEdBQUc3b0QsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixFQUFHb3VCLEVBQUdqaEIsR0FHcUMsU0FBU3lwRCxHQUFHMXBELEdBQ3BGLE9BQU8sSUFBSTZvRCxHQUFHN29ELEdBUWQsU0FBU3FvRCxHQUFHcm9ELEdBQ1osT0FBUSxHQUFFQSxFQUFFazBELFFBQVUsTUFBb0JsMEQsRUFBRWs5RCxVQUdoRCxTQUFTM1UsR0FBR3ZvRCxHQUNSLE9BQVEsR0FBRUEsRUFBRWswRCxRQUFVLE1BQW1CbDBELEVBQUVrOUQsVUFHL0MsU0FBU25ULEdBQUcvcEQsR0FDUixPQUFPQSxFQUFFOHBELEdBQUd4NEQsT0FBUyxFQUFJME8sRUFBRThwRCxHQUFHLEdBQUc4SyxNQUFRLEtBRzdDLFNBQVNuTyxHQUFHem1ELEdBQ1IsSUFBSyxJQUFJckYsRUFBSSxFQUFHM0gsRUFBSWdOLEVBQUV3MEQsUUFBUzc1RCxFQUFJM0gsRUFBRTFCLE9BQVFxSixJQUFLLENBQzlDLElBQUkrRyxFQUFJMU8sRUFBRTJILEdBQ1YsR0FBSStHLEVBQUVta0QsS0FBTSxPQUFPbmtELEVBQUVrekQsTUFFekIsT0FBTyxLQVVQLFNBQVNoTSxHQUFHNW9ELEdBQ1osT0FBTyxPQUFTQSxFQUFFczBELGdCQU9sQixTQUFTNkksR0FBR245RCxHQUNaLElBQUlyRixFQUFJLEdBQUVxRixHQUNWLEdBQUksT0FBU3JGLEVBQUVtc0QsR0FBSSxDQUNmbnNELEVBQUVtc0QsR0FBSyxHQUNQLElBQUk5ekQsRUFBSXl6RCxHQUFHOXJELEdBQUkrRyxFQUFJcW9ELEdBQUdwdkQsR0FDdEIsR0FBSSxPQUFTM0gsR0FBSyxPQUFTME8sRUFJM0IxTyxFQUFFeXVCLEtBQU85bUIsRUFBRW1zRCxHQUFHMTJELEtBQUssSUFBSXFzRSxHQUFHenBFLElBQUsySCxFQUFFbXNELEdBQUcxMkQsS0FBSyxJQUFJcXNFLEdBQUcsR0FBRS81QyxJQUFLLFlBQThCLENBQ2pGLElBQUssSUFBSXp4QixHQUFJLEVBQUk2QixFQUFJLEVBQUdvdUIsRUFBSXZtQixFQUFFbXZELEdBQUloM0QsRUFBSW91QixFQUFFNXZCLE9BQVF3QixJQUFLLENBQ2pELElBQUltTixFQUFJaWhCLEVBQUVwdUIsR0FDVjZILEVBQUVtc0QsR0FBRzEyRCxLQUFLNlAsR0FBSUEsRUFBRTIwRCxNQUFNbnpDLE1BQVF4d0IsR0FBSSxHQUV0QyxJQUFLQSxFQUFHLENBR0osSUFBSXdOLEVBQUk5RCxFQUFFbXZELEdBQUd4NEQsT0FBUyxFQUFJcUosRUFBRW12RCxHQUFHbnZELEVBQUVtdkQsR0FBR3g0RCxPQUFTLEdBQUd3akUsSUFBTSxNQUN0RG42RCxFQUFFbXNELEdBQUcxMkQsS0FBSyxJQUFJcXNFLEdBQUcsR0FBRS81QyxJQUFLamtCLE1BSXBDLE9BQU85RCxFQUFFbXNELEdBS1QsU0FBUzZDLEdBQUczcEQsR0FDWixJQUFJckYsRUFBSSxHQUFFcUYsR0FDVixJQUFLckYsRUFBRWdyRCxHQUFJLEdBQUksTUFBb0JockQsRUFBRXVpRSxVQUFXdmlFLEVBQUVnckQsR0FBSyxHQUFFaHJELEVBQUUwMEMsS0FBTTEwQyxFQUFFMjVELGdCQUFpQjZJLEdBQUd4aUUsR0FBSUEsRUFBRTY1RCxRQUFTNzVELEVBQUV1NUQsTUFBT3Y1RCxFQUFFODVELFFBQVM5NUQsRUFBRSs1RCxXQUFhLENBQ3JJLElBRUEsSUFBSTFoRSxFQUFJLEdBQUkwTyxFQUFJLEVBQUd6USxFQUFJa3NFLEdBQUd4aUUsR0FBSStHLEVBQUl6USxFQUFFSyxPQUFRb1EsSUFBSyxDQUM3QyxJQUFJNU8sRUFBSTdCLEVBQUV5USxHQUFJd2YsRUFBSSxTQUE0QnB1QixFQUFFZ2lFLElBQU0sTUFBd0IsT0FDOUU5aEUsRUFBRTVDLEtBQUssSUFBSXFzRSxHQUFHM3BFLEVBQUU4aEUsTUFBTzF6QyxJQUduQixJQUFJamhCLEVBQUl0RixFQUFFKzVELE1BQVEsSUFBSXJMLEdBQUcxdUQsRUFBRSs1RCxNQUFNdmQsVUFBV3g4QyxFQUFFKzVELE1BQU1pSSxRQUFVLEtBQU1sK0QsRUFBSTlELEVBQUU4NUQsUUFBVSxJQUFJcEwsR0FBRzF1RCxFQUFFODVELFFBQVF0ZCxVQUFXeDhDLEVBQUU4NUQsUUFBUWtJLFFBQVUsS0FFcEloaUUsRUFBRWdyRCxHQUFLLEdBQUVockQsRUFBRTAwQyxLQUFNMTBDLEVBQUUyNUQsZ0JBQWlCdGhFLEVBQUcySCxFQUFFNjVELFFBQVM3NUQsRUFBRXU1RCxNQUFPajBELEVBQUd4QixHQUUxRSxPQUFPOUQsRUFBRWdyRCxHQUdiLFNBQVM0RixHQUFHdnJELEVBQUdyRixFQUFHM0gsR0FDZCxPQUFPLElBQUk2MUQsR0FBRzdvRCxFQUFFcXZDLEtBQU1ydkMsRUFBRXMwRCxnQkFBaUJ0MEQsRUFBRThwRCxHQUFHMzJELFFBQVM2TSxFQUFFdzBELFFBQVFyaEUsUUFBU3dILEVBQUczSCxFQUFHZ04sRUFBRXkwRCxRQUFTejBELEVBQUUwMEQsT0FHakcsU0FBUy9MLEdBQUczb0QsRUFBR3JGLEdBQ1gsT0FBTyxJQUFJa3VELEdBQUc3b0QsRUFBRXF2QyxLQUFNcnZDLEVBQUVzMEQsZ0JBQWlCdDBELEVBQUU4cEQsR0FBRzMyRCxRQUFTNk0sRUFBRXcwRCxRQUFRcmhFLFFBQVM2TSxFQUFFazBELE1BQU9sMEQsRUFBRWs5RCxVQUFXdmlFLEVBQUdxRixFQUFFMDBELE9BR3pHLFNBQVNsTCxHQUFHeHBELEVBQUdyRixHQUNYLE9BQU8sSUFBSWt1RCxHQUFHN29ELEVBQUVxdkMsS0FBTXJ2QyxFQUFFczBELGdCQUFpQnQwRCxFQUFFOHBELEdBQUczMkQsUUFBUzZNLEVBQUV3MEQsUUFBUXJoRSxRQUFTNk0sRUFBRWswRCxNQUFPbDBELEVBQUVrOUQsVUFBV2w5RCxFQUFFeTBELFFBQVM5NUQsR0FHL0csU0FBU3d1RCxHQUFHbnBELEVBQUdyRixHQUNYLE9BQU9vNkQsR0FBR3BMLEdBQUczcEQsR0FBSTJwRCxHQUFHaHZELEtBQU9xRixFQUFFazlELFlBQWN2aUUsRUFBRXVpRSxVQU1qRCxTQUFTelQsR0FBR3pwRCxHQUNSLE9BQU8yMEQsR0FBR2hMLEdBQUczcEQsSUFBTSxPQUFTQSxFQUFFazlELFVBR2xDLFNBQVNqVSxHQUFHanBELEdBQ1IsTUFBTyxnQkFBa0IsU0FBU0EsR0FDOUIsSUFBSXJGLEVBQUlxRixFQUFFcXZDLEtBQUt4VSxJQUNmLE9BQU8sT0FBUzc2QixFQUFFczBELGtCQUFvQjM1RCxHQUFLLG9CQUFzQnFGLEVBQUVzMEQsaUJBQ25FdDBELEVBQUV3MEQsUUFBUWxqRSxPQUFTLElBQU1xSixHQUFLLGVBQWlCcUYsRUFBRXcwRCxRQUFRNWpFLEtBQUksU0FBVW9QLEdBQ25FLE9BQVFyRixFQUFJcUYsR0FBRzQwRCxNQUFNLzVCLElBQU0sSUFBTWxnQyxFQUFFMEcsR0FBSyxJQUFNd3pELEdBQUdsNkQsRUFBRWhJLE9BQ1MsSUFBSWdJLEtBQ08zSixLQUFLLE1BQVEsS0FDeEYsR0FBRWdQLEVBQUVrMEQsU0FBV3Y1RCxHQUFLLFlBQWNxRixFQUFFazBELE9BQVFsMEQsRUFBRXUwRCxRQUFRampFLE9BQVMsSUFBTXFKLEdBQUssZUFBaUJxRixFQUFFdTBELFFBQVEzakUsS0FBSSxTQUFVb1AsR0FDL0csT0FBUXJGLEVBQUlxRixHQUFHNDBELE1BQU0vNUIsSUFBTSxLQUFPbGdDLEVBQUVtNkQsSUFBTSxJQUMxQyxJQUFJbjZELEtBQ0ozSixLQUFLLE1BQVEsS0FBTWdQLEVBQUV5MEQsVUFBWTk1RCxHQUFLLGNBQWdCeXZELEdBQUdwcUQsRUFBRXkwRCxVQUFXejBELEVBQUUwMEQsUUFBVS81RCxHQUFLLFlBQWN5dkQsR0FBR3BxRCxFQUFFMDBELFFBQzlHLFVBQVkvNUQsRUFBSSxJQVhLLENBWXZCZ3ZELEdBQUczcEQsSUFBTSxlQUFpQkEsRUFBRWs5RCxVQUFZLElBR21CLFNBQVNsVyxHQUFHaG5ELEVBQUdyRixHQUM1RSxPQUFPLFNBQVNxRixFQUFHckYsR0FDZixJQUFJM0gsRUFBSTJILEVBQUVvQixJQUFJc3pDLEtBQ2QsT0FBTyxPQUFTcnZDLEVBQUVzMEQsZ0JBQWtCMzVELEVBQUVvQixJQUFJaUcsRUFBRWhDLEVBQUVzMEQsa0JBQW9CdDBELEVBQUVxdkMsS0FBS3ZVLEVBQUU5bkMsR0FBSyxHQUFFcThCLEVBQUVydkIsRUFBRXF2QyxNQUFRcnZDLEVBQUVxdkMsS0FBS2lqQixRQUFRdC9ELEdBQUtnTixFQUFFcXZDLEtBQUsxaEIsRUFBRTM2QixHQUZ4SCxDQUdMZ04sRUFBR3JGLElBQU0sU0FBU3FGLEVBQUdyRixHQUNuQixJQUFLLElBQUkzSCxFQUFJLEVBQUcwTyxFQUFJMUIsRUFBRThwRCxHQUFJOTJELEVBQUkwTyxFQUFFcFEsT0FBUTBCLElBQUssQ0FDekMsSUFBSS9CLEVBQUl5USxFQUFFMU8sR0FFRSxJQUFLL0IsRUFBRTJqRSxNQUFNbnpDLEtBQU8sT0FBUzltQixFQUFFaTZELE1BQU0zakUsRUFBRTJqRSxPQUFRLE9BQU8sRUFFdEUsT0FBTyxFQU5BLENBT1Q1MEQsRUFBR3JGLElBQU0sU0FBU3FGLEVBQUdyRixHQUNuQixJQUFLLElBQUkzSCxFQUFJLEVBQUcwTyxFQUFJMUIsRUFBRXcwRCxRQUFTeGhFLEVBQUkwTyxFQUFFcFEsT0FBUTBCLElBQ3pDLElBQUswTyxFQUFFMU8sR0FBR29xRSxRQUFRemlFLEdBQUksT0FBTyxFQUVqQyxPQUFPLEVBSkEsQ0FLVHFGLEVBQUdyRixJQUFNLFNBQVNxRixFQUFHckYsR0FDbkIsUUFBU3FGLEVBQUV5MEQsVUFBWXhJLEdBQUdqc0QsRUFBRXkwRCxRQUFTMEksR0FBR245RCxHQUFJckYsSUFBU3FGLEVBQUUwMEQsT0FBVXpJLEdBQUdqc0QsRUFBRTAwRCxNQUFPeUksR0FBR245RCxHQUFJckYsSUFEN0UsQ0FFVHFGLEVBQUdyRixHQUdULFNBQVNtdUQsR0FBRzlvRCxHQUNSLE9BQU8sU0FBU3JGLEVBQUczSCxHQUNmLElBQUssSUFBSTBPLEdBQUksRUFBSXpRLEVBQUksRUFBRzZCLEVBQUlxcUUsR0FBR245RCxHQUFJL08sRUFBSTZCLEVBQUV4QixPQUFRTCxJQUFLLENBQ2xELElBQUlpd0IsRUFBSXB1QixFQUFFN0IsR0FBSWdQLEVBQUlvOUQsR0FBR244QyxFQUFHdm1CLEVBQUczSCxHQUMzQixHQUFJLElBQU1pTixFQUFHLE9BQU9BLEVBQ3BCeUIsRUFBSUEsR0FBS3dmLEVBQUUwekMsTUFBTW56QyxJQUVyQixPQUFPLEdBSWYsSUFBSThrQyxHQUFtQixTQUFTNXJELEdBQzVCLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEVBQUcwTyxHQUNiLElBQUl6USxFQUFJTixLQUNSLE9BQVFNLEVBQUkwSixFQUFFekgsS0FBS3ZDLE9BQVNBLE1BQU1pa0UsTUFBUTUwRCxFQUFHL08sRUFBRW9RLEdBQUtyTyxFQUFHL0IsRUFBRTBCLE1BQVErTyxFQUFHelEsRUFJakUsT0FBTyxFQUFFK0IsRUFBRzJILEdBQUkzSCxFQUFFNk0sT0FBUyxTQUFTRyxFQUFHckYsRUFBRytHLEdBQzdDLE9BQU8xQixFQUFFeWhCLElBQU0sT0FBa0I5bUIsR0FBSyxXQUEwQkEsRUFBSWhLLEtBQUtxNEQsR0FBR2hwRCxFQUFHckYsRUFBRytHLEdBQUssSUFBSTBwRCxHQUFHcHJELEVBQUdyRixFQUFHK0csR0FBSyxtQkFBMEMvRyxFQUFJLElBQUlrdkQsR0FBRzdwRCxFQUFHMEIsR0FBSyxPQUFrQi9HLEVBQUksSUFBSXV2RCxHQUFHbHFELEVBQUcwQixHQUFLLFdBQTBCL0csRUFBSSxJQUFJMHZELEdBQUdycUQsRUFBRzBCLEdBQUssdUJBQWtEL0csRUFBSSxJQUFJdXVELEdBQUdscEQsRUFBRzBCLEdBQUssSUFBSTFPLEVBQUVnTixFQUFHckYsRUFBRytHLElBQzFVMU8sRUFBRWcyRCxHQUFLLFNBQVNocEQsRUFBR3JGLEVBQUczSCxHQUNyQixNQUFPLE9BQWtCMkgsRUFBSSxJQUFJNnRELEdBQUd4b0QsRUFBR2hOLEdBQUssSUFBSSsxRCxHQUFHL29ELEVBQUdoTixJQUN2REEsRUFBRUMsVUFBVW1xRSxRQUFVLFNBQVNwOUQsR0FDOUIsSUFBSXJGLEVBQUlxRixFQUFFNDBELE1BQU1qa0UsS0FBS2lrRSxPQUViLE1BQU8sT0FBeUJqa0UsS0FBSzBRLEdBQUssT0FBUzFHLEdBQUtoSyxLQUFLdzFELEdBQUc4UyxHQUFHdCtELEVBQUdoSyxLQUFLZ0MsUUFBVSxPQUFTZ0ksR0FBS3ErRCxHQUFHcm9FLEtBQUtnQyxTQUFXcW1FLEdBQUdyK0QsSUFBTWhLLEtBQUt3MUQsR0FBRzhTLEdBQUd0K0QsRUFBR2hLLEtBQUtnQyxTQUV2SkssRUFBRUMsVUFBVWt6RCxHQUFLLFNBQVNubUQsR0FDN0IsT0FBUXJQLEtBQUswUSxJQUNYLElBQUssSUFDSCxPQUFPckIsRUFBSSxFQUViLElBQUssS0FDSCxPQUFPQSxHQUFLLEVBRWQsSUFBSyxLQUNILE9BQU8sSUFBTUEsRUFFZixJQUFLLEtBQ0gsT0FBTyxJQUFNQSxFQUVmLElBQUssSUFDSCxPQUFPQSxFQUFJLEVBRWIsSUFBSyxLQUNILE9BQU9BLEdBQUssRUFFZCxRQUNFLE9BQU8sT0FFWmhOLEVBQUVDLFVBQVU0eUQsR0FBSyxXQUNoQixNQUFPLENBQUUsSUFBc0IsS0FBZ0MsSUFBeUIsS0FBbUMsS0FBdUIsVUFBd0I1MEMsUUFBUXRnQixLQUFLMFEsS0FBTyxHQUMvTHJPLEVBekNnQixFQTBDckIsZUFFRW80RCxHQUFtQixTQUFTendELEdBQzVCLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEVBQUcwTyxHQUNiLElBQUl6USxFQUFJTixLQUNSLE9BQVFNLEVBQUkwSixFQUFFekgsS0FBS3ZDLEtBQU1xUCxFQUFHaE4sRUFBRzBPLElBQU0vUSxNQUFNb0wsSUFBTSxHQUFFa0ssRUFBRXZFLEVBQUU4NEQsZ0JBQWlCdnBFLEVBRTVFLE9BQU8sRUFBRStCLEVBQUcySCxHQUFJM0gsRUFBRUMsVUFBVW1xRSxRQUFVLFNBQVNwOUQsR0FDM0MsSUFBSXJGLEVBQUksR0FBRXU0QixFQUFFbHpCLEVBQUVqRSxJQUFLcEwsS0FBS29MLEtBQ3hCLE9BQU9wTCxLQUFLdzFELEdBQUd4ckQsSUFDaEIzSCxFQVJnQixDQVNyQnV6RCxJQUFLaUMsR0FBbUIsU0FBUzd0RCxHQUMvQixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsS0FBTXFQLEVBQUcsS0FBZ0JoTixJQUFNckMsTUFBTW1MLEtBQU95dEQsR0FBRyxFQUFnQnYyRCxHQUNsRjBPLEVBRUosT0FBTyxFQUFFMU8sRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbXFFLFFBQVUsU0FBU3A5RCxHQUMzQyxPQUFPclAsS0FBS21MLEtBQUtvcEIsTUFBSyxTQUFVdnFCLEdBQzVCLE9BQU9BLEVBQUUyM0QsUUFBUXR5RCxFQUFFakUsU0FFeEIvSSxFQVZtQixDQVd4QnV6RCxJQUFLd0MsR0FBbUIsU0FBU3B1RCxHQUMvQixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsS0FBTXFQLEVBQUcsU0FBd0JoTixJQUFNckMsTUFBTW1MLEtBQU95dEQsR0FBRyxFQUF3QnYyRCxHQUNsRzBPLEVBRUosT0FBTyxFQUFFMU8sRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbXFFLFFBQVUsU0FBU3A5RCxHQUMzQyxPQUFRclAsS0FBS21MLEtBQUtvcEIsTUFBSyxTQUFVdnFCLEdBQzdCLE9BQU9BLEVBQUUyM0QsUUFBUXR5RCxFQUFFakUsU0FFeEIvSSxFQVZtQixDQVd4QnV6RCxJQUV3RCxTQUFTZ0QsR0FBR3ZwRCxFQUFHckYsR0FDckUsSUFBSTNILEVBQ0osUUFBUyxRQUFVQSxFQUFJMkgsRUFBRW1nRSxrQkFBZSxJQUFXOW5FLE9BQUksRUFBU0EsRUFBRTZYLFNBQVcsSUFBSWphLEtBQUksU0FBVW9QLEdBQzNGLE9BQU8sR0FBRWlHLEVBQUVqRyxFQUFFdzZELG1CQUl3QyxJQUFJM1EsR0FBbUIsU0FBU2x2RCxHQUN6RixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLE9BQU8ySCxFQUFFekgsS0FBS3ZDLEtBQU1xUCxFQUFHLGlCQUF3Q2hOLElBQU1yQyxLQUV6RSxPQUFPLEVBQUVxQyxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVVtcUUsUUFBVSxTQUFTcDlELEdBQzNDLElBQUlyRixFQUFJcUYsRUFBRTQwRCxNQUFNamtFLEtBQUtpa0UsT0FDckIsT0FBTzJFLEdBQUc1K0QsSUFBTXUrRCxHQUFHditELEVBQUVtZ0UsV0FBWW5xRSxLQUFLZ0MsUUFDdkNLLEVBUDZFLENBUWxGdXpELElBQUsyRCxHQUFtQixTQUFTdnZELEdBQy9CLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsT0FBTzJILEVBQUV6SCxLQUFLdkMsS0FBTXFQLEVBQUcsS0FBZ0JoTixJQUFNckMsS0FFakQsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbXFFLFFBQVUsU0FBU3A5RCxHQUMzQyxJQUFJckYsRUFBSXFGLEVBQUU0MEQsTUFBTWprRSxLQUFLaWtFLE9BQ3JCLE9BQU8sT0FBU2o2RCxHQUFLdStELEdBQUd2b0UsS0FBS2dDLE1BQU1tb0UsV0FBWW5nRSxJQUNoRDNILEVBUG1CLENBUXhCdXpELElBQUs4RCxHQUFtQixTQUFTMXZELEdBQy9CLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsT0FBTzJILEVBQUV6SCxLQUFLdkMsS0FBTXFQLEVBQUcsU0FBd0JoTixJQUFNckMsS0FFekQsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbXFFLFFBQVUsU0FBU3A5RCxHQUMzQyxHQUFJazVELEdBQUd2b0UsS0FBS2dDLE1BQU1tb0UsV0FBWSxDQUMxQitCLFVBQVcsZUFDWCxPQUFPLEVBQ1gsSUFBSWxpRSxFQUFJcUYsRUFBRTQwRCxNQUFNamtFLEtBQUtpa0UsT0FDckIsT0FBTyxPQUFTajZELElBQU11K0QsR0FBR3ZvRSxLQUFLZ0MsTUFBTW1vRSxXQUFZbmdFLElBQ2pEM0gsRUFWbUIsQ0FXeEJ1ekQsSUFBSzJDLEdBQW1CLFNBQVN2dUQsR0FDL0IsU0FBUzNILEVBQUVnTixFQUFHaE4sR0FDVixPQUFPMkgsRUFBRXpILEtBQUt2QyxLQUFNcVAsRUFBRyxxQkFBZ0RoTixJQUFNckMsS0FFakYsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbXFFLFFBQVUsU0FBU3A5RCxHQUMzQyxJQUFJckYsRUFBSWhLLEtBQU1xQyxFQUFJZ04sRUFBRTQwRCxNQUFNamtFLEtBQUtpa0UsT0FDL0IsU0FBVTJFLEdBQUd2bUUsS0FBT0EsRUFBRThuRSxXQUFXandELFNBQVc3WCxFQUFFOG5FLFdBQVdqd0QsT0FBT3FhLE1BQUssU0FBVWxsQixHQUMzRSxPQUFPazVELEdBQUd2K0QsRUFBRWhJLE1BQU1tb0UsV0FBWTk2RCxPQUVuQ2hOLEVBVG1CLENBVXhCdXpELElBQUs4QyxHQUFLLFNBQVNycEQsRUFBR3JGLEdBQ3BCaEssS0FBS3dtRCxTQUFXbjNDLEVBQUdyUCxLQUFLZ3NFLE9BQVNoaUUsR0FHWSxTQUFTeXZELEdBQUdwcUQsR0FFekQsT0FBUUEsRUFBRTI4RCxPQUFTLElBQU0sS0FBTyxJQUFNMzhELEVBQUVtM0MsU0FBU3ZtRCxLQUFJLFNBQVVvUCxHQUMzRCxPQUFPNjBELEdBQUc3MEQsTUFDVmhQLEtBQUssS0FNVCxTQUFTaTdELEdBQUdqc0QsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFLLElBQUkwTyxFQUFJLEVBQUd6USxFQUFJLEVBQUdBLEVBQUkrTyxFQUFFbTNDLFNBQVM3bEQsT0FBUUwsSUFBSyxDQUMvQyxJQUFJNkIsRUFBSTZILEVBQUUxSixHQUFJaXdCLEVBQUlsaEIsRUFBRW0zQyxTQUFTbG1ELEdBQzdCLEdBQUl5USxFQUFJNU8sRUFBRThoRSxNQUFNbnpDLElBQU0sR0FBRXlSLEVBQUUsR0FBRWp0QixFQUFFaWIsRUFBRXM1QyxnQkFBaUJ4bkUsRUFBRStJLEtBQU9rOUQsR0FBRy8zQyxFQUFHbHVCLEVBQUU0aEUsTUFBTTloRSxFQUFFOGhFLFFBQzFFLFNBQTRCOWhFLEVBQUVnaUUsTUFBUXB6RCxJQUFNLEdBQUksSUFBTUEsRUFBRyxNQUU3RCxPQUFPMUIsRUFBRTI4RCxPQUFTajdELEdBQUssRUFBSUEsRUFBSSxFQUduQyxTQUFTb3FELEdBQUc5ckQsRUFBR3JGLEdBQ1gsR0FBSSxPQUFTcUYsRUFBRyxPQUFPLE9BQVNyRixFQUNoQyxHQUFJLE9BQVNBLEVBQUcsT0FBTyxFQUN2QixHQUFJcUYsRUFBRTI4RCxTQUFXaGlFLEVBQUVnaUUsUUFBVTM4RCxFQUFFbTNDLFNBQVM3bEQsU0FBV3FKLEVBQUV3OEMsU0FBUzdsRCxPQUFRLE9BQU8sRUFDN0UsSUFBSyxJQUFJMEIsRUFBSSxFQUFHQSxFQUFJZ04sRUFBRW0zQyxTQUFTN2xELE9BQVEwQixJQUFLLElBQUtpaUUsR0FBR2oxRCxFQUFFbTNDLFNBQVNua0QsR0FBSTJILEVBQUV3OEMsU0FBU25rRCxJQUFLLE9BQU8sRUFDMUYsT0FBTyxFQUtQLElBQUl5cEUsR0FBSyxTQUFTejhELEVBQUdyRixRQUNyQixJQUFXQSxJQUFNQSxFQUFJLE9BQVFoSyxLQUFLaWtFLE1BQVE1MEQsRUFBR3JQLEtBQUtta0UsSUFBTW42RCxHQUc1RCxTQUFTMGlFLEdBQUdyOUQsRUFBR3JGLEVBQUczSCxHQUNkLElBQUkwTyxFQUFJMUIsRUFBRTQwRCxNQUFNbnpDLElBQU0sR0FBRXlSLEVBQUV2NEIsRUFBRW9CLElBQUsvSSxFQUFFK0ksS0FBTyxTQUFTaUUsRUFBR3JGLEVBQUczSCxHQUNyRCxJQUFJME8sRUFBSS9HLEVBQUVpNkQsTUFBTTUwRCxHQUFJL08sRUFBSStCLEVBQUU0aEUsTUFBTTUwRCxHQUNoQyxPQUFPLE9BQVMwQixHQUFLLE9BQVN6USxFQUFJZ29FLEdBQUd2M0QsRUFBR3pRLEdBQUssS0FGUCxDQUd4QytPLEVBQUU0MEQsTUFBT2o2RCxFQUFHM0gsR0FDZCxPQUFRZ04sRUFBRTgwRCxLQUNSLElBQUssTUFDSCxPQUFPcHpELEVBRVQsSUFBSyxPQUNILE9BQVEsRUFBSUEsRUFFZCxRQUNFLE9BQU8sTUFJZixTQUFTc3pELEdBQUdoMUQsRUFBR3JGLEdBQ1gsT0FBT3FGLEVBQUU4MEQsTUFBUW42RCxFQUFFbTZELEtBQU85MEQsRUFBRTQwRCxNQUFNdEMsUUFBUTMzRCxFQUFFaTZELE9Ba0I1QyxJQUFJMEksR0FBSyxXQUNULElBQUl0OUQsRUFBSXJQLEtBQ1JBLEtBQUs0UixRQUFVLElBQUlyTixTQUFRLFNBQVV5RixFQUFHM0gsR0FDcENnTixFQUFFN0ssUUFBVXdGLEVBQUdxRixFQUFFNUssT0FBU3BDLE1BRS9CdXFFLEdBQW1CLFdBQ2xCLFNBQVN2OUQsRUFJVEEsRUFJQXJGLEVBTUEzSCxFQUlNME8sRUFLQXpRLFFBQ0YsSUFBVytCLElBQU1BLEVBQUksVUFBTSxJQUFXME8sSUFBTUEsRUFBSSxVQUFNLElBQVd6USxJQUFNQSxFQUFJLEtBQzNFTixLQUFLKzFELEdBQUsxbUQsRUFBR3JQLEtBQUt5QixHQUFLdUksRUFBR2hLLEtBQUs2VyxHQUFLeFUsRUFBR3JDLEtBQUtxMUQsR0FBS3RrRCxFQUFHL1EsS0FBSzgzRCxHQUFLeDNELEVBQUdOLEtBQUtxNUQsR0FBSyxFQUFHcjVELEtBQUtrNEQsR0FBSyxLQUV4Rmw0RCxLQUFLeTRELEdBQUtqbkQsS0FBS21LLE1BQU8zYixLQUFLa1YsUUFReEIsT0FBTzdGLEVBQUUvTSxVQUFVNFMsTUFBUSxXQUM5QmxWLEtBQUtxNUQsR0FBSyxHQU1kaHFELEVBQUUvTSxVQUFVMHpELEdBQUssV0FDYmgyRCxLQUFLcTVELEdBQUtyNUQsS0FBSzgzRCxJQU9uQnpvRCxFQUFFL00sVUFBVXMxRCxHQUFLLFNBQVN2b0QsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUVBQSxLQUFLaStCLFNBR2IsSUFBSTU3QixFQUFJZ1YsS0FBSzJ1QixNQUFNaG1DLEtBQUtxNUQsR0FBS3I1RCxLQUFLdzRELE1BQU96bkQsRUFBSXNHLEtBQUswVSxJQUFJLEVBQUd2YSxLQUFLbUssTUFBUTNiLEtBQUt5NEQsSUFBS240RCxFQUFJK1csS0FBSzBVLElBQUksRUFBRzFwQixFQUFJME8sR0FFNUZ6USxFQUFJLEdBQUssR0FBRSxxQkFBc0IsbUJBQXFCQSxFQUFJLG9CQUFzQk4sS0FBS3E1RCxHQUFLLDJCQUE2QmgzRCxFQUFJLHNCQUF3QjBPLEVBQUksWUFDL0ovUSxLQUFLazRELEdBQUtsNEQsS0FBSysxRCxHQUFHaUQsR0FBR2g1RCxLQUFLeUIsR0FBSW5CLEdBQUcsV0FDN0IsT0FBTzBKLEVBQUV5dUQsR0FBS2puRCxLQUFLbUssTUFBT3RNLE9BSTlCclAsS0FBS3E1RCxJQUFNcjVELEtBQUtxMUQsR0FBSXIxRCxLQUFLcTVELEdBQUtyNUQsS0FBSzZXLEtBQU83VyxLQUFLcTVELEdBQUtyNUQsS0FBSzZXLElBQUs3VyxLQUFLcTVELEdBQUtyNUQsS0FBSzgzRCxLQUFPOTNELEtBQUtxNUQsR0FBS3I1RCxLQUFLODNELEtBQ3BHem9ELEVBQUUvTSxVQUFVbXpELEdBQUssV0FDaEIsT0FBU3oxRCxLQUFLazRELEtBQU9sNEQsS0FBS2s0RCxHQUFHMEMsS0FBTTU2RCxLQUFLazRELEdBQUssT0FDOUM3b0QsRUFBRS9NLFVBQVUyN0IsT0FBUyxXQUNwQixPQUFTaitCLEtBQUtrNEQsS0FBT2w0RCxLQUFLazRELEdBQUdqNkIsU0FBVWorQixLQUFLazRELEdBQUssT0FFMEI3b0QsRUFBRS9NLFVBQVVrMkQsR0FBSyxXQUM1RixPQUFRbmhELEtBQUtJLFNBQVcsSUFBTXpYLEtBQUtxNUQsSUFDcENocUQsRUF6RWUsR0EwRWpCdzlELEdBQW1CLFdBQ3BCLFNBQVN4OUQsRUFBRUEsR0FDUCxJQUFJckYsRUFBSWhLLEtBR0FBLEtBQUsrM0QsR0FBSyxLQUFNLzNELEtBQUtvMkQsR0FBSyxLQUVsQ3AyRCxLQUFLMkUsWUFBUyxFQUFRM0UsS0FBSzZFLFdBQVEsRUFBUTdFLEtBQUt5M0QsSUFBSyxFQUdyRHozRCxLQUFLaTFELElBQUssRUFBSTVsRCxHQUFFLFNBQVVBLEdBQ3RCckYsRUFBRXl0RCxJQUFLLEVBQUl6dEQsRUFBRXJGLE9BQVMwSyxFQUFHckYsRUFBRSt0RCxJQUczQi90RCxFQUFFK3RELEdBQUcxb0QsTUFDTCxTQUFVQSxHQUNWckYsRUFBRXl0RCxJQUFLLEVBQUl6dEQsRUFBRW5GLE1BQVF3SyxFQUFHckYsRUFBRW9zRCxJQUFNcHNELEVBQUVvc0QsR0FBRy9tRCxNQUc3QyxPQUFPQSxFQUFFL00sVUFBVXdQLE1BQVEsU0FBU3pDLEdBQ2hDLE9BQU9yUCxLQUFLOEIsVUFBSyxFQUFRdU4sSUFDMUJBLEVBQUUvTSxVQUFVUixLQUFPLFNBQVNrSSxFQUFHM0gsR0FDOUIsSUFBSTBPLEVBQUkvUSxLQUNSLE9BQU9BLEtBQUtpMUQsSUFBTSxLQUFLajFELEtBQUtpMUQsSUFBSyxFQUFJajFELEtBQUt5M0QsR0FBS3ozRCxLQUFLNkUsTUFBUTdFLEtBQUtvNUQsR0FBRy8yRCxFQUFHckMsS0FBSzZFLE9BQVM3RSxLQUFLaTRELEdBQUdqdUQsRUFBR2hLLEtBQUsyRSxRQUFVLElBQUkwSyxHQUFFLFNBQVVBLEVBQUcvTyxHQUM5SHlRLEVBQUVnbkQsR0FBSyxTQUFTMTFELEdBQ1owTyxFQUFFa25ELEdBQUdqdUQsRUFBRzNILEdBQUdQLEtBQUt1TixFQUFHL08sSUFDcEJ5USxFQUFFcWxELEdBQUssU0FBU3BzRCxHQUNmK0csRUFBRXFvRCxHQUFHLzJELEVBQUcySCxHQUFHbEksS0FBS3VOLEVBQUcvTyxRQUc1QitPLEVBQUUvTSxVQUFVMDFELEdBQUssV0FDaEIsSUFBSTNvRCxFQUFJclAsS0FDUixPQUFPLElBQUl1RSxTQUFRLFNBQVV5RixFQUFHM0gsR0FDNUJnTixFQUFFdk4sS0FBS2tJLEVBQUczSCxPQUVmZ04sRUFBRS9NLFVBQVV5MkQsR0FBSyxTQUFTL3VELEdBQ3pCLElBQ0ksSUFBSTNILEVBQUkySCxJQUNSLE9BQU8zSCxhQUFhZ04sRUFBSWhOLEVBQUlnTixFQUFFN0ssUUFBUW5DLEdBQ3hDLE1BQU8ySCxHQUNMLE9BQU9xRixFQUFFNUssT0FBT3VGLEtBRXJCcUYsRUFBRS9NLFVBQVUyMUQsR0FBSyxTQUFTanVELEVBQUczSCxHQUM1QixPQUFPMkgsRUFBSWhLLEtBQUsrNEQsSUFBRyxXQUNmLE9BQU8vdUQsRUFBRTNILE1BQ1BnTixFQUFFN0ssUUFBUW5DLElBQ2pCZ04sRUFBRS9NLFVBQVU4MkQsR0FBSyxTQUFTcHZELEVBQUczSCxHQUM1QixPQUFPMkgsRUFBSWhLLEtBQUsrNEQsSUFBRyxXQUNmLE9BQU8vdUQsRUFBRTNILE1BQ1BnTixFQUFFNUssT0FBT3BDLElBQ2hCZ04sRUFBRTdLLFFBQVUsU0FBU3dGLEdBQ3BCLE9BQU8sSUFBSXFGLEdBQUUsU0FBVUEsRUFBR2hOLEdBQ3RCZ04sRUFBRXJGLE9BRVBxRixFQUFFNUssT0FBUyxTQUFTdUYsR0FDbkIsT0FBTyxJQUFJcUYsR0FBRSxTQUFVQSxFQUFHaE4sR0FDdEJBLEVBQUUySCxPQUVQcUYsRUFBRXFvRCxHQUFLLFNBR1YxdEQsR0FDSSxPQUFPLElBQUlxRixHQUFFLFNBQVVBLEVBQUdoTixHQUN0QixJQUFJME8sRUFBSSxFQUFHelEsRUFBSSxFQUFHNkIsR0FBSSxFQUN0QjZILEVBQUVyRSxTQUFRLFNBQVVxRSxLQUNkK0csRUFBRy9HLEVBQUVsSSxNQUFLLGFBQ054QixFQUFHNkIsR0FBSzdCLElBQU15USxHQUFLMUIsT0FDckIsU0FBVUEsR0FDVixPQUFPaE4sRUFBRWdOLFNBRVpsTixHQUFJLEVBQUk3QixJQUFNeVEsR0FBSzFCLFFBU2hDQSxFQUFFOG9ELEdBQUssU0FBU251RCxHQUNaLElBQUssSUFBSTNILEVBQUlnTixFQUFFN0ssU0FBUSxHQUFLdU0sRUFBSSxTQUFTL0csR0FDckMzSCxFQUFJQSxFQUFFUCxNQUFLLFNBQVVPLEdBQ2pCLE9BQU9BLEVBQUlnTixFQUFFN0ssUUFBUW5DLEdBQUsySCxRQUUvQjFKLEVBQUksRUFBRzZCLEVBQUk2SCxFQUFHMUosRUFBSTZCLEVBQUV4QixPQUFRTCxJQUMzQnlRLEVBQUU1TyxFQUFFN0IsSUFFUixPQUFPK0IsR0FDUmdOLEVBQUUxSixRQUFVLFNBQVMwSixFQUFHckYsR0FDdkIsSUFBSTNILEVBQUlyQyxLQUFNK1EsRUFBSSxHQUNsQixPQUFPMUIsRUFBRTFKLFNBQVEsU0FBVTBKLEVBQUcvTyxHQUMxQnlRLEVBQUV0UixLQUFLdUssRUFBRXpILEtBQUtGLEVBQUdnTixFQUFHL08sT0FDbkJOLEtBQUswM0QsR0FBRzNtRCxJQUNkMUIsRUE3RmlCLEdBOEZuQnk5RCxHQUFtQixXQVVwQixTQUFTejlELEVBQUVyRixFQUFHM0gsRUFBRzBPLEdBQ2IvUSxLQUFLMEMsS0FBT3NILEVBQUdoSyxLQUFLK0ksUUFBVTFHLEVBQUdyQyxLQUFLd3NFLEdBQUt6N0QsRUFLM0MsT0FBUzFCLEVBQUV5cEQsR0FBRyxNQUFRLEdBQUUsZ01BRWMsT0FBT3pwRCxFQUFFMkssT0FBUyxTQUFTM0ssR0FDakUsT0FBTyxHQUFFLFdBQVkscUJBQXNCQSxHQUFJMDlELEdBQUduakUsT0FBT1gsVUFBVThKLGVBQWUxRCxJQUFJMm9ELE1BRWhCM29ELEVBQUV5bUQsR0FBSyxXQUM3RSxHQUFJLG9CQUFzQjdzRCxVQUFXLE9BQU8sRUFDNUMsR0FBSW9HLEVBQUVpc0QsS0FBTSxPQUFPLEVBUVgsSUFBSXR4RCxFQUFJLElBQUszSCxFQUFJZ04sRUFBRXlwRCxHQUFHOXVELEdBQUkrRyxFQUFJLEVBQUkxTyxHQUFLQSxFQUFJLEdBQUkvQixFQUFJK08sRUFBRXdwRCxHQUFHN3VELEdBQUk3SCxFQUFJLEVBQUk3QixHQUFLQSxFQUFJLElBUzdFLFFBQVMwSixFQUFFc1csUUFBUSxTQUFXLEdBQUt0VyxFQUFFc1csUUFBUSxZQUFjLEdBQUt0VyxFQUFFc1csUUFBUSxTQUFXLEdBQUt2UCxHQUFLNU8sSUFNM0drTixFQUFFaXNELEdBQUssV0FDSCxJQUFJanNELEVBQ0osTUFBTyxvQkFBc0I2QyxTQUFXLFNBQVcsUUFBVTdDLEVBQUk2QyxRQUFRODZELFdBQVEsSUFBVzM5RCxPQUFJLEVBQVNBLEVBQUVvckQsS0FFaERwckQsRUFBRWduRCxHQUFLLFNBQVNobkQsRUFBR3JGLEdBQzlFLE9BQU9xRixFQUFFeEksTUFBTW1ELElBSW5CcUYsRUFBRXlwRCxHQUFLLFNBQVN6cEQsR0FDWixJQUFJckYsRUFBSXFGLEVBQUV1UCxNQUFNLG1DQUFvQ3ZjLEVBQUkySCxFQUFJQSxFQUFFLEdBQUdtbUIsTUFBTSxLQUFLM3RCLE1BQU0sRUFBRyxHQUFHbkMsS0FBSyxLQUFPLEtBQ3BHLE9BQU9paEIsT0FBT2pmLElBSWxCZ04sRUFBRXdwRCxHQUFLLFNBQVN4cEQsR0FDWixJQUFJckYsRUFBSXFGLEVBQUV1UCxNQUFNLHFCQUFzQnZjLEVBQUkySCxFQUFJQSxFQUFFLEdBQUdtbUIsTUFBTSxLQUFLM3RCLE1BQU0sRUFBRyxHQUFHbkMsS0FBSyxLQUFPLEtBQ3RGLE9BQU9paEIsT0FBT2pmLElBS2xCZ04sRUFBRS9NLFVBQVVnMkQsR0FBSyxTQUFTanBELEdBQ3RCLE9BQU8sRUFBRXJQLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHK0csRUFBSS9RLEtBQ1gsT0FBTyxFQUFFQSxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BRLEtBQUtzSCxHQUFLLENBQUUsRUFBYyxJQUFPLEdBQUUsV0FBWSxvQkFBcUJ0SCxLQUFLMEMsTUFDaEZzSCxFQUFJaEssS0FBTSxDQUFFLEVBQWMsSUFBSXVFLFNBQVEsU0FBVXlGLEVBQUczSCxHQU0vQyxJQUFJL0IsRUFBSTJJLFVBQVU0SixLQUFLOUIsRUFBRXJPLEtBQU1xTyxFQUFFaEksU0FDakN6SSxFQUFFb0UsVUFBWSxTQUFTMkssR0FDbkIsSUFBSWhOLEVBQUlnTixFQUFFN0YsT0FBTzdFLE9BQ2pCcUYsRUFBRTNILElBQ0gvQixFQUFFMnNFLFVBQVksV0FDYjVxRSxFQUFFLElBQUkyTyxHQUFHM0IsRUFBRyxzSUFDYi9PLEVBQUVzRSxRQUFVLFNBQVNvRixHQUNwQixJQUFJK0csRUFBSS9HLEVBQUVSLE9BQU8zRSxNQUNqQixpQkFBbUJrTSxFQUFFck8sS0FBT0wsRUFBRSxJQUFJZ1AsR0FBRSxHQUFFa3hELG9CQUFxQix5VkFBMlZsZ0UsRUFBRSxJQUFJMk8sR0FBRzNCLEVBQUcwQixLQUNuYXpRLEVBQUU0SSxnQkFBa0IsU0FBU21HLEdBQzVCLEdBQUUsV0FBWSxhQUFlMEIsRUFBRXJPLEtBQU8sbUNBQW9DMk0sRUFBRTlILFlBQzVFLElBQUl5QyxFQUFJcUYsRUFBRTdGLE9BQU83RSxPQUNqQm9NLEVBQUV5N0QsR0FBR1UsZ0JBQWdCbGpFLEVBQUcxSixFQUFFa0gsWUFBYTZILEVBQUU5SCxXQUFZd0osRUFBRWhJLFNBQVNqSCxNQUFLLFdBQ2pFLEdBQUUsV0FBWSwrQkFBaUNpUCxFQUFFaEksUUFBVSxzQkFLekUsS0FBSyxFQUNIaUIsRUFBRTFDLEdBQUtqRixFQUFFZ08sT0FBUWhPLEVBQUUrTixNQUFRLEVBRTdCLEtBQUssRUFDSCxNQUFPLENBQUUsR0FBZ0JwUSxLQUFLazVELEtBQU9sNUQsS0FBS3NILEdBQUc2bEUsZ0JBQWtCLFNBQVM5OUQsR0FDcEUsT0FBTzBCLEVBQUVtb0QsR0FBRzdwRCxLQUNaclAsS0FBS3NILGFBSXRCK0gsRUFBRS9NLFVBQVVzMkQsR0FBSyxTQUFTdnBELEdBQ3pCclAsS0FBS2s1RCxHQUFLN3BELEVBQUdyUCxLQUFLc0gsS0FBT3RILEtBQUtzSCxHQUFHNmxFLGdCQUFrQixTQUFTbmpFLEdBQ3hELE9BQU9xRixFQUFFckYsTUFFZHFGLEVBQUUvTSxVQUFVOHFFLGVBQWlCLFNBQVMvOUQsRUFBRzBCLEVBQUd6USxFQUFHNkIsR0FDOUMsT0FBTyxFQUFFbkMsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUd1bUIsRUFBR2poQixFQUFHeEIsRUFBRzBILEVBQ2hCLE9BQU8sRUFBRXhWLE1BQU0sU0FBVXN3QixHQUNyQixPQUFRQSxFQUFFbGdCLE9BQ1IsS0FBSyxFQUNIcEcsRUFBSSxhQUFlK0csRUFBR3dmLEVBQUksRUFBR2poQixFQUFJLFdBQzdCLElBQUl5QixFQUFHekIsRUFBR2tHLEVBQUc4YSxFQUFHcmdCLEVBQ2hCLE9BQU8sRUFBRWpRLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssSUFDRG1nQixFQUFHbHVCLEVBQUUrTixNQUFRLEVBRWpCLEtBQUssRUFDSCxPQUFPL04sRUFBRWlPLEtBQUs3USxLQUFLLENBQUUsRUFBRyxFQUFHLENBQUUsSUFBTSxDQUFFLEVBQWNxTyxFQUFFd3FELEdBQUdqcEQsSUFFMUQsS0FBSyxFQUlILE9BQU92QixFQUFFeEcsR0FBS2pGLEVBQUVnTyxPQUFRVSxFQUFJczhELEdBQUd4NkQsS0FBSy9FLEVBQUV4RyxHQUFJK0gsRUFBR3JGLEVBQUksV0FBYSxZQUFhMUosR0FBSWdQLEVBQUluTixFQUFFNE8sR0FBR2UsT0FBTSxTQUFVekMsR0FFcEcsT0FBTzBCLEVBQUV1YixNQUFNamQsR0FBSXc5RCxHQUFHcG9FLE9BQU80SyxNQUM3QjJvRCxLQUFNeGlELEVBQUksR0FBSWxHLEVBQUV3QyxPQUFNLGVBQWtCLENBQUUsRUFBY2YsRUFBRXdvRCxJQUVoRSxLQUFLLEVBQ0gsTUFBTyxDQUFFLEdBQWdCL2pELEVBQUV4VCxPQUkzQkssRUFBRWdPLE9BQVFmLEdBQUlrRyxJQUVoQixLQUFLLEVBQ0gsT0FBTzhhLEVBQUlqdUIsRUFBRWdPLE9BQVFKLEVBQUksa0JBQW9CcWdCLEVBQUU1dEIsTUFBUTZ0QixFQUFJLEVBQUcsR0FBRSxXQUFZLGlDQUFrQ0QsRUFBRXJkLFFBQVMsWUFBYWhELEdBQ3RJbkMsRUFBRWdGLFFBQVM3QyxFQUFJLENBQUUsRUFBYyxHQUFNLENBQUUsRUFBZSxDQUNsRGpPLE1BQU91QyxRQUFRRSxPQUFPNnJCLEtBRzVCLEtBQUssRUFDSCxNQUFPLENBQUUsUUFHbEJ4aUIsRUFBSTlOLEtBQU1zd0IsRUFBRWxnQixNQUFRLEVBRXpCLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBZWQsS0FFMUIsS0FBSyxFQUNILEdBQUksaUJBQW9Ca0csRUFBSThhLEVBQUVqZ0IsUUFBUyxNQUFPLENBQUUsRUFBZW1GLEVBQUV4VCxPQUNqRXN1QixFQUFFbGdCLE1BQVEsRUFFWixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMsR0FFekIsS0FBSyxFQUNILE1BQU8sQ0FBRSxXQUl0QmYsRUFBRS9NLFVBQVV3USxNQUFRLFdBQ25COVMsS0FBS3NILElBQU10SCxLQUFLc0gsR0FBR3dMLFFBQVM5UyxLQUFLc0gsUUFBSyxHQUN2QytILEVBOUtpQixHQStLbkJpK0QsR0FBbUIsV0FDcEIsU0FBU2orRCxFQUFFQSxHQUNQclAsS0FBSzQxRCxHQUFLdm1ELEVBQUdyUCxLQUFLbzRELElBQUssRUFBSXA0RCxLQUFLNjNELEdBQUssS0FFekMsT0FBT3QyRCxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDNUN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtvNEQsSUFFaEJwcUQsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxLQUFNLENBQ3pDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLNjNELElBRWhCN3BELFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsU0FBVSxDQUM3Q3lELElBQUssU0FBU3NKLEdBQ1ZyUCxLQUFLNDFELEdBQUt2bUQsR0FFZHJCLFlBQVksRUFDWmlPLGNBQWMsSUFLbEI1TSxFQUFFL00sVUFBVVAsS0FBTyxXQUNmL0IsS0FBS280RCxJQUFLLEdBTWQvb0QsRUFBRS9NLFVBQVVvMkQsR0FBSyxTQUFTcnBELEdBQ3RCclAsS0FBSzYzRCxHQUFLeG9ELEdBT2RBLEVBQUUvTSxVQUFVMFgsT0FBUyxXQUNqQixPQUFPK3lELEdBQUcvc0UsS0FBSzQxRCxHQUFHNTdDLFdBQ25CM0ssRUEzQ2lCLEdBNENuQjJCLEdBQW1CLFNBQVNoSCxHQUM3QixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsS0FBTSxHQUFFMmlFLFlBQWEsMEJBQTRCdHpELEVBQUksYUFBZWhOLElBQU1yQyxNQUFNMEMsS0FBTyw0QkFDMUdxTyxFQUVKLE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJM0gsRUFOSSxDQU90QmdQLElBMkIyRCxTQUFTazhELEdBQUdsK0QsR0FHckUsTUFBTyw4QkFBZ0NBLEVBQUUzTSxLQU16QyxJQUFJMnFFLEdBQW1CLFdBQ3ZCLFNBQVNoK0QsRUFBRUEsRUFBR3JGLEdBQ1YsSUFBSTNILEVBQUlyQyxLQUNSQSxLQUFLd3RFLE9BQVNuK0QsRUFBR3JQLEtBQUt3SCxZQUFjd0MsRUFBR2hLLEtBQUt5dEUsU0FBVSxFQUl0RHp0RSxLQUFLMDVELEdBQUssSUFBSWlULEdBQUkzc0UsS0FBS3dILFlBQVlMLFdBQWEsV0FDNUM5RSxFQUFFcTNELEdBQUdsMUQsV0FDTnhFLEtBQUt3SCxZQUFZSixRQUFVLFdBQzFCNEMsRUFBRW5GLE1BQVF4QyxFQUFFcTNELEdBQUdqMUQsT0FBTyxJQUFJdU0sR0FBRzNCLEVBQUdyRixFQUFFbkYsUUFBVXhDLEVBQUVxM0QsR0FBR2wxRCxXQUNsRHhFLEtBQUt3SCxZQUFZNUMsUUFBVSxTQUFTb0YsR0FDbkMsSUFBSStHLEVBQUkyOEQsR0FBRzFqRSxFQUFFUixPQUFPM0UsT0FDcEJ4QyxFQUFFcTNELEdBQUdqMUQsT0FBTyxJQUFJdU0sR0FBRzNCLEVBQUcwQixLQUc5QixPQUFPMUIsRUFBRXdELEtBQU8sU0FBUzdJLEVBQUczSCxFQUFHME8sRUFBR3pRLEdBQzlCLElBQ0ksT0FBTyxJQUFJK08sRUFBRWhOLEVBQUcySCxFQUFFeEMsWUFBWWxILEVBQUd5USxJQUNuQyxNQUFPL0csR0FDTCxNQUFNLElBQUlnSCxHQUFHM08sRUFBRzJILEtBRXJCekksT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxLQUFNLENBQ3hDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLMDVELEdBQUc5bkQsU0FFbkI1RCxZQUFZLEVBQ1ppTyxjQUFjLElBQ2Q1TSxFQUFFL00sVUFBVWdxQixNQUFRLFNBQVNqZCxHQUM3QkEsR0FBS3JQLEtBQUswNUQsR0FBR2oxRCxPQUFPNEssR0FBSXJQLEtBQUt5dEUsVUFBWSxHQUFFLFdBQVksd0JBQXlCcCtELEVBQUlBLEVBQUU0RCxRQUFVLDBCQUNoR2pULEtBQUt5dEUsU0FBVSxFQUFJenRFLEtBQUt3SCxZQUFZOGtCLFVBV3hDamQsRUFBRS9NLFVBQVV1RSxNQUFRLFNBQVN3SSxHQUN6QixJQUFJckYsRUFBSWhLLEtBQUt3SCxZQUFZUSxZQUFZcUgsR0FDckMsT0FBTyxJQUFJcytELEdBQUczakUsSUFDZnFGLEVBNUNvQixHQTZDdEJzK0QsR0FBbUIsV0FDcEIsU0FBU3QrRCxFQUFFQSxHQUNQclAsS0FBSzZHLE1BQVF3SSxFQUVqQixPQUFPQSxFQUFFL00sVUFBVXFqQixJQUFNLFNBQVN0VyxFQUFHckYsR0FDakMsSUFBSTNILEVBQ0osWUFBTyxJQUFXMkgsR0FBSyxHQUFFLFdBQVksTUFBT2hLLEtBQUs2RyxNQUFNbkUsS0FBTTJNLEVBQUdyRixHQUFJM0gsRUFBSXJDLEtBQUs2RyxNQUFNOGUsSUFBSTNiLEVBQUdxRixLQUFPLEdBQUUsV0FBWSxNQUFPclAsS0FBSzZHLE1BQU1uRSxLQUFNLGFBQWMyTSxHQUNySmhOLEVBQUlyQyxLQUFLNkcsTUFBTThlLElBQUl0VyxJQUFLMDlELEdBQUcxcUUsSUFTL0JnTixFQUFFL00sVUFBVTBtQixJQUFNLFNBQVMzWixHQUN2QixPQUFPLEdBQUUsV0FBWSxNQUFPclAsS0FBSzZHLE1BQU1uRSxLQUFNMk0sRUFBR0EsR0FBSTA5RCxHQUFHL3NFLEtBQUs2RyxNQUFNbWlCLElBQUkzWixLQVMxRUEsRUFBRS9NLFVBQVV3RCxJQUFNLFNBQVN1SixHQUN2QixJQUFJckYsRUFBSWhLLEtBR0EsT0FBTytzRSxHQUFHL3NFLEtBQUs2RyxNQUFNZixJQUFJdUosSUFBSXZOLE1BQUssU0FBVU8sR0FFaEQsWUFBTyxJQUFXQSxJQUFNQSxFQUFJLE1BQU8sR0FBRSxXQUFZLE1BQU8ySCxFQUFFbkQsTUFBTW5FLEtBQU0yTSxFQUFHaE4sR0FBSUEsTUFFbEZnTixFQUFFL00sVUFBVTBYLE9BQVMsU0FBUzNLLEdBQzdCLE9BQU8sR0FBRSxXQUFZLFNBQVVyUCxLQUFLNkcsTUFBTW5FLEtBQU0yTSxHQUFJMDlELEdBQUcvc0UsS0FBSzZHLE1BQU1tVCxPQUFPM0ssS0FRN0VBLEVBQUUvTSxVQUFVbUcsTUFBUSxXQUNoQixPQUFPLEdBQUUsV0FBWSxRQUFTekksS0FBSzZHLE1BQU1uRSxNQUFPcXFFLEdBQUcvc0UsS0FBSzZHLE1BQU00QixVQUMvRDRHLEVBQUUvTSxVQUFVbTNELEdBQUssU0FBU3BxRCxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUFLeUcsT0FBT3pHLEtBQUs4RCxRQUFRdUwsRUFBR3JGLElBQUsrRyxFQUFJLEdBQzdDLE9BQU8vUSxLQUFLbTdELEdBQUc5NEQsR0FBRyxTQUFVZ04sRUFBR3JGLEdBQzNCK0csRUFBRXRSLEtBQUt1SyxNQUNQbEksTUFBSyxXQUNMLE9BQU9pUCxNQUVaMUIsRUFBRS9NLFVBQVVzckUsR0FBSyxTQUFTditELEVBQUdyRixHQUM1QixHQUFFLFdBQVksYUFBY2hLLEtBQUs2RyxNQUFNbkUsTUFDdkMsSUFBSUwsRUFBSXJDLEtBQUs4RCxRQUFRdUwsRUFBR3JGLEdBQ3hCM0gsRUFBRXdyRSxJQUFLLEVBQ1AsSUFBSTk4RCxFQUFJL1EsS0FBS3lHLE9BQU9wRSxHQUNwQixPQUFPckMsS0FBS203RCxHQUFHcHFELEdBQUcsU0FBVTFCLEVBQUdyRixFQUFHM0gsR0FDOUIsT0FBT0EsRUFBRTJYLGFBRWQzSyxFQUFFL00sVUFBVXdyRSxHQUFLLFNBQVN6K0QsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUNKMkgsRUFBSTNILEVBQUlnTixHQUFLaE4sRUFBSSxHQUFJMkgsRUFBSXFGLEdBQ3pCLElBQUkwQixFQUFJL1EsS0FBS3lHLE9BQU9wRSxHQUNwQixPQUFPckMsS0FBS203RCxHQUFHcHFELEVBQUcvRyxJQVV0QnFGLEVBQUUvTSxVQUFVeXJFLEdBQUssU0FBUzErRCxHQUN0QixJQUFJckYsRUFBSWhLLEtBQUt5RyxPQUFPLElBQ3BCLE9BQU8sSUFBSW9tRSxJQUFHLFNBQVV4cUUsRUFBRzBPLEdBQ3ZCL0csRUFBRXBGLFFBQVUsU0FBU3lLLEdBQ2pCLElBQUlyRixFQUFJMGpFLEdBQUdyK0QsRUFBRTdGLE9BQU8zRSxPQUNwQmtNLEVBQUUvRyxJQUNIQSxFQUFFdEYsVUFBWSxTQUFTc0YsR0FDdEIsSUFBSStHLEVBQUkvRyxFQUFFUixPQUFPN0UsT0FDakJvTSxFQUFJMUIsRUFBRTBCLEVBQUVpOUQsV0FBWWo5RCxFQUFFL08sT0FBT0YsTUFBSyxTQUFVdU4sR0FDeENBLEVBQUkwQixFQUFFbEksV0FBYXhHLE9BQ2pCQSxTQUdmZ04sRUFBRS9NLFVBQVU2NEQsR0FBSyxTQUFTOXJELEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSSxHQUNSLE9BQU8sSUFBSXdxRSxJQUFHLFNBQVU5N0QsRUFBR3pRLEdBQ3ZCK08sRUFBRXpLLFFBQVUsU0FBU3lLLEdBQ2pCL08sRUFBRStPLEVBQUU3RixPQUFPM0UsUUFDWndLLEVBQUUzSyxVQUFZLFNBQVMySyxHQUN0QixJQUFJL08sRUFBSStPLEVBQUU3RixPQUFPN0UsT0FDakIsR0FBSXJFLEVBQUcsQ0FDSCxJQUFJNkIsRUFBSSxJQUFJbXJFLEdBQUdodEUsR0FBSWl3QixFQUFJdm1CLEVBQUUxSixFQUFFMHRFLFdBQVkxdEUsRUFBRTBCLE1BQU9HLEdBQ2hELEdBQUlvdUIsYUFBYXM4QyxHQUFJLENBQ2pCLElBQUl2OUQsRUFBSWloQixFQUFFemUsT0FBTSxTQUFVekMsR0FDdEIsT0FBT2xOLEVBQUVKLE9BQVE4cUUsR0FBR3BvRSxPQUFPNEssTUFFL0JoTixFQUFFNUMsS0FBSzZQLEdBRVhuTixFQUFFczFELEdBQUsxbUQsSUFBTSxPQUFTNU8sRUFBRW8yRCxHQUFLajRELEVBQUV1SSxXQUFhdkksRUFBRXVJLFNBQVMxRyxFQUFFbzJELFNBQ3REeG5ELFFBRVhqUCxNQUFLLFdBQ0wsT0FBTytxRSxHQUFHblYsR0FBR3IxRCxPQUVsQmdOLEVBQUUvTSxVQUFVd0IsUUFBVSxTQUFTdUwsRUFBR3JGLEdBQ2pDLElBQUkzSCxPQUFJLEVBQ1IsWUFBTyxJQUFXZ04sSUFBTSxpQkFBbUJBLEVBQUloTixFQUFJZ04sRUFBSXJGLEVBQUlxRixHQUFJLENBQzNEOUksTUFBT2xFLEVBQ1A0ckUsTUFBT2prRSxJQUVacUYsRUFBRS9NLFVBQVVtRSxPQUFTLFNBQVM0SSxHQUM3QixJQUFJckYsRUFBSSxPQUNSLEdBQUlxRixFQUFFNitELFVBQVlsa0UsRUFBSSxRQUFTcUYsRUFBRTlJLE1BQU8sQ0FDcEMsSUFBSWxFLEVBQUlyQyxLQUFLNkcsTUFBTU4sTUFBTThJLEVBQUU5SSxPQUMzQixPQUFPOEksRUFBRXcrRCxHQUFLeHJFLEVBQUU4ckUsY0FBYzkrRCxFQUFFNCtELE1BQU9qa0UsR0FBSzNILEVBQUVpb0QsV0FBV2o3QyxFQUFFNCtELE1BQU9qa0UsR0FFdEUsT0FBT2hLLEtBQUs2RyxNQUFNeWpELFdBQVdqN0MsRUFBRTQrRCxNQUFPamtFLElBQ3ZDcUYsRUF6SGlCLEdBMEl4QixTQUFTMDlELEdBQUcxOUQsR0FDUixPQUFPLElBQUl3OUQsSUFBRyxTQUFVN2lFLEVBQUczSCxHQUN2QmdOLEVBQUUzSyxVQUFZLFNBQVMySyxHQUNuQixJQUFJaE4sRUFBSWdOLEVBQUU3RixPQUFPN0UsT0FDakJxRixFQUFFM0gsSUFDSGdOLEVBQUV6SyxRQUFVLFNBQVN5SyxHQUNwQixJQUFJckYsRUFBSTBqRSxHQUFHcitELEVBQUU3RixPQUFPM0UsT0FDcEJ4QyxFQUFFMkgsT0FNZCxJQUFJb2tFLElBQUssRUFFVCxTQUFTVixHQUFHcitELEdBQ1IsSUFBSXJGLEVBQUk4aUUsR0FBR2hVLEdBQUcsS0FDZCxHQUFJOXVELEdBQUssTUFBUUEsRUFBSSxHQUFJLENBQ3JCLElBQUkzSCxFQUFJLG1FQUNSLEdBQUlnTixFQUFFNEQsUUFBUXFOLFFBQVFqZSxJQUFNLEVBQUcsQ0FFM0IsSUFBSTBPLEVBQUksSUFBSU0sR0FBRSxXQUFZLDZDQUErQ2hQLEVBQUksK0lBQzdFLE9BQU8rckUsS0FBT0EsSUFBSyxFQUduQjNxRCxZQUFXLFdBQ1AsTUFBTTFTLElBQ04sSUFBS0EsR0FHakIsT0FBTzFCLEVBbUI2RCxTQUFTZy9ELEtBRzdFLE1BQU8sb0JBQXNCemtFLE9BQVNBLE9BQVMsS0FHdUIsU0FBUzBrRSxLQUcvRSxNQUFPLG9CQUFzQjVrRSxTQUFXQSxTQUFXLEtBNkJuRCxJQUFJNmtFLEdBQW1CLFdBQ3ZCLFNBQVNsL0QsRUFBRUEsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEdBQ25CTixLQUFLd3VFLEdBQUtuL0QsRUFBR3JQLEtBQUt5QixHQUFLdUksRUFBR2hLLEtBQUt5dUUsR0FBS3BzRSxFQUFHckMsS0FBSzBRLEdBQUtLLEVBQUcvUSxLQUFLMHVFLEdBQUtwdUUsRUFBR04sS0FBSzJ1RSxHQUFLLElBQUloQyxHQUMvRTNzRSxLQUFLb0YsS0FBT3BGLEtBQUsydUUsR0FBRy84RCxRQUFReE0sS0FBSzBILEtBQUs5TSxLQUFLMnVFLEdBQUcvOEQsU0FJOUM1UixLQUFLMnVFLEdBQUcvOEQsUUFBUUUsT0FBTSxTQUFVekMsT0FnQnBDLE9BQU9BLEVBQUV1L0QsR0FBSyxTQUFTNWtFLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixHQUMvQixJQUFJb3VCLEVBQUksSUFBSWxoQixFQUFFckYsRUFBRzNILEVBQUdtUCxLQUFLbUssTUFBUTVLLEVBQUd6USxFQUFHNkIsR0FDdkMsT0FBT291QixFQUFFczRCLE1BQU05M0MsR0FBSXdmLEdBTXZCbGhCLEVBQUUvTSxVQUFVdW1ELE1BQVEsU0FBU3g1QyxHQUN6QixJQUFJckYsRUFBSWhLLEtBQ1JBLEtBQUs2dUUsR0FBS3ByRCxZQUFXLFdBQ2pCLE9BQU96WixFQUFFbkksT0FDVHdOLElBTVJBLEVBQUUvTSxVQUFVczRELEdBQUssV0FDYixPQUFPNTZELEtBQUs2QixNQVNoQndOLEVBQUUvTSxVQUFVMjdCLE9BQVMsU0FBUzV1QixHQUMxQixPQUFTclAsS0FBSzZ1RSxLQUFPN3VFLEtBQUtrc0IsZUFBZ0Jsc0IsS0FBSzJ1RSxHQUFHbHFFLE9BQU8sSUFBSTRNLEdBQUUsR0FBRXl3RCxVQUFXLHVCQUF5Qnp5RCxFQUFJLEtBQU9BLEVBQUksUUFDckhBLEVBQUUvTSxVQUFVVCxHQUFLLFdBQ2hCLElBQUl3TixFQUFJclAsS0FDUkEsS0FBS3d1RSxHQUFHTSxJQUFHLFdBQ1AsT0FBTyxPQUFTei9ELEVBQUV3L0QsSUFBTXgvRCxFQUFFNmMsZUFBZ0I3YyxFQUFFcUIsS0FBS3RMLE1BQUssU0FBVTRFLEdBQzVELE9BQU9xRixFQUFFcy9ELEdBQUducUUsUUFBUXdGLE9BQ2pCekYsUUFBUUMsY0FFcEI2SyxFQUFFL00sVUFBVTRwQixhQUFlLFdBQzFCLE9BQVNsc0IsS0FBSzZ1RSxLQUFPN3VFLEtBQUswdUUsR0FBRzF1RSxNQUFPa3NCLGFBQWFsc0IsS0FBSzZ1RSxJQUFLN3VFLEtBQUs2dUUsR0FBSyxPQUN0RXgvRCxFQTlEb0IsR0ErRHRCMC9ELEdBQW1CLFdBQ3BCLFNBQVMxL0QsSUFDTCxJQUFJQSxFQUFJclAsS0FFQUEsS0FBS2d2RSxHQUFLenFFLFFBQVFDLFVBRzFCeEUsS0FBS2l2RSxHQUFLLEdBR1ZqdkUsS0FBS2t2RSxJQUFLLEVBR1ZsdkUsS0FBS212RSxHQUFLLEdBRVZudkUsS0FBS292RSxHQUFLLEtBR1ZwdkUsS0FBS3F2RSxJQUFLLEVBRVZydkUsS0FBS3N2RSxHQUFLLEdBRVZ0dkUsS0FBS3V2RSxHQUFLLElBQUkzQyxHQUFHNXNFLEtBQU0scUJBSXZCQSxLQUFLd3ZFLEdBQUssV0FDTixJQUFJeGxFLEVBQUlza0UsS0FDUnRrRSxHQUFLLEdBQUUsYUFBYywrQkFBaUNBLEVBQUV1L0IsaUJBQWtCbDZCLEVBQUVrZ0UsR0FBRzlaLE1BRW5GLElBQUl6ckQsRUFBSXNrRSxLQUNSdGtFLEdBQUssbUJBQXFCQSxFQUFFaWlCLGtCQUFvQmppQixFQUFFaWlCLGlCQUFpQixtQkFBb0Jqc0IsS0FBS3d2RSxJQUVoRyxPQUFPanVFLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsS0FBTSxDQUc1Q3dELElBQUssV0FDRCxPQUFPOUYsS0FBS2t2RSxJQUVoQmxoRSxZQUFZLEVBQ1ppTyxjQUFjLElBTWxCNU0sRUFBRS9NLFVBQVV3c0UsR0FBSyxTQUFTei9ELEdBRXRCclAsS0FBS3l2RSxRQUFRcGdFLElBTWpCQSxFQUFFL00sVUFBVW90RSxHQUFLLFNBQVNyZ0UsR0FDdEJyUCxLQUFLMnZFLEtBRUwzdkUsS0FBSzR2RSxHQUFHdmdFLElBT1pBLEVBQUUvTSxVQUFVdXRFLEdBQUssV0FDYixJQUFLN3ZFLEtBQUtrdkUsR0FBSSxDQUNWbHZFLEtBQUtrdkUsSUFBSyxFQUNWLElBQUk3L0QsRUFBSWkvRCxLQUNSai9ELEdBQUssbUJBQXFCQSxFQUFFb3ZCLHFCQUF1QnB2QixFQUFFb3ZCLG9CQUFvQixtQkFBb0J6K0IsS0FBS3d2RSxNQU8xR25nRSxFQUFFL00sVUFBVW10RSxRQUFVLFNBQVNwZ0UsR0FDM0IsT0FBT3JQLEtBQUsydkUsS0FBTTN2RSxLQUFLa3ZFLEdBQUssSUFBSTNxRSxTQUFRLFNBQVU4SyxPQUFVclAsS0FBSzR2RSxHQUFHdmdFLElBVXhFQSxFQUFFL00sVUFBVXd0RSxHQUFLLFNBQVN6Z0UsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUNSQSxLQUFLOHVFLElBQUcsV0FDSixPQUFPOWtFLEVBQUVpbEUsR0FBR3h2RSxLQUFLNFAsR0FBSXJGLEVBQUUrbEUsU0FPL0IxZ0UsRUFBRS9NLFVBQVV5dEUsR0FBSyxXQUNiLE9BQU8sRUFBRS92RSxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJcVAsRUFBR3JGLEVBQUloSyxLQUNYLE9BQU8sRUFBRUEsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILEdBQUksSUFBTXBRLEtBQUtpdkUsR0FBR3R1RSxPQUFRLE1BQU8sQ0FBRSxFQUFjLEdBQ2pEMEIsRUFBRStOLE1BQVEsRUFFWixLQUFLLEVBQ0gsT0FBTy9OLEVBQUVpTyxLQUFLN1EsS0FBSyxDQUFFLEVBQUcsRUFBRyxDQUFFLElBQU0sQ0FBRSxFQUFjTyxLQUFLaXZFLEdBQUcsTUFFN0QsS0FBSyxFQUNILE9BQU81c0UsRUFBRWdPLE9BQVFyUSxLQUFLaXZFLEdBQUc3MkMsUUFBU3A0QixLQUFLdXZFLEdBQUdyNkQsUUFBUyxDQUFFLEVBQWMsR0FFckUsS0FBSyxFQUNILElBQUtxNEQsR0FBR2wrRCxFQUFJaE4sRUFBRWdPLFFBQVMsTUFBTWhCLEVBRVQsT0FBTyxHQUFFLGFBQWMsMENBQTRDQSxHQUN2RixDQUFFLEVBQWMsR0FFbEIsS0FBSyxFQUNIclAsS0FBS2l2RSxHQUFHdHVFLE9BQVMsR0FXakJYLEtBQUt1dkUsR0FBRzNYLElBQUcsV0FDUCxPQUFPNXRELEVBQUUrbEUsUUFDUjF0RSxFQUFFK04sTUFBUSxFQUVqQixLQUFLLEVBQ0gsTUFBTyxDQUFFLFdBSXRCZixFQUFFL00sVUFBVXN0RSxHQUFLLFNBQVN2Z0UsR0FDekIsSUFBSXJGLEVBQUloSyxLQUFNcUMsRUFBSXJDLEtBQUtndkUsR0FBRzVwRSxNQUFLLFdBQzNCLE9BQU80RSxFQUFFcWxFLElBQUssRUFBSWhnRSxJQUFJeUMsT0FBTSxTQUFVekMsR0FJbEMsTUFBTXJGLEVBQUVvbEUsR0FBSy8vRCxFQUFHckYsRUFBRXFsRSxJQUFLLEVBQUksR0FBRSw2QkFNN0IsU0FBU2hnRSxHQUNMLElBQUlyRixFQUFJcUYsRUFBRTRELFNBQVcsR0FDckIsT0FBTzVELEVBQUVxa0IsUUFBVTFwQixFQUFJcUYsRUFBRXFrQixNQUFNOVMsU0FBU3ZSLEVBQUU0RCxTQUFXNUQsRUFBRXFrQixNQUFRcmtCLEVBQUU0RCxRQUFVLEtBQU81RCxFQUFFcWtCLE9BQ3BGMXBCLEVBSEosQ0FJRXFGLElBQUtBLEtBQ1BqSyxNQUFLLFNBQVVpSyxHQUNmLE9BQU9yRixFQUFFcWxFLElBQUssRUFBSWhnRSxRQUcxQixPQUFPclAsS0FBS2d2RSxHQUFLM3NFLEVBQUdBLEdBT3hCZ04sRUFBRS9NLFVBQVUwMkQsR0FBSyxTQUFTM3BELEVBQUdyRixFQUFHM0gsR0FDNUIsSUFBSTBPLEVBQUkvUSxLQUNSQSxLQUFLMnZFLEtBRUwzdkUsS0FBS3N2RSxHQUFHaHZELFFBQVFqUixJQUFNLElBQU1yRixFQUFJLEdBQ2hDLElBQUkxSixFQUFJaXVFLEdBQUdLLEdBQUc1dUUsS0FBTXFQLEVBQUdyRixFQUFHM0gsR0FBRyxTQUFVZ04sR0FDbkMsT0FBTzBCLEVBQUVpL0QsR0FBRzNnRSxNQUVoQixPQUFPclAsS0FBS212RSxHQUFHMXZFLEtBQUthLEdBQUlBLEdBQ3pCK08sRUFBRS9NLFVBQVVxdEUsR0FBSyxXQUNoQjN2RSxLQUFLb3ZFLElBQU0sTUFRZi8vRCxFQUFFL00sVUFBVTJ0RSxHQUFLLGFBS2pCNWdFLEVBQUUvTSxVQUFVNHRFLEdBQUssV0FDYixPQUFPLEVBQUVsd0UsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSXFQLEVBQ0osT0FBTyxFQUFFclAsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjZixFQUFJclAsS0FBS2d2RSxJQUVsQyxLQUFLLEVBQ0hobEUsRUFBRXFHLE9BQVFyRyxFQUFFb0csTUFBUSxFQUV0QixLQUFLLEVBQ0gsR0FBSWYsSUFBTXJQLEtBQUtndkUsR0FBSSxNQUFPLENBQUUsRUFBYyxHQUMxQ2hsRSxFQUFFb0csTUFBUSxFQUVaLEtBQUssRUFDSCxNQUFPLENBQUUsV0FTekJmLEVBQUUvTSxVQUFVNnRFLEdBQUssU0FBUzlnRSxHQUN0QixJQUFLLElBQUlyRixFQUFJLEVBQUczSCxFQUFJckMsS0FBS212RSxHQUFJbmxFLEVBQUkzSCxFQUFFMUIsT0FBUXFKLElBQ3ZDLEdBQUkzSCxFQUFFMkgsR0FBR3ZJLEtBQU80TixFQUFHLE9BQU8sRUFFOUIsT0FBTyxHQVNYQSxFQUFFL00sVUFBVTh0RSxHQUFLLFNBQVMvZ0UsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUVBLE9BQU9BLEtBQUtrd0UsS0FBSzlxRSxNQUFLLFdBRTFCNEUsRUFBRW1sRSxHQUFHaG5DLE1BQUssU0FBVTk0QixFQUFHckYsR0FDbkIsT0FBT3FGLEVBQUVvL0QsR0FBS3prRSxFQUFFeWtFLE1BRXBCLElBQUssSUFBSXBzRSxFQUFJLEVBQUcwTyxFQUFJL0csRUFBRW1sRSxHQUFJOXNFLEVBQUkwTyxFQUFFcFEsT0FBUTBCLElBQUssQ0FDekMsSUFBSS9CLEVBQUl5USxFQUFFMU8sR0FDVixHQUFJL0IsRUFBRXM2RCxLQUFNLFFBQW9CdnJELEdBQUsvTyxFQUFFbUIsS0FBTzROLEVBQUcsTUFFckQsT0FBT3JGLEVBQUVrbUUsU0FNakI3Z0UsRUFBRS9NLFVBQVUrdEUsR0FBSyxTQUFTaGhFLEdBQ3RCclAsS0FBS3N2RSxHQUFHN3ZFLEtBQUs0UCxJQUV5Q0EsRUFBRS9NLFVBQVUwdEUsR0FBSyxTQUFTM2dFLEdBRWhGLElBQUlyRixFQUFJaEssS0FBS212RSxHQUFHN3VELFFBQVFqUixHQUN4QnJQLEtBQUttdkUsR0FBRzVoRSxPQUFPdkQsRUFBRyxJQUNuQnFGLEVBNVBpQixHQW1ReEIsU0FBU2loRSxHQUFHamhFLEVBQUdyRixHQUNYLEdBQUksR0FBRSxhQUFjQSxFQUFJLEtBQU9xRixHQUFJaytELEdBQUdsK0QsR0FBSSxPQUFPLElBQUlnQyxHQUFFLEdBQUVzeEQsWUFBYTM0RCxFQUFJLEtBQU9xRixHQUNqRixNQUFNQSxFQUdWLElBQUlraEUsR0FBSyxXQUNMdndFLEtBQUt3d0UsUUFBSyxFQUFReHdFLEtBQUtvc0IsVUFBWSxJQUNwQ3FrRCxHQUFLLFdBQ0p6d0UsS0FBSzB3RSxRQUFVLElBQUksSUFBRSxTQUFVcmhFLEdBQzNCLE9BQU95cEQsR0FBR3pwRCxLQUNWbXBELElBQUt4NEQsS0FBSzJ3RSxZQUFjLFVBQTBCM3dFLEtBQUs0d0UsR0FBSyxJQUFJN25ELEtBR3hFLFNBQVM4bkQsR0FBR3hoRSxFQUFHMEIsR0FDWCxPQUFPLEVBQUUvUSxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRzFKLEVBQUc2QixFQUFHb3VCLEVBQUdqaEIsRUFBR3hCLEVBQUcwSCxFQUN0QixPQUFPLEVBQUV4VixNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsR0FBSXBHLEVBQUksR0FBRXFGLEdBQUkvTyxFQUFJeVEsRUFBRXZJLE1BQU9yRyxHQUFJLEdBQUtvdUIsRUFBSXZtQixFQUFFMG1FLFFBQVE1cUUsSUFBSXhGLE1BQVE2QixHQUFJLEVBQUlvdUIsRUFBSSxJQUFJZ2dELEtBQzdFcHVFLEVBQUcsTUFBTyxDQUFFLEVBQWMsR0FDM0JFLEVBQUUrTixNQUFRLEVBRVosS0FBSyxFQUNILE9BQU8vTixFQUFFaU8sS0FBSzdRLEtBQUssQ0FBRSxFQUFHLEVBQUcsQ0FBRSxJQUFNNlAsRUFBSWloQixFQUFHLENBQUUsRUFBY3ZtQixFQUFFOG1FLEdBQUd4d0UsSUFFakUsS0FBSyxFQUNILE9BQU9nUCxFQUFFa2hFLEdBQUtudUUsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjLEdBRTFDLEtBQUssRUFDSCxPQUFPdkMsRUFBSXpMLEVBQUVnTyxPQUFRbUYsRUFBSTg2RCxHQUFHeGlFLEVBQUcsNEJBQThCd3FELEdBQUd2bkQsRUFBRXZJLE9BQVMsWUFDM0UsQ0FBRSxPQUFvQnVJLEVBQUVnZ0UsUUFBUXY3RCxJQUVsQyxLQUFLLEVBQ0gsT0FBT3hMLEVBQUUwbUUsUUFBUTNxRSxJQUFJekYsRUFBR2l3QixHQUFJQSxFQUFFbkUsVUFBVTNzQixLQUFLc1IsR0FFN0NBLEVBQUVpZ0UsR0FBR2huRSxFQUFFMm1FLGFBQWNwZ0QsRUFBRWlnRCxJQUFNei9ELEVBQUVrZ0UsR0FBRzFnRCxFQUFFaWdELEtBQU9VLEdBQUdsbkUsR0FBSSxDQUFFLFVBTXBFLFNBQVNtbkUsR0FBRzloRSxFQUFHMEIsR0FDWCxPQUFPLEVBQUUvUSxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRzFKLEVBQUc2QixFQUFHb3VCLEVBQUdqaEIsRUFDaEIsT0FBTyxFQUFFdFAsTUFBTSxTQUFVcUMsR0FDckIsT0FBTzJILEVBQUksR0FBRXFGLEdBQUkvTyxFQUFJeVEsRUFBRXZJLE1BQU9yRyxHQUFJLEdBQUtvdUIsRUFBSXZtQixFQUFFMG1FLFFBQVE1cUUsSUFBSXhGLE1BQVFnUCxFQUFJaWhCLEVBQUVuRSxVQUFVOUwsUUFBUXZQLEtBQU8sSUFBTXdmLEVBQUVuRSxVQUFVN2UsT0FBTytCLEVBQUcsR0FDNUhuTixFQUFJLElBQU1vdUIsRUFBRW5FLFVBQVV6ckIsUUFBU3dCLEVBQUksQ0FBRSxHQUFnQjZILEVBQUUwbUUsUUFBUTEyRCxPQUFPMVosR0FBSTBKLEVBQUVvbkUsR0FBRzl3RSxLQUFRLENBQUUsU0FLckcsU0FBUyt3RSxHQUFHaGlFLEVBQUdyRixHQUNYLElBQUssSUFBSTNILEVBQUksR0FBRWdOLEdBQUkwQixHQUFJLEVBQUl6USxFQUFJLEVBQUc2QixFQUFJNkgsRUFBRzFKLEVBQUk2QixFQUFFeEIsT0FBUUwsSUFBSyxDQUN4RCxJQUFJaXdCLEVBQUlwdUIsRUFBRTdCLEdBQUlnUCxFQUFJaWhCLEVBQUUvbkIsTUFBT3NGLEVBQUl6TCxFQUFFcXVFLFFBQVE1cUUsSUFBSXdKLEdBQzdDLEdBQUl4QixFQUFHLENBQ0gsSUFBSyxJQUFJMEgsRUFBSSxFQUFHOGEsRUFBSXhpQixFQUFFc2UsVUFBVzVXLEVBQUk4YSxFQUFFM3ZCLE9BQVE2VSxJQUMzQzhhLEVBQUU5YSxHQUFHeTdELEdBQUcxZ0QsS0FBT3hmLEdBQUksR0FFdkJqRCxFQUFFMGlFLEdBQUtqZ0QsR0FHZnhmLEdBQUttZ0UsR0FBRzd1RSxHQUdaLFNBQVNpdkUsR0FBR2ppRSxFQUFHckYsRUFBRzNILEdBQ2QsSUFBSTBPLEVBQUksR0FBRTFCLEdBQUkvTyxFQUFJeVEsRUFBRTIvRCxRQUFRNXFFLElBQUlrRSxHQUNoQyxHQUFJMUosRUFBRyxJQUFLLElBQUk2QixFQUFJLEVBQUdvdUIsRUFBSWp3QixFQUFFOHJCLFVBQVdqcUIsRUFBSW91QixFQUFFNXZCLE9BQVF3QixJQUNsRG91QixFQUFFcHVCLEdBQUc0dUUsUUFBUTF1RSxHQUliME8sRUFBRTIvRCxRQUFRMTJELE9BQU9oUSxHQUl6QixTQUFTa25FLEdBQUc3aEUsR0FDUkEsRUFBRXVoRSxHQUFHanJFLFNBQVEsU0FBVTBKLEdBQ25CQSxFQUFFdk4sVUFTTixJQUFJeXZFLEdBQW1CLFdBQ3ZCLFNBQVNsaUUsRUFBRUEsRUFBR3JGLEVBQUczSCxHQUNickMsS0FBS3dJLE1BQVE2RyxFQUFHclAsS0FBS3d4RSxHQUFLeG5FLEVBSzFCaEssS0FBS3l4RSxJQUFLLEVBQUl6eEUsS0FBSzB4RSxHQUFLLEtBQU0xeEUsS0FBSzJ3RSxZQUFjLFVBQTBCM3dFLEtBQUs4RCxRQUFVekIsR0FBSyxHQVFuRyxPQUFPZ04sRUFBRS9NLFVBQVUydUUsR0FBSyxTQUFTNWhFLEdBQzdCLElBQUtyUCxLQUFLOEQsUUFBUTZ0RSx1QkFBd0IsQ0FDdEMsSUFFQSxJQUFJM25FLEVBQUksR0FBSTNILEVBQUksRUFBRzBPLEVBQUkxQixFQUFFNDRELFdBQVk1bEUsRUFBSTBPLEVBQUVwUSxPQUFRMEIsSUFBSyxDQUNwRCxJQUFJL0IsRUFBSXlRLEVBQUUxTyxHQUNWLElBQXFCL0IsRUFBRXVYLE1BQVE3TixFQUFFdkssS0FBS2EsR0FFMUMrTyxFQUFJLElBQUkrMkQsR0FBRy8yRCxFQUFFN0csTUFBTzZHLEVBQUUwNEQsS0FBTTE0RCxFQUFFMjRELEdBQUloK0QsRUFBR3FGLEVBQUU2MEQsR0FBSTcwRCxFQUFFNjRELFVBQVc3NEQsRUFBRTg0RCxJQUMzQixHQUVuQyxJQUFJaG1FLEdBQUksRUFDUixPQUFPbkMsS0FBS3l4RSxHQUFLenhFLEtBQUs0eEUsR0FBR3ZpRSxLQUFPclAsS0FBS3d4RSxHQUFHMXZFLEtBQUt1TixHQUFJbE4sR0FBSSxHQUFNbkMsS0FBSzZ4RSxHQUFHeGlFLEVBQUdyUCxLQUFLMndFLGVBQWlCM3dFLEtBQUs4eEUsR0FBR3ppRSxHQUNwR2xOLEdBQUksR0FBS25DLEtBQUsweEUsR0FBS3JpRSxFQUFHbE4sR0FDdkJrTixFQUFFL00sVUFBVXl1RSxRQUFVLFNBQVMxaEUsR0FDOUJyUCxLQUFLd3hFLEdBQUczc0UsTUFBTXdLLElBRTRCQSxFQUFFL00sVUFBVTB1RSxHQUFLLFNBQVMzaEUsR0FDcEVyUCxLQUFLMndFLFlBQWN0aEUsRUFDbkIsSUFBSXJGLEdBQUksRUFDUixPQUFPaEssS0FBSzB4RSxLQUFPMXhFLEtBQUt5eEUsSUFBTXp4RSxLQUFLNnhFLEdBQUc3eEUsS0FBSzB4RSxHQUFJcmlFLEtBQU9yUCxLQUFLOHhFLEdBQUc5eEUsS0FBSzB4RSxJQUFLMW5FLEdBQUksR0FDNUVBLEdBQ0RxRixFQUFFL00sVUFBVXV2RSxHQUFLLFNBQVN4aUUsRUFBR3JGLEdBRTVCLElBQUtxRixFQUFFNjRELFVBQVcsT0FBTyxFQUdqQixJQUFJN2xFLEVBQUksWUFBNEIySCxFQUdwQyxRQUFTaEssS0FBSzhELFFBQVFpdUUsSUFBTTF2RSxHQUFLZ04sRUFBRTA0RCxLQUFLemYsS0FBTyxZQUE0QnQrQyxJQUVoRnFGLEVBQUUvTSxVQUFVc3ZFLEdBQUssU0FBU3ZpRSxHQUs3QixHQUFJQSxFQUFFNDRELFdBQVd0bkUsT0FBUyxFQUFHLE9BQU8sRUFDcEMsSUFBSXFKLEVBQUloSyxLQUFLMHhFLElBQU0xeEUsS0FBSzB4RSxHQUFHTSxtQkFBcUIzaUUsRUFBRTJpRSxpQkFDbEQsU0FBVTNpRSxFQUFFODRELEtBQU9uK0QsS0FBTSxJQUFPaEssS0FBSzhELFFBQVE2dEUsd0JBSTFDdGlFLEVBQUUvTSxVQUFVd3ZFLEdBQUssU0FBU3ppRSxHQUM3QkEsRUFBSSsyRCxHQUFHaUMsR0FBR2g1RCxFQUFFN0csTUFBTzZHLEVBQUUwNEQsS0FBTTE0RCxFQUFFNjBELEdBQUk3MEQsRUFBRTY0RCxXQUFZbG9FLEtBQUt5eEUsSUFBSyxFQUFJenhFLEtBQUt3eEUsR0FBRzF2RSxLQUFLdU4sSUFDM0VBLEVBNURvQixHQTZEdEI0aUUsR0FBbUIsV0FDcEIsU0FBUzVpRSxFQUFFQSxHQUNQclAsS0FBSzZxQyxJQUFNeDdCLEVBRWYsT0FBT0EsRUFBRS9NLFVBQVU0dkUsR0FBSyxXQUNwQixPQUFPLE1BQVFseUUsS0FBSzZxQyxLQU14Qng3QixFQUFFL00sVUFBVTZ2RSxHQUFLLFdBQ2IsT0FBT255RSxLQUFLa3lFLEtBQU8sT0FBU2x5RSxLQUFLNnFDLElBQU0sa0JBQ3hDeDdCLEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUM5QixPQUFPQSxFQUFFdzdCLE1BQVE3cUMsS0FBSzZxQyxLQUN2Qng3QixFQWZpQixHQXNDTzRpRSxHQUFHNVAsZ0JBQWtCLElBQUk0UCxHQUFHLE1BRzNEQSxHQUFHRyxHQUFLLElBQUlILEdBQUcsMEJBQTJCQSxHQUFHSSxHQUFLLElBQUlKLEdBQUcsbUJBa0J6RCxJQUFJSyxHQUFLLFNBQVNqakUsRUFBR3JGLEdBQ2pCaEssS0FBSzJ3RCxLQUFPM21ELEVBQUdoSyxLQUFLNlgsS0FBTyxRQUFTN1gsS0FBS283QyxHQUFLLEdBRTlDcDdDLEtBQUtvN0MsR0FBR20zQixjQUFnQixVQUFZbGpFLEdBQ3JDbWpFLEdBQW1CLFdBQ2xCLFNBQVNuakUsSUFNTHJQLEtBQUt1NkMsR0FBSyxLQUVkLE9BQU9sckMsRUFBRS9NLFVBQVVxbUIsU0FBVyxXQUMxQixPQUFPcGtCLFFBQVFDLFFBQVEsT0FDeEI2SyxFQUFFL00sVUFBVXM0QyxHQUFLLGFBQWV2ckMsRUFBRS9NLFVBQVVvNUMsR0FBSyxTQUFTcnNDLEdBQ3pEclAsS0FBS3U2QyxHQUFLbHJDLEVBRVZBLEVBQUU0aUUsR0FBRzVQLGtCQUNOaHpELEVBQUUvTSxVQUFVeTRDLEdBQUssV0FDaEIvNkMsS0FBS3U2QyxHQUFLLE1BQ1hsckMsRUFqQmUsR0FrQmpCb2pFLEdBQW1CLFdBQ3BCLFNBQVNwakUsRUFBRUEsR0FDUCxJQUFJckYsRUFBSWhLLEtBSUdBLEtBQUtpN0MsR0FBSyxLQUVyQmo3QyxLQUFLczVELFlBQWMyWSxHQUFHNVAsZ0JBQWlCcmlFLEtBQUs2NkMsSUFBSyxFQUtqRDc2QyxLQUFLbzVDLEdBQUssRUFFVnA1QyxLQUFLdTZDLEdBQUssS0FBTXY2QyxLQUFLcW5CLGNBQWUsRUFBSXJuQixLQUFLaTdDLEdBQUssV0FDOUNqeEMsRUFBRW92QyxLQUFNcHZDLEVBQUVzdkQsWUFBY3R2RCxFQUFFMHZDLEtBQU0xdkMsRUFBRTZ3QyxJQUFLLEVBQUk3d0MsRUFBRXV3QyxJQUFNdndDLEVBQUV1d0MsR0FBR3Z3QyxFQUFFc3ZELGNBQzNEdDVELEtBQUtvNUMsR0FBSyxFQUFHcDVDLEtBQUt3K0MsS0FBT252QyxFQUFFNkosYUFBYSxDQUN2Q0MsVUFBVSxJQUNWblosS0FBS3crQyxLQUFPeCtDLEtBQUt3K0MsS0FBS21jLHFCQUFxQjM2RCxLQUFLaTdDLEtBRXBEajdDLEtBQUtpN0MsR0FBRyxNQUFPNXJDLEVBQUV2SixNQUFNVixNQUFLLFNBQVVpSyxHQUNsQ3JGLEVBQUV3MEMsS0FBT252QyxFQUFHckYsRUFBRWl4QyxJQUVkanhDLEVBQUV3MEMsS0FBS21jLHFCQUFxQjN3RCxFQUFFaXhDLE9BQzlCLGdCQUVSLE9BQU81ckMsRUFBRS9NLFVBQVVxbUIsU0FBVyxXQUMxQixJQUFJdFosRUFBSXJQLEtBQU1nSyxFQUFJaEssS0FBS281QyxHQUFJLzJDLEVBQUlyQyxLQUFLcW5CLGFBSTVCLE9BQU9ybkIsS0FBS3FuQixjQUFlLEVBQUlybkIsS0FBS3crQyxLQUFPeCtDLEtBQUt3K0MsS0FBSzcxQixTQUFTdG1CLEdBQUcrQyxNQUFLLFNBQVUvQyxHQUlwRixPQUFPZ04sRUFBRStwQyxLQUFPcHZDLEdBQUssR0FBRSw4QkFBK0IseUNBQ3REcUYsRUFBRXNaLFlBQWN0bUIsR0FBSyxHQUFFLGlCQUFtQkEsRUFBRWl2QyxhQUFjLElBQUlnaEMsR0FBR2p3RSxFQUFFaXZDLFlBQWFqaUMsRUFBRWlxRCxjQUFnQixRQUNoRy8wRCxRQUFRQyxRQUFRLE9BQ3ZCNkssRUFBRS9NLFVBQVVzNEMsR0FBSyxXQUNoQjU2QyxLQUFLcW5CLGNBQWUsR0FDckJoWSxFQUFFL00sVUFBVW81QyxHQUFLLFNBQVNyc0MsR0FDekJyUCxLQUFLdTZDLEdBQUtsckMsRUFFVnJQLEtBQUs2NkMsSUFBTXhyQyxFQUFFclAsS0FBS3M1RCxjQUNuQmpxRCxFQUFFL00sVUFBVXk0QyxHQUFLLFdBQ2hCLzZDLEtBQUt3K0MsTUFBUXgrQyxLQUFLdytDLEtBQUtxYyx3QkFBd0I3NkQsS0FBS2k3QyxJQUFLajdDLEtBQUtpN0MsR0FBSyxLQUFNajdDLEtBQUt1NkMsR0FBSyxNQU12RmxyQyxFQUFFL00sVUFBVW8zQyxHQUFLLFdBQ2IsSUFBSXJxQyxFQUFJclAsS0FBS3crQyxNQUFReCtDLEtBQUt3K0MsS0FBSzlILFNBQy9CLE9BQU8sR0FBRSxPQUFTcm5DLEdBQUssaUJBQW1CQSxHQUFJLElBQUk0aUUsR0FBRzVpRSxJQUN0REEsRUF2RGlCLEdBd0RuQnFqRSxHQUFtQixXQUNwQixTQUFTcmpFLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBS2s3QyxHQUFLN3JDLEVBQUdyUCxLQUFLdzZDLEdBQUt4d0MsRUFBR2hLLEtBQUs2WCxLQUFPLGFBQWM3WCxLQUFLMndELEtBQU9zaEIsR0FBR0ksR0FFdkUsT0FBTzl3RSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDNUN3RCxJQUFLLFdBQ0QsSUFBSXVKLEVBQUksQ0FDSixrQkFBbUJyUCxLQUFLdzZDLElBQ3pCeHdDLEVBQUloSyxLQUFLazdDLEdBQUdzRCxLQUFLbTBCLGdDQUFnQyxJQUV4QyxPQUFPM29FLElBQU1xRixFQUFFa2pFLGNBQWdCdm9FLEdBQUlxRixHQUVuRHJCLFlBQVksRUFDWmlPLGNBQWMsSUFDZDVNLEVBZGdCLEdBZW5CdWpFLEdBQW1CLFdBQ3BCLFNBQVN2akUsRUFBRUEsRUFBR3JGLEdBQ1ZoSyxLQUFLazdDLEdBQUs3ckMsRUFBR3JQLEtBQUt3NkMsR0FBS3h3QyxFQUUzQixPQUFPcUYsRUFBRS9NLFVBQVVxbUIsU0FBVyxXQUMxQixPQUFPcGtCLFFBQVFDLFFBQVEsSUFBSWt1RSxHQUFHMXlFLEtBQUtrN0MsR0FBSWw3QyxLQUFLdzZDLE1BQzdDbnJDLEVBQUUvTSxVQUFVbzVDLEdBQUssU0FBU3JzQyxHQUV6QkEsRUFBRTRpRSxHQUFHSSxLQUNOaGpFLEVBQUUvTSxVQUFVeTRDLEdBQUssYUFBZTFyQyxFQUFFL00sVUFBVXM0QyxHQUFLLGFBQWV2ckMsRUFUL0MsR0FVbkJ3akUsR0FBbUIsV0FZcEIsU0FBU3hqRSxFQUFFQSxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUNoQi9RLEtBQUs4eUUsUUFBVXpqRSxFQUFHclAsS0FBSzA2QyxHQUFLMXdDLEVBQUdoSyxLQUFLK3lFLGNBQWdCMXdFLEVBQUdyQyxLQUFLZ3pFLFVBQVlqaUUsRUFXNUUsT0FBTzFCLEVBQUUvTSxVQUFVMUIsR0FBSyxTQUFTeU8sRUFBR3JGLEVBQUczSCxHQUNuQyxJQUFLLElBQUkwTyxFQUFJMU8sRUFBRTg3QyxHQUFJNzlDLEVBQUksRUFBR0EsRUFBSU4sS0FBS2d6RSxVQUFVcnlFLE9BQVFMLElBQUssQ0FDdEQsSUFBSTZCLEVBQUluQyxLQUFLZ3pFLFVBQVUxeUUsR0FDdkI2QixFQUFFaUosSUFBSXUyRCxRQUFRdHlELEtBQU9yRixFQUFJa3NELEdBQUcvekQsRUFBRzZILEVBQUcrRyxFQUFFelEsS0FFeEMsT0FBTzBKLEdBU1hxRixFQUFFL00sVUFBVWc0QyxHQUFLLFNBQVNqckMsRUFBR3JGLEdBR3pCLElBQUssSUFBSTNILEVBQUksRUFBRzBPLEVBQUkvUSxLQUFLK3lFLGNBQWUxd0UsRUFBSTBPLEVBQUVwUSxPQUFRMEIsSUFBSyxDQUN2RCxJQUFJL0IsRUFBSXlRLEVBQUUxTyxHQUNWL0IsRUFBRThLLElBQUl1MkQsUUFBUXR5RCxLQUFPckYsRUFBSW12RCxHQUFHNzRELEVBQUcwSixFQUFHQSxFQUFHaEssS0FBSzA2QyxLQUc5QyxJQUFLLElBQUl2NEMsRUFBSTZILEVBQUd1bUIsRUFBSSxFQUFHamhCLEVBQUl0UCxLQUFLZ3pFLFVBQVd6aUQsRUFBSWpoQixFQUFFM08sT0FBUTR2QixJQUFLLENBQzFELElBQUl6aUIsRUFBSXdCLEVBQUVpaEIsR0FDVnppQixFQUFFMUMsSUFBSXUyRCxRQUFRdHlELEtBQU9yRixFQUFJbXZELEdBQUdyckQsRUFBRzlELEVBQUc3SCxFQUFHbkMsS0FBSzA2QyxLQUU5QyxPQUFPMXdDLEdBTVhxRixFQUFFL00sVUFBVSs0QyxHQUFLLFNBQVNoc0MsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUFNcUMsRUFBSWdOLEVBSVYsT0FBT3JQLEtBQUtnekUsVUFBVXJ0RSxTQUFRLFNBQVVvTCxHQUM1QyxJQUFJelEsRUFBSTBKLEVBQUVzd0MsR0FBR3ZwQyxFQUFFM0YsSUFBS2lFLEVBQUV2SixJQUFJaUwsRUFBRTNGLE1BQzVCOUssSUFBTStCLEVBQUlBLEVBQUVtaUUsR0FBR3p6RCxFQUFFM0YsSUFBSzlLLE9BQ3JCK0IsR0FDTmdOLEVBQUUvTSxVQUFVNkksS0FBTyxXQUNsQixPQUFPbkwsS0FBS2d6RSxVQUFVakgsUUFBTyxTQUFVMThELEVBQUdyRixHQUN0QyxPQUFPcUYsRUFBRTJaLElBQUloZixFQUFFb0IsT0FDZis2RCxPQUNMOTJELEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUM5QixPQUFPclAsS0FBSzh5RSxVQUFZempFLEVBQUV5akUsU0FBVyxHQUFFOXlFLEtBQUtnekUsVUFBVzNqRSxFQUFFMmpFLFdBQVcsU0FBVTNqRSxFQUFHckYsR0FDN0UsT0FBT3F1RCxHQUFHaHBELEVBQUdyRixPQUNWLEdBQUVoSyxLQUFLK3lFLGNBQWUxakUsRUFBRTBqRSxlQUFlLFNBQVUxakUsRUFBR3JGLEdBQ3ZELE9BQU9xdUQsR0FBR2hwRCxFQUFHckYsT0FFbEJxRixFQTNFaUIsR0E0RW5CNGpFLEdBQW1CLFdBQ3BCLFNBQVM1akUsRUFBRUEsRUFBR3JGLEVBQUczSCxFQUtqQjBPLEdBQ0kvUSxLQUFLa3pFLE1BQVE3akUsRUFBR3JQLEtBQUtxOUMsR0FBS3J6QyxFQUFHaEssS0FBS20rQyxHQUFLOTdDLEVBQUdyQyxLQUFLZzhDLEdBQUtqckMsRUFPeEQsT0FBTzFCLEVBQUUxTSxLQUFPLFNBQVNxSCxFQUFHM0gsRUFBRzBPLEdBQzNCLEdBQUUvRyxFQUFFZ3BFLFVBQVVyeUUsU0FBV29RLEVBQUVwUSxRQUMzQixJQUFLLElBQUlMLEVBQUlzbUUsR0FBSXprRSxFQUFJNkgsRUFBRWdwRSxVQUFXemlELEVBQUksRUFBR0EsRUFBSXB1QixFQUFFeEIsT0FBUTR2QixJQUFLandCLEVBQUlBLEVBQUVra0UsR0FBR3JpRSxFQUFFb3VCLEdBQUdubEIsSUFBSzJGLEVBQUV3ZixHQUFHeG5CLFNBQ3BGLE9BQU8sSUFBSXNHLEVBQUVyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxJQUN2QitPLEVBbEJpQixHQW1CbkI4akUsR0FBbUIsV0FDcEIsU0FBUzlqRSxJQUdMclAsS0FBS3M4QyxHQUFLLElBQUksSUFBRSxTQUFVanRDLEdBQ3RCLE9BQU9BLEVBQUV0UCxjQUNULFNBQVVzUCxFQUFHckYsR0FDYixPQUFPcUYsRUFBRXN5RCxRQUFRMzNELE1BQ2hCaEssS0FBSzI2QyxJQUFLLEVBRW5CLE9BQU90ckMsRUFBRS9NLFVBQVVrNUMsR0FBSyxTQUFTbnNDLEdBQzdCLElBQUlyRixFQUFJaEssS0FBS3M4QyxHQUFHeDJDLElBQUl1SixHQUNwQixPQUFPckYsRUFBSUEsRUFBRW9wRSxTQUFXdjlDLEdBQUVuZSxPQVE5QnJJLEVBQUUvTSxVQUFVNjZDLEdBQUssU0FBUzl0QyxFQUFHckYsR0FDekJoSyxLQUFLaTlDLEtBQU1qOUMsS0FBS3M4QyxHQUFHdjJDLElBQUlzSixFQUFFakUsSUFBSyxDQUMxQjB2QyxHQUFJenJDLEVBQ0orakUsU0FBVXBwRSxLQVNsQnFGLEVBQUUvTSxVQUFVcTdDLEdBQUssU0FBU3R1QyxFQUFHckYsUUFDekIsSUFBV0EsSUFBTUEsRUFBSSxNQUFPaEssS0FBS2k5QyxLQUFNajlDLEtBQUtzOEMsR0FBR3YyQyxJQUFJc0osRUFBRyxDQUNsRHlyQyxHQUFJLEtBQ0pzNEIsU0FBVXBwRSxLQWNsQnFGLEVBQUUvTSxVQUFVZzVDLEdBQUssU0FBU2pzQyxFQUFHckYsR0FDekJoSyxLQUFLaTlDLEtBQ0wsSUFBSTU2QyxFQUFJckMsS0FBS3M4QyxHQUFHeDJDLElBQUlrRSxHQUNwQixZQUFPLElBQVczSCxFQUFJd3FFLEdBQUdyb0UsUUFBUW5DLEVBQUV5NEMsSUFBTTk2QyxLQUFLNjlDLEdBQUd4dUMsRUFBR3JGLElBYXhEcUYsRUFBRS9NLFVBQVUrd0UsV0FBYSxTQUFTaGtFLEVBQUdyRixHQUNqQyxPQUFPaEssS0FBS203QyxHQUFHOXJDLEVBQUdyRixJQU10QnFGLEVBQUUvTSxVQUFVNkMsTUFBUSxTQUFTa0ssR0FDekIsT0FBT3JQLEtBQUtpOUMsS0FBTWo5QyxLQUFLMjZDLElBQUssRUFBSTM2QyxLQUFLeTVDLEdBQUdwcUMsSUFFTUEsRUFBRS9NLFVBQVUyNkMsR0FBSyxhQUNuRTV0QyxFQTVFb0IsR0FnR3hCLFNBQVNpa0UsR0FBR2prRSxHQUNSLE9BQU8sSUFBSWcyQixHQUFHaDJCLEdBQXdCLEdBa0J0QyxTQUFTa2tFLEdBQUdsa0UsR0FLWixPQUFPLFNBQVNBLEVBQUdyRixHQUNmLEdBQUksaUJBQW1CcUYsR0FBSyxPQUFTQSxFQUFHLE9BQU8sRUFDL0MsSUFBSyxJQUFJaE4sRUFBSWdOLEVBQUcwQixFQUFJLEVBQUd6USxFQUFJLENBQUUsT0FBUSxRQUFTLFlBQWN5USxFQUFJelEsRUFBRUssT0FBUW9RLElBQUssQ0FDM0UsSUFBSTVPLEVBQUk3QixFQUFFeVEsR0FDVixHQUFJNU8sS0FBS0UsR0FBSyxtQkFBcUJBLEVBQUVGLEdBQUksT0FBTyxFQUVwRCxPQUFPLEVBTkosQ0FPTGtOLEdBR04sSUFBSW1rRSxHQUFLLDRIQUE2SEMsR0FBbUIsV0FDckosU0FBU3BrRSxJQUNMclAsS0FBS285QyxHQUFLLEdBRWQsT0FBTy90QyxFQUFFL00sVUFBVXk1QyxHQUFLLFNBQVMxc0MsR0FDN0JyUCxLQUFLbzlDLEdBQUczOUMsS0FBSzRQLElBQ2RBLEVBQUUvTSxVQUFVdzVDLEdBQUssV0FDaEI5N0MsS0FBS285QyxHQUFHejNDLFNBQVEsU0FBVTBKLEdBQ3RCLE9BQU9BLFFBRVpBLEVBVmtKLEdBV3BKcWtFLEdBQW1CLFdBQ3BCLFNBQVNya0UsRUFBRUEsRUFBR3JGLEVBQUczSCxHQUNickMsS0FBSys4QyxHQUFLMXRDLEVBQUdyUCxLQUFLMDlDLEdBQUsxekMsRUFBR2hLLEtBQUtpOEMsR0FBSzU1QyxFQVF4QyxPQUFPZ04sRUFBRS9NLFVBQVUwNkMsR0FBSyxTQUFTM3RDLEVBQUdyRixHQUNoQyxJQUFJM0gsRUFBSXJDLEtBQ1IsT0FBT0EsS0FBSzA5QyxHQUFHYixHQUFHeHRDLEVBQUdyRixHQUFHbEksTUFBSyxTQUFVaVAsR0FDbkMsT0FBTzFPLEVBQUVvNEMsR0FBR3ByQyxFQUFHckYsRUFBRytHLE9BRzRDMUIsRUFBRS9NLFVBQVVtNEMsR0FBSyxTQUFTcHJDLEVBQUdyRixFQUFHM0gsR0FDbEcsT0FBT3JDLEtBQUsrOEMsR0FBR3pCLEdBQUdqc0MsRUFBR3JGLEdBQUdsSSxNQUFLLFNBQVV1TixHQUNuQyxJQUFLLElBQUkwQixFQUFJLEVBQUd6USxFQUFJK0IsRUFBRzBPLEVBQUl6USxFQUFFSyxPQUFRb1EsSUFDakMxQixFQUFJL08sRUFBRXlRLEdBQUd1cEMsR0FBR3R3QyxFQUFHcUYsR0FFbkIsT0FBT0EsTUFLZkEsRUFBRS9NLFVBQVU4N0MsR0FBSyxTQUFTL3VDLEVBQUdyRixFQUFHM0gsR0FDNUIsSUFBSTBPLEVBQUl5MUQsS0FDUixPQUFPeDhELEVBQUVyRSxTQUFRLFNBQVUwSixFQUFHckYsR0FDMUIsSUFBSyxJQUFJMUosRUFBSSxFQUFHNkIsRUFBSUUsRUFBRy9CLEVBQUk2QixFQUFFeEIsT0FBUUwsSUFDakMwSixFQUFJN0gsRUFBRTdCLEdBQUdnNkMsR0FBR2pyQyxFQUFHckYsR0FFbkIrRyxFQUFJQSxFQUFFeXpELEdBQUduMUQsRUFBR3JGLE1BQ1grRyxHQVFUMUIsRUFBRS9NLFVBQVVxNkMsR0FBSyxTQUFTdHRDLEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSXJDLEtBQ1IsT0FBT0EsS0FBSys4QyxHQUFHczJCLFdBQVdoa0UsRUFBR3JGLEdBQUdsSSxNQUFLLFNBQVVrSSxHQUMzQyxPQUFPM0gsRUFBRW81QyxHQUFHcHNDLEVBQUdyRixPQU92QnFGLEVBQUUvTSxVQUFVbTVDLEdBQUssU0FBU3BzQyxFQUFHckYsR0FDekIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU9BLEtBQUswOUMsR0FBRzFDLEdBQUczckMsRUFBR3JGLEdBQUdsSSxNQUFLLFNBQVVpUCxHQUNuQyxJQUFJelEsRUFBSStCLEVBQUUrN0MsR0FBRy91QyxFQUFHckYsRUFBRytHLEdBQUk1TyxFQUFJdWtFLEtBQzNCLE9BQU9wbUUsRUFBRXFGLFNBQVEsU0FBVTBKLEVBQUdyRixHQUUxQkEsSUFBTUEsRUFBSSxJQUFJdkksR0FBRzROLEVBQUd3bUIsR0FBRW5lLFFBQVN2VixFQUFJQSxFQUFFcWlFLEdBQUduMUQsRUFBR3JGLE1BQzFDN0gsTUFXYmtOLEVBQUUvTSxVQUFVczdDLEdBQUssU0FBU3Z1QyxFQUFHckYsRUFBRzNILEdBSzVCLE9BQU8sU0FBU2dOLEdBQ1osT0FBTyxHQUFFcXZCLEVBQUVydkIsRUFBRXF2QyxPQUFTLE9BQVNydkMsRUFBRXMwRCxpQkFBbUIsSUFBTXQwRCxFQUFFdzBELFFBQVFsakUsT0FEakUsQ0FFTHFKLEdBQUtoSyxLQUFLazlDLEdBQUc3dEMsRUFBR3JGLEVBQUUwMEMsTUFBUXVaLEdBQUdqdUQsR0FBS2hLLEtBQUt5OEMsR0FBR3B0QyxFQUFHckYsRUFBRzNILEdBQUtyQyxLQUFLeTlDLEdBQUdwdUMsRUFBR3JGLEVBQUczSCxJQUN0RWdOLEVBQUUvTSxVQUFVNDZDLEdBQUssU0FBUzd0QyxFQUFHckYsR0FFNUIsT0FBT2hLLEtBQUtnOUMsR0FBRzN0QyxFQUFHLElBQUksR0FBRXJGLElBQUlsSSxNQUFLLFNBQVV1TixHQUN2QyxJQUFJckYsRUFBSWc4RCxLQUNSLE9BQU8zMkQsYUFBYTRsRCxLQUFPanJELEVBQUlBLEVBQUV3NkQsR0FBR24xRCxFQUFFakUsSUFBS2lFLElBQUtyRixNQUVyRHFGLEVBQUUvTSxVQUFVbTZDLEdBQUssU0FBU3B0QyxFQUFHckYsRUFBRzNILEdBQy9CLElBQUkwTyxFQUFJL1EsS0FBTU0sRUFBSTBKLEVBQUUyNUQsZ0JBQWlCeGhFLEVBQUk2akUsS0FDekMsT0FBT2htRSxLQUFLaThDLEdBQUdpQyxHQUFHN3VDLEVBQUcvTyxHQUFHd0IsTUFBSyxTQUFVeXVCLEdBQ25DLE9BQU9zOEMsR0FBR2xuRSxRQUFRNHFCLEdBQUcsU0FBVUEsR0FDM0IsSUFBSWpoQixFQUFJLFNBQVNELEVBQUdyRixHQUNoQixPQUFPLElBQUlrdUQsR0FBR2x1RCxFQUNPLEtBQU1xRixFQUFFOHBELEdBQUczMkQsUUFBUzZNLEVBQUV3MEQsUUFBUXJoRSxRQUFTNk0sRUFBRWswRCxNQUFPbDBELEVBQUVrOUQsVUFBV2w5RCxFQUFFeTBELFFBQVN6MEQsRUFBRTAwRCxPQUYzRixDQUdOLzVELEVBQUd1bUIsRUFBRSt5QyxNQUFNaGpFLElBQ2IsT0FBT3lRLEVBQUUwc0MsR0FBR3B1QyxFQUFHQyxFQUFHak4sR0FBR1AsTUFBSyxTQUFVdU4sR0FDaENBLEVBQUUxSixTQUFRLFNBQVUwSixFQUFHckYsR0FDbkI3SCxFQUFJQSxFQUFFcWlFLEdBQUduMUQsRUFBR3JGLFlBR3BCbEksTUFBSyxXQUNMLE9BQU9LLFNBR2hCa04sRUFBRS9NLFVBQVVtN0MsR0FBSyxTQUFTcHVDLEVBQUdyRixFQUFHM0gsR0FDL0IsSUFBSTBPLEVBQUd6USxFQUFHNkIsRUFBSW5DLEtBRU4sT0FBT0EsS0FBSys4QyxHQUFHYSxHQUFHdnVDLEVBQUdyRixFQUFHM0gsR0FBR1AsTUFBSyxTQUFVTyxHQUM5QyxPQUFPME8sRUFBSTFPLEVBQUdGLEVBQUV1N0MsR0FBR3hCLEdBQUc3c0MsRUFBR3JGLE1BQ3pCbEksTUFBSyxTQUFVa0ksR0FDZixPQUFPMUosRUFBSTBKLEVBQUc3SCxFQUFFbzVDLEdBQUdsc0MsRUFBRy9PLEVBQUd5USxHQUFHalAsTUFBSyxTQUFVdU4sR0FDdkMwQixFQUFJMUIsRUFDSixJQUFLLElBQUlyRixFQUFJLEVBQUczSCxFQUFJL0IsRUFBRzBKLEVBQUkzSCxFQUFFMUIsT0FBUXFKLElBQUssSUFBSyxJQUFJN0gsRUFBSUUsRUFBRTJILEdBQUl1bUIsRUFBSSxFQUFHamhCLEVBQUluTixFQUFFNndFLFVBQVd6aUQsRUFBSWpoQixFQUFFM08sT0FBUTR2QixJQUFLLENBQ3BHLElBQUl6aUIsRUFBSXdCLEVBQUVpaEIsR0FBSS9hLEVBQUkxSCxFQUFFMUMsSUFBS2tsQixFQUFJdmYsRUFBRWpMLElBQUkwUCxHQUFJdkYsRUFBSWtwRCxHQUFHcnJELEVBQUd3aUIsRUFBR0EsRUFBR251QixFQUFFdTRDLElBQ3pEM3BDLEVBQUlkLGFBQWFnbEQsR0FBS2xrRCxFQUFFeXpELEdBQUdodkQsRUFBR3ZGLEdBQUtjLEVBQUVoRixPQUFPeUosVUFHcEQxVCxNQUFLLFdBR0wsT0FBT2lQLEVBQUVwTCxTQUFRLFNBQVUwSixFQUFHaE4sR0FDMUJnMEQsR0FBR3JzRCxFQUFHM0gsS0FBTzBPLEVBQUlBLEVBQUVoRixPQUFPc0QsT0FDekIwQixNQUVWMUIsRUFBRS9NLFVBQVVpNUMsR0FBSyxTQUFTbHNDLEVBQUdyRixFQUFHM0gsR0FDL0IsSUFBSyxJQUFJME8sRUFBSW8xRCxLQUFNN2xFLEVBQUksRUFBRzZCLEVBQUk2SCxFQUFHMUosRUFBSTZCLEVBQUV4QixPQUFRTCxJQUFLLElBQUssSUFBSWl3QixFQUFJLEVBQUdqaEIsRUFBSW5OLEVBQUU3QixHQUFHMHlFLFVBQVd6aUQsRUFBSWpoQixFQUFFM08sT0FBUTR2QixJQUFLLENBQ3ZHLElBQUl6aUIsRUFBSXdCLEVBQUVpaEIsR0FDVnppQixhQUFhb25ELElBQU0sT0FBUzd5RCxFQUFFeUQsSUFBSWdJLEVBQUUxQyxPQUFTMkYsRUFBSUEsRUFBRWlZLElBQUlsYixFQUFFMUMsTUFFN0QsSUFBSW9LLEVBQUluVCxFQUNSLE9BQU9yQyxLQUFLKzhDLEdBQUdzMkIsV0FBV2hrRSxFQUFHMEIsR0FBR2pQLE1BQUssU0FBVXVOLEdBQzNDLE9BQU9BLEVBQUUxSixTQUFRLFNBQVUwSixFQUFHckYsR0FDMUIsT0FBU0EsR0FBS0EsYUFBYWlyRCxLQUFPei9DLEVBQUlBLEVBQUVndkQsR0FBR24xRCxFQUFHckYsT0FDN0N3TCxNQUVWbkcsRUFuSWlCLEdBb0luQnNrRSxHQUFtQixXQUNwQixTQUFTdGtFLEVBQUVBLEVBQUdyRixFQUFHM0gsRUFBRzBPLEdBQ2hCL1EsS0FBS2dsRSxTQUFXMzFELEVBQUdyUCxLQUFLa29FLFVBQVlsK0QsRUFBR2hLLEtBQUtvOEMsR0FBSy81QyxFQUFHckMsS0FBS3U4QyxHQUFLeHJDLEVBRWxFLE9BQU8xQixFQUFFc3lDLEdBQUssU0FBUzMzQyxFQUFHM0gsR0FDdEIsSUFBSyxJQUFJME8sRUFBSW8xRCxLQUFNN2xFLEVBQUk2bEUsS0FBTWhrRSxFQUFJLEVBQUdvdUIsRUFBSWx1QixFQUFFNGxFLFdBQVk5bEUsRUFBSW91QixFQUFFNXZCLE9BQVF3QixJQUFLLENBQ3JFLElBQUltTixFQUFJaWhCLEVBQUVwdUIsR0FDVixPQUFRbU4sRUFBRXVJLE1BQ1IsS0FBSyxFQUNIOUcsRUFBSUEsRUFBRWlZLElBQUkxWixFQUFFdTRELElBQUl6OEQsS0FDaEIsTUFFRixLQUFLLEVBQ0g5SyxFQUFJQSxFQUFFMG9CLElBQUkxWixFQUFFdTRELElBQUl6OEQsTUFJeEIsT0FBTyxJQUFJaUUsRUFBRXJGLEVBQUczSCxFQUFFNmxFLFVBQVduM0QsRUFBR3pRLElBQ2pDK08sRUFsQmlCLEdBbUJuQnVrRSxHQUFtQixXQUNwQixTQUFTdmtFLEVBQUVBLEVBQUdyRixHQUNWLElBQUkzSCxFQUFJckMsS0FDUkEsS0FBSzZ6RSxjQUFnQnhrRSxFQUFHckYsSUFBTUEsRUFBRStzRCxHQUFLLFNBQVMxbkQsR0FDMUMsT0FBT2hOLEVBQUV1L0MsR0FBR3Z5QyxJQUNiclAsS0FBSzhyRSxHQUFLLFNBQVN6OEQsR0FDbEIsT0FBT3JGLEVBQUUwaUUsR0FBR3I5RCxLQUdwQixPQUFPQSxFQUFFL00sVUFBVXMvQyxHQUFLLFNBQVN2eUMsR0FDN0IsT0FBT3JQLEtBQUs2ekUsY0FBZ0J4OEQsS0FBSzBVLElBQUkxYyxFQUFHclAsS0FBSzZ6RSxlQUFnQjd6RSxLQUFLNnpFLGVBQ25FeGtFLEVBQUUvTSxVQUFVUixLQUFPLFdBQ2xCLElBQUl1TixJQUFNclAsS0FBSzZ6RSxjQUNmLE9BQU83ekUsS0FBSzhyRSxJQUFNOXJFLEtBQUs4ckUsR0FBR3o4RCxHQUFJQSxHQUMvQkEsRUFkaUIsR0F3QnBCLFNBQVN5a0UsR0FBR3prRSxFQUFHckYsR0FDZixJQUFJM0gsRUFBSWdOLEVBQUUsR0FBSTBCLEVBQUkxQixFQUFFLEdBQUkvTyxFQUFJMEosRUFBRSxHQUFJN0gsRUFBSTZILEVBQUUsR0FBSXVtQixFQUFJLEdBQUVsdUIsRUFBRy9CLEdBQ3JELE9BQU8sSUFBTWl3QixFQUFJLEdBQUV4ZixFQUFHNU8sR0FBS291QixFQU8zQnFqRCxHQUFHdlAsSUFBTSxFQUViLElBQUkwUCxHQUFtQixXQUNuQixTQUFTMWtFLEVBQUVBLEdBQ1ByUCxLQUFLc3RFLEdBQUtqK0QsRUFBR3JQLEtBQUtnMEUsT0FBUyxJQUFJaE4sR0FBRzhNLElBQUs5ekUsS0FBSzRzRSxHQUFLLEVBRXJELE9BQU92OUQsRUFBRS9NLFVBQVVxcUUsR0FBSyxXQUNwQixRQUFTM3NFLEtBQUs0c0UsSUFDZnY5RCxFQUFFL00sVUFBVTBPLEdBQUssU0FBUzNCLEdBQ3pCLElBQUlyRixFQUFJLENBQUVxRixFQUFHclAsS0FBSzJzRSxNQUNsQixHQUFJM3NFLEtBQUtnMEUsT0FBTzV1RCxLQUFPcGxCLEtBQUtzdEUsR0FBSXR0RSxLQUFLZzBFLE9BQVNoMEUsS0FBS2cwRSxPQUFPaHJELElBQUloZixPQUFTLENBQ25FLElBQUkzSCxFQUFJckMsS0FBS2cwRSxPQUFPOU0sT0FDcEI0TSxHQUFHOXBFLEVBQUczSCxHQUFLLElBQU1yQyxLQUFLZzBFLE9BQVNoMEUsS0FBS2cwRSxPQUFPaDZELE9BQU8zWCxHQUFHMm1CLElBQUloZixNQUU5RHpJLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsV0FBWSxDQUM5Q3dELElBQUssV0FPRCxPQUFPOUYsS0FBS2cwRSxPQUFPOU0sT0FBTyxJQUU5Qmw1RCxZQUFZLEVBQ1ppTyxjQUFjLElBQ2Q1TSxFQXhCZSxHQXlCbEI0a0UsR0FBSyxDQUNOMUcsSUFBSSxFQUNKVCxHQUFJLEVBQ0pPLEdBQUksRUFDSk4sR0FBSSxHQUNMbUgsR0FBbUIsV0FDbEIsU0FBUzdrRSxFQUdUQSxFQUVBckYsRUFHQTNILEdBQ0lyQyxLQUFLeXdFLEdBQUtwaEUsRUFBR3JQLEtBQUswdEUsR0FBSzFqRSxFQUFHaEssS0FBS3N3RSxHQUFLanVFLEVBRXhDLE9BQU9nTixFQUFFZ2lFLEdBQUssU0FBU3JuRSxHQUNuQixPQUFPLElBQUlxRixFQUFFckYsRUFBR3FGLEVBQUU4aEUsR0FBSTloRSxFQUFFd2hFLEtBQ3pCeGhFLEVBZGUsR0FpQnRCNmtFLEdBQUcvQyxHQUFLLEdBQUkrQyxHQUFHckQsR0FBSyxJQUFLcUQsR0FBR25GLEdBQUssSUFBSW1GLEdBQUcsU0FBVUEsR0FBRy9DLEdBQUkrQyxHQUFHckQsSUFBS3FELEdBQUczQyxHQUFLLElBQUkyQyxJQUFJLEVBQUcsRUFBRyxHQU12RixJQUFJQyxHQUFtQixXQUNuQixTQUFTOWtFLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBS216RSxHQUFLOWpFLEVBQUdyUCxLQUFLd3VFLEdBQUt4a0UsRUFBR2hLLEtBQUsweUUsSUFBSyxFQUFJMXlFLEtBQUt1dUUsR0FBSyxLQUV0RCxPQUFPbC9ELEVBQUUvTSxVQUFVdW1ELE1BQVEsU0FBU3g1QyxJQUMvQixJQUFNclAsS0FBS216RSxHQUFHbmtELE9BQU95aEQsSUFBTXp3RSxLQUFLNHlFLEdBQUd2akUsSUFDckNBLEVBQUUvTSxVQUFVc3dELEtBQU8sV0FDbEI1eUQsS0FBS3V1RSxLQUFPdnVFLEtBQUt1dUUsR0FBR3R3QyxTQUFVaitCLEtBQUt1dUUsR0FBSyxPQUN6Q2h0RSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDeEN3RCxJQUFLLFdBQ0QsT0FBTyxPQUFTOUYsS0FBS3V1RSxJQUV6QnZnRSxZQUFZLEVBQ1ppTyxjQUFjLElBQ2Q1TSxFQUFFL00sVUFBVXN3RSxHQUFLLFNBQVN2akUsR0FDMUIsSUFBSTBCLEVBQUkvUSxLQUFNTSxFQUFJTixLQUFLMHlFLEdBQUssSUFBTSxJQUNsQyxHQUFFLHNCQUF1QixtQ0FBcUNweUUsRUFBSSxNQUFPTixLQUFLdXVFLEdBQUt2dUUsS0FBS3d1RSxHQUFHeFYsR0FBRyx5QkFBc0QxNEQsR0FBRyxXQUNuSixPQUFPLEVBQUV5USxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJL0csRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0hwUSxLQUFLdXVFLEdBQUssS0FBTXZ1RSxLQUFLMHlFLElBQUssRUFBSXJ3RSxFQUFFK04sTUFBUSxFQUUxQyxLQUFLLEVBQ0gsT0FBTy9OLEVBQUVpTyxLQUFLN1EsS0FBSyxDQUFFLEVBQUcsRUFBRyxDQUFFLElBQU0sQ0FBRSxFQUFjNFAsRUFBRSsrRCxHQUFHcHVFLEtBQUttekUsS0FFL0QsS0FBSyxFQUNILE9BQU85d0UsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjLEdBRW5DLEtBQUssRUFDSCxPQUFPazlELEdBQUd2akUsRUFBSTNILEVBQUVnTyxTQUFXLEdBQUUsc0JBQXVCLHVEQUF3RHJHLEdBQzVHLENBQUUsRUFBYyxJQUFPLENBQUUsRUFBYyxHQUV6QyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWNvcUUsR0FBR3BxRSxJQUU1QixLQUFLLEVBQ0gzSCxFQUFFZ08sT0FBUWhPLEVBQUUrTixNQUFRLEVBRXRCLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBYyxHQUV6QixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWNwUSxLQUFLNHlFLEdBQUd2akUsSUFFakMsS0FBSyxFQUNILE9BQU9oTixFQUFFZ08sT0FBUSxDQUFFLGNBS3BDaEIsRUFwRGdCLEdBcURsQmdsRSxHQUFtQixXQUNwQixTQUFTaGxFLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBS3F1RSxHQUFLaC9ELEVBQUdyUCxLQUFLZ3ZCLE9BQVNobEIsRUFHL0IsT0FBT3FGLEVBQUUvTSxVQUFVaXVFLEdBQUssU0FBU2xoRSxFQUFHckYsR0FDaEMsT0FBT2hLLEtBQUtxdUUsR0FBRzRELEdBQUc1aUUsR0FBR3ZOLE1BQUssU0FBVXVOLEdBQ2hDLE9BQU9nSSxLQUFLMnVCLE1BQU1oOEIsRUFBSSxJQUFNcUYsT0FHeUNBLEVBQUUvTSxVQUFVa3dFLEdBQUssU0FBU25qRSxFQUFHckYsR0FDdEcsSUFBSTNILEVBQUlyQyxLQUNSLEdBQUksSUFBTWdLLEVBQUcsT0FBTzZpRSxHQUFHcm9FLFFBQVFvdkUsR0FBR3ZQLElBQ2xDLElBQUl0ekQsRUFBSSxJQUFJZ2pFLEdBQUcvcEUsR0FDZixPQUFPaEssS0FBS3F1RSxHQUFHL21DLEdBQUdqNEIsR0FBRyxTQUFVQSxHQUMzQixPQUFPMEIsRUFBRUMsR0FBRzNCLEVBQUU0MUQsbUJBQ2RuakUsTUFBSyxXQUNMLE9BQU9PLEVBQUVnc0UsR0FBR3dFLEdBQUd4akUsR0FBRyxTQUFVQSxHQUN4QixPQUFPMEIsRUFBRUMsR0FBRzNCLFNBRWhCdk4sTUFBSyxXQUNMLE9BQU9pUCxFQUFFdWpFLGFBT2pCamxFLEVBQUUvTSxVQUFVZ3ZFLEdBQUssU0FBU2ppRSxFQUFHckYsRUFBRzNILEdBQzVCLE9BQU9yQyxLQUFLcXVFLEdBQUdpRCxHQUFHamlFLEVBQUdyRixFQUFHM0gsSUFNNUJnTixFQUFFL00sVUFBVW14RSxHQUFLLFNBQVNwa0UsRUFBR3JGLEdBQ3pCLE9BQU9oSyxLQUFLcXVFLEdBQUdvRixHQUFHcGtFLEVBQUdyRixJQUN0QnFGLEVBQUUvTSxVQUFVbXdFLEdBQUssU0FBU3BqRSxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQVEsSUFBTUEsS0FBS2d2QixPQUFPeWhELElBQU0sR0FBRSxzQkFBdUIsd0NBQ3pENUQsR0FBR3JvRSxRQUFReXZFLEtBQU9qMEUsS0FBS3N6RSxHQUFHamtFLEdBQUd2TixNQUFLLFNBQVVpUCxHQUN4QyxPQUFPQSxFQUFJMU8sRUFBRTJzQixPQUFPeWhELElBQU0sR0FBRSxzQkFBdUIsMENBQTRDMS9ELEVBQUksNEJBQThCMU8sRUFBRTJzQixPQUFPeWhELElBQzFJd0QsSUFBTTV4RSxFQUFFaXdFLEdBQUdqakUsRUFBR3JGLE9BRW5CcUYsRUFBRS9NLFVBQVVneEUsR0FBSyxTQUFTamtFLEdBQ3pCLE9BQU9yUCxLQUFLcXVFLEdBQUdpRixHQUFHamtFLElBQ25CQSxFQUFFL00sVUFBVWd3RSxHQUFLLFNBQVNqakUsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFHME8sRUFBR3pRLEVBQUc2QixFQUFHbU4sRUFBR3hCLEVBQUcwSCxFQUFHOGEsRUFBSXR3QixLQUFNaVEsRUFBSXVCLEtBQUttSyxNQUM1QyxPQUFPM2IsS0FBS3V3RSxHQUFHbGhFLEVBQUdyUCxLQUFLZ3ZCLE9BQU8wK0MsSUFBSTVyRSxNQUFLLFNBQVVrSSxHQUU3QyxPQUFPQSxFQUFJc21CLEVBQUV0QixPQUFPc2hELElBQU0sR0FBRSxzQkFBdUIsOERBQWdFaGdELEVBQUV0QixPQUFPc2hELEdBQUssU0FBV3RtRSxHQUM1SStHLEVBQUl1ZixFQUFFdEIsT0FBT3NoRCxJQUFNdi9ELEVBQUkvRyxFQUFHN0gsRUFBSXFQLEtBQUttSyxNQUFPMlUsRUFBRWtpRCxHQUFHbmpFLEVBQUcwQixNQUNsRGpQLE1BQUssU0FBVWlQLEdBQ2YsT0FBTzFPLEVBQUkwTyxFQUFHekIsRUFBSWtDLEtBQUttSyxNQUFPMlUsRUFBRWdoRCxHQUFHamlFLEVBQUdoTixFQUFHMkgsTUFDekNsSSxNQUFLLFNBQVVrSSxHQUNmLE9BQU8xSixFQUFJMEosRUFBRzhELEVBQUkwRCxLQUFLbUssTUFBTzJVLEVBQUVtakQsR0FBR3BrRSxFQUFHaE4sTUFDdENQLE1BQUssU0FBVXVOLEdBQ2YsT0FBT21HLEVBQUloRSxLQUFLbUssTUFBTyxNQUFPLFNBQVcsR0FBRSxzQkFBdUIsaURBQW1EeFosRUFBSThOLEdBQUssd0NBQTBDYyxFQUFJLFFBQVV6QixFQUFJbk4sR0FBSyxpQkFBbUI3QixFQUFJLGdCQUFrQndOLEVBQUl3QixHQUFLLGlCQUFtQkQsRUFBSSxrQkFBb0JtRyxFQUFJMUgsR0FBSyx3QkFBMEIwSCxFQUFJdkYsR0FBSyxNQUN4VTQ4RCxHQUFHcm9FLFFBQVEsQ0FDUCtvRSxJQUFJLEVBQ0pULEdBQUkvN0QsRUFDSnM4RCxHQUFJL3NFLEVBQ0p5c0UsR0FBSTE5RCxRQUdiQSxFQWpFaUIsR0F3RnhCLFNBQVNrbEUsR0FBR2xsRSxHQUNSLElBQUssSUFBSXJGLEVBQUksR0FBSTNILEVBQUksRUFBR0EsRUFBSWdOLEVBQUUxTyxPQUFRMEIsSUFBSzJILEVBQUVySixPQUFTLElBQU1xSixFQUFJd3FFLEdBQUd4cUUsSUFBS0EsRUFBSXlxRSxHQUFHcGxFLEVBQUV2SixJQUFJekQsR0FBSTJILEdBQ3pGLE9BQU93cUUsR0FBR3hxRSxHQUcyRCxTQUFTeXFFLEdBQUdwbEUsRUFBR3JGLEdBQ3BGLElBQUssSUFBSTNILEVBQUkySCxFQUFHK0csRUFBSTFCLEVBQUUxTyxPQUFRTCxFQUFJLEVBQUdBLEVBQUl5USxFQUFHelEsSUFBSyxDQUM3QyxJQUFJNkIsRUFBSWtOLEVBQUVrMUIsT0FBT2prQyxHQUNqQixPQUFRNkIsR0FDTixJQUFLLEtBQ0hFLEdBQUssS0FDTCxNQUVGLElBQUssSUFDSEEsR0FBSyxLQUNMLE1BRUYsUUFDRUEsR0FBS0YsR0FHYixPQUFPRSxFQUcyQyxTQUFTbXlFLEdBQUdubEUsR0FDOUQsT0FBT0EsRUFBSSxLQVFYLFNBQVNxbEUsR0FBR3JsRSxHQUdaLElBQUlyRixFQUFJcUYsRUFBRTFPLE9BQ1YsR0FBSSxHQUFFcUosR0FBSyxHQUFJLElBQU1BLEVBQUcsT0FBTyxHQUFFLE1BQVFxRixFQUFFazFCLE9BQU8sSUFBTSxNQUFRbDFCLEVBQUVrMUIsT0FBTyxJQUFLLEdBQUVxdkIsSUFHNUUsSUFBSyxJQUFJdnhELEVBQUkySCxFQUFJLEVBQUcrRyxFQUFJLEdBQUl6USxFQUFJLEdBQUk2QixFQUFJLEVBQUdBLEVBQUk2SCxHQUFLLENBR3BELElBQUl1bUIsRUFBSWxoQixFQUFFaVIsUUFBUSxJQUFLbmUsR0FDdkIsUUFBU291QixFQUFJLEdBQUtBLEVBQUlsdUIsSUFBTSxLQUFLZ04sRUFBRWsxQixPQUFPaFUsRUFBSSxJQUM1QyxJQUFLLElBQ0gsSUFBSWpoQixFQUFJRCxFQUFFa2pCLFVBQVVwd0IsRUFBR291QixHQUFJemlCLE9BQUksRUFDL0IsSUFBTXhOLEVBQUVLLE9BR1JtTixFQUFJd0IsR0FBS3hCLEVBQUl4TixHQUFLZ1AsRUFBR2hQLEVBQUksSUFBS3lRLEVBQUV0UixLQUFLcU8sR0FDckMsTUFFRixJQUFLLElBQ0h4TixHQUFLK08sRUFBRWtqQixVQUFVcHdCLEVBQUdvdUIsR0FBSWp3QixHQUFLLEtBQzdCLE1BRUYsSUFBSyxJQUVIQSxHQUFLK08sRUFBRWtqQixVQUFVcHdCLEVBQUdvdUIsRUFBSSxHQUN4QixNQUVGLFFBQ0UsS0FFSnB1QixFQUFJb3VCLEVBQUksRUFFWixPQUFPLElBQUksR0FBRXhmLEdBbUJzQyxJQUFJcXFDLEdBQUssU0FBUy9yQyxHQUNyRXJQLEtBQUt3MEUsR0FBS25sRSxHQUd1RCxTQUFTa3JDLEdBQUdsckMsRUFBR3JGLEdBQ2hGLEdBQUlBLEVBQUVOLFNBQVUsT0FBTyxTQUFTMkYsRUFBR3JGLEVBQUczSCxHQUNsQyxJQUFJME8sRUFBSSswQixHQUFHejJCLEVBQUdyRixFQUFFdEgsTUFBT3BDLEVBQUkwa0MsR0FBR2g3QixFQUFFa2hFLFlBQWEvb0UsRUFBSSxJQUFJNDFELEdBQUcsQ0FDcERvUixTQUFVLENBQ05DLE9BQVFwL0QsRUFBRW8vRCxVQUdsQixPQUFPLElBQUluVSxHQUFHbGtELEVBQUd6USxFQUFHNkIsRUFBRyxDQUNuQmtxRSx3QkFBeUJocUUsSUFQVixDQVNyQmdOLEVBQUVtbEUsR0FBSXhxRSxFQUFFTixXQUFZTSxFQUFFcWlFLHVCQUN4QixHQUFJcmlFLEVBQUUycUUsV0FBWSxDQUNkLElBQUl0eUUsRUFBSSxHQUFFcy9CLEVBQUUzM0IsRUFBRTJxRSxXQUFXajJCLE1BQU8zdEMsRUFBSW1xQyxHQUFHbHhDLEVBQUUycUUsV0FBV3ZCLFVBQ3BELE9BQU8sSUFBSTN4RSxHQUFHWSxFQUFHME8sRUFBRyxDQUNoQnM3RCx3QkFBeUJyaUUsRUFBRXFpRSx3QkFHbkMsR0FBSXJpRSxFQUFFNHFFLGdCQUFpQixDQUNuQixJQUFJdDBFLEVBQUksR0FBRXFoQyxFQUFFMzNCLEVBQUU0cUUsZ0JBQWdCbDJCLE1BQU92OEMsRUFBSSs0QyxHQUFHbHhDLEVBQUU0cUUsZ0JBQWdCN3JFLFNBQzlELE9BQU8sSUFBSTB2RCxHQUFHbjRELEVBQUc2QixHQUVyQixPQUFPLEtBR29DLFNBQVN5NEMsR0FBR3ZyQyxFQUFHckYsRUFBRzNILEdBQzdELElBQUkwTyxFQUFJa3FDLEdBQUc1NEMsR0FBSS9CLEVBQUkwSixFQUFFb0IsSUFBSXN6QyxLQUFLeFAsSUFBSTZGLElBQ2xDLEdBQUkvcUMsYUFBYWlyRCxHQUFJLENBQ2pCLElBQUk5eUQsRUFBSSxTQUFTa04sRUFBR3JGLEdBQ2hCLE1BQU8sQ0FDSHRILEtBQU0rakMsR0FBR3AzQixFQUFHckYsRUFBRW9CLEtBQ2RnK0QsT0FBUXAvRCxFQUFFMHdELEtBQUt5TyxTQUFTQyxPQUN4QjhCLFdBQVlqbkMsR0FBRzUwQixFQUFHckYsRUFBRWpCLFFBQVEyRyxNQUo1QixDQU1OTCxFQUFFbWxFLEdBQUl4cUUsR0FBSXVtQixFQUFJdm1CLEVBQUVxaUUsc0JBQ2xCLE9BQU8sSUFBSTF1QixHQUNZLEtBQ0wsS0FBTXg3QyxFQUFHb3VCLEVBQUd4ZixFQUFHelEsR0FFckMsR0FBSTBKLGFBQWF2SSxHQUFJLENBQ2pCLElBQUk2TixFQUFJdEYsRUFBRW9CLElBQUlzekMsS0FBSzNKLElBQUtqbkMsRUFBSStzQyxHQUFHN3dDLEVBQUVqQixTQUFVeU0sRUFBSXhMLEVBQUVxaUUsc0JBQ2pELE9BQU8sSUFBSTF1QixHQUNZLEtBQU0sSUFBSVgsR0FBRzF0QyxFQUFHeEIsR0FDdkIsS0FBTTBILEVBQUd6RSxFQUFHelEsR0FFaEMsR0FBSTBKLGFBQWF5dUQsR0FBSSxDQUNqQixJQUFJbm9DLEVBQUl0bUIsRUFBRW9CLElBQUlzekMsS0FBSzNKLElBQUs5a0MsRUFBSTRxQyxHQUFHN3dDLEVBQUVqQixTQUNqQyxPQUFPLElBQUk0MEMsR0FBRyxJQUFJVixHQUFHM3NCLEVBQUdyZ0IsR0FDTixLQUNGLE1BQ2EsRUFBSWMsRUFBR3pRLEdBRXhDLE9BQU8sS0FHWCxTQUFTMjZDLEdBQUc1ckMsR0FDUixJQUFJckYsRUFBSXFGLEVBQUVLLElBQ1YsTUFBTyxDQUFFMUYsRUFBRTY0RCxRQUFTNzRELEVBQUU4NEQsYUFHMUIsU0FBUy9uQixHQUFHMXJDLEdBQ1IsSUFBSXJGLEVBQUksSUFBSThtQixHQUFFemhCLEVBQUUsR0FBSUEsRUFBRSxJQUN0QixPQUFPd21CLEdBQUVobEIsRUFBRTdHLEdBR2YsU0FBUzZ3QyxHQUFHeHJDLEdBQ1IsSUFBSXJGLEVBQUlxRixFQUFFSyxJQUNWLE9BQU8sSUFBSWd1QyxHQUFHMXpDLEVBQUU2NEQsUUFBUzc0RCxFQUFFODRELGFBRy9CLFNBQVM1bkIsR0FBRzdyQyxHQUNSLElBQUlyRixFQUFJLElBQUk4bUIsR0FBRXpoQixFQUFFd3pELFFBQVN4ekQsRUFBRXl6RCxhQUMzQixPQUFPanRDLEdBQUVobEIsRUFBRTdHLEdBSXVDLFNBQVMweEMsR0FBR3JzQyxFQUFHckYsR0FDakUsSUFBSTNILEdBQUsySCxFQUFFK29FLGVBQWlCLElBQUk5eUUsS0FBSSxTQUFVK0osR0FDMUMsT0FBT3U5QixHQUFHbDRCLEVBQUVtbEUsR0FBSXhxRSxNQUNmK0csRUFBSS9HLEVBQUVncEUsVUFBVS95RSxLQUFJLFNBQVUrSixHQUMvQixPQUFPdTlCLEdBQUdsNEIsRUFBRW1sRSxHQUFJeHFFLE1BQ2YxSixFQUFJd3dCLEdBQUVpeUMsV0FBVy80RCxFQUFFNnFFLGtCQUN4QixPQUFPLElBQUloQyxHQUFHN29FLEVBQUU4b0UsUUFBU3h5RSxFQUFHK0IsRUFBRzBPLEdBR08sU0FBU3FvQyxHQUFHL3BDLEdBQ2xELElBQUlyRixFQUFHM0gsRUFBRzBPLEVBQUltcUMsR0FBRzdyQyxFQUFFK2pFLFVBQVc5eUUsT0FBSSxJQUFXK08sRUFBRTYxRCw2QkFBK0JocUIsR0FBRzdyQyxFQUFFNjFELDhCQUFnQ3J2QyxHQUFFbmUsTUFDckgsWUFBTyxJQUFXckksRUFBRTdHLE1BQU02aUUsV0FBYSxHQUFFLEtBQU9ocEUsRUFBSWdOLEVBQUU3RyxPQUFPNmlFLFVBQVUxcUUsUUFDdkVxSixFQUFJZ3ZELEdBQUdELEdBQUc5ekIsR0FBRzVpQyxFQUFFZ3BFLFVBQVUsT0FBU3JoRSxFQUFJLFNBQVNxRixHQUMzQyxPQUFPMnBELEdBQUduekIsR0FBR3gyQixJQURxQixDQUVwQ0EsRUFBRTdHLE9BQVEsSUFBSXU4RCxHQUFHLzZELEVBQUdxRixFQUFFMjFELFNBQVUsRUFBaUIzMUQsRUFBRXlsRSx5QkFBMEIvakUsRUFBR3pRLEVBQUdra0UsR0FBR0MsaUJBQWlCcDFELEVBQUU4MUQsY0FJL0csU0FBU3pyQixHQUFHcnFDLEVBQUdyRixHQUNYLElBQUkzSCxFQUFHME8sRUFBSThwQyxHQUFHN3dDLEVBQUVvNkQsSUFBSzlqRSxFQUFJdTZDLEdBQUc3d0MsRUFBRWs3RCw4QkFDOUI3aUUsRUFBSWtpRSxHQUFHdjZELEVBQUVSLFFBQVVvL0IsR0FBR3Y1QixFQUFFbWxFLEdBQUl4cUUsRUFBRVIsUUFBVXkrQixHQUFHNTRCLEVBQUVtbEUsR0FBSXhxRSxFQUFFUixRQUduRCxJQUFJckgsRUFBSTZILEVBQUVtN0QsWUFBWVIsV0FFbEIsT0FBTyxJQUFJaG9CLEdBQUczeUMsRUFBRWc3RCxTQUFVaEIsR0FBR2g2RCxFQUFFUixRQUFTdUgsRUFBRzVPLEVBQUc2SCxFQUFFaTdELGVBQWdCM2tFLEVBQUcrQixHQVd2RSxTQUFTbTRDLEdBQUduckMsR0FDWixJQUFJckYsRUFBSTY3QixHQUFHLENBQ1AwbEMsT0FBUWw4RCxFQUFFazhELE9BQ1ZELGdCQUFpQmo4RCxFQUFFaThELGtCQUV2QixNQUFPLFNBQVdqOEQsRUFBRWs5RCxVQUFZM1IsR0FBRzV3RCxFQUFHQSxFQUFFdTVELE1BQU8sS0FBa0J2NUQsRUFvQkgsSUFBSW0wQyxHQUFtQixXQUNyRixTQUFTOXVDLEVBS1RBLEVBQUdyRixFQUFHM0gsRUFBRzBPLEdBQ0wvUSxLQUFLKzBFLE9BQVMxbEUsRUFBR3JQLEtBQUttc0UsV0FBYW5pRSxFQUFHaEssS0FBS2k4QyxHQUFLNTVDLEVBQUdyQyxLQUFLaXpFLEdBQUtsaUUsRUFhN0QvUSxLQUFLMnpFLEdBQUssR0FPZCxPQUFPdGtFLEVBQUVta0UsR0FBSyxTQUFTeHBFLEVBQUczSCxFQUFHME8sRUFBR3pRLEdBSzVCLE9BQU8sR0FBRSxLQUFPMEosRUFBRTZnQyxLQUFNLElBQUl4N0IsRUFBRXJGLEVBQUVrb0UsS0FBT2xvRSxFQUFFNmdDLElBQU0sR0FBSXhvQyxFQUFHME8sRUFBR3pRLElBQzFEK08sRUFBRS9NLFVBQVVpeEUsR0FBSyxTQUFTbGtFLEdBQ3pCLElBQUlyRixHQUFJLEVBQUkzSCxFQUFJMnlFLFlBQVlDLE1BQU0sQ0FBRWoxRSxLQUFLKzBFLE9BQVF6ekQsT0FBTzR6RCxtQkFBcUIsQ0FBRWwxRSxLQUFLKzBFLE9BQVF6ekQsT0FBTzZ6RCxvQkFDbkcsT0FBTzc2QixHQUFHanJDLEdBQUd5K0QsR0FBRyxDQUNadm5FLE1BQU9rMEMsR0FBRzI2QixtQkFDVm5ILE1BQU81ckUsSUFDUixTQUFVZ04sRUFBR2hOLEVBQUcwTyxHQUNmL0csR0FBSSxFQUFJK0csRUFBRWhQLFVBQ1ZELE1BQUssV0FDTCxPQUFPa0ksTUFFWnFGLEVBQUUvTSxVQUFVMnhFLEdBQUssU0FBUzVrRSxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUNsQyxJQUFJelEsRUFBSU4sS0FBTW1DLEVBQUlnNUMsR0FBRzlyQyxHQUFJa2hCLEVBQUkrcEIsR0FBR2pyQyxHQVVoQyxPQUFPa2hCLEVBQUV2SCxJQUFJLElBQUlsbkIsTUFBSyxTQUFVd04sR0FDNUIsR0FBRSxpQkFBbUJBLEdBQ3JCLElBQUssSUFBSXhCLEVBQUksSUFBSStrRSxHQUFHdmpFLEVBQUd0RixFQUFHM0gsRUFBRzBPLEdBQUl5RSxFQUFJLFNBQVNuRyxFQUFHckYsRUFBRzNILEdBQ2hELElBQUkwTyxFQUFJMU8sRUFBRTB3RSxjQUFjOXlFLEtBQUksU0FBVStKLEdBQ2xDLE9BQU8yOUIsR0FBR3Q0QixFQUFFbWxFLEdBQUl4cUUsTUFDZjFKLEVBQUkrQixFQUFFMndFLFVBQVUveUUsS0FBSSxTQUFVK0osR0FDL0IsT0FBTzI5QixHQUFHdDRCLEVBQUVtbEUsR0FBSXhxRSxNQUVwQixPQUFPLElBQUl5d0MsR0FBR3p3QyxFQUFHM0gsRUFBRXl3RSxRQUFTendFLEVBQUVxNEMsR0FBR3dvQixXQUFZbnlELEVBQUd6USxHQU5mLENBT25DQSxFQUFFNnJFLFdBQVk3ckUsRUFBRXkwRSxPQUFRam5FLEdBQUl3aUIsRUFBSSxHQUFJcmdCLEVBQUksSUFBSSsyRCxJQUFHLFNBQVUzM0QsRUFBR3JGLEdBQzFELE9BQU8sR0FBRXFGLEVBQUU2NkIsSUFBS2xnQyxFQUFFa2dDLFFBQ2pCMVosRUFBSSxFQUFHdHJCLEVBQUk2TCxFQUFHeWYsRUFBSXRyQixFQUFFdkUsT0FBUTZ2QixJQUFLLENBQ2xDLElBQUkzaUIsRUFBSTNJLEVBQUVzckIsR0FBSS9mLEVBQUlzckMsR0FBRzN3QyxJQUFJOUssRUFBRXkwRSxPQUFRbG5FLEVBQUV6QyxJQUFJc3pDLEtBQU1wdkMsR0FDL0NXLEVBQUlBLEVBQUUrWSxJQUFJbmIsRUFBRXpDLElBQUlzekMsS0FBS3hQLEtBQU01ZSxFQUFFN3dCLEtBQUs4d0IsRUFBRTVLLElBQUluUSxJQUFLOGEsRUFBRTd3QixLQUFLMEMsRUFBRXdqQixJQUFJbFYsRUFBR3NyQyxHQUFHczVCLGNBRXBFLE9BQU9wbEUsRUFBRXRLLFNBQVEsU0FBVXFFLEdBQ3ZCc21CLEVBQUU3d0IsS0FBS2EsRUFBRTI3QyxHQUFHODNCLEdBQUcxa0UsRUFBR3JGLE9BQ2pCcUYsRUFBRTBzQyxJQUFHLFdBQ056N0MsRUFBRXF6RSxHQUFHcmtFLEdBQUt4QixFQUFFM0MsVUFDWDBoRSxHQUFHblYsR0FBR3BuQyxHQUFHeHVCLE1BQUssV0FDZixPQUFPZ00sU0FHaEJ1QixFQUFFL00sVUFBVTR4RSxHQUFLLFNBQVM3a0UsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJckMsS0FDUixPQUFPczZDLEdBQUdqckMsR0FBR3ZKLElBQUlrRSxHQUFHbEksTUFBSyxTQUFVdU4sR0FDL0IsT0FBT0EsR0FBSyxHQUFFQSxFQUFFMGxFLFNBQVcxeUUsRUFBRTB5RSxRQUFTcjVCLEdBQUdyNUMsRUFBRThwRSxXQUFZOThELElBQU0sU0FVckVBLEVBQUUvTSxVQUFVb3hFLEdBQUssU0FBU3JrRSxFQUFHckYsR0FDekIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU9BLEtBQUsyekUsR0FBRzNwRSxHQUFLNmlFLEdBQUdyb0UsUUFBUXhFLEtBQUsyekUsR0FBRzNwRSxJQUFNaEssS0FBS2swRSxHQUFHN2tFLEVBQUdyRixHQUFHbEksTUFBSyxTQUFVdU4sR0FDdEUsR0FBSUEsRUFBRyxDQUNILElBQUkwQixFQUFJMUIsRUFBRWxFLE9BQ1YsT0FBTzlJLEVBQUVzeEUsR0FBRzNwRSxHQUFLK0csRUFBR0EsRUFFeEIsT0FBTyxTQUVaMUIsRUFBRS9NLFVBQVV3eEUsR0FBSyxTQUFTemtFLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQU0rUSxFQUFJL0csRUFBSSxFQUFHMUosRUFBSTAwRSxZQUFZTSxXQUFXLENBQUV0MUUsS0FBSyswRSxPQUFRaGtFLElBQU01TyxFQUFJLEtBQzdFLE9BQU9tNEMsR0FBR2pyQyxHQUFHeStELEdBQUcsQ0FDWnZuRSxNQUFPazBDLEdBQUcyNkIsbUJBQ1ZuSCxNQUFPM3RFLElBQ1IsU0FBVStPLEVBQUdyRixFQUFHMUosR0FDZjBKLEVBQUUrcUUsU0FBVzF5RSxFQUFFMHlFLFNBQVcsR0FBRS9xRSxFQUFFOG9FLFNBQVcvaEUsR0FBSTVPLEVBQUl1NUMsR0FBR3I1QyxFQUFFOHBFLFdBQVluaUUsSUFBSzFKLEVBQUV5QixVQUN6RUQsTUFBSyxXQUNMLE9BQU9LLE1BRVprTixFQUFFL00sVUFBVXN4RSxHQUFLLFNBQVN2a0UsR0FDekIsSUFBSXJGLEVBQUlnckUsWUFBWU8sV0FBVyxDQUFFdjFFLEtBQUsrMEUsT0FBUXp6RCxPQUFPNnpELG9CQUFzQjl5RSxHQUFLLEVBQ2hGLE9BQU9pNEMsR0FBR2pyQyxHQUFHeStELEdBQUcsQ0FDWnZuRSxNQUFPazBDLEdBQUcyNkIsbUJBQ1ZuSCxNQUFPamtFLEVBQ1Bra0UsU0FBUyxJQUNWLFNBQVU3K0QsRUFBR3JGLEVBQUcrRyxHQUNmMU8sRUFBSTJILEVBQUU4b0UsUUFBUy9oRSxFQUFFaFAsVUFDakJELE1BQUssV0FDTCxPQUFPTyxNQUVaZ04sRUFBRS9NLFVBQVUreEUsR0FBSyxTQUFTaGxFLEdBQ3pCLElBQUlyRixFQUFJaEssS0FBTXFDLEVBQUkyeUUsWUFBWUMsTUFBTSxDQUFFajFFLEtBQUsrMEUsUUFBUyxHQUFLLENBQUUvMEUsS0FBSyswRSxPQUFRenpELE9BQU82ekQsb0JBQy9FLE9BQU83NkIsR0FBR2pyQyxHQUFHb3FELEdBQUdoZixHQUFHMjZCLG1CQUFvQi95RSxHQUFHUCxNQUFLLFNBQVV1TixHQUNyRCxPQUFPQSxFQUFFcFAsS0FBSSxTQUFVb1AsR0FDbkIsT0FBT3FzQyxHQUFHMXhDLEVBQUVtaUUsV0FBWTk4RCxVQUdqQ0EsRUFBRS9NLFVBQVV1NkMsR0FBSyxTQUFTeHRDLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQU0rUSxFQUFJZ3JDLEdBQUd5NUIsY0FBY3gxRSxLQUFLKzBFLE9BQVEvcUUsRUFBRTAwQyxNQUFPcCtDLEVBQUkwMEUsWUFBWU0sV0FBV3ZrRSxHQUFJNU8sRUFBSSxHQUdwRixPQUFPZzVDLEdBQUc5ckMsR0FBR3krRCxHQUFHLENBQ3BCRyxNQUFPM3RFLElBQ1IsU0FBVXlRLEVBQUd6USxFQUFHaXdCLEdBQ2YsSUFBSWpoQixFQUFJeUIsRUFBRSxHQUFJakQsRUFBSWlELEVBQUUsR0FBSXlFLEVBQUl6RSxFQUFFLEdBQUl1ZixFQUFJb2tELEdBQUc1bUUsR0FRN0IsR0FBSXdCLElBQU1qTixFQUFFMHlFLFFBQVUvcUUsRUFBRTAwQyxLQUFLaWpCLFFBQVFyeEMsR0FFakQsT0FBT2dxQixHQUFHanJDLEdBQUd2SixJQUFJMFAsR0FBRzFULE1BQUssU0FBVXVOLEdBQy9CLElBQUtBLEVBQUcsTUFBTSxLQUNkLEdBQUVBLEVBQUUwbEUsU0FBVzF5RSxFQUFFMHlFLFFBQVM1eUUsRUFBRTFDLEtBQUtpOEMsR0FBR3I1QyxFQUFFOHBFLFdBQVk5OEQsT0FFdERraEIsRUFBRXh1QixVQUNGRCxNQUFLLFdBQ0wsT0FBT0ssTUFFWmtOLEVBQUUvTSxVQUFVMDRDLEdBQUssU0FBUzNyQyxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUFNK1EsRUFBSSxJQUFJaTJELEdBQUcsSUFBSTFtRSxFQUFJLEdBQ2pDLE9BQU8wSixFQUFFckUsU0FBUSxTQUFVcUUsR0FDdkIsSUFBSTdILEVBQUk0NUMsR0FBR3k1QixjQUFjbnpFLEVBQUUweUUsT0FBUS9xRSxFQUFFMDBDLE1BQU9udUIsRUFBSXlrRCxZQUFZTSxXQUFXbnpFLEdBQUltTixFQUFJNnJDLEdBQUc5ckMsR0FBR3krRCxHQUFHLENBQ3BGRyxNQUFPMTlDLElBQ1IsU0FBVWxoQixFQUFHL08sRUFBRzZCLEdBQ2YsSUFBSW91QixFQUFJbGhCLEVBQUUsR0FBSUMsRUFBSUQsRUFBRSxHQUFJdkIsRUFBSXVCLEVBQUUsR0FBSW1HLEVBQUlrL0QsR0FBR3BsRSxHQVF6QmloQixJQUFNbHVCLEVBQUUweUUsUUFBVS9xRSxFQUFFMDBDLEtBQUtpakIsUUFBUW5zRCxHQUFLekUsRUFBSUEsRUFBRWlZLElBQUlsYixHQUFLM0wsRUFBRUosVUFFM0V6QixFQUFFYixLQUFLNlAsTUFDTnU5RCxHQUFHblYsR0FBR3AzRCxHQUFHd0IsTUFBSyxXQUNmLE9BQU9PLEVBQUVreUUsR0FBR2xsRSxFQUFHMEIsT0FFcEIxQixFQUFFL00sVUFBVTQ1QyxHQUFLLFNBQVM3c0MsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJckMsS0FBTStRLEVBQUkvRyxFQUFFMDBDLEtBQU1wK0MsRUFBSXlRLEVBQUVwUSxPQUFTLEVBQUd3QixFQUFJNDVDLEdBQUd5NUIsY0FBY3gxRSxLQUFLKzBFLE9BQVFoa0UsR0FBSXdmLEVBQUl5a0QsWUFBWU0sV0FBV256RSxHQUFJbU4sRUFBSSxJQUFJMDNELEdBQUcsSUFDNUgsT0FBTzdyQixHQUFHOXJDLEdBQUd5K0QsR0FBRyxDQUNaRyxNQUFPMTlDLElBQ1IsU0FBVWxoQixFQUFHckYsRUFBRzdILEdBQ2YsSUFBSW91QixFQUFJbGhCLEVBQUUsR0FBSXZCLEVBQUl1QixFQUFFLEdBQUltRyxFQUFJbkcsRUFBRSxHQUFJaWhCLEVBQUlva0QsR0FBRzVtRSxHQUN6Q3lpQixJQUFNbHVCLEVBQUUweUUsUUFBVWhrRSxFQUFFbzVCLEVBQUU3WixHQU10QkEsRUFBRTN2QixTQUFXTCxJQUFNZ1AsRUFBSUEsRUFBRTBaLElBQUl4VCxJQUFNclQsRUFBRUosVUFDckNELE1BQUssV0FDTCxPQUFPTyxFQUFFa3lFLEdBQUdsbEUsRUFBR0MsT0FFcEJELEVBQUUvTSxVQUFVaXlFLEdBQUssU0FBU2xsRSxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUFNK1EsRUFBSSxHQUFJelEsRUFBSSxHQUUxQixPQUFPMEosRUFBRXJFLFNBQVEsU0FBVXFFLEdBQ3ZCMUosRUFBRWIsS0FBSzY2QyxHQUFHanJDLEdBQUd2SixJQUFJa0UsR0FBR2xJLE1BQUssU0FBVXVOLEdBQy9CLEdBQUksT0FBU0EsRUFBRyxNQUFNLEtBQ3RCLEdBQUVBLEVBQUUwbEUsU0FBVzF5RSxFQUFFMHlFLFFBQVNoa0UsRUFBRXRSLEtBQUtpOEMsR0FBR3I1QyxFQUFFOHBFLFdBQVk5OEQsV0FFckR3OUQsR0FBR25WLEdBQUdwM0QsR0FBR3dCLE1BQUssV0FDZixPQUFPaVAsTUFFWjFCLEVBQUUvTSxVQUFVNnhFLEdBQUssU0FBUzlrRSxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU82OUMsR0FBR3h1QyxFQUFFb2xFLEdBQUl6MEUsS0FBSyswRSxPQUFRL3FFLEdBQUdsSSxNQUFLLFNBQVVpUCxHQUMzQyxPQUFPMUIsRUFBRTBzQyxJQUFHLFdBQ1IxNUMsRUFBRXF5RSxHQUFHMXFFLEVBQUU4b0UsWUFDTmpHLEdBQUdsbkUsUUFBUW9MLEdBQUcsU0FBVS9HLEdBQ3pCLE9BQU8zSCxFQUFFNHdFLEdBQUd6WCxHQUFHbnNELEVBQUdyRixVQWE5QnFGLEVBQUUvTSxVQUFVb3lFLEdBQUssU0FBU3JsRSxVQUNmclAsS0FBSzJ6RSxHQUFHdGtFLElBQ2hCQSxFQUFFL00sVUFBVSs1RCxHQUFLLFNBQVNodEQsR0FDekIsSUFBSXJGLEVBQUloSyxLQUNSLE9BQU9BLEtBQUt1ekUsR0FBR2xrRSxHQUFHdk4sTUFBSyxTQUFVTyxHQUM3QixJQUFLQSxFQUFHLE9BQU93cUUsR0FBR3JvRSxVQUdOLElBQUl1TSxFQUFJaWtFLFlBQVlNLFdBQVd2NUIsR0FBRzA1QixjQUFjenJFLEVBQUUrcUUsU0FBVXowRSxFQUFJLEdBQzVFLE9BQU82NkMsR0FBRzlyQyxHQUFHeStELEdBQUcsQ0FDWkcsTUFBT2w5RCxJQUNSLFNBQVUxQixFQUFHaE4sRUFBRzBPLEdBQ2YsR0FBSTFCLEVBQUUsS0FBT3JGLEVBQUUrcUUsT0FBUSxDQUNuQixJQUFJNXlFLEVBQUl1eUUsR0FBR3JsRSxFQUFFLElBQ2IvTyxFQUFFYixLQUFLMEMsUUFDSjRPLEVBQUVoUCxVQUNURCxNQUFLLFdBQ0wsR0FBRSxJQUFNeEIsRUFBRUssZUFHbkIwTyxFQUFFL00sVUFBVW82RCxHQUFLLFNBQVNydEQsRUFBR3JGLEdBQzVCLE9BQU8wd0MsR0FBR3JyQyxFQUFHclAsS0FBSyswRSxPQUFRL3FFLElBSTlCcUYsRUFBRS9NLFVBQVV5NUQsR0FBSyxTQUFTMXNELEdBQ3RCLElBQUlyRixFQUFJaEssS0FDUixPQUFPczdDLEdBQUdqc0MsR0FBR3ZKLElBQUk5RixLQUFLKzBFLFFBQVFqekUsTUFBSyxTQUFVdU4sR0FDekMsT0FBT0EsR0FBSyxJQUFJK3RDLEdBQUdwekMsRUFBRStxRSxRQUFTLEVBQ1QsUUFFMUIxbEUsRUF6UGtGLEdBK1ByRixTQUFTcXJDLEdBQUdyckMsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFJME8sRUFBSWdyQyxHQUFHeTVCLGNBQWN4ckUsRUFBRzNILEVBQUVxOEMsTUFBT3ArQyxFQUFJeVEsRUFBRSxHQUFJNU8sRUFBSTZ5RSxZQUFZTSxXQUFXdmtFLEdBQUl3ZixHQUFJLEVBQ2xGLE9BQU80cUIsR0FBRzlyQyxHQUFHeStELEdBQUcsQ0FDWkcsTUFBTzlyRSxFQUNQMHJFLElBQUksSUFDTCxTQUFVeCtELEVBQUdoTixFQUFHME8sR0FDZixJQUFJNU8sRUFBSWtOLEVBQUUsR0FBSUMsRUFBSUQsRUFBRSxHQUNwQkEsRUFBRSxHQUNGbE4sSUFBTTZILEdBQUtzRixJQUFNaFAsSUFBTWl3QixHQUFJLEdBQUt4ZixFQUFFaFAsVUFDbENELE1BQUssV0FDTCxPQUFPeXVCLEtBUVgsU0FBU3N0QixHQUFHeHVDLEVBQUdyRixFQUFHM0gsR0FDbEIsSUFBSTBPLEVBQUkxQixFQUFFeEksTUFBTTR6QyxHQUFHNXpDLE9BQVF2RyxFQUFJK08sRUFBRXhJLE1BQU1rMUMsR0FBR2wxQyxPQUFRMUUsRUFBSSxHQUFJb3VCLEVBQUl5a0QsWUFBWVUsS0FBS3J6RSxFQUFFeXdFLFNBQVV4akUsRUFBSSxFQUFHeEIsRUFBSWlELEVBQUUrOEQsR0FBRyxDQUN2R0csTUFBTzE5QyxJQUNSLFNBQVVsaEIsRUFBR3JGLEVBQUczSCxHQUNmLE9BQU9pTixJQUFLak4sRUFBRTJYLFlBRWxCN1gsRUFBRTFDLEtBQUtxTyxFQUFFaE0sTUFBSyxXQUNWLEdBQUUsSUFBTXdOLE9BRVosSUFBSyxJQUFJa0csRUFBSSxHQUFJOGEsRUFBSSxFQUFHcmdCLEVBQUk1TixFQUFFMndFLFVBQVcxaUQsRUFBSXJnQixFQUFFdFAsT0FBUTJ2QixJQUFLLENBQ3hELElBQUlFLEVBQUl2Z0IsRUFBRXFnQixHQUFJcHJCLEVBQUk2MkMsR0FBRzN3QyxJQUFJcEIsRUFBR3dtQixFQUFFcGxCLElBQUlzekMsS0FBTXI4QyxFQUFFeXdFLFNBQzFDM3dFLEVBQUUxQyxLQUFLYSxFQUFFMFosT0FBTzlVLElBQUtzUSxFQUFFL1YsS0FBSyt3QixFQUFFcGxCLEtBRWxDLE9BQU95aEUsR0FBR25WLEdBQUd2MUQsR0FBR0wsTUFBSyxXQUNqQixPQUFPMFQsS0FNWCxTQUFTOGtDLEdBQUdqckMsR0FDWixPQUFPZ3RELEdBQUdoRyxHQUFHaG5ELEVBQUdvckMsR0FBRzV6QyxPQUtuQixTQUFTczBDLEdBQUc5ckMsR0FDWixPQUFPZ3RELEdBQUdoRyxHQUFHaG5ELEVBQUcwc0MsR0FBR2wxQyxPQUtuQixTQUFTeTBDLEdBQUdqc0MsR0FDWixPQUFPZ3RELEdBQUdoRyxHQUFHaG5ELEVBQUcrdEMsR0FBR3YyQyxPQXNCbkIsSUFBSWkwQyxHQUFtQixXQUt2QixTQUFTenJDLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBS21zRSxXQUFhOThELEVBQUdyUCxLQUFLaThDLEdBQUtqeUMsRUFRbkMsT0FBT3FGLEVBQUUvTSxVQUFVNjZDLEdBQUssU0FBUzl0QyxFQUFHckYsRUFBRzNILEdBQ25DLE9BQU9vM0MsR0FBR3BxQyxHQUFHc1csSUFBSS9rQixHQUFHb0osR0FBSTNILElBUTVCZ04sRUFBRS9NLFVBQVVxN0MsR0FBSyxTQUFTdHVDLEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSW8zQyxHQUFHcHFDLEdBQUkwQixFQUFJblEsR0FBR29KLEdBQ3RCLE9BQU8zSCxFQUFFMlgsT0FBT2pKLElBUXBCMUIsRUFBRS9NLFVBQVVxekUsZUFBaUIsU0FBU3RtRSxFQUFHckYsR0FDckMsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU9BLEtBQUs0MUUsWUFBWXZtRSxHQUFHdk4sTUFBSyxTQUFVaVAsR0FDdEMsT0FBT0EsRUFBRThrRSxVQUFZN3JFLEVBQUczSCxFQUFFMjZELEdBQUczdEQsRUFBRzBCLE9BRXJDMUIsRUFBRS9NLFVBQVVnNUMsR0FBSyxTQUFTanNDLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQ1IsT0FBT3k1QyxHQUFHcHFDLEdBQUd2SixJQUFJbEYsR0FBR29KLElBQUlsSSxNQUFLLFNBQVV1TixHQUNuQyxPQUFPaE4sRUFBRWs2RCxHQUFHbHRELE9BU3BCQSxFQUFFL00sVUFBVTg0RCxHQUFLLFNBQVMvckQsRUFBR3JGLEdBQ3pCLElBQUkzSCxFQUFJckMsS0FDUixPQUFPeTVDLEdBQUdwcUMsR0FBR3ZKLElBQUlsRixHQUFHb0osSUFBSWxJLE1BQUssU0FBVXVOLEdBQ25DLElBQUlyRixFQUFJM0gsRUFBRWs2RCxHQUFHbHRELEdBQ2IsT0FBT3JGLEVBQUksQ0FDUDh3QyxHQUFJOXdDLEVBQ0pvYixLQUFNazNCLEdBQUdqdEMsSUFDVCxTQUVUQSxFQUFFL00sVUFBVSt3RSxXQUFhLFNBQVNoa0UsRUFBR3JGLEdBQ3BDLElBQUkzSCxFQUFJckMsS0FBTStRLEVBQUl5MUQsS0FDbEIsT0FBT3htRSxLQUFLdTdELEdBQUdsc0QsRUFBR3JGLEdBQUcsU0FBVXFGLEVBQUdyRixHQUM5QixJQUFJMUosRUFBSStCLEVBQUVrNkQsR0FBR3Z5RCxHQUNiK0csRUFBSUEsRUFBRXl6RCxHQUFHbjFELEVBQUcvTyxNQUNad0IsTUFBSyxXQUNMLE9BQU9pUCxNQVdmMUIsRUFBRS9NLFVBQVVzNkQsR0FBSyxTQUFTdnRELEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSXJDLEtBQU0rUSxFQUFJeTFELEtBQU1sbUUsRUFBSSxJQUFJaWxFLEdBQUcsR0FBRWhqQyxHQUNyQyxPQUFPdmlDLEtBQUt1N0QsR0FBR2xzRCxFQUFHckYsR0FBRyxTQUFVcUYsRUFBR3JGLEdBQzlCLElBQUk3SCxFQUFJRSxFQUFFazZELEdBQUd2eUQsR0FDYjdILEdBQUs0TyxFQUFJQSxFQUFFeXpELEdBQUduMUQsRUFBR2xOLEdBQUk3QixFQUFJQSxFQUFFa2tFLEdBQUduMUQsRUFBR2l0QyxHQUFHdHlDLE1BQVErRyxFQUFJQSxFQUFFeXpELEdBQUduMUQsRUFBRyxNQUFPL08sRUFBSUEsRUFBRWtrRSxHQUFHbjFELEVBQUcsT0FDM0V2TixNQUFLLFdBQ0wsTUFBTyxDQUNIODVELEdBQUk3cUQsRUFDSm1yRCxHQUFJNTdELE9BR2IrTyxFQUFFL00sVUFBVWk1RCxHQUFLLFNBQVNsc0QsRUFBR3JGLEVBQUczSCxHQUMvQixHQUFJMkgsRUFBRXMrQyxJQUFLLE9BQU91a0IsR0FBR3JvRSxVQUNyQixJQUFJdU0sRUFBSWlrRSxZQUFZQyxNQUFNanJFLEVBQUVpOUQsUUFBUXZvQixLQUFLM0osSUFBSy9xQyxFQUFFazlELE9BQU94b0IsS0FBSzNKLEtBQU16MEMsRUFBSTBKLEVBQUV5N0QsS0FBTXRqRSxFQUFJN0IsRUFBRTRsRSxLQUNwRixPQUFPenNCLEdBQUdwcUMsR0FBR3krRCxHQUFHLENBQ1pHLE1BQU9sOUQsSUFDUixTQUFVMUIsRUFBR3JGLEVBQUcrRyxHQUVmLElBQUssSUFBSXdmLEVBQUksR0FBRW9SLEVBQUV0eUIsR0FBSWxOLEdBQUssR0FBRW9nQyxFQUFFcGdDLEVBQUdvdUIsR0FBSyxHQUFLbHVCLEVBQUVGLEVBQUcsTUFBT0EsRUFBSTdCLEVBQUU0bEUsS0FDN0QvakUsR0FBS0EsRUFBRXcvRCxRQUFRcHhDLEtBRWZsdUIsRUFBRUYsRUFBRzZILEdBQUk3SCxFQUFJN0IsRUFBRTZsRSxLQUFPN2xFLEVBQUU0bEUsS0FBTyxNQUUvQi9qRSxFQUFJNE8sRUFBRTJuRCxHQUFHdjJELEVBQUV1OEMsS0FBSzNKLEtBQU9oa0MsRUFBRWhQLFVBQ3pCRCxNQUFLLFdBR0wsS0FBTUssR0FBS0UsRUFBRUYsRUFBRyxNQUFPQSxFQUFJN0IsRUFBRTZsRSxLQUFPN2xFLEVBQUU0bEUsS0FBTyxTQUVsRDcyRCxFQUFFL00sVUFBVXM3QyxHQUFLLFNBQVN2dUMsRUFBR3JGLEVBQUczSCxHQUMvQixJQUFJME8sRUFBSS9RLEtBQU1NLEVBQUkwbEUsS0FBTTdqRSxFQUFJNkgsRUFBRTAwQyxLQUFLLzlDLE9BQVMsRUFBRzR2QixFQUFJLEdBQ25ELEdBQUlsdUIsRUFBRXMvRCxRQUFROXJDLEdBQUVuZSxPQUFRLENBR3BCLElBQUlwSSxFQUFJdEYsRUFBRTAwQyxLQUFLM0osSUFDZnhrQixFQUFFMDlDLE1BQVErRyxZQUFZTSxXQUFXaG1FLE9BQzlCLENBSUgsSUFBSXhCLEVBQUk5RCxFQUFFMDBDLEtBQUszSixJQUFLdi9CLEVBQUl5bEMsR0FBRzU0QyxHQUMzQmt1QixFQUFFMDlDLE1BQVErRyxZQUFZTSxXQUFXLENBQUV4bkUsRUFBRzBILElBQzFCLEdBQUsrYSxFQUFFaHFCLE1BQVFvM0MsR0FBR200Qix3QkFFbEMsT0FBT3I4QixHQUFHcHFDLEdBQUd5K0QsR0FBR3Y5QyxHQUFHLFNBQVVsaEIsRUFBR2hOLEVBQUdrdUIsR0FNL0IsR0FBSWxoQixFQUFFMU8sU0FBV3dCLEVBQUcsQ0FDaEIsSUFBSW1OLEVBQUlpckMsR0FBR3hwQyxFQUFFbzdELFdBQVk5cEUsR0FDekIySCxFQUFFMDBDLEtBQUt2VSxFQUFFNzZCLEVBQUVsRSxJQUFJc3pDLE1BQVFwdkMsYUFBYTJsRCxJQUFNb0IsR0FBR3JzRCxFQUFHc0YsS0FBT2hQLEVBQUlBLEVBQUVra0UsR0FBR2wxRCxFQUFFbEUsSUFBS2tFLElBQU1paEIsRUFBRXh1QixXQUVuRkQsTUFBSyxXQUNMLE9BQU94QixNQUVaK08sRUFBRS9NLFVBQVV5ekUsR0FBSyxTQUFTMW1FLEdBQ3pCLE9BQU8sSUFBSXNyQyxHQUFHMzZDLE9BQVFxUCxHQUFLQSxFQUFFb3NELEtBQzlCcHNELEVBQUUvTSxVQUFVeTZELEdBQUssU0FBUzF0RCxHQUN6QixPQUFPclAsS0FBSzQxRSxZQUFZdm1FLEdBQUd2TixNQUFLLFNBQVV1TixHQUN0QyxPQUFPQSxFQUFFd21FLGFBRWR4bUUsRUFBRS9NLFVBQVVzekUsWUFBYyxTQUFTdm1FLEdBQ2xDLE9BQU9nc0MsR0FBR2hzQyxHQUFHdkosSUFBSWcyQyxHQUFHMXdDLEtBQUt0SixNQUFLLFNBQVV1TixHQUNwQyxPQUFPLEtBQUlBLEdBQUlBLE1BRXBCQSxFQUFFL00sVUFBVTA2RCxHQUFLLFNBQVMzdEQsRUFBR3JGLEdBQzVCLE9BQU9xeEMsR0FBR2hzQyxHQUFHc1csSUFBSW0yQixHQUFHMXdDLElBQUtwQixJQU03QnFGLEVBQUUvTSxVQUFVaTZELEdBQUssU0FBU2x0RCxHQUN0QixHQUFJQSxFQUFHLENBQ0gsSUFBSXJGLEVBQUl1d0MsR0FBR3Y2QyxLQUFLbXNFLFdBQVk5OEQsR0FDNUIsT0FBT3JGLGFBQWF2SSxJQUFNdUksRUFBRWpCLFFBQVE0NEQsUUFBUTlyQyxHQUFFbmUsT0FBUyxLQUFPMU4sRUFFbEUsT0FBTyxNQUNScUYsRUE1Sm9CLEdBNkp0QnNyQyxHQUFtQixTQUFTM3dDLEdBTTdCLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsSUFBSTBPLEVBQUkvUSxLQUNSLE9BQVErUSxFQUFJL0csRUFBRXpILEtBQUt2QyxPQUFTQSxNQUFNZzJFLEdBQUszbUUsRUFBRzBCLEVBQUUwcUQsR0FBS3A1RCxFQUVqRDBPLEVBQUVrbEUsR0FBSyxJQUFJLElBQUUsU0FBVTVtRSxHQUNuQixPQUFPQSxFQUFFdFAsY0FDVCxTQUFVc1AsRUFBR3JGLEdBQ2IsT0FBT3FGLEVBQUVzeUQsUUFBUTMzRCxNQUNoQitHLEVBRVQsT0FBTyxFQUFFMU8sRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbTNDLEdBQUssU0FBU3BxQyxHQUN0QyxJQUFJckYsRUFBSWhLLEtBQU1xQyxFQUFJLEdBQUkwTyxFQUFJLEVBQUd6USxFQUFJLElBQUkwbUUsSUFBRyxTQUFVMzNELEVBQUdyRixHQUNqRCxPQUFPLEdBQUVxRixFQUFFNjZCLElBQUtsZ0MsRUFBRWtnQyxRQUV0QixPQUFPbHFDLEtBQUtzOEMsR0FBRzMyQyxTQUFRLFNBQVV4RCxFQUFHb3VCLEdBQ2hDLElBQUlqaEIsRUFBSXRGLEVBQUVpc0UsR0FBR253RSxJQUFJM0QsR0FDakIsR0FBSW91QixFQUFFdXFCLEdBQUksQ0FDTixJQUFJaHRDLEVBQUk4c0MsR0FBRzV3QyxFQUFFZ3NFLEdBQUc3SixXQUFZNTdDLEVBQUV1cUIsR0FBSTl3QyxFQUFFd3hDLEdBQUdyNUMsSUFDdkM3QixFQUFJQSxFQUFFMG9CLElBQUk3bUIsRUFBRXU4QyxLQUFLeFAsS0FDakIsSUFBSTE1QixFQUFJOG1DLEdBQUd4dUMsR0FDWGlELEdBQUt5RSxFQUFJbEcsRUFBR2pOLEVBQUU1QyxLQUFLdUssRUFBRWdzRSxHQUFHNzRCLEdBQUc5dEMsRUFBR2xOLEVBQUcyTCxTQUM5QixHQUFJaUQsR0FBS3pCLEVBQUd0RixFQUFFeXhELEdBQUksQ0FLckIsSUFBSW5yQyxFQUFJc3FCLEdBQUc1d0MsRUFBRWdzRSxHQUFHN0osV0FBWSxJQUFJMXFFLEdBQUdVLEVBQUcwekIsR0FBRW5lLE9BQVExTixFQUFFd3hDLEdBQUdyNUMsSUFDckRFLEVBQUU1QyxLQUFLdUssRUFBRWdzRSxHQUFHNzRCLEdBQUc5dEMsRUFBR2xOLEVBQUdtdUIsU0FDbEJqdUIsRUFBRTVDLEtBQUt1SyxFQUFFZ3NFLEdBQUdyNEIsR0FBR3R1QyxFQUFHbE4sT0FDeEI3QixFQUFFcUYsU0FBUSxTQUFVb0wsR0FDckIxTyxFQUFFNUMsS0FBS3VLLEVBQUVnc0UsR0FBRy81QixHQUFHODNCLEdBQUcxa0UsRUFBRzBCLE9BQ3BCMU8sRUFBRTVDLEtBQUtPLEtBQUtnMkUsR0FBR0wsZUFBZXRtRSxFQUFHMEIsSUFBSzg3RCxHQUFHblYsR0FBR3IxRCxJQUNsREEsRUFBRUMsVUFBVXU3QyxHQUFLLFNBQVN4dUMsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJckMsS0FFQSxPQUFPQSxLQUFLZzJFLEdBQUc1YSxHQUFHL3JELEVBQUdyRixHQUFHbEksTUFBSyxTQUFVdU4sR0FDM0MsT0FBTyxPQUFTQSxHQUFLaE4sRUFBRTR6RSxHQUFHbHdFLElBQUlpRSxFQUFHLEdBQUksT0FBUzNILEVBQUU0ekUsR0FBR2x3RSxJQUFJaUUsRUFBR3FGLEVBQUUrVixNQUFPL1YsRUFBRXlyQyxRQUUxRXo0QyxFQUFFQyxVQUFVNjRDLEdBQUssU0FBUzlyQyxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUdBLE9BQU9BLEtBQUtnMkUsR0FBR3BaLEdBQUd2dEQsRUFBR3JGLEdBQUdsSSxNQUFLLFNBQVV1TixHQUMzQyxJQUFJckYsRUFBSXFGLEVBQUV1c0QsR0FJVixPQUFPdnNELEVBQUU2c0QsR0FBR3YyRCxTQUFRLFNBQVUwSixFQUFHckYsR0FDN0IzSCxFQUFFNHpFLEdBQUdsd0UsSUFBSXNKLEVBQUdyRixNQUNYQSxNQUVWM0gsRUF6RGlCLENBMER0Qjh3RSxJQWNFLFNBQVM5M0IsR0FBR2hzQyxHQUNaLE9BQU9ndEQsR0FBR2hHLEdBQUdobkQsRUFBR3lzQyxHQUFHajFDLE9BS25CLFNBQVM0eUMsR0FBR3BxQyxHQUNaLE9BQU9ndEQsR0FBR2hHLEdBQUdobkQsRUFBR3N1QyxHQUFHOTJDLE9BR3ZCLFNBQVNqRyxHQUFHeU8sR0FDUixPQUFPQSxFQUFFcXZDLEtBQUszSixJQUtkLFNBQVN1SCxHQUFHanRDLEdBQ1osSUFBSXJGLEVBQ0osR0FBSXFGLEVBQUUzRixTQUFVTSxFQUFJcUYsRUFBRTNGLGNBQWUsR0FBSTJGLEVBQUV1bEUsZ0JBQWlCNXFFLEVBQUlxRixFQUFFdWxFLG9CQUFzQixDQUNwRixJQUFLdmxFLEVBQUVzbEUsV0FBWSxNQUFNLEtBQ3pCM3FFLEVBQUlxRixFQUFFc2xFLFdBRVYsT0FBT3R4RSxLQUFLQyxVQUFVMEcsR0FBR3JKLE9BcUJ6QixJQUFJcTdDLEdBQW1CLFdBQ3ZCLFNBQVMzc0MsSUFDTHJQLEtBQUtvMEUsR0FBSyxJQUFJLzJCLEdBRWxCLE9BQU9odUMsRUFBRS9NLFVBQVV5eEUsR0FBSyxTQUFTMWtFLEVBQUdyRixHQUNoQyxPQUFPaEssS0FBS28wRSxHQUFHcHJELElBQUloZixHQUFJNmlFLEdBQUdyb0UsV0FDM0I2SyxFQUFFL00sVUFBVTQ3QyxHQUFLLFNBQVM3dUMsRUFBR3JGLEdBQzVCLE9BQU82aUUsR0FBR3JvRSxRQUFReEUsS0FBS28wRSxHQUFHZixXQUFXcnBFLEtBQ3RDcUYsRUFSb0IsR0FTdEJndUMsR0FBbUIsV0FDcEIsU0FBU2h1QyxJQUNMclAsS0FBS3VHLE1BQVEsR0FHYixPQUFPOEksRUFBRS9NLFVBQVUwbUIsSUFBTSxTQUFTM1osR0FDbEMsSUFBSXJGLEVBQUlxRixFQUFFa29CLElBQUtsMUIsRUFBSWdOLEVBQUU2L0IsSUFBS24rQixFQUFJL1EsS0FBS3VHLE1BQU15RCxJQUFNLElBQUlnOUQsR0FBRyxHQUFFemtDLEdBQUlqaUMsR0FBS3lRLEVBQUVnSSxJQUFJMVcsR0FDdkUsT0FBT3JDLEtBQUt1RyxNQUFNeUQsR0FBSytHLEVBQUVpWSxJQUFJM21CLEdBQUkvQixHQUNsQytPLEVBQUUvTSxVQUFVeVcsSUFBTSxTQUFTMUosR0FDMUIsSUFBSXJGLEVBQUlxRixFQUFFa29CLElBQUtsMUIsRUFBSWdOLEVBQUU2L0IsSUFBS24rQixFQUFJL1EsS0FBS3VHLE1BQU15RCxHQUN6QyxPQUFPK0csR0FBS0EsRUFBRWdJLElBQUkxVyxJQUNuQmdOLEVBQUUvTSxVQUFVK3dFLFdBQWEsU0FBU2hrRSxHQUNqQyxPQUFRclAsS0FBS3VHLE1BQU04SSxJQUFNLElBQUkyM0QsR0FBRyxHQUFFemtDLElBQUl3UyxLQUN2QzFsQyxFQWJpQixHQWNuQjB0QyxHQUFtQixXQUNwQixTQUFTMXRDLEVBQUVBLEdBQ1ByUCxLQUFLbXNFLFdBQWE5OEQsRUFRZixPQUFPQSxFQUFFL00sVUFBVTRxRSxnQkFBa0IsU0FBUzc5RCxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUMxRCxJQUFJelEsRUFBSU4sS0FDUixHQUFFcUMsRUFBSTBPLEdBQUsxTyxHQUFLLEdBQUswTyxHQUFLLElBQzFCLElBQUk1TyxFQUFJLElBQUlrckUsR0FBRyxrQkFBbUJyakUsR0FDbEMzSCxFQUFJLEdBQUswTyxHQUFLLElBQU0sU0FBUzFCLEdBQ3pCQSxFQUFFbkgsa0JBQWtCc3pDLEdBQUczMEMsT0FEUCxDQUVsQndJLEdBQUksU0FBU0EsR0FDWEEsRUFBRW5ILGtCQUFrQmsxQyxHQUFHdjJDLE1BQU8sQ0FDMUI4aUQsUUFBU3ZNLEdBQUd1TSxVQUNadDZDLEVBQUVuSCxrQkFBa0J1eUMsR0FBRzV6QyxNQUFPLENBQzlCOGlELFFBQVNsUCxHQUFHa1AsUUFDWnVzQixlQUFlLElBQ2hCcHVFLFlBQVkyeUMsR0FBRzI2QixtQkFBb0IzNkIsR0FBRzA3QixxQkFBc0IsQ0FDM0RDLFFBQVEsSUFDUi9tRSxFQUFFbkgsa0JBQWtCNnpDLEdBQUdsMUMsT0FSekIsQ0FTSndJLEdBQUkyckMsR0FBRzNyQyxHQUFJLFNBQVNBLEdBQ2xCQSxFQUFFbkgsa0JBQWtCeTFDLEdBQUc5MkMsT0FEZCxDQUVYd0ksSUFHRixJQUFJa2hCLEVBQUlzOEMsR0FBR3JvRSxVQUNYLE9BQU9uQyxFQUFJLEdBQUswTyxHQUFLLElBR3JCLElBQU0xTyxJQUFNLFNBQVNnTixHQUNqQkEsRUFBRWduRSxrQkFBa0JsNUIsR0FBR3QyQyxPQUFRd0ksRUFBRWduRSxrQkFBa0IxNUIsR0FBRzkxQyxPQUFRd0ksRUFBRWduRSxrQkFBa0J4NUIsR0FBR2gyQyxPQUQ3RSxDQUVWd0ksR0FBSTJyQyxHQUFHM3JDLElBQUtraEIsRUFBSUEsRUFBRXp1QixNQUFLLFdBTXJCLE9BQU8sU0FBU3VOLEdBQ1osSUFBSXJGLEVBQUlxRixFQUFFeEksTUFBTWcyQyxHQUFHaDJDLE9BQVF4RSxFQUFJLElBQUl3NkMsR0FDZCxFQUNTLEVBQUdobkIsR0FBRW5lLE1BQU1oSSxJQUN4QixHQUNqQixPQUFPMUYsRUFBRTJiLElBQUlrM0IsR0FBR3p4QyxJQUFLL0ksR0FMbEIsQ0FNTEYsT0FDQUUsRUFBSSxHQUFLME8sR0FBSyxJQUFNLElBQU0xTyxJQU9oQ2t1QixFQUFJQSxFQUFFenVCLE1BQUssV0FDUCxPQUFPLFNBQVN1TixFQUFHckYsR0FDZixPQUFPQSxFQUFFbkQsTUFBTTR6QyxHQUFHNXpDLE9BQU80eUQsS0FBSzMzRCxNQUFLLFNBQVVPLEdBQ3pDZ04sRUFBRWduRSxrQkFBa0I1N0IsR0FBRzV6QyxPQUFRd0ksRUFBRW5ILGtCQUFrQnV5QyxHQUFHNXpDLE1BQU8sQ0FDekQ4aUQsUUFBU2xQLEdBQUdrUCxRQUNadXNCLGVBQWUsSUFDaEJwdUUsWUFBWTJ5QyxHQUFHMjZCLG1CQUFvQjM2QixHQUFHMDdCLHFCQUFzQixDQUMzREMsUUFBUSxJQUVaLElBQUlybEUsRUFBSS9HLEVBQUVuRCxNQUFNNHpDLEdBQUc1ekMsT0FBUXZHLEVBQUkrQixFQUFFcEMsS0FBSSxTQUFVb1AsR0FDM0MsT0FBTzBCLEVBQUU0VSxJQUFJdFcsTUFFakIsT0FBT3c5RCxHQUFHblYsR0FBR3AzRCxNQVhkLENBYUwrTyxFQUFHbE4sT0FDSG91QixFQUFJQSxFQUFFenVCLE1BQUssWUFDWixTQUFTdU4sR0FDTkEsRUFBRW5ILGtCQUFrQit6QyxHQUFHcDFDLE1BQU8sQ0FDMUI4aUQsUUFBUzFOLEdBQUcwTixVQUZuQixDQUlDdDZDLE9BQ0FoTixFQUFJLEdBQUswTyxHQUFLLElBQU13ZixFQUFJQSxFQUFFenVCLE1BQUssV0FDakMsT0FBT3hCLEVBQUVnMkUsNEJBQTRCbjBFLE9BQ25DRSxFQUFJLEdBQUswTyxHQUFLLElBQU13ZixFQUFJQSxFQUFFenVCLE1BQUssV0FDakMsT0FBTyxTQUFTdU4sR0FDWkEsRUFBRW5ILGtCQUFrQjR6QyxHQUFHajFDLE9BRHBCLENBRUx3SSxHQUFJL08sRUFBRWkyRSxrQkFBa0JwMEUsT0FDeEJFLEVBQUksR0FBSzBPLEdBQUssSUFBTXdmLEVBQUlBLEVBQUV6dUIsTUFBSyxXQUNqQyxPQUFPeEIsRUFBRWsyRSxzQkFBc0JyMEUsT0FDN0JFLEVBQUksR0FBSzBPLEdBQUssSUFBTXdmLEVBQUlBLEVBQUV6dUIsTUFBSyxXQUNqQyxPQUFPeEIsRUFBRW0yRSw0QkFBNEJwbkUsRUFBR2xOLE9BQ3RDRSxFQUFJLEdBQUswTyxHQUFLLElBQU13ZixFQUFJQSxFQUFFenVCLE1BQUssWUFJaEMsU0FBU3VOLEdBQ05BLEVBQUV1NkMsaUJBQWlCejFDLFNBQVMsMEJBQTRCOUUsRUFBRWduRSxrQkFBa0IseUJBRC9FLENBRUNobkUsR0FBSSxTQUFTQSxHQUNYLElBQUlyRixFQUFJcUYsRUFBRXJILFlBQVkyMUMsR0FBRzkyQyxPQUN6Qm1ELEVBQUVsQyxZQUFZNjFDLEdBQUcrNEIsY0FBZS80QixHQUFHZzVCLGtCQUFtQixDQUNsRFAsUUFBUSxJQUNScHNFLEVBQUVsQyxZQUFZNjFDLEdBQUdtNEIsd0JBQXlCbjRCLEdBQUdpNUIsNEJBQTZCLENBQzFFUixRQUFRLElBTFYsQ0FPSnBzRSxPQUNBM0gsRUFBSSxJQUFNME8sR0FBSyxLQUFPd2YsRUFBSUEsRUFBRXp1QixNQUFLLFdBQ25DLE9BQU94QixFQUFFdTJFLG9CQUFvQjEwRSxPQUMzQkUsRUFBSSxJQUFNME8sR0FBSyxLQUFPd2YsRUFBSUEsRUFBRXp1QixNQUFLLFlBQ2xDLFNBQVN1TixHQUNOQSxFQUFFbkgsa0JBQWtCZzJDLEdBQUdyM0MsTUFBTyxDQUMxQjhpRCxRQUFTekwsR0FBR3lMLFVBRm5CLENBSUN0NkMsR0FBSSxTQUFTQSxHQUNYQSxFQUFFbkgsa0JBQWtCdXpDLEdBQUc1MEMsTUFBTyxDQUMxQjhpRCxRQUFTbE8sR0FBR2tPLFVBRmQsQ0FJSnQ2QyxPQUNBa2hCLEdBQ1BsaEIsRUFBRS9NLFVBQVVpMEUsa0JBQW9CLFNBQVNsbkUsR0FDeEMsSUFBSXJGLEVBQUksRUFDUixPQUFPcUYsRUFBRXhJLE1BQU04MkMsR0FBRzkyQyxPQUFPaW5FLElBQUcsU0FBVXorRCxFQUFHaE4sR0FDckMySCxHQUFLc3lDLEdBQUdqNkMsTUFDUlAsTUFBSyxXQUNMLElBQUlPLEVBQUksSUFBSXk1QyxHQUFHOXhDLEdBQ2YsT0FBT3FGLEVBQUV4SSxNQUFNaTFDLEdBQUdqMUMsT0FBTzhlLElBQUltMkIsR0FBRzF3QyxJQUFLL0ksT0FFMUNnTixFQUFFL00sVUFBVWcwRSw0QkFBOEIsU0FBU2puRSxHQUNsRCxJQUFJckYsRUFBSWhLLEtBQU1xQyxFQUFJZ04sRUFBRXhJLE1BQU11MkMsR0FBR3YyQyxPQUFRa0ssRUFBSTFCLEVBQUV4SSxNQUFNNHpDLEdBQUc1ekMsT0FDcEQsT0FBT3hFLEVBQUVvM0QsS0FBSzMzRCxNQUFLLFNBQVVPLEdBQ3pCLE9BQU93cUUsR0FBR2xuRSxRQUFRdEQsR0FBRyxTQUFVQSxHQUMzQixJQUFJL0IsRUFBSTAwRSxZQUFZQyxNQUFNLENBQUU1eUUsRUFBRTB5RSxRQUFTLEdBQUssQ0FBRTF5RSxFQUFFMHlFLE9BQVExeUUsRUFBRXkwRSwwQkFDMUQsT0FBTy9sRSxFQUFFMG9ELEdBQUdoZixHQUFHMjZCLG1CQUFvQjkwRSxHQUFHd0IsTUFBSyxTQUFVaVAsR0FDakQsT0FBTzg3RCxHQUFHbG5FLFFBQVFvTCxHQUFHLFNBQVVBLEdBQzNCLEdBQUVBLEVBQUVna0UsU0FBVzF5RSxFQUFFMHlFLFFBQ2pCLElBQUl6MEUsRUFBSW83QyxHQUFHMXhDLEVBQUVtaUUsV0FBWXA3RCxHQUN6QixPQUFPOHNDLEdBQUd4dUMsRUFBR2hOLEVBQUUweUUsT0FBUXowRSxHQUFHd0IsTUFBSyw0QkFVbkR1TixFQUFFL00sVUFBVWswRSxzQkFBd0IsU0FBU25uRSxHQUN6QyxJQUFJckYsRUFBSXFGLEVBQUV4SSxNQUFNczJDLEdBQUd0MkMsT0FBUXhFLEVBQUlnTixFQUFFeEksTUFBTTgyQyxHQUFHOTJDLE9BQzFDLE9BQU93SSxFQUFFeEksTUFBTWcyQyxHQUFHaDJDLE9BQU9mLElBQUkrMkMsR0FBR3p4QyxLQUFLdEosTUFBSyxTQUFVdU4sR0FDaEQsSUFBSTBCLEVBQUksR0FDUixPQUFPMU8sRUFBRXlyRSxJQUFHLFNBQVV6ckUsRUFBRy9CLEdBQ3JCLElBQUk2QixFQUFJLElBQUksR0FBRUUsR0FBSWt1QixFQUFJLFNBQVNsaEIsR0FDM0IsTUFBTyxDQUFFLEVBQUdrbEUsR0FBR2xsRSxJQURHLENBRXBCbE4sR0FDRjRPLEVBQUV0UixLQUFLdUssRUFBRWxFLElBQUl5cUIsR0FBR3p1QixNQUFLLFNBQVVPLEdBQzNCLE9BQU9BLEVBQUl3cUUsR0FBR3JvRSxVQUFZLFNBQVNuQyxHQUMvQixPQUFPMkgsRUFBRTJiLElBQUksSUFBSXczQixHQUFHLEVBQUdvM0IsR0FBR2x5RSxHQUFJZ04sRUFBRTBuRSw4QkFEVixDQUV4QjUwRSxVQUVOTCxNQUFLLFdBQ0wsT0FBTytxRSxHQUFHblYsR0FBRzNtRCxVQUd0QjFCLEVBQUUvTSxVQUFVbTBFLDRCQUE4QixTQUFTcG5FLEVBQUdyRixHQUVyRHFGLEVBQUVuSCxrQkFBa0IwMUMsR0FBRy8yQyxNQUFPLENBQzFCOGlELFFBQVMvTCxHQUFHK0wsVUFFaEIsSUFBSXRuRCxFQUFJMkgsRUFBRW5ELE1BQU0rMkMsR0FBRy8yQyxPQUFRa0ssRUFBSSxJQUFJc3NDLEdBQUkvOEMsRUFBSSxTQUFTK08sR0FDaEQsR0FBSTBCLEVBQUVpWSxJQUFJM1osR0FBSSxDQUNWLElBQUlyRixFQUFJcUYsRUFBRWtvQixJQUFLajNCLEVBQUkrTyxFQUFFNi9CLElBQ3JCLE9BQU83c0MsRUFBRXNqQixJQUFJLENBQ1Q2bEQsYUFBY3hoRSxFQUNkdWhFLE9BQVFnSixHQUFHajBFLE9BTWYsT0FBTzBKLEVBQUVuRCxNQUFNODJDLEdBQUc5MkMsT0FBT2luRSxHQUFHLENBQ2hDRCxJQUFJLElBQ0wsU0FBVXgrRCxFQUFHckYsR0FDWixJQUFJM0gsRUFBSSxJQUFJLEdBQUVnTixHQUNkLE9BQU8vTyxFQUFFK0IsRUFBRTZzQyxRQUNYcHRDLE1BQUssV0FDTCxPQUFPa0ksRUFBRW5ELE1BQU1rMUMsR0FBR2wxQyxPQUFPaW5FLEdBQUcsQ0FDeEJELElBQUksSUFDTCxTQUFVeCtELEVBQUdyRixHQUNacUYsRUFBRSxHQUNGLElBQUloTixFQUFJZ04sRUFBRSxHQUFJMEIsR0FBSzFCLEVBQUUsR0FBSXFsRSxHQUFHcnlFLElBQzVCLE9BQU8vQixFQUFFeVEsRUFBRW0rQixZQUdwQjcvQixFQUFFL00sVUFBVXUwRSxvQkFBc0IsU0FBU3huRSxHQUMxQyxJQUFJckYsRUFBSWhLLEtBQU1xQyxFQUFJZ04sRUFBRXhJLE1BQU04MUMsR0FBRzkxQyxPQUM3QixPQUFPeEUsRUFBRXlyRSxJQUFHLFNBQVV6K0QsRUFBRzBCLEdBQ3JCLElBQUl6USxFQUFJODRDLEdBQUdyb0MsR0FBSTVPLEVBQUl1M0MsR0FBRzF2QyxFQUFFbWlFLFdBQVk3ckUsR0FDcEMsT0FBTytCLEVBQUVzakIsSUFBSXhqQixPQUVsQmtOLEVBbE1pQixHQW1NbkJxdUMsR0FBSyxTQUFTcnVDLEVBQUdyRixHQUNsQmhLLEtBQUs2aUUsUUFBVXh6RCxFQUFHclAsS0FBSzhpRSxZQUFjOTRELEdBQ3RDd3hDLEdBQUssU0FBU25zQyxFQUVqQnJGLEVBQUczSCxHQUNDckMsS0FBS2czRSxRQUFVM25FLEVBQUdyUCxLQUFLaTNFLHdCQUEwQmp0RSxFQUFHaEssS0FBS2szRSxpQkFBbUI3MEUsR0FlaEZtNUMsR0FBRzMwQyxNQUFRLFFBS1gyMEMsR0FBR3B3QyxJQUFNLFFBRVQsSUFBSWd5QyxHQUFLLFNBSVQvdEMsRUFTQXJGLEVBWUEzSCxHQUNJckMsS0FBSyswRSxPQUFTMWxFLEVBQUdyUCxLQUFLODJFLHdCQUEwQjlzRSxFQUFHaEssS0FBS20zRSxnQkFBa0I5MEUsR0FHbEMrNkMsR0FBR3YyQyxNQUFRLGlCQUV2RHUyQyxHQUFHdU0sUUFBVSxTQVNiLElBQUlsUCxHQUFLLFNBSVRwckMsRUFJQXJGLEVBS0EzSCxFQWFBME8sRUFNQXpRLEdBQ0lOLEtBQUsrMEUsT0FBUzFsRSxFQUFHclAsS0FBSzh5RSxRQUFVOW9FLEVBQUdoSyxLQUFLNjBFLGlCQUFtQnh5RSxFQUFHckMsS0FBSyt5RSxjQUFnQmhpRSxFQUNuRi9RLEtBQUtnekUsVUFBWTF5RSxHQUd1Qm02QyxHQUFHNXpDLE1BQVEsWUFFdkQ0ekMsR0FBR2tQLFFBQVUsVUFFYmxQLEdBQUcyNkIsbUJBQXFCLHFCQUV4QjM2QixHQUFHMDdCLHFCQUF1QixDQUFFLFNBQVUsV0FFdEMsSUFBSXA2QixHQUFtQixXQUNuQixTQUFTMXNDLEtBSUYsT0FBT0EsRUFBRW9tRSxjQUFnQixTQUFTcG1FLEdBQ3JDLE1BQU8sQ0FBRUEsSUFNYkEsRUFBRW1tRSxjQUFnQixTQUFTbm1FLEVBQUdyRixHQUMxQixNQUFPLENBQUVxRixFQUFHa2xFLEdBQUd2cUUsS0FNbkJxRixFQUFFakUsSUFBTSxTQUFTaUUsRUFBR3JGLEVBQUczSCxHQUNuQixNQUFPLENBQUVnTixFQUFHa2xFLEdBQUd2cUUsR0FBSTNILElBQ3BCZ04sRUFyQmdCLEdBd0J2QjBzQyxHQUFHbDFDLE1BQVEsb0JBT1hrMUMsR0FBR3M1QixZQUFjLElBQUl0NUIsR0FFckIsSUFBSWlCLEdBQUssU0FBUzN0QyxFQUFHckYsR0FDakJoSyxLQUFLMCtDLEtBQU9ydkMsRUFBR3JQLEtBQUtvekUsU0FBV3BwRSxHQUNoQ2l6QyxHQUFLLFNBQVM1dEMsRUFBR3JGLEdBQ2hCaEssS0FBSzArQyxLQUFPcnZDLEVBQUdyUCxLQUFLK0ksUUFBVWlCLEdBQy9CMnpDLEdBTUgsU0FNQXR1QyxFQUtBckYsRUFLQTNILEVBT0EwTyxFQUtBelEsRUFLQTZCLEdBQ0luQyxLQUFLNDBFLGdCQUFrQnZsRSxFQUFHclAsS0FBSzIwRSxXQUFhM3FFLEVBQUdoSyxLQUFLMEosU0FBV3JILEVBQUdyQyxLQUFLcXNFLHNCQUF3QnQ3RCxFQUMvRi9RLEtBQUtvekUsU0FBVzl5RSxFQUFHTixLQUFLbzNFLFdBQWFqMUUsR0FNckN3N0MsR0FBRzkyQyxNQUFRLGtCQU9mODJDLEdBQUcrNEIsY0FBZ0IsZ0JBQWlCLzRCLEdBQUdnNUIsa0JBQW9CLFdBUTNEaDVCLEdBQUdtNEIsd0JBQTBCLDBCQUEyQm40QixHQUFHaTVCLDRCQUE4QixDQUFFLGFBQWMsWUFLekcsSUFBSTk2QixHQUtKLFNBQVN6c0MsR0FDTHJQLEtBQUs2MUUsU0FBV3htRSxHQUdwQnlzQyxHQUFHajFDLE1BQVEsdUJBQXdCaTFDLEdBQUcxd0MsSUFBTSwwQkFFNUMsSUFBSXV4QyxHQUFLLFNBU1R0dEMsRUFJQXJGLEVBTUEzSCxFQWtCQTBPLEVBZUF6USxFQU1BNkIsRUFRQW91QixHQUNJdndCLEtBQUtnbEUsU0FBVzMxRCxFQUFHclAsS0FBS3EzRSxZQUFjcnRFLEVBQUdoSyxLQUFLb3pFLFNBQVcvd0UsRUFBR3JDLEtBQUttbEUsWUFBY3AwRCxFQUMvRS9RLEtBQUs4MEUseUJBQTJCeDBFLEVBQUdOLEtBQUtrbEUsNkJBQStCL2lFLEVBQUduQyxLQUFLd0ksTUFBUStuQixHQUczRm9zQixHQUFHOTFDLE1BQVEsVUFFWDgxQyxHQUFHZ04sUUFBVSxXQUViaE4sR0FBRzI2QixzQkFBd0Isb0JBTTNCMzZCLEdBQUc0NkIsb0JBQXNCLENBQUUsY0FBZSxZQVkxQyxJQUFJcDZCLEdBQUssU0FJVDl0QyxFQUlBckYsRUFNQTNILEdBQ0lyQyxLQUFLZ2xFLFNBQVczMUQsRUFBR3JQLEtBQUswK0MsS0FBTzEwQyxFQUFHaEssS0FBS2lsRSxlQUFpQjVpRSxHQUdoQjg2QyxHQUFHdDJDLE1BQVEsa0JBRXZEczJDLEdBQUd3TSxRQUFVLENBQUUsV0FBWSxRQUUzQnhNLEdBQUdxNkIscUJBQXVCLHVCQUUxQnI2QixHQUFHczZCLHVCQUF5QixDQUFFLE9BQVEsWUFRdEMsSUFBSTU2QixHQUFLLFNBTVR4dEMsRUFNQXJGLEVBU0EzSCxFQUlBME8sR0FDSS9RLEtBQUswM0UsZ0JBQWtCcm9FLEVBQUdyUCxLQUFLKzJFLDRCQUE4Qi9zRSxFQUFHaEssS0FBSzIzRSwwQkFBNEJ0MUUsRUFDakdyQyxLQUFLNDNFLFlBQWM3bUUsR0FNbkI4ckMsR0FBR3p4QyxJQUFNLGtCQUFtQnl4QyxHQUFHaDJDLE1BQVEsZUFRM0MsSUFBSSsyQyxHQUFLLFNBSVR2dUMsRUFLQXJGLEdBQ0loSyxLQUFLd3JFLGFBQWVuOEQsRUFBR3JQLEtBQUt1ckUsT0FBU3ZoRSxHQUdFLFNBQVNneEMsR0FBRzNyQyxHQUNuREEsRUFBRW5ILGtCQUFrQmkxQyxHQUFHdDJDLE1BQU8sQ0FDMUI4aUQsUUFBU3hNLEdBQUd3TSxVQUNiN2hELFlBQVlxMUMsR0FBR3E2QixxQkFBc0JyNkIsR0FBR3M2Qix1QkFBd0IsQ0FDL0RyQixRQUFRLElBR1ovbUUsRUFBRW5ILGtCQUFrQnkwQyxHQUFHOTFDLE1BQU8sQ0FDMUI4aUQsUUFBU2hOLEdBQUdnTixVQUNiN2hELFlBQVk2MEMsR0FBRzI2QixzQkFBdUIzNkIsR0FBRzQ2QixvQkFBcUIsQ0FDN0RuQixRQUFRLElBQ1IvbUUsRUFBRW5ILGtCQUFrQjIwQyxHQUFHaDJDLE9BRy9CKzJDLEdBQUcvMkMsTUFBUSxvQkFFWCsyQyxHQUFHK0wsUUFBVSxDQUFFLGVBQWdCLFVBRS9CLElBQUkxTixHQUFLLFNBSVQ1c0MsRUFFQXJGLEVBRUEzSCxFQUVBME8sR0FDSS9RLEtBQUs2M0UsU0FBV3hvRSxFQUFHclAsS0FBSzgzRSxhQUFlOXRFLEVBQUdoSyxLQUFLKzNFLGVBQWlCMTFFLEVBQUdyQyxLQUFLZzRFLGFBQWVqbkUsR0FHaERrckMsR0FBR3AxQyxNQUFRLGlCQUV0RG8xQyxHQUFHME4sUUFBVSxXQUViLElBQUl6TCxHQUFLLFNBRVQ3dUMsRUFFQXJGLEVBRUEzSCxHQUNJckMsS0FBS2k0RSxTQUFXNW9FLEVBQUdyUCxLQUFLazRFLFdBQWFsdUUsRUFBR2hLLEtBQUsrSSxRQUFVMUcsR0FHaEI2N0MsR0FBR3IzQyxNQUFRLFVBQVdxM0MsR0FBR3lMLFFBQVUsV0FFOUUsSUFBSWxPLEdBQUssU0FFVHBzQyxFQUVBckYsRUFFQTNILEdBQ0lyQyxLQUFLMEMsS0FBTzJNLEVBQUdyUCxLQUFLb3pFLFNBQVdwcEUsRUFBR2hLLEtBQUttNEUsYUFBZTkxRSxHQUdmbzVDLEdBQUc1MEMsTUFBUSxlQUFnQjQwQyxHQUFHa08sUUFBVSxPQUVuRixJQUFJcE8sR0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUU2QixHQUFHdjJDLE1BQU80ekMsR0FBRzV6QyxNQUFPazFDLEdBQUdsMUMsTUFBTzgyQyxHQUFHOTJDLE1BQU84MUMsR0FBRzkxQyxNQUFPMjBDLEdBQUczMEMsTUFBT2cyQyxHQUFHaDJDLE1BQU9zMkMsR0FBR3QyQyxPQUFTLENBQUVvMUMsR0FBR3AxQyxRQUFVLENBQUVpMUMsR0FBR2oxQyxRQUFVLENBQUUrMkMsR0FBRy8yQyxRQUFVLENBQUVxM0MsR0FBR3IzQyxNQUFPNDBDLEdBQUc1MEMsUUFBVXExQyxHQUFtQixXQUMxTCxTQUFTN3NDLEVBQUVBLEdBQ1ByUCxLQUFLbXNFLFdBQWE5OEQsRUFFdEIsT0FBT0EsRUFBRS9NLFVBQVU4NUQsR0FBSyxTQUFTL3NELEVBQUdyRixHQUNoQyxPQUFPeXlDLEdBQUdwdEMsR0FBR3ZKLElBQUlrRSxHQUFHbEksTUFBSyxTQUFVdU4sR0FDL0IsR0FBSUEsRUFBRyxNQUFPLENBQ1YxUCxJQUFLcUssRUFBSXFGLEdBQUc0b0UsU0FDWkMsV0FBWWg5QixHQUFHbHhDLEVBQUVrdUUsWUFDakJudkUsUUFBU2lCLEVBQUVqQixTQUVtQyxJQUFJaUIsTUFFM0RxRixFQUFFL00sVUFBVTgxRSxHQUFLLFNBQVMvb0UsRUFBR3JGLEdBQzVCLE9BQU95eUMsR0FBR3B0QyxHQUFHc1csSUFBSSxDQUNic3lELFVBQVc1MUUsRUFBSTJILEdBQUdySyxHQUNsQnU0RSxXQUFZcjlCLEdBQUc3VixHQUFHM2lDLEVBQUU2MUUsYUFDcEJudkUsUUFBUzFHLEVBQUUwRyxVQUVmLElBQUkxRyxHQUNpRGdOLEVBQUUvTSxVQUFVKzFFLEdBQUssU0FBU2hwRSxFQUFHckYsR0FDbEYsT0FBT2t6QyxHQUFHN3RDLEdBQUd2SixJQUFJa0UsR0FBR2xJLE1BQUssU0FBVXVOLEdBQy9CLEdBQUlBLEVBQUcsTUFBTyxDQUNWM00sTUFBT3NILEVBQUlxRixHQUFHM00sS0FDZDhGLE1BQU9neUMsR0FBR3h3QyxFQUFFbXVFLGNBQ1ovRSxTQUFVbDRCLEdBQUdseEMsRUFBRW9wRSxXQUVuQixJQUFJcHBFLE1BRVRxRixFQUFFL00sVUFBVWcyRSxHQUFLLFNBQVNqcEUsRUFBR3JGLEdBQzVCLE9BQU9rekMsR0FBRzd0QyxHQUFHc1csSUFBSSxTQUFTdFcsR0FDdEIsTUFBTyxDQUNIM00sS0FBTTJNLEVBQUUzTSxLQUNSMHdFLFNBQVV2NEIsR0FBRzdWLEdBQUczMUIsRUFBRStqRSxXQUNsQitFLGFBQWM5b0UsRUFBRThvRSxjQUpQLENBTWZudUUsS0FDSHFGLEVBckN1TCxHQTZEOUwsU0FBU290QyxHQUFHcHRDLEdBQ1IsT0FBT2d0RCxHQUFHaEcsR0FBR2huRCxFQUFHNnVDLEdBQUdyM0MsT0FLbkIsU0FBU3EyQyxHQUFHN3RDLEdBQ1osT0FBT2d0RCxHQUFHaEcsR0FBR2huRCxFQUFHb3NDLEdBQUc1MEMsT0FxQm5CLElBQUk0MkMsR0FBbUIsV0FDdkIsU0FBU3B1QyxJQVFMclAsS0FBS3U0RSxHQUFLLElBQUlsN0IsR0FRWCxPQUFPaHVDLEVBQUUvTSxVQUFVeXhFLEdBQUssU0FBUzFrRSxFQUFHckYsR0FDdkMsSUFBSTNILEVBQUlyQyxLQUNSLElBQUtBLEtBQUt1NEUsR0FBR3gvRCxJQUFJL08sR0FBSSxDQUNqQixJQUFJK0csRUFBSS9HLEVBQUV1dEIsSUFBS2ozQixFQUFJMEosRUFBRWtsQyxJQUNyQjcvQixFQUFFMHNDLElBQUcsV0FHRDE1QyxFQUFFazJFLEdBQUd2dkQsSUFBSWhmLE1BRWIsSUFBSTdILEVBQUksQ0FDSnFwRSxhQUFjejZELEVBQ2R3NkQsT0FBUWdKLEdBQUdqMEUsSUFFZixPQUFPcWhELEdBQUd0eUMsR0FBR3NXLElBQUl4akIsR0FFckIsT0FBTzBxRSxHQUFHcm9FLFdBQ1g2SyxFQUFFL00sVUFBVTQ3QyxHQUFLLFNBQVM3dUMsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJLEdBQUkwTyxFQUFJaWtFLFlBQVlDLE1BQU0sQ0FBRWpyRSxFQUFHLElBQU0sQ0FBRSxHQUFFQSxHQUFJLEtBQ3RDLEdBQ0EsR0FDZixPQUFPMjNDLEdBQUd0eUMsR0FBR29xRCxHQUFHMW9ELEdBQUdqUCxNQUFLLFNBQVV1TixHQUM5QixJQUFLLElBQUkwQixFQUFJLEVBQUd6USxFQUFJK08sRUFBRzBCLEVBQUl6USxFQUFFSyxPQUFRb1EsSUFBSyxDQUN0QyxJQUFJNU8sRUFBSTdCLEVBQUV5USxHQUtNLEdBQUk1TyxFQUFFcXBFLGVBQWlCeGhFLEVBQUcsTUFDMUMzSCxFQUFFNUMsS0FBS2kxRSxHQUFHdnlFLEVBQUVvcEUsU0FFaEIsT0FBT2xwRSxNQUVaZ04sRUFqRG9CLEdBdUR2QixTQUFTc3lDLEdBQUd0eUMsR0FDWixPQUFPZ3RELEdBQUdoRyxHQUFHaG5ELEVBQUd1dUMsR0FBRy8yQyxPQWlDbkIsSUFBSXUxQyxHQUFtQixXQUN2QixTQUFTL3NDLEVBQUVBLEdBQ1ByUCxLQUFLazlELEdBQUs3dEQsRUFFZCxPQUFPQSxFQUFFL00sVUFBVVIsS0FBTyxXQUN0QixPQUFPOUIsS0FBS2s5RCxJQUFNLEVBQUdsOUQsS0FBS2s5RCxJQUMzQjd0RCxFQUFFbXRELEdBQUssV0FLTixPQUFPLElBQUludEQsRUFBRSxJQUNkQSxFQUFFeXRELEdBQUssV0FFTixPQUFPLElBQUl6dEQsR0FBRyxJQUNmQSxFQWZvQixHQWdCdEJrdEMsR0FBbUIsV0FDcEIsU0FBU2x0QyxFQUFFQSxFQUFHckYsR0FDVmhLLEtBQUtpekUsR0FBSzVqRSxFQUFHclAsS0FBS21zRSxXQUFhbmlFLEVBUS9CLE9BQU9xRixFQUFFL00sVUFBVSs0RCxHQUFLLFNBQVNoc0QsR0FDakMsSUFBSXJGLEVBQUloSyxLQUNSLE9BQU9BLEtBQUt3NEUsR0FBR25wRSxHQUFHdk4sTUFBSyxTQUFVTyxHQUM3QixJQUFJME8sRUFBSSxJQUFJcXJDLEdBQUcvNUMsRUFBRXExRSxpQkFDakIsT0FBT3IxRSxFQUFFcTFFLGdCQUFrQjNtRSxFQUFFalAsT0FBUWtJLEVBQUVvekQsR0FBRy90RCxFQUFHaE4sR0FBR1AsTUFBSyxXQUNqRCxPQUFPTyxFQUFFcTFFLHVCQUdsQnJvRSxFQUFFL00sVUFBVW0yRSxHQUFLLFNBQVNwcEUsR0FDekIsT0FBT3JQLEtBQUt3NEUsR0FBR25wRSxHQUFHdk4sTUFBSyxTQUFVdU4sR0FDN0IsT0FBT3dtQixHQUFFaGxCLEVBQUUsSUFBSWlnQixHQUFFemhCLEVBQUVzb0UsMEJBQTBCOVUsUUFBU3h6RCxFQUFFc29FLDBCQUEwQjdVLGtCQUV2Rnp6RCxFQUFFL00sVUFBVW8yRSxHQUFLLFNBQVNycEUsR0FDekIsT0FBT3JQLEtBQUt3NEUsR0FBR25wRSxHQUFHdk4sTUFBSyxTQUFVdU4sR0FDN0IsT0FBT0EsRUFBRTBuRSxnQ0FFZDFuRSxFQUFFL00sVUFBVTI2RCxHQUFLLFNBQVM1dEQsRUFBR3JGLEVBQUczSCxHQUMvQixJQUFJME8sRUFBSS9RLEtBQ1IsT0FBT0EsS0FBS3c0RSxHQUFHbnBFLEdBQUd2TixNQUFLLFNBQVV4QixHQUM3QixPQUFPQSxFQUFFeTJFLDRCQUE4Qi9zRSxFQUFHM0gsSUFBTS9CLEVBQUVxM0UsMEJBQTRCdDFFLEVBQUVxTixLQUNoRjFGLEVBQUkxSixFQUFFeTJFLDhCQUFnQ3oyRSxFQUFFeTJFLDRCQUE4Qi9zRSxHQUFJK0csRUFBRXFzRCxHQUFHL3RELEVBQUcvTyxPQUV2RitPLEVBQUUvTSxVQUFVcTJFLEdBQUssU0FBU3RwRSxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU9BLEtBQUs0NEUsR0FBR3ZwRSxFQUFHckYsR0FBR2xJLE1BQUssV0FDdEIsT0FBT08sRUFBRW0yRSxHQUFHbnBFLEdBQUd2TixNQUFLLFNBQVVpUCxHQUMxQixPQUFPQSxFQUFFNm1FLGFBQWUsRUFBR3YxRSxFQUFFdzJFLEdBQUc3dUUsRUFBRytHLEdBQUkxTyxFQUFFKzZELEdBQUcvdEQsRUFBRzBCLFVBR3hEMUIsRUFBRS9NLFVBQVUyNUQsR0FBSyxTQUFTNXNELEVBQUdyRixHQUM1QixPQUFPaEssS0FBSzQ0RSxHQUFHdnBFLEVBQUdyRixJQUNuQnFGLEVBQUUvTSxVQUFVdzJFLEdBQUssU0FBU3pwRSxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU9BLEtBQUt5OUQsR0FBR3B1RCxFQUFHckYsRUFBRWc3RCxVQUFVbGpFLE1BQUssV0FDL0IsT0FBT2kxRCxHQUFHMW5ELEdBQUcySyxPQUFPaFEsRUFBRWc3RCxhQUN0QmxqRSxNQUFLLFdBQ0wsT0FBT08sRUFBRW0yRSxHQUFHbnBFLE1BQ1p2TixNQUFLLFNBQVVrSSxHQUNmLE9BQU8sR0FBRUEsRUFBRTR0RSxZQUFjLEdBQUk1dEUsRUFBRTR0RSxhQUFlLEVBQUd2MUUsRUFBRSs2RCxHQUFHL3RELEVBQUdyRixPQVFqRXFGLEVBQUUvTSxVQUFVZ3ZFLEdBQUssU0FBU2ppRSxFQUFHckYsRUFBRzNILEdBQzVCLElBQUkwTyxFQUFJL1EsS0FBTU0sRUFBSSxFQUFHNkIsRUFBSSxHQUN6QixPQUFPNDBELEdBQUcxbkQsR0FBR3krRCxJQUFHLFNBQVV2OUMsRUFBR2poQixHQUN6QixJQUFJeEIsRUFBSXNyQyxHQUFHOXBDLEdBQ1h4QixFQUFFbTNELGdCQUFrQmo3RCxHQUFLLE9BQVMzSCxFQUFFeUQsSUFBSWdJLEVBQUVrM0QsWUFBYzFrRSxJQUFLNkIsRUFBRTFDLEtBQUtzUixFQUFFK25FLEdBQUd6cEUsRUFBR3ZCLFFBQzVFaE0sTUFBSyxXQUNMLE9BQU8rcUUsR0FBR25WLEdBQUd2MUQsTUFDYkwsTUFBSyxXQUNMLE9BQU94QixNQU1mK08sRUFBRS9NLFVBQVVnbEMsR0FBSyxTQUFTajRCLEVBQUdyRixHQUN6QixPQUFPK3NELEdBQUcxbkQsR0FBR3krRCxJQUFHLFNBQVV6K0QsRUFBR2hOLEdBQ3pCLElBQUkwTyxFQUFJcW9DLEdBQUcvMkMsR0FDWDJILEVBQUUrRyxPQUVQMUIsRUFBRS9NLFVBQVVrMkUsR0FBSyxTQUFTbnBFLEdBQ3pCLE9BQU8rdUMsR0FBRy91QyxHQUFHdkosSUFBSSsyQyxHQUFHenhDLEtBQUt0SixNQUFLLFNBQVV1TixHQUNwQyxPQUFPLEdBQUUsT0FBU0EsR0FBSUEsTUFFM0JBLEVBQUUvTSxVQUFVODZELEdBQUssU0FBUy90RCxFQUFHckYsR0FDNUIsT0FBT28wQyxHQUFHL3VDLEdBQUdzVyxJQUFJazNCLEdBQUd6eEMsSUFBS3BCLElBQzFCcUYsRUFBRS9NLFVBQVVzMkUsR0FBSyxTQUFTdnBFLEVBQUdyRixHQUM1QixPQUFPK3NELEdBQUcxbkQsR0FBR3NXLElBQUkrekIsR0FBRzE1QyxLQUFLbXNFLFdBQVluaUUsS0FPekNxRixFQUFFL00sVUFBVXUyRSxHQUFLLFNBQVN4cEUsRUFBR3JGLEdBQ3pCLElBQUkzSCxHQUFJLEVBQ1IsT0FBT2dOLEVBQUUyMUQsU0FBV2g3RCxFQUFFMHRFLGtCQUFvQjF0RSxFQUFFMHRFLGdCQUFrQnJvRSxFQUFFMjFELFNBQVUzaUUsR0FBSSxHQUM5RWdOLEVBQUU0MUQsZUFBaUJqN0QsRUFBRStzRSw4QkFBZ0Mvc0UsRUFBRStzRSw0QkFBOEIxbkUsRUFBRTQxRCxlQUN2RjVpRSxHQUFJLEdBQUtBLEdBQ1ZnTixFQUFFL00sVUFBVXkyRSxHQUFLLFNBQVMxcEUsR0FDekIsT0FBT3JQLEtBQUt3NEUsR0FBR25wRSxHQUFHdk4sTUFBSyxTQUFVdU4sR0FDN0IsT0FBT0EsRUFBRXVvRSxnQkFFZHZvRSxFQUFFL00sVUFBVW02RCxHQUFLLFNBQVNwdEQsRUFBR3JGLEdBSTVCLElBQUkzSCxFQUFJMmhFLEdBQUdoNkQsR0FBSStHLEVBQUlpa0UsWUFBWUMsTUFBTSxDQUFFNXlFLEVBQUdpZixPQUFPNHpELG1CQUFxQixDQUFFN3lFLEVBQUdpZixPQUFPNnpELG9CQUFzQjcwRSxFQUFJLEtBQzVHLE9BQU95MkQsR0FBRzFuRCxHQUFHeStELEdBQUcsQ0FDWkcsTUFBT2w5RCxFQUNQeEssTUFBT28yQyxHQUFHMjZCLHdCQUNYLFNBQVVqb0UsRUFBR2hOLEVBQUcwTyxHQUNmLElBQUk1TyxFQUFJaTNDLEdBQUcvMkMsR0FHQytoRSxHQUFHcDZELEVBQUc3SCxFQUFFcUgsVUFBWWxKLEVBQUk2QixFQUFHNE8sRUFBRWhQLFdBQ3pDRCxNQUFLLFdBQ0wsT0FBT3hCLE1BRVorTyxFQUFFL00sVUFBVTAyRSxHQUFLLFNBQVMzcEUsRUFBR3JGLEVBQUczSCxHQUMvQixJQUFJME8sRUFBSS9RLEtBQU1NLEVBQUksR0FBSTZCLEVBQUl5L0MsR0FBR3Z5QyxHQUdyQixPQUFPckYsRUFBRXJFLFNBQVEsU0FBVXFFLEdBQy9CLElBQUl1bUIsRUFBSWdrRCxHQUFHdnFFLEVBQUUwMEMsTUFDYnArQyxFQUFFYixLQUFLMEMsRUFBRXdqQixJQUFJLElBQUl3M0IsR0FBRzk2QyxFQUFHa3VCLEtBQU1qd0IsRUFBRWIsS0FBS3NSLEVBQUVraUUsR0FBR2dHLEdBQUc1cEUsRUFBR2hOLEVBQUcySCxPQUNqRDZpRSxHQUFHblYsR0FBR3AzRCxJQUNaK08sRUFBRS9NLFVBQVVrN0QsR0FBSyxTQUFTbnVELEVBQUdyRixFQUFHM0gsR0FDL0IsSUFBSTBPLEVBQUkvUSxLQUFNTSxFQUFJc2hELEdBQUd2eUMsR0FHYixPQUFPdzlELEdBQUdsbkUsUUFBUXFFLEdBQUcsU0FBVUEsR0FDbkMsSUFBSTdILEVBQUlveUUsR0FBR3ZxRSxFQUFFMDBDLE1BQ2IsT0FBT211QixHQUFHblYsR0FBRyxDQUFFcDNELEVBQUUwWixPQUFPLENBQUUzWCxFQUFHRixJQUFNNE8sRUFBRWtpRSxHQUFHaUcsR0FBRzdwRSxFQUFHaE4sRUFBRzJILFNBRXREcUYsRUFBRS9NLFVBQVVtN0QsR0FBSyxTQUFTcHVELEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXUvQyxHQUFHdnlDLEdBQUkwQixFQUFJaWtFLFlBQVlDLE1BQU0sQ0FBRWpyRSxHQUFLLENBQUVBLEVBQUksSUFDbkMsR0FDQSxHQUNmLE9BQU8zSCxFQUFFMlgsT0FBT2pKLElBQ2pCMUIsRUFBRS9NLFVBQVUwNUQsR0FBSyxTQUFTM3NELEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSTJ5RSxZQUFZQyxNQUFNLENBQUVqckUsR0FBSyxDQUFFQSxFQUFJLElBQ3hCLEdBQ0EsR0FBSytHLEVBQUk2d0MsR0FBR3Z5QyxHQUFJL08sRUFBSTZsRSxLQUNuQyxPQUFPcDFELEVBQUUrOEQsR0FBRyxDQUNSRyxNQUFPNXJFLEVBQ1B3ckUsSUFBSSxJQUNMLFNBQVV4K0QsRUFBR3JGLEVBQUczSCxHQUNmLElBQUkwTyxFQUFJMmpFLEdBQUdybEUsRUFBRSxJQUFLbE4sRUFBSSxJQUFJLEdBQUU0TyxHQUM1QnpRLEVBQUlBLEVBQUUwb0IsSUFBSTdtQixNQUNWTCxNQUFLLFdBQ0wsT0FBT3hCLE1BRVorTyxFQUFFL00sVUFBVW82RCxHQUFLLFNBQVNydEQsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJa3lFLEdBQUd2cUUsRUFBRTAwQyxNQUFPM3RDLEVBQUlpa0UsWUFBWUMsTUFBTSxDQUFFNXlFLEdBQUssQ0FBRSxHQUFFQSxLQUN0QyxHQUNBLEdBQUsvQixFQUFJLEVBQ3hCLE9BQU9zaEQsR0FBR3Z5QyxHQUFHeStELEdBQUcsQ0FDWnZuRSxNQUFPNDJDLEdBQUdxNkIscUJBQ1YzSixJQUFJLEVBQ0pJLE1BQU9sOUQsSUFDUixTQUFVMUIsRUFBR3JGLEVBQUczSCxHQUNmLElBQUkwTyxFQUFJMUIsRUFBRSxHQUlFQSxFQUFFLEdBQ2QsSUFBTTBCLElBQU16USxJQUFLK0IsRUFBRU4sV0FDbkJELE1BQUssV0FDTCxPQUFPeEIsRUFBSSxNQVduQitPLEVBQUUvTSxVQUFVaWpDLEdBQUssU0FBU2wyQixFQUFHckYsR0FDekIsT0FBTytzRCxHQUFHMW5ELEdBQUd2SixJQUFJa0UsR0FBR2xJLE1BQUssU0FBVXVOLEdBQy9CLE9BQU9BLEVBQUkrcEMsR0FBRy9wQyxHQUFLLFNBRXhCQSxFQW5MaUIsR0F5TXhCLFNBQVMwbkQsR0FBRzFuRCxHQUNSLE9BQU9ndEQsR0FBR2hHLEdBQUdobkQsRUFBR3N0QyxHQUFHOTFDLE9BS25CLFNBQVN1M0MsR0FBRy91QyxHQUNaLE9BQU9ndEQsR0FBR2hHLEdBQUdobkQsRUFBR3d0QyxHQUFHaDJDLE9BS25CLFNBQVMrNkMsR0FBR3Z5QyxHQUNaLE9BQU9ndEQsR0FBR2hHLEdBQUdobkQsRUFBRzh0QyxHQUFHdDJDLE9Ba0JuQixJQUFJODFELEdBQUssMFFBQTJRbkIsR0FBbUIsU0FBU3h4RCxHQUNoVCxTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsT0FBU0EsTUFBTXkwRSxHQUFLcGxFLEVBQUcwQixFQUFFc3NELEdBQUtoN0QsRUFBRzBPLEVBRXhELE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJM0gsRUFMdVIsQ0FNelNveEUsSUFBS3BYLEdBQW1CLFdBQ3RCLFNBQVNodEQsRUFLVHJGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixFQUFHb3VCLEVBQUdqaEIsRUFBR3hCLEVBQUcwSCxFQUt4QjhhLEdBQ0ksR0FBSXR3QixLQUFLaTNFLHdCQUEwQmp0RSxFQUFHaEssS0FBS3doRSxlQUFpQm4vRCxFQUFHckMsS0FBSzYzRSxTQUFXOW1FLEVBQy9FL1EsS0FBSysxRCxHQUFLNXpELEVBQUduQyxLQUFLNEosT0FBUzJtQixFQUFHdndCLEtBQUswSixTQUFXNEYsRUFBR3RQLEtBQUttOUQsR0FBSzNuRCxFQUFHeFYsS0FBS3M5RCxHQUFLaHRDLEVBQUd0d0IsS0FBS3U5RCxHQUFLLEtBQ3JGdjlELEtBQUttNUUsSUFBSyxFQUFJbjVFLEtBQUtvNUUsV0FBWSxFQUFJcDVFLEtBQUsrM0UsZ0JBQWlCLEVBRXpELzNFLEtBQUtxNUUsR0FBSyxLQUFNcjVFLEtBQUtnNEUsY0FBZSxFQUVwQ2g0RSxLQUFLczVFLEdBQUssS0FFVnQ1RSxLQUFLNnhCLEdBQUssS0FFVjd4QixLQUFLaXdCLEdBQUszTyxPQUFPNHpELGtCQUVqQmwxRSxLQUFLdXhCLEdBQUssU0FBU2xpQixHQUNmLE9BQU85SyxRQUFRQyxZQUNmNkssRUFBRXltRCxLQUFNLE1BQU0sSUFBSXprRCxHQUFFLEdBQUVxeEQsY0FBZSxzSUFDekMxaUUsS0FBS2l6RSxHQUFLLElBQUkxVyxHQUFHdjhELEtBQU1NLEdBQUlOLEtBQUs0eEIsR0FBS3Z2QixFQUFJLE9BQVFyQyxLQUFLbXNFLFdBQWEsSUFBSS93QixHQUFHdHRDLEdBQUk5TixLQUFLaXhCLEdBQUssSUFBSTY3QyxHQUFHOXNFLEtBQUs0eEIsR0FBSSxHQUFJLElBQUltckIsR0FBRy84QyxLQUFLbXNFLGFBQ3hIbnNFLEtBQUsyeEIsR0FBSyxJQUFJNHFCLEdBQUd2OEMsS0FBS2l6RSxHQUFJanpFLEtBQUttc0UsWUFBYW5zRSxLQUFLaThDLEdBQUssSUFBSXdCLEdBQUl6OUMsS0FBSys4QyxHQUFLLFNBQVMxdEMsRUFBR3JGLEdBQ2hGLE9BQU8sSUFBSTh3QyxHQUFHenJDLEVBQUdyRixHQURtRCxDQUV0RWhLLEtBQUttc0UsV0FBWW5zRSxLQUFLaThDLElBQUtqOEMsS0FBS3d4QixHQUFLLElBQUkwcUIsR0FBR2w4QyxLQUFLbXNFLFlBQWFuc0UsS0FBSzRKLFFBQVU1SixLQUFLNEosT0FBTzArQixhQUFldG9DLEtBQUs2dkIsR0FBSzd2QixLQUFLNEosT0FBTzArQixjQUFnQnRvQyxLQUFLNnZCLEdBQUssTUFDMUosSUFBT1MsR0FBSyxHQUFFLHVCQUF3QixxS0FFMUMsT0FBT2poQixFQUFFZ25ELEdBQUssU0FBU2huRCxFQUFHckYsR0FDdEIsR0FBSXFGLGFBQWFtc0QsR0FBSSxPQUFPc1IsR0FBR3pXLEdBQUdobkQsRUFBRW9sRSxHQUFJenFFLEdBQ3hDLE1BQU0sTUFPVnFGLEVBQUUvTSxVQUFVdW1ELE1BQVEsV0FDaEIsSUFBSXg1QyxFQUFJclAsS0FJQSxPQUFPQSxLQUFLK3ZCLEtBQUszcUIsTUFBSyxXQUMxQixJQUFLaUssRUFBRStwRSxZQUFjL3BFLEVBQUU0bkUsd0JBR3ZCLE1BQU0sSUFBSTVsRSxHQUFFLEdBQUVreEQsb0JBQXFCNUYsSUFDbkMsT0FBT3R0RCxFQUFFMmlCLEtBQU0zaUIsRUFBRTJoQixLQUFNM2hCLEVBQUVnaUIsS0FBTWhpQixFQUFFKzlELGVBQWUsaUNBQWtDLFlBQVksU0FBVXBqRSxHQUNwRyxPQUFPcUYsRUFBRXNpQixHQUFHK21ELEdBQUcxdUUsU0FFbkI1RSxNQUFLLFNBQVU0RSxHQUNmcUYsRUFBRWt1RCxHQUFLLElBQUlxVyxHQUFHNXBFLEVBQUdxRixFQUFFOHRELE9BQ25CLzNELE1BQUssV0FDTGlLLEVBQUU4cEUsSUFBSyxLQUNQcm5FLE9BQU0sU0FBVTlILEdBQ2hCLE9BQU9xRixFQUFFNGhCLElBQU01aEIsRUFBRTRoQixHQUFHbmUsUUFBU3ZPLFFBQVFFLE9BQU91RixPQVVwRHFGLEVBQUUvTSxVQUFVMFEsR0FBSyxTQUFTM0QsR0FDdEIsSUFBSTBCLEVBQUkvUSxLQUNSLE9BQU9BLEtBQUt1eEIsR0FBSyxTQUFTanhCLEdBQ3RCLE9BQU8sRUFBRXlRLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLE9BQU8sRUFBRS9RLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQU9oSyxLQUFLc3VFLEdBQUssQ0FBRSxFQUFlai9ELEVBQUUvTyxJQUFPLENBQUUsVUFHdEQrTyxFQUFFclAsS0FBS281RSxZQVFkL3BFLEVBQUUvTSxVQUFVNHRCLEdBQUssU0FBUzdnQixHQUN0QixJQUFJMEIsRUFBSS9RLEtBQ1JBLEtBQUtpeEIsR0FBRzJuQyxJQUFHLFNBQVV0NEQsR0FDakIsT0FBTyxFQUFFeVEsT0FBRyxPQUFRLEdBQVEsV0FDeEIsT0FBTyxFQUFFL1EsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE9BQU8sT0FBUzlQLEVBQUVpNUUsV0FBYSxDQUFFLEVBQWNscUUsS0FBUSxDQUFFLEVBQWMsR0FFekUsS0FBSyxFQUNIckYsRUFBRXFHLE9BQVFyRyxFQUFFb0csTUFBUSxFQUV0QixLQUFLLEVBQ0gsTUFBTyxDQUFFLGNBWTdCZixFQUFFL00sVUFBVSt0QixHQUFLLFNBQVNoaEIsR0FDdEIsSUFBSTBCLEVBQUkvUSxLQUNSQSxLQUFLKzNFLGlCQUFtQjFvRSxJQUFNclAsS0FBSyszRSxlQUFpQjFvRSxFQUdwRHJQLEtBQUsrMUQsR0FBRytZLElBQUcsV0FDUCxPQUFPLEVBQUUvOUQsT0FBRyxPQUFRLEdBQVEsV0FDeEIsT0FBTyxFQUFFL1EsTUFBTSxTQUFVcVAsR0FDckIsT0FBUUEsRUFBRWUsT0FDUixLQUFLLEVBQ0gsT0FBT3BRLEtBQUtzdUUsR0FBSyxDQUFFLEVBQWN0dUUsS0FBSyt2QixNQUFTLENBQUUsRUFBYyxHQUVqRSxLQUFLLEVBQ0gxZ0IsRUFBRWdCLE9BQVFoQixFQUFFZSxNQUFRLEVBRXRCLEtBQUssRUFDSCxNQUFPLENBQUUsZUFZN0JmLEVBQUUvTSxVQUFVeXRCLEdBQUssV0FDYixJQUFJMWdCLEVBQUlyUCxLQUNSLE9BQU9BLEtBQUtvdEUsZUFBZSwwQ0FBMkMsYUFBYSxTQUFVcGpFLEdBQ3pGLE9BQU8reEQsR0FBRy94RCxHQUFHMmIsSUFBSSxJQUFJczJCLEdBQUc1c0MsRUFBRXdvRSxTQUFVcm1FLEtBQUttSyxNQUFPdE0sRUFBRTBvRSxlQUFnQjFvRSxFQUFFMm9FLGVBQWVsMkUsTUFBSyxXQUNwRixHQUFJdU4sRUFBRStwRSxVQUFXLE9BQU8vcEUsRUFBRThpQixHQUFHbm9CLEdBQUdsSSxNQUFLLFNBQVVrSSxHQUMzQ0EsSUFBTXFGLEVBQUUrcEUsV0FBWSxFQUFJL3BFLEVBQUUwbUQsR0FBRytaLElBQUcsV0FDNUIsT0FBT3pnRSxFQUFFa2lCLElBQUcsYUFHcEJ6dkIsTUFBSyxXQUNMLE9BQU91TixFQUFFaXFDLEdBQUd0dkMsTUFDWmxJLE1BQUssU0FBVU8sR0FDZixPQUFPZ04sRUFBRStwRSxZQUFjLzJFLEVBQUlnTixFQUFFbWtCLEdBQUd4cEIsR0FBR2xJLE1BQUssV0FDcEMsT0FBTyxPQUNITyxHQUFLZ04sRUFBRXlrQixHQUFHOXBCLEdBQUdsSSxNQUFLLFdBQ3RCLE9BQU8sV0FHZmdRLE9BQU0sU0FBVTlILEdBQ2hCLEdBQUl1akUsR0FBR3ZqRSxHQUdQLE9BQU8sR0FBRSx1QkFBd0IsaUNBQWtDQSxHQUFJcUYsRUFBRStwRSxVQUN6RSxJQUFLL3BFLEVBQUU0bkUsd0JBQXlCLE1BQU1qdEUsRUFDdEMsT0FBTyxHQUFFLHVCQUF3Qix5REFBMERBLElBQzFFLEtBQ2pCNUUsTUFBSyxTQUFVNEUsR0FDZnFGLEVBQUUrcEUsWUFBY3B2RSxHQUFLcUYsRUFBRTBtRCxHQUFHK1osSUFBRyxXQUN6QixPQUFPemdFLEVBQUVraUIsR0FBR3ZuQixNQUNYcUYsRUFBRStwRSxVQUFZcHZFLE1BRXhCcUYsRUFBRS9NLFVBQVU2dkIsR0FBSyxTQUFTOWlCLEdBQ3pCLElBQUlyRixFQUFJaEssS0FDUixPQUFPZzlELEdBQUczdEQsR0FBR3ZKLElBQUkwMUMsR0FBR3B3QyxLQUFLdEosTUFBSyxTQUFVdU4sR0FDcEMsT0FBT3c5RCxHQUFHcm9FLFFBQVF3RixFQUFFc25CLEdBQUdqaUIsUUFFNUJBLEVBQUUvTSxVQUFVZ3dCLEdBQUssU0FBU2pqQixHQUN6QixPQUFPMHNELEdBQUcxc0QsR0FBRzJLLE9BQU9oYSxLQUFLNjNFLFdBTzdCeG9FLEVBQUUvTSxVQUFVZ3lCLEdBQUssV0FDYixPQUFPLEVBQUV0MEIsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUcrRyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsRUFBSXZ3QixLQUNwQixPQUFPLEVBQUVBLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSCxPQUFRcFEsS0FBS281RSxXQUFhcDVFLEtBQUt5d0IsR0FBR3p3QixLQUFLaXdCLEdBQUksTUFBUSxDQUFFLEVBQWMsSUFBT2p3QixLQUFLaXdCLEdBQUt6ZSxLQUFLbUssTUFDekYsQ0FBRSxFQUFjM2IsS0FBS290RSxlQUFlLHNDQUF1QyxxQkFBcUIsU0FBVXBqRSxHQUN0RyxJQUFJM0gsRUFBSWdOLEVBQUVnbkQsR0FBR3JzRCxFQUFHaXlDLEdBQUdwMUMsT0FDbkIsT0FBT3hFLEVBQUVvM0QsS0FBSzMzRCxNQUFLLFNBQVV1TixHQUN6QixJQUFJckYsRUFBSXVtQixFQUFFMGxDLEdBQUc1bUQsRUFBRyxNQUFPMEIsRUFBSTFCLEVBQUV6RCxRQUFPLFNBQVV5RCxHQUMxQyxPQUFRLElBQU1yRixFQUFFc1csUUFBUWpSLE1BR0EsT0FBT3c5RCxHQUFHbG5FLFFBQVFvTCxHQUFHLFNBQVUxQixHQUN2RCxPQUFPaE4sRUFBRTJYLE9BQU8zSyxFQUFFd29FLGFBQ2xCLzFFLE1BQUssV0FDTCxPQUFPaVAsV0FHZmUsT0FBTSxXQUNOLE1BQU8sUUFHYixLQUFLLEVBTUgsR0FBSTlILEVBQUkzSCxFQUFFZ08sT0FBUXJRLEtBQUs2dkIsR0FBSSxJQUFLOWUsRUFBSSxFQUFHelEsRUFBSTBKLEVBQUcrRyxFQUFJelEsRUFBRUssT0FBUW9RLElBQUs1TyxFQUFJN0IsRUFBRXlRLEdBQUkvUSxLQUFLNnZCLEdBQUc0WSxXQUFXem9DLEtBQUtnekIsR0FBRzd3QixFQUFFMDFFLFdBQ3hHeDFFLEVBQUUrTixNQUFRLEVBRVosS0FBSyxFQUNILE1BQU8sQ0FBRSxXQVN6QmYsRUFBRS9NLFVBQVUrdUIsR0FBSyxXQUNiLElBQUloaUIsRUFBSXJQLEtBQ1JBLEtBQUs2eEIsR0FBSzd4QixLQUFLKzFELEdBQUdpRCxHQUFHLDBCQUF3RCxLQUFLLFdBQzlFLE9BQU8zcEQsRUFBRTBnQixLQUFLM3FCLE1BQUssV0FDZixPQUFPaUssRUFBRWlsQixRQUNUbHZCLE1BQUssV0FDTCxPQUFPaUssRUFBRWdpQixZQUkrQmhpQixFQUFFL00sVUFBVWd2QixHQUFLLFNBQVNqaUIsR0FDMUUsUUFBU0EsR0FBS0EsRUFBRTJuRSxVQUFZaDNFLEtBQUs2M0UsVUFTckN4b0UsRUFBRS9NLFVBQVVnM0MsR0FBSyxTQUFTanFDLEdBQ3RCLElBQUlyRixFQUFJaEssS0FDUixPQUFPQSxLQUFLczlELEdBQUt1UCxHQUFHcm9FLFNBQVEsR0FBTXc0RCxHQUFHM3RELEdBQUd2SixJQUFJMDFDLEdBQUdwd0MsS0FBS3RKLE1BQUssU0FBVU8sR0FVL0QsR0FBSSxPQUFTQSxHQUFLMkgsRUFBRXltQixHQUFHcHVCLEVBQUU2MEUsaUJBQWtCLE9BQVNsdEUsRUFBRW9vQixHQUFHL3ZCLEVBQUUyMEUsU0FBVSxDQUNqRSxHQUFJaHRFLEVBQUVzbkIsR0FBR2p2QixJQUFNMkgsRUFBRSt0RSxlQUFnQixPQUFPLEVBQ3hDLElBQUsvdEUsRUFBRXNuQixHQUFHanZCLEdBQUksQ0FDVixJQUFLQSxFQUFFNDBFLHdCQVlQLE1BQU0sSUFBSTVsRSxHQUFFLEdBQUVreEQsb0JBQXFCNUYsSUFDbkMsT0FBTyxHQUdmLFNBQVUzeUQsRUFBRSt0RSxpQkFBbUIvdEUsRUFBRWd1RSxlQUFpQmpjLEdBQUcxc0QsR0FBR29xRCxLQUFLMzNELE1BQUssU0FBVXVOLEdBQ3hFLFlBQU8sSUFBV3JGLEVBQUVpc0QsR0FBRzVtRCxFQUFHLEtBQUsyYSxNQUFLLFNBQVUzYSxHQUMxQyxHQUFJckYsRUFBRTZ0RSxXQUFheG9FLEVBQUV3b0UsU0FBVSxDQUMzQixJQUFJeDFFLEdBQUsySCxFQUFFK3RFLGdCQUFrQjFvRSxFQUFFMG9FLGVBQWdCaG5FLEdBQUsvRyxFQUFFZ3VFLGNBQWdCM29FLEVBQUUyb0UsYUFBYzEzRSxFQUFJMEosRUFBRSt0RSxpQkFBbUIxb0UsRUFBRTBvRSxlQUNqSCxHQUFJMTFFLEdBQUswTyxHQUFLelEsRUFBRyxPQUFPLEVBRTVCLE9BQU8sV0FHZndCLE1BQUssU0FBVXVOLEdBQ2YsT0FBT3JGLEVBQUVvdkUsWUFBYy9wRSxHQUFLLEdBQUUsdUJBQXdCLFdBQWFBLEVBQUksS0FBTyxVQUFZLGtDQUMxRkEsTUFFTEEsRUFBRS9NLFVBQVVtdkIsR0FBSyxXQUNoQixPQUFPLEVBQUV6eEIsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSXFQLEVBQUlyUCxLQUNSLE9BQU8sRUFBRUEsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUtILE9BQU9wUSxLQUFLbTVFLElBQUssRUFBSW41RSxLQUFLaXlCLEtBQU1qeUIsS0FBSzZ4QixLQUFPN3hCLEtBQUs2eEIsR0FBR29NLFNBQVVqK0IsS0FBSzZ4QixHQUFLLE1BQU83eEIsS0FBS2d3QixLQUNwRmh3QixLQUFLOHlCLEtBQU0sQ0FBRSxFQUFjOXlCLEtBQUtpeEIsR0FBR204QyxlQUFlLFdBQVksWUFBYSxDQUFFNXhCLEdBQUczMEMsTUFBT28xQyxHQUFHcDFDLFFBQVMsU0FBVW1ELEdBQ3pHLElBQUkzSCxFQUFJLElBQUltNUQsR0FBR3h4RCxFQUFHNHBFLEdBQUd2UCxJQUNyQixPQUFPaDFELEVBQUVta0IsR0FBR254QixHQUFHUCxNQUFLLFdBQ2hCLE9BQU91TixFQUFFaWpCLEdBQUdqd0IsVUFJdEIsS0FBSyxFQUtILE9BQU8ySCxFQUFFcUcsT0FBUXJRLEtBQUtpeEIsR0FBR25lLFFBR3pCOVMsS0FBSzJ5QixLQUFNLENBQUUsV0FTN0J0akIsRUFBRS9NLFVBQVUyekQsR0FBSyxTQUFTNW1ELEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSXJDLEtBQ1IsT0FBT3FQLEVBQUV6RCxRQUFPLFNBQVV5RCxHQUN0QixPQUFPaE4sRUFBRW91QixHQUFHcGhCLEVBQUV5b0UsYUFBYzl0RSxLQUFPM0gsRUFBRSt2QixHQUFHL2lCLEVBQUV3b0UsY0FVbER4b0UsRUFBRS9NLFVBQVU4d0IsR0FBSyxXQUNiLElBQUkvakIsRUFBSXJQLEtBQ1IsT0FBT0EsS0FBS290RSxlQUFlLG1CQUFvQixZQUFZLFNBQVVwakUsR0FDakUsT0FBTyt4RCxHQUFHL3hELEdBQUd5dkQsS0FBSzMzRCxNQUFLLFNBQVVrSSxHQUM3QixPQUFPcUYsRUFBRTRtRCxHQUFHanNELEVBQUcsTUFBTS9KLEtBQUksU0FBVW9QLEdBQy9CLE9BQU9BLEVBQUV3b0UsbUJBSXRCdDJFLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsS0FBTSxDQUN4Q3dELElBQUssV0FDRCxPQUFPOUYsS0FBS201RSxJQUVoQm5yRSxZQUFZLEVBQ1ppTyxjQUFjLElBQ2Q1TSxFQUFFL00sVUFBVTZ4QixHQUFLLFNBQVM5a0IsR0FDMUIsT0FBTzh1QyxHQUFHcTFCLEdBQUdua0UsRUFBR3JQLEtBQUttc0UsV0FBWW5zRSxLQUFLaThDLEdBQUlqOEMsS0FBS2l6RSxLQUNoRDVqRSxFQUFFL00sVUFBVXN1QixHQUFLLFdBQ2hCLE9BQU81d0IsS0FBSzJ4QixJQUNidGlCLEVBQUUvTSxVQUFVcXhCLEdBQUssV0FDaEIsT0FBTzN6QixLQUFLKzhDLElBQ2IxdEMsRUFBRS9NLFVBQVU4eEIsR0FBSyxXQUNoQixPQUFPcDBCLEtBQUtpOEMsSUFDYjVzQyxFQUFFL00sVUFBVTR4QixHQUFLLFdBQ2hCLE9BQU9sMEIsS0FBS3d4QixJQUNibmlCLEVBQUUvTSxVQUFVOHFFLGVBQWlCLFNBQVMvOUQsRUFBR3JGLEVBQUczSCxHQUMzQyxJQUFJME8sRUFBSS9RLEtBQ1IsR0FBRSx1QkFBd0Isd0JBQXlCcVAsR0FDbkQsSUFBSS9PLEVBQUc2QixFQUFJLGFBQWU2SCxFQUFJLFdBQWEsWUFHM0MsT0FBT2hLLEtBQUtpeEIsR0FBR204QyxlQUFlLzlELEVBQUdsTixFQUFHbzVDLElBQUksU0FBVXA1QyxHQUM5QyxPQUFPN0IsRUFBSSxJQUFJazdELEdBQUdyNUQsRUFBRzRPLEVBQUV3c0QsR0FBS3hzRCxFQUFFd3NELEdBQUd6N0QsT0FBUzh4RSxHQUFHdlAsSUFBSyxzQkFBd0JyNkQsRUFBSStHLEVBQUVvaEIsR0FBRzd4QixHQUFHd0IsTUFBSyxTQUFVdU4sR0FDakcsUUFBU0EsR0FBSzBCLEVBQUV1b0MsR0FBR2g1QyxNQUNuQndCLE1BQUssU0FBVWtJLEdBQ2YsSUFBS0EsRUFBRyxNQUFNLEdBQUUsOENBQWdEcUYsRUFBSSxNQUFPMEIsRUFBRXFvRSxXQUFZLEVBQ3pGcm9FLEVBQUVnbEQsR0FBRytaLElBQUcsV0FDSixPQUFPLytELEVBQUV3Z0IsSUFBRyxNQUNYLElBQUlsZ0IsR0FBRSxHQUFFa3hELG9CQUFxQmlSLElBQ2xDLE9BQU9ueEUsRUFBRS9CLE1BQ1R3QixNQUFLLFNBQVV1TixHQUNmLE9BQU8wQixFQUFFK2lCLEdBQUd4ekIsR0FBR3dCLE1BQUssV0FDaEIsT0FBT3VOLFFBRVQwQixFQUFFb2dCLEdBQUc3d0IsR0FBR3dCLE1BQUssV0FDZixPQUFPTyxFQUFFL0IsU0FFYjhFLE1BQUssU0FBVWlLLEdBQ2YsT0FBTy9PLEVBQUV3N0MsS0FBTXpzQyxNQVN2QkEsRUFBRS9NLFVBQVU2dUIsR0FBSyxTQUFTOWhCLEdBQ3RCLElBQUlyRixFQUFJaEssS0FDUixPQUFPZzlELEdBQUczdEQsR0FBR3ZKLElBQUkwMUMsR0FBR3B3QyxLQUFLdEosTUFBSyxTQUFVdU4sR0FDcEMsR0FBSSxPQUFTQSxHQUFLckYsRUFBRXltQixHQUFHcGhCLEVBQUU2bkUsaUJBQWtCLE9BQVNsdEUsRUFBRW9vQixHQUFHL2lCLEVBQUUybkUsV0FBYWh0RSxFQUFFc25CLEdBQUdqaUIsTUFBUXJGLEVBQUVzekQsSUFBTXR6RCxFQUFFaXRFLHlCQUEyQjVuRSxFQUFFNG5FLHlCQUEwQixNQUFNLElBQUk1bEUsR0FBRSxHQUFFa3hELG9CQUFxQjVGLFFBT2pNdHRELEVBQUUvTSxVQUFVd3hCLEdBQUssU0FBU3prQixHQUN0QixJQUFJckYsRUFBSSxJQUFJd3hDLEdBQUd4N0MsS0FBSzYzRSxTQUFVNzNFLEtBQUtpM0Usd0JBQXlCemxFLEtBQUttSyxPQUNqRSxPQUFPcWhELEdBQUczdEQsR0FBR3NXLElBQUk2MUIsR0FBR3B3QyxJQUFLcEIsSUFDMUJxRixFQUFFeW1ELEdBQUssV0FDTixPQUFPZ1gsR0FBR2hYLE1BRWdFem1ELEVBQUUvTSxVQUFVa3hCLEdBQUssU0FBU25rQixHQUNwRyxJQUFJckYsRUFBSWhLLEtBQU1xQyxFQUFJMjZELEdBQUczdEQsR0FDckIsT0FBT2hOLEVBQUV5RCxJQUFJMDFDLEdBQUdwd0MsS0FBS3RKLE1BQUssU0FBVXVOLEdBQ2hDLE9BQU9yRixFQUFFc25CLEdBQUdqaUIsSUFBTSxHQUFFLHVCQUF3Qiw0QkFBNkJoTixFQUFFMlgsT0FBT3doQyxHQUFHcHdDLE1BQVF5aEUsR0FBR3JvRSxjQUc5QzZLLEVBQUUvTSxVQUFVbXVCLEdBQUssU0FBU3BoQixFQUFHckYsR0FDbkYsSUFBSTNILEVBQUltUCxLQUFLbUssTUFDYixRQUFTdE0sRUFBSWhOLEVBQUkySCxHQUFLcUYsRUFBSWhOLElBQU0sR0FBRSxrREFBb0RnTixFQUFJLE1BQVFoTixHQUNsRyxLQUNEZ04sRUFBRS9NLFVBQVUwdkIsR0FBSyxXQUNoQixJQUFJM2lCLEVBQUlyUCxLQUNSLE9BQVNBLEtBQUswSixVQUFZLG1CQUFxQjFKLEtBQUswSixTQUFTdWlCLG1CQUFxQmpzQixLQUFLczVFLEdBQUssV0FDeEZqcUUsRUFBRTBtRCxHQUFHK1ksSUFBRyxXQUNKLE9BQU96L0QsRUFBRTJvRSxhQUFlLFlBQWMzb0UsRUFBRTNGLFNBQVM2L0IsZ0JBQWlCbDZCLEVBQUUwZ0IsU0FFekUvdkIsS0FBSzBKLFNBQVN1aUIsaUJBQWlCLG1CQUFvQmpzQixLQUFLczVFLElBQUt0NUUsS0FBS2c0RSxhQUFlLFlBQWNoNEUsS0FBSzBKLFNBQVM2L0Isa0JBQ2pIbDZCLEVBQUUvTSxVQUFVMHRCLEdBQUssV0FDaEJod0IsS0FBS3M1RSxLQUFPdDVFLEtBQUswSixTQUFTKzBCLG9CQUFvQixtQkFBb0J6K0IsS0FBS3M1RSxJQUFLdDVFLEtBQUtzNUUsR0FBSyxPQVkxRmpxRSxFQUFFL00sVUFBVTB1QixHQUFLLFdBQ2IsSUFBSTNoQixFQUFHckYsRUFBSWhLLEtBQ1gsbUJBQXNCLFFBQVVxUCxFQUFJclAsS0FBSzRKLGNBQVcsSUFBV3lGLE9BQUksRUFBU0EsRUFBRTRjLG9CQUFzQmpzQixLQUFLcTVFLEdBQUssV0FJMUdydkUsRUFBRWlvQixLQUFNam9CLEVBQUUrckQsR0FBRytZLElBQUcsV0FDWixPQUFPOWtFLEVBQUV5bkIsU0FFZHp4QixLQUFLNEosT0FBT3FpQixpQkFBaUIsU0FBVWpzQixLQUFLcTVFLE1BQ2hEaHFFLEVBQUUvTSxVQUFVd3dCLEdBQUssV0FDaEI5eUIsS0FBS3E1RSxLQUFPcjVFLEtBQUs0SixPQUFPNjBCLG9CQUFvQixTQUFVeitCLEtBQUtxNUUsSUFBS3I1RSxLQUFLcTVFLEdBQUssT0FPOUVocUUsRUFBRS9NLFVBQVU4dkIsR0FBSyxTQUFTL2lCLEdBQ3RCLElBQUlyRixFQUNKLElBQ0ksSUFBSTNILEVBQUksUUFBVSxRQUFVMkgsRUFBSWhLLEtBQUs2dkIsVUFBTyxJQUFXN2xCLE9BQUksRUFBU0EsRUFBRXErQyxRQUFRcm9ELEtBQUtnekIsR0FBRzNqQixLQUN0RixPQUFPLEdBQUUsdUJBQXdCLFdBQWFBLEVBQUksTUFBUWhOLEVBQUksS0FBTyxVQUFZLDRCQUNqRkEsRUFDRixNQUFPZ04sR0FFTCxPQUFPLEdBQUUsdUJBQXdCLG1DQUFvQ0EsSUFBSSxJQU9qRkEsRUFBRS9NLFVBQVUydkIsR0FBSyxXQUNiLEdBQUlqeUIsS0FBSzZ2QixHQUFJLElBQ1Q3dkIsS0FBSzZ2QixHQUFHMlksUUFBUXhvQyxLQUFLZ3pCLEdBQUdoekIsS0FBSzYzRSxVQUFXM2pFLE9BQU8xQyxLQUFLbUssUUFDdEQsTUFBT3RNLEdBRUwsR0FBRSxrQ0FBbUNBLEtBR1NBLEVBQUUvTSxVQUFVcXdCLEdBQUssV0FDbkUsR0FBSTN5QixLQUFLNnZCLEdBQUksSUFDVDd2QixLQUFLNnZCLEdBQUc0WSxXQUFXem9DLEtBQUtnekIsR0FBR2h6QixLQUFLNjNFLFdBQ2xDLE1BQU94b0UsTUFHVkEsRUFBRS9NLFVBQVUwd0IsR0FBSyxTQUFTM2pCLEdBQ3pCLE1BQU8sb0JBQXNCclAsS0FBS3doRSxlQUFpQixJQUFNbnlELEdBQzFEQSxFQTFlbUIsR0FvZjFCLFNBQVMydEQsR0FBRzN0RCxHQUNSLE9BQU9ndEQsR0FBR2hHLEdBQUdobkQsRUFBR21zQyxHQUFHMzBDLE9BS25CLFNBQVNrMUQsR0FBRzFzRCxHQUNaLE9BQU9ndEQsR0FBR2hHLEdBQUdobkQsRUFBRzRzQyxHQUFHcDFDLE9BR3NDLElBQUkwMUQsR0FBbUIsV0FDaEYsU0FBU2x0RCxFQUFFQSxFQUFHckYsR0FDVmhLLEtBQUtzSCxHQUFLK0gsRUFBR3JQLEtBQUttekUsR0FBSyxJQUFJa0IsR0FBR3IwRSxLQUFNZ0ssR0FFeEMsT0FBT3FGLEVBQUUvTSxVQUFVMnZFLEdBQUssU0FBUzVpRSxHQUM3QixJQUFJckYsRUFBSWhLLEtBQUtreUIsR0FBRzdpQixHQUNoQixPQUFPclAsS0FBS3NILEdBQUdzcEIsS0FBS21vRCxHQUFHMXBFLEdBQUd2TixNQUFLLFNBQVV1TixHQUNyQyxPQUFPckYsRUFBRWxJLE1BQUssU0FBVWtJLEdBQ3BCLE9BQU9xRixFQUFJckYsU0FHcEJxRixFQUFFL00sVUFBVTR2QixHQUFLLFNBQVM3aUIsR0FDekIsSUFBSXJGLEVBQUksRUFDUixPQUFPaEssS0FBSzZ5RSxHQUFHeGpFLEdBQUcsU0FBVUEsR0FDeEJyRixPQUNBbEksTUFBSyxXQUNMLE9BQU9rSSxNQUVacUYsRUFBRS9NLFVBQVVnbEMsR0FBSyxTQUFTajRCLEVBQUdyRixHQUM1QixPQUFPaEssS0FBS3NILEdBQUdzcEIsS0FBSzBXLEdBQUdqNEIsRUFBR3JGLElBQzNCcUYsRUFBRS9NLFVBQVV1d0UsR0FBSyxTQUFTeGpFLEVBQUdyRixHQUM1QixPQUFPaEssS0FBS2cwQixHQUFHM2tCLEdBQUcsU0FBVUEsRUFBR2hOLEdBQzNCLE9BQU8ySCxFQUFFM0gsT0FFZGdOLEVBQUUvTSxVQUFVMjJFLEdBQUssU0FBUzVwRSxFQUFHckYsRUFBRzNILEdBQy9CLE9BQU91NkQsR0FBR3Z0RCxFQUFHaE4sSUFDZGdOLEVBQUUvTSxVQUFVNDJFLEdBQUssU0FBUzdwRSxFQUFHckYsRUFBRzNILEdBQy9CLE9BQU91NkQsR0FBR3Z0RCxFQUFHaE4sSUFDZGdOLEVBQUUvTSxVQUFVZ3ZFLEdBQUssU0FBU2ppRSxFQUFHckYsRUFBRzNILEdBQy9CLE9BQU9yQyxLQUFLc0gsR0FBR3NwQixLQUFLMGdELEdBQUdqaUUsRUFBR3JGLEVBQUczSCxJQUM5QmdOLEVBQUUvTSxVQUFVazVELEdBQUssU0FBU25zRCxFQUFHckYsR0FDNUIsT0FBTzR5RCxHQUFHdnRELEVBQUdyRixJQVFqQnFGLEVBQUUvTSxVQUFVc3dCLEdBQUssU0FBU3ZqQixFQUFHckYsR0FDekIsT0FBTyxTQUFTcUYsRUFBR3JGLEdBQ2YsSUFBSTNILEdBQUksRUFDUixPQUFPaTVDLEdBQUdqc0MsR0FBRzArRCxJQUFHLFNBQVVoOUQsR0FDdEIsT0FBTzJwQyxHQUFHcnJDLEVBQUcwQixFQUFHL0csR0FBR2xJLE1BQUssU0FBVXVOLEdBQzlCLE9BQU9BLElBQU1oTixHQUFJLEdBQUt3cUUsR0FBR3JvRSxTQUFTNkssU0FFdEN2TixNQUFLLFdBQ0wsT0FBT08sS0FQUixDQVNMZ04sRUFBR3JGLElBQ05xRixFQUFFL00sVUFBVW14RSxHQUFLLFNBQVNwa0UsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJckMsS0FBTStRLEVBQUkvUSxLQUFLc0gsR0FBR3FzQixLQUFLb2lELEtBQU16MUUsRUFBSSxHQUFJNkIsRUFBSSxFQUNqRCxPQUFPbkMsS0FBS2cwQixHQUFHM2tCLEdBQUcsU0FBVWtoQixFQUFHamhCLEdBQzNCLEdBQUlBLEdBQUt0RixFQUFHLENBQ1IsSUFBSThELEVBQUl6TCxFQUFFdXdCLEdBQUd2akIsRUFBR2toQixHQUFHenVCLE1BQUssU0FBVWtJLEdBQzlCLElBQUtBLEVBR0wsT0FBTzdILElBQUs0TyxFQUFFdXFDLEdBQUdqc0MsRUFBR2toQixHQUFHenVCLE1BQUssV0FDeEIsT0FBT2lQLEVBQUU0c0MsR0FBR3B0QixHQUFJcXhCLEdBQUd2eUMsR0FBRzJLLE9BQU8sQ0FBRSxFQUFHdTZELEdBQUdoa0QsRUFBRW11QixjQUcvQ3ArQyxFQUFFYixLQUFLcU8sT0FFWGhNLE1BQUssV0FDTCxPQUFPK3FFLEdBQUduVixHQUFHcDNELE1BQ2J3QixNQUFLLFdBQ0wsT0FBT2lQLEVBQUU1TCxNQUFNa0ssTUFDZnZOLE1BQUssV0FDTCxPQUFPSyxNQUVaa04sRUFBRS9NLFVBQVUybUUsYUFBZSxTQUFTNTVELEVBQUdyRixHQUN0QyxJQUFJM0gsRUFBSTJILEVBQUV1NkQsR0FBR2wxRCxFQUFFZ3VELElBQ2YsT0FBT3I5RCxLQUFLc0gsR0FBR3NwQixLQUFLcXJDLEdBQUc1c0QsRUFBR2hOLElBQzNCZ04sRUFBRS9NLFVBQVVvdkIsR0FBSyxTQUFTcmlCLEVBQUdyRixHQUM1QixPQUFPNHlELEdBQUd2dEQsRUFBR3JGLElBUWpCcUYsRUFBRS9NLFVBQVUweEIsR0FBSyxTQUFTM2tCLEVBQUdyRixHQUN6QixJQUFJM0gsRUFBRzBPLEVBQUk2d0MsR0FBR3Z5QyxHQUFJL08sRUFBSXN6RSxHQUFHdlAsR0FDekIsT0FBT3R6RCxFQUFFKzhELEdBQUcsQ0FDUnZuRSxNQUFPNDJDLEdBQUdxNkIsdUJBQ1gsU0FBVW5vRSxFQUFHMEIsR0FDWixJQUFJNU8sRUFBSWtOLEVBQUUsR0FBSWtoQixHQUFLbGhCLEVBQUUsR0FBSTBCLEVBQUUydEMsTUFBT3B2QyxFQUFJeUIsRUFBRWswRCxlQUN4QyxJQUFNOWlFLEdBR043QixJQUFNc3pFLEdBQUd2UCxJQUFNcjZELEVBQUUsSUFBSSxHQUFFMHFFLEdBQUdyeUUsSUFBSy9CLEdBSy9CQSxFQUFJZ1AsRUFBR2pOLEVBQUlrdUIsR0FHWGp3QixFQUFJc3pFLEdBQUd2UCxNQUNQdmlFLE1BQUssV0FJTHhCLElBQU1zekUsR0FBR3ZQLElBQU1yNkQsRUFBRSxJQUFJLEdBQUUwcUUsR0FBR3J5RSxJQUFLL0IsT0FFcEMrTyxFQUFFL00sVUFBVWd4RSxHQUFLLFNBQVNqa0UsR0FDekIsT0FBT3JQLEtBQUtzSCxHQUFHcXNCLEtBQUtvcEMsR0FBRzF0RCxJQUN4QkEsRUE3RzZFLEdBZ0hwRixTQUFTdXRELEdBQUd2dEQsRUFBR3JGLEdBQ1gsT0FBTzQzQyxHQUFHdnlDLEdBQUdzVyxJQUtiLFNBQVN0VyxFQUFHckYsR0FDUixPQUFPLElBQUltekMsR0FBRyxFQUFHbzNCLEdBQUdsbEUsRUFBRXF2QyxNQUFPMTBDLEdBRGpDLENBRUVBLEVBQUdxRixFQUFFZ3VELEtBTVAsU0FBU1gsR0FBR3J0RCxFQUFHckYsR0FNZixJQUFJM0gsRUFBSWdOLEVBQUUwUixVQUNWLE9BQU8xUixFQUFFbE4sSUFBTUUsR0FBSyxJQUFNZ04sRUFBRXF5RCxVQUFXLGFBQWUxM0QsRUFBSSxJQUFNM0gsRUFBSSxJQVd4RSxJQUFJKzRELEdBQW1CLFdBQ25CLFNBQVMvckQsRUFFVEEsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FDTC9RLEtBQUt3NUUsWUFBY25xRSxFQUFHclAsS0FBSzJnQyxHQUFLMzJCLEVBQUdoSyxLQUFLbXNFLFdBQWFwN0QsRUFPckQvUSxLQUFLcTBCLEdBQUssSUFBSWt4QyxHQUFHLElBR2pCdmxFLEtBQUtpMEIsR0FBSyxJQUFJLElBQUUsU0FBVTVrQixHQUN0QixPQUFPMjBELEdBQUczMEQsS0FDViswRCxJQU1KcGtFLEtBQUt3MEIsR0FBS3FCLEdBQUVuZSxNQUFPMVgsS0FBSzA5QyxHQUFLcnVDLEVBQUU4a0IsR0FBRzl4QixHQUFJckMsS0FBS2t4QixHQUFLN2hCLEVBQUVza0IsS0FBTTN6QixLQUFLMnhCLEdBQUt0aUIsRUFBRXVoQixLQUFNNXdCLEtBQUs0ekIsR0FBSyxJQUFJOC9DLEdBQUcxekUsS0FBS2t4QixHQUFJbHhCLEtBQUswOUMsR0FBSTE5QyxLQUFLdzVFLFlBQVlwbEQsTUFDOUhwMEIsS0FBS3d4QixHQUFLbmlCLEVBQUU2a0IsS0FBTWwwQixLQUFLMmdDLEdBQUd0TyxHQUFHcnlCLEtBQUs0ekIsSUFFdEMsT0FBT3ZrQixFQUFFL00sVUFBVThyRSxHQUFLLFNBQVMvK0QsR0FDN0IsSUFBSXJGLEVBQUloSyxLQUNSLE9BQU9BLEtBQUt3NUUsWUFBWXBNLGVBQWUsa0JBQW1CLHFCQUFxQixTQUFVL3FFLEdBQ3JGLE9BQU9nTixFQUFFb2pFLEdBQUdwd0UsRUFBRzJILEVBQUVxcUIsUUFFdEJobEIsRUE5QmdCLEdBaUN2QixTQUFTa3NELEdBRVRsc0QsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FDTCxPQUFPLElBQUlxcUQsR0FBRy9yRCxFQUFHckYsRUFBRzNILEVBQUcwTyxHQVczQixTQUFTNnFELEdBQUd2c0QsRUFBRzBCLEdBQ1gsT0FBTyxFQUFFL1EsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUcxSixFQUFHNkIsRUFBR291QixFQUNiLE9BQU8sRUFBRXZ3QixNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUksR0FBRXFGLEdBQUkvTyxFQUFJMEosRUFBRTB6QyxHQUFJdjdDLEVBQUk2SCxFQUFFNHBCLEdBQUksQ0FBRSxFQUFjNXBCLEVBQUV3dkUsWUFBWXBNLGVBQWUscUJBQXNCLFlBQVksU0FBVS85RCxHQUcxSCxJQUFJaE4sRUFDSixPQUFPMkgsRUFBRTB6QyxHQUFHMjJCLEdBQUdobEUsR0FBR3ZOLE1BQUssU0FBVXl1QixHQUM3QixPQUFPbHVCLEVBQUlrdUIsRUFBR2p3QixFQUFJMEosRUFBRXd2RSxZQUFZcmxELEdBQUdwakIsR0FHbkM1TyxFQUFJLElBQUl1eEUsR0FBRzFwRSxFQUFFa25CLEdBQUk1d0IsRUFBRzBKLEVBQUV3dkUsWUFBWXBsRCxNQUFPOXpCLEVBQUUrekUsR0FBR2hsRSxNQUM5Q3ZOLE1BQUssU0FBVWtJLEdBQ2YsSUFBSyxJQUFJK0csRUFBSSxHQUFJelEsRUFBSSxHQUFJaXdCLEVBQUk0MUMsS0FBTTcyRCxFQUFJLEVBQUd4QixFQUFJekwsRUFFNUNpTixFQUFJeEIsRUFBRW5OLE9BQVEyTyxJQUFLLENBQ2pCLElBQUlrRyxFQUFJMUgsRUFBRXdCLEdBQ1Z5QixFQUFFdFIsS0FBSytWLEVBQUVzOUQsU0FDVCxJQUFLLElBQUl4aUQsRUFBSSxFQUFHcmdCLEVBQUl1RixFQUFFdzlELFVBQVcxaUQsRUFBSXJnQixFQUFFdFAsT0FBUTJ2QixJQUFLLENBQ2hELElBQUlFLEVBQUl2Z0IsRUFBRXFnQixHQUNWQyxFQUFJQSxFQUFFdkgsSUFBSXdILEVBQUVwbEIsTUFHcEIsSUFBSyxJQUFJbEcsRUFBSSxFQUFHMkksRUFBSTdELEVBQUc5RSxFQUFJMkksRUFBRWxOLE9BQVF1RSxJQUFLLENBQ3RDLElBQUl1TCxFQUFJNUMsRUFBRTNJLEdBQ1Y1RSxFQUFFYixLQUFLZ1IsRUFBRXFpRSxTQUNULElBQUssSUFBSTVpRSxFQUFJLEVBQUdqQyxFQUFJd0MsRUFBRXVpRSxVQUFXOWlFLEVBQUlqQyxFQUFFdE4sT0FBUXVQLElBQUssQ0FDaEQsSUFBSVcsRUFBSTVDLEVBQUVpQyxHQUNWcWdCLEVBQUlBLEVBQUV2SCxJQUFJblksRUFBRXpGLE1BS0ksT0FBT2pKLEVBQUV3NkMsR0FBR3R0QyxFQUFHa2hCLEdBQUd6dUIsTUFBSyxTQUFVdU4sR0FDckQsTUFBTyxDQUNId2tCLEdBQUl4a0IsRUFDSjBrQixHQUFJaGpCLEVBQ0pnaUIsR0FBSXp5QixhQU10QixLQUFLLEVBQ0gsT0FBT2l3QixFQUFJbHVCLEVBQUVnTyxPQUFRLENBQUUsR0FBZ0JyRyxFQUFFMHpDLEdBQUtwOUMsRUFBRzBKLEVBQUU0cEIsR0FBS3p4QixFQUFHNkgsRUFBRTIyQixHQUFHdE8sR0FBR3JvQixFQUFFNHBCLElBQUtyRCxXQW9CdEYsU0FBU2tyQyxHQUFHcHNELEVBQUdyRixHQUNmLElBQUkzSCxFQUFJLEdBQUVnTixHQUNWLE9BQU9oTixFQUFFbTNFLFlBQVlwTSxlQUFlLG9CQUFxQixxQkFBcUIsU0FBVS85RCxHQUNwRixJQUFJMEIsRUFBSS9HLEVBQUVrcEUsTUFBTS9uRSxPQUFRN0ssRUFBSStCLEVBQUU2dUIsR0FBRzZrRCxHQUFHLENBQ2hDdGEsSUFBSSxJQUVSLE9BQU8sU0FBU3BzRCxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUNyQixJQUFJelEsRUFBSStCLEVBQUU2d0UsTUFBTy93RSxFQUFJN0IsRUFBRTZLLE9BQVFvbEIsRUFBSXM4QyxHQUFHcm9FLFVBQ3RDLE9BQU9yQyxFQUFFd0QsU0FBUSxTQUFVMEosR0FDdkJraEIsRUFBSUEsRUFBRXp1QixNQUFLLFdBQ1AsT0FBT2lQLEVBQUV1cUMsR0FBR3R4QyxFQUFHcUYsTUFDZnZOLE1BQUssU0FBVWtJLEdBQ2YsSUFBSTdILEVBQUk2SCxFQUFHdW1CLEVBQUlsdUIsRUFBRTI1QyxHQUFHbDJDLElBQUl1SixHQUN4QixHQUFFLE9BQVNraEIsS0FBTXB1QixHQUFLQSxFQUFFNEcsUUFBUTJuQixFQUFFSCxHQUFLLEtBQVFwdUIsRUFBSTdCLEVBQUVNLEdBQUd5TyxFQUFHbE4sRUFBR0UsS0FJOUQwTyxFQUFFb3NDLEdBQUdoN0MsRUFBR0UsRUFBRWc3QyxVQUViOXNCLEVBQUV6dUIsTUFBSyxXQUNSLE9BQU91TixFQUFFcXVDLEdBQUd5MkIsR0FBR25xRSxFQUFHMUosTUFkbkIsQ0FnQkwrQixFQUFHZ04sRUFBR3JGLEVBQUcxSixHQUFHd0IsTUFBSyxXQUNmLE9BQU94QixFQUFFNkUsTUFBTWtLLE1BQ2Z2TixNQUFLLFdBQ0wsT0FBT08sRUFBRXE3QyxHQUFHMmUsR0FBR2h0RCxNQUNmdk4sTUFBSyxXQUNMLE9BQU9PLEVBQUV1eEIsR0FBRytvQixHQUFHdHRDLEVBQUcwQixTQWMxQixTQUFTbXJELEdBQUc3c0QsR0FDWixJQUFJckYsRUFBSSxHQUFFcUYsR0FDVixPQUFPckYsRUFBRXd2RSxZQUFZcE0sZUFBZSxtQ0FBb0MsWUFBWSxTQUFVLzlELEdBQzFGLE9BQU9yRixFQUFFMm5CLEdBQUc4bUQsR0FBR3BwRSxNQVduQixTQUFTbXRELEdBQUdudEQsRUFBR3JGLEdBQ2YsSUFBSTNILEVBQUksR0FBRWdOLEdBQUkwQixFQUFJL0csRUFBRW82RCxHQUFJOWpFLEVBQUkrQixFQUFFZ3lCLEdBQzlCLE9BQU9oeUIsRUFBRW0zRSxZQUFZcE0sZUFBZSxxQkFBc0IscUJBQXFCLFNBQVUvOUQsR0FDckYsSUFBSWxOLEVBQUlFLEVBQUU2dUIsR0FBRzZrRCxHQUFHLENBQ1p0YSxJQUFJLElBR0FuN0QsRUFBSStCLEVBQUVneUIsR0FDZCxJQUFJOUQsRUFBSSxHQUNSdm1CLEVBQUVzK0QsR0FBRzNpRSxTQUFRLFNBQVVxRSxFQUFHN0gsR0FDdEIsSUFBSW1OLEVBQUloUCxFQUFFd0YsSUFBSTNELEdBQ2QsR0FBSW1OLEVBQUcsQ0FJSGloQixFQUFFOXdCLEtBQUs0QyxFQUFFc3ZCLEdBQUc2ckMsR0FBR251RCxFQUFHckYsRUFBRWs3QixHQUFJL2lDLEdBQUdMLE1BQUssV0FDNUIsT0FBT08sRUFBRXN2QixHQUFHcW5ELEdBQUczcEUsRUFBR3JGLEVBQUU0N0IsR0FBSXpqQyxPQUU1QixJQUFJMkwsRUFBSTlELEVBQUVtN0QsWUFFTSxHQUFJcjNELEVBQUUrbEQsSUFBTSxFQUFHLENBQzNCLElBQUlyK0MsRUFBSWxHLEVBQUU4MUQsR0FBR3QzRCxFQUFHaUQsR0FBR3d6RCxHQUFHbDFELEVBQUVndUQsSUFDeEIvOEQsRUFBSUEsRUFBRWtrRSxHQUFHcmlFLEVBQUdxVCxHQWNaLFNBQVNuRyxFQUFHckYsRUFBRzNILEdBRVgsT0FBTyxHQUFFMkgsRUFBRW03RCxZQUFZdFIsSUFBTSxHQUFJLElBQU14a0QsRUFBRTgxRCxZQUFZdFIsS0FNckQ3cEQsRUFBRW82RCxHQUFHenFCLElBQU10cUMsRUFBRSswRCxHQUFHenFCLEtBQU8sS0FBT3QzQyxFQUFFdWpDLEdBQUd4Z0IsS0FBTy9pQixFQUFFbWhDLEdBQUdwZSxLQUFPL2lCLEVBQUU2aUMsR0FBRzlmLEtBQU8sRUFSdEUsQ0FTRTlWLEVBQUdrRyxFQUFHeEwsSUFBTXVtQixFQUFFOXdCLEtBQUs0QyxFQUFFc3ZCLEdBQUdzcUMsR0FBRzVzRCxFQUFHbUcsU0FJNUMsSUFBSWxHLEVBQUlvM0QsS0FLQSxHQUFJMThELEVBQUV3K0QsR0FBRzdpRSxTQUFRLFNBQVVvTCxFQUFHelEsR0FDbEMwSixFQUFFeStELEdBQUcxdkQsSUFBSWhJLElBQU13ZixFQUFFOXdCLEtBQUs0QyxFQUFFbTNFLFlBQVl2RyxHQUFHdmhELEdBQUdyaUIsRUFBRzBCLE9BSWpEd2YsRUFBRTl3QixLQWlCRixTQUFTNFAsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFHbEJ6USxHQUNJLElBQUk2QixFQUFJZ2tFLEtBQ1IsT0FBTzlqRSxFQUFFc0QsU0FBUSxTQUFVMEosR0FDdkIsT0FBT2xOLEVBQUlBLEVBQUU2bUIsSUFBSTNaLE1BQ2hCckYsRUFBRXFwRSxXQUFXaGtFLEVBQUdsTixHQUFHTCxNQUFLLFNBQVV1TixHQUNuQyxJQUFJL08sRUFBSW9tRSxLQUNSLE9BQU9ya0UsRUFBRXNELFNBQVEsU0FBVXRELEVBQUdGLEdBQzFCLElBQUlvdUIsRUFBSWxoQixFQUFFdkosSUFBSXpELEdBQUlpTixFQUFJeUIsRUFLRjVPLGFBQWFWLElBQU1VLEVBQUU0RyxRQUFRNDRELFFBQVE5ckMsR0FBRW5lLFFBSTNEMU4sRUFBRTJ6QyxHQUFHdDdDLEVBQUdpTixHQUFJaFAsRUFBSUEsRUFBRWtrRSxHQUFHbmlFLEVBQUdGLElBQU0sTUFBUW91QixHQUFLcHVCLEVBQUU0RyxRQUFRMm5CLEVBQUVILEVBQUV4bkIsU0FBVyxHQUFLLElBQU01RyxFQUFFNEcsUUFBUTJuQixFQUFFSCxFQUFFeG5CLFVBQVl3bkIsRUFBRXloRCxrQkFBb0Job0UsRUFBRW16QyxHQUFHaDdDLEVBQUdtTixHQUN2SWhQLEVBQUlBLEVBQUVra0UsR0FBR25pRSxFQUFHRixJQUFNLEdBQUUsYUFBYyxzQ0FBdUNFLEVBQUcscUJBQXNCa3VCLEVBQUV4bkIsUUFBUyxrQkFBbUI1RyxFQUFFNEcsWUFDakl6SSxLQXJCYixDQXVCRStPLEVBQUdsTixFQUFHNkgsRUFBRXcrRCxHQUFJejNELEdBQUdqUCxNQUFLLFNBQVV1TixHQUM1QkMsRUFBSUQsT0FDRDBCLEVBQUU0d0QsUUFBUTlyQyxHQUFFbmUsT0FBUSxDQUN2QixJQUFJNUosRUFBSXpMLEVBQUVzdkIsR0FBRzhtRCxHQUFHcHBFLEdBQUd2TixNQUFLLFNBQVVrSSxHQUM5QixPQUFPM0gsRUFBRXN2QixHQUFHc3JDLEdBQUc1dEQsRUFBR0EsRUFBRWd1RCxHQUFJdHNELE1BRTVCd2YsRUFBRTl3QixLQUFLcU8sR0FFWCxPQUFPKytELEdBQUduVixHQUFHbm5DLEdBQUd6dUIsTUFBSyxXQUNqQixPQUFPSyxFQUFFZ0QsTUFBTWtLLE1BQ2Z2TixNQUFLLFdBQ0wsT0FBT08sRUFBRXV4QixHQUFHNm5CLEdBQUdwc0MsRUFBR0MsU0FFdEJsSyxNQUFLLFNBQVVpSyxHQUNmLE9BQU9oTixFQUFFZ3lCLEdBQUsvekIsRUFBRytPLEtBU3JCLFNBQVN5dEQsR0FBR3p0RCxFQUFHckYsR0FDZixJQUFJM0gsRUFBSSxHQUFFZ04sR0FDVixPQUFPaE4sRUFBRW0zRSxZQUFZcE0sZUFBZSwwQkFBMkIsWUFBWSxTQUFVLzlELEdBQ2pGLFlBQU8sSUFBV3JGLElBQU1BLEdBQUssR0FBSTNILEVBQUVxN0MsR0FBR28yQixHQUFHemtFLEVBQUdyRixNQWVoRCxTQUFTa3pELEdBQUc3dEQsRUFBR3JGLEdBQ2YsSUFBSTNILEVBQUksR0FBRWdOLEdBQ1YsT0FBT2hOLEVBQUVtM0UsWUFBWXBNLGVBQWUsa0JBQW1CLGFBQWEsU0FBVS85RCxHQUMxRSxJQUFJMEIsRUFDSixPQUFPMU8sRUFBRXN2QixHQUFHOHFDLEdBQUdwdEQsRUFBR3JGLEdBQUdsSSxNQUFLLFNBQVV4QixHQUNoQyxPQUFPQSxHQUlQeVEsRUFBSXpRLEVBQUd1c0UsR0FBR3JvRSxRQUFRdU0sSUFBTTFPLEVBQUVzdkIsR0FBRzBwQyxHQUFHaHNELEdBQUd2TixNQUFLLFNBQVV4QixHQUM5QyxPQUFPeVEsRUFBSSxJQUFJZzBELEdBQUcvNkQsRUFBRzFKLEVBQUcsRUFBaUIrTyxFQUFFZ3VELElBQUtoN0QsRUFBRXN2QixHQUFHZ25ELEdBQUd0cEUsRUFBRzBCLEdBQUdqUCxNQUFLLFdBQy9ELE9BQU9pUCxjQUluQjNMLE1BQUssU0FBVWlLLEdBR2YsSUFBSTBCLEVBQUkxTyxFQUFFZ3lCLEdBQUd2dUIsSUFBSXVKLEVBQUUyMUQsVUFDbkIsT0FBUSxPQUFTajBELEdBQUsxQixFQUFFKzBELEdBQUcxekMsRUFBRTNmLEVBQUVxekQsSUFBTSxLQUFPL2hFLEVBQUVneUIsR0FBS2h5QixFQUFFZ3lCLEdBQUdtd0MsR0FBR24xRCxFQUFFMjFELFNBQVUzMUQsR0FBSWhOLEVBQUU0eEIsR0FBR2x1QixJQUFJaUUsRUFBR3FGLEVBQUUyMUQsV0FDekYzMUQsS0FpQlIsU0FBU3NzRCxHQUFHdHNELEVBQUcwQixFQUFHelEsR0FDZCxPQUFPLEVBQUVOLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHN0gsRUFBR291QixFQUFHamhCLEVBQ2IsT0FBTyxFQUFFdFAsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNIcEcsRUFBSSxHQUFFcUYsR0FBSWxOLEVBQUk2SCxFQUFFcXFCLEdBQUd2dUIsSUFBSWlMLEdBQUl3ZixFQUFJandCLEVBQUksWUFBYyxvQkFBcUIrQixFQUFFK04sTUFBUSxFQUVsRixLQUFLLEVBQ0gsT0FBTy9OLEVBQUVpTyxLQUFLN1EsS0FBSyxDQUFFLEVBQUcsRUFBRyxDQUFFLElBQU1hLEVBQUksQ0FBRSxFQUFjLEdBQU0sQ0FBRSxFQUFjMEosRUFBRXd2RSxZQUFZcE0sZUFBZSxpQkFBa0I3OEMsR0FBRyxTQUFVbGhCLEdBQ3JJLE9BQU9yRixFQUFFd3ZFLFlBQVl2RyxHQUFHaEssYUFBYTU1RCxFQUFHbE4sT0FHOUMsS0FBSyxFQUNIRSxFQUFFZ08sT0FBUWhPLEVBQUUrTixNQUFRLEVBRXRCLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBYyxHQUV6QixLQUFLLEVBQ0gsSUFBS205RCxHQUFHaitELEVBQUlqTixFQUFFZ08sUUFBUyxNQUFNZixFQU1iLE9BQU8sR0FBRSxhQUFjLGdEQUFrRHlCLEVBQUksS0FBT3pCLEdBQ3BHLENBQUUsRUFBYyxHQUVsQixLQUFLLEVBQ0gsT0FBT3RGLEVBQUVxcUIsR0FBS3JxQixFQUFFcXFCLEdBQUd0b0IsT0FBT2dGLEdBQUkvRyxFQUFFaXFCLEdBQUdqYSxPQUFPN1gsRUFBRXFILFFBQVMsQ0FBRSxVQWFuRSxTQUFTNHlELEdBQUcvc0QsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFJME8sRUFBSSxHQUFFMUIsR0FBSS9PLEVBQUl1MUIsR0FBRW5lLE1BQU92VixFQUFJZ2tFLEtBQy9CLE9BQU9wMUQsRUFBRXlvRSxZQUFZcE0sZUFBZSxnQkFBaUIsWUFBWSxTQUFVLzlELEdBQ3ZFLE9BQU8sU0FBU0EsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFJME8sRUFBSSxHQUFFMUIsR0FBSS9PLEVBQUl5USxFQUFFa2pCLEdBQUdudUIsSUFBSXpELEdBQzNCLFlBQU8sSUFBVy9CLEVBQUl1c0UsR0FBR3JvRSxRQUFRdU0sRUFBRXNqQixHQUFHdnVCLElBQUl4RixJQUFNeVEsRUFBRTRnQixHQUFHOHFDLEdBQUd6eUQsRUFBRzNILEdBRnhELENBR0wwTyxFQUFHMUIsRUFBRzJwRCxHQUFHaHZELElBQUlsSSxNQUFLLFNBQVVrSSxHQUMxQixHQUFJQSxFQUFHLE9BQU8xSixFQUFJMEosRUFBRWs3RCw2QkFBOEJuMEQsRUFBRTRnQixHQUFHcXFDLEdBQUczc0QsRUFBR3JGLEVBQUVnN0QsVUFBVWxqRSxNQUFLLFNBQVV1TixHQUNwRmxOLEVBQUlrTixRQUVSdk4sTUFBSyxXQUNMLE9BQU9pUCxFQUFFNHZCLEdBQUdpZCxHQUFHdnVDLEVBQUdyRixFQUFHM0gsRUFBSS9CLEVBQUl1MUIsR0FBRW5lLE1BQU9yVixFQUFJRixFQUFJZ2tFLFNBQzlDcmtFLE1BQUssU0FBVXVOLEdBQ2YsTUFBTyxDQUNIZzhELFVBQVdoOEQsRUFDWG9sQixHQUFJdHlCLFNBT3BCLFNBQVM0NkQsR0FBRzF0RCxFQUFHckYsR0FDWCxJQUFJM0gsRUFBSSxHQUFFZ04sR0FBSTBCLEVBQUksR0FBRTFPLEVBQUVzdkIsSUFBS3J4QixFQUFJK0IsRUFBRWd5QixHQUFHdnVCLElBQUlrRSxHQUN4QyxPQUFPMUosRUFBSWlFLFFBQVFDLFFBQVFsRSxFQUFFa0osUUFBVW5ILEVBQUVtM0UsWUFBWXBNLGVBQWUsa0JBQW1CLFlBQVksU0FBVS85RCxHQUN6RyxPQUFPMEIsRUFBRXcwQixHQUFHbDJCLEVBQUdyRixHQUFHbEksTUFBSyxTQUFVdU4sR0FDN0IsT0FBT0EsRUFBSUEsRUFBRTdGLE9BQVMsV0FZbEMsU0FBUzZ4RCxHQUFHaHNELEdBQ1IsSUFBSXJGLEVBQUksR0FBRXFGLEdBQ1YsT0FBT3JGLEVBQUV3dkUsWUFBWXBNLGVBQWUsMkJBQTRCLFlBQVksU0FBVS85RCxHQUNsRixPQUFPLFNBQVNBLEVBQUdyRixFQUFHM0gsR0FDbEIsSUFBSTBPLEVBQUksR0FBRTFCLEdBQUkvTyxFQUFJb21FLEtBQU12a0UsRUFBSTg0QyxHQUFHNTRDLEdBQUlrdUIsRUFBSWtwQixHQUFHenZDLEdBQUlzRixFQUFJMGxFLFlBQVlNLFdBQVduekUsR0FBRyxHQUM1RSxPQUFPb3VCLEVBQUV1OUMsR0FBRyxDQUNSdm5FLE1BQU9vM0MsR0FBRys0QixjQUNWekksTUFBTzMrRCxJQUNSLFNBQVVELEVBQUdyRixHQUdaLElBQUkzSCxFQUFJazRDLEdBQUd4cEMsRUFBRW83RCxXQUFZbmlFLEdBQ3pCMUosRUFBSUEsRUFBRWtrRSxHQUFHbmlFLEVBQUUrSSxJQUFLL0ksR0FBSUYsRUFBSTZILEVBQUVvcEUsWUFDMUJ0eEUsTUFBSyxXQUNMLE1BQU8sQ0FDSDR5QixHQUFJcDBCLEVBQ0o4eUUsU0FBVXI0QixHQUFHNTRDLE9BYmxCLENBZ0JMNkgsRUFBRWtuQixHQUFJN2hCLEVBQUdyRixFQUFFd3FCLE9BQ2JwdkIsTUFBSyxTQUFVaUssR0FDZixJQUFJaE4sRUFBSWdOLEVBQUVxbEIsR0FBSTNqQixFQUFJMUIsRUFBRStqRSxTQUNwQixPQUFPcHBFLEVBQUV3cUIsR0FBS3pqQixFQUFHMU8sS0FVekIsU0FBUzB6RSxHQUFHMW1FLEdBQ1IsT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQ0osT0FBTyxFQUFFaEssTUFBTSxTQUFVcUMsR0FDckIsTUFBTyxDQUFFLEdBQWdCMkgsRUFBSSxHQUFFcUYsSUFBSW1xRSxZQUFZcE0sZUFBZSw2Q0FBOEMsWUFBWSxTQUFVLzlELEdBQzlILE9BQU8sU0FBU0EsR0FDWixJQUFJckYsRUFBSXl2QyxHQUFHcHFDLEdBQUloTixFQUFJd3pCLEdBQUVuZSxNQUVELE9BQU8xTixFQUFFOGpFLEdBQUcsQ0FDNUJ2bkUsTUFBT28zQyxHQUFHKzRCLGNBQ1Z4SSxTQUFTLElBQ1YsU0FBVTcrRCxFQUFHckYsRUFBRytHLEdBQ2YvRyxFQUFFb3BFLFdBQWEvd0UsRUFBSTA0QyxHQUFHL3dDLEVBQUVvcEUsV0FBWXJpRSxFQUFFaFAsVUFDdENELE1BQUssV0FDTCxPQUFPTyxLQVRSLENBV0xnTixNQUNGakssTUFBSyxTQUFVaUssR0FDZnJGLEVBQUV3cUIsR0FBS25sQixZQWVuQixTQUFTK2tFLEdBQUcva0UsR0FDWixPQUFPLEVBQUVyUCxVQUFNLE9BQVEsR0FBUSxXQUMzQixPQUFPLEVBQUVBLE1BQU0sU0FBVWdLLEdBQ3JCLEdBQUlxRixFQUFFaUUsT0FBUyxHQUFFaXZELHFCQUF1Qmx6RCxFQUFFNEQsVUFBWXVnRSxHQUFJLE1BQU1ua0UsRUFDaEUsT0FBTyxHQUFFLGFBQWMsbUNBQW9DLENBQUUsU0FvRHJFLElBQUk0bUUsR0FBbUIsV0FDdkIsU0FBUzVtRSxFQUFFQSxFQUFHckYsRUFBRzNILEVBQUcwTyxFQUFHelEsRUFBRzZCLEdBQ3RCbkMsS0FBSysxRCxHQUFLMW1ELEVBQUdyUCxLQUFLczdCLEdBQUtqNUIsRUFBR3JDLEtBQUtrNUIsR0FBS25vQixFQUFHL1EsS0FBS2kzRCxHQUFLMzJELEVBQUdOLEtBQUtxc0IsU0FBV2xxQixFQUFHbkMsS0FBSzhvRSxNQUFRLEVBTXBGOW9FLEtBQUttOEIsR0FBSyxFQUFHbjhCLEtBQUt5NUIsR0FBSyxLQUFNejVCLEtBQUtxNkMsT0FBUyxLQUFNcjZDLEtBQUt1dkUsR0FBSyxJQUFJM0MsR0FBR3Y5RCxFQUFHckYsR0FTekUsT0FBT3FGLEVBQUUvTSxVQUFVODNCLEdBQUssV0FDcEIsT0FBTyxJQUFxQnA2QixLQUFLOG9FLE9BQVMsSUFBaUI5b0UsS0FBSzhvRSxPQUFTLElBQW9COW9FLEtBQUs4b0UsT0FNdEd6NUQsRUFBRS9NLFVBQVU2NEIsR0FBSyxXQUNiLE9BQU8sSUFBaUJuN0IsS0FBSzhvRSxPQVNqQ3o1RCxFQUFFL00sVUFBVXVtRCxNQUFRLFdBQ2hCLElBQWtCN29ELEtBQUs4b0UsTUFBUTlvRSxLQUFLdytDLE9BQVN4K0MsS0FBSzg0QixNQVF0RHpwQixFQUFFL00sVUFBVXN3RCxLQUFPLFdBQ2YsT0FBTyxFQUFFNXlELFVBQU0sT0FBUSxHQUFRLFdBQzNCLE9BQU8sRUFBRUEsTUFBTSxTQUFVcVAsR0FDckIsT0FBUUEsRUFBRWUsT0FDUixLQUFLLEVBQ0gsT0FBT3BRLEtBQUtvNkIsS0FBTyxDQUFFLEVBQWNwNkIsS0FBSzhTLE1BQU0sSUFBcUIsQ0FBRSxFQUFjLEdBRXJGLEtBQUssRUFDSHpELEVBQUVnQixPQUFRaEIsRUFBRWUsTUFBUSxFQUV0QixLQUFLLEVBQ0gsTUFBTyxDQUFFLFdBYXpCZixFQUFFL00sVUFBVTAyQixHQUFLLFdBQ2JoNUIsS0FBSzhvRSxNQUFRLEVBQWtCOW9FLEtBQUt1dkUsR0FBR3I2RCxTQVkzQzdGLEVBQUUvTSxVQUFVKzNCLEdBQUssV0FDYixJQUFJaHJCLEVBQUlyUCxLQUdBQSxLQUFLbTdCLE1BQVEsT0FBU243QixLQUFLeTVCLEtBQU96NUIsS0FBS3k1QixHQUFLejVCLEtBQUsrMUQsR0FBR2lELEdBQUdoNUQsS0FBS3M3QixHQUFJLEtBQUssV0FDekUsT0FBT2pzQixFQUFFbXJELFVBR2dDbnJELEVBQUUvTSxVQUFVeTNCLEdBQUssU0FBUzFxQixHQUN2RXJQLEtBQUswWixLQUFNMVosS0FBS3E2QyxPQUFPakMsS0FBSy9vQyxJQUVnREEsRUFBRS9NLFVBQVVrNEQsR0FBSyxXQUM3RixPQUFPLEVBQUV4NkQsVUFBTSxPQUFRLEdBQVEsV0FDM0IsT0FBTyxFQUFFQSxNQUFNLFNBQVVxUCxHQUNyQixPQUFPclAsS0FBS203QixLQUFPLENBQUUsRUFBZW43QixLQUFLOFMsTUFBTSxJQUFxQixDQUFFLFVBSXpDekQsRUFBRS9NLFVBQVVvWCxHQUFLLFdBQ3REMVosS0FBS3k1QixLQUFPejVCLEtBQUt5NUIsR0FBR3dFLFNBQVVqK0IsS0FBS3k1QixHQUFLLE9BZTVDcHFCLEVBQUUvTSxVQUFVd1EsTUFBUSxTQUFTekQsRUFBRzBCLEdBQzVCLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLE9BQU8sRUFBRUEsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUdILE9BQU9wUSxLQUFLMFosS0FBTTFaLEtBQUt1dkUsR0FBR3R4QyxTQUcxQmorQixLQUFLbThCLEtBQU0sSUFBa0I5c0IsRUFFN0JyUCxLQUFLdXZFLEdBQUdyNkQsUUFBVW5FLEdBQUtBLEVBQUV1QyxPQUFTLEdBQUVndkQsb0JBRXBDLEdBQUV2eEQsRUFBRWhSLFlBQWEsR0FBRSxtRUFDbkJDLEtBQUt1dkUsR0FBR3ZaLE1BQVFqbEQsR0FBS0EsRUFBRXVDLE9BQVMsR0FBRSt1RCxpQkFHbENyaUUsS0FBS2kzRCxHQUFHcmMsS0FFUixPQUFTNTZDLEtBQUtxNkMsU0FBV3I2QyxLQUFLczVCLEtBQU10NUIsS0FBS3E2QyxPQUFPdm5DLFFBQVM5UyxLQUFLcTZDLE9BQVMsTUFHdkVyNkMsS0FBSzhvRSxNQUFRejVELEVBQUcsQ0FBRSxFQUFjclAsS0FBS3FzQixTQUFTNE0sR0FBR2xvQixJQUVuRCxLQUFLLEVBR0gsT0FBTy9HLEVBQUVxRyxPQUFRLENBQUUsV0FTbkNoQixFQUFFL00sVUFBVWczQixHQUFLLGFBQWVqcUIsRUFBRS9NLFVBQVVrOEMsS0FBTyxXQUMvQyxJQUFJbnZDLEVBQUlyUCxLQUNSQSxLQUFLOG9FLE1BQVEsRUFDYixJQUFJOStELEVBQUloSyxLQUFLcThCLEdBQUdyOEIsS0FBS204QixJQUFLOTVCLEVBQUlyQyxLQUFLbThCLEdBRTNCbjhCLEtBQUtpM0QsR0FBR3R1QyxXQUFXdmpCLE1BQUssU0FBVTRFLEdBS3RDcUYsRUFBRThzQixLQUFPOTVCLEdBSVRnTixFQUFFd3VCLEdBQUc3ekIsTUFDTCxTQUFVM0gsR0FDVjJILEdBQUUsV0FDRSxJQUFJQSxFQUFJLElBQUlxSCxHQUFFLEdBQUUwd0QsUUFBUywrQkFBaUMxL0QsRUFBRTRRLFNBQzVELE9BQU81RCxFQUFFd3RCLEdBQUc3eUIsVUFHckJxRixFQUFFL00sVUFBVXU3QixHQUFLLFNBQVN4dUIsR0FDekIsSUFBSXJGLEVBQUloSyxLQUFNcUMsRUFBSXJDLEtBQUtxOEIsR0FBR3I4QixLQUFLbThCLElBQy9CbjhCLEtBQUtxNkMsT0FBU3I2QyxLQUFLMjdDLEdBQUd0c0MsR0FBSXJQLEtBQUtxNkMsT0FBT25nQixJQUFHLFdBQ3JDNzNCLEdBQUUsV0FDRSxPQUFPMkgsRUFBRTgrRCxNQUFRLEVBQWU5K0QsRUFBRXFpQixTQUFTNk4sV0FFOUNsNkIsS0FBS3E2QyxPQUFPcGhCLElBQUcsU0FBVTVwQixHQUMxQmhOLEdBQUUsV0FDRSxPQUFPMkgsRUFBRTZ5QixHQUFHeHRCLFNBRWZyUCxLQUFLcTZDLE9BQU8wTyxXQUFVLFNBQVUxNUMsR0FDakNoTixHQUFFLFdBQ0UsT0FBTzJILEVBQUUrK0MsVUFBVTE1QyxVQUc1QkEsRUFBRS9NLFVBQVV3MkIsR0FBSyxXQUNoQixJQUFJenBCLEVBQUlyUCxLQUNSQSxLQUFLOG9FLE1BQVEsRUFBa0I5b0UsS0FBS3V2RSxHQUFHM1gsSUFBRyxXQUN0QyxPQUFPLEVBQUV2b0QsT0FBRyxPQUFRLEdBQVEsV0FDeEIsT0FBTyxFQUFFclAsTUFBTSxTQUFVcVAsR0FDckIsT0FBT3JQLEtBQUs4b0UsTUFBUSxFQUFrQjlvRSxLQUFLNm9ELFFBQVMsQ0FBRSxhQU10RXg1QyxFQUFFL00sVUFBVXU2QixHQUFLLFNBQVN4dEIsR0FLdEIsT0FBTyxHQUFFLG1CQUFvQixxQkFBdUJBLEdBQUlyUCxLQUFLcTZDLE9BQVMsS0FBTXI2QyxLQUFLOFMsTUFBTSxFQUFnQnpELElBUTNHQSxFQUFFL00sVUFBVSs1QixHQUFLLFNBQVNodEIsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUNSLE9BQU8sU0FBU3FDLEdBQ1oySCxFQUFFK3JELEdBQUcrWSxJQUFHLFdBQ0osT0FBTzlrRSxFQUFFbXlCLEtBQU85c0IsRUFBSWhOLEtBQU8sR0FBRSxtQkFBb0IseURBQ2pEa0MsUUFBUUMsZ0JBR2pCNkssRUEzTm9CLEdBNE50QjJtRSxHQUFtQixTQUFTaHNFLEdBQzdCLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEVBQUcwTyxFQUFHelEsRUFBRzZCLEdBQ25CLElBQUlvdUIsRUFBSXZ3QixLQUNSLE9BQVF1d0IsRUFBSXZtQixFQUFFekgsS0FBS3ZDLEtBQU1xUCxFQUFHLG1DQUF5RSxxQkFBOENoTixFQUFHME8sRUFBRzVPLElBQU1uQyxNQUFNbXNFLFdBQWE3ckUsRUFDbExpd0IsRUFFSixPQUFPLEVBQUVsdUIsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVcTVDLEdBQUssU0FBU3RzQyxHQUN0QyxPQUFPclAsS0FBS2s1QixHQUFHdUQsR0FBRyxTQUFVcHRCLElBQzdCaE4sRUFBRUMsVUFBVXltRCxVQUFZLFNBQVMxNUMsR0FFaENyUCxLQUFLdXZFLEdBQUdyNkQsUUFDUixJQUFJbEwsRUFBSSxTQUFTcUYsRUFBR3JGLEdBQ2hCLElBQUkzSCxFQUNKLEdBQUksaUJBQWtCMkgsRUFBRyxDQUNyQkEsRUFBRXl2RSxhQUdGLElBQUkxb0UsRUFBSSxTQUFTMUIsR0FDYixNQUFPLGNBQWdCQSxFQUFJLEVBQW1CLFFBQVVBLEVBQUksRUFBZ0IsV0FBYUEsRUFBSSxFQUFrQixZQUFjQSxFQUFJLEVBQWtCLFVBQVlBLEVBQUksRUFBZ0IsS0FEL0ssQ0FFTnJGLEVBQUV5dkUsYUFBYUMsa0JBQW9CLGFBQWNwNUUsRUFBSTBKLEVBQUV5dkUsYUFBYTFRLFdBQWEsR0FBSTVtRSxFQUFJLFNBQVNrTixFQUFHckYsR0FDbkcsT0FBT3FGLEVBQUV3NUIsSUFBTSxRQUFFLElBQVc3K0IsR0FBSyxpQkFBbUJBLEdBQUl3NkQsR0FBR0MsaUJBQWlCejZELEdBQUssTUFBUSxRQUFFLElBQVdBLEdBQUtBLGFBQWE2WixZQUN4SDJnRCxHQUFHRSxlQUFlMTZELEdBQUssSUFBSTZaLGFBRjRELENBR3pGeFUsRUFBR3JGLEVBQUV5dkUsYUFBYXRVLGFBQWM1MEMsRUFBSXZtQixFQUFFeXZFLGFBQWF6USxNQUFPMTVELEVBQUlpaEIsR0FBSyxTQUFTbGhCLEdBQzFFLElBQUlyRixPQUFJLElBQVdxRixFQUFFaUUsS0FBTyxHQUFFeXVELFFBQVV1RCxHQUFHajJELEVBQUVpRSxNQUM3QyxPQUFPLElBQUlqQyxHQUFFckgsRUFBR3FGLEVBQUU0RCxTQUFXLElBRm9DLENBR25Fc2QsR0FDRmx1QixFQUFJLElBQUlra0UsR0FBR3gxRCxFQUFHelEsRUFBRzZCLEVBQUdtTixHQUFLLFdBQ3RCLEdBQUksbUJBQW9CdEYsRUFBRyxDQUM5QkEsRUFBRTJ2RSxlQUNGLElBQUk3ckUsRUFBSTlELEVBQUUydkUsZUFDVjdyRSxFQUFFcEUsU0FBVW9FLEVBQUVwRSxTQUFTaEgsS0FBTW9MLEVBQUVwRSxTQUFTd2hFLFdBQ3hDLElBQUkxMUQsRUFBSXN3QixHQUFHejJCLEVBQUd2QixFQUFFcEUsU0FBU2hILE1BQU80dEIsRUFBSTBVLEdBQUdsM0IsRUFBRXBFLFNBQVN3aEUsWUFBYWo3RCxFQUFJLElBQUk4bkQsR0FBRyxDQUN0RW9SLFNBQVUsQ0FDTkMsT0FBUXQ3RCxFQUFFcEUsU0FBUzAvRCxVQUV2QjU0QyxFQUFJLElBQUl5a0MsR0FBR3ovQyxFQUFHOGEsRUFBR3JnQixFQUFHLElBQUsvSyxFQUFJNEksRUFBRWk3RCxXQUFhLEdBQUlsN0QsRUFBSUMsRUFBRSs2RCxrQkFBb0IsR0FDOUV4bUUsRUFBSSxJQUFJeWtFLEdBQUc1aEUsRUFBRzJJLEVBQUcyaUIsRUFBRXBsQixJQUFLb2xCLFFBQ3JCLEdBQUksbUJBQW9CeG1CLEVBQUcsQ0FDOUJBLEVBQUU0dkUsZUFDRixJQUFJbnBFLEVBQUl6RyxFQUFFNHZFLGVBQ1ZucEUsRUFBRS9HLFNBQ0YsSUFBSXdHLEVBQUk0MUIsR0FBR3oyQixFQUFHb0IsRUFBRS9HLFVBQVd1RSxFQUFJd0MsRUFBRTJpRSxTQUFXcHVDLEdBQUd2MEIsRUFBRTJpRSxVQUFZdjlDLEdBQUVuZSxNQUFPN0csRUFBSSxJQUFJcFAsR0FBR3lPLEVBQUdqQyxHQUFJd2tCLEVBQUloaUIsRUFBRW80RCxrQkFBb0IsR0FDbEh4bUUsRUFBSSxJQUFJeWtFLEdBQUcsR0FBSXIwQyxFQUFHNWhCLEVBQUV6RixJQUFLeUYsUUFDdEIsR0FBSSxtQkFBb0I3RyxFQUFHLENBQzlCQSxFQUFFNnZFLGVBQ0YsSUFBSWhyRSxFQUFJN0UsRUFBRTZ2RSxlQUNWaHJFLEVBQUVuRixTQUNGLElBQUl5RyxFQUFJMjFCLEdBQUd6MkIsRUFBR1IsRUFBRW5GLFVBQVd3NEIsRUFBSXJ6QixFQUFFZzZELGtCQUFvQixHQUNyRHhtRSxFQUFJLElBQUl5a0UsR0FBRyxHQUFJNWtDLEVBQUcveEIsRUFBRyxVQUNsQixDQUNILEtBQU0sV0FBWW5HLEdBQUksT0FBTyxLQUM3QkEsRUFBRTRCLE9BQ0YsSUFBSW14QixFQUFJL3lCLEVBQUU0QixPQUNWbXhCLEVBQUVpb0MsU0FDRixJQUFJMWMsRUFBSXZyQixFQUFFdDBCLE9BQVMsRUFBRzBoQyxFQUFJLElBQUlpN0IsR0FBRzljLEdBQUlsekIsRUFBSTJILEVBQUVpb0MsU0FDM0MzaUUsRUFBSSxJQUFJaWxFLEdBQUdseUMsRUFBRytVLEdBRWxCLE9BQU85bkMsRUE5Q0gsQ0ErQ05yQyxLQUFLbXNFLFdBQVk5OEQsR0FBSWhOLEVBQUksU0FBU2dOLEdBSWhDLEtBQU0saUJBQWtCQSxHQUFJLE9BQU93bUIsR0FBRW5lLE1BQ3JDLElBQUkxTixFQUFJcUYsRUFBRW9xRSxhQUNWLE9BQU96dkUsRUFBRSsrRCxXQUFhLytELEVBQUUrK0QsVUFBVXBvRSxPQUFTazFCLEdBQUVuZSxNQUFRMU4sRUFBRW9wRSxTQUFXcHVDLEdBQUdoN0IsRUFBRW9wRSxVQUFZdjlDLEdBQUVuZSxNQU45RCxDQU96QnJJLEdBQ0YsT0FBT3JQLEtBQUtxc0IsU0FBUzBSLEdBQUcvekIsRUFBRzNILElBUS9CQSxFQUFFQyxVQUFVbTdCLEdBQUssU0FBU3B1QixHQUN0QixJQUFJckYsRUFBSSxHQUNSQSxFQUFFMDNELFNBQVcxNUIsR0FBR2hvQyxLQUFLbXNFLFlBQWFuaUUsRUFBRTh2RSxVQUFZLFNBQVN6cUUsRUFBR3JGLEdBQ3hELElBQUkzSCxFQUFHME8sRUFBSS9HLEVBQUVSLE9BQ2IsT0FBUW5ILEVBQUlraUUsR0FBR3h6RCxHQUFLLENBQ2hCczZELFVBQVd6aUMsR0FBR3Y1QixFQUFHMEIsSUFDakIsQ0FDQXZJLE1BQU95L0IsR0FBRzU0QixFQUFHMEIsS0FDZGkwRCxTQUFXaDdELEVBQUVnN0QsU0FBVWg3RCxFQUFFbTdELFlBQVl0UixJQUFNLEVBQUl4eEQsRUFBRThpRSxZQUFjdGdDLEdBQUd4MUIsRUFBR3JGLEVBQUVtN0QsYUFBZW43RCxFQUFFbzZELEdBQUcxekMsRUFBRW1GLEdBQUVuZSxPQUFTLElBSTNHclYsRUFBRSt3RSxTQUFXbnZDLEdBQUc1MEIsRUFBR3JGLEVBQUVvNkQsR0FBRzEwRCxNQUFPck4sRUFWYSxDQVc5Q3JDLEtBQUttc0UsV0FBWTk4RCxHQUNuQixJQUFJaE4sRUFBSSxTQUFTZ04sRUFBR3JGLEdBQ2hCLElBQUkzSCxFQUFJLFNBQVNnTixFQUFHckYsR0FDaEIsT0FBUUEsR0FDTixLQUFLLEVBQ0gsT0FBTyxLQUVULEtBQUssRUFDSCxNQUFPLDRCQUVULEtBQUssRUFDSCxNQUFPLGlCQUVULFFBQ0UsT0FBTyxNQVpQLENBY04sRUFBR0EsRUFBRWc2RCxJQUNQLE9BQU8sTUFBUTNoRSxFQUFJLEtBQU8sQ0FDdEIsbUJBQW9CQSxHQWpCcEIsQ0FtQk5yQyxLQUFLbXNFLFdBQVk5OEQsR0FDbkJoTixJQUFNMkgsRUFBRSt2RSxPQUFTMTNFLEdBQUlyQyxLQUFLKzVCLEdBQUcvdkIsSUFNakMzSCxFQUFFQyxVQUFVODJCLEdBQUssU0FBUy9wQixHQUN0QixJQUFJckYsRUFBSSxHQUNSQSxFQUFFMDNELFNBQVcxNUIsR0FBR2hvQyxLQUFLbXNFLFlBQWFuaUUsRUFBRWkvRCxhQUFlNTVELEVBQUdyUCxLQUFLKzVCLEdBQUcvdkIsSUFDL0QzSCxFQXJIaUIsQ0FzSHRCNHpFLElBQUt5QyxHQUFtQixTQUFTMXVFLEdBQy9CLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEVBQUcwTyxFQUFHelEsRUFBRzZCLEdBQ25CLElBQUlvdUIsRUFBSXZ3QixLQUNSLE9BQVF1d0IsRUFBSXZtQixFQUFFekgsS0FBS3ZDLEtBQU1xUCxFQUFHLGtDQUF1RSxvQkFBNENoTixFQUFHME8sRUFBRzVPLElBQU1uQyxNQUFNbXNFLFdBQWE3ckUsRUFDOUtpd0IsRUFBRTROLElBQUssRUFBSTVOLEVBRWYsT0FBTyxFQUFFbHVCLEVBQUcySCxHQUFJekksT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLEtBQU0sQ0FLckR3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUttK0IsSUFFaEJud0IsWUFBWSxFQUNaaU8sY0FBYyxJQUdsQjVaLEVBQUVDLFVBQVV1bUQsTUFBUSxXQUNoQjdvRCxLQUFLbStCLElBQUssRUFBSW4rQixLQUFLbTNFLHFCQUFrQixFQUFRbnRFLEVBQUUxSCxVQUFVdW1ELE1BQU10bUQsS0FBS3ZDLE9BQ3JFcUMsRUFBRUMsVUFBVWczQixHQUFLLFdBQ2hCdDVCLEtBQUttK0IsSUFBTW4rQixLQUFLbzhCLEdBQUcsS0FDcEIvNUIsRUFBRUMsVUFBVXE1QyxHQUFLLFNBQVN0c0MsR0FDekIsT0FBT3JQLEtBQUtrNUIsR0FBR3VELEdBQUcsUUFBU3B0QixJQUM1QmhOLEVBQUVDLFVBQVV5bUQsVUFBWSxTQUFTMTVDLEdBQ2hDLEdBRUEsS0FBSUEsRUFBRTJxRSxhQUFjaDZFLEtBQUttM0UsZ0JBQWtCOW5FLEVBQUUycUUsWUFBYWg2RSxLQUFLbStCLEdBQUksQ0FJL0RuK0IsS0FBS3V2RSxHQUFHcjZELFFBQ1IsSUFBSWxMLEVBQUksU0FBU3FGLEVBQUdyRixHQUNoQixPQUFPcUYsR0FBS0EsRUFBRTFPLE9BQVMsR0FBSyxRQUFFLElBQVdxSixHQUFJcUYsRUFBRXBQLEtBQUksU0FBVW9QLEdBQ3pELE9BQU8sU0FBU0EsRUFBR3JGLEdBRWYsSUFBSTNILEVBQUlnTixFQUFFNjdELFdBQWFsbUMsR0FBRzMxQixFQUFFNjdELFlBQWNsbUMsR0FBR2g3QixHQUM3QzNILEVBQUVzL0QsUUFBUTlyQyxHQUFFbmUsU0FNWnJWLEVBQUkyaUMsR0FBR2g3QixJQUNQLElBQUkrRyxFQUFJLEtBQ1IsT0FBTzFCLEVBQUUrOEQsa0JBQW9CLzhELEVBQUUrOEQsaUJBQWlCenJFLE9BQVMsSUFBTW9RLEVBQUkxQixFQUFFKzhELGtCQUNyRSxJQUFJOWlDLEdBQUdqbkMsRUFBRzBPLEdBWlAsQ0FhTDFCLEVBQUdyRixPQUNGLEdBaEJILENBaUJOcUYsRUFBRTRxRSxhQUFjNXFFLEVBQUU2cUUsWUFBYTczRSxFQUFJMmlDLEdBQUczMUIsRUFBRTZxRSxZQUMxQyxPQUFPbDZFLEtBQUtxc0IsU0FBU2tNLEdBQUdsMkIsRUFBRzJILEdBR3ZCLE9BQU8sSUFBR3FGLEVBQUU0cUUsY0FBZ0IsSUFBTTVxRSxFQUFFNHFFLGFBQWF0NUUsUUFBU1gsS0FBS20rQixJQUFLLEVBQzVFbitCLEtBQUtxc0IsU0FBUzJSLE1BT2xCMzdCLEVBQUVDLFVBQVVzNkIsR0FBSyxXQUdiLElBQUl2dEIsRUFBSSxHQUNSQSxFQUFFcXlELFNBQVcxNUIsR0FBR2hvQyxLQUFLbXNFLFlBQWFuc0UsS0FBSys1QixHQUFHMXFCLElBRXVCaE4sRUFBRUMsVUFBVTg1QixHQUFLLFNBQVMvc0IsR0FDM0YsSUFBSXJGLEVBQUloSyxLQUFNcUMsRUFBSSxDQUNkMjNFLFlBQWFoNkUsS0FBS20zRSxnQkFDbEJnRCxPQUFROXFFLEVBQUVwUCxLQUFJLFNBQVVvUCxHQUNwQixPQUFPczRCLEdBQUczOUIsRUFBRW1pRSxXQUFZOThELE9BR2hDclAsS0FBSys1QixHQUFHMTNCLElBQ1RBLEVBM0VtQixDQTRFeEI0ekUsSUFBS2haLEdBQW1CLFNBQVNqekQsR0FDL0IsU0FBUzNILEVBQUVnTixFQUFHaE4sRUFBRzBPLEdBQ2IsSUFBSXpRLEVBQUlOLEtBQ1IsT0FBUU0sRUFBSTBKLEVBQUV6SCxLQUFLdkMsT0FBU0EsTUFBTTQ1QyxZQUFjdnFDLEVBQUcvTyxFQUFFNDRCLEdBQUs3MkIsRUFBRy9CLEVBQUU2ckUsV0FBYXA3RCxFQUFHelEsRUFBRXE4QixJQUFLLEVBQ3RGcjhCLEVBRUosT0FBTyxFQUFFK0IsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVZzdCLEdBQUssV0FDN0IsR0FBSXQ5QixLQUFLMjhCLEdBQUksTUFBTSxJQUFJdHJCLEdBQUUsR0FBRWt4RCxvQkFBcUIsNENBRUlsZ0UsRUFBRUMsVUFBVWk1QixHQUFLLFNBQVNsc0IsRUFBR3JGLEVBQUczSCxHQUNwRixJQUFJME8sRUFBSS9RLEtBQ1IsT0FBT0EsS0FBS3M5QixLQUFNdDlCLEtBQUs0NUMsWUFBWWp4QixXQUFXdmpCLE1BQUssU0FBVTlFLEdBQ3pELE9BQU95USxFQUFFbW9CLEdBQUdxQyxHQUFHbHNCLEVBQUdyRixFQUFHM0gsRUFBRy9CLE1BQ3hCd1IsT0FBTSxTQUFVekMsR0FDaEIsTUFBTUEsRUFBRWlFLE9BQVMsR0FBRSt1RCxpQkFBbUJ0eEQsRUFBRTZvQyxZQUFZZ0IsS0FBTXZyQyxNQUdZaE4sRUFBRUMsVUFBVXc2QixHQUFLLFNBQVN6dEIsRUFBR3JGLEVBQUczSCxHQUMxRyxJQUFJME8sRUFBSS9RLEtBQ1IsT0FBT0EsS0FBS3M5QixLQUFNdDlCLEtBQUs0NUMsWUFBWWp4QixXQUFXdmpCLE1BQUssU0FBVTlFLEdBQ3pELE9BQU95USxFQUFFbW9CLEdBQUc0RCxHQUFHenRCLEVBQUdyRixFQUFHM0gsRUFBRy9CLE1BQ3hCd1IsT0FBTSxTQUFVekMsR0FDaEIsTUFBTUEsRUFBRWlFLE9BQVMsR0FBRSt1RCxpQkFBbUJ0eEQsRUFBRTZvQyxZQUFZZ0IsS0FBTXZyQyxNQUUvRGhOLEVBQUVDLFVBQVU4M0UsVUFBWSxXQUN2QnA2RSxLQUFLMjhCLElBQUssR0FDWHQ2QixFQTFCbUIsRUEyQnhCLGVBQWtCKzFFLEdBQW1CLFdBQ25DLFNBQVMvb0UsRUFBRUEsRUFBR3JGLEdBQ1ZoSyxLQUFLd3VFLEdBQUtuL0QsRUFBR3JQLEtBQUt1OUIsR0FBS3Z6QixFQUV2QmhLLEtBQUs4b0UsTUFBUSxVQU1iOW9FLEtBQUtxOUIsR0FBSyxFQU1WcjlCLEtBQUs2NUIsR0FBSyxLQU1WNzVCLEtBQUs0OUIsSUFBSyxFQVNkLE9BQU92dUIsRUFBRS9NLFVBQVVrN0IsR0FBSyxXQUNwQixJQUFJbnVCLEVBQUlyUCxLQUNSLElBQU1BLEtBQUtxOUIsS0FBT3I5QixLQUFLMDhCLEdBQUcsV0FBMEIxOEIsS0FBSzY1QixHQUFLNzVCLEtBQUt3dUUsR0FBR3hWLEdBQUcsdUJBQWtELEtBQUssV0FDNUgsT0FBTzNwRCxFQUFFd3FCLEdBQUssS0FBTXhxQixFQUFFZ3NCLEdBQUcsNkNBQThDaHNCLEVBQUVxdEIsR0FBRyxXQUM1RW40QixRQUFRQyxlQVNoQjZLLEVBQUUvTSxVQUFVNDdCLEdBQUssU0FBUzd1QixHQUN0QixXQUEwQnJQLEtBQUs4b0UsTUFBUTlvRSxLQUFLMDhCLEdBQUcsWUFBNEIxOEIsS0FBS3E5QixLQUNoRnI5QixLQUFLcTlCLElBQU0sSUFBTXI5QixLQUFLODlCLEtBQU05OUIsS0FBS3E3QixHQUFHLGlEQUFtRGhzQixFQUFFdFAsWUFDekZDLEtBQUswOEIsR0FBRyxjQVNacnRCLEVBQUUvTSxVQUFVeUQsSUFBTSxTQUFTc0osR0FDdkJyUCxLQUFLODlCLEtBQU05OUIsS0FBS3E5QixHQUFLLEVBQUcsV0FBMEJodUIsSUFHbERyUCxLQUFLNDlCLElBQUssR0FBSzU5QixLQUFLMDhCLEdBQUdydEIsSUFDeEJBLEVBQUUvTSxVQUFVbzZCLEdBQUssU0FBU3J0QixHQUN6QkEsSUFBTXJQLEtBQUs4b0UsUUFBVTlvRSxLQUFLOG9FLE1BQVF6NUQsRUFBR3JQLEtBQUt1OUIsR0FBR2x1QixLQUM5Q0EsRUFBRS9NLFVBQVUrNEIsR0FBSyxTQUFTaHNCLEdBQ3pCLElBQUlyRixFQUFJLDRDQUE4Q3FGLEVBQUksME1BQzFEclAsS0FBSzQ5QixJQUFNLEdBQUU1ekIsR0FBSWhLLEtBQUs0OUIsSUFBSyxHQUFNLEdBQUUscUJBQXNCNXpCLElBQzFEcUYsRUFBRS9NLFVBQVV3N0IsR0FBSyxXQUNoQixPQUFTOTlCLEtBQUs2NUIsS0FBTzc1QixLQUFLNjVCLEdBQUdvRSxTQUFVaitCLEtBQUs2NUIsR0FBSyxPQUNsRHhxQixFQXBFZ0MsR0FxRWxDbXBFLEdBQUssU0FJVm5wRSxFQUVBMEIsRUFBR3pRLEVBQUc2QixFQUFHb3VCLEdBQ0wsSUFBSWpoQixFQUFJdFAsS0FDUkEsS0FBSzA5QixHQUFLcnVCLEVBQUdyUCxLQUFLbytCLEdBQUtydEIsRUFBRy9RLEtBQUt3dUUsR0FBS2x1RSxFQUFHTixLQUFLNDVCLEdBQUssR0FrQmpENTVCLEtBQUtpOUIsR0FBSyxHQVVWajlCLEtBQUt3OEIsR0FBSyxJQUFJN2pCLElBS2QzWSxLQUFLazlCLEdBQUssSUFBSW5VLElBUWQvb0IsS0FBS205QixHQUFLLEdBQUluOUIsS0FBS3MrQixHQUFLL04sRUFBR3Z3QixLQUFLcytCLEdBQUdELElBQUcsU0FBVWh2QixHQUM1Qy9PLEVBQUV3dUUsSUFBRyxXQUNELE9BQU8sRUFBRXgvRCxPQUFHLE9BQVEsR0FBUSxXQUN4QixPQUFPLEVBQUV0UCxNQUFNLFNBQVVxUCxHQUNyQixPQUFRQSxFQUFFZSxPQUNSLEtBQUssRUFDSCxPQUFPeW9FLEdBQUc3NEUsT0FBUyxHQUFFLGNBQWUsdURBQ3BDLENBQUUsRUFBYyxTQUFTcVAsR0FDckIsT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQ0osT0FBTyxFQUFFaEssTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQVFwRyxFQUFJLEdBQUVxRixJQUFJNnRCLEdBQUdsVSxJQUFJLEdBQTZCLENBQUUsRUFBY28wQyxHQUFHcHpELElBRTNFLEtBQUssRUFDSCxPQUFPM0gsRUFBRWdPLE9BQVFyRyxFQUFFMnpCLEdBQUc1M0IsSUFBSSxXQUEwQmlFLEVBQUVrekIsR0FBR2xqQixPQUFPLEdBQ2hFLENBQUUsRUFBY2lpRCxHQUFHanlELElBRXJCLEtBQUssRUFDSCxPQUFPM0gsRUFBRWdPLE9BQVEsQ0FBRSxVQWJuQixDQWlCZHJRLFFBQVcsQ0FBRSxFQUFjLEdBRS9CLEtBQUssRUFDSHFQLEVBQUVnQixPQUFRaEIsRUFBRWUsTUFBUSxFQUV0QixLQUFLLEVBQ0gsTUFBTyxDQUFFLGdCQUt4QnBRLEtBQUsyOUIsR0FBSyxJQUFJeTZDLEdBQUc5M0UsRUFBRzZCLElBU3pCLFNBQVM4NUQsR0FBRzVzRCxHQUNaLE9BQU8sRUFBRXJQLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHK0csRUFDUCxPQUFPLEVBQUUvUSxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsSUFBS3lvRSxHQUFHeHBFLEdBQUksTUFBTyxDQUFFLEVBQWMsR0FDbkNyRixFQUFJLEVBQUcrRyxFQUFJMUIsRUFBRTh0QixHQUFJOTZCLEVBQUUrTixNQUFRLEVBRTdCLEtBQUssRUFDSCxPQUFPcEcsRUFBSStHLEVBQUVwUSxPQUFTLENBQUUsR0FBYyxFQUFJb1EsRUFBRS9HLEtBQW1CLElBQVEsQ0FBRSxFQUFjLEdBRXpGLEtBQUssRUFDSDNILEVBQUVnTyxPQUFRaE8sRUFBRStOLE1BQVEsRUFFdEIsS0FBSyxFQUNILE9BQU9wRyxJQUFLLENBQUUsRUFBYyxHQUU5QixLQUFLLEVBQ0gsTUFBTyxDQUFFLFVBU3JCLFNBQVNvekQsR0FBRy90RCxHQUNaLE9BQU8sRUFBRXJQLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHK0csRUFDUCxPQUFPLEVBQUUvUSxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0hwRyxFQUFJLEVBQUcrRyxFQUFJMUIsRUFBRTh0QixHQUFJOTZCLEVBQUUrTixNQUFRLEVBRTdCLEtBQUssRUFDSCxPQUFPcEcsRUFBSStHLEVBQUVwUSxPQUFTLENBQUUsR0FBYyxFQUFJb1EsRUFBRS9HLEtBQW1CLElBQVEsQ0FBRSxFQUFjLEdBRXpGLEtBQUssRUFDSDNILEVBQUVnTyxPQUFRaE8sRUFBRStOLE1BQVEsRUFFdEIsS0FBSyxFQUNILE9BQU9wRyxJQUFLLENBQUUsRUFBYyxHQUU5QixLQUFLLEVBQ0gsTUFBTyxDQUFFLFVBU3JCLFNBQVM0dUUsR0FBR3ZwRSxFQUFHckYsR0FDZixJQUFJM0gsRUFBSSxHQUFFZ04sR0FDVmhOLEVBQUVtNkIsR0FBR3pqQixJQUFJL08sRUFBRWc3RCxZQUVYM2lFLEVBQUVtNkIsR0FBR3oyQixJQUFJaUUsRUFBRWc3RCxTQUFVaDdELEdBQUlxdUUsR0FBR2gyRSxHQUU1Qm83RCxHQUFHcDdELEdBQUt5MkUsR0FBR3oyRSxHQUFHODRCLE1BQVFvOUMsR0FBR2wyRSxFQUFHMkgsSUFNNUIsU0FBU3N1RSxHQUFHanBFLEVBQUdyRixHQUNmLElBQUkzSCxFQUFJLEdBQUVnTixHQUFJMEIsRUFBSStuRSxHQUFHejJFLEdBQ3JCQSxFQUFFbTZCLEdBQUd4aUIsT0FBT2hRLEdBQUkrRyxFQUFFb3FCLE1BQVFzOUMsR0FBR3AyRSxFQUFHMkgsR0FBSSxJQUFNM0gsRUFBRW02QixHQUFHcFgsT0FBU3JVLEVBQUVvcUIsS0FBT3BxQixFQUFFc3BCLEtBQU93K0MsR0FBR3gyRSxJQUk3RUEsRUFBRXM3QixHQUFHNTNCLElBQUksWUFNVCxTQUFTd3lFLEdBQUdscEUsRUFBR3JGLEdBQ2ZxRixFQUFFZ3JFLEdBQUcxeUMsR0FBRzM5QixFQUFFZzdELFVBQVc4VCxHQUFHenBFLEdBQUdvdUIsR0FBR3p6QixHQVFsQyxTQUFTeXVFLEdBQUdwcEUsRUFBR3JGLEdBQ1hxRixFQUFFZ3JFLEdBQUcxeUMsR0FBRzM5QixHQUFJOHVFLEdBQUd6cEUsR0FBRytwQixHQUFHcHZCLEdBR3pCLFNBQVN5ekQsR0FBR3B1RCxHQUNSQSxFQUFFZ3JFLEdBQUssSUFBSXRULEdBQUcsQ0FDVjNlLEdBQUksU0FBU3ArQyxHQUNULE9BQU9xRixFQUFFdXFCLEdBQUd3dUIsR0FBR3ArQyxJQUVuQnU3QixHQUFJLFNBQVN2N0IsR0FDVCxPQUFPcUYsRUFBRW10QixHQUFHMTJCLElBQUlrRSxJQUFNLFFBRTFCOHVFLEdBQUd6cEUsR0FBR3c1QyxRQUFTeDVDLEVBQUVzdUIsR0FBR0gsS0FPNUIsU0FBUzY2QyxHQUFHaHBFLEdBQ1IsT0FBT3dwRSxHQUFHeHBFLEtBQU95cEUsR0FBR3pwRSxHQUFHK3FCLE1BQVEvcUIsRUFBRW10QixHQUFHcFgsS0FBTyxFQUcvQyxTQUFTeXpELEdBQUd4cEUsR0FDUixPQUFPLElBQU0sR0FBRUEsR0FBRzZ0QixHQUFHOVgsS0FHekIsU0FBUzR6RCxHQUFHM3BFLEdBQ1JBLEVBQUVnckUsUUFBSyxFQUdYLFNBQVM1ZCxHQUFHcHRELEdBQ1IsT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsT0FBTyxFQUFFQSxNQUFNLFNBQVVnSyxHQUNyQixPQUFPcUYsRUFBRW10QixHQUFHNzJCLFNBQVEsU0FBVXFFLEVBQUczSCxHQUM3QmsyRSxHQUFHbHBFLEVBQUdyRixNQUNMLENBQUUsU0FLbkIsU0FBUzJ1RSxHQUFHdHBFLEVBQUcwQixHQUNYLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLE9BQU8sRUFBRUEsTUFBTSxTQUFVZ0ssR0FDckIsT0FBT2d2RSxHQUFHM3BFLEdBRVZncEUsR0FBR2hwRSxJQUFNQSxFQUFFc3VCLEdBQUdPLEdBQUdudEIsR0FBSTBzRCxHQUFHcHVELElBSXhCQSxFQUFFc3VCLEdBQUc1M0IsSUFBSSxXQUEwQixDQUFFLFNBS2pELFNBQVNpMkQsR0FBRzNzRCxFQUFHMEIsRUFBR3pRLEdBQ2QsT0FBTyxFQUFFTixVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJbUMsRUFBR291QixFQUFHamhCLEVBQ1YsT0FBTyxFQUFFdFAsTUFBTSxTQUFVOE4sR0FDckIsT0FBUUEsRUFBRXNDLE9BQ1IsS0FBSyxFQUNILEdBQUlmLEVBQUVzdUIsR0FBRzUzQixJQUFJLFlBQTBCZ0wsYUFBYXcxRCxJQUFNLElBQW9CeDFELEVBQUUrM0QsT0FBUy8zRCxFQUFFaTRELE9BRTNGLE1BQU8sQ0FBRSxFQUFjLEdBQ3ZCbDdELEVBQUVzQyxNQUFRLEVBRVosS0FBSyxFQUNILE9BQU90QyxFQUFFd0MsS0FBSzdRLEtBQUssQ0FBRSxFQUFHLEVBQUcsQ0FBRSxJQUFNLENBQUUsRUFFckMsU0FBUzRQLEVBQUcwQixHQUNSLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFBRzZCLEVBQUdvdUIsRUFDYixPQUFPLEVBQUV2d0IsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNIcEcsRUFBSStHLEVBQUVpNEQsTUFBTzFvRSxFQUFJLEVBQUc2QixFQUFJNE8sRUFBRWc0RCxVQUFXMW1FLEVBQUUrTixNQUFRLEVBRWpELEtBQUssRUFDSCxPQUFPOVAsRUFBSTZCLEVBQUV4QixRQUFVNHZCLEVBQUlwdUIsRUFBRTdCLEdBQUkrTyxFQUFFbXRCLEdBQUd6akIsSUFBSXdYLEdBQUssQ0FBRSxFQUFjbGhCLEVBQUV1cUIsR0FBRzBnRCxHQUFHL3BELEVBQUd2bUIsSUFBTyxDQUFFLEVBQWMsSUFBTyxDQUFFLEVBQWMsR0FFMUgsS0FBSyxFQUNIM0gsRUFBRWdPLE9BQVFoQixFQUFFbXRCLEdBQUd4aUIsT0FBT3VXLEdBQUlsaEIsRUFBRWdyRSxHQUFHcFIsYUFBYTE0QyxHQUFJbHVCLEVBQUUrTixNQUFRLEVBRTVELEtBQUssRUFDSC9OLEVBQUUrTixNQUFRLEVBRVosS0FBSyxFQUNILE9BQU85UCxJQUFLLENBQUUsRUFBYyxHQUU5QixLQUFLLEVBQ0gsTUFBTyxDQUFFLFVBckJ6QixDQXlCRStPLEVBQUcwQixJQUVQLEtBQUssRUFDSCxPQUFPakQsRUFBRXVDLE9BQVEsQ0FBRSxFQUFjLEdBRW5DLEtBQUssRUFDSCxPQUFPbE8sRUFBSTJMLEVBQUV1QyxPQUFRLEdBQUUsY0FBZSxtQ0FBb0NVLEVBQUVnNEQsVUFBVTFvRSxLQUFLLEtBQU04QixHQUNqRyxDQUFFLEVBQWM0MkUsR0FBRzFwRSxFQUFHbE4sSUFFeEIsS0FBSyxFQUNILE9BQU8yTCxFQUFFdUMsT0FBUSxDQUFFLEVBQWMsR0FFbkMsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjLElBRXpCLEtBQUssRUFDSCxHQUFJVSxhQUFhKzFELEdBQUt6M0QsRUFBRWdyRSxHQUFHLzBDLEdBQUd2MEIsR0FBS0EsYUFBYXUyRCxHQUFLajRELEVBQUVnckUsR0FBR25SLEdBQUduNEQsR0FBSzFCLEVBQUVnckUsR0FBRzF4QyxHQUFHNTNCLEdBQUl6USxFQUFFcWhFLFFBQVE5ckMsR0FBRW5lLE9BQVEsTUFBTyxDQUFFLEVBQWMsSUFDekg1SixFQUFFc0MsTUFBUSxFQUVaLEtBQUssRUFDSCxPQUFPdEMsRUFBRXdDLEtBQUs3USxLQUFLLENBQUUsRUFBRyxHQUFJLENBQUUsS0FBTyxDQUFFLEVBQWN5OEQsR0FBRzdzRCxFQUFFcXVCLEtBRTVELEtBQUssRUFDSCxPQUFPbk4sRUFBSXppQixFQUFFdUMsT0FBUS9QLEVBQUVvd0IsRUFBRUgsSUFBTSxFQUFJLENBQUUsRUFNckMsU0FBU2xoQixFQUFHckYsR0FDUixJQUFJM0gsRUFBSWdOLEVBQUVnckUsR0FBR3QxQyxHQUFHLzZCLEdBR0ksT0FBTzNILEVBQUVpbUUsR0FBRzNpRSxTQUFRLFNBQVV0RCxFQUFHME8sR0FDakQsR0FBSTFPLEVBQUU4aUUsWUFBWXRSLElBQU0sRUFBRyxDQUN2QixJQUFJdnpELEVBQUkrTyxFQUFFbXRCLEdBQUcxMkIsSUFBSWlMLEdBRVd6USxHQUFLK08sRUFBRW10QixHQUFHejJCLElBQUlnTCxFQUFHelEsRUFBRThrRSxHQUFHL2lFLEVBQUU4aUUsWUFBYW43RCxRQUt6RTNILEVBQUVrbUUsR0FBRzVpRSxTQUFRLFNBQVVxRSxHQUNuQixJQUFJM0gsRUFBSWdOLEVBQUVtdEIsR0FBRzEyQixJQUFJa0UsR0FDakIsR0FBSTNILEVBQUcsQ0FHSGdOLEVBQUVtdEIsR0FBR3oyQixJQUFJaUUsRUFBRzNILEVBQUUraUUsR0FBR1osR0FBRy9qQixFQUFHcCtDLEVBQUUraEUsS0FHekJxVSxHQUFHcHBFLEVBQUdyRixHQUtOLElBQUkrRyxFQUFJLElBQUlnMEQsR0FBRzFpRSxFQUFFbUgsT0FBUVEsRUFBRyxFQUFrQzNILEVBQUU0aUUsZ0JBQ2hFc1QsR0FBR2xwRSxFQUFHMEIsT0FFVDFCLEVBQUV1cUIsR0FBRzJnRCxHQUFHbDRFLEdBN0JqQixDQThCRWdOLEVBQUcvTyxJQUFPLENBQUUsRUFBYyxJQUlkLEtBQUssRUFHbkJ3TixFQUFFdUMsT0FBUXZDLEVBQUVzQyxNQUFRLEdBRXRCLEtBQUssR0FDSCxNQUFPLENBQUUsRUFBYyxJQUV6QixLQUFLLEdBQ0gsT0FBTyxHQUFFLGNBQWUsNEJBQTZCZCxFQUFJeEIsRUFBRXVDLFFBQVMsQ0FBRSxFQUFjMG9FLEdBQUcxcEUsRUFBR0MsSUFFNUYsS0FBSyxHQUNILE9BQU94QixFQUFFdUMsT0FBUSxDQUFFLEVBQWMsSUFFbkMsS0FBSyxHQUNILE1BQU8sQ0FBRSxVQWNyQixTQUFTMG9FLEdBQUcxcEUsRUFBRzBCLEVBQUd6USxHQUNsQixPQUFPLEVBQUVOLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUltQyxFQUFJbkMsS0FDUixPQUFPLEVBQUVBLE1BQU0sU0FBVXV3QixHQUNyQixPQUFRQSxFQUFFbmdCLE9BQ1IsS0FBSyxFQUNILElBQUttOUQsR0FBR3g4RCxHQUFJLE1BQU1BLEVBRWxCLE9BQU8xQixFQUFFNnRCLEdBQUdsVSxJQUFJLEdBQTBCLENBQUUsRUFBY28wQyxHQUFHL3RELElBRS9ELEtBQUssRUFFSCxPQUFPa2hCLEVBQUVsZ0IsT0FBUWhCLEVBQUVzdUIsR0FBRzUzQixJQUFJLFdBQTBCekYsSUFJcERBLEVBQUksV0FDQSxPQUFPNDdELEdBQUc3c0QsRUFBRXF1QixNQUdoQnJ1QixFQUFFbS9ELEdBQUdzQixJQUFHLFdBQ0osT0FBTyxFQUFFM3RFLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLE9BQU8sRUFBRW5DLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQVFBLEVBQUVvRyxPQUNSLEtBQUssRUFDSCxPQUFPLEdBQUUsY0FBZSw2QkFBOEIsQ0FBRSxFQUFjOVAsS0FFeEUsS0FBSyxFQUNILE9BQU8wSixFQUFFcUcsT0FBUWhCLEVBQUU2dEIsR0FBR2xqQixPQUFPLEdBQTBCLENBQUUsRUFBY2lpRCxHQUFHNXNELElBRTVFLEtBQUssRUFDSCxPQUFPckYsRUFBRXFHLE9BQVEsQ0FBRSxhQUk5QixDQUFFLFVBU25CLFNBQVM4c0QsR0FBRzl0RCxFQUFHckYsR0FDZixPQUFPQSxJQUFJOEgsT0FBTSxTQUFVelAsR0FDdkIsT0FBTzAyRSxHQUFHMXBFLEVBQUdoTixFQUFHMkgsTUFJeEIsU0FBU3F6RCxHQUFHaHVELEdBQ1IsT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUcrRyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsRUFDaEIsT0FBTyxFQUFFdndCLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSHBHLEVBQUksR0FBRXFGLEdBQUkwQixFQUFJdW9FLEdBQUd0dkUsR0FBSTFKLEVBQUkwSixFQUFFaXpCLEdBQUd0OEIsT0FBUyxFQUFJcUosRUFBRWl6QixHQUFHanpCLEVBQUVpekIsR0FBR3Q4QixPQUFTLEdBQUdteUUsU0FBVyxFQUFHendFLEVBQUUrTixNQUFRLEVBRTNGLEtBQUssRUFDSCxJQUtBLFNBQVNmLEdBQ0wsT0FBT3dwRSxHQUFHeHBFLElBQU1BLEVBQUU0dEIsR0FBR3Q4QixPQUFTLEdBRGxDLENBTVhxSixHQUFJLE1BQU8sQ0FBRSxFQUFjLEdBQ2hCM0gsRUFBRStOLE1BQVEsRUFFWixLQUFLLEVBQ0gsT0FBTy9OLEVBQUVpTyxLQUFLN1EsS0FBSyxDQUFFLEVBQUcsRUFBRyxDQUFFLElBQU0sQ0FBRSxFQUFjcTlELEdBQUc5eUQsRUFBRTB6QixHQUFJcDlCLElBRTlELEtBQUssRUFDSCxPQUFPLFFBQVU2QixFQUFJRSxFQUFFZ08sU0FBVyxJQUFNckcsRUFBRWl6QixHQUFHdDhCLFFBQVVvUSxFQUFFc3BCLEtBQU0sQ0FBRSxFQUFjLEtBQVEvNUIsRUFBSTZCLEVBQUUyd0UsUUFDN0YsU0FBU3pqRSxFQUFHckYsR0FDUnFGLEVBQUU0dEIsR0FBR3g5QixLQUFLdUssR0FDVixJQUFJM0gsRUFBSWkzRSxHQUFHanFFLEdBQ1hoTixFQUFFODRCLE1BQVE5NEIsRUFBRWs2QixJQUFNbDZCLEVBQUUrNUIsR0FBR3B5QixFQUFFZ3BFLFdBSDdCLENBSUVocEUsRUFBRzdILEdBQUksQ0FBRSxFQUFjLElBRTNCLEtBQUssRUFDSCxPQUFPb3VCLEVBQUlsdUIsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjMG9FLEdBQUcvdUUsRUFBR3VtQixJQUU3QyxLQUFLLEVBQ0gsT0FBT2x1QixFQUFFZ08sT0FBUSxDQUFFLEVBQWMsR0FFbkMsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjLEdBRXpCLEtBQUssRUFDSCxPQUFPbXRELEdBQUd4ekQsSUFBTWl2RSxHQUFHanZFLEdBQUksQ0FBRSxVQU16QyxTQUFTd3pELEdBQUdudUQsR0FDUixPQUFPd3BFLEdBQUd4cEUsS0FBT2lxRSxHQUFHanFFLEdBQUcrcUIsTUFBUS9xQixFQUFFNHRCLEdBQUd0OEIsT0FBUyxFQUdqRCxTQUFTczRFLEdBQUc1cEUsR0FDUmlxRSxHQUFHanFFLEdBQUd3NUMsUUFHVixTQUFTcXdCLEdBQUc3cEUsR0FDUixPQUFPLEVBQUVyUCxVQUFNLE9BQVEsR0FBUSxXQUMzQixPQUFPLEVBQUVBLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQU9zdkUsR0FBR2pxRSxHQUFHdXRCLEtBQU0sQ0FBRSxTQUtqQyxTQUFTdThDLEdBQUc5cEUsR0FDUixPQUFPLEVBQUVyUCxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRytHLEVBQUd6USxFQUFHNkIsRUFDYixPQUFPLEVBQUVuQyxNQUFNLFNBQVVxQyxHQUVyQixJQUFLMkgsRUFBSXN2RSxHQUFHanFFLEdBQUkwQixFQUFJLEVBQUd6USxFQUFJK08sRUFBRTR0QixHQUFJbHNCLEVBQUl6USxFQUFFSyxPQUFRb1EsSUFBSzVPLEVBQUk3QixFQUFFeVEsR0FBSS9HLEVBQUVveUIsR0FBR2o2QixFQUFFNndFLFdBQ3JFLE1BQU8sQ0FBRSxTQUtyQixTQUFTMVYsR0FBR2p1RCxFQUFHMEIsRUFBR3pRLEdBQ2QsT0FBTyxFQUFFTixVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRzdILEVBQ1AsT0FBTyxFQUFFbkMsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wRyxFQUFJcUYsRUFBRTR0QixHQUFHN0UsUUFBU2oyQixFQUFJOHdFLEdBQUd0d0UsS0FBS3FILEVBQUcrRyxFQUFHelEsR0FBSSxDQUFFLEVBQWM2OEQsR0FBRzl0RCxHQUFHLFdBQ2pFLE9BQU9BLEVBQUV1cUIsR0FBRzRnRCxHQUFHcjRFLE9BR3JCLEtBQUssRUFHSCxPQUFPRSxFQUFFZ08sT0FBUSxDQUFFLEVBQWNndEQsR0FBR2h1RCxJQUV0QyxLQUFLLEVBR0gsT0FBT2hOLEVBQUVnTyxPQUFRLENBQUUsVUFNbkMsU0FBU2t0RCxHQUFHbHVELEVBQUcwQixHQUNYLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLE9BQU8sRUFBRUEsTUFBTSxTQUFVTSxHQUNyQixPQUFRQSxFQUFFOFAsT0FDUixLQUFLLEVBQ0gsT0FBT1csR0FBS3VvRSxHQUFHanFFLEdBQUdrdEIsR0FBSyxDQUFFLEVBQWMsU0FBU2x0QixFQUFHMEIsR0FDL0MsT0FBTyxFQUFFL1EsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUcxSixFQUNQLE9BQU8sRUFBRU4sTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9pMUQsR0FBRy9rRSxFQUFJeVEsRUFBRXVDLE9BQVNoVCxJQUFNLEdBQUVraUUsU0FBV3g0RCxFQUFJcUYsRUFBRTR0QixHQUFHN0UsUUFJckRraEQsR0FBR2pxRSxHQUFHMnBCLEtBQU0sQ0FBRSxFQUFjbWtDLEdBQUc5dEQsR0FBRyxXQUM5QixPQUFPQSxFQUFFdXFCLEdBQUc2Z0QsR0FBR3p3RSxFQUFFOG9FLFFBQVMvaEUsUUFDckIsQ0FBRSxFQUFjLEdBRTNCLEtBQUssRUFHSCxPQUFPMU8sRUFBRWdPLE9BQVEsQ0FBRSxFQUFjZ3RELEdBQUdodUQsSUFFdEMsS0FBSyxFQU1IaE4sRUFBRWdPLE9BQVFoTyxFQUFFK04sTUFBUSxFQUV0QixLQUFLLEVBQ0gsTUFBTyxDQUFFLFVBNUJjLENBZ0NyQ2YsRUFBRzBCLElBQU8sQ0FBRSxFQUFjLEdBR2QsS0FBSyxFQUVuQnpRLEVBQUUrUCxPQUFRL1AsRUFBRThQLE1BQVEsRUFFdEIsS0FBSyxFQUtILE9BQU9vdEQsR0FBR251RCxJQUFNNHBFLEdBQUc1cEUsR0FBSSxDQUFFLFVBUXJDLFNBQVNncUUsR0FBR2hxRSxFQUFHMEIsR0FDZixPQUFPLEVBQUUvUSxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUksR0FBRXFGLEdBQUkwQixHQUFLL0csRUFBRWt6QixHQUFHbGpCLE9BQU8sR0FBc0IsQ0FBRSxFQUFjaWlELEdBQUdqeUQsS0FBUSxDQUFFLEVBQWMsR0FFckcsS0FBSyxFQUNILE9BQU8zSCxFQUFFZ08sT0FBUSxDQUFFLEVBQWMsR0FFbkMsS0FBSyxFQUNILE9BQVlVLEVBQUssQ0FBRSxFQUFjLElBQU8vRyxFQUFFa3pCLEdBQUdsVSxJQUFJLEdBQXNCLENBQUUsRUFBY28wQyxHQUFHcHpELEtBRTVGLEtBQUssRUFDSDNILEVBQUVnTyxPQUFZckcsRUFBRTJ6QixHQUFHNTNCLElBQUksV0FBMEIxRCxFQUFFK04sTUFBUSxFQUU3RCxLQUFLLEVBQ0EvTixFQUFFK04sTUFBUSxFQUVmLEtBQUssRUFDSCxNQUFPLENBQUUsVUFhckIsU0FBUzBvRSxHQUFHenBFLEdBQ1osSUFBSTBCLEVBQUkvUSxLQUNSLE9BQU9xUCxFQUFFcXJFLEtBRVRyckUsRUFBRXFyRSxHQUFLLFNBQVNyckUsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFJME8sRUFBSSxHQUFFMUIsR0FDVixPQUFPMEIsRUFBRXVzQixLQUFNLElBQUkwNEMsR0FBR2hzRSxFQUFHK0csRUFBRW1vQixHQUFJbm9CLEVBQUU2b0MsWUFBYTdvQyxFQUFFbzdELFdBQVk5cEUsR0FGekQsQ0FHTGdOLEVBQUUrdUIsR0FBSS91QixFQUFFbS9ELEdBQUksQ0FDVnQwQyxHQUFJdWlDLEdBQUczdkQsS0FBSyxLQUFNdUMsR0FDbEI0cEIsR0FBSTAvQyxHQUFHN3JFLEtBQUssS0FBTXVDLEdBQ2xCMHVCLEdBQUlpK0IsR0FBR2x2RCxLQUFLLEtBQU11QyxLQUNsQkEsRUFBRTh0QixHQUFHMTlCLE1BQUssU0FBVWEsR0FDcEIsT0FBTyxFQUFFeVEsT0FBRyxPQUFRLEdBQVEsV0FDeEIsT0FBTyxFQUFFL1EsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE9BQU85UCxHQUFLK08sRUFBRXFyRSxHQUFHMWhELEtBQU1xL0MsR0FBR2hwRSxHQUFLb3VELEdBQUdwdUQsR0FBS0EsRUFBRXN1QixHQUFHNTNCLElBQUksV0FBMEIsQ0FBRSxFQUFjLElBQU8sQ0FBRSxFQUFjLEdBRW5ILEtBQUssRUFDSCxNQUFPLENBQUUsRUFBY3NKLEVBQUVxckUsR0FBRzluQixRQUU5QixLQUFLLEVBQ0g1b0QsRUFBRXFHLE9BQVEyb0UsR0FBRzNwRSxHQUFJckYsRUFBRW9HLE1BQVEsRUFFN0IsS0FBSyxFQUNILE1BQU8sQ0FBRSxjQUluQmYsRUFBRXFyRSxHQVdaLFNBQVNwQixHQUFHanFFLEdBQ1IsSUFBSTBCLEVBQUkvUSxLQUNSLE9BQU9xUCxFQUFFc3JFLEtBRVR0ckUsRUFBRXNyRSxHQUFLLFNBQVN0ckUsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFJME8sRUFBSSxHQUFFMUIsR0FDVixPQUFPMEIsRUFBRXVzQixLQUFNLElBQUlvN0MsR0FBRzF1RSxFQUFHK0csRUFBRW1vQixHQUFJbm9CLEVBQUU2b0MsWUFBYTdvQyxFQUFFbzdELFdBQVk5cEUsR0FGekQsQ0FHTGdOLEVBQUUrdUIsR0FBSS91QixFQUFFbS9ELEdBQUksQ0FDVnQwQyxHQUFJZy9DLEdBQUdwc0UsS0FBSyxLQUFNdUMsR0FDbEI0cEIsR0FBSXNrQyxHQUFHendELEtBQUssS0FBTXVDLEdBQ2xCMnVCLEdBQUltN0MsR0FBR3JzRSxLQUFLLEtBQU11QyxHQUNsQmtwQixHQUFJK2tDLEdBQUd4d0QsS0FBSyxLQUFNdUMsS0FDbEJBLEVBQUU4dEIsR0FBRzE5QixNQUFLLFNBQVVhLEdBQ3BCLE9BQU8sRUFBRXlRLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLE9BQU8sRUFBRS9RLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQVFBLEVBQUVvRyxPQUNSLEtBQUssRUFDSCxPQUFPOVAsR0FBSytPLEVBQUVzckUsR0FBRzNoRCxLQUFNLENBQUUsRUFBY3FrQyxHQUFHaHVELEtBQVEsQ0FBRSxFQUFjLEdBRXBFLEtBQUssRUFFSCxPQUFPckYsRUFBRXFHLE9BQVEsQ0FBRSxFQUFjLEdBRW5DLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBY2hCLEVBQUVzckUsR0FBRy9uQixRQUU5QixLQUFLLEVBQ0g1b0QsRUFBRXFHLE9BQVFoQixFQUFFNHRCLEdBQUd0OEIsT0FBUyxJQUFNLEdBQUUsY0FBZSw4QkFBZ0MwTyxFQUFFNHRCLEdBQUd0OEIsT0FBUyxtQkFDN0YwTyxFQUFFNHRCLEdBQUssSUFBS2p6QixFQUFFb0csTUFBUSxFQUV4QixLQUFLLEVBQ0gsTUFBTyxDQUFFLGNBSW5CZixFQUFFc3JFLEdBa0NaLElBQUlOLEdBQW1CLFdBQ25CLFNBQVNockUsSUFFTHJQLEtBQUs0NkUsR0FBSyxJQUFJNVQsR0FBR3NULEdBQUdPLElBRXBCNzZFLEtBQUs4NkUsR0FBSyxJQUFJOVQsR0FBR3NULEdBQUdTLElBR3hCLE9BQU8xckUsRUFBRS9NLFVBQVVnbUQsRUFBSSxXQUNuQixPQUFPdG9ELEtBQUs0NkUsR0FBR3R5QixLQUVpRGo1QyxFQUFFL00sVUFBVTIyRSxHQUFLLFNBQVM1cEUsRUFBR3JGLEdBQzdGLElBQUkzSCxFQUFJLElBQUlpNEUsR0FBR2pyRSxFQUFHckYsR0FDbEJoSyxLQUFLNDZFLEdBQUs1NkUsS0FBSzQ2RSxHQUFHNXhELElBQUkzbUIsR0FBSXJDLEtBQUs4NkUsR0FBSzk2RSxLQUFLODZFLEdBQUc5eEQsSUFBSTNtQixJQUVlZ04sRUFBRS9NLFVBQVUwNEUsR0FBSyxTQUFTM3JFLEVBQUdyRixHQUM1RixJQUFJM0gsRUFBSXJDLEtBQ1JxUCxFQUFFMUosU0FBUSxTQUFVMEosR0FDaEIsT0FBT2hOLEVBQUU0MkUsR0FBRzVwRSxFQUFHckYsT0FPdkJxRixFQUFFL00sVUFBVTQyRSxHQUFLLFNBQVM3cEUsRUFBR3JGLEdBQ3pCaEssS0FBS2k3RSxHQUFHLElBQUlYLEdBQUdqckUsRUFBR3JGLEtBQ25CcUYsRUFBRS9NLFVBQVU0NEUsR0FBSyxTQUFTN3JFLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQ1JxUCxFQUFFMUosU0FBUSxTQUFVMEosR0FDaEIsT0FBT2hOLEVBQUU2MkUsR0FBRzdwRSxFQUFHckYsT0FPdkJxRixFQUFFL00sVUFBVTY0RSxHQUFLLFNBQVM5ckUsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUFNcUMsRUFBSSxJQUFJLEdBQUUsSUFBSSxHQUFFLEtBQU0wTyxFQUFJLElBQUl1cEUsR0FBR2o0RSxFQUFHZ04sR0FBSS9PLEVBQUksSUFBSWc2RSxHQUFHajRFLEVBQUdnTixFQUFJLEdBQUlsTixFQUFJLEdBQ2hGLE9BQU9uQyxLQUFLODZFLEdBQUczVCxHQUFHLENBQUVwMkQsRUFBR3pRLElBQUssU0FBVStPLEdBQ2xDckYsRUFBRWl4RSxHQUFHNXJFLEdBQUlsTixFQUFFMUMsS0FBSzRQLEVBQUVqRSxRQUNqQmpKLEdBQ05rTixFQUFFL00sVUFBVTg0RSxHQUFLLFdBQ2hCLElBQUkvckUsRUFBSXJQLEtBQ1JBLEtBQUs0NkUsR0FBR2oxRSxTQUFRLFNBQVVxRSxHQUN0QixPQUFPcUYsRUFBRTRyRSxHQUFHanhFLE9BRWpCcUYsRUFBRS9NLFVBQVUyNEUsR0FBSyxTQUFTNXJFLEdBQ3pCclAsS0FBSzQ2RSxHQUFLNTZFLEtBQUs0NkUsR0FBRzVnRSxPQUFPM0ssR0FBSXJQLEtBQUs4NkUsR0FBSzk2RSxLQUFLODZFLEdBQUc5Z0UsT0FBTzNLLElBQ3ZEQSxFQUFFL00sVUFBVSs0RSxHQUFLLFNBQVNoc0UsR0FDekIsSUFBSXJGLEVBQUksSUFBSSxHQUFFLElBQUksR0FBRSxLQUFNM0gsRUFBSSxJQUFJaTRFLEdBQUd0d0UsRUFBR3FGLEdBQUkwQixFQUFJLElBQUl1cEUsR0FBR3R3RSxFQUFHcUYsRUFBSSxHQUFJL08sRUFBSTZsRSxLQUN0RSxPQUFPbm1FLEtBQUs4NkUsR0FBRzNULEdBQUcsQ0FBRTlrRSxFQUFHME8sSUFBSyxTQUFVMUIsR0FDbEMvTyxFQUFJQSxFQUFFMG9CLElBQUkzWixFQUFFakUsUUFDWDlLLEdBQ04rTyxFQUFFL00sVUFBVW82RCxHQUFLLFNBQVNydEQsR0FDekIsSUFBSXJGLEVBQUksSUFBSXN3RSxHQUFHanJFLEVBQUcsR0FBSWhOLEVBQUlyQyxLQUFLNDZFLEdBQUd2VCxHQUFHcjlELEdBQ3JDLE9BQU8sT0FBUzNILEdBQUtnTixFQUFFc3lELFFBQVF0L0QsRUFBRStJLE1BQ2xDaUUsRUF6RGdCLEdBMERsQmlyRSxHQUFtQixXQUNwQixTQUFTanJFLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBS29MLElBQU1pRSxFQUFHclAsS0FBS3M3RSxHQUFLdHhFLEVBRzVCLE9BQU9xRixFQUFFd3JFLEdBQUssU0FBU3hyRSxFQUFHckYsR0FDdEIsT0FBTyxHQUFFdTRCLEVBQUVsekIsRUFBRWpFLElBQUtwQixFQUFFb0IsTUFBUSxHQUFFaUUsRUFBRWlzRSxHQUFJdHhFLEVBQUVzeEUsS0FFVGpzRSxFQUFFMHJFLEdBQUssU0FBUzFyRSxFQUFHckYsR0FDaEQsT0FBTyxHQUFFcUYsRUFBRWlzRSxHQUFJdHhFLEVBQUVzeEUsS0FBTyxHQUFFLzRDLEVBQUVsekIsRUFBRWpFLElBQUtwQixFQUFFb0IsTUFDdENpRSxFQVZpQixHQWdDeEIsU0FBU2tyRSxHQUFHbHJFLEVBQUdyRixHQUNYLE1BQU8scUJBQXVCcUYsRUFBSSxJQUFNckYsRUFTZ0IsU0FBUzB3RSxHQUFHcnJFLEVBQUdyRixFQUFHM0gsR0FDMUUsSUFBSTBPLEVBQUksdUJBQXlCMUIsRUFBSSxJQUFNaE4sRUFDM0MsT0FBTzJILEVBQUVrb0UsT0FBU25oRSxHQUFLLElBQU0vRyxFQUFFNmdDLEtBQU05NUIsRUFLZ0IsU0FBUzBwRSxHQUFHcHJFLEVBQUdyRixHQUNwRSxNQUFPLHFCQUF1QnFGLEVBQUksSUFBTXJGLEVBVzVDLElBQUkyd0UsR0FBbUIsV0FDbkIsU0FBU3RyRSxFQUFFQSxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUNoQi9RLEtBQUsyd0QsS0FBT3RoRCxFQUFHclAsS0FBSzh5RSxRQUFVOW9FLEVBQUdoSyxLQUFLOG9FLE1BQVF6bUUsRUFBR3JDLEtBQUs2RSxNQUFRa00sRUFNbEUsT0FBTzFCLEVBQUVrc0UsR0FBSyxTQUFTdnhFLEVBQUczSCxFQUFHME8sR0FDekIsSUFBSXpRLEVBQUkrQyxLQUFLMmxDLE1BQU1qNEIsR0FBSTVPLEVBQUksaUJBQW1CN0IsSUFBTSxJQUFNLENBQUUsVUFBVyxlQUFnQixZQUFhZ2dCLFFBQVFoZ0IsRUFBRXdvRSxjQUFXLElBQVd4b0UsRUFBRXVFLE9BQVMsaUJBQW1CdkUsRUFBRXVFLE9BQVEwckIsT0FBSSxFQUNoTCxPQUFPcHVCLEdBQUs3QixFQUFFdUUsUUFBVzFDLEVBQUksaUJBQW1CN0IsRUFBRXVFLE1BQU1vTyxTQUFXLGlCQUFtQjNTLEVBQUV1RSxNQUFNeU8sUUFBVWlkLEVBQUksSUFBSWxmLEdBQUUvUSxFQUFFdUUsTUFBTXlPLEtBQU1oVCxFQUFFdUUsTUFBTW9PLFVBQ3hJOVEsRUFBSSxJQUFJa04sRUFBRXJGLEVBQUczSCxFQUFHL0IsRUFBRXdvRSxNQUFPdjRDLElBQU0sR0FBRSxvQkFBcUIsMENBQTRDbHVCLEVBQUksTUFBUTBPLEdBQzlHLE9BQ0QxQixFQUFFL00sVUFBVWs1RSxHQUFLLFdBQ2hCLElBQUluc0UsRUFBSSxDQUNKeTVELE1BQU85b0UsS0FBSzhvRSxNQUNaZ1AsYUFBY3RtRSxLQUFLbUssT0FFdkIsT0FBTzNiLEtBQUs2RSxRQUFVd0ssRUFBRXhLLE1BQVEsQ0FDNUJ5TyxLQUFNdFQsS0FBSzZFLE1BQU15TyxLQUNqQkwsUUFBU2pULEtBQUs2RSxNQUFNb08sVUFDcEI1UCxLQUFLQyxVQUFVK0wsSUFDcEJBLEVBdEJnQixHQXVCbEJ5ckUsR0FBbUIsV0FDcEIsU0FBU3pyRSxFQUFFQSxFQUFHckYsRUFBRzNILEdBQ2JyQyxLQUFLZ2xFLFNBQVczMUQsRUFBR3JQLEtBQUs4b0UsTUFBUTkrRCxFQUFHaEssS0FBSzZFLE1BQVF4QyxFQU1wRCxPQUFPZ04sRUFBRWtzRSxHQUFLLFNBQVN2eEUsRUFBRzNILEdBQ3RCLElBQUkwTyxFQUFJMU4sS0FBSzJsQyxNQUFNM21DLEdBQUkvQixFQUFJLGlCQUFtQnlRLElBQU0sSUFBTSxDQUFFLGNBQWUsVUFBVyxZQUFhdVAsUUFBUXZQLEVBQUUrM0QsY0FBVyxJQUFXLzNELEVBQUVsTSxPQUFTLGlCQUFtQmtNLEVBQUVsTSxPQUFRMUMsT0FBSSxFQUMvSyxPQUFPN0IsR0FBS3lRLEVBQUVsTSxRQUFXdkUsRUFBSSxpQkFBbUJ5USxFQUFFbE0sTUFBTW9PLFNBQVcsaUJBQW1CbEMsRUFBRWxNLE1BQU15TyxRQUFVblIsRUFBSSxJQUFJa1AsR0FBRU4sRUFBRWxNLE1BQU15TyxLQUFNdkMsRUFBRWxNLE1BQU1vTyxVQUN4STNTLEVBQUksSUFBSStPLEVBQUVyRixFQUFHK0csRUFBRSszRCxNQUFPM21FLElBQU0sR0FBRSxvQkFBcUIsd0NBQTBDNkgsRUFBSSxNQUFRM0gsR0FDekcsT0FDRGdOLEVBQUUvTSxVQUFVazVFLEdBQUssV0FDaEIsSUFBSW5zRSxFQUFJLENBQ0p5NUQsTUFBTzlvRSxLQUFLOG9FLE1BQ1pnUCxhQUFjdG1FLEtBQUttSyxPQUV2QixPQUFPM2IsS0FBSzZFLFFBQVV3SyxFQUFFeEssTUFBUSxDQUM1QnlPLEtBQU10VCxLQUFLNkUsTUFBTXlPLEtBQ2pCTCxRQUFTalQsS0FBSzZFLE1BQU1vTyxVQUNwQjVQLEtBQUtDLFVBQVUrTCxJQUNwQkEsRUF0QmlCLEdBdUJuQm1yRSxHQUFtQixXQUNwQixTQUFTbnJFLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBSzYzRSxTQUFXeG9FLEVBQUdyUCxLQUFLeTdFLGdCQUFrQnp4RSxFQU05QyxPQUFPcUYsRUFBRWtzRSxHQUFLLFNBQVN2eEUsRUFBRzNILEdBQ3RCLElBQUssSUFBSTBPLEVBQUkxTixLQUFLMmxDLE1BQU0zbUMsR0FBSS9CLEVBQUksaUJBQW1CeVEsR0FBS0EsRUFBRTBxRSwyQkFBMkJ4NkUsTUFBT2tCLEVBQUk4akUsS0FBTTExQyxFQUFJLEVBQUdqd0IsR0FBS2l3QixFQUFJeGYsRUFBRTBxRSxnQkFBZ0I5NkUsU0FBVTR2QixFQUFHandCLEVBQUksR0FBRXlRLEVBQUUwcUUsZ0JBQWdCbHJELElBQzdLcHVCLEVBQUlBLEVBQUU2bUIsSUFBSWpZLEVBQUUwcUUsZ0JBQWdCbHJELElBQzVCLE9BQU9qd0IsRUFBSSxJQUFJK08sRUFBRXJGLEVBQUc3SCxJQUFNLEdBQUUsb0JBQXFCLDZDQUErQzZILEVBQUksTUFBUTNILEdBQzVHLE9BQ0RnTixFQWJpQixHQWNuQnVyRSxHQUFtQixXQUNwQixTQUFTdnJFLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBSzYzRSxTQUFXeG9FLEVBQUdyUCxLQUFLMndFLFlBQWMzbUUsRUFNMUMsT0FBT3FGLEVBQUVrc0UsR0FBSyxTQUFTdnhFLEdBQ25CLElBQUkzSCxFQUFJZ0IsS0FBSzJsQyxNQUFNaC9CLEdBQ25CLE1BQU8saUJBQW1CM0gsSUFBTSxJQUFNLENBQUUsVUFBVyxTQUFVLFdBQVlpZSxRQUFRamUsRUFBRXN1RSxjQUFnQixpQkFBbUJ0dUUsRUFBRXcxRSxTQUFXLElBQUl4b0UsRUFBRWhOLEVBQUV3MUUsU0FBVXgxRSxFQUFFc3VFLGNBQWdCLEdBQUUsb0JBQXFCLGlDQUFtQzNtRSxHQUNqTyxPQUNEcUYsRUFaaUIsR0FhbkJ3ckUsR0FBbUIsV0FDcEIsU0FBU3hyRSxJQUNMclAsS0FBS3k3RSxnQkFBa0J4VixLQUUzQixPQUFPNTJELEVBQUUvTSxVQUFVbzVFLEdBQUssU0FBU3JzRSxHQUM3QnJQLEtBQUt5N0UsZ0JBQWtCejdFLEtBQUt5N0UsZ0JBQWdCenlELElBQUkzWixJQUNqREEsRUFBRS9NLFVBQVVxNUUsR0FBSyxTQUFTdHNFLEdBQ3pCclAsS0FBS3k3RSxnQkFBa0J6N0UsS0FBS3k3RSxnQkFBZ0J6aEUsT0FBTzNLLElBTXZEQSxFQUFFL00sVUFBVWs1RSxHQUFLLFdBQ2IsSUFBSW5zRSxFQUFJLENBQ0pvc0UsZ0JBQWlCejdFLEtBQUt5N0UsZ0JBQWdCMW1DLElBQ3RDK2lDLGFBQWN0bUUsS0FBS21LLE9BRXZCLE9BQU90WSxLQUFLQyxVQUFVK0wsSUFDdkJBLEVBbkJpQixHQW9CbkIwckUsR0FBbUIsV0FDcEIsU0FBUzFyRSxFQUFFQSxFQUFHckYsRUFBRzNILEVBQUcwTyxFQUFHelEsR0FDbkJOLEtBQUs0SixPQUFTeUYsRUFBR3JQLEtBQUsrMUQsR0FBSy9yRCxFQUFHaEssS0FBS3doRSxlQUFpQm4vRCxFQUFHckMsS0FBSzQ3RSxHQUFLN3FFLEVBQUcvUSxLQUFLNjdFLEdBQUssS0FDOUU3N0UsS0FBS3U5QixHQUFLLEtBQU12OUIsS0FBSysyRCxHQUFLLEtBQU0vMkQsS0FBSzg3RSxHQUFLOTdFLEtBQUsrN0UsR0FBR2p2RSxLQUFLOU0sTUFBT0EsS0FBS2c4RSxHQUFLLElBQUl6VyxHQUFHLElBQy9FdmxFLEtBQUtzdUUsSUFBSyxFQUtWdHVFLEtBQUtpOEUsR0FBSyxHQUdWLElBQUk5NUUsRUFBSUUsRUFBRThCLFFBQVEsc0JBQXVCLFFBQ3pDbkUsS0FBS2s4RSxRQUFVbDhFLEtBQUs0SixPQUFPMCtCLGFBQWN0b0MsS0FBS3M1RCxZQUFjaDVELEVBQUdOLEtBQUttOEUsR0FBSzVCLEdBQUd2NkUsS0FBS3doRSxlQUFnQnhoRSxLQUFLNDdFLElBQ3RHNTdFLEtBQUtvOEUsR0FFTCxTQUFTL3NFLEdBQ0wsTUFBTyw2QkFBK0JBLEVBRDFDLENBRUVyUCxLQUFLd2hFLGdCQUFpQnhoRSxLQUFLZzhFLEdBQUtoOEUsS0FBS2c4RSxHQUFHeFgsR0FBR3hrRSxLQUFLNDdFLEdBQUksSUFBSWYsSUFBSzc2RSxLQUFLcThFLEdBQUssSUFBSS8wQixPQUFPLHNCQUF3Qm5sRCxFQUFJLGFBQ2hIbkMsS0FBS3M4RSxHQUFLLElBQUloMUIsT0FBTyx3QkFBMEJubEQsRUFBSSxzQkFBdUJuQyxLQUFLdThFLEdBQUssSUFBSWoxQixPQUFPLHNCQUF3Qm5sRCxFQUFJLFlBQzNIbkMsS0FBS3c4RSxHQUVMLFNBQVNudEUsR0FDTCxNQUFPLDBCQUE0QkEsRUFEdkMsQ0FFRXJQLEtBQUt3aEUsZ0JBQWlCeGhFLEtBQUt5OEUsR0FBSyxTQUFTcHRFLEdBQ3ZDLE1BQU8sMkJBQTZCQSxFQUROLENBRWhDclAsS0FBS3doRSxnQkFPUHhoRSxLQUFLNEosT0FBT3FpQixpQkFBaUIsVUFBV2pzQixLQUFLODdFLElBRStCLE9BQU96c0UsRUFBRXltRCxHQUFLLFNBQVN6bUQsR0FDbkcsU0FBVUEsSUFBTUEsRUFBRWk1QixlQUNuQmo1QixFQUFFL00sVUFBVXVtRCxNQUFRLFdBQ25CLE9BQU8sRUFBRTdvRCxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJcVAsRUFBR3JGLEVBQUcrRyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsRUFBR2poQixFQUFHeEIsRUFBRzBILEVBQUc4YSxFQUFHcmdCLEVBQUd1Z0IsRUFBSXh3QixLQUN6QyxPQUFPLEVBQUVBLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBY3BRLEtBQUs2N0UsR0FBR3pvRCxNQUVqQyxLQUFLLEVBQ0gsSUFBSy9qQixFQUFJaE4sRUFBRWdPLE9BQVFyRyxFQUFJLEVBQUcrRyxFQUFJMUIsRUFBR3JGLEVBQUkrRyxFQUFFcFEsT0FBUXFKLEtBQU0xSixFQUFJeVEsRUFBRS9HLE1BQVFoSyxLQUFLNDdFLEtBQU96NUUsRUFBSW5DLEtBQUtxb0QsUUFBUWt5QixHQUFHdjZFLEtBQUt3aEUsZUFBZ0JsaEUsT0FBU2l3QixFQUFJaXFELEdBQUdlLEdBQUdqN0UsRUFBRzZCLE1BQVFuQyxLQUFLZzhFLEdBQUtoOEUsS0FBS2c4RSxHQUFHeFgsR0FBR2owQyxFQUFFc25ELFNBQVV0bkQsSUFDdkwsSUFBS3Z3QixLQUFLMDhFLE1BQU9wdEUsRUFBSXRQLEtBQUtrOEUsUUFBUTd6QixRQUFRcm9ELEtBQUt3OEUsT0FBUzF1RSxFQUFJOU4sS0FBSzI4RSxHQUFHcnRFLEtBQU90UCxLQUFLNDhFLEdBQUc5dUUsR0FDbkYwSCxFQUFJLEVBQUc4YSxFQUFJdHdCLEtBQUtpOEUsR0FBSXptRSxFQUFJOGEsRUFBRTN2QixPQUFRNlUsSUFBS3ZGLEVBQUlxZ0IsRUFBRTlhLEdBQUl4VixLQUFLKzdFLEdBQUc5ckUsR0FDekQsT0FBT2pRLEtBQUtpOEUsR0FBSyxHQUdqQmo4RSxLQUFLNEosT0FBT3FpQixpQkFBaUIsVUFBVSxXQUNuQyxPQUFPdUUsRUFBRWlCLFFBQ1J6eEIsS0FBS3N1RSxJQUFLLEVBQUksQ0FBRSxXQUlsQ2ovRCxFQUFFL00sVUFBVW9xRSxHQUFLLFNBQVNyOUQsR0FDekJyUCxLQUFLd29DLFFBQVF4b0MsS0FBS284RSxHQUFJLzRFLEtBQUtDLFVBQVUrTCxLQUN0Q0EsRUFBRS9NLFVBQVV1NkUsR0FBSyxXQUNoQixPQUFPNzhFLEtBQUs4OEUsR0FBRzk4RSxLQUFLZzhFLEtBQ3JCM3NFLEVBQUUvTSxVQUFVeTZFLEdBQUssU0FBUzF0RSxHQUN6QixJQUFJckYsR0FBSSxFQUNSLE9BQU9oSyxLQUFLZzhFLEdBQUdyMkUsU0FBUSxTQUFVdEQsRUFBRzBPLEdBQ2hDQSxFQUFFMHFFLGdCQUFnQjFpRSxJQUFJMUosS0FBT3JGLEdBQUksTUFDaENBLEdBQ05xRixFQUFFL00sVUFBVTA2RSxHQUFLLFNBQVMzdEUsR0FDekJyUCxLQUFLaTlFLEdBQUc1dEUsRUFBRyxZQUNaQSxFQUFFL00sVUFBVTQ2RSxHQUFLLFNBQVM3dEUsRUFBR3JGLEVBQUczSCxHQUMvQnJDLEtBQUtpOUUsR0FBRzV0RSxFQUFHckYsRUFBRzNILEdBSWRyQyxLQUFLbTlFLEdBQUc5dEUsSUFDVEEsRUFBRS9NLFVBQVU4NkUsR0FBSyxTQUFTL3RFLEdBQ3pCLElBQUlyRixFQUFJLGNBR0EsR0FBSWhLLEtBQUsrOEUsR0FBRzF0RSxHQUFJLENBQ3BCLElBQUloTixFQUFJckMsS0FBS2s4RSxRQUFRN3pCLFFBQVFveUIsR0FBR3o2RSxLQUFLd2hFLGVBQWdCbnlELElBQ3JELEdBQUloTixFQUFHLENBQ0gsSUFBSTBPLEVBQUkrcEUsR0FBR1MsR0FBR2xzRSxFQUFHaE4sR0FDakIwTyxJQUFNL0csRUFBSStHLEVBQUUrM0QsUUFHcEIsT0FBTzlvRSxLQUFLcTlFLEdBQUczQixHQUFHcnNFLEdBQUlyUCxLQUFLMDhFLEtBQU0xeUUsR0FDbENxRixFQUFFL00sVUFBVWc3RSxHQUFLLFNBQVNqdUUsR0FDekJyUCxLQUFLcTlFLEdBQUcxQixHQUFHdHNFLEdBQUlyUCxLQUFLMDhFLE1BQ3JCcnRFLEVBQUUvTSxVQUFVaTdFLEdBQUssU0FBU2x1RSxHQUN6QixPQUFPclAsS0FBS3E5RSxHQUFHNUIsZ0JBQWdCMWlFLElBQUkxSixJQUNwQ0EsRUFBRS9NLFVBQVVrN0UsR0FBSyxTQUFTbnVFLEdBQ3pCclAsS0FBS3lvQyxXQUFXZ3lDLEdBQUd6NkUsS0FBS3doRSxlQUFnQm55RCxLQUN6Q0EsRUFBRS9NLFVBQVVtN0UsR0FBSyxTQUFTcHVFLEVBQUdyRixFQUFHM0gsR0FDL0JyQyxLQUFLMDlFLEdBQUdydUUsRUFBR3JGLEVBQUczSCxJQUNmZ04sRUFBRS9NLFVBQVVxN0UsR0FBSyxTQUFTdHVFLEVBQUdyRixFQUFHM0gsR0FDL0IsSUFBSTBPLEVBQUkvUSxLQUNSZ0ssRUFBRXJFLFNBQVEsU0FBVTBKLEdBQ2hCMEIsRUFBRW9zRSxHQUFHOXRFLE1BQ0pyUCxLQUFLczVELFlBQWNqcUQsRUFBR2hOLEVBQUVzRCxTQUFRLFNBQVUwSixHQUMzQzBCLEVBQUVpc0UsR0FBRzN0RSxPQUVWQSxFQUFFL00sVUFBVXM3RSxHQUFLLFNBQVN2dUUsR0FDekJyUCxLQUFLbzBDLEdBQUcva0MsSUFDVEEsRUFBRS9NLFVBQVU2d0MsR0FBSyxXQUNoQm56QyxLQUFLNDFDLE1BQ052bUMsRUFBRS9NLFVBQVVtdkIsR0FBSyxXQUNoQnp4QixLQUFLc3VFLEtBQU90dUUsS0FBSzRKLE9BQU82MEIsb0JBQW9CLFVBQVd6K0IsS0FBSzg3RSxJQUFLOTdFLEtBQUt5b0MsV0FBV3pvQyxLQUFLbThFLElBQ3RGbjhFLEtBQUtzdUUsSUFBSyxJQUNYai9ELEVBQUUvTSxVQUFVK2xELFFBQVUsU0FBU2g1QyxHQUM5QixJQUFJckYsRUFBSWhLLEtBQUtrOEUsUUFBUTd6QixRQUFRaDVDLEdBQzdCLE9BQU8sR0FBRSxvQkFBcUIsT0FBUUEsRUFBR3JGLEdBQUlBLEdBQzlDcUYsRUFBRS9NLFVBQVVrbUMsUUFBVSxTQUFTbjVCLEVBQUdyRixHQUNqQyxHQUFFLG9CQUFxQixNQUFPcUYsRUFBR3JGLEdBQUloSyxLQUFLazhFLFFBQVExekMsUUFBUW41QixFQUFHckYsSUFDOURxRixFQUFFL00sVUFBVW1tQyxXQUFhLFNBQVNwNUIsR0FDakMsR0FBRSxvQkFBcUIsU0FBVUEsR0FBSXJQLEtBQUtrOEUsUUFBUXp6QyxXQUFXcDVCLElBQzlEQSxFQUFFL00sVUFBVXk1RSxHQUFLLFNBQVMxc0UsR0FDekIsSUFBSTBCLEVBQUkvUSxLQUFNTSxFQUFJK08sRUFHVixHQUFJL08sRUFBRXU5RSxjQUFnQjc5RSxLQUFLazhFLFFBQVMsQ0FDeEMsR0FBSSxHQUFFLG9CQUFxQixRQUFTNTdFLEVBQUU4SyxJQUFLOUssRUFBRXVsQixVQUFXdmxCLEVBQUU4SyxNQUFRcEwsS0FBS204RSxHQUFJLFlBQVksR0FBRSw0R0FDekZuOEUsS0FBSysxRCxHQUFHK1osSUFBRyxXQUNQLE9BQU8sRUFBRS8rRCxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJMUIsRUFBR3JGLEVBQUcrRyxFQUFHNU8sRUFBR291QixFQUFHamhCLEVBQ25CLE9BQU8sRUFBRXRQLE1BQU0sU0FBVXFDLEdBQ3JCLEdBQUlyQyxLQUFLc3VFLElBQ0wsR0FBSSxPQUFTaHVFLEVBQUU4SyxJQUFLLEdBQUlwTCxLQUFLcThFLEdBQUd6NUUsS0FBS3RDLEVBQUU4SyxLQUFNLENBQ3pDLEdBQUksTUFBUTlLLEVBQUV1bEIsU0FBVSxPQUFPeFcsRUFBSXJQLEtBQUttMEMsR0FBRzd6QyxFQUFFOEssS0FBTSxDQUFFLEVBQWVwTCxLQUFLNnpDLEdBQUd4a0MsRUFBRyxPQUMvRSxHQUFJckYsRUFBSWhLLEtBQUtpMEMsR0FBRzN6QyxFQUFFOEssSUFBSzlLLEVBQUV1bEIsVUFBVyxNQUFPLENBQUUsRUFBZTdsQixLQUFLNnpDLEdBQUc3cEMsRUFBRTZ0RSxTQUFVN3RFLFNBQzdFLEdBQUloSyxLQUFLczhFLEdBQUcxNUUsS0FBS3RDLEVBQUU4SyxNQUN0QixHQUFJLE9BQVM5SyxFQUFFdWxCLFdBQWE5VSxFQUFJL1EsS0FBS2kyQyxHQUFHMzFDLEVBQUU4SyxJQUFLOUssRUFBRXVsQixXQUFZLE1BQU8sQ0FBRSxFQUFlN2xCLEtBQUtnMUMsR0FBR2prQyxTQUMxRixHQUFJL1EsS0FBS3U4RSxHQUFHMzVFLEtBQUt0QyxFQUFFOEssTUFDdEIsR0FBSSxPQUFTOUssRUFBRXVsQixXQUFhMWpCLEVBQUluQyxLQUFLcTBDLEdBQUcvekMsRUFBRThLLElBQUs5SyxFQUFFdWxCLFdBQVksTUFBTyxDQUFFLEVBQWU3bEIsS0FBS3d6QyxHQUFHcnhDLFNBQzFGLEdBQUk3QixFQUFFOEssTUFBUXBMLEtBQUt3OEUsSUFDdEIsR0FBSSxPQUFTbDhFLEVBQUV1bEIsV0FBYTBLLEVBQUl2d0IsS0FBSzI4RSxHQUFHcjhFLEVBQUV1bEIsV0FBWSxNQUFPLENBQUUsRUFBZTdsQixLQUFLNDhFLEdBQUdyc0QsU0FDbkYsR0FBSWp3QixFQUFFOEssTUFBUXBMLEtBQUtvOEUsSUFBSzlzRSxFQUFJLFNBQVNELEdBQ3hDLElBQUlyRixFQUFJNHBFLEdBQUd2UCxHQUNYLEdBQUksTUFBUWgxRCxFQUFHLElBQ1gsSUFBSWhOLEVBQUlnQixLQUFLMmxDLE1BQU0zNUIsR0FDbkIsR0FBRSxpQkFBbUJoTixHQUFJMkgsRUFBSTNILEVBQy9CLE1BQU9nTixHQUNMLEdBQUUsb0JBQXFCLGlEQUFrREEsR0FFN0UsT0FBT3JGLEVBUndCLENBU2pDMUosRUFBRXVsQixhQUFlK3RELEdBQUd2UCxJQUFNcmtFLEtBQUsrMkQsR0FBR3puRCxRQUFTLEdBQUloUCxFQUFFOEssTUFBUXBMLEtBQUt5OEUsR0FBSSxNQUFPLENBQUUsRUFBZXo4RSxLQUFLNjdFLEdBQUdwb0MsV0FDakd6ekMsS0FBS2k4RSxHQUFHeDhFLEtBQUthLEdBQ3BCLE1BQU8sQ0FBRSxjQUsxQmlCLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsS0FBTSxDQUN4Q3dELElBQUssV0FDRCxPQUFPOUYsS0FBS2c4RSxHQUFHbDJFLElBQUk5RixLQUFLNDdFLEtBRTVCNXRFLFlBQVksRUFDWmlPLGNBQWMsSUFDZDVNLEVBQUUvTSxVQUFVbzZFLEdBQUssV0FDakIxOEUsS0FBS3dvQyxRQUFReG9DLEtBQUttOEUsR0FBSW44RSxLQUFLcTlFLEdBQUc3QixPQUMvQm5zRSxFQUFFL00sVUFBVTI2RSxHQUFLLFNBQVM1dEUsRUFBR3JGLEVBQUczSCxHQUMvQixJQUFJME8sRUFBSSxJQUFJNHBFLEdBQUczNkUsS0FBS3M1RCxZQUFhanFELEVBQUdyRixFQUFHM0gsR0FBSS9CLEVBQUlvNkUsR0FBRzE2RSxLQUFLd2hFLGVBQWdCeGhFLEtBQUtzNUQsWUFBYWpxRCxHQUN6RnJQLEtBQUt3b0MsUUFBUWxvQyxFQUFHeVEsRUFBRXlxRSxPQUNuQm5zRSxFQUFFL00sVUFBVTY2RSxHQUFLLFNBQVM5dEUsR0FDekIsSUFBSXJGLEVBQUkwd0UsR0FBRzE2RSxLQUFLd2hFLGVBQWdCeGhFLEtBQUtzNUQsWUFBYWpxRCxHQUNsRHJQLEtBQUt5b0MsV0FBV3orQixJQUNqQnFGLEVBQUUvTSxVQUFVOHhDLEdBQUssU0FBUy9rQyxHQUN6QixJQUFJckYsRUFBSSxDQUNKNnRFLFNBQVU3M0UsS0FBSzQ3RSxHQUNmakwsWUFBYXRoRSxHQUVqQnJQLEtBQUtrOEUsUUFBUTF6QyxRQUFReG9DLEtBQUt3OEUsR0FBSW41RSxLQUFLQyxVQUFVMEcsS0FDOUNxRixFQUFFL00sVUFBVW83RSxHQUFLLFNBQVNydUUsRUFBR3JGLEVBQUczSCxHQUMvQixJQUFJME8sRUFBSTBwRSxHQUFHejZFLEtBQUt3aEUsZUFBZ0JueUQsR0FBSS9PLEVBQUksSUFBSXc2RSxHQUFHenJFLEVBQUdyRixFQUFHM0gsR0FDckRyQyxLQUFLd29DLFFBQVF6M0IsRUFBR3pRLEVBQUVrN0UsT0FDbkJuc0UsRUFBRS9NLFVBQVVzekMsR0FBSyxXQUNoQjUxQyxLQUFLd29DLFFBQVF4b0MsS0FBS3k4RSxHQUFJLG1CQU0xQnB0RSxFQUFFL00sVUFBVTZ4QyxHQUFLLFNBQVM5a0MsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUFLcThFLEdBQUd4bkQsS0FBS3hsQixHQUNyQixPQUFPckYsRUFBSUEsRUFBRSxHQUFLLE1BTXRCcUYsRUFBRS9NLFVBQVUyeEMsR0FBSyxTQUFTNWtDLEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSXJDLEtBQUttMEMsR0FBRzlrQyxHQUNoQixPQUFPbXJFLEdBQUdlLEdBQUdsNUUsRUFBRzJILElBTXBCcUYsRUFBRS9NLFVBQVUyekMsR0FBSyxTQUFTNW1DLEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSXJDLEtBQUtzOEUsR0FBR3puRCxLQUFLeGxCLEdBQUkwQixFQUFJdVEsT0FBT2pmLEVBQUUsSUFBSy9CLE9BQUksSUFBVytCLEVBQUUsR0FBS0EsRUFBRSxHQUFLLEtBQ3hFLE9BQU9zNEUsR0FBR1ksR0FBRyxJQUFJdEosR0FBRzN4RSxHQUFJeVEsRUFBRy9HLElBTS9CcUYsRUFBRS9NLFVBQVUreEMsR0FBSyxTQUFTaGxDLEVBQUdyRixHQUN6QixJQUFJM0gsRUFBSXJDLEtBQUt1OEUsR0FBRzFuRCxLQUFLeGxCLEdBQUkwQixFQUFJdVEsT0FBT2pmLEVBQUUsSUFDdEMsT0FBT3k0RSxHQUFHUyxHQUFHeHFFLEVBQUcvRyxJQU1wQnFGLEVBQUUvTSxVQUFVcTZFLEdBQUssU0FBU3R0RSxHQUN0QixPQUFPdXJFLEdBQUdXLEdBQUdsc0UsSUFDZEEsRUFBRS9NLFVBQVUweUMsR0FBSyxTQUFTM2xDLEdBQ3pCLE9BQU8sRUFBRXJQLFVBQU0sT0FBUSxHQUFRLFdBQzNCLE9BQU8sRUFBRUEsTUFBTSxTQUFVZ0ssR0FDckIsT0FBT3FGLEVBQUVzaEQsS0FBSzlsQixNQUFRN3FDLEtBQUtzNUQsWUFBWXp1QixJQUFNLENBQUUsRUFBZTdxQyxLQUFLNjdFLEdBQUdpQyxHQUFHenVFLEVBQUV5akUsUUFBU3pqRSxFQUFFeTVELE1BQU96NUQsRUFBRXhLLFNBQVksR0FBRSxvQkFBcUIseUNBQTJDd0ssRUFBRXNoRCxLQUFLOWxCLEtBQ3BMLENBQUUsV0FHWHg3QixFQUFFL00sVUFBVWt4QyxHQUFLLFNBQVNua0MsR0FDekIsT0FBT3JQLEtBQUs2N0UsR0FBR3ZvQyxHQUFHamtDLEVBQUUyMUQsU0FBVTMxRCxFQUFFeTVELE1BQU96NUQsRUFBRXhLLFFBQzFDd0ssRUFBRS9NLFVBQVV1eEMsR0FBSyxTQUFTeGtDLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQU0rUSxFQUFJL0csRUFBSWhLLEtBQUtnOEUsR0FBR3hYLEdBQUduMUQsRUFBR3JGLEdBQUtoSyxLQUFLZzhFLEdBQUdqd0UsT0FBT3NELEdBQUkvTyxFQUFJTixLQUFLODhFLEdBQUc5OEUsS0FBS2c4RSxJQUFLNzVFLEVBQUluQyxLQUFLODhFLEdBQUcvckUsR0FBSXdmLEVBQUksR0FBSWpoQixFQUFJLEdBQzlHLE9BQU9uTixFQUFFd0QsU0FBUSxTQUFVMEosR0FDdkIvTyxFQUFFeVksSUFBSTFKLElBQU1raEIsRUFBRTl3QixLQUFLNFAsTUFDbEIvTyxFQUFFcUYsU0FBUSxTQUFVMEosR0FDckJsTixFQUFFNFcsSUFBSTFKLElBQU1DLEVBQUU3UCxLQUFLNFAsTUFDbEJyUCxLQUFLNjdFLEdBQUd6bUMsR0FBRzdrQixFQUFHamhCLEdBQUdsSyxNQUFLLFdBQ3ZCL0MsRUFBRTI1RSxHQUFLanJFLE1BRVoxQixFQUFFL00sVUFBVXM2RSxHQUFLLFNBQVN2dEUsR0FNekJyUCxLQUFLZzhFLEdBQUdsMkUsSUFBSXVKLEVBQUV3b0UsV0FBYTczRSxLQUFLdTlCLEdBQUdsdUIsRUFBRXNoRSxjQUN0Q3RoRSxFQUFFL00sVUFBVXc2RSxHQUFLLFNBQVN6dEUsR0FDekIsSUFBSXJGLEVBQUlpOEQsS0FDUixPQUFPNTJELEVBQUUxSixTQUFRLFNBQVUwSixFQUFHaE4sR0FDMUIySCxFQUFJQSxFQUFFczlELEdBQUdqbEUsRUFBRW81RSxvQkFDVnp4RSxHQUNOcUYsRUF0UGlCLEdBdVBuQjZyRSxHQUFtQixXQUNwQixTQUFTN3JFLElBQ0xyUCxLQUFLNDJDLEdBQUssSUFBSWlrQyxHQUFJNzZFLEtBQUs4NEMsR0FBSyxHQUFJOTRDLEtBQUt1OUIsR0FBSyxLQUFNdjlCLEtBQUsrMkQsR0FBSyxLQUU5RCxPQUFPMW5ELEVBQUUvTSxVQUFVMDZFLEdBQUssU0FBUzN0RSxLQUU5QkEsRUFBRS9NLFVBQVU0NkUsR0FBSyxTQUFTN3RFLEVBQUdyRixFQUFHM0gsS0FFaENnTixFQUFFL00sVUFBVTg2RSxHQUFLLFNBQVMvdEUsR0FDekIsT0FBT3JQLEtBQUs0MkMsR0FBRzhrQyxHQUFHcnNFLEdBQUlyUCxLQUFLODRDLEdBQUd6cEMsSUFBTSxlQUNyQ0EsRUFBRS9NLFVBQVVtN0UsR0FBSyxTQUFTcHVFLEVBQUdyRixFQUFHM0gsR0FDL0JyQyxLQUFLODRDLEdBQUd6cEMsR0FBS3JGLEdBQ2RxRixFQUFFL00sVUFBVWc3RSxHQUFLLFNBQVNqdUUsR0FDekJyUCxLQUFLNDJDLEdBQUcra0MsR0FBR3RzRSxJQUNaQSxFQUFFL00sVUFBVWk3RSxHQUFLLFNBQVNsdUUsR0FDekIsT0FBT3JQLEtBQUs0MkMsR0FBRzZrQyxnQkFBZ0IxaUUsSUFBSTFKLElBQ3BDQSxFQUFFL00sVUFBVWs3RSxHQUFLLFNBQVNudUUsVUFDbEJyUCxLQUFLODRDLEdBQUd6cEMsSUFDaEJBLEVBQUUvTSxVQUFVdTZFLEdBQUssV0FDaEIsT0FBTzc4RSxLQUFLNDJDLEdBQUc2a0MsaUJBQ2hCcHNFLEVBQUUvTSxVQUFVeTZFLEdBQUssU0FBUzF0RSxHQUN6QixPQUFPclAsS0FBSzQyQyxHQUFHNmtDLGdCQUFnQjFpRSxJQUFJMUosSUFDcENBLEVBQUUvTSxVQUFVdW1ELE1BQVEsV0FDbkIsT0FBTzdvRCxLQUFLNDJDLEdBQUssSUFBSWlrQyxHQUFJdDJFLFFBQVFDLFdBQ2xDNkssRUFBRS9NLFVBQVVxN0UsR0FBSyxTQUFTdHVFLEVBQUdyRixFQUFHM0gsS0FFaENnTixFQUFFL00sVUFBVXM3RSxHQUFLLFNBQVN2dUUsS0FFMUJBLEVBQUUvTSxVQUFVbXZCLEdBQUssYUFBZXBpQixFQUFFL00sVUFBVW9xRSxHQUFLLFNBQVNyOUQsS0FBT0EsRUFBRS9NLFVBQVU2d0MsR0FBSyxhQUVsRjlqQyxFQTlCaUIsR0ErQm5CMnJFLEdBQUssU0FBUzNyRSxHQUNmclAsS0FBS29MLElBQU1pRSxHQUNaMnNFLEdBQUssU0FBUzNzRSxHQUNiclAsS0FBS29MLElBQU1pRSxHQUNaOHJFLEdBQW1CLFdBQ2xCLFNBQVM5ckUsRUFBRUEsRUFFWHJGLEdBQ0loSyxLQUFLd0ksTUFBUTZHLEVBQUdyUCxLQUFLazNDLEdBQUtsdEMsRUFBR2hLLEtBQUtnNEMsR0FBSyxLQU92Q2g0QyxLQUFLNG9FLElBQUssRUFFVjVvRSxLQUFLK3pDLEdBQUtveUIsS0FFVm5tRSxLQUFLa2tFLEdBQUtpQyxLQUFNbm1FLEtBQUsrMkMsR0FBS29oQixHQUFHOW9ELEdBQUlyUCxLQUFLNDRDLEdBQUssSUFBSXV1QixHQUFHbm5FLEtBQUsrMkMsSUFFM0QsT0FBT3gxQyxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FLNUN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtrM0MsSUFFaEJscEMsWUFBWSxFQUNaaU8sY0FBYyxJQVlsQjVNLEVBQUUvTSxVQUFVaXhDLEdBQUssU0FBU2xrQyxFQUFHckYsR0FDekIsSUFBSTNILEVBQUlyQyxLQUFNK1EsRUFBSS9HLEVBQUlBLEVBQUVndkMsR0FBSyxJQUFJb3VCLEdBQUk5bUUsRUFBSTBKLEVBQUlBLEVBQUU0dUMsR0FBSzU0QyxLQUFLNDRDLEdBQUl6MkMsRUFBSTZILEVBQUlBLEVBQUVrNkQsR0FBS2xrRSxLQUFLa2tFLEdBQUkzekMsRUFBSWp3QixFQUFHZ1AsR0FBSSxFQUFJeEIsRUFBSTRwRCxHQUFHMTNELEtBQUt3SSxRQUFVbEksRUFBRThrQixPQUFTcGxCLEtBQUt3SSxNQUFNKzZELE1BQVFqakUsRUFBRTRtRSxPQUFTLEtBQU0xeEQsRUFBSW9pRCxHQUFHNTNELEtBQUt3SSxRQUFVbEksRUFBRThrQixPQUFTcGxCLEtBQUt3SSxNQUFNKzZELE1BQVFqakUsRUFBRTJtRSxRQUFVLEtBRXpPLEdBQUk1M0QsRUFBRTAxRCxJQUFHLFNBQVUxMUQsRUFBR3JGLEdBQ2xCLElBQUlzbUIsRUFBSWh3QixFQUFFd0YsSUFBSXVKLEdBQUlZLEVBQUlqRyxhQUFhaXJELEdBQUtqckQsRUFBSSxLQUM1Q2lHLElBQU1BLEVBQUlvbUQsR0FBR2gwRCxFQUFFbUcsTUFBT3lILEdBQUtBLEVBQUksTUFDL0IsSUFBSXVnQixJQUFNRixHQUFLanVCLEVBQUU2aEUsR0FBR25yRCxJQUFJdVgsRUFBRWxsQixLQUFNbEcsSUFBTStLLElBQU1BLEVBQUUyM0IsSUFHOUN2bEMsRUFBRTZoRSxHQUFHbnJELElBQUk5SSxFQUFFN0UsTUFBUTZFLEVBQUVvOEQsdUJBQXdCeCtELEdBQUksRUFFakR5aUIsR0FBS3JnQixFQUFJcWdCLEVBQUUvc0IsT0FBT28rRCxRQUFRMXhELEVBQUUxTSxRQUFVaXRCLElBQU10ckIsSUFBTTZMLEVBQUU2MkQsTUFBTSxDQUN0RC92RCxLQUFNLEVBQ05nd0QsSUFBSzUzRCxJQUNMcEMsR0FBSSxHQUFNeEwsRUFBRXcwQyxHQUFHdm1CLEVBQUdyZ0IsS0FBT2MsRUFBRTYyRCxNQUFNLENBQ2pDL3ZELEtBQU0sRUFDTmd3RCxJQUFLNTNELElBQ0xwQyxHQUFJLEdBQUtDLEdBQUt6TCxFQUFFMDBDLEdBQUc5bUMsRUFBR25DLEdBQUssR0FBSzBILEdBQUtuVCxFQUFFMDBDLEdBQUc5bUMsRUFBR3VGLEdBQUssS0FJdERsRyxHQUFJLEtBQVFnaEIsR0FBS3JnQixHQUFLYyxFQUFFNjJELE1BQU0sQ0FDMUIvdkQsS0FBTSxFQUNOZ3dELElBQUs1M0QsSUFDTHBDLEdBQUksR0FBTXlpQixJQUFNcmdCLElBQU1jLEVBQUU2MkQsTUFBTSxDQUM5Qi92RCxLQUFNLEVBQ05nd0QsSUFBS3YzQyxJQUNMemlCLEdBQUksR0FBS0MsR0FBSzBILEtBSWxCbEcsR0FBSSxJQUFNekIsSUFBTW9DLEdBQUtzZ0IsRUFBSUEsRUFBRXZILElBQUkvWSxHQUFJOU4sRUFBSStDLEVBQUkvQyxFQUFFNm1CLElBQUkzWixHQUFLbE4sRUFBRTZYLE9BQU8zSyxLQUFPa2hCLEVBQUlBLEVBQUV2VyxPQUFPM0ssR0FDbkZsTixFQUFJQSxFQUFFNlgsT0FBTzNLLFFBQ1pxb0QsR0FBRzEzRCxLQUFLd0ksUUFBVW92RCxHQUFHNTNELEtBQUt3SSxPQUFRLEtBQU0rbkIsRUFBRW5MLEtBQU9wbEIsS0FBS3dJLE1BQU0rNkQsT0FBUyxDQUN0RSxJQUFJanpDLEVBQUlvbkMsR0FBRzEzRCxLQUFLd0ksT0FBUytuQixFQUFFMjJDLE9BQVMzMkMsRUFBRTAyQyxRQUN0QzEyQyxFQUFJQSxFQUFFdlcsT0FBT3NXLEVBQUVsbEIsS0FBTWpKLEVBQUlBLEVBQUU2WCxPQUFPc1csRUFBRWxsQixLQUFNMkYsRUFBRTYyRCxNQUFNLENBQzlDL3ZELEtBQU0sRUFDTmd3RCxJQUFLdjNDLElBR2IsTUFBTyxDQUNIc29CLEdBQUlyb0IsRUFDSnlvQixHQUFJam9DLEVBQ0p5bEMsR0FBSWxuQyxFQUNKNDBELEdBQUkvaEUsSUFFVGtOLEVBQUUvTSxVQUFVdTBDLEdBQUssU0FBU3huQyxFQUFHckYsR0FRNUIsT0FBT3FGLEVBQUV1NEIsSUFBTTU5QixFQUFFcWlFLHdCQUEwQnJpRSxFQUFFNDlCLElBYWpEdjRCLEVBQUUvTSxVQUFVbTNDLEdBQUssU0FBU3BxQyxFQUFHckYsRUFBRzNILEdBQzVCLElBQUkwTyxFQUFJL1EsS0FBTU0sRUFBSU4sS0FBSzQ0QyxHQUN2QjU0QyxLQUFLNDRDLEdBQUt2cEMsRUFBRXVwQyxHQUFJNTRDLEtBQUtra0UsR0FBSzcwRCxFQUFFNjBELEdBRTVCLElBQUkvaEUsRUFBSWtOLEVBQUUycEMsR0FBRzh1QixLQUNiM2xFLEVBQUVnbUMsTUFBSyxTQUFVOTRCLEVBQUdyRixHQUNoQixPQUFPLFNBQVNxRixFQUFHckYsR0FDZixJQUFJM0gsRUFBSSxTQUFTZ04sR0FDYixPQUFRQSxHQUNOLEtBQUssRUFDSCxPQUFPLEVBRVQsS0FBSyxFQUNMLEtBQUssRUFJSCxPQUFPLEVBRVQsS0FBSyxFQUNILE9BQU8sRUFFVCxRQUNFLE9BQU8sT0FHZixPQUFPaE4sRUFBRWdOLEdBQUtoTixFQUFFMkgsR0FwQmIsQ0FxQkxxRixFQUFFd0ksS0FBTTdOLEVBQUU2TixPQUFTOUcsRUFBRWdtQyxHQUFHMW5DLEVBQUV3NEQsSUFBSzc5RCxFQUFFNjlELFFBQ2xDN25FLEtBQUtrMUMsR0FBRzd5QyxHQUNiLElBQUlrdUIsRUFBSXZtQixFQUFJaEssS0FBSzY0QyxLQUFPLEdBQUl2cEMsRUFBSSxJQUFNdFAsS0FBSyt6QyxHQUFHM3VCLE1BQVFwbEIsS0FBSzRvRSxHQUFLLEVBQWlCLEVBQWdCOTZELEVBQUl3QixJQUFNdFAsS0FBS2c0QyxHQUNoSCxPQUFPaDRDLEtBQUtnNEMsR0FBSzFvQyxFQUFHLElBQU1uTixFQUFFeEIsUUFBVW1OLEVBQUksQ0FDdENpd0UsU0FBVSxJQUFJM1gsR0FBR3BtRSxLQUFLd0ksTUFBTzZHLEVBQUV1cEMsR0FBSXQ0QyxFQUFHNkIsRUFBR2tOLEVBQUU2MEQsR0FBSSxJQUFrQjUwRCxFQUFHeEIsR0FDckMsR0FDL0I2b0MsR0FBSXBtQixHQUNKLENBQ0FvbUIsR0FBSXBtQixJQVFabGhCLEVBQUUvTSxVQUFVMHVFLEdBQUssU0FBUzNoRSxHQUN0QixPQUFPclAsS0FBSzRvRSxJQUFNLFlBQTRCdjVELEdBSzlDclAsS0FBSzRvRSxJQUFLLEVBQUk1b0UsS0FBS3k1QyxHQUFHLENBQ2xCYixHQUFJNTRDLEtBQUs0NEMsR0FDVEksR0FBSSxJQUFJb3VCLEdBQ1JsRCxHQUFJbGtFLEtBQUtra0UsR0FDVDF0QixJQUFJLElBRW9CLElBQU8sQ0FDL0JHLEdBQUksS0FNWnRuQyxFQUFFL00sVUFBVTIwQyxHQUFLLFNBQVM1bkMsR0FFdEIsT0FBUXJQLEtBQUtrM0MsR0FBR24rQixJQUFJMUosTUFFbEJyUCxLQUFLNDRDLEdBQUc3L0IsSUFBSTFKLEtBQU9yUCxLQUFLNDRDLEdBQUc5eUMsSUFBSXVKLEdBQUd1NEIsSUFNeEN2NEIsRUFBRS9NLFVBQVU0eUMsR0FBSyxTQUFTN2xDLEdBQ3RCLElBQUlyRixFQUFJaEssS0FDUnFQLElBQU1BLEVBQUV1MkIsR0FBR2pnQyxTQUFRLFNBQVUwSixHQUN6QixPQUFPckYsRUFBRWt0QyxHQUFLbHRDLEVBQUVrdEMsR0FBR2x1QixJQUFJM1osTUFDdEJBLEVBQUVtMEIsR0FBRzc5QixTQUFRLFNBQVUwSixPQUFTQSxFQUFFNjFCLEdBQUd2L0IsU0FBUSxTQUFVMEosR0FDeEQsT0FBT3JGLEVBQUVrdEMsR0FBS2x0QyxFQUFFa3RDLEdBQUdsOUIsT0FBTzNLLE1BQ3pCclAsS0FBSzRvRSxHQUFLdjVELEVBQUV1NUQsS0FDbEJ2NUQsRUFBRS9NLFVBQVV1MkMsR0FBSyxXQUNoQixJQUFJeHBDLEVBQUlyUCxLQUVBLElBQUtBLEtBQUs0b0UsR0FBSSxNQUFPLEdBR3JCLElBQUk1K0QsRUFBSWhLLEtBQUsrekMsR0FDckIvekMsS0FBSyt6QyxHQUFLb3lCLEtBQU1ubUUsS0FBSzQ0QyxHQUFHanpDLFNBQVEsU0FBVXFFLEdBQ3RDcUYsRUFBRTRuQyxHQUFHanRDLEVBQUVvQixPQUFTaUUsRUFBRTBrQyxHQUFLMWtDLEVBQUUwa0MsR0FBRy9xQixJQUFJaGYsRUFBRW9CLFNBR3RDLElBQUkvSSxFQUFJLEdBQ1IsT0FBTzJILEVBQUVyRSxTQUFRLFNBQVVxRSxHQUN2QnFGLEVBQUUwa0MsR0FBR2g3QixJQUFJL08sSUFBTTNILEVBQUU1QyxLQUFLLElBQUl1OEUsR0FBR2h5RSxPQUM1QmhLLEtBQUsrekMsR0FBR3B1QyxTQUFRLFNBQVUwSixHQUMzQnJGLEVBQUUrTyxJQUFJMUosSUFBTWhOLEVBQUU1QyxLQUFLLElBQUl1N0UsR0FBRzNyRSxPQUN6QmhOLEdBc0JUZ04sRUFBRS9NLFVBQVVrMkMsR0FBSyxTQUFTbnBDLEdBQ3RCclAsS0FBS2szQyxHQUFLN25DLEVBQUVvbEIsR0FBSXowQixLQUFLK3pDLEdBQUtveUIsS0FDMUIsSUFBSW44RCxFQUFJaEssS0FBS3V6QyxHQUFHbGtDLEVBQUVnOEQsV0FDbEIsT0FBT3JyRSxLQUFLeTVDLEdBQUd6dkMsR0FBNkIsSUFRaERxRixFQUFFL00sVUFBVXlyRCxHQUFLLFdBQ2IsT0FBT3FZLEdBQUdpQyxHQUFHcm9FLEtBQUt3SSxNQUFPeEksS0FBSzQ0QyxHQUFJNTRDLEtBQUtra0UsR0FBSSxJQUFrQmxrRSxLQUFLZzRDLEtBQ25FM29DLEVBM09lLEdBNE9qQjRzRSxHQUFLLFNBSVY1c0UsRUFLQXJGLEVBT0EzSCxHQUNJckMsS0FBS3dJLE1BQVE2RyxFQUFHclAsS0FBS2dsRSxTQUFXaDdELEVBQUdoSyxLQUFLZytFLEtBQU8zN0UsR0FDaEQwNUUsR0FBSyxTQUFTMXNFLEdBQ2JyUCxLQUFLb0wsSUFBTWlFLEVBT1hyUCxLQUFLbTNDLElBQUssR0FDWDBrQyxHQUFtQixXQUNsQixTQUFTeHNFLEVBQUVBLEVBQUdyRixFQUFHM0gsRUFFakIwTyxFQUFHelEsRUFBRzZCLEdBQ0ZuQyxLQUFLMDlCLEdBQUtydUIsRUFBR3JQLEtBQUt5NEMsR0FBS3p1QyxFQUFHaEssS0FBS200QyxHQUFLOTFDLEVBQUdyQyxLQUFLdTFDLEdBQUt4a0MsRUFBRy9RLEtBQUtzNUQsWUFBY2g1RCxFQUFHTixLQUFLdTVDLEdBQUtwM0MsRUFDcEZuQyxLQUFLazRDLEdBQUssR0FBSWw0QyxLQUFLZzNDLEdBQUssSUFBSSxJQUFFLFNBQVUzbkMsR0FDcEMsT0FBT3lwRCxHQUFHenBELEtBQ1ZtcEQsSUFBS3g0RCxLQUFLZzBDLEdBQUssSUFBSXI3QixJQUt2QjNZLEtBQUsrNEMsR0FBSyxHQUtWLzRDLEtBQUsyNEMsR0FBSyxJQUFJNHNCLEdBQUcsR0FBRWhqQyxHQUtuQnZpQyxLQUFLaStFLEdBQUssSUFBSXRsRSxJQUFLM1ksS0FBS2k1QyxHQUFLLElBQUlvaEMsR0FFakNyNkUsS0FBS3MxQyxHQUFLLEdBRVZ0MUMsS0FBS3MzQyxHQUFLLElBQUkzK0IsSUFBSzNZLEtBQUs4MkMsR0FBS3NGLEdBQUcwZ0IsS0FBTTk4RCxLQUFLMndFLFlBQWMsVUFJekQzd0UsS0FBS3UzQyxRQUFLLEVBRWQsT0FBT2gyQyxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDNUN3RCxJQUFLLFdBQ0QsT0FBTyxJQUFPOUYsS0FBS3UzQyxJQUV2QnZwQyxZQUFZLEVBQ1ppTyxjQUFjLElBQ2Q1TSxFQXRDYyxHQW1EdEIsU0FBU21zRSxHQUFHbnNFLEVBQUcwQixHQUNYLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFBRzZCLEVBQUdvdUIsRUFBR2poQixFQUFHeEIsRUFDbkIsT0FBTyxFQUFFOU4sTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wRyxFQUFJb3pFLEdBQUcvdEUsSUFBS2toQixFQUFJdm1CLEVBQUVndEMsR0FBR2x4QyxJQUFJaUwsS0FPaEN6USxFQUFJaXdCLEVBQUV5MEMsU0FBVWg3RCxFQUFFdXJDLEdBQUc2bkMsR0FBRzk4RSxHQUFJNkIsRUFBSW91QixFQUFFeXRELEtBQUtqd0IsS0FBTSxDQUFFLEVBQWMsSUFBTyxDQUFFLEVBQWMsR0FFdEYsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjbVAsR0FBR2x6RCxFQUFFMHpCLEdBQUlzN0IsR0FBR2pvRCxLQUVyQyxLQUFLLEVBQ0gsT0FBT3pCLEVBQUlqTixFQUFFZ08sT0FBUXZDLEVBQUk5RCxFQUFFdXJDLEdBQUc2bkMsR0FBRzl0RSxFQUFFMDFELFVBQVcxa0UsRUFBSWdQLEVBQUUwMUQsU0FBVSxDQUFFLEVBQWNvVyxHQUFHcHhFLEVBQUcrRyxFQUFHelEsRUFBRyxZQUFjd04sSUFFMUcsS0FBSyxFQUNIM0wsRUFBSUUsRUFBRWdPLE9BQVFyRyxFQUFFaXVDLElBQU0yZ0MsR0FBRzV1RSxFQUFFeXVDLEdBQUlucEMsR0FBSWpOLEVBQUUrTixNQUFRLEVBRS9DLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBZWpPLFVBU3BDLFNBQVNpNUUsR0FBRy9yRSxFQUFHMEIsRUFBR3pRLEVBQUc2QixHQUNyQixPQUFPLEVBQUVuQyxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJdXdCLEVBQUdqaEIsRUFBR3hCLEVBQUcwSCxFQUFHOGEsRUFBR3JnQixFQUNuQixPQUFPLEVBQUVqUSxNQUFNLFNBQVV3d0IsR0FDckIsT0FBUUEsRUFBRXBnQixPQUNSLEtBQUssRUFJSCxPQUFPZixFQUFFOHBDLEdBQUssU0FBU3BvQyxFQUFHelEsRUFBRzZCLEdBQ3pCLE9BQU8sU0FBU2tOLEVBQUcwQixFQUFHelEsRUFBRzZCLEdBQ3JCLE9BQU8sRUFBRW5DLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHdW1CLEVBQUdqaEIsRUFDVixPQUFPLEVBQUV0UCxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUkrRyxFQUFFaXRFLEtBQUt6cUMsR0FBR2p6QyxJQUFNazJDLEdBQUssQ0FBRSxFQUFjNGxCLEdBQUcvc0QsRUFBRXF1QixHQUFJM3NCLEVBQUV2SSxPQUNqQyxHQUFJcEQsTUFBSyxTQUFVaUssR0FDekMsSUFBSWhOLEVBQUlnTixFQUFFZzhELFVBQ1YsT0FBT3Q2RCxFQUFFaXRFLEtBQUt6cUMsR0FBR2x4QyxFQUFHMkgsT0FDaEIsQ0FBRSxFQUFjLEdBRTFCLEtBQUssRUFJSEEsRUFBSTNILEVBQUVnTyxPQUFRaE8sRUFBRStOLE1BQVEsRUFFMUIsS0FBSyxFQUNILE9BQU9tZ0IsRUFBSXB1QixHQUFLQSxFQUFFbW1FLEdBQUd4aUUsSUFBSWlMLEVBQUVpMEQsVUFBVzExRCxFQUFJeUIsRUFBRWl0RSxLQUFLdmtDLEdBQUd6dkMsRUFDeEJxRixFQUFFNG9DLEdBQUkxbkIsR0FBSSxDQUFFLEdBQWdCcXJELEdBQUd2c0UsRUFBRzBCLEVBQUVpMEQsU0FBVTExRCxFQUFFcW5DLElBQzVFcm5DLEVBQUV5dUUsa0JBckJYLENBeUJMMXVFLEVBQUcwQixFQUFHelEsRUFBRzZCLElBQ1osQ0FBRSxFQUFjaTZELEdBQUcvc0QsRUFBRXF1QixHQUFJM3NCLEdBQ0YsSUFFNUIsS0FBSyxFQUNILE9BQU93ZixFQUFJQyxFQUFFbmdCLE9BQVFmLEVBQUksSUFBSTZyRSxHQUFHcHFFLEVBQUd3ZixFQUFFa0UsSUFBSzNtQixFQUFJd0IsRUFBRWlrQyxHQUFHaGpCLEVBQUU4NkMsV0FBWTcxRCxFQUFJaXlELEdBQUdrQixHQUFHcm9FLEVBQUc2QixHQUFLLFlBQTRCa04sRUFBRXNoRSxhQUNqSHJnRCxFQUFJaGhCLEVBQUVtcUMsR0FBRzNyQyxFQUNtQnVCLEVBQUU0b0MsR0FBSXppQyxHQUFJb21FLEdBQUd2c0UsRUFBRy9PLEVBQUdnd0IsRUFBRXFtQixJQUFLMW1DLEVBQUksSUFBSWdzRSxHQUFHbHJFLEVBQUd6USxFQUFHZ1AsR0FBSSxDQUFFLEdBQWdCRCxFQUFFMm5DLEdBQUdqeEMsSUFBSWdMLEVBQUdkLEdBQ3pHWixFQUFFMmtDLEdBQUdqN0IsSUFBSXpZLEdBQUsrTyxFQUFFMmtDLEdBQUdsdUMsSUFBSXhGLEdBQUdiLEtBQUtzUixHQUFLMUIsRUFBRTJrQyxHQUFHanVDLElBQUl6RixFQUFHLENBQUV5USxJQUFNdWYsRUFBRXl0RCxrQkFNckMsU0FBUzVCLEdBQUc5c0UsRUFBRzBCLEdBQ2hELE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFBRzZCLEVBQ1YsT0FBTyxFQUFFbkMsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wRyxFQUFJLEdBQUVxRixHQUFJL08sRUFBSTBKLEVBQUVndEMsR0FBR2x4QyxJQUFJaUwsSUFBSzVPLEVBQUk2SCxFQUFFZ3FDLEdBQUdsdUMsSUFBSXhGLEVBQUUwa0UsV0FBV3JrRSxPQUFTLEVBQUksQ0FBRSxHQUFnQnFKLEVBQUVncUMsR0FBR2p1QyxJQUFJekYsRUFBRTBrRSxTQUFVN2lFLEVBQUV5SixRQUFPLFNBQVV5RCxHQUNoSSxPQUFRbXBELEdBQUducEQsRUFBRzBCLFlBQ1AvRyxFQUFFZ3RDLEdBQUdoOUIsT0FBT2pKLEtBQVEvRyxFQUFFaXVDLElBR2pDanVDLEVBQUV1ckMsR0FBRytuQyxHQUFHaDlFLEVBQUUwa0UsVUFBV2g3RCxFQUFFdXJDLEdBQUd3bkMsR0FBR3o4RSxFQUFFMGtFLFVBQVksQ0FBRSxFQUFjLEdBQU0sQ0FBRSxFQUFjckosR0FBRzN4RCxFQUFFMHpCLEdBQUlwOUIsRUFBRTBrRSxVQUMvRCxHQUFJNS9ELE1BQUssV0FDbEM0RSxFQUFFdXJDLEdBQUdpb0MsR0FBR2w5RSxFQUFFMGtFLFVBQVdzVCxHQUFHdHVFLEVBQUV5dUMsR0FBSW40QyxFQUFFMGtFLFVBQVdxWCxHQUFHcnlFLEVBQUcxSixFQUFFMGtFLGFBQ25EbHpELE1BQU1zaUUsTUFBUyxDQUFFLEVBQWMsR0FFckMsS0FBSyxFQUNIL3hFLEVBQUVnTyxPQUFRaE8sRUFBRStOLE1BQVEsRUFFdEIsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjLEdBRXpCLEtBQUssRUFDSCxPQUFPaXNFLEdBQUdyeUUsRUFBRzFKLEVBQUUwa0UsVUFBVyxDQUFFLEVBQWNySixHQUFHM3hELEVBQUUwekIsR0FBSXA5QixFQUFFMGtFLFVBQ3hCLElBRS9CLEtBQUssRUFDSDNpRSxFQUFFZ08sT0FBUWhPLEVBQUUrTixNQUFRLEVBRXRCLEtBQUssRUFDSCxNQUFPLENBQUUsVUFlckIsU0FBUzZxRSxHQUFHNXJFLEVBQUcwQixFQUFHelEsR0FDbEIsT0FBTyxFQUFFTixVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRzdILEVBQUdvdUIsRUFBR2poQixFQUNiLE9BQU8sRUFBRXRQLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSHBHLEVBQUkwekUsR0FBR3J1RSxHQUFJaE4sRUFBRStOLE1BQVEsRUFFdkIsS0FBSyxFQUNILE9BQU8vTixFQUFFaU8sS0FBSzdRLEtBQUssQ0FBRSxFQUFHLEVBQUcsQ0FBRSxJQUFNLENBQUUsRUFBYyxTQUFTNFAsRUFBR3JGLEdBQzNELElBQUkzSCxFQUFHME8sRUFBSSxHQUFFMUIsR0FBSS9PLEVBQUl3d0IsR0FBRW5WLE1BQU94WixFQUFJNkgsRUFBRStoRSxRQUFPLFNBQVUxOEQsRUFBR3JGLEdBQ3BELE9BQU9xRixFQUFFMlosSUFBSWhmLEVBQUVvQixPQUNmKzZELE1BQ0osT0FBT3AxRCxFQUFFeW9FLFlBQVlwTSxlQUFlLDBCQUEyQixhQUFhLFNBQVUvOUQsR0FDbEYsT0FBTzBCLEVBQUU2aUIsR0FBRytvQixHQUFHdHRDLEVBQUdsTixHQUFHTCxNQUFLLFNBQVVLLEdBQ2hDRSxFQUFJRixFQUNKLElBTUEsSUFBSW91QixFQUFJLEdBQUlqaEIsRUFBSSxFQUFHeEIsRUFBSTlELEVBQUdzRixFQUFJeEIsRUFBRW5OLE9BQVEyTyxJQUFLLENBQ3pDLElBQUlrRyxFQUFJMUgsRUFBRXdCLEdBQUlnaEIsRUFBSTZsQyxHQUFHM2dELEVBQUduVCxFQUFFeUQsSUFBSTBQLEVBQUVwSyxNQUNoQyxNQUFRa2xCLEdBSVJDLEVBQUU5d0IsS0FBSyxJQUFJeTFELEdBQUcxL0MsRUFBRXBLLElBQUtrbEIsRUFBRzBsQyxHQUFHMWxDLEVBQUVpNkMsTUFBTXBCLFVBQVc5L0IsR0FBRzhoQyxRQUFPLEtBRTVELE9BQU9wNkQsRUFBRTJzQyxHQUFHdTJCLEdBQUc1a0UsRUFBRy9PLEVBQUdpd0IsRUFBR3ZtQixTQUU1QjVFLE1BQUssU0FBVWlLLEdBQ2YsSUFBSXJGLEVBQUlxRixFQUFFZ3NDLEdBQUdoNUMsR0FDYixNQUFPLENBQ0h5d0UsUUFBU3pqRSxFQUFFeWpFLFFBQ1h4MkIsR0FBSXR5QyxNQTNCbUMsQ0E4QmpEQSxFQUFFMHpCLEdBQUkzc0IsSUFFVixLQUFLLEVBQ0gsT0FBTzVPLEVBQUlFLEVBQUVnTyxPQUFRckcsRUFBRXVyQyxHQUFHeW5DLEdBQUc3NkUsRUFBRTJ3RSxTQUFVLFNBQVN6akUsRUFBR3JGLEVBQUczSCxHQUNwRCxJQUFJME8sRUFBSTFCLEVBQUVpbUMsR0FBR2ptQyxFQUFFaXFELFlBQVk2WSxNQUMzQnBoRSxJQUFNQSxFQUFJLElBQUl3MEQsR0FBRyxLQUFLeDBELEVBQUlBLEVBQUV5ekQsR0FBR3g2RCxFQUFHM0gsR0FBSWdOLEVBQUVpbUMsR0FBR2ptQyxFQUFFaXFELFlBQVk2WSxNQUFRcGhFLEVBRjVCLENBR3ZDL0csRUFBRzdILEVBQUUyd0UsUUFBU3h5RSxHQUFJLENBQUUsRUFBY3c4RSxHQUFHOXlFLEVBQUc3SCxFQUFFbTZDLEtBRTlDLEtBQUssRUFDSCxPQUFPajZDLEVBQUVnTyxPQUFRLENBQUUsRUFBY2d0RCxHQUFHcnpELEVBQUV5dUMsS0FFeEMsS0FBSyxFQUNILE9BQU9wMkMsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjLEdBRW5DLEtBQUssRUFDSCxPQUFPa2dCLEVBQUlsdUIsRUFBRWdPLE9BQVFmLEVBQUlnaEUsR0FBRy8vQyxFQUFHLDJCQUE0Qmp3QixFQUFFbUUsT0FBTzZLLEdBQUksQ0FBRSxFQUFjLEdBRTFGLEtBQUssRUFDSCxNQUFPLENBQUUsVUFVckIsU0FBU2lzRSxHQUFHbHNFLEVBQUcwQixHQUNmLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFDUCxPQUFPLEVBQUVOLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSHBHLEVBQUksR0FBRXFGLEdBQUloTixFQUFFK04sTUFBUSxFQUV0QixLQUFLLEVBQ0gsT0FBTy9OLEVBQUVpTyxLQUFLN1EsS0FBSyxDQUFFLEVBQUcsRUFBRyxDQUFFLElBQU0sQ0FBRSxFQUFjKzhELEdBQUd4eUQsRUFBRTB6QixHQUFJM3NCLElBRTlELEtBQUssRUFDSCxPQUFPelEsRUFBSStCLEVBQUVnTyxPQUViVSxFQUFFdTNELEdBQUczaUUsU0FBUSxTQUFVMEosRUFBR2hOLEdBQ3RCLElBQUkwTyxFQUFJL0csRUFBRWkwRSxHQUFHbjRFLElBQUl6RCxHQUNqQjBPLElBR0EsR0FBRTFCLEVBQUV1MkIsR0FBR3hnQixLQUFPL1YsRUFBRW0wQixHQUFHcGUsS0FBTy9WLEVBQUU2MUIsR0FBRzlmLE1BQVEsR0FBSS9WLEVBQUV1MkIsR0FBR3hnQixLQUFPLEVBQUlyVSxFQUFFb21DLElBQUssRUFBSzluQyxFQUFFbTBCLEdBQUdwZSxLQUFPLEVBQUksR0FBRXJVLEVBQUVvbUMsSUFBTTluQyxFQUFFNjFCLEdBQUc5ZixLQUFPLElBQU0sR0FBRXJVLEVBQUVvbUMsSUFDdkhwbUMsRUFBRW9tQyxJQUFLLE9BQ04sQ0FBRSxFQUFjMmxDLEdBQUc5eUUsRUFBRzFKLEVBQUd5USxJQUVoQyxLQUFLLEVBRUgsT0FBTzFPLEVBQUVnTyxPQUFRLENBQUUsRUFBYyxHQUVuQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMrakUsR0FBRy94RSxFQUFFZ08sU0FFOUIsS0FBSyxFQUNILE9BQU9oTyxFQUFFZ08sT0FBUSxDQUFFLEVBQWMsR0FFbkMsS0FBSyxFQUNILE1BQU8sQ0FBRSxVQVNyQixTQUFTaXJFLEdBQUdqc0UsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFJME8sRUFBSSxHQUFFMUIsR0FLTixHQUFJMEIsRUFBRWtuQyxJQUFNLElBQXdCNTFDLElBQU0wTyxFQUFFa25DLElBQU0sSUFBOEI1MUMsRUFBRyxDQUNuRixJQUFJL0IsRUFBSSxHQUNSeVEsRUFBRWltQyxHQUFHcnhDLFNBQVEsU0FBVTBKLEVBQUdoTixHQUN0QixJQUFJME8sRUFBSTFPLEVBQUUyN0UsS0FBS2hOLEdBQUdobkUsR0FDbEIrRyxFQUFFZ3RFLFVBQVl6OUUsRUFBRWIsS0FBS3NSLEVBQUVndEUsYUFDdEIsU0FBUzF1RSxFQUFHckYsR0FDYixJQUFJM0gsRUFBSSxHQUFFZ04sR0FDVmhOLEVBQUVzdUUsWUFBYzNtRSxFQUNoQixJQUFJK0csR0FBSSxFQUNSMU8sRUFBRXF1RSxRQUFRL3FFLFNBQVEsU0FBVTBKLEVBQUdoTixHQUMzQixJQUFLLElBQUkvQixFQUFJLEVBQUc2QixFQUFJRSxFQUFFK3BCLFVBQVc5ckIsRUFBSTZCLEVBQUV4QixPQUFRTCxJQUUzQzZCLEVBQUU3QixHQUFHMHdFLEdBQUdobkUsS0FBTytHLEdBQUksTUFFdEJBLEdBQUttZ0UsR0FBRzd1RSxHQVRaLENBVUgwTyxFQUFFb25DLEdBQUludUMsR0FBSTFKLEVBQUVLLFFBQVVvUSxFQUFFbW5DLEdBQUduYSxHQUFHejlCLEdBQUl5USxFQUFFNC9ELFlBQWMzbUUsRUFBRytHLEVBQUVrbkMsSUFBTWxuQyxFQUFFd2tDLEdBQUdxb0MsR0FBRzV6RSxJQWMzRSxTQUFTcXhFLEdBQUdoc0UsRUFBRzBCLEVBQUd6USxHQUNsQixPQUFPLEVBQUVOLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHN0gsRUFBR291QixFQUFHamhCLEVBQUd4QixFQUFHMEgsRUFDbkIsT0FBTyxFQUFFeFYsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUVILE9BQVFwRyxFQUFJLEdBQUVxRixJQUFJa21DLEdBQUdrb0MsR0FBRzFzRSxFQUFHLFdBQVl6USxHQUFJNkIsRUFBSTZILEVBQUVpMEUsR0FBR240RSxJQUFJaUwsSUFBS3dmLEVBQUlwdUIsR0FBS0EsRUFBRWlKLE1BQVFrRSxHQUFLQSxFQUFJLElBQUlpMkQsR0FBRyxHQUFFaGpDLElBQUlpaUMsR0FBR2owQyxFQUFHLElBQUk5dUIsR0FBRzh1QixFQUFHc0YsR0FBRW5lLFFBQ3hINUosRUFBSXE0RCxLQUFLbjlDLElBQUl1SCxHQUFJL2EsRUFBSSxJQUFJcXhELEdBQUdoeEMsR0FBRW5lLE1BQ1QsSUFBSWlCLElBQ0QsSUFBSXF1RCxHQUFHLElBQUkxM0QsRUFBR3hCLEdBQUksQ0FBRSxFQUFjeXRFLEdBQUd2eEUsRUFBR3dMLEtBQVEsQ0FBRSxFQUFjLEdBRTFGLEtBQUssRUFDSCxPQUFPblQsRUFBRWdPLE9BTVRyRyxFQUFFMnVDLEdBQUszdUMsRUFBRTJ1QyxHQUFHNXNDLE9BQU93a0IsR0FBSXZtQixFQUFFaTBFLEdBQUdqa0UsT0FBT2pKLEdBQUl1ckUsR0FBR3R5RSxHQUFJLENBQUUsRUFBYyxHQUVoRSxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMyeEQsR0FBRzN4RCxFQUFFMHpCLEdBQUkzc0IsR0FDRixHQUFJM0wsTUFBSyxXQUNuQyxPQUFPaTNFLEdBQUdyeUUsRUFBRytHLEVBQUd6USxNQUNoQndSLE1BQU1zaUUsS0FFWixLQUFLLEVBQ0gveEUsRUFBRWdPLE9BQVFoTyxFQUFFK04sTUFBUSxFQUV0QixLQUFLLEVBQ0gsTUFBTyxDQUFFLFVBTXpCLFNBQVNtc0UsR0FBR2x0RSxFQUFHMEIsR0FDWCxPQUFPLEVBQUUvUSxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRzFKLEVBQUc2QixFQUNWLE9BQU8sRUFBRW5DLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSHBHLEVBQUksR0FBRXFGLEdBQUkvTyxFQUFJeVEsRUFBRW1pRSxNQUFNSixRQUFTendFLEVBQUUrTixNQUFRLEVBRTNDLEtBQUssRUFDSCxPQUFPL04sRUFBRWlPLEtBQUs3USxLQUFLLENBQUUsRUFBRyxFQUFHLENBQUUsSUFBTSxDQUFFLEVBQWNnOEQsR0FBR3p4RCxFQUFFMHpCLEdBQUkzc0IsSUFFOUQsS0FBSyxFQUNILE9BQU81TyxFQUFJRSxFQUFFZ08sT0FLYnVzRSxHQUFHNXlFLEVBQUcxSixFQUFjLE1BQU84N0UsR0FBR3B5RSxFQUFHMUosR0FBSTBKLEVBQUV1ckMsR0FBRzJuQyxHQUFHNThFLEVBQUcsZ0JBQWlCLENBQUUsRUFBY3c4RSxHQUFHOXlFLEVBQUc3SCxJQUV6RixLQUFLLEVBS0gsT0FBT0UsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjLEdBRW5DLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBYytqRSxHQUFHL3hFLEVBQUVnTyxTQUU5QixLQUFLLEVBQ0gsT0FBT2hPLEVBQUVnTyxPQUFRLENBQUUsRUFBYyxHQUVuQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLFVBTXpCLFNBQVNtc0UsR0FBR250RSxFQUFHMEIsRUFBR3pRLEdBQ2QsT0FBTyxFQUFFTixVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRzdILEVBQ1AsT0FBTyxFQUFFbkMsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNIcEcsRUFBSSxHQUFFcUYsR0FBSWhOLEVBQUUrTixNQUFRLEVBRXRCLEtBQUssRUFDSCxPQUFPL04sRUFBRWlPLEtBQUs3USxLQUFLLENBQUUsRUFBRyxFQUFHLENBQUUsSUFBTSxDQUFFLEVBQWMsU0FBUzRQLEVBQUdyRixHQUMzRCxJQUFJM0gsRUFBSSxHQUFFZ04sR0FDVixPQUFPaE4sRUFBRW0zRSxZQUFZcE0sZUFBZSxlQUFnQixxQkFBcUIsU0FBVS85RCxHQUMvRSxJQUFJMEIsRUFDSixPQUFPMU8sRUFBRXE3QyxHQUFHdzJCLEdBQUc3a0UsRUFBR3JGLEdBQUdsSSxNQUFLLFNBQVVrSSxHQUNoQyxPQUFPLEdBQUUsT0FBU0EsR0FBSStHLEVBQUkvRyxFQUFFbUIsT0FBUTlJLEVBQUVxN0MsR0FBR3kyQixHQUFHOWtFLEVBQUdyRixNQUMvQ2xJLE1BQUssV0FDTCxPQUFPTyxFQUFFcTdDLEdBQUcyZSxHQUFHaHRELE1BQ2Z2TixNQUFLLFdBQ0wsT0FBT08sRUFBRXV4QixHQUFHK29CLEdBQUd0dEMsRUFBRzBCLFNBVHFCLENBWWpEL0csRUFBRTB6QixHQUFJM3NCLElBRVYsS0FBSyxFQUNILE9BQU81TyxFQUFJRSxFQUFFZ08sT0FLYnVzRSxHQUFHNXlFLEVBQUcrRyxFQUFHelEsR0FBSTg3RSxHQUFHcHlFLEVBQUcrRyxHQUFJL0csRUFBRXVyQyxHQUFHMm5DLEdBQUduc0UsRUFBRyxXQUFZelEsR0FBSSxDQUFFLEVBQWN3OEUsR0FBRzl5RSxFQUFHN0gsSUFFMUUsS0FBSyxFQUtILE9BQU9FLEVBQUVnTyxPQUFRLENBQUUsRUFBYyxHQUVuQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMrakUsR0FBRy94RSxFQUFFZ08sU0FFOUIsS0FBSyxFQUNILE9BQU9oTyxFQUFFZ08sT0FBUSxDQUFFLEVBQWMsR0FFbkMsS0FBSyxFQUNILE1BQU8sQ0FBRSxVQVNyQixTQUFTcXJFLEdBQUdyc0UsRUFBRzBCLEdBQ2YsT0FBTyxFQUFFL1EsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUcxSixFQUFHNkIsRUFBR291QixFQUFHamhCLEVBQ2hCLE9BQU8sRUFBRXRQLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSHlvRSxJQUFJN3VFLEVBQUksR0FBRXFGLElBQUlvcEMsS0FBTyxHQUFFLGFBQWMsd0hBQ3JDcDJDLEVBQUUrTixNQUFRLEVBRVosS0FBSyxFQUNILE9BQU8vTixFQUFFaU8sS0FBSzdRLEtBQUssQ0FBRSxFQUFHLEVBQUcsQ0FBRSxJQUFNLENBQUUsRUFBYyxTQUFTNFAsR0FDeEQsSUFBSXJGLEVBQUksR0FBRXFGLEdBQ1YsT0FBT3JGLEVBQUV3dkUsWUFBWXBNLGVBQWUsc0NBQXVDLFlBQVksU0FBVS85RCxHQUM3RixPQUFPckYsRUFBRTB6QyxHQUFHazJCLEdBQUd2a0UsTUFINEIsQ0FLakRyRixFQUFFMHpCLEtBRU4sS0FBSyxFQUNILE9BQVEsS0FBT3A5QixFQUFJK0IsRUFBRWdPLFFBQVUsQ0FBRSxPQUFvQlUsRUFBRXZNLGFBQWdCckMsRUFBSTZILEVBQUVzdEMsR0FBR3h4QyxJQUFJeEYsSUFBTSxJQUFJYixLQUFLc1IsR0FDbkcvRyxFQUFFc3RDLEdBQUd2eEMsSUFBSXpGLEVBQUc2QixHQUFJLENBQUUsRUFBYyxJQUVsQyxLQUFLLEVBQ0gsT0FBT291QixFQUFJbHVCLEVBQUVnTyxPQUFRZixFQUFJZ2hFLEdBQUcvL0MsRUFBRyw2REFDL0J4ZixFQUFFdE0sT0FBTzZLLEdBQUksQ0FBRSxFQUFjLEdBRS9CLEtBQUssRUFDSCxNQUFPLENBQUUsVUFTckIsU0FBUzhzRSxHQUFHL3NFLEVBQUdyRixJQUNkcUYsRUFBRWlvQyxHQUFHeHhDLElBQUlrRSxJQUFNLElBQUlyRSxTQUFRLFNBQVUwSixHQUNsQ0EsRUFBRTdLLGFBQ0Q2SyxFQUFFaW9DLEdBQUd0OUIsT0FBT2hRLEdBSXJCLFNBQVM0eUUsR0FBR3Z0RSxFQUFHckYsRUFBRzNILEdBQ2QsSUFBSTBPLEVBQUksR0FBRTFCLEdBQUkvTyxFQUFJeVEsRUFBRXVrQyxHQUFHdmtDLEVBQUV1b0QsWUFBWTZZLE1BR3JDLEdBQUk3eEUsRUFBRyxDQUNILElBQUk2QixFQUFJN0IsRUFBRXdGLElBQUlrRSxHQUNkN0gsSUFBTUUsRUFBSUYsRUFBRXNDLE9BQU9wQyxHQUFLRixFQUFFcUMsVUFBV2xFLEVBQUlBLEVBQUV5TCxPQUFPL0IsSUFBSytHLEVBQUV1a0MsR0FBR3ZrQyxFQUFFdW9ELFlBQVk2WSxNQUFRN3hFLEdBSTFGLFNBQVMrN0UsR0FBR2h0RSxFQUFHckYsRUFBRzNILFFBQ2QsSUFBV0EsSUFBTUEsRUFBSSxNQUFPZ04sRUFBRWttQyxHQUFHK25DLEdBQUd0ekUsR0FDcEMsSUFBSyxJQUFJK0csRUFBSSxFQUFHelEsRUFBSStPLEVBQUUya0MsR0FBR2x1QyxJQUFJa0UsR0FBSStHLEVBQUl6USxFQUFFSyxPQUFRb1EsSUFBSyxDQUNoRCxJQUFJNU8sRUFBSTdCLEVBQUV5USxHQUNWMUIsRUFBRTJuQyxHQUFHaDlCLE9BQU83WCxHQUFJRSxHQUFLZ04sRUFBRTZvQyxHQUFHZ0IsR0FBRy8yQyxFQUFHRSxHQUVwQ2dOLEVBQUUya0MsR0FBR2g2QixPQUFPaFEsR0FBSXFGLEVBQUU0b0MsSUFBTTVvQyxFQUFFNHBDLEdBQUdraUMsR0FBR254RSxHQUFHckUsU0FBUSxTQUFVcUUsR0FDakRxRixFQUFFNHBDLEdBQUd5akIsR0FBRzF5RCxJQUVSMHlFLEdBQUdydEUsRUFBR3JGLE1BSWQsU0FBUzB5RSxHQUFHcnRFLEVBQUdyRixHQUdYLElBQUkzSCxFQUFJZ04sRUFBRXNwQyxHQUFHN3lDLElBQUlrRSxHQUNqQixPQUFTM0gsSUFBTWkyRSxHQUFHanBFLEVBQUVvcEMsR0FBSXAyQyxHQUFJZ04sRUFBRXNwQyxHQUFLdHBDLEVBQUVzcEMsR0FBRzVzQyxPQUFPL0IsR0FBSXFGLEVBQUU0dUUsR0FBR2prRSxPQUFPM1gsR0FBSWk2RSxHQUFHanRFLElBRzFFLFNBQVN1c0UsR0FBR3ZzRSxFQUFHckYsRUFBRzNILEdBQ2QsSUFBSyxJQUFJME8sRUFBSSxFQUFHelEsRUFBSStCLEVBQUcwTyxFQUFJelEsRUFBRUssT0FBUW9RLElBQUssQ0FDdEMsSUFBSTVPLEVBQUk3QixFQUFFeVEsR0FDVjVPLGFBQWE2NEUsSUFBTTNyRSxFQUFFNHBDLEdBQUdnZ0MsR0FBRzkyRSxFQUFFaUosSUFBS3BCLEdBQUk4eEUsR0FBR3pzRSxFQUFHbE4sSUFBTUEsYUFBYTY1RSxJQUFNLEdBQUUsYUFBYyxnQ0FBa0M3NUUsRUFBRWlKLEtBQ3pIaUUsRUFBRTRwQyxHQUFHaWdDLEdBQUcvMkUsRUFBRWlKLElBQUtwQixHQUFJcUYsRUFBRTRwQyxHQUFHeWpCLEdBQUd2NkQsRUFBRWlKLE1BRTdCc3hFLEdBQUdydEUsRUFBR2xOLEVBQUVpSixNQUFRLE1BSXhCLFNBQVMwd0UsR0FBR3pzRSxFQUFHckYsR0FDWCxJQUFJM0gsRUFBSTJILEVBQUVvQixJQUNWaUUsRUFBRXNwQyxHQUFHN3lDLElBQUl6RCxLQUFPLEdBQUUsYUFBYywwQkFBNEJBLEdBQUlnTixFQUFFMHBDLEdBQUd0NUMsS0FBSzRDLEdBQUlpNkUsR0FBR2p0RSxJQVVqRixTQUFTaXRFLEdBQUdqdEUsR0FDWixLQUFNQSxFQUFFMHBDLEdBQUdwNEMsT0FBUyxHQUFLME8sRUFBRXNwQyxHQUFHdnpCLEtBQU8vVixFQUFFa3FDLElBQU0sQ0FDekMsSUFBSXZ2QyxFQUFJcUYsRUFBRTBwQyxHQUFHM2dCLFFBQVMvMUIsRUFBSWdOLEVBQUV5bkMsR0FBR2gxQyxPQUMvQnVOLEVBQUU0dUUsR0FBR2w0RSxJQUFJMUQsRUFBRyxJQUFJMDVFLEdBQUcveEUsSUFBS3FGLEVBQUVzcEMsR0FBS3RwQyxFQUFFc3BDLEdBQUc2ckIsR0FBR3g2RCxFQUFHM0gsR0FBSXUyRSxHQUFHdnBFLEVBQUVvcEMsR0FBSSxJQUFJc3NCLEdBQUcvTCxHQUFHRCxHQUFHL3VELEVBQUUwMEMsT0FBUXI4QyxFQUFHLEVBQTBCdXhFLEdBQUd2UCxNQUl0SCxTQUFTeVksR0FBR3p0RSxFQUFHMEIsRUFBR3pRLEdBQ2QsT0FBTyxFQUFFTixVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJbUMsRUFBR291QixFQUFHamhCLEVBQUd4QixFQUNiLE9BQU8sRUFBRTlOLE1BQU0sU0FBVXdWLEdBQ3JCLE9BQVFBLEVBQUVwRixPQUNSLEtBQUssRUFDSCxPQUFPak8sRUFBSSxHQUFFa04sR0FBSWtoQixFQUFJLEdBQUlqaEIsRUFBSSxHQUFJeEIsRUFBSSxHQUFJM0wsRUFBRTYwQyxHQUFHc1IsSUFBTSxDQUFFLEVBQWMsSUFBT25tRCxFQUFFNjBDLEdBQUdyeEMsU0FBUSxTQUFVMEosRUFBR3JGLEdBQ2pHOEQsRUFBRXJPLEtBQUswQyxFQUFFZzNDLEdBQUdudkMsRUFBRytHLEVBQUd6USxHQUFHOEUsTUFBSyxTQUFVaUssR0FDaEMsR0FBSUEsRUFBRyxDQUNIbE4sRUFBRTgxQyxJQUFNOTFDLEVBQUVvekMsR0FBR2tvQyxHQUFHenpFLEVBQUVnN0QsU0FBVTMxRCxFQUFFNjRELFVBQVksY0FBZ0IsV0FBWTMzQyxFQUFFOXdCLEtBQUs0UCxHQUM3RSxJQUFJaE4sRUFBSXN4RSxHQUFHaHlCLEdBQUczM0MsRUFBRWc3RCxTQUFVMzFELEdBQzFCQyxFQUFFN1AsS0FBSzRDLFdBR2QsQ0FBRSxFQUFja0MsUUFBUTJJLElBQUlZLEtBRW5DLEtBQUssRUFDSCxPQUFPMEgsRUFBRW5GLE9BQVFsTyxFQUFFKzFDLEdBQUduYSxHQUFHeE4sR0FBSSxDQUFFLEVBQWMsU0FBU2xoQixFQUFHMEIsR0FDckQsT0FBTyxFQUFFL1EsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUcxSixFQUFHNkIsRUFBR291QixFQUFHamhCLEVBQUd4QixFQUFHMEgsRUFBRzhhLEVBQUdyZ0IsRUFDNUIsT0FBTyxFQUFFalEsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNIcEcsRUFBSSxHQUFFcUYsR0FBSWhOLEVBQUUrTixNQUFRLEVBRXRCLEtBQUssRUFDSCxPQUFPL04sRUFBRWlPLEtBQUs3USxLQUFLLENBQUUsRUFBRyxFQUFHLENBQUUsSUFBTSxDQUFFLEVBQWN1SyxFQUFFd3ZFLFlBQVlwTSxlQUFlLHlCQUEwQixhQUFhLFNBQVUvOUQsR0FDN0gsT0FBT3c5RCxHQUFHbG5FLFFBQVFvTCxHQUFHLFNBQVUxTyxHQUMzQixPQUFPd3FFLEdBQUdsbkUsUUFBUXRELEVBQUUrNUMsSUFBSSxTQUFVcnJDLEdBQzlCLE9BQU8vRyxFQUFFd3ZFLFlBQVl2RyxHQUFHZ0csR0FBRzVwRSxFQUFHaE4sRUFBRTJpRSxTQUFVajBELE1BQzFDalAsTUFBSyxXQUNMLE9BQU8rcUUsR0FBR2xuRSxRQUFRdEQsRUFBRWs2QyxJQUFJLFNBQVV4ckMsR0FDOUIsT0FBTy9HLEVBQUV3dkUsWUFBWXZHLEdBQUdpRyxHQUFHN3BFLEVBQUdoTixFQUFFMmlFLFNBQVVqMEQsZ0JBTTVELEtBQUssRUFDSCxPQUFPMU8sRUFBRWdPLE9BQVEsQ0FBRSxFQUFjLEdBRW5DLEtBQUssRUFDSCxJQUFLazlELEdBQUdqdEUsRUFBSStCLEVBQUVnTyxRQUFTLE1BQU0vUCxFQUtHLE9BQU8sR0FBRSxhQUFjLHNDQUF3Q0EsR0FDL0YsQ0FBRSxFQUFjLEdBRWxCLEtBQUssRUFDSCxJQUFLNkIsRUFBSSxFQUFHb3VCLEVBQUl4ZixFQUFHNU8sRUFBSW91QixFQUFFNXZCLE9BQVF3QixJQUFLbU4sRUFBSWloQixFQUFFcHVCLEdBQUkyTCxFQUFJd0IsRUFBRTAxRCxTQUFVMTFELEVBQUU0NEQsWUFBYzF5RCxFQUFJeEwsRUFBRXFxQixHQUFHdnVCLElBQUlnSSxHQUM3RndpQixFQUFJOWEsRUFBRTR1RCxHQUFJbjBELEVBQUl1RixFQUFFcXZELEdBQUd2MEMsR0FFbkJ0bUIsRUFBRXFxQixHQUFLcnFCLEVBQUVxcUIsR0FBR213QyxHQUFHMTJELEVBQUdtQyxJQUNsQixNQUFPLENBQUUsVUF0Q29CLENBMEMzQzlOLEVBQUV1N0IsR0FBSXB1QixJQUVWLEtBQUssRUFDSGtHLEVBQUVuRixPQUFRbUYsRUFBRXBGLE1BQVEsRUFFdEIsS0FBSyxFQUNILE1BQU8sQ0FBRSxVQU16QixTQUFTdXJFLEdBQUd0c0UsRUFBRzBCLEdBQ1gsT0FBTyxFQUFFL1EsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUcxSixFQUNQLE9BQU8sRUFBRU4sTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQVFwRyxFQUFJLEdBQUVxRixJQUFJaXFELFlBQVlxSSxRQUFRNXdELEdBQUssQ0FBRSxFQUFjLElBQU8sR0FBRSxhQUFjLHlCQUEwQkEsRUFBRW9oRSxNQUM5RyxDQUFFLEVBQWN2VyxHQUFHNXhELEVBQUUwekIsR0FBSTNzQixLQUUzQixLQUFLLEVBQ0gsT0FBT3pRLEVBQUkrQixFQUFFZ08sT0FBUXJHLEVBQUVzdkQsWUFBY3ZvRCxFQUVyQyxTQUFTMUIsRUFBR3JGLEdBQ1JxRixFQUFFaW9DLEdBQUczeEMsU0FBUSxTQUFVMEosR0FDbkJBLEVBQUUxSixTQUFRLFNBQVUwSixHQUNoQkEsRUFBRTVLLE9BQU8sSUFBSTRNLEdBQUUsR0FBRXl3RCxVQUFXLDJFQUUvQnp5RCxFQUFFaW9DLEdBQUd4VSxRQUxkLENBTUU5NEIsR0FFRkEsRUFBRXVyQyxHQUFHb29DLEdBQUc1c0UsRUFBR3pRLEVBQUV5ekIsR0FBSXp6QixFQUFFeXlCLElBQUssQ0FBRSxFQUFjK3BELEdBQUc5eUUsRUFBRzFKLEVBQUV1ekIsS0FFbEQsS0FBSyxFQUNIeHhCLEVBQUVnTyxPQUFRaE8sRUFBRStOLE1BQVEsRUFFdEIsS0FBSyxFQUNILE1BQU8sQ0FBRSxVQU16QixTQUFTdXNFLEdBQUd0dEUsRUFBR3JGLEdBQ1gsSUFBSTNILEVBQUksR0FBRWdOLEdBQUkwQixFQUFJMU8sRUFBRTQ3RSxHQUFHbjRFLElBQUlrRSxHQUMzQixHQUFJK0csR0FBS0EsRUFBRW9tQyxHQUFJLE9BQU9ndkIsS0FBS245QyxJQUFJalksRUFBRTNGLEtBQ2pDLElBQUk5SyxFQUFJNmxFLEtBQU1oa0UsRUFBSUUsRUFBRTJ4QyxHQUFHbHVDLElBQUlrRSxHQUMzQixJQUFLN0gsRUFBRyxPQUFPN0IsRUFDZixJQUFLLElBQUlpd0IsRUFBSSxFQUFHamhCLEVBQUluTixFQUFHb3VCLEVBQUlqaEIsRUFBRTNPLE9BQVE0dkIsSUFBSyxDQUN0QyxJQUFJemlCLEVBQUl3QixFQUFFaWhCLEdBQUkvYSxFQUFJblQsRUFBRTIwQyxHQUFHbHhDLElBQUlnSSxHQUMzQnhOLEVBQUlBLEVBQUVnbkUsR0FBRzl4RCxFQUFFd29FLEtBQUt0bEMsSUFFcEIsT0FBT3A0QyxFQU1QLFNBQVMyOEUsR0FBRzV0RSxFQUFHMEIsR0FDZixPQUFPLEVBQUUvUSxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBRzFKLEVBQUc2QixFQUNWLE9BQU8sRUFBRW5DLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBY2dzRCxJQUFJcHlELEVBQUksR0FBRXFGLElBQUlxdUIsR0FBSTNzQixFQUFFdkksT0FDakIsSUFFNUIsS0FBSyxFQUNILE9BQU9sSSxFQUFJK0IsRUFBRWdPLE9BQVFsTyxFQUFJNE8sRUFBRWl0RSxLQUFLeGxDLEdBQUdsNEMsR0FBSSxDQUFFLEdBQWdCMEosRUFBRWl1QyxJQUFNMmpDLEdBQUc1eEUsRUFBRytHLEVBQUVpMEQsU0FBVTdpRSxFQUFFdzBDLElBQ3JGeDBDLFdBV2hCLFNBQVM2NkUsR0FBRzN0RSxHQUNSLE9BQU8sRUFBRXJQLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUNKLE9BQU8sRUFBRWhLLE1BQU0sU0FBVXFDLEdBQ3JCLE1BQU8sQ0FBRSxFQUFlZzVELElBQUlyeEQsRUFBSSxHQUFFcUYsSUFBSXF1QixJQUFJdDRCLE1BQUssU0FBVWlLLEdBQ3JELE9BQU95dEUsR0FBRzl5RSxFQUFHcUYsYUFRN0IsU0FBU290RSxHQUFHcHRFLEVBQUcwQixFQUFHelEsRUFBRzZCLEdBQ2pCLE9BQU8sRUFBRW5DLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHdW1CLEVBQ1AsT0FBTyxFQUFFdndCLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBYyxTQUFTZixFQUFHckYsR0FDL0IsSUFBSTNILEVBQUksR0FBRWdOLEdBQUkwQixFQUFJLEdBQUUxTyxFQUFFcTdDLElBQ3RCLE9BQU9yN0MsRUFBRW0zRSxZQUFZcE0sZUFBZSw0QkFBNkIsWUFBWSxTQUFVLzlELEdBQ25GLE9BQU8wQixFQUFFMmlFLEdBQUdya0UsRUFBR3JGLEdBQUdsSSxNQUFLLFNBQVVrSSxHQUM3QixPQUFPQSxFQUFJM0gsRUFBRXV4QixHQUFHK29CLEdBQUd0dEMsRUFBR3JGLEdBQUs2aUUsR0FBR3JvRSxRQUFRLFlBSjNCLEVBT3BCd0YsRUFBSSxHQUFFcUYsSUFBSXF1QixHQUFJM3NCLElBRW5CLEtBQUssRUFDSCxPQUFPLFFBQVV3ZixFQUFJbHVCLEVBQUVnTyxRQUFVLENBQUUsRUFBYyxHQUFNLFlBQWMvUCxFQUFJLENBQUUsRUFBYyxHQUFNLENBQUUsRUFBYys4RCxHQUFHcnpELEVBQUV5dUMsS0FFdEgsS0FBSyxFQUlILE9BQU9wMkMsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjLEdBRW5DLEtBQUssRUFDSCxpQkFBbUIvUCxHQUFLLGFBQWVBLEdBR3ZDczhFLEdBQUc1eUUsRUFBRytHLEVBQUc1TyxHQUFLLE1BQU9pNkUsR0FBR3B5RSxFQUFHK0csR0FBSSxTQUFTMUIsRUFBR3JGLEdBQ3ZDLEdBQUUsR0FBRXFGLEdBQUdxdUMsSUFBSWczQixHQUFHMXFFLEdBRGEsQ0FFN0JBLEVBQUUwekIsR0FBSTNzQixJQUFNLEtBQUsxTyxFQUFFK04sTUFBUSxFQUUvQixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMwc0UsR0FBRzl5RSxFQUFHdW1CLElBRS9CLEtBQUssRUFDSCxPQUFPbHVCLEVBQUVnTyxPQUFRLENBQUUsRUFBYyxHQUVuQyxLQUFLLEVBUUgsR0FBRSxhQUFjLHdDQUEwQ1UsR0FBSTFPLEVBQUUrTixNQUFRLEVBRTFFLEtBQUssRUFDSCxNQUFPLENBQUUsVUFRekIsU0FBU2l0RSxHQUFHaHVFLEVBQUcwQixHQUNYLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFBRzZCLEVBQUdvdUIsRUFBR2poQixFQUFHeEIsRUFBRzBILEVBQUc4YSxFQUN6QixPQUFPLEVBQUV0d0IsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9ndEUsR0FBR3B6RSxFQUFJLEdBQUVxRixJQUFLcXVFLEdBQUcxekUsSUFBSSxJQUFPK0csSUFBSyxJQUFPL0csRUFBRXV0QyxHQUFLLENBQUUsRUFBYyxJQUFPajNDLEVBQUkwSixFQUFFdXJDLEdBQUdzbkMsS0FDdEYsQ0FBRSxFQUFjRSxHQUFHL3lFLEVBQUcxSixFQUFFeTBDLE9BRTFCLEtBQUssRUFDSCxPQUFPNXlDLEVBQUlFLEVBQUVnTyxPQUFRckcsRUFBRXV0QyxJQUFLLEVBQUksQ0FBRSxFQUFjOGhDLEdBQUdydkUsRUFBRXl1QyxJQUFJLElBRTNELEtBQUssRUFDSCxJQUFLcDJDLEVBQUVnTyxPQUFRa2dCLEVBQUksRUFBR2poQixFQUFJbk4sRUFBR291QixFQUFJamhCLEVBQUUzTyxPQUFRNHZCLElBQUt6aUIsRUFBSXdCLEVBQUVpaEIsR0FBSXFvRCxHQUFHNXVFLEVBQUV5dUMsR0FBSTNxQyxHQUNuRSxNQUFPLENBQUUsRUFBYyxHQUV6QixLQUFLLEVBQ0gsT0FBTyxJQUFPaUQsSUFBSyxJQUFPL0csRUFBRXV0QyxHQUFLLENBQUUsRUFBYyxJQUFPL2hDLEVBQUksR0FBSThhLEVBQUkvckIsUUFBUUMsVUFDNUV3RixFQUFFZ3FDLEdBQUdydUMsU0FBUSxTQUFVMEosRUFBR2hOLEdBQ3RCMkgsRUFBRXVyQyxHQUFHZ29DLEdBQUdsN0UsR0FBS21ULEVBQUUvVixLQUFLNEMsR0FBS2l1QixFQUFJQSxFQUFFbHJCLE1BQUssV0FDaEMsT0FBT2kzRSxHQUFHcnlFLEVBQUczSCxHQUFJczVELEdBQUczeEQsRUFBRTB6QixHQUFJcjdCLEdBQ0csTUFDNUJpMkUsR0FBR3R1RSxFQUFFeXVDLEdBQUlwMkMsTUFDYixDQUFFLEVBQWNpdUIsSUFFdkIsS0FBSyxFQUNILE9BQU9qdUIsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjMHNFLEdBQUcveUUsRUFBR3dMLElBRXpDLEtBQUssRUFDSCxPQUFPblQsRUFBRWdPLE9BRVQsU0FBU2hCLEdBQ0wsSUFBSXJGLEVBQUksR0FBRXFGLEdBQ1ZyRixFQUFFaTBFLEdBQUd0NEUsU0FBUSxTQUFVMEosRUFBR2hOLEdBQ3RCaTJFLEdBQUd0dUUsRUFBRXl1QyxHQUFJcDJDLE1BQ1IySCxFQUFFaXZDLEdBQUdtaUMsS0FBTXB4RSxFQUFFaTBFLEdBQUssSUFBSXRsRSxJQUFLM08sRUFBRTJ1QyxHQUFLLElBQUk0c0IsR0FBRyxHQUFFaGpDLEdBSnBELENBS0V2NEIsR0FBSUEsRUFBRXV0QyxJQUFLLEVBQUksQ0FBRSxFQUFjOGhDLEdBQUdydkUsRUFBRXl1QyxJQUFJLElBRTVDLEtBQUssRUFDSHAyQyxFQUFFZ08sT0FBUWhPLEVBQUUrTixNQUFRLEVBRXRCLEtBQUssRUFDSCxNQUFPLENBQUUsVUFNekIsU0FBUzJzRSxHQUFHMXRFLEVBQUcwQixFQUFHelEsR0FDZCxPQUFPLEVBQUVOLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFBRzZCLEVBQUdvdUIsRUFBR2poQixFQUFHeEIsRUFBRzBILEVBQUc4YSxFQUFHcmdCLEVBQUd1Z0IsRUFBR3RyQixFQUFHMkksRUFBRzRDLEVBQUdQLEVBQzNDLE9BQU8sRUFBRWxRLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSHBHLEVBQUksR0FBRXFGLEdBQUkvTyxFQUFJLEdBQUk2QixFQUFJLEdBQUlvdUIsRUFBSSxFQUFHamhCLEVBQUl5QixFQUFHMU8sRUFBRStOLE1BQVEsRUFFcEQsS0FBSyxFQUNILE9BQU9tZ0IsRUFBSWpoQixFQUFFM08sUUFBVW1OLEVBQUl3QixFQUFFaWhCLEdBQUkvYSxPQUFJLEdBQVM4YSxFQUFJdG1CLEVBQUVncUMsR0FBR2x1QyxJQUFJZ0ksS0FBTyxJQUFNd2lCLEVBQUUzdkIsT0FBUyxDQUFFLEVBQWN1OEQsR0FBR2x6RCxFQUFFMHpCLEdBQUlzN0IsR0FBRzFvQyxFQUFFLE1BQVMsQ0FBRSxFQUFjLElBQU8sQ0FBRSxFQUFjLElBRW5LLEtBQUssRUFLSDlhLEVBQUluVCxFQUFFZ08sT0FBUUosRUFBSSxFQUFHdWdCLEVBQUlGLEVBQUdqdUIsRUFBRStOLE1BQVEsRUFFeEMsS0FBSyxFQUNILE9BQU9ILEVBQUl1Z0IsRUFBRTd2QixRQUFVdUUsRUFBSXNyQixFQUFFdmdCLEdBQUlwQyxFQUFJN0QsRUFBRWd0QyxHQUFHbHhDLElBQUlaLEdBQUksQ0FBRSxFQUFjKzNFLEdBQUdqekUsRUFBRzZELEtBQVEsQ0FBRSxFQUFjLEdBRWxHLEtBQUssR0FDRjRDLEVBQUlwTyxFQUFFZ08sUUFBUTB0RSxVQUFZNTdFLEVBQUUxQyxLQUFLZ1IsRUFBRXN0RSxVQUFXMTdFLEVBQUUrTixNQUFRLEVBRTNELEtBQUssRUFDSCxPQUFPSCxJQUFLLENBQUUsRUFBYyxHQUU5QixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMsSUFFekIsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjOHNELEdBQUcveUQsRUFBRTB6QixHQUFJNXZCLElBRWxDLEtBQUssRUFDSCxPQUFPb0MsRUFBSTdOLEVBQUVnTyxPQUFRLENBQUUsRUFBYzZzRCxHQUFHbHpELEVBQUUwekIsR0FBSXh0QixJQUVoRCxLQUFLLEVBQ0gsT0FBT3NGLEVBQUluVCxFQUFFZ08sT0FBUSxDQUFFLEVBQWMrcUUsR0FBR3B4RSxFQUFHdXpFLEdBQUdydEUsR0FBSXBDLEdBQ3JDLElBRWYsS0FBSyxHQUNIekwsRUFBRWdPLE9BQVFoTyxFQUFFK04sTUFBUSxHQUV0QixLQUFLLEdBQ0g5UCxFQUFFYixLQUFLK1YsR0FBSW5ULEVBQUUrTixNQUFRLEdBRXZCLEtBQUssR0FDSCxPQUFPbWdCLElBQUssQ0FBRSxFQUFjLEdBRTlCLEtBQUssR0FDSCxNQUFPLENBQUUsR0FBZ0J2bUIsRUFBRWt1QyxHQUFHbmEsR0FBRzU3QixHQUFJN0IsV0FpQnJELFNBQVNpOUUsR0FBR2x1RSxHQUNSLE9BQU9ncUQsR0FBR2hxRCxFQUFFcXZDLEtBQU1ydkMsRUFBRXMwRCxnQkFBaUJ0MEQsRUFBRXUwRCxRQUFTdjBELEVBQUV3MEQsUUFBU3gwRCxFQUFFazBELE1BQU8sSUFBa0JsMEQsRUFBRXkwRCxRQUFTejBELEVBQUUwMEQsT0FLdkcsU0FBU3VaLEdBQUdqdUUsR0FDUixJQUFJckYsRUFBSSxHQUFFcUYsR0FDVixPQUFPLEdBQUUsR0FBRXJGLEVBQUUwekIsSUFBSTg3QyxhQUFhcG1ELEtBS2xDLFNBQVMrcEQsR0FBRzl0RSxFQUFHMEIsRUFBR3pRLEVBQUc2QixHQUNqQixPQUFPLEVBQUVuQyxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJZ0ssRUFBR3VtQixFQUFHamhCLEVBQ1YsT0FBTyxFQUFFdFAsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQVFwRyxFQUFJLEdBQUVxRixJQUFJa29DLElBR2xCLEdBQUUsYUFBYyxpREFBa0QsQ0FBRSxFQUFjLElBQU8sQ0FBRSxFQUFjLEdBRTNHLEtBQUssRUFDSCxJQUFLdnRDLEVBQUVncUMsR0FBR2o3QixJQUFJaEksR0FBSSxNQUFPLENBQUUsRUFBYyxHQUN6QyxPQUFRelEsR0FDTixJQUFLLFVBQ0wsSUFBSyxjQUNILE1BQU8sQ0FBRSxFQUFjLEdBRXpCLElBQUssV0FDSCxNQUFPLENBQUUsRUFBYyxHQUUzQixNQUFPLENBQUUsRUFBYyxHQUV6QixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMrNkQsR0FBR3J4RCxFQUFFMHpCLEtBRTlCLEtBQUssRUFDSCxPQUFPbk4sRUFBSWx1QixFQUFFZ08sT0FBUWYsRUFBSXUzRCxHQUFHNkIsR0FBRzMzRCxFQUFHLFlBQWN6USxHQUFJLENBQUUsRUFBY3c4RSxHQUFHOXlFLEVBQUd1bUIsRUFBR2poQixJQUUvRSxLQUFLLEVBQ0gsT0FBT2pOLEVBQUVnTyxPQUFRLENBQUUsRUFBYyxHQUVuQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWNzckQsR0FBRzN4RCxFQUFFMHpCLEdBQUkzc0IsR0FDRixJQUVoQyxLQUFLLEVBQ0gsT0FBTzFPLEVBQUVnTyxPQUFRZ3NFLEdBQUdyeUUsRUFBRytHLEVBQUc1TyxHQUFJLENBQUUsRUFBYyxHQUVoRCxLQUFLLEVBQ0gsS0FBS0UsRUFBRStOLE1BQVEsRUFFakIsS0FBSyxFQUNILE1BQU8sQ0FBRSxVQU02QyxTQUFTOHNFLEdBQUc3dEUsRUFBRzBCLEVBQUd6USxHQUNwRixPQUFPLEVBQUVOLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHN0gsRUFBR291QixFQUFHamhCLEVBQUd4QixFQUFHMEgsRUFBRzhhLEVBQUdyZ0IsRUFBR3VnQixFQUFHdHJCLEVBQy9CLE9BQU8sRUFBRWxGLE1BQU0sU0FBVTZOLEdBQ3JCLE9BQVFBLEVBQUV1QyxPQUNSLEtBQUssRUFDSCxLQUFNcEcsRUFBSW96RSxHQUFHL3RFLElBQUlrb0MsR0FBSSxNQUFPLENBQUUsRUFBYyxJQUM1Q3AxQyxFQUFJLEVBQUdvdUIsRUFBSXhmLEVBQUdsRCxFQUFFdUMsTUFBUSxFQUUxQixLQUFLLEVBQ0gsT0FBT2pPLEVBQUlvdUIsRUFBRTV2QixRQUFVMk8sRUFBSWloQixFQUFFcHVCLEdBQUk2SCxFQUFFZ3FDLEdBQUdqN0IsSUFBSXpKLElBRTFDLEdBQUUsYUFBYyxtQ0FBcUNBLEdBQUksQ0FBRSxFQUFjLElBQU8sQ0FBRSxFQUFjeXRELEdBQUcveUQsRUFBRTB6QixHQUFJcHVCLEtBQVEsQ0FBRSxFQUFjLEdBRW5JLEtBQUssRUFDSCxPQUFPeEIsRUFBSUQsRUFBRXdDLE9BQVEsQ0FBRSxFQUFjNnNELEdBQUdsekQsRUFBRTB6QixHQUFJNXZCLElBRWhELEtBQUssRUFDSCxPQUFPMEgsRUFBSTNILEVBQUV3QyxPQUFRLENBQUUsRUFBYytxRSxHQUFHcHhFLEVBQUd1ekUsR0FBR3p2RSxHQUFJMEgsRUFBRXd2RCxVQUN2QyxJQUVmLEtBQUssRUFDSG4zRCxFQUFFd0MsT0FBUXVvRSxHQUFHNXVFLEVBQUV5dUMsR0FBSWpqQyxHQUFJM0gsRUFBRXVDLE1BQVEsRUFFbkMsS0FBSyxFQUNILE9BQU9qTyxJQUFLLENBQUUsRUFBYyxHQUU5QixLQUFLLEVBQ0htdUIsRUFBSSxTQUFTamhCLEdBQ1QsT0FBTyxFQUFFclAsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wRyxFQUFFZ3FDLEdBQUdqN0IsSUFBSTFKLEdBQUssQ0FBRSxFQUFjc3NELEdBQUczeEQsRUFBRTB6QixHQUFJcnVCLEdBQ2hCLEdBQUlqSyxNQUFLLFdBQ25Da3pFLEdBQUd0dUUsRUFBRXl1QyxHQUFJcHBDLEdBQUlndEUsR0FBR3J5RSxFQUFHcUYsTUFDbkJ5QyxNQUFNc2lFLEtBQVEsQ0FBRSxFQUFjLEdBR1IsS0FBSyxFQUUvQi94RSxFQUFFZ08sT0FBUWhPLEVBQUUrTixNQUFRLEVBRXRCLEtBQUssRUFDSCxNQUFPLENBQUUsUUFHbEJILEVBQUksRUFBR3VnQixFQUFJbHdCLEVBQUd1TixFQUFFdUMsTUFBUSxFQUU3QixLQUFLLEVBQ0gsT0FBT0gsRUFBSXVnQixFQUFFN3ZCLFFBQVV1RSxFQUFJc3JCLEVBQUV2Z0IsR0FBSSxDQUFFLEVBQWVxZ0IsRUFBRXByQixLQUFRLENBQUUsRUFBYyxJQUU5RSxLQUFLLEVBQ0gySSxFQUFFd0MsT0FBUXhDLEVBQUV1QyxNQUFRLEVBRXRCLEtBQUssRUFDSCxPQUFPSCxJQUFLLENBQUUsRUFBYyxHQUU5QixLQUFLLEdBQ0gsTUFBTyxDQUFFLFVBTXpCLFNBQVNtdEUsR0FBRy90RSxHQUNSLElBQUlyRixFQUFJLEdBQUVxRixHQUNWLE9BQU9yRixFQUFFeXVDLEdBQUc3ZSxHQUFHMmdELEdBQUtnQixHQUFHenVFLEtBQUssS0FBTTlDLEdBQUlBLEVBQUV5dUMsR0FBRzdlLEdBQUd3dUIsR0FBS3UwQixHQUFHN3ZFLEtBQUssS0FBTTlDLEdBQUlBLEVBQUV5dUMsR0FBRzdlLEdBQUcwZ0QsR0FBS2UsR0FBR3Z1RSxLQUFLLEtBQU05QyxHQUNoR0EsRUFBRWt1QyxHQUFHbmEsR0FBS3N6QyxHQUFHdmtFLEtBQUssS0FBTTlDLEVBQUVtdUMsSUFBS251QyxFQUFFa3VDLEdBQUdnQixHQUFLbzRCLEdBQUd4a0UsS0FBSyxLQUFNOUMsRUFBRW11QyxJQUFLbnVDLEVBR2xFLFNBQVMwekUsR0FBR3J1RSxHQUNSLElBQUlyRixFQUFJLEdBQUVxRixHQUNWLE9BQU9yRixFQUFFeXVDLEdBQUc3ZSxHQUFHNGdELEdBQUsrQixHQUFHenZFLEtBQUssS0FBTTlDLEdBQUlBLEVBQUV5dUMsR0FBRzdlLEdBQUc2Z0QsR0FBSytCLEdBQUcxdkUsS0FBSyxLQUFNOUMsR0FBSUEsRUFxQ3JFLElBQUl3ekUsR0FBbUIsV0FDdkIsU0FBU251RSxLQUNULE9BQU9BLEVBQUUvTSxVQUFVK3ZCLEdBQUssU0FBU2hqQixHQUM3QnJQLEtBQUt3NUMsR0FBS25xQyxHQUNYQSxFQUFFL00sVUFBVXM3QyxHQUFLLFNBQVN2dUMsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FDbEMsSUFBSXpRLEVBQUlOLEtBSUEsT0FBTyxTQUFTcVAsR0FDcEIsT0FBTyxJQUFNQSxFQUFFdzBELFFBQVFsakUsUUFBVSxPQUFTME8sRUFBRWswRCxPQUFTLE1BQVFsMEQsRUFBRXkwRCxTQUFXLE1BQVF6MEQsRUFBRTAwRCxRQUFVLElBQU0xMEQsRUFBRThwRCxHQUFHeDRELFFBQVUsSUFBTTBPLEVBQUU4cEQsR0FBR3g0RCxRQUFVME8sRUFBRThwRCxHQUFHLEdBQUc4SyxNQUFNbnpDLEtBRDNJLENBRWI5bUIsSUFBTTNILEVBQUVzL0QsUUFBUTlyQyxHQUFFbmUsT0FBUzFYLEtBQUt5dEQsR0FBR3ArQyxFQUFHckYsR0FBS2hLLEtBQUt3NUMsR0FBR21ELEdBQUd0dEMsRUFBRzBCLEdBQUdqUCxNQUFLLFNBQVVLLEdBQ3pFLElBQUltTixFQUFJaFAsRUFBRTJ0RCxHQUFHamtELEVBQUc3SCxHQUNoQixPQUFRdTFELEdBQUcxdEQsSUFBTTR0RCxHQUFHNXRELEtBQU8xSixFQUFFazJDLEdBQUd4c0MsRUFBRXVpRSxVQUFXajlELEVBQUd5QixFQUFHMU8sR0FBSy9CLEVBQUVtdEQsR0FBR3ArQyxFQUFHckYsSUFBTSxNQUFPLFNBQVcsR0FBRSx1QkFBd0Isd0RBQXlEM0gsRUFBRXRDLFdBQVl1NEQsR0FBR3R1RCxJQUM1TDFKLEVBQUVrNUMsR0FBR29FLEdBQUd2dUMsRUFBR3JGLEVBQUczSCxHQUFHUCxNQUFLLFNBQVV1TixHQUk1QixPQUFPQyxFQUFFM0osU0FBUSxTQUFVcUUsR0FDdkJxRixFQUFJQSxFQUFFbTFELEdBQUd4NkQsRUFBRW9CLElBQUtwQixNQUNmcUYsVUFNdURBLEVBQUUvTSxVQUFVMnJELEdBQUssU0FBUzUrQyxFQUFHckYsR0FHakcsSUFBSTNILEVBQUksSUFBSTJrRSxHQUFHN08sR0FBRzlvRCxJQUNsQixPQUFPckYsRUFBRXJFLFNBQVEsU0FBVXFFLEVBQUcrRyxHQUMxQkEsYUFBYWtrRCxJQUFNb0IsR0FBR2huRCxFQUFHMEIsS0FBTzFPLEVBQUlBLEVBQUUybUIsSUFBSWpZLE9BQ3pDMU8sR0FhVGdOLEVBQUUvTSxVQUFVazBDLEdBQUssU0FBU25uQyxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUcvQixHQUFJMU8sRUFBRStpQixPQUFTcGIsRUFBRW9iLEtBQU0sT0FBTyxFQVN0QixJQUFJOWtCLEVBQUksTUFBb0IrTyxFQUFJckYsRUFBRWs5RCxPQUFTbDlELEVBQUVpOUQsUUFDckQsUUFBUzNtRSxJQUFNQSxFQUFFMHhFLGtCQUFvQjF4RSxFQUFFeUksUUFBUTJuQixFQUFFM2YsR0FBSyxJQUN2RDFCLEVBQUUvTSxVQUFVbXJELEdBQUssU0FBU3ArQyxFQUFHckYsR0FDNUIsT0FBTyxNQUFPLFNBQVcsR0FBRSx1QkFBd0IsK0NBQWdEc3VELEdBQUd0dUQsSUFDdEdoSyxLQUFLdzVDLEdBQUdvRSxHQUFHdnVDLEVBQUdyRixFQUFHNnJCLEdBQUVuZSxRQUNwQnJJLEVBOURvQixHQStEdEJvdUUsR0FBbUIsV0FDcEIsU0FBU3B1RSxFQUFFQSxFQUFHckYsR0FDVmhLLEtBQUtpOEMsR0FBSzVzQyxFQUFHclAsS0FBS2l6RSxHQUFLanBFLEVBS3ZCaEssS0FBSzA5QyxHQUFLLEdBRVYxOUMsS0FBS210RCxHQUFLLEVBRVZudEQsS0FBS3d0RCxHQUFLLElBQUl3WixHQUFHc1QsR0FBR08sSUFFeEIsT0FBT3hyRSxFQUFFL00sVUFBVWl4RSxHQUFLLFNBQVNsa0UsR0FDN0IsT0FBT3c5RCxHQUFHcm9FLFFBQVEsSUFBTXhFLEtBQUswOUMsR0FBRy84QyxTQUNqQzBPLEVBQUUvTSxVQUFVMnhFLEdBQUssU0FBUzVrRSxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUNsQyxJQUFJelEsRUFBSU4sS0FBS210RCxHQUNibnRELEtBQUttdEQsS0FBTW50RCxLQUFLMDlDLEdBQUcvOEMsT0FBUyxHQUFLWCxLQUFLMDlDLEdBQUcxOUMsS0FBSzA5QyxHQUFHLzhDLE9BQVMsR0FDMUQsSUFBSXdCLEVBQUksSUFBSTB3RSxHQUFHdnlFLEVBQUcwSixFQUFHM0gsRUFBRzBPLEdBQ3hCL1EsS0FBSzA5QyxHQUFHaitDLEtBQUswQyxHQUViLElBQUssSUFBSW91QixFQUFJLEVBQUdqaEIsRUFBSXlCLEVBQUd3ZixFQUFJamhCLEVBQUUzTyxPQUFRNHZCLElBQUssQ0FDdEMsSUFBSXppQixFQUFJd0IsRUFBRWloQixHQUNWdndCLEtBQUt3dEQsR0FBS3h0RCxLQUFLd3RELEdBQUd4a0MsSUFBSSxJQUFJc3hELEdBQUd4c0UsRUFBRTFDLElBQUs5SyxJQUFLTixLQUFLaThDLEdBQUc4M0IsR0FBRzFrRSxFQUFHdkIsRUFBRTFDLElBQUlzekMsS0FBS3hQLEtBRXRFLE9BQU8yOUIsR0FBR3JvRSxRQUFRckMsSUFDbkJrTixFQUFFL00sVUFBVTR4RSxHQUFLLFNBQVM3a0UsRUFBR3JGLEdBQzVCLE9BQU82aUUsR0FBR3JvRSxRQUFReEUsS0FBS21SLEdBQUduSCxLQUMzQnFGLEVBQUUvTSxVQUFVd3hFLEdBQUssU0FBU3prRSxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUkySCxFQUFJLEVBQUcrRyxFQUFJL1EsS0FBS3V0RCxHQUFHbHJELEdBQUkvQixFQUFJeVEsRUFBSSxFQUFJLEVBQUlBLEVBR3ZDLE9BQU84N0QsR0FBR3JvRSxRQUFReEUsS0FBSzA5QyxHQUFHLzhDLE9BQVNMLEVBQUlOLEtBQUswOUMsR0FBR3A5QyxHQUFLLE9BQzdEK08sRUFBRS9NLFVBQVVzeEUsR0FBSyxXQUNoQixPQUFPL0csR0FBR3JvRSxRQUFRLElBQU14RSxLQUFLMDlDLEdBQUcvOEMsUUFBVSxFQUFJWCxLQUFLbXRELEdBQUssSUFDekQ5OUMsRUFBRS9NLFVBQVUreEUsR0FBSyxTQUFTaGxFLEdBQ3pCLE9BQU93OUQsR0FBR3JvRSxRQUFReEUsS0FBSzA5QyxHQUFHbDdDLFVBQzNCNk0sRUFBRS9NLFVBQVV1NkMsR0FBSyxTQUFTeHRDLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQU0rUSxFQUFJLElBQUl1cEUsR0FBR3R3RSxFQUFHLEdBQUkxSixFQUFJLElBQUlnNkUsR0FBR3R3RSxFQUFHc1gsT0FBTzZ6RCxtQkFBb0JoekUsRUFBSSxHQUM3RSxPQUFPbkMsS0FBS3d0RCxHQUFHMlosR0FBRyxDQUFFcDJELEVBQUd6USxJQUFLLFNBQVUrTyxHQUNsQyxJQUFJckYsRUFBSTNILEVBQUU4TyxHQUFHOUIsRUFBRWlzRSxJQUNmbjVFLEVBQUUxQyxLQUFLdUssTUFDTjZpRSxHQUFHcm9FLFFBQVFyQyxJQUNqQmtOLEVBQUUvTSxVQUFVMDRDLEdBQUssU0FBUzNyQyxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUFNK1EsRUFBSSxJQUFJaTJELEdBQUcsSUFDekIsT0FBT2g5RCxFQUFFckUsU0FBUSxTQUFVMEosR0FDdkIsSUFBSXJGLEVBQUksSUFBSXN3RSxHQUFHanJFLEVBQUcsR0FBSS9PLEVBQUksSUFBSWc2RSxHQUFHanJFLEVBQUdpUyxPQUFPNnpELG1CQUMzQzl5RSxFQUFFbXJELEdBQUcyWixHQUFHLENBQUVuOUQsRUFBRzFKLElBQUssU0FBVStPLEdBQ3hCMEIsRUFBSUEsRUFBRWlZLElBQUkzWixFQUFFaXNFLFVBRWZ6TyxHQUFHcm9FLFFBQVF4RSxLQUFLb3RELEdBQUdyOEMsS0FDekIxQixFQUFFL00sVUFBVTQ1QyxHQUFLLFNBQVM3c0MsRUFBR3JGLEdBRzVCLElBQUkzSCxFQUFJMkgsRUFBRTAwQyxLQUFNM3RDLEVBQUkxTyxFQUFFMUIsT0FBUyxFQUFHTCxFQUFJK0IsRUFLOUIsR0FBRXE4QixFQUFFcCtCLEtBQU9BLEVBQUlBLEVBQUVnakUsTUFBTSxLQUMvQixJQUFJbmhFLEVBQUksSUFBSW00RSxHQUFHLElBQUksR0FBRWg2RSxHQUFJLEdBQUlpd0IsRUFBSSxJQUFJeTJDLEdBQUcsSUFHaEMsT0FBT2huRSxLQUFLd3RELEdBQUc0WixJQUFHLFNBQVUvM0QsR0FDaEMsSUFBSXJGLEVBQUlxRixFQUFFakUsSUFBSXN6QyxLQUNkLFFBQVNyOEMsRUFBRThuQyxFQUFFbmdDLEtBTWJBLEVBQUVySixTQUFXb1EsSUFBTXdmLEVBQUlBLEVBQUV2SCxJQUFJM1osRUFBRWlzRSxNQUFNLEtBQ3JDbjVFLEdBQUkwcUUsR0FBR3JvRSxRQUFReEUsS0FBS290RCxHQUFHNzhCLEtBQzVCbGhCLEVBQUUvTSxVQUFVOHFELEdBQUssU0FBUy85QyxHQUN6QixJQUFJckYsRUFBSWhLLEtBQU1xQyxFQUFJLEdBR1YsT0FBT2dOLEVBQUUxSixTQUFRLFNBQVUwSixHQUMvQixJQUFJMEIsRUFBSS9HLEVBQUVtSCxHQUFHOUIsR0FDYixPQUFTMEIsR0FBSzFPLEVBQUU1QyxLQUFLc1IsTUFDcEIxTyxHQUNOZ04sRUFBRS9NLFVBQVU2eEUsR0FBSyxTQUFTOWtFLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQ1IsR0FBRSxJQUFNQSxLQUFLMnNELEdBQUczaUQsRUFBRThvRSxRQUFTLFlBQWE5eUUsS0FBSzA5QyxHQUFHdGxCLFFBQ2hELElBQUlybkIsRUFBSS9RLEtBQUt3dEQsR0FDYixPQUFPcWYsR0FBR2xuRSxRQUFRcUUsRUFBRWdwRSxXQUFXLFNBQVUxeUUsR0FDckMsSUFBSTZCLEVBQUksSUFBSW00RSxHQUFHaDZFLEVBQUU4SyxJQUFLcEIsRUFBRThvRSxTQUN4QixPQUFPL2hFLEVBQUlBLEVBQUVpSixPQUFPN1gsR0FBSUUsRUFBRTR3RSxHQUFHelgsR0FBR25zRCxFQUFHL08sRUFBRThLLFFBQ3JDdEosTUFBSyxXQUNMTyxFQUFFbXJELEdBQUt6OEMsTUFFWjFCLEVBQUUvTSxVQUFVb3lFLEdBQUssU0FBU3JsRSxLQUUxQkEsRUFBRS9NLFVBQVVvNkQsR0FBSyxTQUFTcnRELEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSSxJQUFJaTRFLEdBQUd0d0UsRUFBRyxHQUFJK0csRUFBSS9RLEtBQUt3dEQsR0FBRzZaLEdBQUdobEUsR0FDckMsT0FBT3dxRSxHQUFHcm9FLFFBQVF3RixFQUFFMjNELFFBQVE1d0QsR0FBS0EsRUFBRTNGLE9BQ3BDaUUsRUFBRS9NLFVBQVUrNUQsR0FBSyxTQUFTaHRELEdBQ3pCLE9BQU9yUCxLQUFLMDlDLEdBQUcvOEMsT0FBUWtzRSxHQUFHcm9FLFdBVTlCNkssRUFBRS9NLFVBQVVxcUQsR0FBSyxTQUFTdDlDLEVBQUdyRixHQUN6QixPQUFPaEssS0FBS3V0RCxHQUFHbCtDLElBV25CQSxFQUFFL00sVUFBVWlyRCxHQUFLLFNBQVNsK0MsR0FDdEIsT0FBTyxJQUFNclAsS0FBSzA5QyxHQUFHLzhDLE9BQVMsRUFBSTBPLEVBQUlyUCxLQUFLMDlDLEdBQUcsR0FBR28xQixTQVVyRHpqRSxFQUFFL00sVUFBVTZPLEdBQUssU0FBUzlCLEdBQ3RCLElBQUlyRixFQUFJaEssS0FBS3V0RCxHQUFHbCtDLEdBQ2hCLE9BQU9yRixFQUFJLEdBQUtBLEdBQUtoSyxLQUFLMDlDLEdBQUcvOEMsT0FBUyxLQUFPWCxLQUFLMDlDLEdBQUcxekMsSUFDdERxRixFQXJJaUIsR0FzSW5Cc3VFLEdBQW1CLFdBS3BCLFNBQVN0dUUsRUFBRUEsRUFBR3JGLEdBQ1ZoSyxLQUFLaThDLEdBQUs1c0MsRUFBR3JQLEtBQUt5c0QsR0FBS3ppRCxFQUV2QmhLLEtBQUsrbkUsS0FBTyxJQUFJeEMsR0FBRyxHQUFFaGpDLEdBRXJCdmlDLEtBQUtvbEIsS0FBTyxFQVFoQixPQUFPL1YsRUFBRS9NLFVBQVU2NkMsR0FBSyxTQUFTOXRDLEVBQUdyRixFQUFHM0gsR0FDbkMsSUFBSTBPLEVBQUkvRyxFQUFFb0IsSUFBSzlLLEVBQUlOLEtBQUsrbkUsS0FBS2ppRSxJQUFJaUwsR0FBSTVPLEVBQUk3QixFQUFJQSxFQUFFOGtCLEtBQU8sRUFBR21MLEVBQUl2d0IsS0FBS3lzRCxHQUFHemlELEdBQ3JFLE9BQU9oSyxLQUFLK25FLEtBQU8vbkUsS0FBSytuRSxLQUFLdkQsR0FBR3p6RCxFQUFHLENBQy9CK3BDLEdBQUk5d0MsRUFDSm9iLEtBQU1tTCxFQUNONmlELFNBQVUvd0UsSUFDVnJDLEtBQUtvbEIsTUFBUW1MLEVBQUlwdUIsRUFBR25DLEtBQUtpOEMsR0FBRzgzQixHQUFHMWtFLEVBQUcwQixFQUFFMnRDLEtBQUt4UCxNQVFqRDcvQixFQUFFL00sVUFBVXE3QyxHQUFLLFNBQVN0dUMsR0FDdEIsSUFBSXJGLEVBQUloSyxLQUFLK25FLEtBQUtqaUUsSUFBSXVKLEdBQ3RCckYsSUFBTWhLLEtBQUsrbkUsS0FBTy9uRSxLQUFLK25FLEtBQUtoOEQsT0FBT3NELEdBQUlyUCxLQUFLb2xCLE1BQVFwYixFQUFFb2IsT0FDdkQvVixFQUFFL00sVUFBVWc1QyxHQUFLLFNBQVNqc0MsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJckMsS0FBSytuRSxLQUFLamlFLElBQUlrRSxHQUN0QixPQUFPNmlFLEdBQUdyb0UsUUFBUW5DLEVBQUlBLEVBQUV5NEMsR0FBSyxPQUM5QnpyQyxFQUFFL00sVUFBVSt3RSxXQUFhLFNBQVNoa0UsRUFBR3JGLEdBQ3BDLElBQUkzSCxFQUFJckMsS0FBTStRLEVBQUl5MUQsS0FDbEIsT0FBT3g4RCxFQUFFckUsU0FBUSxTQUFVMEosR0FDdkIsSUFBSXJGLEVBQUkzSCxFQUFFMGxFLEtBQUtqaUUsSUFBSXVKLEdBQ25CMEIsRUFBSUEsRUFBRXl6RCxHQUFHbjFELEVBQUdyRixFQUFJQSxFQUFFOHdDLEdBQUssU0FDdEIreEIsR0FBR3JvRSxRQUFRdU0sSUFDakIxQixFQUFFL00sVUFBVXM3QyxHQUFLLFNBQVN2dUMsRUFBR3JGLEVBQUczSCxHQUMvQixJQUFLLElBQUkwTyxFQUFJaTFELEtBQU0xbEUsRUFBSSxJQUFJLEdBQUUwSixFQUFFMDBDLEtBQUs0a0IsTUFBTSxLQUFNbmhFLEVBQUluQyxLQUFLK25FLEtBQUtqQyxHQUFHeGxFLEdBRy9ENkIsRUFBRWdrRSxNQUFRLENBQ1IsSUFBSTUxQyxFQUFJcHVCLEVBQUUrakUsS0FBTTUyRCxFQUFJaWhCLEVBQUVubEIsSUFBSzBDLEVBQUl5aUIsRUFBRXZ1QixNQUFPd1QsRUFBSTFILEVBQUVndEMsR0FBSXhxQixFQUFJeGlCLEVBQUVzbEUsU0FDeEQsSUFBS3BwRSxFQUFFMDBDLEtBQUt2VSxFQUFFNzZCLEVBQUVvdkMsTUFBTyxNQUN2QnB1QixFQUFFSSxFQUFFcnVCLElBQU0sR0FBS21ULGFBQWF5L0MsSUFBTW9CLEdBQUdyc0QsRUFBR3dMLEtBQU96RSxFQUFJQSxFQUFFeXpELEdBQUdodkQsRUFBRXBLLElBQUtvSyxJQUVuRSxPQUFPcTNELEdBQUdyb0UsUUFBUXVNLElBQ25CMUIsRUFBRS9NLFVBQVVvckQsR0FBSyxTQUFTcitDLEVBQUdyRixHQUM1QixPQUFPNmlFLEdBQUdsbkUsUUFBUTNGLEtBQUsrbkUsTUFBTSxTQUFVMTRELEdBQ25DLE9BQU9yRixFQUFFcUYsT0FFZEEsRUFBRS9NLFVBQVV5ekUsR0FBSyxTQUFTMW1FLEdBR3pCLE9BQU8sSUFBSXd0RSxHQUFHNzhFLE9BQ2ZxUCxFQUFFL00sVUFBVXk2RCxHQUFLLFNBQVMxdEQsR0FDekIsT0FBT3c5RCxHQUFHcm9FLFFBQVF4RSxLQUFLb2xCLE9BQ3hCL1YsRUFoRWlCLEdBaUVuQnd0RSxHQUFtQixTQUFTN3lFLEdBQzdCLFNBQVMzSCxFQUFFZ04sR0FDUCxJQUFJaE4sRUFBSXJDLEtBQ1IsT0FBUXFDLEVBQUkySCxFQUFFekgsS0FBS3ZDLE9BQVNBLE1BQU1nMkUsR0FBSzNtRSxFQUFHaE4sRUFFOUMsT0FBTyxFQUFFQSxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVVtM0MsR0FBSyxTQUFTcHFDLEdBQ3RDLElBQUlyRixFQUFJaEssS0FBTXFDLEVBQUksR0FDbEIsT0FBT3JDLEtBQUtzOEMsR0FBRzMyQyxTQUFRLFNBQVVvTCxFQUFHelEsR0FDaENBLEdBQUtBLEVBQUV3NkMsR0FBS3o0QyxFQUFFNUMsS0FBS3VLLEVBQUVnc0UsR0FBRzc0QixHQUFHOXRDLEVBQUcvTyxFQUFFdzZDLEdBQUk5d0MsRUFBRXd4QyxHQUFHenFDLEtBQU8vRyxFQUFFZ3NFLEdBQUdyNEIsR0FBRzVzQyxNQUN2RDg3RCxHQUFHblYsR0FBR3IxRCxJQUNaQSxFQUFFQyxVQUFVdTdDLEdBQUssU0FBU3h1QyxFQUFHckYsR0FDNUIsT0FBT2hLLEtBQUtnMkUsR0FBRzE2QixHQUFHanNDLEVBQUdyRixJQUN0QjNILEVBQUVDLFVBQVU2NEMsR0FBSyxTQUFTOXJDLEVBQUdyRixHQUM1QixPQUFPaEssS0FBS2cyRSxHQUFHM0MsV0FBV2hrRSxFQUFHckYsSUFDOUIzSCxFQWRpQixDQWV0Qjh3RSxJQUFLeUssR0FBbUIsV0FDdEIsU0FBU3Z1RSxFQUFFQSxHQUNQclAsS0FBS3c1RSxZQUFjbnFFLEVBSW5CclAsS0FBSzhzRCxHQUFLLElBQUksSUFBRSxTQUFVejlDLEdBQ3RCLE9BQU8yMEQsR0FBRzMwRCxLQUNWKzBELElBRUpwa0UsS0FBSzIzRSwwQkFBNEI5aEQsR0FBRW5lLE1BRW5DMVgsS0FBSzAzRSxnQkFBa0IsRUFFdkIxM0UsS0FBS2l0RCxHQUFLLEVBS1ZqdEQsS0FBS2srRSxHQUFLLElBQUk3RCxHQUFJcjZFLEtBQUs0M0UsWUFBYyxFQUFHNTNFLEtBQUs2c0QsR0FBS3pRLEdBQUdvZ0IsS0FFekQsT0FBT250RCxFQUFFL00sVUFBVWdsQyxHQUFLLFNBQVNqNEIsRUFBR3JGLEdBQ2hDLE9BQU9oSyxLQUFLOHNELEdBQUdubkQsU0FBUSxTQUFVMEosRUFBR2hOLEdBQ2hDLE9BQU8ySCxFQUFFM0gsTUFDUndxRSxHQUFHcm9FLFdBQ1Q2SyxFQUFFL00sVUFBVW0yRSxHQUFLLFNBQVNwcEUsR0FDekIsT0FBT3c5RCxHQUFHcm9FLFFBQVF4RSxLQUFLMjNFLDRCQUN4QnRvRSxFQUFFL00sVUFBVW8yRSxHQUFLLFNBQVNycEUsR0FDekIsT0FBT3c5RCxHQUFHcm9FLFFBQVF4RSxLQUFLaXRELEtBQ3hCNTlDLEVBQUUvTSxVQUFVKzRELEdBQUssU0FBU2hzRCxHQUN6QixPQUFPclAsS0FBSzAzRSxnQkFBa0IxM0UsS0FBSzZzRCxHQUFHL3FELE9BQVErcUUsR0FBR3JvRSxRQUFReEUsS0FBSzAzRSxrQkFDL0Ryb0UsRUFBRS9NLFVBQVUyNkQsR0FBSyxTQUFTNXRELEVBQUdyRixFQUFHM0gsR0FDL0IsT0FBT0EsSUFBTXJDLEtBQUsyM0UsMEJBQTRCdDFFLEdBQUkySCxFQUFJaEssS0FBS2l0RCxLQUFPanRELEtBQUtpdEQsR0FBS2pqRCxHQUM1RTZpRSxHQUFHcm9FLFdBQ0o2SyxFQUFFL00sVUFBVXMyRSxHQUFLLFNBQVN2cEUsR0FDekJyUCxLQUFLOHNELEdBQUcvbUQsSUFBSXNKLEVBQUU3RixPQUFRNkYsR0FDdEIsSUFBSXJGLEVBQUlxRixFQUFFMjFELFNBQ1ZoN0QsRUFBSWhLLEtBQUswM0Usa0JBQW9CMTNFLEtBQUs2c0QsR0FBSyxJQUFJelEsR0FBR3B5QyxHQUFJaEssS0FBSzAzRSxnQkFBa0IxdEUsR0FBSXFGLEVBQUU0MUQsZUFBaUJqbEUsS0FBS2l0RCxLQUFPanRELEtBQUtpdEQsR0FBSzU5QyxFQUFFNDFELGlCQUN6SDUxRCxFQUFFL00sVUFBVXEyRSxHQUFLLFNBQVN0cEUsRUFBR3JGLEdBQzVCLE9BQU9oSyxLQUFLNDRFLEdBQUc1dUUsR0FBSWhLLEtBQUs0M0UsYUFBZSxFQUFHL0ssR0FBR3JvRSxXQUM5QzZLLEVBQUUvTSxVQUFVMjVELEdBQUssU0FBUzVzRCxFQUFHckYsR0FDNUIsT0FBT2hLLEtBQUs0NEUsR0FBRzV1RSxHQUFJNmlFLEdBQUdyb0UsV0FDdkI2SyxFQUFFL00sVUFBVXcyRSxHQUFLLFNBQVN6cEUsRUFBR3JGLEdBQzVCLE9BQU9oSyxLQUFLOHNELEdBQUc5eUMsT0FBT2hRLEVBQUVSLFFBQVN4SixLQUFLaytFLEdBQUcvQyxHQUFHbnhFLEVBQUVnN0QsVUFBV2hsRSxLQUFLNDNFLGFBQWUsRUFDN0UvSyxHQUFHcm9FLFdBQ0o2SyxFQUFFL00sVUFBVWd2RSxHQUFLLFNBQVNqaUUsRUFBR3JGLEVBQUczSCxHQUMvQixJQUFJME8sRUFBSS9RLEtBQU1NLEVBQUksRUFBRzZCLEVBQUksR0FDekIsT0FBT25DLEtBQUs4c0QsR0FBR25uRCxTQUFRLFNBQVU0cUIsRUFBR2poQixHQUNoQ0EsRUFBRTIxRCxnQkFBa0JqN0QsR0FBSyxPQUFTM0gsRUFBRXlELElBQUl3SixFQUFFMDFELFlBQWNqMEQsRUFBRSs3QyxHQUFHOXlDLE9BQU91VyxHQUFJcHVCLEVBQUUxQyxLQUFLc1IsRUFBRTBzRCxHQUFHcHVELEVBQUdDLEVBQUUwMUQsV0FDekYxa0UsUUFDQ3VzRSxHQUFHblYsR0FBR3YxRCxHQUFHTCxNQUFLLFdBQ2YsT0FBT3hCLE1BRVorTyxFQUFFL00sVUFBVXkyRSxHQUFLLFNBQVMxcEUsR0FDekIsT0FBT3c5RCxHQUFHcm9FLFFBQVF4RSxLQUFLNDNFLGNBQ3hCdm9FLEVBQUUvTSxVQUFVbTZELEdBQUssU0FBU3B0RCxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUFLOHNELEdBQUdobkQsSUFBSWtFLElBQU0sS0FDMUIsT0FBTzZpRSxHQUFHcm9FLFFBQVFuQyxJQUNuQmdOLEVBQUUvTSxVQUFVMDJFLEdBQUssU0FBUzNwRSxFQUFHckYsRUFBRzNILEdBQy9CLE9BQU9yQyxLQUFLaytFLEdBQUdsRCxHQUFHaHhFLEVBQUczSCxHQUFJd3FFLEdBQUdyb0UsV0FDN0I2SyxFQUFFL00sVUFBVWs3RCxHQUFLLFNBQVNudUQsRUFBR3JGLEVBQUczSCxHQUMvQnJDLEtBQUtrK0UsR0FBR2hELEdBQUdseEUsRUFBRzNILEdBQ2QsSUFBSTBPLEVBQUkvUSxLQUFLdzVFLFlBQVl2RyxHQUFJM3lFLEVBQUksR0FDakMsT0FBT3lRLEdBQUsvRyxFQUFFckUsU0FBUSxTQUFVcUUsR0FDNUIxSixFQUFFYixLQUFLc1IsRUFBRXlxRCxHQUFHbnNELEVBQUdyRixPQUNkNmlFLEdBQUduVixHQUFHcDNELElBQ1orTyxFQUFFL00sVUFBVW03RCxHQUFLLFNBQVNwdUQsRUFBR3JGLEdBQzVCLE9BQU9oSyxLQUFLaytFLEdBQUcvQyxHQUFHbnhFLEdBQUk2aUUsR0FBR3JvRSxXQUMxQjZLLEVBQUUvTSxVQUFVMDVELEdBQUssU0FBUzNzRCxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUFLaytFLEdBQUc3QyxHQUFHcnhFLEdBQ25CLE9BQU82aUUsR0FBR3JvRSxRQUFRbkMsSUFDbkJnTixFQUFFL00sVUFBVW82RCxHQUFLLFNBQVNydEQsRUFBR3JGLEdBQzVCLE9BQU82aUUsR0FBR3JvRSxRQUFReEUsS0FBS2srRSxHQUFHeGhCLEdBQUcxeUQsS0FDOUJxRixFQXpFbUIsR0EwRXJCdStELEdBQW1CLFdBQ3BCLFNBQVN2K0QsRUFBRUEsR0FDUHJQLEtBQUttc0UsV0FBYTk4RCxFQUFHclAsS0FBSzRzRCxHQUFLLElBQUlqMEMsSUFBSzNZLEtBQUt3dUQsR0FBSyxJQUFJNzFDLElBRTFELE9BQU90SixFQUFFL00sVUFBVTg1RCxHQUFLLFNBQVMvc0QsRUFBR3JGLEdBQ2hDLE9BQU82aUUsR0FBR3JvRSxRQUFReEUsS0FBSzRzRCxHQUFHOW1ELElBQUlrRSxLQUMvQnFGLEVBQUUvTSxVQUFVODFFLEdBQUssU0FBUy9vRSxFQUFHckYsR0FFNUIsSUFBSTNILEVBQ0osT0FBT3JDLEtBQUs0c0QsR0FBRzdtRCxJQUFJaUUsRUFBRXJLLEdBQUksQ0FDckJBLElBQUswQyxFQUFJMkgsR0FBR3JLLEdBQ1pvSixRQUFTMUcsRUFBRTBHLFFBQ1htdkUsV0FBWWx6QyxHQUFHM2lDLEVBQUU2MUUsY0FDakJyTCxHQUFHcm9FLFdBQ1I2SyxFQUFFL00sVUFBVSsxRSxHQUFLLFNBQVNocEUsRUFBR3JGLEdBQzVCLE9BQU82aUUsR0FBR3JvRSxRQUFReEUsS0FBS3d1RCxHQUFHMW9ELElBQUlrRSxLQUMvQnFGLEVBQUUvTSxVQUFVZzJFLEdBQUssU0FBU2pwRSxFQUFHckYsR0FDNUIsSUFBSTNILEVBQ0osT0FBT3JDLEtBQUt3dUQsR0FBR3pvRCxJQUFJaUUsRUFBRXRILEtBQU0sQ0FDdkJBLE1BQU9MLEVBQUkySCxHQUFHdEgsS0FDZDhGLE1BQU9neUMsR0FBR240QyxFQUFFODFFLGNBQ1ovRSxTQUFVcHVDLEdBQUczaUMsRUFBRSt3RSxZQUNmdkcsR0FBR3JvRSxXQUNSNkssRUF2QmlCLEdBd0JuQncrRCxHQUFtQixXQU9wQixTQUFTeCtELEVBQUVBLEVBQUdyRixHQUNWLElBQUkzSCxFQUFJckMsS0FDUkEsS0FBS2d3RCxHQUFLLEdBQUlod0QsS0FBS3U5RCxHQUFLLElBQUlxVyxHQUFHLEdBQUk1ekUsS0FBS201RSxJQUFLLEVBQUluNUUsS0FBS201RSxJQUFLLEVBQUluNUUsS0FBS2l6RSxHQUFLNWpFLEVBQUVyUCxNQUMzRUEsS0FBSzJ4QixHQUFLLElBQUlpc0QsR0FBRzU5RSxNQUFPQSxLQUFLaThDLEdBQUssSUFBSUQsR0FBSWg4QyxLQUFLKzhDLEdBQUssU0FBUzF0QyxFQUFHckYsR0FDNUQsT0FBTyxJQUFJMnpFLEdBQUd0dUUsR0FBRyxTQUFVQSxHQUN2QixPQUFPaE4sRUFBRTR3RSxHQUFHOWlCLEdBQUc5Z0QsTUFGNkIsQ0FJbERyUCxLQUFLaThDLElBQUtqOEMsS0FBS21zRSxXQUFhLElBQUkvd0IsR0FBR3B4QyxHQUFJaEssS0FBS3d4QixHQUFLLElBQUlvOEMsR0FBRzV0RSxLQUFLbXNFLFlBRW5FLE9BQU85OEQsRUFBRS9NLFVBQVV1bUQsTUFBUSxXQUN2QixPQUFPdGtELFFBQVFDLFdBQ2hCNkssRUFBRS9NLFVBQVVtdkIsR0FBSyxXQUVoQixPQUFPenhCLEtBQUttNUUsSUFBSyxFQUFJNTBFLFFBQVFDLFdBQzlCakQsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxLQUFNLENBQ3hDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLbTVFLElBRWhCbnJFLFlBQVksRUFDWmlPLGNBQWMsSUFDZDVNLEVBQUUvTSxVQUFVNHRCLEdBQUssYUFFbEI3Z0IsRUFBRS9NLFVBQVUrdEIsR0FBSyxhQUVqQmhoQixFQUFFL00sVUFBVTh4QixHQUFLLFdBQ2hCLE9BQU9wMEIsS0FBS2k4QyxJQUNiNXNDLEVBQUUvTSxVQUFVNnhCLEdBQUssU0FBUzlrQixHQUN6QixJQUFJckYsRUFBSWhLLEtBQUtnd0QsR0FBRzNnRCxFQUFFOGlFLE1BQ2xCLE9BQU9ub0UsSUFBTUEsRUFBSSxJQUFJeXpFLEdBQUd6OUUsS0FBS2k4QyxHQUFJajhDLEtBQUtpekUsSUFBS2p6RSxLQUFLZ3dELEdBQUczZ0QsRUFBRThpRSxNQUFRbm9FLEdBQUlBLEdBQ2xFcUYsRUFBRS9NLFVBQVVzdUIsR0FBSyxXQUNoQixPQUFPNXdCLEtBQUsyeEIsSUFDYnRpQixFQUFFL00sVUFBVXF4QixHQUFLLFdBQ2hCLE9BQU8zekIsS0FBSys4QyxJQUNiMXRDLEVBQUUvTSxVQUFVNHhCLEdBQUssV0FDaEIsT0FBT2wwQixLQUFLd3hCLElBQ2JuaUIsRUFBRS9NLFVBQVU4cUUsZUFBaUIsU0FBUy85RCxFQUFHckYsRUFBRzNILEdBQzNDLElBQUkwTyxFQUFJL1EsS0FDUixHQUFFLG9CQUFxQix3QkFBeUJxUCxHQUNoRCxJQUFJL08sRUFBSSxJQUFJd3RFLEdBQUc5dEUsS0FBS3U5RCxHQUFHejdELFFBQ3ZCLE9BQU85QixLQUFLaXpFLEdBQUdwa0IsS0FBTXhzRCxFQUFFL0IsR0FBR3dCLE1BQUssU0FBVXVOLEdBQ3JDLE9BQU8wQixFQUFFa2lFLEdBQUcvbEIsR0FBRzVzRCxHQUFHd0IsTUFBSyxXQUNuQixPQUFPdU4sUUFFWDJvRCxLQUFLNXlELE1BQUssU0FBVWlLLEdBQ3BCLE9BQU8vTyxFQUFFdzdDLEtBQU16c0MsTUFFcEJBLEVBQUUvTSxVQUFVcXJELEdBQUssU0FBU3QrQyxFQUFHckYsR0FDNUIsT0FBTzZpRSxHQUFHMVUsR0FBRzUyRCxPQUFPMlksT0FBT2xhLEtBQUtnd0QsSUFBSS92RCxLQUFJLFNBQVVvQyxHQUM5QyxPQUFPLFdBQ0gsT0FBT0EsRUFBRXE2RCxHQUFHcnRELEVBQUdyRixTQUd4QnFGLEVBM0RpQixHQTREbkJ5K0QsR0FBbUIsU0FBUzlqRSxHQUM3QixTQUFTM0gsRUFBRWdOLEdBQ1AsSUFBSWhOLEVBQUlyQyxLQUNSLE9BQVFxQyxFQUFJMkgsRUFBRXpILEtBQUt2QyxPQUFTQSxNQUFNcTlELEdBQUtodUQsRUFBR2hOLEVBRTlDLE9BQU8sRUFBRUEsRUFBRzJILEdBQUkzSCxFQUxJLENBTXRCb3hFLElBQUtqRixHQUFtQixXQUN0QixTQUFTbi9ELEVBQUVBLEdBQ1ByUCxLQUFLdzVFLFlBQWNucUUsRUFFbkJyUCxLQUFLOHZELEdBQUssSUFBSXVxQixHQUVkcjZFLEtBQUsydkQsR0FBSyxLQUVkLE9BQU90Z0QsRUFBRTh1RSxHQUFLLFNBQVNuMEUsR0FDbkIsT0FBTyxJQUFJcUYsRUFBRXJGLElBQ2R6SSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDeEN3RCxJQUFLLFdBQ0QsR0FBSTlGLEtBQUsydkQsR0FBSSxPQUFPM3ZELEtBQUsydkQsR0FDekIsTUFBTSxNQUVWM2hELFlBQVksRUFDWmlPLGNBQWMsSUFDZDVNLEVBQUUvTSxVQUFVMjJFLEdBQUssU0FBUzVwRSxFQUFHckYsRUFBRzNILEdBQ2hDLE9BQU9yQyxLQUFLOHZELEdBQUdtcEIsR0FBRzUyRSxFQUFHMkgsR0FBSWhLLEtBQUtrd0QsR0FBR2wyQyxPQUFPM1gsRUFBRXRDLFlBQWE4c0UsR0FBR3JvRSxXQUMzRDZLLEVBQUUvTSxVQUFVNDJFLEdBQUssU0FBUzdwRSxFQUFHckYsRUFBRzNILEdBQy9CLE9BQU9yQyxLQUFLOHZELEdBQUdvcEIsR0FBRzcyRSxFQUFHMkgsR0FBSWhLLEtBQUtrd0QsR0FBR2xuQyxJQUFJM21CLEVBQUV0QyxZQUFhOHNFLEdBQUdyb0UsV0FDeEQ2SyxFQUFFL00sVUFBVWs1RCxHQUFLLFNBQVNuc0QsRUFBR3JGLEdBQzVCLE9BQU9oSyxLQUFLa3dELEdBQUdsbkMsSUFBSWhmLEVBQUVqSyxZQUFhOHNFLEdBQUdyb0UsV0FDdEM2SyxFQUFFL00sVUFBVTJtRSxhQUFlLFNBQVM1NUQsRUFBR3JGLEdBQ3RDLElBQUkzSCxFQUFJckMsS0FDUkEsS0FBSzh2RCxHQUFHcXJCLEdBQUdueEUsRUFBRWc3RCxVQUFVci9ELFNBQVEsU0FBVTBKLEdBQ3JDLE9BQU9oTixFQUFFNnRELEdBQUdsbkMsSUFBSTNaLEVBQUV0UCxlQUV0QixJQUFJZ1IsRUFBSS9RLEtBQUt3NUUsWUFBWTVvRCxLQUN6QixPQUFPN2YsRUFBRWlyRCxHQUFHM3NELEVBQUdyRixFQUFFZzdELFVBQVVsakUsTUFBSyxTQUFVdU4sR0FDdENBLEVBQUUxSixTQUFRLFNBQVUwSixHQUNoQixPQUFPaE4sRUFBRTZ0RCxHQUFHbG5DLElBQUkzWixFQUFFdFAsa0JBRXRCK0IsTUFBSyxXQUNMLE9BQU9pUCxFQUFFK25FLEdBQUd6cEUsRUFBR3JGLE9BRXBCcUYsRUFBRS9NLFVBQVV1c0QsR0FBSyxXQUNoQjd1RCxLQUFLMnZELEdBQUssSUFBSTVtQyxLQUNmMVosRUFBRS9NLFVBQVU0cUQsR0FBSyxTQUFTNzlDLEdBQ3pCLElBQUlyRixFQUFJaEssS0FBTXFDLEVBQUlyQyxLQUFLdzVFLFlBQVk3bEQsS0FBS29pRCxLQUVoQyxPQUFPbEosR0FBR2xuRSxRQUFRM0YsS0FBS2t3RCxJQUFJLFNBQVVuL0MsR0FDekMsSUFBSXpRLEVBQUksR0FBRWtsQyxFQUFFejBCLEdBQ1osT0FBTy9HLEVBQUV5a0QsR0FBR3AvQyxFQUFHL08sR0FBR3dCLE1BQUssU0FBVXVOLEdBQzdCQSxHQUFLaE4sRUFBRXM3QyxHQUFHcjlDLFNBRWR3QixNQUFLLFdBQ0wsT0FBT2tJLEVBQUUybEQsR0FBSyxLQUFNdHRELEVBQUU4QyxNQUFNa0ssT0FFakNBLEVBQUUvTSxVQUFVb3ZCLEdBQUssU0FBU3JpQixFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU9BLEtBQUt5dUQsR0FBR3AvQyxFQUFHckYsR0FBR2xJLE1BQUssU0FBVXVOLEdBQ2hDQSxFQUFJaE4sRUFBRTZ0RCxHQUFHbDJDLE9BQU9oUSxFQUFFakssWUFBY3NDLEVBQUU2dEQsR0FBR2xuQyxJQUFJaGYsRUFBRWpLLGdCQUVoRHNQLEVBQUUvTSxVQUFVNnRELEdBQUssU0FBUzlnRCxHQUV6QixPQUFPLEdBQ1JBLEVBQUUvTSxVQUFVbXNELEdBQUssU0FBU3AvQyxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlyQyxLQUNSLE9BQU82c0UsR0FBRzFVLEdBQUcsQ0FBRSxXQUNYLE9BQU8wVSxHQUFHcm9FLFFBQVFuQyxFQUFFeXRELEdBQUc0TSxHQUFHMXlELEtBQzNCLFdBQ0MsT0FBTzNILEVBQUVtM0UsWUFBWTVvRCxLQUFLOHJDLEdBQUdydEQsRUFBR3JGLElBQ2pDLFdBQ0MsT0FBTzNILEVBQUVtM0UsWUFBWTdyQixHQUFHdCtDLEVBQUdyRixPQUVoQ3FGLEVBbEVtQixHQW1FckIrdUUsR0FBbUIsV0FDcEIsU0FBUy91RSxFQUFFQSxHQUNQclAsS0FBS3F0RCxHQUFLaCtDLEVBQUVnK0MsR0FBSXJ0RCxLQUFLbXVELEdBQUs5K0MsRUFBRTgrQyxHQUVoQyxPQUFPOStDLEVBQUUvTSxVQUFVNDNCLEdBQUssU0FBUzdxQixHQUM3QnJQLEtBQUt1c0QsR0FBS2w5QyxHQUNYQSxFQUFFL00sVUFBVTIyQixHQUFLLFNBQVM1cEIsR0FDekJyUCxLQUFLK3ZELEdBQUsxZ0QsR0FDWEEsRUFBRS9NLFVBQVV5bUQsVUFBWSxTQUFTMTVDLEdBQ2hDclAsS0FBSzB1RCxHQUFLci9DLEdBQ1hBLEVBQUUvTSxVQUFVd1EsTUFBUSxXQUNuQjlTLEtBQUttdUQsTUFDTjkrQyxFQUFFL00sVUFBVTgxQyxLQUFPLFNBQVMvb0MsR0FDM0JyUCxLQUFLcXRELEdBQUdoK0MsSUFDVEEsRUFBRS9NLFVBQVU0ckQsR0FBSyxXQUNoQmx1RCxLQUFLdXNELE1BQ05sOUMsRUFBRS9NLFVBQVVtdEQsR0FBSyxTQUFTcGdELEdBQ3pCclAsS0FBSyt2RCxHQUFHMWdELElBQ1RBLEVBQUUvTSxVQUFVc3JELEdBQUssU0FBU3YrQyxHQUN6QnJQLEtBQUswdUQsR0FBR3IvQyxJQUNUQSxFQXBCaUIsR0FxQm5Cby9ELEdBQUssQ0FDTjRQLGtCQUFtQixXQUNuQkMsT0FBUSxTQUNSQyxTQUFVLFlBQ1g1UCxHQUFtQixTQUFTM2tFLEdBQzNCLFNBQVMzSCxFQUFFZ04sR0FDUCxJQUFJaE4sRUFBSXJDLEtBQ1IsT0FBUXFDLEVBQUkySCxFQUFFekgsS0FBS3ZDLEtBQU1xUCxJQUFNclAsTUFBTXkvRCxpQkFBbUJwd0QsRUFBRW93RCxpQkFBa0JwOUQsRUFBRS9CLEVBQUkrTyxFQUFFL08sRUFDcEYrQixFQU1KLE9BQU8sRUFBRUEsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVaXRELEdBQUssU0FBU2xnRCxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUMvQyxPQUFPLElBQUl4TSxTQUFRLFNBQVVqRSxFQUFHNkIsR0FDNUIsSUFBSW91QixFQUFJLElBQUksR0FDWkEsRUFBRXd3QyxXQUFXLGFBQVksV0FDckIsSUFDSSxPQUFReHdDLEVBQUUwd0Msb0JBQ1IsS0FBSyxZQUNILElBQUlqM0QsRUFBSXVtQixFQUFFNHdDLGtCQUNWLEdBQUUsYUFBYyxnQkFBaUI5OUQsS0FBS0MsVUFBVTBHLElBQUsxSixFQUFFMEosR0FDdkQsTUFFRixLQUFLLFdBQ0gsR0FBRSxhQUFjLFFBQVVxRixFQUFJLGVBQWdCbE4sRUFBRSxJQUFJa1AsR0FBRSxHQUFFNHdELGtCQUFtQixxQkFDM0UsTUFFRixLQUFLLGNBQ0gsSUFBSTUvRCxFQUFJa3VCLEVBQUUyd0MsWUFDVixHQUFJLEdBQUUsYUFBYyxRQUFVN3hELEVBQUksd0JBQXlCaE4sRUFBRyxpQkFBa0JrdUIsRUFBRTZ3QyxtQkFDbEYvK0QsRUFBSSxFQUFHLENBQ0gsSUFBSTBPLEVBQUl3ZixFQUFFNHdDLGtCQUFrQnQ4RCxNQUM1QixHQUFJa00sR0FBS0EsRUFBRWlSLFFBQVVqUixFQUFFa0MsUUFBUyxDQUM1QixJQUFJM0QsRUFBSSxTQUFTRCxHQUNiLElBQUlyRixFQUFJcUYsRUFBRWtRLGNBQWNwYixRQUFRLElBQUssS0FDckMsT0FBTzVDLE9BQU8yWSxPQUFPLElBQUdvRyxRQUFRdFcsSUFBTSxFQUFJQSxFQUFJLEdBQUUrM0QsUUFGNUMsQ0FHTmh4RCxFQUFFaVIsUUFDSjdmLEVBQUUsSUFBSWtQLEdBQUUvQixFQUFHeUIsRUFBRWtDLGVBQ1Y5USxFQUFFLElBQUlrUCxHQUFFLEdBQUUwd0QsUUFBUyxnQ0FBa0N4eEMsRUFBRTJ3QyxtQkFJbEUvK0QsRUFBRSxJQUFJa1AsR0FBRSxHQUFFc3hELFlBQWEsdUJBQ3ZCLE1BRUYsUUFDRSxNQUVOLFFBQ0UsR0FBRSxhQUFjLFFBQVV0ekQsRUFBSSxvQkFHdEMsSUFBSUMsRUFBSWpNLEtBQUtDLFVBQVV5TixHQUN2QndmLEVBQUU2bkIsS0FBS3B1QyxFQUFHLE9BQVFzRixFQUFHak4sRUFBRyxRQUU3QkEsRUFBRUMsVUFBVW02QixHQUFLLFNBQVNwdEIsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJLENBQUVyQyxLQUFLMHZELEdBQUksSUFBSyxnQ0FBaUMsSUFBS3JnRCxFQUFHLFlBQWMwQixFRGwyV2xDLElBQUlpeUIsR0NrMld1QzFpQyxFQUFJLENBR3hGKy9ELG1CQUFvQixhQUNwQkosbUJBQW9CLEdBQ3BCSCxpQkFBa0IsQ0FHZDRCLFNBQVUsWUFBYzFoRSxLQUFLcVAsRUFBRTBSLFVBQVksY0FBZ0IvZ0IsS0FBS3FQLEVBQUVxeUQsVUFFdEV0QixhQUFhLEVBQ2JkLHdCQUF3QixFQUN4QkQsc0JBQXVCLENBT25CbWYsK0JBQWdDLEtBRXBDL2UsaUJBQWtCei9ELEtBQUt5L0QsaUJBQ3ZCZ2YscUJBQXNCeitFLEtBQUtNLEdBRS9CTixLQUFLNHhELEdBQUd0eEQsRUFBRTIvRCxtQkFBb0JqMkQsR1Rsc1lSLG9CQUFYSixTQUdSQSxPQUFnQixTQUFLQSxPQUFpQixVQUFLQSxPQUFpQixXQUMvRCxvREFBb0RoSCxLQUFLbVAsTUFvQ2hDLGlCQUFkQyxXQUFtRCxnQkFBekJBLFVBQW1CLFNBSXJERCxJQUFRdU8sUUFBUSxjQUFnQixHQUczQyxXQUNJLElBQUkwUixFQUFLamdCLElBQ1QsT0FBT2lnQixFQUFHMVIsUUFBUSxVQUFZLEdBQUswUixFQUFHMVIsUUFBUSxhQUFlLEVTaXFZcEMsSVQ3cFlsQnZPLElBQVF1TyxRQUFRLGVBQWlCLEdTNnBZRCxNQUFRaGdCLEVBQUU2L0QsMEJBQTRCLGdCQUN6RSxJQUFJaCtELEVBQUlFLEVBQUVoQyxLQUFLLElBQ2YsR0FBRSxhQUFjLHdCQUEwQjhCLEVBQUc3QixHQUM3QyxJQUFJaXdCLEVBQUl4ZixFQUFFeXZELGlCQUFpQnIrRCxFQUFHN0IsR0FBSWdQLEdBQUksRUFBSXpCLEdBQUksRUFBSTRDLEVBQUksSUFBSTJ0RSxHQUFHLENBQ3pEL3dCLEdBQUksU0FBU2grQyxHQUNUeEIsRUFBSSxHQUFFLGFBQWMsNENBQTZDd0IsSUFBTUMsSUFBTSxHQUFFLGFBQWMsaUNBQzdGaWhCLEVBQUUxZCxPQUFRdkQsR0FBSSxHQUFLLEdBQUUsYUFBYyxzQkFBdUJELEdBQUlraEIsRUFBRTZuQixLQUFLL29DLEtBRXpFOCtDLEdBQUksV0FDQSxPQUFPNTlCLEVBQUV6ZCxXQUViNUMsRUFBSSxTQUFTYixFQUFHckYsR0FHaEJ1bUIsRUFBRXV3QyxPQUFPenhELEdBQUcsU0FBVUEsR0FDbEIsSUFDSXJGLEVBQUVxRixHQUNKLE1BQU9BLEdBQ0xvVSxZQUFXLFdBQ1AsTUFBTXBVLElBQ04sUUFhaEIsT0FBT2EsRUFBRSxtQkFBa0IsV0FDdkJyQyxHQUFLLEdBQUUsYUFBYyxtQ0FDcEJxQyxFQUFFLG9CQUFtQixXQUN0QnJDLElBQU1BLEdBQUksRUFBSSxHQUFFLGFBQWMsK0JBQWdDNEMsRUFBRWcvQyxTQUMvRHYvQyxFQUFFLG9CQUFtQixTQUFVYixHQUNoQ3hCLElBQU1BLEdBQUksRUFBSSxHQUFFLGFBQWMsZ0NBQWlDd0IsR0FBSW9CLEVBQUVnL0MsR0FBRyxJQUFJcCtDLEdBQUUsR0FBRXN4RCxZQUFhLDZDQUM1Rnp5RCxFQUFFLHNCQUFxQixTQUFVYixHQUNsQyxJQUFJckYsRUFDSixJQUFLNkQsRUFBRyxDQUNKLElBQUl4TCxFQUFJZ04sRUFBRTlMLEtBQUssR0FDZixLQUFJbEIsR0FNSixJQUFJME8sRUFBSTFPLEVBQUcvQixFQUFJeVEsRUFBRWxNLFFBQVUsUUFBVW1GLEVBQUkrRyxFQUFFLFVBQU8sSUFBVy9HLE9BQUksRUFBU0EsRUFBRW5GLE9BQzVFLEdBQUl2RSxFQUFHLENBQ0gsR0FBRSxhQUFjLDZCQUE4QkEsR0FFOUMsSUFBSTZCLEVBQUk3QixFQUFFMGhCLE9BQVExUyxFQUFJLFNBQVNELEdBRzNCLElBQUlyRixFQUFJNjZELEdBQUd4MUQsR0FDWCxRQUFJLElBQVdyRixFQUFHLE9BQU9zN0QsR0FBR3Q3RCxHQUpWLENBS3BCN0gsR0FBSTJMLEVBQUl4TixFQUFFMlMsYUFDWixJQUFXM0QsSUFBTUEsRUFBSSxHQUFFNkssU0FBVXJNLEVBQUkseUJBQTJCM0wsRUFBSSxpQkFBbUI3QixFQUFFMlMsU0FFekZwRixHQUFJLEVBQUk0QyxFQUFFZy9DLEdBQUcsSUFBSXArQyxHQUFFL0IsRUFBR3hCLElBQUt5aUIsRUFBRXpkLGFBQzFCLEdBQUUsYUFBYyx1QkFBd0J6USxHQUFJb08sRUFBRW05QyxHQUFHdnJELE9BRTNEb2hCLFlBQVcsV0FLWmhULEVBQUV5OUMsT0FDRixHQUFJejlDLEdBQ1RwTyxFQXJLZSxDQXNLTixXQUNaLFNBQVNnTixFQUFFQSxHQUNQclAsS0FBSzJ1RCxHQUFLdC9DLEVBQUdyUCxLQUFLcVAsRUFBSUEsRUFBRUEsRUFDeEIsSUFBSXJGLEVBQUlxRixFQUFFb3lELElBQU0sUUFBVSxPQUMxQnpoRSxLQUFLMHZELEdBQUsxbEQsRUFBSSxNQUFRcUYsRUFBRTBzQixLQUFNLzdCLEtBQUt3dkQsR0FBSyxZQUFjeHZELEtBQUtxUCxFQUFFMFIsVUFBWSxjQUFnQi9nQixLQUFLcVAsRUFBRXF5RCxTQUFXLGFBRS9HLE9BQU9yeUQsRUFBRS9NLFVBQVVpNUIsR0FBSyxTQUFTbHNCLEVBQUdyRixFQUFHM0gsRUFBRzBPLEdBQ3RDLElBQUl6USxFQUFJTixLQUFLZ3RELEdBQUczOUMsRUFBR3JGLEdBQ25CLEdBQUUsaUJBQWtCLFlBQWExSixFQUFHK0IsR0FDcEMsSUFBSUYsRUFBSSxHQUNSLE9BQU9uQyxLQUFLNHhELEdBQUd6dkQsRUFBRzRPLEdBQUkvUSxLQUFLdXZELEdBQUdsZ0QsRUFBRy9PLEVBQUc2QixFQUFHRSxHQUFHK0MsTUFBSyxTQUFVaUssR0FDckQsT0FBTyxHQUFFLGlCQUFrQixhQUFjQSxHQUFJQSxLQUM3QyxTQUFVckYsR0FDVixNQUFNLEdBQUUsaUJBQWtCcUYsRUFBSSx1QkFBd0JyRixFQUFHLFFBQVMxSixFQUFHLFdBQVkrQixHQUNqRjJILE1BRUxxRixFQUFFL00sVUFBVXc2QixHQUFLLFNBQVN6dEIsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FHbEMsT0FBTy9RLEtBQUt1N0IsR0FBR2xzQixFQUFHckYsRUFBRzNILEVBQUcwTyxJQU01QjFCLEVBQUUvTSxVQUFVc3ZELEdBQUssU0FBU3ZpRCxFQUFHckYsR0FDekIsR0FBSXFGLEVBQUUscUJBQXVCLG9CQUs3QkEsRUFBRSxnQkFBa0IsYUFBY3JGLEVBQUcsSUFBSyxJQUFJM0gsS0FBSzJILEVBQUVveEMsR0FBSXB4QyxFQUFFb3hDLEdBQUdodEMsZUFBZS9MLEtBQU9nTixFQUFFaE4sR0FBSzJILEVBQUVveEMsR0FBRy80QyxLQUNqR2dOLEVBQUUvTSxVQUFVMHFELEdBQUssU0FBUzM5QyxFQUFHckYsR0FDNUIsSUFBSTNILEVBQUlvc0UsR0FBR3AvRCxHQUNYLE9BQU9yUCxLQUFLMHZELEdBQUssT0FBUzFsRCxFQUFJLElBQU0zSCxHQUNyQ2dOLEVBbkNTLElBb0NWMCtELEdBQW1CLFdBQ3JCLFNBQVMxK0QsSUFDTCxJQUFJQSxFQUFJclAsS0FDUkEsS0FBS2d1RCxHQUFLLFdBQ04sT0FBTzMrQyxFQUFFaStDLE1BQ1Z0dEQsS0FBS2l3RCxHQUFLLFdBQ1QsT0FBTzVnRCxFQUFFdWdELE1BQ1Y1dkQsS0FBSyt1RCxHQUFLLEdBQUkvdUQsS0FBS293RCxLQUUxQixPQUFPL2dELEVBQUUvTSxVQUFVKzdCLEdBQUssU0FBU2h2QixHQUM3QnJQLEtBQUsrdUQsR0FBR3R2RCxLQUFLNFAsSUFDZEEsRUFBRS9NLFVBQVVtdkIsR0FBSyxXQUNoQjduQixPQUFPNjBCLG9CQUFvQixTQUFVeitCLEtBQUtndUQsSUFBS3BrRCxPQUFPNjBCLG9CQUFvQixVQUFXeitCLEtBQUtpd0QsS0FDM0Y1Z0QsRUFBRS9NLFVBQVU4dEQsR0FBSyxXQUNoQnhtRCxPQUFPcWlCLGlCQUFpQixTQUFVanNCLEtBQUtndUQsSUFBS3BrRCxPQUFPcWlCLGlCQUFpQixVQUFXanNCLEtBQUtpd0QsS0FDckY1Z0QsRUFBRS9NLFVBQVVnckQsR0FBSyxXQUNoQixHQUFFLHNCQUF1QiwyQ0FDekIsSUFBSyxJQUFJaitDLEVBQUksRUFBR3JGLEVBQUloSyxLQUFLK3VELEdBQUkxL0MsRUFBSXJGLEVBQUVySixPQUFRME8sS0FDdkMsRUFBSXJGLEVBQUVxRixJQUFJLElBRWZBLEVBQUUvTSxVQUFVc3RELEdBQUssV0FDaEIsR0FBRSxzQkFBdUIsNkNBQ3pCLElBQUssSUFBSXZnRCxFQUFJLEVBQUdyRixFQUFJaEssS0FBSyt1RCxHQUFJMS9DLEVBQUlyRixFQUFFckosT0FBUTBPLEtBQ3ZDLEVBQUlyRixFQUFFcUYsSUFBSSxJQU1sQkEsRUFBRXltRCxHQUFLLFdBQ0gsTUFBTyxvQkFBc0Jsc0QsYUFBVSxJQUFXQSxPQUFPcWlCLHVCQUFvQixJQUFXcmlCLE9BQU82MEIscUJBQ2hHcHZCLEVBL0JrQixHQWdDcEJxdkUsR0FBbUIsV0FDcEIsU0FBU3J2RSxLQUNULE9BQU9BLEVBQUUvTSxVQUFVKzdCLEdBQUssU0FBU2h2QixLQUU5QkEsRUFBRS9NLFVBQVVtdkIsR0FBSyxhQUVqQnBpQixFQU5pQixHQU9uQnEvRCxHQUFtQixXQUNwQixTQUFTci9ELElBQ0xyUCxLQUFLMitFLGlCQUFrQixFQUUzQixPQUFPdHZFLEVBQUUvTSxVQUFVczhFLFdBQWEsU0FBU3Z2RSxHQUNyQyxPQUFPLEVBQUVyUCxVQUFNLE9BQVEsR0FBUSxXQUMzQixPQUFPLEVBQUVBLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQVFBLEVBQUVvRyxPQUNSLEtBQUssRUFDSCxPQUFPcFEsS0FBS21zRSxXQUFhbUgsR0FBR2prRSxFQUFFcy9DLEdBQUd0L0MsR0FBSXJQLEtBQUt1MUMsR0FBS3YxQyxLQUFLc1IsR0FBR2pDLEdBQUlyUCxLQUFLdzVFLFlBQWN4NUUsS0FBSzZ2RCxHQUFHeGdELEdBQ3RGLENBQUUsRUFBY3JQLEtBQUt3NUUsWUFBWTN3QixTQUVuQyxLQUFLLEVBQ0gsT0FBTzcrQyxFQUFFcUcsT0FBUXJRLEtBQUs2dEQsR0FBSzd0RCxLQUFLNHVELEdBQUd2L0MsR0FBSXJQLEtBQUswOUIsR0FBSzE5QixLQUFLOHVELEdBQUd6L0MsR0FBSSxDQUFFLFdBSTVFQSxFQUFFL00sVUFBVXNzRCxHQUFLLFNBQVN2L0MsR0FDekIsT0FBTyxNQUNSQSxFQUFFL00sVUFBVXdzRCxHQUFLLFNBQVN6L0MsR0FDekIsT0FBT2tzRCxHQUFHdjdELEtBQUt3NUUsWUFBYSxJQUFJZ0UsR0FBSW51RSxFQUFFaWhELEdBQUl0d0QsS0FBS21zRSxhQUNoRDk4RCxFQUFFL00sVUFBVXV0RCxHQUFLLFNBQVN4Z0QsR0FDekIsT0FBTyxJQUFJdytELEdBQUdXLEdBQUcyUCxHQUFJbitFLEtBQUttc0UsYUFDM0I5OEQsRUFBRS9NLFVBQVVnUCxHQUFLLFNBQVNqQyxHQUN6QixPQUFPLElBQUk2ckUsSUFDWjdyRSxFQUFFL00sVUFBVTgzRSxVQUFZLFdBQ3ZCLE9BQU8sRUFBRXA2RSxVQUFNLE9BQVEsR0FBUSxXQUMzQixPQUFPLEVBQUVBLE1BQU0sU0FBVXFQLEdBQ3JCLE9BQVFBLEVBQUVlLE9BQ1IsS0FBSyxFQUNILE9BQU9wUSxLQUFLNnRELElBQU03dEQsS0FBSzZ0RCxHQUFHK0UsT0FBUSxDQUFFLEVBQWM1eUQsS0FBS3UxQyxHQUFHOWpCLE1BRTVELEtBQUssRUFDSCxPQUFPcGlCLEVBQUVnQixPQUFRLENBQUUsRUFBY3JRLEtBQUt3NUUsWUFBWS9uRCxNQUVwRCxLQUFLLEVBQ0gsT0FBT3BpQixFQUFFZ0IsT0FBUSxDQUFFLFdBSWhDaEIsRUF4Q2lCLEdBeUNuQnUvRCxHQUFtQixTQUFTNzlELEdBQzdCLFNBQVN6USxFQUFFK08sRUFBR3JGLEVBQUczSCxHQUNiLElBQUkvQixFQUFJTixLQUNSLE9BQVFNLEVBQUl5USxFQUFFeE8sS0FBS3ZDLE9BQVNBLE1BQU1xd0QsR0FBS2hoRCxFQUFHL08sRUFBRXUrRSxlQUFpQjcwRSxFQUFHMUosRUFBRXcrRSxlQUFpQno4RSxFQUNuRi9CLEVBQUVxK0UsaUJBQWtCLEVBQUlyK0UsRUFFNUIsT0FBTyxFQUFFQSxFQUFHeVEsR0FBSXpRLEVBQUVnQyxVQUFVczhFLFdBQWEsU0FBU3Z2RSxHQUM5QyxPQUFPLEVBQUVyUCxVQUFNLE9BQVEsR0FBUSxXQUMzQixPQUFPLEVBQUVBLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQVFBLEVBQUVvRyxPQUNSLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBY1csRUFBRXpPLFVBQVVzOEUsV0FBV3I4RSxLQUFLdkMsS0FBTXFQLElBRTNELEtBQUssRUFDSCxPQUFPckYsRUFBRXFHLE9BQVEsQ0FBRSxFQUFjMGxFLEdBQUcvMUUsS0FBSzA5QixLQUUzQyxLQUFLLEVBQ0gsT0FBTzF6QixFQUFFcUcsT0FBUSxDQUFFLEVBQWNyUSxLQUFLcXdELEdBQUd1dUIsV0FBVzUrRSxLQUFNcVAsSUFFNUQsS0FBSyxFQUVILE9BQU9yRixFQUFFcUcsT0FBUSxDQUFFLEVBQWNxdEUsR0FBRzE5RSxLQUFLcXdELEdBQUd3ckIsS0FFOUMsS0FBSyxFQUVILE9BQU83eEUsRUFBRXFHLE9BQVEsQ0FBRSxFQUFjZ3RELEdBQUdyOUQsS0FBS3F3RCxHQUFHNVgsS0FFOUMsS0FBSyxFQUNILE9BQU96dUMsRUFBRXFHLE9BQVEsQ0FBRSxXQUloQy9QLEVBQUVnQyxVQUFVd3NELEdBQUssU0FBU3ovQyxHQUN6QixPQUFPa3NELEdBQUd2N0QsS0FBS3c1RSxZQUFhLElBQUlnRSxHQUFJbnVFLEVBQUVpaEQsR0FBSXR3RCxLQUFLbXNFLGFBQ2hEN3JFLEVBQUVnQyxVQUFVc3NELEdBQUssU0FBU3YvQyxHQUN6QixJQUFJckYsRUFBSWhLLEtBQUt3NUUsWUFBWXZHLEdBQUdFLEdBQzVCLE9BQU8sSUFBSWdCLEdBQUducUUsRUFBR3FGLEVBQUVtL0QsS0FDcEJsdUUsRUFBRWdDLFVBQVV1dEQsR0FBSyxTQUFTeGdELEdBQ3pCLElBQUlyRixFQUFJMHlELEdBQUdydEQsRUFBRXMvQyxHQUFHdC9DLEVBQUdBLEVBQUVzL0MsR0FBRzZTLGdCQUFpQm4vRCxPQUFJLElBQVdyQyxLQUFLNitFLGVBQWlCM0ssR0FBRzdDLEdBQUdyeEUsS0FBSzYrRSxnQkFBa0IzSyxHQUFHbkYsR0FDOUcsT0FBTyxJQUFJMVMsR0FBR3I4RCxLQUFLMitFLGdCQUFpQjMwRSxFQUFHcUYsRUFBRXdvRSxTQUFVeDFFLEVBQUdnTixFQUFFbS9ELEdBQUlILEtBQU1DLEtBQU10dUUsS0FBS21zRSxXQUFZbnNFLEtBQUt1MUMsS0FBTXYxQyxLQUFLOCtFLGlCQUMxR3grRSxFQUFFZ0MsVUFBVWdQLEdBQUssU0FBU2pDLEdBQ3pCLE9BQU8sSUFBSTZyRSxJQUNaNTZFLEVBMUNpQixDQTJDdEJvdUUsSUFBS0ksR0FBbUIsU0FBUy85RCxHQUMvQixTQUFTelEsRUFBRStPLEVBQUdyRixHQUNWLElBQUkzSCxFQUFJckMsS0FDUixPQUFRcUMsRUFBSTBPLEVBQUV4TyxLQUFLdkMsS0FBTXFQLEVBQUdyRixHQUF5QixJQUFPaEssTUFBTXF3RCxHQUFLaGhELEVBQUdoTixFQUFFdzhFLGVBQWlCNzBFLEVBQzdGM0gsRUFBRXM4RSxpQkFBa0IsRUFBSXQ4RSxFQUU1QixPQUFPLEVBQUUvQixFQUFHeVEsR0FBSXpRLEVBQUVnQyxVQUFVczhFLFdBQWEsU0FBU3Z2RSxHQUM5QyxPQUFPLEVBQUVyUCxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJTSxFQUFHNkIsRUFBSW5DLEtBQ1gsT0FBTyxFQUFFQSxNQUFNLFNBQVV1d0IsR0FDckIsT0FBUUEsRUFBRW5nQixPQUNSLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBY1csRUFBRXpPLFVBQVVzOEUsV0FBV3I4RSxLQUFLdkMsS0FBTXFQLElBRTNELEtBQUssRUFDSCxPQUFPa2hCLEVBQUVsZ0IsT0FBUS9QLEVBQUlOLEtBQUtxd0QsR0FBR3dyQixHQUFJNzdFLEtBQUt1MUMsY0FBY3dsQyxJQUFNLzZFLEtBQUt1MUMsR0FBR3NtQyxHQUFLLENBQ25FaUMsR0FBSXJCLEdBQUczdkUsS0FBSyxLQUFNeE0sR0FDbEJnekMsR0FBSTZwQyxHQUFHcndFLEtBQUssS0FBTXhNLEdBQ2xCODBDLEdBQUk4bkMsR0FBR3B3RSxLQUFLLEtBQU14TSxHQUNsQjh5QixHQUFJa3FELEdBQUd4d0UsS0FBSyxLQUFNeE0sR0FDbEJtekMsR0FBSXVwQyxHQUFHbHdFLEtBQUssS0FBTXhNLElBQ25CLENBQUUsRUFBY04sS0FBS3UxQyxHQUFHc1QsVUFBYSxDQUFFLEVBQWMsR0FFMUQsS0FBSyxFQUNIdDRCLEVBQUVsZ0IsT0FBUWtnQixFQUFFbmdCLE1BQVEsRUFFdEIsS0FBSyxFQUdILE1BQU8sQ0FBRSxFQUFjcFEsS0FBS3c1RSxZQUFZeG1FLElBQUcsU0FBVTNELEdBQ2pELE9BQU8sRUFBRWxOLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLE9BQU8sRUFBRW5DLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQVFBLEVBQUVvRyxPQUNSLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBY2l0RSxHQUFHcjlFLEtBQUtxd0QsR0FBR3dyQixHQUFJeHNFLElBRXhDLEtBQUssRUFDSCxPQUFPckYsRUFBRXFHLE9BQVFyUSxLQUFLNnRELEtBQU94K0MsSUFBTXJQLEtBQUs2dEQsR0FBR3lnQixHQUFLdHVFLEtBQUs2dEQsR0FBR2hGLE1BQU03b0QsS0FBSzA5QixJQUFNcnVCLEdBQUtyUCxLQUFLNnRELEdBQUcrRSxRQUN0RixDQUFFLGNBTXBCLEtBQUssRUFHSCxPQUFPcmlDLEVBQUVsZ0IsT0FBUSxDQUFFLFdBSWhDL1AsRUFBRWdDLFVBQVVnUCxHQUFLLFNBQVNqQyxHQUN6QixJQUFJckYsRUFBSXFrRSxLQUNSLElBQUswTSxHQUFHamxCLEdBQUc5ckQsR0FBSSxNQUFNLElBQUlxSCxHQUFFLEdBQUVxeEQsY0FBZSxtRkFDNUMsSUFBSXJnRSxFQUFJcTZELEdBQUdydEQsRUFBRXMvQyxHQUFHdC9DLEVBQUdBLEVBQUVzL0MsR0FBRzZTLGdCQUN4QixPQUFPLElBQUl1WixHQUFHL3dFLEVBQUdxRixFQUFFbS9ELEdBQUluc0UsRUFBR2dOLEVBQUV3b0UsU0FBVXhvRSxFQUFFaWhELEtBQ3pDaHdELEVBeERtQixDQXlEeEJzdUUsSUFBS0MsR0FBbUIsV0FDdEIsU0FBU3gvRCxLQUNULE9BQU9BLEVBQUUvTSxVQUFVczhFLFdBQWEsU0FBU3Z2RSxFQUFHMEIsR0FDeEMsT0FBTyxFQUFFL1EsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUloSyxLQUNSLE9BQU8sRUFBRUEsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wUSxLQUFLMDlCLEdBQUssQ0FBRSxFQUFjLElBQU8xOUIsS0FBSzA5QixHQUFLcnVCLEVBQUVxdUIsR0FBSTE5QixLQUFLdTFDLEdBQUtsbUMsRUFBRWttQyxHQUFJdjFDLEtBQUtvK0IsR0FBS3ArQixLQUFLdXdELEdBQUd4L0MsR0FDMUYvUSxLQUFLeTRDLEdBQUt6NEMsS0FBSysrRSxHQUFHaHVFLEdBQUkvUSxLQUFLbTRDLEdBQUtuNEMsS0FBS2cvRSxHQUFHanVFLEdBQUkvUSxLQUFLNjdFLEdBQUs3N0UsS0FBS2kvRSxHQUFHbHVFLEdBQ3hDMUIsRUFBRXN2RSxpQkFBa0IzK0UsS0FBS3UxQyxHQUFHaFksR0FBSyxTQUFTbHVCLEdBQzVELE9BQU9pc0UsR0FBR3R4RSxFQUFFNnhFLEdBQUl4c0UsRUFBRyxJQUNwQnJQLEtBQUt5NEMsR0FBRzdlLEdBQUdzbEQsR0FBS3ZELEdBQUc3dUUsS0FBSyxLQUFNOU0sS0FBSzY3RSxJQUFLLENBQUUsRUFBY3hDLEdBQUdyNUUsS0FBS3k0QyxHQUFJejRDLEtBQUs2N0UsR0FBRzVqQyxNQUVqRixLQUFLLEVBQ0g1MUMsRUFBRWdPLE9BQVFoTyxFQUFFK04sTUFBUSxFQUV0QixLQUFLLEVBQ0gsTUFBTyxDQUFFLFdBSXRCZixFQUFFL00sVUFBVTA4RSxHQUFLLFNBQVMzdkUsR0FDekIsT0FBTyxJQUFJb2hFLElBQ1pwaEUsRUFBRS9NLFVBQVVpdUQsR0FBSyxTQUFTbGhELEdBQ3pCLElBQUlyRixFQUFHM0gsRUFBSWl4RSxHQUFHamtFLEVBQUVzL0MsR0FBR3QvQyxHQUFJMEIsR0FBSy9HLEVBQUlxRixFQUFFcy9DLEdBQUksSUFBSWdnQixHQUFHM2tFLElBQ2EsT0FBTyxTQUFTcUYsRUFBR3JGLEVBQUczSCxHQUM1RSxPQUFPLElBQUk0NkQsR0FBRzV0RCxFQUFHckYsRUFBRzNILEdBRHlDLENBRS9EZ04sRUFBRXVxQyxZQUFhN29DLEVBQUcxTyxJQUNyQmdOLEVBQUUvTSxVQUFVeThFLEdBQUssU0FBUzF2RSxHQUN6QixJQUFJckYsRUFBRzNILEVBQUcwTyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsRUFBSXZ3QixLQUN2QixPQUFPZ0ssRUFBSWhLLEtBQUswOUIsR0FBSXI3QixFQUFJckMsS0FBS28rQixHQUFJcnRCLEVBQUkxQixFQUFFbS9ELEdBQUlsdUUsRUFBSSxTQUFTK08sR0FDcEQsT0FBT2lzRSxHQUFHL3FELEVBQUVzckQsR0FBSXhzRSxFQUFHLElBQ3BCbE4sRUFBSTRyRSxHQUFHalksS0FBTyxJQUFJaVksR0FBSyxJQUFJMlEsR0FBSSxJQUFJbEcsR0FBR3h1RSxFQUFHM0gsRUFBRzBPLEVBQUd6USxFQUFHNkIsSUFDdERrTixFQUFFL00sVUFBVTI4RSxHQUFLLFNBQVM1dkUsRUFBR3JGLEdBQzVCLE9BQU8sU0FBU3FGLEVBQUdyRixFQUFHM0gsRUFFdEIwTyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsR0FDTCxJQUFJamhCLEVBQUksSUFBSXVzRSxHQUFHeHNFLEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxFQUFHNkIsR0FDOUIsT0FBT291QixJQUFNamhCLEVBQUVpb0MsSUFBSyxHQUFLam9DLEVBSnRCLENBS0x0UCxLQUFLMDlCLEdBQUkxOUIsS0FBS3k0QyxHQUFJejRDLEtBQUttNEMsR0FBSW40QyxLQUFLdTFDLEdBQUlsbUMsRUFBRWloRCxHQUFJamhELEVBQUVrcUMsR0FBSXZ2QyxJQUNuRHFGLEVBQUUvTSxVQUFVODNFLFVBQVksV0FDdkIsT0FBTyxTQUFTL3FFLEdBQ1osT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQ0osT0FBTyxFQUFFaEssTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wRyxFQUFJLEdBQUVxRixHQUFJLEdBQUUsY0FBZSw4QkFBK0JyRixFQUFFa3pCLEdBQUdsVSxJQUFJLEdBQzFFLENBQUUsRUFBY28wQyxHQUFHcHpELElBRXJCLEtBQUssRUFDSCxPQUFPM0gsRUFBRWdPLE9BQVFyRyxFQUFFczBCLEdBQUc3TSxLQUd0QnpuQixFQUFFMnpCLEdBQUc1M0IsSUFBSSxXQUEwQixDQUFFLFVBYjlDLENBaUJML0YsS0FBS3k0QyxLQUNScHBDLEVBNURtQixHQTZEckJzZ0UsR0FBbUIsV0FDcEIsU0FBU3RnRSxFQUFFQSxHQUNQclAsS0FBS29XLFNBQVcvRyxFQUtoQnJQLEtBQUttL0UsT0FBUSxFQUVqQixPQUFPOXZFLEVBQUUvTSxVQUFVUixLQUFPLFNBQVN1TixHQUMvQnJQLEtBQUtvVyxTQUFTdFUsTUFBUTlCLEtBQUtvL0UsR0FBR3AvRSxLQUFLb1csU0FBU3RVLEtBQU11TixJQUNuREEsRUFBRS9NLFVBQVV1QyxNQUFRLFNBQVN3SyxHQUM1QnJQLEtBQUtvVyxTQUFTdlIsTUFBUTdFLEtBQUtvL0UsR0FBR3AvRSxLQUFLb1csU0FBU3ZSLE1BQU93SyxHQUFLMEgsUUFBUWxTLE1BQU0sdUNBQXdDd0ssSUFDL0dBLEVBQUUvTSxVQUFVKzhFLEdBQUssV0FDaEJyL0UsS0FBS20vRSxPQUFRLEdBQ2Q5dkUsRUFBRS9NLFVBQVU4OEUsR0FBSyxTQUFTL3ZFLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSXJDLEtBQ1JBLEtBQUttL0UsT0FBUzE3RCxZQUFXLFdBQ3JCcGhCLEVBQUU4OEUsT0FBUzl2RSxFQUFFckYsS0FDYixJQUNMcUYsRUFwQmlCLEdBcUJuQjIvRCxHQUFLLFNBQVMzL0QsR0FDZnJQLEtBQUtzL0UsR0FBS2p3RSxHQW1DZCxTQUFTdWdFLEdBQUd2Z0UsRUFBR3JGLEVBQUczSCxHQUNkLElBQUtBLEVBQUcsTUFBTSxJQUFJZ1AsR0FBRSxHQUFFMndELGlCQUFrQixZQUFjM3lELEVBQUkscUNBQXVDckYsRUFBSSxLQUd6RyxTQUFTMGxFLEdBQUdyZ0UsRUFBR3JGLEdBQ1gsUUFBSSxJQUFXQSxFQUFHLE1BQU8sQ0FDckJ1MUUsT0FBTyxHQUVYLFFBQUksSUFBV3YxRSxFQUFFdzFFLGtCQUFlLElBQVd4MUUsRUFBRXUxRSxNQUFPLE1BQU0sSUFBSWx1RSxHQUFFLEdBQUUyd0QsaUJBQWtCLHNDQUF3QzN5RCxFQUFJLDBEQUNoSSxPQUFPckYsRUFLUCxTQUFTd2xFLEdBQUduZ0UsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FDckIsSUFBSSxJQUFPL0csSUFBSyxJQUFPK0csRUFBRyxNQUFNLElBQUlNLEdBQUUsR0FBRTJ3RCxpQkFBa0IzeUQsRUFBSSxRQUFVaE4sRUFBSSw2QkFPTCxTQUFTbWhCLEdBQUduVSxHQUNuRixRQUFJLElBQVdBLEVBQUcsTUFBTyxZQUN6QixHQUFJLE9BQVNBLEVBQUcsTUFBTyxPQUN2QixHQUFJLGlCQUFtQkEsRUFBRyxPQUFPQSxFQUFFMU8sT0FBUyxLQUFPME8sRUFBSUEsRUFBRWtqQixVQUFVLEVBQUcsSUFBTSxPQUM1RWx2QixLQUFLQyxVQUFVK0wsR0FDZixHQUFJLGlCQUFtQkEsR0FBSyxrQkFBb0JBLEVBQUcsTUFBTyxHQUFLQSxFQUMvRCxHQUFJLGlCQUFtQkEsRUFBRyxDQUN0QixHQUFJQSxhQUFhcE8sTUFBTyxNQUFPLFdBQy9CLElBQUkrSSxFQUVKLFNBQVNxRixHQUNMLEdBQUlBLEVBQUU1TSxZQUFhLENBQ2YsSUFBSXVILEVBQUksNEJBQTRCNnFCLEtBQUt4bEIsRUFBRTVNLFlBQVkxQyxZQUN2RCxHQUFJaUssR0FBS0EsRUFBRXJKLE9BQVMsRUFBRyxPQUFPcUosRUFBRSxHQUVwQyxPQUFPLEtBTFgsQ0FNRXFGLEdBQ0YsT0FBT3JGLEVBQUksWUFBY0EsRUFBSSxVQUFZLFlBRTdDLE1BQU8sbUJBQXFCcUYsRUFBSSxhQUFlLEtBR25ELFNBQVM0L0QsR0FBRzUvRCxFQUVackYsR0FDSSxHQUFJcUYsYUFBYTIvRCxLQUFPMy9ELEVBQUlBLEVBQUVpd0UsTUFBT2p3RSxhQUFhckYsR0FBSSxDQUNsRCxHQUFJQSxFQUFFdEgsT0FBUzJNLEVBQUU1TSxZQUFZQyxLQUFNLE1BQU0sSUFBSTJPLEdBQUUsR0FBRTJ3RCxpQkFBa0IsdUdBQ25FLElBQUkzL0QsRUFBSW1oQixHQUFHblUsR0FDWCxNQUFNLElBQUlnQyxHQUFFLEdBQUUyd0QsaUJBQWtCLGtCQUFvQmg0RCxFQUFFdEgsS0FBTyxrQkFBb0JMLEdBRXJGLE9BQU9nTixFQUdYLFNBQVN3Z0UsR0FBR3hnRSxFQUFHckYsR0FDWCxHQUFJQSxHQUFLLEVBQUcsTUFBTSxJQUFJcUgsR0FBRSxHQUFFMndELGlCQUFrQixZQUFjM3lELEVBQUksOENBQWdEckYsRUFBSSxLQXNCbEgsSUFBSW5JLEdBSVIsU0FBU3dOLEdBQ0xyUCxLQUFLeS9FLEdBQUtwd0UsR0FDWCsvRCxHQUFtQixTQUFTcGxFLEdBQzNCLFNBQVMzSCxJQUNMLE9BQU8sT0FBUzJILEdBQUtBLEVBQUU3RSxNQUFNbkYsS0FBTW1HLFlBQWNuRyxLQUVyRCxPQUFPLEVBQUVxQyxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVVvOUUsR0FBSyxTQUFTcndFLEdBQ3RDLEdBQUksSUFBcUJBLEVBQUVzd0UsR0FBSSxNQUFNLElBQW1CdHdFLEVBQUVzd0UsR0FBS3R3RSxFQUFFdXdFLEdBQUc1L0UsS0FBS3kvRSxHQUFLLDJEQUE2RHB3RSxFQUFFdXdFLEdBQUc1L0UsS0FBS3kvRSxHQUFLLDZEQUdsSixPQUFPcHdFLEVBQUVrNUIsR0FBRzlvQyxLQUFLNFAsRUFBRXF2QyxNQUFPLE1BQ25DcjhDLEVBQUVDLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBQzlCLE9BQU9BLGFBQWFoTixHQUNyQkEsRUFYZSxDQVlwQlIsSUFzQ0YsU0FBU3N0RSxHQUFHOS9ELEVBQUdyRixFQUFHM0gsR0FDZCxPQUFPLElBQUkwdkUsR0FBRyxDQUNWNE4sR0FBSSxFQUNKRSxHQUFJNzFFLEVBQUU0aUIsU0FBU2l6RCxHQUNmaDRFLFdBQVl3SCxFQUFFb3dFLEdBQ2R4d0UsR0FBSTVNLEdBQ0wySCxFQUFFcUYsRUFBR3JGLEVBQUVtaUUsV0FBWW5pRSxFQUFFODFFLDJCQUc1QixJQUFJNVEsR0FBbUIsU0FBU2xsRSxHQUM1QixTQUFTM0gsSUFDTCxPQUFPLE9BQVMySCxHQUFLQSxFQUFFN0UsTUFBTW5GLEtBQU1tRyxZQUFjbkcsS0FFckQsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbzlFLEdBQUssU0FBU3J3RSxHQUN0QyxPQUFPLElBQUk0NUIsR0FBRzU1QixFQUFFcXZDLEtBQU0sSUFBSTBKLEtBQzNCL2xELEVBQUVDLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBQzlCLE9BQU9BLGFBQWFoTixHQUNyQkEsRUFSZ0IsQ0FTckJSLElBQUtvdUUsR0FBbUIsU0FBU2ptRSxHQUMvQixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsS0FBTXFQLElBQU1yUCxNQUFNKy9FLEdBQUsxOUUsRUFBRzBPLEVBRWpELE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJM0gsRUFBRUMsVUFBVW85RSxHQUFLLFNBQVNyd0UsR0FDdEMsSUFBSXJGLEVBQUltbEUsR0FBR252RSxLQUFNcVAsR0FDTixHQUFLaE4sRUFBSXJDLEtBQUsrL0UsR0FBRzkvRSxLQUFJLFNBQVVvUCxHQUN0QyxPQUFPLEdBQUdBLEVBQUdyRixNQUNaK0csRUFBSSxJQUFJZzFCLEdBQUcxakMsR0FDaEIsT0FBTyxJQUFJNG1DLEdBQUc1NUIsRUFBRXF2QyxLQUFNM3RDLElBQ3ZCMU8sRUFBRUMsVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FFOUIsT0FBT3JQLE9BQVNxUCxHQUNqQmhOLEVBZG1CLENBZXhCUixJQUFLcXVFLEdBQW1CLFNBQVNsbUUsR0FDL0IsU0FBUzNILEVBQUVnTixFQUFHaE4sR0FDVixJQUFJME8sRUFBSS9RLEtBQ1IsT0FBUStRLEVBQUkvRyxFQUFFekgsS0FBS3ZDLEtBQU1xUCxJQUFNclAsTUFBTSsvRSxHQUFLMTlFLEVBQUcwTyxFQUVqRCxPQUFPLEVBQUUxTyxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVVvOUUsR0FBSyxTQUFTcndFLEdBQ3RDLElBQUlyRixFQUFJbWxFLEdBQUdudkUsS0FBTXFQLEdBQ04sR0FBS2hOLEVBQUlyQyxLQUFLKy9FLEdBQUc5L0UsS0FBSSxTQUFVb1AsR0FDdEMsT0FBTyxHQUFHQSxFQUFHckYsTUFDWitHLEVBQUksSUFBSSsyQixHQUFHemxDLEdBQ2hCLE9BQU8sSUFBSTRtQyxHQUFHNTVCLEVBQUVxdkMsS0FBTTN0QyxJQUN2QjFPLEVBQUVDLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBRTlCLE9BQU9yUCxPQUFTcVAsR0FDakJoTixFQWRtQixDQWV4QlIsSUFBS3d0RSxHQUFtQixTQUFTcmxFLEdBQy9CLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsSUFBSTBPLEVBQUkvUSxLQUNSLE9BQVErUSxFQUFJL0csRUFBRXpILEtBQUt2QyxLQUFNcVAsSUFBTXJQLE1BQU1nZ0YsR0FBSzM5RSxFQUFHME8sRUFFakQsT0FBTyxFQUFFMU8sRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVbzlFLEdBQUssU0FBU3J3RSxHQUN0QyxJQUFJckYsRUFBSSxJQUFJKytCLEdBQUcxNUIsRUFBRTg4RCxXQUFZcG9DLEdBQUcxMEIsRUFBRTg4RCxXQUFZbnNFLEtBQUtnZ0YsS0FDbkQsT0FBTyxJQUFJLzJDLEdBQUc1NUIsRUFBRXF2QyxLQUFNMTBDLElBQ3ZCM0gsRUFBRUMsVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FFOUIsT0FBT3JQLE9BQVNxUCxHQUNqQmhOLEVBWG1CLENBWXhCUixJQUFLaXVFLEdBQW1CLFdBT3RCLFNBQVN6Z0UsRUFBRUEsRUFBR3JGLEdBQ1YsSUFBS283QixTQUFTLzFCLElBQU1BLEdBQUssSUFBTUEsRUFBSSxHQUFJLE1BQU0sSUFBSWdDLEdBQUUsR0FBRTJ3RCxpQkFBa0IsMERBQTREM3lELEdBQ25JLElBQUsrMUIsU0FBU3A3QixJQUFNQSxHQUFLLEtBQU9BLEVBQUksSUFBSyxNQUFNLElBQUlxSCxHQUFFLEdBQUUyd0QsaUJBQWtCLDZEQUErRGg0RCxHQUN4SWhLLEtBQUtpZ0YsR0FBSzV3RSxFQUFHclAsS0FBS2tnRixHQUFLbDJFLEVBRTNCLE9BQU96SSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLFdBQVksQ0FJbER3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtpZ0YsSUFFaEJqeUUsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxZQUFhLENBSWhEd0QsSUFBSyxXQUNELE9BQU85RixLQUFLa2dGLElBRWhCbHlFLFlBQVksRUFDWmlPLGNBQWMsSUFRbEI1TSxFQUFFL00sVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDM0IsT0FBT3JQLEtBQUtpZ0YsS0FBTzV3RSxFQUFFNHdFLElBQU1qZ0YsS0FBS2tnRixLQUFPN3dFLEVBQUU2d0UsSUFDMUM3d0UsRUFBRS9NLFVBQVVvd0IsT0FBUyxXQUNwQixNQUFPLENBQ0hxM0MsU0FBVS9wRSxLQUFLaWdGLEdBQ2ZqVyxVQUFXaHFFLEtBQUtrZ0YsS0FPeEI3d0UsRUFBRS9NLFVBQVU0L0IsRUFBSSxTQUFTN3lCLEdBQ3JCLE9BQU8sR0FBRXJQLEtBQUtpZ0YsR0FBSTV3RSxFQUFFNHdFLEtBQU8sR0FBRWpnRixLQUFLa2dGLEdBQUk3d0UsRUFBRTZ3RSxLQUN6Qzd3RSxFQW5EbUIsR0FvRHJCbWhFLEdBQW1CLFdBQ3BCLFNBQVNuaEUsRUFBRUEsR0FDUHJQLEtBQUttZ0YsR0FBSzl3RSxFQU9QLE9BQU9BLEVBQUVvMUQsaUJBQW1CLFNBQVN6NkQsR0FDeEMsSUFDSSxPQUFPLElBQUlxRixFQUFFbTFELEdBQUdDLGlCQUFpQno2RCxJQUNuQyxNQUFPQSxHQUNMLE1BQU0sSUFBSXFILEdBQUUsR0FBRTJ3RCxpQkFBa0IsaURBQW1EaDRELEtBUTNGcUYsRUFBRXExRCxlQUFpQixTQUFTMTZELEdBQ3hCLE9BQU8sSUFBSXFGLEVBQUVtMUQsR0FBR0UsZUFBZTE2RCxLQU9uQ3FGLEVBQUUvTSxVQUFVcWlFLFNBQVcsV0FDbkIsT0FBTzNrRSxLQUFLbWdGLEdBQUd4YixZQU9uQnQxRCxFQUFFL00sVUFBVXNpRSxhQUFlLFdBQ3ZCLE9BQU81a0UsS0FBS21nRixHQUFHdmIsZ0JBT25CdjFELEVBQUUvTSxVQUFVdkMsU0FBVyxXQUNuQixNQUFPLGlCQUFtQkMsS0FBSzJrRSxXQUFhLEtBUWhEdDFELEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUMzQixPQUFPclAsS0FBS21nRixHQUFHeGUsUUFBUXR5RCxFQUFFOHdFLEtBQzFCOXdFLEVBeERpQixHQXlEbkIwZ0UsR0FBSyxJQUFJcDNELElBQUt5M0QsR0FBbUIsV0FDbEMsU0FBUy9nRSxFQUFFQSxHQUNQLElBQUlyRixFQUNKLFFBQUksSUFBV3FGLEVBQUUwc0IsS0FBTSxDQUNuQixRQUFJLElBQVcxc0IsRUFBRW95RCxJQUFLLE1BQU0sSUFBSXB3RCxHQUFFLEdBQUUyd0QsaUJBQWtCLHNEQUN0RGhpRSxLQUFLKzdCLEtBQU8sMkJBQTRCLzdCLEtBQUt5aEUsS0FBTSxPQUNoRHpoRSxLQUFLKzdCLEtBQU8xc0IsRUFBRTBzQixLQUFNLzdCLEtBQUt5aEUsSUFBTSxRQUFVejNELEVBQUlxRixFQUFFb3lELFdBQVEsSUFBV3ozRCxHQUFLQSxFQUM5RSxHQUFJaEssS0FBSzQ1QyxZQUFjdnFDLEVBQUV1cUMsWUFBYTU1QyxLQUFLOC9FLDRCQUE4Qnp3RSxFQUFFeXdFLCtCQUMzRSxJQUFXendFLEVBQUV3dkUsZUFBZ0I3K0UsS0FBSzYrRSxlQUFpQixhQUFlLENBQzlELElBQUssSUFBTXh2RSxFQUFFd3ZFLGdCQUFrQnh2RSxFQUFFd3ZFLGVBQWlCLFFBQVMsTUFBTSxJQUFJeHRFLEdBQUUsR0FBRTJ3RCxpQkFBa0IsMkNBQzNGaGlFLEtBQUs2K0UsZUFBaUJ4dkUsRUFBRXd2RSxlQUU1QjcrRSxLQUFLb2dGLCtCQUFpQy93RSxFQUFFK3dFLDZCQUE4QnBnRixLQUFLcWdGLG9DQUFzQ2h4RSxFQUFFZ3hFLGtDQUNuSDdRLEdBQUcsK0JBQWdDbmdFLEVBQUUrd0UsNkJBQThCLG9DQUFxQy93RSxFQUFFZ3hFLG1DQUU5RyxPQUFPaHhFLEVBQUUvTSxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUNsQyxPQUFPclAsS0FBSys3QixPQUFTMXNCLEVBQUUwc0IsTUFBUS83QixLQUFLeWhFLE1BQVFweUQsRUFBRW95RCxLQUFPemhFLEtBQUs0NUMsY0FBZ0J2cUMsRUFBRXVxQyxhQUFlNTVDLEtBQUs2K0UsaUJBQW1CeHZFLEVBQUV3dkUsZ0JBQWtCNytFLEtBQUtvZ0YsK0JBQWlDL3dFLEVBQUUrd0UsOEJBQWdDcGdGLEtBQUtxZ0Ysb0NBQXNDaHhFLEVBQUVneEUsbUNBQXFDcmdGLEtBQUs4L0UsNEJBQThCendFLEVBQUV5d0UsMkJBQ3ZVendFLEVBakIrQixHQTBDdEMsU0FBU2tnRSxLQUNMLEdBQUksb0JBQXNCMXJELFdBQVksTUFBTSxJQUFJeFMsR0FBRSxHQUFFcXhELGNBQWUsc0RBR0ssU0FBUzRkLEtBQ2pGLEdBQUksb0JBQXNCbnpFLEtBQU0sTUFBTSxJQUFJa0UsR0FBRSxHQUFFcXhELGNBQWUsMkRBWTdELElBQUlzTixHQUFtQixTQUFTaG1FLEdBQ2hDLFNBQVMzSCxJQUNMLE9BQU8sT0FBUzJILEdBQUtBLEVBQUU3RSxNQUFNbkYsS0FBTW1HLFlBQWNuRyxLQUVyRCxPQUFPLEVBQUVxQyxFQUFHMkgsR0FBSTNILEVBQUVvaUUsaUJBQW1CLFNBQVNwMUQsR0FDMUNpeEUsS0FDQSxJQUNJLE9BQU8sSUFBSWorRSxFQUFFbWlFLEdBQUdDLGlCQUFpQnAxRCxJQUNuQyxNQUFPQSxHQUNMLE1BQU0sSUFBSWdDLEdBQUUsR0FBRTJ3RCxpQkFBa0IsZ0RBQWtEM3lELEtBRXZGaE4sRUFBRXFpRSxlQUFpQixTQUFTcjFELEdBQzNCLE9BQU9rZ0UsS0FBTSxJQUFJbHRFLEVBQUVtaUUsR0FBR0UsZUFBZXIxRCxLQUN0Q2hOLEVBQUVDLFVBQVVxaUUsU0FBVyxXQUN0QixPQUFPMmIsS0FBTXQyRSxFQUFFMUgsVUFBVXFpRSxTQUFTcGlFLEtBQUt2QyxPQUN4Q3FDLEVBQUVDLFVBQVVzaUUsYUFBZSxXQUMxQixPQUFPMkssS0FBTXZsRSxFQUFFMUgsVUFBVXNpRSxhQUFhcmlFLEtBQUt2QyxPQUM1Q3FDLEVBQUVDLFVBQVV2QyxTQUFXLFdBQ3RCLE1BQU8sZ0JBQWtCQyxLQUFLMmtFLFdBQWEsS0FDNUN0aUUsRUFuQm9CLENBb0J6Qm11RSxJQUFLTSxHQUFtQixXQUN0QixTQUFTemhFLEtBQ1QsT0FBT0EsRUFBRS9NLFVBQVVpK0UsR0FBSyxTQUFTbHhFLEVBQUdyRixHQUNoQyxZQUFRLElBQVdBLElBQU1BLEVBQUksUUFBU3ErRCxHQUFHaDVELElBQ3ZDLEtBQUssRUFDSCxPQUFPLEtBRVQsS0FBSyxFQUNILE9BQU9BLEVBQUVzNkQsYUFFWCxLQUFLLEVBQ0gsT0FBT25CLEdBQUduNUQsRUFBRTQ2RCxjQUFnQjU2RCxFQUFFNjZELGFBRWhDLEtBQUssRUFDSCxPQUFPbHFFLEtBQUt3Z0YsR0FBR254RSxFQUFFbzZELGdCQUVuQixLQUFLLEVBQ0gsT0FBT3pwRSxLQUFLeWdGLEdBQUdweEUsRUFBR3JGLEdBRXBCLEtBQUssRUFDSCxPQUFPcUYsRUFBRWk2RCxZQUVYLEtBQUssRUFDSCxPQUFPdHBFLEtBQUswZ0YsR0FBR2pZLEdBQUdwNUQsRUFBRXU2RCxhQUV0QixLQUFLLEVBQ0gsT0FBTzVwRSxLQUFLMmdGLEdBQUd0eEUsRUFBRXc2RCxnQkFFbkIsS0FBSyxFQUNILE9BQU83cEUsS0FBSzRnRixHQUFHdnhFLEVBQUV5NkQsZUFFbkIsS0FBSyxFQUNILE9BQU85cEUsS0FBSzZnRixHQUFHeHhFLEVBQUU4NkQsV0FBWW5nRSxHQUUvQixLQUFLLEdBQ0gsT0FBT2hLLEtBQUs4Z0YsR0FBR3p4RSxFQUFFODVELFNBQVVuL0QsR0FFN0IsUUFDRSxNQUFNLE9BRVhxRixFQUFFL00sVUFBVXcrRSxHQUFLLFNBQVN6eEUsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJckMsS0FBTStRLEVBQUksR0FDbEIsT0FBTyxHQUFFMUIsRUFBRSs1RCxRQUFVLElBQUksU0FBVS81RCxFQUFHL08sR0FDbEN5USxFQUFFMUIsR0FBS2hOLEVBQUVrK0UsR0FBR2pnRixFQUFHMEosTUFDZCtHLEdBQ04xQixFQUFFL00sVUFBVXMrRSxHQUFLLFNBQVN2eEUsR0FDekIsT0FBTyxJQUFJeWdFLEdBQUd0SCxHQUFHbjVELEVBQUUwNkQsVUFBV3ZCLEdBQUduNUQsRUFBRTI2RCxhQUNwQzM2RCxFQUFFL00sVUFBVXUrRSxHQUFLLFNBQVN4eEUsRUFBR3JGLEdBQzVCLElBQUkzSCxFQUFJckMsS0FDUixPQUFRcVAsRUFBRTZLLFFBQVUsSUFBSWphLEtBQUksU0FBVW9QLEdBQ2xDLE9BQU9oTixFQUFFaytFLEdBQUdseEUsRUFBR3JGLE9BRXBCcUYsRUFBRS9NLFVBQVVtK0UsR0FBSyxTQUFTcHhFLEVBQUdyRixHQUM1QixPQUFRQSxHQUNOLElBQUssV0FDSCxJQUFJM0gsRUFBSTJsRSxHQUFHMzRELEdBQ1gsT0FBTyxNQUFRaE4sRUFBSSxLQUFPckMsS0FBS3VnRixHQUFHbCtFLEVBQUcySCxHQUV2QyxJQUFLLFdBQ0gsT0FBT2hLLEtBQUt3Z0YsR0FBRzFZLEdBQUd6NEQsSUFFcEIsUUFDRSxPQUFPLE9BRVpBLEVBQUUvTSxVQUFVaytFLEdBQUssU0FBU254RSxHQUN6QixJQUFJckYsRUFBSTArRCxHQUFHcjVELEdBQ1gsT0FBTyxJQUFJeWhCLEdBQUU5bUIsRUFBRTY0RCxRQUFTNzRELEVBQUUwL0QsUUFDM0JyNkQsRUFBRS9NLFVBQVV5K0UsR0FBSyxTQUFTMXhFLEVBQUdyRixHQUM1QixJQUFJM0gsRUFBSSxHQUFFK08sRUFBRS9CLEdBQ1osR0FBRXFzRCxHQUFHcjVELElBQ0wsSUFBSTBPLEVBQUksSUFBSVosR0FBRTlOLEVBQUV5RCxJQUFJLEdBQUl6RCxFQUFFeUQsSUFBSSxJQUFLeEYsRUFBSSxJQUFJLEdBQUUrQixFQUFFb08sRUFBRSxJQUNqRCxPQUFPTSxFQUFFNHdELFFBQVEzM0QsSUFFakIsR0FBRSxZQUFjMUosRUFBSSwrREFBaUV5USxFQUFFZ1EsVUFBWSxJQUFNaFEsRUFBRTJ3RCxTQUFXLHdGQUEwRjEzRCxFQUFFK1csVUFBWSxJQUFNL1csRUFBRTAzRCxTQUFXLGNBQ2pQcGhFLEdBQ0QrTyxFQTNFbUIsR0E0RXJCaWdFLEdBQW1CLFNBQVN0bEUsR0FDN0IsU0FBUzNILEVBQUVnTixHQUNQLElBQUloTixFQUFJckMsS0FDUixPQUFRcUMsRUFBSTJILEVBQUV6SCxLQUFLdkMsT0FBU0EsTUFBTWdoRixVQUFZM3hFLEVBQUdoTixFQUVyRCxPQUFPLEVBQUVBLEVBQUcySCxHQUFJM0gsRUFBRUMsVUFBVW8rRSxHQUFLLFNBQVNyeEUsR0FDdEMsT0FBTyxJQUFJMmdFLEdBQUczZ0UsSUFDZmhOLEVBQUVDLFVBQVVxK0UsR0FBSyxTQUFTdHhFLEdBQ3pCLElBQUlyRixFQUFJaEssS0FBSytnRixHQUFHMXhFLEVBQUdyUCxLQUFLZ2hGLFVBQVVDLElBQ2xDLE9BQU8sR0FBR0MsR0FBR2wzRSxFQUFHaEssS0FBS2doRixVQUE0QixPQUNsRDMrRSxFQVZpQixDQVd0Qnl1RSxJQUFLVCxHQUFtQixXQUt0QixTQUFTaGhFLEVBQUVBLEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxHQUNuQk4sS0FBS21oRixHQUFLOXhFLEVBQUdyUCxLQUFLb2hGLEdBQUtwM0UsRUFBR2hLLEtBQUtxaEYsR0FBS2gvRSxFQUFHckMsS0FBS3NoRixHQUFLdndFLEVBQUcvUSxLQUFLdWhGLEdBQUtqaEYsRUFFbEUsT0FBT2lCLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsS0FBTSxDQUMrQndELElBQUssV0FDNUUsT0FBTzlGLEtBQUtxaEYsR0FBRzNpQyxLQUFLbm5CLEtBRXhCdnBCLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsTUFBTyxDQUkxQ3dELElBQUssV0FDRCxPQUFPLElBQUk4ckUsR0FBRzV4RSxLQUFLbWhGLEdBQUluaEYsS0FBS3VoRixHQUFJdmhGLEtBQUtxaEYsS0FFekNyekUsWUFBWSxFQUNaaU8sY0FBYyxJQU9sQjVNLEVBQUUvTSxVQUFVNm9FLE9BQVMsV0FDakIsT0FBTyxPQUFTbnJFLEtBQUtzaEYsSUFTekJqeUUsRUFBRS9NLFVBQVVpQixLQUFPLFdBQ2YsR0FBSXZELEtBQUtzaEYsR0FBSSxDQUNULEdBQUl0aEYsS0FBS3VoRixHQUFJLENBR1QsSUFBSWx5RSxFQUFJLElBQUkraEUsR0FBR3B4RSxLQUFLbWhGLEdBQUluaEYsS0FBS29oRixHQUFJcGhGLEtBQUtxaEYsR0FBSXJoRixLQUFLc2hGLEdBQzlCLE1BQ2pCLE9BQU90aEYsS0FBS3VoRixHQUFHQyxjQUFjbnlFLEdBRWpDLE9BQU9yUCxLQUFLb2hGLEdBQUdiLEdBQUd2Z0YsS0FBS3NoRixHQUFHNW1CLFFBY2xDcnJELEVBQUUvTSxVQUFVd0QsSUFBTSxTQUFTdUosR0FDdkIsR0FBSXJQLEtBQUtzaEYsR0FBSSxDQUNULElBQUl0M0UsRUFBSWhLLEtBQUtzaEYsR0FBRy85RSxPQUFPMGdFLE1BQU1nTixHQUFHLHVCQUF3QjVoRSxJQUN4RCxHQUFJLE9BQVNyRixFQUFHLE9BQU9oSyxLQUFLb2hGLEdBQUdiLEdBQUd2MkUsS0FFdkNxRixFQW5FbUIsR0FvRXJCK2hFLEdBQW1CLFNBQVNwbkUsR0FDN0IsU0FBUzNILElBQ0wsT0FBTyxPQUFTMkgsR0FBS0EsRUFBRTdFLE1BQU1uRixLQUFNbUcsWUFBY25HLEtBTzlDLE9BQU8sRUFBRXFDLEVBQUcySCxHQUFJM0gsRUFBRUMsVUFBVWlCLEtBQU8sV0FDdEMsT0FBT3lHLEVBQUUxSCxVQUFVaUIsS0FBS2hCLEtBQUt2QyxPQUM5QnFDLEVBWGlCLENBWXRCZ3VFLElBeUJGLFNBQVNZLEdBQUc1aEUsRUFBR3JGLEdBQ1gsTUFBTyxpQkFBbUJBLEVBQUksR0FBR3FGLEVBQUdyRixHQUFLQSxhQUFhZ2xFLEdBQUtobEUsRUFBRXMxRSxHQUFHbUMsR0FBS3ozRSxFQUFFeTNFLEdBMEJ2RSxJQUFJdFIsR0FBbUIsV0FPdkIsU0FBUzlnRSxJQUNMLElBQUssSUFBSUEsRUFBSSxHQUFJckYsRUFBSSxFQUFHQSxFQUFJN0QsVUFBVXhGLE9BQVFxSixJQUFLcUYsRUFBRXJGLEdBQUs3RCxVQUFVNkQsR0FDcEUsSUFBSyxJQUFJM0gsRUFBSSxFQUFHQSxFQUFJZ04sRUFBRTFPLFNBQVUwQixFQUFHLEdBQUksSUFBTWdOLEVBQUVoTixHQUFHMUIsT0FBUSxNQUFNLElBQUkwUSxHQUFFLEdBQUUyd0QsaUJBQWtCLDJFQUMxRmhpRSxLQUFLeWhGLEdBQUssSUFBSSxHQUFFcHlFLEdBT2IsT0FBT0EsRUFBRS9NLFVBQVVxL0QsUUFBVSxTQUFTdHlELEdBQ3pDLE9BQU9yUCxLQUFLeWhGLEdBQUc5ZixRQUFRdHlELEVBQUVveUUsS0FDMUJweUUsRUFuQm9CLEdBb0J0QnVpRSxHQUFtQixXQUNwQixTQUFTdmlFLEVBQUVBLEVBQUdyRixFQUFHM0gsR0FDYnJDLEtBQUt1aEYsR0FBS3YzRSxFQUFHaEssS0FBS3FoRixHQUFLaC9FLEVBRXZCckMsS0FBSzZYLEtBQU8sV0FBWTdYLEtBQUtnaEYsVUFBWTN4RSxFQUU3QyxPQUFPOU4sT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxLQUFNLENBQzVDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLcWhGLEdBQUczaUMsTUFFbkIxd0MsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxLQUFNLENBSXpDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLcWhGLEdBQUczaUMsS0FBS25uQixLQUV4QnZwQixZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLE9BQVEsQ0FLM0N3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtxaEYsR0FBRzNpQyxLQUFLeFUsS0FFeEJsOEIsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxTQUFVLENBSTdDd0QsSUFBSyxXQUNELE9BQU8sSUFBSWdzRSxHQUFHOXhFLEtBQUtnaEYsVUFBV2hoRixLQUFLdWhGLEdBQUl2aEYsS0FBS3FoRixHQUFHM2lDLEtBQUt4UCxNQUV4RGxoQyxZQUFZLEVBQ1ppTyxjQUFjLElBWWxCNU0sRUFBRS9NLFVBQVVvL0UsY0FBZ0IsU0FBUzEzRSxHQUNqQyxPQUFPLElBQUlxRixFQUFFclAsS0FBS2doRixVQUFXaDNFLEVBQUdoSyxLQUFLcWhGLEtBQ3RDaHlFLEVBckRpQixHQXNEbkIyaEUsR0FBbUIsV0FFcEIsU0FBUzNoRSxFQUFFQSxFQUFHckYsRUFBRzNILEdBQ2JyQyxLQUFLdWhGLEdBQUt2M0UsRUFBR2hLLEtBQUsyaEYsR0FBS3QvRSxFQUV2QnJDLEtBQUs2WCxLQUFPLFFBQVM3WCxLQUFLZ2hGLFVBQVkzeEUsRUFXMUMsT0FBT0EsRUFBRS9NLFVBQVVvL0UsY0FBZ0IsU0FBUzEzRSxHQUN4QyxPQUFPLElBQUlxRixFQUFFclAsS0FBS2doRixVQUFXaDNFLEVBQUdoSyxLQUFLMmhGLEtBQ3RDdHlFLEVBbEJpQixHQW1CbkJ5aUUsR0FBbUIsU0FBUzluRSxHQUM3QixTQUFTM0gsRUFBRWdOLEVBQUdoTixFQUFHME8sR0FDYixJQUFJelEsRUFBSU4sS0FDUixPQUFRTSxFQUFJMEosRUFBRXpILEtBQUt2QyxLQUFNcVAsRUFBR2hOLEVBQUcwMkQsR0FBR2hvRCxLQUFPL1EsTUFBTWdoRixVQUFZM3hFLEVBQUcvTyxFQUFFc2hGLEdBQUs3d0UsRUFBR3pRLEVBQUV1WCxLQUFPLGFBQ2pGdlgsRUFFSixPQUFPLEVBQUUrQixFQUFHMkgsR0FBSXpJLE9BQU9zRSxlQUFleEQsRUFBRUMsVUFBVyxLQUFNLENBQ2pCd0QsSUFBSyxXQUNyQyxPQUFPOUYsS0FBSzJoRixHQUFHampDLEtBQUtubkIsS0FFeEJ2cEIsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLE9BQVEsQ0FLM0N3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUsyaEYsR0FBR2pqQyxLQUFLeFUsS0FFeEJsOEIsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLFNBQVUsQ0FLN0N3RCxJQUFLLFdBQ0QsSUFBSXVKLEVBQUlyUCxLQUFLNGhGLEdBQUcxeUMsSUFDaEIsT0FBTzcvQixFQUFFaTVDLElBQU0sS0FBTyxJQUFJc3BCLEdBQUc1eEUsS0FBS2doRixVQUNqQixLQUFNLElBQUksR0FBRTN4RSxLQUVqQ3JCLFlBQVksRUFDWmlPLGNBQWMsSUFXbEI1WixFQUFFQyxVQUFVby9FLGNBQWdCLFNBQVNyeUUsR0FDakMsT0FBTyxJQUFJaE4sRUFBRXJDLEtBQUtnaEYsVUFBVzN4RSxFQUFHclAsS0FBSzRoRixLQUN0Q3YvRSxFQTlDaUIsQ0ErQ3RCMnVFLElBK0JGLFNBQVNhLEdBQUd4aUUsR0FDUixJQUFJckYsRUFBSXFGLEVBQUV3eUUsS0FBTXgvRSxFQUFJaXhFLEdBQUdqa0UsRUFBRTR4RSxJQUN6QixPQUFPLElBQUkvTyxHQUFHN2lFLEVBQUU0eEUsS0FBTWozRSxFQUFFODFFLDBCQUEyQno5RSxHQWtCbkQsSUFBSW92RSxHQUFLLFdBQVlELEdBQW1CLFdBQ3hDLFNBQVNuaUUsRUFBRUEsRUFBR3JGLEVBQUczSCxHQUNickMsS0FBS3VELEtBQU84TCxFQUFHclAsS0FBS3VvQyxHQUFLditCLEVBQUdoSyxLQUFLMHFFLGdCQUFrQnJvRSxFQUV2RCxPQUFPZ04sRUFBRS9NLFVBQVV3L0UsR0FBSyxTQUFTenlFLEVBQUdyRixHQUNoQyxJQUFJM0gsRUFBSSxHQUNSLE9BQU8sT0FBU3JDLEtBQUt1b0MsR0FBS2xtQyxFQUFFNUMsS0FBSyxJQUFJeTFELEdBQUc3bEQsRUFBR3JQLEtBQUt1RCxLQUFNdkQsS0FBS3VvQyxHQUFJditCLElBQU0zSCxFQUFFNUMsS0FBSyxJQUFJdTFELEdBQUczbEQsRUFBR3JQLEtBQUt1RCxLQUFNeUcsSUFDakdoSyxLQUFLMHFFLGdCQUFnQi9wRSxPQUFTLEdBQUswQixFQUFFNUMsS0FBSyxJQUFJb1gsR0FBR3hILEVBQUdyUCxLQUFLMHFFLGtCQUFtQnJvRSxHQUM3RWdOLEVBUnFDLEdBU3ZDcWlFLEdBQW1CLFdBQ3BCLFNBQVNyaUUsRUFBRUEsRUFBR3JGLEVBQUczSCxHQUNickMsS0FBS3VELEtBQU84TCxFQUFHclAsS0FBS3VvQyxHQUFLditCLEVBQUdoSyxLQUFLMHFFLGdCQUFrQnJvRSxFQUV2RCxPQUFPZ04sRUFBRS9NLFVBQVV3L0UsR0FBSyxTQUFTenlFLEVBQUdyRixHQUNoQyxJQUFJM0gsRUFBSSxDQUFFLElBQUk2eUQsR0FBRzdsRCxFQUFHclAsS0FBS3VELEtBQU12RCxLQUFLdW9DLEdBQUl2K0IsSUFDeEMsT0FBT2hLLEtBQUswcUUsZ0JBQWdCL3BFLE9BQVMsR0FBSzBCLEVBQUU1QyxLQUFLLElBQUlvWCxHQUFHeEgsRUFBR3JQLEtBQUswcUUsa0JBQ2hFcm9FLEdBQ0RnTixFQVJpQixHQVc4QyxTQUFTOGlFLEdBQUc5aUUsR0FDOUUsT0FBUUEsR0FDTixLQUFLLEVBRUcsS0FBSyxFQUVMLEtBQUssRUFDWCxPQUFPLEVBRVQsS0FBSyxFQUNMLEtBQUssRUFDSCxPQUFPLEVBRVQsUUFDRSxNQUFNLE1BSW1ELElBQUkwaUUsR0FBbUIsV0FtQnBGLFNBQVMxaUUsRUFBRUEsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixHQUN0Qm5DLEtBQUs0c0IsU0FBV3ZkLEVBQUdyUCxLQUFLcVAsRUFBSXJGLEVBQUdoSyxLQUFLbXNFLFdBQWE5cEUsRUFBR3JDLEtBQUs4L0UsMEJBQTRCL3VFLE9BR3JGLElBQVd6USxHQUFLTixLQUFLK2hGLEtBQU0vaEYsS0FBSzBxRSxnQkFBa0JwcUUsR0FBSyxHQUFJTixLQUFLdW9DLEdBQUtwbUMsR0FBSyxHQUU5RSxPQUFPWixPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLE9BQVEsQ0FDOUN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUs0c0IsU0FBUzh4QixNQUV6QjF3QyxZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDekN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUs0c0IsU0FBUyt5RCxJQUV6QjN4RSxZQUFZLEVBQ1ppTyxjQUFjLElBRW9ENU0sRUFBRS9NLFVBQVUwL0UsR0FBSyxTQUFTaDRFLEdBQzVGLE9BQU8sSUFBSXFGLEVBQUU5TixPQUFPNk4sT0FBTzdOLE9BQU82TixPQUFPLEdBQUlwUCxLQUFLNHNCLFVBQVc1aUIsR0FBSWhLLEtBQUtxUCxFQUFHclAsS0FBS21zRSxXQUFZbnNFLEtBQUs4L0UsMEJBQTJCOS9FLEtBQUswcUUsZ0JBQWlCMXFFLEtBQUt1b0MsS0FDdEpsNUIsRUFBRS9NLFVBQVUyL0UsR0FBSyxTQUFTNXlFLEdBQ3pCLElBQUlyRixFQUFHM0gsRUFBSSxRQUFVMkgsRUFBSWhLLEtBQUswK0MsWUFBUyxJQUFXMTBDLE9BQUksRUFBU0EsRUFBRXM1RCxNQUFNajBELEdBQUkwQixFQUFJL1EsS0FBS2dpRixHQUFHLENBQ25GdGpDLEtBQU1yOEMsRUFDTjRNLElBQUksSUFFUixPQUFPOEIsRUFBRW14RSxHQUFHN3lFLEdBQUkwQixHQUNqQjFCLEVBQUUvTSxVQUFVNi9FLEdBQUssU0FBUzl5RSxHQUN6QixJQUFJckYsRUFBRzNILEVBQUksUUFBVTJILEVBQUloSyxLQUFLMCtDLFlBQVMsSUFBVzEwQyxPQUFJLEVBQVNBLEVBQUVzNUQsTUFBTWowRCxHQUFJMEIsRUFBSS9RLEtBQUtnaUYsR0FBRyxDQUNuRnRqQyxLQUFNcjhDLEVBQ040TSxJQUFJLElBRVIsT0FBTzhCLEVBQUVneEUsS0FBTWh4RSxHQUNoQjFCLEVBQUUvTSxVQUFVdVMsR0FBSyxTQUFTeEYsR0FHekIsT0FBT3JQLEtBQUtnaUYsR0FBRyxDQUNYdGpDLFVBQU0sRUFDTnp2QyxJQUFJLEtBRVRJLEVBQUUvTSxVQUFVczlFLEdBQUssU0FBU3Z3RSxHQUN6QixPQUFPLEdBQUdBLEVBQUdyUCxLQUFLNHNCLFNBQVMva0IsV0FBWTdILEtBQUs0c0IsU0FBU3cxRCxLQUFNLEVBQUlwaUYsS0FBSzArQyxLQUFNMStDLEtBQUs0c0IsU0FBU2l6RCxLQUVieHdFLEVBQUUvTSxVQUFVNlIsU0FBVyxTQUFTOUUsR0FDM0csWUFBTyxJQUFXclAsS0FBS3VvQyxHQUFHdmUsTUFBSyxTQUFVaGdCLEdBQ3JDLE9BQU9xRixFQUFFODZCLEVBQUVuZ0MsWUFDUixJQUFXaEssS0FBSzBxRSxnQkFBZ0IxZ0QsTUFBSyxTQUFVaGdCLEdBQ2xELE9BQU9xRixFQUFFODZCLEVBQUVuZ0MsRUFBRWk2RCxXQUVsQjUwRCxFQUFFL00sVUFBVXkvRSxHQUFLLFdBR2hCLEdBQUkvaEYsS0FBSzArQyxLQUFNLElBQUssSUFBSXJ2QyxFQUFJLEVBQUdBLEVBQUlyUCxLQUFLMCtDLEtBQUsvOUMsT0FBUTBPLElBQUtyUCxLQUFLa2lGLEdBQUdsaUYsS0FBSzArQyxLQUFLNTRDLElBQUl1SixLQUNqRkEsRUFBRS9NLFVBQVU0L0UsR0FBSyxTQUFTN3lFLEdBQ3pCLEdBQUksSUFBTUEsRUFBRTFPLE9BQVEsTUFBTVgsS0FBSzQvRSxHQUFHLHFDQUNsQyxHQUFJek4sR0FBR255RSxLQUFLMi9FLEtBQU9sTyxHQUFHN3VFLEtBQUt5TSxHQUFJLE1BQU1yUCxLQUFLNC9FLEdBQUcsbURBQzlDdndFLEVBM0VpRixHQTRFbkY2aUUsR0FBbUIsV0FDcEIsU0FBUzdpRSxFQUFFQSxFQUFHckYsRUFBRzNILEdBQ2JyQyxLQUFLcVAsRUFBSUEsRUFBR3JQLEtBQUs4L0UsMEJBQTRCOTFFLEVBQUdoSyxLQUFLbXNFLFdBQWE5cEUsR0FBS2l4RSxHQUFHamtFLEdBRzlFLE9BQU9BLEVBQUUvTSxVQUFVKy9FLEdBQUssU0FBU2h6RSxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUN0QyxZQUFPLElBQVdBLElBQU1BLEdBQUksR0FBSyxJQUFJZ2hFLEdBQUcsQ0FDcEM0TixHQUFJdHdFLEVBQ0p4SCxXQUFZbUMsRUFDWjYxRSxHQUFJeDlFLEVBQ0pxOEMsS0FBTSxHQUFFa1YsSUFDUjNrRCxJQUFJLEVBQ0ptekUsR0FBSXJ4RSxHQUNML1EsS0FBS3FQLEVBQUdyUCxLQUFLbXNFLFdBQVluc0UsS0FBSzgvRSw0QkFDbEN6d0UsRUFkaUIsR0FxQnNCLFNBQVMraUUsR0FBRy9pRSxFQUFHckYsRUFBRzNILEVBQUcwTyxFQUFHelEsRUFBRzZCLFFBQ3JFLElBQVdBLElBQU1BLEVBQUksSUFDckIsSUFBSW91QixFQUFJbGhCLEVBQUVnekUsR0FBR2xnRixFQUFFbzlFLE9BQVNwOUUsRUFBRXE5RSxZQUFjLEVBQW1CLEVBQWN4MUUsRUFBRzNILEVBQUcvQixHQUMvRTJ3QixHQUFHLHNDQUF1Q1YsRUFBR3hmLEdBQzdDLElBQUl6QixFQUFHeEIsRUFBRzBILEVBQUksR0FBR3pFLEVBQUd3ZixHQUNwQixHQUFJcHVCLEVBQUVvOUUsTUFBT2p3RSxFQUFJLElBQUlzNEIsR0FBR3JYLEVBQUVnWSxJQUFLejZCLEVBQUl5aUIsRUFBRW02QyxxQkFBc0IsR0FBSXZvRSxFQUFFcTlFLFlBQWEsQ0FDMUUsSUFBSyxJQUFJbHZELEVBQUksR0FBSXJnQixFQUFJLEVBQUd1Z0IsRUFBSXJ1QixFQUFFcTlFLFlBQWF2dkUsRUFBSXVnQixFQUFFN3ZCLE9BQVFzUCxJQUFLLENBQzFELElBQUkvSyxFQUFJLEdBQUc4RSxFQUFHd21CLEVBQUV2Z0IsR0FBSTVOLEdBQ3BCLElBQUtrdUIsRUFBRXBjLFNBQVNqUCxHQUFJLE1BQU0sSUFBSW1NLEdBQUUsR0FBRTJ3RCxpQkFBa0IsVUFBWTk4RCxFQUFJLHVFQUNwRSxHQUFHb3JCLEVBQUdwckIsSUFBTW9yQixFQUFFN3dCLEtBQUt5RixHQUV2Qm9LLEVBQUksSUFBSXM0QixHQUFHdFgsR0FBSXhpQixFQUFJeWlCLEVBQUVtNkMsZ0JBQWdCOStELFFBQU8sU0FBVXlELEdBQ2xELE9BQU9DLEVBQUVvNEIsR0FBR3I0QixFQUFFNDBELGVBRWYzMEQsRUFBSSxLQUFNeEIsRUFBSXlpQixFQUFFbTZDLGdCQUN2QixPQUFPLElBQUk4RyxHQUFHLElBQUl6WixHQUFHdmlELEdBQUlsRyxFQUFHeEIsR0FHZ0IsU0FBUzhpRSxHQUFHdmhFLEVBQUdyRixFQUFHM0gsRUFBRzBPLEdBQ2pFLElBQUl6USxFQUFJK08sRUFBRWd6RSxHQUFHLEVBQWlCcjRFLEVBQUczSCxHQUNqQzR1QixHQUFHLHNDQUF1QzN3QixFQUFHeVEsR0FDN0MsSUFBSTVPLEVBQUksR0FBSW91QixFQUFJLElBQUlrbEMsR0FDcEIsR0FBRTFrRCxHQUFHLFNBQVUxQixFQUFHMEIsR0FDZCxJQUFJekIsRUFBSSxHQUFHdEYsRUFBR3FGLEVBQUdoTixHQUdUME8sYUFBYWkrRCxLQUFPaitELEVBQUlBLEVBQUV1dUUsSUFDbEMsSUFBSXh4RSxFQUFJeE4sRUFBRTZoRixHQUFHN3lFLEdBQ2IsR0FBSXlCLGFBQWFxK0QsR0FFakJqdEUsRUFBRTFDLEtBQUs2UCxPQUFTLENBQ1osSUFBSWtHLEVBQUksR0FBR3pFLEVBQUdqRCxHQUNkLE1BQVEwSCxJQUFNclQsRUFBRTFDLEtBQUs2UCxHQUFJaWhCLEVBQUV4cUIsSUFBSXVKLEVBQUdrRyxRQUcxQyxJQUFJbEcsRUFBSSxJQUFJczRCLEdBQUd6bEMsR0FDZixPQUFPLElBQUl1dkUsR0FBR25oRCxFQUFFMlksS0FBTTU1QixFQUFHaFAsRUFBRW9xRSxpQkFHZ0MsU0FBUzJILEdBQUdoakUsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixHQUN0RixJQUFJb3VCLEVBQUlsaEIsRUFBRWd6RSxHQUFHLEVBQWlCcjRFLEVBQUczSCxHQUFJaU4sRUFBSSxDQUFFLEdBQUd0RixFQUFHK0csRUFBRzFPLElBQU15TCxFQUFJLENBQUV4TixHQUNoRSxHQUFJNkIsRUFBRXhCLE9BQVMsR0FBSyxFQUFHLE1BQU0sSUFBSTBRLEdBQUUsR0FBRTJ3RCxpQkFBa0IsWUFBY2g0RCxFQUFJLHlHQUN6RSxJQUFLLElBQUl3TCxFQUFJLEVBQUdBLEVBQUlyVCxFQUFFeEIsT0FBUTZVLEdBQUssRUFBR2xHLEVBQUU3UCxLQUFLLEdBQUd1SyxFQUFHN0gsRUFBRXFULEtBQU0xSCxFQUFFck8sS0FBSzBDLEVBQUVxVCxFQUFJLElBR3hFLElBQUssSUFBSThhLEVBQUksR0FBSXJnQixFQUFJLElBQUl3bEQsR0FBSWpsQyxFQUFJbGhCLEVBQUUzTyxPQUFTLEVBQUc2dkIsR0FBSyxJQUFLQSxFQUFHLElBQUssR0FBR0YsRUFBR2hoQixFQUFFa2hCLElBQUssQ0FDMUUsSUFBSXRyQixFQUFJb0ssRUFBRWtoQixHQUFJM2lCLEVBQUlDLEVBQUUwaUIsR0FHcEIzaUIsYUFBYW1oRSxLQUFPbmhFLEVBQUlBLEVBQUV5eEUsSUFDMUIsSUFBSTd1RSxFQUFJOGYsRUFBRTR4RCxHQUFHajlFLEdBQ2IsR0FBSTJJLGFBQWF1aEUsR0FFakI5K0MsRUFBRTd3QixLQUFLeUYsT0FBUyxDQUNaLElBQUlnTCxFQUFJLEdBQUdyQyxFQUFHNEMsR0FDZCxNQUFRUCxJQUFNb2dCLEVBQUU3d0IsS0FBS3lGLEdBQUkrSyxFQUFFbEssSUFBSWIsRUFBR2dMLEtBRzFDLElBQUlqQyxFQUFJLElBQUkyNUIsR0FBR3RYLEdBQ2YsT0FBTyxJQUFJb2hELEdBQUd6aEUsRUFBRWk1QixLQUFNajdCLEVBQUdzaUIsRUFBRW02QyxpQkFTM0IsU0FBUyxHQUFHcjdELEVBQUdyRixFQUFHM0gsRUFBRzBPLEdBQ3JCLFlBQU8sSUFBV0EsSUFBTUEsR0FBSSxHQUFLLEdBQUcxTyxFQUFHZ04sRUFBRWd6RSxHQUFHdHhFLEVBQUksRUFBd0IsRUFBbUIvRyxJQVczRixTQUFTLEdBQUdxRixFQUFHckYsR0FDZixHQUdBcUYsYUFBYTIvRCxLQUFPMy9ELEVBQUlBLEVBQUVpd0UsSUFBSyxHQUFHandFLEdBQUksT0FBTzRoQixHQUFHLDJCQUE0QmpuQixFQUFHcUYsR0FDL0UsR0FBR0EsRUFBR3JGLEdBQ04sR0FBSXFGLGFBQWF4TixHQVVqQixPQUFPLFNBQVN3TixFQUFHckYsR0FFZixJQUFLbW9FLEdBQUdub0UsRUFBRTIxRSxJQUFLLE1BQU0zMUUsRUFBRTQxRSxHQUFHdndFLEVBQUVvd0UsR0FBSywrQ0FDakMsSUFBS3oxRSxFQUFFMDBDLEtBQU0sTUFBTTEwQyxFQUFFNDFFLEdBQUd2d0UsRUFBRW93RSxHQUFLLCtDQUMvQixJQUFJcDlFLEVBQUlnTixFQUFFcXdFLEdBQUcxMUUsR0FDYjNILEdBQUsySCxFQUFFMGdFLGdCQUFnQmpyRSxLQUFLNEMsR0FMekIsQ0FNTGdOLEVBQUdyRixHQUFJLEtBQ1QsR0FHQUEsRUFBRTAwQyxNQUFRMTBDLEVBQUV1K0IsR0FBRzlvQyxLQUFLdUssRUFBRTAwQyxNQUFPcnZDLGFBQWFwTyxNQUFPLENBTzdDLEdBQUkrSSxFQUFFNGlCLFNBQVMzZCxJQUFNLElBQTBCakYsRUFBRTIxRSxHQUFJLE1BQU0zMUUsRUFBRTQxRSxHQUFHLG1DQUNoRSxPQUFPLFNBQVN2d0UsRUFBR3JGLEdBQ2YsSUFBSyxJQUFJM0gsRUFBSSxHQUFJME8sRUFBSSxFQUFHelEsRUFBSSxFQUFHNkIsRUFBSWtOLEVBQUcvTyxFQUFJNkIsRUFBRXhCLE9BQVFMLElBQUssQ0FDckQsSUFBSWl3QixFQUFJLEdBQUdwdUIsRUFBRTdCLEdBQUkwSixFQUFFNkssR0FBRzlELElBQ3RCLE1BQVF3ZixJQUdSQSxFQUFJLENBQ0EyN0MsVUFBVyxlQUNYN3BFLEVBQUU1QyxLQUFLOHdCLEdBQUl4ZixJQUVuQixNQUFPLENBQ0hvNUQsV0FBWSxDQUNSandELE9BQVE3WCxJQVpiLENBZUxnTixFQUFHckYsR0FFVCxPQUFPLFNBQVNxRixFQUFHckYsR0FDZixHQUFJcUYsYUFBYTIvRCxLQUFPMy9ELEVBQUlBLEVBQUVpd0UsSUFBSyxPQUFTandFLEVBQUcsTUFBTyxDQUNsRDY4RCxVQUFXLGNBRWYsR0FBSSxpQkFBbUI3OEQsRUFBRyxPQUFPMDBCLEdBQUcvNUIsRUFBRW1pRSxXQUFZOThELEdBQ2xELEdBQUksa0JBQW9CQSxFQUFHLE1BQU8sQ0FDOUJzNkQsYUFBY3Q2RCxHQUVsQixHQUFJLGlCQUFtQkEsRUFBRyxNQUFPLENBQzdCaTZELFlBQWFqNkQsR0FFakIsR0FBSUEsYUFBYW1DLEtBQU0sQ0FDbkIsSUFBSW5QLEVBQUl5dUIsR0FBRWt5QyxTQUFTM3pELEdBQ25CLE1BQU8sQ0FDSG82RCxlQUFnQnhsQyxHQUFHajZCLEVBQUVtaUUsV0FBWTlwRSxJQUd6QyxHQUFJZ04sYUFBYXloQixHQUFHLENBSWhCLElBQUkvZixFQUFJLElBQUkrZixHQUFFemhCLEVBQUV3ekQsUUFBUyxJQUFNeHJELEtBQUsydUIsTUFBTTMyQixFQUFFeXpELFlBQWMsTUFDMUQsTUFBTyxDQUNIMkcsZUFBZ0J4bEMsR0FBR2o2QixFQUFFbWlFLFdBQVlwN0QsSUFHekMsR0FBSTFCLGFBQWF5Z0UsR0FBSSxNQUFPLENBQ3hCaEcsY0FBZSxDQUNYQyxTQUFVMTZELEVBQUUwNkQsU0FDWkMsVUFBVzM2RCxFQUFFMjZELFlBR3JCLEdBQUkzNkQsYUFBYW1oRSxHQUFJLE1BQU8sQ0FDeEI1RyxXQUFZL2tDLEdBQUc3NkIsRUFBRW1pRSxXQUFZOThELEVBQUU4d0UsS0FFbkMsR0FBSTl3RSxhQUFhdWlFLEdBQUksQ0FDakIsSUFBSXR4RSxFQUFJMEosRUFBRXFGLEVBQUdsTixFQUFJa04sRUFBRTJ4RSxVQUFVQyxHQUM3QixJQUFLOStFLEVBQUV3L0QsUUFBUXJoRSxHQUFJLE1BQU0wSixFQUFFNDFFLEdBQUcsc0NBQXdDejlFLEVBQUU0ZSxVQUFZLElBQU01ZSxFQUFFdS9ELFNBQVcsK0JBQWlDcGhFLEVBQUV5Z0IsVUFBWSxJQUFNemdCLEVBQUVvaEUsVUFDOUosTUFBTyxDQUNIbUksZUFBZ0J2a0MsR0FBR2oyQixFQUFFMnhFLFVBQVVDLElBQU1qM0UsRUFBRXFGLEVBQUdBLEVBQUVneUUsR0FBRzNpQyxPQUd2RCxRQUFJLElBQVdydkMsR0FBS3JGLEVBQUU4MUUsMEJBQTJCLE9BQU8sS0FDeEQsTUFBTTkxRSxFQUFFNDFFLEdBQUcsNEJBQThCcDhELEdBQUduVSxJQTNDekMsQ0E0Q0xBLEVBQUdyRixHQUdULFNBQVMsR0FBR3FGLEVBQUdyRixHQUNYLElBQUkzSCxFQUFJLEdBQ1IsT0FBTyxHQUFFZ04sR0FHVHJGLEVBQUUwMEMsTUFBUTEwQyxFQUFFMDBDLEtBQUsvOUMsT0FBUyxHQUFLcUosRUFBRXUrQixHQUFHOW9DLEtBQUt1SyxFQUFFMDBDLE1BQVEsR0FBRXJ2QyxHQUFHLFNBQVVBLEVBQUcwQixHQUNqRSxJQUFJelEsRUFBSSxHQUFHeVEsRUFBRy9HLEVBQUVpNEUsR0FBRzV5RSxJQUNuQixNQUFRL08sSUFBTStCLEVBQUVnTixHQUFLL08sTUFDcEIsQ0FDRDZvRSxTQUFVLENBQ05DLE9BQVEvbUUsSUFLcEIsU0FBUyxHQUFHZ04sR0FDUixRQUFTLGlCQUFtQkEsR0FBSyxPQUFTQSxHQUFLQSxhQUFhcE8sT0FBU29PLGFBQWFtQyxNQUFRbkMsYUFBYXloQixJQUFLemhCLGFBQWF5Z0UsSUFBTXpnRSxhQUFhbWhFLElBQU1uaEUsYUFBYXVpRSxJQUFNdmlFLGFBQWF4TixJQUd0TCxTQUFTb3ZCLEdBQUc1aEIsRUFBR3JGLEVBQUczSCxHQUNkLElBQUssR0FBR0EsS0FBTyxTQUFTZ04sR0FDcEIsTUFBTyxpQkFBbUJBLEdBQUssT0FBU0EsSUFBTTlOLE9BQU8rZ0YsZUFBZWp6RSxLQUFPOU4sT0FBT2UsV0FBYSxPQUFTZixPQUFPK2dGLGVBQWVqekUsSUFEbkgsQ0FFYmhOLEdBQUksQ0FDRixJQUFJME8sRUFBSXlTLEdBQUduaEIsR0FDWCxLQUFNLGNBQWdCME8sRUFBSS9HLEVBQUU0MUUsR0FBR3Z3RSxFQUFJLG9CQUFzQnJGLEVBQUU0MUUsR0FBR3Z3RSxFQUFJLElBQU0wQixJQU01RSxTQUFTLEdBQUcxQixFQUFHckYsRUFBRzNILEdBQ2xCLEdBR0EySCxhQUFhZ2xFLEtBQU9obEUsRUFBSUEsRUFBRXMxRSxJQUFLdDFFLGFBQWFtbUUsR0FBSSxPQUFPbm1FLEVBQUV5M0UsR0FDekQsR0FBSSxpQkFBbUJ6M0UsRUFBRyxPQUFPLEdBQUdxRixFQUFHckYsR0FDdkMsTUFBTSxHQUFHLDREQUE2RHFGLEdBQ2xELE9BQ1IsRUFBUWhOLEdBS3BCLElBQUksR0FBSyxJQUFJaWxELE9BQU8saUJBU3BCLFNBQVMsR0FBR2o0QyxFQUFHckYsRUFBRzNILEdBQ2xCLEdBQUkySCxFQUFFdTRFLE9BQU8sS0FBTyxFQUFHLE1BQU0sR0FBRyx1QkFBeUJ2NEUsRUFBSSx1REFBd0RxRixHQUNqRyxPQUNSLEVBQVFoTixHQUNwQixJQUNJLE9BQU8sSUFBTTh0RSxHQUFHcmpFLEtBQUszSCxNQUFNZ3JFLEdBQUksRUFBRSxNQUFFLEdBQVVubUUsRUFBRW1tQixNQUFNLFNBQVNzeEQsR0FDaEUsTUFBTzF3RSxHQUNMLE1BQU0sR0FBRyx1QkFBeUIvRyxFQUFJLDRFQUE2RXFGLEdBQy9GLE9BQ1IsRUFBUWhOLElBSTVCLFNBQVMsR0FBR2dOLEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxHQUNwQixJQUFJNkIsRUFBSTRPLElBQU1BLEVBQUV1M0MsSUFBSy8zQixPQUFJLElBQVdqd0IsRUFBR2dQLEVBQUksWUFBY3RGLEVBQUksOEJBQzdEM0gsSUFBTWlOLEdBQUssMEJBQ1gsSUFBSXhCLEVBQUksR0FDUixPQUFRM0wsR0FBS291QixLQUFPemlCLEdBQUssVUFBVzNMLElBQU0yTCxHQUFLLGFBQWVpRCxHQUFJd2YsSUFBTXppQixHQUFLLGdCQUFrQnhOLEdBQy9Gd04sR0FBSyxLQUFNLElBQUl1RCxHQUFFLEdBQUUyd0Qsa0JBQW1CMXlELEdBQUssTUFBUUQsRUFBSXZCLEdBSTNELFNBQVMsR0FBR3VCLEVBQUdyRixHQUNYLE9BQU9xRixFQUFFa2xCLE1BQUssU0FBVWxsQixHQUNwQixPQUFPQSxFQUFFc3lELFFBQVEzM0QsTUF1QnJCLElBQUksR0FBbUIsV0FDdkIsU0FBU3FGLEVBQUVBLEdBQ1ByUCxLQUFLbytCLEdBQUsvdUIsRUFFVnJQLEtBQUt3aUYsR0FBSyxJQUFJN3BFLElBQUszWSxLQUFLZ3pFLFVBQVksR0FBSWh6RSxLQUFLeWlGLElBQUssRUFLbER6aUYsS0FBSzBpRixHQUFLLEtBT1YxaUYsS0FBSzJpRixHQUFLLElBQUk1NUQsSUFFbEIsT0FBTzFaLEVBQUUvTSxVQUFVc2dGLEdBQUssU0FBU3Z6RSxHQUM3QixPQUFPLEVBQUVyUCxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJK1EsRUFBR3pRLEVBQUlOLEtBQ1gsT0FBTyxFQUFFQSxNQUFNLFNBQVVtQyxHQUNyQixPQUFRQSxFQUFFaU8sT0FDUixLQUFLLEVBQ0gsR0FBSXBRLEtBQUs2aUYsS0FBTTdpRixLQUFLZ3pFLFVBQVVyeUUsT0FBUyxFQUFHLE1BQU0sSUFBSTBRLEdBQUUsR0FBRTJ3RCxpQkFBa0IsOEVBQzFFLE1BQU8sQ0FBRSxFQUFjLFNBQVMzeUQsRUFBRzBCLEdBQy9CLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFBRzZCLEVBQUdvdUIsRUFBR2poQixFQUFHeEIsRUFDbkIsT0FBTyxFQUFFOU4sTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wRyxFQUFJLEdBQUVxRixHQUFJL08sRUFBSTBuQyxHQUFHaCtCLEVBQUVtaUUsWUFBYyxhQUFjaHFFLEVBQUksQ0FDdERrcEUsVUFBV3Q2RCxFQUFFOVEsS0FBSSxTQUFVb1AsR0FDdkIsT0FBT28zQixHQUFHejhCLEVBQUVtaUUsV0FBWTk4RCxPQUU3QixDQUFFLEVBQWNyRixFQUFFOHlCLEdBQUcsb0JBQXFCeDhCLEVBQUc2QixJQUVsRCxLQUFLLEVBQ0gsT0FBT291QixFQUFJbHVCLEVBQUVnTyxPQUFRZixFQUFJLElBQUlxSixJQUFLNFgsRUFBRTVxQixTQUFRLFNBQVUwSixHQUNsRCxJQUFJaE4sRUFBSSxTQUFTZ04sRUFBR3JGLEdBQ2hCLE1BQU8sVUFBV0EsRUFBSSxTQUFTcUYsRUFBR3JGLEdBQzlCLEtBQUlBLEVBQUU4NEUsT0FBUTk0RSxFQUFFODRFLE1BQU1wZ0YsS0FBTXNILEVBQUU4NEUsTUFBTTVYLFdBQ3BDLElBQUk3b0UsRUFBSXlqQyxHQUFHejJCLEVBQUdyRixFQUFFODRFLE1BQU1wZ0YsTUFBT3FPLEVBQUlpMEIsR0FBR2g3QixFQUFFODRFLE1BQU01WCxZQUFhNXFFLEVBQUksSUFBSXkzRCxHQUFHLENBQ2hFb1IsU0FBVSxDQUNOQyxPQUFRcC9ELEVBQUU4NEUsTUFBTTFaLFVBR3hCLE9BQU8sSUFBSW5VLEdBQUc1eUQsRUFBRzBPLEVBQUd6USxFQUFHLElBUEwsQ0FRcEIrTyxFQUFHckYsR0FBSyxZQUFhQSxFQUFJLFNBQVNxRixFQUFHckYsR0FDbkMsS0FBSUEsRUFBRSs0RSxTQUFVLEtBQUkvNEUsRUFBRW9wRSxVQUN0QixJQUFJL3dFLEVBQUl5akMsR0FBR3oyQixFQUFHckYsRUFBRSs0RSxTQUFVaHlFLEVBQUlpMEIsR0FBR2g3QixFQUFFb3BFLFVBQ25DLE9BQU8sSUFBSTN4RSxHQUFHWSxFQUFHME8sR0FITSxDQUl6QjFCLEVBQUdyRixHQUFLLEtBYk4sQ0FjTkEsRUFBRW1pRSxXQUFZOThELEdBQ2hCQyxFQUFFdkosSUFBSTFELEVBQUUrSSxJQUFJckwsV0FBWXNDLE1BQ3ZCeUwsRUFBSSxHQUFJLENBQUUsR0FBZ0JpRCxFQUFFcEwsU0FBUSxTQUFVMEosR0FDL0MsSUFBSXJGLEVBQUlzRixFQUFFeEosSUFBSXVKLEVBQUV0UCxZQUNoQixLQUFJaUssR0FBSThELEVBQUVyTyxLQUFLdUssTUFDZDhELFdBakNFLENBcUNyQjlOLEtBQUtvK0IsR0FBSS91QixJQUViLEtBQUssRUFDSCxNQUFPLENBQUUsSUFBaUIwQixFQUFJNU8sRUFBRWtPLFFBQVExSyxTQUFRLFNBQVUwSixHQUN0REEsYUFBYTVOLElBQU00TixhQUFhNGxELEdBQUszMEQsRUFBRW9xQyxHQUFHcjdCLEdBQUssUUFDOUMwQixZQUlsQjFCLEVBQUUvTSxVQUFVeUQsSUFBTSxTQUFTc0osRUFBR3JGLEdBQzdCaEssS0FBS2luQyxNQUFNajlCLEVBQUU4M0UsR0FBR3p5RSxFQUFHclAsS0FBSzhrQyxHQUFHejFCLEtBQU1yUCxLQUFLMmlGLEdBQUczNUQsSUFBSTNaLEVBQUV0UCxhQUNoRHNQLEVBQUUvTSxVQUFVc0ssT0FBUyxTQUFTeUMsRUFBR3JGLEdBQ2hDLElBQ0loSyxLQUFLaW5DLE1BQU1qOUIsRUFBRTgzRSxHQUFHenlFLEVBQUdyUCxLQUFLcXFELEdBQUdoN0MsS0FDN0IsTUFBT0EsR0FDTHJQLEtBQUswaUYsR0FBS3J6RSxFQUVkclAsS0FBSzJpRixHQUFHMzVELElBQUkzWixFQUFFdFAsYUFDZnNQLEVBQUUvTSxVQUFVMFgsT0FBUyxTQUFTM0ssR0FDN0JyUCxLQUFLaW5DLE1BQU0sQ0FBRSxJQUFJb3VCLEdBQUdobUQsRUFBR3JQLEtBQUs4a0MsR0FBR3oxQixNQUFRclAsS0FBSzJpRixHQUFHMzVELElBQUkzWixFQUFFdFAsYUFDdERzUCxFQUFFL00sVUFBVTBnRixPQUFTLFdBQ3BCLE9BQU8sRUFBRWhqRixVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJcVAsRUFBRzBCLEVBQUkvUSxLQUNYLE9BQU8sRUFBRUEsTUFBTSxTQUFVTSxHQUNyQixPQUFRQSxFQUFFOFAsT0FDUixLQUFLLEVBQ0gsR0FBSXBRLEtBQUs2aUYsS0FBTTdpRixLQUFLMGlGLEdBQUksTUFBTTFpRixLQUFLMGlGLEdBQ25DLE9BQU9yekUsRUFBSXJQLEtBQUt3aUYsR0FFaEJ4aUYsS0FBS2d6RSxVQUFVcnRFLFNBQVEsU0FBVXFFLEdBQzdCcUYsRUFBRTJLLE9BQU9oUSxFQUFFb0IsSUFBSXJMLGVBSW5Cc1AsRUFBRTFKLFNBQVEsU0FBVTBKLEVBQUdyRixHQUNuQixJQUFJM0gsRUFBSSxHQUFFbWpDLEVBQUV4N0IsR0FDWitHLEVBQUVpaUUsVUFBVXZ6RSxLQUFLLElBQUlnNEQsR0FBR3AxRCxFQUFHME8sRUFBRSt6QixHQUFHemlDLFFBQy9CLENBQUUsRUFBYyxTQUFTZ04sRUFBRzBCLEdBQzdCLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFBRzZCLEVBQ1YsT0FBTyxFQUFFbkMsTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU9wRyxFQUFJLEdBQUVxRixHQUFJL08sRUFBSTBuQyxHQUFHaCtCLEVBQUVtaUUsWUFBYyxhQUFjaHFFLEVBQUksQ0FDdERnNEUsT0FBUXBwRSxFQUFFOVEsS0FBSSxTQUFVb1AsR0FDcEIsT0FBT3M0QixHQUFHMzlCLEVBQUVtaUUsV0FBWTk4RCxPQUU3QixDQUFFLEVBQWNyRixFQUFFdXhCLEdBQUcsU0FBVWo3QixFQUFHNkIsSUFFdkMsS0FBSyxFQUNILE9BQU9FLEVBQUVnTyxPQUFRLENBQUUsVUFiZCxDQWlCbkJyUSxLQUFLbytCLEdBQUlwK0IsS0FBS2d6RSxZQUVsQixLQUFLLEVBRUgsT0FBTzF5RSxFQUFFK1AsT0FBUXJRLEtBQUt5aUYsSUFBSyxFQUFJLENBQUUsV0FJOUNwekUsRUFBRS9NLFVBQVVvb0MsR0FBSyxTQUFTcjdCLEdBQ3pCLElBQUlyRixFQUNKLEdBQUlxRixhQUFhNGxELEdBQUlqckQsRUFBSXFGLEVBQUV0RyxZQUFjLENBQ3JDLEtBQU1zRyxhQUFhNU4sSUFBSyxNQUFNLEtBRWxCdUksRUFBSTZyQixHQUFFbmUsTUFFdEIsSUFBSXJWLEVBQUlyQyxLQUFLd2lGLEdBQUcxOEUsSUFBSXVKLEVBQUVqRSxJQUFJckwsWUFDMUIsR0FBSXNDLEdBQ0EsSUFBSzJILEVBQUUyM0QsUUFBUXQvRCxHQUVmLE1BQU0sSUFBSWdQLEdBQUUsR0FBRW14RCxRQUFTLG9EQUNwQnhpRSxLQUFLd2lGLEdBQUd6OEUsSUFBSXNKLEVBQUVqRSxJQUFJckwsV0FBWWlLLElBTXpDcUYsRUFBRS9NLFVBQVV3aUMsR0FBSyxTQUFTejFCLEdBQ3RCLElBQUlyRixFQUFJaEssS0FBS3dpRixHQUFHMThFLElBQUl1SixFQUFFdFAsWUFDdEIsT0FBUUMsS0FBSzJpRixHQUFHNXBFLElBQUkxSixFQUFFdFAsYUFBZWlLLEVBQUlxL0IsR0FBRzZoQyxXQUFXbGhFLEdBQUtxL0IsR0FBRzVCLE1BS25FcDRCLEVBQUUvTSxVQUFVK25ELEdBQUssU0FBU2g3QyxHQUN0QixJQUFJckYsRUFBSWhLLEtBQUt3aUYsR0FBRzE4RSxJQUFJdUosRUFBRXRQLFlBR2QsSUFBS0MsS0FBSzJpRixHQUFHNXBFLElBQUkxSixFQUFFdFAsYUFBZWlLLEVBQUcsQ0FDekMsR0FBSUEsRUFBRTIzRCxRQUFROXJDLEdBQUVuZSxPQVVoQixNQUFNLElBQUlyRyxHQUFFLEdBQUUyd0QsaUJBQWtCLCtDQUVwQixPQUFPMzRCLEdBQUc2aEMsV0FBV2xoRSxHQUk3QixPQUFPcS9CLEdBQUc4aEMsUUFBTyxJQUMxQjk3RCxFQUFFL00sVUFBVTJrQyxNQUFRLFNBQVM1M0IsR0FDNUJyUCxLQUFLNmlGLEtBQU03aUYsS0FBS2d6RSxVQUFZaHpFLEtBQUtnekUsVUFBVTV5RSxPQUFPaVAsSUFDbkRBLEVBQUUvTSxVQUFVdWdGLEdBQUssYUFBZXh6RSxFQTdLWixHQThLdEIsR0FBbUIsV0FDcEIsU0FBU0EsRUFBRUEsRUFBR3JGLEVBQUczSCxFQUFHME8sR0FDaEIvUSxLQUFLd3VFLEdBQUtuL0QsRUFBR3JQLEtBQUtvK0IsR0FBS3AwQixFQUFHaEssS0FBS2lqRixlQUFpQjVnRixFQUFHckMsS0FBSzJ1RSxHQUFLNTlELEVBQUcvUSxLQUFLeWhELEdBQUssRUFBR3poRCxLQUFLdXZFLEdBQUssSUFBSTNDLEdBQUc1c0UsS0FBS3d1RSxHQUFJLHFCQUczRyxPQUFPbi9ELEVBQUUvTSxVQUFVNGdGLElBQU0sV0FDckJsakYsS0FBS3lxQyxNQUNOcDdCLEVBQUUvTSxVQUFVbW9DLEdBQUssV0FDaEIsSUFBSXA3QixFQUFJclAsS0FDUkEsS0FBS3V2RSxHQUFHM1gsSUFBRyxXQUNQLE9BQU8sRUFBRXZvRCxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJQSxFQUFHckYsRUFBRytHLEVBQUkvUSxLQUNkLE9BQU8sRUFBRUEsTUFBTSxTQUFVcUMsR0FDckIsT0FBT2dOLEVBQUksSUFBSSxHQUFHclAsS0FBS28rQixLQUFNcDBCLEVBQUloSyxLQUFLd3FDLEdBQUduN0IsS0FBT3JGLEVBQUU1RSxNQUFLLFNBQVU0RSxHQUM3RCtHLEVBQUV5OUQsR0FBR00sSUFBRyxXQUNKLE9BQU96L0QsRUFBRTJ6RSxTQUFTNTlFLE1BQUssV0FDbkIyTCxFQUFFNDlELEdBQUducUUsUUFBUXdGLE1BQ2I4SCxPQUFNLFNBQVV6QyxHQUNoQjBCLEVBQUUraEQsR0FBR3pqRCxZQUdieUMsT0FBTSxTQUFVekMsR0FDaEIwQixFQUFFK2hELEdBQUd6akQsTUFDSixDQUFFLGFBSXBCQSxFQUFFL00sVUFBVWtvQyxHQUFLLFNBQVNuN0IsR0FDekIsSUFDSSxJQUFJckYsRUFBSWhLLEtBQUtpakYsZUFBZTV6RSxHQUM1QixPQUFRLEdBQUVyRixJQUFNQSxFQUFFOEgsT0FBUzlILEVBQUU1RSxLQUFPNEUsR0FBS2hLLEtBQUsydUUsR0FBR2xxRSxPQUFPOEcsTUFBTSwrQ0FDOUQsTUFDRixNQUFPOEQsR0FFTCxPQUFPclAsS0FBSzJ1RSxHQUFHbHFFLE9BQU80SyxHQUFJLE9BRS9CQSxFQUFFL00sVUFBVXd3RCxHQUFLLFNBQVN6akQsR0FDekIsSUFBSXJGLEVBQUloSyxLQUNSQSxLQUFLeWhELEdBQUssR0FBS3poRCxLQUFLeXBDLEdBQUdwNkIsSUFBTXJQLEtBQUt5aEQsSUFBTSxFQUFHemhELEtBQUt3dUUsR0FBR00sSUFBRyxXQUNsRCxPQUFPOWtFLEVBQUV5Z0MsS0FBTWxtQyxRQUFRQyxjQUNwQnhFLEtBQUsydUUsR0FBR2xxRSxPQUFPNEssSUFDdkJBLEVBQUUvTSxVQUFVbW5DLEdBQUssU0FBU3A2QixHQUN6QixHQUFJLGtCQUFvQkEsRUFBRTNNLEtBQU0sQ0FHNUIsSUFBSXNILEVBQUlxRixFQUFFaUUsS0FDVixNQUFPLFlBQWN0SixHQUFLLHdCQUEwQkEsSUFBTXE3RCxHQUFHcjdELEdBRWpFLE9BQU8sR0FDUnFGLEVBakRpQixHQWtEbkIsR0FBbUIsV0FDcEIsU0FBU0EsRUFBRUEsRUFTWHJGLEVBQUczSCxHQUNDLElBQUkwTyxFQUFJL1EsS0FDUkEsS0FBSzQ1QyxZQUFjdnFDLEVBQUdyUCxLQUFLd3VFLEdBQUt4a0UsRUFBR2hLLEtBQUsydUQsR0FBS3RzRCxFQUFHckMsS0FBSzJ3RCxLQUFPc2hCLEdBQUc1UCxnQkFDL0RyaUUsS0FBSzYzRSxTQUFXLEdBQUV0bkQsSUFBS3Z3QixLQUFLMnFDLEdBQUssYUFBZTNxQyxLQUFLNjZDLEdBQUssSUFBSTh4QixHQUFJM3NFLEtBQUs0NUMsWUFBWThCLElBQUcsU0FBVXJzQyxHQUM1RixHQUFFLGtCQUFtQixpQkFBa0JBLEVBQUV3N0IsS0FBTTk1QixFQUFFNC9DLEtBQUtnUixRQUFRdHlELEtBQU8wQixFQUFFNC9DLEtBQU90aEQsRUFDOUUwQixFQUFFNDVCLEdBQUd0N0IsSUFBSzBCLEVBQUU4cEMsR0FBR3IyQyxhQUd2QixPQUFPNkssRUFBRS9NLFVBQVU2Z0YsaUJBQW1CLFdBQ2xDLE9BQU8sRUFBRW5qRixVQUFNLE9BQVEsR0FBUSxXQUMzQixPQUFPLEVBQUVBLE1BQU0sU0FBVXFQLEdBQ3JCLE9BQVFBLEVBQUVlLE9BQ1IsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjcFEsS0FBSzY2QyxHQUFHanBDLFNBRWpDLEtBQUssRUFDSCxNQUFPLENBQUUsR0FBZ0J2QyxFQUFFZ0IsT0FBUSxDQUMvQm0rRCxHQUFJeHVFLEtBQUt3dUUsR0FDVDdmLEdBQUkzdUQsS0FBSzJ1RCxHQUNUa3BCLFNBQVU3M0UsS0FBSzYzRSxTQUNmaitCLFlBQWE1NUMsS0FBSzQ1QyxZQUNsQjBXLEdBQUl0d0QsS0FBSzJ3RCxLQUNUcFgsR0FBSSxlQUtyQmxxQyxFQUFFL00sVUFBVXluQyxHQUFLLFNBQVMxNkIsR0FDekIsSUFBSXJGLEVBQUloSyxLQUNSQSxLQUFLMnFDLEdBQUt0N0IsRUFFVnJQLEtBQUs2NkMsR0FBR2pwQyxRQUFReE0sTUFBSyxXQUNqQixPQUFPNEUsRUFBRTJnQyxHQUFHM2dDLEVBQUUybUQsVUFPdEJ0aEQsRUFBRS9NLFVBQVU4bkMsR0FBSyxXQUNiLEdBQUlwcUMsS0FBS3d1RSxHQUFHOFIsR0FBSSxNQUFNLElBQUlqdkUsR0FBRSxHQUFFa3hELG9CQUFxQiw0Q0FDcERsekQsRUFBRS9NLFVBQVU4M0UsVUFBWSxXQUN2QixJQUFJL3FFLEVBQUlyUCxLQUNSQSxLQUFLd3VFLEdBQUdxQixLQUNSLElBQUk5K0QsRUFBSSxJQUFJNDdELEdBQ1osT0FBTzNzRSxLQUFLd3VFLEdBQUdrQixJQUFHLFdBQ2QsT0FBTyxFQUFFcmdFLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLElBQUlBLEVBQUdyRixFQUNQLE9BQU8sRUFBRWhLLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSCxPQUFPL04sRUFBRWlPLEtBQUs3USxLQUFLLENBQUUsRUFBRyxFQUFHLENBQUUsSUFBTU8sS0FBS29qRixHQUFLLENBQUUsRUFBY3BqRixLQUFLb2pGLEdBQUdoSixhQUFnQixDQUFFLEVBQWMsR0FFdkcsS0FBSyxFQUNILzNFLEVBQUVnTyxPQUFRaE8sRUFBRStOLE1BQVEsRUFFdEIsS0FBSyxFQUNILE9BQU9wUSxLQUFLeXBELEdBQUssQ0FBRSxFQUFjenBELEtBQUt5cEQsR0FBRzJ3QixhQUFnQixDQUFFLEVBQWMsR0FFM0UsS0FBSyxFQUNILzNFLEVBQUVnTyxPQUFRaE8sRUFBRStOLE1BQVEsRUFFdEIsS0FBSyxFQUlILE9BQU9wUSxLQUFLNDVDLFlBQVltQixLQUFNaHFDLEVBQUV2TSxVQUFXLENBQUUsRUFBYyxHQUU3RCxLQUFLLEVBQ0gsT0FBTzZLLEVBQUloTixFQUFFZ08sT0FBUXJHLEVBQUlzbUUsR0FBR2poRSxFQUFHLGtDQUFtQzBCLEVBQUV0TSxPQUFPdUYsR0FBSSxDQUFFLEVBQWMsR0FFakcsS0FBSyxFQUNILE1BQU8sQ0FBRSxhQUlwQitHLEVBQUVhLFNBQ1J2QyxFQXZGaUIsR0E2R3BCLFNBQVMsR0FBR0EsRUFBRzBCLEdBQ2YsT0FBTyxFQUFFL1EsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSU0sRUFBRzZCLEVBQUluQyxLQUNYLE9BQU8sRUFBRUEsTUFBTSxTQUFVdXdCLEdBQ3JCLE9BQVFBLEVBQUVuZ0IsT0FDUixLQUFLLEVBQ0gsT0FBT2YsRUFBRW0vRCxHQUFHeUIsS0FBTSxHQUFFLGtCQUFtQix5Q0FDdkMsQ0FBRSxFQUFjNWdFLEVBQUU4ekUsb0JBRXBCLEtBQUssRUFDSCxPQUFPN2lGLEVBQUlpd0IsRUFBRWxnQixPQUFRLENBQUUsRUFBY1UsRUFBRTZ0RSxXQUFXdCtFLElBRXBELEtBQUssRUFDSCxPQUFPaXdCLEVBQUVsZ0IsT0FBUWhCLEVBQUUwNkIsSUFBRyxTQUFVenBDLEdBQzVCLE9BQU8rTyxFQUFFbS9ELEdBQUdzQixJQUFHLFdBQ1gsT0FBTyxFQUFFM3RFLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLE9BQU8sRUFBRW5DLE1BQU0sU0FBVXFQLEdBQ3JCLE9BQVFBLEVBQUVlLE9BQ1IsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjd3JELEdBQUc3cUQsRUFBRTJzQixHQUFJcDlCLElBRWxDLEtBQUssRUFDSCxPQUFPK08sRUFBRWdCLE9BQVEsQ0FBRSxnQkFRdkNVLEVBQUV5b0UsWUFBWXRwRCxJQUFHLFdBQ2IsT0FBTzdnQixFQUFFK3FFLGVBQ1IvcUUsRUFBRW82QyxHQUFLMTRDLEVBQUcsQ0FBRSxVQU1qQyxTQUFTLEdBQUcxQixFQUFHMEIsR0FDWCxPQUFPLEVBQUUvUSxVQUFNLE9BQVEsR0FBUSxXQUMzQixJQUFJTSxFQUFHNkIsRUFDUCxPQUFPLEVBQUVuQyxNQUFNLFNBQVV1d0IsR0FDckIsT0FBUUEsRUFBRW5nQixPQUNSLEtBQUssRUFDSCxPQUFPZixFQUFFbS9ELEdBQUd5QixLQUFNLENBQUUsRUFBY2grQyxHQUFHNWlCLElBRXZDLEtBQUssRUFDSCxPQUFPL08sRUFBSWl3QixFQUFFbGdCLE9BQVEsR0FBRSxrQkFBbUIsd0NBQzFDLENBQUUsRUFBY2hCLEVBQUU4ekUsb0JBRXBCLEtBQUssRUFDSCxPQUFPaGhGLEVBQUlvdUIsRUFBRWxnQixPQUFRLENBQUUsRUFBY1UsRUFBRTZ0RSxXQUFXdCtFLEVBQUc2QixJQUV2RCxLQUFLLEVBQ0gsT0FBT291QixFQUFFbGdCLE9BR1RoQixFQUFFMDZCLElBQUcsU0FBVXpwQyxHQUNYLE9BQU8rTyxFQUFFbS9ELEdBQUdzQixJQUFHLFdBQ1gsT0FBTyxTQUFTemdFLEVBQUcwQixHQUNmLE9BQU8sRUFBRS9RLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHMUosRUFDUCxPQUFPLEVBQUVOLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSCxPQUFRcEcsRUFBSSxHQUFFcUYsSUFBSW0vRCxHQUFHeUIsS0FBTSxHQUFFLGNBQWUsd0NBQzVDM3ZFLEVBQUl1NEUsR0FBRzd1RSxHQUlQQSxFQUFFa3pCLEdBQUdsVSxJQUFJLEdBQTJCLENBQUUsRUFBY28wQyxHQUFHcHpELElBRXpELEtBQUssRUFDSCxPQUFPM0gsRUFBRWdPLE9BQVEvUCxHQUVqQjBKLEVBQUUyekIsR0FBRzUzQixJQUFJLFdBQTBCLENBQUUsRUFBY2lFLEVBQUU0dkIsR0FBR3NsRCxHQUFHbnVFLElBRTdELEtBQUssRUFDSCxPQUFPMU8sRUFBRWdPLE9BQVFyRyxFQUFFa3pCLEdBQUdsakIsT0FBTyxHQUEyQixDQUFFLEVBQWNpaUQsR0FBR2p5RCxJQUU3RSxLQUFLLEVBSUgsT0FBTzNILEVBQUVnTyxPQUFRLENBQUUsVUF6QjVCLENBNkJMVSxFQUFFMG5DLEdBQUluNEMsU0FFWCtPLEVBQUUrekUsR0FBS3J5RSxFQUFHLENBQUUsVUFNakMsU0FBU2toQixHQUFHNWlCLEdBQ1IsT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsT0FBTyxFQUFFQSxNQUFNLFNBQVVnSyxHQUNyQixPQUFRQSxFQUFFb0csT0FDUixLQUFLLEVBQ0gsT0FBT2YsRUFBRW82QyxHQUFLLENBQUUsRUFBYyxJQUFPLEdBQUUsa0JBQW1CLDBDQUMxRCxDQUFFLEVBQWMsR0FBR3A2QyxFQUFHLElBQUlxL0QsTUFFNUIsS0FBSyxFQUNIMWtFLEVBQUVxRyxPQUFRckcsRUFBRW9HLE1BQVEsRUFFdEIsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFlZixFQUFFbzZDLFdBTTFDLFNBQVMsR0FBR3A2QyxHQUNSLE9BQU8sRUFBRXJQLFVBQU0sT0FBUSxHQUFRLFdBQzNCLE9BQU8sRUFBRUEsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE9BQU9mLEVBQUUrekUsR0FBSyxDQUFFLEVBQWMsSUFBTyxHQUFFLGtCQUFtQix5Q0FDMUQsQ0FBRSxFQUFjLEdBQUcvekUsRUFBRyxJQUFJdy9ELE1BRTVCLEtBQUssRUFDSDdrRSxFQUFFcUcsT0FBUXJHLEVBQUVvRyxNQUFRLEVBRXRCLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBZWYsRUFBRSt6RSxXQU0xQyxTQUFTbnRCLEdBQUc1bUQsR0FDUixPQUFPNGlCLEdBQUc1aUIsR0FBR2pLLE1BQUssU0FBVWlLLEdBQ3hCLE9BQU9BLEVBQUVtcUUsZUFJakIsU0FBU2xvRCxHQUFHamlCLEdBQ1IsT0FBTzRpQixHQUFHNWlCLEdBQUdqSyxNQUFLLFNBQVVpSyxHQUN4QixPQUFPQSxFQUFFcXVCLE1BSWpCLFNBQVN2TCxHQUFHOWlCLEdBQ1IsT0FBTyxHQUFHQSxHQUFHakssTUFBSyxTQUFVaUssR0FDeEIsT0FBT0EsRUFBRW9wQyxNQUlqQixTQUFTLEdBQUdwcEMsR0FDUixPQUFPLEdBQUdBLEdBQUdqSyxNQUFLLFNBQVVpSyxHQUN4QixPQUFPQSxFQUFFd3NFLE1BSWpCLFNBQVMsR0FBR3hzRSxHQUNSLE9BQU8sRUFBRXJQLFVBQU0sT0FBUSxHQUFRLFdBQzNCLElBQUlnSyxFQUFHK0csRUFDUCxPQUFPLEVBQUUvUSxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMsR0FBR2YsSUFFNUIsS0FBSyxFQUNILE9BQU9yRixFQUFJM0gsRUFBRWdPLE9BQVEsQ0FBRSxJQUFpQlUsRUFBSS9HLEVBQUVtdUMsSUFBSTI0QixHQUFLMEssR0FBRzF1RSxLQUFLLEtBQU05QyxFQUFFNnhFLElBQUs5cUUsRUFBRXFnRSxHQUFLK0ssR0FBR3J2RSxLQUFLLEtBQU05QyxFQUFFNnhFLElBQ25HOXFFLFdBTThELFNBQVMsR0FBRzFCLEVBQUcwQixHQUN6RixJQUFJelEsRUFBSU4sS0FBTW1DLEVBQUksSUFBSXdxRSxHQUN0QixPQUFPdDlELEVBQUVtL0QsR0FBR00sSUFBRyxXQUNYLE9BQU8sRUFBRXh1RSxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJMEosRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUlpeEUsR0FBSSxDQUFFLEVBQWMsR0FBRzVyRSxJQUVwQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWVyRixFQUFFN0UsV0FBTSxFQUFRLENBQUU5QyxFQUFFZ08sT0FBUVUsRUFBRzVPLGVBSWxFQSxFQUFFeVAsUUFrQlgsU0FBUyxHQUFHdkMsRUFBRzBCLEVBQUd6USxHQUNkLE9BQU8sRUFBRU4sVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUc3SCxFQUFHb3VCLEVBQ1YsT0FBTyxFQUFFdndCLE1BQU0sU0FBVXFDLEdBQ3JCLE9BQVFBLEVBQUUrTixPQUNSLEtBQUssRUFDSCxPQUFPL04sRUFBRWlPLEtBQUs3USxLQUFLLENBQUUsRUFBRyxFQUFHLENBQUUsSUFBTSxDQUFFLEVBQWMsU0FBUzRQLEVBQUdyRixHQUMzRCxJQUFJM0gsRUFBSSxHQUFFZ04sR0FDVixPQUFPaE4sRUFBRW0zRSxZQUFZcE0sZUFBZSxnQkFBaUIsWUFBWSxTQUFVLzlELEdBQ3ZFLE9BQU9oTixFQUFFdXhCLEdBQUdvcEIsR0FBRzN0QyxFQUFHckYsTUFIeUIsQ0FLakRxRixFQUFHMEIsSUFFUCxLQUFLLEVBQ0gsT0FBUS9HLEVBQUkzSCxFQUFFZ08sa0JBQW1CNGtELEdBQUszMEQsRUFBRWtFLFFBQVF3RixHQUFLQSxhQUFhdkksR0FBS25CLEVBQUVrRSxRQUFRLE1BQVFsRSxFQUFFbUUsT0FBTyxJQUFJNE0sR0FBRSxHQUFFc3hELFlBQWEsbU1BQ3ZILENBQUUsRUFBYyxHQUVsQixLQUFLLEVBQ0gsT0FBT3hnRSxFQUFJRSxFQUFFZ08sT0FBUWtnQixFQUFJKy9DLEdBQUdudUUsRUFBRywyQkFBNkI0TyxFQUFJLGVBQ2hFelEsRUFBRW1FLE9BQU84ckIsR0FBSSxDQUFFLEVBQWMsR0FFL0IsS0FBSyxFQUNILE1BQU8sQ0FBRSxVQVNyQixTQUFTLEdBQUdsaEIsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEdBQ3hCLElBQUk2QixFQUFJLElBQUl3dEUsR0FBRyxDQUNYN3RFLEtBQU0sU0FBU0ssR0FHWDZILEVBQUU4a0UsSUFBRyxXQUNELE9BQU9xQyxHQUFHOWhFLEVBQUdraEIsTUFFakIsSUFBSWpoQixFQUFJbk4sRUFBRTRsRSxLQUFLaHZELElBQUkxVyxJQUNsQmlOLEdBQUtuTixFQUFFK2xFLFVBUVI1bkUsRUFBRW1FLE9BQU8sSUFBSTRNLEdBQUUsR0FBRXN4RCxZQUFhLDBEQUE0RHJ6RCxHQUFLbk4sRUFBRStsRSxXQUFhbjNELEdBQUssV0FBYUEsRUFBRXBOLE9BQVNyRCxFQUFFbUUsT0FBTyxJQUFJNE0sR0FBRSxHQUFFc3hELFlBQWEsOEtBQWdMcmlFLEVBQUVrRSxRQUFRckMsSUFFdlcwQyxNQUFPLFNBQVN3SyxHQUNaLE9BQU8vTyxFQUFFbUUsT0FBTzRLLE1BRXBCa2hCLEVBQUksSUFBSWdoRCxHQUFHeFksR0FBRzEyRCxFQUFFcThDLE1BQU92OEMsRUFBRyxDQUMxQnd2RSx3QkFBd0IsRUFDeEJJLElBQUksSUFFUixPQUFPbEIsR0FBR3hoRSxFQUFHa2hCLEdBT2IsSUFBSSxHQUFtQixTQUFTdm1CLEdBQ2hDLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsSUFBSTBPLEVBQUkvUSxLQUNSLE9BQVErUSxFQUFJL0csRUFBRXpILEtBQUt2QyxLQUFNcVAsRUFBR2hOLElBQU1yQyxNQUFNa3JDLEdBQUssSUFBSTZqQyxHQUFJaCtELEVBQUU0NEIsR0FBSyxTQUFVdDZCLEVBQUlBLEVBQUUzTSxLQUFPLFlBQ25GcU8sRUFFSixPQUFPLEVBQUUxTyxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVU4cUMsR0FBSyxXQUM3QixPQUFPcHRDLEtBQUtzcUMsSUFHWixHQUFHdHFDLE1BQU9BLEtBQUtzcUMsR0FBRzh2QyxhQUNuQi8zRSxFQVhvQixDQVlYLFdBQ1osU0FBU2dOLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBSzJwQyxHQUFLLFNBQVUzcEMsS0FBS2dyQyxHQUFLLElBQUlvbEMsR0FBRyxJQUFLcHdFLEtBQUtrdEMsSUFBSyxFQUFJNzlCLGFBQWFjLElBQUtuUSxLQUFLaWhGLEdBQUs1eEUsRUFDcEZyUCxLQUFLd3JDLEdBQUssSUFBSWduQyxLQUFPeHlFLEtBQUs0ckMsR0FBS3Y4QixFQUFHclAsS0FBS2loRixHQUFLLFNBQVM1eEUsR0FDakQsSUFBSzlOLE9BQU9lLFVBQVU4TCxlQUFlakosTUFBTWtLLEVBQUV2TCxRQUFTLENBQUUsY0FBZ0IsTUFBTSxJQUFJdU4sR0FBRSxHQUFFMndELGlCQUFrQix1REFDeEcsT0FBTyxJQUFJN3hELEdBQUVkLEVBQUV2TCxRQUFRaWQsV0FGaUIsQ0FHMUMxUixHQUFJclAsS0FBS3dyQyxHQUFLLElBQUlpbkMsR0FBR3pvRSxJQUUzQixPQUFPekksT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxNQUFPLENBSzdDd0QsSUFBSyxXQUNELElBQUs5RixLQUFLNHJDLEdBQUksTUFBTSxJQUFJdjZCLEdBQUUsR0FBRWt4RCxvQkFBcUIsZ0ZBQ2pELE9BQU92aUUsS0FBSzRyQyxJQUVoQjU5QixZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLEtBQU0sQ0FDekN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtrdEMsSUFFaEJsL0IsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxLQUFNLENBQ3pDd0QsSUFBSyxXQUNELFlBQU8sSUFBVzlGLEtBQUswc0MsSUFFM0IxK0IsWUFBWSxFQUNaaU8sY0FBYyxJQUNkNU0sRUFBRS9NLFVBQVVncUMsR0FBSyxTQUFTajlCLEdBQzFCLEdBQUlyUCxLQUFLa3RDLEdBQUksTUFBTSxJQUFJNzdCLEdBQUUsR0FBRWt4RCxvQkFBcUIsc0tBQ2hEdmlFLEtBQUtnckMsR0FBSyxJQUFJb2xDLEdBQUcvZ0UsUUFBSSxJQUFXQSxFQUFFdXFDLGNBQWdCNTVDLEtBQUt3ckMsR0FBSyxTQUFTbjhCLEdBQ2pFLElBQUtBLEVBQUcsT0FBTyxJQUFJbWpFLEdBQ25CLE9BQVFuakUsRUFBRXdJLE1BQ1IsSUFBSyxPQUNILElBQUk3TixFQUFJcUYsRUFBRW11QyxPQUVNLE9BQU8sS0FBSSxpQkFBbUJ4ekMsR0FBSyxPQUFTQSxJQUFNQSxFQUFFdzBDLE9BQVN4MEMsRUFBRXcwQyxLQUFLbTBCLGtDQUNwRixJQUFJQyxHQUFHNW9FLEVBQUdxRixFQUFFZzBFLGNBQWdCLEtBRTlCLElBQUssV0FDSCxPQUFPaDBFLEVBQUVtdUMsT0FFWCxRQUNFLE1BQU0sSUFBSW5zQyxHQUFFLEdBQUUyd0QsaUJBQWtCLGtFQWJvQixDQWUxRDN5RCxFQUFFdXFDLGVBQ0x2cUMsRUFBRS9NLFVBQVV3bkMsR0FBSyxXQUNoQixPQUFPOXBDLEtBQUtnckMsSUFDYjM3QixFQUFFL00sVUFBVXUvRSxHQUFLLFdBQ2hCLE9BQU83aEYsS0FBS2t0QyxJQUFLLEVBQUlsdEMsS0FBS2dyQyxJQUMzQjM3QixFQUFFL00sVUFBVThYLFFBQVUsV0FDckIsT0FBT3BhLEtBQUswc0MsS0FBTzFzQyxLQUFLMHNDLEdBQUsxc0MsS0FBS290QyxNQUFPcHRDLEtBQUswc0MsSUFTbERyOUIsRUFBRS9NLFVBQVU4cUMsR0FBSyxXQUtiLE9BQU8sU0FBUy85QixHQUNaLElBQUlyRixFQUFJK2xFLEdBQUdqcUUsSUFBSXVKLEdBQ2ZyRixJQUFNLEdBQUUsb0JBQXFCLHNCQUF1QitsRSxHQUFHLzFELE9BQU8zSyxHQUFJckYsRUFBRW93RSxhQUZqRSxDQUdMcDZFLE1BQU91RSxRQUFRQyxXQUNsQjZLLEVBeEVTLElBc0daLFNBQVMsR0FBR0EsRUFBRzBCLEVBQUd6USxHQUNsQixJQUFJNkIsRUFBSW5DLEtBQU11d0IsRUFBSSxJQUFJbzhDLEdBQ3RCLE9BQU90OUQsRUFBRW0vRCxHQUFHaUIsU0FBUSxXQUNoQixPQUFPLEVBQUV0dEUsT0FBRyxPQUFRLEdBQVEsV0FDeEIsSUFBSTZILEVBQ0osT0FBTyxFQUFFaEssTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU8vTixFQUFFaU8sS0FBSzdRLEtBQUssQ0FBRSxFQUFHLEVBQUcsQ0FBRSxJQUFNLENBQUUsRUFBYyxHQUFHNFAsRUFBRy9PLElBRTNELEtBQUssRUFDSCxPQUFPK0IsRUFBRWdPLE9BQVEsQ0FBRSxFQUFjLEdBQUdoQixFQUFHMEIsSUFFekMsS0FBSyxFQUNILE9BQU8xTyxFQUFFZ08sT0FBUWtnQixFQUFFL3JCLFVBQVcsQ0FBRSxFQUFjLEdBRWhELEtBQUssRUFDSCxJQUtBLFNBQVM2SyxHQUNMLE1BQU8sa0JBQW9CQSxFQUFFM00sS0FBTzJNLEVBQUVpRSxPQUFTLEdBQUVpdkQscUJBQXVCbHpELEVBQUVpRSxPQUFTLEdBQUVvdkQsZ0JBQWtCLG9CQUFzQjRnQixjQUFnQmowRSxhQUFhaTBFLGVBQWtCLEtBQU9qMEUsRUFBRWlFLE1BQVEsS0FBT2pFLEVBQUVpRSxNQUd0TSxLQUFPakUsRUFBRWlFLEtBSmIsQ0FLRXRKLEVBQUkzSCxFQUFFZ08sUUFBUyxNQUFNckcsRUFDdkIsT0FBTytNLFFBQVF1RixLQUFLLDZFQUErRXRTLEdBQ25HdW1CLEVBQUU5ckIsT0FBT3VGLEdBQUksQ0FBRSxFQUFjLEdBRS9CLEtBQUssRUFDSCxNQUFPLENBQUUsYUFJckI1RSxNQUFLLFdBQ0wsT0FBT21yQixFQUFFM2UsV0FVakIsU0FBUyxHQUFHdkMsR0FDUixHQUFJQSxFQUFFbW9ELElBQU1ub0QsRUFBRSs3QixHQUFJLE1BQU0sSUFBSS81QixHQUFFLEdBQUVreEQsb0JBQXFCLHdLQTJCckQsSUFBSSxHQUFtQixTQUFTdjRELEdBQ2hDLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEVBQUcwTyxFQUFHelEsRUFBRzZCLEVBQUdvdUIsR0FDdEIsSUFBSWpoQixFQUFJdFAsS0FDUixPQUFRc1AsRUFBSXRGLEVBQUV6SCxLQUFLdkMsS0FBTXFQLEVBQUdoTixFQUFHME8sRUFBR3pRLEVBQUdpd0IsSUFBTXZ3QixNQUFNbWhGLEdBQUs5eEUsRUFBR0MsRUFBRXM3QixHQUFLdjdCLEVBQUdDLEVBQUV5YixTQUFXNW9CLEVBQ2hGbU4sRUFLRyxPQUFPLEVBQUVqTixFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVU2b0UsT0FBUyxXQUN4QyxPQUFPbmhFLEVBQUUxSCxVQUFVNm9FLE9BQU81b0UsS0FBS3ZDLE9BZ0JuQ3FDLEVBQUVDLFVBQVVpQixLQUFPLFNBQVM4TCxHQUN4QixRQUFJLElBQVdBLElBQU1BLEVBQUksSUFBS3JQLEtBQUtzaEYsR0FBSSxDQUNuQyxHQUFJdGhGLEtBQUt1aEYsR0FBSSxDQUdULElBQUl2M0UsRUFBSSxJQUFJLEdBQUdoSyxLQUFLbWhGLEdBQUluaEYsS0FBS29oRixHQUFJcGhGLEtBQUtxaEYsR0FBSXJoRixLQUFLc2hGLEdBQUl0aEYsS0FBSytxQixTQUN2QyxNQUNqQixPQUFPL3FCLEtBQUt1aEYsR0FBR0MsY0FBY3gzRSxFQUFHcUYsR0FFcEMsT0FBT3JQLEtBQUtvaEYsR0FBR2IsR0FBR3ZnRixLQUFLc2hGLEdBQUc1bUIsS0FBTXJyRCxFQUFFazBFLG9CQXFCMUNsaEYsRUFBRUMsVUFBVXdELElBQU0sU0FBU3VKLEVBQUdyRixHQUMxQixRQUFJLElBQVdBLElBQU1BLEVBQUksSUFBS2hLLEtBQUtzaEYsR0FBSSxDQUNuQyxJQUFJai9FLEVBQUlyQyxLQUFLc2hGLEdBQUcvOUUsT0FBTzBnRSxNQUFNZ04sR0FBRyx1QkFBd0I1aEUsSUFDeEQsR0FBSSxPQUFTaE4sRUFBRyxPQUFPckMsS0FBS29oRixHQUFHYixHQUFHbCtFLEVBQUcySCxFQUFFdTVFLG9CQUU1Q2xoRixFQTdEb0IsQ0E4RHpCZ3VFLElBQUssR0FBbUIsU0FBU3JtRSxHQUMvQixTQUFTM0gsSUFDTCxPQUFPLE9BQVMySCxHQUFLQSxFQUFFN0UsTUFBTW5GLEtBQU1tRyxZQUFjbkcsS0FjOUMsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVaUIsS0FBTyxTQUFTOEwsR0FDL0MsWUFBTyxJQUFXQSxJQUFNQSxFQUFJLElBQUtyRixFQUFFMUgsVUFBVWlCLEtBQUtoQixLQUFLdkMsS0FBTXFQLElBQzlEaE4sRUFsQm1CLENBbUJ4QixJQUFLLEdBQW1CLFdBQ3RCLFNBQVNnTixFQUFFQSxFQUFHckYsRUFBRzNILEVBQUcwTyxHQUNoQi9RLEtBQUttaEYsR0FBSzl4RSxFQUFHclAsS0FBS29oRixHQUFLcDNFLEVBQUdoSyxLQUFLd3BDLEdBQUt6NEIsRUFBRy9RLEtBQUsrcUIsU0FBVyxJQUFJLEdBQUdoYSxFQUFFaWhFLGlCQUFrQmpoRSxFQUFFbTNELFdBQ3BGbG9FLEtBQUt3SSxNQUFRbkcsRUFFakIsT0FBT2QsT0FBT3NFLGVBQWV3SixFQUFFL00sVUFBVyxPQUFRLENBQ2V3RCxJQUFLLFdBQzlELElBQUl1SixFQUFJLEdBQ1IsT0FBT3JQLEtBQUsyRixTQUFRLFNBQVVxRSxHQUMxQixPQUFPcUYsRUFBRTVQLEtBQUt1SyxNQUNicUYsR0FFVHJCLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFld0osRUFBRS9NLFVBQVcsT0FBUSxDQUNZd0QsSUFBSyxXQUN4RCxPQUFPOUYsS0FBS3dwQyxHQUFHdStCLEtBQUszaUQsTUFFeEJwWCxZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXdKLEVBQUUvTSxVQUFXLFFBQVMsQ0FDa0J3RCxJQUFLLFdBQy9ELE9BQU8sSUFBTTlGLEtBQUtvbEIsTUFFdEJwWCxZQUFZLEVBQ1ppTyxjQUFjLElBU2xCNU0sRUFBRS9NLFVBQVVxRCxRQUFVLFNBQVMwSixFQUFHckYsR0FDOUIsSUFBSTNILEVBQUlyQyxLQUNSQSxLQUFLd3BDLEdBQUd1K0IsS0FBS3BpRSxTQUFRLFNBQVVvTCxHQUMzQjFCLEVBQUU5TSxLQUFLeUgsRUFBRyxJQUFJLEdBQUczSCxFQUFFOCtFLEdBQUk5K0UsRUFBRSsrRSxHQUFJcndFLEVBQUUzRixJQUFLMkYsRUFBRyxJQUFJLEdBQUcxTyxFQUFFbW5DLEdBQUcwNkIsR0FBR25yRCxJQUFJaEksRUFBRTNGLEtBQU0vSSxFQUFFbW5DLEdBQUcwK0IsV0FBWTdsRSxFQUFFbUcsTUFBTSs0RSxTQVluR2x5RSxFQUFFL00sVUFBVTJsRSxXQUFhLFNBQVM1NEQsUUFDOUIsSUFBV0EsSUFBTUEsRUFBSSxJQUNyQixJQUFJckYsSUFBTXFGLEVBQUVzaUUsdUJBQ1osR0FBSTNuRSxHQUFLaEssS0FBS3dwQyxHQUFHNCtCLEdBQUksTUFBTSxJQUFJLzJELEdBQUUsR0FBRTJ3RCxpQkFBa0IsK0hBQ3JELE9BQU9oaUUsS0FBS2l0QyxJQUFNanRDLEtBQUt1ckMsS0FBT3ZoQyxJQUFNaEssS0FBS2l0QyxHQUV6QyxTQUFTNTlCLEVBQUdyRixHQUNSLEdBQUlxRixFQUFFbTZCLEdBQUd3K0IsR0FBRzFmLElBQUssQ0FHYixJQUFJam1ELEVBQUksRUFDUixPQUFPZ04sRUFBRW02QixHQUFHeStCLFdBQVdob0UsS0FBSSxTQUFVK0osR0FDakMsSUFBSStHLEVBQUksSUFBSSxHQUFHMUIsRUFBRTh4RSxHQUFJOXhFLEVBQUUreEUsR0FBSXAzRSxFQUFFNjlELElBQUl6OEQsSUFBS3BCLEVBQUU2OUQsSUFBSyxJQUFJLEdBQUd4NEQsRUFBRW02QixHQUFHMDZCLEdBQUduckQsSUFBSS9PLEVBQUU2OUQsSUFBSXo4RCxLQUFNaUUsRUFBRW02QixHQUFHMCtCLFdBQVk3NEQsRUFBRTdHLE1BQU0rNEUsSUFDckcsT0FBT3YzRSxFQUFFNjlELElBQUssQ0FDVmh3RCxLQUFNLFFBQ05nd0QsSUFBSzkyRCxFQUNMeXlFLFVBQVcsRUFDWEMsU0FBVXBoRixRQU10QixJQUFJME8sRUFBSTFCLEVBQUVtNkIsR0FBR3crQixHQUNiLE9BQU8zNEQsRUFBRW02QixHQUFHeStCLFdBQVdyOEQsUUFBTyxTQUFVeUQsR0FDcEMsT0FBT3JGLEdBQUssSUFBcUJxRixFQUFFd0ksUUFDbkM1WCxLQUFJLFNBQVUrSixHQUNkLElBQUkzSCxFQUFJLElBQUksR0FBR2dOLEVBQUU4eEUsR0FBSTl4RSxFQUFFK3hFLEdBQUlwM0UsRUFBRTY5RCxJQUFJejhELElBQUtwQixFQUFFNjlELElBQUssSUFBSSxHQUFHeDRELEVBQUVtNkIsR0FBRzA2QixHQUFHbnJELElBQUkvTyxFQUFFNjlELElBQUl6OEQsS0FBTWlFLEVBQUVtNkIsR0FBRzArQixXQUFZNzRELEVBQUU3RyxNQUFNKzRFLElBQUtqaEYsR0FBSyxFQUFHNkIsR0FBSyxFQUN2SCxPQUFPLElBQWtCNkgsRUFBRTZOLE9BQVN2WCxFQUFJeVEsRUFBRXVQLFFBQVF0VyxFQUFFNjlELElBQUl6OEQsS0FBTTJGLEVBQUlBLEVBQUVpSixPQUFPaFEsRUFBRTY5RCxJQUFJejhELE1BQ2pGLElBQW9CcEIsRUFBRTZOLE9BQVMxVixHQUFLNE8sRUFBSUEsRUFBRWlZLElBQUloZixFQUFFNjlELE1BQU12bkQsUUFBUXRXLEVBQUU2OUQsSUFBSXo4RCxNQUFPLENBQ3ZFeU0sS0FBTSxHQUFHN04sRUFBRTZOLE1BQ1hnd0QsSUFBS3hsRSxFQUNMbWhGLFNBQVVsakYsRUFDVm1qRixTQUFVdGhGLE1BM0J0QixDQThCRW5DLEtBQU1nSyxHQUFJaEssS0FBS3VyQyxHQUFLdmhDLEdBQUloSyxLQUFLaXRDLElBQ2hDNTlCLEVBdEZtQixHQW1HdEIsU0FBUyxHQUFHQSxHQUNaLE9BQVFBLEdBQ04sS0FBSyxFQUNILE1BQU8sUUFFVCxLQUFLLEVBQ0wsS0FBSyxFQUNILE1BQU8sV0FFVCxLQUFLLEVBQ0gsTUFBTyxVQUVULFFBQ0UsT0FBTyxNQVlYLFNBQVMsR0FBR0EsRUFBR3JGLEdBQ2YsT0FBT3FGLGFBQWEsSUFBTXJGLGFBQWEsR0FBS3FGLEVBQUU4eEUsS0FBT24zRSxFQUFFbTNFLElBQU05eEUsRUFBRWd5RSxHQUFHMWYsUUFBUTMzRCxFQUFFcTNFLE1BQVEsT0FBU2h5RSxFQUFFaXlFLEdBQUssT0FBU3QzRSxFQUFFczNFLEdBQUtqeUUsRUFBRWl5RSxHQUFHM2YsUUFBUTMzRCxFQUFFczNFLE1BQVFqeUUsRUFBRWt5RSxLQUFPdjNFLEVBQUV1M0UsR0FBS2x5RSxhQUFhLElBQU1yRixhQUFhLElBQU1xRixFQUFFOHhFLEtBQU9uM0UsRUFBRW0zRSxJQVU1TSxTQUFTOXhFLEVBQUdyRixHQUNSLE9BQU9xRixhQUFhMmhFLElBQU1obkUsYUFBYWduRSxJQUFNM2hFLEVBQUUyeEUsWUFBY2gzRSxFQUFFZzNFLFdBQWF4b0IsR0FBR25wRCxFQUFFc3lFLEdBQUkzM0UsRUFBRTIzRSxLQUFPdHlFLEVBQUVreUUsS0FBT3YzRSxFQUFFdTNFLEdBRDdHLENBRUVseUUsRUFBRTdHLE1BQU93QixFQUFFeEIsUUFBVTZHLEVBQUUwYixTQUFTNDJDLFFBQVEzM0QsRUFBRStnQixXQUFhMWIsRUFBRW02QixHQUFHbTRCLFFBQVEzM0QsRUFBRXcvQixJQThCeEUsSUFBSSxHQUFtQixTQUFTeC9CLEdBQ2hDLFNBQVMzSCxFQUFFZ04sR0FDUCxJQUFJaE4sRUFBSXJDLEtBQ1IsT0FBUXFDLEVBQUkySCxFQUFFekgsS0FBS3ZDLE9BQVNBLE1BQU1naEYsVUFBWTN4RSxFQUFHaE4sRUFFckQsT0FBTyxFQUFFQSxFQUFHMkgsR0FBSTNILEVBQUVDLFVBQVVvK0UsR0FBSyxTQUFTcnhFLEdBQ3RDLE9BQU8sSUFBSW1oRSxHQUFHbmhFLElBQ2ZoTixFQUFFQyxVQUFVcStFLEdBQUssU0FBU3R4RSxHQUN6QixJQUFJckYsRUFBSWhLLEtBQUsrZ0YsR0FBRzF4RSxFQUFHclAsS0FBS2doRixVQUFVQyxJQUNsQyxPQUFPLElBQUlyUCxHQUFHNXhFLEtBQUtnaEYsVUFBNEIsS0FBTWgzRSxJQUN0RDNILEVBVm9CLENBV3pCeXVFLElBUUUsU0FBUyxHQUFHemhFLEVBQUdyRixFQUFHM0gsR0FDbEIsSUFBSyxJQUFJME8sRUFBSSxHQUFJelEsRUFBSSxFQUFHQSxFQUFJNkYsVUFBVXhGLE9BQVFMLElBQUt5USxFQUFFelEsRUFBSSxHQUFLNkYsVUFBVTdGLEdBQ3hFLElBQUk2QixFQUFJOHNFLEdBQUc1L0QsRUFBRTJ4RSxVQUFXLElBQUt6d0QsRUFBSXNoRCxHQUFHMXZFLEdBR3BDLE9BQU82SCxhQUFhZ2xFLEtBQU9obEUsRUFBSUEsRUFBRXMxRSxJQUFLLEdBQUduOUUsR0FBSSxpQkFBbUI2SCxHQUFLQSxhQUFhbW1FLEdBQUtrQyxHQUFHOWhELEVBQUcsWUFBYWxoQixFQUFFZ3lFLEdBQUlyM0UsRUFBRzNILEVBQUcwTyxHQUFLNi9ELEdBQUdyZ0QsRUFBRyxZQUFhbGhCLEVBQUVneUUsR0FBSXIzRSxJQUFJODNFLEdBQUd6eUUsRUFBRWd5RSxHQUFJaDRDLEdBQUc4aEMsUUFBTyxLQVV6SCxTQUFTLEdBQUc5N0QsRUFBR3JGLEdBQ2pFLE9BQU8sR0FBRyxHQUFHcUYsR0FBSXJGLEdBTWpCLFNBQVMsR0FBR3FGLEVBQUdyRixFQUFHM0gsR0FDbEIsSUFBSTBPLEVBQUkxTyxFQUFFMGxFLEtBQUtqaUUsSUFBSWtFLEVBQUVxM0UsSUFBSy9nRixFQUFJLElBQUksR0FBRytPLEdBQ3JDLE9BQU8sSUFBSSxHQUFHQSxFQUFHL08sRUFBRzBKLEVBQUVxM0UsR0FBSXR3RSxFQUFHLElBQUksR0FBRzFPLEVBQUUydkUsaUJBQWtCM3ZFLEVBQUU2bEUsV0FBWWwrRCxFQUFFdTNFLElBMEJ4RSxJQUFJLEdBQW1CLFdBQ3ZCLFNBQVNseUUsS0FDVCxPQUFPQSxFQUFFL00sVUFBVW9oRiwyQkFBNkIsU0FBU3IwRSxFQUFHckYsR0FDeEQsT0FBTyxTQUFTcUYsRUFBR3JGLEdBQ2YsR0FBR3FGLEdBQ0gsSUFBSWhOLEVBQUksR0FBR2dOLEdBQUkwQixFQUFJMUIsRUFBRXd5RSxLQUFNdmhGLEVBQUksSUFBSXV1RSxHQUNuQyxPQUFPLEdBQUd4c0UsRUFBRy9CLEVBQUcsSUFBSXN1RSxHQUFHdHVFLEVBQUd5USxFQUFFOHRFLGVBQWdCLE1BQVE3MEUsT0FBSSxFQUFTQSxFQUFFODBFLGlCQUhoRSxDQUlMenZFLEVBQUVpd0UsR0FBSSxDQUNKUixlQUFnQjkwRSxLQUVyQnFGLEVBQUUvTSxVQUFVcWhGLG1DQUFxQyxTQUFTdDBFLEdBQ3pELE9BQU8sU0FBU0EsR0FDWixHQUFHQSxHQUNILElBQUlyRixFQUFJLEdBQUdxRixHQUFJaE4sRUFBSWdOLEVBQUV3eUUsS0FBTTl3RSxFQUFJLElBQUk4OUQsR0FDbkMsT0FBTyxHQUFHN2tFLEVBQUcrRyxFQUFHLElBQUkrOUQsR0FBRy85RCxFQUFHMU8sRUFBRXc4RSxpQkFIekIsQ0FJTHh2RSxFQUFFaXdFLEtBQ0xqd0UsRUFBRS9NLFVBQVVzaEYsMEJBQTRCLFNBQVN2MEUsR0FDaEQsT0FBTyxTQUFTQSxHQUNaLElBQUkwQixFQUFJL1EsS0FDUixHQUFJcVAsRUFBRW1vRCxLQUFPbm9ELEVBQUUrN0IsR0FBSSxNQUFNLElBQUkvNUIsR0FBRSxHQUFFa3hELG9CQUFxQix5R0FDdEQsSUFBSWppRSxFQUFJLElBQUlxc0UsR0FDWixPQUFPdDlELEVBQUU2N0IsR0FBR3drQyxJQUFHLFdBQ1gsT0FBTyxFQUFFMytELE9BQUcsT0FBUSxHQUFRLFdBQ3hCLElBQUlBLEVBQ0osT0FBTyxFQUFFL1EsTUFBTSxTQUFVbUMsR0FDckIsT0FBUUEsRUFBRWlPLE9BQ1IsS0FBSyxFQUNILE9BQU9qTyxFQUFFbU8sS0FBSzdRLEtBQUssQ0FBRSxFQUFHLEVBQUcsQ0FBRSxJQUFNLENBQUUsRUFBYyxTQUFTNFAsR0FDeEQsT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQ0osT0FBTyxFQUFFaEssTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQU8wOEQsR0FBR2hYLE1BQVE5ckQsRUFBSXFGLEVBQUksT0FBUSxDQUFFLEVBQWN5OUQsR0FBRzl5RCxPQUFPaFEsS0FBUSxDQUFFLEVBQWV6RixRQUFRQyxXQUUvRixLQUFLLEVBQ0gsT0FBT25DLEVBQUVnTyxPQUFRLENBQUUsVUFUZ0IsQ0FhakRxc0QsR0FBR3J0RCxFQUFFNHhFLEdBQUk1eEUsRUFBRXM2QixNQUVmLEtBQUssRUFDSCxPQUFPeG5DLEVBQUVrTyxPQUFRL1AsRUFBRWtFLFVBQVcsQ0FBRSxFQUFjLEdBRWhELEtBQUssRUFDSCxPQUFPdU0sRUFBSTVPLEVBQUVrTyxPQUFRL1AsRUFBRW1FLE9BQU9zTSxHQUFJLENBQUUsRUFBYyxHQUVwRCxLQUFLLEVBQ0gsTUFBTyxDQUFFLGFBSXBCelEsRUFBRXNSLFFBcENKLENBcURMdkMsRUFBRWl3RSxLQUNMandFLEVBdkVvQixHQXdFdEIsR0FBbUIsU0FBUzBCLEdBQzdCLFNBQVN6USxFQUFFK08sRUFBR3JGLEVBQUczSCxHQUNiLElBQUkvQixFQUFJTixLQUNSLE9BQVFNLEVBQUl5USxFQUFFeE8sS0FBS3ZDLEtBQU1nSyxJQUFNaEssTUFBTXNyQyxHQUFLanBDLEVBQUcvQixFQUFFNlosU0FBVyxDQUN0REgsT0FBUSxXQUNKLE9BQU8xWixFQUFFODVFLGNBRWQvcUUsYUFBYWMsS0FBTTdQLEVBQUU0ckMsR0FBSzc4QixHQUFJL08sRUFFckMsT0FBTyxFQUFFQSxFQUFHeVEsR0FBSXhQLE9BQU9zRSxlQUFldkYsRUFBRWdDLFVBQVcsS0FBTSxDQUNyRHdELElBQUssV0FDRCxPQUFPOUYsS0FBS3MvRSxHQUFHMkIsSUFFbkJqekUsWUFBWSxFQUNaaU8sY0FBYyxJQUNkM2IsRUFBRWdDLFVBQVVzcUIsU0FBVyxTQUFTdmQsR0FDaENBLEVBQUVrd0UsY0FFTWx3RSxFQUFJOU4sT0FBTzZOLE9BQU83TixPQUFPNk4sT0FBTyxHQUFJcFAsS0FBS3MvRSxHQUFHeDFDLE1BQU96NkIsSUFBSWt3RSxNQUFPdi9FLEtBQUtzL0UsR0FBR2h6QyxHQUFHajlCLElBQ2xGL08sRUFBRWdDLFVBQVV1aEYsWUFBYyxTQUFTeDBFLEVBQUdyRixHQUNyQyw2QkFBK0JoSyxLQUFLcy9FLEdBQUd4MUMsS0FBSy9OLE1BQVEsR0FBRSxzRkFDdEQvN0IsS0FBSzRzQixTQUFTLENBQ1ZtUCxLQUFNMXNCLEVBQUksSUFBTXJGLEVBQ2hCeTNELEtBQUssRUFDTDhkLE9BQU8sS0FFWmovRSxFQUFFZ0MsVUFBVXdoRixjQUFnQixXQUMzQixPQUFPLFNBQVN6MEUsR0FDWixJQUFJMEIsRUFBSS9RLEtBQ1IsT0FBT3FQLEVBQUVtL0QsR0FBR2lCLFNBQVEsV0FDaEIsT0FBTyxFQUFFMStELE9BQUcsT0FBUSxHQUFRLFdBQ3hCLElBQUkvRyxFQUFHK0csRUFDUCxPQUFPLEVBQUUvUSxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWM2bEQsR0FBRzVtRCxJQUU1QixLQUFLLEVBQ0gsT0FBT3JGLEVBQUkzSCxFQUFFZ08sT0FBUSxDQUFFLEVBQWM4aEIsR0FBRzlpQixJQUUxQyxLQUFLLEVBQ0gsT0FBTzBCLEVBQUkxTyxFQUFFZ08sT0FBUSxDQUFFLEdBQWdCckcsRUFBRXFtQixJQUFHLEdBQUssU0FBU2hoQixHQUN0RCxJQUFJckYsRUFBSSxHQUFFcUYsR0FDVixPQUFPckYsRUFBRWt6QixHQUFHbGpCLE9BQU8sR0FBdUJpaUQsR0FBR2p5RCxHQUZBLENBRy9DK0csZUFqQmYsQ0F1QndFLEdBQUcvUSxLQUFLcy9FLE1BQ3hGaC9FLEVBQUVnQyxVQUFVeWhGLGVBQWlCLFdBQzVCLE9BQU8sU0FBUzEwRSxHQUNaLElBQUkwQixFQUFJL1EsS0FDUixPQUFPcVAsRUFBRW0vRCxHQUFHaUIsU0FBUSxXQUNoQixPQUFPLEVBQUUxK0QsT0FBRyxPQUFRLEdBQVEsV0FDeEIsSUFBSUEsRUFBR3pRLEVBQ1AsT0FBTyxFQUFFTixNQUFNLFNBQVVtQyxHQUNyQixPQUFRQSxFQUFFaU8sT0FDUixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWM2bEQsR0FBRzVtRCxJQUU1QixLQUFLLEVBQ0gsT0FBTzBCLEVBQUk1TyxFQUFFa08sT0FBUSxDQUFFLEVBQWM4aEIsR0FBRzlpQixJQUUxQyxLQUFLLEVBQ0gsT0FBTy9PLEVBQUk2QixFQUFFa08sT0FBUSxDQUFFLEdBQWdCVSxFQUFFc2YsSUFBRyxHQUFLLFNBQVNoaEIsR0FDdEQsT0FBTyxFQUFFclAsVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQ0osT0FBTyxFQUFFaEssTUFBTSxTQUFVcUMsR0FDckIsT0FBUUEsRUFBRStOLE9BQ1IsS0FBSyxFQUNILE9BQVFwRyxFQUFJLEdBQUVxRixJQUFJNnRCLEdBQUdsVSxJQUFJLEdBQXVCLENBQUUsRUFBY28wQyxHQUFHcHpELElBRXJFLEtBQUssRUFDSCxPQUFPM0gsRUFBRWdPLE9BRVRyRyxFQUFFMnpCLEdBQUc1M0IsSUFBSSxXQUEwQixDQUFFLFVBWEosQ0FlL0N6RixlQTdCZixDQXVDVixHQUFHTixLQUFLcy9FLE1BQ05oL0UsRUFBRWdDLFVBQVUwaEYsa0JBQW9CLFNBQVMzMEUsR0FDeEMsSUFBSXJGLEdBQUksRUFBSTNILEdBQUksRUFDaEIsT0FBT2dOLEdBQUttZ0UsR0FBRyxrQkFBbUJ4bEUsSUFBTXFGLEVBQUVzdkUsZ0JBQWlCLDZCQUE4QnQ4RSxJQUFNZ04sRUFBRTQwRSw0QkFDakdqNkUsRUFBSWhLLEtBQUtzckMsR0FBR3E0QyxtQ0FBbUMzakYsTUFBUUEsS0FBS3NyQyxHQUFHbzRDLDJCQUEyQjFqRixLQUFNcUMsSUFDakcvQixFQUFFZ0MsVUFBVTRoRixpQkFBbUIsV0FDOUIsT0FBT2xrRixLQUFLc3JDLEdBQUdzNEMsMEJBQTBCNWpGLE9BQzFDTSxFQUFFZ0MsVUFBVTgzRSxVQUFZLFdBQ3ZCLE9BQU9wNkUsS0FBS3NlLElBQUlWLHVCQUF1QixhQUFjNWQsS0FBS3NlLElBQUlWLHVCQUF1QixpQkFDckY1ZCxLQUFLcy9FLEdBQUdsbEUsV0FDVDlaLEVBQUVnQyxVQUFVNmhGLHFCQUF1QixXQUNsQyxPQUNXLFNBQVM5MEUsR0FDWixJQUFJMEIsRUFBSS9RLEtBQU1NLEVBQUksSUFBSXFzRSxHQUN0QixPQUFPdDlELEVBQUVtL0QsR0FBR00sSUFBRyxXQUNYLE9BQU8sRUFBRS85RCxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJL0csRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUkweEUsR0FBSSxDQUFFLEVBQWMsR0FBR3JzRSxJQUVwQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWVyRixFQUFFN0UsV0FBTSxFQUFRLENBQUU5QyxFQUFFZ08sT0FBUS9QLGVBSS9EQSxFQUFFc1IsUUFmSixDQWdCTCxHQUNKNVIsS0FBS3MvRSxNQUNSaC9FLEVBQUVnQyxVQUFVOGhGLGtCQUFvQixTQUFTLzBFLEdBQ3hDLE9BQU8sU0FBU0EsRUFBRzBCLEdBQ2YsSUFBSXpRLEVBQUlOLEtBQU1tQyxFQUFJLEdBQUdrTixHQUFJa2hCLEVBQUlnakQsR0FBR3hpRSxHQUFLQSxFQUFJLENBQ3JDalAsS0FBTWlQLEdBQ1B6QixFQUFJLElBQUlxZ0UsR0FBR3AvQyxHQUNkLE9BQU9saEIsRUFBRTY3QixHQUFHNGpDLElBQUcsV0FDWCxPQUFPLEVBQUV4dUUsT0FBRyxPQUFRLEdBQVEsV0FDeEIsSUFBSStPLEVBQ0osT0FBTyxFQUFFclAsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE9BQU9mLEVBQUksU0FBU0EsRUFBR3JGLEdBQ25CLEdBQUVxRixHQUFHdWhFLEdBQUc1bkQsSUFBSWhmLEdBR1pBLEVBQUVsSSxRQUNILENBQUUsRUFBYyxHQUFHSyxJQUV4QixLQUFLLEVBQ0gsT0FBT2tOLEVBQUVsSyxXQUFNLEVBQVEsQ0FBRTZFLEVBQUVxRyxPQUFRZixJQUFNLENBQUUsYUFJdEQsV0FDREEsRUFBRSt2RSxLQUFNaHdFLEVBQUU2N0IsR0FBRzRqQyxJQUFHLFdBQ1osT0FBTyxFQUFFeHVFLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLElBQUkrTyxFQUNKLE9BQU8sRUFBRXJQLE1BQU0sU0FBVWdLLEdBQ3JCLE9BQVFBLEVBQUVvRyxPQUNSLEtBQUssRUFDSCxPQUFPZixFQUFJLFNBQVNBLEVBQUdyRixHQUNuQixHQUFFcUYsR0FBR3VoRSxHQUFHNTJELE9BQU9oUSxJQUNoQixDQUFFLEVBQWMsR0FBRzdILElBRXhCLEtBQUssRUFDSCxPQUFPa04sRUFBRWxLLFdBQU0sRUFBUSxDQUFFNkUsRUFBRXFHLE9BQVFmLElBQU0sQ0FBRSxjQWxDNUQsQ0F3Q0x0UCxLQUFLcy9FLEdBQUlqd0UsSUFDWjlOLE9BQU9zRSxlQUFldkYsRUFBRWdDLFVBQVcsTUFBTyxDQUN6Q3dELElBQUssV0FDRCxJQUFLOUYsS0FBS2tzQyxHQUFJLE1BQU0sSUFBSTc2QixHQUFFLEdBQUVreEQsb0JBQXFCLGdGQUNqRCxPQUFPdmlFLEtBQUtrc0MsSUFFaEJsK0IsWUFBWSxFQUNaaU8sY0FBYyxJQUNkM2IsRUFBRWdDLFVBQVUraEYsV0FBYSxTQUFTaDFFLEdBQ2xDLE9BQU91Z0UsR0FBRyx1QkFBd0IsT0FBUXZnRSxHQUFJLEdBQUdyUCxLQUFLcy9FLElBQUssSUFBSSxHQUFHLEdBQUVsdUUsRUFBRS9CLEdBQUlyUCxLQUN6RCxPQUNsQk0sRUFBRWdDLFVBQVV1bEUsSUFBTSxTQUFTeDRELEdBQzFCLE9BQU91Z0UsR0FBRyxnQkFBaUIsT0FBUXZnRSxHQUFJLEdBQUdyUCxLQUFLcy9FLElBQUssR0FBR3IwQyxHQUFHLEdBQUU3NUIsRUFBRS9CLEdBQUlyUCxLQUNqRCxPQUNsQk0sRUFBRWdDLFVBQVVxaEUsZ0JBQWtCLFNBQVN0MEQsR0FDdEMsR0FBSXVnRSxHQUFHLDRCQUE2QixlQUFnQnZnRSxHQUFJQSxFQUFFaVIsUUFBUSxNQUFRLEVBQUcsTUFBTSxJQUFJalAsR0FBRSxHQUFFMndELGlCQUFrQiwwQkFBNEIzeUQsRUFBSSwwRkFDN0ksT0FBTyxHQUFHclAsS0FBS3MvRSxJQUFLLElBQUksR0FLeEIsU0FBU2p3RSxHQUNMLE9BQU8sSUFBSTZvRCxHQUFHLEdBQUV0RSxJQUFLdmtELEdBRHpCLENBRUVBLEdBQUlyUCxLQUNXLE9BQ2xCTSxFQUFFZ0MsVUFBVThxRSxlQUFpQixTQUFTLzlELEdBQ3JDLElBQUkwQixFQUFJL1EsS0FDUixPQUFPLFNBQVNxUCxFQUFHMEIsR0FDZixJQUFJelEsRUFBSU4sS0FBTW1DLEVBQUksSUFBSXdxRSxHQUN0QixPQUFPdDlELEVBQUVtL0QsR0FBR00sSUFBRyxXQUNYLE9BQU8sRUFBRXh1RSxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJMEosRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMsU0FBU2YsR0FDNUIsT0FBTyxHQUFHQSxHQUFHakssTUFBSyxTQUFVaUssR0FDeEIsT0FBT0EsRUFBRSt1QixNQUZNLENBSXJCL3VCLElBRUosS0FBSyxFQUNILE9BQU9yRixFQUFJM0gsRUFBRWdPLE9BQVEsSUFBSSxHQUFHaEIsRUFBRW0vRCxHQUFJeGtFLEVBQUcrRyxFQUFHNU8sR0FBRytnRixNQUFPLENBQUUsYUFJL0QvZ0YsRUFBRXlQLFFBbkJKLENBb0JMLEdBQUc1UixLQUFLcy9FLEtBQUssU0FBVXQxRSxHQUNyQixPQUFPcUYsRUFBRSxJQUFJLEdBQUcwQixFQUFHL0csUUFFeEIxSixFQUFFZ0MsVUFBVTR3RSxNQUFRLFdBQ25CLE9BQU8sR0FBR2x6RSxLQUFLcy9FLElBQUssSUFBSSxHQUFHdC9FLE9BQzVCTSxFQXROaUIsQ0F1TnRCMHVFLElBS0UsU0FBUyxHQUFHMy9ELEdBQ1osT0FBT0EsRUFBRWk3QixJQUFNLEdBQUdqN0IsR0FBSUEsRUFBRWk3QixHQUFHRixLQUFNLzZCLEVBQUVpN0IsR0FHdkMsU0FBUyxHQUFHajdCLEdBQ1IsSUFBSXJGLEVBQUlxRixFQUFFd3lFLEtBQU14L0UsRUFBSSxTQUFTZ04sRUFBR3JGLEVBQUczSCxHQUMvQixPQUFPLElBQUl3TSxHQUFFUSxFQUFHckYsRUFBRzNILEVBQUUwNUIsS0FBTTE1QixFQUFFby9ELElBQUtwL0QsRUFBRSs5RSw2QkFBOEIvOUUsRUFBRWcrRSxtQ0FEcEQsQ0FFbEJoeEUsRUFBRTR4RSxHQUFJNXhFLEVBQUVzNkIsR0FBSTMvQixHQUNkcUYsRUFBRWk3QixHQUFLLElBQUksR0FBR2o3QixFQUFFbThCLEdBQUluOEIsRUFBRTY3QixHQUFJN29DLEdBSzFCLElBQUksR0FBbUIsV0FDdkIsU0FBU2dOLEVBQUVBLEVBQUdyRixHQUNWaEssS0FBS21oRixHQUFLOXhFLEVBQUdyUCxLQUFLeXJDLEdBQUt6aEMsRUFBR2hLLEtBQUttc0MsR0FBSzBsQyxHQUFHN3hFLEtBQUttaEYsR0FBRzdCLElBRW5ELE9BQU9qd0UsRUFBRS9NLFVBQVV3RCxJQUFNLFNBQVN1SixHQUM5QixJQUFJckYsRUFBSWhLLEtBQU1xQyxFQUFJLEdBQUcsRUFBbUJnTixFQUFHclAsS0FBS21oRixJQUFLcHdFLEVBQUksSUFBSXUrRCxHQUFHdHZFLEtBQUttaEYsSUFDckUsT0FBT25oRixLQUFLeXJDLEdBQUdtM0MsR0FBRyxDQUFFdmdGLEVBQUVnL0UsS0FBTWo4RSxNQUFLLFNBQVVpSyxHQUN2QyxJQUFLQSxHQUFLLElBQU1BLEVBQUUxTyxPQUFRLE9BQU8sS0FDakMsSUFBSUwsRUFBSStPLEVBQUUsR0FDVixHQUFJL08sYUFBYW1CLEdBQUksT0FBTyxJQUFJLEdBQUd1SSxFQUFFbTNFLEdBQUksSUFBSSxHQUFHbjNFLEVBQUVtM0UsR0FBRzdCLEdBQUl2dUUsRUFBRzFPLEVBQUVnL0UsR0FBSSxLQUFNLElBQUksSUFDckQsR0FDTixHQUFLaC9FLEVBQUVrL0UsS0FDeEIsR0FBSWpoRixhQUFhMjBELEdBQUksT0FBTyxJQUFJLEdBQUdqckQsRUFBRW0zRSxHQUFJLElBQUksR0FBR24zRSxFQUFFbTNFLEdBQUc3QixHQUFJdnVFLEVBQUcxTyxFQUFFZy9FLEdBQUkvZ0YsRUFBRyxJQUFJLElBQ2xELEdBQ04sR0FBSytCLEVBQUVrL0UsS0FDeEIsTUFBTSxTQUVYbHlFLEVBQUUvTSxVQUFVeUQsSUFBTSxTQUFTc0osRUFBR3JGLEVBQUczSCxHQUNoQyxJQUFJME8sRUFBSSxHQUFHLEVBQW1CMUIsRUFBR3JQLEtBQUttaEYsSUFDdEM5K0UsRUFBSXF0RSxHQUFHLGtCQUFtQnJ0RSxHQUMxQixJQUFJL0IsRUFBSSxHQUFHeVEsRUFBRXd3RSxHQUFJdjNFLEVBQUczSCxHQUFJRixFQUFJaXdFLEdBQUdweUUsS0FBS21zQyxHQUFJLGtCQUFtQnA3QixFQUFFc3dFLEdBQUkvZ0YsRUFBRyxPQUFTeVEsRUFBRXd3RSxHQUFJbC9FLEdBQ25GLE9BQU9yQyxLQUFLeXJDLEdBQUcxbEMsSUFBSWdMLEVBQUVzd0UsR0FBSWwvRSxHQUFJbkMsTUFDOUJxUCxFQUFFL00sVUFBVXNLLE9BQVMsU0FBU3lDLEVBQUdyRixFQUFHM0gsR0FDbkMsSUFBSyxJQUFJME8sRUFBSSxHQUFJelEsRUFBSSxFQUFHQSxFQUFJNkYsVUFBVXhGLE9BQVFMLElBQUt5USxFQUFFelEsRUFBSSxHQUFLNkYsVUFBVTdGLEdBQ3hFLElBQUk2QixFQUFHb3VCLEVBQUksR0FBRyxFQUFzQmxoQixFQUFHclAsS0FBS21oRixJQUdwQyxPQUFPbjNFLGFBQWFnbEUsS0FBT2hsRSxFQUFJQSxFQUFFczFFLElBQUtuOUUsRUFBSSxpQkFBbUI2SCxHQUFLQSxhQUFhbW1FLEdBQUtrQyxHQUFHcnlFLEtBQUttc0MsR0FBSSxxQkFBc0I1YixFQUFFOHdELEdBQUlyM0UsRUFBRzNILEVBQUcwTyxHQUFLNi9ELEdBQUc1d0UsS0FBS21zQyxHQUFJLHFCQUFzQjViLEVBQUU4d0QsR0FBSXIzRSxHQUN2TGhLLEtBQUt5ckMsR0FBRzcrQixPQUFPMmpCLEVBQUU4d0QsR0FBSWwvRSxHQUFJbkMsTUFDMUJxUCxFQUFFL00sVUFBVTBYLE9BQVMsU0FBUzNLLEdBQzdCLElBQUlyRixFQUFJLEdBQUcsRUFBc0JxRixFQUFHclAsS0FBS21oRixJQUN6QyxPQUFPbmhGLEtBQUt5ckMsR0FBR3p4QixPQUFPaFEsRUFBRXEzRSxJQUFLcmhGLE1BQzlCcVAsRUFoQ29CLEdBaUN0QixHQUFtQixXQUNwQixTQUFTQSxFQUFFQSxHQUNQclAsS0FBS21oRixHQUFLOXhFLEVBQUdyUCxLQUFLaXNDLEdBQUssR0FBSWpzQyxLQUFLZ3FDLElBQUssRUFBSWhxQyxLQUFLbXNDLEdBQUswbEMsR0FBRzd4RSxLQUFLbWhGLEdBQUc3QixJQUVsRSxPQUFPandFLEVBQUUvTSxVQUFVeUQsSUFBTSxTQUFTc0osRUFBR3JGLEVBQUczSCxHQUNwQ3JDLEtBQUt5dEMsS0FDTCxJQUFJMThCLEVBQUksR0FBRyxFQUFrQjFCLEVBQUdyUCxLQUFLbWhGLElBQ3JDOStFLEVBQUlxdEUsR0FBRyxpQkFBa0JydEUsR0FDekIsSUFBSS9CLEVBQUksR0FBR3lRLEVBQUV3d0UsR0FBSXYzRSxFQUFHM0gsR0FBSUYsRUFBSWl3RSxHQUFHcHlFLEtBQUttc0MsR0FBSSxpQkFBa0JwN0IsRUFBRXN3RSxHQUFJL2dGLEVBQUcsT0FBU3lRLEVBQUV3d0UsR0FBSWwvRSxHQUNsRixPQUFPckMsS0FBS2lzQyxHQUFLanNDLEtBQUtpc0MsR0FBRzdyQyxPQUFPK0IsRUFBRTIvRSxHQUFHL3dFLEVBQUVzd0UsR0FBSWg0QyxHQUFHNUIsT0FBUXpuQyxNQUN2RHFQLEVBQUUvTSxVQUFVc0ssT0FBUyxTQUFTeUMsRUFBR3JGLEVBQUczSCxHQUNuQyxJQUFLLElBQUkwTyxFQUFJLEdBQUl6USxFQUFJLEVBQUdBLEVBQUk2RixVQUFVeEYsT0FBUUwsSUFBS3lRLEVBQUV6USxFQUFJLEdBQUs2RixVQUFVN0YsR0FDeEVOLEtBQUt5dEMsS0FDTCxJQUFJdHJDLEVBQUdvdUIsRUFBSSxHQUFHLEVBQXFCbGhCLEVBQUdyUCxLQUFLbWhGLElBR25DLE9BQU9uM0UsYUFBYWdsRSxLQUFPaGxFLEVBQUlBLEVBQUVzMUUsSUFBS245RSxFQUFJLGlCQUFtQjZILEdBQUtBLGFBQWFtbUUsR0FBS2tDLEdBQUdyeUUsS0FBS21zQyxHQUFJLG9CQUFxQjViLEVBQUU4d0QsR0FBSXIzRSxFQUFHM0gsRUFBRzBPLEdBQUs2L0QsR0FBRzV3RSxLQUFLbXNDLEdBQUksb0JBQXFCNWIsRUFBRTh3RCxHQUFJcjNFLEdBQ3JMaEssS0FBS2lzQyxHQUFLanNDLEtBQUtpc0MsR0FBRzdyQyxPQUFPK0IsRUFBRTIvRSxHQUFHdnhELEVBQUU4d0QsR0FBSWg0QyxHQUFHOGhDLFFBQU8sS0FBT25yRSxNQUN0RHFQLEVBQUUvTSxVQUFVMFgsT0FBUyxTQUFTM0ssR0FDN0JyUCxLQUFLeXRDLEtBQ0wsSUFBSXpqQyxFQUFJLEdBQUcsRUFBcUJxRixFQUFHclAsS0FBS21oRixJQUN4QyxPQUFPbmhGLEtBQUtpc0MsR0FBS2pzQyxLQUFLaXNDLEdBQUc3ckMsT0FBTyxJQUFJaTFELEdBQUdyckQsRUFBRXEzRSxHQUFJaDRDLEdBQUc1QixPQUFRem5DLE1BQ3pEcVAsRUFBRS9NLFVBQVUwZ0YsT0FBUyxXQUNwQixPQUFPaGpGLEtBQUt5dEMsS0FBTXp0QyxLQUFLZ3FDLElBQUssRUFBSWhxQyxLQUFLaXNDLEdBQUd0ckMsT0FBUyxFQUFJLEdBQUcsR0FBR1gsS0FBS21oRixHQUFHN0IsSUFBS3QvRSxLQUFLaXNDLElBQU0xbkMsUUFBUUMsV0FDNUY2SyxFQUFFL00sVUFBVW1yQyxHQUFLLFdBQ2hCLEdBQUl6dEMsS0FBS2dxQyxHQUFJLE1BQU0sSUFBSTM0QixHQUFFLEdBQUVreEQsb0JBQXFCLHdFQUNqRGx6RCxFQTFCaUIsR0EyQm5CLEdBQW1CLFNBQVMvTyxHQUM3QixTQUFTNkIsRUFBRWtOLEVBQUdyRixHQUNWLElBQUkzSCxFQUFJckMsS0FDUixPQUFRcUMsRUFBSS9CLEVBQUVpQyxLQUFLdkMsS0FBTWdLLElBQU1oSyxNQUFNZ2hGLFVBQVkzeEUsRUFBR2hOLEVBQUUrK0UsR0FBSyxJQUFJOVIsR0FBR2pnRSxHQUFJaE4sRUFFMUUsT0FBTyxFQUFFRixFQUFHN0IsR0FBSTZCLEVBQUU4b0MsR0FBSyxTQUFTNTdCLEVBQUdyRixFQUFHM0gsR0FDbEMsR0FBSWdOLEVBQUUxTyxPQUFTLEdBQUssRUFBRyxNQUFNLElBQUkwUSxHQUFFLEdBQUUyd0QsaUJBQWtCLDZGQUErRjN5RCxFQUFFNjZCLElBQU0sUUFBVTc2QixFQUFFMU8sUUFDMUssT0FBTyxJQUFJd0IsRUFBRTZILEVBQUcsSUFBSTRuRSxHQUFHNW5FLEVBQUVzMUUsR0FBSWo5RSxFQUFHLElBQUksR0FBRWdOLE1BQ3ZDbE4sRUFBRSsrRSxHQUFLLFNBQVM3eEUsRUFBR3JGLEVBQUczSCxHQUNyQixPQUFPLElBQUlGLEVBQUU2SCxFQUFHLElBQUk0bkUsR0FBRzVuRSxFQUFFczFFLEdBQUlqOUUsRUFBR2dOLEtBQ2pDOU4sT0FBT3NFLGVBQWUxRCxFQUFFRyxVQUFXLEtBQU0sQ0FDeEN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtzL0UsR0FBRzMvRSxJQUVuQnFPLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFlMUQsRUFBRUcsVUFBVyxTQUFVLENBQzdDd0QsSUFBSyxXQUNELE9BQU8sSUFBSSxHQUFHOUYsS0FBS3MvRSxHQUFHc0MsR0FBRzF5QyxJQUFLbHZDLEtBQUtnaEYsVUFBV2hoRixLQUFLcy9FLEdBQUdpQyxLQUUxRHZ6RSxZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZTFELEVBQUVHLFVBQVcsT0FBUSxDQUMzQ3dELElBQUssV0FDRCxPQUFPOUYsS0FBS3MvRSxHQUFHNWdDLE1BRW5CMXdDLFlBQVksRUFDWmlPLGNBQWMsSUFDZDlaLEVBQUVHLFVBQVUraEYsV0FBYSxTQUFTaDFFLEdBQ2xDLEdBQUl1Z0UsR0FBRywrQkFBZ0MsT0FBUXZnRSxJQUFLQSxFQUFHLE1BQU0sSUFBSWdDLEdBQUUsR0FBRTJ3RCxpQkFBa0IsNERBQ3ZGLElBQUloNEQsRUFBSSxHQUFFb0gsRUFBRS9CLEdBQ1osT0FBTyxJQUFJLEdBQUdyUCxLQUFLcy9FLEdBQUdzQyxHQUFHdGUsTUFBTXQ1RCxHQUFJaEssS0FBS2doRixVQUN2QixPQUNsQjcrRSxFQUFFRyxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUM5QixPQUFPQSxhQUFhMi9ELEtBQU8zL0QsRUFBSUEsRUFBRWl3RSxJQUFLandFLGFBQWF1aUUsS0FBT3Z2RSxFQUFJZ04sSUFBS3JGLEVBQUloSyxLQUFLcy9FLGNBQWUxTixJQUFNNW5FLGFBQWE4bkUsTUFBUXp2RSxhQUFhdXZFLElBQU12dkUsYUFBYXl2RSxLQUFPOW5FLEVBQUVnM0UsWUFBYzMrRSxFQUFFMitFLFdBQWFoM0UsRUFBRTAwQyxPQUFTcjhDLEVBQUVxOEMsTUFBUTEwQyxFQUFFdTNFLEtBQU9sL0UsRUFBRWsvRSxJQUM1TixJQUFJdjNFLEVBQUczSCxHQUNSRixFQUFFRyxVQUFVeUQsSUFBTSxTQUFTc0osRUFBR3JGLEdBQzdCQSxFQUFJMGxFLEdBQUcsd0JBQXlCMWxFLEdBQ2hDLElBQ0ksT0FBTyxTQUFTcUYsRUFBR3JGLEVBQUczSCxHQUNsQixJQUFJME8sRUFBSWsrRCxHQUFHNS9ELEVBQUUyeEUsVUFBVyxJQUFLMWdGLEVBQUksR0FBRytPLEVBQUVreUUsR0FBSXYzRSxFQUFHM0gsR0FDN0MsT0FBTyxHQUFHME8sRUFBR3FoRSxHQUFHUCxHQUFHOWdFLEdBQUksU0FBVTFCLEVBQUVneUUsR0FBSS9nRixFQUFHLE9BQVMrTyxFQUFFa3lFLEdBQUlsL0UsR0FBR3kvRSxHQUFHenlFLEVBQUVneUUsR0FBSWg0QyxHQUFHNUIsT0FGckUsQ0FHTHpuQyxLQUFLcy9FLEdBQUlqd0UsRUFBR3JGLEdBQ2hCLE1BQU9xRixHQUNMLE1BQU0sR0FBR0EsRUFBRyxTQUFVLDJCQUUzQmxOLEVBQUVHLFVBQVVzSyxPQUFTLFNBQVN5QyxFQUFHckYsR0FDaEMsSUFBSyxJQUFJM0gsRUFBSSxHQUFJL0IsRUFBSSxFQUFHQSxFQUFJNkYsVUFBVXhGLE9BQVFMLElBQUsrQixFQUFFL0IsRUFBSSxHQUFLNkYsVUFBVTdGLEdBQ3hFLElBQ0ksT0FBTyxJQUFNNkYsVUFBVXhGLE9BQVMsR0FBR1gsS0FBS3MvRSxHQUFJandFLEdBQUssR0FBR2xLLFdBQU0sRUFBUSxFQUFFLENBQUVuRixLQUFLcy9FLEdBQUlqd0UsRUFBR3JGLEdBQUszSCxJQUN6RixNQUFPZ04sR0FDTCxNQUFNLEdBQUdBLEVBQUcsWUFBYSw4QkFFOUJsTixFQUFFRyxVQUFVMFgsT0FBUyxXQUNwQixPQUFPLEdBQUdpMUQsSUFBSTUvRCxFQUFJclAsS0FBS3MvRSxJQUFJMEIsVUFBVyxJQUFLLENBQUUsSUFBSTNyQixHQUFHaG1ELEVBQUVneUUsR0FBSWg0QyxHQUFHNUIsUUFDN0QsSUFBSXA0QixHQUNMbE4sRUFBRUcsVUFBVWdpRixXQUFhLFdBQ3hCLElBQUssSUFBSWoxRSxFQUFJclAsS0FBTStRLEVBQUksR0FBSXpRLEVBQUksRUFBR0EsRUFBSTZGLFVBQVV4RixPQUFRTCxJQUFLeVEsRUFBRXpRLEdBQUs2RixVQUFVN0YsR0FDOUUsSUFBSTZCLEVBTUosU0FBU2tOLEdBQ0wsSUFBSyxJQUFJckYsRUFBSSxFQUFHM0gsRUFBSWdOLEVBQUdyRixFQUFJM0gsRUFBRTFCLE9BQVFxSixJQUFLLENBQ3RDLElBQUkrRyxFQUFJMU8sRUFBRTJILEdBQ1YsR0FBSSxpQkFBbUIrRyxJQUFNd2lFLEdBQUd4aUUsR0FBSSxPQUFPQSxFQUUvQyxNQUFPLEdBTFgsQ0FNRUEsR0FBSXdmLEVBQUksU0FBU3ZtQixFQUFHM0gsR0FDbEIsSUFBSTBPLEVBQUd6USxFQUFHNkIsRUFDVixNQUFPLENBQ0hMLEtBQU0sU0FBU2tJLEdBQ1g3SCxFQUFFTCxNQUFRSyxFQUFFTCxLQUFLLFNBQVNrSSxHQUN0QixPQUFPLElBQUksR0FBR3FGLEVBQUUyeEUsVUFBVyxJQUFJLEdBQUczeEUsRUFBRTJ4RSxVQUFVMUIsR0FBSWp3RSxFQUFFK3hFLEdBQUlwM0UsRUFBRXEzRSxHQUFJcjNFLEVBQUVzM0UsR0FBSXQzRSxFQUFFK2dCLFNBQVUxYixFQUFFaXdFLEdBQUdpQyxLQUR4RSxDQUVmdjNFLEtBRU5uRixNQUFPLFFBQVVrTSxHQUFLNU8sRUFBSW94RSxHQUFHdnBFLEVBQUUsSUFBTUEsRUFBRSxHQUFLdXBFLEdBQUd2cEUsRUFBRSxJQUFNQSxFQUFFLEdBQUssbUJBQXFCQSxFQUFFLEdBQUssQ0FDdEZsSSxLQUFNa0ksRUFBRSxHQUNSbkYsTUFBT21GLEVBQUUsR0FDVDlDLFNBQVU4QyxFQUFFLElBQ1osQ0FDQWxJLEtBQU1rSSxFQUFFLEdBQ1JuRixNQUFPbUYsRUFBRSxHQUNUOUMsU0FBVThDLEVBQUUsS0FDYm5GLGFBQVUsSUFBV2tNLE9BQUksRUFBU0EsRUFBRWpFLEtBQUszSyxHQUM1QytFLFNBQVUsUUFBVTVHLEVBQUk2QixFQUFFK0UsZ0JBQWEsSUFBVzVHLE9BQUksRUFBU0EsRUFBRXdNLEtBQUszSyxJQWpCcEUsQ0FtQlI0TyxHQUNGLE9BQU8sU0FBUzFCLEdBQ1osSUFBSyxJQUFJMEIsRUFBR3pRLEVBQUc2QixFQUFHb3VCLEVBQUl2d0IsS0FBTXNQLEVBQUksR0FBSXhCLEVBQUksRUFBR0EsRUFBSTNILFVBQVV4RixPQUFRbU4sSUFBS3dCLEVBQUV4QixFQUFJLEdBQUszSCxVQUFVMkgsR0FDM0YsSUFBSTBILEVBQUksQ0FDSm04RCx3QkFBd0IsR0FDekJyaEQsRUFBSSxFQUNQLGlCQUFtQmhoQixFQUFFZ2hCLElBQU1pakQsR0FBR2prRSxFQUFFZ2hCLE1BQVE5YSxFQUFJbEcsRUFBRWdoQixHQUFJQSxLQUNsRCxJQUFJcmdCLEVBQUd1Z0IsRUFBR3RyQixFQUFHMkksRUFBSSxDQUNiOGpFLHVCQUF3Qm44RCxFQUFFbThELHdCQUU5QixHQUFJNEIsR0FBR2prRSxFQUFFZ2hCLElBQUssQ0FDVixJQUFJN2YsRUFBSW5CLEVBQUVnaEIsR0FDVmhoQixFQUFFZ2hCLEdBQUssUUFBVXZmLEVBQUlOLEVBQUUzTyxZQUFTLElBQVdpUCxPQUFJLEVBQVNBLEVBQUVqRSxLQUFLMkQsR0FBSW5CLEVBQUVnaEIsRUFBSSxHQUFLLFFBQVVod0IsRUFBSW1RLEVBQUU1TCxhQUFVLElBQVd2RSxPQUFJLEVBQVNBLEVBQUV3TSxLQUFLMkQsR0FDdkluQixFQUFFZ2hCLEVBQUksR0FBSyxRQUFVbnVCLEVBQUlzTyxFQUFFdkosZ0JBQWEsSUFBVy9FLE9BQUksRUFBU0EsRUFBRTJLLEtBQUsyRCxHQUUzRSxHQUFJcEIsYUFBYXVpRSxHQUFJcGhELEVBQUl5K0MsR0FBRzUvRCxFQUFFMnhFLFVBQVcsSUFBSzk3RSxFQUFJNnpELEdBQUcxcEQsRUFBRWd5RSxHQUFHM2lDLE1BQU96dUMsRUFBSSxDQUNqRW5PLEtBQU0sU0FBU2tJLEdBQ1hzRixFQUFFZ2hCLElBQU1oaEIsRUFBRWdoQixHQUFHLEdBQUdFLEVBQUduaEIsRUFBR3JGLEtBRTFCbkYsTUFBT3lLLEVBQUVnaEIsRUFBSSxHQUNicHBCLFNBQVVvSSxFQUFFZ2hCLEVBQUksUUFDWixDQUNKRSxFQUFJeStDLEdBQUc1L0QsRUFBRTJ4RSxVQUFXLElBQUs5N0UsRUFBSW1LLEVBQUVzeUUsR0FDL0IsSUFBSXp4RSxFQUFJLElBQUksR0FBR3NnQixHQUNmdmdCLEVBQUksQ0FDQW5PLEtBQU0sU0FBU2tJLEdBQ1hzRixFQUFFZ2hCLElBQU1oaEIsRUFBRWdoQixHQUFHLElBQUksR0FBR0UsRUFBR3RnQixFQUFHYixFQUFHckYsS0FFakNuRixNQUFPeUssRUFBRWdoQixFQUFJLEdBQ2JwcEIsU0FBVW9JLEVBQUVnaEIsRUFBSSxJQUNqQixHQUFHamhCLEVBQUVzeUUsSUFFWixJQUFJMXpFLEVBQUksR0FBR3VpQixHQUFJM2YsRUFBSSxJQUFJOCtELEdBQUcxL0QsR0FBSXdpQixFQUFJLElBQUk4K0MsR0FBR3JzRSxFQUFHMkwsRUFBR2hELEdBQy9DLE9BQU8yaUIsRUFBRTBhLEdBQUc0akMsSUFBRyxXQUNYLE9BQU8sRUFBRXYrQyxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJbGhCLEVBQ0osT0FBTyxFQUFFclAsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE9BQU9mLEVBQUl3aEUsR0FBSSxDQUFFLEVBQWMsR0FBRzVpRSxJQUVwQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWVvQixFQUFFbEssV0FBTSxFQUFRLENBQUU2RSxFQUFFcUcsT0FBUW9pQixlQUkvRCxXQUNENWhCLEVBQUV3dUUsS0FBTTd1RCxFQUFFMGEsR0FBRzRqQyxJQUFHLFdBQ1osT0FBTyxFQUFFditDLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLElBQUlsaEIsRUFDSixPQUFPLEVBQUVyUCxNQUFNLFNBQVVnSyxHQUNyQixPQUFRQSxFQUFFb0csT0FDUixLQUFLLEVBQ0gsT0FBT2YsRUFBSThoRSxHQUFJLENBQUUsRUFBYyxHQUFHbGpFLElBRXBDLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBZW9CLEVBQUVsSyxXQUFNLEVBQVEsQ0FBRTZFLEVBQUVxRyxPQUFRb2lCLGdCQXZEckUsQ0E2REx6eUIsS0FBS3MvRSxHQUFJbjlFLEVBQUdvdUIsSUFDZnB1QixFQUFFRyxVQUFVd0QsSUFBTSxTQUFTdUosR0FDMUIsSUFBSTBCLEVBQUkvUSxLQUNSLE9BQVEsV0FBYSxNQUFRcVAsT0FBSSxFQUFTQSxFQUFFMUwsUUFBVSxTQUFTMEwsR0FDM0QsSUFBSTBCLEVBQUkvUSxLQUFNTSxFQUFJMnVFLEdBQUc1L0QsRUFBRTJ4RSxVQUFXLElBQUs3K0UsRUFBSSxHQUFHN0IsR0FBSWl3QixFQUFJLElBQUksR0FBR2p3QixHQUFJZ1AsRUFBSSxJQUFJcTlELEdBQ3pFLE9BQU9yc0UsRUFBRTRxQyxHQUFHNGpDLElBQUcsV0FDWCxPQUFPLEVBQUUvOUQsT0FBRyxPQUFRLEdBQVEsV0FDeEIsT0FBTyxFQUFFL1EsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFja2hCLEdBQUdudkIsSUFFNUIsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjLEdBQUc2SCxFQUFFcUcsT0FBUWhCLEVBQUVneUUsR0FBSS94RSxJQUU1QyxLQUFLLEVBQ0gsT0FBT3RGLEVBQUVxRyxPQUFRLENBQUUsYUFJOUJmLEVBQUVzQyxRQUFReE0sTUFBSyxTQUFVNEUsR0FDMUIsT0FBTyxJQUFJLEdBQUcxSixFQUFHaXdCLEVBQUdsaEIsRUFBRWd5RSxHQUFJcjNFLEVBQUcsSUFBSSxHQUFHQSxhQUFhaXJELElBQU1qckQsRUFBRTQ5QixJQUN4QyxHQUFLdjRCLEVBQUVreUUsT0FuQnNCLENBcUJwRHZoRixLQUFLcy9FLElBQU0sWUFBYyxNQUFRandFLE9BQUksRUFBU0EsRUFBRTFMLFFBQVUsU0FBUzBMLEdBQ2pFLElBQUkwQixFQUFJL1EsS0FBTU0sRUFBSTJ1RSxHQUFHNS9ELEVBQUUyeEUsVUFBVyxJQUFLNytFLEVBQUksR0FBRzdCLEdBQUlpd0IsRUFBSSxJQUFJbzhDLEdBQzFELE9BQU9yc0UsRUFBRTRxQyxHQUFHNGpDLElBQUcsV0FDWCxPQUFPLEVBQUUvOUQsT0FBRyxPQUFRLEdBQVEsV0FDeEIsT0FBTyxFQUFFL1EsTUFBTSxTQUFVZ0ssR0FDckIsT0FBUUEsRUFBRW9HLE9BQ1IsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFjLEdBQUdqTyxJQUU1QixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMsR0FBRzZILEVBQUVxRyxPQUFRL1AsRUFBRTRxQyxHQUFJNzdCLEVBQUVneUUsR0FBSSxDQUM1QzE5RSxPQUFRLFVBQ1Q0c0IsSUFFTCxLQUFLLEVBQ0gsT0FBT3ZtQixFQUFFcUcsT0FBUSxDQUFFLGFBSTlCa2dCLEVBQUUzZSxRQUFReE0sTUFBSyxTQUFVNEUsR0FDMUIsT0FBTyxHQUFHMUosRUFBRytPLEVBQUdyRixNQXBCb0MsQ0FzQjFEaEssS0FBS3MvRSxJQUFNLFNBQVNqd0UsR0FDbEIsSUFBSTBCLEVBQUkvUSxLQUFNTSxFQUFJMnVFLEdBQUc1L0QsRUFBRTJ4RSxVQUFXLElBQUs3K0UsRUFBSSxHQUFHN0IsR0FBSWl3QixFQUFJLElBQUlvOEMsR0FDMUQsT0FBT3JzRSxFQUFFNHFDLEdBQUc0akMsSUFBRyxXQUNYLE9BQU8sRUFBRS85RCxPQUFHLE9BQVEsR0FBUSxXQUN4QixPQUFPLEVBQUUvUSxNQUFNLFNBQVVnSyxHQUNyQixPQUFRQSxFQUFFb0csT0FDUixLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWMsR0FBR2pPLElBRTVCLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBYyxHQUFHNkgsRUFBRXFHLE9BQVEvUCxFQUFFNHFDLEdBQUk3N0IsRUFBRWd5RSxHQUFJLENBQzVDMTlFLE9BQVEsV0FDVDRzQixJQUVMLEtBQUssRUFDSCxPQUFPdm1CLEVBQUVxRyxPQUFRLENBQUUsYUFJOUJrZ0IsRUFBRTNlLFFBQVF4TSxNQUFLLFNBQVU0RSxHQUMxQixPQUFPLEdBQUcxSixFQUFHK08sRUFBR3JGLE1BcEJYLENBc0JYaEssS0FBS3MvRSxLQUFLbDZFLE1BQUssU0FBVWlLLEdBQ3ZCLE9BQU8sSUFBSSxHQUFHMEIsRUFBRWl3RSxVQUFXLElBQUksR0FBR2p3RSxFQUFFaXdFLFVBQVUxQixHQUFJdnVFLEVBQUVxd0UsR0FBSS94RSxFQUFFZ3lFLEdBQUloeUUsRUFBRWl5RSxHQUFJanlFLEVBQUUwYixTQUFVaGEsRUFBRXV1RSxHQUFHaUMsU0FFMUZwL0UsRUFBRUcsVUFBVW8vRSxjQUFnQixTQUFTcnlFLEdBQ3BDLE9BQU8sSUFBSWxOLEVBQUVuQyxLQUFLZ2hGLFVBQVdoaEYsS0FBS3MvRSxHQUFHb0MsY0FBY3J5RSxLQUNwRGxOLEVBaE9pQixDQWlPdEI2c0UsSUFNRixTQUFTLEdBQUczL0QsRUFBR3JGLEVBQUczSCxHQUNkLE9BQU9nTixFQUFFNEQsUUFBVTVELEVBQUU0RCxRQUFROU8sUUFBUTZGLEVBQUksS0FBTTNILEVBQUksTUFBT2dOLEVBRzlELElBQUksR0FBbUIsV0FDbkIsU0FBU0EsRUFBRUEsRUFBR3JGLEdBQ1ZoSyxLQUFLZ3lFLGlCQUFtQjNpRSxFQUFHclAsS0FBS2tvRSxVQUFZbCtELEVBUWhELE9BQU9xRixFQUFFL00sVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDbEMsT0FBT3JQLEtBQUtneUUsbUJBQXFCM2lFLEVBQUUyaUUsa0JBQW9CaHlFLEtBQUtrb0UsWUFBYzc0RCxFQUFFNjRELFdBQzdFNzRELEVBWmdCLEdBYWxCLEdBQW1CLFNBQVNyRixHQUM3QixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsS0FBTXFDLElBQU1yQyxNQUFNbWhGLEdBQUs5eEUsRUFBRzBCLEVBRWpELE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJekksT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLE1BQU8sQ0FDdER3RCxJQUFLLFdBQ0QsT0FBTyxJQUFJLEdBQUc5RixLQUFLbWhGLEdBQUluaEYsS0FBS3MvRSxHQUFHaUYsTUFFbkN2MkUsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLEtBQU0sQ0FDekN3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtzL0UsR0FBRzMvRSxJQUVuQnFPLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFleEQsRUFBRUMsVUFBVyxXQUFZLENBQy9Dd0QsSUFBSyxXQUNELE9BQU85RixLQUFLcy9FLEdBQUd2MEQsVUFFbkIvYyxZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXhELEVBQUVDLFVBQVcsU0FBVSxDQUM3Q3dELElBQUssV0FDRCxPQUFPOUYsS0FBS3MvRSxHQUFHblUsVUFFbkJuOUQsWUFBWSxFQUNaaU8sY0FBYyxJQUNkNVosRUFBRUMsVUFBVWlCLEtBQU8sU0FBUzhMLEdBQzVCLE9BQU9yUCxLQUFLcy9FLEdBQUcvN0UsS0FBSzhMLElBQ3JCaE4sRUFBRUMsVUFBVXdELElBQU0sU0FBU3VKLEVBQUdyRixHQUM3QixPQUFPaEssS0FBS3MvRSxHQUFHeDVFLElBQUl1SixFQUFHckYsSUFDdkIzSCxFQUFFQyxVQUFVcS9ELFFBQVUsU0FBU3R5RCxHQUM5QixPQUFPLEdBQUdyUCxLQUFLcy9FLEdBQUlqd0UsRUFBRWl3RSxLQUN0Qmo5RSxFQW5DaUIsQ0FvQ3RCMnNFLElBQUssR0FBbUIsU0FBU2hsRSxHQUMvQixTQUFTM0gsSUFDTCxPQUFPLE9BQVMySCxHQUFLQSxFQUFFN0UsTUFBTW5GLEtBQU1tRyxZQUFjbkcsS0FFckQsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFQyxVQUFVaUIsS0FBTyxTQUFTOEwsR0FDeEMsT0FBT3JQLEtBQUtzL0UsR0FBRy83RSxLQUFLOEwsSUFDckJoTixFQU5tQixDQU94QixJQWtCRixTQUFTLEdBQUdnTixFQUFHckYsRUFBRzNILEdBQ2QsR0FBSUEsYUFBYTJzRSxLQUFPM3NFLEVBQUlBLEVBQUVpOUUsSUFBSyxpQkFBbUJqOUUsRUFBRyxDQUNyRCxHQUFJLEtBQU9BLEVBQUcsTUFBTSxJQUFJZ1AsR0FBRSxHQUFFMndELGlCQUFrQiwrSEFDOUMsSUFBSy9KLEdBQUdqdUQsS0FBTyxJQUFNM0gsRUFBRWllLFFBQVEsS0FBTSxNQUFNLElBQUlqUCxHQUFFLEdBQUUyd0QsaUJBQWtCLG1IQUFxSDMvRCxFQUFJLCtCQUM5TCxJQUFJME8sRUFBSS9HLEVBQUUwMEMsS0FBSzRrQixNQUFNLEdBQUVseUQsRUFBRS9PLElBQ3pCLElBQUssR0FBRXE4QixFQUFFM3RCLEdBQUksTUFBTSxJQUFJTSxHQUFFLEdBQUUyd0QsaUJBQWtCLDRJQUE4SWp4RCxFQUFJLHNEQUF3REEsRUFBRXBRLE9BQVMsTUFDbFEsT0FBT2dvRSxHQUFHdDVELEVBQUcsSUFBSSxHQUFFMEIsSUFFdkIsR0FBSTFPLGFBQWF1dkUsR0FBSSxPQUFPakosR0FBR3Q1RCxFQUFHaE4sRUFBRWcvRSxJQUNwQyxNQUFNLElBQUlod0UsR0FBRSxHQUFFMndELGlCQUFrQixpSUFBbUl4K0MsR0FBR25oQixHQUFLLEtBTTNLLFNBQVMsR0FBR2dOLEVBQUdyRixHQUNmLElBQUsvSSxNQUFNRSxRQUFRa08sSUFBTSxJQUFNQSxFQUFFMU8sT0FBUSxNQUFNLElBQUkwUSxHQUFFLEdBQUUyd0QsaUJBQWtCLHFEQUF1RGg0RCxFQUFFakssV0FBYSxjQUMvSSxHQUFJc1AsRUFBRTFPLE9BQVMsR0FBSSxNQUFNLElBQUkwUSxHQUFFLEdBQUUyd0QsaUJBQWtCLG1CQUFxQmg0RCxFQUFFakssV0FBYSxrRUFHM0YsU0FBUyxHQUFHc1AsRUFBR3JGLEVBQUczSCxHQUNkLElBQUtBLEVBQUVzL0QsUUFBUTMzRCxHQUFJLE1BQU0sSUFBSXFILEdBQUUsR0FBRTJ3RCxpQkFBa0IseUZBQTJGaDRELEVBQUVqSyxXQUFhLCtCQUFpQ2lLLEVBQUVqSyxXQUFhLG9FQUFzRXNDLEVBQUV0QyxXQUFhLGNBR3RTLFNBQVMsR0FBR3NQLEdBQ1IsR0FBSXVvRCxHQUFHdm9ELElBQU0sSUFBTUEsRUFBRThwRCxHQUFHeDRELE9BQVEsTUFBTSxJQUFJMFEsR0FBRSxHQUFFcXhELGNBQWUsMEVBR2pFLElBQUksR0FBbUIsV0FDbkIsU0FBU3J6RCxFQUFFQSxFQUFHckYsRUFBRzNILEdBQ2JyQyxLQUFLMmhGLEdBQUt0eUUsRUFBR3JQLEtBQUtnaEYsVUFBWWgzRSxFQUFHaEssS0FBS3VoRixHQUFLbC9FLEVBQUdyQyxLQUFLZ3NDLEdBQUs2bEMsR0FBRzduRSxFQUFFczFFLElBQUt0L0UsS0FBS29oRixHQUFLLElBQUk5UixHQUFHdGxFLEdBRXZGLE9BQU9xRixFQUFFL00sVUFBVWdrRCxNQUFRLFNBQVN0OEMsRUFBRzNILEVBQUcwTyxHQUN0QyxJQUFJelEsRUFBSSxHQUFHLGNBQWUwSixHQUFJN0gsRUFBSSxTQUFTa04sRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixFQUFHb3VCLEdBQ3pELElBQUlqaEIsRUFDSixHQUFJaFAsRUFBRXd3QixJQUFLLENBQ1AsR0FBSSxtQkFBMEMzdUIsR0FBSyx1QkFBa0RBLEVBQUcsTUFBTSxJQUFJa1AsR0FBRSxHQUFFMndELGlCQUFrQixxQ0FBdUM3L0QsRUFBSSx3Q0FDbkwsR0FBSSxPQUFrQkEsR0FBSyxXQUEwQkEsRUFBRyxDQUNwRCxHQUFHb3VCLEVBQUdwdUIsR0FDTixJQUFLLElBQUkyTCxFQUFJLEdBQUkwSCxFQUFJLEVBQUc4YSxFQUFJQyxFQUFHL2EsRUFBSThhLEVBQUUzdkIsT0FBUTZVLElBQUssQ0FDOUMsSUFBSXZGLEVBQUlxZ0IsRUFBRTlhLEdBQ1YxSCxFQUFFck8sS0FBSyxHQUFHc1IsRUFBRzFCLEVBQUdZLElBRXBCWCxFQUFJLENBQ0E2NkQsV0FBWSxDQUNSandELE9BQVFwTSxTQUdid0IsRUFBSSxHQUFHeUIsRUFBRzFCLEVBQUdraEIsT0FDakIsT0FBa0JwdUIsR0FBSyxXQUEwQkEsR0FBSyx1QkFBa0RBLEdBQUssR0FBR291QixFQUFHcHVCLEdBQzFIbU4sRUFBSSxHQUFHak4sRUFzREEsY0F0RE1rdUIsRUFDTSxPQUFrQnB1QixHQUFLLFdBQTBCQSxHQUNwRSxJQUFJcXVCLEVBQUlvbEMsR0FBRzFtRCxPQUFPNU8sRUFBRzZCLEVBQUdtTixHQUN4QixPQUFPLFNBQVNELEVBQUdyRixHQUNmLEdBQUlBLEVBQUVrckQsS0FBTSxDQUNSLElBQUk3eUQsRUFBSXl6RCxHQUFHem1ELEdBQ1gsR0FBSSxPQUFTaE4sSUFBTUEsRUFBRXMvRCxRQUFRMzNELEVBQUVpNkQsT0FBUSxNQUFNLElBQUk1eUQsR0FBRSxHQUFFMndELGlCQUFrQix3SUFBMEkzL0QsRUFBRXRDLFdBQWEsVUFBWWlLLEVBQUVpNkQsTUFBTWxrRSxXQUFhLEtBQ2pRLElBQUlnUixFQUFJcW9ELEdBQUcvcEQsR0FDWCxPQUFTMEIsR0FBSyxHQUFHLEVBQUcvRyxFQUFFaTZELE1BQU9sekQsR0FFakMsSUFBSXpRLEVBQUksU0FBUytPLEVBQUdyRixHQUNoQixJQUFLLElBQUkzSCxFQUFJLEVBQUcwTyxFQUFJMUIsRUFBRXcwRCxRQUFTeGhFLEVBQUkwTyxFQUFFcFEsT0FBUTBCLElBQUssQ0FDOUMsSUFBSS9CLEVBQUl5USxFQUFFMU8sR0FDVixHQUFJMkgsRUFBRXNXLFFBQVFoZ0IsRUFBRW9RLEtBQU8sRUFBRyxPQUFPcFEsRUFBRW9RLEdBRXZDLE9BQU8sS0FMSCxDQU1OckIsRUFhRixTQUFTQSxHQUNMLE9BQVFBLEdBQ04sSUFBSyxLQUNILE1BQU8sQ0FBRSxLQUF1QixVQUVsQyxJQUFLLGlCQUNILE1BQU8sQ0FBRSxpQkFBd0MscUJBQWdELFVBRW5HLElBQUssS0FDSCxNQUFPLENBQUUscUJBQWdELEtBQWdCLFVBRTNFLElBQUsscUJBQ0gsTUFBTyxDQUFFLGlCQUF3QyxxQkFBZ0QsS0FBZ0IsVUFFbkgsSUFBSyxTQUNILE1BQU8sQ0FBRSxpQkFBd0MscUJBQWdELEtBQWdCLFNBQXdCLE1BRTNJLFFBQ0UsTUFBTyxJQWxCZixDQW9CRXJGLEVBQUUwRyxLQUNKLEdBQUksT0FBU3BRLEVBRWIsTUFBTUEsSUFBTTBKLEVBQUUwRyxHQUFLLElBQUlXLEdBQUUsR0FBRTJ3RCxpQkFBa0IsZ0RBQWtEaDRELEVBQUUwRyxHQUFHM1EsV0FBYSxhQUFlLElBQUlzUixHQUFFLEdBQUUyd0QsaUJBQWtCLGtDQUFvQ2g0RCxFQUFFMEcsR0FBRzNRLFdBQWEsbUJBQXFCTyxFQUFFUCxXQUFhLGNBakRqUCxDQWtETHNQLEVBQUdtaEIsR0FBSUEsRUF0RXFCLENBdUVoQ3h3QixLQUFLMmhGLEdBQUksRUFBZTNoRixLQUFLZ3NDLEdBQUloc0MsS0FBS2doRixVQUFVQyxHQUFJM2dGLEVBQUcrQixFQUFHME8sR0FDNUQsT0FBTyxJQUFJMUIsRUFBRSxTQUFTQSxFQUFHckYsR0FDckIsSUFBSTNILEVBQUlnTixFQUFFdzBELFFBQVF6akUsT0FBTyxDQUFFNEosSUFDM0IsT0FBTyxJQUFJa3VELEdBQUc3b0QsRUFBRXF2QyxLQUFNcnZDLEVBQUVzMEQsZ0JBQWlCdDBELEVBQUU4cEQsR0FBRzMyRCxRQUFTSCxFQUFHZ04sRUFBRWswRCxNQUFPbDBELEVBQUVrOUQsVUFBV2w5RCxFQUFFeTBELFFBQVN6MEQsRUFBRTAwRCxPQUZwRixDQUdYL2pFLEtBQUsyaEYsR0FBSXgvRSxHQUFJbkMsS0FBS2doRixVQUFXaGhGLEtBQUt1aEYsS0FDckNseUUsRUFBRS9NLFVBQVVzaEUsUUFBVSxTQUFTNTVELEVBQUczSCxHQUNqQyxJQUFJME8sRUFDSixRQUFJLElBQVcxTyxHQUFLLFFBQVVBLEVBQUcwTyxFQUFJLFVBQTRCLENBQzdELEdBQUksU0FBVzFPLEVBQUcsTUFBTSxJQUFJZ1AsR0FBRSxHQUFFMndELGlCQUFrQixtREFBcUQzL0QsRUFBSSxnQ0FDM0cwTyxFQUFJLE9BRVIsSUFBSXpRLEVBQUksR0FBRyxnQkFBaUIwSixHQUFJN0gsRUFBSSxTQUFTa04sRUFBR3JGLEVBQUczSCxHQUMvQyxHQUFJLE9BQVNnTixFQUFFeTBELFFBQVMsTUFBTSxJQUFJenlELEdBQUUsR0FBRTJ3RCxpQkFBa0Isd0ZBQ3hELEdBQUksT0FBUzN5RCxFQUFFMDBELE1BQU8sTUFBTSxJQUFJMXlELEdBQUUsR0FBRTJ3RCxpQkFBa0IscUZBQ3RELElBQUlqeEQsRUFBSSxJQUFJKzZELEdBQUc5aEUsRUFBRzNILEdBQ2xCLE9BQU8sU0FBU2dOLEVBQUdyRixHQUNmLEdBQUksT0FBU292RCxHQUFHL3BELEdBQUksQ0FFaEIsSUFBSWhOLEVBQUl5ekQsR0FBR3ptRCxHQUNYLE9BQVNoTixHQUFLLEdBQUcsRUFBR0EsRUFBRzJILEVBQUVpNkQsUUFKMUIsQ0FNTDUwRCxFQUFHMEIsR0FBSUEsRUFWdUIsQ0FXbEMvUSxLQUFLMmhGLEdBQUlyaEYsRUFBR3lRLEdBQ2QsT0FBTyxJQUFJMUIsRUFBRSxTQUFTQSxFQUFHckYsR0FFckIsSUFBSTNILEVBQUlnTixFQUFFOHBELEdBQUcvNEQsT0FBTyxDQUFFNEosSUFDdEIsT0FBTyxJQUFJa3VELEdBQUc3b0QsRUFBRXF2QyxLQUFNcnZDLEVBQUVzMEQsZ0JBQWlCdGhFLEVBQUdnTixFQUFFdzBELFFBQVFyaEUsUUFBUzZNLEVBQUVrMEQsTUFBT2wwRCxFQUFFazlELFVBQVdsOUQsRUFBRXkwRCxRQUFTejBELEVBQUUwMEQsT0FIekYsQ0FJWC9qRSxLQUFLMmhGLEdBQUl4L0UsR0FBSW5DLEtBQUtnaEYsVUFBV2hoRixLQUFLdWhGLEtBQ3JDbHlFLEVBQUUvTSxVQUFVaWhFLE1BQVEsU0FBU3Y1RCxHQUM1QixPQUFPNmxFLEdBQUcsY0FBZTdsRSxHQUFJLElBQUlxRixFQUFFdXJELEdBQUc1NkQsS0FBSzJoRixHQUFJMzNFLEVBQUcsS0FBa0JoSyxLQUFLZ2hGLFVBQVdoaEYsS0FBS3VoRixLQUMxRmx5RSxFQUFFL00sVUFBVWtpRixZQUFjLFNBQVN4NkUsR0FDbEMsT0FBTzZsRSxHQUFHLG9CQUFxQjdsRSxHQUFJLElBQUlxRixFQUFFdXJELEdBQUc1NkQsS0FBSzJoRixHQUFJMzNFLEVBQUcsS0FBaUJoSyxLQUFLZ2hGLFVBQVdoaEYsS0FBS3VoRixLQUMvRmx5RSxFQUFFL00sVUFBVXdoRSxRQUFVLFNBQVM5NUQsR0FDOUIsSUFBSyxJQUFJM0gsRUFBSSxHQUFJME8sRUFBSSxFQUFHQSxFQUFJNUssVUFBVXhGLE9BQVFvUSxJQUFLMU8sRUFBRTBPLEVBQUksR0FBSzVLLFVBQVU0SyxHQUN4RSxJQUFJelEsRUFBSU4sS0FBS3FyQyxHQUFHLGdCQUFpQnJoQyxFQUFHM0gsR0FDeEIsR0FDWixPQUFPLElBQUlnTixFQUFFMm9ELEdBQUdoNEQsS0FBSzJoRixHQUFJcmhGLEdBQUlOLEtBQUtnaEYsVUFBV2hoRixLQUFLdWhGLEtBQ25EbHlFLEVBQUUvTSxVQUFVbWlGLFdBQWEsU0FBU3o2RSxHQUNqQyxJQUFLLElBQUkzSCxFQUFJLEdBQUkwTyxFQUFJLEVBQUdBLEVBQUk1SyxVQUFVeEYsT0FBUW9RLElBQUsxTyxFQUFFME8sRUFBSSxHQUFLNUssVUFBVTRLLEdBQ3hFLElBQUl6USxFQUFJTixLQUFLcXJDLEdBQUcsbUJBQW9CcmhDLEVBQUczSCxHQUMzQixHQUNaLE9BQU8sSUFBSWdOLEVBQUUyb0QsR0FBR2g0RCxLQUFLMmhGLEdBQUlyaEYsR0FBSU4sS0FBS2doRixVQUFXaGhGLEtBQUt1aEYsS0FDbkRseUUsRUFBRS9NLFVBQVVvaUYsVUFBWSxTQUFTMTZFLEdBQ2hDLElBQUssSUFBSTNILEVBQUksR0FBSTBPLEVBQUksRUFBR0EsRUFBSTVLLFVBQVV4RixPQUFRb1EsSUFBSzFPLEVBQUUwTyxFQUFJLEdBQUs1SyxVQUFVNEssR0FDeEUsSUFBSXpRLEVBQUlOLEtBQUtxckMsR0FBRyxrQkFBbUJyaEMsRUFBRzNILEdBQzFCLEdBQ1osT0FBTyxJQUFJZ04sRUFBRXdwRCxHQUFHNzRELEtBQUsyaEYsR0FBSXJoRixHQUFJTixLQUFLZ2hGLFVBQVdoaEYsS0FBS3VoRixLQUNuRGx5RSxFQUFFL00sVUFBVXloRSxNQUFRLFNBQVMvNUQsR0FDNUIsSUFBSyxJQUFJM0gsRUFBSSxHQUFJME8sRUFBSSxFQUFHQSxFQUFJNUssVUFBVXhGLE9BQVFvUSxJQUFLMU8sRUFBRTBPLEVBQUksR0FBSzVLLFVBQVU0SyxHQUN4RSxJQUFJelEsRUFBSU4sS0FBS3FyQyxHQUFHLGNBQWVyaEMsRUFBRzNILEdBQ3RCLEdBQ1osT0FBTyxJQUFJZ04sRUFBRXdwRCxHQUFHNzRELEtBQUsyaEYsR0FBSXJoRixHQUFJTixLQUFLZ2hGLFVBQVdoaEYsS0FBS3VoRixLQUNuRGx5RSxFQUFFL00sVUFBVXEvRCxRQUFVLFNBQVMzM0QsR0FDOUIsT0FBT0EsYUFBYXFGLEdBQUtyUCxLQUFLZ2hGLFlBQWNoM0UsRUFBRWczRSxXQUFheG9CLEdBQUd4NEQsS0FBSzJoRixHQUFJMzNFLEVBQUUyM0UsS0FBTzNoRixLQUFLdWhGLEtBQU92M0UsRUFBRXUzRSxJQUMvRmx5RSxFQUFFL00sVUFBVW8vRSxjQUFnQixTQUFTMTNFLEdBQ3BDLE9BQU8sSUFBSXFGLEVBQUVyUCxLQUFLMmhGLEdBQUkzaEYsS0FBS2doRixVQUFXaDNFLElBRXlCcUYsRUFBRS9NLFVBQVUrb0MsR0FBSyxTQUFTaDhCLEVBQUdyRixFQUFHM0gsRUFBRzBPLEdBQ2xHLEdBQUkvRyxhQUFhLEdBQUksT0FBTyxTQUFTcUYsRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEdBQzdDLElBQUt5USxFQUFHLE1BQU0sSUFBSU0sR0FBRSxHQUFFNndELFVBQVcsdURBQXlENy9ELEVBQUksT0FROUYsSUFBSyxJQUFJRixFQUFJLEdBQUlvdUIsRUFBSSxFQUFHamhCLEVBQUlrOUQsR0FBR245RCxHQUFJa2hCLEVBQUlqaEIsRUFBRTNPLE9BQVE0dkIsSUFBSyxDQUNsRCxJQUFJemlCLEVBQUl3QixFQUFFaWhCLEdBQ1YsR0FBSXppQixFQUFFbTJELE1BQU1uekMsSUFBSzN1QixFQUFFMUMsS0FBS2twRSxHQUFHMytELEVBQUcrRyxFQUFFM0YsVUFBWSxDQUN4QyxJQUFJb0ssRUFBSXpFLEVBQUVrekQsTUFBTW4yRCxFQUFFbTJELE9BQ2xCLEdBQUlzRCxHQUFHL3hELEdBQUksTUFBTSxJQUFJbkUsR0FBRSxHQUFFMndELGlCQUFrQiwrRkFBaUdsMEQsRUFBRW0yRCxNQUFRLDJIQUN0SixHQUFJLE9BQVN6dUQsRUFBRyxDQUNaLElBQUk4YSxFQUFJeGlCLEVBQUVtMkQsTUFBTS81QixJQUNoQixNQUFNLElBQUk3NEIsR0FBRSxHQUFFMndELGlCQUFrQiwrRkFBaUcxeEMsRUFBSSwyQ0FFekludUIsRUFBRTFDLEtBQUsrVixJQUdmLE9BQU8sSUFBSWtqRCxHQUFHdjJELEVBQUc3QixHQXJCTyxDQXNCMUJOLEtBQUsyaEYsR0FBSTNoRixLQUFLZ2hGLFVBQVVDLEdBQUk1eEUsRUFBR3JGLEVBQUVzMUUsR0FBR2dDLEdBQUl2d0UsR0FDMUMsSUFBSXpRLEVBQUksQ0FBRTBKLEdBQUk1SixPQUFPaUMsR0FDckIsT0FBTyxTQUFTZ04sRUFBR3JGLEVBQUczSCxFQUFHME8sRUFBR3pRLEVBQUc2QixHQUUzQixJQUFJb3VCLEVBQUlsaEIsRUFBRThwRCxHQUNWLEdBQUk3NEQsRUFBRUssT0FBUzR2QixFQUFFNXZCLE9BQVEsTUFBTSxJQUFJMFEsR0FBRSxHQUFFMndELGlCQUFrQixrQ0FBb0NqeEQsRUFBSSw2RkFDakcsSUFBSyxJQUFJekIsRUFBSSxHQUFJeEIsRUFBSSxFQUFHQSxFQUFJeE4sRUFBRUssT0FBUW1OLElBQUssQ0FDdkMsSUFBSTBILEVBQUlsVixFQUFFd04sR0FDVixHQUFJeWlCLEVBQUV6aUIsR0FBR20yRCxNQUFNbnpDLElBQUssQ0FDaEIsR0FBSSxpQkFBbUJ0YixFQUFHLE1BQU0sSUFBSW5FLEdBQUUsR0FBRTJ3RCxpQkFBa0IsdURBQXlEanhELEVBQUksd0JBQTBCeUUsR0FDakosSUFBS3lpRCxHQUFHNW9ELEtBQU8sSUFBTW1HLEVBQUU4SyxRQUFRLEtBQU0sTUFBTSxJQUFJalAsR0FBRSxHQUFFMndELGlCQUFrQix5R0FBMkdqeEQsRUFBSSx3Q0FBMEN5RSxFQUFJLHVCQUNsTyxJQUFJOGEsRUFBSWpoQixFQUFFcXZDLEtBQUs0a0IsTUFBTSxHQUFFbHlELEVBQUVvRSxJQUN6QixJQUFLLEdBQUVrcEIsRUFBRXBPLEdBQUksTUFBTSxJQUFJamYsR0FBRSxHQUFFMndELGlCQUFrQiwrR0FBaUhqeEQsRUFBSSxpREFBbUR1ZixFQUFJLDJEQUN6TixJQUFJcmdCLEVBQUksSUFBSSxHQUFFcWdCLEdBQ2RoaEIsRUFBRTdQLEtBQUtrcEUsR0FBRzMrRCxFQUFHaUcsUUFDVixDQUNILElBQUl1Z0IsRUFBSSxHQUFHbnVCLEVBQUcwTyxFQUFHeUUsR0FDakJsRyxFQUFFN1AsS0FBSyt3QixJQUdmLE9BQU8sSUFBSWtvQyxHQUFHcHBELEVBQUduTixHQWxCZCxDQW1CTG5DLEtBQUsyaEYsR0FBSTNoRixLQUFLZ2hGLFVBQVVDLEdBQUlqaEYsS0FBS2dzQyxHQUFJMzhCLEVBQUcvTyxFQUFHeVEsSUFDOUMxQixFQUFFL00sVUFBVWdpRixXQUFhLFdBQ3hCLElBQUssSUFBSWoxRSxFQUFHMEIsRUFBR3pRLEVBQUc2QixFQUFJbkMsS0FBTXV3QixFQUFJLEdBQUlqaEIsRUFBSSxFQUFHQSxFQUFJbkosVUFBVXhGLE9BQVEyTyxJQUFLaWhCLEVBQUVqaEIsR0FBS25KLFVBQVVtSixHQUN2RixJQUFJeEIsRUFBSSxHQUFJMEgsRUFBSSxFQUNoQixHQUFJLGlCQUFtQithLEVBQUUvYSxJQUFNKzlELEdBQUdoakQsRUFBRS9hLE1BQVExSCxFQUFJeWlCLEVBQUUvYSxHQUFJQSxLQUFNKzlELEdBQUdoakQsRUFBRS9hLElBQUssQ0FDbEUsSUFBSThhLEVBQUlDLEVBQUUvYSxHQUNWK2EsRUFBRS9hLEdBQUssUUFBVW5HLEVBQUlpaEIsRUFBRXh1QixZQUFTLElBQVd1TixPQUFJLEVBQVNBLEVBQUV2QyxLQUFLd2pCLEdBQUlDLEVBQUUvYSxFQUFJLEdBQUssUUFBVXpFLEVBQUl1ZixFQUFFenJCLGFBQVUsSUFBV2tNLE9BQUksRUFBU0EsRUFBRWpFLEtBQUt3akIsR0FDdklDLEVBQUUvYSxFQUFJLEdBQUssUUFBVWxWLEVBQUlnd0IsRUFBRXBwQixnQkFBYSxJQUFXNUcsT0FBSSxFQUFTQSxFQUFFd00sS0FBS3dqQixHQUUzRSxJQUFJcmdCLEVBQUksQ0FDSm5PLEtBQU0sU0FBU3VOLEdBQ1hraEIsRUFBRS9hLElBQU0rYSxFQUFFL2EsR0FBRyxJQUFJLEdBQUdyVCxFQUFFNitFLFVBQVcsSUFBSSxHQUFHNytFLEVBQUU2K0UsVUFBVTFCLEdBQUluOUUsRUFBRWkvRSxHQUFJLElBQUlwUSxHQUFHN3VFLEVBQUU2K0UsVUFBVTFCLEdBQUluOUUsRUFBRW8vRSxHQUFJcC9FLEVBQUV3L0UsSUFBS3R5RSxNQUV0R3hLLE1BQU8wckIsRUFBRS9hLEVBQUksR0FDYnRPLFNBQVVxcEIsRUFBRS9hLEVBQUksSUFFcEIsT0FBTyxHQUFHeFYsS0FBSzJoRixJQUFLLFNBQVN0eUUsRUFBRzBCLEVBQUd6USxFQUFHNkIsR0FDbEMsSUFBSW91QixFQUFJdndCLEtBQU1zUCxFQUFJLElBQUlxZ0UsR0FBR3h0RSxHQUFJMkwsRUFBSSxJQUFJeWpFLEdBQUd4Z0UsRUFBR3pCLEVBQUdoUCxHQUM5QyxPQUFPK08sRUFBRW0vRCxHQUFHTSxJQUFHLFdBQ1gsT0FBTyxFQUFFditDLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLElBQUl2bUIsRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUk2bUUsR0FBSSxDQUFFLEVBQWMsR0FBR3hoRSxJQUVwQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWVyRixFQUFFN0UsV0FBTSxFQUFRLENBQUU5QyxFQUFFZ08sT0FBUXZDLGVBSS9ELFdBQ0R3QixFQUFFK3ZFLEtBQU1od0UsRUFBRW0vRCxHQUFHTSxJQUFHLFdBQ1osT0FBTyxFQUFFditDLE9BQUcsT0FBUSxHQUFRLFdBQ3hCLElBQUl2bUIsRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUltbkUsR0FBSSxDQUFFLEVBQWMsR0FBRzloRSxJQUVwQyxLQUFLLEVBQ0gsTUFBTyxDQUFFLEVBQWVyRixFQUFFN0UsV0FBTSxFQUFRLENBQUU5QyxFQUFFZ08sT0FBUXZDLGdCQXpCeEQsQ0ErQmxCLEdBQUc5TixLQUFLZ2hGLFVBQVUxQixJQUFLdC9FLEtBQUsyaEYsR0FBSTd6RSxFQUFHbUMsSUFDdENaLEVBQUUvTSxVQUFVd0QsSUFBTSxTQUFTdUosR0FDMUIsSUFBSTBCLEVBQUkvUSxLQUNSLEdBQUdBLEtBQUsyaEYsSUFDUixJQUFJcmhGLEVBQUksR0FBR04sS0FBS2doRixVQUFVMUIsSUFDMUIsT0FBUWp3RSxHQUFLLFVBQVlBLEVBQUUxTCxPQUFTLFNBQVMwTCxFQUFHMEIsR0FDNUMsSUFBSXpRLEVBQUlOLEtBQU1tQyxFQUFJLElBQUl3cUUsR0FDdEIsT0FBT3Q5RCxFQUFFbS9ELEdBQUdNLElBQUcsV0FDWCxPQUFPLEVBQUV4dUUsT0FBRyxPQUFRLEdBQVEsV0FDeEIsSUFBSUEsRUFDSixPQUFPLEVBQUVOLE1BQU0sU0FBVXV3QixHQUNyQixPQUFRQSxFQUFFbmdCLE9BQ1IsS0FBSyxFQUNILE9BQU85UCxFQUFJLFNBQVMrTyxFQUFHMEIsRUFBR3pRLEdBQ3RCLE9BQU8sRUFBRU4sVUFBTSxPQUFRLEdBQVEsV0FDM0IsSUFBSWdLLEVBQUc3SCxFQUFHb3VCLEVBQUdqaEIsRUFBR3hCLEVBQUcwSCxFQUNuQixPQUFPLEVBQUV4VixNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBTy9OLEVBQUVpTyxLQUFLN1EsS0FBSyxDQUFFLEVBQUcsRUFBRyxDQUFFLElBQU0sQ0FBRSxFQUFjMjhELEdBQUcvc0QsRUFBRzBCLEdBQy9CLElBRTVCLEtBQUssRUFDSCxPQUFPL0csRUFBSTNILEVBQUVnTyxPQUFRbE8sRUFBSSxJQUFJZzVFLEdBQUdwcUUsRUFBRy9HLEVBQUV5cUIsSUFBS2xFLEVBQUlwdUIsRUFBRW94QyxHQUFHdnBDLEVBQUVxaEUsV0FBWS83RCxFQUFJbk4sRUFBRXMzQyxHQUFHbHBCLEdBQzlDLEdBQUtqd0IsRUFBRWtFLFFBQVE4SyxFQUFFeXVFLFVBQVcsQ0FBRSxFQUFjLEdBRTFFLEtBQUssRUFDSCxPQUFPandFLEVBQUl6TCxFQUFFZ08sT0FBUW1GLEVBQUk4NkQsR0FBR3hpRSxFQUFHLDRCQUE4QmlELEVBQUksa0JBQ2pFelEsRUFBRW1FLE9BQU8rUSxHQUFJLENBQUUsRUFBYyxHQUUvQixLQUFLLEVBQ0gsTUFBTyxDQUFFLFdBSXRCLENBQUUsRUFBYzhiLEdBQUdqaUIsSUFFeEIsS0FBSyxFQUNILE1BQU8sQ0FBRSxFQUFlL08sRUFBRTZFLFdBQU0sRUFBUSxDQUFFb3JCLEVBQUVsZ0IsT0FBUVUsRUFBRzVPLGVBSWxFQSxFQUFFeVAsUUFyQ3lCLENBc0NsQ3RSLEVBQUdOLEtBQUsyaEYsSUFBTSxTQUFTdHlFLEVBQUcwQixFQUFHelEsR0FDM0IsSUFBSTZCLEVBQUluQyxVQUNSLElBQVdNLElBQU1BLEVBQUksSUFDckIsSUFBSWl3QixFQUFJLElBQUlvOEMsR0FDWixPQUFPdDlELEVBQUVtL0QsR0FBR00sSUFBRyxXQUNYLE9BQU8sRUFBRTNzRSxPQUFHLE9BQVEsR0FBUSxXQUN4QixJQUFJNkgsRUFDSixPQUFPLEVBQUVoSyxNQUFNLFNBQVVxQyxHQUNyQixPQUFRQSxFQUFFK04sT0FDUixLQUFLLEVBQ0gsT0FBT3BHLEVBQUksU0FBU3FGLEVBQUdyRixFQUFHM0gsRUFBRzBPLEVBQUd6USxHQUM1QixJQUFJNkIsRUFBSSxJQUFJd3RFLEdBQUcsQ0FDWDd0RSxLQUFNLFNBQVNPLEdBR1gySCxFQUFFOGtFLElBQUcsV0FDRCxPQUFPcUMsR0FBRzloRSxFQUFHa2hCLE1BQ1psdUIsRUFBRTZsRSxXQUFhLFdBQWFuM0QsRUFBRXBOLE9BQVNyRCxFQUFFbUUsT0FBTyxJQUFJNE0sR0FBRSxHQUFFc3hELFlBQWEsaUxBQW1McmlFLEVBQUVrRSxRQUFRbkMsSUFFM1F3QyxNQUFPLFNBQVN3SyxHQUNaLE9BQU8vTyxFQUFFbUUsT0FBTzRLLE1BRXBCa2hCLEVBQUksSUFBSWdoRCxHQUFHbHZFLEVBQUdGLEVBQUcsQ0FDakJ3dkUsd0JBQXdCLEVBQ3hCSSxJQUFJLElBRVIsT0FBT2xCLEdBQUd4aEUsRUFBR2toQixJQUNkLENBQUUsRUFBYyxHQUFHbGhCLElBRXhCLEtBQUssRUFDSCxNQUFPLENBQUUsRUFBZXJGLEVBQUU3RSxXQUFNLEVBQVEsQ0FBRTlDLEVBQUVnTyxPQUFRaEIsRUFBRW0vRCxHQUFJejlELEVBQUd6USxFQUFHaXdCLGVBSTNFQSxFQUFFM2UsUUFsQ0ssQ0FtQ2R0UixFQUFHTixLQUFLMmhGLEdBQUl0eUUsSUFBSWpLLE1BQUssU0FBVWlLLEdBQzdCLE9BQU8sSUFBSSxHQUFHMEIsRUFBRWl3RSxVQUFXLElBQUksR0FBR2p3RSxFQUFFaXdFLFVBQVUxQixHQUFJdnVFLEVBQUVxd0UsR0FBSSxJQUFJcFEsR0FBR2pnRSxFQUFFaXdFLFVBQVUxQixHQUFJdnVFLEVBQUV3d0UsR0FBSXh3RSxFQUFFNHdFLElBQUt0eUUsUUFFakdBLEVBalRnQixHQWtUbEIsR0FBbUIsU0FBU3JGLEdBQzdCLFNBQVMzSCxFQUFFZ04sRUFBR2hOLEdBQ1YsSUFBSTBPLEVBQUkvUSxLQUNSLE9BQVErUSxFQUFJL0csRUFBRXpILEtBQUt2QyxLQUFNcUMsSUFBTXJDLE1BQU1taEYsR0FBSzl4RSxFQUFHMEIsRUFFakQsT0FBTyxFQUFFMU8sRUFBRzJILEdBQUl6SSxPQUFPc0UsZUFBZXhELEVBQUVDLFVBQVcsT0FBUSxDQUN2RHdELElBQUssV0FDRCxPQUFPOUYsS0FBS3MvRSxHQUFHem5FLE1BRW5CN0osWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLE1BQU8sQ0FDMUN3RCxJQUFLLFdBQ0QsT0FBTyxJQUFJLEdBQUc5RixLQUFLbWhGLEdBQUluaEYsS0FBS3MvRSxHQUFHelgsTUFFbkM3NUQsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLFdBQVksQ0FDL0N3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtzL0UsR0FBR2tFLFVBRW5CeDFFLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFleEQsRUFBRUMsVUFBVyxXQUFZLENBQy9Dd0QsSUFBSyxXQUNELE9BQU85RixLQUFLcy9FLEdBQUdrRSxVQUVuQngxRSxZQUFZLEVBQ1ppTyxjQUFjLElBQ2Q1WixFQTdCZ0IsQ0E4QnRCMnNFLElBQUssR0FBbUIsU0FBU2hsRSxHQUMvQixTQUFTM0gsRUFBRWdOLEVBQUdoTixHQUNWLElBQUkwTyxFQUFJL1EsS0FDUixPQUFRK1EsRUFBSS9HLEVBQUV6SCxLQUFLdkMsS0FBTXFDLElBQU1yQyxNQUFNbWhGLEdBQUs5eEUsRUFBRzBCLEVBRWpELE9BQU8sRUFBRTFPLEVBQUcySCxHQUFJekksT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLFFBQVMsQ0FDeER3RCxJQUFLLFdBQ0QsT0FBTyxJQUFJLEdBQUc5RixLQUFLcy9FLEdBQUc5MkUsTUFBTW01RSxHQUFJM2hGLEtBQUttaEYsR0FBSW5oRixLQUFLcy9FLEdBQUc5MkUsTUFBTSs0RSxLQUUzRHZ6RSxZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXhELEVBQUVDLFVBQVcsV0FBWSxDQUMvQ3dELElBQUssV0FDRCxPQUFPOUYsS0FBS3MvRSxHQUFHdjBELFVBRW5CL2MsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLE9BQVEsQ0FDM0N3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUtzL0UsR0FBR2w2RCxNQUVuQnBYLFlBQVksRUFDWmlPLGNBQWMsSUFDZDFhLE9BQU9zRSxlQUFleEQsRUFBRUMsVUFBVyxRQUFTLENBQzVDd0QsSUFBSyxXQUNELE9BQU85RixLQUFLcy9FLEdBQUdoVCxPQUVuQnQrRCxZQUFZLEVBQ1ppTyxjQUFjLElBQ2QxYSxPQUFPc0UsZUFBZXhELEVBQUVDLFVBQVcsT0FBUSxDQUMzQ3dELElBQUssV0FDRCxJQUFJdUosRUFBSXJQLEtBQ1IsT0FBT0EsS0FBS3MvRSxHQUFHdlgsS0FBSzluRSxLQUFJLFNBQVUrSixHQUM5QixPQUFPLElBQUksR0FBR3FGLEVBQUU4eEUsR0FBSW4zRSxPQUc1QmdFLFlBQVksRUFDWmlPLGNBQWMsSUFDZDVaLEVBQUVDLFVBQVUybEUsV0FBYSxTQUFTNTRELEdBQ2xDLElBQUlyRixFQUFJaEssS0FDUixPQUFPQSxLQUFLcy9FLEdBQUdyWCxXQUFXNTRELEdBQUdwUCxLQUFJLFNBQVVvUCxHQUN2QyxPQUFPLElBQUksR0FBR3JGLEVBQUVtM0UsR0FBSTl4RSxPQUV6QmhOLEVBQUVDLFVBQVVxRCxRQUFVLFNBQVMwSixFQUFHckYsR0FDakMsSUFBSTNILEVBQUlyQyxLQUNSQSxLQUFLcy9FLEdBQUczNUUsU0FBUSxTQUFVb0wsR0FDdEIxQixFQUFFOU0sS0FBS3lILEVBQUcsSUFBSSxHQUFHM0gsRUFBRTgrRSxHQUFJcHdFLFFBRTVCMU8sRUFBRUMsVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDOUIsT0FBTyxHQUFHclAsS0FBS3MvRSxHQUFJandFLEVBQUVpd0UsS0FDdEJqOUUsRUFsRG1CLENBbUR4QjJzRSxJQUFLLEdBQW1CLFNBQVNobEUsR0FDL0IsU0FBUzNILEVBQUVnTixFQUFHaE4sRUFBRzBPLEdBQ2IsSUFBSXpRLEVBQUlOLEtBQ1IsSUFBS00sRUFBSTBKLEVBQUV6SCxLQUFLdkMsS0FBTSs0RCxHQUFHMXBELEdBQUloTixFQUFHME8sSUFBTS9RLE1BQU00aEYsR0FBS3Z5RSxFQUFHQSxFQUFFMU8sT0FBUyxHQUFLLEVBQUcsTUFBTSxJQUFJMFEsR0FBRSxHQUFFMndELGlCQUFrQixnR0FBa0czeUQsRUFBRTY2QixJQUFNLFFBQVU3NkIsRUFBRTFPLFFBQzdOLE9BQU9MLEVBRVgsT0FBTyxFQUFFK0IsRUFBRzJILEdBQUl6SSxPQUFPc0UsZUFBZXhELEVBQUVDLFVBQVcsS0FBTSxDQUNyRHdELElBQUssV0FDRCxPQUFPOUYsS0FBSzJoRixHQUFHampDLEtBQUtubkIsS0FFeEJ2cEIsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLFNBQVUsQ0FDN0N3RCxJQUFLLFdBQ0QsSUFBSXVKLEVBQUlyUCxLQUFLMmhGLEdBQUdqakMsS0FBS3hQLElBQ3JCLE9BQU83L0IsRUFBRWk1QyxJQUFNLEtBQU8sR0FBR3JkLEdBQUc1N0IsRUFBR3JQLEtBQUtnaEYsVUFDbkIsT0FFckJoekUsWUFBWSxFQUNaaU8sY0FBYyxJQUNkMWEsT0FBT3NFLGVBQWV4RCxFQUFFQyxVQUFXLE9BQVEsQ0FDM0N3RCxJQUFLLFdBQ0QsT0FBTzlGLEtBQUsyaEYsR0FBR2pqQyxLQUFLeFUsS0FFeEJsOEIsWUFBWSxFQUNaaU8sY0FBYyxJQUNkNVosRUFBRUMsVUFBVXVsRSxJQUFNLFNBQVN4NEQsR0FHM0IsSUFBTWxKLFVBQVV4RixTQUFXME8sRUFBSSxHQUFFa2hCLEtBQU1xL0MsR0FBRywwQkFBMkIsT0FBUXZnRSxHQUM3RSxJQUFJckYsRUFBSSxHQUFFb0gsRUFBRS9CLEdBQ1osT0FBTyxHQUFHNDdCLEdBQUdqckMsS0FBSzJoRixHQUFHampDLEtBQUs0a0IsTUFBTXQ1RCxHQUFJaEssS0FBS2doRixVQUFXaGhGLEtBQUt1aEYsS0FDMURsL0UsRUFBRUMsVUFBVTBtQixJQUFNLFNBQVMzWixHQUMxQixJQUFJckYsRUFBSWhLLEtBQUt1aEYsR0FBS3ZoRixLQUFLdWhGLEdBQUdvRCxZQUFZdDFFLEdBQUtBLEVBQUdoTixFQUFJckMsS0FBSzZuRSxNQUUvQyxPQUFPLEdBQUdxWixHQUFHNytFLEVBQUVpOUUsR0FBRytCLEdBQUlyaEYsS0FBS2doRixVQUFXLE1BQU1qN0UsSUFBSWlFLEdBQUc1RSxNQUFLLFdBQzVELE9BQU8vQyxNQUVaQSxFQUFFQyxVQUFVby9FLGNBQWdCLFNBQVNyeUUsR0FDcEMsT0FBTyxJQUFJaE4sRUFBRXJDLEtBQUs0aEYsR0FBSTVoRixLQUFLZ2hGLFVBQVczeEUsSUFDdkNoTixFQXhDbUIsQ0F5Q3hCLElBRUYsU0FBUyxHQUFHZ04sRUFBR3JGLEVBQUczSCxHQUNkLElBQUkwTyxFQUFJaytELEdBQUdqbEUsRUFBRzRuRSxJQUNkLEdBQUk3Z0UsRUFBRWl3RSxZQUFjMytFLEVBQUVpOUUsR0FBSSxNQUFNLElBQUlqdUUsR0FBRSxHQUFFMndELGlCQUFrQix1RUFDMUQsT0FBT2p4RCxFQVdQLFNBQVMsR0FBRzFCLEVBQUdyRixFQUFHM0gsR0FJbEIsT0FBT2dOLEVBQUloTixJQUFNQSxFQUFFazlFLE9BQVNsOUUsRUFBRW05RSxhQUFlbndFLEVBQUVzMUUsWUFBWTM2RSxFQUFHM0gsR0FBS2dOLEVBQUVzMUUsWUFBWTM2RSxHQUFLQSxFQTBCdEYsSUF3SVFxRixHQXhJSixHQUFtQixTQUFTckYsR0FPaEMsU0FBUzNILElBQ0wsSUFBSyxJQUFJZ04sRUFBSSxHQUFJaE4sRUFBSSxFQUFHQSxFQUFJOEQsVUFBVXhGLE9BQVEwQixJQUFLZ04sRUFBRWhOLEdBQUs4RCxVQUFVOUQsR0FDcEUsT0FBTzJILEVBQUV6SCxLQUFLdkMsS0FBTSxJQUFLbXdFLEdBQUdyakUsS0FBSzNILE1BQU1nckUsR0FBSSxFQUFFLE1BQUUsR0FBVTlnRSxPQUFTclAsS0FFdEUsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFdWlGLFdBQWEsV0FPM0IsT0FBTyxJQUFJdmlGLEVBQUUsR0FBRTB2QixJQUFJbVksTUFDcEI3bkMsRUFBRUMsVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDOUIsT0FBT0EsYUFBYTIvRCxLQUFPMy9ELEVBQUlBLEVBQUVpd0UsSUFBS2p3RSxhQUFhOGdFLElBQU1ud0UsS0FBS3MvRSxHQUFHbUMsR0FBRzlmLFFBQVF0eUQsRUFBRW95RSxLQUMvRXAvRSxFQXJCb0IsQ0FzQnpCMnNFLElBQUssR0FBbUIsU0FBU2hsRSxHQUMvQixTQUFTM0gsSUFDTCxPQUFPLE9BQVMySCxHQUFLQSxFQUFFN0UsTUFBTW5GLEtBQU1tRyxZQUFjbkcsS0FFckQsT0FBTyxFQUFFcUMsRUFBRzJILEdBQUkzSCxFQUFFd2lGLGdCQUFrQixXQUNoQyxJQUFJeDFFLEVBQUksSUFBSTYvRCxHQUFHLG1CQUNmLE9BQU83L0QsRUFBRW93RSxHQUFLLDZCQUE4QixJQUFJcDlFLEVBQUVnTixJQUNuRGhOLEVBQUUyWCxPQUFTLFdBQ1YsSUFBSTNLLEVBQUksSUFBSSsvRCxHQUFHLGVBQ2YsT0FBTy8vRCxFQUFFb3dFLEdBQUssb0JBQXFCLElBQUlwOUUsRUFBRWdOLElBQzFDaE4sRUFBRXlpRixXQUFhLFdBQ2QsSUFBSyxJQUFJejFFLEVBQUksR0FBSXJGLEVBQUksRUFBR0EsRUFBSTdELFVBQVV4RixPQUFRcUosSUFBS3FGLEVBQUVyRixHQUFLN0QsVUFBVTZELEdBQ3BFLElBQUkrRyxFQWFKLFdBQ0ksSUFBSyxJQUFJMUIsRUFBSSxHQUFJckYsRUFBSSxFQUFHQSxFQUFJN0QsVUFBVXhGLE9BQVFxSixJQUFLcUYsRUFBRXJGLEdBQUs3RCxVQUFVNkQsR0FHeEQsT0FBTyxJQUFJaW1FLEdBQUcsYUFBYzVnRSxJQUMxQ2xLLFdBQU0sRUFBUWtLLEdBQ2hCLE9BQU8wQixFQUFFMHVFLEdBQUssd0JBQXlCLElBQUlwOUUsRUFBRTBPLElBQzlDMU8sRUFBRTBpRixZQUFjLFdBQ2YsSUFBSyxJQUFJMTFFLEVBQUksR0FBSXJGLEVBQUksRUFBR0EsRUFBSTdELFVBQVV4RixPQUFRcUosSUFBS3FGLEVBQUVyRixHQUFLN0QsVUFBVTZELEdBQ3BFLElBQUkrRyxFQUFJLFdBQ0osSUFBSyxJQUFJMUIsRUFBSSxHQUFJckYsRUFBSSxFQUFHQSxFQUFJN0QsVUFBVXhGLE9BQVFxSixJQUFLcUYsRUFBRXJGLEdBQUs3RCxVQUFVNkQsR0FHeEQsT0FBTyxJQUFJa21FLEdBQUcsY0FBZTdnRSxJQUMzQ2xLLFdBQU0sRUFBUWtLLEdBQ2hCLE9BQU8wQixFQUFFMHVFLEdBQUsseUJBQTBCLElBQUlwOUUsRUFBRTBPLElBQy9DMU8sRUFBRTJvRSxVQUFZLFNBQVMzN0QsR0FDdEIsSUFBSXJGLEVBQUksU0FBU3FGLEdBQ2IsT0FBTyxJQUFJZ2dFLEdBQUcsWUFBYWhnRSxHQUR2QixDQUVOQSxHQUNGLE9BQU9yRixFQUFFeTFFLEdBQUssdUJBQXdCLElBQUlwOUUsRUFBRTJILElBQzdDM0gsRUFBRUMsVUFBVXEvRCxRQUFVLFNBQVN0eUQsR0FDOUIsT0FBT3JQLEtBQUtzL0UsR0FBRzNkLFFBQVF0eUQsRUFBRWl3RSxLQUMxQmo5RSxFQWhEbUIsQ0FpRHhCMnNFLElBQUssR0FBSyxDQUNSZ1csVUFBVyxHQUNYQyxTQUFVblYsR0FDVm9WLFVBQVdwMEQsR0FDWHEwRCxLQUFNblYsR0FDTmpwRSxZQUFhLEdBQ2JxK0UsV0FBWSxHQUNaQyxrQkFBbUIsR0FDbkJDLGlCQUFrQixHQUNsQkMsTUFBTyxHQUNQQyxzQkFBdUIsR0FDdkJDLGNBQWUsR0FDZkMsb0JBQXFCLEdBQ3JCQyxVQUFXLEdBQ1hDLFdBQVksR0FDWjFwRSxZQUFhLFNBQVM3TSxHQUNsQixJQUFJckYsRUFDSkEsRUFBSXFGLEVBQUcsR0FBRTZNLFlBQVlsUyxJQUV6QjY3RSxzQkFBdUIsSUErQ3RCLFNBQVN4MkUsRUFBR3JGLEdBQ1RxRixFQUFFOEssU0FBUzRFLGtCQUFrQixJQUFJLEVBQUUsYUFBYSxTQUFVMVAsR0FDdEQsT0FBTyxTQUFTQSxFQUFHckYsR0FDZixPQUFPLElBQUksR0FBR3FGLEVBQUcsSUFBSSxHQUFHQSxFQUFHckYsR0FBSSxJQUFJLElBRGhDLENBRUxxRixFQUFFc0wsWUFBWSxPQUFPekIsZUFBZ0I3SixFQUFFc0wsWUFBWSxvQkFDckQsVUFBdUJ2QyxnQkFBZ0I3VyxPQUFPNk4sT0FBTyxHQUFJLE9BTGhFLENBRE9DLEdBVVQsSUFIT0EsR0FBRWtQLGdCQUFnQixzQkFBdUIsU0N0cWhCbkQsSUFZSXRPLEdBQUk4TixpQkFaZSxDQUNyQm1FLE9BQVEsMENBQ1JxeEMsV0FBWSxnQ0FDWnV5QixZQUFhLHVDQUNiL2tFLFVBQVcsZ0JBQ1hnbEUsY0FBZSw0QkFDZkMsa0JBQW1CLGVBQ25COWlFLE1BQU8sNENBQ1B5RyxjQUFlLGlCLElBS1I1TCxlLDZCQ2hCSSxLQUFJLEtBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1MLFksY0NKRixLQUFJLEtBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1MLFlDeUJGclUsU0FBU0MsY0FBYyxRQUMvQnNpQixpQkFBaUIsVUEvQnRCLFNBQWdCamlCLEdBQ2RBLEVBQUVpMkIsaUJBQ0YsSUFBTWdtRCxFQUFRdjhFLFNBQVN3OEUsaUJBQWlCLFNBQ2xDOXlDLEVBQVE2eUMsRUFBTSxHQUFHamtGLE1BQ2pCcXhDLEVBQVc0eUMsRUFBTSxHQUFHamtGLE1BQ3BCbWtGLEVBQVVGLEVBQU0sR0FBR0UsUUFDekJwdkUsUUFBUXFGLElBQUkyQixTQUVQb29FLEVBWUxwb0UsVUFFR3FvRSxlQUFlbjJFLGdDQUNmN0ssTUFBSyxrQkFBTTJZLFVBQWdCc29FLDJCQUEyQmp6QyxFQUFPQyxNQUM3RGp1QyxNQUFLLFNBQUN1ckQsR0FDTC9tRCxPQUFPMkUsU0FBVyxpQkFMdEIsT0FPUyxTQUFDMUosR0FBRCxPQUFXeWhGLE1BQU16aEYsRUFBTW9PLFlBbEI5QjhLLFVBRUdxb0UsZUFBZW4yRSxrQ0FDZjdLLE1BQUssa0JBQU0yWSxVQUFnQnNvRSwyQkFBMkJqekMsRUFBT0MsTUFDN0RqdUMsTUFBSyxTQUFDdXJELEdBQ0wvbUQsT0FBTzJFLFNBQVcsaUJBTHRCLE9BT1MsU0FBQzFKLEdBQUQsT0FBV3loRixNQUFNemhGLEVBQU1vTyxnQiIsImZpbGUiOiJpbmRleC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4uL2ltYWdlcy9jaGljYWdvLmpwZ1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5oZWFkZXIge1xcbiAgaGVpZ2h0OiAxMDB2aDsgLyogb3V0IG9mIDEwMCAqL1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxcbiAgICAgIHRvIHJpZ2h0LFxcbiAgICAgIHJnYmEoNjcsIDQ4LCAxMzMsIDAuOCksXFxuICAgICAgcmdiYSg1OCwgNjUsIDYyLCAwLjY5MilcXG4gICAgKSxcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7IC8qIHRyeSB0byBmaXQgd2lkdGggb2Ygdmlld3BvcnQgb3IgZWxlbWVudCAqL1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogdG9wOyAvKiB0b3Agb2YgaW1nIHN0YXlzIGF0b3AgY29udGFpbmVyICovXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi50ZXh0LWJveCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTsgLyogZnJvbSBwYXJlbnQgZWxlbWVudCAqL1xcbiAgbGVmdDogNTAlOyAvKiBmcm9tIHBhcmVudCBlbGVtZW50ICovXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgLyogZnJvbSBpdHNlbGYgKHRvcC1sZWZ0IGNvcm5lciBlbnRyeSkgKi9cXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmhlYWRpbmctcHJpbWFyeSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuXFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47IC8qIGZpeGVzIHNoYWtpbmcgaW4gYW5pbWF0aW9uICovXFxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbn1cXG5cXG4uaGVhZGluZy1wcmltYXJ5LW1haW4ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDUwcHg7XFxuICBmb250LXdlaWdodDogODAwO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDIwcHg7XFxuICBsaW5lLWhlaWdodDogMS4zO1xcblxcbiAgYW5pbWF0aW9uLW5hbWU6IG1vdmVJbkxlZnQ7XFxuICBhbmltYXRpb24tZHVyYXRpb246IDJzO1xcbiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XFxufVxcblxcbi5oZWFkaW5nLXByaW1hcnktc3ViIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxldHRlci1zcGFjaW5nOiA3LjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjM7XFxuXFxuICBhbmltYXRpb246IG1vdmVJblJpZ2h0IDJzIGVhc2Utb3V0O1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLmhlYWRpbmctcHJpbWFyeS1tYWluIHtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDEwcHg7XFxuICB9XFxufVxcblxcbi8qIGl0J3MgYmVzdCB0byBvbmx5IGFuaW1hdGUgdHdvIHByb3BlcnRpZXMgKG9wYWNpdHksIHRyYW5zZm9ybSkgKi9cXG5Aa2V5ZnJhbWVzIG1vdmVJbkxlZnQge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoXFxuICAgICAgLTEwMHB4XFxuICAgICk7IC8qICh4LCB5KSAtPiBuZWcgZ29lcyBsZWZ0L2Rvd24sIHBvcyBnb2VzIHJpZ2h0L3VwICovXFxuICB9XFxuXFxuICA4MCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTBweCk7XFxuICB9XFxuXFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgbW92ZUluUmlnaHQge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoXFxuICAgICAgMTAwcHhcXG4gICAgKTsgLyogKHgsIHkpIC0+IG5lZyBnb2VzIGxlZnQvdXAsIHBvcyBnb2VzIHJpZ2h0L2Rvd24gKi9cXG4gIH1cXG5cXG4gIDgwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTBweCk7XFxuICB9XFxuXFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCk7XFxuICB9XFxufVxcblxcbmZvcm0ge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQ6IDE0cHgvMS40IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgd2lkdGg6IDI0MHB4O1xcbn1cXG5cXG5maWVsZHNldCB7XFxuICBib3JkZXI6IDA7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5pbnB1dCB7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBmb250OiAxNHB4LzEuNCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uYWNjb3VudC1pbmZvIHtcXG4gIHBhZGRpbmc6IDIwcHggMjBweCAwIDIwcHg7XFxufVxcblxcbi5hY2NvdW50LWluZm8gbGFiZWwge1xcbiAgY29sb3I6ICMzOTU4NzA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG59XFxuXFxuLmFjY291bnQtaW5mbyBpbnB1dCB7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2M2YzdjYztcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBjb2xvcjogIzYzNjQ2NjtcXG4gIHBhZGRpbmc6IDZweDtcXG4gIG1hcmdpbi10b3A6IDZweDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uYWNjb3VudC1hY3Rpb24ge1xcbiAgYmFja2dyb3VuZDogI2YwZjBmMjtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYzZjN2NjO1xcbiAgcGFkZGluZzogM3B4IDIwcHggMTBweCAyMHB4O1xcbn1cXG5cXG4uYWNjb3VudC1hY3Rpb24gLmJ0biB7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoIzQ5NzA4ZiwgIzI5M2Y1MCk7XFxuICBib3JkZXI6IDA7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogOHB4IDE2cHg7XFxufVxcblxcbi5hY2NvdW50LXN1cHBvcnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbn1cXG5cXG4uYWNjb3VudC1zdXBwb3J0IGxhYmVsIHtcXG4gIGNvbG9yOiAjN2M3YzgwO1xcbn1cXG5cXG4uYWNjb3VudC1zdXBwb3J0IGlucHV0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogM3B4O1xcbn1cXG5cXG4uYWNjb3VudC1zdXBwb3J0IGEge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAycHg7XFxufVxcblxcbi5hY2NvdW50LWFjdGlvbiAuYnRuOmxpbmssXFxuLmFjY291bnQtYWN0aW9uIC5idG46dmlzaXRlZCB7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4yczsgLyogaW5pdGlhbCBzdGF0ZSAqL1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLmFjY291bnQtYWN0aW9uIC5idG46aG92ZXIge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zcHgpOyAvKiBnb2VzIHVwIDNweCAqL1xcbiAgYm94LXNoYWRvdzogMCAxMHB4IDIwcHggcmdiYSgwLCAwLCAwLCAwLjIpOyAvKiAoeCwgeSwgYmx1ciwgY29sb3IpICovXFxufVxcblxcbi5hY2NvdW50LWFjdGlvbiAuYnRuOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi5hY2NvdW50LWFjdGlvbiAuYnRuOmFjdGl2ZSB7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xcHgpOyAvKiBnb2VzIHVwIDEgcHggKi9cXG4gIGJveC1zaGFkb3c6IDAgNXB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjIpOyAvKiAoeCwgeSwgYmx1ciwgY29sb3IpICovXFxufVxcblxcbi5hY2NvdW50LXJlZ2lzdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmFjY291bnQtcmVnaXN0ZXIgYSB7XFxuICBjb2xvcjogdHVycXVvaXNlO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uYWNjb3VudC1yZWdpc3RlciBhOmFjdGl2ZSB7XFxuICBjb2xvcjogdHVycXVvaXNlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWEsRUFBRSxlQUFlO0VBQzlCOzs7OzsyQ0FLOEI7RUFDOUIsc0JBQXNCLEVBQUUsNENBQTRDO0VBQ3BFLHdCQUF3QixFQUFFLG9DQUFvQztFQUM5RCxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUSxFQUFFLHdCQUF3QjtFQUNsQyxTQUFTLEVBQUUsd0JBQXdCO0VBQ25DLGdDQUFnQyxFQUFFLHdDQUF3QztFQUMxRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gseUJBQXlCOztFQUV6QiwyQkFBMkIsRUFBRSwrQkFBK0I7RUFDNUQsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsb0JBQW9CO0VBQ3BCLGdCQUFnQjs7RUFFaEIsMEJBQTBCO0VBQzFCLHNCQUFzQjtFQUN0QixtQ0FBbUM7QUFDckM7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixxQkFBcUI7RUFDckIsZ0JBQWdCOztFQUVoQixrQ0FBa0M7QUFDcEM7O0FBRUE7RUFDRTtJQUNFLG9CQUFvQjtFQUN0QjtBQUNGOztBQUVBLGtFQUFrRTtBQUNsRTtFQUNFO0lBQ0UsVUFBVTtJQUNWOztLQUVDLEVBQUUsb0RBQW9EO0VBQ3pEOztFQUVBO0lBQ0UsMkJBQTJCO0VBQzdCOztFQUVBO0lBQ0UsVUFBVTtJQUNWLHVCQUF1QjtFQUN6QjtBQUNGOztBQUVBO0VBQ0U7SUFDRSxVQUFVO0lBQ1Y7O0tBRUMsRUFBRSxvREFBb0Q7RUFDekQ7O0VBRUE7SUFDRSw0QkFBNEI7RUFDOUI7O0VBRUE7SUFDRSxVQUFVO0lBQ1YsdUJBQXVCO0VBQ3pCO0FBQ0Y7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtFQUNsQiw2REFBNkQ7RUFDN0QsZ0JBQWdCO0VBQ2hCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFNBQVM7RUFDVCxTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLDZEQUE2RDtFQUM3RCxTQUFTO0FBQ1g7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsY0FBYztFQUNkLGlCQUFpQjtFQUNqQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIseUJBQXlCO0VBQ3pCLDhDQUE4QztFQUM5QyxjQUFjO0VBQ2QsWUFBWTtFQUNaLGVBQWU7RUFDZixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsNkJBQTZCO0VBQzdCLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLDZDQUE2QztFQUM3QyxTQUFTO0VBQ1QsV0FBVztFQUNYLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIscUJBQXFCO0VBQ3JCLG1CQUFtQjtFQUNuQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtBQUNWOztBQUVBOztFQUVFLG9CQUFvQixFQUFFLGtCQUFrQjtFQUN4QyxrQkFBa0I7RUFDbEIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsMkJBQTJCLEVBQUUsZ0JBQWdCO0VBQzdDLDBDQUEwQyxFQUFFLHdCQUF3QjtBQUN0RTs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGFBQWE7RUFDYiwyQkFBMkIsRUFBRSxpQkFBaUI7RUFDOUMseUNBQXlDLEVBQUUsd0JBQXdCO0FBQ3JFOztBQUVBO0VBQ0UsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5oZWFkZXIge1xcbiAgaGVpZ2h0OiAxMDB2aDsgLyogb3V0IG9mIDEwMCAqL1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxcbiAgICAgIHRvIHJpZ2h0LFxcbiAgICAgIHJnYmEoNjcsIDQ4LCAxMzMsIDAuOCksXFxuICAgICAgcmdiYSg1OCwgNjUsIDYyLCAwLjY5MilcXG4gICAgKSxcXG4gICAgdXJsKFxcXCIuLi9pbWFnZXMvY2hpY2Fnby5qcGdcXFwiKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7IC8qIHRyeSB0byBmaXQgd2lkdGggb2Ygdmlld3BvcnQgb3IgZWxlbWVudCAqL1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogdG9wOyAvKiB0b3Agb2YgaW1nIHN0YXlzIGF0b3AgY29udGFpbmVyICovXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi50ZXh0LWJveCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTsgLyogZnJvbSBwYXJlbnQgZWxlbWVudCAqL1xcbiAgbGVmdDogNTAlOyAvKiBmcm9tIHBhcmVudCBlbGVtZW50ICovXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgLyogZnJvbSBpdHNlbGYgKHRvcC1sZWZ0IGNvcm5lciBlbnRyeSkgKi9cXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmhlYWRpbmctcHJpbWFyeSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuXFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47IC8qIGZpeGVzIHNoYWtpbmcgaW4gYW5pbWF0aW9uICovXFxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbn1cXG5cXG4uaGVhZGluZy1wcmltYXJ5LW1haW4ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDUwcHg7XFxuICBmb250LXdlaWdodDogODAwO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDIwcHg7XFxuICBsaW5lLWhlaWdodDogMS4zO1xcblxcbiAgYW5pbWF0aW9uLW5hbWU6IG1vdmVJbkxlZnQ7XFxuICBhbmltYXRpb24tZHVyYXRpb246IDJzO1xcbiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XFxufVxcblxcbi5oZWFkaW5nLXByaW1hcnktc3ViIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxldHRlci1zcGFjaW5nOiA3LjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjM7XFxuXFxuICBhbmltYXRpb246IG1vdmVJblJpZ2h0IDJzIGVhc2Utb3V0O1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLmhlYWRpbmctcHJpbWFyeS1tYWluIHtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDEwcHg7XFxuICB9XFxufVxcblxcbi8qIGl0J3MgYmVzdCB0byBvbmx5IGFuaW1hdGUgdHdvIHByb3BlcnRpZXMgKG9wYWNpdHksIHRyYW5zZm9ybSkgKi9cXG5Aa2V5ZnJhbWVzIG1vdmVJbkxlZnQge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoXFxuICAgICAgLTEwMHB4XFxuICAgICk7IC8qICh4LCB5KSAtPiBuZWcgZ29lcyBsZWZ0L2Rvd24sIHBvcyBnb2VzIHJpZ2h0L3VwICovXFxuICB9XFxuXFxuICA4MCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTBweCk7XFxuICB9XFxuXFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgbW92ZUluUmlnaHQge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoXFxuICAgICAgMTAwcHhcXG4gICAgKTsgLyogKHgsIHkpIC0+IG5lZyBnb2VzIGxlZnQvdXAsIHBvcyBnb2VzIHJpZ2h0L2Rvd24gKi9cXG4gIH1cXG5cXG4gIDgwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTBweCk7XFxuICB9XFxuXFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCk7XFxuICB9XFxufVxcblxcbmZvcm0ge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZvbnQ6IDE0cHgvMS40IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgd2lkdGg6IDI0MHB4O1xcbn1cXG5cXG5maWVsZHNldCB7XFxuICBib3JkZXI6IDA7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5pbnB1dCB7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBmb250OiAxNHB4LzEuNCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uYWNjb3VudC1pbmZvIHtcXG4gIHBhZGRpbmc6IDIwcHggMjBweCAwIDIwcHg7XFxufVxcblxcbi5hY2NvdW50LWluZm8gbGFiZWwge1xcbiAgY29sb3I6ICMzOTU4NzA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG59XFxuXFxuLmFjY291bnQtaW5mbyBpbnB1dCB7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2M2YzdjYztcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBjb2xvcjogIzYzNjQ2NjtcXG4gIHBhZGRpbmc6IDZweDtcXG4gIG1hcmdpbi10b3A6IDZweDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uYWNjb3VudC1hY3Rpb24ge1xcbiAgYmFja2dyb3VuZDogI2YwZjBmMjtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYzZjN2NjO1xcbiAgcGFkZGluZzogM3B4IDIwcHggMTBweCAyMHB4O1xcbn1cXG5cXG4uYWNjb3VudC1hY3Rpb24gLmJ0biB7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoIzQ5NzA4ZiwgIzI5M2Y1MCk7XFxuICBib3JkZXI6IDA7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogOHB4IDE2cHg7XFxufVxcblxcbi5hY2NvdW50LXN1cHBvcnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbn1cXG5cXG4uYWNjb3VudC1zdXBwb3J0IGxhYmVsIHtcXG4gIGNvbG9yOiAjN2M3YzgwO1xcbn1cXG5cXG4uYWNjb3VudC1zdXBwb3J0IGlucHV0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogM3B4O1xcbn1cXG5cXG4uYWNjb3VudC1zdXBwb3J0IGEge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAycHg7XFxufVxcblxcbi5hY2NvdW50LWFjdGlvbiAuYnRuOmxpbmssXFxuLmFjY291bnQtYWN0aW9uIC5idG46dmlzaXRlZCB7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4yczsgLyogaW5pdGlhbCBzdGF0ZSAqL1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLmFjY291bnQtYWN0aW9uIC5idG46aG92ZXIge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zcHgpOyAvKiBnb2VzIHVwIDNweCAqL1xcbiAgYm94LXNoYWRvdzogMCAxMHB4IDIwcHggcmdiYSgwLCAwLCAwLCAwLjIpOyAvKiAoeCwgeSwgYmx1ciwgY29sb3IpICovXFxufVxcblxcbi5hY2NvdW50LWFjdGlvbiAuYnRuOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi5hY2NvdW50LWFjdGlvbiAuYnRuOmFjdGl2ZSB7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xcHgpOyAvKiBnb2VzIHVwIDEgcHggKi9cXG4gIGJveC1zaGFkb3c6IDAgNXB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjIpOyAvKiAoeCwgeSwgYmx1ciwgY29sb3IpICovXFxufVxcblxcbi5hY2NvdW50LXJlZ2lzdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmFjY291bnQtcmVnaXN0ZXIgYSB7XFxuICBjb2xvcjogdHVycXVvaXNlO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uYWNjb3VudC1yZWdpc3RlciBhOmFjdGl2ZSB7XFxuICBjb2xvcjogdHVycXVvaXNlO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIGZyb20gXCIuLi9mb250cy9PcGVuU2Fucy1SZWd1bGFyLnR0ZlwiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJPcGVuIFNhbnNcXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIGZvcm1hdChcXFwidHRmXFxcIik7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbn1cXG5cXG4qIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiBib3JkZXJzIGFuZCBwYWRkaW5ncyBubyBsb25nZXIgYWRkIHRvIHRvdGFsIHdpZHRoL2hlaWdodCAqL1xcbn1cXG5cXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgc2Fucy1zZXJpZjsgLyogaW5oZXJpdGVkIGJ5IGFsbCBjaGlsZCBlbGVtZW50cyBvZiBib2R5ICovXFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNztcXG4gIGNvbG9yOiAjNzc3O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3Jlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHdCQUF3QjtFQUN4QiwwREFBdUQ7RUFDdkQsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0VBQ1Ysc0JBQXNCLEVBQUUsNkRBQTZEO0FBQ3ZGOztBQUVBO0VBQ0Usb0NBQW9DLEVBQUUsNENBQTRDO0VBQ2xGLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLFdBQVc7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIjtcXG4gIHNyYzogdXJsKFxcXCIuLi9mb250cy9PcGVuU2Fucy1SZWd1bGFyLnR0ZlxcXCIpIGZvcm1hdChcXFwidHRmXFxcIik7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbn1cXG5cXG4qIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiBib3JkZXJzIGFuZCBwYWRkaW5ncyBubyBsb25nZXIgYWRkIHRvIHRvdGFsIHdpZHRoL2hlaWdodCAqL1xcbn1cXG5cXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgc2Fucy1zZXJpZjsgLyogaW5oZXJpdGVkIGJ5IGFsbCBjaGlsZCBlbGVtZW50cyBvZiBib2R5ICovXFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNztcXG4gIGNvbG9yOiAjNzc3O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5pZGIgPSB7fSkpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gdG9BcnJheShhcnIpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciByZXF1ZXN0O1xuICAgIHZhciBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0ID0gb2JqW21ldGhvZF0uYXBwbHkob2JqLCBhcmdzKTtcbiAgICAgIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH0pO1xuXG4gICAgcC5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKSB7XG4gICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncyk7XG4gICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIHAucmVxdWVzdCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVByb3BlcnRpZXMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJveHlDbGFzcy5wcm90b3R5cGUsIHByb3AsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1t0YXJnZXRQcm9wXVtwcm9wXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICB0aGlzW3RhcmdldFByb3BdW3Byb3BdID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5UmVxdWVzdE1ldGhvZHMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgQ29uc3RydWN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgICBQcm94eUNsYXNzLnByb3RvdHlwZVtwcm9wXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdENhbGwodGhpc1t0YXJnZXRQcm9wXSwgcHJvcCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eU1ldGhvZHMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgQ29uc3RydWN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgICBQcm94eUNsYXNzLnByb3RvdHlwZVtwcm9wXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YXJnZXRQcm9wXVtwcm9wXS5hcHBseSh0aGlzW3RhcmdldFByb3BdLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgQ29uc3RydWN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgICBQcm94eUNsYXNzLnByb3RvdHlwZVtwcm9wXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwodGhpc1t0YXJnZXRQcm9wXSwgcHJvcCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBJbmRleChpbmRleCkge1xuICAgIHRoaXMuX2luZGV4ID0gaW5kZXg7XG4gIH1cblxuICBwcm94eVByb3BlcnRpZXMoSW5kZXgsICdfaW5kZXgnLCBbXG4gICAgJ25hbWUnLFxuICAgICdrZXlQYXRoJyxcbiAgICAnbXVsdGlFbnRyeScsXG4gICAgJ3VuaXF1ZSdcbiAgXSk7XG5cbiAgcHJveHlSZXF1ZXN0TWV0aG9kcyhJbmRleCwgJ19pbmRleCcsIElEQkluZGV4LCBbXG4gICAgJ2dldCcsXG4gICAgJ2dldEtleScsXG4gICAgJ2dldEFsbCcsXG4gICAgJ2dldEFsbEtleXMnLFxuICAgICdjb3VudCdcbiAgXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhJbmRleCwgJ19pbmRleCcsIElEQkluZGV4LCBbXG4gICAgJ29wZW5DdXJzb3InLFxuICAgICdvcGVuS2V5Q3Vyc29yJ1xuICBdKTtcblxuICBmdW5jdGlvbiBDdXJzb3IoY3Vyc29yLCByZXF1ZXN0KSB7XG4gICAgdGhpcy5fY3Vyc29yID0gY3Vyc29yO1xuICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0O1xuICB9XG5cbiAgcHJveHlQcm9wZXJ0aWVzKEN1cnNvciwgJ19jdXJzb3InLCBbXG4gICAgJ2RpcmVjdGlvbicsXG4gICAgJ2tleScsXG4gICAgJ3ByaW1hcnlLZXknLFxuICAgICd2YWx1ZSdcbiAgXSk7XG5cbiAgcHJveHlSZXF1ZXN0TWV0aG9kcyhDdXJzb3IsICdfY3Vyc29yJywgSURCQ3Vyc29yLCBbXG4gICAgJ3VwZGF0ZScsXG4gICAgJ2RlbGV0ZSdcbiAgXSk7XG5cbiAgLy8gcHJveHkgJ25leHQnIG1ldGhvZHNcbiAgWydhZHZhbmNlJywgJ2NvbnRpbnVlJywgJ2NvbnRpbnVlUHJpbWFyeUtleSddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgIGlmICghKG1ldGhvZE5hbWUgaW4gSURCQ3Vyc29yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICBDdXJzb3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3Vyc29yID0gdGhpcztcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGN1cnNvci5fY3Vyc29yW21ldGhvZE5hbWVdLmFwcGx5KGN1cnNvci5fY3Vyc29yLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QoY3Vyc29yLl9yZXF1ZXN0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgICAgICAgIHJldHVybiBuZXcgQ3Vyc29yKHZhbHVlLCBjdXJzb3IuX3JlcXVlc3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIE9iamVjdFN0b3JlKHN0b3JlKSB7XG4gICAgdGhpcy5fc3RvcmUgPSBzdG9yZTtcbiAgfVxuXG4gIE9iamVjdFN0b3JlLnByb3RvdHlwZS5jcmVhdGVJbmRleCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgSW5kZXgodGhpcy5fc3RvcmUuY3JlYXRlSW5kZXguYXBwbHkodGhpcy5fc3RvcmUsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIE9iamVjdFN0b3JlLnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgSW5kZXgodGhpcy5fc3RvcmUuaW5kZXguYXBwbHkodGhpcy5fc3RvcmUsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIFtcbiAgICAnbmFtZScsXG4gICAgJ2tleVBhdGgnLFxuICAgICdpbmRleE5hbWVzJyxcbiAgICAnYXV0b0luY3JlbWVudCdcbiAgXSk7XG5cbiAgcHJveHlSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ3B1dCcsXG4gICAgJ2FkZCcsXG4gICAgJ2RlbGV0ZScsXG4gICAgJ2NsZWFyJyxcbiAgICAnZ2V0JyxcbiAgICAnZ2V0QWxsJyxcbiAgICAnZ2V0S2V5JyxcbiAgICAnZ2V0QWxsS2V5cycsXG4gICAgJ2NvdW50J1xuICBdKTtcblxuICBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAnb3BlbkN1cnNvcicsXG4gICAgJ29wZW5LZXlDdXJzb3InXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ2RlbGV0ZUluZGV4J1xuICBdKTtcblxuICBmdW5jdGlvbiBUcmFuc2FjdGlvbihpZGJUcmFuc2FjdGlvbikge1xuICAgIHRoaXMuX3R4ID0gaWRiVHJhbnNhY3Rpb247XG4gICAgdGhpcy5jb21wbGV0ZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QoaWRiVHJhbnNhY3Rpb24uZXJyb3IpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUub2JqZWN0U3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdFN0b3JlKHRoaXMuX3R4Lm9iamVjdFN0b3JlLmFwcGx5KHRoaXMuX3R4LCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoVHJhbnNhY3Rpb24sICdfdHgnLCBbXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnLFxuICAgICdtb2RlJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoVHJhbnNhY3Rpb24sICdfdHgnLCBJREJUcmFuc2FjdGlvbiwgW1xuICAgICdhYm9ydCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVXBncmFkZURCKGRiLCBvbGRWZXJzaW9uLCB0cmFuc2FjdGlvbikge1xuICAgIHRoaXMuX2RiID0gZGI7XG4gICAgdGhpcy5vbGRWZXJzaW9uID0gb2xkVmVyc2lvbjtcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgfVxuXG4gIFVwZ3JhZGVEQi5wcm90b3R5cGUuY3JlYXRlT2JqZWN0U3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdFN0b3JlKHRoaXMuX2RiLmNyZWF0ZU9iamVjdFN0b3JlLmFwcGx5KHRoaXMuX2RiLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoVXBncmFkZURCLCAnX2RiJywgW1xuICAgICduYW1lJyxcbiAgICAndmVyc2lvbicsXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhVcGdyYWRlREIsICdfZGInLCBJREJEYXRhYmFzZSwgW1xuICAgICdkZWxldGVPYmplY3RTdG9yZScsXG4gICAgJ2Nsb3NlJ1xuICBdKTtcblxuICBmdW5jdGlvbiBEQihkYikge1xuICAgIHRoaXMuX2RiID0gZGI7XG4gIH1cblxuICBEQi5wcm90b3R5cGUudHJhbnNhY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKHRoaXMuX2RiLnRyYW5zYWN0aW9uLmFwcGx5KHRoaXMuX2RiLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoREIsICdfZGInLCBbXG4gICAgJ25hbWUnLFxuICAgICd2ZXJzaW9uJyxcbiAgICAnb2JqZWN0U3RvcmVOYW1lcydcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKERCLCAnX2RiJywgSURCRGF0YWJhc2UsIFtcbiAgICAnY2xvc2UnXG4gIF0pO1xuXG4gIC8vIEFkZCBjdXJzb3IgaXRlcmF0b3JzXG4gIC8vIFRPRE86IHJlbW92ZSB0aGlzIG9uY2UgYnJvd3NlcnMgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGggcHJvbWlzZXNcbiAgWydvcGVuQ3Vyc29yJywgJ29wZW5LZXlDdXJzb3InXS5mb3JFYWNoKGZ1bmN0aW9uKGZ1bmNOYW1lKSB7XG4gICAgW09iamVjdFN0b3JlLCBJbmRleF0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xuICAgICAgLy8gRG9uJ3QgY3JlYXRlIGl0ZXJhdGVLZXlDdXJzb3IgaWYgb3BlbktleUN1cnNvciBkb2Vzbid0IGV4aXN0LlxuICAgICAgaWYgKCEoZnVuY05hbWUgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGVbZnVuY05hbWUucmVwbGFjZSgnb3BlbicsICdpdGVyYXRlJyldID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBuYXRpdmVPYmplY3QgPSB0aGlzLl9zdG9yZSB8fCB0aGlzLl9pbmRleDtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuYXRpdmVPYmplY3RbZnVuY05hbWVdLmFwcGx5KG5hdGl2ZU9iamVjdCwgYXJncy5zbGljZSgwLCAtMSkpO1xuICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHBvbHlmaWxsIGdldEFsbFxuICBbSW5kZXgsIE9iamVjdFN0b3JlXS5mb3JFYWNoKGZ1bmN0aW9uKENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwpIHJldHVybjtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24ocXVlcnksIGNvdW50KSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgIGluc3RhbmNlLml0ZXJhdGVDdXJzb3IocXVlcnksIGZ1bmN0aW9uKGN1cnNvcikge1xuICAgICAgICAgIGlmICghY3Vyc29yKSB7XG4gICAgICAgICAgICByZXNvbHZlKGl0ZW1zKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbXMucHVzaChjdXJzb3IudmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGNvdW50ICE9PSB1bmRlZmluZWQgJiYgaXRlbXMubGVuZ3RoID09IGNvdW50KSB7XG4gICAgICAgICAgICByZXNvbHZlKGl0ZW1zKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gb3BlbkRiKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaykge1xuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwoaW5kZXhlZERCLCAnb3BlbicsIFtuYW1lLCB2ZXJzaW9uXSk7XG4gICAgdmFyIHJlcXVlc3QgPSBwLnJlcXVlc3Q7XG5cbiAgICBpZiAocmVxdWVzdCkge1xuICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAodXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICAgICAgdXBncmFkZUNhbGxiYWNrKG5ldyBVcGdyYWRlREIocmVxdWVzdC5yZXN1bHQsIGV2ZW50Lm9sZFZlcnNpb24sIHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uKGRiKSB7XG4gICAgICByZXR1cm4gbmV3IERCKGRiKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZURiKG5hbWUpIHtcbiAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdENhbGwoaW5kZXhlZERCLCAnZGVsZXRlRGF0YWJhc2UnLCBbbmFtZV0pO1xuICB9XG5cbiAgZXhwb3J0cy5vcGVuRGIgPSBvcGVuRGI7XG4gIGV4cG9ydHMuZGVsZXRlRGIgPSBkZWxldGVEYjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gbW9kdWxlWydkZWZhdWx0J10gOlxuXHRcdCgpID0+IG1vZHVsZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gJ3RzbGliJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cclxuICovXHJcbnZhciBDT05TVEFOVFMgPSB7XHJcbiAgICAvKipcclxuICAgICAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyB0aGUgY2xpZW50IE5vZGUuanMgU0RLLlxyXG4gICAgICovXHJcbiAgICBOT0RFX0NMSUVOVDogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyB0aGUgQWRtaW4gTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQURNSU46IGZhbHNlLFxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlYmFzZSBTREsgVmVyc2lvblxyXG4gICAgICovXHJcbiAgICBTREtfVkVSU0lPTjogJyR7SlNDT1JFX1ZFUlNJT059J1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBwcm92aWRlZCBhc3NlcnRpb24gaXMgZmFsc3lcclxuICovXHJcbnZhciBhc3NlcnQgPSBmdW5jdGlvbiAoYXNzZXJ0aW9uLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoIWFzc2VydGlvbikge1xyXG4gICAgICAgIHRocm93IGFzc2VydGlvbkVycm9yKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBFcnJvciBvYmplY3Qgc3VpdGFibGUgZm9yIHRocm93aW5nLlxyXG4gKi9cclxudmFyIGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcclxuICAgICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xyXG4gICAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xyXG4gICAgICAgIG1lc3NhZ2UpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgc3RyaW5nVG9CeXRlQXJyYXkgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAvLyBUT0RPKHVzZXIpOiBVc2UgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBpZi93aGVuIGF2YWlsYWJsZVxyXG4gICAgdmFyIG91dCA9IFtdO1xyXG4gICAgdmFyIHAgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiZcclxuICAgICAgICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZjMDApID09PSAweGRjMDApIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxyXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXHJcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyBjaGFyYWN0ZXJzLlxyXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXHJcbiAqL1xyXG52YXIgYnl0ZUFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcclxuICAgIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXHJcbiAgICB2YXIgb3V0ID0gW107XHJcbiAgICB2YXIgcG9zID0gMCwgYyA9IDA7XHJcbiAgICB3aGlsZSAocG9zIDwgYnl0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGMxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xyXG4gICAgICAgICAgICB2YXIgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMzEpIDw8IDYpIHwgKGMyICYgNjMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYzEgPiAyMzkgJiYgYzEgPCAzNjUpIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgdmFyIGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICB2YXIgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIHZhciBjNCA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgdmFyIHUgPSAoKChjMSAmIDcpIDw8IDE4KSB8ICgoYzIgJiA2MykgPDwgMTIpIHwgKChjMyAmIDYzKSA8PCA2KSB8IChjNCAmIDYzKSkgLVxyXG4gICAgICAgICAgICAgICAgMHgxMDAwMDtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZDgwMCArICh1ID4+IDEwKSk7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGRjMDAgKyAodSAmIDEwMjMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgdmFyIGMzID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMSAmIDE1KSA8PCAxMikgfCAoKGMyICYgNjMpIDw8IDYpIHwgKGMzICYgNjMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xyXG59O1xyXG4vLyBXZSBkZWZpbmUgaXQgYXMgYW4gb2JqZWN0IGxpdGVyYWwgaW5zdGVhZCBvZiBhIGNsYXNzIGJlY2F1c2UgYSBjbGFzcyBjb21waWxlZCBkb3duIHRvIGVzNSBjYW4ndFxyXG4vLyBiZSB0cmVlc2hha2VkLiBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvMTY5MVxyXG4vLyBTdGF0aWMgbG9va3VwIG1hcHMsIGxhemlseSBwb3B1bGF0ZWQgYnkgaW5pdF8oKVxyXG52YXIgYmFzZTY0ID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGJ5dGVzIHRvIGNoYXJhY3RlcnMuXHJcbiAgICAgKi9cclxuICAgIGJ5dGVUb0NoYXJNYXBfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIGNoYXJUb0J5dGVNYXBfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGJ5dGVzIHRvIHdlYnNhZmUgY2hhcmFjdGVycy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGJ5dGVUb0NoYXJNYXBXZWJTYWZlXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyB3ZWJzYWZlIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LCBzaGFyZWQgYmV0d2VlblxyXG4gICAgICogRU5DT0RFRF9WQUxTIGFuZCBFTkNPREVEX1ZBTFNfV0VCU0FGRVxyXG4gICAgICovXHJcbiAgICBFTkNPREVEX1ZBTFNfQkFTRTogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJyArICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicgKyAnMDEyMzQ1Njc4OScsXHJcbiAgICAvKipcclxuICAgICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LiBWYWx1ZSA2NCAoPSkgaXMgc3BlY2lhbDsgaXQgbWVhbnMgXCJub3RoaW5nLlwiXHJcbiAgICAgKi9cclxuICAgIGdldCBFTkNPREVEX1ZBTFMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnKy89JztcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIE91ciB3ZWJzYWZlIGFscGhhYmV0LlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTX1dFQlNBRkUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnLV8uJztcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhpcyBicm93c2VyIHN1cHBvcnRzIHRoZSBhdG9iIGFuZCBidG9hIGZ1bmN0aW9ucy4gVGhpcyBleHRlbnNpb25cclxuICAgICAqIHN0YXJ0ZWQgYXQgTW96aWxsYSBidXQgaXMgbm93IGltcGxlbWVudGVkIGJ5IG1hbnkgYnJvd3NlcnMuIFdlIHVzZSB0aGVcclxuICAgICAqIEFTU1VNRV8qIHZhcmlhYmxlcyB0byBhdm9pZCBwdWxsaW5nIGluIHRoZSBmdWxsIHVzZXJhZ2VudCBkZXRlY3Rpb24gbGlicmFyeVxyXG4gICAgICogYnV0IHN0aWxsIGFsbG93aW5nIHRoZSBzdGFuZGFyZCBwZXItYnJvd3NlciBjb21waWxhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBIQVNfTkFUSVZFX1NVUFBPUlQ6IHR5cGVvZiBhdG9iID09PSAnZnVuY3Rpb24nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGFuIGFycmF5IG9mIGJ5dGVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBbiBhcnJheSBvZiBieXRlcyAobnVtYmVycyB3aXRoXHJcbiAgICAgKiAgICAgdmFsdWUgaW4gWzAsIDI1NV0pIHRvIGVuY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIEJvb2xlYW4gaW5kaWNhdGluZyB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVCeXRlQXJyYXk6IGZ1bmN0aW9uIChpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2VuY29kZUJ5dGVBcnJheSB0YWtlcyBhbiBhcnJheSBhcyBhIHBhcmFtZXRlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgdmFyIGJ5dGVUb0NoYXJNYXAgPSB3ZWJTYWZlXHJcbiAgICAgICAgICAgID8gdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9cclxuICAgICAgICAgICAgOiB0aGlzLmJ5dGVUb0NoYXJNYXBfO1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIHZhciBieXRlMSA9IGlucHV0W2ldO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUyID0gaSArIDEgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTMgPSBpICsgMiA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGUzID0gaGF2ZUJ5dGUzID8gaW5wdXRbaSArIDJdIDogMDtcclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUyID0gKChieXRlMSAmIDB4MDMpIDw8IDQpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICB2YXIgb3V0Qnl0ZTMgPSAoKGJ5dGUyICYgMHgwZikgPDwgMikgfCAoYnl0ZTMgPj4gNik7XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlNCA9IGJ5dGUzICYgMHgzZjtcclxuICAgICAgICAgICAgaWYgKCFoYXZlQnl0ZTMpIHtcclxuICAgICAgICAgICAgICAgIG91dEJ5dGU0ID0gNjQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhdmVCeXRlMikge1xyXG4gICAgICAgICAgICAgICAgICAgIG91dEJ5dGUzID0gNjQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3V0cHV0LnB1c2goYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMV0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTJdLCBieXRlVG9DaGFyTWFwW291dEJ5dGUzXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlNF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQSBzdHJpbmcgdG8gZW5jb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgSWYgdHJ1ZSwgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlU3RyaW5nOiBmdW5jdGlvbiAoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVCeXRlQXJyYXkoc3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQpLCB3ZWJTYWZlKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nOiBmdW5jdGlvbiAoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxyXG4gICAgICogYnl0ZXMuICBJZiB0aGUgZW5jb2RlciBkaWQgbm90IGFwcGx5IHBhZGRpbmcsIHRoZSBpbnB1dCBsZW5ndGggbWF5IG5vdFxyXG4gICAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGxhc3QgZ3JvdXAgd2lsbCBoYXZlIGZld2VyIHRoYW4gNCBjaGFyYWN0ZXJzLCBhbmRcclxuICAgICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXHJcbiAgICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXk6IGZ1bmN0aW9uIChpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICB2YXIgY2hhclRvQnl0ZU1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuY2hhclRvQnl0ZU1hcF87XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOykge1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTEgPSBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKyspXTtcclxuICAgICAgICAgICAgdmFyIGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlMiA9IGhhdmVCeXRlMiA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDA7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgdmFyIGhhdmVCeXRlMyA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTQgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTQgPSBoYXZlQnl0ZTQgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZTEgPT0gbnVsbCB8fCBieXRlMiA9PSBudWxsIHx8IGJ5dGUzID09IG51bGwgfHwgYnl0ZTQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgb3V0Qnl0ZTEgPSAoYnl0ZTEgPDwgMikgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUxKTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUzICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvdXRCeXRlMyA9ICgoYnl0ZTMgPDwgNikgJiAweGMwKSB8IGJ5dGU0O1xyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogTGF6eSBzdGF0aWMgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24uIENhbGxlZCBiZWZvcmVcclxuICAgICAqIGFjY2Vzc2luZyBhbnkgb2YgdGhlIHN0YXRpYyBtYXAgdmFyaWFibGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdF86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFVSTC1zYWZlIGJhc2U2NCBlbmNvZGluZ1xyXG4gKi9cclxudmFyIGJhc2U2NEVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheShzdHIpO1xyXG4gICAgcmV0dXJuIGJhc2U2NC5lbmNvZGVCeXRlQXJyYXkodXRmOEJ5dGVzLCB0cnVlKTtcclxufTtcclxuLyoqXHJcbiAqIFVSTC1zYWZlIGJhc2U2NCBkZWNvZGluZ1xyXG4gKlxyXG4gKiBOT1RFOiBETyBOT1QgdXNlIHRoZSBnbG9iYWwgYXRvYigpIGZ1bmN0aW9uIC0gaXQgZG9lcyBOT1Qgc3VwcG9ydCB0aGVcclxuICogYmFzZTY0VXJsIHZhcmlhbnQgZW5jb2RpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHIgVG8gYmUgZGVjb2RlZFxyXG4gKiBAcmV0dXJuIERlY29kZWQgcmVzdWx0LCBpZiBwb3NzaWJsZVxyXG4gKi9cclxudmFyIGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGVTdHJpbmcoc3RyLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvIGEgZGVlcC1jb3B5IG9mIGJhc2ljIEphdmFTY3JpcHQgT2JqZWN0cyBvciBBcnJheXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwQ29weSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbn1cclxuLyoqXHJcbiAqIENvcHkgcHJvcGVydGllcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgKHJlY3Vyc2l2ZWx5IGFsbG93cyBleHRlbnNpb25cclxuICogb2YgT2JqZWN0cyBhbmQgQXJyYXlzKS4gIFNjYWxhciB2YWx1ZXMgaW4gdGhlIHRhcmdldCBhcmUgb3Zlci13cml0dGVuLlxyXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXHJcbiAqIChhbmQgcmV0dXJuZWQpLlxyXG4gKlxyXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cclxuICogdGhhdCBuYW1lc3BhY2UtIGxpa2UgZGljdGlvbmFyaWVzIGFyZSBtZXJnZWQuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXHJcbiAqIHRoZSBzb3VyY2UgT2JqZWN0IGFyZSBjb3BpZWQgb250byBpdCBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24uXHJcbiAqXHJcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcclxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChzb3VyY2UuY29uc3RydWN0b3IpIHtcclxuICAgICAgICBjYXNlIERhdGU6XHJcbiAgICAgICAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXHJcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcclxuICAgICAgICAgICAgdmFyIGRhdGVWYWx1ZSA9IHNvdXJjZTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGVWYWx1ZS5nZXRUaW1lKCkpO1xyXG4gICAgICAgIGNhc2UgT2JqZWN0OlxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQXJyYXk6XHJcbiAgICAgICAgICAgIC8vIEFsd2F5cyBjb3B5IHRoZSBhcnJheSBzb3VyY2UgYW5kIG92ZXJ3cml0ZSB0aGUgdGFyZ2V0LlxyXG4gICAgICAgICAgICB0YXJnZXQgPSBbXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgLy8gTm90IGEgcGxhaW4gT2JqZWN0IC0gdHJlYXQgaXQgYXMgYSBzY2FsYXIuXHJcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xyXG4gICAgICAgIC8vIHVzZSBpc1ZhbGlkS2V5IHRvIGd1YXJkIGFnYWluc3QgcHJvdG90eXBlIHBvbGx1dGlvbi4gU2VlIGh0dHBzOi8vc255ay5pby92dWxuL1NOWUstSlMtTE9EQVNILTQ1MDIwMlxyXG4gICAgICAgIGlmICghc291cmNlLmhhc093blByb3BlcnR5KHByb3ApIHx8ICFpc1ZhbGlkS2V5KHByb3ApKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXRbcHJvcF0gPSBkZWVwRXh0ZW5kKHRhcmdldFtwcm9wXSwgc291cmNlW3Byb3BdKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcclxuICAgIHJldHVybiBrZXkgIT09ICdfX3Byb3RvX18nO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBEZWZlcnJlZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlZmVycmVkKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIF90aGlzLnJlamVjdCA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT3VyIEFQSSBpbnRlcm5hbHMgYXJlIG5vdCBwcm9taXNlaWZpZWQgYW5kIGNhbm5vdCBiZWNhdXNlIG91ciBjYWxsYmFjayBBUElzIGhhdmUgc3VidGxlIGV4cGVjdGF0aW9ucyBhcm91bmRcclxuICAgICAqIGludm9raW5nIHByb21pc2VzIGlubGluZSwgd2hpY2ggUHJvbWlzZXMgYXJlIGZvcmJpZGRlbiB0byBkby4gVGhpcyBtZXRob2QgYWNjZXB0cyBhbiBvcHRpb25hbCBub2RlLXN0eWxlIGNhbGxiYWNrXHJcbiAgICAgKiBhbmQgcmV0dXJucyBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgd2hpY2ggd2lsbCByZXNvbHZlIG9yIHJlamVjdCB0aGUgRGVmZXJyZWQncyBwcm9taXNlLlxyXG4gICAgICovXHJcbiAgICBEZWZlcnJlZC5wcm90b3R5cGUud3JhcENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBdHRhY2hpbmcgbm9vcCBoYW5kbGVyIGp1c3QgaW4gY2FzZSBkZXZlbG9wZXIgd2Fzbid0IGV4cGVjdGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gcHJvbWlzZXNcclxuICAgICAgICAgICAgICAgIF90aGlzLnByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICAgICAgICAgIC8vIFNvbWUgb2Ygb3VyIGNhbGxiYWNrcyBkb24ndCBleHBlY3QgYSB2YWx1ZSBhbmQgb3VyIG93biB0ZXN0c1xyXG4gICAgICAgICAgICAgICAgLy8gYXNzZXJ0IHRoYXQgdGhlIHBhcmFtZXRlciBsZW5ndGggaXMgMVxyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWZlcnJlZDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgbmF2aWdhdG9yLnVzZXJBZ2VudCBzdHJpbmcgb3IgJycgaWYgaXQncyBub3QgZGVmaW5lZC5cclxuICogQHJldHVybiB1c2VyIGFnZW50IHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0VUEoKSB7XHJcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yWyd1c2VyQWdlbnQnXSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yWyd1c2VyQWdlbnQnXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRGV0ZWN0IENvcmRvdmEgLyBQaG9uZUdhcCAvIElvbmljIGZyYW1ld29ya3Mgb24gYSBtb2JpbGUgZGV2aWNlLlxyXG4gKlxyXG4gKiBEZWxpYmVyYXRlbHkgZG9lcyBub3QgcmVseSBvbiBjaGVja2luZyBgZmlsZTovL2AgVVJMcyAoYXMgdGhpcyBmYWlscyBQaG9uZUdhcFxyXG4gKiBpbiB0aGUgUmlwcGxlIGVtdWxhdG9yKSBub3IgQ29yZG92YSBgb25EZXZpY2VSZWFkeWAsIHdoaWNoIHdvdWxkIG5vcm1hbGx5XHJcbiAqIHdhaXQgZm9yIGEgY2FsbGJhY2suXHJcbiAqL1xyXG5mdW5jdGlvbiBpc01vYmlsZUNvcmRvdmEoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBTZXR0aW5nIHVwIGFuIGJyb2FkbHkgYXBwbGljYWJsZSBpbmRleCBzaWduYXR1cmUgZm9yIFdpbmRvd1xyXG4gICAgICAgIC8vIGp1c3QgdG8gZGVhbCB3aXRoIHRoaXMgY2FzZSB3b3VsZCBwcm9iYWJseSBiZSBhIGJhZCBpZGVhLlxyXG4gICAgICAgICEhKHdpbmRvd1snY29yZG92YSddIHx8IHdpbmRvd1sncGhvbmVnYXAnXSB8fCB3aW5kb3dbJ1Bob25lR2FwJ10pICYmXHJcbiAgICAgICAgL2lvc3xpcGhvbmV8aXBvZHxpcGFkfGFuZHJvaWR8YmxhY2tiZXJyeXxpZW1vYmlsZS9pLnRlc3QoZ2V0VUEoKSkpO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgTm9kZS5qcy5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIE5vZGUuanMgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQuXHJcbiAqL1xyXG4vLyBOb2RlIGRldGVjdGlvbiBsb2dpYyBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vaWxpYWthbi9kZXRlY3Qtbm9kZS9cclxuZnVuY3Rpb24gaXNOb2RlKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRGV0ZWN0IEJyb3dzZXIgRW52aXJvbm1lbnRcclxuICovXHJcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmO1xyXG59XHJcbmZ1bmN0aW9uIGlzQnJvd3NlckV4dGVuc2lvbigpIHtcclxuICAgIHZhciBydW50aW1lID0gdHlwZW9mIGNocm9tZSA9PT0gJ29iamVjdCdcclxuICAgICAgICA/IGNocm9tZS5ydW50aW1lXHJcbiAgICAgICAgOiB0eXBlb2YgYnJvd3NlciA9PT0gJ29iamVjdCdcclxuICAgICAgICAgICAgPyBicm93c2VyLnJ1bnRpbWVcclxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4gdHlwZW9mIHJ1bnRpbWUgPT09ICdvYmplY3QnICYmIHJ1bnRpbWUuaWQgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IFJlYWN0IE5hdGl2ZS5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGlzIGRldGVjdGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpIHtcclxuICAgIHJldHVybiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yWydwcm9kdWN0J10gPT09ICdSZWFjdE5hdGl2ZScpO1xyXG59XHJcbi8qKiBEZXRlY3RzIEVsZWN0cm9uIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzRWxlY3Ryb24oKSB7XHJcbiAgICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdFbGVjdHJvbi8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIEludGVybmV0IEV4cGxvcmVyLiAqL1xyXG5mdW5jdGlvbiBpc0lFKCkge1xyXG4gICAgdmFyIHVhID0gZ2V0VUEoKTtcclxuICAgIHJldHVybiB1YS5pbmRleE9mKCdNU0lFICcpID49IDAgfHwgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIFVuaXZlcnNhbCBXaW5kb3dzIFBsYXRmb3JtIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzVVdQKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignTVNBcHBIb3N0LycpID49IDA7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCB3aGV0aGVyIHRoZSBjdXJyZW50IFNESyBidWlsZCBpcyB0aGUgTm9kZSB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaXQncyB0aGUgTm9kZSBTREsgYnVpbGQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc05vZGVTZGsoKSB7XHJcbiAgICByZXR1cm4gQ09OU1RBTlRTLk5PREVfQ0xJRU5UID09PSB0cnVlIHx8IENPTlNUQU5UUy5OT0RFX0FETUlOID09PSB0cnVlO1xyXG59XHJcbi8qKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gU2FmYXJpLiAqL1xyXG5mdW5jdGlvbiBpc1NhZmFyaSgpIHtcclxuICAgIHJldHVybiAoIWlzTm9kZSgpICYmXHJcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnU2FmYXJpJykgJiZcclxuICAgICAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnQ2hyb21lJykpO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaXNJbmRleGVkREJBdmFpbGFibGUoKSB7XHJcbiAgICByZXR1cm4gJ2luZGV4ZWREQicgaW4gc2VsZiAmJiBpbmRleGVkREIgIT0gbnVsbDtcclxufVxyXG4vKipcclxuICogVGhpcyBtZXRob2QgdmFsaWRhdGVzIGJyb3dzZXIgY29udGV4dCBmb3IgaW5kZXhlZERCIGJ5IG9wZW5pbmcgYSBkdW1teSBpbmRleGVkREIgZGF0YWJhc2UgYW5kIHJlamVjdFxyXG4gKiBpZiBlcnJvcnMgb2NjdXIgZHVyaW5nIHRoZSBkYXRhYmFzZSBvcGVuIG9wZXJhdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVFeGlzdF8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIERCX0NIRUNLX05BTUVfMSA9ICd2YWxpZGF0ZS1icm93c2VyLWNvbnRleHQtZm9yLWluZGV4ZWRkYi1hbmFseXRpY3MtbW9kdWxlJztcclxuICAgICAgICAgICAgdmFyIHJlcXVlc3RfMSA9IHdpbmRvdy5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FXzEpO1xyXG4gICAgICAgICAgICByZXF1ZXN0XzEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdF8xLnJlc3VsdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGRhdGFiYXNlIG9ubHkgd2hlbiBpdCBkb2Vzbid0IHByZS1leGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmVFeGlzdF8xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShEQl9DSEVDS19OQU1FXzEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdF8xLm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHByZUV4aXN0XzEgPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdF8xLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKChfYSA9IHJlcXVlc3RfMS5lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2UpIHx8ICcnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyB3aGV0aGVyIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcclxuICogQHJldHVybiB0cnVlIGlmIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcclxuICovXHJcbmZ1bmN0aW9uIGFyZUNvb2tpZXNFbmFibGVkKCkge1xyXG4gICAgaWYgKCFuYXZpZ2F0b3IgfHwgIW5hdmlnYXRvci5jb29raWVFbmFibGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIEVSUk9SX05BTUUgPSAnRmlyZWJhc2VFcnJvcic7XHJcbi8vIEJhc2VkIG9uIGNvZGUgZnJvbTpcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjQ3VzdG9tX0Vycm9yX1R5cGVzXHJcbnZhciBGaXJlYmFzZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZpcmViYXNlRXJyb3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGaXJlYmFzZUVycm9yKGNvZGUsIG1lc3NhZ2UsIGN1c3RvbURhdGEpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIF90aGlzLmN1c3RvbURhdGEgPSBjdXN0b21EYXRhO1xyXG4gICAgICAgIF90aGlzLm5hbWUgPSBFUlJPUl9OQU1FO1xyXG4gICAgICAgIC8vIEZpeCBGb3IgRVM1XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LXdpa2kvYmxvYi9tYXN0ZXIvQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIEZpcmViYXNlRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICAvLyBNYWludGFpbnMgcHJvcGVyIHN0YWNrIHRyYWNlIGZvciB3aGVyZSBvdXIgZXJyb3Igd2FzIHRocm93bi5cclxuICAgICAgICAvLyBPbmx5IGF2YWlsYWJsZSBvbiBWOC5cclxuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcclxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoX3RoaXMsIEVycm9yRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZpcmViYXNlRXJyb3I7XHJcbn0oRXJyb3IpKTtcclxudmFyIEVycm9yRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVycm9yRmFjdG9yeShzZXJ2aWNlLCBzZXJ2aWNlTmFtZSwgZXJyb3JzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcbiAgICB9XHJcbiAgICBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb2RlKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBkYXRhW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY3VzdG9tRGF0YSA9IGRhdGFbMF0gfHwge307XHJcbiAgICAgICAgdmFyIGZ1bGxDb2RlID0gdGhpcy5zZXJ2aWNlICsgXCIvXCIgKyBjb2RlO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMuZXJyb3JzW2NvZGVdO1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGVtcGxhdGUgPyByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGN1c3RvbURhdGEpIDogJ0Vycm9yJztcclxuICAgICAgICAvLyBTZXJ2aWNlIE5hbWU6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXHJcbiAgICAgICAgdmFyIGZ1bGxNZXNzYWdlID0gdGhpcy5zZXJ2aWNlTmFtZSArIFwiOiBcIiArIG1lc3NhZ2UgKyBcIiAoXCIgKyBmdWxsQ29kZSArIFwiKS5cIjtcclxuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRmlyZWJhc2VFcnJvcihmdWxsQ29kZSwgZnVsbE1lc3NhZ2UsIGN1c3RvbURhdGEpO1xyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXJyb3JGYWN0b3J5O1xyXG59KCkpO1xyXG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIGZ1bmN0aW9uIChfLCBrZXkpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBkYXRhW2tleV07XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgPyBTdHJpbmcodmFsdWUpIDogXCI8XCIgKyBrZXkgKyBcIj8+XCI7XHJcbiAgICB9KTtcclxufVxyXG52YXIgUEFUVEVSTiA9IC9cXHtcXCQoW159XSspfS9nO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZhbHVhdGVzIGEgSlNPTiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cclxuICogQHJldHVybiB7Kn0gVGhlIGphdmFzY3JpcHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIEpTT04uXHJcbiAqL1xyXG5mdW5jdGlvbiBqc29uRXZhbChzdHIpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgSlNPTiByZXByZXNlbnRpbmcgYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICogQHBhcmFtIHsqfSBkYXRhIEphdmFzY3JpcHQgb2JqZWN0IHRvIGJlIHN0cmluZ2lmaWVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnkoZGF0YSkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gaW50byBjb25zdGl0dWVudCBwYXJ0cy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiB3aXRoIGludmFsaWQgLyBpbmNvbXBsZXRlIGNsYWltcyBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBoZWFkZXIgPSB7fSwgY2xhaW1zID0ge30sIGRhdGEgPSB7fSwgc2lnbmF0dXJlID0gJyc7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IHRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgaGVhZGVyID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzBdKSB8fCAnJyk7XHJcbiAgICAgICAgY2xhaW1zID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzFdKSB8fCAnJyk7XHJcbiAgICAgICAgc2lnbmF0dXJlID0gcGFydHNbMl07XHJcbiAgICAgICAgZGF0YSA9IGNsYWltc1snZCddIHx8IHt9O1xyXG4gICAgICAgIGRlbGV0ZSBjbGFpbXNbJ2QnXTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7IH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGVhZGVyOiBoZWFkZXIsXHJcbiAgICAgICAgY2xhaW1zOiBjbGFpbXMsXHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZVxyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgdGltZS1iYXNlZCBjbGFpbXMuIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlXHJcbiAqIHRva2VuIGlzIHdpdGhpbiB0aGUgdGltZSB3aW5kb3cgYXV0aG9yaXplZCBieSB0aGUgJ25iZicgKG5vdC1iZWZvcmUpIGFuZCAnaWF0JyAoaXNzdWVkLWF0KSBjbGFpbXMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBpc1ZhbGlkVGltZXN0YW1wID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICB2YXIgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICB2YXIgbm93ID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xyXG4gICAgdmFyIHZhbGlkU2luY2UgPSAwLCB2YWxpZFVudGlsID0gMDtcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ25iZicpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ25iZiddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ2lhdCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdleHAnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFVudGlsID0gY2xhaW1zWydleHAnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRva2VuIHdpbGwgZXhwaXJlIGFmdGVyIDI0aCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSB2YWxpZFNpbmNlICsgODY0MDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICghIW5vdyAmJlxyXG4gICAgICAgICEhdmFsaWRTaW5jZSAmJlxyXG4gICAgICAgICEhdmFsaWRVbnRpbCAmJlxyXG4gICAgICAgIG5vdyA+PSB2YWxpZFNpbmNlICYmXHJcbiAgICAgICAgbm93IDw9IHZhbGlkVW50aWwpO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCByZXR1cm5zIGl0cyBpc3N1ZWQgYXQgdGltZSBpZiB2YWxpZCwgbnVsbCBvdGhlcndpc2UuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gbnVsbCBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBpc3N1ZWRBdFRpbWUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYWltc1snaWF0J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbnZhciBpc1ZhbGlkRm9ybWF0ID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICB2YXIgZGVjb2RlZCA9IGRlY29kZSh0b2tlbiksIGNsYWltcyA9IGRlY29kZWQuY2xhaW1zO1xyXG4gICAgcmV0dXJuICEhY2xhaW1zICYmIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0Jyk7XHJcbn07XHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBwZWVyIGludG8gYW4gYXV0aCB0b2tlbiBhbmQgZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWRtaW4gYXV0aCB0b2tlbiBieSBsb29raW5nIGF0IHRoZSBjbGFpbXMgcG9ydGlvbi5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxudmFyIGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIHJldHVybiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXNbJ2FkbWluJ10gPT09IHRydWU7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGNvbnRhaW5zKG9iaiwga2V5KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcclxufVxyXG5mdW5jdGlvbiBzYWZlR2V0KG9iaiwga2V5KSB7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gbWFwKG9iaiwgZm4sIGNvbnRleHRPYmopIHtcclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXNba2V5XSA9IGZuLmNhbGwoY29udGV4dE9iaiwgb2JqW2tleV0sIGtleSwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYVxyXG4gKiBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5c3RyaW5nUGFyYW1zKSB7XHJcbiAgICB2YXIgcGFyYW1zID0gW107XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGFycmF5VmFsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChhcnJheVZhbCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhxdWVyeXN0cmluZ1BhcmFtcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcclxuICAgICAgICBfbG9vcF8xKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcmFtcy5sZW5ndGggPyAnJicgKyBwYXJhbXMuam9pbignJicpIDogJyc7XHJcbn1cclxuLyoqXHJcbiAqIERlY29kZXMgYSBxdWVyeXN0cmluZyAoZS5nLiA/YXJnPXZhbCZhcmcyPXZhbDIpIGludG8gYSBwYXJhbXMgb2JqZWN0XHJcbiAqIChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKi9cclxuZnVuY3Rpb24gcXVlcnlzdHJpbmdEZWNvZGUocXVlcnlzdHJpbmcpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIHZhciB0b2tlbnMgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgJycpLnNwbGl0KCcmJyk7XHJcbiAgICB0b2tlbnMuZm9yRWFjaChmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IHRva2VuLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIG9ialtrZXlbMF1dID0ga2V5WzFdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2guXHJcbiAqIFZhcmlhYmxlIG5hbWVzIGZvbGxvdyB0aGUgbm90YXRpb24gaW4gRklQUyBQVUIgMTgwLTM6XHJcbiAqIGh0dHA6Ly9jc3JjLm5pc3QuZ292L3B1YmxpY2F0aW9ucy9maXBzL2ZpcHMxODAtMy9maXBzMTgwLTNfZmluYWwucGRmLlxyXG4gKlxyXG4gKiBVc2FnZTpcclxuICogICB2YXIgc2hhMSA9IG5ldyBzaGExKCk7XHJcbiAqICAgc2hhMS51cGRhdGUoYnl0ZXMpO1xyXG4gKiAgIHZhciBoYXNoID0gc2hhMS5kaWdlc3QoKTtcclxuICpcclxuICogUGVyZm9ybWFuY2U6XHJcbiAqICAgQ2hyb21lIDIzOiAgIH40MDAgTWJpdC9zXHJcbiAqICAgRmlyZWZveCAxNjogIH4yNTAgTWJpdC9zXHJcbiAqXHJcbiAqL1xyXG4vKipcclxuICogU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBUaGUgcHJvcGVydGllcyBkZWNsYXJlZCBoZXJlIGFyZSBkaXNjdXNzZWQgaW4gdGhlIGFib3ZlIGFsZ29yaXRobSBkb2N1bWVudC5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBmaW5hbFxyXG4gKiBAc3RydWN0XHJcbiAqL1xyXG52YXIgU2hhMSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNoYTEoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG9sZHMgdGhlIHByZXZpb3VzIHZhbHVlcyBvZiBhY2N1bXVsYXRlZCB2YXJpYWJsZXMgYS1lIGluIHRoZSBjb21wcmVzc19cclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2hhaW5fID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgcGFydGlhbGx5IGNvbXB1dGVkIGhhc2ggcmVzdWx0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLldfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGFkXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcclxuICAgICAgICB0aGlzLnBhZF9bMF0gPSAxMjg7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFkX1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIFNoYTEucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIGNvbXByZXNzIGhlbHBlciBmdW5jdGlvbi5cclxuICAgICAqIEBwYXJhbSBidWYgQmxvY2sgdG8gY29tcHJlc3MuXHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IE9mZnNldCBvZiB0aGUgYmxvY2sgaW4gdGhlIGJ1ZmZlci5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFNoYTEucHJvdG90eXBlLmNvbXByZXNzXyA9IGZ1bmN0aW9uIChidWYsIG9mZnNldCkge1xyXG4gICAgICAgIGlmICghb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBXID0gdGhpcy5XXztcclxuICAgICAgICAvLyBnZXQgMTYgYmlnIGVuZGlhbiB3b3Jkc1xyXG4gICAgICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8odXNlcik6IFtidWcgODE0MDEyMl0gUmVjZW50IHZlcnNpb25zIG9mIFNhZmFyaSBmb3IgTWFjIE9TIGFuZCBpT1NcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBidWcgdGhhdCB0dXJucyB0aGUgcG9zdC1pbmNyZW1lbnQgKysgb3BlcmF0b3IgaW50byBwcmUtaW5jcmVtZW50XHJcbiAgICAgICAgICAgICAgICAvLyBkdXJpbmcgSklUIGNvbXBpbGF0aW9uLiAgV2UgaGF2ZSBjb2RlIHRoYXQgZGVwZW5kcyBoZWF2aWx5IG9uIFNIQS0xIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gY29ycmVjdG5lc3MgYW5kIHdoaWNoIGlzIGFmZmVjdGVkIGJ5IHRoaXMgYnVnLCBzbyBJJ3ZlIHJlbW92ZWQgYWxsIHVzZXNcclxuICAgICAgICAgICAgICAgIC8vIG9mIHBvc3QtaW5jcmVtZW50ICsrIGluIHdoaWNoIHRoZSByZXN1bHQgdmFsdWUgaXMgdXNlZC4gIFdlIGNhbiByZXZlcnRcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2hhbmdlIG9uY2UgdGhlIFNhZmFyaSBidWdcclxuICAgICAgICAgICAgICAgIC8vIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTA5MDM2KSBoYXMgYmVlbiBmaXhlZCBhbmRcclxuICAgICAgICAgICAgICAgIC8vIG1vc3QgY2xpZW50cyBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWYuY2hhckNvZGVBdChvZmZzZXQgKyAzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0XSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDFdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0ICsgMl0gPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZbb2Zmc2V0ICsgM107XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcclxuICAgICAgICBmb3IgKHZhciBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICB2YXIgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIHZhciBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgdmFyIGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICB2YXIgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIHZhciBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdCA9ICgoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgayArIFdbaV0pICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgZSA9IGQ7XHJcbiAgICAgICAgICAgIGQgPSBjO1xyXG4gICAgICAgICAgICBjID0gKChiIDw8IDMwKSB8IChiID4+PiAyKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBiID0gYTtcclxuICAgICAgICAgICAgYSA9IHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gKHRoaXMuY2hhaW5fWzBdICsgYSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gKHRoaXMuY2hhaW5fWzFdICsgYikgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzJdID0gKHRoaXMuY2hhaW5fWzJdICsgYykgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gKHRoaXMuY2hhaW5fWzNdICsgZCkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gKHRoaXMuY2hhaW5fWzRdICsgZSkgJiAweGZmZmZmZmZmO1xyXG4gICAgfTtcclxuICAgIFNoYTEucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChieXRlcywgbGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhqb2hubGVueik6IHRpZ2h0ZW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcmVtb3ZlIHRoaXMgY2hlY2tcclxuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsZW5ndGhNaW51c0Jsb2NrID0gbGVuZ3RoIC0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICAgIC8vIFVzaW5nIGxvY2FsIGluc3RlYWQgb2YgbWVtYmVyIHZhcmlhYmxlcyBnaXZlcyB+NSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LlxyXG4gICAgICAgIHZhciBidWYgPSB0aGlzLmJ1Zl87XHJcbiAgICAgICAgdmFyIGluYnVmID0gdGhpcy5pbmJ1Zl87XHJcbiAgICAgICAgLy8gVGhlIG91dGVyIHdoaWxlIGxvb3Agc2hvdWxkIGV4ZWN1dGUgYXQgbW9zdCB0d2ljZS5cclxuICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyBXaGVuIHdlIGhhdmUgbm8gZGF0YSBpbiB0aGUgYmxvY2sgdG8gdG9wIHVwLCB3ZSBjYW4gZGlyZWN0bHkgcHJvY2VzcyB0aGVcclxuICAgICAgICAgICAgLy8gaW5wdXQgYnVmZmVyIChhc3N1bWluZyBpdCBjb250YWlucyBzdWZmaWNpZW50IGRhdGEpLiBUaGlzIGdpdmVzIH4yNSVcclxuICAgICAgICAgICAgLy8gc3BlZWR1cCBvbiBDaHJvbWUgMjMgYW5kIH4xNSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LCBidXQgcmVxdWlyZXMgdGhhdFxyXG4gICAgICAgICAgICAvLyB0aGUgZGF0YSBpcyBwcm92aWRlZCBpbiBsYXJnZSBjaHVua3MgKG9yIGluIG11bHRpcGxlcyBvZiA2NCBieXRlcykuXHJcbiAgICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPD0gbGVuZ3RoTWludXNCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ5dGVzLCBuKTtcclxuICAgICAgICAgICAgICAgICAgICBuICs9IHRoaXMuYmxvY2tTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZltpbmJ1Zl0gPSBieXRlcy5jaGFyQ29kZUF0KG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICsraW5idWY7XHJcbiAgICAgICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gdGhpcy5ibG9ja1NpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5idWYgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzW25dO1xyXG4gICAgICAgICAgICAgICAgICAgICsraW5idWY7XHJcbiAgICAgICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gdGhpcy5ibG9ja1NpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5idWYgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluYnVmXyA9IGluYnVmO1xyXG4gICAgICAgIHRoaXMudG90YWxfICs9IGxlbmd0aDtcclxuICAgIH07XHJcbiAgICAvKiogQG92ZXJyaWRlICovXHJcbiAgICBTaGExLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGRpZ2VzdCA9IFtdO1xyXG4gICAgICAgIHZhciB0b3RhbEJpdHMgPSB0aGlzLnRvdGFsXyAqIDg7XHJcbiAgICAgICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxyXG4gICAgICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgNTYgLSB0aGlzLmluYnVmXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkICMgYml0cy5cclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5ibG9ja1NpemUgLSAxOyBpID49IDU2OyBpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xyXG4gICAgICAgICAgICB0b3RhbEJpdHMgLz0gMjU2OyAvLyBEb24ndCB1c2UgYml0LXNoaWZ0aW5nIGhlcmUhXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XHJcbiAgICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcclxuICAgICAgICAgICAgICAgIGRpZ2VzdFtuXSA9ICh0aGlzLmNoYWluX1tpXSA+PiBqKSAmIDI1NTtcclxuICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlnZXN0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTaGExO1xyXG59KCkpO1xuXG4vKipcclxuICogSGVscGVyIHRvIG1ha2UgYSBTdWJzY3JpYmUgZnVuY3Rpb24gKGp1c3QgbGlrZSBQcm9taXNlIGhlbHBzIG1ha2UgYVxyXG4gKiBUaGVuYWJsZSkuXHJcbiAqXHJcbiAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gKiAgICAgYXMgYSBwcm94eS5cclxuICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaWJlKGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKSB7XHJcbiAgICB2YXIgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycyk7XHJcbiAgICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xyXG59XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnQgZmFuLW91dCBmb3IgYW55IG51bWJlciBvZiBPYnNlcnZlcnMgYXR0YWNoZWQgdmlhIGEgc3Vic2NyaWJlXHJcbiAqIGZ1bmN0aW9uLlxyXG4gKi9cclxudmFyIE9ic2VydmVyUHJveHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gICAgICogICAgIGFzIGEgcHJveHkuXHJcbiAgICAgKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIE9ic2VydmVyUHJveHkoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgPSAwO1xyXG4gICAgICAgIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxyXG4gICAgICAgIHRoaXMudGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgICAgICAvLyBDYWxsIHRoZSBleGVjdXRvciBhc3luY2hyb25vdXNseSBzbyBzdWJzY3JpYmVycyB0aGF0IGFyZSBjYWxsZWRcclxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgc3Vic2NyaWJlIGZ1bmN0aW9uXHJcbiAgICAgICAgLy8gY2FuIHN0aWxsIHJlY2VpdmUgdGhlIHZlcnkgZmlyc3QgdmFsdWUgZ2VuZXJhdGVkIGluIHRoZSBleGVjdXRvci5cclxuICAgICAgICB0aGlzLnRhc2tcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBleGVjdXRvcihfdGhpcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmVycm9yKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaWJlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWRkIGFuIE9ic2VydmVyIHRvIHRoZSBmYW4tb3V0IGxpc3QuXHJcbiAgICAgKlxyXG4gICAgICogLSBXZSByZXF1aXJlIHRoYXQgbm8gZXZlbnQgaXMgc2VudCB0byBhIHN1YnNjcmliZXIgc3ljaHJvbm91c2x5IHRvIHRoZWlyXHJcbiAgICAgKiAgIGNhbGwgdG8gc3Vic2NyaWJlKCkuXHJcbiAgICAgKi9cclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgZXJyb3IgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cclxuICAgICAgICBpZiAoaW1wbGVtZW50c0FueU1ldGhvZHMobmV4dE9yT2JzZXJ2ZXIsIFtcclxuICAgICAgICAgICAgJ25leHQnLFxyXG4gICAgICAgICAgICAnZXJyb3InLFxyXG4gICAgICAgICAgICAnY29tcGxldGUnXHJcbiAgICAgICAgXSkpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0ge1xyXG4gICAgICAgICAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0ID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIuY29tcGxldGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcclxuICAgICAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXHJcbiAgICAgICAgLy8gZXZlbnQuXHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy50YXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZmluYWxFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihfdGhpcy5maW5hbEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gdW5zdWI7XHJcbiAgICB9O1xyXG4gICAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cclxuICAgIC8vIGFueSB1bnN1YnNjcmliZWQgT2JzZXJ2ZXIuXHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS51bnN1YnNjcmliZU9uZSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vYnNlcnZlcnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuZm9yRWFjaE9ic2VydmVyID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIEFscmVhZHkgY2xvc2VkIGJ5IHByZXZpb3VzIGV2ZW50Li4uLmp1c3QgZWF0IHRoZSBhZGRpdGlvbmFsIHZhbHVlcy5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTaW5jZSBzZW5kT25lIGNhbGxzIGFzeW5jaHJvbm91c2x5IC0gdGhlcmUgaXMgbm8gY2hhbmNlIHRoYXRcclxuICAgICAgICAvLyB0aGlzLm9ic2VydmVycyB3aWxsIGJlY29tZSB1bmRlZmluZWQuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic2VydmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRPbmUoaSwgZm4pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBDYWxsIHRoZSBPYnNlcnZlciB2aWEgb25lIG9mIGl0J3MgY2FsbGJhY2sgZnVuY3Rpb24uIFdlIGFyZSBjYXJlZnVsIHRvXHJcbiAgICAvLyBjb25maXJtIHRoYXQgdGhlIG9ic2VydmUgaGFzIG5vdCBiZWVuIHVuc3Vic2NyaWJlZCBzaW5jZSB0aGlzIGFzeW5jaHJvbm91c1xyXG4gICAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuc2VuZE9uZSA9IGZ1bmN0aW9uIChpLCBmbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY2FsbGJhY2sgYXN5bmNocm9ub3VzbHlcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy50YXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMub2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQgJiYgX3RoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4oX3RoaXMub2JzZXJ2ZXJzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIGV4Y2VwdGlvbnMgcmFpc2VkIGluIE9ic2VydmVycyBvciBtaXNzaW5nIG1ldGhvZHMgb2YgYW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBPYnNlcnZlci5cclxuICAgICAgICAgICAgICAgICAgICAvLyBMb2cgZXJyb3IgdG8gY29uc29sZS4gYi8zMTQwNDgwNlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmIChlcnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbmFsRXJyb3IgPSBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFByb3h5IGlzIG5vIGxvbmdlciBuZWVkZWQgLSBnYXJiYWdlIGNvbGxlY3QgcmVmZXJlbmNlc1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgX3RoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2ZXJQcm94eTtcclxufSgpKTtcclxuLyoqIFR1cm4gc3luY2hyb25vdXMgZnVuY3Rpb24gaW50byBvbmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5LiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG5mdW5jdGlvbiBhc3luYyhmbiwgb25FcnJvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRydWUpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIG1ldGhvZHNfMSA9IG1ldGhvZHM7IF9pIDwgbWV0aG9kc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RzXzFbX2ldO1xyXG4gICAgICAgIGlmIChtZXRob2QgaW4gb2JqICYmIHR5cGVvZiBvYmpbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gbm9vcCgpIHtcclxuICAgIC8vIGRvIG5vdGhpbmdcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBhcHByb3ByaWF0ZSBudW1iZXIgb2YgYXJndW1lbnRzIGFyZSBwcm92aWRlZCBmb3IgYSBwdWJsaWMgZnVuY3Rpb24uXHJcbiAqIFRocm93cyBhbiBlcnJvciBpZiBpdCBmYWlscy5cclxuICpcclxuICogQHBhcmFtIGZuTmFtZSBUaGUgZnVuY3Rpb24gbmFtZVxyXG4gKiBAcGFyYW0gbWluQ291bnQgVGhlIG1pbmltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBhbGxvdyBmb3IgdGhlIGZ1bmN0aW9uIGNhbGxcclxuICogQHBhcmFtIG1heENvdW50IFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudCB0byBhbGxvdyBmb3IgdGhlIGZ1bmN0aW9uIGNhbGxcclxuICogQHBhcmFtIGFyZ0NvdW50IFRoZSBhY3R1YWwgbnVtYmVyIG9mIGFyZ3VtZW50cyBwcm92aWRlZC5cclxuICovXHJcbnZhciB2YWxpZGF0ZUFyZ0NvdW50ID0gZnVuY3Rpb24gKGZuTmFtZSwgbWluQ291bnQsIG1heENvdW50LCBhcmdDb3VudCkge1xyXG4gICAgdmFyIGFyZ0Vycm9yO1xyXG4gICAgaWYgKGFyZ0NvdW50IDwgbWluQ291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9ICdhdCBsZWFzdCAnICsgbWluQ291bnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmdDb3VudCA+IG1heENvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSBtYXhDb3VudCA9PT0gMCA/ICdub25lJyA6ICdubyBtb3JlIHRoYW4gJyArIG1heENvdW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ0Vycm9yKSB7XHJcbiAgICAgICAgdmFyIGVycm9yID0gZm5OYW1lICtcclxuICAgICAgICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgYXJnQ291bnQgK1xyXG4gICAgICAgICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXHJcbiAgICAgICAgICAgICcgRXhwZWN0cyAnICtcclxuICAgICAgICAgICAgYXJnRXJyb3IgK1xyXG4gICAgICAgICAgICAnLic7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBhcmd1bWVudE51bWJlciBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50XHJcbiAqIEBwYXJhbSBvcHRpb25hbCBXaGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnQgaXMgb3B0aW9uYWxcclxuICogQHJldHVybiBUaGUgcHJlZml4IHRvIGFkZCB0byB0aGUgZXJyb3IgdGhyb3duIGZvciB2YWxpZGF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpIHtcclxuICAgIHZhciBhcmdOYW1lID0gJyc7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50TnVtYmVyKSB7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAnZmlyc3QnIDogJ0ZpcnN0JztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAnc2Vjb25kJyA6ICdTZWNvbmQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICd0aGlyZCcgOiAnVGhpcmQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICdmb3VydGgnIDogJ0ZvdXJ0aCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXJyb3JQcmVmaXggY2FsbGVkIHdpdGggYXJndW1lbnROdW1iZXIgPiA0LiAgTmVlZCB0byB1cGRhdGUgaXQ/Jyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IgPSBmbk5hbWUgKyAnIGZhaWxlZDogJztcclxuICAgIGVycm9yICs9IGFyZ05hbWUgKyAnIGFyZ3VtZW50ICc7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSBmbk5hbWVcclxuICogQHBhcmFtIGFyZ3VtZW50TnVtYmVyXHJcbiAqIEBwYXJhbSBuYW1lc3BhY2VcclxuICogQHBhcmFtIG9wdGlvbmFsXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWVzcGFjZShmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBuYW1lc3BhY2UsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIW5hbWVzcGFjZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGZpcmViYXNlIG5hbWVzcGFjZS4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNhbGxiYWNrKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIFxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG5jYWxsYmFjaywgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDb250ZXh0T2JqZWN0KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIGNvbnRleHQsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIWNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbnRleHQgIT09ICdvYmplY3QnIHx8IGNvbnRleHQgPT09IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICtcclxuICAgICAgICAgICAgJ211c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC4nKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb2RlIG9yaWdpbmFsbHkgY2FtZSBmcm9tIGdvb2cuY3J5cHQuc3RyaW5nVG9VdGY4Qnl0ZUFycmF5LCBidXQgZm9yIHNvbWUgcmVhc29uIHRoZXlcclxuLy8gYXV0b21hdGljYWxseSByZXBsYWNlZCAnXFxyXFxuJyB3aXRoICdcXG4nLCBhbmQgdGhleSBkaWRuJ3QgaGFuZGxlIHN1cnJvZ2F0ZSBwYWlycyxcclxuLy8gc28gaXQncyBiZWVuIG1vZGlmaWVkLlxyXG4vLyBOb3RlIHRoYXQgbm90IGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgYXBwZWFyIGFzIHNpbmdsZSBjaGFyYWN0ZXJzIGluIEphdmFTY3JpcHQgc3RyaW5ncy5cclxuLy8gZnJvbUNoYXJDb2RlIHJldHVybnMgdGhlIFVURi0xNiBlbmNvZGluZyBvZiBhIGNoYXJhY3RlciAtIHNvIHNvbWUgVW5pY29kZSBjaGFyYWN0ZXJzXHJcbi8vIHVzZSAyIGNoYXJhY3RlcnMgaW4gSmF2YXNjcmlwdC4gIEFsbCA0LWJ5dGUgVVRGLTggY2hhcmFjdGVycyBiZWdpbiB3aXRoIGEgZmlyc3RcclxuLy8gY2hhcmFjdGVyIGluIHRoZSByYW5nZSAweEQ4MDAgLSAweERCRkYgKHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzby1jYWxsZWQgc3Vycm9nYXRlXHJcbi8vIHBhaXIpLlxyXG4vLyBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjEuM1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXHJcbnZhciBzdHJpbmdUb0J5dGVBcnJheSQxID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdmFyIG91dCA9IFtdO1xyXG4gICAgdmFyIHAgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIC8vIElzIHRoaXMgdGhlIGxlYWQgc3Vycm9nYXRlIGluIGEgc3Vycm9nYXRlIHBhaXI/XHJcbiAgICAgICAgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XHJcbiAgICAgICAgICAgIHZhciBoaWdoID0gYyAtIDB4ZDgwMDsgLy8gdGhlIGhpZ2ggMTAgYml0cy5cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICBhc3NlcnQoaSA8IHN0ci5sZW5ndGgsICdTdXJyb2dhdGUgcGFpciBtaXNzaW5nIHRyYWlsIHN1cnJvZ2F0ZS4nKTtcclxuICAgICAgICAgICAgdmFyIGxvdyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gMHhkYzAwOyAvLyB0aGUgbG93IDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKGhpZ2ggPDwgMTApICsgbG93O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCA2NTUzNikge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG4vKipcclxuICogQ2FsY3VsYXRlIGxlbmd0aCB3aXRob3V0IGFjdHVhbGx5IGNvbnZlcnRpbmc7IHVzZWZ1bCBmb3IgZG9pbmcgY2hlYXBlciB2YWxpZGF0aW9uLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbnZhciBzdHJpbmdMZW5ndGggPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB2YXIgcCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgcCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBwICs9IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XHJcbiAgICAgICAgICAgIC8vIExlYWQgc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIuICBUaGUgcGFpciB0b2dldGhlciB3aWxsIHRha2UgNCBieXRlcyB0byByZXByZXNlbnQuXHJcbiAgICAgICAgICAgIHAgKz0gNDtcclxuICAgICAgICAgICAgaSsrOyAvLyBza2lwIHRyYWlsIHN1cnJvZ2F0ZS5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHAgKz0gMztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcDtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGV4cG9uZW50aWFsbHkgaW5jcmVhc2UuXHJcbiAqL1xyXG52YXIgREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMgPSAxMDAwO1xyXG4vKipcclxuICogVGhlIGZhY3RvciB0byBiYWNrb2ZmIGJ5LlxyXG4gKiBTaG91bGQgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDEuXHJcbiAqL1xyXG52YXIgREVGQVVMVF9CQUNLT0ZGX0ZBQ1RPUiA9IDI7XHJcbi8qKlxyXG4gKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdG8gaW5jcmVhc2UgdG8uXHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmdcclxuICovXHJcbnZhciBNQVhfVkFMVUVfTUlMTElTID0gNCAqIDYwICogNjAgKiAxMDAwOyAvLyBGb3VyIGhvdXJzLCBsaWtlIGlPUyBhbmQgQW5kcm9pZC5cclxuLyoqXHJcbiAqIFRoZSBwZXJjZW50YWdlIG9mIGJhY2tvZmYgdGltZSB0byByYW5kb21pemUgYnkuXHJcbiAqIFNlZVxyXG4gKiBodHRwOi8vZ28vc2FmZS1jbGllbnQtYmVoYXZpb3Ijc3RlcC0xLWRldGVybWluZS10aGUtYXBwcm9wcmlhdGUtcmV0cnktaW50ZXJ2YWwtdG8taGFuZGxlLXNwaWtlLXRyYWZmaWNcclxuICogZm9yIGNvbnRleHQuXHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmdcclxuICovXHJcbnZhciBSQU5ET01fRkFDVE9SID0gMC41O1xyXG4vKipcclxuICogQmFzZWQgb24gdGhlIGJhY2tvZmYgbWV0aG9kIGZyb21cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvY2xvc3VyZS9nb29nL21hdGgvZXhwb25lbnRpYWxiYWNrb2ZmLmpzLlxyXG4gKiBFeHRyYWN0ZWQgaGVyZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHBhc3MgbWV0YWRhdGEgYW5kIGEgc3RhdGVmdWwgRXhwb25lbnRpYWxCYWNrb2ZmIG9iamVjdCBhcm91bmQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKGJhY2tvZmZDb3VudCwgaW50ZXJ2YWxNaWxsaXMsIGJhY2tvZmZGYWN0b3IpIHtcclxuICAgIGlmIChpbnRlcnZhbE1pbGxpcyA9PT0gdm9pZCAwKSB7IGludGVydmFsTWlsbGlzID0gREVGQVVMVF9JTlRFUlZBTF9NSUxMSVM7IH1cclxuICAgIGlmIChiYWNrb2ZmRmFjdG9yID09PSB2b2lkIDApIHsgYmFja29mZkZhY3RvciA9IERFRkFVTFRfQkFDS09GRl9GQUNUT1I7IH1cclxuICAgIC8vIENhbGN1bGF0ZXMgYW4gZXhwb25lbnRpYWxseSBpbmNyZWFzaW5nIHZhbHVlLlxyXG4gICAgLy8gRGV2aWF0aW9uOiBjYWxjdWxhdGVzIHZhbHVlIGZyb20gY291bnQgYW5kIGEgY29uc3RhbnQgaW50ZXJ2YWwsIHNvIHdlIG9ubHkgbmVlZCB0byBzYXZlIHZhbHVlXHJcbiAgICAvLyBhbmQgY291bnQgdG8gcmVzdG9yZSBzdGF0ZS5cclxuICAgIHZhciBjdXJyQmFzZVZhbHVlID0gaW50ZXJ2YWxNaWxsaXMgKiBNYXRoLnBvdyhiYWNrb2ZmRmFjdG9yLCBiYWNrb2ZmQ291bnQpO1xyXG4gICAgLy8gQSByYW5kb20gXCJmdXp6XCIgdG8gYXZvaWQgd2F2ZXMgb2YgcmV0cmllcy5cclxuICAgIC8vIERldmlhdGlvbjogcmFuZG9tRmFjdG9yIGlzIHJlcXVpcmVkLlxyXG4gICAgdmFyIHJhbmRvbVdhaXQgPSBNYXRoLnJvdW5kKFxyXG4gICAgLy8gQSBmcmFjdGlvbiBvZiB0aGUgYmFja29mZiB2YWx1ZSB0byBhZGQvc3VidHJhY3QuXHJcbiAgICAvLyBEZXZpYXRpb246IGNoYW5nZXMgbXVsdGlwbGljYXRpb24gb3JkZXIgdG8gaW1wcm92ZSByZWFkYWJpbGl0eS5cclxuICAgIFJBTkRPTV9GQUNUT1IgKlxyXG4gICAgICAgIGN1cnJCYXNlVmFsdWUgKlxyXG4gICAgICAgIC8vIEEgcmFuZG9tIGZsb2F0IChyb3VuZGVkIHRvIGludCBieSBNYXRoLnJvdW5kIGFib3ZlKSBpbiB0aGUgcmFuZ2UgWy0xLCAxXS4gRGV0ZXJtaW5lc1xyXG4gICAgICAgIC8vIGlmIHdlIGFkZCBvciBzdWJ0cmFjdC5cclxuICAgICAgICAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKlxyXG4gICAgICAgIDIpO1xyXG4gICAgLy8gTGltaXRzIGJhY2tvZmYgdG8gbWF4IHRvIGF2b2lkIGVmZmVjdGl2ZWx5IHBlcm1hbmVudCBiYWNrb2ZmLlxyXG4gICAgcmV0dXJuIE1hdGgubWluKE1BWF9WQUxVRV9NSUxMSVMsIGN1cnJCYXNlVmFsdWUgKyByYW5kb21XYWl0KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdmlkZSBFbmdsaXNoIG9yZGluYWwgbGV0dGVycyBhZnRlciBhIG51bWJlclxyXG4gKi9cclxuZnVuY3Rpb24gb3JkaW5hbChpKSB7XHJcbiAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShpKSkge1xyXG4gICAgICAgIHJldHVybiBcIlwiICsgaTtcclxuICAgIH1cclxuICAgIHJldHVybiBpICsgaW5kaWNhdG9yKGkpO1xyXG59XHJcbmZ1bmN0aW9uIGluZGljYXRvcihpKSB7XHJcbiAgICBpID0gTWF0aC5hYnMoaSk7XHJcbiAgICB2YXIgY2VudCA9IGkgJSAxMDA7XHJcbiAgICBpZiAoY2VudCA+PSAxMCAmJiBjZW50IDw9IDIwKSB7XHJcbiAgICAgICAgcmV0dXJuICd0aCc7XHJcbiAgICB9XHJcbiAgICB2YXIgZGVjID0gaSAlIDEwO1xyXG4gICAgaWYgKGRlYyA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiAnc3QnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMikge1xyXG4gICAgICAgIHJldHVybiAnbmQnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMykge1xyXG4gICAgICAgIHJldHVybiAncmQnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICd0aCc7XHJcbn1cblxuZXhwb3J0IHsgQ09OU1RBTlRTLCBEZWZlcnJlZCwgRXJyb3JGYWN0b3J5LCBGaXJlYmFzZUVycm9yLCBNQVhfVkFMVUVfTUlMTElTLCBSQU5ET01fRkFDVE9SLCBTaGExLCBhcmVDb29raWVzRW5hYmxlZCwgYXNzZXJ0LCBhc3NlcnRpb25FcnJvciwgYXN5bmMsIGJhc2U2NCwgYmFzZTY0RGVjb2RlLCBiYXNlNjRFbmNvZGUsIGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMsIGNvbnRhaW5zLCBjcmVhdGVTdWJzY3JpYmUsIGRlY29kZSwgZGVlcENvcHksIGRlZXBFeHRlbmQsIGVycm9yUHJlZml4LCBnZXRVQSwgaXNBZG1pbiwgaXNCcm93c2VyLCBpc0Jyb3dzZXJFeHRlbnNpb24sIGlzRWxlY3Ryb24sIGlzRW1wdHksIGlzSUUsIGlzSW5kZXhlZERCQXZhaWxhYmxlLCBpc01vYmlsZUNvcmRvdmEsIGlzTm9kZSwgaXNOb2RlU2RrLCBpc1JlYWN0TmF0aXZlLCBpc1NhZmFyaSwgaXNVV1AsIGlzVmFsaWRGb3JtYXQsIGlzVmFsaWRUaW1lc3RhbXAsIGlzc3VlZEF0VGltZSwganNvbkV2YWwsIG1hcCwgb3JkaW5hbCwgcXVlcnlzdHJpbmcsIHF1ZXJ5c3RyaW5nRGVjb2RlLCBzYWZlR2V0LCBzdHJpbmdMZW5ndGgsIHN0cmluZ1RvQnl0ZUFycmF5JDEgYXMgc3RyaW5nVG9CeXRlQXJyYXksIHN0cmluZ2lmeSwgdmFsaWRhdGVBcmdDb3VudCwgdmFsaWRhdGVDYWxsYmFjaywgdmFsaWRhdGVDb250ZXh0T2JqZWN0LCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlLCB2YWxpZGF0ZU5hbWVzcGFjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fdmFsdWVzLCBfX3JlYWQsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fc3ByZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgRGVmZXJyZWQgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbi8qKlxyXG4gKiBDb21wb25lbnQgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXHJcbiAqL1xyXG52YXIgQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIHB1YmxpYyBzZXJ2aWNlIG5hbWUsIGUuZy4gYXBwLCBhdXRoLCBmaXJlc3RvcmUsIGRhdGFiYXNlXHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2VGYWN0b3J5IFNlcnZpY2UgZmFjdG9yeSByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhlIHB1YmxpYyBpbnRlcmZhY2VcclxuICAgICAqIEBwYXJhbSB0eXBlIHdoZXRoZXIgdGhlIHNlcnZpY2UgcHJvdmlkZWQgYnkgdGhlIGNvbXBvbmVudCBpcyBwdWJsaWMgb3IgcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDb21wb25lbnQobmFtZSwgaW5zdGFuY2VGYWN0b3J5LCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlRmFjdG9yeSA9IGluc3RhbmNlRmFjdG9yeTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBzZXJ2aWNlIG5hbWVzcGFjZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0ge307XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IFwiTEFaWVwiIC8qIExBWlkgKi87XHJcbiAgICB9XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldEluc3RhbnRpYXRpb25Nb2RlID0gZnVuY3Rpb24gKG1vZGUpIHtcclxuICAgICAgICB0aGlzLmluc3RhbnRpYXRpb25Nb2RlID0gbW9kZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldE11bHRpcGxlSW5zdGFuY2VzID0gZnVuY3Rpb24gKG11bHRpcGxlSW5zdGFuY2VzKSB7XHJcbiAgICAgICAgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyA9IG11bHRpcGxlSW5zdGFuY2VzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIENvbXBvbmVudC5wcm90b3R5cGUuc2V0U2VydmljZVByb3BzID0gZnVuY3Rpb24gKHByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlUHJvcHMgPSBwcm9wcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcG9uZW50O1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgaW5zdGFuY2UgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuICdhdXRoJywgJ2F1dGgtaW50ZXJuYWwnXHJcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXHJcbiAqL1xyXG52YXIgUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcm92aWRlcihuYW1lLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBIHByb3ZpZGVyIGNhbiBwcm92aWRlIG11bGl0cGxlIGluc3RhbmNlcyBvZiBhIHNlcnZpY2VcclxuICAgICAqIGlmIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzIGlzIHRydWUuXHJcbiAgICAgKi9cclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpZGVudGlmaWVyID09PSB2b2lkIDApIHsgaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlc0RlZmVycmVkLmhhcyhub3JtYWxpemVkSWRlbnRpZmllcikpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBkZWZlcnJlZCk7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBzZXJ2aWNlIGluc3RhbmNlIGlzIGF2YWlsYWJsZSwgcmVzb2x2ZSB0aGUgcHJvbWlzZSB3aXRoIGl0IGltbWVkaWF0ZWx5XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgZ2V0KCksIGl0IHNob3VsZCBub3QgY2F1c2VcclxuICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgcmV0dXJuIHRoZSB1bnJlc29sdmVkIHByb21pc2UgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmdldChub3JtYWxpemVkSWRlbnRpZmllcikucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX2EgPSBfX2Fzc2lnbih7IGlkZW50aWZpZXI6IERFRkFVTFRfRU5UUllfTkFNRSwgb3B0aW9uYWw6IGZhbHNlIH0sIG9wdGlvbnMpLCBpZGVudGlmaWVyID0gX2EuaWRlbnRpZmllciwgb3B0aW9uYWwgPSBfYS5vcHRpb25hbDtcclxuICAgICAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxyXG4gICAgICAgIHZhciBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZShub3JtYWxpemVkSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJTZXJ2aWNlIFwiICsgdGhpcy5uYW1lICsgXCIgaXMgbm90IGF2YWlsYWJsZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50O1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5zZXRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2E7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudC5uYW1lICE9PSB0aGlzLm5hbWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJNaXNtYXRjaGluZyBDb21wb25lbnQgXCIgKyBjb21wb25lbnQubmFtZSArIFwiIGZvciBQcm92aWRlciBcIiArIHRoaXMubmFtZSArIFwiLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQ29tcG9uZW50IGZvciBcIiArIHRoaXMubmFtZSArIFwiIGhhcyBhbHJlYWR5IGJlZW4gcHJvdmlkZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgIC8vIGlmIHRoZSBzZXJ2aWNlIGlzIGVhZ2VyLCBpbml0aWFsaXplIHRoZSBkZWZhdWx0IGluc3RhbmNlXHJcbiAgICAgICAgaWYgKGlzQ29tcG9uZW50RWFnZXIoY29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKERFRkFVTFRfRU5UUllfTkFNRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgZm9yIGFuIGVhZ2VyIENvbXBvbmVudCB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyB0aGUgZWFnZXJcclxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemF0aW9uLCBpdCBzaG91bGQgbm90IGNhdXNlIGEgZmF0YWwgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBJbnZlc3RpZ2F0ZSBpZiB3ZSBuZWVkIHRvIG1ha2UgaXQgY29uZmlndXJhYmxlLCBiZWNhdXNlIHNvbWUgY29tcG9uZW50IG1heSB3YW50IHRvIGNhdXNlXHJcbiAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yIGluIHRoaXMgY2FzZT9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgc2VydmljZSBpbnN0YW5jZXMgZm9yIHRoZSBwZW5kaW5nIHByb21pc2VzIGFuZCByZXNvbHZlIHRoZW1cclxuICAgICAgICAgICAgLy8gTk9URTogaWYgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyBpcyBmYWxzZSwgb25seSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWRcclxuICAgICAgICAgICAgLy8gYW5kIGFsbCBwcm9taXNlcyB3aXRoIHJlc29sdmUgd2l0aCBpdCByZWdhcmRsZXNzIG9mIHRoZSBpZGVudGlmaWVyLlxyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9kID0gX19yZWFkKF9jLnZhbHVlLCAyKSwgaW5zdGFuY2VJZGVudGlmaWVyID0gX2RbMF0sIGluc3RhbmNlRGVmZXJyZWQgPSBfZFsxXTtcclxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGBnZXRPckluaXRpYWxpemVTZXJ2aWNlKClgIHNob3VsZCBhbHdheXMgcmV0dXJuIGEgdmFsaWQgaW5zdGFuY2Ugc2luY2UgYSBjb21wb25lbnQgaXMgZ3VhcmFudGVlZC4gdXNlICEgdG8gbWFrZSB0eXBlc2NyaXB0IGhhcHB5LlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZShub3JtYWxpemVkSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VEZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uLCBpdCBzaG91bGQgbm90IGNhdXNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvci4gV2UganVzdCBsZWF2ZSB0aGUgcHJvbWlzZSB1bnJlc29sdmVkLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY2xlYXJJbnN0YW5jZSA9IGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgaWYgKGlkZW50aWZpZXIgPT09IHZvaWQgMCkgeyBpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FOyB9XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXMuZGVsZXRlKGlkZW50aWZpZXIpO1xyXG4gICAgfTtcclxuICAgIC8vIGFwcC5kZWxldGUoKSB3aWxsIGNhbGwgdGhpcyBtZXRob2Qgb24gZXZlcnkgcHJvdmlkZXIgdG8gZGVsZXRlIHRoZSBzZXJ2aWNlc1xyXG4gICAgLy8gVE9ETzogc2hvdWxkIHdlIG1hcmsgdGhlIHByb3ZpZGVyIGFzIGRlbGV0ZWQ/XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNlcnZpY2VzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyA9IEFycmF5LmZyb20odGhpcy5pbnN0YW5jZXMudmFsdWVzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChfX3NwcmVhZChzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHNlcnZpY2UpIHsgcmV0dXJuICdJTlRFUk5BTCcgaW4gc2VydmljZTsgfSkgLy8gbGVnYWN5IHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzZXJ2aWNlKSB7IHJldHVybiBzZXJ2aWNlLklOVEVSTkFMLmRlbGV0ZSgpOyB9KSwgc2VydmljZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzZXJ2aWNlKSB7IHJldHVybiAnX2RlbGV0ZScgaW4gc2VydmljZTsgfSkgLy8gbW9kdWxhcml6ZWQgc2VydmljZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHNlcnZpY2UpIHsgcmV0dXJuIHNlcnZpY2UuX2RlbGV0ZSgpOyB9KSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuaXNDb21wb25lbnRTZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ICE9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2UgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzLmdldChpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlICYmIHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gdGhpcy5jb21wb25lbnQuaW5zdGFuY2VGYWN0b3J5KHRoaXMuY29udGFpbmVyLCBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpZGVudGlmaWVyKSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzLnNldChpZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZSB8fCBudWxsO1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBpZGVudGlmaWVyIDogREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7IC8vIGFzc3VtZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIHN1cHBvcnRlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xyXG59KCkpO1xyXG4vLyB1bmRlZmluZWQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgc2VydmljZSBmYWN0b3J5IGZvciB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG5mdW5jdGlvbiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpZGVudGlmaWVyKSB7XHJcbiAgICByZXR1cm4gaWRlbnRpZmllciA9PT0gREVGQVVMVF9FTlRSWV9OQU1FID8gdW5kZWZpbmVkIDogaWRlbnRpZmllcjtcclxufVxyXG5mdW5jdGlvbiBpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIGNvbXBvbmVudC5pbnN0YW50aWF0aW9uTW9kZSA9PT0gXCJFQUdFUlwiIC8qIEVBR0VSICovO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDb21wb25lbnRDb250YWluZXIgdGhhdCBwcm92aWRlcyBQcm92aWRlcnMgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXHJcbiAqL1xyXG52YXIgQ29tcG9uZW50Q29udGFpbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50Q29udGFpbmVyKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgYmVpbmcgYWRkZWRcclxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgV2hlbiBhIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLFxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIHRydWU6IG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgY29tcG9uZW50IHdpdGggdGhlIG5ldyBjb21wb25lbnQgYW5kIGNyZWF0ZSBhIG5ld1xyXG4gICAgICogcHJvdmlkZXIgd2l0aCB0aGUgbmV3IGNvbXBvbmVudC4gSXQgY2FuIGJlIHVzZWZ1bCBpbiB0ZXN0cyB3aGVyZSB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IG1vY2tzXHJcbiAgICAgKiBmb3IgZGlmZmVyZW50IHRlc3RzLlxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIGZhbHNlOiB0aHJvdyBhbiBleGNlcHRpb25cclxuICAgICAqL1xyXG4gICAgQ29tcG9uZW50Q29udGFpbmVyLnByb3RvdHlwZS5hZGRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9uZW50IFwiICsgY29tcG9uZW50Lm5hbWUgKyBcIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCBcIiArIHRoaXMubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3ZpZGVyLnNldENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfTtcclxuICAgIENvbXBvbmVudENvbnRhaW5lci5wcm90b3R5cGUuYWRkT3JPdmVyd3JpdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgLy8gZGVsZXRlIHRoZSBleGlzdGluZyBwcm92aWRlciBmcm9tIHRoZSBjb250YWluZXIsIHNvIHdlIGNhbiByZWdpc3RlciB0aGUgbmV3IGNvbXBvbmVudFxyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVycy5kZWxldGUoY29tcG9uZW50Lm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogZ2V0UHJvdmlkZXIgcHJvdmlkZXMgYSB0eXBlIHNhZmUgaW50ZXJmYWNlIHdoZXJlIGl0IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgZmllbGQgbmFtZVxyXG4gICAgICogcHJlc2VudCBpbiBOYW1lU2VydmljZU1hcHBpbmcgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEZpcmViYXNlIFNES3MgcHJvdmlkaW5nIHNlcnZpY2VzIHNob3VsZCBleHRlbmQgTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZSB0byByZWdpc3RlclxyXG4gICAgICogdGhlbXNlbHZlcy5cclxuICAgICAqL1xyXG4gICAgQ29tcG9uZW50Q29udGFpbmVyLnByb3RvdHlwZS5nZXRQcm92aWRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvdmlkZXJzLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcnMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjcmVhdGUgYSBQcm92aWRlciBmb3IgYSBzZXJ2aWNlIHRoYXQgaGFzbid0IHJlZ2lzdGVyZWQgd2l0aCBGaXJlYmFzZVxyXG4gICAgICAgIHZhciBwcm92aWRlciA9IG5ldyBQcm92aWRlcihuYW1lLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmFtZSwgcHJvdmlkZXIpO1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcclxuICAgIH07XHJcbiAgICBDb21wb25lbnRDb250YWluZXIucHJvdG90eXBlLmdldFByb3ZpZGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnByb3ZpZGVycy52YWx1ZXMoKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbXBvbmVudENvbnRhaW5lcjtcclxufSgpKTtcblxuZXhwb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb250YWluZXIsIFByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2E7XHJcbi8qKlxyXG4gKiBBIGNvbnRhaW5lciBmb3IgYWxsIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2VzXHJcbiAqL1xyXG52YXIgaW5zdGFuY2VzID0gW107XHJcbi8qKlxyXG4gKiBUaGUgSlMgU0RLIHN1cHBvcnRzIDUgbG9nIGxldmVscyBhbmQgYWxzbyBhbGxvd3MgYSB1c2VyIHRoZSBhYmlsaXR5IHRvXHJcbiAqIHNpbGVuY2UgdGhlIGxvZ3MgYWx0b2dldGhlci5cclxuICpcclxuICogVGhlIG9yZGVyIGlzIGEgZm9sbG93czpcclxuICogREVCVUcgPCBWRVJCT1NFIDwgSU5GTyA8IFdBUk4gPCBFUlJPUlxyXG4gKlxyXG4gKiBBbGwgb2YgdGhlIGxvZyB0eXBlcyBhYm92ZSB0aGUgY3VycmVudCBsb2cgbGV2ZWwgd2lsbCBiZSBjYXB0dXJlZCAoaS5lLiBpZlxyXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYElORk9gLCBlcnJvcnMgd2lsbCBzdGlsbCBiZSBsb2dnZWQsIGJ1dCBgREVCVUdgIGFuZFxyXG4gKiBgVkVSQk9TRWAgbG9ncyB3aWxsIG5vdClcclxuICovXHJcbnZhciBMb2dMZXZlbDtcclxuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJERUJVR1wiXSA9IDBdID0gXCJERUJVR1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJWRVJCT1NFXCJdID0gMV0gPSBcIlZFUkJPU0VcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiSU5GT1wiXSA9IDJdID0gXCJJTkZPXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIldBUk5cIl0gPSAzXSA9IFwiV0FSTlwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFUlJPUlwiXSA9IDRdID0gXCJFUlJPUlwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJTSUxFTlRcIl0gPSA1XSA9IFwiU0lMRU5UXCI7XHJcbn0pKExvZ0xldmVsIHx8IChMb2dMZXZlbCA9IHt9KSk7XHJcbnZhciBsZXZlbFN0cmluZ1RvRW51bSA9IHtcclxuICAgICdkZWJ1Zyc6IExvZ0xldmVsLkRFQlVHLFxyXG4gICAgJ3ZlcmJvc2UnOiBMb2dMZXZlbC5WRVJCT1NFLFxyXG4gICAgJ2luZm8nOiBMb2dMZXZlbC5JTkZPLFxyXG4gICAgJ3dhcm4nOiBMb2dMZXZlbC5XQVJOLFxyXG4gICAgJ2Vycm9yJzogTG9nTGV2ZWwuRVJST1IsXHJcbiAgICAnc2lsZW50JzogTG9nTGV2ZWwuU0lMRU5UXHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgbGV2ZWxcclxuICovXHJcbnZhciBkZWZhdWx0TG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPO1xyXG4vKipcclxuICogQnkgZGVmYXVsdCwgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBkaXNwbGF5ZWQgaW4gdGhlIGRldmVsb3BlciBjb25zb2xlIChpblxyXG4gKiBjaHJvbWUpLiBUbyBhdm9pZCBmb3JjaW5nIHVzZXJzIHRvIGhhdmUgdG8gb3B0LWluIHRvIHRoZXNlIGxvZ3MgdHdpY2VcclxuICogKGkuZS4gb25jZSBmb3IgZmlyZWJhc2UsIGFuZCBvbmNlIGluIHRoZSBjb25zb2xlKSwgd2UgYXJlIHNlbmRpbmcgYERFQlVHYFxyXG4gKiBsb2dzIHRvIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uLlxyXG4gKi9cclxudmFyIENvbnNvbGVNZXRob2QgPSAoX2EgPSB7fSxcclxuICAgIF9hW0xvZ0xldmVsLkRFQlVHXSA9ICdsb2cnLFxyXG4gICAgX2FbTG9nTGV2ZWwuVkVSQk9TRV0gPSAnbG9nJyxcclxuICAgIF9hW0xvZ0xldmVsLklORk9dID0gJ2luZm8nLFxyXG4gICAgX2FbTG9nTGV2ZWwuV0FSTl0gPSAnd2FybicsXHJcbiAgICBfYVtMb2dMZXZlbC5FUlJPUl0gPSAnZXJyb3InLFxyXG4gICAgX2EpO1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGhhbmRsZXIgd2lsbCBmb3J3YXJkIERFQlVHLCBWRVJCT1NFLCBJTkZPLCBXQVJOLCBhbmQgRVJST1JcclxuICogbWVzc2FnZXMgb24gdG8gdGhlaXIgY29ycmVzcG9uZGluZyBjb25zb2xlIGNvdW50ZXJwYXJ0cyAoaWYgdGhlIGxvZyBtZXRob2RcclxuICogaXMgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGxvZyBsZXZlbClcclxuICovXHJcbnZhciBkZWZhdWx0TG9nSGFuZGxlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbG9nVHlwZSkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChsb2dUeXBlIDwgaW5zdGFuY2UubG9nTGV2ZWwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgdmFyIG1ldGhvZCA9IENvbnNvbGVNZXRob2RbbG9nVHlwZV07XHJcbiAgICBpZiAobWV0aG9kKSB7XHJcbiAgICAgICAgY29uc29sZVttZXRob2RdLmFwcGx5KGNvbnNvbGUsIF9fc3ByZWFkQXJyYXlzKFtcIltcIiArIG5vdyArIFwiXSAgXCIgKyBpbnN0YW5jZS5uYW1lICsgXCI6XCJdLCBhcmdzKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gbG9nIGEgbWVzc2FnZSB3aXRoIGFuIGludmFsaWQgbG9nVHlwZSAodmFsdWU6IFwiICsgbG9nVHlwZSArIFwiKVwiKTtcclxuICAgIH1cclxufTtcclxudmFyIExvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZXMgeW91IGFuIGluc3RhbmNlIG9mIGEgTG9nZ2VyIHRvIGNhcHR1cmUgbWVzc2FnZXMgYWNjb3JkaW5nIHRvXHJcbiAgICAgKiBGaXJlYmFzZSdzIGxvZ2dpbmcgc2NoZW1lLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRoYXQgdGhlIGxvZ3Mgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2cgbGV2ZWwgb2YgdGhlIGdpdmVuIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IGRlZmF1bHRMb2dMZXZlbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFpbiAoaW50ZXJuYWwpIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqIENhbiBiZSBzZXQgdG8gYSBuZXcgZnVuY3Rpb24gaW4gaW50ZXJuYWwgcGFja2FnZSBjb2RlIGJ1dCBub3QgYnkgdXNlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gZGVmYXVsdExvZ0hhbmRsZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9wdGlvbmFsLCBhZGRpdGlvbmFsLCB1c2VyLWRlZmluZWQgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhcHR1cmUgdGhlIGN1cnJlbnQgaW5zdGFuY2UgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluc3RhbmNlcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvZ2dlci5wcm90b3R5cGUsIFwibG9nTGV2ZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nTGV2ZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKCEodmFsIGluIExvZ0xldmVsKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgdmFsdWUgXFxcIlwiICsgdmFsICsgXCJcXFwiIGFzc2lnbmVkIHRvIGBsb2dMZXZlbGBcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLy8gV29ya2Fyb3VuZCBmb3Igc2V0dGVyL2dldHRlciBoYXZpbmcgdG8gYmUgdGhlIHNhbWUgdHlwZS5cclxuICAgIExvZ2dlci5wcm90b3R5cGUuc2V0TG9nTGV2ZWwgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IGxldmVsU3RyaW5nVG9FbnVtW3ZhbF0gOiB2YWw7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvZ2dlci5wcm90b3R5cGUsIFwibG9nSGFuZGxlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2dIYW5kbGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBhc3NpZ25lZCB0byBgbG9nSGFuZGxlcmAgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbG9nSGFuZGxlciA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9nZ2VyLnByb3RvdHlwZSwgXCJ1c2VyTG9nSGFuZGxlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyTG9nSGFuZGxlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBmdW5jdGlvbnMgYmVsb3cgYXJlIGFsbCBiYXNlZCBvbiB0aGUgYGNvbnNvbGVgIGludGVyZmFjZVxyXG4gICAgICovXHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuREVCVUddLCBhcmdzKSk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuREVCVUddLCBhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5WRVJCT1NFXSwgYXJncykpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLlZFUkJPU0VdLCBhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuSU5GT10sIGFyZ3MpKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5JTkZPXSwgYXJncykpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLldBUk5dLCBhcmdzKSk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuV0FSTl0sIGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuRVJST1JdLCBhcmdzKSk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuRVJST1JdLCBhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIExvZ2dlcjtcclxufSgpKTtcclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcclxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0KSB7XHJcbiAgICAgICAgaW5zdC5zZXRMb2dMZXZlbChsZXZlbCk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgY3VzdG9tTG9nTGV2ZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGV2ZWwpIHtcclxuICAgICAgICAgICAgY3VzdG9tTG9nTGV2ZWwgPSBsZXZlbFN0cmluZ1RvRW51bVtvcHRpb25zLmxldmVsXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvZ0NhbGxiYWNrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gYXJnc1xyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFyZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmc7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA+PSAoY3VzdG9tTG9nTGV2ZWwgIT09IG51bGwgJiYgY3VzdG9tTG9nTGV2ZWwgIT09IHZvaWQgMCA/IGN1c3RvbUxvZ0xldmVsIDogaW5zdGFuY2UubG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogTG9nTGV2ZWxbbGV2ZWxdLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGluc3RhbmNlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBpbnN0YW5jZXNfMSA9IGluc3RhbmNlczsgX2kgPCBpbnN0YW5jZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNfMVtfaV07XHJcbiAgICAgICAgX2xvb3BfMShpbnN0YW5jZSk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTG9nTGV2ZWwsIExvZ2dlciwgc2V0TG9nTGV2ZWwsIHNldFVzZXJMb2dIYW5kbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBfX3ZhbHVlcywgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIGRlZXBDb3B5LCBjb250YWlucywgZGVlcEV4dGVuZCwgY3JlYXRlU3Vic2NyaWJlLCBpc0Jyb3dzZXIsIGlzTm9kZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciwgQ29tcG9uZW50IH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dnZXIsIHNldExvZ0xldmVsLCBzZXRVc2VyTG9nSGFuZGxlciB9IGZyb20gJ0BmaXJlYmFzZS9sb2dnZXInO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2E7XHJcbnZhciBFUlJPUlMgPSAoX2EgPSB7fSxcclxuICAgIF9hW1wibm8tYXBwXCIgLyogTk9fQVBQICovXSA9IFwiTm8gRmlyZWJhc2UgQXBwICd7JGFwcE5hbWV9JyBoYXMgYmVlbiBjcmVhdGVkIC0gXCIgK1xyXG4gICAgICAgICdjYWxsIEZpcmViYXNlIEFwcC5pbml0aWFsaXplQXBwKCknLFxyXG4gICAgX2FbXCJiYWQtYXBwLW5hbWVcIiAvKiBCQURfQVBQX05BTUUgKi9dID0gXCJJbGxlZ2FsIEFwcCBuYW1lOiAneyRhcHBOYW1lfVwiLFxyXG4gICAgX2FbXCJkdXBsaWNhdGUtYXBwXCIgLyogRFVQTElDQVRFX0FQUCAqL10gPSBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRhcHBOYW1lfScgYWxyZWFkeSBleGlzdHNcIixcclxuICAgIF9hW1wiYXBwLWRlbGV0ZWRcIiAvKiBBUFBfREVMRVRFRCAqL10gPSBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRhcHBOYW1lfScgYWxyZWFkeSBkZWxldGVkXCIsXHJcbiAgICBfYVtcImludmFsaWQtYXBwLWFyZ3VtZW50XCIgLyogSU5WQUxJRF9BUFBfQVJHVU1FTlQgKi9dID0gJ2ZpcmViYXNlLnskYXBwTmFtZX0oKSB0YWtlcyBlaXRoZXIgbm8gYXJndW1lbnQgb3IgYSAnICtcclxuICAgICAgICAnRmlyZWJhc2UgQXBwIGluc3RhbmNlLicsXHJcbiAgICBfYVtcImludmFsaWQtbG9nLWFyZ3VtZW50XCIgLyogSU5WQUxJRF9MT0dfQVJHVU1FTlQgKi9dID0gJ0ZpcnN0IGFyZ3VtZW50IHRvIGBvbkxvZ2AgbXVzdCBiZSBudWxsIG9yIGEgZnVuY3Rpb24uJyxcclxuICAgIF9hKTtcclxudmFyIEVSUk9SX0ZBQ1RPUlkgPSBuZXcgRXJyb3JGYWN0b3J5KCdhcHAnLCAnRmlyZWJhc2UnLCBFUlJPUlMpO1xuXG52YXIgbmFtZSQxID0gXCJAZmlyZWJhc2UvYXBwXCI7XG52YXIgdmVyc2lvbiA9IFwiMC42LjEzXCI7XG5cbnZhciBuYW1lJDIgPSBcIkBmaXJlYmFzZS9hbmFseXRpY3NcIjtcblxudmFyIG5hbWUkMyA9IFwiQGZpcmViYXNlL2F1dGhcIjtcblxudmFyIG5hbWUkNCA9IFwiQGZpcmViYXNlL2RhdGFiYXNlXCI7XG5cbnZhciBuYW1lJDUgPSBcIkBmaXJlYmFzZS9mdW5jdGlvbnNcIjtcblxudmFyIG5hbWUkNiA9IFwiQGZpcmViYXNlL2luc3RhbGxhdGlvbnNcIjtcblxudmFyIG5hbWUkNyA9IFwiQGZpcmViYXNlL21lc3NhZ2luZ1wiO1xuXG52YXIgbmFtZSQ4ID0gXCJAZmlyZWJhc2UvcGVyZm9ybWFuY2VcIjtcblxudmFyIG5hbWUkOSA9IFwiQGZpcmViYXNlL3JlbW90ZS1jb25maWdcIjtcblxudmFyIG5hbWUkYSA9IFwiQGZpcmViYXNlL3N0b3JhZ2VcIjtcblxudmFyIG5hbWUkYiA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuXG52YXIgbmFtZSRjID0gXCJmaXJlYmFzZS13cmFwcGVyXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfYSQxO1xyXG52YXIgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XHJcbnZhciBQTEFURk9STV9MT0dfU1RSSU5HID0gKF9hJDEgPSB7fSxcclxuICAgIF9hJDFbbmFtZSQxXSA9ICdmaXJlLWNvcmUnLFxyXG4gICAgX2EkMVtuYW1lJDJdID0gJ2ZpcmUtYW5hbHl0aWNzJyxcclxuICAgIF9hJDFbbmFtZSQzXSA9ICdmaXJlLWF1dGgnLFxyXG4gICAgX2EkMVtuYW1lJDRdID0gJ2ZpcmUtcnRkYicsXHJcbiAgICBfYSQxW25hbWUkNV0gPSAnZmlyZS1mbicsXHJcbiAgICBfYSQxW25hbWUkNl0gPSAnZmlyZS1paWQnLFxyXG4gICAgX2EkMVtuYW1lJDddID0gJ2ZpcmUtZmNtJyxcclxuICAgIF9hJDFbbmFtZSQ4XSA9ICdmaXJlLXBlcmYnLFxyXG4gICAgX2EkMVtuYW1lJDldID0gJ2ZpcmUtcmMnLFxyXG4gICAgX2EkMVtuYW1lJGFdID0gJ2ZpcmUtZ2NzJyxcclxuICAgIF9hJDFbbmFtZSRiXSA9ICdmaXJlLWZzdCcsXHJcbiAgICBfYSQxWydmaXJlLWpzJ10gPSAnZmlyZS1qcycsXHJcbiAgICBfYSQxW25hbWUkY10gPSAnZmlyZS1qcy1hbGwnLFxyXG4gICAgX2EkMSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXBwJyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBHbG9iYWwgY29udGV4dCBvYmplY3QgZm9yIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcyB1c2luZ1xyXG4gKiBhIHNoYXJlZCBhdXRoZW50aWNhdGlvbiBzdGF0ZS5cclxuICovXHJcbnZhciBGaXJlYmFzZUFwcEltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJlYmFzZUFwcEltcGwob3B0aW9ucywgY29uZmlnLCBmaXJlYmFzZV8pIHtcclxuICAgICAgICB2YXIgZV8xLCBfYTtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VfID0gZmlyZWJhc2VfO1xyXG4gICAgICAgIHRoaXMuaXNEZWxldGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubmFtZV8gPSBjb25maWcubmFtZTtcclxuICAgICAgICB0aGlzLmF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZF8gPVxyXG4gICAgICAgICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIHx8IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub3B0aW9uc18gPSBkZWVwQ29weShvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBDb21wb25lbnRDb250YWluZXIoY29uZmlnLm5hbWUpO1xyXG4gICAgICAgIC8vIGFkZCBpdHNlbGYgdG8gY29udGFpbmVyXHJcbiAgICAgICAgdGhpcy5fYWRkQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2FwcCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzOyB9LCBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqLykpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIHBvcHVsYXRlIENvbXBvbmVudENvbnRhaW5lciB3aXRoIGV4aXN0aW5nIGNvbXBvbmVudHNcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmZpcmViYXNlXy5JTlRFUk5BTC5jb21wb25lbnRzLnZhbHVlcygpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwiYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkXygpO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZF8gPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwibmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWVfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLCBcIm9wdGlvbnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkXygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zXztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZmlyZWJhc2VfLklOVEVSTkFMLnJlbW92ZUFwcChfdGhpcy5uYW1lXyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChfdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXJzKCkubWFwKGZ1bmN0aW9uIChwcm92aWRlcikgeyByZXR1cm4gcHJvdmlkZXIuZGVsZXRlKCk7IH0pKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmlzRGVsZXRlZF8gPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgc2VydmljZSBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhcHAgKGNyZWF0aW5nIGl0XHJcbiAgICAgKiBvbiBkZW1hbmQpLCBpZGVudGlmaWVkIGJ5IHRoZSBwYXNzZWQgaW5zdGFuY2VJZGVudGlmaWVyLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IEN1cnJlbnRseSBzdG9yYWdlIGFuZCBmdW5jdGlvbnMgYXJlIHRoZSBvbmx5IG9uZXMgdGhhdCBhcmUgbGV2ZXJhZ2luZyB0aGlzXHJcbiAgICAgKiBmdW5jdGlvbmFsaXR5LiBUaGV5IGludm9rZSBpdCBieSBjYWxsaW5nOlxyXG4gICAgICpcclxuICAgICAqIGBgYGphdmFzY3JpcHRcclxuICAgICAqIGZpcmViYXNlLmFwcCgpLnN0b3JhZ2UoJ1NUT1JBR0UgQlVDS0VUIElEJylcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIFRoZSBzZXJ2aWNlIG5hbWUgaXMgcGFzc2VkIHRvIHRoaXMgYWxyZWFkeVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuX2dldFNlcnZpY2UgPSBmdW5jdGlvbiAobmFtZSwgaW5zdGFuY2VJZGVudGlmaWVyKSB7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlSWRlbnRpZmllciA9PT0gdm9pZCAwKSB7IGluc3RhbmNlSWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgLy8gZ2V0SW1tZWRpYXRlIHdpbGwgYWx3YXlzIHN1Y2NlZWQgYmVjYXVzZSBfZ2V0U2VydmljZSBpcyBvbmx5IGNhbGxlZCBmb3IgcmVnaXN0ZXJlZCBjb21wb25lbnRzLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKS5nZXRJbW1lZGlhdGUoe1xyXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBpbnN0YW5jZUlkZW50aWZpZXJcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIHNlcnZpY2UgaW5zdGFuY2UgZnJvbSB0aGUgY2FjaGUsIHNvIHdlIHdpbGwgY3JlYXRlIGEgbmV3IGluc3RhbmNlIGZvciB0aGlzIHNlcnZpY2VcclxuICAgICAqIHdoZW4gcGVvcGxlIHRyeSB0byBnZXQgdGhpcyBzZXJ2aWNlIGFnYWluLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IGN1cnJlbnRseSBvbmx5IGZpcmVzdG9yZSBpcyB1c2luZyB0aGlzIGZ1bmN0aW9uYWxpdHkgdG8gc3VwcG9ydCBmaXJlc3RvcmUgc2h1dGRvd24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIHNlcnZpY2UgbmFtZVxyXG4gICAgICogQHBhcmFtIGluc3RhbmNlSWRlbnRpZmllciBpbnN0YW5jZSBpZGVudGlmaWVyIGluIGNhc2UgbXVsdGlwbGUgaW5zdGFuY2VzIGFyZSBhbGxvd2VkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5fcmVtb3ZlU2VydmljZUluc3RhbmNlID0gZnVuY3Rpb24gKG5hbWUsIGluc3RhbmNlSWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpbnN0YW5jZUlkZW50aWZpZXIgPT09IHZvaWQgMCkgeyBpbnN0YW5jZUlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUU7IH1cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVyKG5hbWUpLmNsZWFySW5zdGFuY2UoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnQgdGhlIGNvbXBvbmVudCBiZWluZyBhZGRlZCB0byB0aGlzIGFwcCdzIGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLl9hZGRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhcIkNvbXBvbmVudCBcIiArIGNvbXBvbmVudC5uYW1lICsgXCIgZmFpbGVkIHRvIHJlZ2lzdGVyIHdpdGggRmlyZWJhc2VBcHAgXCIgKyB0aGlzLm5hbWUsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLl9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cclxuICAgICAqIHVzZSBiZWZvcmUgcGVyZm9ybWluZyBBUEkgYWN0aW9ucyBvbiB0aGUgQXBwLlxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLmNoZWNrRGVzdHJveWVkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLWRlbGV0ZWRcIiAvKiBBUFBfREVMRVRFRCAqLywgeyBhcHBOYW1lOiB0aGlzLm5hbWVfIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlyZWJhc2VBcHBJbXBsO1xyXG59KCkpO1xyXG4vLyBQcmV2ZW50IGRlYWQtY29kZSBlbGltaW5hdGlvbiBvZiB0aGVzZSBtZXRob2RzIHcvbyBpbnZhbGlkIHByb3BlcnR5XHJcbi8vIGNvcHlpbmcuXHJcbihGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLm5hbWUgJiYgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5vcHRpb25zKSB8fFxyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5kZWxldGUgfHxcclxuICAgIGNvbnNvbGUubG9nKCdkYycpO1xuXG52YXIgdmVyc2lvbiQxID0gXCI4LjAuMVwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQmVjYXVzZSBhdXRoIGNhbid0IHNoYXJlIGNvZGUgd2l0aCBvdGhlciBjb21wb25lbnRzLCB3ZSBhdHRhY2ggdGhlIHV0aWxpdHkgZnVuY3Rpb25zXHJcbiAqIGluIGFuIGludGVybmFsIG5hbWVzcGFjZSB0byBzaGFyZSBjb2RlLlxyXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybiBhIGZpcmViYXNlIG5hbWVzcGFjZSBvYmplY3Qgd2l0aG91dFxyXG4gKiBhbnkgdXRpbGl0eSBmdW5jdGlvbnMsIHNvIGl0IGNhbiBiZSBzaGFyZWQgYmV0d2VlbiB0aGUgcmVndWxhciBmaXJlYmFzZU5hbWVzcGFjZSBhbmRcclxuICogdGhlIGxpdGUgdmVyc2lvbi5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlQ29yZShmaXJlYmFzZUFwcEltcGwpIHtcclxuICAgIHZhciBhcHBzID0ge307XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgdmFyIGNvbXBvbmVudHMgPSBuZXcgTWFwKCk7XHJcbiAgICAvLyBBIG5hbWVzcGFjZSBpcyBhIHBsYWluIEphdmFTY3JpcHQgT2JqZWN0LlxyXG4gICAgdmFyIG5hbWVzcGFjZSA9IHtcclxuICAgICAgICAvLyBIYWNrIHRvIHByZXZlbnQgQmFiZWwgZnJvbSBtb2RpZnlpbmcgdGhlIG9iamVjdCByZXR1cm5lZFxyXG4gICAgICAgIC8vIGFzIHRoZSBmaXJlYmFzZSBuYW1lc3BhY2UuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgICAgICAgaW5pdGlhbGl6ZUFwcDogaW5pdGlhbGl6ZUFwcCxcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgYXBwOiBhcHAsXHJcbiAgICAgICAgcmVnaXN0ZXJWZXJzaW9uOiByZWdpc3RlclZlcnNpb24sXHJcbiAgICAgICAgc2V0TG9nTGV2ZWw6IHNldExvZ0xldmVsLFxyXG4gICAgICAgIG9uTG9nOiBvbkxvZyxcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgYXBwczogbnVsbCxcclxuICAgICAgICBTREtfVkVSU0lPTjogdmVyc2lvbiQxLFxyXG4gICAgICAgIElOVEVSTkFMOiB7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyQ29tcG9uZW50OiByZWdpc3RlckNvbXBvbmVudCxcclxuICAgICAgICAgICAgcmVtb3ZlQXBwOiByZW1vdmVBcHAsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXHJcbiAgICAgICAgICAgIHVzZUFzU2VydmljZTogdXNlQXNTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEluamVjdCBhIGNpcmN1bGFyIGRlZmF1bHQgZXhwb3J0IHRvIGFsbG93IEJhYmVsIHVzZXJzIHdobyB3ZXJlIHByZXZpb3VzbHlcclxuICAgIC8vIHVzaW5nOlxyXG4gICAgLy9cclxuICAgIC8vICAgaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlJztcclxuICAgIC8vICAgd2hpY2ggYmVjb21lczogdmFyIGZpcmViYXNlID0gcmVxdWlyZSgnZmlyZWJhc2UnKS5kZWZhdWx0O1xyXG4gICAgLy9cclxuICAgIC8vIGluc3RlYWQgb2ZcclxuICAgIC8vXHJcbiAgICAvLyAgIGltcG9ydCAqIGFzIGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlJztcclxuICAgIC8vICAgd2hpY2ggYmVjb21lczogdmFyIGZpcmViYXNlID0gcmVxdWlyZSgnZmlyZWJhc2UnKTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBuYW1lc3BhY2VbJ2RlZmF1bHQnXSA9IG5hbWVzcGFjZTtcclxuICAgIC8vIGZpcmViYXNlLmFwcHMgaXMgYSByZWFkLW9ubHkgZ2V0dGVyLlxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5hbWVzcGFjZSwgJ2FwcHMnLCB7XHJcbiAgICAgICAgZ2V0OiBnZXRBcHBzXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIGJ5IEFwcC5kZWxldGUoKSAtIGJ1dCBiZWZvcmUgYW55IHNlcnZpY2VzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQXBwXHJcbiAgICAgKiBhcmUgZGVsZXRlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQXBwKG5hbWUpIHtcclxuICAgICAgICBkZWxldGUgYXBwc1tuYW1lXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBBcHAgb2JqZWN0IGZvciBhIGdpdmVuIG5hbWUgKG9yIERFRkFVTFQpLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhcHAobmFtZSkge1xyXG4gICAgICAgIG5hbWUgPSBuYW1lIHx8IERFRkFVTFRfRU5UUllfTkFNRTtcclxuICAgICAgICBpZiAoIWNvbnRhaW5zKGFwcHMsIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwXCIgLyogTk9fQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcHBzW25hbWVdO1xyXG4gICAgfVxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgYXBwWydBcHAnXSA9IGZpcmViYXNlQXBwSW1wbDtcclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVBcHAob3B0aW9ucywgcmF3Q29uZmlnKSB7XHJcbiAgICAgICAgaWYgKHJhd0NvbmZpZyA9PT0gdm9pZCAwKSB7IHJhd0NvbmZpZyA9IHt9OyB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiByYXdDb25maWcgIT09ICdvYmplY3QnIHx8IHJhd0NvbmZpZyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gcmF3Q29uZmlnO1xyXG4gICAgICAgICAgICByYXdDb25maWcgPSB7IG5hbWU6IG5hbWVfMSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29uZmlnID0gcmF3Q29uZmlnO1xyXG4gICAgICAgIGlmIChjb25maWcubmFtZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbmZpZy5uYW1lID0gREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgIW5hbWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJiYWQtYXBwLW5hbWVcIiAvKiBCQURfQVBQX05BTUUgKi8sIHtcclxuICAgICAgICAgICAgICAgIGFwcE5hbWU6IFN0cmluZyhuYW1lKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRhaW5zKGFwcHMsIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZHVwbGljYXRlLWFwcFwiIC8qIERVUExJQ0FURV9BUFAgKi8sIHsgYXBwTmFtZTogbmFtZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFwcCA9IG5ldyBmaXJlYmFzZUFwcEltcGwob3B0aW9ucywgY29uZmlnLCBuYW1lc3BhY2UpO1xyXG4gICAgICAgIGFwcHNbbmFtZV0gPSBhcHA7XHJcbiAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgIH1cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgYWxsIHRoZSBub24tZGVsZXRlZCBGaXJlYmFzZUFwcHMuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldEFwcHMoKSB7XHJcbiAgICAgICAgLy8gTWFrZSBhIGNvcHkgc28gY2FsbGVyIGNhbm5vdCBtdXRhdGUgdGhlIGFwcHMgbGlzdC5cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXBwcykubWFwKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBhcHBzW25hbWVdOyB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBlXzEsIF9hO1xyXG4gICAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50Lm5hbWU7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudHMuaGFzKGNvbXBvbmVudE5hbWUpKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhcIlRoZXJlIHdlcmUgbXVsdGlwbGUgYXR0ZW1wdHMgdG8gcmVnaXN0ZXIgY29tcG9uZW50IFwiICsgY29tcG9uZW50TmFtZSArIFwiLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudC50eXBlID09PSBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqL1xyXG4gICAgICAgICAgICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZVtjb21wb25lbnROYW1lXVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb21wb25lbnRzLnNldChjb21wb25lbnROYW1lLCBjb21wb25lbnQpO1xyXG4gICAgICAgIC8vIGNyZWF0ZSBzZXJ2aWNlIG5hbWVzcGFjZSBmb3IgcHVibGljIGNvbXBvbmVudHNcclxuICAgICAgICBpZiAoY29tcG9uZW50LnR5cGUgPT09IFwiUFVCTElDXCIgLyogUFVCTElDICovKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBTZXJ2aWNlIG5hbWVzcGFjZSBpcyBhbiBhY2Nlc3NvciBmdW5jdGlvbiAuLi5cclxuICAgICAgICAgICAgdmFyIHNlcnZpY2VOYW1lc3BhY2UgPSBmdW5jdGlvbiAoYXBwQXJnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwQXJnID09PSB2b2lkIDApIHsgYXBwQXJnID0gYXBwKCk7IH1cclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFwcEFyZ1tjb21wb25lbnROYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgYXJndW1lbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIGluIHRoZSBmb2xsb3dpbmcgY2FzZTogZmlyZWJhc2Uuc3RvcmFnZSgnZ3M6LycpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnZhbGlkLWFwcC1hcmd1bWVudFwiIC8qIElOVkFMSURfQVBQX0FSR1VNRU5UICovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcE5hbWU6IGNvbXBvbmVudE5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEZvcndhcmQgc2VydmljZSBpbnN0YW5jZSBsb29rdXAgdG8gdGhlIEZpcmViYXNlQXBwLlxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHBBcmdbY29tcG9uZW50TmFtZV0oKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gLi4uIGFuZCBhIGNvbnRhaW5lciBmb3Igc2VydmljZS1sZXZlbCBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LnNlcnZpY2VQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkZWVwRXh0ZW5kKHNlcnZpY2VOYW1lc3BhY2UsIGNvbXBvbmVudC5zZXJ2aWNlUHJvcHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgIG5hbWVzcGFjZVtjb21wb25lbnROYW1lXSA9IHNlcnZpY2VOYW1lc3BhY2U7XHJcbiAgICAgICAgICAgIC8vIFBhdGNoIHRoZSBGaXJlYmFzZUFwcEltcGwgcHJvdG90eXBlXHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgIGZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGVbY29tcG9uZW50TmFtZV0gPVxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVGhlIGVzbGludCBkaXNhYmxlIGNhbiBiZSByZW1vdmVkIGFuZCB0aGUgJ2lnbm9yZVJlc3RBcmdzJ1xyXG4gICAgICAgICAgICAgICAgLy8gb3B0aW9uIGFkZGVkIHRvIHRoZSBuby1leHBsaWNpdC1hbnkgcnVsZSB3aGVuIEVTbGludCByZWxlYXNlcyBpdC5cclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlRnhuID0gdGhpcy5fZ2V0U2VydmljZS5iaW5kKHRoaXMsIGNvbXBvbmVudE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlRnhuLmFwcGx5KHRoaXMsIGNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyA/IGFyZ3MgOiBbXSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCB0byBleGlzdGluZyBhcHAgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoT2JqZWN0LmtleXMoYXBwcykpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwTmFtZSA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYXBwc1thcHBOYW1lXS5fYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb21wb25lbnQudHlwZSA9PT0gXCJQVUJMSUNcIiAvKiBQVUJMSUMgKi9cclxuICAgICAgICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlW2NvbXBvbmVudE5hbWVdXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyVmVyc2lvbihsaWJyYXJ5S2V5T3JOYW1lLCB2ZXJzaW9uLCB2YXJpYW50KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIFRPRE86IFdlIGNhbiB1c2UgdGhpcyBjaGVjayB0byB3aGl0ZWxpc3Qgc3RyaW5ncyB3aGVuL2lmIHdlIHNldCB1cFxyXG4gICAgICAgIC8vIGEgZ29vZCB3aGl0ZWxpc3Qgc3lzdGVtLlxyXG4gICAgICAgIHZhciBsaWJyYXJ5ID0gKF9hID0gUExBVEZPUk1fTE9HX1NUUklOR1tsaWJyYXJ5S2V5T3JOYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbGlicmFyeUtleU9yTmFtZTtcclxuICAgICAgICBpZiAodmFyaWFudCkge1xyXG4gICAgICAgICAgICBsaWJyYXJ5ICs9IFwiLVwiICsgdmFyaWFudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxpYnJhcnlNaXNtYXRjaCA9IGxpYnJhcnkubWF0Y2goL1xcc3xcXC8vKTtcclxuICAgICAgICB2YXIgdmVyc2lvbk1pc21hdGNoID0gdmVyc2lvbi5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2ggfHwgdmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgIHZhciB3YXJuaW5nID0gW1xyXG4gICAgICAgICAgICAgICAgXCJVbmFibGUgdG8gcmVnaXN0ZXIgbGlicmFyeSBcXFwiXCIgKyBsaWJyYXJ5ICsgXCJcXFwiIHdpdGggdmVyc2lvbiBcXFwiXCIgKyB2ZXJzaW9uICsgXCJcXFwiOlwiXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHdhcm5pbmcucHVzaChcImxpYnJhcnkgbmFtZSBcXFwiXCIgKyBsaWJyYXJ5ICsgXCJcXFwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcXFwiL1xcXCIpXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2ggJiYgdmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuaW5nLnB1c2goJ2FuZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHdhcm5pbmcucHVzaChcInZlcnNpb24gbmFtZSBcXFwiXCIgKyB2ZXJzaW9uICsgXCJcXFwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcXFwiL1xcXCIpXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKHdhcm5pbmcuam9pbignICcpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KGxpYnJhcnkgKyBcIi12ZXJzaW9uXCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IGxpYnJhcnk6IGxpYnJhcnksIHZlcnNpb246IHZlcnNpb24gfSk7IH0sIFwiVkVSU0lPTlwiIC8qIFZFUlNJT04gKi8pKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG9uTG9nKGxvZ0NhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKGxvZ0NhbGxiYWNrICE9PSBudWxsICYmIHR5cGVvZiBsb2dDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtbG9nLWFyZ3VtZW50XCIgLyogSU5WQUxJRF9MT0dfQVJHVU1FTlQgKi8sIHtcclxuICAgICAgICAgICAgICAgIGFwcE5hbWU6IG5hbWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFVzZXJMb2dIYW5kbGVyKGxvZ0NhbGxiYWNrLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIC8vIE1hcCB0aGUgcmVxdWVzdGVkIHNlcnZpY2UgdG8gYSByZWdpc3RlcmVkIHNlcnZpY2UgbmFtZVxyXG4gICAgLy8gKHVzZWQgdG8gbWFwIGF1dGggdG8gc2VydmVyQXV0aCBzZXJ2aWNlIHdoZW4gbmVlZGVkKS5cclxuICAgIGZ1bmN0aW9uIHVzZUFzU2VydmljZShhcHAsIG5hbWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ3NlcnZlckF1dGgnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdXNlU2VydmljZSA9IG5hbWU7XHJcbiAgICAgICAgcmV0dXJuIHVzZVNlcnZpY2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZXNwYWNlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm4gYSBmaXJlYmFzZSBuYW1lc3BhY2Ugb2JqZWN0LlxyXG4gKlxyXG4gKiBJbiBwcm9kdWN0aW9uLCB0aGlzIHdpbGwgYmUgY2FsbGVkIGV4YWN0bHkgb25jZSBhbmQgdGhlIHJlc3VsdFxyXG4gKiBhc3NpZ25lZCB0byB0aGUgJ2ZpcmViYXNlJyBnbG9iYWwuICBJdCBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzXHJcbiAqIGluIHVuaXQgdGVzdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSgpIHtcclxuICAgIHZhciBuYW1lc3BhY2UgPSBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZUNvcmUoRmlyZWJhc2VBcHBJbXBsKTtcclxuICAgIG5hbWVzcGFjZS5JTlRFUk5BTCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuYW1lc3BhY2UuSU5URVJOQUwpLCB7IGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlOiBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSxcclxuICAgICAgICBleHRlbmROYW1lc3BhY2U6IGV4dGVuZE5hbWVzcGFjZSxcclxuICAgICAgICBjcmVhdGVTdWJzY3JpYmU6IGNyZWF0ZVN1YnNjcmliZSxcclxuICAgICAgICBFcnJvckZhY3Rvcnk6IEVycm9yRmFjdG9yeSxcclxuICAgICAgICBkZWVwRXh0ZW5kOiBkZWVwRXh0ZW5kIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXRjaCB0aGUgdG9wLWxldmVsIGZpcmViYXNlIG5hbWVzcGFjZSB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcy5cclxuICAgICAqXHJcbiAgICAgKiBmaXJlYmFzZS5JTlRFUk5BTC5leHRlbmROYW1lc3BhY2UoKVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBleHRlbmROYW1lc3BhY2UocHJvcHMpIHtcclxuICAgICAgICBkZWVwRXh0ZW5kKG5hbWVzcGFjZSwgcHJvcHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVzcGFjZTtcclxufVxyXG52YXIgZmlyZWJhc2UgPSBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSgpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlKGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgfVxyXG4gICAgLy8gSW4gaW5pdGlhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3aWxsIGJlIGNhbGxlZCBieSBpbnN0YWxsYXRpb25zIG9uXHJcbiAgICAvLyBhdXRoIHRva2VuIHJlZnJlc2gsIGFuZCBpbnN0YWxsYXRpb25zIHdpbGwgc2VuZCB0aGlzIHN0cmluZy5cclxuICAgIFBsYXRmb3JtTG9nZ2VyU2VydmljZS5wcm90b3R5cGUuZ2V0UGxhdGZvcm1JbmZvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwcm92aWRlcnMgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcnMoKTtcclxuICAgICAgICAvLyBMb29wIHRocm91Z2ggcHJvdmlkZXJzIGFuZCBnZXQgbGlicmFyeS92ZXJzaW9uIHBhaXJzIGZyb20gYW55IHRoYXQgYXJlXHJcbiAgICAgICAgLy8gdmVyc2lvbiBjb21wb25lbnRzLlxyXG4gICAgICAgIHJldHVybiBwcm92aWRlcnNcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgaWYgKGlzVmVyc2lvblNlcnZpY2VQcm92aWRlcihwcm92aWRlcikpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlID0gcHJvdmlkZXIuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5saWJyYXJ5ICsgXCIvXCIgKyBzZXJ2aWNlLnZlcnNpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGxvZ1N0cmluZykgeyByZXR1cm4gbG9nU3RyaW5nOyB9KVxyXG4gICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQbGF0Zm9ybUxvZ2dlclNlcnZpY2U7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJvdmlkZXIgY2hlY2sgaWYgdGhpcyBwcm92aWRlciBwcm92aWRlcyBhIFZlcnNpb25TZXJ2aWNlXHJcbiAqXHJcbiAqIE5PVEU6IFVzaW5nIFByb3ZpZGVyPCdhcHAtdmVyc2lvbic+IGlzIGEgaGFjayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcm92aWRlclxyXG4gKiBwcm92aWRlcyBWZXJzaW9uU2VydmljZS4gVGhlIHByb3ZpZGVyIGlzIG5vdCBuZWNlc3NhcmlseSBhICdhcHAtdmVyc2lvbidcclxuICogcHJvdmlkZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIocHJvdmlkZXIpIHtcclxuICAgIHZhciBjb21wb25lbnQgPSBwcm92aWRlci5nZXRDb21wb25lbnQoKTtcclxuICAgIHJldHVybiAoY29tcG9uZW50ID09PSBudWxsIHx8IGNvbXBvbmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcG9uZW50LnR5cGUpID09PSBcIlZFUlNJT05cIiAvKiBWRVJTSU9OICovO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQ29yZUNvbXBvbmVudHMoZmlyZWJhc2UsIHZhcmlhbnQpIHtcclxuICAgIGZpcmViYXNlLklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ3BsYXRmb3JtLWxvZ2dlcicsIGZ1bmN0aW9uIChjb250YWluZXIpIHsgcmV0dXJuIG5ldyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2UoY29udGFpbmVyKTsgfSwgXCJQUklWQVRFXCIgLyogUFJJVkFURSAqLykpO1xyXG4gICAgLy8gUmVnaXN0ZXIgYGFwcGAgcGFja2FnZS5cclxuICAgIGZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbihuYW1lJDEsIHZlcnNpb24sIHZhcmlhbnQpO1xyXG4gICAgLy8gUmVnaXN0ZXIgcGxhdGZvcm0gU0RLIGlkZW50aWZpZXIgKG5vIHZlcnNpb24pLlxyXG4gICAgZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKCdmaXJlLWpzJywgJycpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIEZpcmViYXNlIExpdGUgZGV0ZWN0aW9uIHRlc3RcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuaWYgKGlzQnJvd3NlcigpICYmIHNlbGYuZmlyZWJhc2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgbG9nZ2VyLndhcm4oXCJcXG4gICAgV2FybmluZzogRmlyZWJhc2UgaXMgYWxyZWFkeSBkZWZpbmVkIGluIHRoZSBnbG9iYWwgc2NvcGUuIFBsZWFzZSBtYWtlIHN1cmVcXG4gICAgRmlyZWJhc2UgbGlicmFyeSBpcyBvbmx5IGxvYWRlZCBvbmNlLlxcbiAgXCIpO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICB2YXIgc2RrVmVyc2lvbiA9IHNlbGYuZmlyZWJhc2UuU0RLX1ZFUlNJT047XHJcbiAgICBpZiAoc2RrVmVyc2lvbiAmJiBzZGtWZXJzaW9uLmluZGV4T2YoJ0xJVEUnKSA+PSAwKSB7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJcXG4gICAgV2FybmluZzogWW91IGFyZSB0cnlpbmcgdG8gbG9hZCBGaXJlYmFzZSB3aGlsZSB1c2luZyBGaXJlYmFzZSBQZXJmb3JtYW5jZSBzdGFuZGFsb25lIHNjcmlwdC5cXG4gICAgWW91IHNob3VsZCBsb2FkIEZpcmViYXNlIFBlcmZvcm1hbmNlIHdpdGggdGhpcyBpbnN0YW5jZSBvZiBGaXJlYmFzZSB0byBhdm9pZCBsb2FkaW5nIGR1cGxpY2F0ZSBjb2RlLlxcbiAgICBcIik7XHJcbiAgICB9XHJcbn1cclxudmFyIGluaXRpYWxpemVBcHAgPSBmaXJlYmFzZS5pbml0aWFsaXplQXBwO1xyXG4vLyBUT0RPOiBUaGlzIGRpc2FibGUgY2FuIGJlIHJlbW92ZWQgYW5kIHRoZSAnaWdub3JlUmVzdEFyZ3MnIG9wdGlvbiBhZGRlZCB0b1xyXG4vLyB0aGUgbm8tZXhwbGljaXQtYW55IHJ1bGUgd2hlbiBFU2xpbnQgcmVsZWFzZXMgaXQuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmZpcmViYXNlLmluaXRpYWxpemVBcHAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICAvLyBFbnZpcm9ubWVudCBjaGVjayBiZWZvcmUgaW5pdGlhbGl6aW5nIGFwcFxyXG4gICAgLy8gRG8gdGhlIGNoZWNrIGluIGluaXRpYWxpemVBcHAsIHNvIHBlb3BsZSBoYXZlIGEgY2hhbmNlIHRvIGRpc2FibGUgaXQgYnkgc2V0dGluZyBsb2dMZXZlbFxyXG4gICAgLy8gaW4gQGZpcmViYXNlL2xvZ2dlclxyXG4gICAgaWYgKGlzTm9kZSgpKSB7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJcXG4gICAgICBXYXJuaW5nOiBUaGlzIGlzIGEgYnJvd3Nlci10YXJnZXRlZCBGaXJlYmFzZSBidW5kbGUgYnV0IGl0IGFwcGVhcnMgaXQgaXMgYmVpbmdcXG4gICAgICBydW4gaW4gYSBOb2RlIGVudmlyb25tZW50LiAgSWYgcnVubmluZyBpbiBhIE5vZGUgZW52aXJvbm1lbnQsIG1ha2Ugc3VyZSB5b3VcXG4gICAgICBhcmUgdXNpbmcgdGhlIGJ1bmRsZSBzcGVjaWZpZWQgYnkgdGhlIFxcXCJtYWluXFxcIiBmaWVsZCBpbiBwYWNrYWdlLmpzb24uXFxuICAgICAgXFxuICAgICAgSWYgeW91IGFyZSB1c2luZyBXZWJwYWNrLCB5b3UgY2FuIHNwZWNpZnkgXFxcIm1haW5cXFwiIGFzIHRoZSBmaXJzdCBpdGVtIGluXFxuICAgICAgXFxcInJlc29sdmUubWFpbkZpZWxkc1xcXCI6XFxuICAgICAgaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL3Jlc29sdmUvI3Jlc29sdmVtYWluZmllbGRzXFxuICAgICAgXFxuICAgICAgSWYgdXNpbmcgUm9sbHVwLCB1c2UgdGhlIEByb2xsdXAvcGx1Z2luLW5vZGUtcmVzb2x2ZSBwbHVnaW4gYW5kIHNwZWNpZnkgXFxcIm1haW5cXFwiXFxuICAgICAgYXMgdGhlIGZpcnN0IGl0ZW0gaW4gXFxcIm1haW5GaWVsZHNcXFwiLCBlLmcuIFsnbWFpbicsICdtb2R1bGUnXS5cXG4gICAgICBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL0Byb2xsdXAvcGx1Z2luLW5vZGUtcmVzb2x2ZVxcbiAgICAgIFwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbml0aWFsaXplQXBwLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XHJcbn07XHJcbnZhciBmaXJlYmFzZSQxID0gZmlyZWJhc2U7XHJcbnJlZ2lzdGVyQ29yZUNvbXBvbmVudHMoZmlyZWJhc2UkMSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZpcmViYXNlJDE7XG5leHBvcnQgeyBmaXJlYmFzZSQxIGFzIGZpcmViYXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJpbXBvcnQgZmlyZWJhc2UgZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5leHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbnZhciBuYW1lID0gXCJmaXJlYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjguMC4yXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnYXBwJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJpbXBvcnQgZmlyZWJhc2UgZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fc3ByZWFkLCBfX3ZhbHVlcywgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBvcGVuRGIgfSBmcm9tICdpZGInO1xuXG52YXIgbmFtZSA9IFwiQGZpcmViYXNlL2luc3RhbGxhdGlvbnNcIjtcbnZhciB2ZXJzaW9uID0gXCIwLjQuMTlcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIFBFTkRJTkdfVElNRU9VVF9NUyA9IDEwMDAwO1xyXG52YXIgUEFDS0FHRV9WRVJTSU9OID0gXCJ3OlwiICsgdmVyc2lvbjtcclxudmFyIElOVEVSTkFMX0FVVEhfVkVSU0lPTiA9ICdGSVNfdjInO1xyXG52YXIgSU5TVEFMTEFUSU9OU19BUElfVVJMID0gJ2h0dHBzOi8vZmlyZWJhc2VpbnN0YWxsYXRpb25zLmdvb2dsZWFwaXMuY29tL3YxJztcclxudmFyIFRPS0VOX0VYUElSQVRJT05fQlVGRkVSID0gNjAgKiA2MCAqIDEwMDA7IC8vIE9uZSBob3VyXHJcbnZhciBTRVJWSUNFID0gJ2luc3RhbGxhdGlvbnMnO1xyXG52YXIgU0VSVklDRV9OQU1FID0gJ0luc3RhbGxhdGlvbnMnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2E7XHJcbnZhciBFUlJPUl9ERVNDUklQVElPTl9NQVAgPSAoX2EgPSB7fSxcclxuICAgIF9hW1wibWlzc2luZy1hcHAtY29uZmlnLXZhbHVlc1wiIC8qIE1JU1NJTkdfQVBQX0NPTkZJR19WQUxVRVMgKi9dID0gJ01pc3NpbmcgQXBwIGNvbmZpZ3VyYXRpb24gdmFsdWU6IFwieyR2YWx1ZU5hbWV9XCInLFxyXG4gICAgX2FbXCJub3QtcmVnaXN0ZXJlZFwiIC8qIE5PVF9SRUdJU1RFUkVEICovXSA9ICdGaXJlYmFzZSBJbnN0YWxsYXRpb24gaXMgbm90IHJlZ2lzdGVyZWQuJyxcclxuICAgIF9hW1wiaW5zdGFsbGF0aW9uLW5vdC1mb3VuZFwiIC8qIElOU1RBTExBVElPTl9OT1RfRk9VTkQgKi9dID0gJ0ZpcmViYXNlIEluc3RhbGxhdGlvbiBub3QgZm91bmQuJyxcclxuICAgIF9hW1wicmVxdWVzdC1mYWlsZWRcIiAvKiBSRVFVRVNUX0ZBSUxFRCAqL10gPSAneyRyZXF1ZXN0TmFtZX0gcmVxdWVzdCBmYWlsZWQgd2l0aCBlcnJvciBcInskc2VydmVyQ29kZX0geyRzZXJ2ZXJTdGF0dXN9OiB7JHNlcnZlck1lc3NhZ2V9XCInLFxyXG4gICAgX2FbXCJhcHAtb2ZmbGluZVwiIC8qIEFQUF9PRkZMSU5FICovXSA9ICdDb3VsZCBub3QgcHJvY2VzcyByZXF1ZXN0LiBBcHBsaWNhdGlvbiBvZmZsaW5lLicsXHJcbiAgICBfYVtcImRlbGV0ZS1wZW5kaW5nLXJlZ2lzdHJhdGlvblwiIC8qIERFTEVURV9QRU5ESU5HX1JFR0lTVFJBVElPTiAqL10gPSBcIkNhbid0IGRlbGV0ZSBpbnN0YWxsYXRpb24gd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIHJlZ2lzdHJhdGlvbiByZXF1ZXN0LlwiLFxyXG4gICAgX2EpO1xyXG52YXIgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoU0VSVklDRSwgU0VSVklDRV9OQU1FLCBFUlJPUl9ERVNDUklQVElPTl9NQVApO1xyXG4vKiogUmV0dXJucyB0cnVlIGlmIGVycm9yIGlzIGEgRmlyZWJhc2VFcnJvciB0aGF0IGlzIGJhc2VkIG9uIGFuIGVycm9yIGZyb20gdGhlIHNlcnZlci4gKi9cclxuZnVuY3Rpb24gaXNTZXJ2ZXJFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIChlcnJvciBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IgJiZcclxuICAgICAgICBlcnJvci5jb2RlLmluY2x1ZGVzKFwicmVxdWVzdC1mYWlsZWRcIiAvKiBSRVFVRVNUX0ZBSUxFRCAqLykpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbnNFbmRwb2ludChfYSkge1xyXG4gICAgdmFyIHByb2plY3RJZCA9IF9hLnByb2plY3RJZDtcclxuICAgIHJldHVybiBJTlNUQUxMQVRJT05TX0FQSV9VUkwgKyBcIi9wcm9qZWN0cy9cIiArIHByb2plY3RJZCArIFwiL2luc3RhbGxhdGlvbnNcIjtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0b2tlbjogcmVzcG9uc2UudG9rZW4sXHJcbiAgICAgICAgcmVxdWVzdFN0YXR1czogMiAvKiBDT01QTEVURUQgKi8sXHJcbiAgICAgICAgZXhwaXJlc0luOiBnZXRFeHBpcmVzSW5Gcm9tUmVzcG9uc2VFeHBpcmVzSW4ocmVzcG9uc2UuZXhwaXJlc0luKSxcclxuICAgICAgICBjcmVhdGlvblRpbWU6IERhdGUubm93KClcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RXJyb3JGcm9tUmVzcG9uc2UocmVxdWVzdE5hbWUsIHJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3BvbnNlSnNvbiwgZXJyb3JEYXRhO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSnNvbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvckRhdGEgPSByZXNwb25zZUpzb24uZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwicmVxdWVzdC1mYWlsZWRcIiAvKiBSRVFVRVNUX0ZBSUxFRCAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE5hbWU6IHJlcXVlc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyQ29kZTogZXJyb3JEYXRhLmNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJNZXNzYWdlOiBlcnJvckRhdGEubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclN0YXR1czogZXJyb3JEYXRhLnN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEhlYWRlcnMoX2EpIHtcclxuICAgIHZhciBhcGlLZXkgPSBfYS5hcGlLZXk7XHJcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ3gtZ29vZy1hcGkta2V5JzogYXBpS2V5XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRIZWFkZXJzV2l0aEF1dGgoYXBwQ29uZmlnLCBfYSkge1xyXG4gICAgdmFyIHJlZnJlc2hUb2tlbiA9IF9hLnJlZnJlc2hUb2tlbjtcclxuICAgIHZhciBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgaGVhZGVycy5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikpO1xyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxzIHRoZSBwYXNzZWQgaW4gZmV0Y2ggd3JhcHBlciBhbmQgcmV0dXJucyB0aGUgcmVzcG9uc2UuXHJcbiAqIElmIHRoZSByZXR1cm5lZCByZXNwb25zZSBoYXMgYSBzdGF0dXMgb2YgNXh4LCByZS1ydW5zIHRoZSBmdW5jdGlvbiBvbmNlIGFuZFxyXG4gKiByZXR1cm5zIHRoZSByZXNwb25zZS5cclxuICovXHJcbmZ1bmN0aW9uIHJldHJ5SWZTZXJ2ZXJFcnJvcihmbikge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZuKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA+PSA1MDAgJiYgcmVzdWx0LnN0YXR1cyA8IDYwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuIFJldHJ5IHJlcXVlc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmbigpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEV4cGlyZXNJbkZyb21SZXNwb25zZUV4cGlyZXNJbihyZXNwb25zZUV4cGlyZXNJbikge1xyXG4gICAgLy8gVGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBzZXJ2ZXIgd2lsbCBuZXZlciByZXNwb25kIHdpdGggZnJhY3Rpb25zIG9mIGEgc2Vjb25kLlxyXG4gICAgcmV0dXJuIE51bWJlcihyZXNwb25zZUV4cGlyZXNJbi5yZXBsYWNlKCdzJywgJzAwMCcpKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikge1xyXG4gICAgcmV0dXJuIElOVEVSTkFMX0FVVEhfVkVSU0lPTiArIFwiIFwiICsgcmVmcmVzaFRva2VuO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnLCBfYSkge1xyXG4gICAgdmFyIGZpZCA9IF9hLmZpZDtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZW5kcG9pbnQsIGhlYWRlcnMsIGJvZHksIHJlcXVlc3QsIHJlc3BvbnNlLCByZXNwb25zZVZhbHVlLCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZDogZmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoVmVyc2lvbjogSU5URVJOQUxfQVVUSF9WRVJTSU9OLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBJZDogYXBwQ29uZmlnLmFwcElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZGtWZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT05cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmV0cnlJZlNlcnZlckVycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoKGVuZHBvaW50LCByZXF1ZXN0KTsgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlc3BvbnNlLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VWYWx1ZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZDogcmVzcG9uc2VWYWx1ZS5maWQgfHwgZmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDIgLyogQ09NUExFVEVEICovLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHJlc3BvbnNlVmFsdWUucmVmcmVzaFRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoVG9rZW46IGV4dHJhY3RBdXRoVG9rZW5JbmZvRnJvbVJlc3BvbnNlKHJlc3BvbnNlVmFsdWUuYXV0aFRva2VuKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEVycm9yRnJvbVJlc3BvbnNlKCdDcmVhdGUgSW5zdGFsbGF0aW9uJywgcmVzcG9uc2UpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogdGhyb3cgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKiogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciBnaXZlbiB0aW1lIHBhc3Nlcy4gKi9cclxuZnVuY3Rpb24gc2xlZXAobXMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpO1xyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gYnVmZmVyVG9CYXNlNjRVcmxTYWZlKGFycmF5KSB7XHJcbiAgICB2YXIgYjY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgX19zcHJlYWQoYXJyYXkpKSk7XHJcbiAgICByZXR1cm4gYjY0LnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBWQUxJRF9GSURfUEFUVEVSTiA9IC9eW2NkZWZdW1xcdy1dezIxfSQvO1xyXG52YXIgSU5WQUxJRF9GSUQgPSAnJztcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIG5ldyBGSUQgdXNpbmcgcmFuZG9tIHZhbHVlcyBmcm9tIFdlYiBDcnlwdG8gQVBJLlxyXG4gKiBSZXR1cm5zIGFuIGVtcHR5IHN0cmluZyBpZiBGSUQgZ2VuZXJhdGlvbiBmYWlscyBmb3IgYW55IHJlYXNvbi5cclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRmlkKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBBIHZhbGlkIEZJRCBoYXMgZXhhY3RseSAyMiBiYXNlNjQgY2hhcmFjdGVycywgd2hpY2ggaXMgMTMyIGJpdHMsIG9yIDE2LjVcclxuICAgICAgICAvLyBieXRlcy4gb3VyIGltcGxlbWVudGF0aW9uIGdlbmVyYXRlcyBhIDE3IGJ5dGUgYXJyYXkgaW5zdGVhZC5cclxuICAgICAgICB2YXIgZmlkQnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMTcpO1xyXG4gICAgICAgIHZhciBjcnlwdG9fMSA9IHNlbGYuY3J5cHRvIHx8IHNlbGYubXNDcnlwdG87XHJcbiAgICAgICAgY3J5cHRvXzEuZ2V0UmFuZG9tVmFsdWVzKGZpZEJ5dGVBcnJheSk7XHJcbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgZmlyc3QgNCByYW5kb20gYml0cyB3aXRoIHRoZSBjb25zdGFudCBGSUQgaGVhZGVyIG9mIDBiMDExMS5cclxuICAgICAgICBmaWRCeXRlQXJyYXlbMF0gPSAxMTIgKyAoZmlkQnl0ZUFycmF5WzBdICUgMTYpO1xyXG4gICAgICAgIHZhciBmaWQgPSBlbmNvZGUoZmlkQnl0ZUFycmF5KTtcclxuICAgICAgICByZXR1cm4gVkFMSURfRklEX1BBVFRFUk4udGVzdChmaWQpID8gZmlkIDogSU5WQUxJRF9GSUQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAvLyBGSUQgZ2VuZXJhdGlvbiBlcnJvcmVkXHJcbiAgICAgICAgcmV0dXJuIElOVkFMSURfRklEO1xyXG4gICAgfVxyXG59XHJcbi8qKiBDb252ZXJ0cyBhIEZJRCBVaW50OEFycmF5IHRvIGEgYmFzZTY0IHN0cmluZyByZXByZXNlbnRhdGlvbi4gKi9cclxuZnVuY3Rpb24gZW5jb2RlKGZpZEJ5dGVBcnJheSkge1xyXG4gICAgdmFyIGI2NFN0cmluZyA9IGJ1ZmZlclRvQmFzZTY0VXJsU2FmZShmaWRCeXRlQXJyYXkpO1xyXG4gICAgLy8gUmVtb3ZlIHRoZSAyM3JkIGNoYXJhY3RlciB0aGF0IHdhcyBhZGRlZCBiZWNhdXNlIG9mIHRoZSBleHRyYSA0IGJpdHMgYXQgdGhlXHJcbiAgICAvLyBlbmQgb2Ygb3VyIDE3IGJ5dGUgYXJyYXksIGFuZCB0aGUgJz0nIHBhZGRpbmcuXHJcbiAgICByZXR1cm4gYjY0U3RyaW5nLnN1YnN0cigwLCAyMik7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFJldHVybnMgYSBzdHJpbmcga2V5IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGFwcC4gKi9cclxuZnVuY3Rpb24gZ2V0S2V5KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIGFwcENvbmZpZy5hcHBOYW1lICsgXCIhXCIgKyBhcHBDb25maWcuYXBwSWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIGZpZENoYW5nZUNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIENhbGxzIHRoZSBvbklkQ2hhbmdlIGNhbGxiYWNrcyB3aXRoIHRoZSBuZXcgRklEIHZhbHVlLCBhbmQgYnJvYWRjYXN0cyB0aGVcclxuICogY2hhbmdlIHRvIG90aGVyIHRhYnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBmaWRDaGFuZ2VkKGFwcENvbmZpZywgZmlkKSB7XHJcbiAgICB2YXIga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjYWxsRmlkQ2hhbmdlQ2FsbGJhY2tzKGtleSwgZmlkKTtcclxuICAgIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjaykge1xyXG4gICAgLy8gT3BlbiB0aGUgYnJvYWRjYXN0IGNoYW5uZWwgaWYgaXQncyBub3QgYWxyZWFkeSBvcGVuLFxyXG4gICAgLy8gdG8gYmUgYWJsZSB0byBsaXN0ZW4gdG8gY2hhbmdlIGV2ZW50cyBmcm9tIG90aGVyIHRhYnMuXHJcbiAgICBnZXRCcm9hZGNhc3RDaGFubmVsKCk7XHJcbiAgICB2YXIga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICB2YXIgY2FsbGJhY2tTZXQgPSBmaWRDaGFuZ2VDYWxsYmFja3MuZ2V0KGtleSk7XHJcbiAgICBpZiAoIWNhbGxiYWNrU2V0KSB7XHJcbiAgICAgICAgY2FsbGJhY2tTZXQgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgZmlkQ2hhbmdlQ2FsbGJhY2tzLnNldChrZXksIGNhbGxiYWNrU2V0KTtcclxuICAgIH1cclxuICAgIGNhbGxiYWNrU2V0LmFkZChjYWxsYmFjayk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgdmFyIGNhbGxiYWNrU2V0ID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja1NldCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNhbGxiYWNrU2V0LmRlbGV0ZShjYWxsYmFjayk7XHJcbiAgICBpZiAoY2FsbGJhY2tTZXQuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgIGZpZENoYW5nZUNhbGxiYWNrcy5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIC8vIENsb3NlIGJyb2FkY2FzdCBjaGFubmVsIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNhbGxiYWNrcy5cclxuICAgIGNsb3NlQnJvYWRjYXN0Q2hhbm5lbCgpO1xyXG59XHJcbmZ1bmN0aW9uIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3Moa2V5LCBmaWQpIHtcclxuICAgIHZhciBlXzEsIF9hO1xyXG4gICAgdmFyIGNhbGxiYWNrcyA9IGZpZENoYW5nZUNhbGxiYWNrcy5nZXQoa2V5KTtcclxuICAgIGlmICghY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBmb3IgKHZhciBjYWxsYmFja3NfMSA9IF9fdmFsdWVzKGNhbGxiYWNrcyksIGNhbGxiYWNrc18xXzEgPSBjYWxsYmFja3NfMS5uZXh0KCk7ICFjYWxsYmFja3NfMV8xLmRvbmU7IGNhbGxiYWNrc18xXzEgPSBjYWxsYmFja3NfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgY2FsbGJhY2soZmlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrc18xXzEgJiYgIWNhbGxiYWNrc18xXzEuZG9uZSAmJiAoX2EgPSBjYWxsYmFja3NfMS5yZXR1cm4pKSBfYS5jYWxsKGNhbGxiYWNrc18xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCkge1xyXG4gICAgdmFyIGNoYW5uZWwgPSBnZXRCcm9hZGNhc3RDaGFubmVsKCk7XHJcbiAgICBpZiAoY2hhbm5lbCkge1xyXG4gICAgICAgIGNoYW5uZWwucG9zdE1lc3NhZ2UoeyBrZXk6IGtleSwgZmlkOiBmaWQgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZUJyb2FkY2FzdENoYW5uZWwoKTtcclxufVxyXG52YXIgYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XHJcbi8qKiBPcGVucyBhbmQgcmV0dXJucyBhIEJyb2FkY2FzdENoYW5uZWwgaWYgaXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLiAqL1xyXG5mdW5jdGlvbiBnZXRCcm9hZGNhc3RDaGFubmVsKCkge1xyXG4gICAgaWYgKCFicm9hZGNhc3RDaGFubmVsICYmICdCcm9hZGNhc3RDaGFubmVsJyBpbiBzZWxmKSB7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKCdbRmlyZWJhc2VdIEZJRCBDaGFuZ2UnKTtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3MoZS5kYXRhLmtleSwgZS5kYXRhLmZpZCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBicm9hZGNhc3RDaGFubmVsO1xyXG59XHJcbmZ1bmN0aW9uIGNsb3NlQnJvYWRjYXN0Q2hhbm5lbCgpIHtcclxuICAgIGlmIChmaWRDaGFuZ2VDYWxsYmFja3Muc2l6ZSA9PT0gMCAmJiBicm9hZGNhc3RDaGFubmVsKSB7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbC5jbG9zZSgpO1xyXG4gICAgICAgIGJyb2FkY2FzdENoYW5uZWwgPSBudWxsO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBEQVRBQkFTRV9OQU1FID0gJ2ZpcmViYXNlLWluc3RhbGxhdGlvbnMtZGF0YWJhc2UnO1xyXG52YXIgREFUQUJBU0VfVkVSU0lPTiA9IDE7XHJcbnZhciBPQkpFQ1RfU1RPUkVfTkFNRSA9ICdmaXJlYmFzZS1pbnN0YWxsYXRpb25zLXN0b3JlJztcclxudmFyIGRiUHJvbWlzZSA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldERiUHJvbWlzZSgpIHtcclxuICAgIGlmICghZGJQcm9taXNlKSB7XHJcbiAgICAgICAgZGJQcm9taXNlID0gb3BlbkRiKERBVEFCQVNFX05BTUUsIERBVEFCQVNFX1ZFUlNJT04sIGZ1bmN0aW9uICh1cGdyYWRlREIpIHtcclxuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdXNlICdicmVhaycgaW4gdGhpcyBzd2l0Y2ggc3RhdGVtZW50LCB0aGUgZmFsbC10aHJvdWdoXHJcbiAgICAgICAgICAgIC8vIGJlaGF2aW9yIGlzIHdoYXQgd2Ugd2FudCwgYmVjYXVzZSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgYmV0d2VlblxyXG4gICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgIC8vIHRoYXQgY29ycmVzcG9uZCB0byB0aG9zZSB2ZXJzaW9ucyB0byBydW4sIG5vdCBvbmx5IHRoZSBsYXN0IG9uZS5cclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHVwZ3JhZGVEQi5vbGRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgdXBncmFkZURCLmNyZWF0ZU9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRiUHJvbWlzZTtcclxufVxyXG4vKiogQXNzaWducyBvciBvdmVyd3JpdGVzIHRoZSByZWNvcmQgZm9yIHRoZSBnaXZlbiBrZXkgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuICovXHJcbmZ1bmN0aW9uIHNldChhcHBDb25maWcsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleSwgZGIsIHR4LCBvYmplY3RTdG9yZSwgb2xkVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0RGJQcm9taXNlKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGRiID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHR4ID0gZGIudHJhbnNhY3Rpb24oT0JKRUNUX1NUT1JFX05BTUUsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBvYmplY3RTdG9yZS5nZXQoa2V5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgb2JqZWN0U3RvcmUucHV0KHZhbHVlLCBrZXkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdHguY29tcGxldGVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZFZhbHVlIHx8IG9sZFZhbHVlLmZpZCAhPT0gdmFsdWUuZmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZENoYW5nZWQoYXBwQ29uZmlnLCB2YWx1ZS5maWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKiogUmVtb3ZlcyByZWNvcmQocykgZnJvbSB0aGUgb2JqZWN0U3RvcmUgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4ga2V5LiAqL1xyXG5mdW5jdGlvbiByZW1vdmUoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleSwgZGIsIHR4O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldERiUHJvbWlzZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkYiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdHgub2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpLmRlbGV0ZShrZXkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdHguY29tcGxldGVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBBdG9taWNhbGx5IHVwZGF0ZXMgYSByZWNvcmQgd2l0aCB0aGUgcmVzdWx0IG9mIHVwZGF0ZUZuLCB3aGljaCBnZXRzXHJcbiAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHZhbHVlLiBJZiBuZXdWYWx1ZSBpcyB1bmRlZmluZWQsIHRoZSByZWNvcmQgaXNcclxuICogZGVsZXRlZCBpbnN0ZWFkLlxyXG4gKiBAcmV0dXJuIFVwZGF0ZWQgdmFsdWVcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZShhcHBDb25maWcsIHVwZGF0ZUZuKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleSwgZGIsIHR4LCBzdG9yZSwgb2xkVmFsdWUsIG5ld1ZhbHVlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldERiUHJvbWlzZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkYiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUgPSB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfTkFNRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RvcmUuZ2V0KGtleSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdXBkYXRlRm4ob2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yZS5kZWxldGUoa2V5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yZS5wdXQobmV3VmFsdWUsIGtleSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDY7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCAvKnlpZWxkKi8sIHR4LmNvbXBsZXRlXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICYmICghb2xkVmFsdWUgfHwgb2xkVmFsdWUuZmlkICE9PSBuZXdWYWx1ZS5maWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZENoYW5nZWQoYXBwQ29uZmlnLCBuZXdWYWx1ZS5maWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3VmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVXBkYXRlcyBhbmQgcmV0dXJucyB0aGUgSW5zdGFsbGF0aW9uRW50cnkgZnJvbSB0aGUgZGF0YWJhc2UuXHJcbiAqIEFsc28gdHJpZ2dlcnMgYSByZWdpc3RyYXRpb24gcmVxdWVzdCBpZiBpdCBpcyBuZWNlc3NhcnkgYW5kIHBvc3NpYmxlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9uRW50cnkoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvblByb21pc2UsIGluc3RhbGxhdGlvbkVudHJ5O1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdXBkYXRlKGFwcENvbmZpZywgZnVuY3Rpb24gKG9sZEVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YWxsYXRpb25FbnRyeSA9IHVwZGF0ZU9yQ3JlYXRlSW5zdGFsbGF0aW9uRW50cnkob2xkRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnlXaXRoUHJvbWlzZSA9IHRyaWdnZXJSZWdpc3RyYXRpb25JZk5lY2Vzc2FyeShhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZSA9IGVudHJ5V2l0aFByb21pc2UucmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5V2l0aFByb21pc2UuaW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGluc3RhbGxhdGlvbkVudHJ5LmZpZCA9PT0gSU5WQUxJRF9GSUQpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlZ2lzdHJhdGlvblByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiBcclxuICAgICAgICAgICAgICAgIC8vIEZJRCBnZW5lcmF0aW9uIGZhaWxlZC4gV2FpdGluZyBmb3IgdGhlIEZJRCBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgKF9hLmluc3RhbGxhdGlvbkVudHJ5ID0gX2Iuc2VudCgpLCBfYSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsYXRpb25FbnRyeTogaW5zdGFsbGF0aW9uRW50cnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgSW5zdGFsbGF0aW9uIEVudHJ5IGlmIG9uZSBkb2VzIG5vdCBleGlzdC5cclxuICogQWxzbyBjbGVhcnMgdGltZWQgb3V0IHBlbmRpbmcgcmVxdWVzdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVPckNyZWF0ZUluc3RhbGxhdGlvbkVudHJ5KG9sZEVudHJ5KSB7XHJcbiAgICB2YXIgZW50cnkgPSBvbGRFbnRyeSB8fCB7XHJcbiAgICAgICAgZmlkOiBnZW5lcmF0ZUZpZCgpLFxyXG4gICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBOT1RfU1RBUlRFRCAqL1xyXG4gICAgfTtcclxuICAgIHJldHVybiBjbGVhclRpbWVkT3V0UmVxdWVzdChlbnRyeSk7XHJcbn1cclxuLyoqXHJcbiAqIElmIHRoZSBGaXJlYmFzZSBJbnN0YWxsYXRpb24gaXMgbm90IHJlZ2lzdGVyZWQgeWV0LCB0aGlzIHdpbGwgdHJpZ2dlciB0aGVcclxuICogcmVnaXN0cmF0aW9uIGFuZCByZXR1cm4gYW4gSW5Qcm9ncmVzc0luc3RhbGxhdGlvbkVudHJ5LlxyXG4gKlxyXG4gKiBJZiByZWdpc3RyYXRpb25Qcm9taXNlIGRvZXMgbm90IGV4aXN0LCB0aGUgaW5zdGFsbGF0aW9uRW50cnkgaXMgZ3VhcmFudGVlZFxyXG4gKiB0byBiZSByZWdpc3RlcmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJpZ2dlclJlZ2lzdHJhdGlvbklmTmVjZXNzYXJ5KGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGlmIChpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDAgLyogTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcclxuICAgICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIHJlcXVpcmVkIGJ1dCBhcHAgaXMgb2ZmbGluZS5cclxuICAgICAgICAgICAgdmFyIHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3IgPSBQcm9taXNlLnJlamVjdChFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFwcC1vZmZsaW5lXCIgLyogQVBQX09GRkxJTkUgKi8pKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5OiBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3JcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJ5IHJlZ2lzdGVyaW5nLiBDaGFuZ2Ugc3RhdHVzIHRvIElOX1BST0dSRVNTLlxyXG4gICAgICAgIHZhciBpblByb2dyZXNzRW50cnkgPSB7XHJcbiAgICAgICAgICAgIGZpZDogaW5zdGFsbGF0aW9uRW50cnkuZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDEgLyogSU5fUFJPR1JFU1MgKi8sXHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvblRpbWU6IERhdGUubm93KClcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZWdpc3RyYXRpb25Qcm9taXNlID0gcmVnaXN0ZXJJbnN0YWxsYXRpb24oYXBwQ29uZmlnLCBpblByb2dyZXNzRW50cnkpO1xyXG4gICAgICAgIHJldHVybiB7IGluc3RhbGxhdGlvbkVudHJ5OiBpblByb2dyZXNzRW50cnksIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2UgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBJTl9QUk9HUkVTUyAqLykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5OiBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZTogd2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uKGFwcENvbmZpZylcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5zdGFsbGF0aW9uRW50cnk6IGluc3RhbGxhdGlvbkVudHJ5IH07XHJcbiAgICB9XHJcbn1cclxuLyoqIFRoaXMgd2lsbCBiZSBleGVjdXRlZCBvbmx5IG9uY2UgZm9yIGVhY2ggbmV3IEZpcmViYXNlIEluc3RhbGxhdGlvbi4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJJbnN0YWxsYXRpb24oYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnksIGVfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDIsICwgN10pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNyZWF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc2V0KGFwcENvbmZpZywgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGlzU2VydmVyRXJyb3IoZV8xKSAmJiBlXzEuY3VzdG9tRGF0YS5zZXJ2ZXJDb2RlID09PSA0MDkpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXJ2ZXIgcmV0dXJuZWQgYSBcIkZJRCBjYW4gbm90IGJlIHVzZWRcIiBlcnJvci5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVtb3ZlKGFwcENvbmZpZyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlcnZlciByZXR1cm5lZCBhIFwiRklEIGNhbiBub3QgYmUgdXNlZFwiIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgbmV3IElEIG5leHQgdGltZS5cclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IFxyXG4gICAgICAgICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIGZhaWxlZC4gU2V0IEZJRCBhcyBub3QgcmVnaXN0ZXJlZC5cclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNldChhcHBDb25maWcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlkOiBpbnN0YWxsYXRpb25FbnRyeS5maWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBOT1RfU1RBUlRFRCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZWdpc3RyYXRpb24gZmFpbGVkLiBTZXQgRklEIGFzIG5vdCByZWdpc3RlcmVkLlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDY7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHRocm93IGVfMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKiogQ2FsbCBpZiBGSUQgcmVnaXN0cmF0aW9uIGlzIHBlbmRpbmcgaW4gYW5vdGhlciByZXF1ZXN0LiAqL1xyXG5mdW5jdGlvbiB3YWl0VW50aWxGaWRSZWdpc3RyYXRpb24oYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5LCBfYSwgaW5zdGFsbGF0aW9uRW50cnksIHJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBJTl9QUk9HUkVTUyAqLykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZUluc3RhbGxhdGlvbiByZXF1ZXN0IHN0aWxsIGluIHByb2dyZXNzLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNsZWVwKDEwMCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZUluc3RhbGxhdGlvbiByZXF1ZXN0IHN0aWxsIGluIHByb2dyZXNzLlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMCAvKiBOT1RfU1RBUlRFRCAqLykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEluc3RhbGxhdGlvbkVudHJ5KGFwcENvbmZpZyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCBpbnN0YWxsYXRpb25FbnRyeSA9IF9hLmluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlID0gX2EucmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVnaXN0cmF0aW9uUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyByZWdpc3RyYXRpb25Qcm9taXNlLCBlbnRyeSBpcyByZWdpc3RlcmVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgaW5zdGFsbGF0aW9uRW50cnldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVudHJ5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxlZCBvbmx5IGlmIHRoZXJlIGlzIGEgQ3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFVwZGF0ZXMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGluIHRoZSBEQiBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZVxyXG4gKiBDcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdC5cclxuICpcclxuICogUmV0dXJucyB0aGUgdXBkYXRlZCBJbnN0YWxsYXRpb25FbnRyeS5cclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gdXBkYXRlKGFwcENvbmZpZywgZnVuY3Rpb24gKG9sZEVudHJ5KSB7XHJcbiAgICAgICAgaWYgKCFvbGRFbnRyeSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImluc3RhbGxhdGlvbi1ub3QtZm91bmRcIiAvKiBJTlNUQUxMQVRJT05fTk9UX0ZPVU5EICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZWRPdXRSZXF1ZXN0KG9sZEVudHJ5KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNsZWFyVGltZWRPdXRSZXF1ZXN0KGVudHJ5KSB7XHJcbiAgICBpZiAoaGFzSW5zdGFsbGF0aW9uUmVxdWVzdFRpbWVkT3V0KGVudHJ5KSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpZDogZW50cnkuZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDAgLyogTk9UX1NUQVJURUQgKi9cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59XHJcbmZ1bmN0aW9uIGhhc0luc3RhbGxhdGlvblJlcXVlc3RUaW1lZE91dChpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIChpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8gJiZcclxuICAgICAgICBpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25UaW1lICsgUEVORElOR19USU1FT1VUX01TIDwgRGF0ZS5ub3coKSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVBdXRoVG9rZW5SZXF1ZXN0KF9hLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgdmFyIGFwcENvbmZpZyA9IF9hLmFwcENvbmZpZywgcGxhdGZvcm1Mb2dnZXJQcm92aWRlciA9IF9hLnBsYXRmb3JtTG9nZ2VyUHJvdmlkZXI7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVuZHBvaW50LCBoZWFkZXJzLCBwbGF0Zm9ybUxvZ2dlciwgYm9keSwgcmVxdWVzdCwgcmVzcG9uc2UsIHJlc3BvbnNlVmFsdWUsIGNvbXBsZXRlZEF1dGhUb2tlbjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IGdldEdlbmVyYXRlQXV0aFRva2VuRW5kcG9pbnQoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IGdldEhlYWRlcnNXaXRoQXV0aChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybUxvZ2dlciA9IHBsYXRmb3JtTG9nZ2VyUHJvdmlkZXIuZ2V0SW1tZWRpYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGxhdGZvcm1Mb2dnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoJ3gtZmlyZWJhc2UtY2xpZW50JywgcGxhdGZvcm1Mb2dnZXIuZ2V0UGxhdGZvcm1JbmZvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBib2R5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNka1ZlcnNpb246IFBBQ0tBR0VfVkVSU0lPTlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJldHJ5SWZTZXJ2ZXJFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCk7IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVmFsdWUgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkQXV0aFRva2VuID0gZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UocmVzcG9uc2VWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbXBsZXRlZEF1dGhUb2tlbl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEVycm9yRnJvbVJlc3BvbnNlKCdHZW5lcmF0ZSBBdXRoIFRva2VuJywgcmVzcG9uc2UpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogdGhyb3cgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRHZW5lcmF0ZUF1dGhUb2tlbkVuZHBvaW50KGFwcENvbmZpZywgX2EpIHtcclxuICAgIHZhciBmaWQgPSBfYS5maWQ7XHJcbiAgICByZXR1cm4gZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50KGFwcENvbmZpZykgKyBcIi9cIiArIGZpZCArIFwiL2F1dGhUb2tlbnM6Z2VuZXJhdGVcIjtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBhIHZhbGlkIGF1dGhlbnRpY2F0aW9uIHRva2VuIGZvciB0aGUgaW5zdGFsbGF0aW9uLiBHZW5lcmF0ZXMgYSBuZXdcclxuICogdG9rZW4gaWYgb25lIGRvZXNuJ3QgZXhpc3QsIGlzIGV4cGlyZWQgb3IgYWJvdXQgdG8gZXhwaXJlLlxyXG4gKlxyXG4gKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIEZpcmViYXNlIEluc3RhbGxhdGlvbiBpcyByZWdpc3RlcmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVmcmVzaEF1dGhUb2tlbihkZXBlbmRlbmNpZXMsIGZvcmNlUmVmcmVzaCkge1xyXG4gICAgaWYgKGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwKSB7IGZvcmNlUmVmcmVzaCA9IGZhbHNlOyB9XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRva2VuUHJvbWlzZSwgZW50cnksIGF1dGhUb2tlbiwgX2E7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHVwZGF0ZShkZXBlbmRlbmNpZXMuYXBwQ29uZmlnLCBmdW5jdGlvbiAob2xkRW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0VudHJ5UmVnaXN0ZXJlZChvbGRFbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm90LXJlZ2lzdGVyZWRcIiAvKiBOT1RfUkVHSVNURVJFRCAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEF1dGhUb2tlbiA9IG9sZEVudHJ5LmF1dGhUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JjZVJlZnJlc2ggJiYgaXNBdXRoVG9rZW5WYWxpZChvbGRBdXRoVG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBhIHZhbGlkIHRva2VuIGluIHRoZSBEQi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvbGRBdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMSAvKiBJTl9QUk9HUkVTUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgYWxyZWFkeSBpcyBhIHRva2VuIHJlcXVlc3QgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlblByb21pc2UgPSB3YWl0VW50aWxBdXRoVG9rZW5SZXF1ZXN0KGRlcGVuZGVuY2llcywgZm9yY2VSZWZyZXNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIHRva2VuIG9yIHRva2VuIGV4cGlyZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFwcC1vZmZsaW5lXCIgLyogQVBQX09GRkxJTkUgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluUHJvZ3Jlc3NFbnRyeSA9IG1ha2VBdXRoVG9rZW5SZXF1ZXN0SW5Qcm9ncmVzc0VudHJ5KG9sZEVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuUHJvbWlzZSA9IGZldGNoQXV0aFRva2VuRnJvbVNlcnZlcihkZXBlbmRlbmNpZXMsIGluUHJvZ3Jlc3NFbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5Qcm9ncmVzc0VudHJ5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9rZW5Qcm9taXNlKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0b2tlblByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gZW50cnkuYXV0aFRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBhdXRoVG9rZW4gPSBfYTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYXV0aFRva2VuXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENhbGwgb25seSBpZiBGSUQgaXMgcmVnaXN0ZXJlZCBhbmQgQXV0aCBUb2tlbiByZXF1ZXN0IGlzIGluIHByb2dyZXNzLlxyXG4gKlxyXG4gKiBXYWl0cyB1bnRpbCB0aGUgY3VycmVudCBwZW5kaW5nIHJlcXVlc3QgZmluaXNoZXMuIElmIHRoZSByZXF1ZXN0IHRpbWVzIG91dCxcclxuICogdHJpZXMgb25jZSBpbiB0aGlzIHRocmVhZCBhcyB3ZWxsLlxyXG4gKi9cclxuZnVuY3Rpb24gd2FpdFVudGlsQXV0aFRva2VuUmVxdWVzdChkZXBlbmRlbmNpZXMsIGZvcmNlUmVmcmVzaCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbnRyeSwgYXV0aFRva2VuO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB1cGRhdGVBdXRoVG9rZW5SZXF1ZXN0KGRlcGVuZGVuY2llcy5hcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZW50cnkuYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8pKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZUF1dGhUb2tlbiBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzbGVlcCgxMDApXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZUF1dGhUb2tlbiBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdXBkYXRlQXV0aFRva2VuUmVxdWVzdChkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aFRva2VuID0gZW50cnkuYXV0aFRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMCAvKiBOT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVxdWVzdCB0aW1lZCBvdXQgb3IgZmFpbGVkIGluIGEgZGlmZmVyZW50IGNhbGwuIFRyeSBhZ2Fpbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlZnJlc2hBdXRoVG9rZW4oZGVwZW5kZW5jaWVzLCBmb3JjZVJlZnJlc2gpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBhdXRoVG9rZW5dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxlZCBvbmx5IGlmIHRoZXJlIGlzIGEgR2VuZXJhdGVBdXRoVG9rZW4gcmVxdWVzdCBpbiBwcm9ncmVzcy5cclxuICpcclxuICogVXBkYXRlcyB0aGUgSW5zdGFsbGF0aW9uRW50cnkgaW4gdGhlIERCIGJhc2VkIG9uIHRoZSBzdGF0dXMgb2YgdGhlXHJcbiAqIEdlbmVyYXRlQXV0aFRva2VuIHJlcXVlc3QuXHJcbiAqXHJcbiAqIFJldHVybnMgdGhlIHVwZGF0ZWQgSW5zdGFsbGF0aW9uRW50cnkuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVBdXRoVG9rZW5SZXF1ZXN0KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIHVwZGF0ZShhcHBDb25maWcsIGZ1bmN0aW9uIChvbGRFbnRyeSkge1xyXG4gICAgICAgIGlmICghaXNFbnRyeVJlZ2lzdGVyZWQob2xkRW50cnkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm90LXJlZ2lzdGVyZWRcIiAvKiBOT1RfUkVHSVNURVJFRCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvbGRBdXRoVG9rZW4gPSBvbGRFbnRyeS5hdXRoVG9rZW47XHJcbiAgICAgICAgaWYgKGhhc0F1dGhUb2tlblJlcXVlc3RUaW1lZE91dChvbGRBdXRoVG9rZW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb2xkRW50cnkpLCB7IGF1dGhUb2tlbjogeyByZXF1ZXN0U3RhdHVzOiAwIC8qIE5PVF9TVEFSVEVEICovIH0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGZldGNoQXV0aFRva2VuRnJvbVNlcnZlcihkZXBlbmRlbmNpZXMsIGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGF1dGhUb2tlbiwgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5LCBlXzEsIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDMsICwgOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdChkZXBlbmRlbmNpZXMsIGluc3RhbGxhdGlvbkVudHJ5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aFRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnN0YWxsYXRpb25FbnRyeSksIHsgYXV0aFRva2VuOiBhdXRoVG9rZW4gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2V0KGRlcGVuZGVuY2llcy5hcHBDb25maWcsIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYXV0aFRva2VuXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaXNTZXJ2ZXJFcnJvcihlXzEpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlXzEuY3VzdG9tRGF0YS5zZXJ2ZXJDb2RlID09PSA0MDEgfHwgZV8xLmN1c3RvbURhdGEuc2VydmVyQ29kZSA9PT0gNDA0KSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlcnZlciByZXR1cm5lZCBhIFwiRklEIG5vdCBmb3VuZFwiIG9yIGEgXCJJbnZhbGlkIGF1dGhlbnRpY2F0aW9uXCIgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgSUQgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlbW92ZShkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VydmVyIHJldHVybmVkIGEgXCJGSUQgbm90IGZvdW5kXCIgb3IgYSBcIkludmFsaWQgYXV0aGVudGljYXRpb25cIiBlcnJvci5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnN0YWxsYXRpb25FbnRyeSksIHsgYXV0aFRva2VuOiB7IHJlcXVlc3RTdGF0dXM6IDAgLyogTk9UX1NUQVJURUQgKi8gfSB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXQoZGVwZW5kZW5jaWVzLmFwcENvbmZpZywgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNztcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogdGhyb3cgZV8xO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGlzRW50cnlSZWdpc3RlcmVkKGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICByZXR1cm4gKGluc3RhbGxhdGlvbkVudHJ5ICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICBpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDIgLyogQ09NUExFVEVEICovKTtcclxufVxyXG5mdW5jdGlvbiBpc0F1dGhUb2tlblZhbGlkKGF1dGhUb2tlbikge1xyXG4gICAgcmV0dXJuIChhdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMiAvKiBDT01QTEVURUQgKi8gJiZcclxuICAgICAgICAhaXNBdXRoVG9rZW5FeHBpcmVkKGF1dGhUb2tlbikpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXV0aFRva2VuRXhwaXJlZChhdXRoVG9rZW4pIHtcclxuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgcmV0dXJuIChub3cgPCBhdXRoVG9rZW4uY3JlYXRpb25UaW1lIHx8XHJcbiAgICAgICAgYXV0aFRva2VuLmNyZWF0aW9uVGltZSArIGF1dGhUb2tlbi5leHBpcmVzSW4gPCBub3cgKyBUT0tFTl9FWFBJUkFUSU9OX0JVRkZFUik7XHJcbn1cclxuLyoqIFJldHVybnMgYW4gdXBkYXRlZCBJbnN0YWxsYXRpb25FbnRyeSB3aXRoIGFuIEluUHJvZ3Jlc3NBdXRoVG9rZW4uICovXHJcbmZ1bmN0aW9uIG1ha2VBdXRoVG9rZW5SZXF1ZXN0SW5Qcm9ncmVzc0VudHJ5KG9sZEVudHJ5KSB7XHJcbiAgICB2YXIgaW5Qcm9ncmVzc0F1dGhUb2tlbiA9IHtcclxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAxIC8qIElOX1BST0dSRVNTICovLFxyXG4gICAgICAgIHJlcXVlc3RUaW1lOiBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvbGRFbnRyeSksIHsgYXV0aFRva2VuOiBpblByb2dyZXNzQXV0aFRva2VuIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhc0F1dGhUb2tlblJlcXVlc3RUaW1lZE91dChhdXRoVG9rZW4pIHtcclxuICAgIHJldHVybiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8gJiZcclxuICAgICAgICBhdXRoVG9rZW4ucmVxdWVzdFRpbWUgKyBQRU5ESU5HX1RJTUVPVVRfTVMgPCBEYXRlLm5vdygpKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRJZChkZXBlbmRlbmNpZXMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EsIGluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRJbnN0YWxsYXRpb25FbnRyeShkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIGluc3RhbGxhdGlvbkVudHJ5ID0gX2EuaW5zdGFsbGF0aW9uRW50cnksIHJlZ2lzdHJhdGlvblByb21pc2UgPSBfYS5yZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyYXRpb25Qcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2UuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaW5zdGFsbGF0aW9uIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCwgdXBkYXRlIHRoZSBhdXRoZW50aWNhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbiBpZiBuZWVkZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBdXRoVG9rZW4oZGVwZW5kZW5jaWVzKS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGluc3RhbGxhdGlvbkVudHJ5LmZpZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldFRva2VuKGRlcGVuZGVuY2llcywgZm9yY2VSZWZyZXNoKSB7XHJcbiAgICBpZiAoZm9yY2VSZWZyZXNoID09PSB2b2lkIDApIHsgZm9yY2VSZWZyZXNoID0gZmFsc2U7IH1cclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXV0aFRva2VuO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbihkZXBlbmRlbmNpZXMuYXBwQ29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlZnJlc2hBdXRoVG9rZW4oZGVwZW5kZW5jaWVzLCBmb3JjZVJlZnJlc2gpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBhdXRoVG9rZW4gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGF1dGhUb2tlbi50b2tlbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNvbXBsZXRlSW5zdGFsbGF0aW9uUmVnaXN0cmF0aW9uKGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRJbnN0YWxsYXRpb25FbnRyeShhcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlID0gKF9hLnNlbnQoKSkucmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2lzdHJhdGlvblByb21pc2UpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgY3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MuIFdhaXQgdW50aWwgaXQgZmluaXNoZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVnaXN0cmF0aW9uUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBjcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdCBpcyBpbiBwcm9ncmVzcy4gV2FpdCB1bnRpbCBpdCBmaW5pc2hlcy5cclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbmRwb2ludCwgaGVhZGVycywgcmVxdWVzdCwgcmVzcG9uc2U7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBnZXREZWxldGVFbmRwb2ludChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gZ2V0SGVhZGVyc1dpdGhBdXRoKGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJldHJ5SWZTZXJ2ZXJFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCk7IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISFyZXNwb25zZS5vaykgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0RXJyb3JGcm9tUmVzcG9uc2UoJ0RlbGV0ZSBJbnN0YWxsYXRpb24nLCByZXNwb25zZSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVsZXRlRW5kcG9pbnQoYXBwQ29uZmlnLCBfYSkge1xyXG4gICAgdmFyIGZpZCA9IF9hLmZpZDtcclxuICAgIHJldHVybiBnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKSArIFwiL1wiICsgZmlkO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZUluc3RhbGxhdGlvbihkZXBlbmRlbmNpZXMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXBwQ29uZmlnLCBlbnRyeTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBhcHBDb25maWcgPSBkZXBlbmRlbmNpZXMuYXBwQ29uZmlnO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHVwZGF0ZShhcHBDb25maWcsIGZ1bmN0aW9uIChvbGRFbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEVudHJ5ICYmIG9sZEVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMCAvKiBOT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgdW5yZWdpc3RlcmVkIGVudHJ5IHdpdGhvdXQgc2VuZGluZyBhIGRlbGV0ZUluc3RhbGxhdGlvbiByZXF1ZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkRW50cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVudHJ5KSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShlbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDEgLyogSU5fUFJPR1JFU1MgKi8pKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDYW4ndCBkZWxldGUgd2hpbGUgdHJ5aW5nIHRvIHJlZ2lzdGVyLlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZGVsZXRlLXBlbmRpbmctcmVnaXN0cmF0aW9uXCIgLyogREVMRVRFX1BFTkRJTkdfUkVHSVNUUkFUSU9OICovKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShlbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDIgLyogQ09NUExFVEVEICovKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhbmF2aWdhdG9yLm9uTGluZSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEFQUF9PRkZMSU5FICovKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgZGVsZXRlSW5zdGFsbGF0aW9uUmVxdWVzdChhcHBDb25maWcsIGVudHJ5KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlbW92ZShhcHBDb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTZXRzIGEgbmV3IGNhbGxiYWNrIHRoYXQgd2lsbCBnZXQgY2FsbGVkIHdoZW4gSW5zdGFsbGF0aW9uIElEIGNoYW5nZXMuXHJcbiAqIFJldHVybnMgYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCB3aWxsIHJlbW92ZSB0aGUgY2FsbGJhY2sgd2hlbiBjYWxsZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBvbklkQ2hhbmdlKF9hLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIGFwcENvbmZpZyA9IF9hLmFwcENvbmZpZztcclxuICAgIGFkZENhbGxiYWNrKGFwcENvbmZpZywgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZW1vdmVDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdEFwcENvbmZpZyhhcHApIHtcclxuICAgIHZhciBlXzEsIF9hO1xyXG4gICAgaWYgKCFhcHAgfHwgIWFwcC5vcHRpb25zKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBDb25maWd1cmF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcC5uYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBOYW1lJyk7XHJcbiAgICB9XHJcbiAgICAvLyBSZXF1aXJlZCBhcHAgY29uZmlnIGtleXNcclxuICAgIHZhciBjb25maWdLZXlzID0gW1xyXG4gICAgICAgICdwcm9qZWN0SWQnLFxyXG4gICAgICAgICdhcGlLZXknLFxyXG4gICAgICAgICdhcHBJZCdcclxuICAgIF07XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZvciAodmFyIGNvbmZpZ0tleXNfMSA9IF9fdmFsdWVzKGNvbmZpZ0tleXMpLCBjb25maWdLZXlzXzFfMSA9IGNvbmZpZ0tleXNfMS5uZXh0KCk7ICFjb25maWdLZXlzXzFfMS5kb25lOyBjb25maWdLZXlzXzFfMSA9IGNvbmZpZ0tleXNfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIGtleU5hbWUgPSBjb25maWdLZXlzXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKCFhcHAub3B0aW9uc1trZXlOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3Ioa2V5TmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZ0tleXNfMV8xICYmICFjb25maWdLZXlzXzFfMS5kb25lICYmIChfYSA9IGNvbmZpZ0tleXNfMS5yZXR1cm4pKSBfYS5jYWxsKGNvbmZpZ0tleXNfMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwTmFtZTogYXBwLm5hbWUsXHJcbiAgICAgICAgcHJvamVjdElkOiBhcHAub3B0aW9ucy5wcm9qZWN0SWQsXHJcbiAgICAgICAgYXBpS2V5OiBhcHAub3B0aW9ucy5hcGlLZXksXHJcbiAgICAgICAgYXBwSWQ6IGFwcC5vcHRpb25zLmFwcElkXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldE1pc3NpbmdWYWx1ZUVycm9yKHZhbHVlTmFtZSkge1xyXG4gICAgcmV0dXJuIEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibWlzc2luZy1hcHAtY29uZmlnLXZhbHVlc1wiIC8qIE1JU1NJTkdfQVBQX0NPTkZJR19WQUxVRVMgKi8sIHtcclxuICAgICAgICB2YWx1ZU5hbWU6IHZhbHVlTmFtZVxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJJbnN0YWxsYXRpb25zKGluc3RhbmNlKSB7XHJcbiAgICB2YXIgaW5zdGFsbGF0aW9uc05hbWUgPSAnaW5zdGFsbGF0aW9ucyc7XHJcbiAgICBpbnN0YW5jZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KGluc3RhbGxhdGlvbnNOYW1lLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdmFyIGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgLy8gVGhyb3dzIGlmIGFwcCBpc24ndCBjb25maWd1cmVkIHByb3Blcmx5LlxyXG4gICAgICAgIHZhciBhcHBDb25maWcgPSBleHRyYWN0QXBwQ29uZmlnKGFwcCk7XHJcbiAgICAgICAgdmFyIHBsYXRmb3JtTG9nZ2VyUHJvdmlkZXIgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoJ3BsYXRmb3JtLWxvZ2dlcicpO1xyXG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSB7XHJcbiAgICAgICAgICAgIGFwcENvbmZpZzogYXBwQ29uZmlnLFxyXG4gICAgICAgICAgICBwbGF0Zm9ybUxvZ2dlclByb3ZpZGVyOiBwbGF0Zm9ybUxvZ2dlclByb3ZpZGVyXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgaW5zdGFsbGF0aW9ucyA9IHtcclxuICAgICAgICAgICAgYXBwOiBhcHAsXHJcbiAgICAgICAgICAgIGdldElkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRJZChkZXBlbmRlbmNpZXMpOyB9LFxyXG4gICAgICAgICAgICBnZXRUb2tlbjogZnVuY3Rpb24gKGZvcmNlUmVmcmVzaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFRva2VuKGRlcGVuZGVuY2llcywgZm9yY2VSZWZyZXNoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWxldGVJbnN0YWxsYXRpb24oZGVwZW5kZW5jaWVzKTsgfSxcclxuICAgICAgICAgICAgb25JZENoYW5nZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb25JZENoYW5nZShkZXBlbmRlbmNpZXMsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbGxhdGlvbnM7XHJcbiAgICB9LCBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqLykpO1xyXG4gICAgaW5zdGFuY2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24pO1xyXG59XHJcbnJlZ2lzdGVySW5zdGFsbGF0aW9ucyhmaXJlYmFzZSk7XG5cbmV4cG9ydCB7IHJlZ2lzdGVySW5zdGFsbGF0aW9ucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciwgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgJ0BmaXJlYmFzZS9pbnN0YWxsYXRpb25zJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ0BmaXJlYmFzZS9sb2dnZXInO1xuaW1wb3J0IHsgRXJyb3JGYWN0b3J5LCBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzLCBGaXJlYmFzZUVycm9yLCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlLCBpc0luZGV4ZWREQkF2YWlsYWJsZSwgaXNCcm93c2VyRXh0ZW5zaW9uLCBhcmVDb29raWVzRW5hYmxlZCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBLZXkgdG8gYXR0YWNoIEZJRCB0byBpbiBndGFnIHBhcmFtcy5cclxudmFyIEdBX0ZJRF9LRVkgPSAnZmlyZWJhc2VfaWQnO1xyXG52YXIgT1JJR0lOX0tFWSA9ICdvcmlnaW4nO1xyXG52YXIgRkVUQ0hfVElNRU9VVF9NSUxMSVMgPSA2MCAqIDEwMDA7XHJcbnZhciBEWU5BTUlDX0NPTkZJR19VUkwgPSAnaHR0cHM6Ly9maXJlYmFzZS5nb29nbGVhcGlzLmNvbS92MWFscGhhL3Byb2plY3RzLy0vYXBwcy97YXBwLWlkfS93ZWJDb25maWcnO1xyXG52YXIgR1RBR19VUkwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcyc7XHJcbnZhciBHdGFnQ29tbWFuZDtcclxuKGZ1bmN0aW9uIChHdGFnQ29tbWFuZCkge1xyXG4gICAgR3RhZ0NvbW1hbmRbXCJFVkVOVFwiXSA9IFwiZXZlbnRcIjtcclxuICAgIEd0YWdDb21tYW5kW1wiU0VUXCJdID0gXCJzZXRcIjtcclxuICAgIEd0YWdDb21tYW5kW1wiQ09ORklHXCJdID0gXCJjb25maWdcIjtcclxufSkoR3RhZ0NvbW1hbmQgfHwgKEd0YWdDb21tYW5kID0ge30pKTtcclxuLypcclxuICogT2ZmaWNpYWxseSByZWNvbW1lbmRlZCBldmVudCBuYW1lcyBmb3IgZ3RhZy5qc1xyXG4gKiBBbnkgb3RoZXIgc3RyaW5nIGlzIGFsc28gYWxsb3dlZC5cclxuICovXHJcbnZhciBFdmVudE5hbWU7XHJcbihmdW5jdGlvbiAoRXZlbnROYW1lKSB7XHJcbiAgICBFdmVudE5hbWVbXCJBRERfU0hJUFBJTkdfSU5GT1wiXSA9IFwiYWRkX3NoaXBwaW5nX2luZm9cIjtcclxuICAgIEV2ZW50TmFtZVtcIkFERF9QQVlNRU5UX0lORk9cIl0gPSBcImFkZF9wYXltZW50X2luZm9cIjtcclxuICAgIEV2ZW50TmFtZVtcIkFERF9UT19DQVJUXCJdID0gXCJhZGRfdG9fY2FydFwiO1xyXG4gICAgRXZlbnROYW1lW1wiQUREX1RPX1dJU0hMSVNUXCJdID0gXCJhZGRfdG9fd2lzaGxpc3RcIjtcclxuICAgIEV2ZW50TmFtZVtcIkJFR0lOX0NIRUNLT1VUXCJdID0gXCJiZWdpbl9jaGVja291dFwiO1xyXG4gICAgLyoqIEBkZXByZWNhdGVkICovXHJcbiAgICBFdmVudE5hbWVbXCJDSEVDS09VVF9QUk9HUkVTU1wiXSA9IFwiY2hlY2tvdXRfcHJvZ3Jlc3NcIjtcclxuICAgIEV2ZW50TmFtZVtcIkVYQ0VQVElPTlwiXSA9IFwiZXhjZXB0aW9uXCI7XHJcbiAgICBFdmVudE5hbWVbXCJHRU5FUkFURV9MRUFEXCJdID0gXCJnZW5lcmF0ZV9sZWFkXCI7XHJcbiAgICBFdmVudE5hbWVbXCJMT0dJTlwiXSA9IFwibG9naW5cIjtcclxuICAgIEV2ZW50TmFtZVtcIlBBR0VfVklFV1wiXSA9IFwicGFnZV92aWV3XCI7XHJcbiAgICBFdmVudE5hbWVbXCJQVVJDSEFTRVwiXSA9IFwicHVyY2hhc2VcIjtcclxuICAgIEV2ZW50TmFtZVtcIlJFRlVORFwiXSA9IFwicmVmdW5kXCI7XHJcbiAgICBFdmVudE5hbWVbXCJSRU1PVkVfRlJPTV9DQVJUXCJdID0gXCJyZW1vdmVfZnJvbV9jYXJ0XCI7XHJcbiAgICBFdmVudE5hbWVbXCJTQ1JFRU5fVklFV1wiXSA9IFwic2NyZWVuX3ZpZXdcIjtcclxuICAgIEV2ZW50TmFtZVtcIlNFQVJDSFwiXSA9IFwic2VhcmNoXCI7XHJcbiAgICBFdmVudE5hbWVbXCJTRUxFQ1RfQ09OVEVOVFwiXSA9IFwic2VsZWN0X2NvbnRlbnRcIjtcclxuICAgIEV2ZW50TmFtZVtcIlNFTEVDVF9JVEVNXCJdID0gXCJzZWxlY3RfaXRlbVwiO1xyXG4gICAgRXZlbnROYW1lW1wiU0VMRUNUX1BST01PVElPTlwiXSA9IFwic2VsZWN0X3Byb21vdGlvblwiO1xyXG4gICAgLyoqIEBkZXByZWNhdGVkICovXHJcbiAgICBFdmVudE5hbWVbXCJTRVRfQ0hFQ0tPVVRfT1BUSU9OXCJdID0gXCJzZXRfY2hlY2tvdXRfb3B0aW9uXCI7XHJcbiAgICBFdmVudE5hbWVbXCJTSEFSRVwiXSA9IFwic2hhcmVcIjtcclxuICAgIEV2ZW50TmFtZVtcIlNJR05fVVBcIl0gPSBcInNpZ25fdXBcIjtcclxuICAgIEV2ZW50TmFtZVtcIlRJTUlOR19DT01QTEVURVwiXSA9IFwidGltaW5nX2NvbXBsZXRlXCI7XHJcbiAgICBFdmVudE5hbWVbXCJWSUVXX0NBUlRcIl0gPSBcInZpZXdfY2FydFwiO1xyXG4gICAgRXZlbnROYW1lW1wiVklFV19JVEVNXCJdID0gXCJ2aWV3X2l0ZW1cIjtcclxuICAgIEV2ZW50TmFtZVtcIlZJRVdfSVRFTV9MSVNUXCJdID0gXCJ2aWV3X2l0ZW1fbGlzdFwiO1xyXG4gICAgRXZlbnROYW1lW1wiVklFV19QUk9NT1RJT05cIl0gPSBcInZpZXdfcHJvbW90aW9uXCI7XHJcbiAgICBFdmVudE5hbWVbXCJWSUVXX1NFQVJDSF9SRVNVTFRTXCJdID0gXCJ2aWV3X3NlYXJjaF9yZXN1bHRzXCI7XHJcbn0pKEV2ZW50TmFtZSB8fCAoRXZlbnROYW1lID0ge30pKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIExvZ3MgYW4gYW5hbHl0aWNzIGV2ZW50IHRocm91Z2ggdGhlIEZpcmViYXNlIFNESy5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gZXZlbnROYW1lIEdvb2dsZSBBbmFseXRpY3MgZXZlbnQgbmFtZSwgY2hvb3NlIGZyb20gc3RhbmRhcmQgbGlzdCBvciB1c2UgYSBjdXN0b20gc3RyaW5nLlxyXG4gKiBAcGFyYW0gZXZlbnRQYXJhbXMgQW5hbHl0aWNzIGV2ZW50IHBhcmFtZXRlcnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2dFdmVudChndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSwgZXZlbnROYW1lLCBldmVudFBhcmFtcywgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtZWFzdXJlbWVudElkLCBwYXJhbXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGd0YWdGdW5jdGlvbihHdGFnQ29tbWFuZC5FVkVOVCwgZXZlbnROYW1lLCBldmVudFBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQgLyp5aWVsZCovLCBpbml0aWFsaXphdGlvblByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50SWQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50UGFyYW1zKSwgeyAnc2VuZF90byc6IG1lYXN1cmVtZW50SWQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3RhZ0Z1bmN0aW9uKEd0YWdDb21tYW5kLkVWRU5ULCBldmVudE5hbWUsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBTZXQgc2NyZWVuX25hbWUgcGFyYW1ldGVyIGZvciB0aGlzIEdvb2dsZSBBbmFseXRpY3MgSUQuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICogQHBhcmFtIHNjcmVlbk5hbWUgU2NyZWVuIG5hbWUgc3RyaW5nIHRvIHNldC5cclxuICovXHJcbmZ1bmN0aW9uIHNldEN1cnJlbnRTY3JlZW4oZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UsIHNjcmVlbk5hbWUsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbWVhc3VyZW1lbnRJZDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgZ3RhZ0Z1bmN0aW9uKEd0YWdDb21tYW5kLlNFVCwgeyAnc2NyZWVuX25hbWUnOiBzY3JlZW5OYW1lIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIGluaXRpYWxpemF0aW9uUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZW1lbnRJZCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBndGFnRnVuY3Rpb24oR3RhZ0NvbW1hbmQuQ09ORklHLCBtZWFzdXJlbWVudElkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NjcmVlbl9uYW1lJzogc2NyZWVuTmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogU2V0IHVzZXJfaWQgcGFyYW1ldGVyIGZvciB0aGlzIEdvb2dsZSBBbmFseXRpY3MgSUQuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICogQHBhcmFtIGlkIFVzZXIgSUQgc3RyaW5nIHRvIHNldFxyXG4gKi9cclxuZnVuY3Rpb24gc2V0VXNlcklkKGd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBpZCwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtZWFzdXJlbWVudElkO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgJiYgb3B0aW9ucy5nbG9iYWwpKSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICBndGFnRnVuY3Rpb24oR3RhZ0NvbW1hbmQuU0VULCB7ICd1c2VyX2lkJzogaWQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0IC8qeWllbGQqLywgaW5pdGlhbGl6YXRpb25Qcm9taXNlXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlbWVudElkID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGd0YWdGdW5jdGlvbihHdGFnQ29tbWFuZC5DT05GSUcsIG1lYXN1cmVtZW50SWQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAndXNlcl9pZCc6IGlkXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBTZXQgYWxsIG90aGVyIHVzZXIgcHJvcGVydGllcyBvdGhlciB0aGFuIHVzZXJfaWQgYW5kIHNjcmVlbl9uYW1lLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIE1hcCBvZiB1c2VyIHByb3BlcnRpZXMgdG8gc2V0XHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRVc2VyUHJvcGVydGllcyhndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSwgcHJvcGVydGllcywgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmbGF0UHJvcGVydGllcywgX2ksIF9hLCBrZXksIG1lYXN1cmVtZW50SWQ7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZsYXRQcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMocHJvcGVydGllcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIGRvdCBub3RhdGlvbiBmb3IgbWVyZ2UgYmVoYXZpb3IgaW4gZ3RhZy5qc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGF0UHJvcGVydGllc1tcInVzZXJfcHJvcGVydGllcy5cIiArIGtleV0gPSBwcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGd0YWdGdW5jdGlvbihHdGFnQ29tbWFuZC5TRVQsIGZsYXRQcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQgLyp5aWVsZCovLCBpbml0aWFsaXphdGlvblByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50SWQgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3RhZ0Z1bmN0aW9uKEd0YWdDb21tYW5kLkNPTkZJRywgbWVhc3VyZW1lbnRJZCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyX3Byb3BlcnRpZXMnOiBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBTZXQgd2hldGhlciBjb2xsZWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgSUQuXHJcbiAqXHJcbiAqIEBwYXJhbSBlbmFibGVkIElmIHRydWUsIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBJRC5cclxuICovXHJcbmZ1bmN0aW9uIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkKGluaXRpYWxpemF0aW9uUHJvbWlzZSwgZW5hYmxlZCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtZWFzdXJlbWVudElkO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBpbml0aWFsaXphdGlvblByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50SWQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93W1wiZ2EtZGlzYWJsZS1cIiArIG1lYXN1cmVtZW50SWRdID0gIWVuYWJsZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgbG9nZ2VyID0gbmV3IExvZ2dlcignQGZpcmViYXNlL2FuYWx5dGljcycpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogSW5zZXJ0cyBndGFnIHNjcmlwdCB0YWcgaW50byB0aGUgcGFnZSB0byBhc3luY2hyb25vdXNseSBkb3dubG9hZCBndGFnLlxyXG4gKiBAcGFyYW0gZGF0YUxheWVyTmFtZSBOYW1lIG9mIGRhdGFsYXllciAobW9zdCBvZnRlbiB0aGUgZGVmYXVsdCwgXCJfZGF0YUxheWVyXCIpLlxyXG4gKi9cclxuZnVuY3Rpb24gaW5zZXJ0U2NyaXB0VGFnKGRhdGFMYXllck5hbWUpIHtcclxuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgIC8vIFdlIGFyZSBub3QgcHJvdmlkaW5nIGFuIGFuYWx5dGljc0lkIGluIHRoZSBVUkwgYmVjYXVzZSBpdCB3b3VsZCB0cmlnZ2VyIGEgYHBhZ2Vfdmlld2BcclxuICAgIC8vIHdpdGhvdXQgZmlkLiBXZSB3aWxsIGluaXRpYWxpemUgZ2EtaWQgdXNpbmcgZ3RhZyAoY29uZmlnKSBjb21tYW5kIHRvZ2V0aGVyIHdpdGggZmlkLlxyXG4gICAgc2NyaXB0LnNyYyA9IEdUQUdfVVJMICsgXCI/bD1cIiArIGRhdGFMYXllck5hbWU7XHJcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG59XHJcbi8qKlxyXG4gKiBHZXQgcmVmZXJlbmNlIHRvLCBvciBjcmVhdGUsIGdsb2JhbCBkYXRhbGF5ZXIuXHJcbiAqIEBwYXJhbSBkYXRhTGF5ZXJOYW1lIE5hbWUgb2YgZGF0YWxheWVyIChtb3N0IG9mdGVuIHRoZSBkZWZhdWx0LCBcIl9kYXRhTGF5ZXJcIikuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRPckNyZWF0ZURhdGFMYXllcihkYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICAvLyBDaGVjayBmb3IgZXhpc3RpbmcgZGF0YUxheWVyIGFuZCBjcmVhdGUgaWYgbmVlZGVkLlxyXG4gICAgdmFyIGRhdGFMYXllciA9IFtdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkod2luZG93W2RhdGFMYXllck5hbWVdKSkge1xyXG4gICAgICAgIGRhdGFMYXllciA9IHdpbmRvd1tkYXRhTGF5ZXJOYW1lXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHdpbmRvd1tkYXRhTGF5ZXJOYW1lXSA9IGRhdGFMYXllcjtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhTGF5ZXI7XHJcbn1cclxuLyoqXHJcbiAqIFdyYXBwZWQgZ3RhZyBsb2dpYyB3aGVuIGd0YWcgaXMgY2FsbGVkIHdpdGggJ2NvbmZpZycgY29tbWFuZC5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWRUb0FwcElkIE1hcCBvZiBHQSBtZWFzdXJlbWVudElEcyB0byBjb3JyZXNwb25kaW5nIEZpcmViYXNlIGFwcElkLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZCBHQSBNZWFzdXJlbWVudCBJRCB0byBzZXQgY29uZmlnIGZvci5cclxuICogQHBhcmFtIGd0YWdQYXJhbXMgR3RhZyBjb25maWcgcGFyYW1zIHRvIHNldC5cclxuICovXHJcbmZ1bmN0aW9uIGd0YWdPbkNvbmZpZyhndGFnQ29yZSwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIG1lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY29ycmVzcG9uZGluZ0FwcElkLCBkeW5hbWljQ29uZmlnUmVzdWx0cywgZm91bmRDb25maWcsIGVfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kaW5nQXBwSWQgPSBtZWFzdXJlbWVudElkVG9BcHBJZFttZWFzdXJlbWVudElkXTtcclxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsxLCA3LCAsIDhdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvcnJlc3BvbmRpbmdBcHBJZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFtjb3JyZXNwb25kaW5nQXBwSWRdXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljQ29uZmlnUmVzdWx0cyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZENvbmZpZyA9IGR5bmFtaWNDb25maWdSZXN1bHRzLmZpbmQoZnVuY3Rpb24gKGNvbmZpZykgeyByZXR1cm4gY29uZmlnLm1lYXN1cmVtZW50SWQgPT09IG1lYXN1cmVtZW50SWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZm91bmRDb25maWcpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbZm91bmRDb25maWcuYXBwSWRdXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgZ3RhZ0NvcmUoR3RhZ0NvbW1hbmQuQ09ORklHLCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBXcmFwcGVkIGd0YWcgbG9naWMgd2hlbiBndGFnIGlzIGNhbGxlZCB3aXRoICdldmVudCcgY29tbWFuZC5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWQgR0EgTWVhc3VyZW1lbnQgSUQgdG8gbG9nIGV2ZW50IHRvLlxyXG4gKiBAcGFyYW0gZ3RhZ1BhcmFtcyBQYXJhbXMgdG8gbG9nIHdpdGggdGhpcyBldmVudC5cclxuICovXHJcbmZ1bmN0aW9uIGd0YWdPbkV2ZW50KGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IsIGdhU2VuZFRvTGlzdCwgZHluYW1pY0NvbmZpZ1Jlc3VsdHMsIF9sb29wXzEsIF9pLCBnYVNlbmRUb0xpc3RfMSwgc2VuZFRvSWQsIHN0YXRlXzEsIGVfMjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShndGFnUGFyYW1zICYmIGd0YWdQYXJhbXNbJ3NlbmRfdG8nXSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhU2VuZFRvTGlzdCA9IGd0YWdQYXJhbXNbJ3NlbmRfdG8nXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIGl0IGFuIGFycmF5IGlmIGlzIGlzbid0LCBzbyBpdCBjYW4gYmUgZGVhbHQgd2l0aCB0aGUgc2FtZSB3YXkuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGdhU2VuZFRvTGlzdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FTZW5kVG9MaXN0ID0gW2dhU2VuZFRvTGlzdF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljQ29uZmlnUmVzdWx0cyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfbG9vcF8xID0gZnVuY3Rpb24gKHNlbmRUb0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFueSBmZXRjaGVkIGR5bmFtaWMgbWVhc3VyZW1lbnQgSUQgdGhhdCBtYXRjaGVzIHRoaXMgJ3NlbmRfdG8nIElEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZENvbmZpZyA9IGR5bmFtaWNDb25maWdSZXN1bHRzLmZpbmQoZnVuY3Rpb24gKGNvbmZpZykgeyByZXR1cm4gY29uZmlnLm1lYXN1cmVtZW50SWQgPT09IHNlbmRUb0lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluaXRpYWxpemF0aW9uUHJvbWlzZSA9IGZvdW5kQ29uZmlnICYmIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbZm91bmRDb25maWcuYXBwSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbGl6YXRpb25Qcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yLnB1c2goaW5pdGlhbGl6YXRpb25Qcm9taXNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIGl0ZW0gaW4gJ3NlbmRfdG8nIHRoYXQgaXMgbm90IGFzc29jaWF0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpcmVjdGx5IHdpdGggYW4gRklELCBwb3NzaWJseSBhIGdyb3VwLiAgRW1wdHkgdGhpcyBhcnJheSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4aXQgdGhlIGxvb3AgZWFybHksIGFuZCBsZXQgaXQgZ2V0IHBvcHVsYXRlZCBiZWxvdy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBnYVNlbmRUb0xpc3RfMSA9IGdhU2VuZFRvTGlzdDsgX2kgPCBnYVNlbmRUb0xpc3RfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvSWQgPSBnYVNlbmRUb0xpc3RfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlXzEgPSBfbG9vcF8xKHNlbmRUb0lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlXzEgPT09IFwiYnJlYWtcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGJlIHVucG9wdWxhdGVkIGlmIHRoZXJlIHdhcyBubyAnc2VuZF90bycgZmllbGQgLCBvclxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG5vdCBhbGwgZW50cmllcyBpbiB0aGUgJ3NlbmRfdG8nIGZpZWxkIGNvdWxkIGJlIG1hcHBlZCB0b1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgRklELiBJbiB0aGVzZSBjYXNlcywgd2FpdCBvbiBhbGwgcGVuZGluZyBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvciA9IE9iamVjdC52YWx1ZXMoaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biBjb3JlIGd0YWcgZnVuY3Rpb24gd2l0aCBhcmdzIGFmdGVyIGFsbCByZWxldmFudCBpbml0aWFsaXphdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZC5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUnVuIGNvcmUgZ3RhZyBmdW5jdGlvbiB3aXRoIGFyZ3MgYWZ0ZXIgYWxsIHJlbGV2YW50IGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkLlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwOi8vYi8xNDEzNzA0NDkgLSB0aGlyZCBhcmd1bWVudCBjYW5ub3QgYmUgdW5kZWZpbmVkLlxyXG4gICAgICAgICAgICAgICAgICAgIGd0YWdDb3JlKEd0YWdDb21tYW5kLkVWRU5ULCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zIHx8IHt9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBlXzIgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVfMik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFdyYXBzIGEgc3RhbmRhcmQgZ3RhZyBmdW5jdGlvbiB3aXRoIGV4dHJhIGNvZGUgdG8gd2FpdCBmb3IgY29tcGxldGlvbiBvZlxyXG4gKiByZWxldmFudCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyBiZWZvcmUgc2VuZGluZyByZXF1ZXN0cy5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWRUb0FwcElkIE1hcCBvZiBHQSBtZWFzdXJlbWVudElEcyB0byBjb3JyZXNwb25kaW5nIEZpcmViYXNlIGFwcElkLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcEd0YWcoZ3RhZ0NvcmUsIFxyXG4vKipcclxuICogQWxsb3dzIHdyYXBwZWQgZ3RhZyBjYWxscyB0byB3YWl0IG9uIHdoaWNoZXZlciBpbnRpYWxpemF0aW9uIHByb21pc2VzIGFyZSByZXF1aXJlZCxcclxuICogZGVwZW5kaW5nIG9uIHRoZSBjb250ZW50cyBvZiB0aGUgZ3RhZyBwYXJhbXMnIGBzZW5kX3RvYCBmaWVsZCwgaWYgYW55LlxyXG4gKi9cclxuaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgXHJcbi8qKlxyXG4gKiBXcmFwcGVkIGd0YWcgY2FsbHMgc29tZXRpbWVzIHJlcXVpcmUgYWxsIGR5bmFtaWMgY29uZmlnIGZldGNoZXMgdG8gaGF2ZSByZXR1cm5lZFxyXG4gKiBiZWZvcmUgZGV0ZXJtaW5pbmcgd2hhdCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyAod2hpY2ggaW5jbHVkZSBGSURzKSB0byB3YWl0IGZvci5cclxuICovXHJcbmR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIFxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGNvbmZpZyBjYWxscyBjYW4gbmFycm93IGRvd24gd2hpY2ggaW5pdGlhbGl6YXRpb24gcHJvbWlzZSAod2l0aCBGSUQpXHJcbiAqIHRvIHdhaXQgZm9yIGlmIHRoZSBtZWFzdXJlbWVudElkIGlzIGFscmVhZHkgZmV0Y2hlZCwgYnkgZ2V0dGluZyB0aGUgY29ycmVzcG9uZGluZyBhcHBJZCxcclxuICogd2hpY2ggaXMgdGhlIGtleSBmb3IgdGhlIGluaXRpYWxpemF0aW9uIHByb21pc2VzIG1hcC5cclxuICovXHJcbm1lYXN1cmVtZW50SWRUb0FwcElkKSB7XHJcbiAgICAvKipcclxuICAgICAqIFdyYXBwZXIgYXJvdW5kIGd0YWcgdGhhdCBlbnN1cmVzIEZJRCBpcyBzZW50IHdpdGggZ3RhZyBjYWxscy5cclxuICAgICAqIEBwYXJhbSBjb21tYW5kIEd0YWcgY29tbWFuZCB0eXBlLlxyXG4gICAgICogQHBhcmFtIGlkT3JOYW1lT3JQYXJhbXMgTWVhc3VyZW1lbnQgSUQgaWYgY29tbWFuZCBpcyBFVkVOVC9DT05GSUcsIHBhcmFtcyBpZiBjb21tYW5kIGlzIFNFVC5cclxuICAgICAqIEBwYXJhbSBndGFnUGFyYW1zIFBhcmFtcyBpZiBldmVudCBpcyBFVkVOVC9DT05GSUcuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGd0YWdXcmFwcGVyKGNvbW1hbmQsIGlkT3JOYW1lT3JQYXJhbXMsIGd0YWdQYXJhbXMpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBlXzM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgNiwgLCA3XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGNvbW1hbmQgPT09IEd0YWdDb21tYW5kLkVWRU5UKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIEVWRU5ULCBzZWNvbmQgYXJnIG11c3QgYmUgbWVhc3VyZW1lbnRJZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ3RhZ09uRXZlbnQoZ3RhZ0NvcmUsIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIGlkT3JOYW1lT3JQYXJhbXMsIGd0YWdQYXJhbXMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIEVWRU5ULCBzZWNvbmQgYXJnIG11c3QgYmUgbWVhc3VyZW1lbnRJZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGNvbW1hbmQgPT09IEd0YWdDb21tYW5kLkNPTkZJRykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBDT05GSUcsIHNlY29uZCBhcmcgbXVzdCBiZSBtZWFzdXJlbWVudElkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBndGFnT25Db25maWcoZ3RhZ0NvcmUsIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkLCBpZE9yTmFtZU9yUGFyYW1zLCBndGFnUGFyYW1zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBDT05GSUcsIHNlY29uZCBhcmcgbXVzdCBiZSBtZWFzdXJlbWVudElkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgU0VULCBzZWNvbmQgYXJnIG11c3QgYmUgcGFyYW1zLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBndGFnQ29yZShHdGFnQ29tbWFuZC5TRVQsIGlkT3JOYW1lT3JQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVfMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBndGFnV3JhcHBlcjtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBnbG9iYWwgZ3RhZyBmdW5jdGlvbiBvciB3cmFwcyBleGlzdGluZyBvbmUgaWYgZm91bmQuXHJcbiAqIFRoaXMgd3JhcHBlZCBmdW5jdGlvbiBhdHRhY2hlcyBGaXJlYmFzZSBpbnN0YW5jZSBJRCAoRklEKSB0byBndGFnICdjb25maWcnIGFuZFxyXG4gKiAnZXZlbnQnIGNhbGxzIHRoYXQgYmVsb25nIHRvIHRoZSBHQUlEIGFzc29jaWF0ZWQgd2l0aCB0aGlzIEZpcmViYXNlIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWRUb0FwcElkIE1hcCBvZiBHQSBtZWFzdXJlbWVudElEcyB0byBjb3JyZXNwb25kaW5nIEZpcmViYXNlIGFwcElkLlxyXG4gKiBAcGFyYW0gZGF0YUxheWVyTmFtZSBOYW1lIG9mIGdsb2JhbCBHQSBkYXRhbGF5ZXIgYXJyYXkuXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb25OYW1lIE5hbWUgb2YgZ2xvYmFsIGd0YWcgZnVuY3Rpb24gKFwiZ3RhZ1wiIGlmIG5vdCB1c2VyLXNwZWNpZmllZCkuXHJcbiAqL1xyXG5mdW5jdGlvbiB3cmFwT3JDcmVhdGVHdGFnKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkLCBkYXRhTGF5ZXJOYW1lLCBndGFnRnVuY3Rpb25OYW1lKSB7XHJcbiAgICAvLyBDcmVhdGUgYSBiYXNpYyBjb3JlIGd0YWcgZnVuY3Rpb25cclxuICAgIHZhciBndGFnQ29yZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2FyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBfYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBNdXN0IHB1c2ggSUFyZ3VtZW50cyBvYmplY3QsIG5vdCBhbiBhcnJheS5cclxuICAgICAgICB3aW5kb3dbZGF0YUxheWVyTmFtZV0ucHVzaChhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICAgIC8vIFJlcGxhY2UgaXQgd2l0aCBleGlzdGluZyBvbmUgaWYgZm91bmRcclxuICAgIGlmICh3aW5kb3dbZ3RhZ0Z1bmN0aW9uTmFtZV0gJiZcclxuICAgICAgICB0eXBlb2Ygd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGd0YWdDb3JlID0gd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdO1xyXG4gICAgfVxyXG4gICAgd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdID0gd3JhcEd0YWcoZ3RhZ0NvcmUsIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ3RhZ0NvcmU6IGd0YWdDb3JlLFxyXG4gICAgICAgIHdyYXBwZWRHdGFnOiB3aW5kb3dbZ3RhZ0Z1bmN0aW9uTmFtZV1cclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgZmlyc3Qgc2NyaXB0IHRhZyBpbiBET00gbWF0Y2hpbmcgb3VyIGd0YWcgdXJsIHBhdHRlcm4uXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kR3RhZ1NjcmlwdE9uUGFnZSgpIHtcclxuICAgIHZhciBzY3JpcHRUYWdzID0gd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QudmFsdWVzKHNjcmlwdFRhZ3MpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciB0YWcgPSBfYVtfaV07XHJcbiAgICAgICAgaWYgKHRhZy5zcmMgJiYgdGFnLnNyYy5pbmNsdWRlcyhHVEFHX1VSTCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX2E7XHJcbnZhciBFUlJPUlMgPSAoX2EgPSB7fSxcclxuICAgIF9hW1wiYWxyZWFkeS1leGlzdHNcIiAvKiBBTFJFQURZX0VYSVNUUyAqL10gPSAnQSBGaXJlYmFzZSBBbmFseXRpY3MgaW5zdGFuY2Ugd2l0aCB0aGUgYXBwSWQgeyRpZH0gJyArXHJcbiAgICAgICAgJyBhbHJlYWR5IGV4aXN0cy4gJyArXHJcbiAgICAgICAgJ09ubHkgb25lIEZpcmViYXNlIEFuYWx5dGljcyBpbnN0YW5jZSBjYW4gYmUgY3JlYXRlZCBmb3IgZWFjaCBhcHBJZC4nLFxyXG4gICAgX2FbXCJhbHJlYWR5LWluaXRpYWxpemVkXCIgLyogQUxSRUFEWV9JTklUSUFMSVpFRCAqL10gPSAnRmlyZWJhc2UgQW5hbHl0aWNzIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQuJyArXHJcbiAgICAgICAgJ3NldHRpbmdzKCkgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGluaXRpYWxpemluZyBhbnkgQW5hbHl0aWNzIGluc3RhbmNlJyArXHJcbiAgICAgICAgJ29yIGl0IHdpbGwgaGF2ZSBubyBlZmZlY3QuJyxcclxuICAgIF9hW1wiaW50ZXJvcC1jb21wb25lbnQtcmVnLWZhaWxlZFwiIC8qIElOVEVST1BfQ09NUE9ORU5UX1JFR19GQUlMRUQgKi9dID0gJ0ZpcmViYXNlIEFuYWx5dGljcyBJbnRlcm9wIENvbXBvbmVudCBmYWlsZWQgdG8gaW5zdGFudGlhdGU6IHskcmVhc29ufScsXHJcbiAgICBfYVtcImludmFsaWQtYW5hbHl0aWNzLWNvbnRleHRcIiAvKiBJTlZBTElEX0FOQUxZVElDU19DT05URVhUICovXSA9ICdGaXJlYmFzZSBBbmFseXRpY3MgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50LiAnICtcclxuICAgICAgICAnV3JhcCBpbml0aWFsaXphdGlvbiBvZiBhbmFseXRpY3MgaW4gYW5hbHl0aWNzLmlzU3VwcG9ydGVkKCkgJyArXHJcbiAgICAgICAgJ3RvIHByZXZlbnQgaW5pdGlhbGl6YXRpb24gaW4gdW5zdXBwb3J0ZWQgZW52aXJvbm1lbnRzLiBEZXRhaWxzOiB7JGVycm9ySW5mb30nLFxyXG4gICAgX2FbXCJpbmRleGVkZGItdW5hdmFpbGFibGVcIiAvKiBJTkRFWEVEREJfVU5BVkFJTEFCTEUgKi9dID0gJ0luZGV4ZWREQiB1bmF2YWlsYWJsZSBvciByZXN0cmljdGVkIGluIHRoaXMgZW52aXJvbm1lbnQuICcgK1xyXG4gICAgICAgICdXcmFwIGluaXRpYWxpemF0aW9uIG9mIGFuYWx5dGljcyBpbiBhbmFseXRpY3MuaXNTdXBwb3J0ZWQoKSAnICtcclxuICAgICAgICAndG8gcHJldmVudCBpbml0aWFsaXphdGlvbiBpbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudHMuIERldGFpbHM6IHskZXJyb3JJbmZvfScsXHJcbiAgICBfYVtcImZldGNoLXRocm90dGxlXCIgLyogRkVUQ0hfVEhST1RUTEUgKi9dID0gJ1RoZSBjb25maWcgZmV0Y2ggcmVxdWVzdCB0aW1lZCBvdXQgd2hpbGUgaW4gYW4gZXhwb25lbnRpYWwgYmFja29mZiBzdGF0ZS4nICtcclxuICAgICAgICAnIFVuaXggdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcyB3aGVuIGZldGNoIHJlcXVlc3QgdGhyb3R0bGluZyBlbmRzOiB7JHRocm90dGxlRW5kVGltZU1pbGxpc30uJyxcclxuICAgIF9hW1wiY29uZmlnLWZldGNoLWZhaWxlZFwiIC8qIENPTkZJR19GRVRDSF9GQUlMRUQgKi9dID0gJ0R5bmFtaWMgY29uZmlnIGZldGNoIGZhaWxlZDogW3skaHR0cFN0YXR1c31dIHskcmVzcG9uc2VNZXNzYWdlfScsXHJcbiAgICBfYVtcIm5vLWFwaS1rZXlcIiAvKiBOT19BUElfS0VZICovXSA9ICdUaGUgXCJhcGlLZXlcIiBmaWVsZCBpcyBlbXB0eSBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLiBGaXJlYmFzZSBBbmFseXRpY3MgcmVxdWlyZXMgdGhpcyBmaWVsZCB0bycgK1xyXG4gICAgICAgICdjb250YWluIGEgdmFsaWQgQVBJIGtleS4nLFxyXG4gICAgX2FbXCJuby1hcHAtaWRcIiAvKiBOT19BUFBfSUQgKi9dID0gJ1RoZSBcImFwcElkXCIgZmllbGQgaXMgZW1wdHkgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gRmlyZWJhc2UgQW5hbHl0aWNzIHJlcXVpcmVzIHRoaXMgZmllbGQgdG8nICtcclxuICAgICAgICAnY29udGFpbiBhIHZhbGlkIGFwcCBJRC4nLFxyXG4gICAgX2EpO1xyXG52YXIgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoJ2FuYWx5dGljcycsICdBbmFseXRpY3MnLCBFUlJPUlMpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQmFja29mZiBmYWN0b3IgZm9yIDUwMyBlcnJvcnMsIHdoaWNoIHdlIHdhbnQgdG8gYmUgY29uc2VydmF0aXZlIGFib3V0XHJcbiAqIHRvIGF2b2lkIG92ZXJsb2FkaW5nIHNlcnZlcnMuIEVhY2ggcmV0cnkgaW50ZXJ2YWwgd2lsbCBiZVxyXG4gKiBCQVNFX0lOVEVSVkFMX01JTExJUyAqIExPTkdfUkVUUllfRkFDVE9SIF4gcmV0cnlDb3VudCwgc28gdGhlIHNlY29uZCBvbmVcclxuICogd2lsbCBiZSB+MzAgc2Vjb25kcyAod2l0aCBmdXp6aW5nKS5cclxuICovXHJcbnZhciBMT05HX1JFVFJZX0ZBQ1RPUiA9IDMwO1xyXG4vKipcclxuICogQmFzZSB3YWl0IGludGVydmFsIHRvIG11bHRpcGxpZWQgYnkgYmFja29mZkZhY3Rvcl5iYWNrb2ZmQ291bnQuXHJcbiAqL1xyXG52YXIgQkFTRV9JTlRFUlZBTF9NSUxMSVMgPSAxMDAwO1xyXG4vKipcclxuICogU3R1YmJhYmxlIHJldHJ5IGRhdGEgc3RvcmFnZSBjbGFzcy5cclxuICovXHJcbnZhciBSZXRyeURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZXRyeURhdGEodGhyb3R0bGVNZXRhZGF0YSwgaW50ZXJ2YWxNaWxsaXMpIHtcclxuICAgICAgICBpZiAodGhyb3R0bGVNZXRhZGF0YSA9PT0gdm9pZCAwKSB7IHRocm90dGxlTWV0YWRhdGEgPSB7fTsgfVxyXG4gICAgICAgIGlmIChpbnRlcnZhbE1pbGxpcyA9PT0gdm9pZCAwKSB7IGludGVydmFsTWlsbGlzID0gQkFTRV9JTlRFUlZBTF9NSUxMSVM7IH1cclxuICAgICAgICB0aGlzLnRocm90dGxlTWV0YWRhdGEgPSB0aHJvdHRsZU1ldGFkYXRhO1xyXG4gICAgICAgIHRoaXMuaW50ZXJ2YWxNaWxsaXMgPSBpbnRlcnZhbE1pbGxpcztcclxuICAgIH1cclxuICAgIFJldHJ5RGF0YS5wcm90b3R5cGUuZ2V0VGhyb3R0bGVNZXRhZGF0YSA9IGZ1bmN0aW9uIChhcHBJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdO1xyXG4gICAgfTtcclxuICAgIFJldHJ5RGF0YS5wcm90b3R5cGUuc2V0VGhyb3R0bGVNZXRhZGF0YSA9IGZ1bmN0aW9uIChhcHBJZCwgbWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdID0gbWV0YWRhdGE7XHJcbiAgICB9O1xyXG4gICAgUmV0cnlEYXRhLnByb3RvdHlwZS5kZWxldGVUaHJvdHRsZU1ldGFkYXRhID0gZnVuY3Rpb24gKGFwcElkKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMudGhyb3R0bGVNZXRhZGF0YVthcHBJZF07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJldHJ5RGF0YTtcclxufSgpKTtcclxudmFyIGRlZmF1bHRSZXRyeURhdGEgPSBuZXcgUmV0cnlEYXRhKCk7XHJcbi8qKlxyXG4gKiBTZXQgR0VUIHJlcXVlc3QgaGVhZGVycy5cclxuICogQHBhcmFtIGFwaUtleSBBcHAgQVBJIGtleS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEhlYWRlcnMoYXBpS2V5KSB7XHJcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICd4LWdvb2ctYXBpLWtleSc6IGFwaUtleVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIEZldGNoZXMgZHluYW1pYyBjb25maWcgZnJvbSBiYWNrZW5kLlxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcCB0byBmZXRjaCBjb25maWcgZm9yLlxyXG4gKi9cclxuZnVuY3Rpb24gZmV0Y2hEeW5hbWljQ29uZmlnKGFwcEZpZWxkcykge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcHBJZCwgYXBpS2V5LCByZXF1ZXN0LCBhcHBVcmwsIHJlc3BvbnNlLCBlcnJvck1lc3NhZ2UsIGpzb25SZXNwb25zZSwgX2lnbm9yZWRfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBhcHBJZCA9IGFwcEZpZWxkcy5hcHBJZCwgYXBpS2V5ID0gYXBwRmllbGRzLmFwaUtleTtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBnZXRIZWFkZXJzKGFwaUtleSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcFVybCA9IERZTkFNSUNfQ09ORklHX1VSTC5yZXBsYWNlKCd7YXBwLWlkfScsIGFwcElkKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaChhcHBVcmwsIHJlcXVlc3QpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZS5zdGF0dXMgIT09IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgIT09IDMwNCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzIsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlc3BvbnNlLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAganNvblJlc3BvbnNlID0gKF9iLnNlbnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChfYSA9IGpzb25SZXNwb25zZS5lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0ganNvblJlc3BvbnNlLmVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9pZ25vcmVkXzEgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiY29uZmlnLWZldGNoLWZhaWxlZFwiIC8qIENPTkZJR19GRVRDSF9GQUlMRUQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBodHRwU3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VNZXNzYWdlOiBlcnJvck1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2UuanNvbigpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIEZldGNoZXMgZHluYW1pYyBjb25maWcgZnJvbSBiYWNrZW5kLCByZXRyeWluZyBpZiBmYWlsZWQuXHJcbiAqIEBwYXJhbSBhcHAgRmlyZWJhc2UgYXBwIHRvIGZldGNoIGNvbmZpZyBmb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBmZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwLCBcclxuLy8gcmV0cnlEYXRhIGFuZCB0aW1lb3V0TWlsbGlzIGFyZSBwYXJhbWV0ZXJpemVkIHRvIGFsbG93IHBhc3NpbmcgYSBkaWZmZXJlbnQgdmFsdWUgZm9yIHRlc3RpbmcuXHJcbnJldHJ5RGF0YSwgdGltZW91dE1pbGxpcykge1xyXG4gICAgaWYgKHJldHJ5RGF0YSA9PT0gdm9pZCAwKSB7IHJldHJ5RGF0YSA9IGRlZmF1bHRSZXRyeURhdGE7IH1cclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EsIGFwcElkLCBhcGlLZXksIG1lYXN1cmVtZW50SWQsIHRocm90dGxlTWV0YWRhdGEsIHNpZ25hbDtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgX2EgPSBhcHAub3B0aW9ucywgYXBwSWQgPSBfYS5hcHBJZCwgYXBpS2V5ID0gX2EuYXBpS2V5LCBtZWFzdXJlbWVudElkID0gX2EubWVhc3VyZW1lbnRJZDtcclxuICAgICAgICAgICAgaWYgKCFhcHBJZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcHAtaWRcIiAvKiBOT19BUFBfSUQgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYXBpS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlbWVudElkOiBtZWFzdXJlbWVudElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwSWQ6IGFwcElkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcGkta2V5XCIgLyogTk9fQVBJX0tFWSAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhyb3R0bGVNZXRhZGF0YSA9IHJldHJ5RGF0YS5nZXRUaHJvdHRsZU1ldGFkYXRhKGFwcElkKSB8fCB7XHJcbiAgICAgICAgICAgICAgICBiYWNrb2ZmQ291bnQ6IDAsXHJcbiAgICAgICAgICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXM6IERhdGUubm93KClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc2lnbmFsID0gbmV3IEFuYWx5dGljc0Fib3J0U2lnbmFsKCk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGUgYSB2ZXJ5IGxvdyBkZWxheSwgZWcgPCAxMG1zLCBjYW4gZWxhcHNlIGJlZm9yZSBsaXN0ZW5lcnMgYXJlIGluaXRpYWxpemVkLlxyXG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbC5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTsgfSwgdGltZW91dE1pbGxpcyAhPT0gdW5kZWZpbmVkID8gdGltZW91dE1pbGxpcyA6IEZFVENIX1RJTUVPVVRfTUlMTElTKTtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoeyBhcHBJZDogYXBwSWQsIGFwaUtleTogYXBpS2V5LCBtZWFzdXJlbWVudElkOiBtZWFzdXJlbWVudElkIH0sIHRocm90dGxlTWV0YWRhdGEsIHNpZ25hbCwgcmV0cnlEYXRhKV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogUnVucyBvbmUgcmV0cnkgYXR0ZW1wdC5cclxuICogQHBhcmFtIGFwcEZpZWxkcyBOZWNlc3NhcnkgYXBwIGNvbmZpZyBmaWVsZHMuXHJcbiAqIEBwYXJhbSB0aHJvdHRsZU1ldGFkYXRhIE9uZ29pbmcgbWV0YWRhdGEgdG8gZGV0ZXJtaW5lIHRocm90dGxpbmcgdGltZXMuXHJcbiAqIEBwYXJhbSBzaWduYWwgQWJvcnQgc2lnbmFsLlxyXG4gKi9cclxuZnVuY3Rpb24gYXR0ZW1wdEZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeShhcHBGaWVsZHMsIF9hLCBzaWduYWwsIHJldHJ5RGF0YSAvLyBmb3IgdGVzdGluZ1xyXG4pIHtcclxuICAgIHZhciB0aHJvdHRsZUVuZFRpbWVNaWxsaXMgPSBfYS50aHJvdHRsZUVuZFRpbWVNaWxsaXMsIGJhY2tvZmZDb3VudCA9IF9hLmJhY2tvZmZDb3VudDtcclxuICAgIGlmIChyZXRyeURhdGEgPT09IHZvaWQgMCkgeyByZXRyeURhdGEgPSBkZWZhdWx0UmV0cnlEYXRhOyB9XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFwcElkLCBtZWFzdXJlbWVudElkLCBlXzEsIHJlc3BvbnNlLCBlXzIsIGJhY2tvZmZNaWxsaXMsIHRocm90dGxlTWV0YWRhdGE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwSWQgPSBhcHBGaWVsZHMuYXBwSWQsIG1lYXN1cmVtZW50SWQgPSBhcHBGaWVsZHMubWVhc3VyZW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAzLCAsIDRdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXRBYm9ydGFibGVUaW1lb3V0KHNpZ25hbCwgdGhyb3R0bGVFbmRUaW1lTWlsbGlzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIGVfMSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcIlRpbWVkIG91dCBmZXRjaGluZyB0aGlzIEZpcmViYXNlIGFwcCdzIG1lYXN1cmVtZW50IElEIGZyb20gdGhlIHNlcnZlci5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCIgRmFsbGluZyBiYWNrIHRvIHRoZSBtZWFzdXJlbWVudCBJRCBcIiArIG1lYXN1cmVtZW50SWQpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcIiBwcm92aWRlZCBpbiB0aGUgXFxcIm1lYXN1cmVtZW50SWRcXFwiIGZpZWxkIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIFtcIiArIGVfMS5tZXNzYWdlICsgXCJdXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHsgYXBwSWQ6IGFwcElkLCBtZWFzdXJlbWVudElkOiBtZWFzdXJlbWVudElkIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlXzE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFs0LCA2LCAsIDddKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaER5bmFtaWNDb25maWcoYXBwRmllbGRzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZSB0aGUgU0RLIG9ubHkgY2xlYXJzIHRocm90dGxlIHN0YXRlIGlmIHJlc3BvbnNlIGlzIHN1Y2Nlc3Mgb3Igbm9uLXJldHJpYWJsZS5cclxuICAgICAgICAgICAgICAgICAgICByZXRyeURhdGEuZGVsZXRlVGhyb3R0bGVNZXRhZGF0YShhcHBJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3BvbnNlXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICBlXzIgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JldHJpYWJsZUVycm9yKGVfMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlEYXRhLmRlbGV0ZVRocm90dGxlTWV0YWRhdGEoYXBwSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJGYWlsZWQgdG8gZmV0Y2ggdGhpcyBGaXJlYmFzZSBhcHAncyBtZWFzdXJlbWVudCBJRCBmcm9tIHRoZSBzZXJ2ZXIuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcIiBGYWxsaW5nIGJhY2sgdG8gdGhlIG1lYXN1cmVtZW50IElEIFwiICsgbWVhc3VyZW1lbnRJZCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcIiBwcm92aWRlZCBpbiB0aGUgXFxcIm1lYXN1cmVtZW50SWRcXFwiIGZpZWxkIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIFtcIiArIGVfMi5tZXNzYWdlICsgXCJdXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7IGFwcElkOiBhcHBJZCwgbWVhc3VyZW1lbnRJZDogbWVhc3VyZW1lbnRJZCB9XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVfMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYWNrb2ZmTWlsbGlzID0gTnVtYmVyKGVfMi5jdXN0b21EYXRhLmh0dHBTdGF0dXMpID09PSA1MDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKGJhY2tvZmZDb3VudCwgcmV0cnlEYXRhLmludGVydmFsTWlsbGlzLCBMT05HX1JFVFJZX0ZBQ1RPUilcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKGJhY2tvZmZDb3VudCwgcmV0cnlEYXRhLmludGVydmFsTWlsbGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZU1ldGFkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXM6IERhdGUubm93KCkgKyBiYWNrb2ZmTWlsbGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrb2ZmQ291bnQ6IGJhY2tvZmZDb3VudCArIDFcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFBlcnNpc3RzIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHJ5RGF0YS5zZXRUaHJvdHRsZU1ldGFkYXRhKGFwcElkLCB0aHJvdHRsZU1ldGFkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoXCJDYWxsaW5nIGF0dGVtcHRGZXRjaCBhZ2FpbiBpbiBcIiArIGJhY2tvZmZNaWxsaXMgKyBcIiBtaWxsaXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwRmllbGRzLCB0aHJvdHRsZU1ldGFkYXRhLCBzaWduYWwsIHJldHJ5RGF0YSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBTdXBwb3J0cyB3YWl0aW5nIG9uIGEgYmFja29mZiBieTpcclxuICpcclxuICogPHVsPlxyXG4gKiAgIDxsaT5Qcm9taXNpZnlpbmcgc2V0VGltZW91dCwgc28gd2UgY2FuIHNldCBhIHRpbWVvdXQgaW4gb3VyIFByb21pc2UgY2hhaW48L2xpPlxyXG4gKiAgIDxsaT5MaXN0ZW5pbmcgb24gYSBzaWduYWwgYnVzIGZvciBhYm9ydCBldmVudHMsIGp1c3QgbGlrZSB0aGUgRmV0Y2ggQVBJPC9saT5cclxuICogICA8bGk+RmFpbGluZyBpbiB0aGUgc2FtZSB3YXkgdGhlIEZldGNoIEFQSSBmYWlscywgc28gdGltaW5nIG91dCBhIGxpdmUgcmVxdWVzdCBhbmQgYSB0aHJvdHRsZWRcclxuICogICAgICAgcmVxdWVzdCBhcHBlYXIgdGhlIHNhbWUuPC9saT5cclxuICogPC91bD5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZy5cclxuICovXHJcbmZ1bmN0aW9uIHNldEFib3J0YWJsZVRpbWVvdXQoc2lnbmFsLCB0aHJvdHRsZUVuZFRpbWVNaWxsaXMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgLy8gRGVyaXZlcyBiYWNrb2ZmIGZyb20gZ2l2ZW4gZW5kIHRpbWUsIG5vcm1hbGl6aW5nIG5lZ2F0aXZlIG51bWJlcnMgdG8gemVyby5cclxuICAgICAgICB2YXIgYmFja29mZk1pbGxpcyA9IE1hdGgubWF4KHRocm90dGxlRW5kVGltZU1pbGxpcyAtIERhdGUubm93KCksIDApO1xyXG4gICAgICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChyZXNvbHZlLCBiYWNrb2ZmTWlsbGlzKTtcclxuICAgICAgICAvLyBBZGRzIGxpc3RlbmVyLCByYXRoZXIgdGhhbiBzZXRzIG9uYWJvcnQsIGJlY2F1c2Ugc2lnbmFsIGlzIGEgc2hhcmVkIG9iamVjdC5cclxuICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHJlcXVlc3QgY29tcGxldGVzIGJlZm9yZSB0aGlzIHRpbWVvdXQsIHRoZSByZWplY3Rpb24gaGFzIG5vIGVmZmVjdC5cclxuICAgICAgICAgICAgcmVqZWN0KEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZmV0Y2gtdGhyb3R0bGVcIiAvKiBGRVRDSF9USFJPVFRMRSAqLywge1xyXG4gICAgICAgICAgICAgICAgdGhyb3R0bGVFbmRUaW1lTWlsbGlzOiB0aHJvdHRsZUVuZFRpbWVNaWxsaXNcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUge0BsaW5rIEVycm9yfSBpbmRpY2F0ZXMgYSBmZXRjaCByZXF1ZXN0IG1heSBzdWNjZWVkIGxhdGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZXRyaWFibGVFcnJvcihlKSB7XHJcbiAgICBpZiAoIShlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikgfHwgIWUuY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIFVzZXMgc3RyaW5nIGluZGV4IGRlZmluZWQgYnkgRXJyb3JEYXRhLCB3aGljaCBGaXJlYmFzZUVycm9yIGltcGxlbWVudHMuXHJcbiAgICB2YXIgaHR0cFN0YXR1cyA9IE51bWJlcihlLmN1c3RvbURhdGFbJ2h0dHBTdGF0dXMnXSk7XHJcbiAgICByZXR1cm4gKGh0dHBTdGF0dXMgPT09IDQyOSB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwMCB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwMyB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwNCk7XHJcbn1cclxuLyoqXHJcbiAqIFNoaW1zIGEgbWluaW1hbCBBYm9ydFNpZ25hbCAoY29waWVkIGZyb20gUmVtb3RlIENvbmZpZykuXHJcbiAqXHJcbiAqIDxwPkFib3J0Q29udHJvbGxlcidzIEFib3J0U2lnbmFsIGNvbnZlbmllbnRseSBkZWNvdXBsZXMgZmV0Y2ggdGltZW91dCBsb2dpYyBmcm9tIG90aGVyIGFzcGVjdHNcclxuICogb2YgbmV0d29ya2luZywgc3VjaCBhcyByZXRyaWVzLiBGaXJlYmFzZSBkb2Vzbid0IHVzZSBBYm9ydENvbnRyb2xsZXIgZW5vdWdoIHRvIGp1c3RpZnkgYVxyXG4gKiBwb2x5ZmlsbCByZWNvbW1lbmRhdGlvbiwgbGlrZSB3ZSBkbyB3aXRoIHRoZSBGZXRjaCBBUEksIGJ1dCB0aGlzIG1pbmltYWwgc2hpbSBjYW4gZWFzaWx5IGJlXHJcbiAqIHN3YXBwZWQgb3V0IGlmL3doZW4gd2UgZG8uXHJcbiAqL1xyXG52YXIgQW5hbHl0aWNzQWJvcnRTaWduYWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBbmFseXRpY3NBYm9ydFNpZ25hbCgpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgQW5hbHl0aWNzQWJvcnRTaWduYWwucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH07XHJcbiAgICBBbmFseXRpY3NBYm9ydFNpZ25hbC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKCk7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBbmFseXRpY3NBYm9ydFNpZ25hbDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVJbmRleGVkREIoKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISFpc0luZGV4ZWREQkF2YWlsYWJsZSgpKSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImluZGV4ZWRkYi11bmF2YWlsYWJsZVwiIC8qIElOREVYRUREQl9VTkFWQUlMQUJMRSAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckluZm86ICdJbmRleGVkREIgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LidcclxuICAgICAgICAgICAgICAgICAgICB9KS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW5kZXhlZGRiLXVuYXZhaWxhYmxlXCIgLyogSU5ERVhFRERCX1VOQVZBSUxBQkxFICovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ySW5mbzogZV8xXHJcbiAgICAgICAgICAgICAgICAgICAgfSkubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRydWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgYW5hbHl0aWNzIGluc3RhbmNlIGluIGd0YWcuanMgYnkgY2FsbGluZyBjb25maWcgY29tbWFuZCB3aXRoIGZpZC5cclxuICpcclxuICogTk9URTogV2UgY29tYmluZSBhbmFseXRpY3MgaW5pdGlhbGl6YXRpb24gYW5kIHNldHRpbmcgZmlkIHRvZ2V0aGVyIGJlY2F1c2Ugd2Ugd2FudCBmaWQgdG8gYmVcclxuICogcGFydCBvZiB0aGUgYHBhZ2Vfdmlld2AgZXZlbnQgdGhhdCdzIHNlbnQgZHVyaW5nIHRoZSBpbml0aWFsaXphdGlvblxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcFxyXG4gKiBAcGFyYW0gZ3RhZ0NvcmUgVGhlIGd0YWcgZnVuY3Rpb24gdGhhdCdzIG5vdCB3cmFwcGVkLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBhbGwgZHluYW1pYyBjb25maWcgcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkVG9BcHBJZCBNYXBzIG1lYXN1cmVtZW50SUQgdG8gYXBwSUQuXHJcbiAqIEBwYXJhbSBpbnN0YWxsYXRpb25zIEZpcmViYXNlSW5zdGFsbGF0aW9ucyBpbnN0YW5jZS5cclxuICpcclxuICogQHJldHVybnMgTWVhc3VyZW1lbnQgSUQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0aWFsaXplSWRzKGFwcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIGluc3RhbGxhdGlvbnMsIGd0YWdDb3JlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGR5bmFtaWNDb25maWdQcm9taXNlLCBmaWRQcm9taXNlLCBfYSwgZHluYW1pY0NvbmZpZywgZmlkLCBjb25maWdQcm9wZXJ0aWVzO1xyXG4gICAgICAgIHZhciBfYjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljQ29uZmlnUHJvbWlzZSA9IGZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeShhcHApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9uY2UgZmV0Y2hlZCwgbWFwIG1lYXN1cmVtZW50SWRzIHRvIGFwcElkLCBmb3IgZWFzZSBvZiBsb29rdXAgaW4gd3JhcHBlZCBndGFnIGZ1bmN0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNDb25maWdQcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZW1lbnRJZFRvQXBwSWRbY29uZmlnLm1lYXN1cmVtZW50SWRdID0gY29uZmlnLmFwcElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLm1lYXN1cmVtZW50SWQgIT09IGFwcC5vcHRpb25zLm1lYXN1cmVtZW50SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiVGhlIG1lYXN1cmVtZW50IElEIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcgKFwiICsgYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCArIFwiKVwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCIgZG9lcyBub3QgbWF0Y2ggdGhlIG1lYXN1cmVtZW50IElEIGZldGNoZWQgZnJvbSB0aGUgc2VydmVyIChcIiArIGNvbmZpZy5tZWFzdXJlbWVudElkICsgXCIpLlwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgVG8gZW5zdXJlIGFuYWx5dGljcyBldmVudHMgYXJlIGFsd2F5cyBzZW50IHRvIHRoZSBjb3JyZWN0IEFuYWx5dGljcyBwcm9wZXJ0eSxcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgdXBkYXRlIHRoZVwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBtZWFzdXJlbWVudCBJRCBmaWVsZCBpbiB0aGUgbG9jYWwgY29uZmlnIG9yIHJlbW92ZSBpdCBmcm9tIHRoZSBsb2NhbCBjb25maWcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBsb2dnZXIuZXJyb3IoZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byBsaXN0IHRvIHRyYWNrIHN0YXRlIG9mIGFsbCBkeW5hbWljIGNvbmZpZyBwcm9taXNlcy5cclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LnB1c2goZHluYW1pY0NvbmZpZ1Byb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpZFByb21pc2UgPSB2YWxpZGF0ZUluZGV4ZWREQigpLnRoZW4oZnVuY3Rpb24gKGVudklzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudklzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YWxsYXRpb25zLmdldElkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY0NvbmZpZ1Byb21pc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWRQcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9jLnNlbnQoKSwgZHluYW1pY0NvbmZpZyA9IF9hWzBdLCBmaWQgPSBfYVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGNvbW1hbmQgaW5pdGlhbGl6ZXMgZ3RhZy5qcyBhbmQgb25seSBuZWVkcyB0byBiZSBjYWxsZWQgb25jZSBmb3IgdGhlIGVudGlyZSB3ZWIgYXBwLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBzaW5jZSBpdCBpcyBpZGVtcG90ZW50LCB3ZSBjYW4gY2FsbCBpdCBtdWx0aXBsZSB0aW1lcy5cclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBrZWVwIGl0IHRvZ2V0aGVyIHdpdGggb3RoZXIgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGJldHRlciBjb2RlIHN0cnVjdHVyZS5cclxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgICAgIGd0YWdDb3JlKCdqcycsIG5ldyBEYXRlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1Byb3BlcnRpZXMgPSAoX2IgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ3VhcmQgYWdhaW5zdCBkZXZlbG9wZXJzIGFjY2lkZW50YWxseSBzZXR0aW5nIHByb3BlcnRpZXMgd2l0aCBwcmVmaXggYGZpcmViYXNlX2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2JbT1JJR0lOX0tFWV0gPSAnZmlyZWJhc2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi51cGRhdGUgPSB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ1Byb3BlcnRpZXNbR0FfRklEX0tFWV0gPSBmaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEl0IHNob3VsZCBiZSB0aGUgZmlyc3QgY29uZmlnIGNvbW1hbmQgY2FsbGVkIG9uIHRoaXMgR0EtSURcclxuICAgICAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoaXMgR0EtSUQgYW5kIHNldCBGSUQgb24gaXQgdXNpbmcgdGhlIGd0YWcgY29uZmlnIEFQSS5cclxuICAgICAgICAgICAgICAgICAgICBndGFnQ29yZShHdGFnQ29tbWFuZC5DT05GSUcsIGR5bmFtaWNDb25maWcubWVhc3VyZW1lbnRJZCwgY29uZmlnUHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGR5bmFtaWNDb25maWcubWVhc3VyZW1lbnRJZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBNYXBzIGFwcElkIHRvIGZ1bGwgaW5pdGlhbGl6YXRpb24gcHJvbWlzZS4gV3JhcHBlZCBndGFnIGNhbGxzIG11c3Qgd2FpdCBvblxyXG4gKiBhbGwgb3Igc29tZSBvZiB0aGVzZSwgZGVwZW5kaW5nIG9uIHRoZSBjYWxsJ3MgYHNlbmRfdG9gIHBhcmFtIGFuZCB0aGUgc3RhdHVzXHJcbiAqIG9mIHRoZSBkeW5hbWljIGNvbmZpZyBmZXRjaGVzIChzZWUgYmVsb3cpLlxyXG4gKi9cclxudmFyIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgPSB7fTtcclxuLyoqXHJcbiAqIExpc3Qgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuIEluIGNlcnRhaW4gY2FzZXMsIHdyYXBwZWQgZ3RhZyBjYWxsc1xyXG4gKiB3YWl0IG9uIGFsbCB0aGVzZSB0byBiZSBjb21wbGV0ZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgaWYgaXQgY2FuIHNlbGVjdGl2ZWx5XHJcbiAqIHdhaXQgZm9yIG9ubHkgY2VydGFpbiBpbml0aWFsaXphdGlvbiAoRklEKSBwcm9taXNlcyBvciBpZiBpdCBtdXN0IHdhaXQgZm9yIGFsbC5cclxuICovXHJcbnZhciBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0ID0gW107XHJcbi8qKlxyXG4gKiBNYXBzIGZldGNoZWQgbWVhc3VyZW1lbnRJZHMgdG8gYXBwSWQuIFBvcHVsYXRlZCB3aGVuIHRoZSBhcHAncyBkeW5hbWljIGNvbmZpZ1xyXG4gKiBmZXRjaCBjb21wbGV0ZXMuIElmIGFscmVhZHkgcG9wdWxhdGVkLCBndGFnIGNvbmZpZyBjYWxscyBjYW4gdXNlIHRoaXMgdG9cclxuICogc2VsZWN0aXZlbHkgd2FpdCBmb3Igb25seSB0aGlzIGFwcCdzIGluaXRpYWxpemF0aW9uIHByb21pc2UgKEZJRCkgaW5zdGVhZCBvZiBhbGxcclxuICogaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAqL1xyXG52YXIgbWVhc3VyZW1lbnRJZFRvQXBwSWQgPSB7fTtcclxuLyoqXHJcbiAqIE5hbWUgZm9yIHdpbmRvdyBnbG9iYWwgZGF0YSBsYXllciBhcnJheSB1c2VkIGJ5IEdBOiBkZWZhdWx0cyB0byAnZGF0YUxheWVyJy5cclxuICovXHJcbnZhciBkYXRhTGF5ZXJOYW1lID0gJ2RhdGFMYXllcic7XHJcbi8qKlxyXG4gKiBOYW1lIGZvciB3aW5kb3cgZ2xvYmFsIGd0YWcgZnVuY3Rpb24gdXNlZCBieSBHQTogZGVmYXVsdHMgdG8gJ2d0YWcnLlxyXG4gKi9cclxudmFyIGd0YWdOYW1lID0gJ2d0YWcnO1xyXG4vKipcclxuICogUmVwcm9kdWN0aW9uIG9mIHN0YW5kYXJkIGd0YWcgZnVuY3Rpb24gb3IgcmVmZXJlbmNlIHRvIGV4aXN0aW5nXHJcbiAqIGd0YWcgZnVuY3Rpb24gb24gd2luZG93IG9iamVjdC5cclxuICovXHJcbnZhciBndGFnQ29yZUZ1bmN0aW9uO1xyXG4vKipcclxuICogV3JhcHBlciBhcm91bmQgZ3RhZyBmdW5jdGlvbiB0aGF0IGVuc3VyZXMgRklEIGlzIHNlbnQgd2l0aCBhbGxcclxuICogcmVsZXZhbnQgZXZlbnQgYW5kIGNvbmZpZyBjYWxscy5cclxuICovXHJcbnZhciB3cmFwcGVkR3RhZ0Z1bmN0aW9uO1xyXG4vKipcclxuICogRmxhZyB0byBlbnN1cmUgcGFnZSBpbml0aWFsaXphdGlvbiBzdGVwcyAoY3JlYXRpb24gb3Igd3JhcHBpbmcgb2ZcclxuICogZGF0YUxheWVyIGFuZCBndGFnIHNjcmlwdCkgYXJlIG9ubHkgcnVuIG9uY2UgcGVyIHBhZ2UgbG9hZC5cclxuICovXHJcbnZhciBnbG9iYWxJbml0RG9uZSA9IGZhbHNlO1xyXG4vKipcclxuICogRm9yIHRlc3RpbmdcclxuICovXHJcbmZ1bmN0aW9uIHJlc2V0R2xvYmFsVmFycyhuZXdHbG9iYWxJbml0RG9uZSwgbmV3SW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgbmV3RHluYW1pY1Byb21pc2VzKSB7XHJcbiAgICBpZiAobmV3R2xvYmFsSW5pdERvbmUgPT09IHZvaWQgMCkgeyBuZXdHbG9iYWxJbml0RG9uZSA9IGZhbHNlOyB9XHJcbiAgICBpZiAobmV3SW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCA9PT0gdm9pZCAwKSB7IG5ld0luaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgPSB7fTsgfVxyXG4gICAgaWYgKG5ld0R5bmFtaWNQcm9taXNlcyA9PT0gdm9pZCAwKSB7IG5ld0R5bmFtaWNQcm9taXNlcyA9IFtdOyB9XHJcbiAgICBnbG9iYWxJbml0RG9uZSA9IG5ld0dsb2JhbEluaXREb25lO1xyXG4gICAgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCA9IG5ld0luaXRpYWxpemF0aW9uUHJvbWlzZXNNYXA7XHJcbiAgICBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0ID0gbmV3RHluYW1pY1Byb21pc2VzO1xyXG4gICAgZGF0YUxheWVyTmFtZSA9ICdkYXRhTGF5ZXInO1xyXG4gICAgZ3RhZ05hbWUgPSAnZ3RhZyc7XHJcbn1cclxuLyoqXHJcbiAqIEZvciB0ZXN0aW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRHbG9iYWxWYXJzKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VzTWFwOiBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLFxyXG4gICAgICAgIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3Q6IGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3RcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgbXVzdCBiZSBydW4gYmVmb3JlIGNhbGxpbmcgZmlyZWJhc2UuYW5hbHl0aWNzKCkgb3IgaXQgd29uJ3RcclxuICogaGF2ZSBhbnkgZWZmZWN0LlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBDdXN0b20gZ3RhZyBhbmQgZGF0YUxheWVyIG5hbWVzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0dGluZ3Mob3B0aW9ucykge1xyXG4gICAgaWYgKGdsb2JhbEluaXREb25lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhbHJlYWR5LWluaXRpYWxpemVkXCIgLyogQUxSRUFEWV9JTklUSUFMSVpFRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5kYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICAgICAgZGF0YUxheWVyTmFtZSA9IG9wdGlvbnMuZGF0YUxheWVyTmFtZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLmd0YWdOYW1lKSB7XHJcbiAgICAgICAgZ3RhZ05hbWUgPSBvcHRpb25zLmd0YWdOYW1lO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgbm8gZW52aXJvbm1lbnQgbWlzbWF0Y2ggaXMgZm91bmQuXHJcbiAqIElmIGVudmlyb25tZW50IG1pc21hdGNoZXMgYXJlIGZvdW5kLCB0aHJvd3MgYW4gSU5WQUxJRF9BTkFMWVRJQ1NfQ09OVEVYVFxyXG4gKiBlcnJvciB0aGF0IGFsc28gbGlzdHMgZGV0YWlscyBmb3IgZWFjaCBtaXNtYXRjaCBmb3VuZC5cclxuICovXHJcbmZ1bmN0aW9uIHdhcm5PbkJyb3dzZXJDb250ZXh0TWlzbWF0Y2goKSB7XHJcbiAgICB2YXIgbWlzbWF0Y2hlZEVudk1lc3NhZ2VzID0gW107XHJcbiAgICBpZiAoaXNCcm93c2VyRXh0ZW5zaW9uKCkpIHtcclxuICAgICAgICBtaXNtYXRjaGVkRW52TWVzc2FnZXMucHVzaCgnVGhpcyBpcyBhIGJyb3dzZXIgZXh0ZW5zaW9uIGVudmlyb25tZW50LicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhcmVDb29raWVzRW5hYmxlZCgpKSB7XHJcbiAgICAgICAgbWlzbWF0Y2hlZEVudk1lc3NhZ2VzLnB1c2goJ0Nvb2tpZXMgYXJlIG5vdCBhdmFpbGFibGUuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAobWlzbWF0Y2hlZEVudk1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB2YXIgZGV0YWlscyA9IG1pc21hdGNoZWRFbnZNZXNzYWdlc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChtZXNzYWdlLCBpbmRleCkgeyByZXR1cm4gXCIoXCIgKyAoaW5kZXggKyAxKSArIFwiKSBcIiArIG1lc3NhZ2U7IH0pXHJcbiAgICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICAgICAgdmFyIGVyciA9IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1hbmFseXRpY3MtY29udGV4dFwiIC8qIElOVkFMSURfQU5BTFlUSUNTX0NPTlRFWFQgKi8sIHtcclxuICAgICAgICAgICAgZXJyb3JJbmZvOiBkZXRhaWxzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGZhY3RvcnkoYXBwLCBpbnN0YWxsYXRpb25zKSB7XHJcbiAgICB3YXJuT25Ccm93c2VyQ29udGV4dE1pc21hdGNoKCk7XHJcbiAgICB2YXIgYXBwSWQgPSBhcHAub3B0aW9ucy5hcHBJZDtcclxuICAgIGlmICghYXBwSWQpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwcC1pZFwiIC8qIE5PX0FQUF9JRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcC5vcHRpb25zLmFwaUtleSkge1xyXG4gICAgICAgIGlmIChhcHAub3B0aW9ucy5tZWFzdXJlbWVudElkKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiVGhlIFxcXCJhcGlLZXlcXFwiIGZpZWxkIGlzIGVtcHR5IGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIFRoaXMgaXMgbmVlZGVkIHRvIGZldGNoIHRoZSBsYXRlc3RcIiArXHJcbiAgICAgICAgICAgICAgICAoXCIgbWVhc3VyZW1lbnQgSUQgZm9yIHRoaXMgRmlyZWJhc2UgYXBwLiBGYWxsaW5nIGJhY2sgdG8gdGhlIG1lYXN1cmVtZW50IElEIFwiICsgYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCkgK1xyXG4gICAgICAgICAgICAgICAgXCIgcHJvdmlkZWQgaW4gdGhlIFxcXCJtZWFzdXJlbWVudElkXFxcIiBmaWVsZCBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBpLWtleVwiIC8qIE5PX0FQSV9LRVkgKi8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FwcElkXSAhPSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhbHJlYWR5LWV4aXN0c1wiIC8qIEFMUkVBRFlfRVhJU1RTICovLCB7XHJcbiAgICAgICAgICAgIGlkOiBhcHBJZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFnbG9iYWxJbml0RG9uZSkge1xyXG4gICAgICAgIC8vIFN0ZXBzIGhlcmUgc2hvdWxkIG9ubHkgYmUgZG9uZSBvbmNlIHBlciBwYWdlOiBjcmVhdGlvbiBvciB3cmFwcGluZ1xyXG4gICAgICAgIC8vIG9mIGRhdGFMYXllciBhbmQgZ2xvYmFsIGd0YWcgZnVuY3Rpb24uXHJcbiAgICAgICAgLy8gRGV0ZWN0IGlmIHVzZXIgaGFzIGFscmVhZHkgcHV0IHRoZSBndGFnIDxzY3JpcHQ+IHRhZyBvbiB0aGlzIHBhZ2UuXHJcbiAgICAgICAgaWYgKCFmaW5kR3RhZ1NjcmlwdE9uUGFnZSgpKSB7XHJcbiAgICAgICAgICAgIGluc2VydFNjcmlwdFRhZyhkYXRhTGF5ZXJOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2V0T3JDcmVhdGVEYXRhTGF5ZXIoZGF0YUxheWVyTmFtZSk7XHJcbiAgICAgICAgdmFyIF9hID0gd3JhcE9yQ3JlYXRlR3RhZyhpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgZGF0YUxheWVyTmFtZSwgZ3RhZ05hbWUpLCB3cmFwcGVkR3RhZyA9IF9hLndyYXBwZWRHdGFnLCBndGFnQ29yZSA9IF9hLmd0YWdDb3JlO1xyXG4gICAgICAgIHdyYXBwZWRHdGFnRnVuY3Rpb24gPSB3cmFwcGVkR3RhZztcclxuICAgICAgICBndGFnQ29yZUZ1bmN0aW9uID0gZ3RhZ0NvcmU7XHJcbiAgICAgICAgZ2xvYmFsSW5pdERvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gQXN5bmMgYnV0IG5vbi1ibG9ja2luZy5cclxuICAgIC8vIFRoaXMgbWFwIHJlZmxlY3RzIHRoZSBjb21wbGV0aW9uIHN0YXRlIG9mIGFsbCBwcm9taXNlcyBmb3IgZWFjaCBhcHBJZC5cclxuICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdID0gaW5pdGlhbGl6ZUlkcyhhcHAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkLCBpbnN0YWxsYXRpb25zLCBndGFnQ29yZUZ1bmN0aW9uKTtcclxuICAgIHZhciBhbmFseXRpY3NJbnN0YW5jZSA9IHtcclxuICAgICAgICBhcHA6IGFwcCxcclxuICAgICAgICAvLyBQdWJsaWMgbWV0aG9kcyByZXR1cm4gdm9pZCBmb3IgQVBJIHNpbXBsaWNpdHkgYW5kIHRvIGJldHRlciBtYXRjaCBndGFnLFxyXG4gICAgICAgIC8vIHdoaWxlIGludGVybmFsIGltcGxlbWVudGF0aW9ucyByZXR1cm4gcHJvbWlzZXMuXHJcbiAgICAgICAgbG9nRXZlbnQ6IGZ1bmN0aW9uIChldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGxvZ0V2ZW50KHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKS5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gbG9nZ2VyLmVycm9yKGUpOyB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEN1cnJlbnRTY3JlZW46IGZ1bmN0aW9uIChzY3JlZW5OYW1lLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHNldEN1cnJlbnRTY3JlZW4od3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthcHBJZF0sIHNjcmVlbk5hbWUsIG9wdGlvbnMpLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBsb2dnZXIuZXJyb3IoZSk7IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0VXNlcklkOiBmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgc2V0VXNlcklkKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdLCBpZCwgb3B0aW9ucykuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGxvZ2dlci5lcnJvcihlKTsgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRVc2VyUHJvcGVydGllczogZnVuY3Rpb24gKHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgc2V0VXNlclByb3BlcnRpZXMod3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthcHBJZF0sIHByb3BlcnRpZXMsIG9wdGlvbnMpLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBsb2dnZXIuZXJyb3IoZSk7IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdLCBlbmFibGVkKS5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gbG9nZ2VyLmVycm9yKGUpOyB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIElOVEVSTkFMOiB7XHJcbiAgICAgICAgICAgIGRlbGV0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBhbmFseXRpY3NJbnN0YW5jZTtcclxufVxuXG52YXIgbmFtZSA9IFwiQGZpcmViYXNlL2FuYWx5dGljc1wiO1xudmFyIHZlcnNpb24gPSBcIjAuNi4yXCI7XG5cbi8qKlxyXG4gKiBUeXBlIGNvbnN0YW50IGZvciBGaXJlYmFzZSBBbmFseXRpY3MuXHJcbiAqL1xyXG52YXIgQU5BTFlUSUNTX1RZUEUgPSAnYW5hbHl0aWNzJztcclxuZnVuY3Rpb24gcmVnaXN0ZXJBbmFseXRpY3MoaW5zdGFuY2UpIHtcclxuICAgIGluc3RhbmNlLklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoQU5BTFlUSUNTX1RZUEUsIGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuICAgICAgICAvLyBnZXRJbW1lZGlhdGUgZm9yIEZpcmViYXNlQXBwIHdpbGwgYWx3YXlzIHN1Y2NlZWRcclxuICAgICAgICB2YXIgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICB2YXIgaW5zdGFsbGF0aW9ucyA9IGNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXIoJ2luc3RhbGxhdGlvbnMnKVxyXG4gICAgICAgICAgICAuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoYXBwLCBpbnN0YWxsYXRpb25zKTtcclxuICAgIH0sIFwiUFVCTElDXCIgLyogUFVCTElDICovKS5zZXRTZXJ2aWNlUHJvcHMoe1xyXG4gICAgICAgIHNldHRpbmdzOiBzZXR0aW5ncyxcclxuICAgICAgICBFdmVudE5hbWU6IEV2ZW50TmFtZSxcclxuICAgICAgICBpc1N1cHBvcnRlZDogaXNTdXBwb3J0ZWRcclxuICAgIH0pKTtcclxuICAgIGluc3RhbmNlLklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2FuYWx5dGljcy1pbnRlcm5hbCcsIGludGVybmFsRmFjdG9yeSwgXCJQUklWQVRFXCIgLyogUFJJVkFURSAqLykpO1xyXG4gICAgaW5zdGFuY2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24pO1xyXG4gICAgZnVuY3Rpb24gaW50ZXJuYWxGYWN0b3J5KGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBhbmFseXRpY3MgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoQU5BTFlUSUNTX1RZUEUpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbG9nRXZlbnQ6IGFuYWx5dGljcy5sb2dFdmVudFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludGVyb3AtY29tcG9uZW50LXJlZy1mYWlsZWRcIiAvKiBJTlRFUk9QX0NPTVBPTkVOVF9SRUdfRkFJTEVEICovLCB7XHJcbiAgICAgICAgICAgICAgICByZWFzb246IGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbnJlZ2lzdGVyQW5hbHl0aWNzKGZpcmViYXNlKTtcclxuLyoqXHJcbiAqIHRoaXMgaXMgYSBwdWJsaWMgc3RhdGljIG1ldGhvZCBwcm92aWRlZCB0byB1c2VycyB0aGF0IHdyYXBzIGZvdXIgZGlmZmVyZW50IGNoZWNrczpcclxuICpcclxuICogMS4gY2hlY2sgaWYgaXQncyBub3QgYSBicm93c2VyIGV4dGVuc2lvbiBlbnZpcm9ubWVudC5cclxuICogMS4gY2hlY2sgaWYgY29va2llIGlzIGVuYWJsZWQgaW4gY3VycmVudCBicm93c2VyLlxyXG4gKiAzLiBjaGVjayBpZiBJbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyIGVudmlyb25tZW50LlxyXG4gKiA0LiBjaGVjayBpZiB0aGUgY3VycmVudCBicm93c2VyIGNvbnRleHQgaXMgdmFsaWQgZm9yIHVzaW5nIEluZGV4ZWREQi5cclxuICpcclxuICovXHJcbmZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpc0RCT3BlbmFibGUsIGVycm9yXzE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQnJvd3NlckV4dGVuc2lvbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXJlQ29va2llc0VuYWJsZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpc0RCT3BlbmFibGUgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGlzREJPcGVuYWJsZV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbmV4cG9ydCB7IGZhY3RvcnksIGdldEdsb2JhbFZhcnMsIHJlZ2lzdGVyQW5hbHl0aWNzLCByZXNldEdsb2JhbFZhcnMsIHNldHRpbmdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJpbXBvcnQgZmlyZWJhc2UgZnJvbSAnQGZpcmViYXNlL2FwcCc7KGZ1bmN0aW9uKCkgey8qXG5cbiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4qL1xudmFyIGssYWE9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnRpZXM/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGEsYixjKXthIT1BcnJheS5wcm90b3R5cGUmJmEhPU9iamVjdC5wcm90b3R5cGUmJihhW2JdPWMudmFsdWUpfTtmdW5jdGlvbiBiYShhKXthPVtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3csXCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYsXCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLGFdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7KytiKXt2YXIgYz1hW2JdO2lmKGMmJmMuTWF0aD09TWF0aClyZXR1cm4gY31yZXR1cm4gZ2xvYmFsVGhpc312YXIgY2E9YmEodGhpcyk7XG5mdW5jdGlvbiBkYShhLGIpe2lmKGIpe3ZhciBjPWNhO2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aC0xO2QrKyl7dmFyIGU9YVtkXTtlIGluIGN8fChjW2VdPXt9KTtjPWNbZV19YT1hW2EubGVuZ3RoLTFdO2Q9Y1thXTtiPWIoZCk7YiE9ZCYmbnVsbCE9YiYmYWEoYyxhLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Yn0pfX1mdW5jdGlvbiBlYShhKXt2YXIgYj0wO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiPGEubGVuZ3RoP3tkb25lOiExLHZhbHVlOmFbYisrXX06e2RvbmU6ITB9fX1mdW5jdGlvbiBmYShhKXt2YXIgYj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJmFbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gYj9iLmNhbGwoYSk6e25leHQ6ZWEoYSl9fVxuZGEoXCJQcm9taXNlXCIsZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihnKXt0aGlzLmI9MDt0aGlzLmM9dm9pZCAwO3RoaXMuYT1bXTt2YXIgaD10aGlzLmYoKTt0cnl7ZyhoLnJlc29sdmUsaC5yZWplY3QpfWNhdGNoKG4pe2gucmVqZWN0KG4pfX1mdW5jdGlvbiBjKCl7dGhpcy5hPW51bGx9ZnVuY3Rpb24gZChnKXtyZXR1cm4gZyBpbnN0YW5jZW9mIGI/ZzpuZXcgYihmdW5jdGlvbihoKXtoKGcpfSl9aWYoYSlyZXR1cm4gYTtjLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGcpe2lmKG51bGw9PXRoaXMuYSl7dGhpcy5hPVtdO3ZhciBoPXRoaXM7dGhpcy5jKGZ1bmN0aW9uKCl7aC5nKCl9KX10aGlzLmEucHVzaChnKX07dmFyIGU9Y2Euc2V0VGltZW91dDtjLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGcpe2UoZywwKX07Yy5wcm90b3R5cGUuZz1mdW5jdGlvbigpe2Zvcig7dGhpcy5hJiZ0aGlzLmEubGVuZ3RoOyl7dmFyIGc9dGhpcy5hO3RoaXMuYT1bXTtmb3IodmFyIGg9MDtoPGcubGVuZ3RoOysraCl7dmFyIG49XG5nW2hdO2dbaF09bnVsbDt0cnl7bigpfWNhdGNoKHApe3RoaXMuZihwKX19fXRoaXMuYT1udWxsfTtjLnByb3RvdHlwZS5mPWZ1bmN0aW9uKGcpe3RoaXMuYyhmdW5jdGlvbigpe3Rocm93IGc7fSl9O2IucHJvdG90eXBlLmY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBnKHApe3JldHVybiBmdW5jdGlvbih2KXtufHwobj0hMCxwLmNhbGwoaCx2KSl9fXZhciBoPXRoaXMsbj0hMTtyZXR1cm57cmVzb2x2ZTpnKHRoaXMudikscmVqZWN0OmcodGhpcy5nKX19O2IucHJvdG90eXBlLnY9ZnVuY3Rpb24oZyl7aWYoZz09PXRoaXMpdGhpcy5nKG5ldyBUeXBlRXJyb3IoXCJBIFByb21pc2UgY2Fubm90IHJlc29sdmUgdG8gaXRzZWxmXCIpKTtlbHNlIGlmKGcgaW5zdGFuY2VvZiBiKXRoaXMubyhnKTtlbHNle2E6c3dpdGNoKHR5cGVvZiBnKXtjYXNlIFwib2JqZWN0XCI6dmFyIGg9bnVsbCE9ZzticmVhayBhO2Nhc2UgXCJmdW5jdGlvblwiOmg9ITA7YnJlYWsgYTtkZWZhdWx0Omg9ITF9aD90aGlzLm0oZyk6dGhpcy5oKGcpfX07XG5iLnByb3RvdHlwZS5tPWZ1bmN0aW9uKGcpe3ZhciBoPXZvaWQgMDt0cnl7aD1nLnRoZW59Y2F0Y2gobil7dGhpcy5nKG4pO3JldHVybn1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoP3RoaXMudShoLGcpOnRoaXMuaChnKX07Yi5wcm90b3R5cGUuZz1mdW5jdGlvbihnKXt0aGlzLmkoMixnKX07Yi5wcm90b3R5cGUuaD1mdW5jdGlvbihnKXt0aGlzLmkoMSxnKX07Yi5wcm90b3R5cGUuaT1mdW5jdGlvbihnLGgpe2lmKDAhPXRoaXMuYil0aHJvdyBFcnJvcihcIkNhbm5vdCBzZXR0bGUoXCIrZytcIiwgXCIraCtcIik6IFByb21pc2UgYWxyZWFkeSBzZXR0bGVkIGluIHN0YXRlXCIrdGhpcy5iKTt0aGlzLmI9Zzt0aGlzLmM9aDt0aGlzLmwoKX07Yi5wcm90b3R5cGUubD1mdW5jdGlvbigpe2lmKG51bGwhPXRoaXMuYSl7Zm9yKHZhciBnPTA7Zzx0aGlzLmEubGVuZ3RoOysrZylmLmIodGhpcy5hW2ddKTt0aGlzLmE9bnVsbH19O3ZhciBmPW5ldyBjO2IucHJvdG90eXBlLm89ZnVuY3Rpb24oZyl7dmFyIGg9dGhpcy5mKCk7XG5nLlBhKGgucmVzb2x2ZSxoLnJlamVjdCl9O2IucHJvdG90eXBlLnU9ZnVuY3Rpb24oZyxoKXt2YXIgbj10aGlzLmYoKTt0cnl7Zy5jYWxsKGgsbi5yZXNvbHZlLG4ucmVqZWN0KX1jYXRjaChwKXtuLnJlamVjdChwKX19O2IucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oZyxoKXtmdW5jdGlvbiBuKEEsUSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgQT9mdW5jdGlvbih4YSl7dHJ5e3AoQSh4YSkpfWNhdGNoKEFkKXt2KEFkKX19OlF9dmFyIHAsdixCPW5ldyBiKGZ1bmN0aW9uKEEsUSl7cD1BO3Y9UX0pO3RoaXMuUGEobihnLHApLG4oaCx2KSk7cmV0dXJuIEJ9O2IucHJvdG90eXBlLmNhdGNoPWZ1bmN0aW9uKGcpe3JldHVybiB0aGlzLnRoZW4odm9pZCAwLGcpfTtiLnByb3RvdHlwZS5QYT1mdW5jdGlvbihnLGgpe2Z1bmN0aW9uIG4oKXtzd2l0Y2gocC5iKXtjYXNlIDE6ZyhwLmMpO2JyZWFrO2Nhc2UgMjpoKHAuYyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RhdGU6IFwiK1xucC5iKTt9fXZhciBwPXRoaXM7bnVsbD09dGhpcy5hP2YuYihuKTp0aGlzLmEucHVzaChuKX07Yi5yZXNvbHZlPWQ7Yi5yZWplY3Q9ZnVuY3Rpb24oZyl7cmV0dXJuIG5ldyBiKGZ1bmN0aW9uKGgsbil7bihnKX0pfTtiLnJhY2U9ZnVuY3Rpb24oZyl7cmV0dXJuIG5ldyBiKGZ1bmN0aW9uKGgsbil7Zm9yKHZhciBwPWZhKGcpLHY9cC5uZXh0KCk7IXYuZG9uZTt2PXAubmV4dCgpKWQodi52YWx1ZSkuUGEoaCxuKX0pfTtiLmFsbD1mdW5jdGlvbihnKXt2YXIgaD1mYShnKSxuPWgubmV4dCgpO3JldHVybiBuLmRvbmU/ZChbXSk6bmV3IGIoZnVuY3Rpb24ocCx2KXtmdW5jdGlvbiBCKHhhKXtyZXR1cm4gZnVuY3Rpb24oQWQpe0FbeGFdPUFkO1EtLTswPT1RJiZwKEEpfX12YXIgQT1bXSxRPTA7ZG8gQS5wdXNoKHZvaWQgMCksUSsrLGQobi52YWx1ZSkuUGEoQihBLmxlbmd0aC0xKSx2KSxuPWgubmV4dCgpO3doaWxlKCFuLmRvbmUpfSl9O3JldHVybiBifSk7XG52YXIgaGE9aGF8fHt9LGw9dGhpc3x8c2VsZixpYT0vXltcXHcrL18tXStbPV17MCwyfSQvLGphPW51bGw7ZnVuY3Rpb24ga2EoYSl7cmV0dXJuKGE9YS5xdWVyeVNlbGVjdG9yJiZhLnF1ZXJ5U2VsZWN0b3IoXCJzY3JpcHRbbm9uY2VdXCIpKSYmKGE9YS5ub25jZXx8YS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKSkmJmlhLnRlc3QoYSk/YTpcIlwifWZ1bmN0aW9uIGxhKCl7fWZ1bmN0aW9uIG1hKGEpe3ZhciBiPXR5cGVvZiBhO3JldHVyblwib2JqZWN0XCIhPWI/YjphP0FycmF5LmlzQXJyYXkoYSk/XCJhcnJheVwiOmI6XCJudWxsXCJ9ZnVuY3Rpb24gbmEoYSl7dmFyIGI9bWEoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gb2EoYSl7cmV0dXJuXCJmdW5jdGlvblwiPT1tYShhKX1mdW5jdGlvbiBtKGEpe3ZhciBiPXR5cGVvZiBhO3JldHVyblwib2JqZWN0XCI9PWImJm51bGwhPWF8fFwiZnVuY3Rpb25cIj09Yn1cbmZ1bmN0aW9uIHBhKGEpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxxYSkmJmFbcWFdfHwoYVtxYV09KytyYSl9dmFyIHFhPVwiY2xvc3VyZV91aWRfXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCkscmE9MDtmdW5jdGlvbiBzYShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX1mdW5jdGlvbiB0YShhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGUsZCk7cmV0dXJuIGEuYXBwbHkoYixlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1cbmZ1bmN0aW9uIHEoYSxiLGMpe0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kJiYtMSE9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKS5pbmRleE9mKFwibmF0aXZlIGNvZGVcIik/cT1zYTpxPXRhO3JldHVybiBxLmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiB1YShhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1jLnNsaWNlKCk7ZC5wdXNoLmFwcGx5KGQsYXJndW1lbnRzKTtyZXR1cm4gYS5hcHBseSh0aGlzLGQpfX12YXIgdmE9RGF0ZS5ub3c7ZnVuY3Rpb24gcihhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9Yi5wcm90b3R5cGU7YS4kYT1iLnByb3RvdHlwZTthLnByb3RvdHlwZT1uZXcgYzthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hfWZ1bmN0aW9uIHdhKGEpe3JldHVybiBhfTsvKlxuXG4gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmZ1bmN0aW9uIHQoYSxiLGMpe3RoaXMuY29kZT15YSthO3RoaXMubWVzc2FnZT1ifHx6YVthXXx8XCJcIjt0aGlzLmE9Y3x8bnVsbH1yKHQsRXJyb3IpO3QucHJvdG90eXBlLnc9ZnVuY3Rpb24oKXt2YXIgYT17Y29kZTp0aGlzLmNvZGUsbWVzc2FnZTp0aGlzLm1lc3NhZ2V9O3RoaXMuYSYmKGEuc2VydmVyUmVzcG9uc2U9dGhpcy5hKTtyZXR1cm4gYX07dC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudygpfTtmdW5jdGlvbiBBYShhKXt2YXIgYj1hJiZhLmNvZGU7cmV0dXJuIGI/bmV3IHQoYi5zdWJzdHJpbmcoeWEubGVuZ3RoKSxhLm1lc3NhZ2UsYS5zZXJ2ZXJSZXNwb25zZSk6bnVsbH1cbnZhciB5YT1cImF1dGgvXCIsemE9e1wiYWRtaW4tcmVzdHJpY3RlZC1vcGVyYXRpb25cIjpcIlRoaXMgb3BlcmF0aW9uIGlzIHJlc3RyaWN0ZWQgdG8gYWRtaW5pc3RyYXRvcnMgb25seS5cIixcImFyZ3VtZW50LWVycm9yXCI6XCJcIixcImFwcC1ub3QtYXV0aG9yaXplZFwiOlwiVGhpcyBhcHAsIGlkZW50aWZpZWQgYnkgdGhlIGRvbWFpbiB3aGVyZSBpdCdzIGhvc3RlZCwgaXMgbm90IGF1dGhvcml6ZWQgdG8gdXNlIEZpcmViYXNlIEF1dGhlbnRpY2F0aW9uIHdpdGggdGhlIHByb3ZpZGVkIEFQSSBrZXkuIFJldmlldyB5b3VyIGtleSBjb25maWd1cmF0aW9uIGluIHRoZSBHb29nbGUgQVBJIGNvbnNvbGUuXCIsXCJhcHAtbm90LWluc3RhbGxlZFwiOlwiVGhlIHJlcXVlc3RlZCBtb2JpbGUgYXBwbGljYXRpb24gY29ycmVzcG9uZGluZyB0byB0aGUgaWRlbnRpZmllciAoQW5kcm9pZCBwYWNrYWdlIG5hbWUgb3IgaU9TIGJ1bmRsZSBJRCkgcHJvdmlkZWQgaXMgbm90IGluc3RhbGxlZCBvbiB0aGlzIGRldmljZS5cIixcblwiY2FwdGNoYS1jaGVjay1mYWlsZWRcIjpcIlRoZSByZUNBUFRDSEEgcmVzcG9uc2UgdG9rZW4gcHJvdmlkZWQgaXMgZWl0aGVyIGludmFsaWQsIGV4cGlyZWQsIGFscmVhZHkgdXNlZCBvciB0aGUgZG9tYWluIGFzc29jaWF0ZWQgd2l0aCBpdCBkb2VzIG5vdCBtYXRjaCB0aGUgbGlzdCBvZiB3aGl0ZWxpc3RlZCBkb21haW5zLlwiLFwiY29kZS1leHBpcmVkXCI6XCJUaGUgU01TIGNvZGUgaGFzIGV4cGlyZWQuIFBsZWFzZSByZS1zZW5kIHRoZSB2ZXJpZmljYXRpb24gY29kZSB0byB0cnkgYWdhaW4uXCIsXCJjb3Jkb3ZhLW5vdC1yZWFkeVwiOlwiQ29yZG92YSBmcmFtZXdvcmsgaXMgbm90IHJlYWR5LlwiLFwiY29ycy11bnN1cHBvcnRlZFwiOlwiVGhpcyBicm93c2VyIGlzIG5vdCBzdXBwb3J0ZWQuXCIsXCJjcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCI6XCJUaGlzIGNyZWRlbnRpYWwgaXMgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggYSBkaWZmZXJlbnQgdXNlciBhY2NvdW50LlwiLFwiY3VzdG9tLXRva2VuLW1pc21hdGNoXCI6XCJUaGUgY3VzdG9tIHRva2VuIGNvcnJlc3BvbmRzIHRvIGEgZGlmZmVyZW50IGF1ZGllbmNlLlwiLFxuXCJyZXF1aXJlcy1yZWNlbnQtbG9naW5cIjpcIlRoaXMgb3BlcmF0aW9uIGlzIHNlbnNpdGl2ZSBhbmQgcmVxdWlyZXMgcmVjZW50IGF1dGhlbnRpY2F0aW9uLiBMb2cgaW4gYWdhaW4gYmVmb3JlIHJldHJ5aW5nIHRoaXMgcmVxdWVzdC5cIixcImR5bmFtaWMtbGluay1ub3QtYWN0aXZhdGVkXCI6XCJQbGVhc2UgYWN0aXZhdGUgRHluYW1pYyBMaW5rcyBpbiB0aGUgRmlyZWJhc2UgQ29uc29sZSBhbmQgYWdyZWUgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLlwiLFwiZW1haWwtY2hhbmdlLW5lZWRzLXZlcmlmaWNhdGlvblwiOlwiTXVsdGktZmFjdG9yIHVzZXJzIG11c3QgYWx3YXlzIGhhdmUgYSB2ZXJpZmllZCBlbWFpbC5cIixcImVtYWlsLWFscmVhZHktaW4tdXNlXCI6XCJUaGUgZW1haWwgYWRkcmVzcyBpcyBhbHJlYWR5IGluIHVzZSBieSBhbm90aGVyIGFjY291bnQuXCIsXCJleHBpcmVkLWFjdGlvbi1jb2RlXCI6XCJUaGUgYWN0aW9uIGNvZGUgaGFzIGV4cGlyZWQuIFwiLFwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3RcIjpcIlRoaXMgb3BlcmF0aW9uIGhhcyBiZWVuIGNhbmNlbGxlZCBkdWUgdG8gYW5vdGhlciBjb25mbGljdGluZyBwb3B1cCBiZWluZyBvcGVuZWQuXCIsXG5cImludGVybmFsLWVycm9yXCI6XCJBbiBpbnRlcm5hbCBlcnJvciBoYXMgb2NjdXJyZWQuXCIsXCJpbnZhbGlkLWFwcC1jcmVkZW50aWFsXCI6XCJUaGUgcGhvbmUgdmVyaWZpY2F0aW9uIHJlcXVlc3QgY29udGFpbnMgYW4gaW52YWxpZCBhcHBsaWNhdGlvbiB2ZXJpZmllci4gVGhlIHJlQ0FQVENIQSB0b2tlbiByZXNwb25zZSBpcyBlaXRoZXIgaW52YWxpZCBvciBleHBpcmVkLlwiLFwiaW52YWxpZC1hcHAtaWRcIjpcIlRoZSBtb2JpbGUgYXBwIGlkZW50aWZpZXIgaXMgbm90IHJlZ2lzdGVkIGZvciB0aGUgY3VycmVudCBwcm9qZWN0LlwiLFwiaW52YWxpZC11c2VyLXRva2VuXCI6XCJUaGlzIHVzZXIncyBjcmVkZW50aWFsIGlzbid0IHZhbGlkIGZvciB0aGlzIHByb2plY3QuIFRoaXMgY2FuIGhhcHBlbiBpZiB0aGUgdXNlcidzIHRva2VuIGhhcyBiZWVuIHRhbXBlcmVkIHdpdGgsIG9yIGlmIHRoZSB1c2VyIGlzbid0IGZvciB0aGUgcHJvamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBBUEkga2V5LlwiLFwiaW52YWxpZC1hdXRoLWV2ZW50XCI6XCJBbiBpbnRlcm5hbCBlcnJvciBoYXMgb2NjdXJyZWQuXCIsXG5cImludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGVcIjpcIlRoZSBTTVMgdmVyaWZpY2F0aW9uIGNvZGUgdXNlZCB0byBjcmVhdGUgdGhlIHBob25lIGF1dGggY3JlZGVudGlhbCBpcyBpbnZhbGlkLiBQbGVhc2UgcmVzZW5kIHRoZSB2ZXJpZmljYXRpb24gY29kZSBzbXMgYW5kIGJlIHN1cmUgdXNlIHRoZSB2ZXJpZmljYXRpb24gY29kZSBwcm92aWRlZCBieSB0aGUgdXNlci5cIixcImludmFsaWQtY29udGludWUtdXJpXCI6XCJUaGUgY29udGludWUgVVJMIHByb3ZpZGVkIGluIHRoZSByZXF1ZXN0IGlzIGludmFsaWQuXCIsXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiOlwiVGhlIGZvbGxvd2luZyBDb3Jkb3ZhIHBsdWdpbnMgbXVzdCBiZSBpbnN0YWxsZWQgdG8gZW5hYmxlIE9BdXRoIHNpZ24taW46IGNvcmRvdmEtcGx1Z2luLWJ1aWxkaW5mbywgY29yZG92YS11bml2ZXJzYWwtbGlua3MtcGx1Z2luLCBjb3Jkb3ZhLXBsdWdpbi1icm93c2VydGFiLCBjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIgYW5kIGNvcmRvdmEtcGx1Z2luLWN1c3RvbXVybHNjaGVtZS5cIixcblwiaW52YWxpZC1jdXN0b20tdG9rZW5cIjpcIlRoZSBjdXN0b20gdG9rZW4gZm9ybWF0IGlzIGluY29ycmVjdC4gUGxlYXNlIGNoZWNrIHRoZSBkb2N1bWVudGF0aW9uLlwiLFwiaW52YWxpZC1keW5hbWljLWxpbmstZG9tYWluXCI6XCJUaGUgcHJvdmlkZWQgZHluYW1pYyBsaW5rIGRvbWFpbiBpcyBub3QgY29uZmlndXJlZCBvciBhdXRob3JpemVkIGZvciB0aGUgY3VycmVudCBwcm9qZWN0LlwiLFwiaW52YWxpZC1lbWFpbFwiOlwiVGhlIGVtYWlsIGFkZHJlc3MgaXMgYmFkbHkgZm9ybWF0dGVkLlwiLFwiaW52YWxpZC1hcGkta2V5XCI6XCJZb3VyIEFQSSBrZXkgaXMgaW52YWxpZCwgcGxlYXNlIGNoZWNrIHlvdSBoYXZlIGNvcGllZCBpdCBjb3JyZWN0bHkuXCIsXCJpbnZhbGlkLWNlcnQtaGFzaFwiOlwiVGhlIFNIQS0xIGNlcnRpZmljYXRlIGhhc2ggcHJvdmlkZWQgaXMgaW52YWxpZC5cIixcImludmFsaWQtY3JlZGVudGlhbFwiOlwiVGhlIHN1cHBsaWVkIGF1dGggY3JlZGVudGlhbCBpcyBtYWxmb3JtZWQgb3IgaGFzIGV4cGlyZWQuXCIsXG5cImludmFsaWQtbWVzc2FnZS1wYXlsb2FkXCI6XCJUaGUgZW1haWwgdGVtcGxhdGUgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgaW4gaXRzIG1lc3NhZ2UuIFBsZWFzZSBmaXggYnkgZ29pbmcgdG8gdGhlIEF1dGggZW1haWwgdGVtcGxhdGVzIHNlY3Rpb24gaW4gdGhlIEZpcmViYXNlIENvbnNvbGUuXCIsXCJpbnZhbGlkLW11bHRpLWZhY3Rvci1zZXNzaW9uXCI6XCJUaGUgcmVxdWVzdCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgcHJvb2Ygb2YgZmlyc3QgZmFjdG9yIHN1Y2Nlc3NmdWwgc2lnbi1pbi5cIixcImludmFsaWQtb2F1dGgtcHJvdmlkZXJcIjpcIkVtYWlsQXV0aFByb3ZpZGVyIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgb3BlcmF0aW9uLiBUaGlzIG9wZXJhdGlvbiBvbmx5IHN1cHBvcnRzIE9BdXRoIHByb3ZpZGVycy5cIixcImludmFsaWQtb2F1dGgtY2xpZW50LWlkXCI6XCJUaGUgT0F1dGggY2xpZW50IElEIHByb3ZpZGVkIGlzIGVpdGhlciBpbnZhbGlkIG9yIGRvZXMgbm90IG1hdGNoIHRoZSBzcGVjaWZpZWQgQVBJIGtleS5cIixcblwidW5hdXRob3JpemVkLWRvbWFpblwiOlwiVGhpcyBkb21haW4gaXMgbm90IGF1dGhvcml6ZWQgZm9yIE9BdXRoIG9wZXJhdGlvbnMgZm9yIHlvdXIgRmlyZWJhc2UgcHJvamVjdC4gRWRpdCB0aGUgbGlzdCBvZiBhdXRob3JpemVkIGRvbWFpbnMgZnJvbSB0aGUgRmlyZWJhc2UgY29uc29sZS5cIixcImludmFsaWQtYWN0aW9uLWNvZGVcIjpcIlRoZSBhY3Rpb24gY29kZSBpcyBpbnZhbGlkLiBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIGNvZGUgaXMgbWFsZm9ybWVkLCBleHBpcmVkLCBvciBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIsXCJ3cm9uZy1wYXNzd29yZFwiOlwiVGhlIHBhc3N3b3JkIGlzIGludmFsaWQgb3IgdGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhIHBhc3N3b3JkLlwiLFwiaW52YWxpZC1wZXJzaXN0ZW5jZS10eXBlXCI6XCJUaGUgc3BlY2lmaWVkIHBlcnNpc3RlbmNlIHR5cGUgaXMgaW52YWxpZC4gSXQgY2FuIG9ubHkgYmUgbG9jYWwsIHNlc3Npb24gb3Igbm9uZS5cIixcImludmFsaWQtcGhvbmUtbnVtYmVyXCI6XCJUaGUgZm9ybWF0IG9mIHRoZSBwaG9uZSBudW1iZXIgcHJvdmlkZWQgaXMgaW5jb3JyZWN0LiBQbGVhc2UgZW50ZXIgdGhlIHBob25lIG51bWJlciBpbiBhIGZvcm1hdCB0aGF0IGNhbiBiZSBwYXJzZWQgaW50byBFLjE2NCBmb3JtYXQuIEUuMTY0IHBob25lIG51bWJlcnMgYXJlIHdyaXR0ZW4gaW4gdGhlIGZvcm1hdCBbK11bY291bnRyeSBjb2RlXVtzdWJzY3JpYmVyIG51bWJlciBpbmNsdWRpbmcgYXJlYSBjb2RlXS5cIixcblwiaW52YWxpZC1wcm92aWRlci1pZFwiOlwiVGhlIHNwZWNpZmllZCBwcm92aWRlciBJRCBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC1yZWNpcGllbnQtZW1haWxcIjpcIlRoZSBlbWFpbCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYWN0aW9uIGZhaWxlZCB0byBzZW5kIGFzIHRoZSBwcm92aWRlZCByZWNpcGllbnQgZW1haWwgYWRkcmVzcyBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC1zZW5kZXJcIjpcIlRoZSBlbWFpbCB0ZW1wbGF0ZSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYWN0aW9uIGNvbnRhaW5zIGFuIGludmFsaWQgc2VuZGVyIGVtYWlsIG9yIG5hbWUuIFBsZWFzZSBmaXggYnkgZ29pbmcgdG8gdGhlIEF1dGggZW1haWwgdGVtcGxhdGVzIHNlY3Rpb24gaW4gdGhlIEZpcmViYXNlIENvbnNvbGUuXCIsXCJpbnZhbGlkLXZlcmlmaWNhdGlvbi1pZFwiOlwiVGhlIHZlcmlmaWNhdGlvbiBJRCB1c2VkIHRvIGNyZWF0ZSB0aGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIGlzIGludmFsaWQuXCIsXCJpbnZhbGlkLXRlbmFudC1pZFwiOlwiVGhlIEF1dGggaW5zdGFuY2UncyB0ZW5hbnQgSUQgaXMgaW52YWxpZC5cIixcblwibXVsdGktZmFjdG9yLWluZm8tbm90LWZvdW5kXCI6XCJUaGUgdXNlciBkb2VzIG5vdCBoYXZlIGEgc2Vjb25kIGZhY3RvciBtYXRjaGluZyB0aGUgaWRlbnRpZmllciBwcm92aWRlZC5cIixcIm11bHRpLWZhY3Rvci1hdXRoLXJlcXVpcmVkXCI6XCJQcm9vZiBvZiBvd25lcnNoaXAgb2YgYSBzZWNvbmQgZmFjdG9yIGlzIHJlcXVpcmVkIHRvIGNvbXBsZXRlIHNpZ24taW4uXCIsXCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWVcIjpcIkFuIEFuZHJvaWQgUGFja2FnZSBOYW1lIG11c3QgYmUgcHJvdmlkZWQgaWYgdGhlIEFuZHJvaWQgQXBwIGlzIHJlcXVpcmVkIHRvIGJlIGluc3RhbGxlZC5cIixcImF1dGgtZG9tYWluLWNvbmZpZy1yZXF1aXJlZFwiOlwiQmUgc3VyZSB0byBpbmNsdWRlIGF1dGhEb21haW4gd2hlbiBjYWxsaW5nIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKSwgYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgaW4gdGhlIEZpcmViYXNlIGNvbnNvbGUuXCIsXCJtaXNzaW5nLWFwcC1jcmVkZW50aWFsXCI6XCJUaGUgcGhvbmUgdmVyaWZpY2F0aW9uIHJlcXVlc3QgaXMgbWlzc2luZyBhbiBhcHBsaWNhdGlvbiB2ZXJpZmllciBhc3NlcnRpb24uIEEgcmVDQVBUQ0hBIHJlc3BvbnNlIHRva2VuIG5lZWRzIHRvIGJlIHByb3ZpZGVkLlwiLFxuXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlXCI6XCJUaGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIHdhcyBjcmVhdGVkIHdpdGggYW4gZW1wdHkgU01TIHZlcmlmaWNhdGlvbiBjb2RlLlwiLFwibWlzc2luZy1jb250aW51ZS11cmlcIjpcIkEgY29udGludWUgVVJMIG11c3QgYmUgcHJvdmlkZWQgaW4gdGhlIHJlcXVlc3QuXCIsXCJtaXNzaW5nLWlmcmFtZS1zdGFydFwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFwibWlzc2luZy1pb3MtYnVuZGxlLWlkXCI6XCJBbiBpT1MgQnVuZGxlIElEIG11c3QgYmUgcHJvdmlkZWQgaWYgYW4gQXBwIFN0b3JlIElEIGlzIHByb3ZpZGVkLlwiLFwibWlzc2luZy1tdWx0aS1mYWN0b3ItaW5mb1wiOlwiTm8gc2Vjb25kIGZhY3RvciBpZGVudGlmaWVyIGlzIHByb3ZpZGVkLlwiLFwibWlzc2luZy1tdWx0aS1mYWN0b3Itc2Vzc2lvblwiOlwiVGhlIHJlcXVlc3QgaXMgbWlzc2luZyBwcm9vZiBvZiBmaXJzdCBmYWN0b3Igc3VjY2Vzc2Z1bCBzaWduLWluLlwiLFwibWlzc2luZy1vci1pbnZhbGlkLW5vbmNlXCI6XCJUaGUgcmVxdWVzdCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgbm9uY2UuIFRoaXMgY2FuIG9jY3VyIGlmIHRoZSBTSEEtMjU2IGhhc2ggb2YgdGhlIHByb3ZpZGVkIHJhdyBub25jZSBkb2VzIG5vdCBtYXRjaCB0aGUgaGFzaGVkIG5vbmNlIGluIHRoZSBJRCB0b2tlbiBwYXlsb2FkLlwiLFxuXCJtaXNzaW5nLXBob25lLW51bWJlclwiOlwiVG8gc2VuZCB2ZXJpZmljYXRpb24gY29kZXMsIHByb3ZpZGUgYSBwaG9uZSBudW1iZXIgZm9yIHRoZSByZWNpcGllbnQuXCIsXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiOlwiVGhlIHBob25lIGF1dGggY3JlZGVudGlhbCB3YXMgY3JlYXRlZCB3aXRoIGFuIGVtcHR5IHZlcmlmaWNhdGlvbiBJRC5cIixcImFwcC1kZWxldGVkXCI6XCJUaGlzIGluc3RhbmNlIG9mIEZpcmViYXNlQXBwIGhhcyBiZWVuIGRlbGV0ZWQuXCIsXCJhY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsXCI6XCJBbiBhY2NvdW50IGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHNhbWUgZW1haWwgYWRkcmVzcyBidXQgZGlmZmVyZW50IHNpZ24taW4gY3JlZGVudGlhbHMuIFNpZ24gaW4gdXNpbmcgYSBwcm92aWRlciBhc3NvY2lhdGVkIHdpdGggdGhpcyBlbWFpbCBhZGRyZXNzLlwiLFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiOlwiQSBuZXR3b3JrIGVycm9yIChzdWNoIGFzIHRpbWVvdXQsIGludGVycnVwdGVkIGNvbm5lY3Rpb24gb3IgdW5yZWFjaGFibGUgaG9zdCkgaGFzIG9jY3VycmVkLlwiLFxuXCJuby1hdXRoLWV2ZW50XCI6XCJBbiBpbnRlcm5hbCBlcnJvciBoYXMgb2NjdXJyZWQuXCIsXCJuby1zdWNoLXByb3ZpZGVyXCI6XCJVc2VyIHdhcyBub3QgbGlua2VkIHRvIGFuIGFjY291bnQgd2l0aCB0aGUgZ2l2ZW4gcHJvdmlkZXIuXCIsXCJudWxsLXVzZXJcIjpcIkEgbnVsbCB1c2VyIG9iamVjdCB3YXMgcHJvdmlkZWQgYXMgdGhlIGFyZ3VtZW50IGZvciBhbiBvcGVyYXRpb24gd2hpY2ggcmVxdWlyZXMgYSBub24tbnVsbCB1c2VyIG9iamVjdC5cIixcIm9wZXJhdGlvbi1ub3QtYWxsb3dlZFwiOlwiVGhlIGdpdmVuIHNpZ24taW4gcHJvdmlkZXIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgRmlyZWJhc2UgcHJvamVjdC4gRW5hYmxlIGl0IGluIHRoZSBGaXJlYmFzZSBjb25zb2xlLCB1bmRlciB0aGUgc2lnbi1pbiBtZXRob2QgdGFiIG9mIHRoZSBBdXRoIHNlY3Rpb24uXCIsXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCI6J1RoaXMgb3BlcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGVudmlyb25tZW50IHRoaXMgYXBwbGljYXRpb24gaXMgcnVubmluZyBvbi4gXCJsb2NhdGlvbi5wcm90b2NvbFwiIG11c3QgYmUgaHR0cCwgaHR0cHMgb3IgY2hyb21lLWV4dGVuc2lvbiBhbmQgd2ViIHN0b3JhZ2UgbXVzdCBiZSBlbmFibGVkLicsXG5cInBvcHVwLWJsb2NrZWRcIjpcIlVuYWJsZSB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIHdpdGggdGhlIHBvcHVwLiBJdCBtYXkgaGF2ZSBiZWVuIGJsb2NrZWQgYnkgdGhlIGJyb3dzZXIuXCIsXCJwb3B1cC1jbG9zZWQtYnktdXNlclwiOlwiVGhlIHBvcHVwIGhhcyBiZWVuIGNsb3NlZCBieSB0aGUgdXNlciBiZWZvcmUgZmluYWxpemluZyB0aGUgb3BlcmF0aW9uLlwiLFwicHJvdmlkZXItYWxyZWFkeS1saW5rZWRcIjpcIlVzZXIgY2FuIG9ubHkgYmUgbGlua2VkIHRvIG9uZSBpZGVudGl0eSBmb3IgdGhlIGdpdmVuIHByb3ZpZGVyLlwiLFwicXVvdGEtZXhjZWVkZWRcIjpcIlRoZSBwcm9qZWN0J3MgcXVvdGEgZm9yIHRoaXMgb3BlcmF0aW9uIGhhcyBiZWVuIGV4Y2VlZGVkLlwiLFwicmVkaXJlY3QtY2FuY2VsbGVkLWJ5LXVzZXJcIjpcIlRoZSByZWRpcmVjdCBvcGVyYXRpb24gaGFzIGJlZW4gY2FuY2VsbGVkIGJ5IHRoZSB1c2VyIGJlZm9yZSBmaW5hbGl6aW5nLlwiLFwicmVkaXJlY3Qtb3BlcmF0aW9uLXBlbmRpbmdcIjpcIkEgcmVkaXJlY3Qgc2lnbi1pbiBvcGVyYXRpb24gaXMgYWxyZWFkeSBwZW5kaW5nLlwiLFxuXCJyZWplY3RlZC1jcmVkZW50aWFsXCI6XCJUaGUgcmVxdWVzdCBjb250YWlucyBtYWxmb3JtZWQgb3IgbWlzbWF0Y2hpbmcgY3JlZGVudGlhbHMuXCIsXCJzZWNvbmQtZmFjdG9yLWFscmVhZHktaW4tdXNlXCI6XCJUaGUgc2Vjb25kIGZhY3RvciBpcyBhbHJlYWR5IGVucm9sbGVkIG9uIHRoaXMgYWNjb3VudC5cIixcIm1heGltdW0tc2Vjb25kLWZhY3Rvci1jb3VudC1leGNlZWRlZFwiOlwiVGhlIG1heGltdW0gYWxsb3dlZCBudW1iZXIgb2Ygc2Vjb25kIGZhY3RvcnMgb24gYSB1c2VyIGhhcyBiZWVuIGV4Y2VlZGVkLlwiLFwidGVuYW50LWlkLW1pc21hdGNoXCI6XCJUaGUgcHJvdmlkZWQgdGVuYW50IElEIGRvZXMgbm90IG1hdGNoIHRoZSBBdXRoIGluc3RhbmNlJ3MgdGVuYW50IElEXCIsdGltZW91dDpcIlRoZSBvcGVyYXRpb24gaGFzIHRpbWVkIG91dC5cIixcInVzZXItdG9rZW4tZXhwaXJlZFwiOlwiVGhlIHVzZXIncyBjcmVkZW50aWFsIGlzIG5vIGxvbmdlciB2YWxpZC4gVGhlIHVzZXIgbXVzdCBzaWduIGluIGFnYWluLlwiLFxuXCJ0b28tbWFueS1yZXF1ZXN0c1wiOlwiV2UgaGF2ZSBibG9ja2VkIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgZGV2aWNlIGR1ZSB0byB1bnVzdWFsIGFjdGl2aXR5LiBUcnkgYWdhaW4gbGF0ZXIuXCIsXCJ1bmF1dGhvcml6ZWQtY29udGludWUtdXJpXCI6XCJUaGUgZG9tYWluIG9mIHRoZSBjb250aW51ZSBVUkwgaXMgbm90IHdoaXRlbGlzdGVkLiAgUGxlYXNlIHdoaXRlbGlzdCB0aGUgZG9tYWluIGluIHRoZSBGaXJlYmFzZSBjb25zb2xlLlwiLFwidW5zdXBwb3J0ZWQtZmlyc3QtZmFjdG9yXCI6XCJFbnJvbGxpbmcgYSBzZWNvbmQgZmFjdG9yIG9yIHNpZ25pbmcgaW4gd2l0aCBhIG11bHRpLWZhY3RvciBhY2NvdW50IHJlcXVpcmVzIHNpZ24taW4gd2l0aCBhIHN1cHBvcnRlZCBmaXJzdCBmYWN0b3IuXCIsXCJ1bnN1cHBvcnRlZC1wZXJzaXN0ZW5jZS10eXBlXCI6XCJUaGUgY3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBzcGVjaWZpZWQgcGVyc2lzdGVuY2UgdHlwZS5cIixcInVuc3VwcG9ydGVkLXRlbmFudC1vcGVyYXRpb25cIjpcIlRoaXMgb3BlcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYSBtdWx0aS10ZW5hbnQgY29udGV4dC5cIixcblwidW52ZXJpZmllZC1lbWFpbFwiOlwiVGhlIG9wZXJhdGlvbiByZXF1aXJlcyBhIHZlcmlmaWVkIGVtYWlsLlwiLFwidXNlci1jYW5jZWxsZWRcIjpcIlRoZSB1c2VyIGRpZCBub3QgZ3JhbnQgeW91ciBhcHBsaWNhdGlvbiB0aGUgcGVybWlzc2lvbnMgaXQgcmVxdWVzdGVkLlwiLFwidXNlci1ub3QtZm91bmRcIjpcIlRoZXJlIGlzIG5vIHVzZXIgcmVjb3JkIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBpZGVudGlmaWVyLiBUaGUgdXNlciBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQuXCIsXCJ1c2VyLWRpc2FibGVkXCI6XCJUaGUgdXNlciBhY2NvdW50IGhhcyBiZWVuIGRpc2FibGVkIGJ5IGFuIGFkbWluaXN0cmF0b3IuXCIsXCJ1c2VyLW1pc21hdGNoXCI6XCJUaGUgc3VwcGxpZWQgY3JlZGVudGlhbHMgZG8gbm90IGNvcnJlc3BvbmQgdG8gdGhlIHByZXZpb3VzbHkgc2lnbmVkIGluIHVzZXIuXCIsXCJ1c2VyLXNpZ25lZC1vdXRcIjpcIlwiLFwid2Vhay1wYXNzd29yZFwiOlwiVGhlIHBhc3N3b3JkIG11c3QgYmUgNiBjaGFyYWN0ZXJzIGxvbmcgb3IgbW9yZS5cIixcblwid2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWRcIjpcIlRoaXMgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkIG9yIDNyZCBwYXJ0eSBjb29raWVzIGFuZCBkYXRhIG1heSBiZSBkaXNhYmxlZC5cIn07LypcblxuIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBCYT17a2Q6e1NhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCIsWWE6XCJodHRwczovL3N0YWdpbmctc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFZhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwiYlwifSxyZDp7U2E6XCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9pZGVudGl0eXRvb2xraXQvdjMvcmVseWluZ3BhcnR5L1wiLFlhOlwiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFZhOlwiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vdjIvXCIsaWQ6XCJwXCJ9LHRkOntTYTpcImh0dHBzOi8vc3RhZ2luZy13d3cuc2FuZGJveC5nb29nbGVhcGlzLmNvbS9pZGVudGl0eXRvb2xraXQvdjMvcmVseWluZ3BhcnR5L1wiLFxuWWE6XCJodHRwczovL3N0YWdpbmctc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFZhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwic1wifSx1ZDp7U2E6XCJodHRwczovL3d3dy1nb29nbGVhcGlzLXRlc3Quc2FuZGJveC5nb29nbGUuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCIsWWE6XCJodHRwczovL3Rlc3Qtc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFZhOlwiaHR0cHM6Ly90ZXN0LWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwidFwifX07XG5mdW5jdGlvbiBDYShhKXtmb3IodmFyIGIgaW4gQmEpaWYoQmFbYl0uaWQ9PT1hKXJldHVybiBhPUJhW2JdLHtmaXJlYmFzZUVuZHBvaW50OmEuU2Esc2VjdXJlVG9rZW5FbmRwb2ludDphLllhLGlkZW50aXR5UGxhdGZvcm1FbmRwb2ludDphLlZhfTtyZXR1cm4gbnVsbH12YXIgRGE7RGE9Q2EoXCJfX0VJRF9fXCIpP1wiX19FSURfX1wiOnZvaWQgMDtmdW5jdGlvbiBFYShhKXtpZighYSlyZXR1cm4hMTt0cnl7cmV0dXJuISFhLiRnb29nX1RoZW5hYmxlfWNhdGNoKGIpe3JldHVybiExfX07ZnVuY3Rpb24gdShhKXtpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHUpO2Vsc2V7dmFyIGI9RXJyb3IoKS5zdGFjaztiJiYodGhpcy5zdGFjaz1iKX1hJiYodGhpcy5tZXNzYWdlPVN0cmluZyhhKSl9cih1LEVycm9yKTt1LnByb3RvdHlwZS5uYW1lPVwiQ3VzdG9tRXJyb3JcIjtmdW5jdGlvbiBGYShhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxlPTA7ZTxkO2UrKyljKz1hW2VdKyhlPGIubGVuZ3RoP2JbZV06XCIlc1wiKTt1LmNhbGwodGhpcyxjK2FbZF0pfXIoRmEsdSk7RmEucHJvdG90eXBlLm5hbWU9XCJBc3NlcnRpb25FcnJvclwiO2Z1bmN0aW9uIEdhKGEsYil7dGhyb3cgbmV3IEZhKFwiRmFpbHVyZVwiKyhhP1wiOiBcIithOlwiXCIpLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7fTtmdW5jdGlvbiBIYShhLGIpe3RoaXMuYz1hO3RoaXMuZj1iO3RoaXMuYj0wO3RoaXMuYT1udWxsfUhhLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtpZigwPHRoaXMuYil7dGhpcy5iLS07dmFyIGE9dGhpcy5hO3RoaXMuYT1hLm5leHQ7YS5uZXh0PW51bGx9ZWxzZSBhPXRoaXMuYygpO3JldHVybiBhfTtmdW5jdGlvbiBJYShhLGIpe2EuZihiKTsxMDA+YS5iJiYoYS5iKyssYi5uZXh0PWEuYSxhLmE9Yil9O2Z1bmN0aW9uIEphKCl7dGhpcy5iPXRoaXMuYT1udWxsfXZhciBMYT1uZXcgSGEoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEthfSxmdW5jdGlvbihhKXthLnJlc2V0KCl9KTtKYS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEsYil7dmFyIGM9TGEuZ2V0KCk7Yy5zZXQoYSxiKTt0aGlzLmI/dGhpcy5iLm5leHQ9Yzp0aGlzLmE9Yzt0aGlzLmI9Y307ZnVuY3Rpb24gTWEoKXt2YXIgYT1OYSxiPW51bGw7YS5hJiYoYj1hLmEsYS5hPWEuYS5uZXh0LGEuYXx8KGEuYj1udWxsKSxiLm5leHQ9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gS2EoKXt0aGlzLm5leHQ9dGhpcy5iPXRoaXMuYT1udWxsfUthLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmE9YTt0aGlzLmI9Yjt0aGlzLm5leHQ9bnVsbH07S2EucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5uZXh0PXRoaXMuYj10aGlzLmE9bnVsbH07dmFyIE9hPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVyblwic3RyaW5nXCIhPT10eXBlb2YgYnx8MSE9Yi5sZW5ndGg/LTE6YS5pbmRleE9mKGIsMCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sdz1BcnJheS5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbihhLGIsYyl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1cInN0cmluZ1wiPT09dHlwZW9mIGE/YS5zcGxpdChcIlwiKTphLGY9MDtmPGQ7ZisrKWYgaW4gZSYmYi5jYWxsKGMsZVtmXSxmLGEpfTtcbmZ1bmN0aW9uIFBhKGEsYil7Zm9yKHZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hLnNwbGl0KFwiXCIpOmEsZD1hLmxlbmd0aC0xOzA8PWQ7LS1kKWQgaW4gYyYmYi5jYWxsKHZvaWQgMCxjW2RdLGQsYSl9XG52YXIgUWE9QXJyYXkucHJvdG90eXBlLmZpbHRlcj9mdW5jdGlvbihhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sZT0wLGY9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxnPTA7ZzxjO2crKylpZihnIGluIGYpe3ZhciBoPWZbZ107Yi5jYWxsKHZvaWQgMCxoLGcsYSkmJihkW2UrK109aCl9cmV0dXJuIGR9LFJhPUFycmF5LnByb3RvdHlwZS5tYXA/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPUFycmF5KGMpLGU9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxmPTA7ZjxjO2YrKylmIGluIGUmJihkW2ZdPWIuY2FsbCh2b2lkIDAsZVtmXSxmLGEpKTtyZXR1cm4gZH0sU2E9QXJyYXkucHJvdG90eXBlLnNvbWU/ZnVuY3Rpb24oYSxcbmIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hLnNwbGl0KFwiXCIpOmEsZT0wO2U8YztlKyspaWYoZSBpbiBkJiZiLmNhbGwodm9pZCAwLGRbZV0sZSxhKSlyZXR1cm4hMDtyZXR1cm4hMX07ZnVuY3Rpb24gVGEoYSl7YTp7dmFyIGI9VWE7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxlPTA7ZTxjO2UrKylpZihlIGluIGQmJmIuY2FsbCh2b2lkIDAsZFtlXSxlLGEpKXtiPWU7YnJlYWsgYX1iPS0xfXJldHVybiAwPmI/bnVsbDpcInN0cmluZ1wiPT09dHlwZW9mIGE/YS5jaGFyQXQoYik6YVtiXX1mdW5jdGlvbiBWYShhLGIpe3JldHVybiAwPD1PYShhLGIpfVxuZnVuY3Rpb24gV2EoYSxiKXtiPU9hKGEsYik7dmFyIGM7KGM9MDw9YikmJkFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhLGIsMSk7cmV0dXJuIGN9ZnVuY3Rpb24gWGEoYSxiKXt2YXIgYz0wO1BhKGEsZnVuY3Rpb24oZCxlKXtiLmNhbGwodm9pZCAwLGQsZSxhKSYmMT09QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGEsZSwxKS5sZW5ndGgmJmMrK30pfWZ1bmN0aW9uIFlhKGEpe3JldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGFyZ3VtZW50cyl9ZnVuY3Rpb24gWmEoYSl7dmFyIGI9YS5sZW5ndGg7aWYoMDxiKXtmb3IodmFyIGM9QXJyYXkoYiksZD0wO2Q8YjtkKyspY1tkXT1hW2RdO3JldHVybiBjfXJldHVybltdfTt2YXIgJGE9U3RyaW5nLnByb3RvdHlwZS50cmltP2Z1bmN0aW9uKGEpe3JldHVybiBhLnRyaW0oKX06ZnVuY3Rpb24oYSl7cmV0dXJuL15bXFxzXFx4YTBdKihbXFxzXFxTXSo/KVtcXHNcXHhhMF0qJC8uZXhlYyhhKVsxXX0sYWI9LyYvZyxiYj0vPC9nLGNiPS8+L2csZGI9L1wiL2csZWI9LycvZyxmYj0vXFx4MDAvZyxnYj0vW1xceDAwJjw+XCInXS87ZnVuY3Rpb24geChhLGIpe3JldHVybi0xIT1hLmluZGV4T2YoYil9ZnVuY3Rpb24gaGIoYSxiKXtyZXR1cm4gYTxiPy0xOmE+Yj8xOjB9O3ZhciBpYjthOnt2YXIgamI9bC5uYXZpZ2F0b3I7aWYoamIpe3ZhciBrYj1qYi51c2VyQWdlbnQ7aWYoa2Ipe2liPWtiO2JyZWFrIGF9fWliPVwiXCJ9ZnVuY3Rpb24geShhKXtyZXR1cm4geChpYixhKX07ZnVuY3Rpb24gbGIoYSxiKXtmb3IodmFyIGMgaW4gYSliLmNhbGwodm9pZCAwLGFbY10sYyxhKX1mdW5jdGlvbiBtYihhKXtmb3IodmFyIGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBuYihhKXt2YXIgYj17fSxjO2ZvcihjIGluIGEpYltjXT1hW2NdO3JldHVybiBifXZhciBvYj1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtmdW5jdGlvbiB6KGEsYil7Zm9yKHZhciBjLGQsZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe2Q9YXJndW1lbnRzW2VdO2ZvcihjIGluIGQpYVtjXT1kW2NdO2Zvcih2YXIgZj0wO2Y8b2IubGVuZ3RoO2YrKyljPW9iW2ZdLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLGMpJiYoYVtjXT1kW2NdKX19O2Z1bmN0aW9uIHBiKGEsYil7YTp7dHJ5e3ZhciBjPWEmJmEub3duZXJEb2N1bWVudCxkPWMmJihjLmRlZmF1bHRWaWV3fHxjLnBhcmVudFdpbmRvdyk7ZD1kfHxsO2lmKGQuRWxlbWVudCYmZC5Mb2NhdGlvbil7dmFyIGU9ZDticmVhayBhfX1jYXRjaChnKXt9ZT1udWxsfWlmKGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBlW2JdJiYoIWF8fCEoYSBpbnN0YW5jZW9mIGVbYl0pJiYoYSBpbnN0YW5jZW9mIGUuTG9jYXRpb258fGEgaW5zdGFuY2VvZiBlLkVsZW1lbnQpKSl7aWYobShhKSl0cnl7dmFyIGY9YS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8YS5jb25zdHJ1Y3Rvci5uYW1lfHxPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9Y2F0Y2goZyl7Zj1cIjxvYmplY3QgY291bGQgbm90IGJlIHN0cmluZ2lmaWVkPlwifWVsc2UgZj12b2lkIDA9PT1hP1widW5kZWZpbmVkXCI6bnVsbD09PWE/XCJudWxsXCI6dHlwZW9mIGE7R2EoXCJBcmd1bWVudCBpcyBub3QgYSAlcyAob3IgYSBub24tRWxlbWVudCwgbm9uLUxvY2F0aW9uIG1vY2spOyBnb3Q6ICVzXCIsXG5iLGYpfX07ZnVuY3Rpb24gcWIoYSxiKXt0aGlzLmE9YT09PXJiJiZifHxcIlwiO3RoaXMuYj1zYn1xYi5wcm90b3R5cGUuc2E9ITA7cWIucHJvdG90eXBlLnJhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYX07cWIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJDb25zdHtcIit0aGlzLmErXCJ9XCJ9O2Z1bmN0aW9uIHRiKGEpe2lmKGEgaW5zdGFuY2VvZiBxYiYmYS5jb25zdHJ1Y3Rvcj09PXFiJiZhLmI9PT1zYilyZXR1cm4gYS5hO0dhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgQ29uc3QsIGdvdCAnXCIrYStcIidcIik7cmV0dXJuXCJ0eXBlX2Vycm9yOkNvbnN0XCJ9dmFyIHNiPXt9LHJiPXt9O3ZhciB1YjtmdW5jdGlvbiB2Yigpe2lmKHZvaWQgMD09PXViKXt2YXIgYT1udWxsLGI9bC50cnVzdGVkVHlwZXM7aWYoYiYmYi5jcmVhdGVQb2xpY3kpe3RyeXthPWIuY3JlYXRlUG9saWN5KFwiZ29vZyNodG1sXCIse2NyZWF0ZUhUTUw6d2EsY3JlYXRlU2NyaXB0OndhLGNyZWF0ZVNjcmlwdFVSTDp3YX0pfWNhdGNoKGMpe2wuY29uc29sZSYmbC5jb25zb2xlLmVycm9yKGMubWVzc2FnZSl9dWI9YX1lbHNlIHViPWF9cmV0dXJuIHVifTtmdW5jdGlvbiB3YihhLGIpe3RoaXMuYT1iPT09eGI/YTpcIlwifXdiLnByb3RvdHlwZS5zYT0hMDt3Yi5wcm90b3R5cGUucmE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLnRvU3RyaW5nKCl9O3diLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiVHJ1c3RlZFJlc291cmNlVXJse1wiK3RoaXMuYStcIn1cIn07ZnVuY3Rpb24geWIoYSl7aWYoYSBpbnN0YW5jZW9mIHdiJiZhLmNvbnN0cnVjdG9yPT09d2IpcmV0dXJuIGEuYTtHYShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFRydXN0ZWRSZXNvdXJjZVVybCwgZ290ICdcIithK1wiJyBvZiB0eXBlIFwiK21hKGEpKTtyZXR1cm5cInR5cGVfZXJyb3I6VHJ1c3RlZFJlc291cmNlVXJsXCJ9XG5mdW5jdGlvbiB6YihhLGIpe3ZhciBjPXRiKGEpO2lmKCFBYi50ZXN0KGMpKXRocm93IEVycm9yKFwiSW52YWxpZCBUcnVzdGVkUmVzb3VyY2VVcmwgZm9ybWF0OiBcIitjKTthPWMucmVwbGFjZShCYixmdW5jdGlvbihkLGUpe2lmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYixlKSl0aHJvdyBFcnJvcignRm91bmQgbWFya2VyLCBcIicrZSsnXCIsIGluIGZvcm1hdCBzdHJpbmcsIFwiJytjKydcIiwgYnV0IG5vIHZhbGlkIGxhYmVsIG1hcHBpbmcgZm91bmQgaW4gYXJnczogJytKU09OLnN0cmluZ2lmeShiKSk7ZD1iW2VdO3JldHVybiBkIGluc3RhbmNlb2YgcWI/dGIoZCk6ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhkKSl9KTtyZXR1cm4gQ2IoYSl9dmFyIEJiPS8leyhcXHcrKX0vZyxBYj0vXigoaHR0cHM6KT9cXC9cXC9bMC05YS16LjpbXFxdLV0rXFwvfFxcL1teL1xcXFxdfFteOi9cXFxcJV0rXFwvfFteOi9cXFxcJV0qWz8jXXxhYm91dDpibGFuayMpL2kseGI9e307XG5mdW5jdGlvbiBDYihhKXt2YXIgYj12YigpO2E9Yj9iLmNyZWF0ZVNjcmlwdFVSTChhKTphO3JldHVybiBuZXcgd2IoYSx4Yil9O2Z1bmN0aW9uIEMoYSxiKXt0aGlzLmE9Yj09PURiP2E6XCJcIn1DLnByb3RvdHlwZS5zYT0hMDtDLnByb3RvdHlwZS5yYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEudG9TdHJpbmcoKX07Qy5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIlNhZmVVcmx7XCIrdGhpcy5hK1wifVwifTtmdW5jdGlvbiBFYihhKXtpZihhIGluc3RhbmNlb2YgQyYmYS5jb25zdHJ1Y3Rvcj09PUMpcmV0dXJuIGEuYTtHYShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIittYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVVcmxcIn1cbnZhciBGYj0vXig/OmF1ZGlvXFwvKD86M2dwcDJ8M2dwcHxhYWN8TDE2fG1pZGl8bXAzfG1wNHxtcGVnfG9nYXxvZ2d8b3B1c3x4LW00YXx4LW1hdHJvc2thfHgtd2F2fHdhdnx3ZWJtKXxmb250XFwvXFx3K3xpbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicHx4LWljb24pfHRleHRcXC9jc3Z8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibXxxdWlja3RpbWV8eC1tYXRyb3NrYSkpKD86O1xcdys9KD86XFx3K3xcIltcXHc7LD0gXStcIikpKiQvaSxHYj0vXmRhdGE6KC4qKTtiYXNlNjQsW2EtejAtOStcXC9dKz0qJC9pLEhiPS9eKD86KD86aHR0cHM/fG1haWx0b3xmdHApOnxbXjovPyNdKig/OlsvPyNdfCQpKS9pO1xuZnVuY3Rpb24gSWIoYSl7aWYoYSBpbnN0YW5jZW9mIEMpcmV0dXJuIGE7YT1cIm9iamVjdFwiPT10eXBlb2YgYSYmYS5zYT9hLnJhKCk6U3RyaW5nKGEpO2lmKEhiLnRlc3QoYSkpYT1uZXcgQyhhLERiKTtlbHNle2E9U3RyaW5nKGEpO2E9YS5yZXBsYWNlKC8oJTBBfCUwRCkvZyxcIlwiKTt2YXIgYj1hLm1hdGNoKEdiKTthPWImJkZiLnRlc3QoYlsxXSk/bmV3IEMoYSxEYik6bnVsbH1yZXR1cm4gYX1mdW5jdGlvbiBKYihhKXtpZihhIGluc3RhbmNlb2YgQylyZXR1cm4gYTthPVwib2JqZWN0XCI9PXR5cGVvZiBhJiZhLnNhP2EucmEoKTpTdHJpbmcoYSk7SGIudGVzdChhKXx8KGE9XCJhYm91dDppbnZhbGlkI3pDbG9zdXJlelwiKTtyZXR1cm4gbmV3IEMoYSxEYil9dmFyIERiPXt9LEtiPW5ldyBDKFwiYWJvdXQ6aW52YWxpZCN6Q2xvc3VyZXpcIixEYik7ZnVuY3Rpb24gTGIoYSxiLGMpe3RoaXMuYT1jPT09TWI/YTpcIlwifUxiLnByb3RvdHlwZS5zYT0hMDtMYi5wcm90b3R5cGUucmE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLnRvU3RyaW5nKCl9O0xiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZUh0bWx7XCIrdGhpcy5hK1wifVwifTtmdW5jdGlvbiBOYihhKXtpZihhIGluc3RhbmNlb2YgTGImJmEuY29uc3RydWN0b3I9PT1MYilyZXR1cm4gYS5hO0dhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgU2FmZUh0bWwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIittYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVIdG1sXCJ9dmFyIE1iPXt9O2Z1bmN0aW9uIE9iKGEsYil7cGIoYSxcIkhUTUxTY3JpcHRFbGVtZW50XCIpO2Euc3JjPXliKGIpOyhiPWEub3duZXJEb2N1bWVudCYmYS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSYmYiE9bD9iPWthKGIuZG9jdW1lbnQpOihudWxsPT09amEmJihqYT1rYShsLmRvY3VtZW50KSksYj1qYSk7YiYmYS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGIpfWZ1bmN0aW9uIFBiKGEsYixjLGQpe2E9YSBpbnN0YW5jZW9mIEM/YTpKYihhKTtiPWJ8fGw7Yz1jIGluc3RhbmNlb2YgcWI/dGIoYyk6Y3x8XCJcIjtyZXR1cm4gYi5vcGVuKEViKGEpLGMsZCx2b2lkIDApfTtmdW5jdGlvbiBRYihhLGIpe2Zvcih2YXIgYz1hLnNwbGl0KFwiJXNcIiksZD1cIlwiLGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2UubGVuZ3RoJiYxPGMubGVuZ3RoOylkKz1jLnNoaWZ0KCkrZS5zaGlmdCgpO3JldHVybiBkK2Muam9pbihcIiVzXCIpfWZ1bmN0aW9uIFJiKGEpe2diLnRlc3QoYSkmJigtMSE9YS5pbmRleE9mKFwiJlwiKSYmKGE9YS5yZXBsYWNlKGFiLFwiJmFtcDtcIikpLC0xIT1hLmluZGV4T2YoXCI8XCIpJiYoYT1hLnJlcGxhY2UoYmIsXCImbHQ7XCIpKSwtMSE9YS5pbmRleE9mKFwiPlwiKSYmKGE9YS5yZXBsYWNlKGNiLFwiJmd0O1wiKSksLTEhPWEuaW5kZXhPZignXCInKSYmKGE9YS5yZXBsYWNlKGRiLFwiJnF1b3Q7XCIpKSwtMSE9YS5pbmRleE9mKFwiJ1wiKSYmKGE9YS5yZXBsYWNlKGViLFwiJiMzOTtcIikpLC0xIT1hLmluZGV4T2YoXCJcXHgwMFwiKSYmKGE9YS5yZXBsYWNlKGZiLFwiJiMwO1wiKSkpO3JldHVybiBhfTtmdW5jdGlvbiBTYihhKXtTYltcIiBcIl0oYSk7cmV0dXJuIGF9U2JbXCIgXCJdPWxhO2Z1bmN0aW9uIFRiKGEsYil7dmFyIGM9VWI7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLGEpP2NbYV06Y1thXT1iKGEpfTt2YXIgVmI9eShcIk9wZXJhXCIpLFdiPXkoXCJUcmlkZW50XCIpfHx5KFwiTVNJRVwiKSxYYj15KFwiRWRnZVwiKSxZYj1YYnx8V2IsWmI9eShcIkdlY2tvXCIpJiYhKHgoaWIudG9Mb3dlckNhc2UoKSxcIndlYmtpdFwiKSYmIXkoXCJFZGdlXCIpKSYmISh5KFwiVHJpZGVudFwiKXx8eShcIk1TSUVcIikpJiYheShcIkVkZ2VcIiksJGI9eChpYi50b0xvd2VyQ2FzZSgpLFwid2Via2l0XCIpJiYheShcIkVkZ2VcIik7ZnVuY3Rpb24gYWMoKXt2YXIgYT1sLmRvY3VtZW50O3JldHVybiBhP2EuZG9jdW1lbnRNb2RlOnZvaWQgMH12YXIgYmM7XG5hOnt2YXIgY2M9XCJcIixkYz1mdW5jdGlvbigpe3ZhciBhPWliO2lmKFpiKXJldHVybi9ydjooW15cXCk7XSspKFxcKXw7KS8uZXhlYyhhKTtpZihYYilyZXR1cm4vRWRnZVxcLyhbXFxkXFwuXSspLy5leGVjKGEpO2lmKFdiKXJldHVybi9cXGIoPzpNU0lFfHJ2KVs6IF0oW15cXCk7XSspKFxcKXw7KS8uZXhlYyhhKTtpZigkYilyZXR1cm4vV2ViS2l0XFwvKFxcUyspLy5leGVjKGEpO2lmKFZiKXJldHVybi8oPzpWZXJzaW9uKVsgXFwvXT8oXFxTKykvLmV4ZWMoYSl9KCk7ZGMmJihjYz1kYz9kY1sxXTpcIlwiKTtpZihXYil7dmFyIGVjPWFjKCk7aWYobnVsbCE9ZWMmJmVjPnBhcnNlRmxvYXQoY2MpKXtiYz1TdHJpbmcoZWMpO2JyZWFrIGF9fWJjPWNjfXZhciBVYj17fTtcbmZ1bmN0aW9uIGZjKGEpe3JldHVybiBUYihhLGZ1bmN0aW9uKCl7Zm9yKHZhciBiPTAsYz0kYShTdHJpbmcoYmMpKS5zcGxpdChcIi5cIiksZD0kYShTdHJpbmcoYSkpLnNwbGl0KFwiLlwiKSxlPU1hdGgubWF4KGMubGVuZ3RoLGQubGVuZ3RoKSxmPTA7MD09YiYmZjxlO2YrKyl7dmFyIGc9Y1tmXXx8XCJcIixoPWRbZl18fFwiXCI7ZG97Zz0vKFxcZCopKFxcRCopKC4qKS8uZXhlYyhnKXx8W1wiXCIsXCJcIixcIlwiLFwiXCJdO2g9LyhcXGQqKShcXEQqKSguKikvLmV4ZWMoaCl8fFtcIlwiLFwiXCIsXCJcIixcIlwiXTtpZigwPT1nWzBdLmxlbmd0aCYmMD09aFswXS5sZW5ndGgpYnJlYWs7Yj1oYigwPT1nWzFdLmxlbmd0aD8wOnBhcnNlSW50KGdbMV0sMTApLDA9PWhbMV0ubGVuZ3RoPzA6cGFyc2VJbnQoaFsxXSwxMCkpfHxoYigwPT1nWzJdLmxlbmd0aCwwPT1oWzJdLmxlbmd0aCl8fGhiKGdbMl0saFsyXSk7Zz1nWzNdO2g9aFszXX13aGlsZSgwPT1iKX1yZXR1cm4gMDw9Yn0pfXZhciBnYztcbmlmKGwuZG9jdW1lbnQmJldiKXt2YXIgaGM9YWMoKTtnYz1oYz9oYzpwYXJzZUludChiYywxMCl8fHZvaWQgMH1lbHNlIGdjPXZvaWQgMDt2YXIgaWM9Z2M7dHJ5eyhuZXcgc2VsZi5PZmZzY3JlZW5DYW52YXMoMCwwKSkuZ2V0Q29udGV4dChcIjJkXCIpfWNhdGNoKGEpe312YXIgamM9IVdifHw5PD1OdW1iZXIoaWMpO2Z1bmN0aW9uIGtjKGEpe3ZhciBiPWRvY3VtZW50O3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT9iLmdldEVsZW1lbnRCeUlkKGEpOmF9ZnVuY3Rpb24gbGMoYSxiKXtsYihiLGZ1bmN0aW9uKGMsZCl7YyYmXCJvYmplY3RcIj09dHlwZW9mIGMmJmMuc2EmJihjPWMucmEoKSk7XCJzdHlsZVwiPT1kP2Euc3R5bGUuY3NzVGV4dD1jOlwiY2xhc3NcIj09ZD9hLmNsYXNzTmFtZT1jOlwiZm9yXCI9PWQ/YS5odG1sRm9yPWM6bWMuaGFzT3duUHJvcGVydHkoZCk/YS5zZXRBdHRyaWJ1dGUobWNbZF0sYyk6MD09ZC5sYXN0SW5kZXhPZihcImFyaWEtXCIsMCl8fDA9PWQubGFzdEluZGV4T2YoXCJkYXRhLVwiLDApP2Euc2V0QXR0cmlidXRlKGQsYyk6YVtkXT1jfSl9XG52YXIgbWM9e2NlbGxwYWRkaW5nOlwiY2VsbFBhZGRpbmdcIixjZWxsc3BhY2luZzpcImNlbGxTcGFjaW5nXCIsY29sc3BhbjpcImNvbFNwYW5cIixmcmFtZWJvcmRlcjpcImZyYW1lQm9yZGVyXCIsaGVpZ2h0OlwiaGVpZ2h0XCIsbWF4bGVuZ3RoOlwibWF4TGVuZ3RoXCIsbm9uY2U6XCJub25jZVwiLHJvbGU6XCJyb2xlXCIscm93c3BhbjpcInJvd1NwYW5cIix0eXBlOlwidHlwZVwiLHVzZW1hcDpcInVzZU1hcFwiLHZhbGlnbjpcInZBbGlnblwiLHdpZHRoOlwid2lkdGhcIn07XG5mdW5jdGlvbiBuYyhhLGIsYyl7dmFyIGQ9YXJndW1lbnRzLGU9ZG9jdW1lbnQsZj1TdHJpbmcoZFswXSksZz1kWzFdO2lmKCFqYyYmZyYmKGcubmFtZXx8Zy50eXBlKSl7Zj1bXCI8XCIsZl07Zy5uYW1lJiZmLnB1c2goJyBuYW1lPVwiJyxSYihnLm5hbWUpLCdcIicpO2lmKGcudHlwZSl7Zi5wdXNoKCcgdHlwZT1cIicsUmIoZy50eXBlKSwnXCInKTt2YXIgaD17fTt6KGgsZyk7ZGVsZXRlIGgudHlwZTtnPWh9Zi5wdXNoKFwiPlwiKTtmPWYuam9pbihcIlwiKX1mPW9jKGUsZik7ZyYmKFwic3RyaW5nXCI9PT10eXBlb2YgZz9mLmNsYXNzTmFtZT1nOkFycmF5LmlzQXJyYXkoZyk/Zi5jbGFzc05hbWU9Zy5qb2luKFwiIFwiKTpsYyhmLGcpKTsyPGQubGVuZ3RoJiZwYyhlLGYsZCk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBwYyhhLGIsYyl7ZnVuY3Rpb24gZChoKXtoJiZiLmFwcGVuZENoaWxkKFwic3RyaW5nXCI9PT10eXBlb2YgaD9hLmNyZWF0ZVRleHROb2RlKGgpOmgpfWZvcih2YXIgZT0yO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZj1jW2VdO2lmKCFuYShmKXx8bShmKSYmMDxmLm5vZGVUeXBlKWQoZik7ZWxzZXthOntpZihmJiZcIm51bWJlclwiPT10eXBlb2YgZi5sZW5ndGgpe2lmKG0oZikpe3ZhciBnPVwiZnVuY3Rpb25cIj09dHlwZW9mIGYuaXRlbXx8XCJzdHJpbmdcIj09dHlwZW9mIGYuaXRlbTticmVhayBhfWlmKG9hKGYpKXtnPVwiZnVuY3Rpb25cIj09dHlwZW9mIGYuaXRlbTticmVhayBhfX1nPSExfXcoZz9aYShmKTpmLGQpfX19ZnVuY3Rpb24gb2MoYSxiKXtiPVN0cmluZyhiKTtcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiPT09YS5jb250ZW50VHlwZSYmKGI9Yi50b0xvd2VyQ2FzZSgpKTtyZXR1cm4gYS5jcmVhdGVFbGVtZW50KGIpfTtmdW5jdGlvbiBxYyhhKXtsLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30sMCl9dmFyIHJjO1xuZnVuY3Rpb24gc2MoKXt2YXIgYT1sLk1lc3NhZ2VDaGFubmVsO1widW5kZWZpbmVkXCI9PT10eXBlb2YgYSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5wb3N0TWVzc2FnZSYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXImJiF5KFwiUHJlc3RvXCIpJiYoYT1mdW5jdGlvbigpe3ZhciBlPW9jKGRvY3VtZW50LFwiSUZSQU1FXCIpO2Uuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZSk7dmFyIGY9ZS5jb250ZW50V2luZG93O2U9Zi5kb2N1bWVudDtlLm9wZW4oKTtlLmNsb3NlKCk7dmFyIGc9XCJjYWxsSW1tZWRpYXRlXCIrTWF0aC5yYW5kb20oKSxoPVwiZmlsZTpcIj09Zi5sb2NhdGlvbi5wcm90b2NvbD9cIipcIjpmLmxvY2F0aW9uLnByb3RvY29sK1wiLy9cIitmLmxvY2F0aW9uLmhvc3Q7ZT1xKGZ1bmN0aW9uKG4pe2lmKChcIipcIj09aHx8bi5vcmlnaW49PWgpJiZuLmRhdGE9PWcpdGhpcy5wb3J0MS5vbm1lc3NhZ2UoKX0sdGhpcyk7XG5mLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZSwhMSk7dGhpcy5wb3J0MT17fTt0aGlzLnBvcnQyPXtwb3N0TWVzc2FnZTpmdW5jdGlvbigpe2YucG9zdE1lc3NhZ2UoZyxoKX19fSk7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYheShcIlRyaWRlbnRcIikmJiF5KFwiTVNJRVwiKSl7dmFyIGI9bmV3IGEsYz17fSxkPWM7Yi5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1jLm5leHQpe2M9Yy5uZXh0O3ZhciBlPWMuRmI7Yy5GYj1udWxsO2UoKX19O3JldHVybiBmdW5jdGlvbihlKXtkLm5leHQ9e0ZiOmV9O2Q9ZC5uZXh0O2IucG9ydDIucG9zdE1lc3NhZ2UoMCl9fXJldHVybiBmdW5jdGlvbihlKXtsLnNldFRpbWVvdXQoZSwwKX19O2Z1bmN0aW9uIHRjKGEsYil7dWN8fHZjKCk7d2N8fCh1YygpLHdjPSEwKTtOYS5hZGQoYSxiKX12YXIgdWM7ZnVuY3Rpb24gdmMoKXtpZihsLlByb21pc2UmJmwuUHJvbWlzZS5yZXNvbHZlKXt2YXIgYT1sLlByb21pc2UucmVzb2x2ZSh2b2lkIDApO3VjPWZ1bmN0aW9uKCl7YS50aGVuKHhjKX19ZWxzZSB1Yz1mdW5jdGlvbigpe3ZhciBiPXhjOyFvYShsLnNldEltbWVkaWF0ZSl8fGwuV2luZG93JiZsLldpbmRvdy5wcm90b3R5cGUmJiF5KFwiRWRnZVwiKSYmbC5XaW5kb3cucHJvdG90eXBlLnNldEltbWVkaWF0ZT09bC5zZXRJbW1lZGlhdGU/KHJjfHwocmM9c2MoKSkscmMoYikpOmwuc2V0SW1tZWRpYXRlKGIpfX12YXIgd2M9ITEsTmE9bmV3IEphO2Z1bmN0aW9uIHhjKCl7Zm9yKHZhciBhO2E9TWEoKTspe3RyeXthLmEuY2FsbChhLmIpfWNhdGNoKGIpe3FjKGIpfUlhKExhLGEpfXdjPSExfTtmdW5jdGlvbiBEKGEsYil7dGhpcy5hPXljO3RoaXMuaT12b2lkIDA7dGhpcy5mPXRoaXMuYj10aGlzLmM9bnVsbDt0aGlzLmc9dGhpcy5oPSExO2lmKGEhPWxhKXRyeXt2YXIgYz10aGlzO2EuY2FsbChiLGZ1bmN0aW9uKGQpe3pjKGMsQWMsZCl9LGZ1bmN0aW9uKGQpe2lmKCEoZCBpbnN0YW5jZW9mIEJjKSl0cnl7aWYoZCBpbnN0YW5jZW9mIEVycm9yKXRocm93IGQ7dGhyb3cgRXJyb3IoXCJQcm9taXNlIHJlamVjdGVkLlwiKTt9Y2F0Y2goZSl7fXpjKGMsQ2MsZCl9KX1jYXRjaChkKXt6Yyh0aGlzLENjLGQpfX12YXIgeWM9MCxBYz0yLENjPTM7ZnVuY3Rpb24gRGMoKXt0aGlzLm5leHQ9dGhpcy5mPXRoaXMuYj10aGlzLmc9dGhpcy5hPW51bGw7dGhpcy5jPSExfURjLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuZj10aGlzLmI9dGhpcy5nPXRoaXMuYT1udWxsO3RoaXMuYz0hMX07dmFyIEVjPW5ldyBIYShmdW5jdGlvbigpe3JldHVybiBuZXcgRGN9LGZ1bmN0aW9uKGEpe2EucmVzZXQoKX0pO1xuZnVuY3Rpb24gRmMoYSxiLGMpe3ZhciBkPUVjLmdldCgpO2QuZz1hO2QuYj1iO2QuZj1jO3JldHVybiBkfWZ1bmN0aW9uIEUoYSl7aWYoYSBpbnN0YW5jZW9mIEQpcmV0dXJuIGE7dmFyIGI9bmV3IEQobGEpO3pjKGIsQWMsYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gRihhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYixjKXtjKGEpfSl9ZnVuY3Rpb24gR2MoYSxiLGMpe0hjKGEsYixjLG51bGwpfHx0Yyh1YShiLGEpKX1mdW5jdGlvbiBJYyhhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYixjKXt2YXIgZD1hLmxlbmd0aCxlPVtdO2lmKGQpZm9yKHZhciBmPWZ1bmN0aW9uKHAsdil7ZC0tO2VbcF09djswPT1kJiZiKGUpfSxnPWZ1bmN0aW9uKHApe2MocCl9LGg9MCxuO2g8YS5sZW5ndGg7aCsrKW49YVtoXSxHYyhuLHVhKGYsaCksZyk7ZWxzZSBiKGUpfSl9XG5mdW5jdGlvbiBKYyhhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYil7dmFyIGM9YS5sZW5ndGgsZD1bXTtpZihjKWZvcih2YXIgZT1mdW5jdGlvbihoLG4scCl7Yy0tO2RbaF09bj97T2I6ITAsdmFsdWU6cH06e09iOiExLHJlYXNvbjpwfTswPT1jJiZiKGQpfSxmPTAsZztmPGEubGVuZ3RoO2YrKylnPWFbZl0sR2MoZyx1YShlLGYsITApLHVhKGUsZiwhMSkpO2Vsc2UgYihkKX0pfUQucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBLYyh0aGlzLG9hKGEpP2E6bnVsbCxvYShiKT9iOm51bGwsYyl9O0QucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlPSEwO2s9RC5wcm90b3R5cGU7ay5uYT1mdW5jdGlvbihhLGIpe2E9RmMoYSxhLGIpO2EuYz0hMDtMYyh0aGlzLGEpO3JldHVybiB0aGlzfTtrLnM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gS2ModGhpcyxudWxsLGEsYil9O1xuay5jYW5jZWw9ZnVuY3Rpb24oYSl7aWYodGhpcy5hPT15Yyl7dmFyIGI9bmV3IEJjKGEpO3RjKGZ1bmN0aW9uKCl7TWModGhpcyxiKX0sdGhpcyl9fTtmdW5jdGlvbiBNYyhhLGIpe2lmKGEuYT09eWMpaWYoYS5jKXt2YXIgYz1hLmM7aWYoYy5iKXtmb3IodmFyIGQ9MCxlPW51bGwsZj1udWxsLGc9Yy5iO2cmJihnLmN8fChkKyssZy5hPT1hJiYoZT1nKSwhKGUmJjE8ZCkpKTtnPWcubmV4dCllfHwoZj1nKTtlJiYoYy5hPT15YyYmMT09ZD9NYyhjLGIpOihmPyhkPWYsZC5uZXh0PT1jLmYmJihjLmY9ZCksZC5uZXh0PWQubmV4dC5uZXh0KTpOYyhjKSxPYyhjLGUsQ2MsYikpKX1hLmM9bnVsbH1lbHNlIHpjKGEsQ2MsYil9ZnVuY3Rpb24gTGMoYSxiKXthLmJ8fGEuYSE9QWMmJmEuYSE9Q2N8fFBjKGEpO2EuZj9hLmYubmV4dD1iOmEuYj1iO2EuZj1ifVxuZnVuY3Rpb24gS2MoYSxiLGMsZCl7dmFyIGU9RmMobnVsbCxudWxsLG51bGwpO2UuYT1uZXcgRChmdW5jdGlvbihmLGcpe2UuZz1iP2Z1bmN0aW9uKGgpe3RyeXt2YXIgbj1iLmNhbGwoZCxoKTtmKG4pfWNhdGNoKHApe2cocCl9fTpmO2UuYj1jP2Z1bmN0aW9uKGgpe3RyeXt2YXIgbj1jLmNhbGwoZCxoKTt2b2lkIDA9PT1uJiZoIGluc3RhbmNlb2YgQmM/ZyhoKTpmKG4pfWNhdGNoKHApe2cocCl9fTpnfSk7ZS5hLmM9YTtMYyhhLGUpO3JldHVybiBlLmF9ay5aYz1mdW5jdGlvbihhKXt0aGlzLmE9eWM7emModGhpcyxBYyxhKX07ay4kYz1mdW5jdGlvbihhKXt0aGlzLmE9eWM7emModGhpcyxDYyxhKX07XG5mdW5jdGlvbiB6YyhhLGIsYyl7YS5hPT15YyYmKGE9PT1jJiYoYj1DYyxjPW5ldyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbm5vdCByZXNvbHZlIHRvIGl0c2VsZlwiKSksYS5hPTEsSGMoYyxhLlpjLGEuJGMsYSl8fChhLmk9YyxhLmE9YixhLmM9bnVsbCxQYyhhKSxiIT1DY3x8YyBpbnN0YW5jZW9mIEJjfHxRYyhhLGMpKSl9ZnVuY3Rpb24gSGMoYSxiLGMsZCl7aWYoYSBpbnN0YW5jZW9mIEQpcmV0dXJuIExjKGEsRmMoYnx8bGEsY3x8bnVsbCxkKSksITA7aWYoRWEoYSkpcmV0dXJuIGEudGhlbihiLGMsZCksITA7aWYobShhKSl0cnl7dmFyIGU9YS50aGVuO2lmKG9hKGUpKXJldHVybiBSYyhhLGUsYixjLGQpLCEwfWNhdGNoKGYpe3JldHVybiBjLmNhbGwoZCxmKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihuKXtofHwoaD0hMCxkLmNhbGwoZSxuKSl9ZnVuY3Rpb24gZyhuKXtofHwoaD0hMCxjLmNhbGwoZSxuKSl9dmFyIGg9ITE7dHJ5e2IuY2FsbChhLGcsZil9Y2F0Y2gobil7ZihuKX19ZnVuY3Rpb24gUGMoYSl7YS5ofHwoYS5oPSEwLHRjKGEuZmMsYSkpfWZ1bmN0aW9uIE5jKGEpe3ZhciBiPW51bGw7YS5iJiYoYj1hLmIsYS5iPWIubmV4dCxiLm5leHQ9bnVsbCk7YS5ifHwoYS5mPW51bGwpO3JldHVybiBifWsuZmM9ZnVuY3Rpb24oKXtmb3IodmFyIGE7YT1OYyh0aGlzKTspT2ModGhpcyxhLHRoaXMuYSx0aGlzLmkpO3RoaXMuaD0hMX07XG5mdW5jdGlvbiBPYyhhLGIsYyxkKXtpZihjPT1DYyYmYi5iJiYhYi5jKWZvcig7YSYmYS5nO2E9YS5jKWEuZz0hMTtpZihiLmEpYi5hLmM9bnVsbCxTYyhiLGMsZCk7ZWxzZSB0cnl7Yi5jP2IuZy5jYWxsKGIuZik6U2MoYixjLGQpfWNhdGNoKGUpe1RjLmNhbGwobnVsbCxlKX1JYShFYyxiKX1mdW5jdGlvbiBTYyhhLGIsYyl7Yj09QWM/YS5nLmNhbGwoYS5mLGMpOmEuYiYmYS5iLmNhbGwoYS5mLGMpfWZ1bmN0aW9uIFFjKGEsYil7YS5nPSEwO3RjKGZ1bmN0aW9uKCl7YS5nJiZUYy5jYWxsKG51bGwsYil9KX12YXIgVGM9cWM7ZnVuY3Rpb24gQmMoYSl7dS5jYWxsKHRoaXMsYSl9cihCYyx1KTtCYy5wcm90b3R5cGUubmFtZT1cImNhbmNlbFwiO2Z1bmN0aW9uIFVjKCl7MCE9VmMmJihXY1twYSh0aGlzKV09dGhpcyk7dGhpcy54YT10aGlzLnhhO3RoaXMub2E9dGhpcy5vYX12YXIgVmM9MCxXYz17fTtVYy5wcm90b3R5cGUueGE9ITE7ZnVuY3Rpb24gWGMoYSl7aWYoIWEueGEmJihhLnhhPSEwLGEuRGEoKSwwIT1WYykpe3ZhciBiPXBhKGEpO2lmKDAhPVZjJiZhLm9hJiYwPGEub2EubGVuZ3RoKXRocm93IEVycm9yKGErXCIgZGlkIG5vdCBlbXB0eSBpdHMgb25EaXNwb3NlQ2FsbGJhY2tzIHF1ZXVlLiBUaGlzIHByb2JhYmx5IG1lYW5zIGl0IG92ZXJyb2RlIGRpc3Bvc2UoKSBvciBkaXNwb3NlSW50ZXJuYWwoKSB3aXRob3V0IGNhbGxpbmcgdGhlIHN1cGVyY2xhc3MnIG1ldGhvZC5cIik7ZGVsZXRlIFdjW2JdfX1VYy5wcm90b3R5cGUuRGE9ZnVuY3Rpb24oKXtpZih0aGlzLm9hKWZvcig7dGhpcy5vYS5sZW5ndGg7KXRoaXMub2Euc2hpZnQoKSgpfTt2YXIgWWM9T2JqZWN0LmZyZWV6ZXx8ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O3ZhciBaYz0hV2J8fDk8PU51bWJlcihpYyksJGM9V2ImJiFmYyhcIjlcIiksYWQ9ZnVuY3Rpb24oKXtpZighbC5hZGRFdmVudExpc3RlbmVyfHwhT2JqZWN0LmRlZmluZVByb3BlcnR5KXJldHVybiExO3ZhciBhPSExLGI9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXthPSEwfX0pO3RyeXtsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsbGEsYiksbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLGxhLGIpfWNhdGNoKGMpe31yZXR1cm4gYX0oKTtmdW5jdGlvbiBHKGEsYil7dGhpcy50eXBlPWE7dGhpcy5iPXRoaXMudGFyZ2V0PWI7dGhpcy5kZWZhdWx0UHJldmVudGVkPSExfUcucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwfTtmdW5jdGlvbiBiZChhLGIpe0cuY2FsbCh0aGlzLGE/YS50eXBlOlwiXCIpO3RoaXMucmVsYXRlZFRhcmdldD10aGlzLmI9dGhpcy50YXJnZXQ9bnVsbDt0aGlzLmJ1dHRvbj10aGlzLnNjcmVlblk9dGhpcy5zY3JlZW5YPXRoaXMuY2xpZW50WT10aGlzLmNsaWVudFg9MDt0aGlzLmtleT1cIlwiO3RoaXMubWV0YUtleT10aGlzLnNoaWZ0S2V5PXRoaXMuYWx0S2V5PXRoaXMuY3RybEtleT0hMTt0aGlzLnBvaW50ZXJJZD0wO3RoaXMucG9pbnRlclR5cGU9XCJcIjt0aGlzLmE9bnVsbDtpZihhKXt2YXIgYz10aGlzLnR5cGU9YS50eXBlLGQ9YS5jaGFuZ2VkVG91Y2hlcyYmYS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg/YS5jaGFuZ2VkVG91Y2hlc1swXTpudWxsO3RoaXMudGFyZ2V0PWEudGFyZ2V0fHxhLnNyY0VsZW1lbnQ7dGhpcy5iPWI7aWYoYj1hLnJlbGF0ZWRUYXJnZXQpe2lmKFpiKXthOnt0cnl7U2IoYi5ub2RlTmFtZSk7dmFyIGU9ITA7YnJlYWsgYX1jYXRjaChmKXt9ZT0hMX1lfHwoYj1udWxsKX19ZWxzZVwibW91c2VvdmVyXCI9PVxuYz9iPWEuZnJvbUVsZW1lbnQ6XCJtb3VzZW91dFwiPT1jJiYoYj1hLnRvRWxlbWVudCk7dGhpcy5yZWxhdGVkVGFyZ2V0PWI7ZD8odGhpcy5jbGllbnRYPXZvaWQgMCE9PWQuY2xpZW50WD9kLmNsaWVudFg6ZC5wYWdlWCx0aGlzLmNsaWVudFk9dm9pZCAwIT09ZC5jbGllbnRZP2QuY2xpZW50WTpkLnBhZ2VZLHRoaXMuc2NyZWVuWD1kLnNjcmVlblh8fDAsdGhpcy5zY3JlZW5ZPWQuc2NyZWVuWXx8MCk6KHRoaXMuY2xpZW50WD12b2lkIDAhPT1hLmNsaWVudFg/YS5jbGllbnRYOmEucGFnZVgsdGhpcy5jbGllbnRZPXZvaWQgMCE9PWEuY2xpZW50WT9hLmNsaWVudFk6YS5wYWdlWSx0aGlzLnNjcmVlblg9YS5zY3JlZW5YfHwwLHRoaXMuc2NyZWVuWT1hLnNjcmVlbll8fDApO3RoaXMuYnV0dG9uPWEuYnV0dG9uO3RoaXMua2V5PWEua2V5fHxcIlwiO3RoaXMuY3RybEtleT1hLmN0cmxLZXk7dGhpcy5hbHRLZXk9YS5hbHRLZXk7dGhpcy5zaGlmdEtleT1hLnNoaWZ0S2V5O3RoaXMubWV0YUtleT1cbmEubWV0YUtleTt0aGlzLnBvaW50ZXJJZD1hLnBvaW50ZXJJZHx8MDt0aGlzLnBvaW50ZXJUeXBlPVwic3RyaW5nXCI9PT10eXBlb2YgYS5wb2ludGVyVHlwZT9hLnBvaW50ZXJUeXBlOmNkW2EucG9pbnRlclR5cGVdfHxcIlwiO3RoaXMuYT1hO2EuZGVmYXVsdFByZXZlbnRlZCYmdGhpcy5wcmV2ZW50RGVmYXVsdCgpfX1yKGJkLEcpO3ZhciBjZD1ZYyh7MjpcInRvdWNoXCIsMzpcInBlblwiLDQ6XCJtb3VzZVwifSk7YmQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7YmQuJGEucHJldmVudERlZmF1bHQuY2FsbCh0aGlzKTt2YXIgYT10aGlzLmE7aWYoYS5wcmV2ZW50RGVmYXVsdClhLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBpZihhLnJldHVyblZhbHVlPSExLCRjKXRyeXtpZihhLmN0cmxLZXl8fDExMjw9YS5rZXlDb2RlJiYxMjM+PWEua2V5Q29kZSlhLmtleUNvZGU9LTF9Y2F0Y2goYil7fX07YmQucHJvdG90eXBlLmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTt2YXIgZGQ9XCJjbG9zdXJlX2xpc3RlbmFibGVfXCIrKDFFNipNYXRoLnJhbmRvbSgpfDApLGVkPTA7ZnVuY3Rpb24gZmQoYSxiLGMsZCxlKXt0aGlzLmxpc3RlbmVyPWE7dGhpcy5wcm94eT1udWxsO3RoaXMuc3JjPWI7dGhpcy50eXBlPWM7dGhpcy5jYXB0dXJlPSEhZDt0aGlzLlVhPWU7dGhpcy5rZXk9KytlZDt0aGlzLnZhPXRoaXMuT2E9ITF9ZnVuY3Rpb24gZ2QoYSl7YS52YT0hMDthLmxpc3RlbmVyPW51bGw7YS5wcm94eT1udWxsO2Euc3JjPW51bGw7YS5VYT1udWxsfTtmdW5jdGlvbiBoZChhKXt0aGlzLnNyYz1hO3RoaXMuYT17fTt0aGlzLmI9MH1oZC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS50b1N0cmluZygpO2E9dGhpcy5hW2ZdO2F8fChhPXRoaXMuYVtmXT1bXSx0aGlzLmIrKyk7dmFyIGc9aWQoYSxiLGQsZSk7LTE8Zz8oYj1hW2ddLGN8fChiLk9hPSExKSk6KGI9bmV3IGZkKGIsdGhpcy5zcmMsZiwhIWQsZSksYi5PYT1jLGEucHVzaChiKSk7cmV0dXJuIGJ9O2Z1bmN0aW9uIGpkKGEsYil7dmFyIGM9Yi50eXBlO2MgaW4gYS5hJiZXYShhLmFbY10sYikmJihnZChiKSwwPT1hLmFbY10ubGVuZ3RoJiYoZGVsZXRlIGEuYVtjXSxhLmItLSkpfWZ1bmN0aW9uIGlkKGEsYixjLGQpe2Zvcih2YXIgZT0wO2U8YS5sZW5ndGg7KytlKXt2YXIgZj1hW2VdO2lmKCFmLnZhJiZmLmxpc3RlbmVyPT1iJiZmLmNhcHR1cmU9PSEhYyYmZi5VYT09ZClyZXR1cm4gZX1yZXR1cm4tMX07dmFyIGtkPVwiY2xvc3VyZV9sbV9cIisoMUU2Kk1hdGgucmFuZG9tKCl8MCksbGQ9e30sbWQ9MDtmdW5jdGlvbiBuZChhLGIsYyxkLGUpe2lmKGQmJmQub25jZSlvZChhLGIsYyxkLGUpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrKyluZChhLGJbZl0sYyxkLGUpO2Vsc2UgYz1wZChjKSxhJiZhW2RkXT9xZChhLGIsYyxtKGQpPyEhZC5jYXB0dXJlOiEhZCxlKTpyZChhLGIsYywhMSxkLGUpfVxuZnVuY3Rpb24gcmQoYSxiLGMsZCxlLGYpe2lmKCFiKXRocm93IEVycm9yKFwiSW52YWxpZCBldmVudCB0eXBlXCIpO3ZhciBnPW0oZSk/ISFlLmNhcHR1cmU6ISFlLGg9c2QoYSk7aHx8KGFba2RdPWg9bmV3IGhkKGEpKTtjPWguYWRkKGIsYyxkLGcsZik7aWYoIWMucHJveHkpe2Q9dGQoKTtjLnByb3h5PWQ7ZC5zcmM9YTtkLmxpc3RlbmVyPWM7aWYoYS5hZGRFdmVudExpc3RlbmVyKWFkfHwoZT1nKSx2b2lkIDA9PT1lJiYoZT0hMSksYS5hZGRFdmVudExpc3RlbmVyKGIudG9TdHJpbmcoKSxkLGUpO2Vsc2UgaWYoYS5hdHRhY2hFdmVudClhLmF0dGFjaEV2ZW50KHVkKGIudG9TdHJpbmcoKSksZCk7ZWxzZSBpZihhLmFkZExpc3RlbmVyJiZhLnJlbW92ZUxpc3RlbmVyKWEuYWRkTGlzdGVuZXIoZCk7ZWxzZSB0aHJvdyBFcnJvcihcImFkZEV2ZW50TGlzdGVuZXIgYW5kIGF0dGFjaEV2ZW50IGFyZSB1bmF2YWlsYWJsZS5cIik7bWQrK319XG5mdW5jdGlvbiB0ZCgpe3ZhciBhPXZkLGI9WmM/ZnVuY3Rpb24oYyl7cmV0dXJuIGEuY2FsbChiLnNyYyxiLmxpc3RlbmVyLGMpfTpmdW5jdGlvbihjKXtjPWEuY2FsbChiLnNyYyxiLmxpc3RlbmVyLGMpO2lmKCFjKXJldHVybiBjfTtyZXR1cm4gYn1mdW5jdGlvbiBvZChhLGIsYyxkLGUpe2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspb2QoYSxiW2ZdLGMsZCxlKTtlbHNlIGM9cGQoYyksYSYmYVtkZF0/d2QoYSxiLGMsbShkKT8hIWQuY2FwdHVyZTohIWQsZSk6cmQoYSxiLGMsITAsZCxlKX1cbmZ1bmN0aW9uIEgoYSxiLGMsZCxlKXtpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKUgoYSxiW2ZdLGMsZCxlKTtlbHNlKGQ9bShkKT8hIWQuY2FwdHVyZTohIWQsYz1wZChjKSxhJiZhW2RkXSk/KGE9YS52LGI9U3RyaW5nKGIpLnRvU3RyaW5nKCksYiBpbiBhLmEmJihmPWEuYVtiXSxjPWlkKGYsYyxkLGUpLC0xPGMmJihnZChmW2NdKSxBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoZixjLDEpLDA9PWYubGVuZ3RoJiYoZGVsZXRlIGEuYVtiXSxhLmItLSkpKSk6YSYmKGE9c2QoYSkpJiYoYj1hLmFbYi50b1N0cmluZygpXSxhPS0xLGImJihhPWlkKGIsYyxkLGUpKSwoYz0tMTxhP2JbYV06bnVsbCkmJnhkKGMpKX1cbmZ1bmN0aW9uIHhkKGEpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYSYmYSYmIWEudmEpe3ZhciBiPWEuc3JjO2lmKGImJmJbZGRdKWpkKGIudixhKTtlbHNle3ZhciBjPWEudHlwZSxkPWEucHJveHk7Yi5yZW1vdmVFdmVudExpc3RlbmVyP2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLGQsYS5jYXB0dXJlKTpiLmRldGFjaEV2ZW50P2IuZGV0YWNoRXZlbnQodWQoYyksZCk6Yi5hZGRMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lcihkKTttZC0tOyhjPXNkKGIpKT8oamQoYyxhKSwwPT1jLmImJihjLnNyYz1udWxsLGJba2RdPW51bGwpKTpnZChhKX19fWZ1bmN0aW9uIHVkKGEpe3JldHVybiBhIGluIGxkP2xkW2FdOmxkW2FdPVwib25cIithfVxuZnVuY3Rpb24geWQoYSxiLGMsZCl7dmFyIGU9ITA7aWYoYT1zZChhKSlpZihiPWEuYVtiLnRvU3RyaW5nKCldKWZvcihiPWIuY29uY2F0KCksYT0wO2E8Yi5sZW5ndGg7YSsrKXt2YXIgZj1iW2FdO2YmJmYuY2FwdHVyZT09YyYmIWYudmEmJihmPXpkKGYsZCksZT1lJiYhMSE9PWYpfXJldHVybiBlfWZ1bmN0aW9uIHpkKGEsYil7dmFyIGM9YS5saXN0ZW5lcixkPWEuVWF8fGEuc3JjO2EuT2EmJnhkKGEpO3JldHVybiBjLmNhbGwoZCxiKX1cbmZ1bmN0aW9uIHZkKGEsYil7aWYoYS52YSlyZXR1cm4hMDtpZighWmMpe2lmKCFiKWE6e2I9W1wid2luZG93XCIsXCJldmVudFwiXTtmb3IodmFyIGM9bCxkPTA7ZDxiLmxlbmd0aDtkKyspaWYoYz1jW2JbZF1dLG51bGw9PWMpe2I9bnVsbDticmVhayBhfWI9Y31kPWI7Yj1uZXcgYmQoZCx0aGlzKTtjPSEwO2lmKCEoMD5kLmtleUNvZGV8fHZvaWQgMCE9ZC5yZXR1cm5WYWx1ZSkpe2E6e3ZhciBlPSExO2lmKDA9PWQua2V5Q29kZSl0cnl7ZC5rZXlDb2RlPS0xO2JyZWFrIGF9Y2F0Y2goZyl7ZT0hMH1pZihlfHx2b2lkIDA9PWQucmV0dXJuVmFsdWUpZC5yZXR1cm5WYWx1ZT0hMH1kPVtdO2ZvcihlPWIuYjtlO2U9ZS5wYXJlbnROb2RlKWQucHVzaChlKTthPWEudHlwZTtmb3IoZT1kLmxlbmd0aC0xOzA8PWU7ZS0tKXtiLmI9ZFtlXTt2YXIgZj15ZChkW2VdLGEsITAsYik7Yz1jJiZmfWZvcihlPTA7ZTxkLmxlbmd0aDtlKyspYi5iPWRbZV0sZj15ZChkW2VdLGEsITEsYiksYz1jJiZmfXJldHVybiBjfXJldHVybiB6ZChhLFxubmV3IGJkKGIsdGhpcykpfWZ1bmN0aW9uIHNkKGEpe2E9YVtrZF07cmV0dXJuIGEgaW5zdGFuY2VvZiBoZD9hOm51bGx9dmFyIEJkPVwiX19jbG9zdXJlX2V2ZW50c19mbl9cIisoMUU5Kk1hdGgucmFuZG9tKCk+Pj4wKTtmdW5jdGlvbiBwZChhKXtpZihvYShhKSlyZXR1cm4gYTthW0JkXXx8KGFbQmRdPWZ1bmN0aW9uKGIpe3JldHVybiBhLmhhbmRsZUV2ZW50KGIpfSk7cmV0dXJuIGFbQmRdfTtmdW5jdGlvbiBJKCl7VWMuY2FsbCh0aGlzKTt0aGlzLnY9bmV3IGhkKHRoaXMpO3RoaXMuJGI9dGhpczt0aGlzLmZiPW51bGx9cihJLFVjKTtJLnByb3RvdHlwZVtkZF09ITA7SS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyxkKXtuZCh0aGlzLGEsYixjLGQpfTtJLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe0godGhpcyxhLGIsYyxkKX07XG5JLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5mYjtpZihjKWZvcihiPVtdO2M7Yz1jLmZiKWIucHVzaChjKTtjPXRoaXMuJGI7dmFyIGQ9YS50eXBlfHxhO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlhPW5ldyBHKGEsYyk7ZWxzZSBpZihhIGluc3RhbmNlb2YgRylhLnRhcmdldD1hLnRhcmdldHx8YztlbHNle3ZhciBlPWE7YT1uZXcgRyhkLGMpO3ooYSxlKX1lPSEwO2lmKGIpZm9yKHZhciBmPWIubGVuZ3RoLTE7MDw9ZjtmLS0pe3ZhciBnPWEuYj1iW2ZdO2U9Q2QoZyxkLCEwLGEpJiZlfWc9YS5iPWM7ZT1DZChnLGQsITAsYSkmJmU7ZT1DZChnLGQsITEsYSkmJmU7aWYoYilmb3IoZj0wO2Y8Yi5sZW5ndGg7ZisrKWc9YS5iPWJbZl0sZT1DZChnLGQsITEsYSkmJmU7cmV0dXJuIGV9O1xuSS5wcm90b3R5cGUuRGE9ZnVuY3Rpb24oKXtJLiRhLkRhLmNhbGwodGhpcyk7aWYodGhpcy52KXt2YXIgYT10aGlzLnYsYj0wLGM7Zm9yKGMgaW4gYS5hKXtmb3IodmFyIGQ9YS5hW2NdLGU9MDtlPGQubGVuZ3RoO2UrKykrK2IsZ2QoZFtlXSk7ZGVsZXRlIGEuYVtjXTthLmItLX19dGhpcy5mYj1udWxsfTtmdW5jdGlvbiBxZChhLGIsYyxkLGUpe2Eudi5hZGQoU3RyaW5nKGIpLGMsITEsZCxlKX1mdW5jdGlvbiB3ZChhLGIsYyxkLGUpe2Eudi5hZGQoU3RyaW5nKGIpLGMsITAsZCxlKX1cbmZ1bmN0aW9uIENkKGEsYixjLGQpe2I9YS52LmFbU3RyaW5nKGIpXTtpZighYilyZXR1cm4hMDtiPWIuY29uY2F0KCk7Zm9yKHZhciBlPSEwLGY9MDtmPGIubGVuZ3RoOysrZil7dmFyIGc9YltmXTtpZihnJiYhZy52YSYmZy5jYXB0dXJlPT1jKXt2YXIgaD1nLmxpc3RlbmVyLG49Zy5VYXx8Zy5zcmM7Zy5PYSYmamQoYS52LGcpO2U9ITEhPT1oLmNhbGwobixkKSYmZX19cmV0dXJuIGUmJiFkLmRlZmF1bHRQcmV2ZW50ZWR9O2Z1bmN0aW9uIERkKGEsYixjKXtpZihvYShhKSljJiYoYT1xKGEsYykpO2Vsc2UgaWYoYSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5oYW5kbGVFdmVudClhPXEoYS5oYW5kbGVFdmVudCxhKTtlbHNlIHRocm93IEVycm9yKFwiSW52YWxpZCBsaXN0ZW5lciBhcmd1bWVudFwiKTtyZXR1cm4gMjE0NzQ4MzY0NzxOdW1iZXIoYik/LTE6bC5zZXRUaW1lb3V0KGEsYnx8MCl9ZnVuY3Rpb24gRWQoYSl7dmFyIGI9bnVsbDtyZXR1cm4obmV3IEQoZnVuY3Rpb24oYyxkKXtiPURkKGZ1bmN0aW9uKCl7Yyh2b2lkIDApfSxhKTstMT09YiYmZChFcnJvcihcIkZhaWxlZCB0byBzY2hlZHVsZSB0aW1lci5cIikpfSkpLnMoZnVuY3Rpb24oYyl7bC5jbGVhclRpbWVvdXQoYik7dGhyb3cgYzt9KX07ZnVuY3Rpb24gRmQoYSl7aWYoYS5WJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLlYpcmV0dXJuIGEuVigpO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5zcGxpdChcIlwiKTtpZihuYShhKSl7Zm9yKHZhciBiPVtdLGM9YS5sZW5ndGgsZD0wO2Q8YztkKyspYi5wdXNoKGFbZF0pO3JldHVybiBifWI9W107Yz0wO2ZvcihkIGluIGEpYltjKytdPWFbZF07cmV0dXJuIGJ9ZnVuY3Rpb24gR2QoYSl7aWYoYS5ZJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLlkpcmV0dXJuIGEuWSgpO2lmKCFhLlZ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGEuVil7aWYobmEoYSl8fFwic3RyaW5nXCI9PT10eXBlb2YgYSl7dmFyIGI9W107YT1hLmxlbmd0aDtmb3IodmFyIGM9MDtjPGE7YysrKWIucHVzaChjKTtyZXR1cm4gYn1iPVtdO2M9MDtmb3IodmFyIGQgaW4gYSliW2MrK109ZDtyZXR1cm4gYn19XG5mdW5jdGlvbiBIZChhLGIpe2lmKGEuZm9yRWFjaCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5mb3JFYWNoKWEuZm9yRWFjaChiLHZvaWQgMCk7ZWxzZSBpZihuYShhKXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhKXcoYSxiLHZvaWQgMCk7ZWxzZSBmb3IodmFyIGM9R2QoYSksZD1GZChhKSxlPWQubGVuZ3RoLGY9MDtmPGU7ZisrKWIuY2FsbCh2b2lkIDAsZFtmXSxjJiZjW2ZdLGEpfTtmdW5jdGlvbiBJZChhLGIpe3RoaXMuYj17fTt0aGlzLmE9W107dGhpcy5jPTA7dmFyIGM9YXJndW1lbnRzLmxlbmd0aDtpZigxPGMpe2lmKGMlMil0aHJvdyBFcnJvcihcIlVuZXZlbiBudW1iZXIgb2YgYXJndW1lbnRzXCIpO2Zvcih2YXIgZD0wO2Q8YztkKz0yKXRoaXMuc2V0KGFyZ3VtZW50c1tkXSxhcmd1bWVudHNbZCsxXSl9ZWxzZSBpZihhKWlmKGEgaW5zdGFuY2VvZiBJZClmb3IoYz1hLlkoKSxkPTA7ZDxjLmxlbmd0aDtkKyspdGhpcy5zZXQoY1tkXSxhLmdldChjW2RdKSk7ZWxzZSBmb3IoZCBpbiBhKXRoaXMuc2V0KGQsYVtkXSl9az1JZC5wcm90b3R5cGU7ay5WPWZ1bmN0aW9uKCl7SmQodGhpcyk7Zm9yKHZhciBhPVtdLGI9MDtiPHRoaXMuYS5sZW5ndGg7YisrKWEucHVzaCh0aGlzLmJbdGhpcy5hW2JdXSk7cmV0dXJuIGF9O2suWT1mdW5jdGlvbigpe0pkKHRoaXMpO3JldHVybiB0aGlzLmEuY29uY2F0KCl9O1xuay5jbGVhcj1mdW5jdGlvbigpe3RoaXMuYj17fTt0aGlzLmM9dGhpcy5hLmxlbmd0aD0wfTtmdW5jdGlvbiBKZChhKXtpZihhLmMhPWEuYS5sZW5ndGgpe2Zvcih2YXIgYj0wLGM9MDtiPGEuYS5sZW5ndGg7KXt2YXIgZD1hLmFbYl07S2QoYS5iLGQpJiYoYS5hW2MrK109ZCk7YisrfWEuYS5sZW5ndGg9Y31pZihhLmMhPWEuYS5sZW5ndGgpe3ZhciBlPXt9O2ZvcihjPWI9MDtiPGEuYS5sZW5ndGg7KWQ9YS5hW2JdLEtkKGUsZCl8fChhLmFbYysrXT1kLGVbZF09MSksYisrO2EuYS5sZW5ndGg9Y319ay5nZXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gS2QodGhpcy5iLGEpP3RoaXMuYlthXTpifTtrLnNldD1mdW5jdGlvbihhLGIpe0tkKHRoaXMuYixhKXx8KHRoaXMuYysrLHRoaXMuYS5wdXNoKGEpKTt0aGlzLmJbYV09Yn07XG5rLmZvckVhY2g9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5ZKCksZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9dGhpcy5nZXQoZSk7YS5jYWxsKGIsZixlLHRoaXMpfX07ZnVuY3Rpb24gS2QoYSxiKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsYil9O3ZhciBMZD0vXig/OihbXjovPyMuXSspOik/KD86XFwvXFwvKD86KFteXFxcXC8/I10qKUApPyhbXlxcXFwvPyNdKj8pKD86OihbMC05XSspKT8oPz1bXFxcXC8/I118JCkpPyhbXj8jXSspPyg/OlxcPyhbXiNdKikpPyg/OiMoW1xcc1xcU10qKSk/JC87ZnVuY3Rpb24gTWQoYSxiKXtpZihhKXthPWEuc3BsaXQoXCImXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLmluZGV4T2YoXCI9XCIpLGU9bnVsbDtpZigwPD1kKXt2YXIgZj1hW2NdLnN1YnN0cmluZygwLGQpO2U9YVtjXS5zdWJzdHJpbmcoZCsxKX1lbHNlIGY9YVtjXTtiKGYsZT9kZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpOlwiXCIpfX19O2Z1bmN0aW9uIE5kKGEsYil7dGhpcy5hPXRoaXMubD10aGlzLmY9XCJcIjt0aGlzLmc9bnVsbDt0aGlzLmg9dGhpcy5jPVwiXCI7dGhpcy5pPSExO3ZhciBjO2EgaW5zdGFuY2VvZiBOZD8odGhpcy5pPXZvaWQgMCE9PWI/YjphLmksT2QodGhpcyxhLmYpLHRoaXMubD1hLmwsdGhpcy5hPWEuYSxQZCh0aGlzLGEuZyksdGhpcy5jPWEuYyxRZCh0aGlzLFJkKGEuYikpLHRoaXMuaD1hLmgpOmEmJihjPVN0cmluZyhhKS5tYXRjaChMZCkpPyh0aGlzLmk9ISFiLE9kKHRoaXMsY1sxXXx8XCJcIiwhMCksdGhpcy5sPVNkKGNbMl18fFwiXCIpLHRoaXMuYT1TZChjWzNdfHxcIlwiLCEwKSxQZCh0aGlzLGNbNF0pLHRoaXMuYz1TZChjWzVdfHxcIlwiLCEwKSxRZCh0aGlzLGNbNl18fFwiXCIsITApLHRoaXMuaD1TZChjWzddfHxcIlwiKSk6KHRoaXMuaT0hIWIsdGhpcy5iPW5ldyBUZChudWxsLHRoaXMuaSkpfVxuTmQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9W10sYj10aGlzLmY7YiYmYS5wdXNoKFVkKGIsVmQsITApLFwiOlwiKTt2YXIgYz10aGlzLmE7aWYoY3x8XCJmaWxlXCI9PWIpYS5wdXNoKFwiLy9cIiksKGI9dGhpcy5sKSYmYS5wdXNoKFVkKGIsVmQsITApLFwiQFwiKSxhLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjKSkucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLFwiJSQxXCIpKSxjPXRoaXMuZyxudWxsIT1jJiZhLnB1c2goXCI6XCIsU3RyaW5nKGMpKTtpZihjPXRoaXMuYyl0aGlzLmEmJlwiL1wiIT1jLmNoYXJBdCgwKSYmYS5wdXNoKFwiL1wiKSxhLnB1c2goVWQoYyxcIi9cIj09Yy5jaGFyQXQoMCk/V2Q6WGQsITApKTsoYz10aGlzLmIudG9TdHJpbmcoKSkmJmEucHVzaChcIj9cIixjKTsoYz10aGlzLmgpJiZhLnB1c2goXCIjXCIsVWQoYyxZZCkpO3JldHVybiBhLmpvaW4oXCJcIil9O1xuTmQucHJvdG90eXBlLnJlc29sdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IE5kKHRoaXMpLGM9ISFhLmY7Yz9PZChiLGEuZik6Yz0hIWEubDtjP2IubD1hLmw6Yz0hIWEuYTtjP2IuYT1hLmE6Yz1udWxsIT1hLmc7dmFyIGQ9YS5jO2lmKGMpUGQoYixhLmcpO2Vsc2UgaWYoYz0hIWEuYyl7aWYoXCIvXCIhPWQuY2hhckF0KDApKWlmKHRoaXMuYSYmIXRoaXMuYylkPVwiL1wiK2Q7ZWxzZXt2YXIgZT1iLmMubGFzdEluZGV4T2YoXCIvXCIpOy0xIT1lJiYoZD1iLmMuc3Vic3RyKDAsZSsxKStkKX1lPWQ7aWYoXCIuLlwiPT1lfHxcIi5cIj09ZSlkPVwiXCI7ZWxzZSBpZih4KGUsXCIuL1wiKXx8eChlLFwiLy5cIikpe2Q9MD09ZS5sYXN0SW5kZXhPZihcIi9cIiwwKTtlPWUuc3BsaXQoXCIvXCIpO2Zvcih2YXIgZj1bXSxnPTA7ZzxlLmxlbmd0aDspe3ZhciBoPWVbZysrXTtcIi5cIj09aD9kJiZnPT1lLmxlbmd0aCYmZi5wdXNoKFwiXCIpOlwiLi5cIj09aD8oKDE8Zi5sZW5ndGh8fDE9PWYubGVuZ3RoJiZcIlwiIT1mWzBdKSYmZi5wb3AoKSxcbmQmJmc9PWUubGVuZ3RoJiZmLnB1c2goXCJcIikpOihmLnB1c2goaCksZD0hMCl9ZD1mLmpvaW4oXCIvXCIpfWVsc2UgZD1lfWM/Yi5jPWQ6Yz1cIlwiIT09YS5iLnRvU3RyaW5nKCk7Yz9RZChiLFJkKGEuYikpOmM9ISFhLmg7YyYmKGIuaD1hLmgpO3JldHVybiBifTtmdW5jdGlvbiBPZChhLGIsYyl7YS5mPWM/U2QoYiwhMCk6YjthLmYmJihhLmY9YS5mLnJlcGxhY2UoLzokLyxcIlwiKSl9ZnVuY3Rpb24gUGQoYSxiKXtpZihiKXtiPU51bWJlcihiKTtpZihpc05hTihiKXx8MD5iKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2IpO2EuZz1ifWVsc2UgYS5nPW51bGx9ZnVuY3Rpb24gUWQoYSxiLGMpe2IgaW5zdGFuY2VvZiBUZD8oYS5iPWIsWmQoYS5iLGEuaSkpOihjfHwoYj1VZChiLCRkKSksYS5iPW5ldyBUZChiLGEuaSkpfWZ1bmN0aW9uIEooYSxiLGMpe2EuYi5zZXQoYixjKX1mdW5jdGlvbiBhZShhLGIpe3JldHVybiBhLmIuZ2V0KGIpfVxuZnVuY3Rpb24gYmUoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBOZD9uZXcgTmQoYSk6bmV3IE5kKGEsdm9pZCAwKX1mdW5jdGlvbiBjZShhLGIsYyxkKXt2YXIgZT1uZXcgTmQobnVsbCx2b2lkIDApO2EmJk9kKGUsYSk7YiYmKGUuYT1iKTtjJiZQZChlLGMpO2QmJihlLmM9ZCk7cmV0dXJuIGV9ZnVuY3Rpb24gU2QoYSxiKXtyZXR1cm4gYT9iP2RlY29kZVVSSShhLnJlcGxhY2UoLyUyNS9nLFwiJTI1MjVcIikpOmRlY29kZVVSSUNvbXBvbmVudChhKTpcIlwifWZ1bmN0aW9uIFVkKGEsYixjKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGE/KGE9ZW5jb2RlVVJJKGEpLnJlcGxhY2UoYixkZSksYyYmKGE9YS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csXCIlJDFcIikpLGEpOm51bGx9ZnVuY3Rpb24gZGUoYSl7YT1hLmNoYXJDb2RlQXQoMCk7cmV0dXJuXCIlXCIrKGE+PjQmMTUpLnRvU3RyaW5nKDE2KSsoYSYxNSkudG9TdHJpbmcoMTYpfVxudmFyIFZkPS9bI1xcL1xcP0BdL2csWGQ9L1sjXFw/Ol0vZyxXZD0vWyNcXD9dL2csJGQ9L1sjXFw/QF0vZyxZZD0vIy9nO2Z1bmN0aW9uIFRkKGEsYil7dGhpcy5iPXRoaXMuYT1udWxsO3RoaXMuYz1hfHxudWxsO3RoaXMuZj0hIWJ9ZnVuY3Rpb24gZWUoYSl7YS5hfHwoYS5hPW5ldyBJZCxhLmI9MCxhLmMmJk1kKGEuYyxmdW5jdGlvbihiLGMpe2EuYWRkKGRlY29kZVVSSUNvbXBvbmVudChiLnJlcGxhY2UoL1xcKy9nLFwiIFwiKSksYyl9KSl9ZnVuY3Rpb24gZmUoYSl7dmFyIGI9R2QoYSk7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGIpdGhyb3cgRXJyb3IoXCJLZXlzIGFyZSB1bmRlZmluZWRcIik7dmFyIGM9bmV3IFRkKG51bGwsdm9pZCAwKTthPUZkKGEpO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdLGY9YVtkXTtBcnJheS5pc0FycmF5KGYpP2dlKGMsZSxmKTpjLmFkZChlLGYpfXJldHVybiBjfWs9VGQucHJvdG90eXBlO1xuay5hZGQ9ZnVuY3Rpb24oYSxiKXtlZSh0aGlzKTt0aGlzLmM9bnVsbDthPWhlKHRoaXMsYSk7dmFyIGM9dGhpcy5hLmdldChhKTtjfHx0aGlzLmEuc2V0KGEsYz1bXSk7Yy5wdXNoKGIpO3RoaXMuYis9MTtyZXR1cm4gdGhpc307ZnVuY3Rpb24gaWUoYSxiKXtlZShhKTtiPWhlKGEsYik7S2QoYS5hLmIsYikmJihhLmM9bnVsbCxhLmItPWEuYS5nZXQoYikubGVuZ3RoLGE9YS5hLEtkKGEuYixiKSYmKGRlbGV0ZSBhLmJbYl0sYS5jLS0sYS5hLmxlbmd0aD4yKmEuYyYmSmQoYSkpKX1rLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5hPXRoaXMuYz1udWxsO3RoaXMuYj0wfTtmdW5jdGlvbiBqZShhLGIpe2VlKGEpO2I9aGUoYSxiKTtyZXR1cm4gS2QoYS5hLmIsYil9ay5mb3JFYWNoPWZ1bmN0aW9uKGEsYil7ZWUodGhpcyk7dGhpcy5hLmZvckVhY2goZnVuY3Rpb24oYyxkKXt3KGMsZnVuY3Rpb24oZSl7YS5jYWxsKGIsZSxkLHRoaXMpfSx0aGlzKX0sdGhpcyl9O1xuay5ZPWZ1bmN0aW9uKCl7ZWUodGhpcyk7Zm9yKHZhciBhPXRoaXMuYS5WKCksYj10aGlzLmEuWSgpLGM9W10sZD0wO2Q8Yi5sZW5ndGg7ZCsrKWZvcih2YXIgZT1hW2RdLGY9MDtmPGUubGVuZ3RoO2YrKyljLnB1c2goYltkXSk7cmV0dXJuIGN9O2suVj1mdW5jdGlvbihhKXtlZSh0aGlzKTt2YXIgYj1bXTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpamUodGhpcyxhKSYmKGI9WWEoYix0aGlzLmEuZ2V0KGhlKHRoaXMsYSkpKSk7ZWxzZXthPXRoaXMuYS5WKCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspYj1ZYShiLGFbY10pfXJldHVybiBifTtrLnNldD1mdW5jdGlvbihhLGIpe2VlKHRoaXMpO3RoaXMuYz1udWxsO2E9aGUodGhpcyxhKTtqZSh0aGlzLGEpJiYodGhpcy5iLT10aGlzLmEuZ2V0KGEpLmxlbmd0aCk7dGhpcy5hLnNldChhLFtiXSk7dGhpcy5iKz0xO3JldHVybiB0aGlzfTtcbmsuZ2V0PWZ1bmN0aW9uKGEsYil7aWYoIWEpcmV0dXJuIGI7YT10aGlzLlYoYSk7cmV0dXJuIDA8YS5sZW5ndGg/U3RyaW5nKGFbMF0pOmJ9O2Z1bmN0aW9uIGdlKGEsYixjKXtpZShhLGIpOzA8Yy5sZW5ndGgmJihhLmM9bnVsbCxhLmEuc2V0KGhlKGEsYiksWmEoYykpLGEuYis9Yy5sZW5ndGgpfWsudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLmMpcmV0dXJuIHRoaXMuYztpZighdGhpcy5hKXJldHVyblwiXCI7Zm9yKHZhciBhPVtdLGI9dGhpcy5hLlkoKSxjPTA7YzxiLmxlbmd0aDtjKyspe3ZhciBkPWJbY10sZT1lbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGQpKTtkPXRoaXMuVihkKTtmb3IodmFyIGY9MDtmPGQubGVuZ3RoO2YrKyl7dmFyIGc9ZTtcIlwiIT09ZFtmXSYmKGcrPVwiPVwiK2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZFtmXSkpKTthLnB1c2goZyl9fXJldHVybiB0aGlzLmM9YS5qb2luKFwiJlwiKX07XG5mdW5jdGlvbiBSZChhKXt2YXIgYj1uZXcgVGQ7Yi5jPWEuYzthLmEmJihiLmE9bmV3IElkKGEuYSksYi5iPWEuYik7cmV0dXJuIGJ9ZnVuY3Rpb24gaGUoYSxiKXtiPVN0cmluZyhiKTthLmYmJihiPWIudG9Mb3dlckNhc2UoKSk7cmV0dXJuIGJ9ZnVuY3Rpb24gWmQoYSxiKXtiJiYhYS5mJiYoZWUoYSksYS5jPW51bGwsYS5hLmZvckVhY2goZnVuY3Rpb24oYyxkKXt2YXIgZT1kLnRvTG93ZXJDYXNlKCk7ZCE9ZSYmKGllKHRoaXMsZCksZ2UodGhpcyxlLGMpKX0sYSkpO2EuZj1ifTtmdW5jdGlvbiBrZShhKXt2YXIgYj1bXTtsZShuZXcgbWUsYSxiKTtyZXR1cm4gYi5qb2luKFwiXCIpfWZ1bmN0aW9uIG1lKCl7fVxuZnVuY3Rpb24gbGUoYSxiLGMpe2lmKG51bGw9PWIpYy5wdXNoKFwibnVsbFwiKTtlbHNle2lmKFwib2JqZWN0XCI9PXR5cGVvZiBiKXtpZihBcnJheS5pc0FycmF5KGIpKXt2YXIgZD1iO2I9ZC5sZW5ndGg7Yy5wdXNoKFwiW1wiKTtmb3IodmFyIGU9XCJcIixmPTA7ZjxiO2YrKyljLnB1c2goZSksbGUoYSxkW2ZdLGMpLGU9XCIsXCI7Yy5wdXNoKFwiXVwiKTtyZXR1cm59aWYoYiBpbnN0YW5jZW9mIFN0cmluZ3x8YiBpbnN0YW5jZW9mIE51bWJlcnx8YiBpbnN0YW5jZW9mIEJvb2xlYW4pYj1iLnZhbHVlT2YoKTtlbHNle2MucHVzaChcIntcIik7ZT1cIlwiO2ZvcihkIGluIGIpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsZCkmJihmPWJbZF0sXCJmdW5jdGlvblwiIT10eXBlb2YgZiYmKGMucHVzaChlKSxuZShkLGMpLGMucHVzaChcIjpcIiksbGUoYSxmLGMpLGU9XCIsXCIpKTtjLnB1c2goXCJ9XCIpO3JldHVybn19c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwic3RyaW5nXCI6bmUoYixjKTticmVhaztjYXNlIFwibnVtYmVyXCI6Yy5wdXNoKGlzRmluaXRlKGIpJiZcbiFpc05hTihiKT9TdHJpbmcoYik6XCJudWxsXCIpO2JyZWFrO2Nhc2UgXCJib29sZWFuXCI6Yy5wdXNoKFN0cmluZyhiKSk7YnJlYWs7Y2FzZSBcImZ1bmN0aW9uXCI6Yy5wdXNoKFwibnVsbFwiKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiVW5rbm93biB0eXBlOiBcIit0eXBlb2YgYik7fX19dmFyIG9lPXsnXCInOidcXFxcXCInLFwiXFxcXFwiOlwiXFxcXFxcXFxcIixcIi9cIjpcIlxcXFwvXCIsXCJcXGJcIjpcIlxcXFxiXCIsXCJcXGZcIjpcIlxcXFxmXCIsXCJcXG5cIjpcIlxcXFxuXCIsXCJcXHJcIjpcIlxcXFxyXCIsXCJcXHRcIjpcIlxcXFx0XCIsXCJcXHgwQlwiOlwiXFxcXHUwMDBiXCJ9LHBlPS9cXHVmZmZmLy50ZXN0KFwiXFx1ZmZmZlwiKT8vW1xcXFxcIlxceDAwLVxceDFmXFx4N2YtXFx1ZmZmZl0vZzovW1xcXFxcIlxceDAwLVxceDFmXFx4N2YtXFx4ZmZdL2c7XG5mdW5jdGlvbiBuZShhLGIpe2IucHVzaCgnXCInLGEucmVwbGFjZShwZSxmdW5jdGlvbihjKXt2YXIgZD1vZVtjXTtkfHwoZD1cIlxcXFx1XCIrKGMuY2hhckNvZGVBdCgwKXw2NTUzNikudG9TdHJpbmcoMTYpLnN1YnN0cigxKSxvZVtjXT1kKTtyZXR1cm4gZH0pLCdcIicpfTtmdW5jdGlvbiBxZSgpe3ZhciBhPUsoKTtyZXR1cm4gV2ImJiEhaWMmJjExPT1pY3x8L0VkZ2VcXC9cXGQrLy50ZXN0KGEpfWZ1bmN0aW9uIHJlKCl7cmV0dXJuIGwud2luZG93JiZsLndpbmRvdy5sb2NhdGlvbi5ocmVmfHxzZWxmJiZzZWxmLmxvY2F0aW9uJiZzZWxmLmxvY2F0aW9uLmhyZWZ8fFwiXCJ9ZnVuY3Rpb24gc2UoYSxiKXtiPWJ8fGwud2luZG93O3ZhciBjPVwiYWJvdXQ6YmxhbmtcIjthJiYoYz1FYihJYihhKXx8S2IpKTtiLmxvY2F0aW9uLmhyZWY9Y31mdW5jdGlvbiB0ZShhLGIpe3ZhciBjPVtdLGQ7Zm9yKGQgaW4gYSlkIGluIGI/dHlwZW9mIGFbZF0hPXR5cGVvZiBiW2RdP2MucHVzaChkKTpcIm9iamVjdFwiPT10eXBlb2YgYVtkXSYmbnVsbCE9YVtkXSYmbnVsbCE9YltkXT8wPHRlKGFbZF0sYltkXSkubGVuZ3RoJiZjLnB1c2goZCk6YVtkXSE9PWJbZF0mJmMucHVzaChkKTpjLnB1c2goZCk7Zm9yKGQgaW4gYilkIGluIGF8fGMucHVzaChkKTtyZXR1cm4gY31cbmZ1bmN0aW9uIHVlKCl7dmFyIGE9SygpO2E9dmUoYSkhPXdlP251bGw6KGE9YS5tYXRjaCgvXFxzQ2hyb21lXFwvKFxcZCspL2kpKSYmMj09YS5sZW5ndGg/cGFyc2VJbnQoYVsxXSwxMCk6bnVsbDtyZXR1cm4gYSYmMzA+YT8hMTohV2J8fCFpY3x8OTxpY31mdW5jdGlvbiB4ZShhKXthPShhfHxLKCkpLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGEubWF0Y2goL2FuZHJvaWQvKXx8YS5tYXRjaCgvd2Vib3MvKXx8YS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pfHxhLm1hdGNoKC9ibGFja2JlcnJ5Lyl8fGEubWF0Y2goL3dpbmRvd3MgcGhvbmUvKXx8YS5tYXRjaCgvaWVtb2JpbGUvKT8hMDohMX1mdW5jdGlvbiB5ZShhKXthPWF8fGwud2luZG93O3RyeXthLmNsb3NlKCl9Y2F0Y2goYil7fX1cbmZ1bmN0aW9uIHplKGEsYixjKXt2YXIgZD1NYXRoLmZsb29yKDFFOSpNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpO2I9Ynx8NTAwO2M9Y3x8NjAwO3ZhciBlPSh3aW5kb3cuc2NyZWVuLmF2YWlsSGVpZ2h0LWMpLzIsZj0od2luZG93LnNjcmVlbi5hdmFpbFdpZHRoLWIpLzI7Yj17d2lkdGg6YixoZWlnaHQ6Yyx0b3A6MDxlP2U6MCxsZWZ0OjA8Zj9mOjAsbG9jYXRpb246ITAscmVzaXphYmxlOiEwLHN0YXR1c2JhcjohMCx0b29sYmFyOiExfTtjPUsoKS50b0xvd2VyQ2FzZSgpO2QmJihiLnRhcmdldD1kLHgoYyxcImNyaW9zL1wiKSYmKGIudGFyZ2V0PVwiX2JsYW5rXCIpKTt2ZShLKCkpPT1BZSYmKGE9YXx8XCJodHRwOi8vbG9jYWxob3N0XCIsYi5zY3JvbGxiYXJzPSEwKTtjPWF8fFwiXCI7KGE9Yil8fChhPXt9KTtkPXdpbmRvdztiPWMgaW5zdGFuY2VvZiBDP2M6SWIoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGMuaHJlZj9jLmhyZWY6U3RyaW5nKGMpKXx8S2I7Yz1hLnRhcmdldHx8Yy50YXJnZXQ7ZT1cbltdO2ZvcihnIGluIGEpc3dpdGNoKGcpe2Nhc2UgXCJ3aWR0aFwiOmNhc2UgXCJoZWlnaHRcIjpjYXNlIFwidG9wXCI6Y2FzZSBcImxlZnRcIjplLnB1c2goZytcIj1cIithW2ddKTticmVhaztjYXNlIFwidGFyZ2V0XCI6Y2FzZSBcIm5vb3BlbmVyXCI6Y2FzZSBcIm5vcmVmZXJyZXJcIjpicmVhaztkZWZhdWx0OmUucHVzaChnK1wiPVwiKyhhW2ddPzE6MCkpfXZhciBnPWUuam9pbihcIixcIik7aWYoKHkoXCJpUGhvbmVcIikmJiF5KFwiaVBvZFwiKSYmIXkoXCJpUGFkXCIpfHx5KFwiaVBhZFwiKXx8eShcImlQb2RcIikpJiZkLm5hdmlnYXRvciYmZC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSYmYyYmXCJfc2VsZlwiIT1jKWc9b2MoZG9jdW1lbnQsXCJBXCIpLHBiKGcsXCJIVE1MQW5jaG9yRWxlbWVudFwiKSxiPWIgaW5zdGFuY2VvZiBDP2I6SmIoYiksZy5ocmVmPUViKGIpLGcuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsYyksYS5ub3JlZmVycmVyJiZnLnNldEF0dHJpYnV0ZShcInJlbFwiLFwibm9yZWZlcnJlclwiKSxhPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudFwiKSxcbmEuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLGQsMSksZy5kaXNwYXRjaEV2ZW50KGEpLGc9e307ZWxzZSBpZihhLm5vcmVmZXJyZXIpe2lmKGc9UGIoXCJcIixkLGMsZyksYT1FYihiKSxnJiYoWWImJngoYSxcIjtcIikmJihhPVwiJ1wiK2EucmVwbGFjZSgvJy9nLFwiJTI3XCIpK1wiJ1wiKSxnLm9wZW5lcj1udWxsLGE9JzxtZXRhIG5hbWU9XCJyZWZlcnJlclwiIGNvbnRlbnQ9XCJuby1yZWZlcnJlclwiPjxtZXRhIGh0dHAtZXF1aXY9XCJyZWZyZXNoXCIgY29udGVudD1cIjA7IHVybD0nK1JiKGEpKydcIj4nLGE9KGQ9dmIoKSk/ZC5jcmVhdGVIVE1MKGEpOmEsYT1uZXcgTGIoYSxudWxsLE1iKSxkPWcuZG9jdW1lbnQpKWQud3JpdGUoTmIoYSkpLGQuY2xvc2UoKX1lbHNlKGc9UGIoYixkLGMsZykpJiZhLm5vb3BlbmVyJiYoZy5vcGVuZXI9bnVsbCk7aWYoZyl0cnl7Zy5mb2N1cygpfWNhdGNoKGgpe31yZXR1cm4gZ31cbmZ1bmN0aW9uIEJlKGEpe3JldHVybiBuZXcgRChmdW5jdGlvbihiKXtmdW5jdGlvbiBjKCl7RWQoMkUzKS50aGVuKGZ1bmN0aW9uKCl7aWYoIWF8fGEuY2xvc2VkKWIoKTtlbHNlIHJldHVybiBjKCl9KX1yZXR1cm4gYygpfSl9dmFyIENlPS9eXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30kLyxEZT0vXlteQF0rQFteQF0rJC87ZnVuY3Rpb24gRWUoKXt2YXIgYT1udWxsO3JldHVybihuZXcgRChmdW5jdGlvbihiKXtcImNvbXBsZXRlXCI9PWwuZG9jdW1lbnQucmVhZHlTdGF0ZT9iKCk6KGE9ZnVuY3Rpb24oKXtiKCl9LG9kKHdpbmRvdyxcImxvYWRcIixhKSl9KSkucyhmdW5jdGlvbihiKXtIKHdpbmRvdyxcImxvYWRcIixhKTt0aHJvdyBiO30pfVxuZnVuY3Rpb24gRmUoKXtyZXR1cm4gR2Uodm9pZCAwKT9FZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYSxiKXt2YXIgYz1sLmRvY3VtZW50LGQ9c2V0VGltZW91dChmdW5jdGlvbigpe2IoRXJyb3IoXCJDb3Jkb3ZhIGZyYW1ld29yayBpcyBub3QgcmVhZHkuXCIpKX0sMUUzKTtjLmFkZEV2ZW50TGlzdGVuZXIoXCJkZXZpY2VyZWFkeVwiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGQpO2EoKX0sITEpfSl9KTpGKEVycm9yKFwiQ29yZG92YSBtdXN0IHJ1biBpbiBhbiBBbmRyb2lkIG9yIGlPUyBmaWxlIHNjaGVtZS5cIikpfWZ1bmN0aW9uIEdlKGEpe2E9YXx8SygpO3JldHVybiEoXCJmaWxlOlwiIT09SGUoKSYmXCJpb25pYzpcIiE9PUhlKCl8fCFhLnRvTG93ZXJDYXNlKCkubWF0Y2goL2lwaG9uZXxpcGFkfGlwb2R8YW5kcm9pZC8pKX1mdW5jdGlvbiBJZSgpe3ZhciBhPWwud2luZG93O3RyeXtyZXR1cm4hKCFhfHxhPT1hLnRvcCl9Y2F0Y2goYil7cmV0dXJuITF9fVxuZnVuY3Rpb24gSmUoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGwuV29ya2VyR2xvYmFsU2NvcGUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsLmltcG9ydFNjcmlwdHN9ZnVuY3Rpb24gS2UoKXtyZXR1cm4gZmlyZWJhc2UuSU5URVJOQUwuaGFzT3duUHJvcGVydHkoXCJyZWFjdE5hdGl2ZVwiKT9cIlJlYWN0TmF0aXZlXCI6ZmlyZWJhc2UuSU5URVJOQUwuaGFzT3duUHJvcGVydHkoXCJub2RlXCIpP1wiTm9kZVwiOkplKCk/XCJXb3JrZXJcIjpcIkJyb3dzZXJcIn1mdW5jdGlvbiBMZSgpe3ZhciBhPUtlKCk7cmV0dXJuXCJSZWFjdE5hdGl2ZVwiPT09YXx8XCJOb2RlXCI9PT1hfWZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPTUwLGI9W107MDxhOyliLnB1c2goXCIxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiLmNoYXJBdChNYXRoLmZsb29yKDYyKk1hdGgucmFuZG9tKCkpKSksYS0tO3JldHVybiBiLmpvaW4oXCJcIil9XG52YXIgQWU9XCJGaXJlZm94XCIsd2U9XCJDaHJvbWVcIjtcbmZ1bmN0aW9uIHZlKGEpe3ZhciBiPWEudG9Mb3dlckNhc2UoKTtpZih4KGIsXCJvcGVyYS9cIil8fHgoYixcIm9wci9cIil8fHgoYixcIm9waW9zL1wiKSlyZXR1cm5cIk9wZXJhXCI7aWYoeChiLFwiaWVtb2JpbGVcIikpcmV0dXJuXCJJRU1vYmlsZVwiO2lmKHgoYixcIm1zaWVcIil8fHgoYixcInRyaWRlbnQvXCIpKXJldHVyblwiSUVcIjtpZih4KGIsXCJlZGdlL1wiKSlyZXR1cm5cIkVkZ2VcIjtpZih4KGIsXCJmaXJlZm94L1wiKSlyZXR1cm4gQWU7aWYoeChiLFwic2lsay9cIikpcmV0dXJuXCJTaWxrXCI7aWYoeChiLFwiYmxhY2tiZXJyeVwiKSlyZXR1cm5cIkJsYWNrYmVycnlcIjtpZih4KGIsXCJ3ZWJvc1wiKSlyZXR1cm5cIldlYm9zXCI7aWYoIXgoYixcInNhZmFyaS9cIil8fHgoYixcImNocm9tZS9cIil8fHgoYixcImNyaW9zL1wiKXx8eChiLFwiYW5kcm9pZFwiKSlpZigheChiLFwiY2hyb21lL1wiKSYmIXgoYixcImNyaW9zL1wiKXx8eChiLFwiZWRnZS9cIikpe2lmKHgoYixcImFuZHJvaWRcIikpcmV0dXJuXCJBbmRyb2lkXCI7aWYoKGE9YS5tYXRjaCgvKFthLXpBLVpcXGRcXC5dKylcXC9bYS16QS1aXFxkXFwuXSokLykpJiZcbjI9PWEubGVuZ3RoKXJldHVybiBhWzFdfWVsc2UgcmV0dXJuIHdlO2Vsc2UgcmV0dXJuXCJTYWZhcmlcIjtyZXR1cm5cIk90aGVyXCJ9dmFyIE5lPXtsZDpcIkZpcmViYXNlQ29yZS13ZWJcIixuZDpcIkZpcmViYXNlVUktd2ViXCJ9O2Z1bmN0aW9uIE9lKGEsYil7Yj1ifHxbXTt2YXIgYz1bXSxkPXt9LGU7Zm9yKGUgaW4gTmUpZFtOZVtlXV09ITA7Zm9yKGU9MDtlPGIubGVuZ3RoO2UrKylcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRbYltlXV0mJihkZWxldGUgZFtiW2VdXSxjLnB1c2goYltlXSkpO2Muc29ydCgpO2I9YztiLmxlbmd0aHx8KGI9W1wiRmlyZWJhc2VDb3JlLXdlYlwiXSk7Yz1LZSgpO1wiQnJvd3NlclwiPT09Yz8oZD1LKCksYz12ZShkKSk6XCJXb3JrZXJcIj09PWMmJihkPUsoKSxjPXZlKGQpK1wiLVwiK2MpO3JldHVybiBjK1wiL0pzQ29yZS9cIithK1wiL1wiK2Iuam9pbihcIixcIil9ZnVuY3Rpb24gSygpe3JldHVybiBsLm5hdmlnYXRvciYmbC5uYXZpZ2F0b3IudXNlckFnZW50fHxcIlwifVxuZnVuY3Rpb24gTChhLGIpe2E9YS5zcGxpdChcIi5cIik7Yj1ifHxsO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGgmJlwib2JqZWN0XCI9PXR5cGVvZiBiJiZudWxsIT1iO2MrKyliPWJbYVtjXV07YyE9YS5sZW5ndGgmJihiPXZvaWQgMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gUGUoKXt0cnl7dmFyIGE9bC5sb2NhbFN0b3JhZ2UsYj1RZSgpO2lmKGEpcmV0dXJuIGEuc2V0SXRlbShiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oYikscWUoKT8hIWwuaW5kZXhlZERCOiEwfWNhdGNoKGMpe3JldHVybiBKZSgpJiYhIWwuaW5kZXhlZERCfXJldHVybiExfWZ1bmN0aW9uIFJlKCl7cmV0dXJuKFNlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PUhlKCl8fEdlKCkpJiYhTGUoKSYmUGUoKSYmIUplKCl9ZnVuY3Rpb24gU2UoKXtyZXR1cm5cImh0dHA6XCI9PT1IZSgpfHxcImh0dHBzOlwiPT09SGUoKX1mdW5jdGlvbiBIZSgpe3JldHVybiBsLmxvY2F0aW9uJiZsLmxvY2F0aW9uLnByb3RvY29sfHxudWxsfVxuZnVuY3Rpb24gVGUoYSl7YT1hfHxLKCk7cmV0dXJuIHhlKGEpfHx2ZShhKT09QWU/ITE6ITB9ZnVuY3Rpb24gVWUoYSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP251bGw6a2UoYSl9ZnVuY3Rpb24gVmUoYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPT1hW2NdJiZ2b2lkIDAhPT1hW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1mdW5jdGlvbiBXZShhKXtpZihudWxsIT09YSlyZXR1cm4gSlNPTi5wYXJzZShhKX1mdW5jdGlvbiBRZShhKXtyZXR1cm4gYT9hOk1hdGguZmxvb3IoMUU5Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCl9ZnVuY3Rpb24gWGUoYSl7YT1hfHxLKCk7cmV0dXJuXCJTYWZhcmlcIj09dmUoYSl8fGEudG9Mb3dlckNhc2UoKS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pPyExOiEwfVxuZnVuY3Rpb24gWWUoKXt2YXIgYT1sLl9fX2pzbDtpZihhJiZhLkgpZm9yKHZhciBiIGluIGEuSClpZihhLkhbYl0ucj1hLkhbYl0ucnx8W10sYS5IW2JdLkw9YS5IW2JdLkx8fFtdLGEuSFtiXS5yPWEuSFtiXS5MLmNvbmNhdCgpLGEuQ1ApZm9yKHZhciBjPTA7YzxhLkNQLmxlbmd0aDtjKyspYS5DUFtjXT1udWxsfWZ1bmN0aW9uIFplKGEsYil7aWYoYT5iKXRocm93IEVycm9yKFwiU2hvcnQgZGVsYXkgc2hvdWxkIGJlIGxlc3MgdGhhbiBsb25nIGRlbGF5IVwiKTt0aGlzLmE9YTt0aGlzLmM9YjthPUsoKTtiPUtlKCk7dGhpcy5iPXhlKGEpfHxcIlJlYWN0TmF0aXZlXCI9PT1ifVxuWmUucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe3ZhciBhPWwubmF2aWdhdG9yO3JldHVybihhJiZcImJvb2xlYW5cIj09PXR5cGVvZiBhLm9uTGluZSYmKFNlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PUhlKCl8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYS5jb25uZWN0aW9uKT9hLm9uTGluZToxKT90aGlzLmI/dGhpcy5jOnRoaXMuYTpNYXRoLm1pbig1RTMsdGhpcy5hKX07ZnVuY3Rpb24gJGUoKXt2YXIgYT1sLmRvY3VtZW50O3JldHVybiBhJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEudmlzaWJpbGl0eVN0YXRlP1widmlzaWJsZVwiPT1hLnZpc2liaWxpdHlTdGF0ZTohMH1cbmZ1bmN0aW9uIGFmKCl7dmFyIGE9bC5kb2N1bWVudCxiPW51bGw7cmV0dXJuICRlKCl8fCFhP0UoKToobmV3IEQoZnVuY3Rpb24oYyl7Yj1mdW5jdGlvbigpeyRlKCkmJihhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYiwhMSksYygpKX07YS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpfSkpLnMoZnVuY3Rpb24oYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpO3Rocm93IGM7fSl9ZnVuY3Rpb24gYmYoYSl7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oYSl9XG5mdW5jdGlvbiBjZihhKXt0cnl7dmFyIGI9bmV3IERhdGUocGFyc2VJbnQoYSwxMCkpO2lmKCFpc05hTihiLmdldFRpbWUoKSkmJiEvW14wLTldLy50ZXN0KGEpKXJldHVybiBiLnRvVVRDU3RyaW5nKCl9Y2F0Y2goYyl7fXJldHVybiBudWxsfWZ1bmN0aW9uIGRmKCl7cmV0dXJuISghTChcImZpcmVhdXRoLm9hdXRoaGVscGVyXCIsbCkmJiFMKFwiZmlyZWF1dGguaWZyYW1lXCIsbCkpfWZ1bmN0aW9uIGVmKCl7dmFyIGE9bC5uYXZpZ2F0b3I7cmV0dXJuIGEmJmEuc2VydmljZVdvcmtlciYmYS5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXJ8fG51bGx9ZnVuY3Rpb24gZmYoKXt2YXIgYT1sLm5hdmlnYXRvcjtyZXR1cm4gYSYmYS5zZXJ2aWNlV29ya2VyP0UoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuc2VydmljZVdvcmtlci5yZWFkeX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGIuYWN0aXZlfHxudWxsfSkucyhmdW5jdGlvbigpe3JldHVybiBudWxsfSk6RShudWxsKX07dmFyIGdmPXt9O2Z1bmN0aW9uIGhmKGEpe2dmW2FdfHwoZ2ZbYV09ITAsYmYoYSkpfTt2YXIgamY7dHJ5e3ZhciBrZj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoa2YsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjF9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoa2YsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjJ9KTtqZj0yPT1rZi5hYmNkfWNhdGNoKGEpe2pmPSExfWZ1bmN0aW9uIE0oYSxiLGMpe2pmP09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOmN9KTphW2JdPWN9ZnVuY3Rpb24gTihhLGIpe2lmKGIpZm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmTShhLGMsYltjXSl9ZnVuY3Rpb24gbGYoYSl7dmFyIGI9e307TihiLGEpO3JldHVybiBifWZ1bmN0aW9uIG1mKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIG5mKGEsYil7aWYoIWJ8fCFiLmxlbmd0aClyZXR1cm4hMDtpZighYSlyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YVtiW2NdXTtpZih2b2lkIDA9PT1kfHxudWxsPT09ZHx8XCJcIj09PWQpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YTtpZihcIm9iamVjdFwiPT10eXBlb2YgYSYmbnVsbCE9YSl7Yj1cImxlbmd0aFwiaW4gYT9bXTp7fTtmb3IodmFyIGMgaW4gYSlNKGIsYyxvZihhW2NdKSl9cmV0dXJuIGJ9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gcGYoYSl7dmFyIGI9YSYmKGFbcWZdP1wicGhvbmVcIjpudWxsKTtpZihiJiZhJiZhW3JmXSl7TSh0aGlzLFwidWlkXCIsYVtyZl0pO00odGhpcyxcImRpc3BsYXlOYW1lXCIsYVtzZl18fG51bGwpO3ZhciBjPW51bGw7YVt0Zl0mJihjPShuZXcgRGF0ZShhW3RmXSkpLnRvVVRDU3RyaW5nKCkpO00odGhpcyxcImVucm9sbG1lbnRUaW1lXCIsYyk7TSh0aGlzLFwiZmFjdG9ySWRcIixiKX1lbHNlIHRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIkludGVybmFsIGFzc2VydDogaW52YWxpZCBNdWx0aUZhY3RvckluZm8gb2JqZWN0XCIpO31wZi5wcm90b3R5cGUudz1mdW5jdGlvbigpe3JldHVybnt1aWQ6dGhpcy51aWQsZGlzcGxheU5hbWU6dGhpcy5kaXNwbGF5TmFtZSxmYWN0b3JJZDp0aGlzLmZhY3RvcklkLGVucm9sbG1lbnRUaW1lOnRoaXMuZW5yb2xsbWVudFRpbWV9fTtmdW5jdGlvbiB1ZihhKXt0cnl7dmFyIGI9bmV3IHZmKGEpfWNhdGNoKGMpe2I9bnVsbH1yZXR1cm4gYn1cbnZhciBzZj1cImRpc3BsYXlOYW1lXCIsdGY9XCJlbnJvbGxlZEF0XCIscmY9XCJtZmFFbnJvbGxtZW50SWRcIixxZj1cInBob25lSW5mb1wiO2Z1bmN0aW9uIHZmKGEpe3BmLmNhbGwodGhpcyxhKTtNKHRoaXMsXCJwaG9uZU51bWJlclwiLGFbcWZdKX1yKHZmLHBmKTt2Zi5wcm90b3R5cGUudz1mdW5jdGlvbigpe3ZhciBhPXZmLiRhLncuY2FsbCh0aGlzKTthLnBob25lTnVtYmVyPXRoaXMucGhvbmVOdW1iZXI7cmV0dXJuIGF9O2Z1bmN0aW9uIHdmKGEpe3ZhciBiPXt9LGM9YVt4Zl0sZD1hW3lmXSxlPWFbemZdO2E9dWYoYVtBZl0pO2lmKCFlfHxlIT1CZiYmZSE9Q2YmJiFjfHxlPT1DZiYmIWR8fGU9PURmJiYhYSl0aHJvdyBFcnJvcihcIkludmFsaWQgY2hlY2tBY3Rpb25Db2RlIHJlc3BvbnNlIVwiKTtlPT1DZj8oYltFZl09Y3x8bnVsbCxiW0ZmXT1jfHxudWxsLGJbR2ZdPWQpOihiW0VmXT1kfHxudWxsLGJbRmZdPWR8fG51bGwsYltHZl09Y3x8bnVsbCk7YltIZl09YXx8bnVsbDtNKHRoaXMsSWYsZSk7TSh0aGlzLEpmLG9mKGIpKX1cbnZhciBEZj1cIlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OXCIsQmY9XCJFTUFJTF9TSUdOSU5cIixDZj1cIlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXCIseGY9XCJlbWFpbFwiLEFmPVwibWZhSW5mb1wiLHlmPVwibmV3RW1haWxcIix6Zj1cInJlcXVlc3RUeXBlXCIsR2Y9XCJlbWFpbFwiLEVmPVwiZnJvbUVtYWlsXCIsSGY9XCJtdWx0aUZhY3RvckluZm9cIixGZj1cInByZXZpb3VzRW1haWxcIixKZj1cImRhdGFcIixJZj1cIm9wZXJhdGlvblwiO2Z1bmN0aW9uIEtmKGEpe2E9YmUoYSk7dmFyIGI9YWUoYSxMZil8fG51bGwsYz1hZShhLE1mKXx8bnVsbCxkPWFlKGEsTmYpfHxudWxsO2Q9ZD9PZltkXXx8bnVsbDpudWxsO2lmKCFifHwhY3x8IWQpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLExmK1wiLCBcIitNZitcImFuZCBcIitOZitcIiBhcmUgcmVxdWlyZWQgaW4gYSB2YWxpZCBhY3Rpb24gY29kZSBVUkwuXCIpO04odGhpcyx7YXBpS2V5OmIsb3BlcmF0aW9uOmQsY29kZTpjLGNvbnRpbnVlVXJsOmFlKGEsUGYpfHxudWxsLGxhbmd1YWdlQ29kZTphZShhLFFmKXx8bnVsbCx0ZW5hbnRJZDphZShhLFJmKXx8bnVsbH0pfVxudmFyIExmPVwiYXBpS2V5XCIsTWY9XCJvb2JDb2RlXCIsUGY9XCJjb250aW51ZVVybFwiLFFmPVwibGFuZ3VhZ2VDb2RlXCIsTmY9XCJtb2RlXCIsUmY9XCJ0ZW5hbnRJZFwiLE9mPXtyZWNvdmVyRW1haWw6XCJSRUNPVkVSX0VNQUlMXCIscmVzZXRQYXNzd29yZDpcIlBBU1NXT1JEX1JFU0VUXCIscmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb246RGYsc2lnbkluOkJmLHZlcmlmeUFuZENoYW5nZUVtYWlsOkNmLHZlcmlmeUVtYWlsOlwiVkVSSUZZX0VNQUlMXCJ9O2Z1bmN0aW9uIFNmKGEpe3RyeXtyZXR1cm4gbmV3IEtmKGEpfWNhdGNoKGIpe3JldHVybiBudWxsfX07ZnVuY3Rpb24gVGYoYSl7dmFyIGI9YVtVZl07aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBiKXRocm93IG5ldyB0KFwibWlzc2luZy1jb250aW51ZS11cmlcIik7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBifHxcInN0cmluZ1wiPT09dHlwZW9mIGImJiFiLmxlbmd0aCl0aHJvdyBuZXcgdChcImludmFsaWQtY29udGludWUtdXJpXCIpO3RoaXMuaD1iO3RoaXMuYj10aGlzLmE9bnVsbDt0aGlzLmc9ITE7dmFyIGM9YVtWZl07aWYoYyYmXCJvYmplY3RcIj09PXR5cGVvZiBjKXtiPWNbV2ZdO3ZhciBkPWNbWGZdO2M9Y1tZZl07aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZiLmxlbmd0aCl7dGhpcy5hPWI7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkJiZcImJvb2xlYW5cIiE9PXR5cGVvZiBkKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixYZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgYm9vbGVhbiB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5nPSEhZDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJihcInN0cmluZ1wiIT09XG50eXBlb2YgY3x8XCJzdHJpbmdcIj09PXR5cGVvZiBjJiYhYy5sZW5ndGgpKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixZZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZyB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5iPWN8fG51bGx9ZWxzZXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFdmK1wiIHByb3BlcnR5IG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nIHdoZW4gc3BlY2lmaWVkLlwiKTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGR8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyl0aHJvdyBuZXcgdChcIm1pc3NpbmctYW5kcm9pZC1wa2ctbmFtZVwiKTt9fWVsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixWZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgbm9uIG51bGwgb2JqZWN0IHdoZW4gc3BlY2lmaWVkLlwiKTt0aGlzLmY9bnVsbDtpZigoYj1hW1pmXSkmJlwib2JqZWN0XCI9PT1cbnR5cGVvZiBiKWlmKGI9YlskZl0sXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZiLmxlbmd0aCl0aGlzLmY9YjtlbHNle2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYil0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsJGYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgd2hlbiBzcGVjaWZpZWQuXCIpO31lbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYil0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsWmYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBudWxsIG9iamVjdCB3aGVuIHNwZWNpZmllZC5cIik7Yj1hW2FnXTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGImJlwiYm9vbGVhblwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLGFnK1wiIHByb3BlcnR5IG11c3QgYmUgYSBib29sZWFuIHdoZW4gc3BlY2lmaWVkLlwiKTt0aGlzLmM9ISFiO2E9YVtiZ107aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhfHxcInN0cmluZ1wiPT09XG50eXBlb2YgYSYmIWEubGVuZ3RoKSl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsYmcrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgd2hlbiBzcGVjaWZpZWQuXCIpO3RoaXMuaT1hfHxudWxsfXZhciBWZj1cImFuZHJvaWRcIixiZz1cImR5bmFtaWNMaW5rRG9tYWluXCIsYWc9XCJoYW5kbGVDb2RlSW5BcHBcIixaZj1cImlPU1wiLFVmPVwidXJsXCIsWGY9XCJpbnN0YWxsQXBwXCIsWWY9XCJtaW5pbXVtVmVyc2lvblwiLFdmPVwicGFja2FnZU5hbWVcIiwkZj1cImJ1bmRsZUlkXCI7XG5mdW5jdGlvbiBjZyhhKXt2YXIgYj17fTtiLmNvbnRpbnVlVXJsPWEuaDtiLmNhbkhhbmRsZUNvZGVJbkFwcD1hLmM7aWYoYi5hbmRyb2lkUGFja2FnZU5hbWU9YS5hKWIuYW5kcm9pZE1pbmltdW1WZXJzaW9uPWEuYixiLmFuZHJvaWRJbnN0YWxsQXBwPWEuZztiLmlPU0J1bmRsZUlkPWEuZjtiLmR5bmFtaWNMaW5rRG9tYWluPWEuaTtmb3IodmFyIGMgaW4gYiludWxsPT09YltjXSYmZGVsZXRlIGJbY107cmV0dXJuIGJ9O2Z1bmN0aW9uIGRnKGEpe3JldHVybiBSYShhLGZ1bmN0aW9uKGIpe2I9Yi50b1N0cmluZygxNik7cmV0dXJuIDE8Yi5sZW5ndGg/YjpcIjBcIitifSkuam9pbihcIlwiKX07dmFyIGVnPW51bGw7ZnVuY3Rpb24gZmcoYSl7dmFyIGI9XCJcIjtnZyhhLGZ1bmN0aW9uKGMpe2IrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyl9KTtyZXR1cm4gYn1mdW5jdGlvbiBnZyhhLGIpe2Z1bmN0aW9uIGMobil7Zm9yKDtkPGEubGVuZ3RoOyl7dmFyIHA9YS5jaGFyQXQoZCsrKSx2PWVnW3BdO2lmKG51bGwhPXYpcmV0dXJuIHY7aWYoIS9eW1xcc1xceGEwXSokLy50ZXN0KHApKXRocm93IEVycm9yKFwiVW5rbm93biBiYXNlNjQgZW5jb2RpbmcgYXQgY2hhcjogXCIrcCk7fXJldHVybiBufWhnKCk7Zm9yKHZhciBkPTA7Oyl7dmFyIGU9YygtMSksZj1jKDApLGc9Yyg2NCksaD1jKDY0KTtpZig2ND09PWgmJi0xPT09ZSlicmVhaztiKGU8PDJ8Zj4+NCk7NjQhPWcmJihiKGY8PDQmMjQwfGc+PjIpLDY0IT1oJiZiKGc8PDYmMTkyfGgpKX19XG5mdW5jdGlvbiBoZygpe2lmKCFlZyl7ZWc9e307Zm9yKHZhciBhPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIi5zcGxpdChcIlwiKSxiPVtcIisvPVwiLFwiKy9cIixcIi1fPVwiLFwiLV8uXCIsXCItX1wiXSxjPTA7NT5jO2MrKylmb3IodmFyIGQ9YS5jb25jYXQoYltjXS5zcGxpdChcIlwiKSksZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1kW2VdO3ZvaWQgMD09PWVnW2ZdJiYoZWdbZl09ZSl9fX07ZnVuY3Rpb24gaWcoYSl7dmFyIGI9amcoYSk7aWYoIShiJiZiLnN1YiYmYi5pc3MmJmIuYXVkJiZiLmV4cCkpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIEpXVFwiKTt0aGlzLmc9YTt0aGlzLmM9Yi5leHA7dGhpcy5oPWIuc3ViO3ZhKCk7dGhpcy5hPWIucHJvdmlkZXJfaWR8fGIuZmlyZWJhc2UmJmIuZmlyZWJhc2Uuc2lnbl9pbl9wcm92aWRlcnx8bnVsbDt0aGlzLmY9Yi5maXJlYmFzZSYmYi5maXJlYmFzZS50ZW5hbnR8fG51bGw7dGhpcy5iPSEhYi5pc19hbm9ueW1vdXN8fFwiYW5vbnltb3VzXCI9PXRoaXMuYX1pZy5wcm90b3R5cGUuUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZ9O2lnLnByb3RvdHlwZS5pPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn07aWcucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ307ZnVuY3Rpb24ga2coYSl7dHJ5e3JldHVybiBuZXcgaWcoYSl9Y2F0Y2goYil7cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gamcoYSl7aWYoIWEpcmV0dXJuIG51bGw7YT1hLnNwbGl0KFwiLlwiKTtpZigzIT1hLmxlbmd0aClyZXR1cm4gbnVsbDthPWFbMV07Zm9yKHZhciBiPSg0LWEubGVuZ3RoJTQpJTQsYz0wO2M8YjtjKyspYSs9XCIuXCI7dHJ5e3JldHVybiBKU09OLnBhcnNlKGZnKGEpKX1jYXRjaChkKXt9cmV0dXJuIG51bGx9O3ZhciBsZz1cIm9hdXRoX2NvbnN1bWVyX2tleSBvYXV0aF9ub25jZSBvYXV0aF9zaWduYXR1cmUgb2F1dGhfc2lnbmF0dXJlX21ldGhvZCBvYXV0aF90aW1lc3RhbXAgb2F1dGhfdG9rZW4gb2F1dGhfdmVyc2lvblwiLnNwbGl0KFwiIFwiKSxtZz1bXCJjbGllbnRfaWRcIixcInJlc3BvbnNlX3R5cGVcIixcInNjb3BlXCIsXCJyZWRpcmVjdF91cmlcIixcInN0YXRlXCJdLG5nPXttZDp7SmE6XCJsb2NhbGVcIix1YTo3MDAsdGE6NjAwLGZhOlwiZmFjZWJvb2suY29tXCIsV2E6bWd9LG9kOntKYTpudWxsLHVhOjUwMCx0YTo3NTAsZmE6XCJnaXRodWIuY29tXCIsV2E6bWd9LHBkOntKYTpcImhsXCIsdWE6NTE1LHRhOjY4MCxmYTpcImdvb2dsZS5jb21cIixXYTptZ30sdmQ6e0phOlwibGFuZ1wiLHVhOjQ4NSx0YTo3MDUsZmE6XCJ0d2l0dGVyLmNvbVwiLFdhOmxnfSxqZDp7SmE6XCJsb2NhbGVcIix1YTo2NDAsdGE6NjAwLGZhOlwiYXBwbGUuY29tXCIsV2E6W119fTtcbmZ1bmN0aW9uIG9nKGEpe2Zvcih2YXIgYiBpbiBuZylpZihuZ1tiXS5mYT09YSlyZXR1cm4gbmdbYl07cmV0dXJuIG51bGx9O2Z1bmN0aW9uIHBnKGEpe3ZhciBiPXt9O2JbXCJmYWNlYm9vay5jb21cIl09cWc7YltcImdvb2dsZS5jb21cIl09cmc7YltcImdpdGh1Yi5jb21cIl09c2c7YltcInR3aXR0ZXIuY29tXCJdPXRnO3ZhciBjPWEmJmFbdWddO3RyeXtpZihjKXJldHVybiBiW2NdP25ldyBiW2NdKGEpOm5ldyB2ZyhhKTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGFbd2ddKXJldHVybiBuZXcgeGcoYSl9Y2F0Y2goZCl7fXJldHVybiBudWxsfXZhciB3Zz1cImlkVG9rZW5cIix1Zz1cInByb3ZpZGVySWRcIjtcbmZ1bmN0aW9uIHhnKGEpe3ZhciBiPWFbdWddO2lmKCFiJiZhW3dnXSl7dmFyIGM9a2coYVt3Z10pO2MmJmMuYSYmKGI9Yy5hKX1pZighYil0aHJvdyBFcnJvcihcIkludmFsaWQgYWRkaXRpb25hbCB1c2VyIGluZm8hXCIpO2lmKFwiYW5vbnltb3VzXCI9PWJ8fFwiY3VzdG9tXCI9PWIpYj1udWxsO2M9ITE7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmlzTmV3VXNlcj9jPSEhYS5pc05ld1VzZXI6XCJpZGVudGl0eXRvb2xraXQjU2lnbnVwTmV3VXNlclJlc3BvbnNlXCI9PT1hLmtpbmQmJihjPSEwKTtNKHRoaXMsXCJwcm92aWRlcklkXCIsYik7TSh0aGlzLFwiaXNOZXdVc2VyXCIsYyl9ZnVuY3Rpb24gdmcoYSl7eGcuY2FsbCh0aGlzLGEpO2E9V2UoYS5yYXdVc2VySW5mb3x8XCJ7fVwiKTtNKHRoaXMsXCJwcm9maWxlXCIsb2YoYXx8e30pKX1yKHZnLHhnKTtcbmZ1bmN0aW9uIHFnKGEpe3ZnLmNhbGwodGhpcyxhKTtpZihcImZhY2Vib29rLmNvbVwiIT10aGlzLnByb3ZpZGVySWQpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIElEIVwiKTt9cihxZyx2Zyk7ZnVuY3Rpb24gc2coYSl7dmcuY2FsbCh0aGlzLGEpO2lmKFwiZ2l0aHViLmNvbVwiIT10aGlzLnByb3ZpZGVySWQpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIElEIVwiKTtNKHRoaXMsXCJ1c2VybmFtZVwiLHRoaXMucHJvZmlsZSYmdGhpcy5wcm9maWxlLmxvZ2lufHxudWxsKX1yKHNnLHZnKTtmdW5jdGlvbiByZyhhKXt2Zy5jYWxsKHRoaXMsYSk7aWYoXCJnb29nbGUuY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO31yKHJnLHZnKTtcbmZ1bmN0aW9uIHRnKGEpe3ZnLmNhbGwodGhpcyxhKTtpZihcInR3aXR0ZXIuY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO00odGhpcyxcInVzZXJuYW1lXCIsYS5zY3JlZW5OYW1lfHxudWxsKX1yKHRnLHZnKTtmdW5jdGlvbiB5ZyhhKXt2YXIgYj1iZShhKSxjPWFlKGIsXCJsaW5rXCIpLGQ9YWUoYmUoYyksXCJsaW5rXCIpO2I9YWUoYixcImRlZXBfbGlua19pZFwiKTtyZXR1cm4gYWUoYmUoYiksXCJsaW5rXCIpfHxifHxkfHxjfHxhfTtmdW5jdGlvbiB6ZyhhLGIpe2lmKCFhJiYhYil0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJJbnRlcm5hbCBhc3NlcnQ6IG5vIHJhdyBzZXNzaW9uIHN0cmluZyBhdmFpbGFibGVcIik7aWYoYSYmYil0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJJbnRlcm5hbCBhc3NlcnQ6IHVuYWJsZSB0byBkZXRlcm1pbmUgdGhlIHNlc3Npb24gdHlwZVwiKTt0aGlzLmE9YXx8bnVsbDt0aGlzLmI9Ynx8bnVsbDt0aGlzLnR5cGU9dGhpcy5hP0FnOkJnfXZhciBBZz1cImVucm9sbFwiLEJnPVwic2lnbmluXCI7emcucHJvdG90eXBlLkhhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYT9FKHRoaXMuYSk6RSh0aGlzLmIpfTt6Zy5wcm90b3R5cGUudz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnR5cGU9PUFnP3ttdWx0aUZhY3RvclNlc3Npb246e2lkVG9rZW46dGhpcy5hfX06e211bHRpRmFjdG9yU2Vzc2lvbjp7cGVuZGluZ0NyZWRlbnRpYWw6dGhpcy5ifX19O2Z1bmN0aW9uIENnKCl7fUNnLnByb3RvdHlwZS5qYT1mdW5jdGlvbigpe307Q2cucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt9O0NnLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7fTtDZy5wcm90b3R5cGUudz1mdW5jdGlvbigpe307ZnVuY3Rpb24gRGcoYSxiKXtyZXR1cm4gYS50aGVuKGZ1bmN0aW9uKGMpe2lmKGNbRWddKXt2YXIgZD1rZyhjW0VnXSk7aWYoIWR8fGIhPWQuaCl0aHJvdyBuZXcgdChcInVzZXItbWlzbWF0Y2hcIik7cmV0dXJuIGN9dGhyb3cgbmV3IHQoXCJ1c2VyLW1pc21hdGNoXCIpO30pLnMoZnVuY3Rpb24oYyl7dGhyb3cgYyYmYy5jb2RlJiZjLmNvZGU9PXlhK1widXNlci1ub3QtZm91bmRcIj9uZXcgdChcInVzZXItbWlzbWF0Y2hcIik6Yzt9KX1cbmZ1bmN0aW9uIEZnKGEsYil7aWYoYil0aGlzLmE9YjtlbHNlIHRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcImZhaWxlZCB0byBjb25zdHJ1Y3QgYSBjcmVkZW50aWFsXCIpO00odGhpcyxcInByb3ZpZGVySWRcIixhKTtNKHRoaXMsXCJzaWduSW5NZXRob2RcIixhKX1GZy5wcm90b3R5cGUuamE9ZnVuY3Rpb24oYSl7cmV0dXJuIEdnKGEsSGcodGhpcykpfTtGZy5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIpe3ZhciBjPUhnKHRoaXMpO2MuaWRUb2tlbj1iO3JldHVybiBJZyhhLGMpfTtGZy5wcm90b3R5cGUuYz1mdW5jdGlvbihhLGIpe3JldHVybiBEZyhKZyhhLEhnKHRoaXMpKSxiKX07ZnVuY3Rpb24gSGcoYSl7cmV0dXJue3BlbmRpbmdUb2tlbjphLmEscmVxdWVzdFVyaTpcImh0dHA6Ly9sb2NhbGhvc3RcIn19RmcucHJvdG90eXBlLnc9ZnVuY3Rpb24oKXtyZXR1cm57cHJvdmlkZXJJZDp0aGlzLnByb3ZpZGVySWQsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kLHBlbmRpbmdUb2tlbjp0aGlzLmF9fTtcbmZ1bmN0aW9uIEtnKGEpe2lmKGEmJmEucHJvdmlkZXJJZCYmYS5zaWduSW5NZXRob2QmJjA9PWEucHJvdmlkZXJJZC5pbmRleE9mKFwic2FtbC5cIikmJmEucGVuZGluZ1Rva2VuKXRyeXtyZXR1cm4gbmV3IEZnKGEucHJvdmlkZXJJZCxhLnBlbmRpbmdUb2tlbil9Y2F0Y2goYil7fXJldHVybiBudWxsfVxuZnVuY3Rpb24gTGcoYSxiLGMpe3RoaXMuYT1udWxsO2lmKGIuaWRUb2tlbnx8Yi5hY2Nlc3NUb2tlbiliLmlkVG9rZW4mJk0odGhpcyxcImlkVG9rZW5cIixiLmlkVG9rZW4pLGIuYWNjZXNzVG9rZW4mJk0odGhpcyxcImFjY2Vzc1Rva2VuXCIsYi5hY2Nlc3NUb2tlbiksYi5ub25jZSYmIWIucGVuZGluZ1Rva2VuJiZNKHRoaXMsXCJub25jZVwiLGIubm9uY2UpLGIucGVuZGluZ1Rva2VuJiYodGhpcy5hPWIucGVuZGluZ1Rva2VuKTtlbHNlIGlmKGIub2F1dGhUb2tlbiYmYi5vYXV0aFRva2VuU2VjcmV0KU0odGhpcyxcImFjY2Vzc1Rva2VuXCIsYi5vYXV0aFRva2VuKSxNKHRoaXMsXCJzZWNyZXRcIixiLm9hdXRoVG9rZW5TZWNyZXQpO2Vsc2UgdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiZmFpbGVkIHRvIGNvbnN0cnVjdCBhIGNyZWRlbnRpYWxcIik7TSh0aGlzLFwicHJvdmlkZXJJZFwiLGEpO00odGhpcyxcInNpZ25Jbk1ldGhvZFwiLGMpfVxuTGcucHJvdG90eXBlLmphPWZ1bmN0aW9uKGEpe3JldHVybiBHZyhhLE1nKHRoaXMpKX07TGcucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1NZyh0aGlzKTtjLmlkVG9rZW49YjtyZXR1cm4gSWcoYSxjKX07TGcucHJvdG90eXBlLmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1NZyh0aGlzKTtyZXR1cm4gRGcoSmcoYSxjKSxiKX07XG5mdW5jdGlvbiBNZyhhKXt2YXIgYj17fTthLmlkVG9rZW4mJihiLmlkX3Rva2VuPWEuaWRUb2tlbik7YS5hY2Nlc3NUb2tlbiYmKGIuYWNjZXNzX3Rva2VuPWEuYWNjZXNzVG9rZW4pO2Euc2VjcmV0JiYoYi5vYXV0aF90b2tlbl9zZWNyZXQ9YS5zZWNyZXQpO2IucHJvdmlkZXJJZD1hLnByb3ZpZGVySWQ7YS5ub25jZSYmIWEuYSYmKGIubm9uY2U9YS5ub25jZSk7Yj17cG9zdEJvZHk6ZmUoYikudG9TdHJpbmcoKSxyZXF1ZXN0VXJpOlwiaHR0cDovL2xvY2FsaG9zdFwifTthLmEmJihkZWxldGUgYi5wb3N0Qm9keSxiLnBlbmRpbmdUb2tlbj1hLmEpO3JldHVybiBifVxuTGcucHJvdG90eXBlLnc9ZnVuY3Rpb24oKXt2YXIgYT17cHJvdmlkZXJJZDp0aGlzLnByb3ZpZGVySWQsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kfTt0aGlzLmlkVG9rZW4mJihhLm9hdXRoSWRUb2tlbj10aGlzLmlkVG9rZW4pO3RoaXMuYWNjZXNzVG9rZW4mJihhLm9hdXRoQWNjZXNzVG9rZW49dGhpcy5hY2Nlc3NUb2tlbik7dGhpcy5zZWNyZXQmJihhLm9hdXRoVG9rZW5TZWNyZXQ9dGhpcy5zZWNyZXQpO3RoaXMubm9uY2UmJihhLm5vbmNlPXRoaXMubm9uY2UpO3RoaXMuYSYmKGEucGVuZGluZ1Rva2VuPXRoaXMuYSk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gTmcoYSl7aWYoYSYmYS5wcm92aWRlcklkJiZhLnNpZ25Jbk1ldGhvZCl7dmFyIGI9e2lkVG9rZW46YS5vYXV0aElkVG9rZW4sYWNjZXNzVG9rZW46YS5vYXV0aFRva2VuU2VjcmV0P251bGw6YS5vYXV0aEFjY2Vzc1Rva2VuLG9hdXRoVG9rZW5TZWNyZXQ6YS5vYXV0aFRva2VuU2VjcmV0LG9hdXRoVG9rZW46YS5vYXV0aFRva2VuU2VjcmV0JiZhLm9hdXRoQWNjZXNzVG9rZW4sbm9uY2U6YS5ub25jZSxwZW5kaW5nVG9rZW46YS5wZW5kaW5nVG9rZW59O3RyeXtyZXR1cm4gbmV3IExnKGEucHJvdmlkZXJJZCxiLGEuc2lnbkluTWV0aG9kKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIE9nKGEsYil7dGhpcy5QYz1ifHxbXTtOKHRoaXMse3Byb3ZpZGVySWQ6YSxpc09BdXRoUHJvdmlkZXI6ITB9KTt0aGlzLkhiPXt9O3RoaXMub2I9KG9nKGEpfHx7fSkuSmF8fG51bGw7dGhpcy5uYj1udWxsfVxuT2cucHJvdG90eXBlLkthPWZ1bmN0aW9uKGEpe3RoaXMuSGI9bmIoYSk7cmV0dXJuIHRoaXN9O2Z1bmN0aW9uIFBnKGEpe2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYXx8MCE9YS5pbmRleE9mKFwic2FtbC5cIikpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLCdTQU1MIHByb3ZpZGVyIElEcyBtdXN0IGJlIHByZWZpeGVkIHdpdGggXCJzYW1sLlwiJyk7T2cuY2FsbCh0aGlzLGEsW10pfXIoUGcsT2cpO2Z1bmN0aW9uIFFnKGEpe09nLmNhbGwodGhpcyxhLG1nKTt0aGlzLmE9W119cihRZyxPZyk7UWcucHJvdG90eXBlLkNhPWZ1bmN0aW9uKGEpe1ZhKHRoaXMuYSxhKXx8dGhpcy5hLnB1c2goYSk7cmV0dXJuIHRoaXN9O1FnLnByb3RvdHlwZS5QYj1mdW5jdGlvbigpe3JldHVybiBaYSh0aGlzLmEpfTtcblFnLnByb3RvdHlwZS5jcmVkZW50aWFsPWZ1bmN0aW9uKGEsYil7dmFyIGM7bShhKT9jPXtpZFRva2VuOmEuaWRUb2tlbnx8bnVsbCxhY2Nlc3NUb2tlbjphLmFjY2Vzc1Rva2VufHxudWxsLG5vbmNlOmEucmF3Tm9uY2V8fG51bGx9OmM9e2lkVG9rZW46YXx8bnVsbCxhY2Nlc3NUb2tlbjpifHxudWxsfTtpZighYy5pZFRva2VuJiYhYy5hY2Nlc3NUb2tlbil0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJjcmVkZW50aWFsIGZhaWxlZDogbXVzdCBwcm92aWRlIHRoZSBJRCB0b2tlbiBhbmQvb3IgdGhlIGFjY2VzcyB0b2tlbi5cIik7cmV0dXJuIG5ldyBMZyh0aGlzLnByb3ZpZGVySWQsYyx0aGlzLnByb3ZpZGVySWQpfTtmdW5jdGlvbiBSZygpe1FnLmNhbGwodGhpcyxcImZhY2Vib29rLmNvbVwiKX1yKFJnLFFnKTtNKFJnLFwiUFJPVklERVJfSURcIixcImZhY2Vib29rLmNvbVwiKTtNKFJnLFwiRkFDRUJPT0tfU0lHTl9JTl9NRVRIT0RcIixcImZhY2Vib29rLmNvbVwiKTtcbmZ1bmN0aW9uIFNnKGEpe2lmKCFhKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixcImNyZWRlbnRpYWwgZmFpbGVkOiBleHBlY3RlZCAxIGFyZ3VtZW50ICh0aGUgT0F1dGggYWNjZXNzIHRva2VuKS5cIik7dmFyIGI9YTttKGEpJiYoYj1hLmFjY2Vzc1Rva2VuKTtyZXR1cm4obmV3IFJnKS5jcmVkZW50aWFsKHthY2Nlc3NUb2tlbjpifSl9ZnVuY3Rpb24gVGcoKXtRZy5jYWxsKHRoaXMsXCJnaXRodWIuY29tXCIpfXIoVGcsUWcpO00oVGcsXCJQUk9WSURFUl9JRFwiLFwiZ2l0aHViLmNvbVwiKTtNKFRnLFwiR0lUSFVCX1NJR05fSU5fTUVUSE9EXCIsXCJnaXRodWIuY29tXCIpO1xuZnVuY3Rpb24gVWcoYSl7aWYoIWEpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IGV4cGVjdGVkIDEgYXJndW1lbnQgKHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4pLlwiKTt2YXIgYj1hO20oYSkmJihiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgVGcpLmNyZWRlbnRpYWwoe2FjY2Vzc1Rva2VuOmJ9KX1mdW5jdGlvbiBWZygpe1FnLmNhbGwodGhpcyxcImdvb2dsZS5jb21cIik7dGhpcy5DYShcInByb2ZpbGVcIil9cihWZyxRZyk7TShWZyxcIlBST1ZJREVSX0lEXCIsXCJnb29nbGUuY29tXCIpO00oVmcsXCJHT09HTEVfU0lHTl9JTl9NRVRIT0RcIixcImdvb2dsZS5jb21cIik7ZnVuY3Rpb24gV2coYSxiKXt2YXIgYz1hO20oYSkmJihjPWEuaWRUb2tlbixiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgVmcpLmNyZWRlbnRpYWwoe2lkVG9rZW46YyxhY2Nlc3NUb2tlbjpifSl9ZnVuY3Rpb24gWGcoKXtPZy5jYWxsKHRoaXMsXCJ0d2l0dGVyLmNvbVwiLGxnKX1cbnIoWGcsT2cpO00oWGcsXCJQUk9WSURFUl9JRFwiLFwidHdpdHRlci5jb21cIik7TShYZyxcIlRXSVRURVJfU0lHTl9JTl9NRVRIT0RcIixcInR3aXR0ZXIuY29tXCIpO2Z1bmN0aW9uIFlnKGEsYil7dmFyIGM9YTttKGMpfHwoYz17b2F1dGhUb2tlbjphLG9hdXRoVG9rZW5TZWNyZXQ6Yn0pO2lmKCFjLm9hdXRoVG9rZW58fCFjLm9hdXRoVG9rZW5TZWNyZXQpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IGV4cGVjdGVkIDIgYXJndW1lbnRzICh0aGUgT0F1dGggYWNjZXNzIHRva2VuIGFuZCBzZWNyZXQpLlwiKTtyZXR1cm4gbmV3IExnKFwidHdpdHRlci5jb21cIixjLFwidHdpdHRlci5jb21cIil9XG5mdW5jdGlvbiBaZyhhLGIsYyl7dGhpcy5hPWE7dGhpcy5mPWI7TSh0aGlzLFwicHJvdmlkZXJJZFwiLFwicGFzc3dvcmRcIik7TSh0aGlzLFwic2lnbkluTWV0aG9kXCIsYz09PSRnLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q/JGcuRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRDokZy5FTUFJTF9QQVNTV09SRF9TSUdOX0lOX01FVEhPRCl9WmcucHJvdG90eXBlLmphPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnNpZ25Jbk1ldGhvZD09JGcuRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRD9PKGEsYWgse2VtYWlsOnRoaXMuYSxvb2JDb2RlOnRoaXMuZn0pOk8oYSxiaCx7ZW1haWw6dGhpcy5hLHBhc3N3b3JkOnRoaXMuZn0pfTtcblpnLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuc2lnbkluTWV0aG9kPT0kZy5FTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EP08oYSxjaCx7aWRUb2tlbjpiLGVtYWlsOnRoaXMuYSxvb2JDb2RlOnRoaXMuZn0pOk8oYSxkaCx7aWRUb2tlbjpiLGVtYWlsOnRoaXMuYSxwYXNzd29yZDp0aGlzLmZ9KX07WmcucHJvdG90eXBlLmM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gRGcodGhpcy5qYShhKSxiKX07WmcucHJvdG90eXBlLnc9ZnVuY3Rpb24oKXtyZXR1cm57ZW1haWw6dGhpcy5hLHBhc3N3b3JkOnRoaXMuZixzaWduSW5NZXRob2Q6dGhpcy5zaWduSW5NZXRob2R9fTtmdW5jdGlvbiBlaChhKXtyZXR1cm4gYSYmYS5lbWFpbCYmYS5wYXNzd29yZD9uZXcgWmcoYS5lbWFpbCxhLnBhc3N3b3JkLGEuc2lnbkluTWV0aG9kKTpudWxsfWZ1bmN0aW9uICRnKCl7Tih0aGlzLHtwcm92aWRlcklkOlwicGFzc3dvcmRcIixpc09BdXRoUHJvdmlkZXI6ITF9KX1cbmZ1bmN0aW9uIGZoKGEsYil7Yj1naChiKTtpZighYil0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJJbnZhbGlkIGVtYWlsIGxpbmshXCIpO3JldHVybiBuZXcgWmcoYSxiLmNvZGUsJGcuRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRCl9ZnVuY3Rpb24gZ2goYSl7YT15ZyhhKTtyZXR1cm4oYT1TZihhKSkmJmEub3BlcmF0aW9uPT09QmY/YTpudWxsfU4oJGcse1BST1ZJREVSX0lEOlwicGFzc3dvcmRcIn0pO04oJGcse0VNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q6XCJlbWFpbExpbmtcIn0pO04oJGcse0VNQUlMX1BBU1NXT1JEX1NJR05fSU5fTUVUSE9EOlwicGFzc3dvcmRcIn0pO2Z1bmN0aW9uIGhoKGEpe2lmKCEoYS5jYiYmYS5iYnx8YS5MYSYmYS5lYSkpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt0aGlzLmE9YTtNKHRoaXMsXCJwcm92aWRlcklkXCIsXCJwaG9uZVwiKTt0aGlzLmZhPVwicGhvbmVcIjtNKHRoaXMsXCJzaWduSW5NZXRob2RcIixcInBob25lXCIpfVxuaGgucHJvdG90eXBlLmphPWZ1bmN0aW9uKGEpe3JldHVybiBhLmViKGloKHRoaXMpKX07aGgucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1paCh0aGlzKTtjLmlkVG9rZW49YjtyZXR1cm4gTyhhLGpoLGMpfTtoaC5wcm90b3R5cGUuYz1mdW5jdGlvbihhLGIpe3ZhciBjPWloKHRoaXMpO2Mub3BlcmF0aW9uPVwiUkVBVVRIXCI7YT1PKGEsa2gsYyk7cmV0dXJuIERnKGEsYil9O2hoLnByb3RvdHlwZS53PWZ1bmN0aW9uKCl7dmFyIGE9e3Byb3ZpZGVySWQ6XCJwaG9uZVwifTt0aGlzLmEuY2ImJihhLnZlcmlmaWNhdGlvbklkPXRoaXMuYS5jYik7dGhpcy5hLmJiJiYoYS52ZXJpZmljYXRpb25Db2RlPXRoaXMuYS5iYik7dGhpcy5hLkxhJiYoYS50ZW1wb3JhcnlQcm9vZj10aGlzLmEuTGEpO3RoaXMuYS5lYSYmKGEucGhvbmVOdW1iZXI9dGhpcy5hLmVhKTtyZXR1cm4gYX07XG5mdW5jdGlvbiBsaChhKXtpZihhJiZcInBob25lXCI9PT1hLnByb3ZpZGVySWQmJihhLnZlcmlmaWNhdGlvbklkJiZhLnZlcmlmaWNhdGlvbkNvZGV8fGEudGVtcG9yYXJ5UHJvb2YmJmEucGhvbmVOdW1iZXIpKXt2YXIgYj17fTt3KFtcInZlcmlmaWNhdGlvbklkXCIsXCJ2ZXJpZmljYXRpb25Db2RlXCIsXCJ0ZW1wb3JhcnlQcm9vZlwiLFwicGhvbmVOdW1iZXJcIl0sZnVuY3Rpb24oYyl7YVtjXSYmKGJbY109YVtjXSl9KTtyZXR1cm4gbmV3IGhoKGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEpe3JldHVybiBhLmEuTGEmJmEuYS5lYT97dGVtcG9yYXJ5UHJvb2Y6YS5hLkxhLHBob25lTnVtYmVyOmEuYS5lYX06e3Nlc3Npb25JbmZvOmEuYS5jYixjb2RlOmEuYS5iYn19XG5mdW5jdGlvbiBtaChhKXt0cnl7dGhpcy5hPWF8fGZpcmViYXNlLmF1dGgoKX1jYXRjaChiKXt0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJFaXRoZXIgYW4gaW5zdGFuY2Ugb2YgZmlyZWJhc2UuYXV0aC5BdXRoIG11c3QgYmUgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBmaXJlYmFzZS5hdXRoLlBob25lQXV0aFByb3ZpZGVyIGNvbnN0cnVjdG9yLCBvciB0aGUgZGVmYXVsdCBmaXJlYmFzZSBBcHAgaW5zdGFuY2UgbXVzdCBiZSBpbml0aWFsaXplZCB2aWEgZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCgpLlwiKTt9Tih0aGlzLHtwcm92aWRlcklkOlwicGhvbmVcIixpc09BdXRoUHJvdmlkZXI6ITF9KX1cbm1oLnByb3RvdHlwZS5lYj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYS5hO3JldHVybiBFKGIudmVyaWZ5KCkpLnRoZW4oZnVuY3Rpb24oZCl7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixcIkFuIGltcGxlbWVudGF0aW9uIG9mIGZpcmViYXNlLmF1dGguQXBwbGljYXRpb25WZXJpZmllci5wcm90b3R5cGUudmVyaWZ5KCkgbXVzdCByZXR1cm4gYSBmaXJlYmFzZS5Qcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHN0cmluZy5cIik7c3dpdGNoKGIudHlwZSl7Y2FzZSBcInJlY2FwdGNoYVwiOnZhciBlPW0oYSk/YS5zZXNzaW9uOm51bGwsZj1tKGEpP2EucGhvbmVOdW1iZXI6YSxnO2UmJmUudHlwZT09QWc/Zz1lLkhhKCkudGhlbihmdW5jdGlvbihoKXtyZXR1cm4gbmgoYyx7aWRUb2tlbjpoLHBob25lRW5yb2xsbWVudEluZm86e3Bob25lTnVtYmVyOmYscmVjYXB0Y2hhVG9rZW46ZH19KX0pOmUmJmUudHlwZT09Qmc/Zz1lLkhhKCkudGhlbihmdW5jdGlvbihoKXtyZXR1cm4gb2goYyxcbnttZmFQZW5kaW5nQ3JlZGVudGlhbDpoLG1mYUVucm9sbG1lbnRJZDphLm11bHRpRmFjdG9ySGludCYmYS5tdWx0aUZhY3RvckhpbnQudWlkfHxhLm11bHRpRmFjdG9yVWlkLHBob25lU2lnbkluSW5mbzp7cmVjYXB0Y2hhVG9rZW46ZH19KX0pOmc9cGgoYyx7cGhvbmVOdW1iZXI6ZixyZWNhcHRjaGFUb2tlbjpkfSk7cmV0dXJuIGcudGhlbihmdW5jdGlvbihoKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZXNldCYmYi5yZXNldCgpO3JldHVybiBofSxmdW5jdGlvbihoKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZXNldCYmYi5yZXNldCgpO3Rocm93IGg7fSk7ZGVmYXVsdDp0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsJ09ubHkgZmlyZWJhc2UuYXV0aC5BcHBsaWNhdGlvblZlcmlmaWVycyB3aXRoIHR5cGU9XCJyZWNhcHRjaGFcIiBhcmUgY3VycmVudGx5IHN1cHBvcnRlZC4nKTt9fSl9O1xuZnVuY3Rpb24gcWgoYSxiKXtpZighYSl0aHJvdyBuZXcgdChcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkXCIpO2lmKCFiKXRocm93IG5ldyB0KFwibWlzc2luZy12ZXJpZmljYXRpb24tY29kZVwiKTtyZXR1cm4gbmV3IGhoKHtjYjphLGJiOmJ9KX1OKG1oLHtQUk9WSURFUl9JRDpcInBob25lXCJ9KTtOKG1oLHtQSE9ORV9TSUdOX0lOX01FVEhPRDpcInBob25lXCJ9KTtcbmZ1bmN0aW9uIHJoKGEpe2lmKGEudGVtcG9yYXJ5UHJvb2YmJmEucGhvbmVOdW1iZXIpcmV0dXJuIG5ldyBoaCh7TGE6YS50ZW1wb3JhcnlQcm9vZixlYTphLnBob25lTnVtYmVyfSk7dmFyIGI9YSYmYS5wcm92aWRlcklkO2lmKCFifHxcInBhc3N3b3JkXCI9PT1iKXJldHVybiBudWxsO3ZhciBjPWEmJmEub2F1dGhBY2Nlc3NUb2tlbixkPWEmJmEub2F1dGhUb2tlblNlY3JldCxlPWEmJmEubm9uY2UsZj1hJiZhLm9hdXRoSWRUb2tlbixnPWEmJmEucGVuZGluZ1Rva2VuO3RyeXtzd2l0Y2goYil7Y2FzZSBcImdvb2dsZS5jb21cIjpyZXR1cm4gV2coZixjKTtjYXNlIFwiZmFjZWJvb2suY29tXCI6cmV0dXJuIFNnKGMpO2Nhc2UgXCJnaXRodWIuY29tXCI6cmV0dXJuIFVnKGMpO2Nhc2UgXCJ0d2l0dGVyLmNvbVwiOnJldHVybiBZZyhjLGQpO2RlZmF1bHQ6cmV0dXJuIGN8fGR8fGZ8fGc/Zz8wPT1iLmluZGV4T2YoXCJzYW1sLlwiKT9uZXcgRmcoYixnKTpuZXcgTGcoYix7cGVuZGluZ1Rva2VuOmcsaWRUb2tlbjphLm9hdXRoSWRUb2tlbixcbmFjY2Vzc1Rva2VuOmEub2F1dGhBY2Nlc3NUb2tlbn0sYik6KG5ldyBRZyhiKSkuY3JlZGVudGlhbCh7aWRUb2tlbjpmLGFjY2Vzc1Rva2VuOmMscmF3Tm9uY2U6ZX0pOm51bGx9fWNhdGNoKGgpe3JldHVybiBudWxsfX1mdW5jdGlvbiBzaChhKXtpZighYS5pc09BdXRoUHJvdmlkZXIpdGhyb3cgbmV3IHQoXCJpbnZhbGlkLW9hdXRoLXByb3ZpZGVyXCIpO307ZnVuY3Rpb24gdGgoYSxiLGMsZCxlLGYsZyl7dGhpcy5jPWE7dGhpcy5iPWJ8fG51bGw7dGhpcy5nPWN8fG51bGw7dGhpcy5mPWR8fG51bGw7dGhpcy5pPWZ8fG51bGw7dGhpcy5oPWd8fG51bGw7dGhpcy5hPWV8fG51bGw7aWYodGhpcy5nfHx0aGlzLmEpe2lmKHRoaXMuZyYmdGhpcy5hKXRocm93IG5ldyB0KFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpO2lmKHRoaXMuZyYmIXRoaXMuZil0aHJvdyBuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKTt9ZWxzZSB0aHJvdyBuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKTt9dGgucHJvdG90eXBlLmdldFVpZD1mdW5jdGlvbigpe3ZhciBhPVtdO2EucHVzaCh0aGlzLmMpO3RoaXMuYiYmYS5wdXNoKHRoaXMuYik7dGhpcy5mJiZhLnB1c2godGhpcy5mKTt0aGlzLmgmJmEucHVzaCh0aGlzLmgpO3JldHVybiBhLmpvaW4oXCItXCIpfTt0aC5wcm90b3R5cGUuUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmh9O1xudGgucHJvdG90eXBlLnc9ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTp0aGlzLmMsZXZlbnRJZDp0aGlzLmIsdXJsUmVzcG9uc2U6dGhpcy5nLHNlc3Npb25JZDp0aGlzLmYscG9zdEJvZHk6dGhpcy5pLHRlbmFudElkOnRoaXMuaCxlcnJvcjp0aGlzLmEmJnRoaXMuYS53KCl9fTtmdW5jdGlvbiB1aChhKXthPWF8fHt9O3JldHVybiBhLnR5cGU/bmV3IHRoKGEudHlwZSxhLmV2ZW50SWQsYS51cmxSZXNwb25zZSxhLnNlc3Npb25JZCxhLmVycm9yJiZBYShhLmVycm9yKSxhLnBvc3RCb2R5LGEudGVuYW50SWQpOm51bGx9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gdmgoKXt0aGlzLmI9bnVsbDt0aGlzLmE9W119dmFyIHdoPW51bGw7ZnVuY3Rpb24geGgoYSl7dmFyIGI9d2g7Yi5hLnB1c2goYSk7Yi5ifHwoYi5iPWZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wO2Q8Yi5hLmxlbmd0aDtkKyspYi5hW2RdKGMpfSxhPUwoXCJ1bml2ZXJzYWxMaW5rcy5zdWJzY3JpYmVcIixsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmYShudWxsLGIuYikpfTtmdW5jdGlvbiB5aChhKXt2YXIgYj1cInVuYXV0aG9yaXplZC1kb21haW5cIixjPXZvaWQgMCxkPWJlKGEpO2E9ZC5hO2Q9ZC5mO1wiY2hyb21lLWV4dGVuc2lvblwiPT1kP2M9UWIoXCJUaGlzIGNocm9tZSBleHRlbnNpb24gSUQgKGNocm9tZS1leHRlbnNpb246Ly8lcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOlwiaHR0cFwiPT1kfHxcImh0dHBzXCI9PWQ/Yz1RYihcIlRoaXMgZG9tYWluICglcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOmI9XCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCI7XG50LmNhbGwodGhpcyxiLGMpfXIoeWgsdCk7ZnVuY3Rpb24gemgoYSxiLGMpe3QuY2FsbCh0aGlzLGEsYyk7YT1ifHx7fTthLkliJiZNKHRoaXMsXCJlbWFpbFwiLGEuSWIpO2EuZWEmJk0odGhpcyxcInBob25lTnVtYmVyXCIsYS5lYSk7YS5jcmVkZW50aWFsJiZNKHRoaXMsXCJjcmVkZW50aWFsXCIsYS5jcmVkZW50aWFsKTthLlliJiZNKHRoaXMsXCJ0ZW5hbnRJZFwiLGEuWWIpfXIoemgsdCk7emgucHJvdG90eXBlLnc9ZnVuY3Rpb24oKXt2YXIgYT17Y29kZTp0aGlzLmNvZGUsbWVzc2FnZTp0aGlzLm1lc3NhZ2V9O3RoaXMuZW1haWwmJihhLmVtYWlsPXRoaXMuZW1haWwpO3RoaXMucGhvbmVOdW1iZXImJihhLnBob25lTnVtYmVyPXRoaXMucGhvbmVOdW1iZXIpO3RoaXMudGVuYW50SWQmJihhLnRlbmFudElkPXRoaXMudGVuYW50SWQpO3ZhciBiPXRoaXMuY3JlZGVudGlhbCYmdGhpcy5jcmVkZW50aWFsLncoKTtiJiZ6KGEsYik7cmV0dXJuIGF9O3poLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53KCl9O1xuZnVuY3Rpb24gQWgoYSl7aWYoYS5jb2RlKXt2YXIgYj1hLmNvZGV8fFwiXCI7MD09Yi5pbmRleE9mKHlhKSYmKGI9Yi5zdWJzdHJpbmcoeWEubGVuZ3RoKSk7dmFyIGM9e2NyZWRlbnRpYWw6cmgoYSksWWI6YS50ZW5hbnRJZH07aWYoYS5lbWFpbCljLkliPWEuZW1haWw7ZWxzZSBpZihhLnBob25lTnVtYmVyKWMuZWE9YS5waG9uZU51bWJlcjtlbHNlIGlmKCFjLmNyZWRlbnRpYWwpcmV0dXJuIG5ldyB0KGIsYS5tZXNzYWdlfHx2b2lkIDApO3JldHVybiBuZXcgemgoYixjLGEubWVzc2FnZSl9cmV0dXJuIG51bGx9O2Z1bmN0aW9uIEJoKCl7fUJoLnByb3RvdHlwZS5jPW51bGw7ZnVuY3Rpb24gQ2goYSl7cmV0dXJuIGEuY3x8KGEuYz1hLmIoKSl9O3ZhciBEaDtmdW5jdGlvbiBFaCgpe31yKEVoLEJoKTtFaC5wcm90b3R5cGUuYT1mdW5jdGlvbigpe3ZhciBhPUZoKHRoaXMpO3JldHVybiBhP25ldyBBY3RpdmVYT2JqZWN0KGEpOm5ldyBYTUxIdHRwUmVxdWVzdH07RWgucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt2YXIgYT17fTtGaCh0aGlzKSYmKGFbMF09ITAsYVsxXT0hMCk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gRmgoYSl7aWYoIWEuZiYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgQWN0aXZlWE9iamVjdCl7Zm9yKHZhciBiPVtcIk1TWE1MMi5YTUxIVFRQLjYuMFwiLFwiTVNYTUwyLlhNTEhUVFAuMy4wXCIsXCJNU1hNTDIuWE1MSFRUUFwiLFwiTWljcm9zb2Z0LlhNTEhUVFBcIl0sYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1iW2NdO3RyeXtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoZCksYS5mPWR9Y2F0Y2goZSl7fX10aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgQWN0aXZlWE9iamVjdC4gQWN0aXZlWCBtaWdodCBiZSBkaXNhYmxlZCwgb3IgTVNYTUwgbWlnaHQgbm90IGJlIGluc3RhbGxlZFwiKTt9cmV0dXJuIGEuZn1EaD1uZXcgRWg7ZnVuY3Rpb24gR2goKXt9cihHaCxCaCk7R2gucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgWE1MSHR0cFJlcXVlc3Q7aWYoXCJ3aXRoQ3JlZGVudGlhbHNcImluIGEpcmV0dXJuIGE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhEb21haW5SZXF1ZXN0KXJldHVybiBuZXcgSGg7dGhyb3cgRXJyb3IoXCJVbnN1cHBvcnRlZCBicm93c2VyXCIpO307R2gucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXtyZXR1cm57fX07XG5mdW5jdGlvbiBIaCgpe3RoaXMuYT1uZXcgWERvbWFpblJlcXVlc3Q7dGhpcy5yZWFkeVN0YXRlPTA7dGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbDt0aGlzLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPVwiXCI7dGhpcy5zdGF0dXM9LTE7dGhpcy5zdGF0dXNUZXh0PVwiXCI7dGhpcy5hLm9ubG9hZD1xKHRoaXMucGMsdGhpcyk7dGhpcy5hLm9uZXJyb3I9cSh0aGlzLlJiLHRoaXMpO3RoaXMuYS5vbnByb2dyZXNzPXEodGhpcy5xYyx0aGlzKTt0aGlzLmEub250aW1lb3V0PXEodGhpcy51Yyx0aGlzKX1rPUhoLnByb3RvdHlwZTtrLm9wZW49ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPWMmJiFjKXRocm93IEVycm9yKFwiT25seSBhc3luYyByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkLlwiKTt0aGlzLmEub3BlbihhLGIpfTtcbmsuc2VuZD1mdW5jdGlvbihhKXtpZihhKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBhKXRoaXMuYS5zZW5kKGEpO2Vsc2UgdGhyb3cgRXJyb3IoXCJPbmx5IHN0cmluZyBkYXRhIGlzIHN1cHBvcnRlZFwiKTtlbHNlIHRoaXMuYS5zZW5kKCl9O2suYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLmEuYWJvcnQoKX07ay5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKCl7fTtrLmdldFJlc3BvbnNlSGVhZGVyPWZ1bmN0aW9uKGEpe3JldHVyblwiY29udGVudC10eXBlXCI9PWEudG9Mb3dlckNhc2UoKT90aGlzLmEuY29udGVudFR5cGU6XCJcIn07ay5wYz1mdW5jdGlvbigpe3RoaXMuc3RhdHVzPTIwMDt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PXRoaXMuYS5yZXNwb25zZVRleHQ7SWgodGhpcyw0KX07ay5SYj1mdW5jdGlvbigpe3RoaXMuc3RhdHVzPTUwMDt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PVwiXCI7SWgodGhpcyw0KX07ay51Yz1mdW5jdGlvbigpe3RoaXMuUmIoKX07XG5rLnFjPWZ1bmN0aW9uKCl7dGhpcy5zdGF0dXM9MjAwO0loKHRoaXMsMSl9O2Z1bmN0aW9uIEloKGEsYil7YS5yZWFkeVN0YXRlPWI7aWYoYS5vbnJlYWR5c3RhdGVjaGFuZ2UpYS5vbnJlYWR5c3RhdGVjaGFuZ2UoKX1rLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe3JldHVyblwiY29udGVudC10eXBlOiBcIit0aGlzLmEuY29udGVudFR5cGV9O2Z1bmN0aW9uIEpoKGEsYixjKXt0aGlzLnJlc2V0KGEsYixjLHZvaWQgMCx2b2lkIDApfUpoLnByb3RvdHlwZS5hPW51bGw7dmFyIEtoPTA7SmgucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKGEsYixjLGQsZSl7XCJudW1iZXJcIj09dHlwZW9mIGV8fEtoKys7ZHx8dmEoKTtkZWxldGUgdGhpcy5hfTtmdW5jdGlvbiBMaChhKXt0aGlzLmY9YTt0aGlzLmI9dGhpcy5jPXRoaXMuYT1udWxsfWZ1bmN0aW9uIE1oKGEsYil7dGhpcy5uYW1lPWE7dGhpcy52YWx1ZT1ifU1oLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9O3ZhciBOaD1uZXcgTWgoXCJTRVZFUkVcIiwxRTMpLE9oPW5ldyBNaChcIldBUk5JTkdcIiw5MDApLFBoPW5ldyBNaChcIkNPTkZJR1wiLDcwMCksUWg9bmV3IE1oKFwiRklORVwiLDUwMCk7ZnVuY3Rpb24gUmgoYSl7aWYoYS5jKXJldHVybiBhLmM7aWYoYS5hKXJldHVybiBSaChhLmEpO0dhKFwiUm9vdCBsb2dnZXIgaGFzIG5vIGxldmVsIHNldC5cIik7cmV0dXJuIG51bGx9TGgucHJvdG90eXBlLmxvZz1mdW5jdGlvbihhLGIsYyl7aWYoYS52YWx1ZT49UmgodGhpcykudmFsdWUpZm9yKG9hKGIpJiYoYj1iKCkpLGE9bmV3IEpoKGEsU3RyaW5nKGIpLHRoaXMuZiksYyYmKGEuYT1jKSxjPXRoaXM7YzspYz1jLmF9O3ZhciBTaD17fSxUaD1udWxsO1xuZnVuY3Rpb24gVWgoYSl7VGh8fChUaD1uZXcgTGgoXCJcIiksU2hbXCJcIl09VGgsVGguYz1QaCk7dmFyIGI7aWYoIShiPVNoW2FdKSl7Yj1uZXcgTGgoYSk7dmFyIGM9YS5sYXN0SW5kZXhPZihcIi5cIiksZD1hLnN1YnN0cihjKzEpO2M9VWgoYS5zdWJzdHIoMCxjKSk7Yy5ifHwoYy5iPXt9KTtjLmJbZF09YjtiLmE9YztTaFthXT1ifXJldHVybiBifTtmdW5jdGlvbiBWaChhLGIpe2EmJmEubG9nKFFoLGIsdm9pZCAwKX07ZnVuY3Rpb24gV2goYSl7dGhpcy5mPWF9cihXaCxCaCk7V2gucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFhoKHRoaXMuZil9O1doLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhfX0oe30pO2Z1bmN0aW9uIFhoKGEpe0kuY2FsbCh0aGlzKTt0aGlzLnU9YTt0aGlzLmg9dm9pZCAwO3RoaXMucmVhZHlTdGF0ZT1ZaDt0aGlzLnN0YXR1cz0wO3RoaXMucmVzcG9uc2VUeXBlPXRoaXMucmVzcG9uc2VUZXh0PXRoaXMucmVzcG9uc2U9dGhpcy5zdGF0dXNUZXh0PVwiXCI7dGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbDt0aGlzLmw9bmV3IEhlYWRlcnM7dGhpcy5iPW51bGw7dGhpcy5vPVwiR0VUXCI7dGhpcy5mPVwiXCI7dGhpcy5hPSExO3RoaXMuaT1VaChcImdvb2cubmV0LkZldGNoWG1sSHR0cFwiKTt0aGlzLm09dGhpcy5jPXRoaXMuZz1udWxsfXIoWGgsSSk7dmFyIFloPTA7az1YaC5wcm90b3R5cGU7XG5rLm9wZW49ZnVuY3Rpb24oYSxiKXtpZih0aGlzLnJlYWR5U3RhdGUhPVloKXRocm93IHRoaXMuYWJvcnQoKSxFcnJvcihcIkVycm9yIHJlb3BlbmluZyBhIGNvbm5lY3Rpb25cIik7dGhpcy5vPWE7dGhpcy5mPWI7dGhpcy5yZWFkeVN0YXRlPTE7WmgodGhpcyl9O2suc2VuZD1mdW5jdGlvbihhKXtpZigxIT10aGlzLnJlYWR5U3RhdGUpdGhyb3cgdGhpcy5hYm9ydCgpLEVycm9yKFwibmVlZCB0byBjYWxsIG9wZW4oKSBmaXJzdC4gXCIpO3RoaXMuYT0hMDt2YXIgYj17aGVhZGVyczp0aGlzLmwsbWV0aG9kOnRoaXMubyxjcmVkZW50aWFsczp0aGlzLmgsY2FjaGU6dm9pZCAwfTthJiYoYi5ib2R5PWEpO3RoaXMudS5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLmYsYikpLnRoZW4odGhpcy50Yy5iaW5kKHRoaXMpLHRoaXMuVGEuYmluZCh0aGlzKSl9O1xuay5hYm9ydD1mdW5jdGlvbigpe3RoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQ9XCJcIjt0aGlzLmw9bmV3IEhlYWRlcnM7dGhpcy5zdGF0dXM9MDt0aGlzLmMmJnRoaXMuYy5jYW5jZWwoXCJSZXF1ZXN0IHdhcyBhYm9ydGVkLlwiKTsxPD10aGlzLnJlYWR5U3RhdGUmJnRoaXMuYSYmNCE9dGhpcy5yZWFkeVN0YXRlJiYodGhpcy5hPSExLCRoKHRoaXMpKTt0aGlzLnJlYWR5U3RhdGU9WWh9O1xuay50Yz1mdW5jdGlvbihhKXt0aGlzLmEmJih0aGlzLmc9YSx0aGlzLmJ8fCh0aGlzLnN0YXR1cz10aGlzLmcuc3RhdHVzLHRoaXMuc3RhdHVzVGV4dD10aGlzLmcuc3RhdHVzVGV4dCx0aGlzLmI9YS5oZWFkZXJzLHRoaXMucmVhZHlTdGF0ZT0yLFpoKHRoaXMpKSx0aGlzLmEmJih0aGlzLnJlYWR5U3RhdGU9MyxaaCh0aGlzKSx0aGlzLmEmJihcImFycmF5YnVmZmVyXCI9PT10aGlzLnJlc3BvbnNlVHlwZT9hLmFycmF5QnVmZmVyKCkudGhlbih0aGlzLnJjLmJpbmQodGhpcyksdGhpcy5UYS5iaW5kKHRoaXMpKTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGwuUmVhZGFibGVTdHJlYW0mJlwiYm9keVwiaW4gYT8odGhpcy5yZXNwb25zZT10aGlzLnJlc3BvbnNlVGV4dD1cIlwiLHRoaXMuYz1hLmJvZHkuZ2V0UmVhZGVyKCksdGhpcy5tPW5ldyBUZXh0RGVjb2RlcixhaSh0aGlzKSk6YS50ZXh0KCkudGhlbih0aGlzLnNjLmJpbmQodGhpcyksdGhpcy5UYS5iaW5kKHRoaXMpKSkpKX07XG5mdW5jdGlvbiBhaShhKXthLmMucmVhZCgpLnRoZW4oYS5vYy5iaW5kKGEpKS5jYXRjaChhLlRhLmJpbmQoYSkpfWsub2M9ZnVuY3Rpb24oYSl7aWYodGhpcy5hKXt2YXIgYj10aGlzLm0uZGVjb2RlKGEudmFsdWU/YS52YWx1ZTpuZXcgVWludDhBcnJheSgwKSx7c3RyZWFtOiFhLmRvbmV9KTtiJiYodGhpcy5yZXNwb25zZT10aGlzLnJlc3BvbnNlVGV4dCs9Yik7YS5kb25lPyRoKHRoaXMpOlpoKHRoaXMpOzM9PXRoaXMucmVhZHlTdGF0ZSYmYWkodGhpcyl9fTtrLnNjPWZ1bmN0aW9uKGEpe3RoaXMuYSYmKHRoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQ9YSwkaCh0aGlzKSl9O2sucmM9ZnVuY3Rpb24oYSl7dGhpcy5hJiYodGhpcy5yZXNwb25zZT1hLCRoKHRoaXMpKX07ay5UYT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmk7YiYmYi5sb2coT2gsXCJGYWlsZWQgdG8gZmV0Y2ggdXJsIFwiK3RoaXMuZixhIGluc3RhbmNlb2YgRXJyb3I/YTpFcnJvcihhKSk7dGhpcy5hJiYkaCh0aGlzKX07XG5mdW5jdGlvbiAkaChhKXthLnJlYWR5U3RhdGU9NDthLmc9bnVsbDthLmM9bnVsbDthLm09bnVsbDtaaChhKX1rLnNldFJlcXVlc3RIZWFkZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLmwuYXBwZW5kKGEsYil9O2suZ2V0UmVzcG9uc2VIZWFkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYj90aGlzLmIuZ2V0KGEudG9Mb3dlckNhc2UoKSl8fFwiXCI6KChhPXRoaXMuaSkmJmEubG9nKE9oLFwiQXR0ZW1wdGluZyB0byBnZXQgcmVzcG9uc2UgaGVhZGVyIGJ1dCBubyBoZWFkZXJzIGhhdmUgYmVlbiByZWNlaXZlZCBmb3IgdXJsOiBcIit0aGlzLmYsdm9pZCAwKSxcIlwiKX07XG5rLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe2lmKCF0aGlzLmIpe3ZhciBhPXRoaXMuaTthJiZhLmxvZyhPaCxcIkF0dGVtcHRpbmcgdG8gZ2V0IGFsbCByZXNwb25zZSBoZWFkZXJzIGJ1dCBubyBoZWFkZXJzIGhhdmUgYmVlbiByZWNlaXZlZCBmb3IgdXJsOiBcIit0aGlzLmYsdm9pZCAwKTtyZXR1cm5cIlwifWE9W107Zm9yKHZhciBiPXRoaXMuYi5lbnRyaWVzKCksYz1iLm5leHQoKTshYy5kb25lOyljPWMudmFsdWUsYS5wdXNoKGNbMF0rXCI6IFwiK2NbMV0pLGM9Yi5uZXh0KCk7cmV0dXJuIGEuam9pbihcIlxcclxcblwiKX07ZnVuY3Rpb24gWmgoYSl7YS5vbnJlYWR5c3RhdGVjaGFuZ2UmJmEub25yZWFkeXN0YXRlY2hhbmdlLmNhbGwoYSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KFhoLnByb3RvdHlwZSxcIndpdGhDcmVkZW50aWFsc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cImluY2x1ZGVcIj09PXRoaXMuaH0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuaD1hP1wiaW5jbHVkZVwiOlwic2FtZS1vcmlnaW5cIn19KTtmdW5jdGlvbiBiaShhKXtJLmNhbGwodGhpcyk7dGhpcy5oZWFkZXJzPW5ldyBJZDt0aGlzLk89YXx8bnVsbDt0aGlzLmM9ITE7dGhpcy5BPXRoaXMuYT1udWxsO3RoaXMuaD10aGlzLlA9dGhpcy5sPVwiXCI7dGhpcy5mPXRoaXMuTj10aGlzLmk9dGhpcy5HPSExO3RoaXMuZz0wO3RoaXMubz1udWxsO3RoaXMubT1jaTt0aGlzLnU9dGhpcy5SPSExfXIoYmksSSk7dmFyIGNpPVwiXCI7YmkucHJvdG90eXBlLmI9VWgoXCJnb29nLm5ldC5YaHJJb1wiKTt2YXIgZGk9L15odHRwcz8kL2ksZWk9W1wiUE9TVFwiLFwiUFVUXCJdO1xuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihhLmEpdGhyb3cgRXJyb3IoXCJbZ29vZy5uZXQuWGhySW9dIE9iamVjdCBpcyBhY3RpdmUgd2l0aCBhbm90aGVyIHJlcXVlc3Q9XCIrYS5sK1wiOyBuZXdVcmk9XCIrYik7Yz1jP2MudG9VcHBlckNhc2UoKTpcIkdFVFwiO2EubD1iO2EuaD1cIlwiO2EuUD1jO2EuRz0hMTthLmM9ITA7YS5hPWEuTz9hLk8uYSgpOkRoLmEoKTthLkE9YS5PP0NoKGEuTyk6Q2goRGgpO2EuYS5vbnJlYWR5c3RhdGVjaGFuZ2U9cShhLlViLGEpO3RyeXtWaChhLmIsZ2koYSxcIk9wZW5pbmcgWGhyXCIpKSxhLk49ITAsYS5hLm9wZW4oYyxTdHJpbmcoYiksITApLGEuTj0hMX1jYXRjaChnKXtWaChhLmIsZ2koYSxcIkVycm9yIG9wZW5pbmcgWGhyOiBcIitnLm1lc3NhZ2UpKTtoaShhLGcpO3JldHVybn1iPWR8fFwiXCI7dmFyIGY9bmV3IElkKGEuaGVhZGVycyk7ZSYmSGQoZSxmdW5jdGlvbihnLGgpe2Yuc2V0KGgsZyl9KTtlPVRhKGYuWSgpKTtkPWwuRm9ybURhdGEmJmIgaW5zdGFuY2VvZlxubC5Gb3JtRGF0YTshVmEoZWksYyl8fGV8fGR8fGYuc2V0KFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKTtmLmZvckVhY2goZnVuY3Rpb24oZyxoKXt0aGlzLmEuc2V0UmVxdWVzdEhlYWRlcihoLGcpfSxhKTthLm0mJihhLmEucmVzcG9uc2VUeXBlPWEubSk7XCJ3aXRoQ3JlZGVudGlhbHNcImluIGEuYSYmYS5hLndpdGhDcmVkZW50aWFscyE9PWEuUiYmKGEuYS53aXRoQ3JlZGVudGlhbHM9YS5SKTt0cnl7aWkoYSksMDxhLmcmJihhLnU9amkoYS5hKSxWaChhLmIsZ2koYSxcIldpbGwgYWJvcnQgYWZ0ZXIgXCIrYS5nK1wibXMgaWYgaW5jb21wbGV0ZSwgeGhyMiBcIithLnUpKSxhLnU/KGEuYS50aW1lb3V0PWEuZyxhLmEub250aW1lb3V0PXEoYS5NYSxhKSk6YS5vPURkKGEuTWEsYS5nLGEpKSxWaChhLmIsZ2koYSxcIlNlbmRpbmcgcmVxdWVzdFwiKSksYS5pPSEwLGEuYS5zZW5kKGIpLGEuaT0hMX1jYXRjaChnKXtWaChhLmIsXG5naShhLFwiU2VuZCBlcnJvcjogXCIrZy5tZXNzYWdlKSksaGkoYSxnKX19ZnVuY3Rpb24gamkoYSl7cmV0dXJuIFdiJiZmYyg5KSYmXCJudW1iZXJcIj09PXR5cGVvZiBhLnRpbWVvdXQmJnZvaWQgMCE9PWEub250aW1lb3V0fWZ1bmN0aW9uIFVhKGEpe3JldHVyblwiY29udGVudC10eXBlXCI9PWEudG9Mb3dlckNhc2UoKX1rPWJpLnByb3RvdHlwZTtrLk1hPWZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGhhJiZ0aGlzLmEmJih0aGlzLmg9XCJUaW1lZCBvdXQgYWZ0ZXIgXCIrdGhpcy5nK1wibXMsIGFib3J0aW5nXCIsVmgodGhpcy5iLGdpKHRoaXMsdGhpcy5oKSksdGhpcy5kaXNwYXRjaEV2ZW50KFwidGltZW91dFwiKSx0aGlzLmFib3J0KDgpKX07ZnVuY3Rpb24gaGkoYSxiKXthLmM9ITE7YS5hJiYoYS5mPSEwLGEuYS5hYm9ydCgpLGEuZj0hMSk7YS5oPWI7a2koYSk7bGkoYSl9XG5mdW5jdGlvbiBraShhKXthLkd8fChhLkc9ITAsYS5kaXNwYXRjaEV2ZW50KFwiY29tcGxldGVcIiksYS5kaXNwYXRjaEV2ZW50KFwiZXJyb3JcIikpfWsuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLmEmJnRoaXMuYyYmKFZoKHRoaXMuYixnaSh0aGlzLFwiQWJvcnRpbmdcIikpLHRoaXMuYz0hMSx0aGlzLmY9ITAsdGhpcy5hLmFib3J0KCksdGhpcy5mPSExLHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLHRoaXMuZGlzcGF0Y2hFdmVudChcImFib3J0XCIpLGxpKHRoaXMpKX07ay5EYT1mdW5jdGlvbigpe3RoaXMuYSYmKHRoaXMuYyYmKHRoaXMuYz0hMSx0aGlzLmY9ITAsdGhpcy5hLmFib3J0KCksdGhpcy5mPSExKSxsaSh0aGlzLCEwKSk7YmkuJGEuRGEuY2FsbCh0aGlzKX07ay5VYj1mdW5jdGlvbigpe3RoaXMueGF8fCh0aGlzLk58fHRoaXMuaXx8dGhpcy5mP21pKHRoaXMpOnRoaXMuSWMoKSl9O2suSWM9ZnVuY3Rpb24oKXttaSh0aGlzKX07XG5mdW5jdGlvbiBtaShhKXtpZihhLmMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBoYSlpZihhLkFbMV0mJjQ9PW5pKGEpJiYyPT1vaShhKSlWaChhLmIsZ2koYSxcIkxvY2FsIHJlcXVlc3QgZXJyb3IgZGV0ZWN0ZWQgYW5kIGlnbm9yZWRcIikpO2Vsc2UgaWYoYS5pJiY0PT1uaShhKSlEZChhLlViLDAsYSk7ZWxzZSBpZihhLmRpc3BhdGNoRXZlbnQoXCJyZWFkeXN0YXRlY2hhbmdlXCIpLDQ9PW5pKGEpKXtWaChhLmIsZ2koYSxcIlJlcXVlc3QgY29tcGxldGVcIikpO2EuYz0hMTt0cnl7dmFyIGI9b2koYSk7YTpzd2l0Y2goYil7Y2FzZSAyMDA6Y2FzZSAyMDE6Y2FzZSAyMDI6Y2FzZSAyMDQ6Y2FzZSAyMDY6Y2FzZSAzMDQ6Y2FzZSAxMjIzOnZhciBjPSEwO2JyZWFrIGE7ZGVmYXVsdDpjPSExfXZhciBkO2lmKCEoZD1jKSl7dmFyIGU7aWYoZT0wPT09Yil7dmFyIGY9U3RyaW5nKGEubCkubWF0Y2goTGQpWzFdfHxudWxsO2lmKCFmJiZsLnNlbGYmJmwuc2VsZi5sb2NhdGlvbil7dmFyIGc9bC5zZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuZj1nLnN1YnN0cigwLGcubGVuZ3RoLTEpfWU9IWRpLnRlc3QoZj9mLnRvTG93ZXJDYXNlKCk6XCJcIil9ZD1lfWlmKGQpYS5kaXNwYXRjaEV2ZW50KFwiY29tcGxldGVcIiksYS5kaXNwYXRjaEV2ZW50KFwic3VjY2Vzc1wiKTtlbHNle3RyeXt2YXIgaD0yPG5pKGEpP2EuYS5zdGF0dXNUZXh0OlwiXCJ9Y2F0Y2gobil7VmgoYS5iLFwiQ2FuIG5vdCBnZXQgc3RhdHVzOiBcIituLm1lc3NhZ2UpLGg9XCJcIn1hLmg9aCtcIiBbXCIrb2koYSkrXCJdXCI7a2koYSl9fWZpbmFsbHl7bGkoYSl9fX1mdW5jdGlvbiBsaShhLGIpe2lmKGEuYSl7aWkoYSk7dmFyIGM9YS5hLGQ9YS5BWzBdP2xhOm51bGw7YS5hPW51bGw7YS5BPW51bGw7Ynx8YS5kaXNwYXRjaEV2ZW50KFwicmVhZHlcIik7dHJ5e2Mub25yZWFkeXN0YXRlY2hhbmdlPWR9Y2F0Y2goZSl7KGE9YS5iKSYmYS5sb2coTmgsXCJQcm9ibGVtIGVuY291bnRlcmVkIHJlc2V0dGluZyBvbnJlYWR5c3RhdGVjaGFuZ2U6IFwiK2UubWVzc2FnZSx2b2lkIDApfX19XG5mdW5jdGlvbiBpaShhKXthLmEmJmEudSYmKGEuYS5vbnRpbWVvdXQ9bnVsbCk7YS5vJiYobC5jbGVhclRpbWVvdXQoYS5vKSxhLm89bnVsbCl9ZnVuY3Rpb24gbmkoYSl7cmV0dXJuIGEuYT9hLmEucmVhZHlTdGF0ZTowfWZ1bmN0aW9uIG9pKGEpe3RyeXtyZXR1cm4gMjxuaShhKT9hLmEuc3RhdHVzOi0xfWNhdGNoKGIpe3JldHVybi0xfX1mdW5jdGlvbiBwaShhKXt0cnl7cmV0dXJuIGEuYT9hLmEucmVzcG9uc2VUZXh0OlwiXCJ9Y2F0Y2goYil7cmV0dXJuIFZoKGEuYixcIkNhbiBub3QgZ2V0IHJlc3BvbnNlVGV4dDogXCIrYi5tZXNzYWdlKSxcIlwifX1cbmsuZ2V0UmVzcG9uc2U9ZnVuY3Rpb24oKXt0cnl7aWYoIXRoaXMuYSlyZXR1cm4gbnVsbDtpZihcInJlc3BvbnNlXCJpbiB0aGlzLmEpcmV0dXJuIHRoaXMuYS5yZXNwb25zZTtzd2l0Y2godGhpcy5tKXtjYXNlIGNpOmNhc2UgXCJ0ZXh0XCI6cmV0dXJuIHRoaXMuYS5yZXNwb25zZVRleHQ7Y2FzZSBcImFycmF5YnVmZmVyXCI6aWYoXCJtb3pSZXNwb25zZUFycmF5QnVmZmVyXCJpbiB0aGlzLmEpcmV0dXJuIHRoaXMuYS5tb3pSZXNwb25zZUFycmF5QnVmZmVyfXZhciBhPXRoaXMuYjthJiZhLmxvZyhOaCxcIlJlc3BvbnNlIHR5cGUgXCIrdGhpcy5tK1wiIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBicm93c2VyXCIsdm9pZCAwKTtyZXR1cm4gbnVsbH1jYXRjaChiKXtyZXR1cm4gVmgodGhpcy5iLFwiQ2FuIG5vdCBnZXQgcmVzcG9uc2U6IFwiK2IubWVzc2FnZSksbnVsbH19O2Z1bmN0aW9uIGdpKGEsYil7cmV0dXJuIGIrXCIgW1wiK2EuUCtcIiBcIithLmwrXCIgXCIrb2koYSkrXCJdXCJ9Oy8qXG4gUG9ydGlvbnMgb2YgdGhpcyBjb2RlIGFyZSBmcm9tIE1vY2hpS2l0LCByZWNlaXZlZCBieVxuIFRoZSBDbG9zdXJlIEF1dGhvcnMgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBBbGwgb3RoZXIgY29kZSBpcyBDb3B5cmlnaHRcbiAyMDA1LTIwMDkgVGhlIENsb3N1cmUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiovXG5mdW5jdGlvbiBxaShhKXt2YXIgYj1yaTt0aGlzLmc9W107dGhpcy51PWI7dGhpcy5vPWF8fG51bGw7dGhpcy5mPXRoaXMuYT0hMTt0aGlzLmM9dm9pZCAwO3RoaXMubT10aGlzLkE9dGhpcy5pPSExO3RoaXMuaD0wO3RoaXMuYj1udWxsO3RoaXMubD0wfXFpLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oYSl7aWYodGhpcy5hKXRoaXMuYyBpbnN0YW5jZW9mIHFpJiZ0aGlzLmMuY2FuY2VsKCk7ZWxzZXtpZih0aGlzLmIpe3ZhciBiPXRoaXMuYjtkZWxldGUgdGhpcy5iO2E/Yi5jYW5jZWwoYSk6KGIubC0tLDA+PWIubCYmYi5jYW5jZWwoKSl9dGhpcy51P3RoaXMudS5jYWxsKHRoaXMubyx0aGlzKTp0aGlzLm09ITA7dGhpcy5hfHwoYT1uZXcgc2kodGhpcyksdGkodGhpcyksdWkodGhpcywhMSxhKSl9fTtxaS5wcm90b3R5cGUudj1mdW5jdGlvbihhLGIpe3RoaXMuaT0hMTt1aSh0aGlzLGEsYil9O2Z1bmN0aW9uIHVpKGEsYixjKXthLmE9ITA7YS5jPWM7YS5mPSFiO3ZpKGEpfVxuZnVuY3Rpb24gdGkoYSl7aWYoYS5hKXtpZighYS5tKXRocm93IG5ldyB3aShhKTthLm09ITF9fWZ1bmN0aW9uIHhpKGEsYil7eWkoYSxudWxsLGIsdm9pZCAwKX1mdW5jdGlvbiB5aShhLGIsYyxkKXthLmcucHVzaChbYixjLGRdKTthLmEmJnZpKGEpfXFpLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9bmV3IEQoZnVuY3Rpb24oZyxoKXtkPWc7ZT1ofSk7eWkodGhpcyxkLGZ1bmN0aW9uKGcpe2cgaW5zdGFuY2VvZiBzaT9mLmNhbmNlbCgpOmUoZyl9KTtyZXR1cm4gZi50aGVuKGEsYixjKX07cWkucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlPSEwO2Z1bmN0aW9uIHppKGEpe3JldHVybiBTYShhLmcsZnVuY3Rpb24oYil7cmV0dXJuIG9hKGJbMV0pfSl9XG5mdW5jdGlvbiB2aShhKXtpZihhLmgmJmEuYSYmemkoYSkpe3ZhciBiPWEuaCxjPUFpW2JdO2MmJihsLmNsZWFyVGltZW91dChjLmEpLGRlbGV0ZSBBaVtiXSk7YS5oPTB9YS5iJiYoYS5iLmwtLSxkZWxldGUgYS5iKTtiPWEuYztmb3IodmFyIGQ9Yz0hMTthLmcubGVuZ3RoJiYhYS5pOyl7dmFyIGU9YS5nLnNoaWZ0KCksZj1lWzBdLGc9ZVsxXTtlPWVbMl07aWYoZj1hLmY/ZzpmKXRyeXt2YXIgaD1mLmNhbGwoZXx8YS5vLGIpO3ZvaWQgMCE9PWgmJihhLmY9YS5mJiYoaD09Ynx8aCBpbnN0YW5jZW9mIEVycm9yKSxhLmM9Yj1oKTtpZihFYShiKXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGwuUHJvbWlzZSYmYiBpbnN0YW5jZW9mIGwuUHJvbWlzZSlkPSEwLGEuaT0hMH1jYXRjaChuKXtiPW4sYS5mPSEwLHppKGEpfHwoYz0hMCl9fWEuYz1iO2QmJihoPXEoYS52LGEsITApLGQ9cShhLnYsYSwhMSksYiBpbnN0YW5jZW9mIHFpPyh5aShiLGgsZCksYi5BPSEwKTpiLnRoZW4oaCxkKSk7YyYmKGI9XG5uZXcgQmkoYiksQWlbYi5hXT1iLGEuaD1iLmEpfWZ1bmN0aW9uIHdpKCl7dS5jYWxsKHRoaXMpfXIod2ksdSk7d2kucHJvdG90eXBlLm1lc3NhZ2U9XCJEZWZlcnJlZCBoYXMgYWxyZWFkeSBmaXJlZFwiO3dpLnByb3RvdHlwZS5uYW1lPVwiQWxyZWFkeUNhbGxlZEVycm9yXCI7ZnVuY3Rpb24gc2koKXt1LmNhbGwodGhpcyl9cihzaSx1KTtzaS5wcm90b3R5cGUubWVzc2FnZT1cIkRlZmVycmVkIHdhcyBjYW5jZWxlZFwiO3NpLnByb3RvdHlwZS5uYW1lPVwiQ2FuY2VsZWRFcnJvclwiO2Z1bmN0aW9uIEJpKGEpe3RoaXMuYT1sLnNldFRpbWVvdXQocSh0aGlzLmMsdGhpcyksMCk7dGhpcy5iPWF9QmkucHJvdG90eXBlLmM9ZnVuY3Rpb24oKXtkZWxldGUgQWlbdGhpcy5hXTt0aHJvdyB0aGlzLmI7fTt2YXIgQWk9e307ZnVuY3Rpb24gQ2koYSl7dmFyIGI9e30sYz1iLmRvY3VtZW50fHxkb2N1bWVudCxkPXliKGEpLnRvU3RyaW5nKCksZT1vYyhkb2N1bWVudCxcIlNDUklQVFwiKSxmPXtWYjplLE1hOnZvaWQgMH0sZz1uZXcgcWkoZiksaD1udWxsLG49bnVsbCE9Yi50aW1lb3V0P2IudGltZW91dDo1RTM7MDxuJiYoaD13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe0RpKGUsITApO3ZhciBwPW5ldyBFaShGaSxcIlRpbWVvdXQgcmVhY2hlZCBmb3IgbG9hZGluZyBzY3JpcHQgXCIrZCk7dGkoZyk7dWkoZywhMSxwKX0sbiksZi5NYT1oKTtlLm9ubG9hZD1lLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2UucmVhZHlTdGF0ZSYmXCJsb2FkZWRcIiE9ZS5yZWFkeVN0YXRlJiZcImNvbXBsZXRlXCIhPWUucmVhZHlTdGF0ZXx8KERpKGUsYi53ZHx8ITEsaCksdGkoZyksdWkoZywhMCxudWxsKSl9O2Uub25lcnJvcj1mdW5jdGlvbigpe0RpKGUsITAsaCk7dmFyIHA9bmV3IEVpKEdpLFwiRXJyb3Igd2hpbGUgbG9hZGluZyBzY3JpcHQgXCIrXG5kKTt0aShnKTt1aShnLCExLHApfTtmPWIuYXR0cmlidXRlc3x8e307eihmLHt0eXBlOlwidGV4dC9qYXZhc2NyaXB0XCIsY2hhcnNldDpcIlVURi04XCJ9KTtsYyhlLGYpO09iKGUsYSk7SGkoYykuYXBwZW5kQ2hpbGQoZSk7cmV0dXJuIGd9ZnVuY3Rpb24gSGkoYSl7dmFyIGI7cmV0dXJuKGI9KGF8fGRvY3VtZW50KS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkhFQURcIikpJiYwIT1iLmxlbmd0aD9iWzBdOmEuZG9jdW1lbnRFbGVtZW50fWZ1bmN0aW9uIHJpKCl7aWYodGhpcyYmdGhpcy5WYil7dmFyIGE9dGhpcy5WYjthJiZcIlNDUklQVFwiPT1hLnRhZ05hbWUmJkRpKGEsITAsdGhpcy5NYSl9fVxuZnVuY3Rpb24gRGkoYSxiLGMpe251bGwhPWMmJmwuY2xlYXJUaW1lb3V0KGMpO2Eub25sb2FkPWxhO2Eub25lcnJvcj1sYTthLm9ucmVhZHlzdGF0ZWNoYW5nZT1sYTtiJiZ3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2EmJmEucGFyZW50Tm9kZSYmYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEpfSwwKX12YXIgR2k9MCxGaT0xO2Z1bmN0aW9uIEVpKGEsYil7dmFyIGM9XCJKc2xvYWRlciBlcnJvciAoY29kZSAjXCIrYStcIilcIjtiJiYoYys9XCI6IFwiK2IpO3UuY2FsbCh0aGlzLGMpO3RoaXMuY29kZT1hfXIoRWksdSk7ZnVuY3Rpb24gSWkoYSl7dGhpcy5mPWF9cihJaSxCaCk7SWkucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuZn07SWkucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXtyZXR1cm57fX07XG5mdW5jdGlvbiBKaShhLGIsYyl7dGhpcy5jPWE7YT1ifHx7fTt0aGlzLmw9YS5zZWN1cmVUb2tlbkVuZHBvaW50fHxcImh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlYXBpcy5jb20vdjEvdG9rZW5cIjt0aGlzLnY9YS5zZWN1cmVUb2tlblRpbWVvdXR8fEtpO3RoaXMuZz1uYihhLnNlY3VyZVRva2VuSGVhZGVyc3x8TGkpO3RoaXMuaD1hLmZpcmViYXNlRW5kcG9pbnR8fFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vaWRlbnRpdHl0b29sa2l0L3YzL3JlbHlpbmdwYXJ0eS9cIjt0aGlzLmk9YS5pZGVudGl0eVBsYXRmb3JtRW5kcG9pbnR8fFwiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vdjIvXCI7dGhpcy5tPWEuZmlyZWJhc2VUaW1lb3V0fHxNaTt0aGlzLmE9bmIoYS5maXJlYmFzZUhlYWRlcnN8fE5pKTtjJiYodGhpcy5hW1wiWC1DbGllbnQtVmVyc2lvblwiXT1jLHRoaXMuZ1tcIlgtQ2xpZW50LVZlcnNpb25cIl09Yyk7Yz1cIk5vZGVcIj09S2UoKTtjPWwuWE1MSHR0cFJlcXVlc3R8fFxuYyYmZmlyZWJhc2UuSU5URVJOQUwubm9kZSYmZmlyZWJhc2UuSU5URVJOQUwubm9kZS5YTUxIdHRwUmVxdWVzdDtpZighYyYmIUplKCkpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiVGhlIFhNTEh0dHBSZXF1ZXN0IGNvbXBhdGliaWxpdHkgbGlicmFyeSB3YXMgbm90IGZvdW5kLlwiKTt0aGlzLmY9dm9pZCAwO0plKCk/dGhpcy5mPW5ldyBXaChzZWxmKTpMZSgpP3RoaXMuZj1uZXcgSWkoYyk6dGhpcy5mPW5ldyBHaDt0aGlzLmI9bnVsbH12YXIgT2ksRWc9XCJpZFRva2VuXCIsS2k9bmV3IFplKDNFNCw2RTQpLExpPXtcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJ9LE1pPW5ldyBaZSgzRTQsNkU0KSxOaT17XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL2pzb25cIn07ZnVuY3Rpb24gUGkoYSxiKXtiP2EuYVtcIlgtRmlyZWJhc2UtTG9jYWxlXCJdPWI6ZGVsZXRlIGEuYVtcIlgtRmlyZWJhc2UtTG9jYWxlXCJdfVxuZnVuY3Rpb24gUWkoYSxiKXtiJiYoYS5sPVJpKFwiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLGIpLGEuaD1SaShcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCIsYiksYS5pPVJpKFwiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vdjIvXCIsYikpfWZ1bmN0aW9uIFJpKGEsYil7YT1iZShhKTtiPWJlKGIudXJsKTthLmM9YS5hK2EuYztPZChhLGIuZik7YS5hPWIuYTtQZChhLGIuZyk7cmV0dXJuIGEudG9TdHJpbmcoKX1mdW5jdGlvbiBTaShhLGIpe2I/KGEuYVtcIlgtQ2xpZW50LVZlcnNpb25cIl09YixhLmdbXCJYLUNsaWVudC1WZXJzaW9uXCJdPWIpOihkZWxldGUgYS5hW1wiWC1DbGllbnQtVmVyc2lvblwiXSxkZWxldGUgYS5nW1wiWC1DbGllbnQtVmVyc2lvblwiXSl9SmkucHJvdG90eXBlLlM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ifTtcbmZ1bmN0aW9uIFRpKGEsYixjLGQsZSxmLGcpe3VlKCl8fEplKCk/YT1xKGEudSxhKTooT2l8fChPaT1uZXcgRChmdW5jdGlvbihoLG4pe1VpKGgsbil9KSksYT1xKGEubyxhKSk7YShiLGMsZCxlLGYsZyl9XG5KaS5wcm90b3R5cGUudT1mdW5jdGlvbihhLGIsYyxkLGUsZil7aWYoSmUoKSYmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgbC5mZXRjaHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBsLkhlYWRlcnN8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgbC5SZXF1ZXN0KSl0aHJvdyBuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIixcImZldGNoLCBIZWFkZXJzIGFuZCBSZXF1ZXN0IG5hdGl2ZSBBUElzIG9yIGVxdWl2YWxlbnQgUG9seWZpbGxzIG11c3QgYmUgYXZhaWxhYmxlIHRvIHN1cHBvcnQgSFRUUCByZXF1ZXN0cyBmcm9tIGEgV29ya2VyIGVudmlyb25tZW50LlwiKTt2YXIgZz1uZXcgYmkodGhpcy5mKTtpZihmKXtnLmc9TWF0aC5tYXgoMCxmKTt2YXIgaD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zy5kaXNwYXRjaEV2ZW50KFwidGltZW91dFwiKX0sZil9cWQoZyxcImNvbXBsZXRlXCIsZnVuY3Rpb24oKXtoJiZjbGVhclRpbWVvdXQoaCk7dmFyIG49bnVsbDt0cnl7bj1cbkpTT04ucGFyc2UocGkodGhpcykpfHxudWxsfWNhdGNoKHApe249bnVsbH1iJiZiKG4pfSk7d2QoZyxcInJlYWR5XCIsZnVuY3Rpb24oKXtoJiZjbGVhclRpbWVvdXQoaCk7WGModGhpcyl9KTt3ZChnLFwidGltZW91dFwiLGZ1bmN0aW9uKCl7aCYmY2xlYXJUaW1lb3V0KGgpO1hjKHRoaXMpO2ImJmIobnVsbCl9KTtmaShnLGEsYyxkLGUpfTt2YXIgVmk9bmV3IHFiKHJiLFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvY2xpZW50LmpzP29ubG9hZD0le29ubG9hZH1cIiksV2k9XCJfX2ZjYlwiK01hdGguZmxvb3IoMUU2Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCk7XG5mdW5jdGlvbiBVaShhLGIpe2lmKCgod2luZG93LmdhcGl8fHt9KS5jbGllbnR8fHt9KS5yZXF1ZXN0KWEoKTtlbHNle2xbV2ldPWZ1bmN0aW9uKCl7KCh3aW5kb3cuZ2FwaXx8e30pLmNsaWVudHx8e30pLnJlcXVlc3Q/YSgpOmIoRXJyb3IoXCJDT1JTX1VOU1VQUE9SVEVEXCIpKX07dmFyIGM9emIoVmkse29ubG9hZDpXaX0pO3hpKENpKGMpLGZ1bmN0aW9uKCl7YihFcnJvcihcIkNPUlNfVU5TVVBQT1JURURcIikpfSl9fVxuSmkucHJvdG90eXBlLm89ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj10aGlzO09pLnRoZW4oZnVuY3Rpb24oKXt3aW5kb3cuZ2FwaS5jbGllbnQuc2V0QXBpS2V5KGYuYyk7dmFyIGc9d2luZG93LmdhcGkuYXV0aC5nZXRUb2tlbigpO3dpbmRvdy5nYXBpLmF1dGguc2V0VG9rZW4obnVsbCk7d2luZG93LmdhcGkuY2xpZW50LnJlcXVlc3Qoe3BhdGg6YSxtZXRob2Q6Yyxib2R5OmQsaGVhZGVyczplLGF1dGhUeXBlOlwibm9uZVwiLGNhbGxiYWNrOmZ1bmN0aW9uKGgpe3dpbmRvdy5nYXBpLmF1dGguc2V0VG9rZW4oZyk7YiYmYihoKX19KX0pLnMoZnVuY3Rpb24oZyl7YiYmYih7ZXJyb3I6e21lc3NhZ2U6ZyYmZy5tZXNzYWdlfHxcIkNPUlNfVU5TVVBQT1JURURcIn19KX0pfTtcbmZ1bmN0aW9uIFhpKGEsYil7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGMsZCl7XCJyZWZyZXNoX3Rva2VuXCI9PWIuZ3JhbnRfdHlwZSYmYi5yZWZyZXNoX3Rva2VufHxcImF1dGhvcml6YXRpb25fY29kZVwiPT1iLmdyYW50X3R5cGUmJmIuY29kZT9UaShhLGEubCtcIj9rZXk9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGEuYyksZnVuY3Rpb24oZSl7ZT9lLmVycm9yP2QoWWkoZSkpOmUuYWNjZXNzX3Rva2VuJiZlLnJlZnJlc2hfdG9rZW4/YyhlKTpkKG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIikpOmQobmV3IHQoXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCIpKX0sXCJQT1NUXCIsZmUoYikudG9TdHJpbmcoKSxhLmcsYS52LmdldCgpKTpkKG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIikpfSl9XG5mdW5jdGlvbiBaaShhLGIsYyxkLGUsZixnKXt2YXIgaD1iZShiK2MpO0ooaCxcImtleVwiLGEuYyk7ZyYmSihoLFwiY2JcIix2YSgpLnRvU3RyaW5nKCkpO3ZhciBuPVwiR0VUXCI9PWQ7aWYobilmb3IodmFyIHAgaW4gZSllLmhhc093blByb3BlcnR5KHApJiZKKGgscCxlW3BdKTtyZXR1cm4gbmV3IEQoZnVuY3Rpb24odixCKXtUaShhLGgudG9TdHJpbmcoKSxmdW5jdGlvbihBKXtBP0EuZXJyb3I/QihZaShBLGZ8fHt9KSk6dihBKTpCKG5ldyB0KFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKSl9LGQsbj92b2lkIDA6a2UoVmUoZSkpLGEuYSxhLm0uZ2V0KCkpfSl9ZnVuY3Rpb24gJGkoYSl7YT1hLmVtYWlsO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYXx8IURlLnRlc3QoYSkpdGhyb3cgbmV3IHQoXCJpbnZhbGlkLWVtYWlsXCIpO31mdW5jdGlvbiBhaihhKXtcImVtYWlsXCJpbiBhJiYkaShhKX1cbmZ1bmN0aW9uIGJqKGEsYil7cmV0dXJuIE8oYSxjaix7aWRlbnRpZmllcjpiLGNvbnRpbnVlVXJpOlNlKCk/cmUoKTpcImh0dHA6Ly9sb2NhbGhvc3RcIn0pLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGMuc2lnbmluTWV0aG9kc3x8W119KX1mdW5jdGlvbiBkaihhKXtyZXR1cm4gTyhhLGVqLHt9KS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBiLmF1dGhvcml6ZWREb21haW5zfHxbXX0pfWZ1bmN0aW9uIFAoYSl7aWYoIWFbRWddKXtpZihhLm1mYVBlbmRpbmdDcmVkZW50aWFsKXRocm93IG5ldyB0KFwibXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIixudWxsLG5iKGEpKTt0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO319XG5mdW5jdGlvbiBmaihhKXtpZihhLnBob25lTnVtYmVyfHxhLnRlbXBvcmFyeVByb29mKXtpZighYS5waG9uZU51bWJlcnx8IWEudGVtcG9yYXJ5UHJvb2YpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9ZWxzZXtpZighYS5zZXNzaW9uSW5mbyl0aHJvdyBuZXcgdChcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkXCIpO2lmKCFhLmNvZGUpdGhyb3cgbmV3IHQoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlXCIpO319SmkucHJvdG90eXBlLnliPWZ1bmN0aW9uKCl7cmV0dXJuIE8odGhpcyxnaix7fSl9O0ppLnByb3RvdHlwZS5BYj1mdW5jdGlvbihhLGIpe3JldHVybiBPKHRoaXMsaGose2lkVG9rZW46YSxlbWFpbDpifSl9O0ppLnByb3RvdHlwZS5CYj1mdW5jdGlvbihhLGIpe3JldHVybiBPKHRoaXMsZGgse2lkVG9rZW46YSxwYXNzd29yZDpifSl9O3ZhciBpaj17ZGlzcGxheU5hbWU6XCJESVNQTEFZX05BTUVcIixwaG90b1VybDpcIlBIT1RPX1VSTFwifTtrPUppLnByb3RvdHlwZTtcbmsuQ2I9ZnVuY3Rpb24oYSxiKXt2YXIgYz17aWRUb2tlbjphfSxkPVtdO2xiKGlqLGZ1bmN0aW9uKGUsZil7dmFyIGc9YltmXTtudWxsPT09Zz9kLnB1c2goZSk6ZiBpbiBiJiYoY1tmXT1nKX0pO2QubGVuZ3RoJiYoYy5kZWxldGVBdHRyaWJ1dGU9ZCk7cmV0dXJuIE8odGhpcyxoaixjKX07ay51Yj1mdW5jdGlvbihhLGIpe2E9e3JlcXVlc3RUeXBlOlwiUEFTU1dPUkRfUkVTRVRcIixlbWFpbDphfTt6KGEsYik7cmV0dXJuIE8odGhpcyxqaixhKX07ay52Yj1mdW5jdGlvbihhLGIpe2E9e3JlcXVlc3RUeXBlOlwiRU1BSUxfU0lHTklOXCIsZW1haWw6YX07eihhLGIpO3JldHVybiBPKHRoaXMsa2osYSl9O2sudGI9ZnVuY3Rpb24oYSxiKXthPXtyZXF1ZXN0VHlwZTpcIlZFUklGWV9FTUFJTFwiLGlkVG9rZW46YX07eihhLGIpO3JldHVybiBPKHRoaXMsbGosYSl9O1xuay5EYj1mdW5jdGlvbihhLGIsYyl7YT17cmVxdWVzdFR5cGU6XCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFwiLGlkVG9rZW46YSxuZXdFbWFpbDpifTt6KGEsYyk7cmV0dXJuIE8odGhpcyxtaixhKX07ZnVuY3Rpb24gcGgoYSxiKXtyZXR1cm4gTyhhLG5qLGIpfWsuZWI9ZnVuY3Rpb24oYSl7cmV0dXJuIE8odGhpcyxvaixhKX07ZnVuY3Rpb24gbmgoYSxiKXtyZXR1cm4gTyhhLHBqLGIpLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGMucGhvbmVTZXNzaW9uSW5mby5zZXNzaW9uSW5mb30pfVxuZnVuY3Rpb24gcWooYSl7aWYoIWEucGhvbmVWZXJpZmljYXRpb25JbmZvKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7aWYoIWEucGhvbmVWZXJpZmljYXRpb25JbmZvLnNlc3Npb25JbmZvKXRocm93IG5ldyB0KFwibWlzc2luZy12ZXJpZmljYXRpb24taWRcIik7aWYoIWEucGhvbmVWZXJpZmljYXRpb25JbmZvLmNvZGUpdGhyb3cgbmV3IHQoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlXCIpO31mdW5jdGlvbiBvaChhLGIpe3JldHVybiBPKGEscmosYikudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYy5waG9uZVJlc3BvbnNlSW5mby5zZXNzaW9uSW5mb30pfWZ1bmN0aW9uIHNqKGEsYixjKXtyZXR1cm4gTyhhLHRqLHtpZFRva2VuOmIsZGVsZXRlUHJvdmlkZXI6Y30pfWZ1bmN0aW9uIHVqKGEpe2lmKCFhLnJlcXVlc3RVcml8fCFhLnNlc3Npb25JZCYmIWEucG9zdEJvZHkmJiFhLnBlbmRpbmdUb2tlbil0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO31cbmZ1bmN0aW9uIHZqKGEsYil7Yi5vYXV0aElkVG9rZW4mJmIucHJvdmlkZXJJZCYmMD09Yi5wcm92aWRlcklkLmluZGV4T2YoXCJvaWRjLlwiKSYmIWIucGVuZGluZ1Rva2VuJiYoYS5zZXNzaW9uSWQ/Yi5ub25jZT1hLnNlc3Npb25JZDphLnBvc3RCb2R5JiYoYT1uZXcgVGQoYS5wb3N0Qm9keSksamUoYSxcIm5vbmNlXCIpJiYoYi5ub25jZT1hLmdldChcIm5vbmNlXCIpKSkpO3JldHVybiBifVxuZnVuY3Rpb24gd2ooYSl7dmFyIGI9bnVsbDthLm5lZWRDb25maXJtYXRpb24/KGEuY29kZT1cImFjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWxcIixiPUFoKGEpKTpcIkZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEXCI9PWEuZXJyb3JNZXNzYWdlPyhhLmNvZGU9XCJjcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCIsYj1BaChhKSk6XCJFTUFJTF9FWElTVFNcIj09YS5lcnJvck1lc3NhZ2U/KGEuY29kZT1cImVtYWlsLWFscmVhZHktaW4tdXNlXCIsYj1BaChhKSk6YS5lcnJvck1lc3NhZ2UmJihiPXhqKGEuZXJyb3JNZXNzYWdlKSk7aWYoYil0aHJvdyBiO1AoYSl9ZnVuY3Rpb24gR2coYSxiKXtiLnJldHVybklkcENyZWRlbnRpYWw9ITA7cmV0dXJuIE8oYSx5aixiKX1mdW5jdGlvbiBJZyhhLGIpe2IucmV0dXJuSWRwQ3JlZGVudGlhbD0hMDtyZXR1cm4gTyhhLHpqLGIpfVxuZnVuY3Rpb24gSmcoYSxiKXtiLnJldHVybklkcENyZWRlbnRpYWw9ITA7Yi5hdXRvQ3JlYXRlPSExO3JldHVybiBPKGEsQWosYil9ZnVuY3Rpb24gQmooYSl7aWYoIWEub29iQ29kZSl0aHJvdyBuZXcgdChcImludmFsaWQtYWN0aW9uLWNvZGVcIik7fWsubWI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gTyh0aGlzLENqLHtvb2JDb2RlOmEsbmV3UGFzc3dvcmQ6Yn0pfTtrLlFhPWZ1bmN0aW9uKGEpe3JldHVybiBPKHRoaXMsRGose29vYkNvZGU6YX0pfTtrLmliPWZ1bmN0aW9uKGEpe3JldHVybiBPKHRoaXMsRWose29vYkNvZGU6YX0pfTtcbnZhciBFaj17ZW5kcG9pbnQ6XCJzZXRBY2NvdW50SW5mb1wiLEI6QmosWjpcImVtYWlsXCIsQzohMH0sRGo9e2VuZHBvaW50OlwicmVzZXRQYXNzd29yZFwiLEI6QmosRjpmdW5jdGlvbihhKXt2YXIgYj1hLnJlcXVlc3RUeXBlO2lmKCFifHwhYS5lbWFpbCYmXCJFTUFJTF9TSUdOSU5cIiE9YiYmXCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFwiIT1iKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxDOiEwfSxGaj17ZW5kcG9pbnQ6XCJzaWdudXBOZXdVc2VyXCIsQjpmdW5jdGlvbihhKXskaShhKTtpZighYS5wYXNzd29yZCl0aHJvdyBuZXcgdChcIndlYWstcGFzc3dvcmRcIik7fSxGOlAsVTohMCxDOiEwfSxjaj17ZW5kcG9pbnQ6XCJjcmVhdGVBdXRoVXJpXCIsQzohMH0sR2o9e2VuZHBvaW50OlwiZGVsZXRlQWNjb3VudFwiLE06W1wiaWRUb2tlblwiXX0sdGo9e2VuZHBvaW50Olwic2V0QWNjb3VudEluZm9cIixNOltcImlkVG9rZW5cIixcImRlbGV0ZVByb3ZpZGVyXCJdLEI6ZnVuY3Rpb24oYSl7aWYoIUFycmF5LmlzQXJyYXkoYS5kZWxldGVQcm92aWRlcikpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTtcbn19LGFoPXtlbmRwb2ludDpcImVtYWlsTGlua1NpZ25pblwiLE06W1wiZW1haWxcIixcIm9vYkNvZGVcIl0sQjokaSxGOlAsVTohMCxDOiEwfSxjaD17ZW5kcG9pbnQ6XCJlbWFpbExpbmtTaWduaW5cIixNOltcImlkVG9rZW5cIixcImVtYWlsXCIsXCJvb2JDb2RlXCJdLEI6JGksRjpQLFU6ITB9LEhqPXtlbmRwb2ludDpcImFjY291bnRzL21mYUVucm9sbG1lbnQ6ZmluYWxpemVcIixNOltcImlkVG9rZW5cIixcInBob25lVmVyaWZpY2F0aW9uSW5mb1wiXSxCOnFqLEY6UCxDOiEwLE5hOiEwfSxJaj17ZW5kcG9pbnQ6XCJhY2NvdW50cy9tZmFTaWduSW46ZmluYWxpemVcIixNOltcIm1mYVBlbmRpbmdDcmVkZW50aWFsXCIsXCJwaG9uZVZlcmlmaWNhdGlvbkluZm9cIl0sQjpxaixGOlAsQzohMCxOYTohMH0sSmo9e2VuZHBvaW50OlwiZ2V0QWNjb3VudEluZm9cIn0sa2o9e2VuZHBvaW50OlwiZ2V0T29iQ29uZmlybWF0aW9uQ29kZVwiLE06W1wicmVxdWVzdFR5cGVcIl0sQjpmdW5jdGlvbihhKXtpZihcIkVNQUlMX1NJR05JTlwiIT1hLnJlcXVlc3RUeXBlKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7XG4kaShhKX0sWjpcImVtYWlsXCIsQzohMH0sbGo9e2VuZHBvaW50OlwiZ2V0T29iQ29uZmlybWF0aW9uQ29kZVwiLE06W1wiaWRUb2tlblwiLFwicmVxdWVzdFR5cGVcIl0sQjpmdW5jdGlvbihhKXtpZihcIlZFUklGWV9FTUFJTFwiIT1hLnJlcXVlc3RUeXBlKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxaOlwiZW1haWxcIixDOiEwfSxtaj17ZW5kcG9pbnQ6XCJnZXRPb2JDb25maXJtYXRpb25Db2RlXCIsTTpbXCJpZFRva2VuXCIsXCJuZXdFbWFpbFwiLFwicmVxdWVzdFR5cGVcIl0sQjpmdW5jdGlvbihhKXtpZihcIlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXCIhPWEucmVxdWVzdFR5cGUpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9LFo6XCJlbWFpbFwiLEM6ITB9LGpqPXtlbmRwb2ludDpcImdldE9vYkNvbmZpcm1hdGlvbkNvZGVcIixNOltcInJlcXVlc3RUeXBlXCJdLEI6ZnVuY3Rpb24oYSl7aWYoXCJQQVNTV09SRF9SRVNFVFwiIT1hLnJlcXVlc3RUeXBlKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7XG4kaShhKX0sWjpcImVtYWlsXCIsQzohMH0sZWo9e2tiOiEwLGVuZHBvaW50OlwiZ2V0UHJvamVjdENvbmZpZ1wiLFRiOlwiR0VUXCJ9LEtqPXtrYjohMCxlbmRwb2ludDpcImdldFJlY2FwdGNoYVBhcmFtXCIsVGI6XCJHRVRcIixGOmZ1bmN0aW9uKGEpe2lmKCFhLnJlY2FwdGNoYVNpdGVLZXkpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9fSxDaj17ZW5kcG9pbnQ6XCJyZXNldFBhc3N3b3JkXCIsQjpCaixaOlwiZW1haWxcIixDOiEwfSxuaj17ZW5kcG9pbnQ6XCJzZW5kVmVyaWZpY2F0aW9uQ29kZVwiLE06W1wicGhvbmVOdW1iZXJcIixcInJlY2FwdGNoYVRva2VuXCJdLFo6XCJzZXNzaW9uSW5mb1wiLEM6ITB9LGhqPXtlbmRwb2ludDpcInNldEFjY291bnRJbmZvXCIsTTpbXCJpZFRva2VuXCJdLEI6YWosVTohMH0sZGg9e2VuZHBvaW50Olwic2V0QWNjb3VudEluZm9cIixNOltcImlkVG9rZW5cIl0sQjpmdW5jdGlvbihhKXthaihhKTtpZighYS5wYXNzd29yZCl0aHJvdyBuZXcgdChcIndlYWstcGFzc3dvcmRcIik7fSxGOlAsXG5VOiEwfSxnaj17ZW5kcG9pbnQ6XCJzaWdudXBOZXdVc2VyXCIsRjpQLFU6ITAsQzohMH0scGo9e2VuZHBvaW50OlwiYWNjb3VudHMvbWZhRW5yb2xsbWVudDpzdGFydFwiLE06W1wiaWRUb2tlblwiLFwicGhvbmVFbnJvbGxtZW50SW5mb1wiXSxCOmZ1bmN0aW9uKGEpe2lmKCFhLnBob25lRW5yb2xsbWVudEluZm8pdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTtpZighYS5waG9uZUVucm9sbG1lbnRJbmZvLnBob25lTnVtYmVyKXRocm93IG5ldyB0KFwibWlzc2luZy1waG9uZS1udW1iZXJcIik7aWYoIWEucGhvbmVFbnJvbGxtZW50SW5mby5yZWNhcHRjaGFUb2tlbil0aHJvdyBuZXcgdChcIm1pc3NpbmctYXBwLWNyZWRlbnRpYWxcIik7fSxGOmZ1bmN0aW9uKGEpe2lmKCFhLnBob25lU2Vzc2lvbkluZm98fCFhLnBob25lU2Vzc2lvbkluZm8uc2Vzc2lvbkluZm8pdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9LEM6ITAsTmE6ITB9LHJqPXtlbmRwb2ludDpcImFjY291bnRzL21mYVNpZ25JbjpzdGFydFwiLFxuTTpbXCJtZmFQZW5kaW5nQ3JlZGVudGlhbFwiLFwibWZhRW5yb2xsbWVudElkXCIsXCJwaG9uZVNpZ25JbkluZm9cIl0sQjpmdW5jdGlvbihhKXtpZighYS5waG9uZVNpZ25JbkluZm98fCFhLnBob25lU2lnbkluSW5mby5yZWNhcHRjaGFUb2tlbil0aHJvdyBuZXcgdChcIm1pc3NpbmctYXBwLWNyZWRlbnRpYWxcIik7fSxGOmZ1bmN0aW9uKGEpe2lmKCFhLnBob25lUmVzcG9uc2VJbmZvfHwhYS5waG9uZVJlc3BvbnNlSW5mby5zZXNzaW9uSW5mbyl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO30sQzohMCxOYTohMH0seWo9e2VuZHBvaW50OlwidmVyaWZ5QXNzZXJ0aW9uXCIsQjp1aixYYTp2aixGOndqLFU6ITAsQzohMH0sQWo9e2VuZHBvaW50OlwidmVyaWZ5QXNzZXJ0aW9uXCIsQjp1aixYYTp2aixGOmZ1bmN0aW9uKGEpe2lmKGEuZXJyb3JNZXNzYWdlJiZcIlVTRVJfTk9UX0ZPVU5EXCI9PWEuZXJyb3JNZXNzYWdlKXRocm93IG5ldyB0KFwidXNlci1ub3QtZm91bmRcIik7aWYoYS5lcnJvck1lc3NhZ2UpdGhyb3cgeGooYS5lcnJvck1lc3NhZ2UpO1xuUChhKX0sVTohMCxDOiEwfSx6aj17ZW5kcG9pbnQ6XCJ2ZXJpZnlBc3NlcnRpb25cIixCOmZ1bmN0aW9uKGEpe3VqKGEpO2lmKCFhLmlkVG9rZW4pdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9LFhhOnZqLEY6d2osVTohMH0sTGo9e2VuZHBvaW50OlwidmVyaWZ5Q3VzdG9tVG9rZW5cIixCOmZ1bmN0aW9uKGEpe2lmKCFhLnRva2VuKXRocm93IG5ldyB0KFwiaW52YWxpZC1jdXN0b20tdG9rZW5cIik7fSxGOlAsVTohMCxDOiEwfSxiaD17ZW5kcG9pbnQ6XCJ2ZXJpZnlQYXNzd29yZFwiLEI6ZnVuY3Rpb24oYSl7JGkoYSk7aWYoIWEucGFzc3dvcmQpdGhyb3cgbmV3IHQoXCJ3cm9uZy1wYXNzd29yZFwiKTt9LEY6UCxVOiEwLEM6ITB9LG9qPXtlbmRwb2ludDpcInZlcmlmeVBob25lTnVtYmVyXCIsQjpmaixGOlAsQzohMH0samg9e2VuZHBvaW50OlwidmVyaWZ5UGhvbmVOdW1iZXJcIixCOmZ1bmN0aW9uKGEpe2lmKCFhLmlkVG9rZW4pdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTtmaihhKX0sXG5GOmZ1bmN0aW9uKGEpe2lmKGEudGVtcG9yYXJ5UHJvb2YpdGhyb3cgYS5jb2RlPVwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiLEFoKGEpO1AoYSl9fSxraD17R2I6e1VTRVJfTk9UX0ZPVU5EOlwidXNlci1ub3QtZm91bmRcIn0sZW5kcG9pbnQ6XCJ2ZXJpZnlQaG9uZU51bWJlclwiLEI6ZmosRjpQLEM6ITB9LE1qPXtlbmRwb2ludDpcImFjY291bnRzL21mYUVucm9sbG1lbnQ6d2l0aGRyYXdcIixNOltcImlkVG9rZW5cIixcIm1mYUVucm9sbG1lbnRJZFwiXSxGOmZ1bmN0aW9uKGEpe2lmKCEhYVtFZ11eISFhLnJlZnJlc2hUb2tlbil0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO30sQzohMCxOYTohMH07XG5mdW5jdGlvbiBPKGEsYixjKXtpZighbmYoYyxiLk0pKXJldHVybiBGKG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIikpO3ZhciBkPSEhYi5OYSxlPWIuVGJ8fFwiUE9TVFwiLGY7cmV0dXJuIEUoYykudGhlbihiLkIpLnRoZW4oZnVuY3Rpb24oKXtiLlUmJihjLnJldHVyblNlY3VyZVRva2VuPSEwKTtiLkMmJmEuYiYmXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBjLnRlbmFudElkJiYoYy50ZW5hbnRJZD1hLmIpO3JldHVybiBkP1ppKGEsYS5pLGIuZW5kcG9pbnQsZSxjLGIuR2IsYi5rYnx8ITEpOlppKGEsYS5oLGIuZW5kcG9pbnQsZSxjLGIuR2IsYi5rYnx8ITEpfSkudGhlbihmdW5jdGlvbihnKXtmPWc7cmV0dXJuIGIuWGE/Yi5YYShjLGYpOmZ9KS50aGVuKGIuRikudGhlbihmdW5jdGlvbigpe2lmKCFiLlopcmV0dXJuIGY7aWYoIShiLlogaW4gZikpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTtyZXR1cm4gZltiLlpdfSl9XG5mdW5jdGlvbiB4aihhKXtyZXR1cm4gWWkoe2Vycm9yOntlcnJvcnM6W3ttZXNzYWdlOmF9XSxjb2RlOjQwMCxtZXNzYWdlOmF9fSl9XG5mdW5jdGlvbiBZaShhLGIpe3ZhciBjPShhLmVycm9yJiZhLmVycm9yLmVycm9ycyYmYS5lcnJvci5lcnJvcnNbMF18fHt9KS5yZWFzb258fFwiXCI7dmFyIGQ9e2tleUludmFsaWQ6XCJpbnZhbGlkLWFwaS1rZXlcIixpcFJlZmVyZXJCbG9ja2VkOlwiYXBwLW5vdC1hdXRob3JpemVkXCJ9O2lmKGM9ZFtjXT9uZXcgdChkW2NdKTpudWxsKXJldHVybiBjO2M9YS5lcnJvciYmYS5lcnJvci5tZXNzYWdlfHxcIlwiO2Q9e0lOVkFMSURfQ1VTVE9NX1RPS0VOOlwiaW52YWxpZC1jdXN0b20tdG9rZW5cIixDUkVERU5USUFMX01JU01BVENIOlwiY3VzdG9tLXRva2VuLW1pc21hdGNoXCIsTUlTU0lOR19DVVNUT01fVE9LRU46XCJpbnRlcm5hbC1lcnJvclwiLElOVkFMSURfSURFTlRJRklFUjpcImludmFsaWQtZW1haWxcIixNSVNTSU5HX0NPTlRJTlVFX1VSSTpcImludGVybmFsLWVycm9yXCIsSU5WQUxJRF9FTUFJTDpcImludmFsaWQtZW1haWxcIixJTlZBTElEX1BBU1NXT1JEOlwid3JvbmctcGFzc3dvcmRcIixVU0VSX0RJU0FCTEVEOlwidXNlci1kaXNhYmxlZFwiLFxuTUlTU0lOR19QQVNTV09SRDpcImludGVybmFsLWVycm9yXCIsRU1BSUxfRVhJU1RTOlwiZW1haWwtYWxyZWFkeS1pbi11c2VcIixQQVNTV09SRF9MT0dJTl9ESVNBQkxFRDpcIm9wZXJhdGlvbi1ub3QtYWxsb3dlZFwiLElOVkFMSURfSURQX1JFU1BPTlNFOlwiaW52YWxpZC1jcmVkZW50aWFsXCIsSU5WQUxJRF9QRU5ESU5HX1RPS0VOOlwiaW52YWxpZC1jcmVkZW50aWFsXCIsRkVERVJBVEVEX1VTRVJfSURfQUxSRUFEWV9MSU5LRUQ6XCJjcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCIsTUlTU0lOR19PUl9JTlZBTElEX05PTkNFOlwibWlzc2luZy1vci1pbnZhbGlkLW5vbmNlXCIsSU5WQUxJRF9NRVNTQUdFX1BBWUxPQUQ6XCJpbnZhbGlkLW1lc3NhZ2UtcGF5bG9hZFwiLElOVkFMSURfUkVDSVBJRU5UX0VNQUlMOlwiaW52YWxpZC1yZWNpcGllbnQtZW1haWxcIixJTlZBTElEX1NFTkRFUjpcImludmFsaWQtc2VuZGVyXCIsRU1BSUxfTk9UX0ZPVU5EOlwidXNlci1ub3QtZm91bmRcIixSRVNFVF9QQVNTV09SRF9FWENFRURfTElNSVQ6XCJ0b28tbWFueS1yZXF1ZXN0c1wiLFxuRVhQSVJFRF9PT0JfQ09ERTpcImV4cGlyZWQtYWN0aW9uLWNvZGVcIixJTlZBTElEX09PQl9DT0RFOlwiaW52YWxpZC1hY3Rpb24tY29kZVwiLE1JU1NJTkdfT09CX0NPREU6XCJpbnRlcm5hbC1lcnJvclwiLElOVkFMSURfUFJPVklERVJfSUQ6XCJpbnZhbGlkLXByb3ZpZGVyLWlkXCIsQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOOlwicmVxdWlyZXMtcmVjZW50LWxvZ2luXCIsSU5WQUxJRF9JRF9UT0tFTjpcImludmFsaWQtdXNlci10b2tlblwiLFRPS0VOX0VYUElSRUQ6XCJ1c2VyLXRva2VuLWV4cGlyZWRcIixVU0VSX05PVF9GT1VORDpcInVzZXItdG9rZW4tZXhwaXJlZFwiLENPUlNfVU5TVVBQT1JURUQ6XCJjb3JzLXVuc3VwcG9ydGVkXCIsRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURUQ6XCJkeW5hbWljLWxpbmstbm90LWFjdGl2YXRlZFwiLElOVkFMSURfQVBQX0lEOlwiaW52YWxpZC1hcHAtaWRcIixUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVI6XCJ0b28tbWFueS1yZXF1ZXN0c1wiLFdFQUtfUEFTU1dPUkQ6XCJ3ZWFrLXBhc3N3b3JkXCIsXG5PUEVSQVRJT05fTk9UX0FMTE9XRUQ6XCJvcGVyYXRpb24tbm90LWFsbG93ZWRcIixVU0VSX0NBTkNFTExFRDpcInVzZXItY2FuY2VsbGVkXCIsQ0FQVENIQV9DSEVDS19GQUlMRUQ6XCJjYXB0Y2hhLWNoZWNrLWZhaWxlZFwiLElOVkFMSURfQVBQX0NSRURFTlRJQUw6XCJpbnZhbGlkLWFwcC1jcmVkZW50aWFsXCIsSU5WQUxJRF9DT0RFOlwiaW52YWxpZC12ZXJpZmljYXRpb24tY29kZVwiLElOVkFMSURfUEhPTkVfTlVNQkVSOlwiaW52YWxpZC1waG9uZS1udW1iZXJcIixJTlZBTElEX1NFU1NJT05fSU5GTzpcImludmFsaWQtdmVyaWZpY2F0aW9uLWlkXCIsSU5WQUxJRF9URU1QT1JBUllfUFJPT0Y6XCJpbnZhbGlkLWNyZWRlbnRpYWxcIixNSVNTSU5HX0FQUF9DUkVERU5USUFMOlwibWlzc2luZy1hcHAtY3JlZGVudGlhbFwiLE1JU1NJTkdfQ09ERTpcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIixNSVNTSU5HX1BIT05FX05VTUJFUjpcIm1pc3NpbmctcGhvbmUtbnVtYmVyXCIsTUlTU0lOR19TRVNTSU9OX0lORk86XCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiLFxuUVVPVEFfRVhDRUVERUQ6XCJxdW90YS1leGNlZWRlZFwiLFNFU1NJT05fRVhQSVJFRDpcImNvZGUtZXhwaXJlZFwiLFJFSkVDVEVEX0NSRURFTlRJQUw6XCJyZWplY3RlZC1jcmVkZW50aWFsXCIsSU5WQUxJRF9DT05USU5VRV9VUkk6XCJpbnZhbGlkLWNvbnRpbnVlLXVyaVwiLE1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUU6XCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWVcIixNSVNTSU5HX0lPU19CVU5ETEVfSUQ6XCJtaXNzaW5nLWlvcy1idW5kbGUtaWRcIixVTkFVVEhPUklaRURfRE9NQUlOOlwidW5hdXRob3JpemVkLWNvbnRpbnVlLXVyaVwiLElOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTjpcImludmFsaWQtZHluYW1pYy1saW5rLWRvbWFpblwiLElOVkFMSURfT0FVVEhfQ0xJRU5UX0lEOlwiaW52YWxpZC1vYXV0aC1jbGllbnQtaWRcIixJTlZBTElEX0NFUlRfSEFTSDpcImludmFsaWQtY2VydC1oYXNoXCIsVU5TVVBQT1JURURfVEVOQU5UX09QRVJBVElPTjpcInVuc3VwcG9ydGVkLXRlbmFudC1vcGVyYXRpb25cIixcbklOVkFMSURfVEVOQU5UX0lEOlwiaW52YWxpZC10ZW5hbnQtaWRcIixURU5BTlRfSURfTUlTTUFUQ0g6XCJ0ZW5hbnQtaWQtbWlzbWF0Y2hcIixBRE1JTl9PTkxZX09QRVJBVElPTjpcImFkbWluLXJlc3RyaWN0ZWQtb3BlcmF0aW9uXCIsSU5WQUxJRF9NRkFfUEVORElOR19DUkVERU5USUFMOlwiaW52YWxpZC1tdWx0aS1mYWN0b3Itc2Vzc2lvblwiLE1GQV9FTlJPTExNRU5UX05PVF9GT1VORDpcIm11bHRpLWZhY3Rvci1pbmZvLW5vdC1mb3VuZFwiLE1JU1NJTkdfTUZBX1BFTkRJTkdfQ1JFREVOVElBTDpcIm1pc3NpbmctbXVsdGktZmFjdG9yLXNlc3Npb25cIixNSVNTSU5HX01GQV9FTlJPTExNRU5UX0lEOlwibWlzc2luZy1tdWx0aS1mYWN0b3ItaW5mb1wiLEVNQUlMX0NIQU5HRV9ORUVEU19WRVJJRklDQVRJT046XCJlbWFpbC1jaGFuZ2UtbmVlZHMtdmVyaWZpY2F0aW9uXCIsU0VDT05EX0ZBQ1RPUl9FWElTVFM6XCJzZWNvbmQtZmFjdG9yLWFscmVhZHktaW4tdXNlXCIsU0VDT05EX0ZBQ1RPUl9MSU1JVF9FWENFRURFRDpcIm1heGltdW0tc2Vjb25kLWZhY3Rvci1jb3VudC1leGNlZWRlZFwiLFxuVU5TVVBQT1JURURfRklSU1RfRkFDVE9SOlwidW5zdXBwb3J0ZWQtZmlyc3QtZmFjdG9yXCIsVU5WRVJJRklFRF9FTUFJTDpcInVudmVyaWZpZWQtZW1haWxcIn07eihkLGJ8fHt9KTtiPShiPWMubWF0Y2goL15bXlxcc10rXFxzKjpcXHMqKFtcXHNcXFNdKikkLykpJiYxPGIubGVuZ3RoP2JbMV06dm9pZCAwO2Zvcih2YXIgZSBpbiBkKWlmKDA9PT1jLmluZGV4T2YoZSkpcmV0dXJuIG5ldyB0KGRbZV0sYik7IWImJmEmJihiPVVlKGEpKTtyZXR1cm4gbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLGIpfTtmdW5jdGlvbiBOaihhKXt0aGlzLmI9YTt0aGlzLmE9bnVsbDt0aGlzLnFiPU9qKHRoaXMpfVxuZnVuY3Rpb24gT2ooYSl7cmV0dXJuIFBqKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgRChmdW5jdGlvbihiLGMpe0woXCJnYXBpLmlmcmFtZXMuZ2V0Q29udGV4dFwiKSgpLm9wZW4oe3doZXJlOmRvY3VtZW50LmJvZHksdXJsOmEuYixtZXNzYWdlSGFuZGxlcnNGaWx0ZXI6TChcImdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVJcIiksYXR0cmlidXRlczp7c3R5bGU6e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6XCItMTAwcHhcIix3aWR0aDpcIjFweFwiLGhlaWdodDpcIjFweFwifX0sZG9udGNsZWFyOiEwfSxmdW5jdGlvbihkKXtmdW5jdGlvbiBlKCl7Y2xlYXJUaW1lb3V0KGYpO2IoKX1hLmE9ZDthLmEucmVzdHlsZSh7c2V0SGlkZU9uTGVhdmU6ITF9KTt2YXIgZj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YyhFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfSxRai5nZXQoKSk7ZC5waW5nKGUpLnRoZW4oZSxmdW5jdGlvbigpe2MoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX0pfSl9KX0pfVxuZnVuY3Rpb24gUmooYSxiKXtyZXR1cm4gYS5xYi50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGMpe2EuYS5zZW5kKGIudHlwZSxiLGMsTChcImdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVJcIikpfSl9KX1mdW5jdGlvbiBTaihhLGIpe2EucWIudGhlbihmdW5jdGlvbigpe2EuYS5yZWdpc3RlcihcImF1dGhFdmVudFwiLGIsTChcImdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVJcIikpfSl9dmFyIFRqPW5ldyBxYihyYixcImh0dHBzOi8vYXBpcy5nb29nbGUuY29tL2pzL2FwaS5qcz9vbmxvYWQ9JXtvbmxvYWR9XCIpLFVqPW5ldyBaZSgzRTQsNkU0KSxRaj1uZXcgWmUoNUUzLDE1RTMpLFZqPW51bGw7XG5mdW5jdGlvbiBQaigpe3JldHVybiBWaj9WajpWaj0obmV3IEQoZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKCl7WWUoKTtMKFwiZ2FwaS5sb2FkXCIpKFwiZ2FwaS5pZnJhbWVzXCIse2NhbGxiYWNrOmEsb250aW1lb3V0OmZ1bmN0aW9uKCl7WWUoKTtiKEVycm9yKFwiTmV0d29yayBFcnJvclwiKSl9LHRpbWVvdXQ6VWouZ2V0KCl9KX1pZihMKFwiZ2FwaS5pZnJhbWVzLklmcmFtZVwiKSlhKCk7ZWxzZSBpZihMKFwiZ2FwaS5sb2FkXCIpKWMoKTtlbHNle3ZhciBkPVwiX19pZnJhbWVmY2JcIitNYXRoLmZsb29yKDFFNipNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpO2xbZF09ZnVuY3Rpb24oKXtMKFwiZ2FwaS5sb2FkXCIpP2MoKTpiKEVycm9yKFwiTmV0d29yayBFcnJvclwiKSl9O2Q9emIoVGose29ubG9hZDpkfSk7RShDaShkKSkucyhmdW5jdGlvbigpe2IoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX0pfX0pKS5zKGZ1bmN0aW9uKGEpe1ZqPW51bGw7dGhyb3cgYTt9KX07ZnVuY3Rpb24gV2ooYSxiLGMsZCl7dGhpcy5sPWE7dGhpcy5oPWI7dGhpcy5pPWM7dGhpcy5nPWQ7dGhpcy5mPW51bGw7dGhpcy5nPyhhPWJlKHRoaXMuZy51cmwpLGE9Y2UoYS5mLGEuYSxhLmcsXCIvZW11bGF0b3IvYXV0aC9pZnJhbWVcIikpOmE9Y2UoXCJodHRwc1wiLHRoaXMubCxudWxsLFwiL19fL2F1dGgvaWZyYW1lXCIpO3RoaXMuYT1hO0oodGhpcy5hLFwiYXBpS2V5XCIsdGhpcy5oKTtKKHRoaXMuYSxcImFwcE5hbWVcIix0aGlzLmkpO3RoaXMuYj1udWxsO3RoaXMuYz1bXX1Xai5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt0aGlzLmY/Sih0aGlzLmEsXCJ2XCIsdGhpcy5mKTppZSh0aGlzLmEuYixcInZcIik7dGhpcy5iP0oodGhpcy5hLFwiZWlkXCIsdGhpcy5iKTppZSh0aGlzLmEuYixcImVpZFwiKTt0aGlzLmMubGVuZ3RoP0oodGhpcy5hLFwiZndcIix0aGlzLmMuam9pbihcIixcIikpOmllKHRoaXMuYS5iLFwiZndcIik7cmV0dXJuIHRoaXMuYS50b1N0cmluZygpfTtcbmZ1bmN0aW9uIFhqKGEsYixjLGQsZSxmKXt0aGlzLnU9YTt0aGlzLm89Yjt0aGlzLmM9Yzt0aGlzLnY9ZDt0aGlzLm09Zjt0aGlzLmk9dGhpcy5nPXRoaXMubD1udWxsO3RoaXMuYT1lO3RoaXMuaD10aGlzLmY9bnVsbH1Yai5wcm90b3R5cGUueGI9ZnVuY3Rpb24oYSl7dGhpcy5oPWE7cmV0dXJuIHRoaXN9O1xuWGoucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7aWYodGhpcy5tKXt2YXIgYT1iZSh0aGlzLm0udXJsKTthPWNlKGEuZixhLmEsYS5nLFwiL2VtdWxhdG9yL2F1dGgvaGFuZGxlclwiKX1lbHNlIGE9Y2UoXCJodHRwc1wiLHRoaXMudSxudWxsLFwiL19fL2F1dGgvaGFuZGxlclwiKTtKKGEsXCJhcGlLZXlcIix0aGlzLm8pO0ooYSxcImFwcE5hbWVcIix0aGlzLmMpO0ooYSxcImF1dGhUeXBlXCIsdGhpcy52KTtpZih0aGlzLmEuaXNPQXV0aFByb3ZpZGVyKXt2YXIgYj10aGlzLmE7dHJ5e3ZhciBjPWZpcmViYXNlLmFwcCh0aGlzLmMpLmF1dGgoKS5rYSgpfWNhdGNoKGgpe2M9bnVsbH1iLm5iPWM7SihhLFwicHJvdmlkZXJJZFwiLHRoaXMuYS5wcm92aWRlcklkKTtjPXRoaXMuYTtiPVZlKGMuSGIpO2Zvcih2YXIgZCBpbiBiKWJbZF09YltkXS50b1N0cmluZygpO2Q9Yy5QYztiPW5iKGIpO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1kW2VdO2YgaW4gYiYmZGVsZXRlIGJbZl19Yy5vYiYmXG5jLm5iJiYhYltjLm9iXSYmKGJbYy5vYl09Yy5uYik7bWIoYil8fEooYSxcImN1c3RvbVBhcmFtZXRlcnNcIixVZShiKSl9XCJmdW5jdGlvblwiPT09dHlwZW9mIHRoaXMuYS5QYiYmKGM9dGhpcy5hLlBiKCksYy5sZW5ndGgmJkooYSxcInNjb3Blc1wiLGMuam9pbihcIixcIikpKTt0aGlzLmw/SihhLFwicmVkaXJlY3RVcmxcIix0aGlzLmwpOmllKGEuYixcInJlZGlyZWN0VXJsXCIpO3RoaXMuZz9KKGEsXCJldmVudElkXCIsdGhpcy5nKTppZShhLmIsXCJldmVudElkXCIpO3RoaXMuaT9KKGEsXCJ2XCIsdGhpcy5pKTppZShhLmIsXCJ2XCIpO2lmKHRoaXMuYilmb3IodmFyIGcgaW4gdGhpcy5iKXRoaXMuYi5oYXNPd25Qcm9wZXJ0eShnKSYmIWFlKGEsZykmJkooYSxnLHRoaXMuYltnXSk7dGhpcy5oP0ooYSxcInRpZFwiLHRoaXMuaCk6aWUoYS5iLFwidGlkXCIpO3RoaXMuZj9KKGEsXCJlaWRcIix0aGlzLmYpOmllKGEuYixcImVpZFwiKTtnPVlqKHRoaXMuYyk7Zy5sZW5ndGgmJkooYSxcImZ3XCIsZy5qb2luKFwiLFwiKSk7cmV0dXJuIGEudG9TdHJpbmcoKX07XG5mdW5jdGlvbiBZaihhKXt0cnl7cmV0dXJuIGZpcmViYXNlLmFwcChhKS5hdXRoKCkuR2EoKX1jYXRjaChiKXtyZXR1cm5bXX19ZnVuY3Rpb24gWmooYSxiLGMsZCxlLGYpe3RoaXMubz1hO3RoaXMuZz1iO3RoaXMuYj1jO3RoaXMuZj1mO3RoaXMuYz1kfHxudWxsO3RoaXMuaT1lfHxudWxsO3RoaXMubD10aGlzLnU9dGhpcy5BPW51bGw7dGhpcy5oPVtdO3RoaXMudj10aGlzLmE9bnVsbH1cbmZ1bmN0aW9uIGFrKGEpe3ZhciBiPXJlKCk7cmV0dXJuIGRqKGEpLnRoZW4oZnVuY3Rpb24oYyl7YTp7dmFyIGQ9YmUoYiksZT1kLmY7ZD1kLmE7Zm9yKHZhciBmPTA7ZjxjLmxlbmd0aDtmKyspe3ZhciBnPWNbZl07dmFyIGg9ZDt2YXIgbj1lOzA9PWcuaW5kZXhPZihcImNocm9tZS1leHRlbnNpb246Ly9cIik/aD1iZShnKS5hPT1oJiZcImNocm9tZS1leHRlbnNpb25cIj09bjpcImh0dHBcIiE9biYmXCJodHRwc1wiIT1uP2g9ITE6Q2UudGVzdChnKT9oPWg9PWc6KGc9Zy5zcGxpdChcIi5cIikuam9pbihcIlxcXFwuXCIpLGg9KG5ldyBSZWdFeHAoXCJeKC4rXFxcXC5cIitnK1wifFwiK2crXCIpJFwiLFwiaVwiKSkudGVzdChoKSk7aWYoaCl7Yz0hMDticmVhayBhfX1jPSExfWlmKCFjKXRocm93IG5ldyB5aChyZSgpKTt9KX1cbmZ1bmN0aW9uIGJrKGEpe2lmKGEudilyZXR1cm4gYS52O2Eudj1FZSgpLnRoZW4oZnVuY3Rpb24oKXtpZighYS51KXt2YXIgYj1hLmMsYz1hLmksZD1ZaihhLmIpLGU9bmV3IFdqKGEubyxhLmcsYS5iLGEuZik7ZS5mPWI7ZS5iPWM7ZS5jPVphKGR8fFtdKTthLnU9ZS50b1N0cmluZygpfWEubT1uZXcgTmooYS51KTtjayhhKX0pO3JldHVybiBhLnZ9az1aai5wcm90b3R5cGU7ay5OYj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bmV3IHQoXCJwb3B1cC1jbG9zZWQtYnktdXNlclwiKSxlPW5ldyB0KFwid2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWRcIiksZj10aGlzLGc9ITE7cmV0dXJuIHRoaXMubGEoKS50aGVuKGZ1bmN0aW9uKCl7ZGsoZikudGhlbihmdW5jdGlvbihoKXtofHwoYSYmeWUoYSksYihlKSxnPSEwKX0pfSkucyhmdW5jdGlvbigpe30pLnRoZW4oZnVuY3Rpb24oKXtpZighZylyZXR1cm4gQmUoYSl9KS50aGVuKGZ1bmN0aW9uKCl7aWYoIWcpcmV0dXJuIEVkKGMpLnRoZW4oZnVuY3Rpb24oKXtiKGQpfSl9KX07XG5rLldiPWZ1bmN0aW9uKCl7dmFyIGE9SygpO3JldHVybiFUZShhKSYmIVhlKGEpfTtrLlNiPWZ1bmN0aW9uKCl7cmV0dXJuITF9O1xuay5MYj1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXJldHVybiBGKG5ldyB0KFwicG9wdXAtYmxvY2tlZFwiKSk7aWYoZyYmIVRlKCkpcmV0dXJuIHRoaXMubGEoKS5zKGZ1bmN0aW9uKHApe3llKGEpO2UocCl9KSxkKCksRSgpO3RoaXMuYXx8KHRoaXMuYT1hayhlayh0aGlzKSkpO3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMuYS50aGVuKGZ1bmN0aW9uKCl7dmFyIHA9bi5sYSgpLnMoZnVuY3Rpb24odil7eWUoYSk7ZSh2KTt0aHJvdyB2O30pO2QoKTtyZXR1cm4gcH0pLnRoZW4oZnVuY3Rpb24oKXtzaChjKTtpZighZyl7dmFyIHA9Zmsobi5vLG4uZyxuLmIsYixjLG51bGwsZixuLmMsdm9pZCAwLG4uaSxoLG4uZik7c2UocCxhKX19KS5zKGZ1bmN0aW9uKHApe1wiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PXAuY29kZSYmKG4uYT1udWxsKTt0aHJvdyBwO30pfTtcbmZ1bmN0aW9uIGVrKGEpe2EubHx8KGEuQT1hLmM/T2UoYS5jLFlqKGEuYikpOm51bGwsYS5sPW5ldyBKaShhLmcsQ2EoYS5pKSxhLkEpLGEuZiYmUWkoYS5sLGEuZikpO3JldHVybiBhLmx9ay5NYj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLmF8fCh0aGlzLmE9YWsoZWsodGhpcykpKTt2YXIgZT10aGlzO3JldHVybiB0aGlzLmEudGhlbihmdW5jdGlvbigpe3NoKGIpO3ZhciBmPWZrKGUubyxlLmcsZS5iLGEsYixyZSgpLGMsZS5jLHZvaWQgMCxlLmksZCxlLmYpO3NlKGYpfSkucyhmdW5jdGlvbihmKXtcImF1dGgvbmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiPT1mLmNvZGUmJihlLmE9bnVsbCk7dGhyb3cgZjt9KX07ay5sYT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIGJrKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5tLnFifSkucyhmdW5jdGlvbigpe2EuYT1udWxsO3Rocm93IG5ldyB0KFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKTt9KX07ay5aYj1mdW5jdGlvbigpe3JldHVybiEwfTtcbmZ1bmN0aW9uIGZrKGEsYixjLGQsZSxmLGcsaCxuLHAsdixCKXthPW5ldyBYaihhLGIsYyxkLGUsQik7YS5sPWY7YS5nPWc7YS5pPWg7YS5iPW5iKG58fG51bGwpO2EuZj1wO3JldHVybiBhLnhiKHYpLnRvU3RyaW5nKCl9ZnVuY3Rpb24gY2soYSl7aWYoIWEubSl0aHJvdyBFcnJvcihcIklmY0hhbmRsZXIgbXVzdCBiZSBpbml0aWFsaXplZCFcIik7U2ooYS5tLGZ1bmN0aW9uKGIpe3ZhciBjPXt9O2lmKGImJmIuYXV0aEV2ZW50KXt2YXIgZD0hMTtiPXVoKGIuYXV0aEV2ZW50KTtmb3IoYz0wO2M8YS5oLmxlbmd0aDtjKyspZD1hLmhbY10oYil8fGQ7Yz17fTtjLnN0YXR1cz1kP1wiQUNLXCI6XCJFUlJPUlwiO3JldHVybiBFKGMpfWMuc3RhdHVzPVwiRVJST1JcIjtyZXR1cm4gRShjKX0pfVxuZnVuY3Rpb24gZGsoYSl7dmFyIGI9e3R5cGU6XCJ3ZWJTdG9yYWdlU3VwcG9ydFwifTtyZXR1cm4gYmsoYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBSaihhLm0sYil9KS50aGVuKGZ1bmN0aW9uKGMpe2lmKGMmJmMubGVuZ3RoJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNbMF0ud2ViU3RvcmFnZVN1cHBvcnQpcmV0dXJuIGNbMF0ud2ViU3RvcmFnZVN1cHBvcnQ7dGhyb3cgRXJyb3IoKTt9KX1rLkVhPWZ1bmN0aW9uKGEpe3RoaXMuaC5wdXNoKGEpfTtrLlJhPWZ1bmN0aW9uKGEpe1hhKHRoaXMuaCxmdW5jdGlvbihiKXtyZXR1cm4gYj09YX0pfTtmdW5jdGlvbiBnayhhKXt0aGlzLmE9YXx8ZmlyZWJhc2UuSU5URVJOQUwucmVhY3ROYXRpdmUmJmZpcmViYXNlLklOVEVSTkFMLnJlYWN0TmF0aXZlLkFzeW5jU3RvcmFnZTtpZighdGhpcy5hKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBSZWFjdCBOYXRpdmUgY29tcGF0aWJpbGl0eSBsaWJyYXJ5IHdhcyBub3QgZm91bmQuXCIpO3RoaXMudHlwZT1cImFzeW5jU3RvcmFnZVwifWs9Z2sucHJvdG90eXBlO2suZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBFKHRoaXMuYS5nZXRJdGVtKGEpKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBiJiZXZShiKX0pfTtrLnNldD1mdW5jdGlvbihhLGIpe3JldHVybiBFKHRoaXMuYS5zZXRJdGVtKGEsVWUoYikpKX07ay5UPWZ1bmN0aW9uKGEpe3JldHVybiBFKHRoaXMuYS5yZW1vdmVJdGVtKGEpKX07ay5jYT1mdW5jdGlvbigpe307ay5pYT1mdW5jdGlvbigpe307ZnVuY3Rpb24gaGsoYSl7dGhpcy5iPWE7dGhpcy5hPXt9O3RoaXMuZj1xKHRoaXMuYyx0aGlzKX12YXIgaWs9W107ZnVuY3Rpb24gamsoKXt2YXIgYT1KZSgpP3NlbGY6bnVsbDt3KGlrLGZ1bmN0aW9uKGMpe2MuYj09YSYmKGI9Yyl9KTtpZighYil7dmFyIGI9bmV3IGhrKGEpO2lrLnB1c2goYil9cmV0dXJuIGJ9XG5oay5wcm90b3R5cGUuYz1mdW5jdGlvbihhKXt2YXIgYj1hLmRhdGEuZXZlbnRUeXBlLGM9YS5kYXRhLmV2ZW50SWQsZD10aGlzLmFbYl07aWYoZCYmMDxkLmxlbmd0aCl7YS5wb3J0c1swXS5wb3N0TWVzc2FnZSh7c3RhdHVzOlwiYWNrXCIsZXZlbnRJZDpjLGV2ZW50VHlwZTpiLHJlc3BvbnNlOm51bGx9KTt2YXIgZT1bXTt3KGQsZnVuY3Rpb24oZil7ZS5wdXNoKEUoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGYoYS5vcmlnaW4sYS5kYXRhLmRhdGEpfSkpfSk7SmMoZSkudGhlbihmdW5jdGlvbihmKXt2YXIgZz1bXTt3KGYsZnVuY3Rpb24oaCl7Zy5wdXNoKHtmdWxmaWxsZWQ6aC5PYix2YWx1ZTpoLnZhbHVlLHJlYXNvbjpoLnJlYXNvbj9oLnJlYXNvbi5tZXNzYWdlOnZvaWQgMH0pfSk7dyhnLGZ1bmN0aW9uKGgpe2Zvcih2YXIgbiBpbiBoKVwidW5kZWZpbmVkXCI9PT10eXBlb2YgaFtuXSYmZGVsZXRlIGhbbl19KTthLnBvcnRzWzBdLnBvc3RNZXNzYWdlKHtzdGF0dXM6XCJkb25lXCIsZXZlbnRJZDpjLFxuZXZlbnRUeXBlOmIscmVzcG9uc2U6Z30pfSl9fTtmdW5jdGlvbiBrayhhLGIsYyl7bWIoYS5hKSYmYS5iLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsYS5mKTtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEuYVtiXSYmKGEuYVtiXT1bXSk7YS5hW2JdLnB1c2goYyl9O2Z1bmN0aW9uIGxrKGEpe3RoaXMuYT1hfWxrLnByb3RvdHlwZS5wb3N0TWVzc2FnZT1mdW5jdGlvbihhLGIpe3RoaXMuYS5wb3N0TWVzc2FnZShhLGIpfTtmdW5jdGlvbiBtayhhKXt0aGlzLmM9YTt0aGlzLmI9ITE7dGhpcy5hPVtdfVxuZnVuY3Rpb24gbmsoYSxiLGMsZCl7dmFyIGUsZj1jfHx7fSxnLGgsbixwPW51bGw7aWYoYS5iKXJldHVybiBGKEVycm9yKFwiY29ubmVjdGlvbl91bmF2YWlsYWJsZVwiKSk7dmFyIHY9ZD84MDA6NTAsQj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsP25ldyBNZXNzYWdlQ2hhbm5lbDpudWxsO3JldHVybihuZXcgRChmdW5jdGlvbihBLFEpe0I/KGU9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKk1hdGgucG93KDEwLDIwKSkudG9TdHJpbmcoKSxCLnBvcnQxLnN0YXJ0KCksaD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7UShFcnJvcihcInVuc3VwcG9ydGVkX2V2ZW50XCIpKX0sdiksZz1mdW5jdGlvbih4YSl7eGEuZGF0YS5ldmVudElkPT09ZSYmKFwiYWNrXCI9PT14YS5kYXRhLnN0YXR1cz8oY2xlYXJUaW1lb3V0KGgpLG49c2V0VGltZW91dChmdW5jdGlvbigpe1EoRXJyb3IoXCJ0aW1lb3V0XCIpKX0sM0UzKSk6XCJkb25lXCI9PT14YS5kYXRhLnN0YXR1cz8oY2xlYXJUaW1lb3V0KG4pLFxuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB4YS5kYXRhLnJlc3BvbnNlP0EoeGEuZGF0YS5yZXNwb25zZSk6UShFcnJvcihcInVua25vd25fZXJyb3JcIikpKTooY2xlYXJUaW1lb3V0KGgpLGNsZWFyVGltZW91dChuKSxRKEVycm9yKFwiaW52YWxpZF9yZXNwb25zZVwiKSkpKX0scD17bWVzc2FnZUNoYW5uZWw6Qixvbk1lc3NhZ2U6Z30sYS5hLnB1c2gocCksQi5wb3J0MS5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGcpLGEuYy5wb3N0TWVzc2FnZSh7ZXZlbnRUeXBlOmIsZXZlbnRJZDplLGRhdGE6Zn0sW0IucG9ydDJdKSk6UShFcnJvcihcImNvbm5lY3Rpb25fdW5hdmFpbGFibGVcIikpfSkpLnRoZW4oZnVuY3Rpb24oQSl7b2soYSxwKTtyZXR1cm4gQX0pLnMoZnVuY3Rpb24oQSl7b2soYSxwKTt0aHJvdyBBO30pfVxuZnVuY3Rpb24gb2soYSxiKXtpZihiKXt2YXIgYz1iLm1lc3NhZ2VDaGFubmVsLGQ9Yi5vbk1lc3NhZ2U7YyYmKGMucG9ydDEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixkKSxjLnBvcnQxLmNsb3NlKCkpO1hhKGEuYSxmdW5jdGlvbihlKXtyZXR1cm4gZT09Yn0pfX1tay5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXtmb3IoOzA8dGhpcy5hLmxlbmd0aDspb2sodGhpcyx0aGlzLmFbMF0pO3RoaXMuYj0hMH07ZnVuY3Rpb24gcGsoKXtpZighcWsoKSl0aHJvdyBuZXcgdChcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCIpO3RoaXMuYz17fTt0aGlzLmE9W107dGhpcy5iPTA7dGhpcy52PWwuaW5kZXhlZERCO3RoaXMudHlwZT1cImluZGV4ZWREQlwiO3RoaXMuZz10aGlzLm09dGhpcy5mPXRoaXMubD1udWxsO3RoaXMubz0hMTt0aGlzLmg9bnVsbDt2YXIgYT10aGlzO0plKCkmJnNlbGY/KHRoaXMubT1qaygpLGtrKHRoaXMubSxcImtleUNoYW5nZWRcIixmdW5jdGlvbihiLGMpe3JldHVybiByayhhKS50aGVuKGZ1bmN0aW9uKGQpezA8ZC5sZW5ndGgmJncoYS5hLGZ1bmN0aW9uKGUpe2UoZCl9KTtyZXR1cm57a2V5UHJvY2Vzc2VkOlZhKGQsYy5rZXkpfX0pfSksa2sodGhpcy5tLFwicGluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIEUoW1wia2V5Q2hhbmdlZFwiXSl9KSk6ZmYoKS50aGVuKGZ1bmN0aW9uKGIpe2lmKGEuaD1iKWEuZz1uZXcgbWsobmV3IGxrKGIpKSxuayhhLmcsXCJwaW5nXCIsbnVsbCwhMCkudGhlbihmdW5jdGlvbihjKXtjWzBdLmZ1bGZpbGxlZCYmXG5WYShjWzBdLnZhbHVlLFwia2V5Q2hhbmdlZFwiKSYmKGEubz0hMCl9KS5zKGZ1bmN0aW9uKCl7fSl9KX12YXIgc2s7ZnVuY3Rpb24gdGsoYSl7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS52LmRlbGV0ZURhdGFiYXNlKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VEYlwiKTtkLm9uc3VjY2Vzcz1mdW5jdGlvbigpe2IoKX07ZC5vbmVycm9yPWZ1bmN0aW9uKGUpe2MoRXJyb3IoZS50YXJnZXQuZXJyb3IpKX19KX1cbmZ1bmN0aW9uIHVrKGEpe3JldHVybiBuZXcgRChmdW5jdGlvbihiLGMpe3ZhciBkPWEudi5vcGVuKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VEYlwiLDEpO2Qub25lcnJvcj1mdW5jdGlvbihlKXt0cnl7ZS5wcmV2ZW50RGVmYXVsdCgpfWNhdGNoKGYpe31jKEVycm9yKGUudGFyZ2V0LmVycm9yKSl9O2Qub251cGdyYWRlbmVlZGVkPWZ1bmN0aW9uKGUpe2U9ZS50YXJnZXQucmVzdWx0O3RyeXtlLmNyZWF0ZU9iamVjdFN0b3JlKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VcIix7a2V5UGF0aDpcImZiYXNlX2tleVwifSl9Y2F0Y2goZil7YyhmKX19O2Qub25zdWNjZXNzPWZ1bmN0aW9uKGUpe2U9ZS50YXJnZXQucmVzdWx0O2Uub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhcImZpcmViYXNlTG9jYWxTdG9yYWdlXCIpP2IoZSk6dGsoYSkudGhlbihmdW5jdGlvbigpe3JldHVybiB1ayhhKX0pLnRoZW4oZnVuY3Rpb24oZil7YihmKX0pLnMoZnVuY3Rpb24oZil7YyhmKX0pfX0pfVxuZnVuY3Rpb24gdmsoYSl7YS5pfHwoYS5pPXVrKGEpKTtyZXR1cm4gYS5pfWZ1bmN0aW9uIHdrKGEsYil7ZnVuY3Rpb24gYyhlLGYpe3ZrKGEpLnRoZW4oYikudGhlbihlKS5zKGZ1bmN0aW9uKGcpe2lmKDM8KytkKWYoZyk7ZWxzZSByZXR1cm4gdmsoYSkudGhlbihmdW5jdGlvbihoKXtoLmNsb3NlKCk7YS5pPXZvaWQgMDtyZXR1cm4gYyhlLGYpfSl9KX12YXIgZD0wO3JldHVybiBuZXcgRChjKX1mdW5jdGlvbiBxaygpe3RyeXtyZXR1cm4hIWwuaW5kZXhlZERCfWNhdGNoKGEpe3JldHVybiExfX1mdW5jdGlvbiB4ayhhKXtyZXR1cm4gYS5vYmplY3RTdG9yZShcImZpcmViYXNlTG9jYWxTdG9yYWdlXCIpfWZ1bmN0aW9uIHlrKGEsYil7cmV0dXJuIGEudHJhbnNhY3Rpb24oW1wiZmlyZWJhc2VMb2NhbFN0b3JhZ2VcIl0sYj9cInJlYWR3cml0ZVwiOlwicmVhZG9ubHlcIil9XG5mdW5jdGlvbiB6ayhhKXtyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYixjKXthLm9uc3VjY2Vzcz1mdW5jdGlvbihkKXtkJiZkLnRhcmdldD9iKGQudGFyZ2V0LnJlc3VsdCk6YigpfTthLm9uZXJyb3I9ZnVuY3Rpb24oZCl7YyhkLnRhcmdldC5lcnJvcil9fSl9az1way5wcm90b3R5cGU7ay5zZXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLGQ9ITE7cmV0dXJuIHdrKHRoaXMsZnVuY3Rpb24oZSl7ZT14ayh5ayhlLCEwKSk7cmV0dXJuIHprKGUuZ2V0KGEpKX0pLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHdrKGMsZnVuY3Rpb24oZil7Zj14ayh5ayhmLCEwKSk7aWYoZSlyZXR1cm4gZS52YWx1ZT1iLHprKGYucHV0KGUpKTtjLmIrKztkPSEwO3ZhciBnPXt9O2cuZmJhc2Vfa2V5PWE7Zy52YWx1ZT1iO3JldHVybiB6ayhmLmFkZChnKSl9KX0pLnRoZW4oZnVuY3Rpb24oKXtjLmNbYV09YjtyZXR1cm4gQWsoYyxhKX0pLm5hKGZ1bmN0aW9uKCl7ZCYmYy5iLS19KX07XG5mdW5jdGlvbiBBayhhLGIpe3JldHVybiBhLmcmJmEuaCYmZWYoKT09PWEuaD9uayhhLmcsXCJrZXlDaGFuZ2VkXCIse2tleTpifSxhLm8pLnRoZW4oZnVuY3Rpb24oKXt9KS5zKGZ1bmN0aW9uKCl7fSk6RSgpfWsuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiB3ayh0aGlzLGZ1bmN0aW9uKGIpe3JldHVybiB6ayh4ayh5ayhiLCExKSkuZ2V0KGEpKX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGImJmIudmFsdWV9KX07ay5UPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz0hMTtyZXR1cm4gd2sodGhpcyxmdW5jdGlvbihkKXtjPSEwO2IuYisrO3JldHVybiB6ayh4ayh5ayhkLCEwKSlbXCJkZWxldGVcIl0oYSkpfSkudGhlbihmdW5jdGlvbigpe2RlbGV0ZSBiLmNbYV07cmV0dXJuIEFrKGIsYSl9KS5uYShmdW5jdGlvbigpe2MmJmIuYi0tfSl9O1xuZnVuY3Rpb24gcmsoYSl7cmV0dXJuIHZrKGEpLnRoZW4oZnVuY3Rpb24oYil7dmFyIGM9eGsoeWsoYiwhMSkpO3JldHVybiBjLmdldEFsbD96ayhjLmdldEFsbCgpKTpuZXcgRChmdW5jdGlvbihkLGUpe3ZhciBmPVtdLGc9Yy5vcGVuQ3Vyc29yKCk7Zy5vbnN1Y2Nlc3M9ZnVuY3Rpb24oaCl7KGg9aC50YXJnZXQucmVzdWx0KT8oZi5wdXNoKGgudmFsdWUpLGhbXCJjb250aW51ZVwiXSgpKTpkKGYpfTtnLm9uZXJyb3I9ZnVuY3Rpb24oaCl7ZShoLnRhcmdldC5lcnJvcil9fSl9KS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBjPXt9LGQ9W107aWYoMD09YS5iKXtmb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKWNbYltkXS5mYmFzZV9rZXldPWJbZF0udmFsdWU7ZD10ZShhLmMsYyk7YS5jPWN9cmV0dXJuIGR9KX1rLmNhPWZ1bmN0aW9uKGEpezA9PXRoaXMuYS5sZW5ndGgmJkJrKHRoaXMpO3RoaXMuYS5wdXNoKGEpfTtcbmsuaWE9ZnVuY3Rpb24oYSl7WGEodGhpcy5hLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSk7MD09dGhpcy5hLmxlbmd0aCYmQ2sodGhpcyl9O2Z1bmN0aW9uIEJrKGEpe2Z1bmN0aW9uIGIoKXthLmY9c2V0VGltZW91dChmdW5jdGlvbigpe2EubD1yayhhKS50aGVuKGZ1bmN0aW9uKGMpezA8Yy5sZW5ndGgmJncoYS5hLGZ1bmN0aW9uKGQpe2QoYyl9KX0pLnRoZW4oZnVuY3Rpb24oKXtiKCl9KS5zKGZ1bmN0aW9uKGMpe1wiU1RPUF9FVkVOVFwiIT1jLm1lc3NhZ2UmJmIoKX0pfSw4MDApfUNrKGEpO2IoKX1mdW5jdGlvbiBDayhhKXthLmwmJmEubC5jYW5jZWwoXCJTVE9QX0VWRU5UXCIpO2EuZiYmKGNsZWFyVGltZW91dChhLmYpLGEuZj1udWxsKX07ZnVuY3Rpb24gRGsoYSl7dmFyIGI9dGhpcyxjPW51bGw7dGhpcy5hPVtdO3RoaXMudHlwZT1cImluZGV4ZWREQlwiO3RoaXMuYz1hO3RoaXMuYj1FKCkudGhlbihmdW5jdGlvbigpe2lmKHFrKCkpe3ZhciBkPVFlKCksZT1cIl9fc2FrXCIrZDtza3x8KHNrPW5ldyBwayk7Yz1zaztyZXR1cm4gYy5zZXQoZSxkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0KGUpfSkudGhlbihmdW5jdGlvbihmKXtpZihmIT09ZCl0aHJvdyBFcnJvcihcImluZGV4ZWREQiBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm4gYy5UKGUpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSkucyhmdW5jdGlvbigpe3JldHVybiBiLmN9KX1yZXR1cm4gYi5jfSkudGhlbihmdW5jdGlvbihkKXtiLnR5cGU9ZC50eXBlO2QuY2EoZnVuY3Rpb24oZSl7dyhiLmEsZnVuY3Rpb24oZil7ZihlKX0pfSk7cmV0dXJuIGR9KX1rPURrLnByb3RvdHlwZTtrLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5iLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGIuZ2V0KGEpfSl9O1xuay5zZXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5iLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGMuc2V0KGEsYil9KX07ay5UPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmIudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gYi5UKGEpfSl9O2suY2E9ZnVuY3Rpb24oYSl7dGhpcy5hLnB1c2goYSl9O2suaWE9ZnVuY3Rpb24oYSl7WGEodGhpcy5hLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSl9O2Z1bmN0aW9uIEVrKCl7dGhpcy5hPXt9O3RoaXMudHlwZT1cImluTWVtb3J5XCJ9az1Fay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIEUodGhpcy5hW2FdKX07ay5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmFbYV09YjtyZXR1cm4gRSgpfTtrLlQ9ZnVuY3Rpb24oYSl7ZGVsZXRlIHRoaXMuYVthXTtyZXR1cm4gRSgpfTtrLmNhPWZ1bmN0aW9uKCl7fTtrLmlhPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBGaygpe2lmKCFHaygpKXtpZihcIk5vZGVcIj09S2UoKSl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJUaGUgTG9jYWxTdG9yYWdlIGNvbXBhdGliaWxpdHkgbGlicmFyeSB3YXMgbm90IGZvdW5kLlwiKTt0aHJvdyBuZXcgdChcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCIpO310aGlzLmE9SGsoKXx8ZmlyZWJhc2UuSU5URVJOQUwubm9kZS5sb2NhbFN0b3JhZ2U7dGhpcy50eXBlPVwibG9jYWxTdG9yYWdlXCJ9ZnVuY3Rpb24gSGsoKXt0cnl7dmFyIGE9bC5sb2NhbFN0b3JhZ2UsYj1RZSgpO2EmJihhLnNldEl0ZW0oYixcIjFcIiksYS5yZW1vdmVJdGVtKGIpKTtyZXR1cm4gYX1jYXRjaChjKXtyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBHaygpe3ZhciBhPVwiTm9kZVwiPT1LZSgpO2E9SGsoKXx8YSYmZmlyZWJhc2UuSU5URVJOQUwubm9kZSYmZmlyZWJhc2UuSU5URVJOQUwubm9kZS5sb2NhbFN0b3JhZ2U7aWYoIWEpcmV0dXJuITE7dHJ5e3JldHVybiBhLnNldEl0ZW0oXCJfX3Nha1wiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oXCJfX3Nha1wiKSwhMH1jYXRjaChiKXtyZXR1cm4hMX19az1Gay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gRSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLmEuZ2V0SXRlbShhKTtyZXR1cm4gV2UoYyl9KX07ay5zZXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBFKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPVVlKGIpO251bGw9PT1kP2MuVChhKTpjLmEuc2V0SXRlbShhLGQpfSl9O2suVD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBFKCkudGhlbihmdW5jdGlvbigpe2IuYS5yZW1vdmVJdGVtKGEpfSl9O1xuay5jYT1mdW5jdGlvbihhKXtsLndpbmRvdyYmbmQobC53aW5kb3csXCJzdG9yYWdlXCIsYSl9O2suaWE9ZnVuY3Rpb24oYSl7bC53aW5kb3cmJkgobC53aW5kb3csXCJzdG9yYWdlXCIsYSl9O2Z1bmN0aW9uIElrKCl7dGhpcy50eXBlPVwibnVsbFN0b3JhZ2VcIn1rPUlrLnByb3RvdHlwZTtrLmdldD1mdW5jdGlvbigpe3JldHVybiBFKG51bGwpfTtrLnNldD1mdW5jdGlvbigpe3JldHVybiBFKCl9O2suVD1mdW5jdGlvbigpe3JldHVybiBFKCl9O2suY2E9ZnVuY3Rpb24oKXt9O2suaWE9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIEprKCl7aWYoIUtrKCkpe2lmKFwiTm9kZVwiPT1LZSgpKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBTZXNzaW9uU3RvcmFnZSBjb21wYXRpYmlsaXR5IGxpYnJhcnkgd2FzIG5vdCBmb3VuZC5cIik7dGhyb3cgbmV3IHQoXCJ3ZWItc3RvcmFnZS11bnN1cHBvcnRlZFwiKTt9dGhpcy5hPUxrKCl8fGZpcmViYXNlLklOVEVSTkFMLm5vZGUuc2Vzc2lvblN0b3JhZ2U7dGhpcy50eXBlPVwic2Vzc2lvblN0b3JhZ2VcIn1mdW5jdGlvbiBMaygpe3RyeXt2YXIgYT1sLnNlc3Npb25TdG9yYWdlLGI9UWUoKTthJiYoYS5zZXRJdGVtKGIsXCIxXCIpLGEucmVtb3ZlSXRlbShiKSk7cmV0dXJuIGF9Y2F0Y2goYyl7cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gS2soKXt2YXIgYT1cIk5vZGVcIj09S2UoKTthPUxrKCl8fGEmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUuc2Vzc2lvblN0b3JhZ2U7aWYoIWEpcmV0dXJuITE7dHJ5e3JldHVybiBhLnNldEl0ZW0oXCJfX3Nha1wiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oXCJfX3Nha1wiKSwhMH1jYXRjaChiKXtyZXR1cm4hMX19az1Kay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gRSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLmEuZ2V0SXRlbShhKTtyZXR1cm4gV2UoYyl9KX07ay5zZXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBFKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPVVlKGIpO251bGw9PT1kP2MuVChhKTpjLmEuc2V0SXRlbShhLGQpfSl9O2suVD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBFKCkudGhlbihmdW5jdGlvbigpe2IuYS5yZW1vdmVJdGVtKGEpfSl9O2suY2E9ZnVuY3Rpb24oKXt9O1xuay5pYT1mdW5jdGlvbigpe307ZnVuY3Rpb24gTWsoKXt2YXIgYT17fTthLkJyb3dzZXI9Tms7YS5Ob2RlPU9rO2EuUmVhY3ROYXRpdmU9UGs7YS5Xb3JrZXI9UWs7dGhpcy5hPWFbS2UoKV19dmFyIFJrLE5rPXtEOkZrLGFiOkprfSxPaz17RDpGayxhYjpKa30sUGs9e0Q6Z2ssYWI6SWt9LFFrPXtEOkZrLGFiOklrfTt2YXIgU2s9e3FkOlwibG9jYWxcIixOT05FOlwibm9uZVwiLHNkOlwic2Vzc2lvblwifTtmdW5jdGlvbiBUayhhKXt2YXIgYj1uZXcgdChcImludmFsaWQtcGVyc2lzdGVuY2UtdHlwZVwiKSxjPW5ldyB0KFwidW5zdXBwb3J0ZWQtcGVyc2lzdGVuY2UtdHlwZVwiKTthOntmb3IoZCBpbiBTaylpZihTa1tkXT09YSl7dmFyIGQ9ITA7YnJlYWsgYX1kPSExfWlmKCFkfHxcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgYjtzd2l0Y2goS2UoKSl7Y2FzZSBcIlJlYWN0TmF0aXZlXCI6aWYoXCJzZXNzaW9uXCI9PT1hKXRocm93IGM7YnJlYWs7Y2FzZSBcIk5vZGVcIjppZihcIm5vbmVcIiE9PWEpdGhyb3cgYzticmVhaztjYXNlIFwiV29ya2VyXCI6aWYoXCJzZXNzaW9uXCI9PT1hfHwhcWsoKSYmXCJub25lXCIhPT1hKXRocm93IGM7YnJlYWs7ZGVmYXVsdDppZighUGUoKSYmXCJub25lXCIhPT1hKXRocm93IGM7fX1cbmZ1bmN0aW9uIFVrKCl7dmFyIGE9IVhlKEsoKSkmJkllKCk/ITA6ITEsYj1UZSgpLGM9UGUoKTt0aGlzLnY9YTt0aGlzLmg9Yjt0aGlzLmw9Yzt0aGlzLmE9e307Umt8fChSaz1uZXcgTWspO2E9Ums7dHJ5e3RoaXMuZz0hcWUoKSYmZGYoKXx8IWwuaW5kZXhlZERCP25ldyBhLmEuRDpuZXcgRGsoSmUoKT9uZXcgRWs6bmV3IGEuYS5EKX1jYXRjaChkKXt0aGlzLmc9bmV3IEVrLHRoaXMuaD0hMH10cnl7dGhpcy5pPW5ldyBhLmEuYWJ9Y2F0Y2goZCl7dGhpcy5pPW5ldyBFa310aGlzLm09bmV3IEVrO3RoaXMuZj1xKHRoaXMuWGIsdGhpcyk7dGhpcy5iPXt9fXZhciBWaztmdW5jdGlvbiBXaygpe1ZrfHwoVms9bmV3IFVrKTtyZXR1cm4gVmt9ZnVuY3Rpb24gWGsoYSxiKXtzd2l0Y2goYil7Y2FzZSBcInNlc3Npb25cIjpyZXR1cm4gYS5pO2Nhc2UgXCJub25lXCI6cmV0dXJuIGEubTtkZWZhdWx0OnJldHVybiBhLmd9fVxuZnVuY3Rpb24gWWsoYSxiKXtyZXR1cm5cImZpcmViYXNlOlwiK2EubmFtZSsoYj9cIjpcIitiOlwiXCIpfWZ1bmN0aW9uIFprKGEsYixjKXt2YXIgZD1ZayhiLGMpLGU9WGsoYSxiLkQpO3JldHVybiBhLmdldChiLGMpLnRoZW4oZnVuY3Rpb24oZil7dmFyIGc9bnVsbDt0cnl7Zz1XZShsLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGQpKX1jYXRjaChoKXt9aWYoZyYmIWYpcmV0dXJuIGwubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZCksYS5zZXQoYixnLGMpO2cmJmYmJlwibG9jYWxTdG9yYWdlXCIhPWUudHlwZSYmbC5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShkKX0pfWs9VWsucHJvdG90eXBlO2suZ2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFhrKHRoaXMsYS5EKS5nZXQoWWsoYSxiKSl9O2Z1bmN0aW9uICRrKGEsYixjKXtjPVlrKGIsYyk7XCJsb2NhbFwiPT1iLkQmJihhLmJbY109bnVsbCk7cmV0dXJuIFhrKGEsYi5EKS5UKGMpfVxuay5zZXQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVlrKGEsYyksZT10aGlzLGY9WGsodGhpcyxhLkQpO3JldHVybiBmLnNldChkLGIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXQoZCl9KS50aGVuKGZ1bmN0aW9uKGcpe1wibG9jYWxcIj09YS5EJiYoZS5iW2RdPWcpfSl9O2suYWRkTGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe2E9WWsoYSxiKTt0aGlzLmwmJih0aGlzLmJbYV09bC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShhKSk7bWIodGhpcy5hKSYmKFhrKHRoaXMsXCJsb2NhbFwiKS5jYSh0aGlzLmYpLHRoaXMuaHx8KHFlKCl8fCFkZigpKSYmbC5pbmRleGVkREJ8fCF0aGlzLmx8fGFsKHRoaXMpKTt0aGlzLmFbYV18fCh0aGlzLmFbYV09W10pO3RoaXMuYVthXS5wdXNoKGMpfTtcbmsucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe2E9WWsoYSxiKTt0aGlzLmFbYV0mJihYYSh0aGlzLmFbYV0sZnVuY3Rpb24oZCl7cmV0dXJuIGQ9PWN9KSwwPT10aGlzLmFbYV0ubGVuZ3RoJiZkZWxldGUgdGhpcy5hW2FdKTttYih0aGlzLmEpJiYoWGsodGhpcyxcImxvY2FsXCIpLmlhKHRoaXMuZiksYmwodGhpcykpfTtmdW5jdGlvbiBhbChhKXtibChhKTthLmM9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtmb3IodmFyIGIgaW4gYS5hKXt2YXIgYz1sLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGIpLGQ9YS5iW2JdO2MhPWQmJihhLmJbYl09YyxjPW5ldyBiZCh7dHlwZTpcInN0b3JhZ2VcIixrZXk6Yix0YXJnZXQ6d2luZG93LG9sZFZhbHVlOmQsbmV3VmFsdWU6YyxhOiEwfSksYS5YYihjKSl9fSwxRTMpfWZ1bmN0aW9uIGJsKGEpe2EuYyYmKGNsZWFySW50ZXJ2YWwoYS5jKSxhLmM9bnVsbCl9XG5rLlhiPWZ1bmN0aW9uKGEpe2lmKGEmJmEuZyl7dmFyIGI9YS5hLmtleTtpZihudWxsPT1iKWZvcih2YXIgYyBpbiB0aGlzLmEpe3ZhciBkPXRoaXMuYltjXTtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGQmJihkPW51bGwpO3ZhciBlPWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oYyk7ZSE9PWQmJih0aGlzLmJbY109ZSx0aGlzLmxiKGMpKX1lbHNlIGlmKDA9PWIuaW5kZXhPZihcImZpcmViYXNlOlwiKSYmdGhpcy5hW2JdKXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEuYS5hP1hrKHRoaXMsXCJsb2NhbFwiKS5pYSh0aGlzLmYpOmJsKHRoaXMpO2lmKHRoaXMudilpZihjPWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oYiksZD1hLmEubmV3VmFsdWUsZCE9PWMpbnVsbCE9PWQ/bC5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShiLGQpOmwubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYik7ZWxzZSBpZih0aGlzLmJbYl09PT1kJiZcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEuYS5hKXJldHVybjt2YXIgZj10aGlzO2M9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT09XG50eXBlb2YgYS5hLmF8fGYuYltiXSE9PWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oYikpZi5iW2JdPWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oYiksZi5sYihiKX07V2ImJmljJiYxMD09aWMmJmwubG9jYWxTdG9yYWdlLmdldEl0ZW0oYikhPT1hLmEubmV3VmFsdWUmJmEuYS5uZXdWYWx1ZSE9PWEuYS5vbGRWYWx1ZT9zZXRUaW1lb3V0KGMsMTApOmMoKX19ZWxzZSB3KGEscSh0aGlzLmxiLHRoaXMpKX07ay5sYj1mdW5jdGlvbihhKXt0aGlzLmFbYV0mJncodGhpcy5hW2FdLGZ1bmN0aW9uKGIpe2IoKX0pfTtmdW5jdGlvbiBjbChhKXt0aGlzLmE9YTt0aGlzLmI9V2soKX12YXIgZGw9e25hbWU6XCJhdXRoRXZlbnRcIixEOlwibG9jYWxcIn07ZnVuY3Rpb24gZWwoYSl7cmV0dXJuIGEuYi5nZXQoZGwsYS5hKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiB1aChiKX0pfTtmdW5jdGlvbiBmbCgpe3RoaXMuYT1XaygpfTtmdW5jdGlvbiBnbCgpe3RoaXMuYj0tMX07ZnVuY3Rpb24gaGwoYSxiKXt0aGlzLmI9aWw7dGhpcy5mPWwuVWludDhBcnJheT9uZXcgVWludDhBcnJheSh0aGlzLmIpOkFycmF5KHRoaXMuYik7dGhpcy5nPXRoaXMuYz0wO3RoaXMuYT1bXTt0aGlzLmk9YTt0aGlzLmg9Yjt0aGlzLmw9bC5JbnQzMkFycmF5P25ldyBJbnQzMkFycmF5KDY0KTpBcnJheSg2NCk7dm9pZCAwPT09amwmJihsLkludDMyQXJyYXk/amw9bmV3IEludDMyQXJyYXkoa2wpOmpsPWtsKTt0aGlzLnJlc2V0KCl9dmFyIGpsO3IoaGwsZ2wpO2Zvcih2YXIgaWw9NjQsbGw9aWwtMSxtbD1bXSxubD0wO25sPGxsO25sKyspbWxbbmxdPTA7dmFyIG9sPVlhKDEyOCxtbCk7aGwucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5nPXRoaXMuYz0wO3RoaXMuYT1sLkludDMyQXJyYXk/bmV3IEludDMyQXJyYXkodGhpcy5oKTpaYSh0aGlzLmgpfTtcbmZ1bmN0aW9uIHBsKGEpe2Zvcih2YXIgYj1hLmYsYz1hLmwsZD0wLGU9MDtlPGIubGVuZ3RoOyljW2QrK109YltlXTw8MjR8YltlKzFdPDwxNnxiW2UrMl08PDh8YltlKzNdLGU9NCpkO2ZvcihiPTE2OzY0PmI7YisrKXtlPWNbYi0xNV18MDtkPWNbYi0yXXwwO3ZhciBmPShjW2ItMTZdfDApKygoZT4+Pjd8ZTw8MjUpXihlPj4+MTh8ZTw8MTQpXmU+Pj4zKXwwLGc9KGNbYi03XXwwKSsoKGQ+Pj4xN3xkPDwxNSleKGQ+Pj4xOXxkPDwxMyleZD4+PjEwKXwwO2NbYl09ZitnfDB9ZD1hLmFbMF18MDtlPWEuYVsxXXwwO3ZhciBoPWEuYVsyXXwwLG49YS5hWzNdfDAscD1hLmFbNF18MCx2PWEuYVs1XXwwLEI9YS5hWzZdfDA7Zj1hLmFbN118MDtmb3IoYj0wOzY0PmI7YisrKXt2YXIgQT0oKGQ+Pj4yfGQ8PDMwKV4oZD4+PjEzfGQ8PDE5KV4oZD4+PjIyfGQ8PDEwKSkrKGQmZV5kJmheZSZoKXwwO2c9cCZ2Xn5wJkI7Zj1mKygocD4+PjZ8cDw8MjYpXihwPj4+MTF8cDw8MjEpXihwPj4+MjV8cDw8XG43KSl8MDtnPWcrKGpsW2JdfDApfDA7Zz1mKyhnKyhjW2JdfDApfDApfDA7Zj1CO0I9djt2PXA7cD1uK2d8MDtuPWg7aD1lO2U9ZDtkPWcrQXwwfWEuYVswXT1hLmFbMF0rZHwwO2EuYVsxXT1hLmFbMV0rZXwwO2EuYVsyXT1hLmFbMl0raHwwO2EuYVszXT1hLmFbM10rbnwwO2EuYVs0XT1hLmFbNF0rcHwwO2EuYVs1XT1hLmFbNV0rdnwwO2EuYVs2XT1hLmFbNl0rQnwwO2EuYVs3XT1hLmFbN10rZnwwfVxuZnVuY3Rpb24gcWwoYSxiLGMpe3ZvaWQgMD09PWMmJihjPWIubGVuZ3RoKTt2YXIgZD0wLGU9YS5jO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilmb3IoO2Q8YzspYS5mW2UrK109Yi5jaGFyQ29kZUF0KGQrKyksZT09YS5iJiYocGwoYSksZT0wKTtlbHNlIGlmKG5hKGIpKWZvcig7ZDxjOyl7dmFyIGY9YltkKytdO2lmKCEoXCJudW1iZXJcIj09dHlwZW9mIGYmJjA8PWYmJjI1NT49ZiYmZj09KGZ8MCkpKXRocm93IEVycm9yKFwibWVzc2FnZSBtdXN0IGJlIGEgYnl0ZSBhcnJheVwiKTthLmZbZSsrXT1mO2U9PWEuYiYmKHBsKGEpLGU9MCl9ZWxzZSB0aHJvdyBFcnJvcihcIm1lc3NhZ2UgbXVzdCBiZSBzdHJpbmcgb3IgYXJyYXlcIik7YS5jPWU7YS5nKz1jfVxudmFyIGtsPVsxMTE2MzUyNDA4LDE4OTk0NDc0NDEsMzA0OTMyMzQ3MSwzOTIxMDA5NTczLDk2MTk4NzE2MywxNTA4OTcwOTkzLDI0NTM2MzU3NDgsMjg3MDc2MzIyMSwzNjI0MzgxMDgwLDMxMDU5ODQwMSw2MDcyMjUyNzgsMTQyNjg4MTk4NywxOTI1MDc4Mzg4LDIxNjIwNzgyMDYsMjYxNDg4ODEwMywzMjQ4MjIyNTgwLDM4MzUzOTA0MDEsNDAyMjIyNDc3NCwyNjQzNDcwNzgsNjA0ODA3NjI4LDc3MDI1NTk4MywxMjQ5MTUwMTIyLDE1NTUwODE2OTIsMTk5NjA2NDk4NiwyNTU0MjIwODgyLDI4MjE4MzQzNDksMjk1Mjk5NjgwOCwzMjEwMzEzNjcxLDMzMzY1NzE4OTEsMzU4NDUyODcxMSwxMTM5MjY5OTMsMzM4MjQxODk1LDY2NjMwNzIwNSw3NzM1Mjk5MTIsMTI5NDc1NzM3MiwxMzk2MTgyMjkxLDE2OTUxODM3MDAsMTk4NjY2MTA1MSwyMTc3MDI2MzUwLDI0NTY5NTYwMzcsMjczMDQ4NTkyMSwyODIwMzAyNDExLDMyNTk3MzA4MDAsMzM0NTc2NDc3MSwzNTE2MDY1ODE3LDM2MDAzNTI4MDQsXG40MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF07ZnVuY3Rpb24gcmwoKXtobC5jYWxsKHRoaXMsOCxzbCl9cihybCxobCk7dmFyIHNsPVsxNzc5MDMzNzAzLDMxNDQxMzQyNzcsMTAxMzkwNDI0MiwyNzczNDgwNzYyLDEzNTk4OTMxMTksMjYwMDgyMjkyNCw1Mjg3MzQ2MzUsMTU0MTQ1OTIyNV07ZnVuY3Rpb24gdGwoYSxiLGMsZCxlLGYpe3RoaXMubT1hO3RoaXMuaT1iO3RoaXMubD1jO3RoaXMudj1kfHxudWxsO3RoaXMudT1lfHxudWxsO3RoaXMubz1mO3RoaXMuaD1iK1wiOlwiK2M7dGhpcy5BPW5ldyBmbDt0aGlzLmc9bmV3IGNsKHRoaXMuaCk7dGhpcy5mPW51bGw7dGhpcy5iPVtdO3RoaXMuYT10aGlzLmM9bnVsbH1mdW5jdGlvbiB1bChhKXtyZXR1cm4gbmV3IHQoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiLGEpfWs9dGwucHJvdG90eXBlO1xuay5sYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLklhP3RoaXMuSWE6dGhpcy5JYT1GZSgpLnRoZW4oZnVuY3Rpb24oKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgTChcInVuaXZlcnNhbExpbmtzLnN1YnNjcmliZVwiLGwpKXRocm93IHVsKFwiY29yZG92YS11bml2ZXJzYWwtbGlua3MtcGx1Z2luLWZpeCBpcyBub3QgaW5zdGFsbGVkXCIpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgTChcIkJ1aWxkSW5mby5wYWNrYWdlTmFtZVwiLGwpKXRocm93IHVsKFwiY29yZG92YS1wbHVnaW4tYnVpbGRpbmZvIGlzIG5vdCBpbnN0YWxsZWRcIik7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEwoXCJjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYi5vcGVuVXJsXCIsbCkpdGhyb3cgdWwoXCJjb3Jkb3ZhLXBsdWdpbi1icm93c2VydGFiIGlzIG5vdCBpbnN0YWxsZWRcIik7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEwoXCJjb3Jkb3ZhLkluQXBwQnJvd3Nlci5vcGVuXCIsbCkpdGhyb3cgdWwoXCJjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIgaXMgbm90IGluc3RhbGxlZFwiKTtcbn0sZnVuY3Rpb24oKXt0aHJvdyBuZXcgdChcImNvcmRvdmEtbm90LXJlYWR5XCIpO30pfTtmdW5jdGlvbiB2bCgpe2Zvcih2YXIgYT0yMCxiPVtdOzA8YTspYi5wdXNoKFwiMTIzNDU2Nzg5MGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcIi5jaGFyQXQoTWF0aC5mbG9vcig2MipNYXRoLnJhbmRvbSgpKSkpLGEtLTtyZXR1cm4gYi5qb2luKFwiXCIpfWZ1bmN0aW9uIHdsKGEpe3ZhciBiPW5ldyBybDtxbChiLGEpO2E9W107dmFyIGM9OCpiLmc7NTY+Yi5jP3FsKGIsb2wsNTYtYi5jKTpxbChiLG9sLGIuYi0oYi5jLTU2KSk7Zm9yKHZhciBkPTYzOzU2PD1kO2QtLSliLmZbZF09YyYyNTUsYy89MjU2O3BsKGIpO2ZvcihkPWM9MDtkPGIuaTtkKyspZm9yKHZhciBlPTI0OzA8PWU7ZS09OClhW2MrK109Yi5hW2RdPj5lJjI1NTtyZXR1cm4gZGcoYSl9XG5rLk5iPWZ1bmN0aW9uKGEsYil7YihuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO3JldHVybiBFKCl9O2suTGI9ZnVuY3Rpb24oKXtyZXR1cm4gRihuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpfTtrLlpiPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2suV2I9ZnVuY3Rpb24oKXtyZXR1cm4hMH07ay5TYj1mdW5jdGlvbigpe3JldHVybiEwfTtcbmsuTWI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYodGhpcy5jKXJldHVybiBGKG5ldyB0KFwicmVkaXJlY3Qtb3BlcmF0aW9uLXBlbmRpbmdcIikpO3ZhciBlPXRoaXMsZj1sLmRvY3VtZW50LGc9bnVsbCxoPW51bGwsbj1udWxsLHA9bnVsbDtyZXR1cm4gdGhpcy5jPUUoKS50aGVuKGZ1bmN0aW9uKCl7c2goYik7cmV0dXJuIHhsKGUpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiB5bChlLGEsYixjLGQpfSkudGhlbihmdW5jdGlvbigpe3JldHVybihuZXcgRChmdW5jdGlvbih2LEIpe2g9ZnVuY3Rpb24oKXt2YXIgQT1MKFwiY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIuY2xvc2VcIixsKTt2KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIEEmJkEoKTtlLmEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmEuY2xvc2UmJihlLmEuY2xvc2UoKSxlLmE9bnVsbCk7cmV0dXJuITF9O2UuRWEoaCk7bj1mdW5jdGlvbigpe2d8fChnPUVkKDJFMykudGhlbihmdW5jdGlvbigpe0IobmV3IHQoXCJyZWRpcmVjdC1jYW5jZWxsZWQtYnktdXNlclwiKSl9KSl9O1xucD1mdW5jdGlvbigpeyRlKCkmJm4oKX07Zi5hZGRFdmVudExpc3RlbmVyKFwicmVzdW1lXCIsbiwhMSk7SygpLnRvTG93ZXJDYXNlKCkubWF0Y2goL2FuZHJvaWQvKXx8Zi5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLHAsITEpfSkpLnMoZnVuY3Rpb24odil7cmV0dXJuIHpsKGUpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyB2O30pfSl9KS5uYShmdW5jdGlvbigpe24mJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc3VtZVwiLG4sITEpO3AmJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIixwLCExKTtnJiZnLmNhbmNlbCgpO2gmJmUuUmEoaCk7ZS5jPW51bGx9KX07XG5mdW5jdGlvbiB5bChhLGIsYyxkLGUpe3ZhciBmPXZsKCksZz1uZXcgdGgoYixkLG51bGwsZixuZXcgdChcIm5vLWF1dGgtZXZlbnRcIiksbnVsbCxlKSxoPUwoXCJCdWlsZEluZm8ucGFja2FnZU5hbWVcIixsKTtpZihcInN0cmluZ1wiIT09dHlwZW9mIGgpdGhyb3cgbmV3IHQoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiKTt2YXIgbj1MKFwiQnVpbGRJbmZvLmRpc3BsYXlOYW1lXCIsbCkscD17fTtpZihLKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pKXAuaWJpPWg7ZWxzZSBpZihLKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvYW5kcm9pZC8pKXAuYXBuPWg7ZWxzZSByZXR1cm4gRihuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO24mJihwLmFwcERpc3BsYXlOYW1lPW4pO2Y9d2woZik7cC5zZXNzaW9uSWQ9Zjt2YXIgdj1mayhhLm0sYS5pLGEubCxiLGMsbnVsbCxkLGEudixwLGEudSxlLGEubyk7cmV0dXJuIGEubGEoKS50aGVuKGZ1bmN0aW9uKCl7dmFyIEI9XG5hLmg7cmV0dXJuIGEuQS5hLnNldChkbCxnLncoKSxCKX0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgQj1MKFwiY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIuaXNBdmFpbGFibGVcIixsKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQil0aHJvdyBuZXcgdChcImludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uXCIpO3ZhciBBPW51bGw7QihmdW5jdGlvbihRKXtpZihRKXtBPUwoXCJjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYi5vcGVuVXJsXCIsbCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEpdGhyb3cgbmV3IHQoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiKTtBKHYpfWVsc2V7QT1MKFwiY29yZG92YS5JbkFwcEJyb3dzZXIub3BlblwiLGwpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBKXRocm93IG5ldyB0KFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIik7UT1LKCk7YS5hPUEodixRLm1hdGNoKC8oaVBhZHxpUGhvbmV8aVBvZCkuKk9TIDdfXFxkL2kpfHxRLm1hdGNoKC8oaVBhZHxpUGhvbmV8aVBvZCkuKk9TIDhfXFxkL2kpP1xuXCJfYmxhbmtcIjpcIl9zeXN0ZW1cIixcImxvY2F0aW9uPXllc1wiKX19KX0pfWZ1bmN0aW9uIEFsKGEsYil7Zm9yKHZhciBjPTA7YzxhLmIubGVuZ3RoO2MrKyl0cnl7YS5iW2NdKGIpfWNhdGNoKGQpe319ZnVuY3Rpb24geGwoYSl7YS5mfHwoYS5mPWEubGEoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoZCl7YihkKTthLlJhKGMpO3JldHVybiExfWEuRWEoYyk7QmwoYSl9KX0pKTtyZXR1cm4gYS5mfWZ1bmN0aW9uIHpsKGEpe3ZhciBiPW51bGw7cmV0dXJuIGVsKGEuZykudGhlbihmdW5jdGlvbihjKXtiPWM7Yz1hLmc7cmV0dXJuICRrKGMuYixkbCxjLmEpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBifSl9XG5mdW5jdGlvbiBCbChhKXtmdW5jdGlvbiBiKGcpe2Q9ITA7ZSYmZS5jYW5jZWwoKTt6bChhKS50aGVuKGZ1bmN0aW9uKGgpe3ZhciBuPWM7aWYoaCYmZyYmZy51cmwpe3ZhciBwPW51bGw7bj15ZyhnLnVybCk7LTEhPW4uaW5kZXhPZihcIi9fXy9hdXRoL2NhbGxiYWNrXCIpJiYocD1iZShuKSxwPVdlKGFlKHAsXCJmaXJlYmFzZUVycm9yXCIpfHxudWxsKSxwPShwPVwib2JqZWN0XCI9PT10eXBlb2YgcD9BYShwKTpudWxsKT9uZXcgdGgoaC5jLGguYixudWxsLG51bGwscCxudWxsLGguUygpKTpuZXcgdGgoaC5jLGguYixuLGguZixudWxsLG51bGwsaC5TKCkpKTtuPXB8fGN9QWwoYSxuKX0pfXZhciBjPW5ldyB0aChcInVua25vd25cIixudWxsLG51bGwsbnVsbCxuZXcgdChcIm5vLWF1dGgtZXZlbnRcIikpLGQ9ITEsZT1FZCg1MDApLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gemwoYSkudGhlbihmdW5jdGlvbigpe2R8fEFsKGEsYyl9KX0pLGY9bC5oYW5kbGVPcGVuVVJMO2wuaGFuZGxlT3BlblVSTD1mdW5jdGlvbihnKXswPT1cbmcudG9Mb3dlckNhc2UoKS5pbmRleE9mKEwoXCJCdWlsZEluZm8ucGFja2FnZU5hbWVcIixsKS50b0xvd2VyQ2FzZSgpK1wiOi8vXCIpJiZiKHt1cmw6Z30pO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKXRyeXtmKGcpfWNhdGNoKGgpe2NvbnNvbGUuZXJyb3IoaCl9fTt3aHx8KHdoPW5ldyB2aCk7eGgoYil9ay5FYT1mdW5jdGlvbihhKXt0aGlzLmIucHVzaChhKTt4bCh0aGlzKS5zKGZ1bmN0aW9uKGIpe1wiYXV0aC9pbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiPT09Yi5jb2RlJiYoYj1uZXcgdGgoXCJ1bmtub3duXCIsbnVsbCxudWxsLG51bGwsbmV3IHQoXCJuby1hdXRoLWV2ZW50XCIpKSxhKGIpKX0pfTtrLlJhPWZ1bmN0aW9uKGEpe1hhKHRoaXMuYixmdW5jdGlvbihiKXtyZXR1cm4gYj09YX0pfTtmdW5jdGlvbiBDbChhKXt0aGlzLmE9YTt0aGlzLmI9V2soKX12YXIgRGw9e25hbWU6XCJwZW5kaW5nUmVkaXJlY3RcIixEOlwic2Vzc2lvblwifTtmdW5jdGlvbiBFbChhKXtyZXR1cm4gYS5iLnNldChEbCxcInBlbmRpbmdcIixhLmEpfWZ1bmN0aW9uIEZsKGEpe3JldHVybiAkayhhLmIsRGwsYS5hKX1mdW5jdGlvbiBHbChhKXtyZXR1cm4gYS5iLmdldChEbCxhLmEpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuXCJwZW5kaW5nXCI9PWJ9KX07ZnVuY3Rpb24gSGwoYSxiLGMsZCl7dGhpcy5pPXt9O3RoaXMudT0wO3RoaXMuTz1hO3RoaXMubT1iO3RoaXMudj1jO3RoaXMuRz1kO3RoaXMuaD1bXTt0aGlzLmY9ITE7dGhpcy5sPXEodGhpcy5vLHRoaXMpO3RoaXMuYj1uZXcgSWw7dGhpcy5BPW5ldyBKbDt0aGlzLmc9bmV3IENsKEtsKHRoaXMubSx0aGlzLnYpKTt0aGlzLmM9e307dGhpcy5jLnVua25vd249dGhpcy5iO3RoaXMuYy5zaWduSW5WaWFSZWRpcmVjdD10aGlzLmI7dGhpcy5jLmxpbmtWaWFSZWRpcmVjdD10aGlzLmI7dGhpcy5jLnJlYXV0aFZpYVJlZGlyZWN0PXRoaXMuYjt0aGlzLmMuc2lnbkluVmlhUG9wdXA9dGhpcy5BO3RoaXMuYy5saW5rVmlhUG9wdXA9dGhpcy5BO3RoaXMuYy5yZWF1dGhWaWFQb3B1cD10aGlzLkE7dGhpcy5hPUxsKHRoaXMuTyx0aGlzLm0sdGhpcy52LERhLHRoaXMuRyl9XG5mdW5jdGlvbiBMbChhLGIsYyxkLGUpe3ZhciBmPWZpcmViYXNlLlNES19WRVJTSU9OfHxudWxsO3JldHVybiBHZSgpP25ldyB0bChhLGIsYyxmLGQsZSk6bmV3IFpqKGEsYixjLGYsZCxlKX1IbC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmY9ITE7dGhpcy5hLlJhKHRoaXMubCk7dGhpcy5hPUxsKHRoaXMuTyx0aGlzLm0sdGhpcy52LG51bGwsdGhpcy5HKTt0aGlzLmk9e319O2Z1bmN0aW9uIE1sKGEpe2EuZnx8KGEuZj0hMCxhLmEuRWEoYS5sKSk7dmFyIGI9YS5hO3JldHVybiBhLmEubGEoKS5zKGZ1bmN0aW9uKGMpe2EuYT09YiYmYS5yZXNldCgpO3Rocm93IGM7fSl9XG5mdW5jdGlvbiBObChhKXthLmEuV2IoKSYmTWwoYSkucyhmdW5jdGlvbihiKXt2YXIgYz1uZXcgdGgoXCJ1bmtub3duXCIsbnVsbCxudWxsLG51bGwsbmV3IHQoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTtPbChiKSYmYS5vKGMpfSk7YS5hLlNiKCl8fFBsKGEuYil9ZnVuY3Rpb24gUWwoYSxiKXtWYShhLmgsYil8fGEuaC5wdXNoKGIpO2EuZnx8R2woYS5nKS50aGVuKGZ1bmN0aW9uKGMpe2M/RmwoYS5nKS50aGVuKGZ1bmN0aW9uKCl7TWwoYSkucyhmdW5jdGlvbihkKXt2YXIgZT1uZXcgdGgoXCJ1bmtub3duXCIsbnVsbCxudWxsLG51bGwsbmV3IHQoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTtPbChkKSYmYS5vKGUpfSl9KTpObChhKX0pLnMoZnVuY3Rpb24oKXtObChhKX0pfWZ1bmN0aW9uIFJsKGEsYil7WGEoYS5oLGZ1bmN0aW9uKGMpe3JldHVybiBjPT1ifSl9XG5IbC5wcm90b3R5cGUubz1mdW5jdGlvbihhKXtpZighYSl0aHJvdyBuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKTs2RTU8PXZhKCktdGhpcy51JiYodGhpcy5pPXt9LHRoaXMudT0wKTtpZihhJiZhLmdldFVpZCgpJiZ0aGlzLmkuaGFzT3duUHJvcGVydHkoYS5nZXRVaWQoKSkpcmV0dXJuITE7Zm9yKHZhciBiPSExLGM9MDtjPHRoaXMuaC5sZW5ndGg7YysrKXt2YXIgZD10aGlzLmhbY107aWYoZC5FYihhLmMsYS5iKSl7aWYoYj10aGlzLmNbYS5jXSliLmgoYSxkKSxhJiYoYS5mfHxhLmIpJiYodGhpcy5pW2EuZ2V0VWlkKCldPSEwLHRoaXMudT12YSgpKTtiPSEwO2JyZWFrfX1QbCh0aGlzLmIpO3JldHVybiBifTt2YXIgU2w9bmV3IFplKDJFMywxRTQpLFRsPW5ldyBaZSgzRTQsNkU0KTtIbC5wcm90b3R5cGUucWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iLnFhKCl9O1xuZnVuY3Rpb24gVWwoYSxiLGMsZCxlLGYsZyl7cmV0dXJuIGEuYS5MYihiLGMsZCxmdW5jdGlvbigpe2EuZnx8KGEuZj0hMCxhLmEuRWEoYS5sKSl9LGZ1bmN0aW9uKCl7YS5yZXNldCgpfSxlLGYsZyl9ZnVuY3Rpb24gT2woYSl7cmV0dXJuIGEmJlwiYXV0aC9jb3Jkb3ZhLW5vdC1yZWFkeVwiPT1hLmNvZGU/ITA6ITF9XG5mdW5jdGlvbiBWbChhLGIsYyxkLGUpe3ZhciBmO3JldHVybiBFbChhLmcpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5hLk1iKGIsYyxkLGUpLnMoZnVuY3Rpb24oZyl7aWYoT2woZykpdGhyb3cgbmV3IHQoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpO2Y9ZztyZXR1cm4gRmwoYS5nKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgZjt9KX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5hLlpiKCk/bmV3IEQoZnVuY3Rpb24oKXt9KTpGbChhLmcpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5xYSgpfSkudGhlbihmdW5jdGlvbigpe30pLnMoZnVuY3Rpb24oKXt9KX0pfSl9ZnVuY3Rpb24gV2woYSxiLGMsZCxlKXtyZXR1cm4gYS5hLk5iKGQsZnVuY3Rpb24oZil7Yi5tYShjLG51bGwsZixlKX0sU2wuZ2V0KCkpfXZhciBYbD17fTtmdW5jdGlvbiBLbChhLGIsYyl7YT1hK1wiOlwiK2I7YyYmKGE9YStcIjpcIitjLnVybCk7cmV0dXJuIGF9XG5mdW5jdGlvbiBZbChhLGIsYyxkKXt2YXIgZT1LbChiLGMsZCk7WGxbZV18fChYbFtlXT1uZXcgSGwoYSxiLGMsZCkpO3JldHVybiBYbFtlXX1mdW5jdGlvbiBJbCgpe3RoaXMuYj1udWxsO3RoaXMuZj1bXTt0aGlzLmM9W107dGhpcy5hPW51bGw7dGhpcy5pPXRoaXMuZz0hMX1JbC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmI9bnVsbDt0aGlzLmEmJih0aGlzLmEuY2FuY2VsKCksdGhpcy5hPW51bGwpfTtcbklsLnByb3RvdHlwZS5oPWZ1bmN0aW9uKGEsYil7aWYoYSl7dGhpcy5yZXNldCgpO3RoaXMuZz0hMDt2YXIgYz1hLmMsZD1hLmIsZT1hLmEmJlwiYXV0aC93ZWItc3RvcmFnZS11bnN1cHBvcnRlZFwiPT1hLmEuY29kZSxmPWEuYSYmXCJhdXRoL29wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIj09YS5hLmNvZGU7dGhpcy5pPSEoIWUmJiFmKTtcInVua25vd25cIiE9Y3x8ZXx8Zj9hLmE/KFpsKHRoaXMsITAsbnVsbCxhLmEpLEUoKSk6Yi5GYShjLGQpPyRsKHRoaXMsYSxiKTpGKG5ldyB0KFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpKTooWmwodGhpcywhMSxudWxsLG51bGwpLEUoKSl9ZWxzZSBGKG5ldyB0KFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpKX07ZnVuY3Rpb24gUGwoYSl7YS5nfHwoYS5nPSEwLFpsKGEsITEsbnVsbCxudWxsKSl9ZnVuY3Rpb24gYW0oYSl7YS5nJiYhYS5pJiZabChhLCExLG51bGwsbnVsbCl9XG5mdW5jdGlvbiAkbChhLGIsYyl7Yz1jLkZhKGIuYyxiLmIpO3ZhciBkPWIuZyxlPWIuZixmPWIuaSxnPWIuUygpLGg9ISFiLmMubWF0Y2goL1JlZGlyZWN0JC8pO2MoZCxlLGcsZikudGhlbihmdW5jdGlvbihuKXtabChhLGgsbixudWxsKX0pLnMoZnVuY3Rpb24obil7WmwoYSxoLG51bGwsbil9KX1mdW5jdGlvbiBibShhLGIpe2EuYj1mdW5jdGlvbigpe3JldHVybiBGKGIpfTtpZihhLmMubGVuZ3RoKWZvcih2YXIgYz0wO2M8YS5jLmxlbmd0aDtjKyspYS5jW2NdKGIpfWZ1bmN0aW9uIGNtKGEsYil7YS5iPWZ1bmN0aW9uKCl7cmV0dXJuIEUoYil9O2lmKGEuZi5sZW5ndGgpZm9yKHZhciBjPTA7YzxhLmYubGVuZ3RoO2MrKylhLmZbY10oYil9ZnVuY3Rpb24gWmwoYSxiLGMsZCl7Yj9kP2JtKGEsZCk6Y20oYSxjKTpjbShhLHt1c2VyOm51bGx9KTthLmY9W107YS5jPVtdfVxuSWwucHJvdG90eXBlLnFhPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gbmV3IEQoZnVuY3Rpb24oYixjKXthLmI/YS5iKCkudGhlbihiLGMpOihhLmYucHVzaChiKSxhLmMucHVzaChjKSxkbShhKSl9KX07ZnVuY3Rpb24gZG0oYSl7dmFyIGI9bmV3IHQoXCJ0aW1lb3V0XCIpO2EuYSYmYS5hLmNhbmNlbCgpO2EuYT1FZChUbC5nZXQoKSkudGhlbihmdW5jdGlvbigpe2EuYnx8KGEuZz0hMCxabChhLCEwLG51bGwsYikpfSl9ZnVuY3Rpb24gSmwoKXt9SmwucHJvdG90eXBlLmg9ZnVuY3Rpb24oYSxiKXtpZihhKXt2YXIgYz1hLmMsZD1hLmI7YS5hPyhiLm1hKGEuYyxudWxsLGEuYSxhLmIpLEUoKSk6Yi5GYShjLGQpP2VtKGEsYik6RihuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKSl9ZWxzZSBGKG5ldyB0KFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpKX07XG5mdW5jdGlvbiBlbShhLGIpe3ZhciBjPWEuYixkPWEuYztiLkZhKGQsYykoYS5nLGEuZixhLlMoKSxhLmkpLnRoZW4oZnVuY3Rpb24oZSl7Yi5tYShkLGUsbnVsbCxjKX0pLnMoZnVuY3Rpb24oZSl7Yi5tYShkLG51bGwsZSxjKX0pfTtmdW5jdGlvbiBmbSgpe3RoaXMuaGI9ITE7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJhcHBWZXJpZmljYXRpb25EaXNhYmxlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYn0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuaGI9YX0sZW51bWVyYWJsZTohMX0pfTtmdW5jdGlvbiBnbShhLGIpe3RoaXMuYT1iO00odGhpcyxcInZlcmlmaWNhdGlvbklkXCIsYSl9Z20ucHJvdG90eXBlLmNvbmZpcm09ZnVuY3Rpb24oYSl7YT1xaCh0aGlzLnZlcmlmaWNhdGlvbklkLGEpO3JldHVybiB0aGlzLmEoYSl9O2Z1bmN0aW9uIGhtKGEsYixjLGQpe3JldHVybihuZXcgbWgoYSkpLmViKGIsYykudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gbmV3IGdtKGUsZCl9KX07ZnVuY3Rpb24gaW0oYSl7dmFyIGI9amcoYSk7aWYoIShiJiZiLmV4cCYmYi5hdXRoX3RpbWUmJmIuaWF0KSl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJBbiBpbnRlcm5hbCBlcnJvciBvY2N1cnJlZC4gVGhlIHRva2VuIG9idGFpbmVkIGJ5IEZpcmViYXNlIGFwcGVhcnMgdG8gYmUgbWFsZm9ybWVkLiBQbGVhc2UgcmV0cnkgdGhlIG9wZXJhdGlvbi5cIik7Tih0aGlzLHt0b2tlbjphLGV4cGlyYXRpb25UaW1lOmNmKDFFMypiLmV4cCksYXV0aFRpbWU6Y2YoMUUzKmIuYXV0aF90aW1lKSxpc3N1ZWRBdFRpbWU6Y2YoMUUzKmIuaWF0KSxzaWduSW5Qcm92aWRlcjpiLmZpcmViYXNlJiZiLmZpcmViYXNlLnNpZ25faW5fcHJvdmlkZXI/Yi5maXJlYmFzZS5zaWduX2luX3Byb3ZpZGVyOm51bGwsc2lnbkluU2Vjb25kRmFjdG9yOmIuZmlyZWJhc2UmJmIuZmlyZWJhc2Uuc2lnbl9pbl9zZWNvbmRfZmFjdG9yP2IuZmlyZWJhc2Uuc2lnbl9pbl9zZWNvbmRfZmFjdG9yOm51bGwsY2xhaW1zOmJ9KX1cbjtmdW5jdGlvbiBqbShhLGIsYyl7dmFyIGQ9YiYmYltrbV07aWYoIWQpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiSW50ZXJuYWwgYXNzZXJ0OiBJbnZhbGlkIE11bHRpRmFjdG9yUmVzb2x2ZXJcIik7dGhpcy5hPWE7dGhpcy5mPW5iKGIpO3RoaXMuZz1jO3RoaXMuYz1uZXcgemcobnVsbCxkKTt0aGlzLmI9W107dmFyIGU9dGhpczt3KGJbbG1dfHxbXSxmdW5jdGlvbihmKXsoZj11ZihmKSkmJmUuYi5wdXNoKGYpfSk7TSh0aGlzLFwiYXV0aFwiLHRoaXMuYSk7TSh0aGlzLFwic2Vzc2lvblwiLHRoaXMuYyk7TSh0aGlzLFwiaGludHNcIix0aGlzLmIpfXZhciBsbT1cIm1mYUluZm9cIixrbT1cIm1mYVBlbmRpbmdDcmVkZW50aWFsXCI7am0ucHJvdG90eXBlLlFjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIGEucmIodGhpcy5hLmEsdGhpcy5jKS50aGVuKGZ1bmN0aW9uKGMpe3ZhciBkPW5iKGIuZik7ZGVsZXRlIGRbbG1dO2RlbGV0ZSBkW2ttXTt6KGQsYyk7cmV0dXJuIGIuZyhkKX0pfTtmdW5jdGlvbiBtbShhLGIsYyxkKXt0LmNhbGwodGhpcyxcIm11bHRpLWZhY3Rvci1hdXRoLXJlcXVpcmVkXCIsZCxiKTt0aGlzLmI9bmV3IGptKGEsYixjKTtNKHRoaXMsXCJyZXNvbHZlclwiLHRoaXMuYil9cihtbSx0KTtmdW5jdGlvbiBubShhLGIsYyl7aWYoYSYmbShhLnNlcnZlclJlc3BvbnNlKSYmXCJhdXRoL211bHRpLWZhY3Rvci1hdXRoLXJlcXVpcmVkXCI9PT1hLmNvZGUpdHJ5e3JldHVybiBuZXcgbW0oYixhLnNlcnZlclJlc3BvbnNlLGMsYS5tZXNzYWdlKX1jYXRjaChkKXt9cmV0dXJuIG51bGx9O2Z1bmN0aW9uIG9tKCl7fW9tLnByb3RvdHlwZS5yYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGIudHlwZT09QWc/cG0odGhpcyxhLGIsYyk6cW0odGhpcyxhLGIpfTtmdW5jdGlvbiBwbShhLGIsYyxkKXtyZXR1cm4gYy5IYSgpLnRoZW4oZnVuY3Rpb24oZSl7ZT17aWRUb2tlbjplfTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGQmJihlLmRpc3BsYXlOYW1lPWQpO3ooZSx7cGhvbmVWZXJpZmljYXRpb25JbmZvOmloKGEuYSl9KTtyZXR1cm4gTyhiLEhqLGUpfSl9ZnVuY3Rpb24gcW0oYSxiLGMpe3JldHVybiBjLkhhKCkudGhlbihmdW5jdGlvbihkKXtkPXttZmFQZW5kaW5nQ3JlZGVudGlhbDpkfTt6KGQse3Bob25lVmVyaWZpY2F0aW9uSW5mbzppaChhLmEpfSk7cmV0dXJuIE8oYixJaixkKX0pfWZ1bmN0aW9uIHJtKGEpe00odGhpcyxcImZhY3RvcklkXCIsYS5mYSk7dGhpcy5hPWF9cihybSxvbSk7XG5mdW5jdGlvbiBzbShhKXtybS5jYWxsKHRoaXMsYSk7aWYodGhpcy5hLmZhIT1taC5QUk9WSURFUl9JRCl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJmaXJlYmFzZS5hdXRoLlBob25lTXVsdGlGYWN0b3JBc3NlcnRpb24gcmVxdWlyZXMgYSB2YWxpZCBmaXJlYmFzZS5hdXRoLlBob25lQXV0aENyZWRlbnRpYWxcIik7fXIoc20scm0pO2Z1bmN0aW9uIHRtKGEsYil7Ry5jYWxsKHRoaXMsYSk7Zm9yKHZhciBjIGluIGIpdGhpc1tjXT1iW2NdfXIodG0sRyk7ZnVuY3Rpb24gdW0oYSxiKXt0aGlzLmE9YTt0aGlzLmI9W107dGhpcy5jPXEodGhpcy54Yyx0aGlzKTtuZCh0aGlzLmEsXCJ1c2VyUmVsb2FkZWRcIix0aGlzLmMpO3ZhciBjPVtdO2ImJmIubXVsdGlGYWN0b3ImJmIubXVsdGlGYWN0b3IuZW5yb2xsZWRGYWN0b3JzJiZ3KGIubXVsdGlGYWN0b3IuZW5yb2xsZWRGYWN0b3JzLGZ1bmN0aW9uKGQpe3ZhciBlPW51bGwsZj17fTtpZihkKXtkLnVpZCYmKGZbcmZdPWQudWlkKTtkLmRpc3BsYXlOYW1lJiYoZltzZl09ZC5kaXNwbGF5TmFtZSk7ZC5lbnJvbGxtZW50VGltZSYmKGZbdGZdPShuZXcgRGF0ZShkLmVucm9sbG1lbnRUaW1lKSkudG9JU09TdHJpbmcoKSk7ZC5waG9uZU51bWJlciYmKGZbcWZdPWQucGhvbmVOdW1iZXIpO3RyeXtlPW5ldyB2ZihmKX1jYXRjaChnKXt9ZD1lfWVsc2UgZD1udWxsO2QmJmMucHVzaChkKX0pO3ZtKHRoaXMsYyl9XG5mdW5jdGlvbiB3bShhKXt2YXIgYj1bXTt3KGEubWZhSW5mb3x8W10sZnVuY3Rpb24oYyl7KGM9dWYoYykpJiZiLnB1c2goYyl9KTtyZXR1cm4gYn1rPXVtLnByb3RvdHlwZTtrLnhjPWZ1bmN0aW9uKGEpe3ZtKHRoaXMsd20oYS5nZCkpfTtmdW5jdGlvbiB2bShhLGIpe2EuYj1iO00oYSxcImVucm9sbGVkRmFjdG9yc1wiLGIpfWsuUWI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLkkoKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgemcoYSxudWxsKX0pfTtrLmVjPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPXRoaXMuYS5hO3JldHVybiB0aGlzLlFiKCkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gYS5yYihkLGUsYil9KS50aGVuKGZ1bmN0aW9uKGUpe3htKGMuYSxlKTtyZXR1cm4gYy5hLnJlbG9hZCgpfSl9O1xuay5hZD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6YS51aWQsZD10aGlzLmEuYTtyZXR1cm4gdGhpcy5hLkkoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBPKGQsTWose2lkVG9rZW46ZSxtZmFFbnJvbGxtZW50SWQ6Y30pfSkudGhlbihmdW5jdGlvbihlKXt2YXIgZj1RYShiLmIsZnVuY3Rpb24oZyl7cmV0dXJuIGcudWlkIT1jfSk7dm0oYixmKTt4bShiLmEsZSk7cmV0dXJuIGIuYS5yZWxvYWQoKS5zKGZ1bmN0aW9uKGcpe2lmKFwiYXV0aC91c2VyLXRva2VuLWV4cGlyZWRcIiE9Zy5jb2RlKXRocm93IGc7fSl9KX07ay53PWZ1bmN0aW9uKCl7cmV0dXJue211bHRpRmFjdG9yOntlbnJvbGxlZEZhY3RvcnM6UmEodGhpcy5iLGZ1bmN0aW9uKGEpe3JldHVybiBhLncoKX0pfX19O2Z1bmN0aW9uIHltKGEsYixjKXt0aGlzLmg9YTt0aGlzLmk9Yjt0aGlzLmc9Yzt0aGlzLmM9M0U0O3RoaXMuZj05NkU0O3RoaXMuYj1udWxsO3RoaXMuYT10aGlzLmM7aWYodGhpcy5mPHRoaXMuYyl0aHJvdyBFcnJvcihcIlByb2FjdGl2ZSByZWZyZXNoIGxvd2VyIGJvdW5kIGdyZWF0ZXIgdGhhbiB1cHBlciBib3VuZCFcIik7fXltLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3RoaXMuYT10aGlzLmM7em0odGhpcywhMCl9O2Z1bmN0aW9uIEFtKGEsYil7aWYoYilyZXR1cm4gYS5hPWEuYyxhLmcoKTtiPWEuYTthLmEqPTI7YS5hPmEuZiYmKGEuYT1hLmYpO3JldHVybiBifWZ1bmN0aW9uIHptKGEsYil7YS5zdG9wKCk7YS5iPUVkKEFtKGEsYikpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYWYoKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5oKCl9KS50aGVuKGZ1bmN0aW9uKCl7em0oYSwhMCl9KS5zKGZ1bmN0aW9uKGMpe2EuaShjKSYmem0oYSwhMSl9KX1cbnltLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5iJiYodGhpcy5iLmNhbmNlbCgpLHRoaXMuYj1udWxsKX07ZnVuY3Rpb24gQm0oYSl7dGhpcy5jPWE7dGhpcy5iPXRoaXMuYT1udWxsfUJtLnByb3RvdHlwZS53PWZ1bmN0aW9uKCl7cmV0dXJue2FwaUtleTp0aGlzLmMuYyxyZWZyZXNoVG9rZW46dGhpcy5hLGFjY2Vzc1Rva2VuOnRoaXMuYiYmdGhpcy5iLnRvU3RyaW5nKCksZXhwaXJhdGlvblRpbWU6Q20odGhpcyl9fTtmdW5jdGlvbiBDbShhKXtyZXR1cm4gYS5iJiYxRTMqYS5iLmN8fDB9ZnVuY3Rpb24gRG0oYSxiKXt2YXIgYz1iLnJlZnJlc2hUb2tlbjthLmI9a2coYltFZ118fFwiXCIpO2EuYT1jfWZ1bmN0aW9uIEVtKGEsYil7YS5iPWIuYjthLmE9Yi5hfVxuZnVuY3Rpb24gRm0oYSxiKXtyZXR1cm4gWGkoYS5jLGIpLnRoZW4oZnVuY3Rpb24oYyl7YS5iPWtnKGMuYWNjZXNzX3Rva2VuKTthLmE9Yy5yZWZyZXNoX3Rva2VuO3JldHVybnthY2Nlc3NUb2tlbjphLmIudG9TdHJpbmcoKSxyZWZyZXNoVG9rZW46YS5hfX0pLnMoZnVuY3Rpb24oYyl7XCJhdXRoL3VzZXItdG9rZW4tZXhwaXJlZFwiPT1jLmNvZGUmJihhLmE9bnVsbCk7dGhyb3cgYzt9KX1CbS5wcm90b3R5cGUuZ2V0VG9rZW49ZnVuY3Rpb24oYSl7YT0hIWE7cmV0dXJuIHRoaXMuYiYmIXRoaXMuYT9GKG5ldyB0KFwidXNlci10b2tlbi1leHBpcmVkXCIpKTphfHwhdGhpcy5ifHx2YSgpPkNtKHRoaXMpLTNFND90aGlzLmE/Rm0odGhpcyx7Z3JhbnRfdHlwZTpcInJlZnJlc2hfdG9rZW5cIixyZWZyZXNoX3Rva2VuOnRoaXMuYX0pOkUobnVsbCk6RSh7YWNjZXNzVG9rZW46dGhpcy5iLnRvU3RyaW5nKCkscmVmcmVzaFRva2VuOnRoaXMuYX0pfTtmdW5jdGlvbiBHbShhLGIpe3RoaXMuYT1hfHxudWxsO3RoaXMuYj1ifHxudWxsO04odGhpcyx7bGFzdFNpZ25JblRpbWU6Y2YoYnx8bnVsbCksY3JlYXRpb25UaW1lOmNmKGF8fG51bGwpfSl9ZnVuY3Rpb24gSG0oYSl7cmV0dXJuIG5ldyBHbShhLmEsYS5iKX1HbS5wcm90b3R5cGUudz1mdW5jdGlvbigpe3JldHVybntsYXN0TG9naW5BdDp0aGlzLmIsY3JlYXRlZEF0OnRoaXMuYX19O2Z1bmN0aW9uIEltKGEsYixjLGQsZSxmKXtOKHRoaXMse3VpZDphLGRpc3BsYXlOYW1lOmR8fG51bGwscGhvdG9VUkw6ZXx8bnVsbCxlbWFpbDpjfHxudWxsLHBob25lTnVtYmVyOmZ8fG51bGwscHJvdmlkZXJJZDpifSl9XG5mdW5jdGlvbiBKbShhLGIsYyl7dGhpcy5HPVtdO3RoaXMubD1hLmFwaUtleTt0aGlzLm09YS5hcHBOYW1lO3RoaXMubz1hLmF1dGhEb21haW58fG51bGw7dmFyIGQ9ZmlyZWJhc2UuU0RLX1ZFUlNJT04/T2UoZmlyZWJhc2UuU0RLX1ZFUlNJT04pOm51bGw7dGhpcy5hPW5ldyBKaSh0aGlzLmwsQ2EoRGEpLGQpO2EuZW11bGF0b3JDb25maWcmJlFpKHRoaXMuYSxhLmVtdWxhdG9yQ29uZmlnKTt0aGlzLmI9bmV3IEJtKHRoaXMuYSk7S20odGhpcyxiW0VnXSk7RG0odGhpcy5iLGIpO00odGhpcyxcInJlZnJlc2hUb2tlblwiLHRoaXMuYi5hKTtMbSh0aGlzLGN8fHt9KTtJLmNhbGwodGhpcyk7dGhpcy5QPSExO3RoaXMubyYmUmUoKSYmKHRoaXMuaT1ZbCh0aGlzLm8sdGhpcy5sLHRoaXMubSkpO3RoaXMuUj1bXTt0aGlzLmY9bnVsbDt0aGlzLnU9TW0odGhpcyk7dGhpcy4kPXEodGhpcy5nYix0aGlzKTt2YXIgZT10aGlzO3RoaXMucGE9bnVsbDt0aGlzLkJhPWZ1bmN0aW9uKGYpe2Uud2EoZi5oKX07XG50aGlzLmJhPW51bGw7dGhpcy56YT1mdW5jdGlvbihmKXtRaShlLmEsZi5jKX07dGhpcy5XPW51bGw7dGhpcy5YPVtdO3RoaXMuQWE9ZnVuY3Rpb24oZil7Tm0oZSxmLmYpfTt0aGlzLmFhPW51bGw7dGhpcy5OPW5ldyB1bSh0aGlzLGMpO00odGhpcyxcIm11bHRpRmFjdG9yXCIsdGhpcy5OKX1yKEptLEkpO0ptLnByb3RvdHlwZS53YT1mdW5jdGlvbihhKXt0aGlzLnBhPWE7UGkodGhpcy5hLGEpfTtKbS5wcm90b3R5cGUua2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYX07ZnVuY3Rpb24gT20oYSxiKXthLmJhJiZIKGEuYmEsXCJsYW5ndWFnZUNvZGVDaGFuZ2VkXCIsYS5CYSk7KGEuYmE9YikmJm5kKGIsXCJsYW5ndWFnZUNvZGVDaGFuZ2VkXCIsYS5CYSl9ZnVuY3Rpb24gUG0oYSxiKXthLlcmJkgoYS5XLFwiZW11bGF0b3JDb25maWdDaGFuZ2VkXCIsYS56YSk7KGEuVz1iKSYmbmQoYixcImVtdWxhdG9yQ29uZmlnQ2hhbmdlZFwiLGEuemEpfVxuZnVuY3Rpb24gTm0oYSxiKXthLlg9YjtTaShhLmEsZmlyZWJhc2UuU0RLX1ZFUlNJT04/T2UoZmlyZWJhc2UuU0RLX1ZFUlNJT04sYS5YKTpudWxsKX1KbS5wcm90b3R5cGUuR2E9ZnVuY3Rpb24oKXtyZXR1cm4gWmEodGhpcy5YKX07ZnVuY3Rpb24gUW0oYSxiKXthLmFhJiZIKGEuYWEsXCJmcmFtZXdvcmtDaGFuZ2VkXCIsYS5BYSk7KGEuYWE9YikmJm5kKGIsXCJmcmFtZXdvcmtDaGFuZ2VkXCIsYS5BYSl9Sm0ucHJvdG90eXBlLmdiPWZ1bmN0aW9uKCl7dGhpcy51LmImJih0aGlzLnUuc3RvcCgpLHRoaXMudS5zdGFydCgpKX07ZnVuY3Rpb24gUm0oYSl7dHJ5e3JldHVybiBmaXJlYmFzZS5hcHAoYS5tKS5hdXRoKCl9Y2F0Y2goYil7dGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiTm8gZmlyZWJhc2UuYXV0aC5BdXRoIGluc3RhbmNlIGlzIGF2YWlsYWJsZSBmb3IgdGhlIEZpcmViYXNlIEFwcCAnXCIrYS5tK1wiJyFcIik7fX1cbmZ1bmN0aW9uIE1tKGEpe3JldHVybiBuZXcgeW0oZnVuY3Rpb24oKXtyZXR1cm4gYS5JKCEwKX0sZnVuY3Rpb24oYil7cmV0dXJuIGImJlwiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PWIuY29kZT8hMDohMX0sZnVuY3Rpb24oKXt2YXIgYj1DbShhLmIpLXZhKCktM0U1O3JldHVybiAwPGI/YjowfSl9ZnVuY3Rpb24gU20oYSl7YS5BfHxhLnUuYnx8KGEudS5zdGFydCgpLEgoYSxcInRva2VuQ2hhbmdlZFwiLGEuJCksbmQoYSxcInRva2VuQ2hhbmdlZFwiLGEuJCkpfWZ1bmN0aW9uIFRtKGEpe0goYSxcInRva2VuQ2hhbmdlZFwiLGEuJCk7YS51LnN0b3AoKX1mdW5jdGlvbiBLbShhLGIpe2EueWE9YjtNKGEsXCJfbGF0XCIsYil9ZnVuY3Rpb24gVW0oYSxiKXtYYShhLlIsZnVuY3Rpb24oYyl7cmV0dXJuIGM9PWJ9KX1cbmZ1bmN0aW9uIFZtKGEpe2Zvcih2YXIgYj1bXSxjPTA7YzxhLlIubGVuZ3RoO2MrKyliLnB1c2goYS5SW2NdKGEpKTtyZXR1cm4gSmMoYikudGhlbihmdW5jdGlvbigpe3JldHVybiBhfSl9ZnVuY3Rpb24gV20oYSl7YS5pJiYhYS5QJiYoYS5QPSEwLFFsKGEuaSxhKSl9ZnVuY3Rpb24gTG0oYSxiKXtOKGEse3VpZDpiLnVpZCxkaXNwbGF5TmFtZTpiLmRpc3BsYXlOYW1lfHxudWxsLHBob3RvVVJMOmIucGhvdG9VUkx8fG51bGwsZW1haWw6Yi5lbWFpbHx8bnVsbCxlbWFpbFZlcmlmaWVkOmIuZW1haWxWZXJpZmllZHx8ITEscGhvbmVOdW1iZXI6Yi5waG9uZU51bWJlcnx8bnVsbCxpc0Fub255bW91czpiLmlzQW5vbnltb3VzfHwhMSx0ZW5hbnRJZDpiLnRlbmFudElkfHxudWxsLG1ldGFkYXRhOm5ldyBHbShiLmNyZWF0ZWRBdCxiLmxhc3RMb2dpbkF0KSxwcm92aWRlckRhdGE6W119KTthLmEuYj1hLnRlbmFudElkfU0oSm0ucHJvdG90eXBlLFwicHJvdmlkZXJJZFwiLFwiZmlyZWJhc2VcIik7XG5mdW5jdGlvbiBYbSgpe31mdW5jdGlvbiBZbShhKXtyZXR1cm4gRSgpLnRoZW4oZnVuY3Rpb24oKXtpZihhLkEpdGhyb3cgbmV3IHQoXCJhcHAtZGVsZXRlZFwiKTt9KX1mdW5jdGlvbiBabShhKXtyZXR1cm4gUmEoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oYil7cmV0dXJuIGIucHJvdmlkZXJJZH0pfWZ1bmN0aW9uICRtKGEsYil7YiYmKGFuKGEsYi5wcm92aWRlcklkKSxhLnByb3ZpZGVyRGF0YS5wdXNoKGIpKX1mdW5jdGlvbiBhbihhLGIpe1hhKGEucHJvdmlkZXJEYXRhLGZ1bmN0aW9uKGMpe3JldHVybiBjLnByb3ZpZGVySWQ9PWJ9KX1mdW5jdGlvbiBibihhLGIsYyl7KFwidWlkXCIhPWJ8fGMpJiZhLmhhc093blByb3BlcnR5KGIpJiZNKGEsYixjKX1cbmZ1bmN0aW9uIGNuKGEsYil7YSE9YiYmKE4oYSx7dWlkOmIudWlkLGRpc3BsYXlOYW1lOmIuZGlzcGxheU5hbWUscGhvdG9VUkw6Yi5waG90b1VSTCxlbWFpbDpiLmVtYWlsLGVtYWlsVmVyaWZpZWQ6Yi5lbWFpbFZlcmlmaWVkLHBob25lTnVtYmVyOmIucGhvbmVOdW1iZXIsaXNBbm9ueW1vdXM6Yi5pc0Fub255bW91cyx0ZW5hbnRJZDpiLnRlbmFudElkLHByb3ZpZGVyRGF0YTpbXX0pLGIubWV0YWRhdGE/TShhLFwibWV0YWRhdGFcIixIbShiLm1ldGFkYXRhKSk6TShhLFwibWV0YWRhdGFcIixuZXcgR20pLHcoYi5wcm92aWRlckRhdGEsZnVuY3Rpb24oYyl7JG0oYSxjKX0pLEVtKGEuYixiLmIpLE0oYSxcInJlZnJlc2hUb2tlblwiLGEuYi5hKSx2bShhLk4sYi5OLmIpKX1rPUptLnByb3RvdHlwZTtrLnJlbG9hZD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIFIodGhpcyxZbSh0aGlzKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGRuKGEpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVm0oYSl9KS50aGVuKFhtKX0pKX07XG5mdW5jdGlvbiBkbihhKXtyZXR1cm4gYS5JKCkudGhlbihmdW5jdGlvbihiKXt2YXIgYz1hLmlzQW5vbnltb3VzO3JldHVybiBlbihhLGIpLnRoZW4oZnVuY3Rpb24oKXtjfHxibihhLFwiaXNBbm9ueW1vdXNcIiwhMSk7cmV0dXJuIGJ9KX0pfWsubmM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuSShhKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBuZXcgaW0oYil9KX07ay5JPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyxZbSh0aGlzKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIuYi5nZXRUb2tlbihhKX0pLnRoZW4oZnVuY3Rpb24oYyl7aWYoIWMpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTtjLmFjY2Vzc1Rva2VuIT1iLnlhJiYoS20oYixjLmFjY2Vzc1Rva2VuKSxiLmRpc3BhdGNoRXZlbnQobmV3IHRtKFwidG9rZW5DaGFuZ2VkXCIpKSk7Ym4oYixcInJlZnJlc2hUb2tlblwiLGMucmVmcmVzaFRva2VuKTtyZXR1cm4gYy5hY2Nlc3NUb2tlbn0pKX07XG5mdW5jdGlvbiB4bShhLGIpe2JbRWddJiZhLnlhIT1iW0VnXSYmKERtKGEuYixiKSxhLmRpc3BhdGNoRXZlbnQobmV3IHRtKFwidG9rZW5DaGFuZ2VkXCIpKSxLbShhLGJbRWddKSxibihhLFwicmVmcmVzaFRva2VuXCIsYS5iLmEpKX1mdW5jdGlvbiBlbihhLGIpe3JldHVybiBPKGEuYSxKaix7aWRUb2tlbjpifSkudGhlbihxKGEuSmMsYSkpfVxuay5KYz1mdW5jdGlvbihhKXthPWEudXNlcnM7aWYoIWF8fCFhLmxlbmd0aCl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO2E9YVswXTtMbSh0aGlzLHt1aWQ6YS5sb2NhbElkLGRpc3BsYXlOYW1lOmEuZGlzcGxheU5hbWUscGhvdG9VUkw6YS5waG90b1VybCxlbWFpbDphLmVtYWlsLGVtYWlsVmVyaWZpZWQ6ISFhLmVtYWlsVmVyaWZpZWQscGhvbmVOdW1iZXI6YS5waG9uZU51bWJlcixsYXN0TG9naW5BdDphLmxhc3RMb2dpbkF0LGNyZWF0ZWRBdDphLmNyZWF0ZWRBdCx0ZW5hbnRJZDphLnRlbmFudElkfSk7Zm9yKHZhciBiPWZuKGEpLGM9MDtjPGIubGVuZ3RoO2MrKykkbSh0aGlzLGJbY10pO2JuKHRoaXMsXCJpc0Fub255bW91c1wiLCEodGhpcy5lbWFpbCYmYS5wYXNzd29yZEhhc2gpJiYhKHRoaXMucHJvdmlkZXJEYXRhJiZ0aGlzLnByb3ZpZGVyRGF0YS5sZW5ndGgpKTt0aGlzLmRpc3BhdGNoRXZlbnQobmV3IHRtKFwidXNlclJlbG9hZGVkXCIse2dkOmF9KSl9O1xuZnVuY3Rpb24gZm4oYSl7cmV0dXJuKGE9YS5wcm92aWRlclVzZXJJbmZvKSYmYS5sZW5ndGg/UmEoYSxmdW5jdGlvbihiKXtyZXR1cm4gbmV3IEltKGIucmF3SWQsYi5wcm92aWRlcklkLGIuZW1haWwsYi5kaXNwbGF5TmFtZSxiLnBob3RvVXJsLGIucGhvbmVOdW1iZXIpfSk6W119ay5LYz1mdW5jdGlvbihhKXtoZihcImZpcmViYXNlLlVzZXIucHJvdG90eXBlLnJlYXV0aGVudGljYXRlQW5kUmV0cmlldmVEYXRhV2l0aENyZWRlbnRpYWwgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBmaXJlYmFzZS5Vc2VyLnByb3RvdHlwZS5yZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLnNiKGEpfTtcbmsuc2I9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPW51bGw7cmV0dXJuIFIodGhpcyxhLmModGhpcy5hLHRoaXMudWlkKS50aGVuKGZ1bmN0aW9uKGQpe3htKGIsZCk7Yz1nbihiLGQsXCJyZWF1dGhlbnRpY2F0ZVwiKTtiLmY9bnVsbDtyZXR1cm4gYi5yZWxvYWQoKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gY30pLCEwKX07ZnVuY3Rpb24gaG4oYSxiKXtyZXR1cm4gZG4oYSkudGhlbihmdW5jdGlvbigpe2lmKFZhKFptKGEpLGIpKXJldHVybiBWbShhKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgbmV3IHQoXCJwcm92aWRlci1hbHJlYWR5LWxpbmtlZFwiKTt9KX0pfWsuQmM9ZnVuY3Rpb24oYSl7aGYoXCJmaXJlYmFzZS5Vc2VyLnByb3RvdHlwZS5saW5rQW5kUmV0cmlldmVEYXRhV2l0aENyZWRlbnRpYWwgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBmaXJlYmFzZS5Vc2VyLnByb3RvdHlwZS5saW5rV2l0aENyZWRlbnRpYWwgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMucGIoYSl9O1xuay5wYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9bnVsbDtyZXR1cm4gUih0aGlzLGhuKHRoaXMsYS5wcm92aWRlcklkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIuSSgpfSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm4gYS5iKGIuYSxkKX0pLnRoZW4oZnVuY3Rpb24oZCl7Yz1nbihiLGQsXCJsaW5rXCIpO3JldHVybiBqbihiLGQpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSkpfTtrLkNjPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gUih0aGlzLGhuKHRoaXMsXCJwaG9uZVwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGhtKFJtKGMpLGEsYixxKGMucGIsYykpfSkpfTtrLkxjPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gUih0aGlzLEUoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGhtKFJtKGMpLGEsYixxKGMuc2IsYykpfSksITApfTtcbmZ1bmN0aW9uIGduKGEsYixjKXt2YXIgZD1yaChiKTtiPXBnKGIpO3JldHVybiBsZih7dXNlcjphLGNyZWRlbnRpYWw6ZCxhZGRpdGlvbmFsVXNlckluZm86YixvcGVyYXRpb25UeXBlOmN9KX1mdW5jdGlvbiBqbihhLGIpe3htKGEsYik7cmV0dXJuIGEucmVsb2FkKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBhfSl9ay5BYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYi5hLkFiKGMsYSl9KS50aGVuKGZ1bmN0aW9uKGMpe3htKGIsYyk7cmV0dXJuIGIucmVsb2FkKCl9KSl9O2suZGQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gUih0aGlzLHRoaXMuSSgpLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGEuYihiLmEsYyl9KS50aGVuKGZ1bmN0aW9uKGMpe3htKGIsYyk7cmV0dXJuIGIucmVsb2FkKCl9KSl9O1xuay5CYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYi5hLkJiKGMsYSl9KS50aGVuKGZ1bmN0aW9uKGMpe3htKGIsYyk7cmV0dXJuIGIucmVsb2FkKCl9KSl9O1xuay5DYj1mdW5jdGlvbihhKXtpZih2b2lkIDA9PT1hLmRpc3BsYXlOYW1lJiZ2b2lkIDA9PT1hLnBob3RvVVJMKXJldHVybiBZbSh0aGlzKTt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYi5hLkNiKGMse2Rpc3BsYXlOYW1lOmEuZGlzcGxheU5hbWUscGhvdG9Vcmw6YS5waG90b1VSTH0pfSkudGhlbihmdW5jdGlvbihjKXt4bShiLGMpO2JuKGIsXCJkaXNwbGF5TmFtZVwiLGMuZGlzcGxheU5hbWV8fG51bGwpO2JuKGIsXCJwaG90b1VSTFwiLGMucGhvdG9Vcmx8fG51bGwpO3coYi5wcm92aWRlckRhdGEsZnVuY3Rpb24oZCl7XCJwYXNzd29yZFwiPT09ZC5wcm92aWRlcklkJiYoTShkLFwiZGlzcGxheU5hbWVcIixiLmRpc3BsYXlOYW1lKSxNKGQsXCJwaG90b1VSTFwiLGIucGhvdG9VUkwpKX0pO3JldHVybiBWbShiKX0pLnRoZW4oWG0pKX07XG5rLmJkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyxkbih0aGlzKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBWYShabShiKSxhKT9zaihiLmEsYyxbYV0pLnRoZW4oZnVuY3Rpb24oZCl7dmFyIGU9e307dyhkLnByb3ZpZGVyVXNlckluZm98fFtdLGZ1bmN0aW9uKGYpe2VbZi5wcm92aWRlcklkXT0hMH0pO3coWm0oYiksZnVuY3Rpb24oZil7ZVtmXXx8YW4oYixmKX0pO2VbbWguUFJPVklERVJfSURdfHxNKGIsXCJwaG9uZU51bWJlclwiLG51bGwpO3JldHVybiBWbShiKX0pOlZtKGIpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBuZXcgdChcIm5vLXN1Y2gtcHJvdmlkZXJcIik7fSl9KSl9O1xuay5kZWxldGU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gTyhhLmEsR2ose2lkVG9rZW46Yn0pfSkudGhlbihmdW5jdGlvbigpe2EuZGlzcGF0Y2hFdmVudChuZXcgdG0oXCJ1c2VyRGVsZXRlZFwiKSl9KSkudGhlbihmdW5jdGlvbigpe2Zvcih2YXIgYj0wO2I8YS5HLmxlbmd0aDtiKyspYS5HW2JdLmNhbmNlbChcImFwcC1kZWxldGVkXCIpO09tKGEsbnVsbCk7UG0oYSxudWxsKTtRbShhLG51bGwpO2EuRz1bXTthLkE9ITA7VG0oYSk7TShhLFwicmVmcmVzaFRva2VuXCIsbnVsbCk7YS5pJiZSbChhLmksYSl9KX07XG5rLkViPWZ1bmN0aW9uKGEsYil7cmV0dXJuXCJsaW5rVmlhUG9wdXBcIj09YSYmKHRoaXMuaHx8bnVsbCk9PWImJnRoaXMuZ3x8XCJyZWF1dGhWaWFQb3B1cFwiPT1hJiYodGhpcy5ofHxudWxsKT09YiYmdGhpcy5nfHxcImxpbmtWaWFSZWRpcmVjdFwiPT1hJiYodGhpcy5nYXx8bnVsbCk9PWJ8fFwicmVhdXRoVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuZ2F8fG51bGwpPT1iPyEwOiExfTtrLm1hPWZ1bmN0aW9uKGEsYixjLGQpe1wibGlua1ZpYVBvcHVwXCIhPWEmJlwicmVhdXRoVmlhUG9wdXBcIiE9YXx8ZCE9KHRoaXMuaHx8bnVsbCl8fChjJiZ0aGlzLk8/dGhpcy5PKGMpOmImJiFjJiZ0aGlzLmcmJnRoaXMuZyhiKSx0aGlzLmMmJih0aGlzLmMuY2FuY2VsKCksdGhpcy5jPW51bGwpLGRlbGV0ZSB0aGlzLmcsZGVsZXRlIHRoaXMuTyl9O1xuay5GYT1mdW5jdGlvbihhLGIpe3JldHVyblwibGlua1ZpYVBvcHVwXCI9PWEmJmI9PSh0aGlzLmh8fG51bGwpP3EodGhpcy5KYix0aGlzKTpcInJlYXV0aFZpYVBvcHVwXCI9PWEmJmI9PSh0aGlzLmh8fG51bGwpP3EodGhpcy5LYix0aGlzKTpcImxpbmtWaWFSZWRpcmVjdFwiPT1hJiYodGhpcy5nYXx8bnVsbCk9PWI/cSh0aGlzLkpiLHRoaXMpOlwicmVhdXRoVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuZ2F8fG51bGwpPT1iP3EodGhpcy5LYix0aGlzKTpudWxsfTtrLkRjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIGtuKHRoaXMsXCJsaW5rVmlhUG9wdXBcIixhLGZ1bmN0aW9uKCl7cmV0dXJuIGhuKGIsYS5wcm92aWRlcklkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFZtKGIpfSl9LCExKX07ay5NYz1mdW5jdGlvbihhKXtyZXR1cm4ga24odGhpcyxcInJlYXV0aFZpYVBvcHVwXCIsYSxmdW5jdGlvbigpe3JldHVybiBFKCl9LCEwKX07XG5mdW5jdGlvbiBrbihhLGIsYyxkLGUpe2lmKCFSZSgpKXJldHVybiBGKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7aWYoYS5mJiYhZSlyZXR1cm4gRihhLmYpO3ZhciBmPW9nKGMucHJvdmlkZXJJZCksZz1RZShhLnVpZCtcIjo6OlwiKSxoPW51bGw7KCFUZSgpfHxJZSgpKSYmYS5vJiZjLmlzT0F1dGhQcm92aWRlciYmKGg9ZmsoYS5vLGEubCxhLm0sYixjLG51bGwsZyxmaXJlYmFzZS5TREtfVkVSU0lPTnx8bnVsbCxudWxsLG51bGwsYS50ZW5hbnRJZCkpO3ZhciBuPXplKGgsZiYmZi51YSxmJiZmLnRhKTtkPWQoKS50aGVuKGZ1bmN0aW9uKCl7bG4oYSk7aWYoIWUpcmV0dXJuIGEuSSgpLnRoZW4oZnVuY3Rpb24oKXt9KX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVWwoYS5pLG4sYixjLGcsISFoLGEudGVuYW50SWQpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgRChmdW5jdGlvbihwLHYpe2EubWEoYixudWxsLG5ldyB0KFwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3RcIiksXG5hLmh8fG51bGwpO2EuZz1wO2EuTz12O2EuaD1nO2EuYz1XbChhLmksYSxiLG4sZyl9KX0pLnRoZW4oZnVuY3Rpb24ocCl7biYmeWUobik7cmV0dXJuIHA/bGYocCk6bnVsbH0pLnMoZnVuY3Rpb24ocCl7biYmeWUobik7dGhyb3cgcDt9KTtyZXR1cm4gUihhLGQsZSl9ay5FYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBtbih0aGlzLFwibGlua1ZpYVJlZGlyZWN0XCIsYSxmdW5jdGlvbigpe3JldHVybiBobihiLGEucHJvdmlkZXJJZCl9LCExKX07ay5OYz1mdW5jdGlvbihhKXtyZXR1cm4gbW4odGhpcyxcInJlYXV0aFZpYVJlZGlyZWN0XCIsYSxmdW5jdGlvbigpe3JldHVybiBFKCl9LCEwKX07XG5mdW5jdGlvbiBtbihhLGIsYyxkLGUpe2lmKCFSZSgpKXJldHVybiBGKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7aWYoYS5mJiYhZSlyZXR1cm4gRihhLmYpO3ZhciBmPW51bGwsZz1RZShhLnVpZCtcIjo6OlwiKTtkPWQoKS50aGVuKGZ1bmN0aW9uKCl7bG4oYSk7aWYoIWUpcmV0dXJuIGEuSSgpLnRoZW4oZnVuY3Rpb24oKXt9KX0pLnRoZW4oZnVuY3Rpb24oKXthLmdhPWc7cmV0dXJuIFZtKGEpfSkudGhlbihmdW5jdGlvbihoKXthLmhhJiYoaD1hLmhhLGg9aC5iLnNldChubixhLncoKSxoLmEpKTtyZXR1cm4gaH0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVmwoYS5pLGIsYyxnLGEudGVuYW50SWQpfSkucyhmdW5jdGlvbihoKXtmPWg7aWYoYS5oYSlyZXR1cm4gb24oYS5oYSk7dGhyb3cgZjt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoZil0aHJvdyBmO30pO3JldHVybiBSKGEsZCxlKX1cbmZ1bmN0aW9uIGxuKGEpe2lmKCFhLml8fCFhLlApe2lmKGEuaSYmIWEuUCl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO3Rocm93IG5ldyB0KFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIpO319ay5KYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzO3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7dmFyIGY9bnVsbDtjPXRoaXMuSSgpLnRoZW4oZnVuY3Rpb24oZyl7cmV0dXJuIElnKGUuYSx7cmVxdWVzdFVyaTphLHBvc3RCb2R5OmQsc2Vzc2lvbklkOmIsaWRUb2tlbjpnfSl9KS50aGVuKGZ1bmN0aW9uKGcpe2Y9Z24oZSxnLFwibGlua1wiKTtyZXR1cm4gam4oZSxnKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZn0pO3JldHVybiBSKHRoaXMsYyl9O1xuay5LYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzO3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7dmFyIGY9bnVsbCxnPUUoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIERnKEpnKGUuYSx7cmVxdWVzdFVyaTphLHNlc3Npb25JZDpiLHBvc3RCb2R5OmQsdGVuYW50SWQ6Y30pLGUudWlkKX0pLnRoZW4oZnVuY3Rpb24oaCl7Zj1nbihlLGgsXCJyZWF1dGhlbnRpY2F0ZVwiKTt4bShlLGgpO2UuZj1udWxsO3JldHVybiBlLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBmfSk7cmV0dXJuIFIodGhpcyxnLCEwKX07XG5rLnRiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1udWxsO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihkKXtjPWQ7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhfHxtYihhKT97fTpjZyhuZXcgVGYoYSkpfSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm4gYi5hLnRiKGMsZCl9KS50aGVuKGZ1bmN0aW9uKGQpe2lmKGIuZW1haWwhPWQpcmV0dXJuIGIucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7fSkpfTtrLkRiPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPW51bGw7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGUpe2Q9ZTtyZXR1cm5cInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1iKGIpP3t9OmNnKG5ldyBUZihiKSl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBjLmEuRGIoZCxhLGUpfSkudGhlbihmdW5jdGlvbihlKXtpZihjLmVtYWlsIT1lKXJldHVybiBjLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe30pKX07XG5mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1wbihhLGIsYyk7YS5HLnB1c2goZCk7ZC5uYShmdW5jdGlvbigpe1dhKGEuRyxkKX0pO3JldHVybiBkLnMoZnVuY3Rpb24oZSl7dmFyIGY9bnVsbDtlJiZcImF1dGgvbXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIj09PWUuY29kZSYmKGY9bm0oZS53KCksUm0oYSkscShhLmljLGEpKSk7dGhyb3cgZnx8ZTt9KX1rLmljPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwsYz10aGlzO2E9RGcoRShhKSxjLnVpZCkudGhlbihmdW5jdGlvbihkKXtiPWduKGMsZCxcInJlYXV0aGVudGljYXRlXCIpO3htKGMsZCk7Yy5mPW51bGw7cmV0dXJuIGMucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGJ9KTtyZXR1cm4gUih0aGlzLGEsITApfTtcbmZ1bmN0aW9uIHBuKGEsYixjKXtyZXR1cm4gYS5mJiYhYz8oYi5jYW5jZWwoKSxGKGEuZikpOmIucyhmdW5jdGlvbihkKXshZHx8XCJhdXRoL3VzZXItZGlzYWJsZWRcIiE9ZC5jb2RlJiZcImF1dGgvdXNlci10b2tlbi1leHBpcmVkXCIhPWQuY29kZXx8KGEuZnx8YS5kaXNwYXRjaEV2ZW50KG5ldyB0bShcInVzZXJJbnZhbGlkYXRlZFwiKSksYS5mPWQpO3Rocm93IGQ7fSl9ay50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53KCl9O1xuay53PWZ1bmN0aW9uKCl7dmFyIGE9e3VpZDp0aGlzLnVpZCxkaXNwbGF5TmFtZTp0aGlzLmRpc3BsYXlOYW1lLHBob3RvVVJMOnRoaXMucGhvdG9VUkwsZW1haWw6dGhpcy5lbWFpbCxlbWFpbFZlcmlmaWVkOnRoaXMuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjp0aGlzLnBob25lTnVtYmVyLGlzQW5vbnltb3VzOnRoaXMuaXNBbm9ueW1vdXMsdGVuYW50SWQ6dGhpcy50ZW5hbnRJZCxwcm92aWRlckRhdGE6W10sYXBpS2V5OnRoaXMubCxhcHBOYW1lOnRoaXMubSxhdXRoRG9tYWluOnRoaXMubyxzdHNUb2tlbk1hbmFnZXI6dGhpcy5iLncoKSxyZWRpcmVjdEV2ZW50SWQ6dGhpcy5nYXx8bnVsbH07dGhpcy5tZXRhZGF0YSYmeihhLHRoaXMubWV0YWRhdGEudygpKTt3KHRoaXMucHJvdmlkZXJEYXRhLGZ1bmN0aW9uKGIpe2EucHJvdmlkZXJEYXRhLnB1c2gobWYoYikpfSk7eihhLHRoaXMuTi53KCkpO3JldHVybiBhfTtcbmZ1bmN0aW9uIHFuKGEpe2lmKCFhLmFwaUtleSlyZXR1cm4gbnVsbDt2YXIgYj17YXBpS2V5OmEuYXBpS2V5LGF1dGhEb21haW46YS5hdXRoRG9tYWluLGFwcE5hbWU6YS5hcHBOYW1lLGVtdWxhdG9yQ29uZmlnOmEuZW11bGF0b3JDb25maWd9LGM9e307aWYoYS5zdHNUb2tlbk1hbmFnZXImJmEuc3RzVG9rZW5NYW5hZ2VyLmFjY2Vzc1Rva2VuKWNbRWddPWEuc3RzVG9rZW5NYW5hZ2VyLmFjY2Vzc1Rva2VuLGMucmVmcmVzaFRva2VuPWEuc3RzVG9rZW5NYW5hZ2VyLnJlZnJlc2hUb2tlbnx8bnVsbDtlbHNlIHJldHVybiBudWxsO3ZhciBkPW5ldyBKbShiLGMsYSk7YS5wcm92aWRlckRhdGEmJncoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oZSl7ZSYmJG0oZCxsZihlKSl9KTthLnJlZGlyZWN0RXZlbnRJZCYmKGQuZ2E9YS5yZWRpcmVjdEV2ZW50SWQpO3JldHVybiBkfVxuZnVuY3Rpb24gcm4oYSxiLGMsZCl7dmFyIGU9bmV3IEptKGEsYik7YyYmKGUuaGE9Yyk7ZCYmTm0oZSxkKTtyZXR1cm4gZS5yZWxvYWQoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGV9KX1mdW5jdGlvbiBzbihhLGIsYyxkKXt2YXIgZT1hLmIsZj17fTtmW0VnXT1lLmImJmUuYi50b1N0cmluZygpO2YucmVmcmVzaFRva2VuPWUuYTtiPW5ldyBKbShifHx7YXBpS2V5OmEubCxhdXRoRG9tYWluOmEubyxhcHBOYW1lOmEubX0sZik7YyYmKGIuaGE9Yyk7ZCYmTm0oYixkKTtjbihiLGEpO3JldHVybiBifTtmdW5jdGlvbiB0bihhKXt0aGlzLmE9YTt0aGlzLmI9V2soKX12YXIgbm49e25hbWU6XCJyZWRpcmVjdFVzZXJcIixEOlwic2Vzc2lvblwifTtmdW5jdGlvbiBvbihhKXtyZXR1cm4gJGsoYS5iLG5uLGEuYSl9ZnVuY3Rpb24gdW4oYSxiKXtyZXR1cm4gYS5iLmdldChubixhLmEpLnRoZW4oZnVuY3Rpb24oYyl7YyYmYiYmKGMuYXV0aERvbWFpbj1iKTtyZXR1cm4gcW4oY3x8e30pfSl9O2Z1bmN0aW9uIHZuKGEpe3RoaXMuYT1hO3RoaXMuYj1XaygpO3RoaXMuYz1udWxsO3RoaXMuZj13bih0aGlzKTt0aGlzLmIuYWRkTGlzdGVuZXIoeG4oXCJsb2NhbFwiKSx0aGlzLmEscSh0aGlzLmcsdGhpcykpfXZuLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPXhuKFwibG9jYWxcIik7eW4odGhpcyxmdW5jdGlvbigpe3JldHVybiBFKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBhLmMmJlwibG9jYWxcIiE9YS5jLkQ/YS5iLmdldChiLGEuYSk6bnVsbH0pLnRoZW4oZnVuY3Rpb24oYyl7aWYoYylyZXR1cm4gem4oYSxcImxvY2FsXCIpLnRoZW4oZnVuY3Rpb24oKXthLmM9Yn0pfSl9KX07ZnVuY3Rpb24gem4oYSxiKXt2YXIgYz1bXSxkO2ZvcihkIGluIFNrKVNrW2RdIT09YiYmYy5wdXNoKCRrKGEuYix4bihTa1tkXSksYS5hKSk7Yy5wdXNoKCRrKGEuYixBbixhLmEpKTtyZXR1cm4gSWMoYyl9XG5mdW5jdGlvbiB3bihhKXt2YXIgYj14bihcImxvY2FsXCIpLGM9eG4oXCJzZXNzaW9uXCIpLGQ9eG4oXCJub25lXCIpO3JldHVybiBaayhhLmIsYixhLmEpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5iLmdldChjLGEuYSl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlP2M6YS5iLmdldChkLGEuYSkudGhlbihmdW5jdGlvbihmKXtyZXR1cm4gZj9kOmEuYi5nZXQoYixhLmEpLnRoZW4oZnVuY3Rpb24oZyl7cmV0dXJuIGc/YjphLmIuZ2V0KEFuLGEuYSkudGhlbihmdW5jdGlvbihoKXtyZXR1cm4gaD94bihoKTpifSl9KX0pfSkudGhlbihmdW5jdGlvbihlKXthLmM9ZTtyZXR1cm4gem4oYSxlLkQpfSkucyhmdW5jdGlvbigpe2EuY3x8KGEuYz1iKX0pfXZhciBBbj17bmFtZTpcInBlcnNpc3RlbmNlXCIsRDpcInNlc3Npb25cIn07ZnVuY3Rpb24geG4oYSl7cmV0dXJue25hbWU6XCJhdXRoVXNlclwiLEQ6YX19XG52bi5wcm90b3R5cGUud2I9ZnVuY3Rpb24oYSl7dmFyIGI9bnVsbCxjPXRoaXM7VGsoYSk7cmV0dXJuIHluKHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gYSE9Yy5jLkQ/Yy5iLmdldChjLmMsYy5hKS50aGVuKGZ1bmN0aW9uKGQpe2I9ZDtyZXR1cm4gem4oYyxhKX0pLnRoZW4oZnVuY3Rpb24oKXtjLmM9eG4oYSk7aWYoYilyZXR1cm4gYy5iLnNldChjLmMsYixjLmEpfSk6RSgpfSl9O2Z1bmN0aW9uIEJuKGEpe3JldHVybiB5bihhLGZ1bmN0aW9uKCl7cmV0dXJuIGEuYi5zZXQoQW4sYS5jLkQsYS5hKX0pfWZ1bmN0aW9uIENuKGEsYil7cmV0dXJuIHluKGEsZnVuY3Rpb24oKXtyZXR1cm4gYS5iLnNldChhLmMsYi53KCksYS5hKX0pfWZ1bmN0aW9uIERuKGEpe3JldHVybiB5bihhLGZ1bmN0aW9uKCl7cmV0dXJuICRrKGEuYixhLmMsYS5hKX0pfVxuZnVuY3Rpb24gRW4oYSxiLGMpe3JldHVybiB5bihhLGZ1bmN0aW9uKCl7cmV0dXJuIGEuYi5nZXQoYS5jLGEuYSkudGhlbihmdW5jdGlvbihkKXtkJiZiJiYoZC5hdXRoRG9tYWluPWIpO2QmJmMmJihkLmVtdWxhdG9yQ29uZmlnPWMpO3JldHVybiBxbihkfHx7fSl9KX0pfWZ1bmN0aW9uIHluKGEsYil7YS5mPWEuZi50aGVuKGIsYik7cmV0dXJuIGEuZn07ZnVuY3Rpb24gRm4oYSl7dGhpcy5tPSExO00odGhpcyxcInNldHRpbmdzXCIsbmV3IGZtKTtNKHRoaXMsXCJhcHBcIixhKTtpZihTKHRoaXMpLm9wdGlvbnMmJlModGhpcykub3B0aW9ucy5hcGlLZXkpYT1maXJlYmFzZS5TREtfVkVSU0lPTj9PZShmaXJlYmFzZS5TREtfVkVSU0lPTik6bnVsbCx0aGlzLmE9bmV3IEppKFModGhpcykub3B0aW9ucyYmUyh0aGlzKS5vcHRpb25zLmFwaUtleSxDYShEYSksYSk7ZWxzZSB0aHJvdyBuZXcgdChcImludmFsaWQtYXBpLWtleVwiKTt0aGlzLlI9W107dGhpcy51PVtdO3RoaXMuUD1bXTt0aGlzLmFjPWZpcmViYXNlLklOVEVSTkFMLmNyZWF0ZVN1YnNjcmliZShxKHRoaXMueWMsdGhpcykpO3RoaXMuWD12b2lkIDA7dGhpcy5iYz1maXJlYmFzZS5JTlRFUk5BTC5jcmVhdGVTdWJzY3JpYmUocSh0aGlzLnpjLHRoaXMpKTtHbih0aGlzLG51bGwpO3RoaXMubD1uZXcgdm4oUyh0aGlzKS5vcHRpb25zLmFwaUtleStcIjpcIitTKHRoaXMpLm5hbWUpO3RoaXMuRz1cbm5ldyB0bihTKHRoaXMpLm9wdGlvbnMuYXBpS2V5K1wiOlwiK1ModGhpcykubmFtZSk7dGhpcy4kPVQodGhpcyxIbih0aGlzKSk7dGhpcy5pPVQodGhpcyxJbih0aGlzKSk7dGhpcy5iYT0hMTt0aGlzLnBhPXEodGhpcy5ZYyx0aGlzKTt0aGlzLkJhPXEodGhpcy5kYSx0aGlzKTt0aGlzLnlhPXEodGhpcy5rYyx0aGlzKTt0aGlzLnphPXEodGhpcy52Yyx0aGlzKTt0aGlzLkFhPXEodGhpcy53Yyx0aGlzKTt0aGlzLmI9bnVsbDtKbih0aGlzKTt0aGlzLklOVEVSTkFMPXt9O3RoaXMuSU5URVJOQUxbXCJkZWxldGVcIl09cSh0aGlzLmRlbGV0ZSx0aGlzKTt0aGlzLklOVEVSTkFMLmxvZ0ZyYW1ld29yaz1xKHRoaXMuRmMsdGhpcyk7dGhpcy5BPTA7SS5jYWxsKHRoaXMpO0tuKHRoaXMpO3RoaXMuTj1bXTt0aGlzLmY9bnVsbH1yKEZuLEkpO2Z1bmN0aW9uIExuKGEpe0cuY2FsbCh0aGlzLFwibGFuZ3VhZ2VDb2RlQ2hhbmdlZFwiKTt0aGlzLmg9YX1yKExuLEcpO1xuZnVuY3Rpb24gTW4oYSl7Ry5jYWxsKHRoaXMsXCJlbXVsYXRvckNvbmZpZ0NoYW5nZWRcIik7dGhpcy5jPWF9cihNbixHKTtmdW5jdGlvbiBObihhKXtHLmNhbGwodGhpcyxcImZyYW1ld29ya0NoYW5nZWRcIik7dGhpcy5mPWF9cihObixHKTtrPUZuLnByb3RvdHlwZTtrLndiPWZ1bmN0aW9uKGEpe2E9dGhpcy5sLndiKGEpO3JldHVybiBUKHRoaXMsYSl9O2sud2E9ZnVuY3Rpb24oYSl7dGhpcy5hYT09PWF8fHRoaXMubXx8KHRoaXMuYWE9YSxQaSh0aGlzLmEsdGhpcy5hYSksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBMbih0aGlzLmthKCkpKSl9O2sua2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hYX07ay5lZD1mdW5jdGlvbigpe3ZhciBhPWwubmF2aWdhdG9yO3RoaXMud2EoYT9hLmxhbmd1YWdlcyYmYS5sYW5ndWFnZXNbMF18fGEubGFuZ3VhZ2V8fGEudXNlckxhbmd1YWdlfHxudWxsOm51bGwpfTtcbmsuZmQ9ZnVuY3Rpb24oYSl7aWYoIXRoaXMuZil7aWYoIS9eaHR0cHM/OlxcL1xcLy8udGVzdChhKSl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJFbXVsYXRvciBVUkwgbXVzdCBzdGFydCB3aXRoIGEgdmFsaWQgc2NoZW1lIChodHRwOi8vIG9yIGh0dHBzOi8vKS5cIik7T24oKTt0aGlzLmY9e3VybDphfTt0aGlzLnNldHRpbmdzLmhiPSEwO1FpKHRoaXMuYSx0aGlzLmYpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgTW4odGhpcy5mKSl9fTtcbmZ1bmN0aW9uIE9uKCl7YmYoXCJXQVJOSU5HOiBZb3UgYXJlIHVzaW5nIHRoZSBBdXRoIEVtdWxhdG9yLCB3aGljaCBpcyBpbnRlbmRlZCBmb3IgbG9jYWwgdGVzdGluZyBvbmx5LiAgRG8gbm90IHVzZSB3aXRoIHByb2R1Y3Rpb24gY3JlZGVudGlhbHMuXCIpO2wuZG9jdW1lbnQmJkVlKCkudGhlbihmdW5jdGlvbigpe3ZhciBhPWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTthLmlubmVyVGV4dD1cIlJ1bm5pbmcgaW4gZW11bGF0b3IgbW9kZS4gRG8gbm90IHVzZSB3aXRoIHByb2R1Y3Rpb24gY3JlZGVudGlhbHMuXCI7YS5zdHlsZS5wb3NpdGlvbj1cImZpeGVkXCI7YS5zdHlsZS53aWR0aD1cIjEwMCVcIjthLnN0eWxlLmJhY2tncm91bmRDb2xvcj1cIiNmZmZmZmZcIjthLnN0eWxlLmJvcmRlcj1cIi4xZW0gc29saWQgIzAwMDAwMFwiO2Euc3R5bGUuY29sb3I9XCIjZmYwMDAwXCI7YS5zdHlsZS5ib3R0b209XCIwcHhcIjthLnN0eWxlLmxlZnQ9XCIwcHhcIjthLnN0eWxlLm1hcmdpbj1cIjBweFwiO2Euc3R5bGUuekluZGV4PVxuMUU0O2Euc3R5bGUudGV4dEFsaWduPVwiY2VudGVyXCI7YS5jbGFzc0xpc3QuYWRkKFwiZmlyZWJhc2UtZW11bGF0b3Itd2FybmluZ1wiKTtsLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSl9KX1rLkZjPWZ1bmN0aW9uKGEpe3RoaXMuTi5wdXNoKGEpO1NpKHRoaXMuYSxmaXJlYmFzZS5TREtfVkVSU0lPTj9PZShmaXJlYmFzZS5TREtfVkVSU0lPTix0aGlzLk4pOm51bGwpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgTm4odGhpcy5OKSl9O2suR2E9ZnVuY3Rpb24oKXtyZXR1cm4gWmEodGhpcy5OKX07ay54Yj1mdW5jdGlvbihhKXt0aGlzLlc9PT1hfHx0aGlzLm18fCh0aGlzLlc9YSx0aGlzLmEuYj10aGlzLlcpfTtrLlM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5XfTtcbmZ1bmN0aW9uIEtuKGEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwibGNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMua2EoKX0sc2V0OmZ1bmN0aW9uKGIpe3RoaXMud2EoYil9LGVudW1lcmFibGU6ITF9KTthLmFhPW51bGw7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJ0aVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5TKCl9LHNldDpmdW5jdGlvbihiKXt0aGlzLnhiKGIpfSxlbnVtZXJhYmxlOiExfSk7YS5XPW51bGx9ay50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57YXBpS2V5OlModGhpcykub3B0aW9ucy5hcGlLZXksYXV0aERvbWFpbjpTKHRoaXMpLm9wdGlvbnMuYXV0aERvbWFpbixhcHBOYW1lOlModGhpcykubmFtZSxjdXJyZW50VXNlcjpVKHRoaXMpJiZVKHRoaXMpLncoKX19O2Z1bmN0aW9uIFBuKGEpe3JldHVybiBhLmdifHxGKG5ldyB0KFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIpKX1cbmZ1bmN0aW9uIEpuKGEpe3ZhciBiPVMoYSkub3B0aW9ucy5hdXRoRG9tYWluLGM9UyhhKS5vcHRpb25zLmFwaUtleTtiJiZSZSgpJiYoYS5nYj1hLiQudGhlbihmdW5jdGlvbigpe2lmKCFhLm0pe2EuYj1ZbChiLGMsUyhhKS5uYW1lLGEuZik7UWwoYS5iLGEpO1UoYSkmJldtKFUoYSkpO2lmKGEubyl7V20oYS5vKTt2YXIgZD1hLm87ZC53YShhLmthKCkpO09tKGQsYSk7ZD1hLm87Tm0oZCxhLk4pO1FtKGQsYSk7ZD1hLm87UWkoZC5hLGEuZik7UG0oZCxhKTthLm89bnVsbH1yZXR1cm4gYS5ifX0pKX1rLkViPWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ1bmtub3duXCI6Y2FzZSBcInNpZ25JblZpYVJlZGlyZWN0XCI6cmV0dXJuITA7Y2FzZSBcInNpZ25JblZpYVBvcHVwXCI6cmV0dXJuIHRoaXMuaD09YiYmISF0aGlzLmc7ZGVmYXVsdDpyZXR1cm4hMX19O1xuay5tYT1mdW5jdGlvbihhLGIsYyxkKXtcInNpZ25JblZpYVBvcHVwXCI9PWEmJnRoaXMuaD09ZCYmKGMmJnRoaXMuTz90aGlzLk8oYyk6YiYmIWMmJnRoaXMuZyYmdGhpcy5nKGIpLHRoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCksZGVsZXRlIHRoaXMuZyxkZWxldGUgdGhpcy5PKX07ay5GYT1mdW5jdGlvbihhLGIpe3JldHVyblwic2lnbkluVmlhUmVkaXJlY3RcIj09YXx8XCJzaWduSW5WaWFQb3B1cFwiPT1hJiZ0aGlzLmg9PWImJnRoaXMuZz9xKHRoaXMuaGMsdGhpcyk6bnVsbH07ay5oYz1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGY9e3JlcXVlc3RVcmk6YSxwb3N0Qm9keTpkLHNlc3Npb25JZDpiLHRlbmFudElkOmN9O3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7cmV0dXJuIGUuJC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFFuKGUsR2coZS5hLGYpKX0pfTtcbmsuV2M9ZnVuY3Rpb24oYSl7aWYoIVJlKCkpcmV0dXJuIEYobmV3IHQoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTt2YXIgYj10aGlzLGM9b2coYS5wcm92aWRlcklkKSxkPVFlKCksZT1udWxsOyghVGUoKXx8SWUoKSkmJlModGhpcykub3B0aW9ucy5hdXRoRG9tYWluJiZhLmlzT0F1dGhQcm92aWRlciYmKGU9ZmsoUyh0aGlzKS5vcHRpb25zLmF1dGhEb21haW4sUyh0aGlzKS5vcHRpb25zLmFwaUtleSxTKHRoaXMpLm5hbWUsXCJzaWduSW5WaWFQb3B1cFwiLGEsbnVsbCxkLGZpcmViYXNlLlNES19WRVJTSU9OfHxudWxsLG51bGwsbnVsbCx0aGlzLlMoKSx0aGlzLmYpKTt2YXIgZj16ZShlLGMmJmMudWEsYyYmYy50YSk7Yz1Qbih0aGlzKS50aGVuKGZ1bmN0aW9uKGcpe3JldHVybiBVbChnLGYsXCJzaWduSW5WaWFQb3B1cFwiLGEsZCwhIWUsYi5TKCkpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgRChmdW5jdGlvbihnLGgpe2IubWEoXCJzaWduSW5WaWFQb3B1cFwiLFxubnVsbCxuZXcgdChcImNhbmNlbGxlZC1wb3B1cC1yZXF1ZXN0XCIpLGIuaCk7Yi5nPWc7Yi5PPWg7Yi5oPWQ7Yi5jPVdsKGIuYixiLFwic2lnbkluVmlhUG9wdXBcIixmLGQpfSl9KS50aGVuKGZ1bmN0aW9uKGcpe2YmJnllKGYpO3JldHVybiBnP2xmKGcpOm51bGx9KS5zKGZ1bmN0aW9uKGcpe2YmJnllKGYpO3Rocm93IGc7fSk7cmV0dXJuIFQodGhpcyxjKX07ay5YYz1mdW5jdGlvbihhKXtpZighUmUoKSlyZXR1cm4gRihuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO3ZhciBiPXRoaXMsYz1Qbih0aGlzKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEJuKGIubCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFZsKGIuYixcInNpZ25JblZpYVJlZGlyZWN0XCIsYSx2b2lkIDAsYi5TKCkpfSk7cmV0dXJuIFQodGhpcyxjKX07XG5mdW5jdGlvbiBSbihhKXtpZighUmUoKSlyZXR1cm4gRihuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO3ZhciBiPVBuKGEpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5iLnFhKCl9KS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBjP2xmKGMpOm51bGx9KTtyZXR1cm4gVChhLGIpfWsucWE9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBSbih0aGlzKS50aGVuKGZ1bmN0aW9uKGIpe2EuYiYmYW0oYS5iLmIpO3JldHVybiBifSkucyhmdW5jdGlvbihiKXthLmImJmFtKGEuYi5iKTt0aHJvdyBiO30pfTtcbmsuY2Q9ZnVuY3Rpb24oYSl7aWYoIWEpcmV0dXJuIEYobmV3IHQoXCJudWxsLXVzZXJcIikpO2lmKHRoaXMuVyE9YS50ZW5hbnRJZClyZXR1cm4gRihuZXcgdChcInRlbmFudC1pZC1taXNtYXRjaFwiKSk7dmFyIGI9dGhpcyxjPXt9O2MuYXBpS2V5PVModGhpcykub3B0aW9ucy5hcGlLZXk7Yy5hdXRoRG9tYWluPVModGhpcykub3B0aW9ucy5hdXRoRG9tYWluO2MuYXBwTmFtZT1TKHRoaXMpLm5hbWU7dmFyIGQ9c24oYSxjLGIuRyxiLkdhKCkpO3JldHVybiBUKHRoaXMsdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtpZihTKGIpLm9wdGlvbnMuYXBpS2V5IT1hLmwpcmV0dXJuIGQucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7aWYoVShiKSYmYS51aWQ9PVUoYikudWlkKXJldHVybiBjbihVKGIpLGEpLGIuZGEoYSk7R24oYixkKTtXbShkKTtyZXR1cm4gYi5kYShkKX0pLnRoZW4oZnVuY3Rpb24oKXtTbihiKX0pKX07XG5mdW5jdGlvbiBUbihhLGIpe3ZhciBjPXt9O2MuYXBpS2V5PVMoYSkub3B0aW9ucy5hcGlLZXk7Yy5hdXRoRG9tYWluPVMoYSkub3B0aW9ucy5hdXRoRG9tYWluO2MuYXBwTmFtZT1TKGEpLm5hbWU7YS5mJiYoYy5lbXVsYXRvckNvbmZpZz1hLmYpO3JldHVybiBhLiQudGhlbihmdW5jdGlvbigpe3JldHVybiBybihjLGIsYS5HLGEuR2EoKSl9KS50aGVuKGZ1bmN0aW9uKGQpe2lmKFUoYSkmJmQudWlkPT1VKGEpLnVpZClyZXR1cm4gY24oVShhKSxkKSxhLmRhKGQpO0duKGEsZCk7V20oZCk7cmV0dXJuIGEuZGEoZCl9KS50aGVuKGZ1bmN0aW9uKCl7U24oYSl9KX1cbmZ1bmN0aW9uIEduKGEsYil7VShhKSYmKFVtKFUoYSksYS5CYSksSChVKGEpLFwidG9rZW5DaGFuZ2VkXCIsYS55YSksSChVKGEpLFwidXNlckRlbGV0ZWRcIixhLnphKSxIKFUoYSksXCJ1c2VySW52YWxpZGF0ZWRcIixhLkFhKSxUbShVKGEpKSk7YiYmKGIuUi5wdXNoKGEuQmEpLG5kKGIsXCJ0b2tlbkNoYW5nZWRcIixhLnlhKSxuZChiLFwidXNlckRlbGV0ZWRcIixhLnphKSxuZChiLFwidXNlckludmFsaWRhdGVkXCIsYS5BYSksMDxhLkEmJlNtKGIpKTtNKGEsXCJjdXJyZW50VXNlclwiLGIpO2ImJihiLndhKGEua2EoKSksT20oYixhKSxObShiLGEuTiksUW0oYixhKSxRaShiLmEsYS5mKSxQbShiLGEpKX1rLnpiPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPXRoaXMuaS50aGVuKGZ1bmN0aW9uKCl7YS5iJiZhbShhLmIuYik7aWYoIVUoYSkpcmV0dXJuIEUoKTtHbihhLG51bGwpO3JldHVybiBEbihhLmwpLnRoZW4oZnVuY3Rpb24oKXtTbihhKX0pfSk7cmV0dXJuIFQodGhpcyxiKX07XG5mdW5jdGlvbiBVbihhKXt2YXIgYj11bihhLkcsUyhhKS5vcHRpb25zLmF1dGhEb21haW4pLnRoZW4oZnVuY3Rpb24oYyl7aWYoYS5vPWMpYy5oYT1hLkc7cmV0dXJuIG9uKGEuRyl9KTtyZXR1cm4gVChhLGIpfWZ1bmN0aW9uIEhuKGEpe3ZhciBiPVMoYSkub3B0aW9ucy5hdXRoRG9tYWluLGM9VW4oYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBFbihhLmwsYixhLmYpfSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm4gZD8oZC5oYT1hLkcsYS5vJiYoYS5vLmdhfHxudWxsKT09KGQuZ2F8fG51bGwpP2Q6ZC5yZWxvYWQoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIENuKGEubCxkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGR9KX0pLnMoZnVuY3Rpb24oZSl7cmV0dXJuXCJhdXRoL25ldHdvcmstcmVxdWVzdC1mYWlsZWRcIj09ZS5jb2RlP2Q6RG4oYS5sKX0pKTpudWxsfSkudGhlbihmdW5jdGlvbihkKXtHbihhLGR8fG51bGwpfSk7cmV0dXJuIFQoYSxjKX1cbmZ1bmN0aW9uIEluKGEpe3JldHVybiBhLiQudGhlbihmdW5jdGlvbigpe3JldHVybiBSbihhKX0pLnMoZnVuY3Rpb24oKXt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoIWEubSlyZXR1cm4gYS5wYSgpfSkucyhmdW5jdGlvbigpe30pLnRoZW4oZnVuY3Rpb24oKXtpZighYS5tKXthLmJhPSEwO3ZhciBiPWEubDtiLmIuYWRkTGlzdGVuZXIoeG4oXCJsb2NhbFwiKSxiLmEsYS5wYSl9fSl9XG5rLlljPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gRW4odGhpcy5sLFModGhpcykub3B0aW9ucy5hdXRoRG9tYWluKS50aGVuKGZ1bmN0aW9uKGIpe2lmKCFhLm0pe3ZhciBjO2lmKGM9VShhKSYmYil7Yz1VKGEpLnVpZDt2YXIgZD1iLnVpZDtjPXZvaWQgMD09PWN8fG51bGw9PT1jfHxcIlwiPT09Y3x8dm9pZCAwPT09ZHx8bnVsbD09PWR8fFwiXCI9PT1kPyExOmM9PWR9aWYoYylyZXR1cm4gY24oVShhKSxiKSxVKGEpLkkoKTtpZihVKGEpfHxiKUduKGEsYiksYiYmKFdtKGIpLGIuaGE9YS5HKSxhLmImJlFsKGEuYixhKSxTbihhKX19KX07ay5kYT1mdW5jdGlvbihhKXtyZXR1cm4gQ24odGhpcy5sLGEpfTtrLmtjPWZ1bmN0aW9uKCl7U24odGhpcyk7dGhpcy5kYShVKHRoaXMpKX07ay52Yz1mdW5jdGlvbigpe3RoaXMuemIoKX07ay53Yz1mdW5jdGlvbigpe3RoaXMuemIoKX07XG5mdW5jdGlvbiBRbihhLGIpe3ZhciBjPW51bGwsZD1udWxsO3JldHVybiBUKGEsYi50aGVuKGZ1bmN0aW9uKGUpe2M9cmgoZSk7ZD1wZyhlKTtyZXR1cm4gVG4oYSxlKX0sZnVuY3Rpb24oZSl7dmFyIGY9bnVsbDtlJiZcImF1dGgvbXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIj09PWUuY29kZSYmKGY9bm0oZS53KCksYSxxKGEuamMsYSkpKTt0aHJvdyBmfHxlO30pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbGYoe3VzZXI6VShhKSxjcmVkZW50aWFsOmMsYWRkaXRpb25hbFVzZXJJbmZvOmQsb3BlcmF0aW9uVHlwZTpcInNpZ25JblwifSl9KSl9ay5qYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiB0aGlzLmkudGhlbihmdW5jdGlvbigpe3JldHVybiBRbihiLEUoYSkpfSl9O2sueWM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczt0aGlzLmFkZEF1dGhUb2tlbkxpc3RlbmVyKGZ1bmN0aW9uKCl7YS5uZXh0KFUoYikpfSl9O1xuay56Yz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO1ZuKHRoaXMsZnVuY3Rpb24oKXthLm5leHQoVShiKSl9KX07ay5IYz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpczt0aGlzLmJhJiZQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YShVKGQpKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5uZXh0JiZhLm5leHQoVShkKSl9KTtyZXR1cm4gdGhpcy5hYyhhLGIsYyl9O2suR2M9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXM7dGhpcy5iYSYmUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe2QuWD1kLmdldFVpZCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EoVShkKSk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGEubmV4dCYmYS5uZXh0KFUoZCkpfSk7cmV0dXJuIHRoaXMuYmMoYSxiLGMpfTtcbmsubWM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPXRoaXMuaS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFUoYik/VShiKS5JKGEpLnRoZW4oZnVuY3Rpb24oZCl7cmV0dXJue2FjY2Vzc1Rva2VuOmR9fSk6bnVsbH0pO3JldHVybiBUKHRoaXMsYyl9O2suU2M9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUW4oYixPKGIuYSxMaix7dG9rZW46YX0pKX0pLnRoZW4oZnVuY3Rpb24oYyl7dmFyIGQ9Yy51c2VyO2JuKGQsXCJpc0Fub255bW91c1wiLCExKTtiLmRhKGQpO3JldHVybiBjfSl9O2suVGM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiB0aGlzLmkudGhlbihmdW5jdGlvbigpe3JldHVybiBRbihjLE8oYy5hLGJoLHtlbWFpbDphLHBhc3N3b3JkOmJ9KSl9KX07XG5rLmRjPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUW4oYyxPKGMuYSxGaix7ZW1haWw6YSxwYXNzd29yZDpifSkpfSl9O2suWmE9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUW4oYixhLmphKGIuYSkpfSl9O2suUmM9ZnVuY3Rpb24oYSl7aGYoXCJmaXJlYmFzZS5hdXRoLkF1dGgucHJvdG90eXBlLnNpZ25JbkFuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5zaWduSW5XaXRoQ3JlZGVudGlhbCBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy5aYShhKX07XG5rLnliPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXt2YXIgYj1VKGEpO2lmKGImJmIuaXNBbm9ueW1vdXMpe3ZhciBjPWxmKHtwcm92aWRlcklkOm51bGwsaXNOZXdVc2VyOiExfSk7cmV0dXJuIGxmKHt1c2VyOmIsY3JlZGVudGlhbDpudWxsLGFkZGl0aW9uYWxVc2VySW5mbzpjLG9wZXJhdGlvblR5cGU6XCJzaWduSW5cIn0pfXJldHVybiBRbihhLGEuYS55YigpKS50aGVuKGZ1bmN0aW9uKGQpe3ZhciBlPWQudXNlcjtibihlLFwiaXNBbm9ueW1vdXNcIiwhMCk7YS5kYShlKTtyZXR1cm4gZH0pfSl9O2Z1bmN0aW9uIFMoYSl7cmV0dXJuIGEuYXBwfWZ1bmN0aW9uIFUoYSl7cmV0dXJuIGEuY3VycmVudFVzZXJ9ay5nZXRVaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVSh0aGlzKSYmVSh0aGlzKS51aWR8fG51bGx9O2Z1bmN0aW9uIFduKGEpe3JldHVybiBVKGEpJiZVKGEpLl9sYXR8fG51bGx9XG5mdW5jdGlvbiBTbihhKXtpZihhLmJhKXtmb3IodmFyIGI9MDtiPGEudS5sZW5ndGg7YisrKWlmKGEudVtiXSlhLnVbYl0oV24oYSkpO2lmKGEuWCE9PWEuZ2V0VWlkKCkmJmEuUC5sZW5ndGgpZm9yKGEuWD1hLmdldFVpZCgpLGI9MDtiPGEuUC5sZW5ndGg7YisrKWlmKGEuUFtiXSlhLlBbYl0oV24oYSkpfX1rLmNjPWZ1bmN0aW9uKGEpe3RoaXMuYWRkQXV0aFRva2VuTGlzdGVuZXIoYSk7dGhpcy5BKys7MDx0aGlzLkEmJlUodGhpcykmJlNtKFUodGhpcykpfTtrLk9jPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7dyh0aGlzLnUsZnVuY3Rpb24oYyl7Yz09YSYmYi5BLS19KTswPnRoaXMuQSYmKHRoaXMuQT0wKTswPT10aGlzLkEmJlUodGhpcykmJlRtKFUodGhpcykpO3RoaXMucmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIoYSl9O1xuay5hZGRBdXRoVG9rZW5MaXN0ZW5lcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3RoaXMudS5wdXNoKGEpO1QodGhpcyx0aGlzLmkudGhlbihmdW5jdGlvbigpe2IubXx8VmEoYi51LGEpJiZhKFduKGIpKX0pKX07ay5yZW1vdmVBdXRoVG9rZW5MaXN0ZW5lcj1mdW5jdGlvbihhKXtYYSh0aGlzLnUsZnVuY3Rpb24oYil7cmV0dXJuIGI9PWF9KX07ZnVuY3Rpb24gVm4oYSxiKXthLlAucHVzaChiKTtUKGEsYS5pLnRoZW4oZnVuY3Rpb24oKXshYS5tJiZWYShhLlAsYikmJmEuWCE9PWEuZ2V0VWlkKCkmJihhLlg9YS5nZXRVaWQoKSxiKFduKGEpKSl9KSl9XG5rLmRlbGV0ZT1mdW5jdGlvbigpe3RoaXMubT0hMDtmb3IodmFyIGE9MDthPHRoaXMuUi5sZW5ndGg7YSsrKXRoaXMuUlthXS5jYW5jZWwoXCJhcHAtZGVsZXRlZFwiKTt0aGlzLlI9W107dGhpcy5sJiYoYT10aGlzLmwsYS5iLnJlbW92ZUxpc3RlbmVyKHhuKFwibG9jYWxcIiksYS5hLHRoaXMucGEpKTt0aGlzLmImJihSbCh0aGlzLmIsdGhpcyksYW0odGhpcy5iLmIpKTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCl9O2Z1bmN0aW9uIFQoYSxiKXthLlIucHVzaChiKTtiLm5hKGZ1bmN0aW9uKCl7V2EoYS5SLGIpfSk7cmV0dXJuIGJ9ay5nYz1mdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLGJqKHRoaXMuYSxhKSl9O2suQWM9ZnVuY3Rpb24oYSl7cmV0dXJuISFnaChhKX07XG5rLnZiPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gVCh0aGlzLEUoKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGQ9bmV3IFRmKGIpO2lmKCFkLmMpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLGFnK1wiIG11c3QgYmUgdHJ1ZSB3aGVuIHNlbmRpbmcgc2lnbiBpbiBsaW5rIHRvIGVtYWlsXCIpO3JldHVybiBjZyhkKX0pLnRoZW4oZnVuY3Rpb24oZCl7cmV0dXJuIGMuYS52YihhLGQpfSkudGhlbihmdW5jdGlvbigpe30pKX07ay5oZD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5RYShhKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBiLmRhdGEuZW1haWx9KX07ay5tYj1mdW5jdGlvbihhLGIpe3JldHVybiBUKHRoaXMsdGhpcy5hLm1iKGEsYikudGhlbihmdW5jdGlvbigpe30pKX07ay5RYT1mdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLHRoaXMuYS5RYShhKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBuZXcgd2YoYil9KSl9O1xuay5pYj1mdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLHRoaXMuYS5pYihhKS50aGVuKGZ1bmN0aW9uKCl7fSkpfTtrLnViPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gVCh0aGlzLEUoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYihiKT97fTpjZyhuZXcgVGYoYikpfSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm4gYy5hLnViKGEsZCl9KS50aGVuKGZ1bmN0aW9uKCl7fSkpfTtrLlZjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyxobSh0aGlzLGEsYixxKHRoaXMuWmEsdGhpcykpKX07XG5rLlVjPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gVCh0aGlzLEUoKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGQ9Ynx8cmUoKSxlPWZoKGEsZCk7ZD1naChkKTtpZighZCl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJJbnZhbGlkIGVtYWlsIGxpbmshXCIpO2lmKGQudGVuYW50SWQhPT1jLlMoKSl0aHJvdyBuZXcgdChcInRlbmFudC1pZC1taXNtYXRjaFwiKTtyZXR1cm4gYy5aYShlKX0pKX07ZnVuY3Rpb24gWG4oKXt9WG4ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe307WG4ucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7fTtYbi5wcm90b3R5cGUuZ2V0UmVzcG9uc2U9ZnVuY3Rpb24oKXt9O1huLnByb3RvdHlwZS5leGVjdXRlPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBZbigpe3RoaXMuYT17fTt0aGlzLmI9MUUxMn12YXIgWm49bnVsbDtZbi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dGhpcy5hW3RoaXMuYi50b1N0cmluZygpXT1uZXcgJG4oYSxiKTtyZXR1cm4gdGhpcy5iKyt9O1luLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbihhKXt2YXIgYj1hbyh0aGlzLGEpO2E9Ym8oYSk7YiYmYSYmKGIuZGVsZXRlKCksZGVsZXRlIHRoaXMuYVthXSl9O1luLnByb3RvdHlwZS5nZXRSZXNwb25zZT1mdW5jdGlvbihhKXtyZXR1cm4oYT1hbyh0aGlzLGEpKT9hLmdldFJlc3BvbnNlKCk6bnVsbH07WW4ucHJvdG90eXBlLmV4ZWN1dGU9ZnVuY3Rpb24oYSl7KGE9YW8odGhpcyxhKSkmJmEuZXhlY3V0ZSgpfTtmdW5jdGlvbiBhbyhhLGIpe3JldHVybihiPWJvKGIpKT9hLmFbYl18fG51bGw6bnVsbH1mdW5jdGlvbiBibyhhKXtyZXR1cm4oYT1cInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/MUUxMjphKT9hLnRvU3RyaW5nKCk6bnVsbH1cbmZ1bmN0aW9uICRuKGEsYil7dGhpcy5nPSExO3RoaXMuYz1iO3RoaXMuYT10aGlzLmI9bnVsbDt0aGlzLmg9XCJpbnZpc2libGVcIiE9PXRoaXMuYy5zaXplO3RoaXMuZj1rYyhhKTt2YXIgYz10aGlzO3RoaXMuaT1mdW5jdGlvbigpe2MuZXhlY3V0ZSgpfTt0aGlzLmg/dGhpcy5leGVjdXRlKCk6bmQodGhpcy5mLFwiY2xpY2tcIix0aGlzLmkpfSRuLnByb3RvdHlwZS5nZXRSZXNwb25zZT1mdW5jdGlvbigpe2NvKHRoaXMpO3JldHVybiB0aGlzLmJ9O1xuJG4ucHJvdG90eXBlLmV4ZWN1dGU9ZnVuY3Rpb24oKXtjbyh0aGlzKTt2YXIgYT10aGlzO3RoaXMuYXx8KHRoaXMuYT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS5iPU1lKCk7dmFyIGI9YS5jLmNhbGxiYWNrLGM9YS5jW1wiZXhwaXJlZC1jYWxsYmFja1wiXTtpZihiKXRyeXtiKGEuYil9Y2F0Y2goZCl7fWEuYT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS5hPW51bGw7YS5iPW51bGw7aWYoYyl0cnl7YygpfWNhdGNoKGQpe31hLmgmJmEuZXhlY3V0ZSgpfSw2RTQpfSw1MDApKX07JG4ucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbigpe2NvKHRoaXMpO3RoaXMuZz0hMDtjbGVhclRpbWVvdXQodGhpcy5hKTt0aGlzLmE9bnVsbDtIKHRoaXMuZixcImNsaWNrXCIsdGhpcy5pKX07ZnVuY3Rpb24gY28oYSl7aWYoYS5nKXRocm93IEVycm9yKFwicmVDQVBUQ0hBIG1vY2sgd2FzIGFscmVhZHkgZGVsZXRlZCFcIik7fTtmdW5jdGlvbiBlbygpe31NKGVvLFwiRkFDVE9SX0lEXCIsXCJwaG9uZVwiKTtmdW5jdGlvbiBmbygpe31mby5wcm90b3R5cGUuZz1mdW5jdGlvbigpe1pufHwoWm49bmV3IFluKTtyZXR1cm4gRShabil9O2ZvLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7fTt2YXIgZ289bnVsbDtmdW5jdGlvbiBobygpe3RoaXMuYj1sLmdyZWNhcHRjaGE/SW5maW5pdHk6MDt0aGlzLmY9bnVsbDt0aGlzLmE9XCJfX3JjYlwiK01hdGguZmxvb3IoMUU2Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCl9dmFyIGlvPW5ldyBxYihyYixcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9vbmxvYWQ9JXtvbmxvYWR9JnJlbmRlcj1leHBsaWNpdCZobD0le2hsfVwiKSxqbz1uZXcgWmUoM0U0LDZFNCk7XG5oby5wcm90b3R5cGUuZz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBuZXcgRChmdW5jdGlvbihjLGQpe3ZhciBlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtkKG5ldyB0KFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKSl9LGpvLmdldCgpKTtpZighbC5ncmVjYXB0Y2hhfHxhIT09Yi5mJiYhYi5iKXtsW2IuYV09ZnVuY3Rpb24oKXtpZihsLmdyZWNhcHRjaGEpe2IuZj1hO3ZhciBnPWwuZ3JlY2FwdGNoYS5yZW5kZXI7bC5ncmVjYXB0Y2hhLnJlbmRlcj1mdW5jdGlvbihoLG4pe2g9ZyhoLG4pO2IuYisrO3JldHVybiBofTtjbGVhclRpbWVvdXQoZSk7YyhsLmdyZWNhcHRjaGEpfWVsc2UgY2xlYXJUaW1lb3V0KGUpLGQobmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKSk7ZGVsZXRlIGxbYi5hXX07dmFyIGY9emIoaW8se29ubG9hZDpiLmEsaGw6YXx8XCJcIn0pO0UoQ2koZikpLnMoZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoZSk7ZChuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJVbmFibGUgdG8gbG9hZCBleHRlcm5hbCByZUNBUFRDSEEgZGVwZW5kZW5jaWVzIVwiKSl9KX1lbHNlIGNsZWFyVGltZW91dChlKSxcbmMobC5ncmVjYXB0Y2hhKX0pfTtoby5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3RoaXMuYi0tfTt2YXIga289bnVsbDtmdW5jdGlvbiBsbyhhLGIsYyxkLGUsZixnKXtNKHRoaXMsXCJ0eXBlXCIsXCJyZWNhcHRjaGFcIik7dGhpcy5jPXRoaXMuZj1udWxsO3RoaXMuQT0hMTt0aGlzLm09Yjt0aGlzLmc9bnVsbDtnPyhnb3x8KGdvPW5ldyBmbyksZz1nbyk6KGtvfHwoa289bmV3IGhvKSxnPWtvKTt0aGlzLnY9Zzt0aGlzLmE9Y3x8e3RoZW1lOlwibGlnaHRcIix0eXBlOlwiaW1hZ2VcIn07dGhpcy5oPVtdO2lmKHRoaXMuYVttb10pdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwic2l0ZWtleSBzaG91bGQgbm90IGJlIHByb3ZpZGVkIGZvciByZUNBUFRDSEEgYXMgb25lIGlzIGF1dG9tYXRpY2FsbHkgcHJvdmlzaW9uZWQgZm9yIHRoZSBjdXJyZW50IHByb2plY3QuXCIpO3RoaXMuaT1cImludmlzaWJsZVwiPT09dGhpcy5hW25vXTtpZighbC5kb2N1bWVudCl0aHJvdyBuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIixcIlJlY2FwdGNoYVZlcmlmaWVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgYnJvd3NlciBIVFRQL0hUVFBTIGVudmlyb25tZW50IHdpdGggRE9NIHN1cHBvcnQuXCIpO1xuaWYoIWtjKGIpfHwhdGhpcy5pJiZrYyhiKS5oYXNDaGlsZE5vZGVzKCkpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwicmVDQVBUQ0hBIGNvbnRhaW5lciBpcyBlaXRoZXIgbm90IGZvdW5kIG9yIGFscmVhZHkgY29udGFpbnMgaW5uZXIgZWxlbWVudHMhXCIpO3RoaXMubz1uZXcgSmkoYSxmfHxudWxsLGV8fG51bGwpO3RoaXMudT1kfHxmdW5jdGlvbigpe3JldHVybiBudWxsfTt2YXIgaD10aGlzO3RoaXMubD1bXTt2YXIgbj10aGlzLmFbb29dO3RoaXMuYVtvb109ZnVuY3Rpb24odil7cG8oaCx2KTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiluKHYpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBuKXt2YXIgQj1MKG4sbCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIEImJkIodil9fTt2YXIgcD10aGlzLmFbcW9dO3RoaXMuYVtxb109ZnVuY3Rpb24oKXtwbyhoLG51bGwpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBwKXAoKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgcCl7dmFyIHY9XG5MKHAsbCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHYmJnYoKX19fXZhciBvbz1cImNhbGxiYWNrXCIscW89XCJleHBpcmVkLWNhbGxiYWNrXCIsbW89XCJzaXRla2V5XCIsbm89XCJzaXplXCI7ZnVuY3Rpb24gcG8oYSxiKXtmb3IodmFyIGM9MDtjPGEubC5sZW5ndGg7YysrKXRyeXthLmxbY10oYil9Y2F0Y2goZCl7fX1mdW5jdGlvbiBybyhhLGIpe1hhKGEubCxmdW5jdGlvbihjKXtyZXR1cm4gYz09Yn0pfWZ1bmN0aW9uIHNvKGEsYil7YS5oLnB1c2goYik7Yi5uYShmdW5jdGlvbigpe1dhKGEuaCxiKX0pO3JldHVybiBifWs9bG8ucHJvdG90eXBlO1xuay5JYT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIHRoaXMuZj90aGlzLmY6dGhpcy5mPXNvKHRoaXMsRSgpLnRoZW4oZnVuY3Rpb24oKXtpZihTZSgpJiYhSmUoKSlyZXR1cm4gRWUoKTt0aHJvdyBuZXcgdChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIixcIlJlY2FwdGNoYVZlcmlmaWVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgYnJvd3NlciBIVFRQL0hUVFBTIGVudmlyb25tZW50LlwiKTt9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEudi5nKGEudSgpKX0pLnRoZW4oZnVuY3Rpb24oYil7YS5nPWI7cmV0dXJuIE8oYS5vLEtqLHt9KX0pLnRoZW4oZnVuY3Rpb24oYil7YS5hW21vXT1iLnJlY2FwdGNoYVNpdGVLZXl9KS5zKGZ1bmN0aW9uKGIpe2EuZj1udWxsO3Rocm93IGI7fSkpfTtcbmsucmVuZGVyPWZ1bmN0aW9uKCl7dG8odGhpcyk7dmFyIGE9dGhpcztyZXR1cm4gc28odGhpcyx0aGlzLklhKCkudGhlbihmdW5jdGlvbigpe2lmKG51bGw9PT1hLmMpe3ZhciBiPWEubTtpZighYS5pKXt2YXIgYz1rYyhiKTtiPW5jKFwiRElWXCIpO2MuYXBwZW5kQ2hpbGQoYil9YS5jPWEuZy5yZW5kZXIoYixhLmEpfXJldHVybiBhLmN9KSl9O2sudmVyaWZ5PWZ1bmN0aW9uKCl7dG8odGhpcyk7dmFyIGE9dGhpcztyZXR1cm4gc28odGhpcyx0aGlzLnJlbmRlcigpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIG5ldyBEKGZ1bmN0aW9uKGMpe3ZhciBkPWEuZy5nZXRSZXNwb25zZShiKTtpZihkKWMoZCk7ZWxzZXt2YXIgZT1mdW5jdGlvbihmKXtmJiYocm8oYSxlKSxjKGYpKX07YS5sLnB1c2goZSk7YS5pJiZhLmcuZXhlY3V0ZShhLmMpfX0pfSkpfTtrLnJlc2V0PWZ1bmN0aW9uKCl7dG8odGhpcyk7bnVsbCE9PXRoaXMuYyYmdGhpcy5nLnJlc2V0KHRoaXMuYyl9O1xuZnVuY3Rpb24gdG8oYSl7aWYoYS5BKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIlJlY2FwdGNoYVZlcmlmaWVyIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZC5cIik7fWsuY2xlYXI9ZnVuY3Rpb24oKXt0byh0aGlzKTt0aGlzLkE9ITA7dGhpcy52LmMoKTtmb3IodmFyIGE9MDthPHRoaXMuaC5sZW5ndGg7YSsrKXRoaXMuaFthXS5jYW5jZWwoXCJSZWNhcHRjaGFWZXJpZmllciBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQuXCIpO2lmKCF0aGlzLmkpe2E9a2ModGhpcy5tKTtmb3IodmFyIGI7Yj1hLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYil9fTtcbmZ1bmN0aW9uIHVvKGEsYixjKXt2YXIgZD0hMTt0cnl7dGhpcy5iPWN8fGZpcmViYXNlLmFwcCgpfWNhdGNoKGcpe3Rocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixcIk5vIGZpcmViYXNlLmFwcC5BcHAgaW5zdGFuY2UgaXMgY3VycmVudGx5IGluaXRpYWxpemVkLlwiKTt9aWYodGhpcy5iLm9wdGlvbnMmJnRoaXMuYi5vcHRpb25zLmFwaUtleSljPXRoaXMuYi5vcHRpb25zLmFwaUtleTtlbHNlIHRocm93IG5ldyB0KFwiaW52YWxpZC1hcGkta2V5XCIpO3ZhciBlPXRoaXMsZj1udWxsO3RyeXtmPXRoaXMuYi5hdXRoKCkuR2EoKX1jYXRjaChnKXt9dHJ5e2Q9dGhpcy5iLmF1dGgoKS5zZXR0aW5ncy5hcHBWZXJpZmljYXRpb25EaXNhYmxlZEZvclRlc3Rpbmd9Y2F0Y2goZyl7fWY9ZmlyZWJhc2UuU0RLX1ZFUlNJT04/T2UoZmlyZWJhc2UuU0RLX1ZFUlNJT04sZik6bnVsbDtsby5jYWxsKHRoaXMsYyxhLGIsZnVuY3Rpb24oKXt0cnl7dmFyIGc9ZS5iLmF1dGgoKS5rYSgpfWNhdGNoKGgpe2c9XG5udWxsfXJldHVybiBnfSxmLENhKERhKSxkKX1yKHVvLGxvKTtmdW5jdGlvbiB2byhhLGIsYyxkKXthOntjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGMpO3ZhciBlPTA7Zm9yKHZhciBmPSExLGc9MDtnPGIubGVuZ3RoO2crKylpZihiW2ddLm9wdGlvbmFsKWY9ITA7ZWxzZXtpZihmKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIkFyZ3VtZW50IHZhbGlkYXRvciBlbmNvdW50ZXJlZCBhIHJlcXVpcmVkIGFyZ3VtZW50IGFmdGVyIGFuIG9wdGlvbmFsIGFyZ3VtZW50LlwiKTtlKyt9Zj1iLmxlbmd0aDtpZihjLmxlbmd0aDxlfHxmPGMubGVuZ3RoKWQ9XCJFeHBlY3RlZCBcIisoZT09Zj8xPT1lP1wiMSBhcmd1bWVudFwiOmUrXCIgYXJndW1lbnRzXCI6ZStcIi1cIitmK1wiIGFyZ3VtZW50c1wiKStcIiBidXQgZ290IFwiK2MubGVuZ3RoK1wiLlwiO2Vsc2V7Zm9yKGU9MDtlPGMubGVuZ3RoO2UrKylpZihmPWJbZV0ub3B0aW9uYWwmJnZvaWQgMD09PWNbZV0sIWJbZV0uSyhjW2VdKSYmIWYpe2I9YltlXTtpZigwPmV8fGU+PXdvLmxlbmd0aCl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXG5cIkFyZ3VtZW50IHZhbGlkYXRvciByZWNlaXZlZCBhbiB1bnN1cHBvcnRlZCBudW1iZXIgb2YgYXJndW1lbnRzLlwiKTtjPXdvW2VdO2Q9KGQ/XCJcIjpjK1wiIGFyZ3VtZW50IFwiKSsoYi5uYW1lPydcIicrYi5uYW1lKydcIiAnOlwiXCIpK1wibXVzdCBiZSBcIitiLkorXCIuXCI7YnJlYWsgYX1kPW51bGx9fWlmKGQpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLGErXCIgZmFpbGVkOiBcIitkKTt9dmFyIHdvPVwiRmlyc3QgU2Vjb25kIFRoaXJkIEZvdXJ0aCBGaWZ0aCBTaXh0aCBTZXZlbnRoIEVpZ2h0aCBOaW50aFwiLnNwbGl0KFwiIFwiKTtmdW5jdGlvbiBWKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixKOlwiYSB2YWxpZCBzdHJpbmdcIixvcHRpb25hbDohIWIsSzpmdW5jdGlvbihjKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGN9fX1cbmZ1bmN0aW9uIHhvKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixKOlwiYSBib29sZWFuXCIsb3B0aW9uYWw6ISFiLEs6ZnVuY3Rpb24oYyl7cmV0dXJuXCJib29sZWFuXCI9PT10eXBlb2YgY319fWZ1bmN0aW9uIFcoYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEo6XCJhIHZhbGlkIG9iamVjdFwiLG9wdGlvbmFsOiEhYixLOm19fWZ1bmN0aW9uIHlvKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixKOlwiYSBmdW5jdGlvblwiLG9wdGlvbmFsOiEhYixLOmZ1bmN0aW9uKGMpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBjfX19ZnVuY3Rpb24gem8oYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEo6XCJudWxsXCIsb3B0aW9uYWw6ISFiLEs6ZnVuY3Rpb24oYyl7cmV0dXJuIG51bGw9PT1jfX19ZnVuY3Rpb24gQW8oKXtyZXR1cm57bmFtZTpcIlwiLEo6XCJhbiBIVE1MIGVsZW1lbnRcIixvcHRpb25hbDohMSxLOmZ1bmN0aW9uKGEpe3JldHVybiEhKGEmJmEgaW5zdGFuY2VvZiBFbGVtZW50KX19fVxuZnVuY3Rpb24gQm8oKXtyZXR1cm57bmFtZTpcImF1dGhcIixKOlwiYW4gaW5zdGFuY2Ugb2YgRmlyZWJhc2UgQXV0aFwiLG9wdGlvbmFsOiEwLEs6ZnVuY3Rpb24oYSl7cmV0dXJuISEoYSYmYSBpbnN0YW5jZW9mIEZuKX19fWZ1bmN0aW9uIENvKCl7cmV0dXJue25hbWU6XCJhcHBcIixKOlwiYW4gaW5zdGFuY2Ugb2YgRmlyZWJhc2UgQXBwXCIsb3B0aW9uYWw6ITAsSzpmdW5jdGlvbihhKXtyZXR1cm4hIShhJiZhIGluc3RhbmNlb2YgZmlyZWJhc2UuYXBwLkFwcCl9fX1mdW5jdGlvbiBEbyhhKXtyZXR1cm57bmFtZTphP2ErXCJDcmVkZW50aWFsXCI6XCJjcmVkZW50aWFsXCIsSjphP1wiYSB2YWxpZCBcIithK1wiIGNyZWRlbnRpYWxcIjpcImEgdmFsaWQgY3JlZGVudGlhbFwiLG9wdGlvbmFsOiExLEs6ZnVuY3Rpb24oYil7aWYoIWIpcmV0dXJuITE7dmFyIGM9IWF8fGIucHJvdmlkZXJJZD09PWE7cmV0dXJuISghYi5qYXx8IWMpfX19XG5mdW5jdGlvbiBFbygpe3JldHVybntuYW1lOlwibXVsdGlGYWN0b3JBc3NlcnRpb25cIixKOlwiYSB2YWxpZCBtdWx0aUZhY3RvckFzc2VydGlvblwiLG9wdGlvbmFsOiExLEs6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/ISFhLnJiOiExfX19ZnVuY3Rpb24gRm8oKXtyZXR1cm57bmFtZTpcImF1dGhQcm92aWRlclwiLEo6XCJhIHZhbGlkIEF1dGggcHJvdmlkZXJcIixvcHRpb25hbDohMSxLOmZ1bmN0aW9uKGEpe3JldHVybiEhKGEmJmEucHJvdmlkZXJJZCYmYS5oYXNPd25Qcm9wZXJ0eSYmYS5oYXNPd25Qcm9wZXJ0eShcImlzT0F1dGhQcm92aWRlclwiKSl9fX1mdW5jdGlvbiBHbyhhLGIpe3JldHVybiBtKGEpJiZcInN0cmluZ1wiPT09dHlwZW9mIGEudHlwZSYmYS50eXBlPT09YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuSGF9ZnVuY3Rpb24gSG8oYSl7cmV0dXJuIG0oYSkmJlwic3RyaW5nXCI9PT10eXBlb2YgYS51aWR9XG5mdW5jdGlvbiBJbygpe3JldHVybntuYW1lOlwiYXBwbGljYXRpb25WZXJpZmllclwiLEo6XCJhbiBpbXBsZW1lbnRhdGlvbiBvZiBmaXJlYmFzZS5hdXRoLkFwcGxpY2F0aW9uVmVyaWZpZXJcIixvcHRpb25hbDohMSxLOmZ1bmN0aW9uKGEpe3JldHVybiEoIWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYS50eXBlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgYS52ZXJpZnkpfX19ZnVuY3Rpb24gWChhLGIsYyxkKXtyZXR1cm57bmFtZTpjfHxcIlwiLEo6YS5KK1wiIG9yIFwiK2IuSixvcHRpb25hbDohIWQsSzpmdW5jdGlvbihlKXtyZXR1cm4gYS5LKGUpfHxiLksoZSl9fX07ZnVuY3Rpb24gWShhLGIpe2Zvcih2YXIgYyBpbiBiKXt2YXIgZD1iW2NdLm5hbWU7YVtkXT1KbyhkLGFbY10sYltjXS5qKX19ZnVuY3Rpb24gS28oYSxiKXtmb3IodmFyIGMgaW4gYil7dmFyIGQ9YltjXS5uYW1lO2QhPT1jJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxkLHtnZXQ6dWEoZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXNbZV19LGMpLHNldDp1YShmdW5jdGlvbihlLGYsZyxoKXt2byhlLFtnXSxbaF0sITApO3RoaXNbZl09aH0sZCxjLGJbY10uamIpLGVudW1lcmFibGU6ITB9KX19ZnVuY3Rpb24gWihhLGIsYyxkKXthW2JdPUpvKGIsYyxkKX1cbmZ1bmN0aW9uIEpvKGEsYixjKXtmdW5jdGlvbiBkKCl7dmFyIGc9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTt2byhlLGMsZyk7cmV0dXJuIGIuYXBwbHkodGhpcyxnKX1pZighYylyZXR1cm4gYjt2YXIgZT1MbyhhKSxmO2ZvcihmIGluIGIpZFtmXT1iW2ZdO2ZvcihmIGluIGIucHJvdG90eXBlKWQucHJvdG90eXBlW2ZdPWIucHJvdG90eXBlW2ZdO3JldHVybiBkfWZ1bmN0aW9uIExvKGEpe2E9YS5zcGxpdChcIi5cIik7cmV0dXJuIGFbYS5sZW5ndGgtMV19O1koRm4ucHJvdG90eXBlLHtpYjp7bmFtZTpcImFwcGx5QWN0aW9uQ29kZVwiLGo6W1YoXCJjb2RlXCIpXX0sUWE6e25hbWU6XCJjaGVja0FjdGlvbkNvZGVcIixqOltWKFwiY29kZVwiKV19LG1iOntuYW1lOlwiY29uZmlybVBhc3N3b3JkUmVzZXRcIixqOltWKFwiY29kZVwiKSxWKFwibmV3UGFzc3dvcmRcIildfSxkYzp7bmFtZTpcImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZFwiLGo6W1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildfSxnYzp7bmFtZTpcImZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsXCIsajpbVihcImVtYWlsXCIpXX0scWE6e25hbWU6XCJnZXRSZWRpcmVjdFJlc3VsdFwiLGo6W119LEFjOntuYW1lOlwiaXNTaWduSW5XaXRoRW1haWxMaW5rXCIsajpbVihcImVtYWlsTGlua1wiKV19LEdjOntuYW1lOlwib25BdXRoU3RhdGVDaGFuZ2VkXCIsajpbWChXKCkseW8oKSxcIm5leHRPck9ic2VydmVyXCIpLHlvKFwib3B0X2Vycm9yXCIsITApLHlvKFwib3B0X2NvbXBsZXRlZFwiLCEwKV19LEhjOntuYW1lOlwib25JZFRva2VuQ2hhbmdlZFwiLFxuajpbWChXKCkseW8oKSxcIm5leHRPck9ic2VydmVyXCIpLHlvKFwib3B0X2Vycm9yXCIsITApLHlvKFwib3B0X2NvbXBsZXRlZFwiLCEwKV19LHViOntuYW1lOlwic2VuZFBhc3N3b3JkUmVzZXRFbWFpbFwiLGo6W1YoXCJlbWFpbFwiKSxYKFcoXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApLHpvKG51bGwsITApLFwib3B0X2FjdGlvbkNvZGVTZXR0aW5nc1wiLCEwKV19LHZiOntuYW1lOlwic2VuZFNpZ25JbkxpbmtUb0VtYWlsXCIsajpbVihcImVtYWlsXCIpLFcoXCJhY3Rpb25Db2RlU2V0dGluZ3NcIildfSx3Yjp7bmFtZTpcInNldFBlcnNpc3RlbmNlXCIsajpbVihcInBlcnNpc3RlbmNlXCIpXX0sUmM6e25hbWU6XCJzaWduSW5BbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbFwiLGo6W0RvKCldfSx5Yjp7bmFtZTpcInNpZ25JbkFub255bW91c2x5XCIsajpbXX0sWmE6e25hbWU6XCJzaWduSW5XaXRoQ3JlZGVudGlhbFwiLGo6W0RvKCldfSxTYzp7bmFtZTpcInNpZ25JbldpdGhDdXN0b21Ub2tlblwiLGo6W1YoXCJ0b2tlblwiKV19LFxuVGM6e25hbWU6XCJzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZFwiLGo6W1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildfSxVYzp7bmFtZTpcInNpZ25JbldpdGhFbWFpbExpbmtcIixqOltWKFwiZW1haWxcIiksVihcImVtYWlsTGlua1wiLCEwKV19LFZjOntuYW1lOlwic2lnbkluV2l0aFBob25lTnVtYmVyXCIsajpbVihcInBob25lTnVtYmVyXCIpLElvKCldfSxXYzp7bmFtZTpcInNpZ25JbldpdGhQb3B1cFwiLGo6W0ZvKCldfSxYYzp7bmFtZTpcInNpZ25JbldpdGhSZWRpcmVjdFwiLGo6W0ZvKCldfSxjZDp7bmFtZTpcInVwZGF0ZUN1cnJlbnRVc2VyXCIsajpbWChmdW5jdGlvbihhKXtyZXR1cm57bmFtZTpcInVzZXJcIixKOlwiYW4gaW5zdGFuY2Ugb2YgRmlyZWJhc2UgVXNlclwiLG9wdGlvbmFsOiEhYSxLOmZ1bmN0aW9uKGIpe3JldHVybiEhKGImJmIgaW5zdGFuY2VvZiBKbSl9fX0oKSx6bygpLFwidXNlclwiKV19LHpiOntuYW1lOlwic2lnbk91dFwiLGo6W119LHRvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCxcbiEwKV19LGVkOntuYW1lOlwidXNlRGV2aWNlTGFuZ3VhZ2VcIixqOltdfSxmZDp7bmFtZTpcInVzZUVtdWxhdG9yXCIsajpbVihcInVybFwiKV19LGhkOntuYW1lOlwidmVyaWZ5UGFzc3dvcmRSZXNldENvZGVcIixqOltWKFwiY29kZVwiKV19fSk7S28oRm4ucHJvdG90eXBlLHtsYzp7bmFtZTpcImxhbmd1YWdlQ29kZVwiLGpiOlgoVigpLHpvKCksXCJsYW5ndWFnZUNvZGVcIil9LHRpOntuYW1lOlwidGVuYW50SWRcIixqYjpYKFYoKSx6bygpLFwidGVuYW50SWRcIil9fSk7Rm4uUGVyc2lzdGVuY2U9U2s7Rm4uUGVyc2lzdGVuY2UuTE9DQUw9XCJsb2NhbFwiO0ZuLlBlcnNpc3RlbmNlLlNFU1NJT049XCJzZXNzaW9uXCI7Rm4uUGVyc2lzdGVuY2UuTk9ORT1cIm5vbmVcIjtcblkoSm0ucHJvdG90eXBlLHtcImRlbGV0ZVwiOntuYW1lOlwiZGVsZXRlXCIsajpbXX0sbmM6e25hbWU6XCJnZXRJZFRva2VuUmVzdWx0XCIsajpbeG8oXCJvcHRfZm9yY2VSZWZyZXNoXCIsITApXX0sSTp7bmFtZTpcImdldElkVG9rZW5cIixqOlt4byhcIm9wdF9mb3JjZVJlZnJlc2hcIiwhMCldfSxCYzp7bmFtZTpcImxpbmtBbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbFwiLGo6W0RvKCldfSxwYjp7bmFtZTpcImxpbmtXaXRoQ3JlZGVudGlhbFwiLGo6W0RvKCldfSxDYzp7bmFtZTpcImxpbmtXaXRoUGhvbmVOdW1iZXJcIixqOltWKFwicGhvbmVOdW1iZXJcIiksSW8oKV19LERjOntuYW1lOlwibGlua1dpdGhQb3B1cFwiLGo6W0ZvKCldfSxFYzp7bmFtZTpcImxpbmtXaXRoUmVkaXJlY3RcIixqOltGbygpXX0sS2M6e25hbWU6XCJyZWF1dGhlbnRpY2F0ZUFuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsXCIsajpbRG8oKV19LHNiOntuYW1lOlwicmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbFwiLGo6W0RvKCldfSxMYzp7bmFtZTpcInJlYXV0aGVudGljYXRlV2l0aFBob25lTnVtYmVyXCIsXG5qOltWKFwicGhvbmVOdW1iZXJcIiksSW8oKV19LE1jOntuYW1lOlwicmVhdXRoZW50aWNhdGVXaXRoUG9wdXBcIixqOltGbygpXX0sTmM6e25hbWU6XCJyZWF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdFwiLGo6W0ZvKCldfSxyZWxvYWQ6e25hbWU6XCJyZWxvYWRcIixqOltdfSx0Yjp7bmFtZTpcInNlbmRFbWFpbFZlcmlmaWNhdGlvblwiLGo6W1goVyhcIm9wdF9hY3Rpb25Db2RlU2V0dGluZ3NcIiwhMCksem8obnVsbCwhMCksXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApXX0sdG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19LGJkOntuYW1lOlwidW5saW5rXCIsajpbVihcInByb3ZpZGVyXCIpXX0sQWI6e25hbWU6XCJ1cGRhdGVFbWFpbFwiLGo6W1YoXCJlbWFpbFwiKV19LEJiOntuYW1lOlwidXBkYXRlUGFzc3dvcmRcIixqOltWKFwicGFzc3dvcmRcIildfSxkZDp7bmFtZTpcInVwZGF0ZVBob25lTnVtYmVyXCIsajpbRG8oXCJwaG9uZVwiKV19LENiOntuYW1lOlwidXBkYXRlUHJvZmlsZVwiLGo6W1coXCJwcm9maWxlXCIpXX0sXG5EYjp7bmFtZTpcInZlcmlmeUJlZm9yZVVwZGF0ZUVtYWlsXCIsajpbVihcImVtYWlsXCIpLFgoVyhcIm9wdF9hY3Rpb25Db2RlU2V0dGluZ3NcIiwhMCksem8obnVsbCwhMCksXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApXX19KTtZKFluLnByb3RvdHlwZSx7ZXhlY3V0ZTp7bmFtZTpcImV4ZWN1dGVcIn0scmVuZGVyOntuYW1lOlwicmVuZGVyXCJ9LHJlc2V0OntuYW1lOlwicmVzZXRcIn0sZ2V0UmVzcG9uc2U6e25hbWU6XCJnZXRSZXNwb25zZVwifX0pO1koWG4ucHJvdG90eXBlLHtleGVjdXRlOntuYW1lOlwiZXhlY3V0ZVwifSxyZW5kZXI6e25hbWU6XCJyZW5kZXJcIn0scmVzZXQ6e25hbWU6XCJyZXNldFwifSxnZXRSZXNwb25zZTp7bmFtZTpcImdldFJlc3BvbnNlXCJ9fSk7WShELnByb3RvdHlwZSx7bmE6e25hbWU6XCJmaW5hbGx5XCJ9LHM6e25hbWU6XCJjYXRjaFwifSx0aGVuOntuYW1lOlwidGhlblwifX0pO1xuS28oZm0ucHJvdG90eXBlLHthcHBWZXJpZmljYXRpb25EaXNhYmxlZDp7bmFtZTpcImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ1wiLGpiOnhvKFwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRGb3JUZXN0aW5nXCIpfX0pO1koZ20ucHJvdG90eXBlLHtjb25maXJtOntuYW1lOlwiY29uZmlybVwiLGo6W1YoXCJ2ZXJpZmljYXRpb25Db2RlXCIpXX19KTtaKENnLFwiZnJvbUpTT05cIixmdW5jdGlvbihhKXthPVwic3RyaW5nXCI9PT10eXBlb2YgYT9KU09OLnBhcnNlKGEpOmE7Zm9yKHZhciBiLGM9W05nLGVoLGxoLEtnXSxkPTA7ZDxjLmxlbmd0aDtkKyspaWYoYj1jW2RdKGEpKXJldHVybiBiO3JldHVybiBudWxsfSxbWChWKCksVygpLFwianNvblwiKV0pO1ooJGcsXCJjcmVkZW50aWFsXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IFpnKGEsYil9LFtWKFwiZW1haWxcIiksVihcInBhc3N3b3JkXCIpXSk7WShaZy5wcm90b3R5cGUse3c6e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtcblkoUmcucHJvdG90eXBlLHtDYTp7bmFtZTpcImFkZFNjb3BlXCIsajpbVihcInNjb3BlXCIpXX0sS2E6e25hbWU6XCJzZXRDdXN0b21QYXJhbWV0ZXJzXCIsajpbVyhcImN1c3RvbU9BdXRoUGFyYW1ldGVyc1wiKV19fSk7WihSZyxcImNyZWRlbnRpYWxcIixTZyxbWChWKCksVygpLFwidG9rZW5cIildKTtaKCRnLFwiY3JlZGVudGlhbFdpdGhMaW5rXCIsZmgsW1YoXCJlbWFpbFwiKSxWKFwiZW1haWxMaW5rXCIpXSk7WShUZy5wcm90b3R5cGUse0NhOntuYW1lOlwiYWRkU2NvcGVcIixqOltWKFwic2NvcGVcIildfSxLYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtaKFRnLFwiY3JlZGVudGlhbFwiLFVnLFtYKFYoKSxXKCksXCJ0b2tlblwiKV0pO1koVmcucHJvdG90eXBlLHtDYTp7bmFtZTpcImFkZFNjb3BlXCIsajpbVihcInNjb3BlXCIpXX0sS2E6e25hbWU6XCJzZXRDdXN0b21QYXJhbWV0ZXJzXCIsajpbVyhcImN1c3RvbU9BdXRoUGFyYW1ldGVyc1wiKV19fSk7XG5aKFZnLFwiY3JlZGVudGlhbFwiLFdnLFtYKFYoKSxYKFcoKSx6bygpKSxcImlkVG9rZW5cIiksWChWKCksem8oKSxcImFjY2Vzc1Rva2VuXCIsITApXSk7WShYZy5wcm90b3R5cGUse0thOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1ooWGcsXCJjcmVkZW50aWFsXCIsWWcsW1goVigpLFcoKSxcInRva2VuXCIpLFYoXCJzZWNyZXRcIiwhMCldKTtZKFFnLnByb3RvdHlwZSx7Q2E6e25hbWU6XCJhZGRTY29wZVwiLGo6W1YoXCJzY29wZVwiKV19LGNyZWRlbnRpYWw6e25hbWU6XCJjcmVkZW50aWFsXCIsajpbWChWKCksWChXKCksem8oKSksXCJvcHRpb25zT3JJZFRva2VuXCIpLFgoVigpLHpvKCksXCJhY2Nlc3NUb2tlblwiLCEwKV19LEthOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1koTGcucHJvdG90eXBlLHt3OntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7XG5ZKEZnLnByb3RvdHlwZSx7dzp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1oobWgsXCJjcmVkZW50aWFsXCIscWgsW1YoXCJ2ZXJpZmljYXRpb25JZFwiKSxWKFwidmVyaWZpY2F0aW9uQ29kZVwiKV0pO1xuWShtaC5wcm90b3R5cGUse2ViOntuYW1lOlwidmVyaWZ5UGhvbmVOdW1iZXJcIixqOltYKFYoKSxmdW5jdGlvbihhLGIpe3JldHVybntuYW1lOmF8fFwicGhvbmVJbmZvT3B0aW9uc1wiLEo6XCJ2YWxpZCBwaG9uZSBpbmZvIG9wdGlvbnNcIixvcHRpb25hbDohIWIsSzpmdW5jdGlvbihjKXtyZXR1cm4gYz9jLnNlc3Npb24mJmMucGhvbmVOdW1iZXI/R28oYy5zZXNzaW9uLEFnKSYmXCJzdHJpbmdcIj09PXR5cGVvZiBjLnBob25lTnVtYmVyOmMuc2Vzc2lvbiYmYy5tdWx0aUZhY3RvckhpbnQ/R28oYy5zZXNzaW9uLEJnKSYmSG8oYy5tdWx0aUZhY3RvckhpbnQpOmMuc2Vzc2lvbiYmYy5tdWx0aUZhY3RvclVpZD9HbyhjLnNlc3Npb24sQmcpJiZcInN0cmluZ1wiPT09dHlwZW9mIGMubXVsdGlGYWN0b3JVaWQ6Yy5waG9uZU51bWJlcj9cInN0cmluZ1wiPT09dHlwZW9mIGMucGhvbmVOdW1iZXI6ITE6ITF9fX0oKSxcInBob25lSW5mb09wdGlvbnNcIiksSW8oKV19fSk7XG5ZKGhoLnByb3RvdHlwZSx7dzp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1kodC5wcm90b3R5cGUse3RvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1koemgucHJvdG90eXBlLHt0b0pTT046e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtZKHloLnByb3RvdHlwZSx7dG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7WShtbS5wcm90b3R5cGUse3RvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1koam0ucHJvdG90eXBlLHtRYzp7bmFtZTpcInJlc29sdmVTaWduSW5cIixqOltFbygpXX19KTtcblkodW0ucHJvdG90eXBlLHtRYjp7bmFtZTpcImdldFNlc3Npb25cIixqOltdfSxlYzp7bmFtZTpcImVucm9sbFwiLGo6W0VvKCksVihcImRpc3BsYXlOYW1lXCIsITApXX0sYWQ6e25hbWU6XCJ1bmVucm9sbFwiLGo6W1goe25hbWU6XCJtdWx0aUZhY3RvckluZm9cIixKOlwiYSB2YWxpZCBtdWx0aUZhY3RvckluZm9cIixvcHRpb25hbDohMSxLOkhvfSxWKCksXCJtdWx0aUZhY3RvckluZm9JZGVudGlmaWVyXCIpXX19KTtZKHVvLnByb3RvdHlwZSx7Y2xlYXI6e25hbWU6XCJjbGVhclwiLGo6W119LHJlbmRlcjp7bmFtZTpcInJlbmRlclwiLGo6W119LHZlcmlmeTp7bmFtZTpcInZlcmlmeVwiLGo6W119fSk7WihLZixcInBhcnNlTGlua1wiLFNmLFtWKFwibGlua1wiKV0pO1ooZW8sXCJhc3NlcnRpb25cIixmdW5jdGlvbihhKXtyZXR1cm4gbmV3IHNtKGEpfSxbRG8oXCJwaG9uZVwiKV0pO1xuKGZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBmaXJlYmFzZSYmZmlyZWJhc2UuSU5URVJOQUwmJmZpcmViYXNlLklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KXt2YXIgYT17QWN0aW9uQ29kZUluZm86e09wZXJhdGlvbjp7RU1BSUxfU0lHTklOOkJmLFBBU1NXT1JEX1JFU0VUOlwiUEFTU1dPUkRfUkVTRVRcIixSRUNPVkVSX0VNQUlMOlwiUkVDT1ZFUl9FTUFJTFwiLFJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OOkRmLFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMOkNmLFZFUklGWV9FTUFJTDpcIlZFUklGWV9FTUFJTFwifX0sQXV0aDpGbixBdXRoQ3JlZGVudGlhbDpDZyxFcnJvcjp0fTtaKGEsXCJFbWFpbEF1dGhQcm92aWRlclwiLCRnLFtdKTtaKGEsXCJGYWNlYm9va0F1dGhQcm92aWRlclwiLFJnLFtdKTtaKGEsXCJHaXRodWJBdXRoUHJvdmlkZXJcIixUZyxbXSk7WihhLFwiR29vZ2xlQXV0aFByb3ZpZGVyXCIsVmcsW10pO1ooYSxcIlR3aXR0ZXJBdXRoUHJvdmlkZXJcIixYZyxbXSk7XG5aKGEsXCJPQXV0aFByb3ZpZGVyXCIsUWcsW1YoXCJwcm92aWRlcklkXCIpXSk7WihhLFwiU0FNTEF1dGhQcm92aWRlclwiLFBnLFtWKFwicHJvdmlkZXJJZFwiKV0pO1ooYSxcIlBob25lQXV0aFByb3ZpZGVyXCIsbWgsW0JvKCldKTtaKGEsXCJSZWNhcHRjaGFWZXJpZmllclwiLHVvLFtYKFYoKSxBbygpLFwicmVjYXB0Y2hhQ29udGFpbmVyXCIpLFcoXCJyZWNhcHRjaGFQYXJhbWV0ZXJzXCIsITApLENvKCldKTtaKGEsXCJBY3Rpb25Db2RlVVJMXCIsS2YsW10pO1ooYSxcIlBob25lTXVsdGlGYWN0b3JHZW5lcmF0b3JcIixlbyxbXSk7ZmlyZWJhc2UuSU5URVJOQUwucmVnaXN0ZXJDb21wb25lbnQoe25hbWU6XCJhdXRoXCIsaW5zdGFuY2VGYWN0b3J5OmZ1bmN0aW9uKGIpe2I9Yi5nZXRQcm92aWRlcihcImFwcFwiKS5nZXRJbW1lZGlhdGUoKTtyZXR1cm4gbmV3IEZuKGIpfSxtdWx0aXBsZUluc3RhbmNlczohMSxzZXJ2aWNlUHJvcHM6YSxpbnN0YW50aWF0aW9uTW9kZTpcIkxBWllcIix0eXBlOlwiUFVCTElDXCJ9KTtmaXJlYmFzZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudCh7bmFtZTpcImF1dGgtaW50ZXJuYWxcIixcbmluc3RhbmNlRmFjdG9yeTpmdW5jdGlvbihiKXtiPWIuZ2V0UHJvdmlkZXIoXCJhdXRoXCIpLmdldEltbWVkaWF0ZSgpO3JldHVybntnZXRVaWQ6cShiLmdldFVpZCxiKSxnZXRUb2tlbjpxKGIubWMsYiksYWRkQXV0aFRva2VuTGlzdGVuZXI6cShiLmNjLGIpLHJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyOnEoYi5PYyxiKX19LG11bHRpcGxlSW5zdGFuY2VzOiExLGluc3RhbnRpYXRpb25Nb2RlOlwiTEFaWVwiLHR5cGU6XCJQUklWQVRFXCJ9KTtmaXJlYmFzZS5yZWdpc3RlclZlcnNpb24oXCJAZmlyZWJhc2UvYXV0aFwiLFwiMC4xNS4yXCIpO2ZpcmViYXNlLklOVEVSTkFMLmV4dGVuZE5hbWVzcGFjZSh7VXNlcjpKbX0pfWVsc2UgdGhyb3cgRXJyb3IoXCJDYW5ub3QgZmluZCB0aGUgZmlyZWJhc2UgbmFtZXNwYWNlOyBiZSBzdXJlIHRvIGluY2x1ZGUgZmlyZWJhc2UtYXBwLmpzIGJlZm9yZSB0aGlzIGxpYnJhcnkuXCIpO30pKCk7fSkuYXBwbHkodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGguZXNtLmpzLm1hcFxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxudmFyIGcsIGdvb2cgPSBnb29nIHx8IHt9LCBrID0gY29tbW9uanNHbG9iYWwgfHwgc2VsZjtcclxuZnVuY3Rpb24gYWEoKSB7IH1cclxuZnVuY3Rpb24gYmEoYSkgeyB2YXIgYiA9IHR5cGVvZiBhOyByZXR1cm4gXCJvYmplY3RcIiAhPSBiID8gYiA6IGEgPyBBcnJheS5pc0FycmF5KGEpID8gXCJhcnJheVwiIDogYiA6IFwibnVsbFwiOyB9XHJcbmZ1bmN0aW9uIGNhKGEpIHsgdmFyIGIgPSBiYShhKTsgcmV0dXJuIFwiYXJyYXlcIiA9PSBiIHx8IFwib2JqZWN0XCIgPT0gYiAmJiBcIm51bWJlclwiID09IHR5cGVvZiBhLmxlbmd0aDsgfVxyXG5mdW5jdGlvbiBuKGEpIHsgdmFyIGIgPSB0eXBlb2YgYTsgcmV0dXJuIFwib2JqZWN0XCIgPT0gYiAmJiBudWxsICE9IGEgfHwgXCJmdW5jdGlvblwiID09IGI7IH1cclxuZnVuY3Rpb24gZGEoYSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGVhKSAmJiBhW2VhXSB8fCAoYVtlYV0gPSArK2ZhKTsgfVxyXG52YXIgZWEgPSBcImNsb3N1cmVfdWlkX1wiICsgKDFFOSAqIE1hdGgucmFuZG9tKCkgPj4+IDApLCBmYSA9IDA7XHJcbmZ1bmN0aW9uIGhhKGEsIGIsIGMpIHsgcmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsIGFyZ3VtZW50cyk7IH1cclxuZnVuY3Rpb24gamEoYSwgYiwgYykgeyBpZiAoIWEpXHJcbiAgICB0aHJvdyBFcnJvcigpOyBpZiAoMiA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHZhciBkID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoZSwgZCk7IHJldHVybiBhLmFwcGx5KGIsIGUpOyB9O1xyXG59IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBhLmFwcGx5KGIsIGFyZ3VtZW50cyk7IH07IH1cclxuZnVuY3Rpb24gcChhLCBiLCBjKSB7IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kICYmIC0xICE9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hdGl2ZSBjb2RlXCIpID8gcCA9IGhhIDogcCA9IGphOyByZXR1cm4gcC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XHJcbmZ1bmN0aW9uIGthKGEsIGIpIHsgdmFyIGMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgZCA9IGMuc2xpY2UoKTsgZC5wdXNoLmFwcGx5KGQsIGFyZ3VtZW50cyk7IHJldHVybiBhLmFwcGx5KHRoaXMsIGQpOyB9OyB9XHJcbnZhciBxID0gRGF0ZS5ub3c7XHJcbmZ1bmN0aW9uIHIoYSwgYikgeyBmdW5jdGlvbiBjKCkgeyB9IGMucHJvdG90eXBlID0gYi5wcm90b3R5cGU7IGEuUyA9IGIucHJvdG90eXBlOyBhLnByb3RvdHlwZSA9IG5ldyBjOyBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7IH1cclxuZnVuY3Rpb24gdSgpIHsgdGhpcy5qID0gdGhpcy5qOyB0aGlzLmkgPSB0aGlzLmk7IH1cclxudmFyIGxhID0gMDtcclxudS5wcm90b3R5cGUuaiA9ICExO1xyXG51LnByb3RvdHlwZS5qYSA9IGZ1bmN0aW9uICgpIHsgaWYgKCF0aGlzLmogJiYgKHRoaXMuaiA9ICEwLCB0aGlzLkcoKSwgMCAhPSBsYSkpIHtcclxuICAgIHZhciBhID0gZGEodGhpcyk7XHJcbn0gfTtcclxudS5wcm90b3R5cGUuRyA9IGZ1bmN0aW9uICgpIHsgaWYgKHRoaXMuaSlcclxuICAgIGZvciAoOyB0aGlzLmkubGVuZ3RoOylcclxuICAgICAgICB0aGlzLmkuc2hpZnQoKSgpOyB9O1xyXG52YXIgbmEgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGEsIGIsIHZvaWQgMCk7IH0gOiBmdW5jdGlvbiAoYSwgYikgeyBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEpXHJcbiAgICByZXR1cm4gXCJzdHJpbmdcIiAhPT0gdHlwZW9mIGIgfHwgMSAhPSBiLmxlbmd0aCA/IC0xIDogYS5pbmRleE9mKGIsIDApOyBmb3IgKHZhciBjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspXHJcbiAgICBpZiAoYyBpbiBhICYmIGFbY10gPT09IGIpXHJcbiAgICAgICAgcmV0dXJuIGM7IHJldHVybiAtMTsgfSwgb2EgPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCA/IGZ1bmN0aW9uIChhLCBiLCBjKSB7IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYSwgYiwgYyk7IH0gOiBmdW5jdGlvbiAoYSwgYiwgYykgeyBmb3IgKHZhciBkID0gYS5sZW5ndGgsIGUgPSBcInN0cmluZ1wiID09PSB0eXBlb2YgYSA/IGEuc3BsaXQoXCJcIikgOiBhLCBmID0gMDsgZiA8IGQ7IGYrKylcclxuICAgIGYgaW4gZSAmJiBiLmNhbGwoYywgZVtmXSwgZiwgYSk7IH07XHJcbmZ1bmN0aW9uIHBhKGEpIHsgYToge1xyXG4gICAgdmFyIGIgPSBxYTtcclxuICAgIGZvciAodmFyIGMgPSBhLmxlbmd0aCwgZCA9IFwic3RyaW5nXCIgPT09IHR5cGVvZiBhID8gYS5zcGxpdChcIlwiKSA6IGEsIGUgPSAwOyBlIDwgYzsgZSsrKVxyXG4gICAgICAgIGlmIChlIGluIGQgJiYgYi5jYWxsKHZvaWQgMCwgZFtlXSwgZSwgYSkpIHtcclxuICAgICAgICAgICAgYiA9IGU7XHJcbiAgICAgICAgICAgIGJyZWFrIGE7XHJcbiAgICAgICAgfVxyXG4gICAgYiA9IC0xO1xyXG59IHJldHVybiAwID4gYiA/IG51bGwgOiBcInN0cmluZ1wiID09PSB0eXBlb2YgYSA/IGEuY2hhckF0KGIpIDogYVtiXTsgfVxyXG5mdW5jdGlvbiByYShhKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcmd1bWVudHMpOyB9XHJcbmZ1bmN0aW9uIHNhKGEpIHsgdmFyIGIgPSBhLmxlbmd0aDsgaWYgKDAgPCBiKSB7XHJcbiAgICBmb3IgKHZhciBjID0gQXJyYXkoYiksIGQgPSAwOyBkIDwgYjsgZCsrKVxyXG4gICAgICAgIGNbZF0gPSBhW2RdO1xyXG4gICAgcmV0dXJuIGM7XHJcbn0gcmV0dXJuIFtdOyB9XHJcbmZ1bmN0aW9uIHRhKGEpIHsgcmV0dXJuIC9eW1xcc1xceGEwXSokLy50ZXN0KGEpOyB9XHJcbnZhciB1YSA9IFN0cmluZy5wcm90b3R5cGUudHJpbSA/IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLnRyaW0oKTsgfSA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAvXltcXHNcXHhhMF0qKFtcXHNcXFNdKj8pW1xcc1xceGEwXSokLy5leGVjKGEpWzFdOyB9O1xyXG5mdW5jdGlvbiB2KGEsIGIpIHsgcmV0dXJuIC0xICE9IGEuaW5kZXhPZihiKTsgfVxyXG5mdW5jdGlvbiB4YShhLCBiKSB7IHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDsgfVxyXG52YXIgdztcclxuYToge1xyXG4gICAgdmFyIHlhID0gay5uYXZpZ2F0b3I7XHJcbiAgICBpZiAoeWEpIHtcclxuICAgICAgICB2YXIgemEgPSB5YS51c2VyQWdlbnQ7XHJcbiAgICAgICAgaWYgKHphKSB7XHJcbiAgICAgICAgICAgIHcgPSB6YTtcclxuICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB3ID0gXCJcIjtcclxufVxyXG5mdW5jdGlvbiBBYShhLCBiLCBjKSB7IGZvciAodmFyIGQgaW4gYSlcclxuICAgIGIuY2FsbChjLCBhW2RdLCBkLCBhKTsgfVxyXG5mdW5jdGlvbiBCYShhKSB7IHZhciBiID0ge307IGZvciAodmFyIGMgaW4gYSlcclxuICAgIGJbY10gPSBhW2NdOyByZXR1cm4gYjsgfVxyXG52YXIgQ2EgPSBcImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtcclxuZnVuY3Rpb24gRGEoYSwgYikgeyB2YXIgYywgZDsgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHtcclxuICAgIGQgPSBhcmd1bWVudHNbZV07XHJcbiAgICBmb3IgKGMgaW4gZClcclxuICAgICAgICBhW2NdID0gZFtjXTtcclxuICAgIGZvciAodmFyIGYgPSAwOyBmIDwgQ2EubGVuZ3RoOyBmKyspXHJcbiAgICAgICAgYyA9IENhW2ZdLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCwgYykgJiYgKGFbY10gPSBkW2NdKTtcclxufSB9XHJcbmZ1bmN0aW9uIEVhKGEpIHsgRWFbXCIgXCJdKGEpOyByZXR1cm4gYTsgfVxyXG5FYVtcIiBcIl0gPSBhYTtcclxuZnVuY3Rpb24gRmEoYSwgYikgeyB2YXIgYyA9IEdhOyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGMsIGEpID8gY1thXSA6IGNbYV0gPSBiKGEpOyB9XHJcbnZhciBIYSA9IHYodywgXCJPcGVyYVwiKSwgeCA9IHYodywgXCJUcmlkZW50XCIpIHx8IHYodywgXCJNU0lFXCIpLCBJYSA9IHYodywgXCJFZGdlXCIpLCBKYSA9IElhIHx8IHgsIEthID0gdih3LCBcIkdlY2tvXCIpICYmICEodih3LnRvTG93ZXJDYXNlKCksIFwid2Via2l0XCIpICYmICF2KHcsIFwiRWRnZVwiKSkgJiYgISh2KHcsIFwiVHJpZGVudFwiKSB8fCB2KHcsIFwiTVNJRVwiKSkgJiYgIXYodywgXCJFZGdlXCIpLCBMYSA9IHYody50b0xvd2VyQ2FzZSgpLCBcIndlYmtpdFwiKSAmJiAhdih3LCBcIkVkZ2VcIik7XHJcbmZ1bmN0aW9uIE1hKCkgeyB2YXIgYSA9IGsuZG9jdW1lbnQ7IHJldHVybiBhID8gYS5kb2N1bWVudE1vZGUgOiB2b2lkIDA7IH1cclxudmFyIE5hO1xyXG5hOiB7XHJcbiAgICB2YXIgT2EgPSBcIlwiLCBQYSA9IGZ1bmN0aW9uICgpIHsgdmFyIGEgPSB3OyBpZiAoS2EpXHJcbiAgICAgICAgcmV0dXJuIC9ydjooW15cXCk7XSspKFxcKXw7KS8uZXhlYyhhKTsgaWYgKElhKVxyXG4gICAgICAgIHJldHVybiAvRWRnZVxcLyhbXFxkXFwuXSspLy5leGVjKGEpOyBpZiAoeClcclxuICAgICAgICByZXR1cm4gL1xcYig/Ok1TSUV8cnYpWzogXShbXlxcKTtdKykoXFwpfDspLy5leGVjKGEpOyBpZiAoTGEpXHJcbiAgICAgICAgcmV0dXJuIC9XZWJLaXRcXC8oXFxTKykvLmV4ZWMoYSk7IGlmIChIYSlcclxuICAgICAgICByZXR1cm4gLyg/OlZlcnNpb24pWyBcXC9dPyhcXFMrKS8uZXhlYyhhKTsgfSgpO1xyXG4gICAgUGEgJiYgKE9hID0gUGEgPyBQYVsxXSA6IFwiXCIpO1xyXG4gICAgaWYgKHgpIHtcclxuICAgICAgICB2YXIgUWEgPSBNYSgpO1xyXG4gICAgICAgIGlmIChudWxsICE9IFFhICYmIFFhID4gcGFyc2VGbG9hdChPYSkpIHtcclxuICAgICAgICAgICAgTmEgPSBTdHJpbmcoUWEpO1xyXG4gICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE5hID0gT2E7XHJcbn1cclxudmFyIEdhID0ge307XHJcbmZ1bmN0aW9uIFJhKGEpIHsgcmV0dXJuIEZhKGEsIGZ1bmN0aW9uICgpIHsge1xyXG4gICAgdmFyIGIgPSAwO1xyXG4gICAgdmFyIGUgPSB1YShTdHJpbmcoTmEpKS5zcGxpdChcIi5cIiksIGYgPSB1YShTdHJpbmcoYSkpLnNwbGl0KFwiLlwiKSwgaCA9IE1hdGgubWF4KGUubGVuZ3RoLCBmLmxlbmd0aCk7XHJcbiAgICBmb3IgKHZhciBtID0gMDsgMCA9PSBiICYmIG0gPCBoOyBtKyspIHtcclxuICAgICAgICB2YXIgYyA9IGVbbV0gfHwgXCJcIiwgZCA9IGZbbV0gfHwgXCJcIjtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGMgPSAvKFxcZCopKFxcRCopKC4qKS8uZXhlYyhjKSB8fCBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl07XHJcbiAgICAgICAgICAgIGQgPSAvKFxcZCopKFxcRCopKC4qKS8uZXhlYyhkKSB8fCBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl07XHJcbiAgICAgICAgICAgIGlmICgwID09IGNbMF0ubGVuZ3RoICYmIDAgPT0gZFswXS5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgYiA9IHhhKDAgPT0gY1sxXS5sZW5ndGggPyAwIDogcGFyc2VJbnQoY1sxXSwgMTApLCAwID09IGRbMV0ubGVuZ3RoID8gMCA6IHBhcnNlSW50KGRbMV0sIDEwKSkgfHwgeGEoMCA9PSBjWzJdLmxlbmd0aCwgMCA9PSBkWzJdLmxlbmd0aCkgfHwgeGEoY1syXSwgZFsyXSk7XHJcbiAgICAgICAgICAgIGMgPSBjWzNdO1xyXG4gICAgICAgICAgICBkID0gZFszXTtcclxuICAgICAgICB9IHdoaWxlICgwID09IGIpO1xyXG4gICAgfVxyXG59IHJldHVybiAwIDw9IGI7IH0pOyB9XHJcbnZhciBTYTtcclxuaWYgKGsuZG9jdW1lbnQgJiYgeCkge1xyXG4gICAgdmFyIFRhID0gTWEoKTtcclxuICAgIFNhID0gVGEgPyBUYSA6IHBhcnNlSW50KE5hLCAxMCkgfHwgdm9pZCAwO1xyXG59XHJcbmVsc2VcclxuICAgIFNhID0gdm9pZCAwO1xyXG52YXIgVWEgPSBTYTtcclxudmFyIFZhID0gIXggfHwgOSA8PSBOdW1iZXIoVWEpLCBXYSA9IHggJiYgIVJhKFwiOVwiKSwgWGEgPSBmdW5jdGlvbiAoKSB7IGlmICghay5hZGRFdmVudExpc3RlbmVyIHx8ICFPYmplY3QuZGVmaW5lUHJvcGVydHkpXHJcbiAgICByZXR1cm4gITE7IHZhciBhID0gITEsIGIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIFwicGFzc2l2ZVwiLCB7IGdldDogZnVuY3Rpb24gKCkgeyBhID0gITA7IH0gfSk7IHRyeSB7XHJcbiAgICBrLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIGFhLCBiKSwgay5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLCBhYSwgYik7XHJcbn1cclxuY2F0Y2ggKGMpIHsgfSByZXR1cm4gYTsgfSgpO1xyXG5mdW5jdGlvbiB5KGEsIGIpIHsgdGhpcy50eXBlID0gYTsgdGhpcy5hID0gdGhpcy50YXJnZXQgPSBiOyB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMTsgfVxyXG55LnByb3RvdHlwZS5iID0gZnVuY3Rpb24gKCkgeyB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMDsgfTtcclxuZnVuY3Rpb24gQShhLCBiKSB7XHJcbiAgICB5LmNhbGwodGhpcywgYSA/IGEudHlwZSA6IFwiXCIpO1xyXG4gICAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gdGhpcy5hID0gdGhpcy50YXJnZXQgPSBudWxsO1xyXG4gICAgdGhpcy5idXR0b24gPSB0aGlzLnNjcmVlblkgPSB0aGlzLnNjcmVlblggPSB0aGlzLmNsaWVudFkgPSB0aGlzLmNsaWVudFggPSAwO1xyXG4gICAgdGhpcy5rZXkgPSBcIlwiO1xyXG4gICAgdGhpcy5tZXRhS2V5ID0gdGhpcy5zaGlmdEtleSA9IHRoaXMuYWx0S2V5ID0gdGhpcy5jdHJsS2V5ID0gITE7XHJcbiAgICB0aGlzLnBvaW50ZXJJZCA9IDA7XHJcbiAgICB0aGlzLnBvaW50ZXJUeXBlID0gXCJcIjtcclxuICAgIHRoaXMuYyA9IG51bGw7XHJcbiAgICBpZiAoYSkge1xyXG4gICAgICAgIHZhciBjID0gdGhpcy50eXBlID0gYS50eXBlLCBkID0gYS5jaGFuZ2VkVG91Y2hlcyAmJiBhLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IGEuY2hhbmdlZFRvdWNoZXNbMF0gOiBudWxsO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gYS50YXJnZXQgfHwgYS5zcmNFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuYSA9IGI7XHJcbiAgICAgICAgaWYgKGIgPSBhLnJlbGF0ZWRUYXJnZXQpIHtcclxuICAgICAgICAgICAgaWYgKEthKSB7XHJcbiAgICAgICAgICAgICAgICBhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRWEoYi5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChmKSB7IH1cclxuICAgICAgICAgICAgICAgICAgICBlID0gITE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlIHx8IChiID0gbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBcIm1vdXNlb3ZlclwiID09XHJcbiAgICAgICAgICAgICAgICBjID8gYiA9IGEuZnJvbUVsZW1lbnQgOiBcIm1vdXNlb3V0XCIgPT0gYyAmJiAoYiA9IGEudG9FbGVtZW50KTtcclxuICAgICAgICB0aGlzLnJlbGF0ZWRUYXJnZXQgPSBiO1xyXG4gICAgICAgIGQgPyAodGhpcy5jbGllbnRYID0gdm9pZCAwICE9PSBkLmNsaWVudFggPyBkLmNsaWVudFggOiBkLnBhZ2VYLCB0aGlzLmNsaWVudFkgPSB2b2lkIDAgIT09IGQuY2xpZW50WSA/IGQuY2xpZW50WSA6IGQucGFnZVksIHRoaXMuc2NyZWVuWCA9IGQuc2NyZWVuWCB8fCAwLCB0aGlzLnNjcmVlblkgPSBkLnNjcmVlblkgfHwgMCkgOiAodGhpcy5jbGllbnRYID0gdm9pZCAwICE9PSBhLmNsaWVudFggPyBhLmNsaWVudFggOiBhLnBhZ2VYLCB0aGlzLmNsaWVudFkgPSB2b2lkIDAgIT09IGEuY2xpZW50WSA/IGEuY2xpZW50WSA6IGEucGFnZVksIHRoaXMuc2NyZWVuWCA9IGEuc2NyZWVuWCB8fCAwLCB0aGlzLnNjcmVlblkgPSBhLnNjcmVlblkgfHwgMCk7XHJcbiAgICAgICAgdGhpcy5idXR0b24gPSBhLmJ1dHRvbjtcclxuICAgICAgICB0aGlzLmtleSA9IGEua2V5IHx8IFwiXCI7XHJcbiAgICAgICAgdGhpcy5jdHJsS2V5ID0gYS5jdHJsS2V5O1xyXG4gICAgICAgIHRoaXMuYWx0S2V5ID0gYS5hbHRLZXk7XHJcbiAgICAgICAgdGhpcy5zaGlmdEtleSA9IGEuc2hpZnRLZXk7XHJcbiAgICAgICAgdGhpcy5tZXRhS2V5ID1cclxuICAgICAgICAgICAgYS5tZXRhS2V5O1xyXG4gICAgICAgIHRoaXMucG9pbnRlcklkID0gYS5wb2ludGVySWQgfHwgMDtcclxuICAgICAgICB0aGlzLnBvaW50ZXJUeXBlID0gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEucG9pbnRlclR5cGUgPyBhLnBvaW50ZXJUeXBlIDogWWFbYS5wb2ludGVyVHlwZV0gfHwgXCJcIjtcclxuICAgICAgICB0aGlzLmMgPSBhO1xyXG4gICAgICAgIGEuZGVmYXVsdFByZXZlbnRlZCAmJiB0aGlzLmIoKTtcclxuICAgIH1cclxufVxyXG5yKEEsIHkpO1xyXG52YXIgWWEgPSB7IDI6IFwidG91Y2hcIiwgMzogXCJwZW5cIiwgNDogXCJtb3VzZVwiIH07XHJcbkEucHJvdG90eXBlLmIgPSBmdW5jdGlvbiAoKSB7IEEuUy5iLmNhbGwodGhpcyk7IHZhciBhID0gdGhpcy5jOyBpZiAoYS5wcmV2ZW50RGVmYXVsdClcclxuICAgIGEucHJldmVudERlZmF1bHQoKTtcclxuZWxzZSBpZiAoYS5yZXR1cm5WYWx1ZSA9ICExLCBXYSlcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKGEuY3RybEtleSB8fCAxMTIgPD0gYS5rZXlDb2RlICYmIDEyMyA+PSBhLmtleUNvZGUpXHJcbiAgICAgICAgICAgIGEua2V5Q29kZSA9IC0xO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGIpIHsgfSB9O1xyXG52YXIgQyA9IFwiY2xvc3VyZV9saXN0ZW5hYmxlX1wiICsgKDFFNiAqIE1hdGgucmFuZG9tKCkgfCAwKSwgWmEgPSAwO1xyXG5mdW5jdGlvbiAkYShhLCBiLCBjLCBkLCBlKSB7IHRoaXMubGlzdGVuZXIgPSBhOyB0aGlzLnByb3h5ID0gbnVsbDsgdGhpcy5zcmMgPSBiOyB0aGlzLnR5cGUgPSBjOyB0aGlzLmNhcHR1cmUgPSAhIWQ7IHRoaXMuY2EgPSBlOyB0aGlzLmtleSA9ICsrWmE7IHRoaXMuWSA9IHRoaXMuWiA9ICExOyB9XHJcbmZ1bmN0aW9uIGFiKGEpIHsgYS5ZID0gITA7IGEubGlzdGVuZXIgPSBudWxsOyBhLnByb3h5ID0gbnVsbDsgYS5zcmMgPSBudWxsOyBhLmNhID0gbnVsbDsgfVxyXG5mdW5jdGlvbiBiYihhKSB7IHRoaXMuc3JjID0gYTsgdGhpcy5hID0ge307IHRoaXMuYiA9IDA7IH1cclxuYmIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCBlKSB7IHZhciBmID0gYS50b1N0cmluZygpOyBhID0gdGhpcy5hW2ZdOyBhIHx8IChhID0gdGhpcy5hW2ZdID0gW10sIHRoaXMuYisrKTsgdmFyIGggPSBjYihhLCBiLCBkLCBlKTsgLTEgPCBoID8gKGIgPSBhW2hdLCBjIHx8IChiLlogPSAhMSkpIDogKGIgPSBuZXcgJGEoYiwgdGhpcy5zcmMsIGYsICEhZCwgZSksIGIuWiA9IGMsIGEucHVzaChiKSk7IHJldHVybiBiOyB9O1xyXG5mdW5jdGlvbiBkYihhLCBiKSB7IHZhciBjID0gYi50eXBlOyBpZiAoYyBpbiBhLmEpIHtcclxuICAgIHZhciBkID0gYS5hW2NdLCBlID0gbmEoZCwgYiksIGY7XHJcbiAgICAoZiA9IDAgPD0gZSkgJiYgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGQsIGUsIDEpO1xyXG4gICAgZiAmJiAoYWIoYiksIDAgPT0gYS5hW2NdLmxlbmd0aCAmJiAoZGVsZXRlIGEuYVtjXSwgYS5iLS0pKTtcclxufSB9XHJcbmZ1bmN0aW9uIGNiKGEsIGIsIGMsIGQpIHsgZm9yICh2YXIgZSA9IDA7IGUgPCBhLmxlbmd0aDsgKytlKSB7XHJcbiAgICB2YXIgZiA9IGFbZV07XHJcbiAgICBpZiAoIWYuWSAmJiBmLmxpc3RlbmVyID09IGIgJiYgZi5jYXB0dXJlID09ICEhYyAmJiBmLmNhID09IGQpXHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbn0gcmV0dXJuIC0xOyB9XHJcbnZhciBlYiA9IFwiY2xvc3VyZV9sbV9cIiArICgxRTYgKiBNYXRoLnJhbmRvbSgpIHwgMCksIGZiID0ge307XHJcbmZ1bmN0aW9uIGhiKGEsIGIsIGMsIGQsIGUpIHsgaWYgKGQgJiYgZC5vbmNlKVxyXG4gICAgcmV0dXJuIGliKGEsIGIsIGMsIGQsIGUpOyBpZiAoQXJyYXkuaXNBcnJheShiKSkge1xyXG4gICAgZm9yICh2YXIgZiA9IDA7IGYgPCBiLmxlbmd0aDsgZisrKVxyXG4gICAgICAgIGhiKGEsIGJbZl0sIGMsIGQsIGUpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbn0gYyA9IGpiKGMpOyByZXR1cm4gYSAmJiBhW0NdID8gYS52YShiLCBjLCBuKGQpID8gISFkLmNhcHR1cmUgOiAhIWQsIGUpIDoga2IoYSwgYiwgYywgITEsIGQsIGUpOyB9XHJcbmZ1bmN0aW9uIGtiKGEsIGIsIGMsIGQsIGUsIGYpIHtcclxuICAgIGlmICghYilcclxuICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgZXZlbnQgdHlwZVwiKTtcclxuICAgIHZhciBoID0gbihlKSA/ICEhZS5jYXB0dXJlIDogISFlO1xyXG4gICAgaWYgKGggJiYgIVZhKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgdmFyIG0gPSBsYihhKTtcclxuICAgIG0gfHwgKGFbZWJdID0gbSA9IG5ldyBiYihhKSk7XHJcbiAgICBjID0gbS5hZGQoYiwgYywgZCwgaCwgZik7XHJcbiAgICBpZiAoYy5wcm94eSlcclxuICAgICAgICByZXR1cm4gYztcclxuICAgIGQgPSBtYigpO1xyXG4gICAgYy5wcm94eSA9IGQ7XHJcbiAgICBkLnNyYyA9IGE7XHJcbiAgICBkLmxpc3RlbmVyID0gYztcclxuICAgIGlmIChhLmFkZEV2ZW50TGlzdGVuZXIpXHJcbiAgICAgICAgWGEgfHwgKGUgPSBoKSwgdm9pZCAwID09PSBlICYmIChlID0gITEpLCBhLmFkZEV2ZW50TGlzdGVuZXIoYi50b1N0cmluZygpLCBkLCBlKTtcclxuICAgIGVsc2UgaWYgKGEuYXR0YWNoRXZlbnQpXHJcbiAgICAgICAgYS5hdHRhY2hFdmVudChuYihiLnRvU3RyaW5nKCkpLCBkKTtcclxuICAgIGVsc2UgaWYgKGEuYWRkTGlzdGVuZXIgJiYgYS5yZW1vdmVMaXN0ZW5lcilcclxuICAgICAgICBhLmFkZExpc3RlbmVyKGQpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHRocm93IEVycm9yKFwiYWRkRXZlbnRMaXN0ZW5lciBhbmQgYXR0YWNoRXZlbnQgYXJlIHVuYXZhaWxhYmxlLlwiKTtcclxuICAgIHJldHVybiBjO1xyXG59XHJcbmZ1bmN0aW9uIG1iKCkgeyB2YXIgYSA9IG9iLCBiID0gVmEgPyBmdW5jdGlvbiAoYykgeyByZXR1cm4gYS5jYWxsKGIuc3JjLCBiLmxpc3RlbmVyLCBjKTsgfSA6IGZ1bmN0aW9uIChjKSB7IGMgPSBhLmNhbGwoYi5zcmMsIGIubGlzdGVuZXIsIGMpOyBpZiAoIWMpXHJcbiAgICByZXR1cm4gYzsgfTsgcmV0dXJuIGI7IH1cclxuZnVuY3Rpb24gaWIoYSwgYiwgYywgZCwgZSkgeyBpZiAoQXJyYXkuaXNBcnJheShiKSkge1xyXG4gICAgZm9yICh2YXIgZiA9IDA7IGYgPCBiLmxlbmd0aDsgZisrKVxyXG4gICAgICAgIGliKGEsIGJbZl0sIGMsIGQsIGUpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbn0gYyA9IGpiKGMpOyByZXR1cm4gYSAmJiBhW0NdID8gYS53YShiLCBjLCBuKGQpID8gISFkLmNhcHR1cmUgOiAhIWQsIGUpIDoga2IoYSwgYiwgYywgITAsIGQsIGUpOyB9XHJcbmZ1bmN0aW9uIHBiKGEsIGIsIGMsIGQsIGUpIHsgaWYgKEFycmF5LmlzQXJyYXkoYikpXHJcbiAgICBmb3IgKHZhciBmID0gMDsgZiA8IGIubGVuZ3RoOyBmKyspXHJcbiAgICAgICAgcGIoYSwgYltmXSwgYywgZCwgZSk7XHJcbmVsc2VcclxuICAgIChkID0gbihkKSA/ICEhZC5jYXB0dXJlIDogISFkLCBjID0gamIoYyksIGEgJiYgYVtDXSkgPyAoYSA9IGEuYywgYiA9IFN0cmluZyhiKS50b1N0cmluZygpLCBiIGluIGEuYSAmJiAoZiA9IGEuYVtiXSwgYyA9IGNiKGYsIGMsIGQsIGUpLCAtMSA8IGMgJiYgKGFiKGZbY10pLCBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoZiwgYywgMSksIDAgPT0gZi5sZW5ndGggJiYgKGRlbGV0ZSBhLmFbYl0sIGEuYi0tKSkpKSA6IGEgJiYgKGEgPSBsYihhKSkgJiYgKGIgPSBhLmFbYi50b1N0cmluZygpXSwgYSA9IC0xLCBiICYmIChhID0gY2IoYiwgYywgZCwgZSkpLCAoYyA9IC0xIDwgYSA/IGJbYV0gOiBudWxsKSAmJiByYihjKSk7IH1cclxuZnVuY3Rpb24gcmIoYSkgeyBpZiAoXCJudW1iZXJcIiAhPT0gdHlwZW9mIGEgJiYgYSAmJiAhYS5ZKSB7XHJcbiAgICB2YXIgYiA9IGEuc3JjO1xyXG4gICAgaWYgKGIgJiYgYltDXSlcclxuICAgICAgICBkYihiLmMsIGEpO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGMgPSBhLnR5cGUsIGQgPSBhLnByb3h5O1xyXG4gICAgICAgIGIucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IGIucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLCBkLCBhLmNhcHR1cmUpIDogYi5kZXRhY2hFdmVudCA/IGIuZGV0YWNoRXZlbnQobmIoYyksIGQpIDogYi5hZGRMaXN0ZW5lciAmJiBiLnJlbW92ZUxpc3RlbmVyICYmIGIucmVtb3ZlTGlzdGVuZXIoZCk7XHJcbiAgICAgICAgKGMgPSBsYihiKSkgPyAoZGIoYywgYSksIDAgPT0gYy5iICYmIChjLnNyYyA9IG51bGwsIGJbZWJdID0gbnVsbCkpIDogYWIoYSk7XHJcbiAgICB9XHJcbn0gfVxyXG5mdW5jdGlvbiBuYihhKSB7IHJldHVybiBhIGluIGZiID8gZmJbYV0gOiBmYlthXSA9IFwib25cIiArIGE7IH1cclxuZnVuY3Rpb24gc2IoYSwgYikgeyB2YXIgYyA9IGEubGlzdGVuZXIsIGQgPSBhLmNhIHx8IGEuc3JjOyBhLlogJiYgcmIoYSk7IHJldHVybiBjLmNhbGwoZCwgYik7IH1cclxuZnVuY3Rpb24gb2IoYSwgYikgeyBpZiAoYS5ZKVxyXG4gICAgcmV0dXJuICEwOyBpZiAoIVZhKSB7XHJcbiAgICBpZiAoIWIpXHJcbiAgICAgICAgYToge1xyXG4gICAgICAgICAgICBiID0gW1wid2luZG93XCIsIFwiZXZlbnRcIl07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSBrLCBkID0gMDsgZCA8IGIubGVuZ3RoOyBkKyspXHJcbiAgICAgICAgICAgICAgICBpZiAoYyA9IGNbYltkXV0sIG51bGwgPT0gYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGIgPSBjO1xyXG4gICAgICAgIH1cclxuICAgIGIgPSBuZXcgQShiLCB0aGlzKTtcclxuICAgIHJldHVybiBzYihhLCBiKTtcclxufSByZXR1cm4gc2IoYSwgbmV3IEEoYiwgdGhpcykpOyB9XHJcbmZ1bmN0aW9uIGxiKGEpIHsgYSA9IGFbZWJdOyByZXR1cm4gYSBpbnN0YW5jZW9mIGJiID8gYSA6IG51bGw7IH1cclxudmFyIHRiID0gXCJfX2Nsb3N1cmVfZXZlbnRzX2ZuX1wiICsgKDFFOSAqIE1hdGgucmFuZG9tKCkgPj4+IDApO1xyXG5mdW5jdGlvbiBqYihhKSB7IGlmIChcImZ1bmN0aW9uXCIgPT0gYmEoYSkpXHJcbiAgICByZXR1cm4gYTsgYVt0Yl0gfHwgKGFbdGJdID0gZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGEuaGFuZGxlRXZlbnQoYik7IH0pOyByZXR1cm4gYVt0Yl07IH1cclxuZnVuY3Rpb24gRCgpIHsgdS5jYWxsKHRoaXMpOyB0aGlzLmMgPSBuZXcgYmIodGhpcyk7IHRoaXMuSiA9IHRoaXM7IHRoaXMuQyA9IG51bGw7IH1cclxucihELCB1KTtcclxuRC5wcm90b3R5cGVbQ10gPSAhMDtcclxuZyA9IEQucHJvdG90eXBlO1xyXG5nLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyBoYih0aGlzLCBhLCBiLCBjLCBkKTsgfTtcclxuZy5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcGIodGhpcywgYSwgYiwgYywgZCk7IH07XHJcbmcuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChhKSB7IHZhciBiLCBjID0gdGhpcy5DOyBpZiAoYylcclxuICAgIGZvciAoYiA9IFtdOyBjOyBjID0gYy5DKVxyXG4gICAgICAgIGIucHVzaChjKTsgYyA9IHRoaXMuSjsgdmFyIGQgPSBhLnR5cGUgfHwgYTsgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBhKVxyXG4gICAgYSA9IG5ldyB5KGEsIGMpO1xyXG5lbHNlIGlmIChhIGluc3RhbmNlb2YgeSlcclxuICAgIGEudGFyZ2V0ID0gYS50YXJnZXQgfHwgYztcclxuZWxzZSB7XHJcbiAgICB2YXIgZSA9IGE7XHJcbiAgICBhID0gbmV3IHkoZCwgYyk7XHJcbiAgICBEYShhLCBlKTtcclxufSBlID0gITA7IGlmIChiKVxyXG4gICAgZm9yICh2YXIgZiA9IGIubGVuZ3RoIC0gMTsgMCA8PSBmOyBmLS0pIHtcclxuICAgICAgICB2YXIgaCA9IGEuYSA9IGJbZl07XHJcbiAgICAgICAgZSA9IHViKGgsIGQsICEwLCBhKSAmJiBlO1xyXG4gICAgfSBoID0gYS5hID0gYzsgZSA9IHViKGgsIGQsICEwLCBhKSAmJiBlOyBlID0gdWIoaCwgZCwgITEsIGEpICYmIGU7IGlmIChiKVxyXG4gICAgZm9yIChmID0gMDsgZiA8IGIubGVuZ3RoOyBmKyspXHJcbiAgICAgICAgaCA9IGEuYSA9IGJbZl0sIGUgPSB1YihoLCBkLCAhMSwgYSkgJiYgZTsgcmV0dXJuIGU7IH07XHJcbmcuRyA9IGZ1bmN0aW9uICgpIHsgRC5TLkcuY2FsbCh0aGlzKTsgaWYgKHRoaXMuYykge1xyXG4gICAgdmFyIGEgPSB0aGlzLmMsIGM7XHJcbiAgICBmb3IgKGMgaW4gYS5hKSB7XHJcbiAgICAgICAgZm9yICh2YXIgZCA9IGEuYVtjXSwgZSA9IDA7IGUgPCBkLmxlbmd0aDsgZSsrKVxyXG4gICAgICAgICAgICBhYihkW2VdKTtcclxuICAgICAgICBkZWxldGUgYS5hW2NdO1xyXG4gICAgICAgIGEuYi0tO1xyXG4gICAgfVxyXG59IHRoaXMuQyA9IG51bGw7IH07XHJcbmcudmEgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gdGhpcy5jLmFkZChTdHJpbmcoYSksIGIsICExLCBjLCBkKTsgfTtcclxuZy53YSA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiB0aGlzLmMuYWRkKFN0cmluZyhhKSwgYiwgITAsIGMsIGQpOyB9O1xyXG5mdW5jdGlvbiB1YihhLCBiLCBjLCBkKSB7IGIgPSBhLmMuYVtTdHJpbmcoYildOyBpZiAoIWIpXHJcbiAgICByZXR1cm4gITA7IGIgPSBiLmNvbmNhdCgpOyBmb3IgKHZhciBlID0gITAsIGYgPSAwOyBmIDwgYi5sZW5ndGg7ICsrZikge1xyXG4gICAgdmFyIGggPSBiW2ZdO1xyXG4gICAgaWYgKGggJiYgIWguWSAmJiBoLmNhcHR1cmUgPT0gYykge1xyXG4gICAgICAgIHZhciBtID0gaC5saXN0ZW5lciwgbCA9IGguY2EgfHwgaC5zcmM7XHJcbiAgICAgICAgaC5aICYmIGRiKGEuYywgaCk7XHJcbiAgICAgICAgZSA9ICExICE9PSBtLmNhbGwobCwgZCkgJiYgZTtcclxuICAgIH1cclxufSByZXR1cm4gZSAmJiAhZC5kZWZhdWx0UHJldmVudGVkOyB9XHJcbnZhciB2YiA9IGsuSlNPTi5zdHJpbmdpZnk7XHJcbmZ1bmN0aW9uIHdiKCkgeyB0aGlzLmIgPSB0aGlzLmEgPSBudWxsOyB9XHJcbnZhciB5YiA9IG5ldyAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBjbGFzc18xKGEsIGIsIGMpIHtcclxuICAgICAgICB0aGlzLmYgPSBjO1xyXG4gICAgICAgIHRoaXMuYyA9IGE7XHJcbiAgICAgICAgdGhpcy5nID0gYjtcclxuICAgICAgICB0aGlzLmIgPSAwO1xyXG4gICAgICAgIHRoaXMuYSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBjbGFzc18xLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7IHZhciBhOyAwIDwgdGhpcy5iID8gKHRoaXMuYi0tLCBhID0gdGhpcy5hLCB0aGlzLmEgPSBhLm5leHQsIGEubmV4dCA9IG51bGwpIDogYSA9IHRoaXMuYygpOyByZXR1cm4gYTsgfTtcclxuICAgIHJldHVybiBjbGFzc18xO1xyXG59KCkpKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyB4YjsgfSwgZnVuY3Rpb24gKGEpIHsgYS5yZXNldCgpOyB9LCAxMDApO1xyXG53Yi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGEsIGIpIHsgdmFyIGMgPSB5Yi5nZXQoKTsgYy5zZXQoYSwgYik7IHRoaXMuYiA/IHRoaXMuYi5uZXh0ID0gYyA6IHRoaXMuYSA9IGM7IHRoaXMuYiA9IGM7IH07XHJcbmZ1bmN0aW9uIHpiKCkgeyB2YXIgYSA9IEFiLCBiID0gbnVsbDsgYS5hICYmIChiID0gYS5hLCBhLmEgPSBhLmEubmV4dCwgYS5hIHx8IChhLmIgPSBudWxsKSwgYi5uZXh0ID0gbnVsbCk7IHJldHVybiBiOyB9XHJcbmZ1bmN0aW9uIHhiKCkgeyB0aGlzLm5leHQgPSB0aGlzLmIgPSB0aGlzLmEgPSBudWxsOyB9XHJcbnhiLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoYSwgYikgeyB0aGlzLmEgPSBhOyB0aGlzLmIgPSBiOyB0aGlzLm5leHQgPSBudWxsOyB9O1xyXG54Yi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7IHRoaXMubmV4dCA9IHRoaXMuYiA9IHRoaXMuYSA9IG51bGw7IH07XHJcbmZ1bmN0aW9uIEJiKGEpIHsgay5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgdGhyb3cgYTsgfSwgMCk7IH1cclxuZnVuY3Rpb24gQ2IoYSwgYikgeyBEYiB8fCBFYigpOyBGYiB8fCAoRGIoKSwgRmIgPSAhMCk7IEFiLmFkZChhLCBiKTsgfVxyXG52YXIgRGI7XHJcbmZ1bmN0aW9uIEViKCkgeyB2YXIgYSA9IGsuUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7IERiID0gZnVuY3Rpb24gKCkgeyBhLnRoZW4oR2IpOyB9OyB9XHJcbnZhciBGYiA9ICExLCBBYiA9IG5ldyB3YjtcclxuZnVuY3Rpb24gR2IoKSB7IGZvciAodmFyIGE7IGEgPSB6YigpOykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhLmEuY2FsbChhLmIpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGMpIHtcclxuICAgICAgICBCYihjKTtcclxuICAgIH1cclxuICAgIHZhciBiID0geWI7XHJcbiAgICBiLmcoYSk7XHJcbiAgICBiLmIgPCBiLmYgJiYgKGIuYisrLCBhLm5leHQgPSBiLmEsIGIuYSA9IGEpO1xyXG59IEZiID0gITE7IH1cclxuZnVuY3Rpb24gSGIoYSwgYikgeyBELmNhbGwodGhpcyk7IHRoaXMuYiA9IGEgfHwgMTsgdGhpcy5hID0gYiB8fCBrOyB0aGlzLmYgPSBwKHRoaXMuWWEsIHRoaXMpOyB0aGlzLmcgPSBxKCk7IH1cclxucihIYiwgRCk7XHJcbmcgPSBIYi5wcm90b3R5cGU7XHJcbmcuYWEgPSAhMTtcclxuZy5NID0gbnVsbDtcclxuZy5ZYSA9IGZ1bmN0aW9uICgpIHsgaWYgKHRoaXMuYWEpIHtcclxuICAgIHZhciBhID0gcSgpIC0gdGhpcy5nO1xyXG4gICAgMCA8IGEgJiYgYSA8IC44ICogdGhpcy5iID8gdGhpcy5NID0gdGhpcy5hLnNldFRpbWVvdXQodGhpcy5mLCB0aGlzLmIgLSBhKSA6ICh0aGlzLk0gJiYgKHRoaXMuYS5jbGVhclRpbWVvdXQodGhpcy5NKSwgdGhpcy5NID0gbnVsbCksIHRoaXMuZGlzcGF0Y2hFdmVudChcInRpY2tcIiksIHRoaXMuYWEgJiYgKEliKHRoaXMpLCB0aGlzLnN0YXJ0KCkpKTtcclxufSB9O1xyXG5nLnN0YXJ0ID0gZnVuY3Rpb24gKCkgeyB0aGlzLmFhID0gITA7IHRoaXMuTSB8fCAodGhpcy5NID0gdGhpcy5hLnNldFRpbWVvdXQodGhpcy5mLCB0aGlzLmIpLCB0aGlzLmcgPSBxKCkpOyB9O1xyXG5mdW5jdGlvbiBJYihhKSB7IGEuYWEgPSAhMTsgYS5NICYmIChhLmEuY2xlYXJUaW1lb3V0KGEuTSksIGEuTSA9IG51bGwpOyB9XHJcbmcuRyA9IGZ1bmN0aW9uICgpIHsgSGIuUy5HLmNhbGwodGhpcyk7IEliKHRoaXMpOyBkZWxldGUgdGhpcy5hOyB9O1xyXG5mdW5jdGlvbiBKYihhLCBiLCBjKSB7IGlmIChcImZ1bmN0aW9uXCIgPT0gYmEoYSkpXHJcbiAgICBjICYmIChhID0gcChhLCBjKSk7XHJcbmVsc2UgaWYgKGEgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBhLmhhbmRsZUV2ZW50KVxyXG4gICAgYSA9IHAoYS5oYW5kbGVFdmVudCwgYSk7XHJcbmVsc2VcclxuICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBsaXN0ZW5lciBhcmd1bWVudFwiKTsgcmV0dXJuIDIxNDc0ODM2NDcgPCBOdW1iZXIoYikgPyAtMSA6IGsuc2V0VGltZW91dChhLCBiIHx8IDApOyB9XHJcbmZ1bmN0aW9uIEtiKGEpIHsgYS5hID0gSmIoZnVuY3Rpb24gKCkgeyBhLmEgPSBudWxsOyBhLmMgJiYgKGEuYyA9ICExLCBLYihhKSk7IH0sIGEuaCk7IHZhciBiID0gYS5iOyBhLmIgPSBudWxsOyBhLmcuYXBwbHkobnVsbCwgYik7IH1cclxudmFyIExiID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKExiLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTGIoYSwgYiwgYykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZyA9IG51bGwgIT0gYyA/IGEuYmluZChjKSA6IGE7XHJcbiAgICAgICAgX3RoaXMuaCA9IGI7XHJcbiAgICAgICAgX3RoaXMuYiA9IG51bGw7XHJcbiAgICAgICAgX3RoaXMuYyA9ICExO1xyXG4gICAgICAgIF90aGlzLmEgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIExiLnByb3RvdHlwZS5mID0gZnVuY3Rpb24gKGEpIHsgdGhpcy5iID0gYXJndW1lbnRzOyB0aGlzLmEgPyB0aGlzLmMgPSAhMCA6IEtiKHRoaXMpOyB9O1xyXG4gICAgTGIucHJvdG90eXBlLkcgPSBmdW5jdGlvbiAoKSB7IF9zdXBlci5wcm90b3R5cGUuRy5jYWxsKHRoaXMpOyB0aGlzLmEgJiYgKGsuY2xlYXJUaW1lb3V0KHRoaXMuYSksIHRoaXMuYSA9IG51bGwsIHRoaXMuYyA9ICExLCB0aGlzLmIgPSBudWxsKTsgfTtcclxuICAgIHJldHVybiBMYjtcclxufSh1KSk7XHJcbmZ1bmN0aW9uIEUoYSkgeyB1LmNhbGwodGhpcyk7IHRoaXMuYiA9IGE7IHRoaXMuYSA9IHt9OyB9XHJcbnIoRSwgdSk7XHJcbnZhciBNYiA9IFtdO1xyXG5mdW5jdGlvbiBOYihhLCBiLCBjLCBkKSB7IEFycmF5LmlzQXJyYXkoYykgfHwgKGMgJiYgKE1iWzBdID0gYy50b1N0cmluZygpKSwgYyA9IE1iKTsgZm9yICh2YXIgZSA9IDA7IGUgPCBjLmxlbmd0aDsgZSsrKSB7XHJcbiAgICB2YXIgZiA9IGhiKGIsIGNbZV0sIGQgfHwgYS5oYW5kbGVFdmVudCwgITEsIGEuYiB8fCBhKTtcclxuICAgIGlmICghZilcclxuICAgICAgICBicmVhaztcclxuICAgIGEuYVtmLmtleV0gPSBmO1xyXG59IH1cclxuZnVuY3Rpb24gT2IoYSkgeyBBYShhLmEsIGZ1bmN0aW9uIChiLCBjKSB7IHRoaXMuYS5oYXNPd25Qcm9wZXJ0eShjKSAmJiByYihiKTsgfSwgYSk7IGEuYSA9IHt9OyB9XHJcbkUucHJvdG90eXBlLkcgPSBmdW5jdGlvbiAoKSB7IEUuUy5HLmNhbGwodGhpcyk7IE9iKHRoaXMpOyB9O1xyXG5FLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgRXJyb3IoXCJFdmVudEhhbmRsZXIuaGFuZGxlRXZlbnQgbm90IGltcGxlbWVudGVkXCIpOyB9O1xyXG5mdW5jdGlvbiBQYigpIHsgdGhpcy5hID0gITA7IH1cclxuZnVuY3Rpb24gUWIoYSwgYiwgYywgZCwgZSwgZikgeyBhLmluZm8oZnVuY3Rpb24gKCkgeyBpZiAoYS5hKVxyXG4gICAgaWYgKGYpIHtcclxuICAgICAgICB2YXIgaCA9IFwiXCI7XHJcbiAgICAgICAgZm9yICh2YXIgbSA9IGYuc3BsaXQoXCImXCIpLCBsID0gMDsgbCA8IG0ubGVuZ3RoOyBsKyspIHtcclxuICAgICAgICAgICAgdmFyIHQgPSBtW2xdLnNwbGl0KFwiPVwiKTtcclxuICAgICAgICAgICAgaWYgKDEgPCB0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIEIgPSB0WzBdO1xyXG4gICAgICAgICAgICAgICAgdCA9IHRbMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgeiA9IEIuc3BsaXQoXCJfXCIpO1xyXG4gICAgICAgICAgICAgICAgaCA9IDIgPD0gei5sZW5ndGggJiYgXCJ0eXBlXCIgPT0gelsxXSA/IGggKyAoQiArIFwiPVwiICsgdCArIFwiJlwiKSA6IGggKyAoQiArIFwiPXJlZGFjdGVkJlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICBoID0gbnVsbDtcclxuZWxzZVxyXG4gICAgaCA9IGY7IHJldHVybiBcIlhNTEhUVFAgUkVRIChcIiArIGQgKyBcIikgW2F0dGVtcHQgXCIgKyBlICsgXCJdOiBcIiArIGIgKyBcIlxcblwiICsgYyArIFwiXFxuXCIgKyBoOyB9KTsgfVxyXG5mdW5jdGlvbiBSYihhLCBiLCBjLCBkLCBlLCBmLCBoKSB7IGEuaW5mbyhmdW5jdGlvbiAoKSB7IHJldHVybiBcIlhNTEhUVFAgUkVTUCAoXCIgKyBkICsgXCIpIFsgYXR0ZW1wdCBcIiArIGUgKyBcIl06IFwiICsgYiArIFwiXFxuXCIgKyBjICsgXCJcXG5cIiArIGYgKyBcIiBcIiArIGg7IH0pOyB9XHJcbmZ1bmN0aW9uIEYoYSwgYiwgYywgZCkgeyBhLmluZm8oZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJYTUxIVFRQIFRFWFQgKFwiICsgYiArIFwiKTogXCIgKyBTYihhLCBjKSArIChkID8gXCIgXCIgKyBkIDogXCJcIik7IH0pOyB9XHJcbmZ1bmN0aW9uIFRiKGEsIGIpIHsgYS5pbmZvKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiVElNRU9VVDogXCIgKyBiOyB9KTsgfVxyXG5QYi5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uICgpIHsgfTtcclxuZnVuY3Rpb24gU2IoYSwgYikgeyBpZiAoIWEuYSlcclxuICAgIHJldHVybiBiOyBpZiAoIWIpXHJcbiAgICByZXR1cm4gbnVsbDsgdHJ5IHtcclxuICAgIHZhciBjID0gSlNPTi5wYXJzZShiKTtcclxuICAgIGlmIChjKVxyXG4gICAgICAgIGZvciAoYSA9IDA7IGEgPCBjLmxlbmd0aDsgYSsrKVxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjW2FdKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBjW2FdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoMiA+IGQubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gZFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSAmJiAhKDEgPiBlLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBlWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJub29wXCIgIT0gZiAmJiBcInN0b3BcIiAhPSBmICYmIFwiY2xvc2VcIiAhPSBmKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDE7IGggPCBlLmxlbmd0aDsgaCsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVbaF0gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgcmV0dXJuIHZiKGMpO1xyXG59XHJcbmNhdGNoIChtKSB7XHJcbiAgICByZXR1cm4gYjtcclxufSB9XHJcbnZhciBVYiA9IG51bGw7XHJcbmZ1bmN0aW9uIFZiKCkgeyByZXR1cm4gVWIgPSBVYiB8fCBuZXcgRDsgfVxyXG5mdW5jdGlvbiBXYihhKSB7IHkuY2FsbCh0aGlzLCBcInNlcnZlcnJlYWNoYWJpbGl0eVwiLCBhKTsgfVxyXG5yKFdiLCB5KTtcclxuZnVuY3Rpb24gRyhhKSB7IHZhciBiID0gVmIoKTsgYi5kaXNwYXRjaEV2ZW50KG5ldyBXYihiLCBhKSk7IH1cclxuZnVuY3Rpb24gWGIoYSkgeyB5LmNhbGwodGhpcywgXCJzdGF0ZXZlbnRcIiwgYSk7IH1cclxucihYYiwgeSk7XHJcbmZ1bmN0aW9uIEgoYSkgeyB2YXIgYiA9IFZiKCk7IGIuZGlzcGF0Y2hFdmVudChuZXcgWGIoYiwgYSkpOyB9XHJcbmZ1bmN0aW9uIFliKGEpIHsgeS5jYWxsKHRoaXMsIFwidGltaW5nZXZlbnRcIiwgYSk7IH1cclxucihZYiwgeSk7XHJcbmZ1bmN0aW9uIEkoYSwgYikgeyBpZiAoXCJmdW5jdGlvblwiICE9IGJhKGEpKVxyXG4gICAgdGhyb3cgRXJyb3IoXCJGbiBtdXN0IG5vdCBiZSBudWxsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb25cIik7IHJldHVybiBrLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBhKCk7IH0sIGIpOyB9XHJcbnZhciBaYiA9IHsgTk9fRVJST1I6IDAsIFphOiAxLCBnYjogMiwgZmI6IDMsIGJiOiA0LCBlYjogNSwgaGI6IDYsIERhOiA3LCBUSU1FT1VUOiA4LCBrYjogOSB9O1xyXG52YXIgJGIgPSB7IGFiOiBcImNvbXBsZXRlXCIsIG9iOiBcInN1Y2Nlc3NcIiwgRWE6IFwiZXJyb3JcIiwgRGE6IFwiYWJvcnRcIiwgbWI6IFwicmVhZHlcIiwgbmI6IFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBUSU1FT1VUOiBcInRpbWVvdXRcIiwgaWI6IFwiaW5jcmVtZW50YWxkYXRhXCIsIGxiOiBcInByb2dyZXNzXCIsIGNiOiBcImRvd25sb2FkcHJvZ3Jlc3NcIiwgcGI6IFwidXBsb2FkcHJvZ3Jlc3NcIiB9O1xyXG5mdW5jdGlvbiBhYygpIHsgfVxyXG5hYy5wcm90b3R5cGUuYSA9IG51bGw7XHJcbmZ1bmN0aW9uIGJjKGEpIHsgdmFyIGI7IChiID0gYS5hKSB8fCAoYiA9IGEuYSA9IHt9KTsgcmV0dXJuIGI7IH1cclxuZnVuY3Rpb24gY2MoKSB7IH1cclxudmFyIEogPSB7IE9QRU46IFwiYVwiLCAkYTogXCJiXCIsIEVhOiBcImNcIiwgamI6IFwiZFwiIH07XHJcbmZ1bmN0aW9uIGRjKCkgeyB5LmNhbGwodGhpcywgXCJkXCIpOyB9XHJcbnIoZGMsIHkpO1xyXG5mdW5jdGlvbiBlYygpIHsgeS5jYWxsKHRoaXMsIFwiY1wiKTsgfVxyXG5yKGVjLCB5KTtcclxudmFyIGZjO1xyXG5mdW5jdGlvbiBnYygpIHsgfVxyXG5yKGdjLCBhYyk7XHJcbmZjID0gbmV3IGdjO1xyXG5mdW5jdGlvbiBLKGEsIGIsIGMsIGQpIHsgdGhpcy5nID0gYTsgdGhpcy5jID0gYjsgdGhpcy5mID0gYzsgdGhpcy5UID0gZCB8fCAxOyB0aGlzLkogPSBuZXcgRSh0aGlzKTsgdGhpcy5QID0gaGM7IGEgPSBKYSA/IDEyNSA6IHZvaWQgMDsgdGhpcy5SID0gbmV3IEhiKGEpOyB0aGlzLkIgPSBudWxsOyB0aGlzLmIgPSAhMTsgdGhpcy5qID0gdGhpcy5sID0gdGhpcy5pID0gdGhpcy5IID0gdGhpcy51ID0gdGhpcy5VID0gdGhpcy5vID0gbnVsbDsgdGhpcy5zID0gW107IHRoaXMuYSA9IG51bGw7IHRoaXMuRCA9IDA7IHRoaXMuaCA9IHRoaXMubSA9IG51bGw7IHRoaXMuTiA9IC0xOyB0aGlzLkEgPSAhMTsgdGhpcy5PID0gMDsgdGhpcy5GID0gbnVsbDsgdGhpcy5XID0gdGhpcy5DID0gdGhpcy5WID0gdGhpcy5JID0gITE7IH1cclxudmFyIGhjID0gNDVFMywgaWMgPSB7fSwgamMgPSB7fTtcclxuZyA9IEsucHJvdG90eXBlO1xyXG5nLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoYSkgeyB0aGlzLlAgPSBhOyB9O1xyXG5mdW5jdGlvbiBrYyhhLCBiLCBjKSB7IGEuSCA9IDE7IGEuaSA9IGxjKEwoYikpOyBhLmogPSBjOyBhLkkgPSAhMDsgbWMoYSwgbnVsbCk7IH1cclxuZnVuY3Rpb24gbWMoYSwgYikgeyBhLnUgPSBxKCk7IE0oYSk7IGEubCA9IEwoYS5pKTsgdmFyIGMgPSBhLmwsIGQgPSBhLlQ7IEFycmF5LmlzQXJyYXkoZCkgfHwgKGQgPSBbU3RyaW5nKGQpXSk7IG5jKGMuYiwgXCJ0XCIsIGQpOyBhLkQgPSAwOyBhLmEgPSBvYyhhLmcsIGEuZy5DID8gYiA6IG51bGwpOyAwIDwgYS5PICYmIChhLkYgPSBuZXcgTGIocChhLkNhLCBhLCBhLmEpLCBhLk8pKTsgTmIoYS5KLCBhLmEsIFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBhLldhKTsgYiA9IGEuQiA/IEJhKGEuQikgOiB7fTsgYS5qID8gKGEubSB8fCAoYS5tID0gXCJQT1NUXCIpLCBiW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgYS5hLmJhKGEubCwgYS5tLCBhLmosIGIpKSA6IChhLm0gPSBcIkdFVFwiLCBhLmEuYmEoYS5sLCBhLm0sIG51bGwsIGIpKTsgRygxKTsgUWIoYS5jLCBhLm0sIGEubCwgYS5mLCBhLlQsIGEuaik7IH1cclxuZy5XYSA9IGZ1bmN0aW9uIChhKSB7IGEgPSBhLnRhcmdldDsgdmFyIGIgPSB0aGlzLkY7IGIgJiYgMyA9PSBOKGEpID8gYi5mKCkgOiB0aGlzLkNhKGEpOyB9O1xyXG5nLkNhID0gZnVuY3Rpb24gKGEpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKGEgPT0gdGhpcy5hKVxyXG4gICAgICAgICAgICBhOiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYiA9IE4odGhpcy5hKSwgYyA9IHRoaXMuYS51YSgpLCBkID0gdGhpcy5hLlgoKTtcclxuICAgICAgICAgICAgICAgIGlmICghKDMgPiBiIHx8IDMgPT0gYiAmJiAhSmEgJiYgIXRoaXMuYS4kKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BIHx8IDQgIT0gYiB8fCA3ID09IGMgfHwgKDggPT0gYyB8fCAwID49IGQgPyBHKDMpIDogRygyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGModGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmEuWCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuTiA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzLmEuJCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYiA9IDIwMCA9PSBlO1xyXG4gICAgICAgICAgICAgICAgICAgIFJiKHRoaXMuYywgdGhpcy5tLCB0aGlzLmwsIHRoaXMuZiwgdGhpcy5ULCBiLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLlYgJiYgIXRoaXMuQykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGgsIG0gPSB0aGlzLmE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaCA9IG0uYSA/IG0uYS5nZXRSZXNwb25zZUhlYWRlcihcIlgtSFRUUC1Jbml0aWFsLVJlc3BvbnNlXCIpIDogbnVsbCkgJiYgIXRhKGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRih0aGlzLmMsIHRoaXMuZiwgbCwgXCJJbml0aWFsIGhhbmRzaGFrZSByZXNwb25zZSB2aWEgWC1IVFRQLUluaXRpYWwtUmVzcG9uc2VcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuQyA9ICEwLCBxYyh0aGlzLCBsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYiA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSCgxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTyh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYyh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuSSA/ICh0Yyh0aGlzLCBiLCBmKSwgSmEgJiYgdGhpcy5iICYmIDMgPT0gYiAmJiAoTmIodGhpcy5KLCB0aGlzLlIsIFwidGlja1wiLCB0aGlzLlZhKSwgdGhpcy5SLnN0YXJ0KCkpKSA6IChGKHRoaXMuYywgdGhpcy5mLCBmLCBudWxsKSwgcWModGhpcywgZikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA0ID09IGIgJiYgTyh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iICYmICF0aGlzLkEgJiYgKDQgPT0gYiA/IHVjKHRoaXMuZywgdGhpcykgOiAodGhpcy5iID0gITEsIE0odGhpcykpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA0MDAgPT0gZSAmJiAwIDwgZi5pbmRleE9mKFwiVW5rbm93biBTSURcIikgPyAodGhpcy5oID0gMywgSCgxMikpIDogKHRoaXMuaCA9IDAsIEgoMTMpKSwgTyh0aGlzKSwgcmModGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICh0KSB7IH1cclxuICAgIGZpbmFsbHkgeyB9XHJcbn07XHJcbmZ1bmN0aW9uIHRjKGEsIGIsIGMpIHsgZm9yICh2YXIgZCA9ICEwOyAhYS5BICYmIGEuRCA8IGMubGVuZ3RoOykge1xyXG4gICAgdmFyIGUgPSB2YyhhLCBjKTtcclxuICAgIGlmIChlID09IGpjKSB7XHJcbiAgICAgICAgNCA9PSBiICYmIChhLmggPSA0LCBIKDE0KSwgZCA9ICExKTtcclxuICAgICAgICBGKGEuYywgYS5mLCBudWxsLCBcIltJbmNvbXBsZXRlIFJlc3BvbnNlXVwiKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGUgPT0gaWMpIHtcclxuICAgICAgICBhLmggPSA0O1xyXG4gICAgICAgIEgoMTUpO1xyXG4gICAgICAgIEYoYS5jLCBhLmYsIGMsIFwiW0ludmFsaWQgQ2h1bmtdXCIpO1xyXG4gICAgICAgIGQgPSAhMTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICBGKGEuYywgYS5mLCBlLCBudWxsKSwgcWMoYSwgZSk7XHJcbn0gNCA9PSBiICYmIDAgPT0gYy5sZW5ndGggJiYgKGEuaCA9IDEsIEgoMTYpLCBkID0gITEpOyBhLmIgPSBhLmIgJiYgZDsgZCA/IDAgPCBjLmxlbmd0aCAmJiAhYS5XICYmIChhLlcgPSAhMCwgYiA9IGEuZywgYi5hID09IGEgJiYgYi5WICYmICFiLkYgJiYgKGIuYy5pbmZvKFwiR3JlYXQsIG5vIGJ1ZmZlcmluZyBwcm94eSBkZXRlY3RlZC4gQnl0ZXMgcmVjZWl2ZWQ6IFwiICsgYy5sZW5ndGgpLCB4YyhiKSwgYi5GID0gITApKSA6IChGKGEuYywgYS5mLCBjLCBcIltJbnZhbGlkIENodW5rZWQgUmVzcG9uc2VdXCIpLCBPKGEpLCByYyhhKSk7IH1cclxuZy5WYSA9IGZ1bmN0aW9uICgpIHsgaWYgKHRoaXMuYSkge1xyXG4gICAgdmFyIGEgPSBOKHRoaXMuYSksIGIgPSB0aGlzLmEuJCgpO1xyXG4gICAgdGhpcy5EIDwgYi5sZW5ndGggJiYgKHBjKHRoaXMpLCB0Yyh0aGlzLCBhLCBiKSwgdGhpcy5iICYmIDQgIT0gYSAmJiBNKHRoaXMpKTtcclxufSB9O1xyXG5mdW5jdGlvbiB2YyhhLCBiKSB7IHZhciBjID0gYS5ELCBkID0gYi5pbmRleE9mKFwiXFxuXCIsIGMpOyBpZiAoLTEgPT0gZClcclxuICAgIHJldHVybiBqYzsgYyA9IE51bWJlcihiLnN1YnN0cmluZyhjLCBkKSk7IGlmIChpc05hTihjKSlcclxuICAgIHJldHVybiBpYzsgZCArPSAxOyBpZiAoZCArIGMgPiBiLmxlbmd0aClcclxuICAgIHJldHVybiBqYzsgYiA9IGIuc3Vic3RyKGQsIGMpOyBhLkQgPSBkICsgYzsgcmV0dXJuIGI7IH1cclxuZy5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7IHRoaXMuQSA9ICEwOyBPKHRoaXMpOyB9O1xyXG5mdW5jdGlvbiBNKGEpIHsgYS5VID0gcSgpICsgYS5QOyB5YyhhLCBhLlApOyB9XHJcbmZ1bmN0aW9uIHljKGEsIGIpIHsgaWYgKG51bGwgIT0gYS5vKVxyXG4gICAgdGhyb3cgRXJyb3IoXCJXYXRjaERvZyB0aW1lciBub3QgbnVsbFwiKTsgYS5vID0gSShwKGEuVWEsIGEpLCBiKTsgfVxyXG5mdW5jdGlvbiBwYyhhKSB7IGEubyAmJiAoay5jbGVhclRpbWVvdXQoYS5vKSwgYS5vID0gbnVsbCk7IH1cclxuZy5VYSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5vID0gbnVsbDsgdmFyIGEgPSBxKCk7IDAgPD0gYSAtIHRoaXMuVSA/IChUYih0aGlzLmMsIHRoaXMubCksIDIgIT0gdGhpcy5IICYmIChHKDMpLCBIKDE3KSksIE8odGhpcyksIHRoaXMuaCA9IDIsIHJjKHRoaXMpKSA6IHljKHRoaXMsIHRoaXMuVSAtIGEpOyB9O1xyXG5mdW5jdGlvbiByYyhhKSB7IDAgPT0gYS5nLnYgfHwgYS5BIHx8IHVjKGEuZywgYSk7IH1cclxuZnVuY3Rpb24gTyhhKSB7IHBjKGEpOyB2YXIgYiA9IGEuRjsgYiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGIuamEgJiYgYi5qYSgpOyBhLkYgPSBudWxsOyBJYihhLlIpOyBPYihhLkopOyBhLmEgJiYgKGIgPSBhLmEsIGEuYSA9IG51bGwsIGIuYWJvcnQoKSwgYi5qYSgpKTsgfVxyXG5mdW5jdGlvbiBxYyhhLCBiKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHZhciBjID0gYS5nO1xyXG4gICAgICAgIGlmICgwICE9IGMudiAmJiAoYy5hID09IGEgfHwgemMoYy5iLCBhKSkpXHJcbiAgICAgICAgICAgIGlmIChjLkkgPSBhLk4sICFhLkMgJiYgemMoYy5iLCBhKSAmJiAzID09IGMudikge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGMua2EuYS5wYXJzZShiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChzYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZCkgJiYgMyA9PSBkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBlWzBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWMuaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLmEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLmEudSArIDNFMyA8IGEudSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjKGMpLCBCYyhjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYyhjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIKDE4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5vYSA9IGVbMV0sIDAgPCBjLm9hIC0gYy5QICYmIDM3NTAwID4gZVsyXSAmJiBjLkggJiYgMCA9PSBjLm8gJiYgIWMubSAmJiAoYy5tID0gSShwKGMuUmEsIGMpLCA2RTMpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoMSA+PSBEYyhjLmIpICYmIGMuZWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuZWEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoc2MpIHsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmVhID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBQKGMsIDExKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgoYS5DIHx8IGMuYSA9PSBhKSAmJiBBYyhjKSwgIXRhKGIpKVxyXG4gICAgICAgICAgICAgICAgZm9yIChiID0gZCA9IGMua2EuYS5wYXJzZShiKSwgZCA9IDA7IGQgPCBiLmxlbmd0aDsgZCsrKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYltkXSwgYy5QID0gZVswXSwgZSA9IGVbMV0sIDIgPT0gYy52KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJjXCIgPT0gZVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5KID0gZVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuZ2EgPSBlWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBlWzNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBmICYmIChjLmhhID0gZiwgYy5jLmluZm8oXCJWRVI9XCIgKyBjLmhhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGVbNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9IGggJiYgKGMucGEgPSBoLCBjLmMuaW5mbyhcIlNWRVI9XCIgKyBjLnBhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IGVbNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBtICYmIFwibnVtYmVyXCIgPT09IHR5cGVvZiBtICYmIDAgPCBtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSAxLjUgKiBtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuRCA9IGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5jLmluZm8oXCJiYWNrQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXNfPVwiICsgbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gYS5hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgQiA9IHQuYSA/IHQuYS5nZXRSZXNwb25zZUhlYWRlcihcIlgtQ2xpZW50LVdpcmUtUHJvdG9jb2xcIikgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChCKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB6ID0gbC5iO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhei5hICYmICh2KEIsIFwic3BkeVwiKSB8fCB2KEIsIFwicXVpY1wiKSB8fCB2KEIsIFwiaDJcIikpICYmICh6LmYgPSB6LmcsIHouYSA9IG5ldyBTZXQsIHouYiAmJiAoRWMoeiwgei5iKSwgei5iID0gbnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobC5BKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxYiA9IHQuYSA/IHQuYS5nZXRSZXNwb25zZUhlYWRlcihcIlgtSFRUUC1TZXNzaW9uLUlkXCIpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFiICYmIChsLm5hID0gcWIsIFEobC5CLCBsLkEsIHFiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy52ID0gMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuZiAmJiBjLmYudGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuViAmJiAoYy5OID0gcSgpIC0gYS51LCBjLmMuaW5mbyhcIkhhbmRzaGFrZSBSVFQ6IFwiICsgYy5OICsgXCJtc1wiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLmxhID0gRmMobCwgbC5DID8gbC5nYSA6IG51bGwsIGwuZmEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhLkMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHYyhsLmIsIHZhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2EgPSB2YSwgd2MgPSBsLkQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2MgJiYgd2Euc2V0VGltZW91dCh3Yyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2EubyAmJiAocGMod2EpLCBNKHdhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5hID0gdmE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGMobCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwIDwgYy5nLmxlbmd0aCAmJiBJYyhjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0b3BcIiAhPSBlWzBdICYmIFwiY2xvc2VcIiAhPSBlWzBdIHx8IFAoYywgNyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAzID09IGMudiAmJiAoXCJzdG9wXCIgPT0gZVswXSB8fCBcImNsb3NlXCIgPT0gZVswXSA/IFwic3RvcFwiID09IGVbMF0gPyBQKGMsIDcpIDogSmMoYykgOiBcIm5vb3BcIiAhPSBlWzBdICYmIGMuZiAmJiBjLmYuc2EoZSksIGMubyA9IDApO1xyXG4gICAgICAgIEcoNCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoc2MpIHsgfVxyXG59XHJcbmZ1bmN0aW9uIEtjKGEpIHsgaWYgKGEuSyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuSylcclxuICAgIHJldHVybiBhLksoKTsgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBhKVxyXG4gICAgcmV0dXJuIGEuc3BsaXQoXCJcIik7IGlmIChjYShhKSkge1xyXG4gICAgZm9yICh2YXIgYiA9IFtdLCBjID0gYS5sZW5ndGgsIGQgPSAwOyBkIDwgYzsgZCsrKVxyXG4gICAgICAgIGIucHVzaChhW2RdKTtcclxuICAgIHJldHVybiBiO1xyXG59IGIgPSBbXTsgYyA9IDA7IGZvciAoZCBpbiBhKVxyXG4gICAgYltjKytdID0gYVtkXTsgcmV0dXJuIGEgPSBiOyB9XHJcbmZ1bmN0aW9uIExjKGEsIGIpIHsgaWYgKGEuZm9yRWFjaCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuZm9yRWFjaClcclxuICAgIGEuZm9yRWFjaChiLCB2b2lkIDApO1xyXG5lbHNlIGlmIChjYShhKSB8fCBcInN0cmluZ1wiID09PSB0eXBlb2YgYSlcclxuICAgIG9hKGEsIGIsIHZvaWQgMCk7XHJcbmVsc2Uge1xyXG4gICAgaWYgKGEuTCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuTClcclxuICAgICAgICB2YXIgYyA9IGEuTCgpO1xyXG4gICAgZWxzZSBpZiAoYS5LICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYS5LKVxyXG4gICAgICAgIGMgPSB2b2lkIDA7XHJcbiAgICBlbHNlIGlmIChjYShhKSB8fCBcInN0cmluZ1wiID09PSB0eXBlb2YgYSkge1xyXG4gICAgICAgIGMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBkID0gYS5sZW5ndGgsIGUgPSAwOyBlIDwgZDsgZSsrKVxyXG4gICAgICAgICAgICBjLnB1c2goZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgZm9yIChlIGluIGMgPSBbXSwgZCA9IDAsIGEpXHJcbiAgICAgICAgICAgIGNbZCsrXSA9IGU7XHJcbiAgICBkID0gS2MoYSk7XHJcbiAgICBlID0gZC5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciBmID0gMDsgZiA8IGU7IGYrKylcclxuICAgICAgICBiLmNhbGwodm9pZCAwLCBkW2ZdLCBjICYmIGNbZl0sIGEpO1xyXG59IH1cclxuZnVuY3Rpb24gUihhLCBiKSB7IHRoaXMuYiA9IHt9OyB0aGlzLmEgPSBbXTsgdGhpcy5jID0gMDsgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoOyBpZiAoMSA8IGMpIHtcclxuICAgIGlmIChjICUgMilcclxuICAgICAgICB0aHJvdyBFcnJvcihcIlVuZXZlbiBudW1iZXIgb2YgYXJndW1lbnRzXCIpO1xyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBjOyBkICs9IDIpXHJcbiAgICAgICAgdGhpcy5zZXQoYXJndW1lbnRzW2RdLCBhcmd1bWVudHNbZCArIDFdKTtcclxufVxyXG5lbHNlIGlmIChhKVxyXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBSKVxyXG4gICAgICAgIGZvciAoYyA9IGEuTCgpLCBkID0gMDsgZCA8IGMubGVuZ3RoOyBkKyspXHJcbiAgICAgICAgICAgIHRoaXMuc2V0KGNbZF0sIGEuZ2V0KGNbZF0pKTtcclxuICAgIGVsc2VcclxuICAgICAgICBmb3IgKGQgaW4gYSlcclxuICAgICAgICAgICAgdGhpcy5zZXQoZCwgYVtkXSk7IH1cclxuZyA9IFIucHJvdG90eXBlO1xyXG5nLksgPSBmdW5jdGlvbiAoKSB7IE1jKHRoaXMpOyBmb3IgKHZhciBhID0gW10sIGIgPSAwOyBiIDwgdGhpcy5hLmxlbmd0aDsgYisrKVxyXG4gICAgYS5wdXNoKHRoaXMuYlt0aGlzLmFbYl1dKTsgcmV0dXJuIGE7IH07XHJcbmcuTCA9IGZ1bmN0aW9uICgpIHsgTWModGhpcyk7IHJldHVybiB0aGlzLmEuY29uY2F0KCk7IH07XHJcbmZ1bmN0aW9uIE1jKGEpIHsgaWYgKGEuYyAhPSBhLmEubGVuZ3RoKSB7XHJcbiAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGIgPCBhLmEubGVuZ3RoOykge1xyXG4gICAgICAgIHZhciBkID0gYS5hW2JdO1xyXG4gICAgICAgIFMoYS5iLCBkKSAmJiAoYS5hW2MrK10gPSBkKTtcclxuICAgICAgICBiKys7XHJcbiAgICB9XHJcbiAgICBhLmEubGVuZ3RoID0gYztcclxufSBpZiAoYS5jICE9IGEuYS5sZW5ndGgpIHtcclxuICAgIHZhciBlID0ge307XHJcbiAgICBmb3IgKGMgPSBiID0gMDsgYiA8IGEuYS5sZW5ndGg7KVxyXG4gICAgICAgIGQgPSBhLmFbYl0sIFMoZSwgZCkgfHwgKGEuYVtjKytdID0gZCwgZVtkXSA9IDEpLCBiKys7XHJcbiAgICBhLmEubGVuZ3RoID0gYztcclxufSB9XHJcbmcuZ2V0ID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIFModGhpcy5iLCBhKSA/IHRoaXMuYlthXSA6IGI7IH07XHJcbmcuc2V0ID0gZnVuY3Rpb24gKGEsIGIpIHsgUyh0aGlzLmIsIGEpIHx8ICh0aGlzLmMrKywgdGhpcy5hLnB1c2goYSkpOyB0aGlzLmJbYV0gPSBiOyB9O1xyXG5nLmZvckVhY2ggPSBmdW5jdGlvbiAoYSwgYikgeyBmb3IgKHZhciBjID0gdGhpcy5MKCksIGQgPSAwOyBkIDwgYy5sZW5ndGg7IGQrKykge1xyXG4gICAgdmFyIGUgPSBjW2RdLCBmID0gdGhpcy5nZXQoZSk7XHJcbiAgICBhLmNhbGwoYiwgZiwgZSwgdGhpcyk7XHJcbn0gfTtcclxuZnVuY3Rpb24gUyhhLCBiKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7IH1cclxudmFyIE5jID0gL14oPzooW146Lz8jLl0rKTopPyg/OlxcL1xcLyg/OihbXlxcXFwvPyNdKilAKT8oW15cXFxcLz8jXSo/KSg/OjooWzAtOV0rKSk/KD89W1xcXFwvPyNdfCQpKT8oW14/I10rKT8oPzpcXD8oW14jXSopKT8oPzojKFtcXHNcXFNdKikpPyQvO1xyXG5mdW5jdGlvbiBPYyhhLCBiKSB7IGlmIChhKSB7XHJcbiAgICBhID0gYS5zcGxpdChcIiZcIik7XHJcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspIHtcclxuICAgICAgICB2YXIgZCA9IGFbY10uaW5kZXhPZihcIj1cIiksIGUgPSBudWxsO1xyXG4gICAgICAgIGlmICgwIDw9IGQpIHtcclxuICAgICAgICAgICAgdmFyIGYgPSBhW2NdLnN1YnN0cmluZygwLCBkKTtcclxuICAgICAgICAgICAgZSA9IGFbY10uc3Vic3RyaW5nKGQgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBmID0gYVtjXTtcclxuICAgICAgICBiKGYsIGUgPyBkZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKSA6IFwiXCIpO1xyXG4gICAgfVxyXG59IH1cclxuZnVuY3Rpb24gVChhLCBiKSB7IHRoaXMuYyA9IHRoaXMuaiA9IHRoaXMuZiA9IFwiXCI7IHRoaXMuaCA9IG51bGw7IHRoaXMuaSA9IHRoaXMuZyA9IFwiXCI7IHRoaXMuYSA9ICExOyBpZiAoYSBpbnN0YW5jZW9mIFQpIHtcclxuICAgIHRoaXMuYSA9IHZvaWQgMCAhPT0gYiA/IGIgOiBhLmE7XHJcbiAgICBQYyh0aGlzLCBhLmYpO1xyXG4gICAgdGhpcy5qID0gYS5qO1xyXG4gICAgUWModGhpcywgYS5jKTtcclxuICAgIFJjKHRoaXMsIGEuaCk7XHJcbiAgICB0aGlzLmcgPSBhLmc7XHJcbiAgICBiID0gYS5iO1xyXG4gICAgdmFyIGMgPSBuZXcgVTtcclxuICAgIGMuYyA9IGIuYztcclxuICAgIGIuYSAmJiAoYy5hID0gbmV3IFIoYi5hKSwgYy5iID0gYi5iKTtcclxuICAgIFNjKHRoaXMsIGMpO1xyXG4gICAgdGhpcy5pID0gYS5pO1xyXG59XHJcbmVsc2VcclxuICAgIGEgJiYgKGMgPSBTdHJpbmcoYSkubWF0Y2goTmMpKSA/ICh0aGlzLmEgPSAhIWIsIFBjKHRoaXMsIGNbMV0gfHwgXCJcIiwgITApLCB0aGlzLmogPSBUYyhjWzJdIHx8IFwiXCIpLCBRYyh0aGlzLCBjWzNdIHx8IFwiXCIsICEwKSwgUmModGhpcywgY1s0XSksIHRoaXMuZyA9IFRjKGNbNV0gfHwgXCJcIiwgITApLCBTYyh0aGlzLCBjWzZdIHx8IFwiXCIsICEwKSwgdGhpcy5pID0gVGMoY1s3XSB8fCBcIlwiKSkgOiAodGhpcy5hID0gISFiLCB0aGlzLmIgPSBuZXcgVShudWxsLCB0aGlzLmEpKTsgfVxyXG5ULnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgdmFyIGEgPSBbXSwgYiA9IHRoaXMuZjsgYiAmJiBhLnB1c2goVWMoYiwgVmMsICEwKSwgXCI6XCIpOyB2YXIgYyA9IHRoaXMuYzsgaWYgKGMgfHwgXCJmaWxlXCIgPT0gYilcclxuICAgIGEucHVzaChcIi8vXCIpLCAoYiA9IHRoaXMuaikgJiYgYS5wdXNoKFVjKGIsIFZjLCAhMCksIFwiQFwiKSwgYS5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYykpLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZywgXCIlJDFcIikpLCBjID0gdGhpcy5oLCBudWxsICE9IGMgJiYgYS5wdXNoKFwiOlwiLCBTdHJpbmcoYykpOyBpZiAoYyA9IHRoaXMuZylcclxuICAgIHRoaXMuYyAmJiBcIi9cIiAhPSBjLmNoYXJBdCgwKSAmJiBhLnB1c2goXCIvXCIpLCBhLnB1c2goVWMoYywgXCIvXCIgPT0gYy5jaGFyQXQoMCkgPyBXYyA6IFhjLCAhMCkpOyAoYyA9IHRoaXMuYi50b1N0cmluZygpKSAmJiBhLnB1c2goXCI/XCIsIGMpOyAoYyA9IHRoaXMuaSkgJiYgYS5wdXNoKFwiI1wiLCBVYyhjLCBZYykpOyByZXR1cm4gYS5qb2luKFwiXCIpOyB9O1xyXG5mdW5jdGlvbiBMKGEpIHsgcmV0dXJuIG5ldyBUKGEpOyB9XHJcbmZ1bmN0aW9uIFBjKGEsIGIsIGMpIHsgYS5mID0gYyA/IFRjKGIsICEwKSA6IGI7IGEuZiAmJiAoYS5mID0gYS5mLnJlcGxhY2UoLzokLywgXCJcIikpOyB9XHJcbmZ1bmN0aW9uIFFjKGEsIGIsIGMpIHsgYS5jID0gYyA/IFRjKGIsICEwKSA6IGI7IH1cclxuZnVuY3Rpb24gUmMoYSwgYikgeyBpZiAoYikge1xyXG4gICAgYiA9IE51bWJlcihiKTtcclxuICAgIGlmIChpc05hTihiKSB8fCAwID4gYilcclxuICAgICAgICB0aHJvdyBFcnJvcihcIkJhZCBwb3J0IG51bWJlciBcIiArIGIpO1xyXG4gICAgYS5oID0gYjtcclxufVxyXG5lbHNlXHJcbiAgICBhLmggPSBudWxsOyB9XHJcbmZ1bmN0aW9uIFNjKGEsIGIsIGMpIHsgYiBpbnN0YW5jZW9mIFUgPyAoYS5iID0gYiwgWmMoYS5iLCBhLmEpKSA6IChjIHx8IChiID0gVWMoYiwgJGMpKSwgYS5iID0gbmV3IFUoYiwgYS5hKSk7IH1cclxuZnVuY3Rpb24gUShhLCBiLCBjKSB7IGEuYi5zZXQoYiwgYyk7IH1cclxuZnVuY3Rpb24gbGMoYSkgeyBRKGEsIFwienhcIiwgTWF0aC5mbG9vcigyMTQ3NDgzNjQ4ICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMzYpICsgTWF0aC5hYnMoTWF0aC5mbG9vcigyMTQ3NDgzNjQ4ICogTWF0aC5yYW5kb20oKSkgXiBxKCkpLnRvU3RyaW5nKDM2KSk7IHJldHVybiBhOyB9XHJcbmZ1bmN0aW9uIGFkKGEpIHsgcmV0dXJuIGEgaW5zdGFuY2VvZiBUID8gTChhKSA6IG5ldyBUKGEsIHZvaWQgMCk7IH1cclxuZnVuY3Rpb24gYmQoYSwgYiwgYywgZCkgeyB2YXIgZSA9IG5ldyBUKG51bGwsIHZvaWQgMCk7IGEgJiYgUGMoZSwgYSk7IGIgJiYgUWMoZSwgYik7IGMgJiYgUmMoZSwgYyk7IGQgJiYgKGUuZyA9IGQpOyByZXR1cm4gZTsgfVxyXG5mdW5jdGlvbiBUYyhhLCBiKSB7IHJldHVybiBhID8gYiA/IGRlY29kZVVSSShhLnJlcGxhY2UoLyUyNS9nLCBcIiUyNTI1XCIpKSA6IGRlY29kZVVSSUNvbXBvbmVudChhKSA6IFwiXCI7IH1cclxuZnVuY3Rpb24gVWMoYSwgYiwgYykgeyByZXR1cm4gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEgPyAoYSA9IGVuY29kZVVSSShhKS5yZXBsYWNlKGIsIGNkKSwgYyAmJiAoYSA9IGEucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLCBcIiUkMVwiKSksIGEpIDogbnVsbDsgfVxyXG5mdW5jdGlvbiBjZChhKSB7IGEgPSBhLmNoYXJDb2RlQXQoMCk7IHJldHVybiBcIiVcIiArIChhID4+IDQgJiAxNSkudG9TdHJpbmcoMTYpICsgKGEgJiAxNSkudG9TdHJpbmcoMTYpOyB9XHJcbnZhciBWYyA9IC9bI1xcL1xcP0BdL2csIFhjID0gL1sjXFw/Ol0vZywgV2MgPSAvWyNcXD9dL2csICRjID0gL1sjXFw/QF0vZywgWWMgPSAvIy9nO1xyXG5mdW5jdGlvbiBVKGEsIGIpIHsgdGhpcy5iID0gdGhpcy5hID0gbnVsbDsgdGhpcy5jID0gYSB8fCBudWxsOyB0aGlzLmYgPSAhIWI7IH1cclxuZnVuY3Rpb24gVihhKSB7IGEuYSB8fCAoYS5hID0gbmV3IFIsIGEuYiA9IDAsIGEuYyAmJiBPYyhhLmMsIGZ1bmN0aW9uIChiLCBjKSB7IGEuYWRkKGRlY29kZVVSSUNvbXBvbmVudChiLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpLCBjKTsgfSkpOyB9XHJcbmcgPSBVLnByb3RvdHlwZTtcclxuZy5hZGQgPSBmdW5jdGlvbiAoYSwgYikgeyBWKHRoaXMpOyB0aGlzLmMgPSBudWxsOyBhID0gVyh0aGlzLCBhKTsgdmFyIGMgPSB0aGlzLmEuZ2V0KGEpOyBjIHx8IHRoaXMuYS5zZXQoYSwgYyA9IFtdKTsgYy5wdXNoKGIpOyB0aGlzLmIgKz0gMTsgcmV0dXJuIHRoaXM7IH07XHJcbmZ1bmN0aW9uIGRkKGEsIGIpIHsgVihhKTsgYiA9IFcoYSwgYik7IFMoYS5hLmIsIGIpICYmIChhLmMgPSBudWxsLCBhLmIgLT0gYS5hLmdldChiKS5sZW5ndGgsIGEgPSBhLmEsIFMoYS5iLCBiKSAmJiAoZGVsZXRlIGEuYltiXSwgYS5jLS0sIGEuYS5sZW5ndGggPiAyICogYS5jICYmIE1jKGEpKSk7IH1cclxuZnVuY3Rpb24gZWQoYSwgYikgeyBWKGEpOyBiID0gVyhhLCBiKTsgcmV0dXJuIFMoYS5hLmIsIGIpOyB9XHJcbmcuZm9yRWFjaCA9IGZ1bmN0aW9uIChhLCBiKSB7IFYodGhpcyk7IHRoaXMuYS5mb3JFYWNoKGZ1bmN0aW9uIChjLCBkKSB7IG9hKGMsIGZ1bmN0aW9uIChlKSB7IGEuY2FsbChiLCBlLCBkLCB0aGlzKTsgfSwgdGhpcyk7IH0sIHRoaXMpOyB9O1xyXG5nLkwgPSBmdW5jdGlvbiAoKSB7IFYodGhpcyk7IGZvciAodmFyIGEgPSB0aGlzLmEuSygpLCBiID0gdGhpcy5hLkwoKSwgYyA9IFtdLCBkID0gMDsgZCA8IGIubGVuZ3RoOyBkKyspXHJcbiAgICBmb3IgKHZhciBlID0gYVtkXSwgZiA9IDA7IGYgPCBlLmxlbmd0aDsgZisrKVxyXG4gICAgICAgIGMucHVzaChiW2RdKTsgcmV0dXJuIGM7IH07XHJcbmcuSyA9IGZ1bmN0aW9uIChhKSB7IFYodGhpcyk7IHZhciBiID0gW107IGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYSlcclxuICAgIGVkKHRoaXMsIGEpICYmIChiID0gcmEoYiwgdGhpcy5hLmdldChXKHRoaXMsIGEpKSkpO1xyXG5lbHNlIHtcclxuICAgIGEgPSB0aGlzLmEuSygpO1xyXG4gICAgZm9yICh2YXIgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKVxyXG4gICAgICAgIGIgPSByYShiLCBhW2NdKTtcclxufSByZXR1cm4gYjsgfTtcclxuZy5zZXQgPSBmdW5jdGlvbiAoYSwgYikgeyBWKHRoaXMpOyB0aGlzLmMgPSBudWxsOyBhID0gVyh0aGlzLCBhKTsgZWQodGhpcywgYSkgJiYgKHRoaXMuYiAtPSB0aGlzLmEuZ2V0KGEpLmxlbmd0aCk7IHRoaXMuYS5zZXQoYSwgW2JdKTsgdGhpcy5iICs9IDE7IHJldHVybiB0aGlzOyB9O1xyXG5nLmdldCA9IGZ1bmN0aW9uIChhLCBiKSB7IGlmICghYSlcclxuICAgIHJldHVybiBiOyBhID0gdGhpcy5LKGEpOyByZXR1cm4gMCA8IGEubGVuZ3RoID8gU3RyaW5nKGFbMF0pIDogYjsgfTtcclxuZnVuY3Rpb24gbmMoYSwgYiwgYykgeyBkZChhLCBiKTsgMCA8IGMubGVuZ3RoICYmIChhLmMgPSBudWxsLCBhLmEuc2V0KFcoYSwgYiksIHNhKGMpKSwgYS5iICs9IGMubGVuZ3RoKTsgfVxyXG5nLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyBpZiAodGhpcy5jKVxyXG4gICAgcmV0dXJuIHRoaXMuYzsgaWYgKCF0aGlzLmEpXHJcbiAgICByZXR1cm4gXCJcIjsgZm9yICh2YXIgYSA9IFtdLCBiID0gdGhpcy5hLkwoKSwgYyA9IDA7IGMgPCBiLmxlbmd0aDsgYysrKSB7XHJcbiAgICB2YXIgZCA9IGJbY10sIGUgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGQpKTtcclxuICAgIGQgPSB0aGlzLksoZCk7XHJcbiAgICBmb3IgKHZhciBmID0gMDsgZiA8IGQubGVuZ3RoOyBmKyspIHtcclxuICAgICAgICB2YXIgaCA9IGU7XHJcbiAgICAgICAgXCJcIiAhPT0gZFtmXSAmJiAoaCArPSBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZFtmXSkpKTtcclxuICAgICAgICBhLnB1c2goaCk7XHJcbiAgICB9XHJcbn0gcmV0dXJuIHRoaXMuYyA9IGEuam9pbihcIiZcIik7IH07XHJcbmZ1bmN0aW9uIFcoYSwgYikgeyBiID0gU3RyaW5nKGIpOyBhLmYgJiYgKGIgPSBiLnRvTG93ZXJDYXNlKCkpOyByZXR1cm4gYjsgfVxyXG5mdW5jdGlvbiBaYyhhLCBiKSB7IGIgJiYgIWEuZiAmJiAoVihhKSwgYS5jID0gbnVsbCwgYS5hLmZvckVhY2goZnVuY3Rpb24gKGMsIGQpIHsgdmFyIGUgPSBkLnRvTG93ZXJDYXNlKCk7IGQgIT0gZSAmJiAoZGQodGhpcywgZCksIG5jKHRoaXMsIGUsIGMpKTsgfSwgYSkpOyBhLmYgPSBiOyB9XHJcbmZ1bmN0aW9uIGZkKGEsIGIpIHsgdGhpcy5iID0gYTsgdGhpcy5hID0gYjsgfVxyXG5mdW5jdGlvbiBnZChhKSB7IHRoaXMuZyA9IGEgfHwgaGQ7IGsuUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nID8gKGEgPSBrLnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoXCJuYXZpZ2F0aW9uXCIpLCBhID0gMCA8IGEubGVuZ3RoICYmIChcImhxXCIgPT0gYVswXS5uZXh0SG9wUHJvdG9jb2wgfHwgXCJoMlwiID09IGFbMF0ubmV4dEhvcFByb3RvY29sKSkgOiBhID0gISEoay5pYSAmJiBrLmlhLnlhICYmIGsuaWEueWEoKSAmJiBrLmlhLnlhKCkucWIpOyB0aGlzLmYgPSBhID8gdGhpcy5nIDogMTsgdGhpcy5hID0gbnVsbDsgMSA8IHRoaXMuZiAmJiAodGhpcy5hID0gbmV3IFNldCk7IHRoaXMuYiA9IG51bGw7IHRoaXMuYyA9IFtdOyB9XHJcbnZhciBoZCA9IDEwO1xyXG5mdW5jdGlvbiBpZChhKSB7IHJldHVybiBhLmIgPyAhMCA6IGEuYSA/IGEuYS5zaXplID49IGEuZiA6ICExOyB9XHJcbmZ1bmN0aW9uIERjKGEpIHsgcmV0dXJuIGEuYiA/IDEgOiBhLmEgPyBhLmEuc2l6ZSA6IDA7IH1cclxuZnVuY3Rpb24gemMoYSwgYikgeyByZXR1cm4gYS5iID8gYS5iID09IGIgOiBhLmEgPyBhLmEuaGFzKGIpIDogITE7IH1cclxuZnVuY3Rpb24gRWMoYSwgYikgeyBhLmEgPyBhLmEuYWRkKGIpIDogYS5iID0gYjsgfVxyXG5mdW5jdGlvbiBHYyhhLCBiKSB7IGEuYiAmJiBhLmIgPT0gYiA/IGEuYiA9IG51bGwgOiBhLmEgJiYgYS5hLmhhcyhiKSAmJiBhLmEuZGVsZXRlKGIpOyB9XHJcbmdkLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZV8xLCBfYTtcclxuICAgIHRoaXMuYyA9IGpkKHRoaXMpO1xyXG4gICAgaWYgKHRoaXMuYilcclxuICAgICAgICB0aGlzLmIuY2FuY2VsKCksIHRoaXMuYiA9IG51bGw7XHJcbiAgICBlbHNlIGlmICh0aGlzLmEgJiYgMCAhPT0gdGhpcy5hLnNpemUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuYS52YWx1ZXMoKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhID0gX2MudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBhLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmEuY2xlYXIoKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gamQoYSkge1xyXG4gICAgdmFyIGVfMiwgX2E7XHJcbiAgICBpZiAobnVsbCAhPSBhLmIpXHJcbiAgICAgICAgcmV0dXJuIGEuYy5jb25jYXQoYS5iLnMpO1xyXG4gICAgaWYgKG51bGwgIT0gYS5hICYmIDAgIT09IGEuYS5zaXplKSB7XHJcbiAgICAgICAgdmFyIGIgPSBhLmM7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhhLmEudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYiA9IGIuY29uY2F0KGMucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNhKGEuYyk7XHJcbn1cclxuZnVuY3Rpb24ga2QoKSB7IH1cclxua2QucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBrLkpTT04uc3RyaW5naWZ5KGEsIHZvaWQgMCk7IH07XHJcbmtkLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBrLkpTT04ucGFyc2UoYSwgdm9pZCAwKTsgfTtcclxuZnVuY3Rpb24gbGQoKSB7IHRoaXMuYSA9IG5ldyBrZDsgfVxyXG5mdW5jdGlvbiBtZChhLCBiLCBjKSB7IHZhciBkID0gYyB8fCBcIlwiOyB0cnkge1xyXG4gICAgTGMoYSwgZnVuY3Rpb24gKGUsIGYpIHsgdmFyIGggPSBlOyBuKGUpICYmIChoID0gdmIoZSkpOyBiLnB1c2goZCArIGYgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChoKSk7IH0pO1xyXG59XHJcbmNhdGNoIChlKSB7XHJcbiAgICB0aHJvdyBiLnB1c2goZCArIFwidHlwZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChcIl9iYWRtYXBcIikpLCBlO1xyXG59IH1cclxuZnVuY3Rpb24gbmQoYSwgYikgeyB2YXIgYyA9IG5ldyBQYjsgaWYgKGsuSW1hZ2UpIHtcclxuICAgIHZhciBkID0gbmV3IEltYWdlO1xyXG4gICAgZC5vbmxvYWQgPSBrYShvZCwgYywgZCwgXCJUZXN0TG9hZEltYWdlOiBsb2FkZWRcIiwgITAsIGIpO1xyXG4gICAgZC5vbmVycm9yID0ga2Eob2QsIGMsIGQsIFwiVGVzdExvYWRJbWFnZTogZXJyb3JcIiwgITEsIGIpO1xyXG4gICAgZC5vbmFib3J0ID0ga2Eob2QsIGMsIGQsIFwiVGVzdExvYWRJbWFnZTogYWJvcnRcIiwgITEsIGIpO1xyXG4gICAgZC5vbnRpbWVvdXQgPSBrYShvZCwgYywgZCwgXCJUZXN0TG9hZEltYWdlOiB0aW1lb3V0XCIsICExLCBiKTtcclxuICAgIGsuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGlmIChkLm9udGltZW91dClcclxuICAgICAgICBkLm9udGltZW91dCgpOyB9LCAxRTQpO1xyXG4gICAgZC5zcmMgPSBhO1xyXG59XHJcbmVsc2VcclxuICAgIGIoITEpOyB9XHJcbmZ1bmN0aW9uIG9kKGEsIGIsIGMsIGQsIGUpIHsgdHJ5IHtcclxuICAgIGIub25sb2FkID0gbnVsbCwgYi5vbmVycm9yID0gbnVsbCwgYi5vbmFib3J0ID0gbnVsbCwgYi5vbnRpbWVvdXQgPSBudWxsLCBlKGQpO1xyXG59XHJcbmNhdGNoIChmKSB7IH0gfVxyXG52YXIgcGQgPSBrLkpTT04ucGFyc2U7XHJcbmZ1bmN0aW9uIFgoYSkgeyBELmNhbGwodGhpcyk7IHRoaXMuaGVhZGVycyA9IG5ldyBSOyB0aGlzLkggPSBhIHx8IG51bGw7IHRoaXMuYiA9ICExOyB0aGlzLnMgPSB0aGlzLmEgPSBudWxsOyB0aGlzLkIgPSBcIlwiOyB0aGlzLmggPSAwOyB0aGlzLmYgPSBcIlwiOyB0aGlzLmcgPSB0aGlzLkEgPSB0aGlzLmwgPSB0aGlzLnUgPSAhMTsgdGhpcy5vID0gMDsgdGhpcy5tID0gbnVsbDsgdGhpcy5JID0gcWQ7IHRoaXMuRCA9IHRoaXMuRiA9ICExOyB9XHJcbnIoWCwgRCk7XHJcbnZhciBxZCA9IFwiXCIsIHJkID0gL15odHRwcz8kL2ksIHNkID0gW1wiUE9TVFwiLCBcIlBVVFwiXTtcclxuZyA9IFgucHJvdG90eXBlO1xyXG5nLmJhID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcclxuICAgIGlmICh0aGlzLmEpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJbZ29vZy5uZXQuWGhySW9dIE9iamVjdCBpcyBhY3RpdmUgd2l0aCBhbm90aGVyIHJlcXVlc3Q9XCIgKyB0aGlzLkIgKyBcIjsgbmV3VXJpPVwiICsgYSk7XHJcbiAgICBiID0gYiA/IGIudG9VcHBlckNhc2UoKSA6IFwiR0VUXCI7XHJcbiAgICB0aGlzLkIgPSBhO1xyXG4gICAgdGhpcy5mID0gXCJcIjtcclxuICAgIHRoaXMuaCA9IDA7XHJcbiAgICB0aGlzLnUgPSAhMTtcclxuICAgIHRoaXMuYiA9ICEwO1xyXG4gICAgdGhpcy5hID0gbmV3IFhNTEh0dHBSZXF1ZXN0O1xyXG4gICAgdGhpcy5zID0gdGhpcy5IID8gYmModGhpcy5IKSA6IGJjKGZjKTtcclxuICAgIHRoaXMuYS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBwKHRoaXMuemEsIHRoaXMpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB0aGlzLkEgPSAhMCwgdGhpcy5hLm9wZW4oYiwgU3RyaW5nKGEpLCAhMCksIHRoaXMuQSA9ICExO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGYpIHtcclxuICAgICAgICB0ZCh0aGlzLCBmKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBhID0gYyB8fCBcIlwiO1xyXG4gICAgdmFyIGUgPSBuZXcgUih0aGlzLmhlYWRlcnMpO1xyXG4gICAgZCAmJiBMYyhkLCBmdW5jdGlvbiAoZiwgaCkgeyBlLnNldChoLCBmKTsgfSk7XHJcbiAgICBkID0gcGEoZS5MKCkpO1xyXG4gICAgYyA9IGsuRm9ybURhdGEgJiYgYSBpbnN0YW5jZW9mIGsuRm9ybURhdGE7XHJcbiAgICAhKDAgPD1cclxuICAgICAgICBuYShzZCwgYikpIHx8IGQgfHwgYyB8fCBlLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04XCIpO1xyXG4gICAgZS5mb3JFYWNoKGZ1bmN0aW9uIChmLCBoKSB7IHRoaXMuYS5zZXRSZXF1ZXN0SGVhZGVyKGgsIGYpOyB9LCB0aGlzKTtcclxuICAgIHRoaXMuSSAmJiAodGhpcy5hLnJlc3BvbnNlVHlwZSA9IHRoaXMuSSk7XHJcbiAgICBcIndpdGhDcmVkZW50aWFsc1wiIGluIHRoaXMuYSAmJiB0aGlzLmEud2l0aENyZWRlbnRpYWxzICE9PSB0aGlzLkYgJiYgKHRoaXMuYS53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLkYpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB1ZCh0aGlzKSwgMCA8IHRoaXMubyAmJiAoKHRoaXMuRCA9IHZkKHRoaXMuYSkpID8gKHRoaXMuYS50aW1lb3V0ID0gdGhpcy5vLCB0aGlzLmEub250aW1lb3V0ID0gcCh0aGlzLnhhLCB0aGlzKSkgOiB0aGlzLm0gPSBKYih0aGlzLnhhLCB0aGlzLm8sIHRoaXMpKSwgdGhpcy5sID0gITAsIHRoaXMuYS5zZW5kKGEpLCB0aGlzLmwgPSAhMTtcclxuICAgIH1cclxuICAgIGNhdGNoIChmKSB7XHJcbiAgICAgICAgdGQodGhpcywgZik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHZkKGEpIHsgcmV0dXJuIHggJiYgUmEoOSkgJiYgXCJudW1iZXJcIiA9PT0gdHlwZW9mIGEudGltZW91dCAmJiB2b2lkIDAgIT09IGEub250aW1lb3V0OyB9XHJcbmZ1bmN0aW9uIHFhKGEpIHsgcmV0dXJuIFwiY29udGVudC10eXBlXCIgPT0gYS50b0xvd2VyQ2FzZSgpOyB9XHJcbmcueGEgPSBmdW5jdGlvbiAoKSB7IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGdvb2cgJiYgdGhpcy5hICYmICh0aGlzLmYgPSBcIlRpbWVkIG91dCBhZnRlciBcIiArIHRoaXMubyArIFwibXMsIGFib3J0aW5nXCIsIHRoaXMuaCA9IDgsIHRoaXMuZGlzcGF0Y2hFdmVudChcInRpbWVvdXRcIiksIHRoaXMuYWJvcnQoOCkpOyB9O1xyXG5mdW5jdGlvbiB0ZChhLCBiKSB7IGEuYiA9ICExOyBhLmEgJiYgKGEuZyA9ICEwLCBhLmEuYWJvcnQoKSwgYS5nID0gITEpOyBhLmYgPSBiOyBhLmggPSA1OyB3ZChhKTsgeGQoYSk7IH1cclxuZnVuY3Rpb24gd2QoYSkgeyBhLnUgfHwgKGEudSA9ICEwLCBhLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSwgYS5kaXNwYXRjaEV2ZW50KFwiZXJyb3JcIikpOyB9XHJcbmcuYWJvcnQgPSBmdW5jdGlvbiAoYSkgeyB0aGlzLmEgJiYgdGhpcy5iICYmICh0aGlzLmIgPSAhMSwgdGhpcy5nID0gITAsIHRoaXMuYS5hYm9ydCgpLCB0aGlzLmcgPSAhMSwgdGhpcy5oID0gYSB8fCA3LCB0aGlzLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSwgdGhpcy5kaXNwYXRjaEV2ZW50KFwiYWJvcnRcIiksIHhkKHRoaXMpKTsgfTtcclxuZy5HID0gZnVuY3Rpb24gKCkgeyB0aGlzLmEgJiYgKHRoaXMuYiAmJiAodGhpcy5iID0gITEsIHRoaXMuZyA9ICEwLCB0aGlzLmEuYWJvcnQoKSwgdGhpcy5nID0gITEpLCB4ZCh0aGlzLCAhMCkpOyBYLlMuRy5jYWxsKHRoaXMpOyB9O1xyXG5nLnphID0gZnVuY3Rpb24gKCkgeyB0aGlzLmogfHwgKHRoaXMuQSB8fCB0aGlzLmwgfHwgdGhpcy5nID8geWQodGhpcykgOiB0aGlzLlRhKCkpOyB9O1xyXG5nLlRhID0gZnVuY3Rpb24gKCkgeyB5ZCh0aGlzKTsgfTtcclxuZnVuY3Rpb24geWQoYSkge1xyXG4gICAgaWYgKGEuYiAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBnb29nICYmICghYS5zWzFdIHx8IDQgIT0gTihhKSB8fCAyICE9IGEuWCgpKSlcclxuICAgICAgICBpZiAoYS5sICYmIDQgPT0gTihhKSlcclxuICAgICAgICAgICAgSmIoYS56YSwgMCwgYSk7XHJcbiAgICAgICAgZWxzZSBpZiAoYS5kaXNwYXRjaEV2ZW50KFwicmVhZHlzdGF0ZWNoYW5nZVwiKSwgNCA9PSBOKGEpKSB7XHJcbiAgICAgICAgICAgIGEuYiA9ICExO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGIgPSBhLlgoKTtcclxuICAgICAgICAgICAgICAgIGE6IHN3aXRjaCAoYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjA2OlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTIyMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBjID0gITE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZDtcclxuICAgICAgICAgICAgICAgIGlmICghKGQgPSBjKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlID0gMCA9PT0gYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IFN0cmluZyhhLkIpLm1hdGNoKE5jKVsxXSB8fCBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWYgJiYgay5zZWxmICYmIGsuc2VsZi5sb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBrLnNlbGYubG9jYXRpb24ucHJvdG9jb2w7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gaC5zdWJzdHIoMCwgaC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gIXJkLnRlc3QoZiA/IGYudG9Mb3dlckNhc2UoKSA6IFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkID0gZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkKVxyXG4gICAgICAgICAgICAgICAgICAgIGEuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmRpc3BhdGNoRXZlbnQoXCJzdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYS5oID0gNjtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IDIgPCBOKGEpID8gYS5hLnN0YXR1c1RleHQgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAobCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYS5mID0gbSArIFwiIFtcIiArIGEuWCgpICsgXCJdXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgd2QoYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB4ZChhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxufVxyXG5mdW5jdGlvbiB4ZChhLCBiKSB7IGlmIChhLmEpIHtcclxuICAgIHVkKGEpO1xyXG4gICAgdmFyIGMgPSBhLmEsIGQgPSBhLnNbMF0gPyBhYSA6IG51bGw7XHJcbiAgICBhLmEgPSBudWxsO1xyXG4gICAgYS5zID0gbnVsbDtcclxuICAgIGIgfHwgYS5kaXNwYXRjaEV2ZW50KFwicmVhZHlcIik7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGMub25yZWFkeXN0YXRlY2hhbmdlID0gZDtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7IH1cclxufSB9XHJcbmZ1bmN0aW9uIHVkKGEpIHsgYS5hICYmIGEuRCAmJiAoYS5hLm9udGltZW91dCA9IG51bGwpOyBhLm0gJiYgKGsuY2xlYXJUaW1lb3V0KGEubSksIGEubSA9IG51bGwpOyB9XHJcbmZ1bmN0aW9uIE4oYSkgeyByZXR1cm4gYS5hID8gYS5hLnJlYWR5U3RhdGUgOiAwOyB9XHJcbmcuWCA9IGZ1bmN0aW9uICgpIHsgdHJ5IHtcclxuICAgIHJldHVybiAyIDwgTih0aGlzKSA/IHRoaXMuYS5zdGF0dXMgOiAtMTtcclxufVxyXG5jYXRjaCAoYSkge1xyXG4gICAgcmV0dXJuIC0xO1xyXG59IH07XHJcbmcuJCA9IGZ1bmN0aW9uICgpIHsgdHJ5IHtcclxuICAgIHJldHVybiB0aGlzLmEgPyB0aGlzLmEucmVzcG9uc2VUZXh0IDogXCJcIjtcclxufVxyXG5jYXRjaCAoYSkge1xyXG4gICAgcmV0dXJuIFwiXCI7XHJcbn0gfTtcclxuZy5OYSA9IGZ1bmN0aW9uIChhKSB7IGlmICh0aGlzLmEpIHtcclxuICAgIHZhciBiID0gdGhpcy5hLnJlc3BvbnNlVGV4dDtcclxuICAgIGEgJiYgMCA9PSBiLmluZGV4T2YoYSkgJiYgKGIgPSBiLnN1YnN0cmluZyhhLmxlbmd0aCkpO1xyXG4gICAgcmV0dXJuIHBkKGIpO1xyXG59IH07XHJcbmcudWEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmg7IH07XHJcbmcuUWEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcInN0cmluZ1wiID09PSB0eXBlb2YgdGhpcy5mID8gdGhpcy5mIDogU3RyaW5nKHRoaXMuZik7IH07XHJcbmZ1bmN0aW9uIHpkKGEpIHsgdmFyIGIgPSBcIlwiOyBBYShhLCBmdW5jdGlvbiAoYywgZCkgeyBiICs9IGQ7IGIgKz0gXCI6XCI7IGIgKz0gYzsgYiArPSBcIlxcclxcblwiOyB9KTsgcmV0dXJuIGI7IH1cclxuZnVuY3Rpb24gQWQoYSwgYiwgYykgeyBhOiB7XHJcbiAgICBmb3IgKGQgaW4gYykge1xyXG4gICAgICAgIHZhciBkID0gITE7XHJcbiAgICAgICAgYnJlYWsgYTtcclxuICAgIH1cclxuICAgIGQgPSAhMDtcclxufSBkIHx8IChjID0gemQoYyksIFwic3RyaW5nXCIgPT09IHR5cGVvZiBhID8gKG51bGwgIT0gYyAmJiBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGMpKSkgOiBRKGEsIGIsIGMpKTsgfVxyXG5mdW5jdGlvbiBCZChhLCBiLCBjKSB7IHJldHVybiBjICYmIGMuaW50ZXJuYWxDaGFubmVsUGFyYW1zID8gYy5pbnRlcm5hbENoYW5uZWxQYXJhbXNbYV0gfHwgYiA6IGI7IH1cclxuZnVuY3Rpb24gQ2QoYSkge1xyXG4gICAgdGhpcy5wYSA9IDA7XHJcbiAgICB0aGlzLmcgPSBbXTtcclxuICAgIHRoaXMuYyA9IG5ldyBQYjtcclxuICAgIHRoaXMuZ2EgPSB0aGlzLmxhID0gdGhpcy5CID0gdGhpcy5mYSA9IHRoaXMuYSA9IHRoaXMubmEgPSB0aGlzLkEgPSB0aGlzLlcgPSB0aGlzLmkgPSB0aGlzLk8gPSB0aGlzLmwgPSBudWxsO1xyXG4gICAgdGhpcy5MYSA9IHRoaXMuUiA9IDA7XHJcbiAgICB0aGlzLklhID0gQmQoXCJmYWlsRmFzdFwiLCAhMSwgYSk7XHJcbiAgICB0aGlzLkggPSB0aGlzLm0gPSB0aGlzLmogPSB0aGlzLmggPSB0aGlzLmYgPSBudWxsO1xyXG4gICAgdGhpcy5UID0gITA7XHJcbiAgICB0aGlzLkkgPSB0aGlzLm9hID0gdGhpcy5QID0gLTE7XHJcbiAgICB0aGlzLlUgPSB0aGlzLm8gPSB0aGlzLnUgPSAwO1xyXG4gICAgdGhpcy5GYSA9IEJkKFwiYmFzZVJldHJ5RGVsYXlNc1wiLCA1RTMsIGEpO1xyXG4gICAgdGhpcy5NYSA9IEJkKFwicmV0cnlEZWxheVNlZWRNc1wiLCAxRTQsIGEpO1xyXG4gICAgdGhpcy5KYSA9IEJkKFwiZm9yd2FyZENoYW5uZWxNYXhSZXRyaWVzXCIsIDIsIGEpO1xyXG4gICAgdGhpcy5tYSA9IEJkKFwiZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zXCIsIDJFNCwgYSk7XHJcbiAgICB0aGlzLkthID0gYSAmJiBhLmcgfHwgdm9pZCAwO1xyXG4gICAgdGhpcy5EID0gdm9pZCAwO1xyXG4gICAgdGhpcy5DID0gYSAmJiBhLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHIgfHxcclxuICAgICAgICAhMTtcclxuICAgIHRoaXMuSiA9IFwiXCI7XHJcbiAgICB0aGlzLmIgPSBuZXcgZ2QoYSAmJiBhLmNvbmN1cnJlbnRSZXF1ZXN0TGltaXQpO1xyXG4gICAgdGhpcy5rYSA9IG5ldyBsZDtcclxuICAgIHRoaXMuZGEgPSBhICYmIGEuZmFzdEhhbmRzaGFrZSB8fCAhMTtcclxuICAgIHRoaXMuR2EgPSBhICYmIGEuYiB8fCAhMTtcclxuICAgIGEgJiYgYS5mICYmICh0aGlzLmMuYSA9ICExKTtcclxuICAgIGEgJiYgYS5mb3JjZUxvbmdQb2xsaW5nICYmICh0aGlzLlQgPSAhMSk7XHJcbiAgICB0aGlzLlYgPSAhdGhpcy5kYSAmJiB0aGlzLlQgJiYgYSAmJiBhLmMgfHwgITE7XHJcbiAgICB0aGlzLmVhID0gdm9pZCAwO1xyXG4gICAgdGhpcy5OID0gMDtcclxuICAgIHRoaXMuRiA9ICExO1xyXG4gICAgdGhpcy5zID0gbnVsbDtcclxufVxyXG5nID0gQ2QucHJvdG90eXBlO1xyXG5nLmhhID0gODtcclxuZy52ID0gMTtcclxuZnVuY3Rpb24gSmMoYSkgeyBEZChhKTsgaWYgKDMgPT0gYS52KSB7XHJcbiAgICB2YXIgYiA9IGEuUisrLCBjID0gTChhLkIpO1xyXG4gICAgUShjLCBcIlNJRFwiLCBhLkopO1xyXG4gICAgUShjLCBcIlJJRFwiLCBiKTtcclxuICAgIFEoYywgXCJUWVBFXCIsIFwidGVybWluYXRlXCIpO1xyXG4gICAgRWQoYSwgYyk7XHJcbiAgICBiID0gbmV3IEsoYSwgYS5jLCBiLCB2b2lkIDApO1xyXG4gICAgYi5IID0gMjtcclxuICAgIGIuaSA9IGxjKEwoYykpO1xyXG4gICAgYyA9ICExO1xyXG4gICAgay5uYXZpZ2F0b3IgJiYgay5uYXZpZ2F0b3Iuc2VuZEJlYWNvbiAmJiAoYyA9IGsubmF2aWdhdG9yLnNlbmRCZWFjb24oYi5pLnRvU3RyaW5nKCksIFwiXCIpKTtcclxuICAgICFjICYmIGsuSW1hZ2UgJiYgKChuZXcgSW1hZ2UpLnNyYyA9IGIuaSwgYyA9ICEwKTtcclxuICAgIGMgfHwgKGIuYSA9IG9jKGIuZywgbnVsbCksIGIuYS5iYShiLmkpKTtcclxuICAgIGIudSA9IHEoKTtcclxuICAgIE0oYik7XHJcbn0gRmQoYSk7IH1cclxuZnVuY3Rpb24gQmMoYSkgeyBhLmEgJiYgKHhjKGEpLCBhLmEuY2FuY2VsKCksIGEuYSA9IG51bGwpOyB9XHJcbmZ1bmN0aW9uIERkKGEpIHsgQmMoYSk7IGEuaiAmJiAoay5jbGVhclRpbWVvdXQoYS5qKSwgYS5qID0gbnVsbCk7IEFjKGEpOyBhLmIuY2FuY2VsKCk7IGEuaCAmJiAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIGEuaCAmJiBrLmNsZWFyVGltZW91dChhLmgpLCBhLmggPSBudWxsKTsgfVxyXG5mdW5jdGlvbiBHZChhLCBiKSB7IGEuZy5wdXNoKG5ldyBmZChhLkxhKyssIGIpKTsgMyA9PSBhLnYgJiYgSWMoYSk7IH1cclxuZnVuY3Rpb24gSWMoYSkgeyBpZChhLmIpIHx8IGEuaCB8fCAoYS5oID0gITAsIENiKGEuQmEsIGEpLCBhLnUgPSAwKTsgfVxyXG5mdW5jdGlvbiBIZChhLCBiKSB7IGlmIChEYyhhLmIpID49IGEuYi5mIC0gKGEuaCA/IDEgOiAwKSlcclxuICAgIHJldHVybiAhMTsgaWYgKGEuaClcclxuICAgIHJldHVybiBhLmcgPSBiLnMuY29uY2F0KGEuZyksICEwOyBpZiAoMSA9PSBhLnYgfHwgMiA9PSBhLnYgfHwgYS51ID49IChhLklhID8gMCA6IGEuSmEpKVxyXG4gICAgcmV0dXJuICExOyBhLmggPSBJKHAoYS5CYSwgYSwgYiksIElkKGEsIGEudSkpOyBhLnUrKzsgcmV0dXJuICEwOyB9XHJcbmcuQmEgPSBmdW5jdGlvbiAoYSkge1xyXG4gICAgaWYgKHRoaXMuaClcclxuICAgICAgICBpZiAodGhpcy5oID0gbnVsbCwgMSA9PSB0aGlzLnYpIHtcclxuICAgICAgICAgICAgaWYgKCFhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlIgPSBNYXRoLmZsb29yKDFFNSAqIE1hdGgucmFuZG9tKCkpO1xyXG4gICAgICAgICAgICAgICAgYSA9IHRoaXMuUisrO1xyXG4gICAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgSyh0aGlzLCB0aGlzLmMsIGEsIHZvaWQgMCksIGMgPSB0aGlzLmw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLk8gJiYgKGMgPyAoYyA9IEJhKGMpLCBEYShjLCB0aGlzLk8pKSA6IGMgPSB0aGlzLk8pO1xyXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gdGhpcy5pICYmIChiLkIgPSBjKTtcclxuICAgICAgICAgICAgICAgIHZhciBkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGEpXHJcbiAgICAgICAgICAgICAgICAgICAgYToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gZCA9IDA7IGUgPCB0aGlzLmcubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IHRoaXMuZ1tlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIGYuYSAmJiAoZiA9IGYuYS5fX2RhdGFfXywgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBmLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkICs9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDA5NiA8IGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQwOTYgPT09IGQgfHwgZSA9PT0gdGhpcy5nLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gMUUzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkID0gMUUzO1xyXG4gICAgICAgICAgICAgICAgZCA9IEpkKHRoaXMsIGIsIGQpO1xyXG4gICAgICAgICAgICAgICAgZSA9IEwodGhpcy5CKTtcclxuICAgICAgICAgICAgICAgIFEoZSwgXCJSSURcIiwgYSk7XHJcbiAgICAgICAgICAgICAgICBRKGUsIFwiQ1ZFUlwiLCAyMik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkEgJiYgUShlLCBcIlgtSFRUUC1TZXNzaW9uLUlkXCIsIHRoaXMuQSk7XHJcbiAgICAgICAgICAgICAgICBFZCh0aGlzLCBlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaSAmJiBjICYmIEFkKGUsIHRoaXMuaSwgYyk7XHJcbiAgICAgICAgICAgICAgICBFYyh0aGlzLmIsIGIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5HYSAmJiBRKGUsIFwiVFlQRVwiLCBcImluaXRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhID8gKFEoZSwgXCIkcmVxXCIsIGQpLCBRKGUsIFwiU0lEXCIsIFwibnVsbFwiKSwgYi5WID0gITAsIGtjKGIsIGUsIG51bGwpKSA6IGtjKGIsIGUsIGQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ID0gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIDMgPT0gdGhpcy52ICYmIChhID8gS2QodGhpcywgYSkgOiAwID09IHRoaXMuZy5sZW5ndGggfHwgaWQodGhpcy5iKSB8fCBLZCh0aGlzKSk7XHJcbn07XHJcbmZ1bmN0aW9uIEtkKGEsIGIpIHsgdmFyIGM7IGIgPyBjID0gYi5mIDogYyA9IGEuUisrOyB2YXIgZCA9IEwoYS5CKTsgUShkLCBcIlNJRFwiLCBhLkopOyBRKGQsIFwiUklEXCIsIGMpOyBRKGQsIFwiQUlEXCIsIGEuUCk7IEVkKGEsIGQpOyBhLmkgJiYgYS5sICYmIEFkKGQsIGEuaSwgYS5sKTsgYyA9IG5ldyBLKGEsIGEuYywgYywgYS51ICsgMSk7IG51bGwgPT09IGEuaSAmJiAoYy5CID0gYS5sKTsgYiAmJiAoYS5nID0gYi5zLmNvbmNhdChhLmcpKTsgYiA9IEpkKGEsIGMsIDFFMyk7IGMuc2V0VGltZW91dChNYXRoLnJvdW5kKC41ICogYS5tYSkgKyBNYXRoLnJvdW5kKC41ICogYS5tYSAqIE1hdGgucmFuZG9tKCkpKTsgRWMoYS5iLCBjKTsga2MoYywgZCwgYik7IH1cclxuZnVuY3Rpb24gRWQoYSwgYikgeyBhLmYgJiYgTGMoe30sIGZ1bmN0aW9uIChjLCBkKSB7IFEoYiwgZCwgYyk7IH0pOyB9XHJcbmZ1bmN0aW9uIEpkKGEsIGIsIGMpIHsgYyA9IE1hdGgubWluKGEuZy5sZW5ndGgsIGMpOyB2YXIgZCA9IGEuZiA/IHAoYS5mLkhhLCBhLmYsIGEpIDogbnVsbDsgYTogZm9yICh2YXIgZSA9IGEuZywgZiA9IC0xOzspIHtcclxuICAgIHZhciBoID0gW1wiY291bnQ9XCIgKyBjXTtcclxuICAgIC0xID09IGYgPyAwIDwgYyA/IChmID0gZVswXS5iLCBoLnB1c2goXCJvZnM9XCIgKyBmKSkgOiBmID0gMCA6IGgucHVzaChcIm9mcz1cIiArIGYpO1xyXG4gICAgZm9yICh2YXIgbSA9ICEwLCBsID0gMDsgbCA8IGM7IGwrKykge1xyXG4gICAgICAgIHZhciB0ID0gZVtsXS5iLCBCID0gZVtsXS5hO1xyXG4gICAgICAgIHQgLT0gZjtcclxuICAgICAgICBpZiAoMCA+IHQpXHJcbiAgICAgICAgICAgIGYgPSBNYXRoLm1heCgwLCBlW2xdLmIgLSAxMDApLCBtID0gITE7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbWQoQiwgaCwgXCJyZXFcIiArIHQgKyBcIl9cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKHopIHtcclxuICAgICAgICAgICAgICAgIGQgJiYgZChCKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG0pIHtcclxuICAgICAgICBkID0gaC5qb2luKFwiJlwiKTtcclxuICAgICAgICBicmVhayBhO1xyXG4gICAgfVxyXG59IGEgPSBhLmcuc3BsaWNlKDAsIGMpOyBiLnMgPSBhOyByZXR1cm4gZDsgfVxyXG5mdW5jdGlvbiBIYyhhKSB7IGEuYSB8fCBhLmogfHwgKGEuVSA9IDEsIENiKGEuQWEsIGEpLCBhLm8gPSAwKTsgfVxyXG5mdW5jdGlvbiBDYyhhKSB7IGlmIChhLmEgfHwgYS5qIHx8IDMgPD0gYS5vKVxyXG4gICAgcmV0dXJuICExOyBhLlUrKzsgYS5qID0gSShwKGEuQWEsIGEpLCBJZChhLCBhLm8pKTsgYS5vKys7IHJldHVybiAhMDsgfVxyXG5nLkFhID0gZnVuY3Rpb24gKCkgeyB0aGlzLmogPSBudWxsOyBMZCh0aGlzKTsgaWYgKHRoaXMuViAmJiAhKHRoaXMuRiB8fCBudWxsID09IHRoaXMuYSB8fCAwID49IHRoaXMuTikpIHtcclxuICAgIHZhciBhID0gMiAqIHRoaXMuTjtcclxuICAgIHRoaXMuYy5pbmZvKFwiQlAgZGV0ZWN0aW9uIHRpbWVyIGVuYWJsZWQ6IFwiICsgYSk7XHJcbiAgICB0aGlzLnMgPSBJKHAodGhpcy5TYSwgdGhpcyksIGEpO1xyXG59IH07XHJcbmcuU2EgPSBmdW5jdGlvbiAoKSB7IHRoaXMucyAmJiAodGhpcy5zID0gbnVsbCwgdGhpcy5jLmluZm8oXCJCUCBkZXRlY3Rpb24gdGltZW91dCByZWFjaGVkLlwiKSwgdGhpcy5jLmluZm8oXCJCdWZmZXJpbmcgcHJveHkgZGV0ZWN0ZWQgYW5kIHN3aXRjaCB0byBsb25nLXBvbGxpbmchXCIpLCB0aGlzLkggPSAhMSwgdGhpcy5GID0gITAsIEJjKHRoaXMpLCBMZCh0aGlzKSk7IH07XHJcbmZ1bmN0aW9uIHhjKGEpIHsgbnVsbCAhPSBhLnMgJiYgKGsuY2xlYXJUaW1lb3V0KGEucyksIGEucyA9IG51bGwpOyB9XHJcbmZ1bmN0aW9uIExkKGEpIHsgYS5hID0gbmV3IEsoYSwgYS5jLCBcInJwY1wiLCBhLlUpOyBudWxsID09PSBhLmkgJiYgKGEuYS5CID0gYS5sKTsgYS5hLk8gPSAwOyB2YXIgYiA9IEwoYS5sYSk7IFEoYiwgXCJSSURcIiwgXCJycGNcIik7IFEoYiwgXCJTSURcIiwgYS5KKTsgUShiLCBcIkNJXCIsIGEuSCA/IFwiMFwiIDogXCIxXCIpOyBRKGIsIFwiQUlEXCIsIGEuUCk7IEVkKGEsIGIpOyBRKGIsIFwiVFlQRVwiLCBcInhtbGh0dHBcIik7IGEuaSAmJiBhLmwgJiYgQWQoYiwgYS5pLCBhLmwpOyBhLkQgJiYgYS5hLnNldFRpbWVvdXQoYS5EKTsgdmFyIGMgPSBhLmE7IGEgPSBhLmdhOyBjLkggPSAxOyBjLmkgPSBsYyhMKGIpKTsgYy5qID0gbnVsbDsgYy5JID0gITA7IG1jKGMsIGEpOyB9XHJcbmcuUmEgPSBmdW5jdGlvbiAoKSB7IG51bGwgIT0gdGhpcy5tICYmICh0aGlzLm0gPSBudWxsLCBCYyh0aGlzKSwgQ2ModGhpcyksIEgoMTkpKTsgfTtcclxuZnVuY3Rpb24gQWMoYSkgeyBudWxsICE9IGEubSAmJiAoay5jbGVhclRpbWVvdXQoYS5tKSwgYS5tID0gbnVsbCk7IH1cclxuZnVuY3Rpb24gdWMoYSwgYikgeyB2YXIgYyA9IG51bGw7IGlmIChhLmEgPT0gYikge1xyXG4gICAgQWMoYSk7XHJcbiAgICB4YyhhKTtcclxuICAgIGEuYSA9IG51bGw7XHJcbiAgICB2YXIgZCA9IDI7XHJcbn1cclxuZWxzZSBpZiAoemMoYS5iLCBiKSlcclxuICAgIGMgPSBiLnMsIEdjKGEuYiwgYiksIGQgPSAxO1xyXG5lbHNlXHJcbiAgICByZXR1cm47IGEuSSA9IGIuTjsgaWYgKDAgIT0gYS52KVxyXG4gICAgaWYgKGIuYilcclxuICAgICAgICBpZiAoMSA9PSBkKSB7XHJcbiAgICAgICAgICAgIGMgPSBiLmogPyBiLmoubGVuZ3RoIDogMDtcclxuICAgICAgICAgICAgYiA9IHEoKSAtIGIudTtcclxuICAgICAgICAgICAgdmFyIGUgPSBhLnU7XHJcbiAgICAgICAgICAgIGQgPSBWYigpO1xyXG4gICAgICAgICAgICBkLmRpc3BhdGNoRXZlbnQobmV3IFliKGQsIGMsIGIsIGUpKTtcclxuICAgICAgICAgICAgSWMoYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgSGMoYSk7XHJcbiAgICBlbHNlIGlmIChlID0gYi5oLCAzID09IGUgfHwgMCA9PSBlICYmIDAgPCBhLkkgfHwgISgxID09IGQgJiYgSGQoYSwgYikgfHwgMiA9PSBkICYmIENjKGEpKSlcclxuICAgICAgICBzd2l0Y2ggKGMgJiYgMCA8IGMubGVuZ3RoICYmIChiID0gYS5iLCBiLmMgPSBiLmMuY29uY2F0KGMpKSwgZSkge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBQKGEsIDUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIFAoYSwgMTApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIFAoYSwgNik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDogUChhLCAyKTtcclxuICAgICAgICB9IH1cclxuZnVuY3Rpb24gSWQoYSwgYikgeyB2YXIgYyA9IGEuRmEgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhLk1hKTsgYS5mIHx8IChjICo9IDIpOyByZXR1cm4gYyAqIGI7IH1cclxuZnVuY3Rpb24gUChhLCBiKSB7IGEuYy5pbmZvKFwiRXJyb3IgY29kZSBcIiArIGIpOyBpZiAoMiA9PSBiKSB7XHJcbiAgICB2YXIgYyA9IG51bGw7XHJcbiAgICBhLmYgJiYgKGMgPSBudWxsKTtcclxuICAgIHZhciBkID0gcChhLlhhLCBhKTtcclxuICAgIGMgfHwgKGMgPSBuZXcgVChcIi8vd3d3Lmdvb2dsZS5jb20vaW1hZ2VzL2NsZWFyZG90LmdpZlwiKSwgay5sb2NhdGlvbiAmJiBcImh0dHBcIiA9PSBrLmxvY2F0aW9uLnByb3RvY29sIHx8IFBjKGMsIFwiaHR0cHNcIiksIGxjKGMpKTtcclxuICAgIG5kKGMudG9TdHJpbmcoKSwgZCk7XHJcbn1cclxuZWxzZVxyXG4gICAgSCgyKTsgYS52ID0gMDsgYS5mICYmIGEuZi5yYShiKTsgRmQoYSk7IERkKGEpOyB9XHJcbmcuWGEgPSBmdW5jdGlvbiAoYSkgeyBhID8gKHRoaXMuYy5pbmZvKFwiU3VjY2Vzc2Z1bGx5IHBpbmdlZCBnb29nbGUuY29tXCIpLCBIKDIpKSA6ICh0aGlzLmMuaW5mbyhcIkZhaWxlZCB0byBwaW5nIGdvb2dsZS5jb21cIiksIEgoMSkpOyB9O1xyXG5mdW5jdGlvbiBGZChhKSB7IGEudiA9IDA7IGEuSSA9IC0xOyBpZiAoYS5mKSB7XHJcbiAgICBpZiAoMCAhPSBqZChhLmIpLmxlbmd0aCB8fCAwICE9IGEuZy5sZW5ndGgpXHJcbiAgICAgICAgYS5iLmMubGVuZ3RoID0gMCwgc2EoYS5nKSwgYS5nLmxlbmd0aCA9IDA7XHJcbiAgICBhLmYucWEoKTtcclxufSB9XHJcbmZ1bmN0aW9uIEZjKGEsIGIsIGMpIHsgdmFyIGQgPSBhZChjKTsgaWYgKFwiXCIgIT0gZC5jKVxyXG4gICAgYiAmJiBRYyhkLCBiICsgXCIuXCIgKyBkLmMpLCBSYyhkLCBkLmgpO1xyXG5lbHNlIHtcclxuICAgIHZhciBlID0gay5sb2NhdGlvbjtcclxuICAgIGQgPSBiZChlLnByb3RvY29sLCBiID8gYiArIFwiLlwiICsgZS5ob3N0bmFtZSA6IGUuaG9zdG5hbWUsICtlLnBvcnQsIGMpO1xyXG59IGEuVyAmJiBBYShhLlcsIGZ1bmN0aW9uIChmLCBoKSB7IFEoZCwgaCwgZik7IH0pOyBiID0gYS5BOyBjID0gYS5uYTsgYiAmJiBjICYmIFEoZCwgYiwgYyk7IFEoZCwgXCJWRVJcIiwgYS5oYSk7IEVkKGEsIGQpOyByZXR1cm4gZDsgfVxyXG5mdW5jdGlvbiBvYyhhLCBiKSB7IGlmIChiICYmICFhLkMpXHJcbiAgICB0aHJvdyBFcnJvcihcIkNhbid0IGNyZWF0ZSBzZWNvbmRhcnkgZG9tYWluIGNhcGFibGUgWGhySW8gb2JqZWN0LlwiKTsgYiA9IG5ldyBYKGEuS2EpOyBiLkYgPSBhLkM7IHJldHVybiBiOyB9XHJcbmZ1bmN0aW9uIE1kKCkgeyB9XHJcbmcgPSBNZC5wcm90b3R5cGU7XHJcbmcudGEgPSBmdW5jdGlvbiAoKSB7IH07XHJcbmcuc2EgPSBmdW5jdGlvbiAoKSB7IH07XHJcbmcucmEgPSBmdW5jdGlvbiAoKSB7IH07XHJcbmcucWEgPSBmdW5jdGlvbiAoKSB7IH07XHJcbmcuSGEgPSBmdW5jdGlvbiAoKSB7IH07XHJcbmZ1bmN0aW9uIE5kKCkgeyBpZiAoeCAmJiAhKDEwIDw9IE51bWJlcihVYSkpKVxyXG4gICAgdGhyb3cgRXJyb3IoXCJFbnZpcm9ubWVudGFsIGVycm9yOiBubyBhdmFpbGFibGUgdHJhbnNwb3J0LlwiKTsgfVxyXG5OZC5wcm90b3R5cGUuYSA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBuZXcgWShhLCBiKTsgfTtcclxuZnVuY3Rpb24gWShhLCBiKSB7XHJcbiAgICBELmNhbGwodGhpcyk7XHJcbiAgICB0aGlzLmEgPSBuZXcgQ2QoYik7XHJcbiAgICB0aGlzLmwgPSBhO1xyXG4gICAgdGhpcy5iID0gYiAmJiBiLm1lc3NhZ2VVcmxQYXJhbXMgfHwgbnVsbDtcclxuICAgIGEgPSBiICYmIGIubWVzc2FnZUhlYWRlcnMgfHwgbnVsbDtcclxuICAgIGIgJiYgYi5jbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkICYmIChhID8gYVtcIlgtQ2xpZW50LVByb3RvY29sXCJdID0gXCJ3ZWJjaGFubmVsXCIgOiBhID0geyBcIlgtQ2xpZW50LVByb3RvY29sXCI6IFwid2ViY2hhbm5lbFwiIH0pO1xyXG4gICAgdGhpcy5hLmwgPSBhO1xyXG4gICAgYSA9IGIgJiYgYi5pbml0TWVzc2FnZUhlYWRlcnMgfHwgbnVsbDtcclxuICAgIGIgJiYgYi5tZXNzYWdlQ29udGVudFR5cGUgJiYgKGEgPyBhW1wiWC1XZWJDaGFubmVsLUNvbnRlbnQtVHlwZVwiXSA9IGIubWVzc2FnZUNvbnRlbnRUeXBlIDogYSA9IHsgXCJYLVdlYkNoYW5uZWwtQ29udGVudC1UeXBlXCI6IGIubWVzc2FnZUNvbnRlbnRUeXBlIH0pO1xyXG4gICAgYiAmJiBiLmEgJiYgKGEgPyBhW1wiWC1XZWJDaGFubmVsLUNsaWVudC1Qcm9maWxlXCJdID0gYi5hIDogYSA9IHsgXCJYLVdlYkNoYW5uZWwtQ2xpZW50LVByb2ZpbGVcIjogYi5hIH0pO1xyXG4gICAgdGhpcy5hLk8gPVxyXG4gICAgICAgIGE7XHJcbiAgICAoYSA9IGIgJiYgYi5odHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtKSAmJiAhdGEoYSkgJiYgKHRoaXMuYS5pID0gYSk7XHJcbiAgICB0aGlzLmggPSBiICYmIGIuc3VwcG9ydHNDcm9zc0RvbWFpblhociB8fCAhMTtcclxuICAgIHRoaXMuZyA9IGIgJiYgYi5zZW5kUmF3SnNvbiB8fCAhMTtcclxuICAgIChiID0gYiAmJiBiLmh0dHBTZXNzaW9uSWRQYXJhbSkgJiYgIXRhKGIpICYmICh0aGlzLmEuQSA9IGIsIGEgPSB0aGlzLmIsIG51bGwgIT09IGEgJiYgYiBpbiBhICYmIChhID0gdGhpcy5iLCBiIGluIGEgJiYgZGVsZXRlIGFbYl0pKTtcclxuICAgIHRoaXMuZiA9IG5ldyBaKHRoaXMpO1xyXG59XHJcbnIoWSwgRCk7XHJcbmcgPSBZLnByb3RvdHlwZTtcclxuZy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgWS5TLmFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBhLCBiLCBjLCBkKTsgfTtcclxuZy5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgWS5TLnJlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBhLCBiLCBjLCBkKTsgfTtcclxuZy5PYSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5hLmYgPSB0aGlzLmY7IHRoaXMuaCAmJiAodGhpcy5hLkMgPSAhMCk7IHZhciBhID0gdGhpcy5hLCBiID0gdGhpcy5sLCBjID0gdGhpcy5iIHx8IHZvaWQgMDsgSCgwKTsgYS5mYSA9IGI7IGEuVyA9IGMgfHwge307IGEuSCA9IGEuVDsgYS5CID0gRmMoYSwgbnVsbCwgYS5mYSk7IEljKGEpOyB9O1xyXG5nLmNsb3NlID0gZnVuY3Rpb24gKCkgeyBKYyh0aGlzLmEpOyB9O1xyXG5nLlBhID0gZnVuY3Rpb24gKGEpIHsgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBhKSB7XHJcbiAgICB2YXIgYiA9IHt9O1xyXG4gICAgYi5fX2RhdGFfXyA9IGE7XHJcbiAgICBHZCh0aGlzLmEsIGIpO1xyXG59XHJcbmVsc2VcclxuICAgIHRoaXMuZyA/IChiID0ge30sIGIuX19kYXRhX18gPSB2YihhKSwgR2QodGhpcy5hLCBiKSkgOiBHZCh0aGlzLmEsIGEpOyB9O1xyXG5nLkcgPSBmdW5jdGlvbiAoKSB7IHRoaXMuYS5mID0gbnVsbDsgZGVsZXRlIHRoaXMuZjsgSmModGhpcy5hKTsgZGVsZXRlIHRoaXMuYTsgWS5TLkcuY2FsbCh0aGlzKTsgfTtcclxuZnVuY3Rpb24gT2QoYSkgeyBkYy5jYWxsKHRoaXMpOyB2YXIgYiA9IGEuX19zbV9fOyBpZiAoYikge1xyXG4gICAgYToge1xyXG4gICAgICAgIGZvciAodmFyIGMgaW4gYikge1xyXG4gICAgICAgICAgICBhID0gYztcclxuICAgICAgICAgICAgYnJlYWsgYTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYSA9IHZvaWQgMDtcclxuICAgIH1cclxuICAgICh0aGlzLmMgPSBhKSA/IChhID0gdGhpcy5jLCB0aGlzLmRhdGEgPSBudWxsICE9PSBiICYmIGEgaW4gYiA/IGJbYV0gOiB2b2lkIDApIDogdGhpcy5kYXRhID0gYjtcclxufVxyXG5lbHNlXHJcbiAgICB0aGlzLmRhdGEgPSBhOyB9XHJcbnIoT2QsIGRjKTtcclxuZnVuY3Rpb24gUGQoKSB7IGVjLmNhbGwodGhpcyk7IHRoaXMuc3RhdHVzID0gMTsgfVxyXG5yKFBkLCBlYyk7XHJcbmZ1bmN0aW9uIFooYSkgeyB0aGlzLmEgPSBhOyB9XHJcbnIoWiwgTWQpO1xyXG5aLnByb3RvdHlwZS50YSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5hLmRpc3BhdGNoRXZlbnQoXCJhXCIpOyB9O1xyXG5aLnByb3RvdHlwZS5zYSA9IGZ1bmN0aW9uIChhKSB7IHRoaXMuYS5kaXNwYXRjaEV2ZW50KG5ldyBPZChhKSk7IH07XHJcbloucHJvdG90eXBlLnJhID0gZnVuY3Rpb24gKGEpIHsgdGhpcy5hLmRpc3BhdGNoRXZlbnQobmV3IFBkKGEpKTsgfTtcclxuWi5wcm90b3R5cGUucWEgPSBmdW5jdGlvbiAoKSB7IHRoaXMuYS5kaXNwYXRjaEV2ZW50KFwiYlwiKTsgfTsgLypcclxuXG4gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiovXHJcbk5kLnByb3RvdHlwZS5jcmVhdGVXZWJDaGFubmVsID0gTmQucHJvdG90eXBlLmE7XHJcblkucHJvdG90eXBlLnNlbmQgPSBZLnByb3RvdHlwZS5QYTtcclxuWS5wcm90b3R5cGUub3BlbiA9IFkucHJvdG90eXBlLk9hO1xyXG5ZLnByb3RvdHlwZS5jbG9zZSA9IFkucHJvdG90eXBlLmNsb3NlO1xyXG5aYi5OT19FUlJPUiA9IDA7XHJcblpiLlRJTUVPVVQgPSA4O1xyXG5aYi5IVFRQX0VSUk9SID0gNjtcclxuJGIuQ09NUExFVEUgPSBcImNvbXBsZXRlXCI7XHJcbmNjLkV2ZW50VHlwZSA9IEo7XHJcbkouT1BFTiA9IFwiYVwiO1xyXG5KLkNMT1NFID0gXCJiXCI7XHJcbkouRVJST1IgPSBcImNcIjtcclxuSi5NRVNTQUdFID0gXCJkXCI7XHJcbkQucHJvdG90eXBlLmxpc3RlbiA9IEQucHJvdG90eXBlLnZhO1xyXG5YLnByb3RvdHlwZS5saXN0ZW5PbmNlID0gWC5wcm90b3R5cGUud2E7XHJcblgucHJvdG90eXBlLmdldExhc3RFcnJvciA9IFgucHJvdG90eXBlLlFhO1xyXG5YLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JDb2RlID0gWC5wcm90b3R5cGUudWE7XHJcblgucHJvdG90eXBlLmdldFN0YXR1cyA9IFgucHJvdG90eXBlLlg7XHJcblgucHJvdG90eXBlLmdldFJlc3BvbnNlSnNvbiA9IFgucHJvdG90eXBlLk5hO1xyXG5YLnByb3RvdHlwZS5nZXRSZXNwb25zZVRleHQgPSBYLnByb3RvdHlwZS4kO1xyXG5YLnByb3RvdHlwZS5zZW5kID0gWC5wcm90b3R5cGUuYmE7XHJcbnZhciBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE5kOyB9O1xyXG52YXIgRXJyb3JDb2RlID0gWmI7XHJcbnZhciBFdmVudFR5cGUgPSAkYjtcclxudmFyIFdlYkNoYW5uZWwgPSBjYztcclxudmFyIFhocklvID0gWDtcclxuXHJcbnZhciBlc20gPSB7XHJcbiAgICBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0OiBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0LFxyXG4gICAgRXJyb3JDb2RlOiBFcnJvckNvZGUsXHJcbiAgICBFdmVudFR5cGU6IEV2ZW50VHlwZSxcclxuICAgIFdlYkNoYW5uZWw6IFdlYkNoYW5uZWwsXHJcbiAgICBYaHJJbzogWGhySW9cclxufTtcblxuZXhwb3J0IGRlZmF1bHQgZXNtO1xuZXhwb3J0IHsgRXJyb3JDb2RlLCBFdmVudFR5cGUsIFdlYkNoYW5uZWwsIFhocklvLCBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBfX2V4dGVuZHMgYXMgdCwgX19hd2FpdGVyIGFzIGUsIF9fZ2VuZXJhdG9yIGFzIG4sIF9fc3ByZWFkQXJyYXlzIGFzIHIgfSBmcm9tIFwidHNsaWJcIjtcblxuaW1wb3J0IGkgZnJvbSBcIkBmaXJlYmFzZS9hcHBcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIGFzIG8sIExvZ0xldmVsIGFzIHUgfSBmcm9tIFwiQGZpcmViYXNlL2xvZ2dlclwiO1xuXG5pbXBvcnQgeyBnZXRVQSBhcyBzLCBpc01vYmlsZUNvcmRvdmEgYXMgYSwgaXNSZWFjdE5hdGl2ZSBhcyBjLCBpc0VsZWN0cm9uIGFzIGgsIGlzSUUgYXMgZiwgaXNVV1AgYXMgbCwgaXNCcm93c2VyRXh0ZW5zaW9uIGFzIHAgfSBmcm9tIFwiQGZpcmViYXNlL3V0aWxcIjtcblxuaW1wb3J0IHsgWGhySW8gYXMgZCwgRXZlbnRUeXBlIGFzIHYsIEVycm9yQ29kZSBhcyB5LCBjcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0IGFzIGcsIFdlYkNoYW5uZWwgYXMgbSB9IGZyb20gXCJAZmlyZWJhc2Uvd2ViY2hhbm5lbC13cmFwcGVyXCI7XG5cbmltcG9ydCB7IENvbXBvbmVudCBhcyB3IH0gZnJvbSBcIkBmaXJlYmFzZS9jb21wb25lbnRcIjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gdmFyIGIgPSBcbi8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBEYXRhYmFzZUluZm8gdXNpbmcgdGhlIHByb3ZpZGVkIGhvc3QsIGRhdGFiYXNlSWQgYW5kXG4gICAgICogcGVyc2lzdGVuY2VLZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YWJhc2VJZCBUaGUgZGF0YWJhc2UgdG8gdXNlLlxuICAgICAqIEBwYXJhbSBwZXJzaXN0ZW5jZUtleSBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIEZpcmVzdG9yZSdzIGxvY2FsXG4gICAgICogc3RvcmFnZSAodXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBkYXRhYmFzZUlkKS5cbiAgICAgKiBAcGFyYW0gaG9zdCBUaGUgRmlyZXN0b3JlIGJhY2tlbmQgaG9zdCB0byBjb25uZWN0IHRvLlxuICAgICAqIEBwYXJhbSBzc2wgV2hldGhlciB0byB1c2UgU1NMIHdoZW4gY29ubmVjdGluZy5cbiAgICAgKiBAcGFyYW0gZm9yY2VMb25nUG9sbGluZyBXaGV0aGVyIHRvIHVzZSB0aGUgZm9yY2VMb25nUG9sbGluZyBvcHRpb25cbiAgICAgKiB3aGVuIHVzaW5nIFdlYkNoYW5uZWwgYXMgdGhlIG5ldHdvcmsgdHJhbnNwb3J0LlxuICAgICAqIEBwYXJhbSBhdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgV2hldGhlciB0byB1c2UgdGhlIGRldGVjdEJ1ZmZlcmluZ1Byb3h5XG4gICAgICogb3B0aW9uIHdoZW4gdXNpbmcgV2ViQ2hhbm5lbCBhcyB0aGUgbmV0d29yayB0cmFuc3BvcnQuXG4gICAgICovXG5mdW5jdGlvbih0LCBlLCBuLCByLCBpLCBvKSB7XG4gICAgdGhpcy50ID0gdCwgdGhpcy5wZXJzaXN0ZW5jZUtleSA9IGUsIHRoaXMuaG9zdCA9IG4sIHRoaXMuc3NsID0gciwgdGhpcy5mb3JjZUxvbmdQb2xsaW5nID0gaSwgXG4gICAgdGhpcy5pID0gbztcbn0sIF8gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLnByb2plY3RJZCA9IHQsIHRoaXMuZGF0YWJhc2UgPSBlIHx8IFwiKGRlZmF1bHQpXCI7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwib1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIoZGVmYXVsdClcIiA9PT0gdGhpcy5kYXRhYmFzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiB0ICYmIGUucHJvamVjdElkID09PSB0aGlzLnByb2plY3RJZCAmJiBlLmRhdGFiYXNlID09PSB0aGlzLmRhdGFiYXNlO1xuICAgIH0sIHQ7XG59KCksIEkgPSBuZXcgbyhcIkBmaXJlYmFzZS9maXJlc3RvcmVcIik7XG5cbi8qKiBUaGUgZGVmYXVsdCBkYXRhYmFzZSBuYW1lIGZvciBhIHByb2plY3QuICovXG4vKiogUmVwcmVzZW50cyB0aGUgZGF0YWJhc2UgSUQgYSBGaXJlc3RvcmUgY2xpZW50IGlzIGFzc29jaWF0ZWQgd2l0aC4gKi9cbi8vIEhlbHBlciBtZXRob2RzIGFyZSBuZWVkZWQgYmVjYXVzZSB2YXJpYWJsZXMgY2FuJ3QgYmUgZXhwb3J0ZWQgYXMgcmVhZC93cml0ZVxuZnVuY3Rpb24gRSgpIHtcbiAgICByZXR1cm4gSS5sb2dMZXZlbDtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB2ZXJib3NpdHkgb2YgQ2xvdWQgRmlyZXN0b3JlIGxvZ3MgKGRlYnVnLCBlcnJvciwgb3Igc2lsZW50KS5cbiAqXG4gKiBAcGFyYW0gbG9nTGV2ZWxcbiAqICAgVGhlIHZlcmJvc2l0eSB5b3Ugc2V0IGZvciBhY3Rpdml0eSBhbmQgZXJyb3IgbG9nZ2luZy4gQ2FuIGJlIGFueSBvZlxuICogICB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAqXG4gKiAgIDx1bD5cbiAqICAgICA8bGk+YGRlYnVnYCBmb3IgdGhlIG1vc3QgdmVyYm9zZSBsb2dnaW5nIGxldmVsLCBwcmltYXJpbHkgZm9yXG4gKiAgICAgZGVidWdnaW5nLjwvbGk+XG4gKiAgICAgPGxpPmBlcnJvcmAgdG8gbG9nIGVycm9ycyBvbmx5LjwvbGk+XG4gKiAgICAgPGxpPjxjb2RlPmBzaWxlbnRgIHRvIHR1cm4gb2ZmIGxvZ2dpbmcuPC9saT5cbiAqICAgPC91bD5cbiAqLyBmdW5jdGlvbiBUKHQpIHtcbiAgICBmb3IgKHZhciBlID0gW10sIG4gPSAxOyBuIDwgYXJndW1lbnRzLmxlbmd0aDsgbisrKSBlW24gLSAxXSA9IGFyZ3VtZW50c1tuXTtcbiAgICBpZiAoSS5sb2dMZXZlbCA8PSB1LkRFQlVHKSB7XG4gICAgICAgIHZhciBpID0gZS5tYXAoQSk7XG4gICAgICAgIEkuZGVidWcuYXBwbHkoSSwgcihbIFwiRmlyZXN0b3JlICg4LjAuMik6IFwiICsgdCBdLCBpKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBOKHQpIHtcbiAgICBmb3IgKHZhciBlID0gW10sIG4gPSAxOyBuIDwgYXJndW1lbnRzLmxlbmd0aDsgbisrKSBlW24gLSAxXSA9IGFyZ3VtZW50c1tuXTtcbiAgICBpZiAoSS5sb2dMZXZlbCA8PSB1LkVSUk9SKSB7XG4gICAgICAgIHZhciBpID0gZS5tYXAoQSk7XG4gICAgICAgIEkuZXJyb3IuYXBwbHkoSSwgcihbIFwiRmlyZXN0b3JlICg4LjAuMik6IFwiICsgdCBdLCBpKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB4KHQpIHtcbiAgICBmb3IgKHZhciBlID0gW10sIG4gPSAxOyBuIDwgYXJndW1lbnRzLmxlbmd0aDsgbisrKSBlW24gLSAxXSA9IGFyZ3VtZW50c1tuXTtcbiAgICBpZiAoSS5sb2dMZXZlbCA8PSB1LldBUk4pIHtcbiAgICAgICAgdmFyIGkgPSBlLm1hcChBKTtcbiAgICAgICAgSS53YXJuLmFwcGx5KEksIHIoWyBcIkZpcmVzdG9yZSAoOC4wLjIpOiBcIiArIHQgXSwgaSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhZGRpdGlvbmFsIGxvZyBwYXJhbWV0ZXIgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gQSh0KSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHJldHVybiB0O1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBlID0gdCwgSlNPTi5zdHJpbmdpZnkoZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBDb252ZXJ0aW5nIHRvIEpTT04gZmFpbGVkLCBqdXN0IGxvZyB0aGUgb2JqZWN0IGRpcmVjdGx5XG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cbiAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgIC8qKiBGb3JtYXRzIGFuIG9iamVjdCBhcyBhIEpTT04gc3RyaW5nLCBzdWl0YWJsZSBmb3IgbG9nZ2luZy4gKi8gICAgdmFyIGU7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFVuY29uZGl0aW9uYWxseSBmYWlscywgdGhyb3dpbmcgYW4gRXJyb3Igd2l0aCB0aGUgZ2l2ZW4gbWVzc2FnZS5cbiAqIE1lc3NhZ2VzIGFyZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcy5cbiAqXG4gKiBSZXR1cm5zIGBuZXZlcmAgYW5kIGNhbiBiZSB1c2VkIGluIGV4cHJlc3Npb25zOlxuICogQGV4YW1wbGVcbiAqIGxldCBmdXR1cmVWYXIgPSBmYWlsKCdub3QgaW1wbGVtZW50ZWQgeWV0Jyk7XG4gKi8gZnVuY3Rpb24gUyh0KSB7XG4gICAgdm9pZCAwID09PSB0ICYmICh0ID0gXCJVbmV4cGVjdGVkIHN0YXRlXCIpO1xuICAgIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcbiAgICAvLyBleGNlcHRpb24gaXMgc3dhbGxvd2VkLlxuICAgICAgICB2YXIgZSA9IFwiRklSRVNUT1JFICg4LjAuMikgSU5URVJOQUwgQVNTRVJUSU9OIEZBSUxFRDogXCIgKyB0O1xuICAgIC8vIE5PVEU6IFdlIGRvbid0IHVzZSBGaXJlc3RvcmVFcnJvciBoZXJlIGJlY2F1c2UgdGhlc2UgYXJlIGludGVybmFsIGZhaWx1cmVzXG4gICAgLy8gdGhhdCBjYW5ub3QgYmUgaGFuZGxlZCBieSB0aGUgdXNlci4gKEFsc28gaXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXJcbiAgICAvLyBkZXBlbmRlbmN5IGJldHdlZW4gdGhlIGVycm9yIGFuZCBhc3NlcnQgbW9kdWxlcyB3aGljaCBkb2Vzbid0IHdvcmsuKVxuICAgICAgICB0aHJvdyBOKGUpLCBuZXcgRXJyb3IoZSlcbiAgICAvKipcbiAqIEZhaWxzIGlmIHRoZSBnaXZlbiBhc3NlcnRpb24gY29uZGl0aW9uIGlzIGZhbHNlLCB0aHJvd2luZyBhbiBFcnJvciB3aXRoIHRoZVxuICogZ2l2ZW4gbWVzc2FnZSBpZiBpdCBkaWQuXG4gKlxuICogTWVzc2FnZXMgYXJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuICovO1xufVxuXG5mdW5jdGlvbiBrKHQsIGUpIHtcbiAgICB0IHx8IFMoKTtcbn1cblxuLyoqXG4gKiBDYXN0cyBgb2JqYCB0byBgVGAuIEluIG5vbi1wcm9kdWN0aW9uIGJ1aWxkcywgdmVyaWZpZXMgdGhhdCBgb2JqYCBpcyBhblxuICogaW5zdGFuY2Ugb2YgYFRgIGJlZm9yZSBjYXN0aW5nLlxuICovIGZ1bmN0aW9uIEQodCwgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZSkge1xuICAgIHJldHVybiB0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBHZW5lcmF0ZXMgYG5CeXRlc2Agb2YgcmFuZG9tIGJ5dGVzLlxuICpcbiAqIElmIGBuQnl0ZXMgPCAwYCAsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICovIGZ1bmN0aW9uIE8odCkge1xuICAgIC8vIFBvbHlmaWxscyBmb3IgSUUgYW5kIFdlYldvcmtlciBieSB1c2luZyBgc2VsZmAgYW5kIGBtc0NyeXB0b2Agd2hlbiBgY3J5cHRvYCBpcyBub3QgYXZhaWxhYmxlLlxuICAgIHZhciBlID0gXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZWxmICYmIChzZWxmLmNyeXB0byB8fCBzZWxmLm1zQ3J5cHRvKSwgbiA9IG5ldyBVaW50OEFycmF5KHQpO1xuICAgIGlmIChlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5nZXRSYW5kb21WYWx1ZXMpIGUuZ2V0UmFuZG9tVmFsdWVzKG4pOyBlbHNlIFxuICAgIC8vIEZhbGxzIGJhY2sgdG8gTWF0aC5yYW5kb21cbiAgICBmb3IgKHZhciByID0gMDsgciA8IHQ7IHIrKykgbltyXSA9IE1hdGguZmxvb3IoMjU2ICogTWF0aC5yYW5kb20oKSk7XG4gICAgcmV0dXJuIG47XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIHZhciBQID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge31cbiAgICByZXR1cm4gdC51ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgIC8vIEFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzXG4gICAgICAgIHZhciB0ID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiLCBlID0gTWF0aC5mbG9vcigyNTYgLyB0Lmxlbmd0aCkgKiB0Lmxlbmd0aCwgbiA9IFwiXCJcbiAgICAgICAgLy8gVGhlIGxhcmdlc3QgYnl0ZSB2YWx1ZSB0aGF0IGlzIGEgbXVsdGlwbGUgb2YgYGNoYXIubGVuZ3RoYC5cbiAgICAgICAgOyBuLmxlbmd0aCA8IDIwOyApIGZvciAodmFyIHIgPSBPKDQwKSwgaSA9IDA7IGkgPCByLmxlbmd0aDsgKytpKSBcbiAgICAgICAgLy8gT25seSBhY2NlcHQgdmFsdWVzIHRoYXQgYXJlIFswLCBtYXhNdWx0aXBsZSksIHRoaXMgZW5zdXJlcyB0aGV5IGNhblxuICAgICAgICAvLyBiZSBldmVubHkgbWFwcGVkIHRvIGluZGljZXMgb2YgYGNoYXJzYCB2aWEgYSBtb2R1bG8gb3BlcmF0aW9uLlxuICAgICAgICBuLmxlbmd0aCA8IDIwICYmIHJbaV0gPCBlICYmIChuICs9IHQuY2hhckF0KHJbaV0gJSB0Lmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9LCB0O1xufSgpO1xuXG5mdW5jdGlvbiBWKHQsIGUpIHtcbiAgICByZXR1cm4gdCA8IGUgPyAtMSA6IHQgPiBlID8gMSA6IDA7XG59XG5cbi8qKiBIZWxwZXIgdG8gY29tcGFyZSBhcnJheXMgdXNpbmcgaXNFcXVhbCgpLiAqLyBmdW5jdGlvbiBDKHQsIGUsIG4pIHtcbiAgICByZXR1cm4gdC5sZW5ndGggPT09IGUubGVuZ3RoICYmIHQuZXZlcnkoKGZ1bmN0aW9uKHQsIHIpIHtcbiAgICAgICAgcmV0dXJuIG4odCwgZVtyXSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGltbWVkaWF0ZSBsZXhpY29ncmFwaGljYWxseS1mb2xsb3dpbmcgc3RyaW5nLiBUaGlzIGlzIHVzZWZ1bCB0b1xuICogY29uc3RydWN0IGFuIGluY2x1c2l2ZSByYW5nZSBmb3IgaW5kZXhlZGRiIGl0ZXJhdG9ycy5cbiAqLyBmdW5jdGlvbiBMKHQpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGlucHV0IHN0cmluZywgd2l0aCBhbiBhZGRpdGlvbmFsIE5VTCBieXRlIGFwcGVuZGVkLlxuICAgIHJldHVybiB0ICsgXCJcXDBcIjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gZnVuY3Rpb24gUih0KSB7XG4gICAgdmFyIGUgPSAwO1xuICAgIGZvciAodmFyIG4gaW4gdCkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG4pICYmIGUrKztcbiAgICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gTSh0LCBlKSB7XG4gICAgZm9yICh2YXIgbiBpbiB0KSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgbikgJiYgZShuLCB0W25dKTtcbn1cblxuZnVuY3Rpb24gVSh0KSB7XG4gICAgZm9yICh2YXIgZSBpbiB0KSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIGUpKSByZXR1cm4gITE7XG4gICAgcmV0dXJuICEwO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIG1hcCBpbXBsZW1lbnRhdGlvbiB0aGF0IHVzZXMgb2JqZWN0cyBhcyBrZXlzLiBPYmplY3RzIG11c3QgaGF2ZSBhblxuICogYXNzb2NpYXRlZCBlcXVhbHMgZnVuY3Rpb24gYW5kIG11c3QgYmUgaW1tdXRhYmxlLiBFbnRyaWVzIGluIHRoZSBtYXAgYXJlXG4gKiBzdG9yZWQgdG9nZXRoZXIgd2l0aCB0aGUga2V5IGJlaW5nIHByb2R1Y2VkIGZyb20gdGhlIG1hcEtleUZuLiBUaGlzIG1hcFxuICogYXV0b21hdGljYWxseSBoYW5kbGVzIGNvbGxpc2lvbnMgb2Yga2V5cy5cbiAqLyB2YXIgcSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuaCA9IHQsIHRoaXMubCA9IGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBpbm5lciBtYXAgZm9yIGEga2V5IC0+IHZhbHVlIHBhaXIuIER1ZSB0byB0aGUgcG9zc2liaWxpdHkgb2ZcbiAgICAgICAgICAgICAqIGNvbGxpc2lvbnMgd2Uga2VlcCBhIGxpc3Qgb2YgZW50cmllcyB0aGF0IHdlIGRvIGEgbGluZWFyIHNlYXJjaCB0aHJvdWdoXG4gICAgICAgICAgICAgKiB0byBmaW5kIGFuIGFjdHVhbCBtYXRjaC4gTm90ZSB0aGF0IGNvbGxpc2lvbnMgc2hvdWxkIGJlIHJhcmUsIHNvIHdlIHN0aWxsXG4gICAgICAgICAgICAgKiBleHBlY3QgbmVhciBjb25zdGFudCB0aW1lIGxvb2t1cHMgaW4gcHJhY3RpY2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fID0ge31cbiAgICAgICAgLyoqIEdldCBhIHZhbHVlIGZvciB0aGlzIGtleSwgb3IgdW5kZWZpbmVkIGlmIGl0IGRvZXMgbm90IGV4aXN0LiAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmgodCksIG4gPSB0aGlzLl9bZV07XG4gICAgICAgIGlmICh2b2lkIDAgIT09IG4pIGZvciAodmFyIHIgPSAwLCBpID0gbjsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gaVtyXSwgdSA9IG9bMF0sIHMgPSBvWzFdO1xuICAgICAgICAgICAgaWYgKHRoaXMubCh1LCB0KSkgcmV0dXJuIHM7XG4gICAgICAgIH1cbiAgICB9LCB0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMuZ2V0KHQpO1xuICAgIH0sIFxuICAgIC8qKiBQdXQgdGhpcyBrZXkgYW5kIHZhbHVlIGluIHRoZSBtYXAuICovIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmgodCksIHIgPSB0aGlzLl9bbl07XG4gICAgICAgIGlmICh2b2lkIDAgIT09IHIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgci5sZW5ndGg7IGkrKykgaWYgKHRoaXMubChyW2ldWzBdLCB0KSkgcmV0dXJuIHZvaWQgKHJbaV0gPSBbIHQsIGUgXSk7XG4gICAgICAgICAgICByLnB1c2goWyB0LCBlIF0pO1xuICAgICAgICB9IGVsc2UgdGhpcy5fW25dID0gWyBbIHQsIGUgXSBdO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGlzIGtleSBmcm9tIHRoZSBtYXAuIFJldHVybnMgYSBib29sZWFuIGlmIGFueXRoaW5nIHdhcyBkZWxldGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmgodCksIG4gPSB0aGlzLl9bZV07XG4gICAgICAgIGlmICh2b2lkIDAgPT09IG4pIHJldHVybiAhMTtcbiAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBuLmxlbmd0aDsgcisrKSBpZiAodGhpcy5sKG5bcl1bMF0sIHQpKSByZXR1cm4gMSA9PT0gbi5sZW5ndGggPyBkZWxldGUgdGhpcy5fW2VdIDogbi5zcGxpY2UociwgMSksIFxuICAgICAgICAhMDtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH0sIHQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIE0odGhpcy5fLCAoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSBuOyByIDwgaS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgICAgIHZhciBvID0gaVtyXSwgdSA9IG9bMF0sIHMgPSBvWzFdO1xuICAgICAgICAgICAgICAgIHQodSwgcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5UID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBVKHRoaXMuXyk7XG4gICAgfSwgdDtcbn0oKSwgRiA9IHtcbiAgICAvLyBDYXVzZXMgYXJlIGNvcGllZCBmcm9tOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9iY2VlYzk0ZWE0ZmM1ZjAwODVkODEyMzVkOGUxYzA2Nzk4ZGMzNDFhL2luY2x1ZGUvZ3JwYyUyQiUyQi9pbXBsL2NvZGVnZW4vc3RhdHVzX2NvZGVfZW51bS5oXG4gICAgLyoqIE5vdCBhbiBlcnJvcjsgcmV0dXJuZWQgb24gc3VjY2Vzcy4gKi9cbiAgICBPSzogXCJva1wiLFxuICAgIC8qKiBUaGUgb3BlcmF0aW9uIHdhcyBjYW5jZWxsZWQgKHR5cGljYWxseSBieSB0aGUgY2FsbGVyKS4gKi9cbiAgICBDQU5DRUxMRUQ6IFwiY2FuY2VsbGVkXCIsXG4gICAgLyoqIFVua25vd24gZXJyb3Igb3IgYW4gZXJyb3IgZnJvbSBhIGRpZmZlcmVudCBlcnJvciBkb21haW4uICovXG4gICAgVU5LTk9XTjogXCJ1bmtub3duXCIsXG4gICAgLyoqXG4gICAgICogQ2xpZW50IHNwZWNpZmllZCBhbiBpbnZhbGlkIGFyZ3VtZW50LiBOb3RlIHRoYXQgdGhpcyBkaWZmZXJzIGZyb21cbiAgICAgKiBGQUlMRURfUFJFQ09ORElUSU9OLiBJTlZBTElEX0FSR1VNRU5UIGluZGljYXRlcyBhcmd1bWVudHMgdGhhdCBhcmVcbiAgICAgKiBwcm9ibGVtYXRpYyByZWdhcmRsZXNzIG9mIHRoZSBzdGF0ZSBvZiB0aGUgc3lzdGVtIChlLmcuLCBhIG1hbGZvcm1lZCBmaWxlXG4gICAgICogbmFtZSkuXG4gICAgICovXG4gICAgSU5WQUxJRF9BUkdVTUVOVDogXCJpbnZhbGlkLWFyZ3VtZW50XCIsXG4gICAgLyoqXG4gICAgICogRGVhZGxpbmUgZXhwaXJlZCBiZWZvcmUgb3BlcmF0aW9uIGNvdWxkIGNvbXBsZXRlLiBGb3Igb3BlcmF0aW9ucyB0aGF0XG4gICAgICogY2hhbmdlIHRoZSBzdGF0ZSBvZiB0aGUgc3lzdGVtLCB0aGlzIGVycm9yIG1heSBiZSByZXR1cm5lZCBldmVuIGlmIHRoZVxuICAgICAqIG9wZXJhdGlvbiBoYXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gRm9yIGV4YW1wbGUsIGEgc3VjY2Vzc2Z1bCByZXNwb25zZVxuICAgICAqIGZyb20gYSBzZXJ2ZXIgY291bGQgaGF2ZSBiZWVuIGRlbGF5ZWQgbG9uZyBlbm91Z2ggZm9yIHRoZSBkZWFkbGluZSB0b1xuICAgICAqIGV4cGlyZS5cbiAgICAgKi9cbiAgICBERUFETElORV9FWENFRURFRDogXCJkZWFkbGluZS1leGNlZWRlZFwiLFxuICAgIC8qKiBTb21lIHJlcXVlc3RlZCBlbnRpdHkgKGUuZy4sIGZpbGUgb3IgZGlyZWN0b3J5KSB3YXMgbm90IGZvdW5kLiAqL1xuICAgIE5PVF9GT1VORDogXCJub3QtZm91bmRcIixcbiAgICAvKipcbiAgICAgKiBTb21lIGVudGl0eSB0aGF0IHdlIGF0dGVtcHRlZCB0byBjcmVhdGUgKGUuZy4sIGZpbGUgb3IgZGlyZWN0b3J5KSBhbHJlYWR5XG4gICAgICogZXhpc3RzLlxuICAgICAqL1xuICAgIEFMUkVBRFlfRVhJU1RTOiBcImFscmVhZHktZXhpc3RzXCIsXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxlciBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gZXhlY3V0ZSB0aGUgc3BlY2lmaWVkIG9wZXJhdGlvbi5cbiAgICAgKiBQRVJNSVNTSU9OX0RFTklFRCBtdXN0IG5vdCBiZSB1c2VkIGZvciByZWplY3Rpb25zIGNhdXNlZCBieSBleGhhdXN0aW5nXG4gICAgICogc29tZSByZXNvdXJjZSAodXNlIFJFU09VUkNFX0VYSEFVU1RFRCBpbnN0ZWFkIGZvciB0aG9zZSBlcnJvcnMpLlxuICAgICAqIFBFUk1JU1NJT05fREVOSUVEIG11c3Qgbm90IGJlIHVzZWQgaWYgdGhlIGNhbGxlciBjYW4gbm90IGJlIGlkZW50aWZpZWRcbiAgICAgKiAodXNlIFVOQVVUSEVOVElDQVRFRCBpbnN0ZWFkIGZvciB0aG9zZSBlcnJvcnMpLlxuICAgICAqL1xuICAgIFBFUk1JU1NJT05fREVOSUVEOiBcInBlcm1pc3Npb24tZGVuaWVkXCIsXG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3QgZG9lcyBub3QgaGF2ZSB2YWxpZCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBmb3IgdGhlXG4gICAgICogb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIFVOQVVUSEVOVElDQVRFRDogXCJ1bmF1dGhlbnRpY2F0ZWRcIixcbiAgICAvKipcbiAgICAgKiBTb21lIHJlc291cmNlIGhhcyBiZWVuIGV4aGF1c3RlZCwgcGVyaGFwcyBhIHBlci11c2VyIHF1b3RhLCBvciBwZXJoYXBzIHRoZVxuICAgICAqIGVudGlyZSBmaWxlIHN5c3RlbSBpcyBvdXQgb2Ygc3BhY2UuXG4gICAgICovXG4gICAgUkVTT1VSQ0VfRVhIQVVTVEVEOiBcInJlc291cmNlLWV4aGF1c3RlZFwiLFxuICAgIC8qKlxuICAgICAqIE9wZXJhdGlvbiB3YXMgcmVqZWN0ZWQgYmVjYXVzZSB0aGUgc3lzdGVtIGlzIG5vdCBpbiBhIHN0YXRlIHJlcXVpcmVkIGZvclxuICAgICAqIHRoZSBvcGVyYXRpb24ncyBleGVjdXRpb24uIEZvciBleGFtcGxlLCBkaXJlY3RvcnkgdG8gYmUgZGVsZXRlZCBtYXkgYmVcbiAgICAgKiBub24tZW1wdHksIGFuIHJtZGlyIG9wZXJhdGlvbiBpcyBhcHBsaWVkIHRvIGEgbm9uLWRpcmVjdG9yeSwgZXRjLlxuICAgICAqXG4gICAgICogQSBsaXRtdXMgdGVzdCB0aGF0IG1heSBoZWxwIGEgc2VydmljZSBpbXBsZW1lbnRvciBpbiBkZWNpZGluZ1xuICAgICAqIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCwgYW5kIFVOQVZBSUxBQkxFOlxuICAgICAqICAoYSkgVXNlIFVOQVZBSUxBQkxFIGlmIHRoZSBjbGllbnQgY2FuIHJldHJ5IGp1c3QgdGhlIGZhaWxpbmcgY2FsbC5cbiAgICAgKiAgKGIpIFVzZSBBQk9SVEVEIGlmIHRoZSBjbGllbnQgc2hvdWxkIHJldHJ5IGF0IGEgaGlnaGVyLWxldmVsXG4gICAgICogICAgICAoZS5nLiwgcmVzdGFydGluZyBhIHJlYWQtbW9kaWZ5LXdyaXRlIHNlcXVlbmNlKS5cbiAgICAgKiAgKGMpIFVzZSBGQUlMRURfUFJFQ09ORElUSU9OIGlmIHRoZSBjbGllbnQgc2hvdWxkIG5vdCByZXRyeSB1bnRpbFxuICAgICAqICAgICAgdGhlIHN5c3RlbSBzdGF0ZSBoYXMgYmVlbiBleHBsaWNpdGx5IGZpeGVkLiBFLmcuLCBpZiBhbiBcInJtZGlyXCJcbiAgICAgKiAgICAgIGZhaWxzIGJlY2F1c2UgdGhlIGRpcmVjdG9yeSBpcyBub24tZW1wdHksIEZBSUxFRF9QUkVDT05ESVRJT05cbiAgICAgKiAgICAgIHNob3VsZCBiZSByZXR1cm5lZCBzaW5jZSB0aGUgY2xpZW50IHNob3VsZCBub3QgcmV0cnkgdW5sZXNzXG4gICAgICogICAgICB0aGV5IGhhdmUgZmlyc3QgZml4ZWQgdXAgdGhlIGRpcmVjdG9yeSBieSBkZWxldGluZyBmaWxlcyBmcm9tIGl0LlxuICAgICAqICAoZCkgVXNlIEZBSUxFRF9QUkVDT05ESVRJT04gaWYgdGhlIGNsaWVudCBwZXJmb3JtcyBjb25kaXRpb25hbFxuICAgICAqICAgICAgUkVTVCBHZXQvVXBkYXRlL0RlbGV0ZSBvbiBhIHJlc291cmNlIGFuZCB0aGUgcmVzb3VyY2Ugb24gdGhlXG4gICAgICogICAgICBzZXJ2ZXIgZG9lcyBub3QgbWF0Y2ggdGhlIGNvbmRpdGlvbi4gRS5nLiwgY29uZmxpY3RpbmdcbiAgICAgKiAgICAgIHJlYWQtbW9kaWZ5LXdyaXRlIG9uIHRoZSBzYW1lIHJlc291cmNlLlxuICAgICAqL1xuICAgIEZBSUxFRF9QUkVDT05ESVRJT046IFwiZmFpbGVkLXByZWNvbmRpdGlvblwiLFxuICAgIC8qKlxuICAgICAqIFRoZSBvcGVyYXRpb24gd2FzIGFib3J0ZWQsIHR5cGljYWxseSBkdWUgdG8gYSBjb25jdXJyZW5jeSBpc3N1ZSBsaWtlXG4gICAgICogc2VxdWVuY2VyIGNoZWNrIGZhaWx1cmVzLCB0cmFuc2FjdGlvbiBhYm9ydHMsIGV0Yy5cbiAgICAgKlxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxuICAgICAqIGFuZCBVTkFWQUlMQUJMRS5cbiAgICAgKi9cbiAgICBBQk9SVEVEOiBcImFib3J0ZWRcIixcbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb24gd2FzIGF0dGVtcHRlZCBwYXN0IHRoZSB2YWxpZCByYW5nZS4gRS5nLiwgc2Vla2luZyBvciByZWFkaW5nXG4gICAgICogcGFzdCBlbmQgb2YgZmlsZS5cbiAgICAgKlxuICAgICAqIFVubGlrZSBJTlZBTElEX0FSR1VNRU5ULCB0aGlzIGVycm9yIGluZGljYXRlcyBhIHByb2JsZW0gdGhhdCBtYXkgYmUgZml4ZWRcbiAgICAgKiBpZiB0aGUgc3lzdGVtIHN0YXRlIGNoYW5nZXMuIEZvciBleGFtcGxlLCBhIDMyLWJpdCBmaWxlIHN5c3RlbSB3aWxsXG4gICAgICogZ2VuZXJhdGUgSU5WQUxJRF9BUkdVTUVOVCBpZiBhc2tlZCB0byByZWFkIGF0IGFuIG9mZnNldCB0aGF0IGlzIG5vdCBpbiB0aGVcbiAgICAgKiByYW5nZSBbMCwyXjMyLTFdLCBidXQgaXQgd2lsbCBnZW5lcmF0ZSBPVVRfT0ZfUkFOR0UgaWYgYXNrZWQgdG8gcmVhZCBmcm9tXG4gICAgICogYW4gb2Zmc2V0IHBhc3QgdGhlIGN1cnJlbnQgZmlsZSBzaXplLlxuICAgICAqXG4gICAgICogVGhlcmUgaXMgYSBmYWlyIGJpdCBvZiBvdmVybGFwIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiBhbmRcbiAgICAgKiBPVVRfT0ZfUkFOR0UuIFdlIHJlY29tbWVuZCB1c2luZyBPVVRfT0ZfUkFOR0UgKHRoZSBtb3JlIHNwZWNpZmljIGVycm9yKVxuICAgICAqIHdoZW4gaXQgYXBwbGllcyBzbyB0aGF0IGNhbGxlcnMgd2hvIGFyZSBpdGVyYXRpbmcgdGhyb3VnaCBhIHNwYWNlIGNhblxuICAgICAqIGVhc2lseSBsb29rIGZvciBhbiBPVVRfT0ZfUkFOR0UgZXJyb3IgdG8gZGV0ZWN0IHdoZW4gdGhleSBhcmUgZG9uZS5cbiAgICAgKi9cbiAgICBPVVRfT0ZfUkFOR0U6IFwib3V0LW9mLXJhbmdlXCIsXG4gICAgLyoqIE9wZXJhdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgb3Igbm90IHN1cHBvcnRlZC9lbmFibGVkIGluIHRoaXMgc2VydmljZS4gKi9cbiAgICBVTklNUExFTUVOVEVEOiBcInVuaW1wbGVtZW50ZWRcIixcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBlcnJvcnMuIE1lYW5zIHNvbWUgaW52YXJpYW50cyBleHBlY3RlZCBieSB1bmRlcmx5aW5nIFN5c3RlbSBoYXNcbiAgICAgKiBiZWVuIGJyb2tlbi4gSWYgeW91IHNlZSBvbmUgb2YgdGhlc2UgZXJyb3JzLCBTb21ldGhpbmcgaXMgdmVyeSBicm9rZW4uXG4gICAgICovXG4gICAgSU5URVJOQUw6IFwiaW50ZXJuYWxcIixcbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmljZSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUuIFRoaXMgaXMgYSBtb3N0IGxpa2VseSBhIHRyYW5zaWVudFxuICAgICAqIGNvbmRpdGlvbiBhbmQgbWF5IGJlIGNvcnJlY3RlZCBieSByZXRyeWluZyB3aXRoIGEgYmFja29mZi5cbiAgICAgKlxuICAgICAqIFNlZSBsaXRtdXMgdGVzdCBhYm92ZSBmb3IgZGVjaWRpbmcgYmV0d2VlbiBGQUlMRURfUFJFQ09ORElUSU9OLCBBQk9SVEVELFxuICAgICAqIGFuZCBVTkFWQUlMQUJMRS5cbiAgICAgKi9cbiAgICBVTkFWQUlMQUJMRTogXCJ1bmF2YWlsYWJsZVwiLFxuICAgIC8qKiBVbnJlY292ZXJhYmxlIGRhdGEgbG9zcyBvciBjb3JydXB0aW9uLiAqL1xuICAgIERBVEFfTE9TUzogXCJkYXRhLWxvc3NcIlxufSwgaiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzLCBuKSB8fCB0aGlzKS5jb2RlID0gdCwgci5tZXNzYWdlID0gbiwgci5uYW1lID0gXCJGaXJlYmFzZUVycm9yXCIsIFxuICAgICAgICAvLyBIQUNLOiBXZSB3cml0ZSBhIHRvU3RyaW5nIHByb3BlcnR5IGRpcmVjdGx5IGJlY2F1c2UgRXJyb3IgaXMgbm90IGEgcmVhbFxuICAgICAgICAvLyBjbGFzcyBhbmQgc28gaW5oZXJpdGFuY2UgZG9lcyBub3Qgd29yayBjb3JyZWN0bHkuIFdlIGNvdWxkIGFsdGVybmF0aXZlbHlcbiAgICAgICAgLy8gZG8gdGhlIHNhbWUgXCJiYWNrLWRvb3IgaW5oZXJpdGFuY2VcIiB0cmljayB0aGF0IEZpcmViYXNlRXJyb3IgZG9lcy5cbiAgICAgICAgci50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHIubmFtZSArIFwiOiBbY29kZT1cIiArIHIuY29kZSArIFwiXTogXCIgKyByLm1lc3NhZ2U7XG4gICAgICAgIH0sIHI7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuO1xufShFcnJvciksIEIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlY29uZHMgVGhlIG51bWJlciBvZiBzZWNvbmRzIG9mIFVUQyB0aW1lIHNpbmNlIFVuaXggZXBvY2hcbiAgICAgKiAgICAgMTk3MC0wMS0wMVQwMDowMDowMFouIE11c3QgYmUgZnJvbSAwMDAxLTAxLTAxVDAwOjAwOjAwWiB0b1xuICAgICAqICAgICA5OTk5LTEyLTMxVDIzOjU5OjU5WiBpbmNsdXNpdmUuXG4gICAgICogQHBhcmFtIG5hbm9zZWNvbmRzIFRoZSBub24tbmVnYXRpdmUgZnJhY3Rpb25zIG9mIGEgc2Vjb25kIGF0IG5hbm9zZWNvbmRcbiAgICAgKiAgICAgcmVzb2x1dGlvbi4gTmVnYXRpdmUgc2Vjb25kIHZhbHVlcyB3aXRoIGZyYWN0aW9ucyBtdXN0IHN0aWxsIGhhdmVcbiAgICAgKiAgICAgbm9uLW5lZ2F0aXZlIG5hbm9zZWNvbmRzIHZhbHVlcyB0aGF0IGNvdW50IGZvcndhcmQgaW4gdGltZS4gTXVzdCBiZVxuICAgICAqICAgICBmcm9tIDAgdG8gOTk5LDk5OSw5OTkgaW5jbHVzaXZlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICBpZiAodGhpcy5zZWNvbmRzID0gdCwgdGhpcy5uYW5vc2Vjb25kcyA9IGUsIGUgPCAwKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiVGltZXN0YW1wIG5hbm9zZWNvbmRzIG91dCBvZiByYW5nZTogXCIgKyBlKTtcbiAgICAgICAgaWYgKGUgPj0gMWU5KSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiVGltZXN0YW1wIG5hbm9zZWNvbmRzIG91dCBvZiByYW5nZTogXCIgKyBlKTtcbiAgICAgICAgaWYgKHQgPCAtNjIxMzU1OTY4MDApIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJUaW1lc3RhbXAgc2Vjb25kcyBvdXQgb2YgcmFuZ2U6IFwiICsgdCk7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBicmVhayBpbiB0aGUgeWVhciAxMCwwMDAuXG4gICAgICAgICAgICAgICAgaWYgKHQgPj0gMjUzNDAyMzAwODAwKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiVGltZXN0YW1wIHNlY29uZHMgb3V0IG9mIHJhbmdlOiBcIiArIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRpbWVzdGFtcCB3aXRoIHRoZSBjdXJyZW50IGRhdGUsIHdpdGggbWlsbGlzZWNvbmQgcHJlY2lzaW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiBhIG5ldyB0aW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGRhdGUuXG4gICAgICovICAgIHJldHVybiB0Lm5vdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdC5mcm9tTWlsbGlzKERhdGUubm93KCkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0ZSBUaGUgZGF0ZSB0byBpbml0aWFsaXplIHRoZSBgVGltZXN0YW1wYCBmcm9tLlxuICAgICAqIEByZXR1cm4gQSBuZXcgYFRpbWVzdGFtcGAgcmVwcmVzZW50aW5nIHRoZSBzYW1lIHBvaW50IGluIHRpbWUgYXMgdGhlIGdpdmVuXG4gICAgICogICAgIGRhdGUuXG4gICAgICovXG4gICAgdC5mcm9tRGF0ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHQuZnJvbU1pbGxpcyhlLmdldFRpbWUoKSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0aW1lc3RhbXAgZnJvbSB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtaWxsaXNlY29uZHMgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSBVbml4IGVwb2NoXG4gICAgICogICAgIDE5NzAtMDEtMDFUMDA6MDA6MDBaLlxuICAgICAqIEByZXR1cm4gQSBuZXcgYFRpbWVzdGFtcGAgcmVwcmVzZW50aW5nIHRoZSBzYW1lIHBvaW50IGluIHRpbWUgYXMgdGhlIGdpdmVuXG4gICAgICogICAgIG51bWJlciBvZiBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgdC5mcm9tTWlsbGlzID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbiA9IE1hdGguZmxvb3IoZSAvIDFlMyk7XG4gICAgICAgIHJldHVybiBuZXcgdChuLCAxZTYgKiAoZSAtIDFlMyAqIG4pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGBUaW1lc3RhbXBgIHRvIGEgSmF2YVNjcmlwdCBgRGF0ZWAgb2JqZWN0LiBUaGlzIGNvbnZlcnNpb24gY2F1c2VzXG4gICAgICogYSBsb3NzIG9mIHByZWNpc2lvbiBzaW5jZSBgRGF0ZWAgb2JqZWN0cyBvbmx5IHN1cHBvcnQgbWlsbGlzZWNvbmQgcHJlY2lzaW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiBKYXZhU2NyaXB0IGBEYXRlYCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzYW1lIHBvaW50IGluIHRpbWUgYXNcbiAgICAgKiAgICAgdGhpcyBgVGltZXN0YW1wYCwgd2l0aCBtaWxsaXNlY29uZCBwcmVjaXNpb24uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudG9EYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnRvTWlsbGlzKCkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgYFRpbWVzdGFtcGAgdG8gYSBudW1lcmljIHRpbWVzdGFtcCAoaW4gbWlsbGlzZWNvbmRzIHNpbmNlXG4gICAgICogZXBvY2gpLiBUaGlzIG9wZXJhdGlvbiBjYXVzZXMgYSBsb3NzIG9mIHByZWNpc2lvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIHBvaW50IGluIHRpbWUgY29ycmVzcG9uZGluZyB0byB0aGlzIHRpbWVzdGFtcCwgcmVwcmVzZW50ZWQgYXNcbiAgICAgKiAgICAgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgVW5peCBlcG9jaCAxOTcwLTAxLTAxVDAwOjAwOjAwWi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS50b01pbGxpcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMWUzICogdGhpcy5zZWNvbmRzICsgdGhpcy5uYW5vc2Vjb25kcyAvIDFlNjtcbiAgICB9LCB0LnByb3RvdHlwZS5JID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWNvbmRzID09PSB0LnNlY29uZHMgPyBWKHRoaXMubmFub3NlY29uZHMsIHQubmFub3NlY29uZHMpIDogVih0aGlzLnNlY29uZHMsIHQuc2Vjb25kcyk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYFRpbWVzdGFtcGAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlciBUaGUgYFRpbWVzdGFtcGAgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGlzIGBUaW1lc3RhbXBgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuc2Vjb25kcyA9PT0gdGhpcy5zZWNvbmRzICYmIHQubmFub3NlY29uZHMgPT09IHRoaXMubmFub3NlY29uZHM7XG4gICAgfSwgdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiVGltZXN0YW1wKHNlY29uZHM9XCIgKyB0aGlzLnNlY29uZHMgKyBcIiwgbmFub3NlY29uZHM9XCIgKyB0aGlzLm5hbm9zZWNvbmRzICsgXCIpXCI7XG4gICAgfSwgdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWNvbmRzOiB0aGlzLnNlY29uZHMsXG4gICAgICAgICAgICBuYW5vc2Vjb25kczogdGhpcy5uYW5vc2Vjb25kc1xuICAgICAgICB9O1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgb2JqZWN0IHRvIGEgcHJpbWl0aXZlIHN0cmluZywgd2hpY2ggYWxsb3dzIFRpbWVzdGFtcCBvYmplY3RzIHRvIGJlIGNvbXBhcmVkXG4gICAgICogdXNpbmcgdGhlIGA+YCwgYDw9YCwgYD49YCBhbmQgYD5gIG9wZXJhdG9ycy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRoaXMgbWV0aG9kIHJldHVybnMgYSBzdHJpbmcgb2YgdGhlIGZvcm0gPHNlY29uZHM+LjxuYW5vc2Vjb25kcz4gd2hlcmUgPHNlY29uZHM+IGlzXG4gICAgICAgIC8vIHRyYW5zbGF0ZWQgdG8gaGF2ZSBhIG5vbi1uZWdhdGl2ZSB2YWx1ZSBhbmQgYm90aCA8c2Vjb25kcz4gYW5kIDxuYW5vc2Vjb25kcz4gYXJlIGxlZnQtcGFkZGVkXG4gICAgICAgIC8vIHdpdGggemVyb2VzIHRvIGJlIGEgY29uc2lzdGVudCBsZW5ndGguIFN0cmluZ3Mgd2l0aCB0aGlzIGZvcm1hdCB0aGVuIGhhdmUgYSBsZXhpb2dyYXBoaWNhbFxuICAgICAgICAvLyBvcmRlcmluZyB0aGF0IG1hdGNoZXMgdGhlIGV4cGVjdGVkIG9yZGVyaW5nLiBUaGUgPHNlY29uZHM+IHRyYW5zbGF0aW9uIGlzIGRvbmUgdG8gYXZvaWRcbiAgICAgICAgLy8gaGF2aW5nIGEgbGVhZGluZyBuZWdhdGl2ZSBzaWduIChpLmUuIGEgbGVhZGluZyAnLScgY2hhcmFjdGVyKSBpbiBpdHMgc3RyaW5nIHJlcHJlc2VudGF0aW9uLFxuICAgICAgICAvLyB3aGljaCB3b3VsZCBhZmZlY3QgaXRzIGxleGlvZ3JhcGhpY2FsIG9yZGVyaW5nLlxuICAgICAgICB2YXIgdCA9IHRoaXMuc2Vjb25kcyAtIC02MjEzNTU5NjgwMDtcbiAgICAgICAgLy8gTm90ZTogVXAgdG8gMTIgZGVjaW1hbCBkaWdpdHMgYXJlIHJlcXVpcmVkIHRvIHJlcHJlc2VudCBhbGwgdmFsaWQgJ3NlY29uZHMnIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHQpLnBhZFN0YXJ0KDEyLCBcIjBcIikgKyBcIi5cIiArIFN0cmluZyh0aGlzLm5hbm9zZWNvbmRzKS5wYWRTdGFydCg5LCBcIjBcIik7XG4gICAgfSwgdDtcbn0oKSwgeiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQubSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KGUpO1xuICAgIH0sIHQubWluID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChuZXcgQigwLCAwKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuQSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wLkkodC50aW1lc3RhbXApO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcC5pc0VxdWFsKHQudGltZXN0YW1wKTtcbiAgICB9LCBcbiAgICAvKiogUmV0dXJucyBhIG51bWJlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVyc2lvbiBmb3IgdXNlIGluIHNwZWMgdGVzdHMuICovIHQucHJvdG90eXBlLlIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQ29udmVydCB0byBtaWNyb3NlY29uZHMuXG4gICAgICAgIHJldHVybiAxZTYgKiB0aGlzLnRpbWVzdGFtcC5zZWNvbmRzICsgdGhpcy50aW1lc3RhbXAubmFub3NlY29uZHMgLyAxZTM7XG4gICAgfSwgdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiU25hcHNob3RWZXJzaW9uKFwiICsgdGhpcy50aW1lc3RhbXAudG9TdHJpbmcoKSArIFwiKVwiO1xuICAgIH0sIHQucHJvdG90eXBlLlAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wO1xuICAgIH0sIHQ7XG59KCksIEcgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbikge1xuICAgICAgICB2b2lkIDAgPT09IGUgPyBlID0gMCA6IGUgPiB0Lmxlbmd0aCAmJiBTKCksIHZvaWQgMCA9PT0gbiA/IG4gPSB0Lmxlbmd0aCAtIGUgOiBuID4gdC5sZW5ndGggLSBlICYmIFMoKSwgXG4gICAgICAgIHRoaXMuc2VnbWVudHMgPSB0LCB0aGlzLm9mZnNldCA9IGUsIHRoaXMuZyA9IG47XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmc7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiAwID09PSB0LlYodGhpcywgZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuY2hpbGQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5zZWdtZW50cy5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5saW1pdCgpKTtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiB0ID8gZS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBuLnB1c2godCk7XG4gICAgICAgIH0pKSA6IG4ucHVzaChlKSwgdGhpcy5wKG4pO1xuICAgIH0sIFxuICAgIC8qKiBUaGUgaW5kZXggb2Ygb25lIHBhc3QgdGhlIGxhc3Qgc2VnbWVudCBvZiB0aGUgcGF0aC4gKi8gdC5wcm90b3R5cGUubGltaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ICsgdGhpcy5sZW5ndGg7XG4gICAgfSwgdC5wcm90b3R5cGUudiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgPSB2b2lkIDAgPT09IHQgPyAxIDogdCwgdGhpcy5wKHRoaXMuc2VnbWVudHMsIHRoaXMub2Zmc2V0ICsgdCwgdGhpcy5sZW5ndGggLSB0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5TID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnAodGhpcy5zZWdtZW50cywgdGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgfSwgdC5wcm90b3R5cGUuRCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c1t0aGlzLm9mZnNldF07XG4gICAgfSwgdC5wcm90b3R5cGUuQyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5sZW5ndGggLSAxKTtcbiAgICB9LCB0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzW3RoaXMub2Zmc2V0ICsgdF07XG4gICAgfSwgdC5wcm90b3R5cGUuVCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMCA9PT0gdGhpcy5sZW5ndGg7XG4gICAgfSwgdC5wcm90b3R5cGUuTiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHQubGVuZ3RoIDwgdGhpcy5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCB0aGlzLmxlbmd0aDsgZSsrKSBpZiAodGhpcy5nZXQoZSkgIT09IHQuZ2V0KGUpKSByZXR1cm4gITE7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCB0LnByb3RvdHlwZS5GID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggKyAxICE9PSB0Lmxlbmd0aCkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMubGVuZ3RoOyBlKyspIGlmICh0aGlzLmdldChlKSAhPT0gdC5nZXQoZSkpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH0sIHQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSB0aGlzLm9mZnNldCwgbiA9IHRoaXMubGltaXQoKTsgZSA8IG47IGUrKykgdCh0aGlzLnNlZ21lbnRzW2VdKTtcbiAgICB9LCB0LnByb3RvdHlwZS5PID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmxpbWl0KCkpO1xuICAgIH0sIHQuViA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IE1hdGgubWluKHQubGVuZ3RoLCBlLmxlbmd0aCksIHIgPSAwOyByIDwgbjsgcisrKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHQuZ2V0KHIpLCBvID0gZS5nZXQocik7XG4gICAgICAgICAgICBpZiAoaSA8IG8pIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChpID4gbykgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQubGVuZ3RoIDwgZS5sZW5ndGggPyAtMSA6IHQubGVuZ3RoID4gZS5sZW5ndGggPyAxIDogMDtcbiAgICB9LCB0O1xufSgpLCBLID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGUgJiYgZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5wID0gZnVuY3Rpb24odCwgZSwgcikge1xuICAgICAgICByZXR1cm4gbmV3IG4odCwgZSwgcik7XG4gICAgfSwgbi5wcm90b3R5cGUuTSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBOT1RFOiBUaGUgY2xpZW50IGlzIGlnbm9yYW50IG9mIGFueSBwYXRoIHNlZ21lbnRzIGNvbnRhaW5pbmcgZXNjYXBlXG4gICAgICAgIC8vIHNlcXVlbmNlcyAoZS5nLiBfX2lkMTIzX18pIGFuZCBqdXN0IHBhc3NlcyB0aGVtIHRocm91Z2ggcmF3ICh0aGV5IGV4aXN0XG4gICAgICAgIC8vIGZvciBsZWdhY3kgcmVhc29ucyBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGZyZXF1ZW50bHkpLlxuICAgICAgICByZXR1cm4gdGhpcy5PKCkuam9pbihcIi9cIik7XG4gICAgfSwgbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTSgpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXNvdXJjZSBwYXRoIGZyb20gdGhlIGdpdmVuIHNsYXNoLWRlbGltaXRlZCBzdHJpbmcuIElmIG11bHRpcGxlXG4gICAgICogYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYWxsIGNvbXBvbmVudHMgYXJlIGNvbWJpbmVkLiBMZWFkaW5nIGFuZCB0cmFpbGluZ1xuICAgICAqIHNsYXNoZXMgZnJvbSBhbGwgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICAgKi9cbiAgICBuLmsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgdCA9IFtdLCBlID0gMDsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgdFtlXSA9IGFyZ3VtZW50c1tlXTtcbiAgICAgICAgLy8gTk9URTogVGhlIGNsaWVudCBpcyBpZ25vcmFudCBvZiBhbnkgcGF0aCBzZWdtZW50cyBjb250YWluaW5nIGVzY2FwZVxuICAgICAgICAvLyBzZXF1ZW5jZXMgKGUuZy4gX19pZDEyM19fKSBhbmQganVzdCBwYXNzZXMgdGhlbSB0aHJvdWdoIHJhdyAodGhleSBleGlzdFxuICAgICAgICAvLyBmb3IgbGVnYWN5IHJlYXNvbnMgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBmcmVxdWVudGx5KS5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gW10sIGkgPSAwLCBvID0gdDsgaSA8IG8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB1ID0gb1tpXTtcbiAgICAgICAgICAgIGlmICh1LmluZGV4T2YoXCIvL1wiKSA+PSAwKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBzZWdtZW50IChcIiArIHUgKyBcIikuIFBhdGhzIG11c3Qgbm90IGNvbnRhaW4gLy8gaW4gdGhlbS5cIik7XG4gICAgICAgICAgICAvLyBTdHJpcCBsZWFkaW5nIGFuZCB0cmFsaW5nIHNsYXNoZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICByLnB1c2guYXBwbHkociwgdS5zcGxpdChcIi9cIikuZmlsdGVyKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBuKHIpO1xuICAgIH0sIG4uJCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IG4oW10pO1xuICAgIH0sIG47XG59KEcpLCBRID0gL15bX2EtekEtWl1bX2EtekEtWjAtOV0qJC8sIFcgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLnAgPSBmdW5jdGlvbih0LCBlLCByKSB7XG4gICAgICAgIHJldHVybiBuZXcgbih0LCBlLCByKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHN0cmluZyBjb3VsZCBiZSB1c2VkIGFzIGEgc2VnbWVudCBpbiBhIGZpZWxkIHBhdGhcbiAgICAgKiB3aXRob3V0IGVzY2FwaW5nLlxuICAgICAqL1xuICAgIG4uTCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFEudGVzdCh0KTtcbiAgICB9LCBuLnByb3RvdHlwZS5NID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk8oKS5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ID0gdC5yZXBsYWNlKFwiXFxcXFwiLCBcIlxcXFxcXFxcXCIpLnJlcGxhY2UoXCJgXCIsIFwiXFxcXGBcIiksIG4uTCh0KSB8fCAodCA9IFwiYFwiICsgdCArIFwiYFwiKSwgXG4gICAgICAgICAgICB0O1xuICAgICAgICB9KSkuam9pbihcIi5cIik7XG4gICAgfSwgbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTSgpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGZpZWxkIHJlZmVyZW5jZXMgdGhlIGtleSBvZiBhIGRvY3VtZW50LlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLkIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDEgPT09IHRoaXMubGVuZ3RoICYmIFwiX19uYW1lX19cIiA9PT0gdGhpcy5nZXQoMCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVGhlIGZpZWxkIGRlc2lnbmF0aW5nIHRoZSBrZXkgb2YgYSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBuLnEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBuKFsgXCJfX25hbWVfX1wiIF0pO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGZpZWxkIHN0cmluZyBmcm9tIHRoZSBnaXZlbiBzZXJ2ZXItZm9ybWF0dGVkIHN0cmluZy5cbiAgICAgKlxuICAgICAqIC0gU3BsaXR0aW5nIHRoZSBlbXB0eSBzdHJpbmcgaXMgbm90IGFsbG93ZWQgKGZvciBub3cgYXQgbGVhc3QpLlxuICAgICAqIC0gRW1wdHkgc2VnbWVudHMgd2l0aGluIHRoZSBzdHJpbmcgKGUuZy4gaWYgdGhlcmUgYXJlIHR3byBjb25zZWN1dGl2ZVxuICAgICAqICAgc2VwYXJhdG9ycykgYXJlIG5vdCBhbGxvd2VkLlxuICAgICAqXG4gICAgICogVE9ETyhiLzM3MjQ0MTU3KTogd2Ugc2hvdWxkIG1ha2UgdGhpcyBtb3JlIHN0cmljdC4gUmlnaHQgbm93LCBpdCBhbGxvd3NcbiAgICAgKiBub24taWRlbnRpZmllciBwYXRoIGNvbXBvbmVudHMsIGV2ZW4gaWYgdGhleSBhcmVuJ3QgZXNjYXBlZC5cbiAgICAgKi9cbiAgICBuLlUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSBbXSwgciA9IFwiXCIsIGkgPSAwLCBvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gci5sZW5ndGgpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIGZpZWxkIHBhdGggKFwiICsgdCArIFwiKS4gUGF0aHMgbXVzdCBub3QgYmUgZW1wdHksIGJlZ2luIHdpdGggJy4nLCBlbmQgd2l0aCAnLicsIG9yIGNvbnRhaW4gJy4uJ1wiKTtcbiAgICAgICAgICAgIGUucHVzaChyKSwgciA9IFwiXCI7XG4gICAgICAgIH0sIHUgPSAhMTsgaSA8IHQubGVuZ3RoOyApIHtcbiAgICAgICAgICAgIHZhciBzID0gdFtpXTtcbiAgICAgICAgICAgIGlmIChcIlxcXFxcIiA9PT0gcykge1xuICAgICAgICAgICAgICAgIGlmIChpICsgMSA9PT0gdC5sZW5ndGgpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJQYXRoIGhhcyB0cmFpbGluZyBlc2NhcGUgY2hhcmFjdGVyOiBcIiArIHQpO1xuICAgICAgICAgICAgICAgIHZhciBhID0gdFtpICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKFwiXFxcXFwiICE9PSBhICYmIFwiLlwiICE9PSBhICYmIFwiYFwiICE9PSBhKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiUGF0aCBoYXMgaW52YWxpZCBlc2NhcGUgc2VxdWVuY2U6IFwiICsgdCk7XG4gICAgICAgICAgICAgICAgciArPSBhLCBpICs9IDI7XG4gICAgICAgICAgICB9IGVsc2UgXCJgXCIgPT09IHMgPyAodSA9ICF1LCBpKyspIDogXCIuXCIgIT09IHMgfHwgdSA/IChyICs9IHMsIGkrKykgOiAobygpLCBpKyspO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvKCksIHUpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJVbnRlcm1pbmF0ZWQgYCBpbiBwYXRoOiBcIiArIHQpO1xuICAgICAgICByZXR1cm4gbmV3IG4oZSk7XG4gICAgfSwgbi4kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgbihbXSk7XG4gICAgfSwgbjtcbn0oRyksIFkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLnBhdGggPSB0O1xuICAgIH1cbiAgICByZXR1cm4gdC5LID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoSy5rKGUpKTtcbiAgICB9LCB0LlcgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChLLmsoZSkudig1KSk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZG9jdW1lbnQgaXMgaW4gdGhlIHNwZWNpZmllZCBjb2xsZWN0aW9uSWQuICovIHQucHJvdG90eXBlLmogPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgubGVuZ3RoID49IDIgJiYgdGhpcy5wYXRoLmdldCh0aGlzLnBhdGgubGVuZ3RoIC0gMikgPT09IHQ7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHQgJiYgMCA9PT0gSy5WKHRoaXMucGF0aCwgdC5wYXRoKTtcbiAgICB9LCB0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnRvU3RyaW5nKCk7XG4gICAgfSwgdC5WID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gSy5WKHQucGF0aCwgZS5wYXRoKTtcbiAgICB9LCB0LkcgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Lmxlbmd0aCAlIDIgPT0gMDtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGRvY3VtZW50IGtleSB3aXRoIHRoZSBnaXZlbiBzZWdtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZWdtZW50cyBUaGUgc2VnbWVudHMgb2YgdGhlIHBhdGggdG8gdGhlIGRvY3VtZW50XG4gICAgICogQHJldHVybiBBIG5ldyBpbnN0YW5jZSBvZiBEb2N1bWVudEtleVxuICAgICAqL1xuICAgIHQuSCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KG5ldyBLKGUuc2xpY2UoKSkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSB2YXJpYWJsZSBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIEgodCkge1xuICAgIHJldHVybiBudWxsID09IHQ7XG59XG5cbi8qKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHZhbHVlIHJlcHJlc2VudHMgLTAuICovIGZ1bmN0aW9uIEoodCkge1xuICAgIC8vIERldGVjdCBpZiB0aGUgdmFsdWUgaXMgLTAuMC4gQmFzZWQgb24gcG9seWZpbGwgZnJvbVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICAgIHJldHVybiAwID09PSB0ICYmIDEgLyB0ID09IC0xIC8gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSB2YWx1ZSBpcyBhbiBpbnRlZ2VyIGFuZCBpbiB0aGUgc2FmZSBpbnRlZ2VyIHJhbmdlXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QgZm9yIGJlaW5nIGFuIGludGVnZXIgYW5kIGluIHRoZSBzYWZlIHJhbmdlXG4gKi8gZnVuY3Rpb24gWCh0KSB7XG4gICAgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIHQgJiYgTnVtYmVyLmlzSW50ZWdlcih0KSAmJiAhSih0KSAmJiB0IDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSICYmIHQgPj0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nXG52YXIgJCA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGksIG8sIHUpIHtcbiAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBudWxsKSwgdm9pZCAwID09PSBuICYmIChuID0gW10pLCB2b2lkIDAgPT09IHIgJiYgKHIgPSBbXSksIFxuICAgIHZvaWQgMCA9PT0gaSAmJiAoaSA9IG51bGwpLCB2b2lkIDAgPT09IG8gJiYgKG8gPSBudWxsKSwgdm9pZCAwID09PSB1ICYmICh1ID0gbnVsbCksIFxuICAgIHRoaXMucGF0aCA9IHQsIHRoaXMuY29sbGVjdGlvbkdyb3VwID0gZSwgdGhpcy5vcmRlckJ5ID0gbiwgdGhpcy5maWx0ZXJzID0gciwgdGhpcy5saW1pdCA9IGksIFxuICAgIHRoaXMuc3RhcnRBdCA9IG8sIHRoaXMuZW5kQXQgPSB1LCB0aGlzLkogPSBudWxsO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhIFRhcmdldCB3aXRoIGEgcGF0aCBhbmQgb3B0aW9uYWwgYWRkaXRpb25hbCBxdWVyeSBjb25zdHJhaW50cy5cbiAqIFBhdGggbXVzdCBjdXJyZW50bHkgYmUgZW1wdHkgaWYgdGhpcyBpcyBhIGNvbGxlY3Rpb24gZ3JvdXAgcXVlcnkuXG4gKlxuICogTk9URTogeW91IHNob3VsZCBhbHdheXMgY29uc3RydWN0IGBUYXJnZXRgIGZyb20gYFF1ZXJ5LnRvVGFyZ2V0YCBpbnN0ZWFkIG9mXG4gKiB1c2luZyB0aGlzIGZhY3RvcnkgbWV0aG9kLCBiZWNhdXNlIGBRdWVyeWAgcHJvdmlkZXMgYW4gaW1wbGljaXQgYG9yZGVyQnlgXG4gKiBwcm9wZXJ0eS5cbiAqLyBmdW5jdGlvbiBaKHQsIGUsIG4sIHIsIGksIG8sIHUpIHtcbiAgICByZXR1cm4gdm9pZCAwID09PSBlICYmIChlID0gbnVsbCksIHZvaWQgMCA9PT0gbiAmJiAobiA9IFtdKSwgdm9pZCAwID09PSByICYmIChyID0gW10pLCBcbiAgICB2b2lkIDAgPT09IGkgJiYgKGkgPSBudWxsKSwgdm9pZCAwID09PSBvICYmIChvID0gbnVsbCksIHZvaWQgMCA9PT0gdSAmJiAodSA9IG51bGwpLCBcbiAgICBuZXcgJCh0LCBlLCBuLCByLCBpLCBvLCB1KTtcbn1cblxuZnVuY3Rpb24gdHQodCkge1xuICAgIHZhciBlID0gRCh0KTtcbiAgICBpZiAobnVsbCA9PT0gZS5KKSB7XG4gICAgICAgIHZhciBuID0gZS5wYXRoLk0oKTtcbiAgICAgICAgbnVsbCAhPT0gZS5jb2xsZWN0aW9uR3JvdXAgJiYgKG4gKz0gXCJ8Y2c6XCIgKyBlLmNvbGxlY3Rpb25Hcm91cCksIG4gKz0gXCJ8ZjpcIiwgbiArPSBlLmZpbHRlcnMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oYi8yOTE4MzE2NSk6IFRlY2huaWNhbGx5LCB0aGlzIHdvbid0IGJlIHVuaXF1ZSBpZiB0d28gdmFsdWVzIGhhdmVcbiAgICAgICAgICAgICAgICAvLyB0aGUgc2FtZSBkZXNjcmlwdGlvbiwgc3VjaCBhcyB0aGUgaW50IDMgYW5kIHRoZSBzdHJpbmcgXCIzXCIuIFNvIHdlIHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgdHlwZXMgaW4gaGVyZSBzb21laG93LCB0b28uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuZmllbGQuTSgpICsgdC5vcC50b1N0cmluZygpICsgUXQodC52YWx1ZSk7XG4gICAgICAgICAgICB9KHQpO1xuICAgICAgICB9KSkuam9pbihcIixcIiksIG4gKz0gXCJ8b2I6XCIsIG4gKz0gZS5vcmRlckJ5Lm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIChlID0gdCkuZmllbGQuTSgpICsgZS5kaXI7XG4gICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgfSkpLmpvaW4oXCIsXCIpLCBIKGUubGltaXQpIHx8IChuICs9IFwifGw6XCIsIG4gKz0gZS5saW1pdCksIGUuc3RhcnRBdCAmJiAobiArPSBcInxsYjpcIiwgXG4gICAgICAgIG4gKz0gWG4oZS5zdGFydEF0KSksIGUuZW5kQXQgJiYgKG4gKz0gXCJ8dWI6XCIsIG4gKz0gWG4oZS5lbmRBdCkpLCBlLkogPSBuO1xuICAgIH1cbiAgICByZXR1cm4gZS5KO1xufVxuXG5mdW5jdGlvbiBldCh0LCBlKSB7XG4gICAgaWYgKHQubGltaXQgIT09IGUubGltaXQpIHJldHVybiAhMTtcbiAgICBpZiAodC5vcmRlckJ5Lmxlbmd0aCAhPT0gZS5vcmRlckJ5Lmxlbmd0aCkgcmV0dXJuICExO1xuICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdC5vcmRlckJ5Lmxlbmd0aDsgbisrKSBpZiAoIW5yKHQub3JkZXJCeVtuXSwgZS5vcmRlckJ5W25dKSkgcmV0dXJuICExO1xuICAgIGlmICh0LmZpbHRlcnMubGVuZ3RoICE9PSBlLmZpbHRlcnMubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgZm9yICh2YXIgciA9IDA7IHIgPCB0LmZpbHRlcnMubGVuZ3RoOyByKyspIGlmIChpID0gdC5maWx0ZXJzW3JdLCBvID0gZS5maWx0ZXJzW3JdLCBcbiAgICBpLm9wICE9PSBvLm9wIHx8ICFpLmZpZWxkLmlzRXF1YWwoby5maWVsZCkgfHwgIUJ0KGkudmFsdWUsIG8udmFsdWUpKSByZXR1cm4gITE7XG4gICAgdmFyIGksIG87XG4gICAgcmV0dXJuIHQuY29sbGVjdGlvbkdyb3VwID09PSBlLmNvbGxlY3Rpb25Hcm91cCAmJiAhIXQucGF0aC5pc0VxdWFsKGUucGF0aCkgJiYgISFabih0LnN0YXJ0QXQsIGUuc3RhcnRBdCkgJiYgWm4odC5lbmRBdCwgZS5lbmRBdCk7XG59XG5cbmZ1bmN0aW9uIG50KHQpIHtcbiAgICByZXR1cm4gWS5HKHQucGF0aCkgJiYgbnVsbCA9PT0gdC5jb2xsZWN0aW9uR3JvdXAgJiYgMCA9PT0gdC5maWx0ZXJzLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBDb252ZXJ0cyBhIEJhc2U2NCBlbmNvZGVkIHN0cmluZyB0byBhIGJpbmFyeSBzdHJpbmcuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbW11dGFibGUgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgXCJwcm90b1wiIGJ5dGUgc3RyaW5nLlxuICpcbiAqIFByb3RvIGJ5dGUgc3RyaW5ncyBjYW4gZWl0aGVyIGJlIEJhc2U2NC1lbmNvZGVkIHN0cmluZ3Mgb3IgVWludDhBcnJheXMgd2hlblxuICogc2VudCBvbiB0aGUgd2lyZS4gVGhpcyBjbGFzcyBhYnN0cmFjdHMgYXdheSB0aGlzIGRpZmZlcmVudGlhdGlvbiBieSBob2xkaW5nXG4gKiB0aGUgcHJvdG8gYnl0ZSBzdHJpbmcgaW4gYSBjb21tb24gY2xhc3MgdGhhdCBtdXN0IGJlIGNvbnZlcnRlZCBpbnRvIGEgc3RyaW5nXG4gKiBiZWZvcmUgYmVpbmcgc2VudCBhcyBhIHByb3RvLlxuICovIHZhciBydCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuWSA9IHQ7XG4gICAgfVxuICAgIHJldHVybiB0LmZyb21CYXNlNjRTdHJpbmcgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChhdG9iKGUpKTtcbiAgICB9LCB0LmZyb21VaW50OEFycmF5ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoXG4gICAgICAgIC8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYW4gVWludDhhcnJheSB0byBhIGJpbmFyeSBzdHJpbmcuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZm9yICh2YXIgZSA9IFwiXCIsIG4gPSAwOyBuIDwgdC5sZW5ndGg7ICsrbikgZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRbbl0pO1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0oZSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnRvQmFzZTY0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0ID0gdGhpcy5ZLCBidG9hKHQpO1xuICAgICAgICAvKiogQ29udmVydHMgYSBiaW5hcnkgc3RyaW5nIHRvIGEgQmFzZTY0IGVuY29kZWQgc3RyaW5nLiAqLyAgICAgICAgdmFyIHQ7XG4gICAgICAgIC8qKiBUcnVlIGlmIGFuZCBvbmx5IGlmIHRoZSBCYXNlNjQgY29udmVyc2lvbiBmdW5jdGlvbnMgYXJlIGF2YWlsYWJsZS4gKi8gICAgfSwgXG4gICAgdC5wcm90b3R5cGUudG9VaW50OEFycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBlID0gbmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLCBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIGVbbl0gPSB0LmNoYXJDb2RlQXQobik7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSh0aGlzLlkpO1xuICAgIH0sIHQucHJvdG90eXBlLlggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDIgKiB0aGlzLlkubGVuZ3RoO1xuICAgIH0sIHQucHJvdG90eXBlLkEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBWKHRoaXMuWSwgdC5ZKTtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ZID09PSB0Llk7XG4gICAgfSwgdDtcbn0oKTtcblxucnQuWiA9IG5ldyBydChcIlwiKTtcblxudmFyIGl0LCBvdCwgdXQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoXG4gICAgLyoqIFRoZSB0YXJnZXQgYmVpbmcgbGlzdGVuZWQgdG8uICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogVGhlIHRhcmdldCBJRCB0byB3aGljaCB0aGUgdGFyZ2V0IGNvcnJlc3BvbmRzOyBBc3NpZ25lZCBieSB0aGVcbiAgICAgKiBMb2NhbFN0b3JlIGZvciB1c2VyIGxpc3RlbnMgYW5kIGJ5IHRoZSBTeW5jRW5naW5lIGZvciBsaW1ibyB3YXRjaGVzLlxuICAgICAqL1xuICAgIGUsIFxuICAgIC8qKiBUaGUgcHVycG9zZSBvZiB0aGUgdGFyZ2V0LiAqL1xuICAgIG4sIFxuICAgIC8qKlxuICAgICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGxhc3QgdHJhbnNhY3Rpb24gZHVyaW5nIHdoaWNoIHRoaXMgdGFyZ2V0IGRhdGFcbiAgICAgKiB3YXMgbW9kaWZpZWQuXG4gICAgICovXG4gICAgciwgXG4gICAgLyoqIFRoZSBsYXRlc3Qgc25hcHNob3QgdmVyc2lvbiBzZWVuIGZvciB0aGlzIHRhcmdldC4gKi9cbiAgICBpXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gc25hcHNob3QgdmVyc2lvbiBhdCB3aGljaCB0aGUgYXNzb2NpYXRlZCB2aWV3XG4gICAgICogY29udGFpbmVkIG5vIGxpbWJvIGRvY3VtZW50cy5cbiAgICAgKi8gLCBvXG4gICAgLyoqXG4gICAgICogQW4gb3BhcXVlLCBzZXJ2ZXItYXNzaWduZWQgdG9rZW4gdGhhdCBhbGxvd3Mgd2F0Y2hpbmcgYSB0YXJnZXQgdG8gYmVcbiAgICAgKiByZXN1bWVkIGFmdGVyIGRpc2Nvbm5lY3Rpbmcgd2l0aG91dCByZXRyYW5zbWl0dGluZyBhbGwgdGhlIGRhdGEgdGhhdFxuICAgICAqIG1hdGNoZXMgdGhlIHRhcmdldC4gVGhlIHJlc3VtZSB0b2tlbiBlc3NlbnRpYWxseSBpZGVudGlmaWVzIGEgcG9pbnQgaW5cbiAgICAgKiB0aW1lIGZyb20gd2hpY2ggdGhlIHNlcnZlciBzaG91bGQgcmVzdW1lIHNlbmRpbmcgcmVzdWx0cy5cbiAgICAgKi8gLCB1KSB7XG4gICAgICAgIHZvaWQgMCA9PT0gaSAmJiAoaSA9IHoubWluKCkpLCB2b2lkIDAgPT09IG8gJiYgKG8gPSB6Lm1pbigpKSwgdm9pZCAwID09PSB1ICYmICh1ID0gcnQuWiksIFxuICAgICAgICB0aGlzLnRhcmdldCA9IHQsIHRoaXMudGFyZ2V0SWQgPSBlLCB0aGlzLnR0ID0gbiwgdGhpcy5zZXF1ZW5jZU51bWJlciA9IHIsIHRoaXMuZXQgPSBpLCBcbiAgICAgICAgdGhpcy5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uID0gbywgdGhpcy5yZXN1bWVUb2tlbiA9IHU7XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IHRhcmdldCBkYXRhIGluc3RhbmNlIHdpdGggYW4gdXBkYXRlZCBzZXF1ZW5jZSBudW1iZXIuICovICAgIHJldHVybiB0LnByb3RvdHlwZS5udCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldElkLCB0aGlzLnR0LCBlLCB0aGlzLmV0LCB0aGlzLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24sIHRoaXMucmVzdW1lVG9rZW4pO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGFyZ2V0IGRhdGEgaW5zdGFuY2Ugd2l0aCBhbiB1cGRhdGVkIHJlc3VtZSB0b2tlbiBhbmRcbiAgICAgKiBzbmFwc2hvdCB2ZXJzaW9uLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnN0ID0gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0SWQsIHRoaXMudHQsIHRoaXMuc2VxdWVuY2VOdW1iZXIsIG4sIHRoaXMubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0YXJnZXQgZGF0YSBpbnN0YW5jZSB3aXRoIGFuIHVwZGF0ZWQgbGFzdCBsaW1ibyBmcmVlXG4gICAgICogc25hcHNob3QgdmVyc2lvbiBudW1iZXIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaXQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCh0aGlzLnRhcmdldCwgdGhpcy50YXJnZXRJZCwgdGhpcy50dCwgdGhpcy5zZXF1ZW5jZU51bWJlciwgdGhpcy5ldCwgZSwgdGhpcy5yZXN1bWVUb2tlbik7XG4gICAgfSwgdDtcbn0oKSwgc3QgPSBcbi8vIFRPRE8oYi8zMzA3ODE2Myk6IGp1c3QgdXNlIHNpbXBsZXN0IGZvcm0gb2YgZXhpc3RlbmNlIGZpbHRlciBmb3Igbm93XG5mdW5jdGlvbih0KSB7XG4gICAgdGhpcy5jb3VudCA9IHQ7XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXJyb3IgY29kZSByZXByZXNlbnRzIGEgcGVybWFuZW50IGVycm9yIHdoZW4gcmVjZWl2ZWRcbiAqIGluIHJlc3BvbnNlIHRvIGEgbm9uLXdyaXRlIG9wZXJhdGlvbi5cbiAqXG4gKiBTZWUgaXNQZXJtYW5lbnRXcml0ZUVycm9yIGZvciBjbGFzc2lmeWluZyB3cml0ZSBlcnJvcnMuXG4gKi9cbmZ1bmN0aW9uIGF0KHQpIHtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgRi5PSzpcbiAgICAgICAgcmV0dXJuIFMoKTtcblxuICAgICAgY2FzZSBGLkNBTkNFTExFRDpcbiAgICAgIGNhc2UgRi5VTktOT1dOOlxuICAgICAgY2FzZSBGLkRFQURMSU5FX0VYQ0VFREVEOlxuICAgICAgY2FzZSBGLlJFU09VUkNFX0VYSEFVU1RFRDpcbiAgICAgIGNhc2UgRi5JTlRFUk5BTDpcbiAgICAgIGNhc2UgRi5VTkFWQUlMQUJMRTpcbiAvLyBVbmF1dGhlbnRpY2F0ZWQgbWVhbnMgc29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCBvdXIgdG9rZW4gYW5kIHdlIG5lZWRcbiAgICAgICAgLy8gdG8gcmV0cnkgd2l0aCBuZXcgY3JlZGVudGlhbHMgd2hpY2ggd2lsbCBoYXBwZW4gYXV0b21hdGljYWxseS5cbiAgICAgICAgICAgICAgY2FzZSBGLlVOQVVUSEVOVElDQVRFRDpcbiAgICAgICAgcmV0dXJuICExO1xuXG4gICAgICBjYXNlIEYuSU5WQUxJRF9BUkdVTUVOVDpcbiAgICAgIGNhc2UgRi5OT1RfRk9VTkQ6XG4gICAgICBjYXNlIEYuQUxSRUFEWV9FWElTVFM6XG4gICAgICBjYXNlIEYuUEVSTUlTU0lPTl9ERU5JRUQ6XG4gICAgICBjYXNlIEYuRkFJTEVEX1BSRUNPTkRJVElPTjpcbiAvLyBBYm9ydGVkIG1pZ2h0IGJlIHJldHJpZWQgaW4gc29tZSBzY2VuYXJpb3MsIGJ1dCB0aGF0IGlzIGRlcGVuZGFudCBvblxuICAgICAgICAvLyB0aGUgY29udGV4dCBhbmQgc2hvdWxkIGhhbmRsZWQgaW5kaXZpZHVhbGx5IGJ5IHRoZSBjYWxsaW5nIGNvZGUuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vYXBpcy9kZXNpZ24vZXJyb3JzLlxuICAgICAgICAgICAgICBjYXNlIEYuQUJPUlRFRDpcbiAgICAgIGNhc2UgRi5PVVRfT0ZfUkFOR0U6XG4gICAgICBjYXNlIEYuVU5JTVBMRU1FTlRFRDpcbiAgICAgIGNhc2UgRi5EQVRBX0xPU1M6XG4gICAgICAgIHJldHVybiAhMDtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFMoKTtcbiAgICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVycm9yIGNvZGUgcmVwcmVzZW50cyBhIHBlcm1hbmVudCBlcnJvciB3aGVuIHJlY2VpdmVkXG4gKiBpbiByZXNwb25zZSB0byBhIHdyaXRlIG9wZXJhdGlvbi5cbiAqXG4gKiBXcml0ZSBvcGVyYXRpb25zIG11c3QgYmUgaGFuZGxlZCBzcGVjaWFsbHkgYmVjYXVzZSBhcyBvZiBiLzExOTQzNzc2NCwgQUJPUlRFRFxuICogZXJyb3JzIG9uIHRoZSB3cml0ZSBzdHJlYW0gc2hvdWxkIGJlIHJldHJpZWQgdG9vIChldmVuIHRob3VnaCBBQk9SVEVEIGVycm9yc1xuICogYXJlIG5vdCBnZW5lcmFsbHkgcmV0cnlhYmxlKS5cbiAqXG4gKiBOb3RlIHRoYXQgZHVyaW5nIHRoZSBpbml0aWFsIGhhbmRzaGFrZSBvbiB0aGUgd3JpdGUgc3RyZWFtIGFuIEFCT1JURUQgZXJyb3JcbiAqIHNpZ25hbHMgdGhhdCB3ZSBzaG91bGQgZGlzY2FyZCBvdXIgc3RyZWFtIHRva2VuIChpLmUuIGl0IGlzIHBlcm1hbmVudCkuIFRoaXNcbiAqIG1lYW5zIGEgaGFuZHNoYWtlIGVycm9yIHNob3VsZCBiZSBjbGFzc2lmaWVkIHdpdGggaXNQZXJtYW5lbnRFcnJvciwgYWJvdmUuXG4gKi9cbi8qKlxuICogTWFwcyBhbiBlcnJvciBDb2RlIGZyb20gR1JQQyBzdGF0dXMgY29kZSBudW1iZXIsIGxpa2UgMCwgMSwgb3IgMTQuIFRoZXNlXG4gKiBhcmUgbm90IHRoZSBzYW1lIGFzIEhUVFAgc3RhdHVzIGNvZGVzLlxuICpcbiAqIEByZXR1cm5zIFRoZSBDb2RlIGVxdWl2YWxlbnQgdG8gdGhlIGdpdmVuIEdSUEMgc3RhdHVzIGNvZGUuIEZhaWxzIGlmIHRoZXJlXG4gKiAgICAgaXMgbm8gbWF0Y2guXG4gKi8gZnVuY3Rpb24gY3QodCkge1xuICAgIGlmICh2b2lkIDAgPT09IHQpIFxuICAgIC8vIFRoaXMgc2hvdWxkbid0IG5vcm1hbGx5IGhhcHBlbiwgYnV0IGluIGNlcnRhaW4gZXJyb3IgY2FzZXMgKGxpa2UgdHJ5aW5nXG4gICAgLy8gdG8gc2VuZCBpbnZhbGlkIHByb3RvIG1lc3NhZ2VzKSB3ZSBtYXkgZ2V0IGFuIGVycm9yIHdpdGggbm8gR1JQQyBjb2RlLlxuICAgIHJldHVybiBOKFwiR1JQQyBlcnJvciBoYXMgbm8gLmNvZGVcIiksIEYuVU5LTk9XTjtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgaXQuT0s6XG4gICAgICAgIHJldHVybiBGLk9LO1xuXG4gICAgICBjYXNlIGl0LkNBTkNFTExFRDpcbiAgICAgICAgcmV0dXJuIEYuQ0FOQ0VMTEVEO1xuXG4gICAgICBjYXNlIGl0LlVOS05PV046XG4gICAgICAgIHJldHVybiBGLlVOS05PV047XG5cbiAgICAgIGNhc2UgaXQuREVBRExJTkVfRVhDRUVERUQ6XG4gICAgICAgIHJldHVybiBGLkRFQURMSU5FX0VYQ0VFREVEO1xuXG4gICAgICBjYXNlIGl0LlJFU09VUkNFX0VYSEFVU1RFRDpcbiAgICAgICAgcmV0dXJuIEYuUkVTT1VSQ0VfRVhIQVVTVEVEO1xuXG4gICAgICBjYXNlIGl0LklOVEVSTkFMOlxuICAgICAgICByZXR1cm4gRi5JTlRFUk5BTDtcblxuICAgICAgY2FzZSBpdC5VTkFWQUlMQUJMRTpcbiAgICAgICAgcmV0dXJuIEYuVU5BVkFJTEFCTEU7XG5cbiAgICAgIGNhc2UgaXQuVU5BVVRIRU5USUNBVEVEOlxuICAgICAgICByZXR1cm4gRi5VTkFVVEhFTlRJQ0FURUQ7XG5cbiAgICAgIGNhc2UgaXQuSU5WQUxJRF9BUkdVTUVOVDpcbiAgICAgICAgcmV0dXJuIEYuSU5WQUxJRF9BUkdVTUVOVDtcblxuICAgICAgY2FzZSBpdC5OT1RfRk9VTkQ6XG4gICAgICAgIHJldHVybiBGLk5PVF9GT1VORDtcblxuICAgICAgY2FzZSBpdC5BTFJFQURZX0VYSVNUUzpcbiAgICAgICAgcmV0dXJuIEYuQUxSRUFEWV9FWElTVFM7XG5cbiAgICAgIGNhc2UgaXQuUEVSTUlTU0lPTl9ERU5JRUQ6XG4gICAgICAgIHJldHVybiBGLlBFUk1JU1NJT05fREVOSUVEO1xuXG4gICAgICBjYXNlIGl0LkZBSUxFRF9QUkVDT05ESVRJT046XG4gICAgICAgIHJldHVybiBGLkZBSUxFRF9QUkVDT05ESVRJT047XG5cbiAgICAgIGNhc2UgaXQuQUJPUlRFRDpcbiAgICAgICAgcmV0dXJuIEYuQUJPUlRFRDtcblxuICAgICAgY2FzZSBpdC5PVVRfT0ZfUkFOR0U6XG4gICAgICAgIHJldHVybiBGLk9VVF9PRl9SQU5HRTtcblxuICAgICAgY2FzZSBpdC5VTklNUExFTUVOVEVEOlxuICAgICAgICByZXR1cm4gRi5VTklNUExFTUVOVEVEO1xuXG4gICAgICBjYXNlIGl0LkRBVEFfTE9TUzpcbiAgICAgICAgcmV0dXJuIEYuREFUQV9MT1NTO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gUygpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBIVFRQIHJlc3BvbnNlJ3MgZXJyb3Igc3RhdHVzIHRvIHRoZSBlcXVpdmFsZW50IGVycm9yIGNvZGUuXG4gKlxuICogQHBhcmFtIHN0YXR1cyBBbiBIVFRQIGVycm9yIHJlc3BvbnNlIHN0YXR1cyAoXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gKiBcIlVOS05PV05cIiwgZXRjLilcbiAqIEByZXR1cm5zIFRoZSBlcXVpdmFsZW50IENvZGUuIE5vbi1tYXRjaGluZyByZXNwb25zZXMgYXJlIG1hcHBlZCB0b1xuICogICAgIENvZGUuVU5LTk9XTi5cbiAqLyAob3QgPSBpdCB8fCAoaXQgPSB7fSkpW290Lk9LID0gMF0gPSBcIk9LXCIsIG90W290LkNBTkNFTExFRCA9IDFdID0gXCJDQU5DRUxMRURcIiwgXG5vdFtvdC5VTktOT1dOID0gMl0gPSBcIlVOS05PV05cIiwgb3Rbb3QuSU5WQUxJRF9BUkdVTUVOVCA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCIsIFxub3Rbb3QuREVBRExJTkVfRVhDRUVERUQgPSA0XSA9IFwiREVBRExJTkVfRVhDRUVERURcIiwgb3Rbb3QuTk9UX0ZPVU5EID0gNV0gPSBcIk5PVF9GT1VORFwiLCBcbm90W290LkFMUkVBRFlfRVhJU1RTID0gNl0gPSBcIkFMUkVBRFlfRVhJU1RTXCIsIG90W290LlBFUk1JU1NJT05fREVOSUVEID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCIsIFxub3Rbb3QuVU5BVVRIRU5USUNBVEVEID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIiwgb3Rbb3QuUkVTT1VSQ0VfRVhIQVVTVEVEID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiLCBcbm90W290LkZBSUxFRF9QUkVDT05ESVRJT04gPSA5XSA9IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLCBvdFtvdC5BQk9SVEVEID0gMTBdID0gXCJBQk9SVEVEXCIsIFxub3Rbb3QuT1VUX09GX1JBTkdFID0gMTFdID0gXCJPVVRfT0ZfUkFOR0VcIiwgb3Rbb3QuVU5JTVBMRU1FTlRFRCA9IDEyXSA9IFwiVU5JTVBMRU1FTlRFRFwiLCBcbm90W290LklOVEVSTkFMID0gMTNdID0gXCJJTlRFUk5BTFwiLCBvdFtvdC5VTkFWQUlMQUJMRSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIiwgb3Rbb3QuREFUQV9MT1NTID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIEFuIGltbXV0YWJsZSBzb3J0ZWQgbWFwIGltcGxlbWVudGF0aW9uLCBiYXNlZCBvbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2tcbi8vIHRyZWUuXG52YXIgaHQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLlYgPSB0LCB0aGlzLnJvb3QgPSBlIHx8IGx0LkVNUFRZO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5L3ZhbHVlIGFkZGVkIG9yIHJlcGxhY2VkLlxuICAgICAgICByZXR1cm4gdC5wcm90b3R5cGUucnQgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCh0aGlzLlYsIHRoaXMucm9vdC5ydChlLCBuLCB0aGlzLlYpLmNvcHkobnVsbCwgbnVsbCwgbHQub3QsIG51bGwsIG51bGwpKTtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IHJlbW92ZWQuXG4gICAgdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5WLCB0aGlzLnJvb3QucmVtb3ZlKGUsIHRoaXMuVikuY29weShudWxsLCBudWxsLCBsdC5vdCwgbnVsbCwgbnVsbCkpO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBub2RlIHdpdGggdGhlIGdpdmVuIGtleSwgb3IgbnVsbC5cbiAgICB0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSB0aGlzLnJvb3Q7ICFlLlQoKTsgKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuVih0LCBlLmtleSk7XG4gICAgICAgICAgICBpZiAoMCA9PT0gbikgcmV0dXJuIGUudmFsdWU7XG4gICAgICAgICAgICBuIDwgMCA/IGUgPSBlLmxlZnQgOiBuID4gMCAmJiAoZSA9IGUucmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IGluIHRoaXMgc29ydGVkIG1hcCwgb3IgLTEgaWYgaXQgZG9lc24ndFxuICAgIC8vIGV4aXN0LlxuICAgIHQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgIC8vIE51bWJlciBvZiBub2RlcyB0aGF0IHdlcmUgcHJ1bmVkIHdoZW4gZGVzY2VuZGluZyByaWdodFxuICAgICAgICB2YXIgZSA9IDAsIG4gPSB0aGlzLnJvb3Q7ICFuLlQoKTsgKSB7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXMuVih0LCBuLmtleSk7XG4gICAgICAgICAgICBpZiAoMCA9PT0gcikgcmV0dXJuIGUgKyBuLmxlZnQuc2l6ZTtcbiAgICAgICAgICAgIHIgPCAwID8gbiA9IG4ubGVmdCA6IChcbiAgICAgICAgICAgIC8vIENvdW50IGFsbCBub2RlcyBsZWZ0IG9mIHRoZSBub2RlIHBsdXMgdGhlIG5vZGUgaXRzZWxmXG4gICAgICAgICAgICBlICs9IG4ubGVmdC5zaXplICsgMSwgbiA9IG4ucmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vZGUgbm90IGZvdW5kXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0sIHQucHJvdG90eXBlLlQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5UKCk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICAvLyBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIG1hcC5cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Quc2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgXG4gICAgLy8gUmV0dXJucyB0aGUgbWluaW11bSBrZXkgaW4gdGhlIG1hcC5cbiAgICB0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LmF0KCk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyB0aGUgbWF4aW11bSBrZXkgaW4gdGhlIG1hcC5cbiAgICB0LnByb3RvdHlwZS5jdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LmN0KCk7XG4gICAgfSwgXG4gICAgLy8gVHJhdmVyc2VzIHRoZSBtYXAgaW4ga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxuICAgIC8vIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLiBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXG4gICAgdC5wcm90b3R5cGUudXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QudXQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy51dCgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgcmV0dXJuIHQoZSwgbiksICExO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXQoKGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiB0LnB1c2goZSArIFwiOlwiICsgbiksICExO1xuICAgICAgICB9KSksIFwie1wiICsgdC5qb2luKFwiLCBcIikgKyBcIn1cIjtcbiAgICB9LCBcbiAgICAvLyBUcmF2ZXJzZXMgdGhlIG1hcCBpbiByZXZlcnNlIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb25cbiAgICAvLyBmdW5jdGlvbiBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzXG4gICAgLy8gYWJvcnRlZC5cbiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcbiAgICAvLyB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24uXG4gICAgdC5wcm90b3R5cGUuaHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuaHQodCk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyBhbiBpdGVyYXRvciBvdmVyIHRoZSBTb3J0ZWRNYXAuXG4gICAgdC5wcm90b3R5cGUubHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBmdCh0aGlzLnJvb3QsIG51bGwsIHRoaXMuViwgITEpO1xuICAgIH0sIHQucHJvdG90eXBlLl90ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IGZ0KHRoaXMucm9vdCwgdCwgdGhpcy5WLCAhMSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBmdCh0aGlzLnJvb3QsIG51bGwsIHRoaXMuViwgITApO1xuICAgIH0sIHQucHJvdG90eXBlLmR0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IGZ0KHRoaXMucm9vdCwgdCwgdGhpcy5WLCAhMCk7XG4gICAgfSwgdDtcbn0oKSwgZnQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgcikge1xuICAgICAgICB0aGlzLnd0ID0gciwgdGhpcy5UdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgIXQuVCgpOyApIGlmIChpID0gZSA/IG4odC5rZXksIGUpIDogMSwgXG4gICAgICAgIC8vIGZsaXAgdGhlIGNvbXBhcmlzb24gaWYgd2UncmUgZ29pbmcgaW4gcmV2ZXJzZVxuICAgICAgICByICYmIChpICo9IC0xKSwgaSA8IDApIFxuICAgICAgICAvLyBUaGlzIG5vZGUgaXMgbGVzcyB0aGFuIG91ciBzdGFydCBrZXkuIGlnbm9yZSBpdFxuICAgICAgICB0ID0gdGhpcy53dCA/IHQubGVmdCA6IHQucmlnaHQ7IGVsc2Uge1xuICAgICAgICAgICAgaWYgKDAgPT09IGkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgZXhhY3RseSBlcXVhbCB0byBvdXIgc3RhcnQga2V5LiBQdXNoIGl0IG9uIHRoZSBzdGFjayxcbiAgICAgICAgICAgICAgICAvLyBidXQgc3RvcCBpdGVyYXRpbmc7XG4gICAgICAgICAgICAgICAgdGhpcy5UdC5wdXNoKHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGdyZWF0ZXIgdGhhbiBvdXIgc3RhcnQga2V5LCBhZGQgaXQgdG8gdGhlIHN0YWNrIGFuZCBtb3ZlXG4gICAgICAgICAgICAvLyB0byB0aGUgbmV4dCBvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuVHQucHVzaCh0KSwgdCA9IHRoaXMud3QgPyB0LnJpZ2h0IDogdC5sZWZ0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5FdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuVHQucG9wKCksIGUgPSB7XG4gICAgICAgICAgICBrZXk6IHQua2V5LFxuICAgICAgICAgICAgdmFsdWU6IHQudmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMud3QpIGZvciAodCA9IHQubGVmdDsgIXQuVCgpOyApIHRoaXMuVHQucHVzaCh0KSwgdCA9IHQucmlnaHQ7IGVsc2UgZm9yICh0ID0gdC5yaWdodDsgIXQuVCgpOyApIHRoaXMuVHQucHVzaCh0KSwgXG4gICAgICAgIHQgPSB0LmxlZnQ7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH0sIHQucHJvdG90eXBlLkl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlR0Lmxlbmd0aCA+IDA7XG4gICAgfSwgdC5wcm90b3R5cGUuQXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKDAgPT09IHRoaXMuVHQubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIHQgPSB0aGlzLlR0W3RoaXMuVHQubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHQua2V5LFxuICAgICAgICAgICAgdmFsdWU6IHQudmFsdWVcbiAgICAgICAgfTtcbiAgICB9LCB0O1xufSgpLCBsdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChlLCBuLCByLCBpLCBvKSB7XG4gICAgICAgIHRoaXMua2V5ID0gZSwgdGhpcy52YWx1ZSA9IG4sIHRoaXMuY29sb3IgPSBudWxsICE9IHIgPyByIDogdC5SRUQsIHRoaXMubGVmdCA9IG51bGwgIT0gaSA/IGkgOiB0LkVNUFRZLCBcbiAgICAgICAgdGhpcy5yaWdodCA9IG51bGwgIT0gbyA/IG8gOiB0LkVNUFRZLCB0aGlzLnNpemUgPSB0aGlzLmxlZnQuc2l6ZSArIDEgKyB0aGlzLnJpZ2h0LnNpemU7XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUsIG9wdGlvbmFsbHkgcmVwbGFjaW5nIHBpZWNlcyBvZiBpdC5cbiAgICAgICAgcmV0dXJuIHQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbihlLCBuLCByLCBpLCBvKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChudWxsICE9IGUgPyBlIDogdGhpcy5rZXksIG51bGwgIT0gbiA/IG4gOiB0aGlzLnZhbHVlLCBudWxsICE9IHIgPyByIDogdGhpcy5jb2xvciwgbnVsbCAhPSBpID8gaSA6IHRoaXMubGVmdCwgbnVsbCAhPSBvID8gbyA6IHRoaXMucmlnaHQpO1xuICAgIH0sIHQucHJvdG90eXBlLlQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH0sIFxuICAgIC8vIFRyYXZlcnNlcyB0aGUgdHJlZSBpbiBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXG4gICAgLy8gZm9yIGVhY2ggbm9kZS4gSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLlxuICAgIHQucHJvdG90eXBlLnV0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LnV0KHQpIHx8IHQodGhpcy5rZXksIHRoaXMudmFsdWUpIHx8IHRoaXMucmlnaHQudXQodCk7XG4gICAgfSwgXG4gICAgLy8gVHJhdmVyc2VzIHRoZSB0cmVlIGluIHJldmVyc2Uga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvblxuICAgIC8vIGZ1bmN0aW9uIGZvciBlYWNoIG5vZGUuIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxuICAgIC8vIFJldHVybnMgdGhlIGZpcnN0IHRydXRoeSB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24sIG9yIHRoZSBsYXN0IGZhbHNleVxuICAgIC8vIHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbi5cbiAgICB0LnByb3RvdHlwZS5odCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmlnaHQuaHQodCkgfHwgdCh0aGlzLmtleSwgdGhpcy52YWx1ZSkgfHwgdGhpcy5sZWZ0Lmh0KHQpO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgdGhlIG1pbmltdW0gbm9kZSBpbiB0aGUgdHJlZS5cbiAgICB0LnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5UKCkgPyB0aGlzIDogdGhpcy5sZWZ0Lm1pbigpO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgdGhlIG1heGltdW0ga2V5IGluIHRoZSB0cmVlLlxuICAgIHQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbigpLmtleTtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIHRoZSBtYXhpbXVtIGtleSBpbiB0aGUgdHJlZS5cbiAgICB0LnByb3RvdHlwZS5jdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5UKCkgPyB0aGlzLmtleSA6IHRoaXMucmlnaHQuY3QoKTtcbiAgICB9LCBcbiAgICAvLyBSZXR1cm5zIG5ldyB0cmVlLCB3aXRoIHRoZSBrZXkvdmFsdWUgYWRkZWQuXG4gICAgdC5wcm90b3R5cGUucnQgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcywgaSA9IG4odCwgci5rZXkpO1xuICAgICAgICByZXR1cm4gKHIgPSBpIDwgMCA/IHIuY29weShudWxsLCBudWxsLCBudWxsLCByLmxlZnQucnQodCwgZSwgbiksIG51bGwpIDogMCA9PT0gaSA/IHIuY29weShudWxsLCBlLCBudWxsLCBudWxsLCBudWxsKSA6IHIuY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCByLnJpZ2h0LnJ0KHQsIGUsIG4pKSkuUnQoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5QdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5sZWZ0LlQoKSkgcmV0dXJuIHQuRU1QVFk7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGUubGVmdC5ndCgpIHx8IGUubGVmdC5sZWZ0Lmd0KCkgfHwgKGUgPSBlLlZ0KCkpLCAoZSA9IGUuY29weShudWxsLCBudWxsLCBudWxsLCBlLmxlZnQuUHQoKSwgbnVsbCkpLlJ0KCk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyBuZXcgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGl0ZW0gcmVtb3ZlZC5cbiAgICB0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHZhciByLCBpID0gdGhpcztcbiAgICAgICAgaWYgKG4oZSwgaS5rZXkpIDwgMCkgaS5sZWZ0LlQoKSB8fCBpLmxlZnQuZ3QoKSB8fCBpLmxlZnQubGVmdC5ndCgpIHx8IChpID0gaS5WdCgpKSwgXG4gICAgICAgIGkgPSBpLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgaS5sZWZ0LnJlbW92ZShlLCBuKSwgbnVsbCk7IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGkubGVmdC5ndCgpICYmIChpID0gaS55dCgpKSwgaS5yaWdodC5UKCkgfHwgaS5yaWdodC5ndCgpIHx8IGkucmlnaHQubGVmdC5ndCgpIHx8IChpID0gaS52dCgpKSwgXG4gICAgICAgICAgICAwID09PSBuKGUsIGkua2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChpLnJpZ2h0LlQoKSkgcmV0dXJuIHQuRU1QVFk7XG4gICAgICAgICAgICAgICAgciA9IGkucmlnaHQubWluKCksIGkgPSBpLmNvcHkoci5rZXksIHIudmFsdWUsIG51bGwsIG51bGwsIGkucmlnaHQuUHQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpID0gaS5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIGkucmlnaHQucmVtb3ZlKGUsIG4pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaS5SdCgpO1xuICAgIH0sIHQucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yO1xuICAgIH0sIFxuICAgIC8vIFJldHVybnMgbmV3IHRyZWUgYWZ0ZXIgcGVyZm9ybWluZyBhbnkgbmVlZGVkIHJvdGF0aW9ucy5cbiAgICB0LnByb3RvdHlwZS5SdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0LnJpZ2h0Lmd0KCkgJiYgIXQubGVmdC5ndCgpICYmICh0ID0gdC5idCgpKSwgdC5sZWZ0Lmd0KCkgJiYgdC5sZWZ0LmxlZnQuZ3QoKSAmJiAodCA9IHQueXQoKSksIFxuICAgICAgICB0LmxlZnQuZ3QoKSAmJiB0LnJpZ2h0Lmd0KCkgJiYgKHQgPSB0LlN0KCkpLCB0O1xuICAgIH0sIHQucHJvdG90eXBlLlZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5TdCgpO1xuICAgICAgICByZXR1cm4gdC5yaWdodC5sZWZ0Lmd0KCkgJiYgKHQgPSAodCA9ICh0ID0gdC5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIHQucmlnaHQueXQoKSkpLmJ0KCkpLlN0KCkpLCBcbiAgICAgICAgdDtcbiAgICB9LCB0LnByb3RvdHlwZS52dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuU3QoKTtcbiAgICAgICAgcmV0dXJuIHQubGVmdC5sZWZ0Lmd0KCkgJiYgKHQgPSAodCA9IHQueXQoKSkuU3QoKSksIHQ7XG4gICAgfSwgdC5wcm90b3R5cGUuYnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmNvcHkobnVsbCwgbnVsbCwgdC5SRUQsIG51bGwsIHRoaXMucmlnaHQubGVmdCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LmNvcHkobnVsbCwgbnVsbCwgdGhpcy5jb2xvciwgZSwgbnVsbCk7XG4gICAgfSwgdC5wcm90b3R5cGUueXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmNvcHkobnVsbCwgbnVsbCwgdC5SRUQsIHRoaXMubGVmdC5yaWdodCwgbnVsbCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQuY29weShudWxsLCBudWxsLCB0aGlzLmNvbG9yLCBudWxsLCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5TdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMubGVmdC5jb3B5KG51bGwsIG51bGwsICF0aGlzLmxlZnQuY29sb3IsIG51bGwsIG51bGwpLCBlID0gdGhpcy5yaWdodC5jb3B5KG51bGwsIG51bGwsICF0aGlzLnJpZ2h0LmNvbG9yLCBudWxsLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weShudWxsLCBudWxsLCAhdGhpcy5jb2xvciwgdCwgZSk7XG4gICAgfSwgXG4gICAgLy8gRm9yIHRlc3RpbmcuXG4gICAgdC5wcm90b3R5cGUuRHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLkN0KCk7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdygyLCB0KSA8PSB0aGlzLnNpemUgKyAxO1xuICAgIH0sIFxuICAgIC8vIEluIGEgYmFsYW5jZWQgUkIgdHJlZSwgdGhlIGJsYWNrLWRlcHRoIChudW1iZXIgb2YgYmxhY2sgbm9kZXMpIGZyb20gcm9vdCB0b1xuICAgIC8vIGxlYXZlcyBpcyBlcXVhbCBvbiBib3RoIHNpZGVzLiAgVGhpcyBmdW5jdGlvbiB2ZXJpZmllcyB0aGF0IG9yIGFzc2VydHMuXG4gICAgdC5wcm90b3R5cGUuQ3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3QoKSAmJiB0aGlzLmxlZnQuZ3QoKSkgdGhyb3cgUygpO1xuICAgICAgICBpZiAodGhpcy5yaWdodC5ndCgpKSB0aHJvdyBTKCk7XG4gICAgICAgIHZhciB0ID0gdGhpcy5sZWZ0LkN0KCk7XG4gICAgICAgIGlmICh0ICE9PSB0aGlzLnJpZ2h0LkN0KCkpIHRocm93IFMoKTtcbiAgICAgICAgcmV0dXJuIHQgKyAodGhpcy5ndCgpID8gMCA6IDEpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8vIGVuZCBTb3J0ZWRNYXBcbi8vIEFuIGl0ZXJhdG9yIG92ZXIgYW4gTExSQk5vZGUuXG4vLyBlbmQgTExSQk5vZGVcbi8vIEVtcHR5IG5vZGUgaXMgc2hhcmVkIGJldHdlZW4gYWxsIExMUkIgdHJlZXMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxubHQuRU1QVFkgPSBudWxsLCBsdC5SRUQgPSAhMCwgbHQub3QgPSAhMSwgXG4vLyBlbmQgTExSQkVtcHR5Tm9kZVxubHQuRU1QVFkgPSBuZXcgKC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJrZXlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgUygpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgUygpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiY29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgUygpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwibGVmdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBTKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJyaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBTKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgdC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkvdmFsdWUgYWRkZWQuXG4gICAgdC5wcm90b3R5cGUucnQgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgbHQodCwgZSk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgcmVtb3ZlZC5cbiAgICB0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIHQucHJvdG90eXBlLlQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH0sIHQucHJvdG90eXBlLnV0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfSwgdC5wcm90b3R5cGUuaHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9LCB0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCB0LnByb3RvdHlwZS5jdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCB0LnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfSwgXG4gICAgLy8gRm9yIHRlc3RpbmcuXG4gICAgdC5wcm90b3R5cGUuRHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH0sIHQucHJvdG90eXBlLkN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sIHQ7XG59KCkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBTb3J0ZWRTZXQgaXMgYW4gaW1tdXRhYmxlIChjb3B5LW9uLXdyaXRlKSBjb2xsZWN0aW9uIHRoYXQgaG9sZHMgZWxlbWVudHNcbiAqIGluIG9yZGVyIHNwZWNpZmllZCBieSB0aGUgcHJvdmlkZWQgY29tcGFyYXRvci5cbiAqXG4gKiBOT1RFOiBpZiBwcm92aWRlZCBjb21wYXJhdG9yIHJldHVybnMgMCBmb3IgdHdvIGVsZW1lbnRzLCB3ZSBjb25zaWRlciB0aGVtIHRvXG4gKiBiZSBlcXVhbCFcbiAqL1xudmFyIHB0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5WID0gdCwgdGhpcy5kYXRhID0gbmV3IGh0KHRoaXMuVik7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmRhdGEuZ2V0KHQpO1xuICAgIH0sIHQucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuYXQoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuY3QoKTtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuaW5kZXhPZih0KTtcbiAgICB9LCBcbiAgICAvKiogSXRlcmF0ZXMgZWxlbWVudHMgaW4gb3JkZXIgZGVmaW5lZCBieSBcImNvbXBhcmF0b3JcIiAqLyB0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmRhdGEudXQoKGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiB0KGUpLCAhMTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKiBJdGVyYXRlcyBvdmVyIGBlbGVtYHMgc3VjaCB0aGF0OiByYW5nZVswXSA8PSBlbGVtIDwgcmFuZ2VbMV0uICovIHQucHJvdG90eXBlLk50ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBuID0gdGhpcy5kYXRhLl90KHRbMF0pOyBuLkl0KCk7ICkge1xuICAgICAgICAgICAgdmFyIHIgPSBuLkV0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5WKHIua2V5LCB0WzFdKSA+PSAwKSByZXR1cm47XG4gICAgICAgICAgICBlKHIua2V5KTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYGVsZW1gcyBzdWNoIHRoYXQ6IHN0YXJ0IDw9IGVsZW0gdW50aWwgZmFsc2UgaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUueHQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuO1xuICAgICAgICBmb3IgKG4gPSB2b2lkIDAgIT09IGUgPyB0aGlzLmRhdGEuX3QoZSkgOiB0aGlzLmRhdGEubHQoKTsgbi5JdCgpOyApIGlmICghdChuLkV0KCkua2V5KSkgcmV0dXJuO1xuICAgIH0sIFxuICAgIC8qKiBGaW5kcyB0aGUgbGVhc3QgZWxlbWVudCBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYGVsZW1gLiAqLyB0LnByb3RvdHlwZS5GdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmRhdGEuX3QodCk7XG4gICAgICAgIHJldHVybiBlLkl0KCkgPyBlLkV0KCkua2V5IDogbnVsbDtcbiAgICB9LCB0LnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IGR0KHRoaXMuZGF0YS5sdCgpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5fdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkdCh0aGlzLmRhdGEuX3QodCkpO1xuICAgIH0sIFxuICAgIC8qKiBJbnNlcnRzIG9yIHVwZGF0ZXMgYW4gZWxlbWVudCAqLyB0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHkodGhpcy5kYXRhLnJlbW92ZSh0KS5ydCh0LCAhMCkpO1xuICAgIH0sIFxuICAgIC8qKiBEZWxldGVzIGFuIGVsZW1lbnQgKi8gdC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXModCkgPyB0aGlzLmNvcHkodGhpcy5kYXRhLnJlbW92ZSh0KSkgOiB0aGlzO1xuICAgIH0sIHQucHJvdG90eXBlLlQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5UKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuT3QgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgLy8gTWFrZSBzdXJlIGByZXN1bHRgIGFsd2F5cyByZWZlcnMgdG8gdGhlIGxhcmdlciBvbmUgb2YgdGhlIHR3byBzZXRzLlxuICAgICAgICAgICAgICAgIHJldHVybiBlLnNpemUgPCB0LnNpemUgJiYgKGUgPSB0LCB0ID0gdGhpcyksIHQuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZSA9IGUuYWRkKHQpO1xuICAgICAgICB9KSksIGU7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLnNpemUgIT09IGUuc2l6ZSkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKHZhciBuID0gdGhpcy5kYXRhLmx0KCksIHIgPSBlLmRhdGEubHQoKTsgbi5JdCgpOyApIHtcbiAgICAgICAgICAgIHZhciBpID0gbi5FdCgpLmtleSwgbyA9IHIuRXQoKS5rZXk7XG4gICAgICAgICAgICBpZiAoMCAhPT0gdGhpcy5WKGksIG8pKSByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH0sIHQucHJvdG90eXBlLk8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdC5wdXNoKGUpO1xuICAgICAgICB9KSksIHQ7XG4gICAgfSwgdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQucHVzaChlKTtcbiAgICAgICAgfSkpLCBcIlNvcnRlZFNldChcIiArIHQudG9TdHJpbmcoKSArIFwiKVwiO1xuICAgIH0sIHQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBuID0gbmV3IHQodGhpcy5WKTtcbiAgICAgICAgcmV0dXJuIG4uZGF0YSA9IGUsIG47XG4gICAgfSwgdDtcbn0oKSwgZHQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLk10ID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkV0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk10LkV0KCkua2V5O1xuICAgIH0sIHQucHJvdG90eXBlLkl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk10Lkl0KCk7XG4gICAgfSwgdDtcbn0oKSwgdnQgPSBuZXcgaHQoWS5WKTtcblxuZnVuY3Rpb24geXQoKSB7XG4gICAgcmV0dXJuIHZ0O1xufVxuXG5mdW5jdGlvbiBndCgpIHtcbiAgICByZXR1cm4geXQoKTtcbn1cblxudmFyIG10ID0gbmV3IGh0KFkuVik7XG5cbmZ1bmN0aW9uIHd0KCkge1xuICAgIHJldHVybiBtdDtcbn1cblxudmFyIGJ0ID0gbmV3IGh0KFkuViksIF90ID0gbmV3IHB0KFkuVik7XG5cbmZ1bmN0aW9uIEl0KCkge1xuICAgIGZvciAodmFyIHQgPSBbXSwgZSA9IDA7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHRbZV0gPSBhcmd1bWVudHNbZV07XG4gICAgZm9yICh2YXIgbiA9IF90LCByID0gMCwgaSA9IHQ7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgIHZhciBvID0gaVtyXTtcbiAgICAgICAgbiA9IG4uYWRkKG8pO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cblxudmFyIEV0ID0gbmV3IHB0KFYpO1xuXG5mdW5jdGlvbiBUdCgpIHtcbiAgICByZXR1cm4gRXQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50U2V0IGlzIGFuIGltbXV0YWJsZSAoY29weS1vbi13cml0ZSkgY29sbGVjdGlvbiB0aGF0IGhvbGRzIGRvY3VtZW50c1xuICogaW4gb3JkZXIgc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBjb21wYXJhdG9yLiBXZSBhbHdheXMgYWRkIGEgZG9jdW1lbnQga2V5XG4gKiBjb21wYXJhdG9yIG9uIHRvcCBvZiB3aGF0IGlzIHByb3ZpZGVkIHRvIGd1YXJhbnRlZSBkb2N1bWVudCBlcXVhbGl0eSBiYXNlZCBvblxuICogdGhlIGtleS5cbiAqLyB2YXIgTnQgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBUaGUgZGVmYXVsdCBvcmRlcmluZyBpcyBieSBrZXkgaWYgdGhlIGNvbXBhcmF0b3IgaXMgb21pdHRlZCAqL1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICAvLyBXZSBhcmUgYWRkaW5nIGRvY3VtZW50IGtleSBjb21wYXJhdG9yIHRvIHRoZSBlbmQgYXMgaXQncyB0aGUgb25seVxuICAgICAgICAvLyBndWFyYW50ZWVkIHVuaXF1ZSBwcm9wZXJ0eSBvZiBhIGRvY3VtZW50LlxuICAgICAgICB0aGlzLlYgPSB0ID8gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgcmV0dXJuIHQoZSwgbikgfHwgWS5WKGUua2V5LCBuLmtleSk7XG4gICAgICAgIH0gOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gWS5WKHQua2V5LCBlLmtleSk7XG4gICAgICAgIH0sIHRoaXMua3QgPSB3dCgpLCB0aGlzLiR0ID0gbmV3IGh0KHRoaXMuVilcbiAgICAgICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlbXB0eSBjb3B5IG9mIHRoZSBleGlzdGluZyBEb2N1bWVudFNldCwgdXNpbmcgdGhlIHNhbWVcbiAgICAgKiBjb21wYXJhdG9yLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuTHQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChlLlYpO1xuICAgIH0sIHQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT0gdGhpcy5rdC5nZXQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rdC5nZXQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHQuYXQoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiR0LmN0KCk7XG4gICAgfSwgdC5wcm90b3R5cGUuVCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kdC5UKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIHByb3ZpZGVkIGtleSBpbiB0aGUgZG9jdW1lbnQgc2V0LCBvciAtMSBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCBrZXkgaXMgbm90IHByZXNlbnQgaW4gdGhlIHNldDtcbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMua3QuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMuJHQuaW5kZXhPZihlKSA6IC0xO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiR0LnNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8qKiBJdGVyYXRlcyBkb2N1bWVudHMgaW4gb3JkZXIgZGVmaW5lZCBieSBcImNvbXBhcmF0b3JcIiAqLyB0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLiR0LnV0KChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gdChlKSwgITE7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiogSW5zZXJ0cyBvciB1cGRhdGVzIGEgZG9jdW1lbnQgd2l0aCB0aGUgc2FtZSBrZXkgKi8gdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBGaXJzdCByZW1vdmUgdGhlIGVsZW1lbnQgaWYgd2UgaGF2ZSBpdC5cbiAgICAgICAgdmFyIGUgPSB0aGlzLmRlbGV0ZSh0LmtleSk7XG4gICAgICAgIHJldHVybiBlLmNvcHkoZS5rdC5ydCh0LmtleSwgdCksIGUuJHQucnQodCwgbnVsbCkpO1xuICAgIH0sIFxuICAgIC8qKiBEZWxldGVzIGEgZG9jdW1lbnQgd2l0aCBhIGdpdmVuIGtleSAqLyB0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5nZXQodCk7XG4gICAgICAgIHJldHVybiBlID8gdGhpcy5jb3B5KHRoaXMua3QucmVtb3ZlKHQpLCB0aGlzLiR0LnJlbW92ZShlKSkgOiB0aGlzO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiB0KSkgcmV0dXJuICExO1xuICAgICAgICBpZiAodGhpcy5zaXplICE9PSBlLnNpemUpIHJldHVybiAhMTtcbiAgICAgICAgZm9yICh2YXIgbiA9IHRoaXMuJHQubHQoKSwgciA9IGUuJHQubHQoKTsgbi5JdCgpOyApIHtcbiAgICAgICAgICAgIHZhciBpID0gbi5FdCgpLmtleSwgbyA9IHIuRXQoKS5rZXk7XG4gICAgICAgICAgICBpZiAoIWkuaXNFcXVhbChvKSkgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCB0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0LnB1c2goZS50b1N0cmluZygpKTtcbiAgICAgICAgfSkpLCAwID09PSB0Lmxlbmd0aCA/IFwiRG9jdW1lbnRTZXQgKClcIiA6IFwiRG9jdW1lbnRTZXQgKFxcbiAgXCIgKyB0LmpvaW4oXCIgIFxcblwiKSArIFwiXFxuKVwiO1xuICAgIH0sIHQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHZhciByID0gbmV3IHQ7XG4gICAgICAgIHJldHVybiByLlYgPSB0aGlzLlYsIHIua3QgPSBlLCByLiR0ID0gbiwgcjtcbiAgICB9LCB0O1xufSgpLCB4dCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgdGhpcy5CdCA9IG5ldyBodChZLlYpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUudHJhY2sgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5kb2Mua2V5LCBuID0gdGhpcy5CdC5nZXQoZSk7XG4gICAgICAgIG4gPyBcbiAgICAgICAgLy8gTWVyZ2UgdGhlIG5ldyBjaGFuZ2Ugd2l0aCB0aGUgZXhpc3RpbmcgY2hhbmdlLlxuICAgICAgICAwIC8qIEFkZGVkICovICE9PSB0LnR5cGUgJiYgMyAvKiBNZXRhZGF0YSAqLyA9PT0gbi50eXBlID8gdGhpcy5CdCA9IHRoaXMuQnQucnQoZSwgdCkgOiAzIC8qIE1ldGFkYXRhICovID09PSB0LnR5cGUgJiYgMSAvKiBSZW1vdmVkICovICE9PSBuLnR5cGUgPyB0aGlzLkJ0ID0gdGhpcy5CdC5ydChlLCB7XG4gICAgICAgICAgICB0eXBlOiBuLnR5cGUsXG4gICAgICAgICAgICBkb2M6IHQuZG9jXG4gICAgICAgIH0pIDogMiAvKiBNb2RpZmllZCAqLyA9PT0gdC50eXBlICYmIDIgLyogTW9kaWZpZWQgKi8gPT09IG4udHlwZSA/IHRoaXMuQnQgPSB0aGlzLkJ0LnJ0KGUsIHtcbiAgICAgICAgICAgIHR5cGU6IDIgLyogTW9kaWZpZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiB0LmRvY1xuICAgICAgICB9KSA6IDIgLyogTW9kaWZpZWQgKi8gPT09IHQudHlwZSAmJiAwIC8qIEFkZGVkICovID09PSBuLnR5cGUgPyB0aGlzLkJ0ID0gdGhpcy5CdC5ydChlLCB7XG4gICAgICAgICAgICB0eXBlOiAwIC8qIEFkZGVkICovICxcbiAgICAgICAgICAgIGRvYzogdC5kb2NcbiAgICAgICAgfSkgOiAxIC8qIFJlbW92ZWQgKi8gPT09IHQudHlwZSAmJiAwIC8qIEFkZGVkICovID09PSBuLnR5cGUgPyB0aGlzLkJ0ID0gdGhpcy5CdC5yZW1vdmUoZSkgOiAxIC8qIFJlbW92ZWQgKi8gPT09IHQudHlwZSAmJiAyIC8qIE1vZGlmaWVkICovID09PSBuLnR5cGUgPyB0aGlzLkJ0ID0gdGhpcy5CdC5ydChlLCB7XG4gICAgICAgICAgICB0eXBlOiAxIC8qIFJlbW92ZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiBuLmRvY1xuICAgICAgICB9KSA6IDAgLyogQWRkZWQgKi8gPT09IHQudHlwZSAmJiAxIC8qIFJlbW92ZWQgKi8gPT09IG4udHlwZSA/IHRoaXMuQnQgPSB0aGlzLkJ0LnJ0KGUsIHtcbiAgICAgICAgICAgIHR5cGU6IDIgLyogTW9kaWZpZWQgKi8gLFxuICAgICAgICAgICAgZG9jOiB0LmRvY1xuICAgICAgICB9KSA6IFxuICAgICAgICAvLyBUaGlzIGluY2x1ZGVzIHRoZXNlIGNhc2VzLCB3aGljaCBkb24ndCBtYWtlIHNlbnNlOlxuICAgICAgICAvLyBBZGRlZC0+QWRkZWRcbiAgICAgICAgLy8gUmVtb3ZlZC0+UmVtb3ZlZFxuICAgICAgICAvLyBNb2RpZmllZC0+QWRkZWRcbiAgICAgICAgLy8gUmVtb3ZlZC0+TW9kaWZpZWRcbiAgICAgICAgLy8gTWV0YWRhdGEtPkFkZGVkXG4gICAgICAgIC8vIFJlbW92ZWQtPk1ldGFkYXRhXG4gICAgICAgIFMoKSA6IHRoaXMuQnQgPSB0aGlzLkJ0LnJ0KGUsIHQpO1xuICAgIH0sIHQucHJvdG90eXBlLnF0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLkJ0LnV0KChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgICAgICB0LnB1c2gobik7XG4gICAgICAgIH0pKSwgdDtcbiAgICB9LCB0O1xufSgpLCBBdCA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByLCBpLCBvLCB1LCBzKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLmRvY3MgPSBlLCB0aGlzLlV0ID0gbiwgdGhpcy5kb2NDaGFuZ2VzID0gciwgdGhpcy5RdCA9IGksIHRoaXMuZnJvbUNhY2hlID0gbywgXG4gICAgICAgIHRoaXMuS3QgPSB1LCB0aGlzLld0ID0gc1xuICAgICAgICAvKiogUmV0dXJucyBhIHZpZXcgc25hcHNob3QgYXMgaWYgYWxsIGRvY3VtZW50cyBpbiB0aGUgc25hcHNob3Qgd2VyZSBhZGRlZC4gKi87XG4gICAgfVxuICAgIHJldHVybiB0Lmp0ID0gZnVuY3Rpb24oZSwgbiwgciwgaSkge1xuICAgICAgICB2YXIgbyA9IFtdO1xuICAgICAgICByZXR1cm4gbi5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBvLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogQWRkZWQgKi8gLFxuICAgICAgICAgICAgICAgIGRvYzogdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKSwgbmV3IHQoZSwgbiwgTnQuTHQobiksIG8sIHIsIGksIFxuICAgICAgICAvKiBzeW5jU3RhdGVDaGFuZ2VkPSAqLyAhMCwgXG4gICAgICAgIC8qIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzPSAqLyAhMSk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImhhc1BlbmRpbmdXcml0ZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLlF0LlQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKCEodGhpcy5mcm9tQ2FjaGUgPT09IHQuZnJvbUNhY2hlICYmIHRoaXMuS3QgPT09IHQuS3QgJiYgdGhpcy5RdC5pc0VxdWFsKHQuUXQpICYmIFJuKHRoaXMucXVlcnksIHQucXVlcnkpICYmIHRoaXMuZG9jcy5pc0VxdWFsKHQuZG9jcykgJiYgdGhpcy5VdC5pc0VxdWFsKHQuVXQpKSkgcmV0dXJuICExO1xuICAgICAgICB2YXIgZSA9IHRoaXMuZG9jQ2hhbmdlcywgbiA9IHQuZG9jQ2hhbmdlcztcbiAgICAgICAgaWYgKGUubGVuZ3RoICE9PSBuLmxlbmd0aCkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGUubGVuZ3RoOyByKyspIGlmIChlW3JdLnR5cGUgIT09IG5bcl0udHlwZSB8fCAhZVtyXS5kb2MuaXNFcXVhbChuW3JdLmRvYykpIHJldHVybiAhMTtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH0sIHQ7XG59KCksIFN0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KFxuICAgIC8qKlxuICAgICAqIFRoZSBzbmFwc2hvdCB2ZXJzaW9uIHRoaXMgZXZlbnQgYnJpbmdzIHVzIHVwIHRvLCBvciBNSU4gaWYgbm90IHNldC5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBBIG1hcCBmcm9tIHRhcmdldCB0byBjaGFuZ2VzIHRvIHRoZSB0YXJnZXQuIFNlZSBUYXJnZXRDaGFuZ2UuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgdGFyZ2V0cyB0aGF0IGlzIGtub3duIHRvIGJlIGluY29uc2lzdGVudC4gTGlzdGVucyBmb3IgdGhlc2VcbiAgICAgKiB0YXJnZXRzIHNob3VsZCBiZSByZS1lc3RhYmxpc2hlZCB3aXRob3V0IHJlc3VtZSB0b2tlbnMuXG4gICAgICovXG4gICAgbiwgXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2Ygd2hpY2ggZG9jdW1lbnRzIGhhdmUgY2hhbmdlZCBvciBiZWVuIGRlbGV0ZWQsIGFsb25nIHdpdGggdGhlXG4gICAgICogZG9jJ3MgbmV3IHZhbHVlcyAoaWYgbm90IGRlbGV0ZWQpLlxuICAgICAqL1xuICAgIHIsIFxuICAgIC8qKlxuICAgICAqIEEgc2V0IG9mIHdoaWNoIGRvY3VtZW50IHVwZGF0ZXMgYXJlIGR1ZSBvbmx5IHRvIGxpbWJvIHJlc29sdXRpb24gdGFyZ2V0cy5cbiAgICAgKi9cbiAgICBpKSB7XG4gICAgICAgIHRoaXMuZXQgPSB0LCB0aGlzLkd0ID0gZSwgdGhpcy56dCA9IG4sIHRoaXMuSHQgPSByLCB0aGlzLkp0ID0gaTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSEFDSzogVmlld3MgcmVxdWlyZSBSZW1vdGVFdmVudHMgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHZpZXcgaXNcbiAgICAgKiBDVVJSRU5ULCBidXQgc2Vjb25kYXJ5IHRhYnMgZG9uJ3QgcmVjZWl2ZSByZW1vdGUgZXZlbnRzLiBTbyB0aGlzIG1ldGhvZCBpc1xuICAgICAqIHVzZWQgdG8gY3JlYXRlIGEgc3ludGhlc2l6ZWQgUmVtb3RlRXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBhcHBseSBhXG4gICAgICogQ1VSUkVOVCBzdGF0dXMgY2hhbmdlIHRvIGEgVmlldywgZm9yIHF1ZXJpZXMgZXhlY3V0ZWQgaW4gYSBkaWZmZXJlbnQgdGFiLlxuICAgICAqL1xuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHlcbiAgICAgICAgcmV0dXJuIHQuWXQgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHZhciByID0gbmV3IE1hcDtcbiAgICAgICAgcmV0dXJuIHIuc2V0KGUsIGt0Llh0KGUsIG4pKSwgbmV3IHQoei5taW4oKSwgciwgVHQoKSwgeXQoKSwgSXQoKSk7XG4gICAgfSwgdDtcbn0oKSwga3QgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoXG4gICAgLyoqXG4gICAgICogQW4gb3BhcXVlLCBzZXJ2ZXItYXNzaWduZWQgdG9rZW4gdGhhdCBhbGxvd3Mgd2F0Y2hpbmcgYSBxdWVyeSB0byBiZSByZXN1bWVkXG4gICAgICogYWZ0ZXIgZGlzY29ubmVjdGluZyB3aXRob3V0IHJldHJhbnNtaXR0aW5nIGFsbCB0aGUgZGF0YSB0aGF0IG1hdGNoZXMgdGhlXG4gICAgICogcXVlcnkuIFRoZSByZXN1bWUgdG9rZW4gZXNzZW50aWFsbHkgaWRlbnRpZmllcyBhIHBvaW50IGluIHRpbWUgZnJvbSB3aGljaFxuICAgICAqIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlc3VtZSBzZW5kaW5nIHJlc3VsdHMuXG4gICAgICovXG4gICAgdCwgXG4gICAgLyoqXG4gICAgICogVGhlIFwiY3VycmVudFwiIChzeW5jZWQpIHN0YXR1cyBvZiB0aGlzIHRhcmdldC4gTm90ZSB0aGF0IFwiY3VycmVudFwiXG4gICAgICogaGFzIHNwZWNpYWwgbWVhbmluZyBpbiB0aGUgUlBDIHByb3RvY29sIHRoYXQgaW1wbGllcyB0aGF0IGEgdGFyZ2V0IGlzXG4gICAgICogYm90aCB1cC10by1kYXRlIGFuZCBjb25zaXN0ZW50IHdpdGggdGhlIHJlc3Qgb2YgdGhlIHdhdGNoIHN0cmVhbS5cbiAgICAgKi9cbiAgICBlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIGRvY3VtZW50cyB0aGF0IHdlcmUgbmV3bHkgYXNzaWduZWQgdG8gdGhpcyB0YXJnZXQgYXMgcGFydCBvZlxuICAgICAqIHRoaXMgcmVtb3RlIGV2ZW50LlxuICAgICAqL1xuICAgIG4sIFxuICAgIC8qKlxuICAgICAqIFRoZSBzZXQgb2YgZG9jdW1lbnRzIHRoYXQgd2VyZSBhbHJlYWR5IGFzc2lnbmVkIHRvIHRoaXMgdGFyZ2V0IGJ1dCByZWNlaXZlZFxuICAgICAqIGFuIHVwZGF0ZSBkdXJpbmcgdGhpcyByZW1vdGUgZXZlbnQuXG4gICAgICovXG4gICAgciwgXG4gICAgLyoqXG4gICAgICogVGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCB3ZXJlIHJlbW92ZWQgZnJvbSB0aGlzIHRhcmdldCBhcyBwYXJ0IG9mIHRoaXNcbiAgICAgKiByZW1vdGUgZXZlbnQuXG4gICAgICovXG4gICAgaSkge1xuICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gdCwgdGhpcy5adCA9IGUsIHRoaXMudGUgPSBuLCB0aGlzLmVlID0gciwgdGhpcy5uZSA9IGlcbiAgICAgICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBjcmVhdGUgYSBzeW50aGVzaXplZCBUYXJnZXRDaGFuZ2VzIHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAgICAgKiBhcHBseSBhIENVUlJFTlQgc3RhdHVzIGNoYW5nZSB0byBhIFZpZXcgKGZvciBxdWVyaWVzIGV4ZWN1dGVkIGluIGEgZGlmZmVyZW50XG4gICAgICogdGFiKSBvciBmb3IgbmV3IHF1ZXJpZXMgKHRvIHJhaXNlIHNuYXBzaG90cyB3aXRoIGNvcnJlY3QgQ1VSUkVOVCBzdGF0dXMpLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuWHQgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChydC5aLCBuLCBJdCgpLCBJdCgpLCBJdCgpKTtcbiAgICB9LCB0O1xufSgpLCBEdCA9IGZ1bmN0aW9uKFxuLyoqIFRoZSBuZXcgZG9jdW1lbnQgYXBwbGllcyB0byBhbGwgb2YgdGhlc2UgdGFyZ2V0cy4gKi9cbnQsIFxuLyoqIFRoZSBuZXcgZG9jdW1lbnQgaXMgcmVtb3ZlZCBmcm9tIGFsbCBvZiB0aGVzZSB0YXJnZXRzLiAqL1xuZSwgXG4vKiogVGhlIGtleSBvZiB0aGUgZG9jdW1lbnQgZm9yIHRoaXMgY2hhbmdlLiAqL1xubiwgXG4vKipcbiAgICAgKiBUaGUgbmV3IGRvY3VtZW50IG9yIE5vRG9jdW1lbnQgaWYgaXQgd2FzIGRlbGV0ZWQuIElzIG51bGwgaWYgdGhlXG4gICAgICogZG9jdW1lbnQgd2VudCBvdXQgb2YgdmlldyB3aXRob3V0IHRoZSBzZXJ2ZXIgc2VuZGluZyBhIG5ldyBkb2N1bWVudC5cbiAgICAgKi9cbnIpIHtcbiAgICB0aGlzLnNlID0gdCwgdGhpcy5yZW1vdmVkVGFyZ2V0SWRzID0gZSwgdGhpcy5rZXkgPSBuLCB0aGlzLmllID0gcjtcbn0sIE90ID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMudGFyZ2V0SWQgPSB0LCB0aGlzLnJlID0gZTtcbn0sIFB0ID0gZnVuY3Rpb24oXG4vKiogV2hhdCBraW5kIG9mIGNoYW5nZSBvY2N1cnJlZCB0byB0aGUgd2F0Y2ggdGFyZ2V0LiAqL1xudCwgXG4vKiogVGhlIHRhcmdldCBJRHMgdGhhdCB3ZXJlIGFkZGVkL3JlbW92ZWQvc2V0LiAqL1xuZSwgXG4vKipcbiAgICAgKiBBbiBvcGFxdWUsIHNlcnZlci1hc3NpZ25lZCB0b2tlbiB0aGF0IGFsbG93cyB3YXRjaGluZyBhIHRhcmdldCB0byBiZVxuICAgICAqIHJlc3VtZWQgYWZ0ZXIgZGlzY29ubmVjdGluZyB3aXRob3V0IHJldHJhbnNtaXR0aW5nIGFsbCB0aGUgZGF0YSB0aGF0XG4gICAgICogbWF0Y2hlcyB0aGUgdGFyZ2V0LiBUaGUgcmVzdW1lIHRva2VuIGVzc2VudGlhbGx5IGlkZW50aWZpZXMgYSBwb2ludCBpblxuICAgICAqIHRpbWUgZnJvbSB3aGljaCB0aGUgc2VydmVyIHNob3VsZCByZXN1bWUgc2VuZGluZyByZXN1bHRzLlxuICAgICAqL1xublxuLyoqIEFuIFJQQyBlcnJvciBpbmRpY2F0aW5nIHdoeSB0aGUgd2F0Y2ggZmFpbGVkLiAqLyAsIHIpIHtcbiAgICB2b2lkIDAgPT09IG4gJiYgKG4gPSBydC5aKSwgdm9pZCAwID09PSByICYmIChyID0gbnVsbCksIHRoaXMuc3RhdGUgPSB0LCB0aGlzLnRhcmdldElkcyA9IGUsIFxuICAgIHRoaXMucmVzdW1lVG9rZW4gPSBuLCB0aGlzLmNhdXNlID0gcjtcbn0sIFZ0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBwZW5kaW5nIHJlc3BvbnNlcyAoYWRkcyBvciByZW1vdmVzKSB0aGF0IHdlIGFyZSB3YWl0aW5nIG9uLlxuICAgICAgICAgKiBXZSBvbmx5IGNvbnNpZGVyIHRhcmdldHMgYWN0aXZlIHRoYXQgaGF2ZSBubyBwZW5kaW5nIHJlc3BvbnNlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2UgPSAwLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBLZWVwcyB0cmFjayBvZiB0aGUgZG9jdW1lbnQgY2hhbmdlcyBzaW5jZSB0aGUgbGFzdCByYWlzZWQgc25hcHNob3QuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhlc2UgY2hhbmdlcyBhcmUgY29udGludW91c2x5IHVwZGF0ZWQgYXMgd2UgcmVjZWl2ZSBkb2N1bWVudCB1cGRhdGVzIGFuZFxuICAgICAgICAgICAgICogYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMgYWdhaW5zdCB0aGUgbGFzdCBpc3N1ZWQgc25hcHNob3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZSA9IFJ0KCksIFxuICAgICAgICAvKiogU2VlIHB1YmxpYyBnZXR0ZXJzIGZvciBleHBsYW5hdGlvbnMgb2YgdGhlc2UgZmllbGRzLiAqL1xuICAgICAgICB0aGlzLmNlID0gcnQuWiwgdGhpcy51ZSA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaGV0aGVyIHRoaXMgdGFyZ2V0IHN0YXRlIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgbmV4dCBzbmFwc2hvdC4gV2VcbiAgICAgICAgICAgICAqIGluaXRpYWxpemUgdG8gdHJ1ZSBzbyB0aGF0IG5ld2x5LWFkZGVkIHRhcmdldHMgYXJlIGluY2x1ZGVkIGluIHRoZSBuZXh0XG4gICAgICAgICAgICAgKiBSZW1vdGVFdmVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLmhlID0gITA7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiWnRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGlzIHRhcmdldCBoYXMgYmVlbiBtYXJrZWQgJ2N1cnJlbnQnLlxuICAgICAgICAgKlxuICAgICAgICAgKiAnQ3VycmVudCcgaGFzIHNwZWNpYWwgbWVhbmluZyBpbiB0aGUgUlBDIHByb3RvY29sOiBJdCBpbXBsaWVzIHRoYXQgdGhlXG4gICAgICAgICAqIFdhdGNoIGJhY2tlbmQgaGFzIHNlbnQgdXMgYWxsIGNoYW5nZXMgdXAgdG8gdGhlIHBvaW50IGF0IHdoaWNoIHRoZSB0YXJnZXRcbiAgICAgICAgICogd2FzIGFkZGVkIGFuZCB0aGF0IHRoZSB0YXJnZXQgaXMgY29uc2lzdGVudCB3aXRoIHRoZSByZXN0IG9mIHRoZSB3YXRjaFxuICAgICAgICAgKiBzdHJlYW0uXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJyZXN1bWVUb2tlblwiLCB7XG4gICAgICAgIC8qKiBUaGUgbGFzdCByZXN1bWUgdG9rZW4gc2VudCB0byB1cyBmb3IgdGhpcyB0YXJnZXQuICovIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImxlXCIsIHtcbiAgICAgICAgLyoqIFdoZXRoZXIgdGhpcyB0YXJnZXQgaGFzIHBlbmRpbmcgdGFyZ2V0IGFkZHMgb3IgdGFyZ2V0IHJlbW92ZXMuICovIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gMCAhPT0gdGhpcy5vZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIl9lXCIsIHtcbiAgICAgICAgLyoqIFdoZXRoZXIgd2UgaGF2ZSBtb2RpZmllZCBhbnkgc3RhdGUgdGhhdCBzaG91bGQgdHJpZ2dlciBhIHNuYXBzaG90LiAqLyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIHJlc3VtZSB0b2tlbiB0byB0aGUgVGFyZ2V0Q2hhbmdlLCBidXQgb25seSB3aGVuIGl0IGhhcyBhIG5ld1xuICAgICAqIHZhbHVlLiBFbXB0eSByZXN1bWVUb2tlbnMgYXJlIGRpc2NhcmRlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5mZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdC5YKCkgPiAwICYmICh0aGlzLmhlID0gITAsIHRoaXMuY2UgPSB0KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGFyZ2V0IGNoYW5nZSBmcm9tIHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogVG8gcmVzZXQgdGhlIGRvY3VtZW50IGNoYW5nZXMgYWZ0ZXIgcmFpc2luZyB0aGlzIHNuYXBzaG90LCBjYWxsXG4gICAgICogYGNsZWFyUGVuZGluZ0NoYW5nZXMoKWAuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBJdCgpLCBlID0gSXQoKSwgbiA9IEl0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFlLmZvckVhY2goKGZ1bmN0aW9uKHIsIGkpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICBjYXNlIDAgLyogQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgIHQgPSB0LmFkZChyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDIgLyogTW9kaWZpZWQgKi8gOlxuICAgICAgICAgICAgICAgIGUgPSBlLmFkZChyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEgLyogUmVtb3ZlZCAqLyA6XG4gICAgICAgICAgICAgICAgbiA9IG4uYWRkKHIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgUygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSksIG5ldyBrdCh0aGlzLmNlLCB0aGlzLnVlLCB0LCBlLCBuKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGRvY3VtZW50IGNoYW5nZXMgYW5kIHNldHMgYGhhc1BlbmRpbmdDaGFuZ2VzYCB0byBmYWxzZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS53ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmhlID0gITEsIHRoaXMuYWUgPSBSdCgpO1xuICAgIH0sIHQucHJvdG90eXBlLlRlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0aGlzLmhlID0gITAsIHRoaXMuYWUgPSB0aGlzLmFlLnJ0KHQsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLkVlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmhlID0gITAsIHRoaXMuYWUgPSB0aGlzLmFlLnJlbW92ZSh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5JZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9lICs9IDE7XG4gICAgfSwgdC5wcm90b3R5cGUubWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5vZSAtPSAxO1xuICAgIH0sIHQucHJvdG90eXBlLkFlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaGUgPSAhMCwgdGhpcy51ZSA9ICEwO1xuICAgIH0sIHQ7XG59KCksIEN0ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5SZSA9IHQsIFxuICAgICAgICAvKiogVGhlIGludGVybmFsIHN0YXRlIG9mIGFsbCB0cmFja2VkIHRhcmdldHMuICovXG4gICAgICAgIHRoaXMuUGUgPSBuZXcgTWFwLCBcbiAgICAgICAgLyoqIEtlZXBzIHRyYWNrIG9mIHRoZSBkb2N1bWVudHMgdG8gdXBkYXRlIHNpbmNlIHRoZSBsYXN0IHJhaXNlZCBzbmFwc2hvdC4gKi9cbiAgICAgICAgdGhpcy5nZSA9IHl0KCksIFxuICAgICAgICAvKiogQSBtYXBwaW5nIG9mIGRvY3VtZW50IGtleXMgdG8gdGhlaXIgc2V0IG9mIHRhcmdldCBJRHMuICovXG4gICAgICAgIHRoaXMuVmUgPSBMdCgpLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGxpc3Qgb2YgdGFyZ2V0cyB3aXRoIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy4gVGhlc2UgdGFyZ2V0cyBhcmVcbiAgICAgICAgICAgICAqIGtub3duIHRvIGJlIGluY29uc2lzdGVudCBhbmQgdGhlaXIgbGlzdGVucyBuZWVkcyB0byBiZSByZS1lc3RhYmxpc2hlZCBieVxuICAgICAgICAgICAgICogUmVtb3RlU3RvcmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy55ZSA9IG5ldyBwdChWKVxuICAgICAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgYW5kIGFkZHMgdGhlIERvY3VtZW50V2F0Y2hDaGFuZ2UgdG8gdGhlIGN1cnJlbnQgc2V0IG9mIGNoYW5nZXMuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSAwLCBuID0gdC5zZTsgZSA8IG4ubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgIHZhciByID0gbltlXTtcbiAgICAgICAgICAgIHQuaWUgaW5zdGFuY2VvZiBibiA/IHRoaXMudmUociwgdC5pZSkgOiB0LmllIGluc3RhbmNlb2YgX24gJiYgdGhpcy5iZShyLCB0LmtleSwgdC5pZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG8gPSB0LnJlbW92ZWRUYXJnZXRJZHM7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdSA9IG9baV07XG4gICAgICAgICAgICB0aGlzLmJlKHUsIHQua2V5LCB0LmllKTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKiBQcm9jZXNzZXMgYW5kIGFkZHMgdGhlIFdhdGNoVGFyZ2V0Q2hhbmdlIHRvIHRoZSBjdXJyZW50IHNldCBvZiBjaGFuZ2VzLiAqLyB0LnByb3RvdHlwZS5TZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICB0aGlzLkRlKHQsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICB2YXIgciA9IGUuQ2Uobik7XG4gICAgICAgICAgICBzd2l0Y2ggKHQuc3RhdGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAwIC8qIE5vQ2hhbmdlICovIDpcbiAgICAgICAgICAgICAgICBlLk5lKG4pICYmIHIuZmUodC5yZXN1bWVUb2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxIC8qIEFkZGVkICovIDpcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY3JlbWVudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgYWNrcyBuZWVkZWQgZnJvbSB3YXRjaFxuICAgICAgICAgICAgICAgIC8vIGZvciB0aGlzIHRhcmdldElkLlxuICAgICAgICAgICAgICAgIHIubWUoKSwgci5sZSB8fCBcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgZnJlc2hseSBhZGRlZCB0YXJnZXQsIHNvIHdlIG5lZWQgdG8gcmVzZXQgYW55IHN0YXRlXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSBoYWQgcHJldmlvdXNseS4gVGhpcyBjYW4gaGFwcGVuIGUuZy4gd2hlbiByZW1vdmUgYW5kIGFkZFxuICAgICAgICAgICAgICAgIC8vIGJhY2sgYSB0YXJnZXQgZm9yIGV4aXN0ZW5jZSBmaWx0ZXIgbWlzbWF0Y2hlcy5cbiAgICAgICAgICAgICAgICByLndlKCksIHIuZmUodC5yZXN1bWVUb2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyIC8qIFJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiByZW1vdmVkIHRhcmdldHMgdG8gd2UgY2FuIHBvc3QtZmlsdGVyIGFuZFxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhbnkgdGFyZ2V0IGNoYW5nZXMuXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBkZWNyZW1lbnQgdGhlIG51bWJlciBvZiBwZW5kaW5nIGFja3MgbmVlZGVkIGZyb20gd2F0Y2hcbiAgICAgICAgICAgICAgICAvLyBmb3IgdGhpcyB0YXJnZXRJZC5cbiAgICAgICAgICAgICAgICByLm1lKCksIHIubGUgfHwgZS5yZW1vdmVUYXJnZXQobik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAzIC8qIEN1cnJlbnQgKi8gOlxuICAgICAgICAgICAgICAgIGUuTmUobikgJiYgKHIuQWUoKSwgci5mZSh0LnJlc3VtZVRva2VuKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA0IC8qIFJlc2V0ICovIDpcbiAgICAgICAgICAgICAgICBlLk5lKG4pICYmIChcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgdGFyZ2V0IGFuZCBzeW50aGVzaXplcyByZW1vdmVzIGZvciBhbGwgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudHMuIFRoZSBiYWNrZW5kIHdpbGwgcmUtYWRkIGFueSBkb2N1bWVudHMgdGhhdCBzdGlsbFxuICAgICAgICAgICAgICAgIC8vIG1hdGNoIHRoZSB0YXJnZXQgYmVmb3JlIGl0IHNlbmRzIHRoZSBuZXh0IGdsb2JhbCBzbmFwc2hvdC5cbiAgICAgICAgICAgICAgICBlLnhlKG4pLCByLmZlKHQucmVzdW1lVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIFMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYWxsIHRhcmdldElkcyB0aGF0IHRoZSB3YXRjaCBjaGFuZ2UgYXBwbGllcyB0bzogZWl0aGVyIHRoZVxuICAgICAqIHRhcmdldElkcyBleHBsaWNpdGx5IGxpc3RlZCBpbiB0aGUgY2hhbmdlIG9yIHRoZSB0YXJnZXRJZHMgb2YgYWxsIGN1cnJlbnRseVxuICAgICAqIGFjdGl2ZSB0YXJnZXRzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkRlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHQudGFyZ2V0SWRzLmxlbmd0aCA+IDAgPyB0LnRhcmdldElkcy5mb3JFYWNoKGUpIDogdGhpcy5QZS5mb3JFYWNoKChmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICBuLk5lKHIpICYmIGUocik7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGV4aXN0ZW5jZSBmaWx0ZXJzIGFuZCBzeW50aGVzaXplcyBkZWxldGVzIGZvciBmaWx0ZXIgbWlzbWF0Y2hlcy5cbiAgICAgKiBUYXJnZXRzIHRoYXQgYXJlIGludmFsaWRhdGVkIGJ5IGZpbHRlciBtaXNtYXRjaGVzIGFyZSBhZGRlZCB0b1xuICAgICAqIGBwZW5kaW5nVGFyZ2V0UmVzZXRzYC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5GZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LnRhcmdldElkLCBuID0gdC5yZS5jb3VudCwgciA9IHRoaXMuT2UoZSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKG50KGkpKSBpZiAoMCA9PT0gbikge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBleGlzdGVuY2UgZmlsdGVyIHRvbGQgdXMgdGhlIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0LiBXZSBkZWR1Y2VcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHRoaXMgZG9jdW1lbnQgZG9lcyBub3QgZXhpc3QgYW5kIGFwcGx5IGEgZGVsZXRlZCBkb2N1bWVudCB0b1xuICAgICAgICAgICAgICAgIC8vIG91ciB1cGRhdGVzLiBXaXRob3V0IGFwcGx5aW5nIHRoaXMgZGVsZXRlZCBkb2N1bWVudCB0aGVyZSBtaWdodCBiZVxuICAgICAgICAgICAgICAgIC8vIGFub3RoZXIgcXVlcnkgdGhhdCB3aWxsIHJhaXNlIHRoaXMgZG9jdW1lbnQgYXMgcGFydCBvZiBhIHNuYXBzaG90XG4gICAgICAgICAgICAgICAgLy8gdW50aWwgaXQgaXMgcmVzb2x2ZWQsIGVzc2VudGlhbGx5IGV4cG9zaW5nIGluY29uc2lzdGVuY3kgYmV0d2VlblxuICAgICAgICAgICAgICAgIC8vIHF1ZXJpZXMuXG4gICAgICAgICAgICAgICAgdmFyIG8gPSBuZXcgWShpLnBhdGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmUoZSwgbywgbmV3IF9uKG8sIHoubWluKCkpKTtcbiAgICAgICAgICAgIH0gZWxzZSBrKDEgPT09IG4pOyBlbHNlIHRoaXMuTWUoZSkgIT09IG4gJiYgKFxuICAgICAgICAgICAgLy8gRXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaDogV2UgcmVzZXQgdGhlIG1hcHBpbmcgYW5kIHJhaXNlIGEgbmV3XG4gICAgICAgICAgICAvLyBzbmFwc2hvdCB3aXRoIGBpc0Zyb21DYWNoZTp0cnVlYC5cbiAgICAgICAgICAgIHRoaXMueGUoZSksIHRoaXMueWUgPSB0aGlzLnllLmFkZChlKSk7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY3VycmVudGx5IGFjY3VtdWxhdGVkIHN0YXRlIGludG8gYSByZW1vdGUgZXZlbnQgYXQgdGhlXG4gICAgICogcHJvdmlkZWQgc25hcHNob3QgdmVyc2lvbi4gUmVzZXRzIHRoZSBhY2N1bXVsYXRlZCBjaGFuZ2VzIGJlZm9yZSByZXR1cm5pbmcuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUua2UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IG5ldyBNYXA7XG4gICAgICAgIHRoaXMuUGUuZm9yRWFjaCgoZnVuY3Rpb24ociwgaSkge1xuICAgICAgICAgICAgdmFyIG8gPSBlLk9lKGkpO1xuICAgICAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoci5adCAmJiBudChvLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9jdW1lbnQgcXVlcmllcyBmb3IgZG9jdW1lbnQgdGhhdCBkb24ndCBleGlzdCBjYW4gcHJvZHVjZSBhbiBlbXB0eVxuICAgICAgICAgICAgICAgICAgICAvLyByZXN1bHQgc2V0LiBUbyB1cGRhdGUgb3VyIGxvY2FsIGNhY2hlLCB3ZSBzeW50aGVzaXplIGEgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGlmIHdlIGhhdmUgbm90IHByZXZpb3VzbHkgcmVjZWl2ZWQgdGhlIGRvY3VtZW50LiBUaGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmVzIHRoZSBsaW1ibyBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQsIHJlbW92aW5nIGl0IGZyb21cbiAgICAgICAgICAgICAgICAgICAgLy8gbGltYm9Eb2N1bWVudFJlZnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogSWRlYWxseSB3ZSB3b3VsZCBoYXZlIGFuIGV4cGxpY2l0IGxvb2t1cCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCByZXN1bHRpbmcgaW4gYW4gZXhwbGljaXQgZGVsZXRlIG1lc3NhZ2UgYW5kIHdlIGNvdWxkXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIHNwZWNpYWwgbG9naWMuXG4gICAgICAgICAgICAgICAgICAgIHZhciB1ID0gbmV3IFkoby50YXJnZXQucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IGUuZ2UuZ2V0KHUpIHx8IGUuJGUoaSwgdSkgfHwgZS5iZShpLCB1LCBuZXcgX24odSwgdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByLl9lICYmIChuLnNldChpLCByLmRlKCkpLCByLndlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHZhciByID0gSXQoKTtcbiAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2V0IG9mIGxpbWJvLW9ubHkgZG9jdW1lbnQgdXBkYXRlcyBhcyB0aGUgR0MgbG9naWNcbiAgICAgICAgLy8gc3BlY2lhbC1jYXNlcyBkb2N1bWVudHMgdGhhdCBkbyBub3QgYXBwZWFyIGluIHRoZSB0YXJnZXQgY2FjaGUuXG4gICAgICAgIC8vIFRPRE8oZ3NvbHRpcyk6IEV4cGFuZCBvbiB0aGlzIGNvbW1lbnQgb25jZSBHQyBpcyBhdmFpbGFibGUgaW4gdGhlIEpTXG4gICAgICAgIC8vIGNsaWVudC5cbiAgICAgICAgICAgICAgICB0aGlzLlZlLmZvckVhY2goKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgIHZhciBpID0gITA7XG4gICAgICAgICAgICBuLnh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBlLk9lKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAhbiB8fCAyIC8qIExpbWJvUmVzb2x1dGlvbiAqLyA9PT0gbi50dCB8fCAoaSA9ICExLCAhMSk7XG4gICAgICAgICAgICB9KSksIGkgJiYgKHIgPSByLmFkZCh0KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIGkgPSBuZXcgU3QodCwgbiwgdGhpcy55ZSwgdGhpcy5nZSwgcik7XG4gICAgICAgIHJldHVybiB0aGlzLmdlID0geXQoKSwgdGhpcy5WZSA9IEx0KCksIHRoaXMueWUgPSBuZXcgcHQoViksIGk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgdG8gdGhlIGludGVybmFsIGxpc3Qgb2YgZG9jdW1lbnQgdXBkYXRlcyBhbmRcbiAgICAgKiBpdHMgZG9jdW1lbnQga2V5IHRvIHRoZSBnaXZlbiB0YXJnZXQncyBtYXBwaW5nLlxuICAgICAqL1xuICAgIC8vIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gICAgdC5wcm90b3R5cGUudmUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGlmICh0aGlzLk5lKHQpKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuJGUodCwgZS5rZXkpID8gMiAvKiBNb2RpZmllZCAqLyA6IDAgLyogQWRkZWQgKi87XG4gICAgICAgICAgICB0aGlzLkNlKHQpLlRlKGUua2V5LCBuKSwgdGhpcy5nZSA9IHRoaXMuZ2UucnQoZS5rZXksIGUpLCB0aGlzLlZlID0gdGhpcy5WZS5ydChlLmtleSwgdGhpcy5MZShlLmtleSkuYWRkKHQpKTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3ZpZGVkIGRvY3VtZW50IGZyb20gdGhlIHRhcmdldCBtYXBwaW5nLiBJZiB0aGVcbiAgICAgKiBkb2N1bWVudCBubyBsb25nZXIgbWF0Y2hlcyB0aGUgdGFyZ2V0LCBidXQgdGhlIGRvY3VtZW50J3Mgc3RhdGUgaXMgc3RpbGxcbiAgICAgKiBrbm93biAoZS5nLiB3ZSBrbm93IHRoYXQgdGhlIGRvY3VtZW50IHdhcyBkZWxldGVkIG9yIHdlIHJlY2VpdmVkIHRoZSBjaGFuZ2VcbiAgICAgKiB0aGF0IGNhdXNlZCB0aGUgZmlsdGVyIG1pc21hdGNoKSwgdGhlIG5ldyBkb2N1bWVudCBjYW4gYmUgcHJvdmlkZWRcbiAgICAgKiB0byB1cGRhdGUgdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZS5cbiAgICAgKi9cbiAgICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICAgIHQucHJvdG90eXBlLmJlID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBpZiAodGhpcy5OZSh0KSkge1xuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLkNlKHQpO1xuICAgICAgICAgICAgdGhpcy4kZSh0LCBlKSA/IHIuVGUoZSwgMSAvKiBSZW1vdmVkICovKSA6IFxuICAgICAgICAgICAgLy8gVGhlIGRvY3VtZW50IG1heSBoYXZlIGVudGVyZWQgYW5kIGxlZnQgdGhlIHRhcmdldCBiZWZvcmUgd2UgcmFpc2VkIGFcbiAgICAgICAgICAgIC8vIHNuYXBzaG90LCBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGNoYW5nZS5cbiAgICAgICAgICAgIHIuRWUoZSksIHRoaXMuVmUgPSB0aGlzLlZlLnJ0KGUsIHRoaXMuTGUoZSkuZGVsZXRlKHQpKSwgbiAmJiAodGhpcy5nZSA9IHRoaXMuZ2UucnQoZSwgbikpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUucmVtb3ZlVGFyZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlBlLmRlbGV0ZSh0KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGNvdW50IG9mIGRvY3VtZW50cyBpbiB0aGUgdGFyZ2V0LiBUaGlzIGluY2x1ZGVzIGJvdGhcbiAgICAgKiB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0aGF0IHRoZSBMb2NhbFN0b3JlIGNvbnNpZGVycyB0byBiZSBwYXJ0IG9mIHRoZVxuICAgICAqIHRhcmdldCBhcyB3ZWxsIGFzIGFueSBhY2N1bXVsYXRlZCBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLk1lID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuQ2UodCkuZGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuUmUuQmUodCkuc2l6ZSArIGUudGUuc2l6ZSAtIGUubmUuc2l6ZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnQgdGhlIG51bWJlciBvZiBhY2tzIG5lZWRlZCBmcm9tIHdhdGNoIGJlZm9yZSB3ZSBjYW4gY29uc2lkZXIgdGhlXG4gICAgICogc2VydmVyIHRvIGJlICdpbi1zeW5jJyB3aXRoIHRoZSBjbGllbnQncyBhY3RpdmUgdGFyZ2V0cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5JZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5DZSh0KS5JZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLkNlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuUGUuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSB8fCAoZSA9IG5ldyBWdCwgdGhpcy5QZS5zZXQodCwgZSkpLCBlO1xuICAgIH0sIHQucHJvdG90eXBlLkxlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuVmUuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSB8fCAoZSA9IG5ldyBwdChWKSwgdGhpcy5WZSA9IHRoaXMuVmUucnQodCwgZSkpLCBlO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIHVzZXIgaXMgc3RpbGwgaW50ZXJlc3RlZCBpbiB0aGlzIHRhcmdldCAoYnkgY2FsbGluZ1xuICAgICAqIGBnZXRUYXJnZXREYXRhRm9yVGFyZ2V0KClgKSBhbmQgdGhhdCB3ZSBhcmUgbm90IHdhaXRpbmcgZm9yIHBlbmRpbmcgQUREc1xuICAgICAqIGZyb20gd2F0Y2guXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTmUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gbnVsbCAhPT0gdGhpcy5PZSh0KTtcbiAgICAgICAgcmV0dXJuIGUgfHwgVChcIldhdGNoQ2hhbmdlQWdncmVnYXRvclwiLCBcIkRldGVjdGVkIGluYWN0aXZlIHRhcmdldFwiLCB0KSwgZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBUYXJnZXREYXRhIGZvciBhbiBhY3RpdmUgdGFyZ2V0IChpLmUuIGEgdGFyZ2V0IHRoYXQgdGhlIHVzZXJcbiAgICAgKiBpcyBzdGlsbCBpbnRlcmVzdGVkIGluIHRoYXQgaGFzIG5vIG91dHN0YW5kaW5nIHRhcmdldCBjaGFuZ2UgcmVxdWVzdHMpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLk9lID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuUGUuZ2V0KHQpO1xuICAgICAgICByZXR1cm4gZSAmJiBlLmxlID8gbnVsbCA6IHRoaXMuUmUucWUodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBzdGF0ZSBvZiBhIFdhdGNoIHRhcmdldCB0byBpdHMgaW5pdGlhbCBzdGF0ZSAoZS5nLiBzZXRzXG4gICAgICogJ2N1cnJlbnQnIHRvIGZhbHNlLCBjbGVhcnMgdGhlIHJlc3VtZSB0b2tlbiBhbmQgcmVtb3ZlcyBpdHMgdGFyZ2V0IG1hcHBpbmdcbiAgICAgKiBmcm9tIGFsbCBkb2N1bWVudHMpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnhlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHRoaXMuUGUuc2V0KHQsIG5ldyBWdCksIHRoaXMuUmUuQmUodCkuZm9yRWFjaCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgZS5iZSh0LCBuLCAvKnVwZGF0ZWREb2N1bWVudD0qLyBudWxsKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgTG9jYWxTdG9yZSBjb25zaWRlcnMgdGhlIGRvY3VtZW50IHRvIGJlIHBhcnQgb2YgdGhlXG4gICAgICogc3BlY2lmaWVkIHRhcmdldC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS4kZSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUmUuQmUodCkuaGFzKGUpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIERvY3VtZW50Q2hhbmdlU2V0IGtlZXBzIHRyYWNrIG9mIGEgc2V0IG9mIGNoYW5nZXMgdG8gZG9jcyBpbiBhIHF1ZXJ5LCBtZXJnaW5nXG4gKiBkdXBsaWNhdGUgZXZlbnRzIGZvciB0aGUgc2FtZSBkb2MuXG4gKi8gZnVuY3Rpb24gTHQoKSB7XG4gICAgcmV0dXJuIG5ldyBodChZLlYpO1xufVxuXG5mdW5jdGlvbiBSdCgpIHtcbiAgICByZXR1cm4gbmV3IGh0KFkuVik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2NhbGx5LWFwcGxpZWQgU2VydmVyVGltZXN0YW1wLlxuICpcbiAqIFNlcnZlciBUaW1lc3RhbXBzIGFyZSBiYWNrZWQgYnkgTWFwVmFsdWVzIHRoYXQgY29udGFpbiBhbiBpbnRlcm5hbCBmaWVsZFxuICogYF9fdHlwZV9fYCB3aXRoIGEgdmFsdWUgb2YgYHNlcnZlcl90aW1lc3RhbXBgLiBUaGUgcHJldmlvdXMgdmFsdWUgYW5kIGxvY2FsXG4gKiB3cml0ZSB0aW1lIGFyZSBzdG9yZWQgaW4gaXRzIGBfX3ByZXZpb3VzX3ZhbHVlX19gIGFuZCBgX19sb2NhbF93cml0ZV90aW1lX19gXG4gKiBmaWVsZHMgcmVzcGVjdGl2ZWx5LlxuICpcbiAqIE5vdGVzOlxuICogLSBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZSBpbnN0YW5jZXMgYXJlIGNyZWF0ZWQgYXMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyBhXG4gKiAgIFRyYW5zZm9ybU11dGF0aW9uIChzZWUgVHJhbnNmb3JtTXV0YXRpb24uYXBwbHlUbygpKS4gVGhleSBjYW4gb25seSBleGlzdCBpblxuICogICB0aGUgbG9jYWwgdmlldyBvZiBhIGRvY3VtZW50LiBUaGVyZWZvcmUgdGhleSBkbyBub3QgbmVlZCB0byBiZSBwYXJzZWQgb3JcbiAqICAgc2VyaWFsaXplZC5cbiAqIC0gV2hlbiBldmFsdWF0ZWQgbG9jYWxseSAoZS5nLiBmb3Igc25hcHNob3QuZGF0YSgpKSwgdGhleSBieSBkZWZhdWx0XG4gKiAgIGV2YWx1YXRlIHRvIGBudWxsYC4gVGhpcyBiZWhhdmlvciBjYW4gYmUgY29uZmlndXJlZCBieSBwYXNzaW5nIGN1c3RvbVxuICogICBGaWVsZFZhbHVlT3B0aW9ucyB0byB2YWx1ZSgpLlxuICogLSBXaXRoIHJlc3BlY3QgdG8gb3RoZXIgU2VydmVyVGltZXN0YW1wVmFsdWVzLCB0aGV5IHNvcnQgYnkgdGhlaXJcbiAqICAgbG9jYWxXcml0ZVRpbWUuXG4gKi8gZnVuY3Rpb24gTXQodCkge1xuICAgIHZhciBlLCBuO1xuICAgIHJldHVybiBcInNlcnZlcl90aW1lc3RhbXBcIiA9PT0gKG51bGwgPT09IChuID0gKChudWxsID09PSAoZSA9IG51bGwgPT0gdCA/IHZvaWQgMCA6IHQubWFwVmFsdWUpIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUuZmllbGRzKSB8fCB7fSkuX190eXBlX18pIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4uc3RyaW5nVmFsdWUpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU2VydmVyVGltZXN0YW1wIHByb3RvIHZhbHVlICh1c2luZyB0aGUgaW50ZXJuYWwgZm9ybWF0KS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgYmVmb3JlIHRoaXMgU2VydmVyVGltZXN0YW1wIHdhcyBzZXQuXG4gKlxuICogUHJlc2VydmluZyB0aGUgcHJldmlvdXMgdmFsdWVzIGFsbG93cyB0aGUgdXNlciB0byBkaXNwbGF5IHRoZSBsYXN0IHJlc29sZWRcbiAqIHZhbHVlIHVudGlsIHRoZSBiYWNrZW5kIHJlc3BvbmRzIHdpdGggdGhlIHRpbWVzdGFtcC5cbiAqLyBmdW5jdGlvbiBVdCh0KSB7XG4gICAgdmFyIGUgPSB0Lm1hcFZhbHVlLmZpZWxkcy5fX3ByZXZpb3VzX3ZhbHVlX187XG4gICAgcmV0dXJuIE10KGUpID8gVXQoZSkgOiBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvY2FsIHRpbWUgYXQgd2hpY2ggdGhpcyB0aW1lc3RhbXAgd2FzIGZpcnN0IHNldC5cbiAqLyBmdW5jdGlvbiBxdCh0KSB7XG4gICAgdmFyIGUgPSBZdCh0Lm1hcFZhbHVlLmZpZWxkcy5fX2xvY2FsX3dyaXRlX3RpbWVfXy50aW1lc3RhbXBWYWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBCKGUuc2Vjb25kcywgZS5uYW5vcyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBBIFJlZ0V4cCBtYXRjaGluZyBJU08gODYwMSBVVEMgdGltZXN0YW1wcyB3aXRoIG9wdGlvbmFsIGZyYWN0aW9uLlxudmFyIEZ0ID0gbmV3IFJlZ0V4cCgvXlxcZHs0fS1cXGRcXGQtXFxkXFxkVFxcZFxcZDpcXGRcXGQ6XFxkXFxkKD86XFwuKFxcZCspKT9aJC8pO1xuXG4vKiogRXh0cmFjdHMgdGhlIGJhY2tlbmQncyB0eXBlIG9yZGVyIGZvciB0aGUgcHJvdmlkZWQgdmFsdWUuICovIGZ1bmN0aW9uIGp0KHQpIHtcbiAgICByZXR1cm4gXCJudWxsVmFsdWVcIiBpbiB0ID8gMCAvKiBOdWxsVmFsdWUgKi8gOiBcImJvb2xlYW5WYWx1ZVwiIGluIHQgPyAxIC8qIEJvb2xlYW5WYWx1ZSAqLyA6IFwiaW50ZWdlclZhbHVlXCIgaW4gdCB8fCBcImRvdWJsZVZhbHVlXCIgaW4gdCA/IDIgLyogTnVtYmVyVmFsdWUgKi8gOiBcInRpbWVzdGFtcFZhbHVlXCIgaW4gdCA/IDMgLyogVGltZXN0YW1wVmFsdWUgKi8gOiBcInN0cmluZ1ZhbHVlXCIgaW4gdCA/IDUgLyogU3RyaW5nVmFsdWUgKi8gOiBcImJ5dGVzVmFsdWVcIiBpbiB0ID8gNiAvKiBCbG9iVmFsdWUgKi8gOiBcInJlZmVyZW5jZVZhbHVlXCIgaW4gdCA/IDcgLyogUmVmVmFsdWUgKi8gOiBcImdlb1BvaW50VmFsdWVcIiBpbiB0ID8gOCAvKiBHZW9Qb2ludFZhbHVlICovIDogXCJhcnJheVZhbHVlXCIgaW4gdCA/IDkgLyogQXJyYXlWYWx1ZSAqLyA6IFwibWFwVmFsdWVcIiBpbiB0ID8gTXQodCkgPyA0IC8qIFNlcnZlclRpbWVzdGFtcFZhbHVlICovIDogMTAgLyogT2JqZWN0VmFsdWUgKi8gOiBTKCk7XG59XG5cbi8qKiBUZXN0cyBgbGVmdGAgYW5kIGByaWdodGAgZm9yIGVxdWFsaXR5IGJhc2VkIG9uIHRoZSBiYWNrZW5kIHNlbWFudGljcy4gKi8gZnVuY3Rpb24gQnQodCwgZSkge1xuICAgIHZhciBuID0ganQodCk7XG4gICAgaWYgKG4gIT09IGp0KGUpKSByZXR1cm4gITE7XG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIDAgLyogTnVsbFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuICEwO1xuXG4gICAgICBjYXNlIDEgLyogQm9vbGVhblZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHQuYm9vbGVhblZhbHVlID09PSBlLmJvb2xlYW5WYWx1ZTtcblxuICAgICAgY2FzZSA0IC8qIFNlcnZlclRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHF0KHQpLmlzRXF1YWwocXQoZSkpO1xuXG4gICAgICBjYXNlIDMgLyogVGltZXN0YW1wVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQudGltZXN0YW1wVmFsdWUgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS50aW1lc3RhbXBWYWx1ZSAmJiB0LnRpbWVzdGFtcFZhbHVlLmxlbmd0aCA9PT0gZS50aW1lc3RhbXBWYWx1ZS5sZW5ndGgpIFxuICAgICAgICAgICAgLy8gVXNlIHN0cmluZyBlcXVhbGl0eSBmb3IgSVNPIDg2MDEgdGltZXN0YW1wc1xuICAgICAgICAgICAgcmV0dXJuIHQudGltZXN0YW1wVmFsdWUgPT09IGUudGltZXN0YW1wVmFsdWU7XG4gICAgICAgICAgICB2YXIgbiA9IFl0KHQudGltZXN0YW1wVmFsdWUpLCByID0gWXQoZS50aW1lc3RhbXBWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gbi5zZWNvbmRzID09PSByLnNlY29uZHMgJiYgbi5uYW5vcyA9PT0gci5uYW5vcztcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSA1IC8qIFN0cmluZ1ZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHQuc3RyaW5nVmFsdWUgPT09IGUuc3RyaW5nVmFsdWU7XG5cbiAgICAgIGNhc2UgNiAvKiBCbG9iVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIEp0KHQuYnl0ZXNWYWx1ZSkuaXNFcXVhbChKdChlLmJ5dGVzVmFsdWUpKTtcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSA3IC8qIFJlZlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIHQucmVmZXJlbmNlVmFsdWUgPT09IGUucmVmZXJlbmNlVmFsdWU7XG5cbiAgICAgIGNhc2UgOCAvKiBHZW9Qb2ludFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBIdCh0Lmdlb1BvaW50VmFsdWUubGF0aXR1ZGUpID09PSBIdChlLmdlb1BvaW50VmFsdWUubGF0aXR1ZGUpICYmIEh0KHQuZ2VvUG9pbnRWYWx1ZS5sb25naXR1ZGUpID09PSBIdChlLmdlb1BvaW50VmFsdWUubG9uZ2l0dWRlKTtcbiAgICAgICAgfSh0LCBlKTtcblxuICAgICAgY2FzZSAyIC8qIE51bWJlclZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGlmIChcImludGVnZXJWYWx1ZVwiIGluIHQgJiYgXCJpbnRlZ2VyVmFsdWVcIiBpbiBlKSByZXR1cm4gSHQodC5pbnRlZ2VyVmFsdWUpID09PSBIdChlLmludGVnZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoXCJkb3VibGVWYWx1ZVwiIGluIHQgJiYgXCJkb3VibGVWYWx1ZVwiIGluIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IEh0KHQuZG91YmxlVmFsdWUpLCByID0gSHQoZS5kb3VibGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4gPT09IHIgPyBKKG4pID09PSBKKHIpIDogaXNOYU4obikgJiYgaXNOYU4ocik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH0odCwgZSk7XG5cbiAgICAgIGNhc2UgOSAvKiBBcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIEModC5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXSwgZS5hcnJheVZhbHVlLnZhbHVlcyB8fCBbXSwgQnQpO1xuXG4gICAgICBjYXNlIDEwIC8qIE9iamVjdFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBuID0gdC5tYXBWYWx1ZS5maWVsZHMgfHwge30sIHIgPSBlLm1hcFZhbHVlLmZpZWxkcyB8fCB7fTtcbiAgICAgICAgICAgIGlmIChSKG4pICE9PSBSKHIpKSByZXR1cm4gITE7XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIG4pIGlmIChuLmhhc093blByb3BlcnR5KGkpICYmICh2b2lkIDAgPT09IHJbaV0gfHwgIUJ0KG5baV0sIHJbaV0pKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICB9KHQsIGUpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gUygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24genQodCwgZSkge1xuICAgIHJldHVybiB2b2lkIDAgIT09ICh0LnZhbHVlcyB8fCBbXSkuZmluZCgoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gQnQodCwgZSk7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBHdCh0LCBlKSB7XG4gICAgdmFyIG4gPSBqdCh0KSwgciA9IGp0KGUpO1xuICAgIGlmIChuICE9PSByKSByZXR1cm4gVihuLCByKTtcbiAgICBzd2l0Y2ggKG4pIHtcbiAgICAgIGNhc2UgMCAvKiBOdWxsVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gMDtcblxuICAgICAgY2FzZSAxIC8qIEJvb2xlYW5WYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBWKHQuYm9vbGVhblZhbHVlLCBlLmJvb2xlYW5WYWx1ZSk7XG5cbiAgICAgIGNhc2UgMiAvKiBOdW1iZXJWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IEh0KHQuaW50ZWdlclZhbHVlIHx8IHQuZG91YmxlVmFsdWUpLCByID0gSHQoZS5pbnRlZ2VyVmFsdWUgfHwgZS5kb3VibGVWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gbiA8IHIgPyAtMSA6IG4gPiByID8gMSA6IG4gPT09IHIgPyAwIDogXG4gICAgICAgICAgICAvLyBvbmUgb3IgYm90aCBhcmUgTmFOLlxuICAgICAgICAgICAgaXNOYU4obikgPyBpc05hTihyKSA/IDAgOiAtMSA6IDE7XG4gICAgICAgIH0odCwgZSk7XG5cbiAgICAgIGNhc2UgMyAvKiBUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBLdCh0LnRpbWVzdGFtcFZhbHVlLCBlLnRpbWVzdGFtcFZhbHVlKTtcblxuICAgICAgY2FzZSA0IC8qIFNlcnZlclRpbWVzdGFtcFZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIEt0KHF0KHQpLCBxdChlKSk7XG5cbiAgICAgIGNhc2UgNSAvKiBTdHJpbmdWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBWKHQuc3RyaW5nVmFsdWUsIGUuc3RyaW5nVmFsdWUpO1xuXG4gICAgICBjYXNlIDYgLyogQmxvYlZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBuID0gSnQodCksIHIgPSBKdChlKTtcbiAgICAgICAgICAgIHJldHVybiBuLkEocik7XG4gICAgICAgIH0odC5ieXRlc1ZhbHVlLCBlLmJ5dGVzVmFsdWUpO1xuXG4gICAgICBjYXNlIDcgLyogUmVmVmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IHQuc3BsaXQoXCIvXCIpLCByID0gZS5zcGxpdChcIi9cIiksIGkgPSAwOyBpIDwgbi5sZW5ndGggJiYgaSA8IHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IFYobltpXSwgcltpXSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IG8pIHJldHVybiBvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFYobi5sZW5ndGgsIHIubGVuZ3RoKTtcbiAgICAgICAgfSh0LnJlZmVyZW5jZVZhbHVlLCBlLnJlZmVyZW5jZVZhbHVlKTtcblxuICAgICAgY2FzZSA4IC8qIEdlb1BvaW50VmFsdWUgKi8gOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIG4gPSBWKEh0KHQubGF0aXR1ZGUpLCBIdChlLmxhdGl0dWRlKSk7XG4gICAgICAgICAgICByZXR1cm4gMCAhPT0gbiA/IG4gOiBWKEh0KHQubG9uZ2l0dWRlKSwgSHQoZS5sb25naXR1ZGUpKTtcbiAgICAgICAgfSh0Lmdlb1BvaW50VmFsdWUsIGUuZ2VvUG9pbnRWYWx1ZSk7XG5cbiAgICAgIGNhc2UgOSAvKiBBcnJheVZhbHVlICovIDpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSB0LnZhbHVlcyB8fCBbXSwgciA9IGUudmFsdWVzIHx8IFtdLCBpID0gMDsgaSA8IG4ubGVuZ3RoICYmIGkgPCByLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBHdChuW2ldLCByW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAobykgcmV0dXJuIG87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gVihuLmxlbmd0aCwgci5sZW5ndGgpO1xuICAgICAgICB9KHQuYXJyYXlWYWx1ZSwgZS5hcnJheVZhbHVlKTtcblxuICAgICAgY2FzZSAxMCAvKiBPYmplY3RWYWx1ZSAqLyA6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHQuZmllbGRzIHx8IHt9LCByID0gT2JqZWN0LmtleXMobiksIGkgPSBlLmZpZWxkcyB8fCB7fSwgbyA9IE9iamVjdC5rZXlzKGkpO1xuICAgICAgICAgICAgLy8gRXZlbiB0aG91Z2ggTWFwVmFsdWVzIGFyZSBsaWtlbHkgc29ydGVkIGNvcnJlY3RseSBiYXNlZCBvbiB0aGVpciBpbnNlcnRpb25cbiAgICAgICAgICAgIC8vIG9yZGVyIChlLmcuIHdoZW4gcmVjZWl2ZWQgZnJvbSB0aGUgYmFja2VuZCksIGxvY2FsIG1vZGlmaWNhdGlvbnMgY2FuIGJyaW5nXG4gICAgICAgICAgICAvLyBlbGVtZW50cyBvdXQgb2Ygb3JkZXIuIFdlIG5lZWQgdG8gcmUtc29ydCB0aGUgZWxlbWVudHMgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgICAgIC8vIGNhbm9uaWNhbCBJRHMgYXJlIGluZGVwZW5kZW50IG9mIGluc2VydGlvbiBvcmRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHIuc29ydCgpLCBvLnNvcnQoKTtcbiAgICAgICAgICAgIGZvciAodmFyIHUgPSAwOyB1IDwgci5sZW5ndGggJiYgdSA8IG8ubGVuZ3RoOyArK3UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IFYoclt1XSwgb1t1XSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IHMpIHJldHVybiBzO1xuICAgICAgICAgICAgICAgIHZhciBhID0gR3QobltyW3VdXSwgaVtvW3VdXSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGEpIHJldHVybiBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFYoci5sZW5ndGgsIG8ubGVuZ3RoKTtcbiAgICAgICAgfSh0Lm1hcFZhbHVlLCBlLm1hcFZhbHVlKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgUygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gS3QodCwgZSkge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgdC5sZW5ndGggPT09IGUubGVuZ3RoKSByZXR1cm4gVih0LCBlKTtcbiAgICB2YXIgbiA9IFl0KHQpLCByID0gWXQoZSksIGkgPSBWKG4uc2Vjb25kcywgci5zZWNvbmRzKTtcbiAgICByZXR1cm4gMCAhPT0gaSA/IGkgOiBWKG4ubmFub3MsIHIubmFub3MpO1xufVxuXG5mdW5jdGlvbiBRdCh0KSB7XG4gICAgcmV0dXJuIFd0KHQpO1xufVxuXG5mdW5jdGlvbiBXdCh0KSB7XG4gICAgcmV0dXJuIFwibnVsbFZhbHVlXCIgaW4gdCA/IFwibnVsbFwiIDogXCJib29sZWFuVmFsdWVcIiBpbiB0ID8gXCJcIiArIHQuYm9vbGVhblZhbHVlIDogXCJpbnRlZ2VyVmFsdWVcIiBpbiB0ID8gXCJcIiArIHQuaW50ZWdlclZhbHVlIDogXCJkb3VibGVWYWx1ZVwiIGluIHQgPyBcIlwiICsgdC5kb3VibGVWYWx1ZSA6IFwidGltZXN0YW1wVmFsdWVcIiBpbiB0ID8gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFl0KHQpO1xuICAgICAgICByZXR1cm4gXCJ0aW1lKFwiICsgZS5zZWNvbmRzICsgXCIsXCIgKyBlLm5hbm9zICsgXCIpXCI7XG4gICAgfSh0LnRpbWVzdGFtcFZhbHVlKSA6IFwic3RyaW5nVmFsdWVcIiBpbiB0ID8gdC5zdHJpbmdWYWx1ZSA6IFwiYnl0ZXNWYWx1ZVwiIGluIHQgPyBKdCh0LmJ5dGVzVmFsdWUpLnRvQmFzZTY0KCkgOiBcInJlZmVyZW5jZVZhbHVlXCIgaW4gdCA/IChuID0gdC5yZWZlcmVuY2VWYWx1ZSwgXG4gICAgWS5XKG4pLnRvU3RyaW5nKCkpIDogXCJnZW9Qb2ludFZhbHVlXCIgaW4gdCA/IFwiZ2VvKFwiICsgKGUgPSB0Lmdlb1BvaW50VmFsdWUpLmxhdGl0dWRlICsgXCIsXCIgKyBlLmxvbmdpdHVkZSArIFwiKVwiIDogXCJhcnJheVZhbHVlXCIgaW4gdCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgZSA9IFwiW1wiLCBuID0gITAsIHIgPSAwLCBpID0gdC52YWx1ZXMgfHwgW107IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICBuID8gbiA9ICExIDogZSArPSBcIixcIiwgZSArPSBXdChpW3JdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZSArIFwiXVwiO1xuICAgIH0odC5hcnJheVZhbHVlKSA6IFwibWFwVmFsdWVcIiBpbiB0ID8gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAvLyBJdGVyYXRpb24gb3JkZXIgaW4gSmF2YVNjcmlwdCBpcyBub3QgZ3VhcmFudGVlZC4gVG8gZW5zdXJlIHRoYXQgd2UgZ2VuZXJhdGVcbiAgICAgICAgLy8gbWF0Y2hpbmcgY2Fub25pY2FsIElEcyBmb3IgaWRlbnRpY2FsIG1hcHMsIHdlIG5lZWQgdG8gc29ydCB0aGUga2V5cy5cbiAgICAgICAgdmFyIGUgPSBcIntcIiwgbiA9ICEwLCByID0gMCwgaSA9IE9iamVjdC5rZXlzKHQuZmllbGRzIHx8IHt9KS5zb3J0KCk7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IGlbcl07XG4gICAgICAgICAgICBuID8gbiA9ICExIDogZSArPSBcIixcIiwgZSArPSBvICsgXCI6XCIgKyBXdCh0LmZpZWxkc1tvXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUgKyBcIn1cIjtcbiAgICB9KHQubWFwVmFsdWUpIDogUygpO1xuICAgIHZhciBlLCBuO1xufVxuXG5mdW5jdGlvbiBZdCh0KSB7XG4gICAgLy8gVGhlIGpzb24gaW50ZXJmYWNlIChmb3IgdGhlIGJyb3dzZXIpIHdpbGwgcmV0dXJuIGFuIGlzbyB0aW1lc3RhbXAgc3RyaW5nLFxuICAgIC8vIHdoaWxlIHRoZSBwcm90byBqcyBsaWJyYXJ5IChmb3Igbm9kZSkgd2lsbCByZXR1cm4gYVxuICAgIC8vIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAgaW5zdGFuY2UuXG4gICAgaWYgKGsoISF0KSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAvLyBUaGUgZGF0ZSBzdHJpbmcgY2FuIGhhdmUgaGlnaGVyIHByZWNpc2lvbiAobmFub3MpIHRoYW4gdGhlIERhdGUgY2xhc3NcbiAgICAgICAgLy8gKG1pbGxpcyksIHNvIHdlIGRvIHNvbWUgY3VzdG9tIHBhcnNpbmcgaGVyZS5cbiAgICAgICAgLy8gUGFyc2UgdGhlIG5hbm9zIHJpZ2h0IG91dCBvZiB0aGUgc3RyaW5nLlxuICAgICAgICB2YXIgZSA9IDAsIG4gPSBGdC5leGVjKHQpO1xuICAgICAgICBpZiAoayghIW4pLCBuWzFdKSB7XG4gICAgICAgICAgICAvLyBQYWQgdGhlIGZyYWN0aW9uIG91dCB0byA5IGRpZ2l0cyAobmFub3MpLlxuICAgICAgICAgICAgdmFyIHIgPSBuWzFdO1xuICAgICAgICAgICAgciA9IChyICsgXCIwMDAwMDAwMDBcIikuc3Vic3RyKDAsIDkpLCBlID0gTnVtYmVyKHIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlIHRoZSBkYXRlIHRvIGdldCB0aGUgc2Vjb25kcy5cbiAgICAgICAgICAgICAgICB2YXIgaSA9IG5ldyBEYXRlKHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2Vjb25kczogTWF0aC5mbG9vcihpLmdldFRpbWUoKSAvIDFlMyksXG4gICAgICAgICAgICBuYW5vczogZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzZWNvbmRzOiBIdCh0LnNlY29uZHMpLFxuICAgICAgICBuYW5vczogSHQodC5uYW5vcylcbiAgICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBwb3NzaWJsZSBQcm90byB0eXBlcyBmb3IgbnVtYmVycyBpbnRvIGEgSmF2YVNjcmlwdCBudW1iZXIuXG4gKiBSZXR1cm5zIDAgaWYgdGhlIHZhbHVlIGlzIG5vdCBudW1lcmljLlxuICovIGZ1bmN0aW9uIEh0KHQpIHtcbiAgICAvLyBUT0RPKGJqb3JuaWNrKTogSGFuZGxlIGludDY0IGdyZWF0ZXIgdGhhbiA1MyBiaXRzLlxuICAgIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiB0ID8gdCA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBOdW1iZXIodCkgOiAwO1xufVxuXG4vKiogQ29udmVydHMgdGhlIHBvc3NpYmxlIFByb3RvIHR5cGVzIGZvciBCbG9icyBpbnRvIGEgQnl0ZVN0cmluZy4gKi8gZnVuY3Rpb24gSnQodCkge1xuICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gcnQuZnJvbUJhc2U2NFN0cmluZyh0KSA6IHJ0LmZyb21VaW50OEFycmF5KHQpO1xufVxuXG4vKiogUmV0dXJucyBhIHJlZmVyZW5jZSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIGRhdGFiYXNlIGFuZCBrZXkuICovIGZ1bmN0aW9uIFh0KHQsIGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWZlcmVuY2VWYWx1ZTogXCJwcm9qZWN0cy9cIiArIHQucHJvamVjdElkICsgXCIvZGF0YWJhc2VzL1wiICsgdC5kYXRhYmFzZSArIFwiL2RvY3VtZW50cy9cIiArIGUucGF0aC5NKClcbiAgICB9O1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gSW50ZWdlclZhbHVlIC4gKi8gZnVuY3Rpb24gJHQodCkge1xuICAgIHJldHVybiAhIXQgJiYgXCJpbnRlZ2VyVmFsdWVcIiBpbiB0O1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBEb3VibGVWYWx1ZS4gKi9cbi8qKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBBcnJheVZhbHVlLiAqLyBmdW5jdGlvbiBadCh0KSB7XG4gICAgcmV0dXJuICEhdCAmJiBcImFycmF5VmFsdWVcIiBpbiB0O1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBOdWxsVmFsdWUuICovIGZ1bmN0aW9uIHRlKHQpIHtcbiAgICByZXR1cm4gISF0ICYmIFwibnVsbFZhbHVlXCIgaW4gdDtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIE5hTi4gKi8gZnVuY3Rpb24gZWUodCkge1xuICAgIHJldHVybiAhIXQgJiYgXCJkb3VibGVWYWx1ZVwiIGluIHQgJiYgaXNOYU4oTnVtYmVyKHQuZG91YmxlVmFsdWUpKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgTWFwVmFsdWUuICovIGZ1bmN0aW9uIG5lKHQpIHtcbiAgICByZXR1cm4gISF0ICYmIFwibWFwVmFsdWVcIiBpbiB0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyB2YXIgcmUgPSB7XG4gICAgYXNjOiBcIkFTQ0VORElOR1wiLFxuICAgIGRlc2M6IFwiREVTQ0VORElOR1wiXG59LCBpZSA9IHtcbiAgICBcIjxcIjogXCJMRVNTX1RIQU5cIixcbiAgICBcIjw9XCI6IFwiTEVTU19USEFOX09SX0VRVUFMXCIsXG4gICAgXCI+XCI6IFwiR1JFQVRFUl9USEFOXCIsXG4gICAgXCI+PVwiOiBcIkdSRUFURVJfVEhBTl9PUl9FUVVBTFwiLFxuICAgIFwiPT1cIjogXCJFUVVBTFwiLFxuICAgIFwiIT1cIjogXCJOT1RfRVFVQUxcIixcbiAgICBcImFycmF5LWNvbnRhaW5zXCI6IFwiQVJSQVlfQ09OVEFJTlNcIixcbiAgICBpbjogXCJJTlwiLFxuICAgIFwibm90LWluXCI6IFwiTk9UX0lOXCIsXG4gICAgXCJhcnJheS1jb250YWlucy1hbnlcIjogXCJBUlJBWV9DT05UQUlOU19BTllcIlxufSwgb2UgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgdGhpcy50ID0gdCwgdGhpcy5VZSA9IGU7XG59O1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZ2VuZXJhdGVzIEpzb25PYmplY3QgdmFsdWVzIGZvciB0aGUgRGF0YXN0b3JlIEFQSSBzdWl0YWJsZSBmb3JcbiAqIHNlbmRpbmcgdG8gZWl0aGVyIEdSUEMgc3R1YiBtZXRob2RzIG9yIHZpYSB0aGUgSlNPTi9IVFRQIFJFU1QgQVBJLlxuICpcbiAqIFRoZSBzZXJpYWxpemVyIHN1cHBvcnRzIGJvdGggUHJvdG9idWYuanMgYW5kIFByb3RvMyBKU09OIGZvcm1hdHMuIEJ5XG4gKiBzZXR0aW5nIGB1c2VQcm90bzNKc29uYCB0byB0cnVlLCB0aGUgc2VyaWFsaXplciB3aWxsIHVzZSB0aGUgUHJvdG8zIEpTT05cbiAqIGZvcm1hdC5cbiAqXG4gKiBGb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgUHJvdG8zIEpTT04gZm9ybWF0IGNoZWNrXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zI2pzb25cbiAqXG4gKiBUT0RPKGtsaW10KTogV2UgY2FuIHJlbW92ZSB0aGUgZGF0YWJhc2VJZCBhcmd1bWVudCBpZiB3ZSBrZWVwIHRoZSBmdWxsXG4gKiByZXNvdXJjZSBuYW1lIGluIGRvY3VtZW50cy5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGFuIEludGVnZXJWYWx1ZSBmb3IgYHZhbHVlYC5cbiAqL1xuZnVuY3Rpb24gdWUodCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGludGVnZXJWYWx1ZTogXCJcIiArIHRcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gRG91YmxlVmFsdWUgZm9yIGB2YWx1ZWAgdGhhdCBpcyBlbmNvZGVkIGJhc2VkIHRoZSBzZXJpYWxpemVyJ3NcbiAqIGB1c2VQcm90bzNKc29uYCBzZXR0aW5nLlxuICovIGZ1bmN0aW9uIHNlKHQsIGUpIHtcbiAgICBpZiAodC5VZSkge1xuICAgICAgICBpZiAoaXNOYU4oZSkpIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCJOYU5cIlxuICAgICAgICB9O1xuICAgICAgICBpZiAoZSA9PT0gMSAvIDApIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCJJbmZpbml0eVwiXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlID09PSAtMSAvIDApIHJldHVybiB7XG4gICAgICAgICAgICBkb3VibGVWYWx1ZTogXCItSW5maW5pdHlcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkb3VibGVWYWx1ZTogSihlKSA/IFwiLTBcIiA6IGVcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBmb3IgYSBudW1iZXIgdGhhdCdzIGFwcHJvcHJpYXRlIHRvIHB1dCBpbnRvIGEgcHJvdG8uXG4gKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFuIEludGVnZXJWYWx1ZSBpZiBpdCBjYW4gc2FmZWx5IHJlcHJlc2VudCB0aGUgdmFsdWUsXG4gKiBvdGhlcndpc2UgYSBEb3VibGVWYWx1ZSBpcyByZXR1cm5lZC5cbiAqLyBmdW5jdGlvbiBhZSh0LCBlKSB7XG4gICAgcmV0dXJuIFgoZSkgPyB1ZShlKSA6IHNlKHQsIGUpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBmb3IgYSBEYXRlIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW50byBhIHByb3RvLlxuICovIGZ1bmN0aW9uIGNlKHQsIGUpIHtcbiAgICByZXR1cm4gdC5VZSA/IG5ldyBEYXRlKDFlMyAqIGUuc2Vjb25kcykudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqLywgXCJcIikucmVwbGFjZShcIlpcIiwgXCJcIikgKyBcIi5cIiArIChcIjAwMDAwMDAwMFwiICsgZS5uYW5vc2Vjb25kcykuc2xpY2UoLTkpICsgXCJaXCIgOiB7XG4gICAgICAgIHNlY29uZHM6IFwiXCIgKyBlLnNlY29uZHMsXG4gICAgICAgIG5hbm9zOiBlLm5hbm9zZWNvbmRzXG4gICAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZm9yIGJ5dGVzIHRoYXQncyBhcHByb3ByaWF0ZSB0byBwdXQgaW4gYSBwcm90by5cbiAqXG4gKiBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuICovIGZ1bmN0aW9uIGhlKHQsIGUpIHtcbiAgICByZXR1cm4gdC5VZSA/IGUudG9CYXNlNjQoKSA6IGUudG9VaW50OEFycmF5KCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIEJ5dGVTdHJpbmcgYmFzZWQgb24gdGhlIHByb3RvIHN0cmluZyB2YWx1ZS5cbiAqLyBmdW5jdGlvbiBmZSh0LCBlKSB7XG4gICAgcmV0dXJuIGNlKHQsIGUuUCgpKTtcbn1cblxuZnVuY3Rpb24gbGUodCkge1xuICAgIHJldHVybiBrKCEhdCksIHoubShmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gWXQodCk7XG4gICAgICAgIHJldHVybiBuZXcgQihlLnNlY29uZHMsIGUubmFub3MpO1xuICAgIH0odCkpO1xufVxuXG5mdW5jdGlvbiBwZSh0LCBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLKFsgXCJwcm9qZWN0c1wiLCB0LnByb2plY3RJZCwgXCJkYXRhYmFzZXNcIiwgdC5kYXRhYmFzZSBdKTtcbiAgICB9KHQpLmNoaWxkKFwiZG9jdW1lbnRzXCIpLmNoaWxkKGUpLk0oKTtcbn1cblxuZnVuY3Rpb24gZGUodCkge1xuICAgIHZhciBlID0gSy5rKHQpO1xuICAgIHJldHVybiBrKE1lKGUpKSwgZTtcbn1cblxuZnVuY3Rpb24gdmUodCwgZSkge1xuICAgIHJldHVybiBwZSh0LnQsIGUucGF0aCk7XG59XG5cbmZ1bmN0aW9uIHllKHQsIGUpIHtcbiAgICB2YXIgbiA9IGRlKGUpO1xuICAgIGlmIChuLmdldCgxKSAhPT0gdC50LnByb2plY3RJZCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIlRyaWVkIHRvIGRlc2VyaWFsaXplIGtleSBmcm9tIGRpZmZlcmVudCBwcm9qZWN0OiBcIiArIG4uZ2V0KDEpICsgXCIgdnMgXCIgKyB0LnQucHJvamVjdElkKTtcbiAgICBpZiAobi5nZXQoMykgIT09IHQudC5kYXRhYmFzZSkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIlRyaWVkIHRvIGRlc2VyaWFsaXplIGtleSBmcm9tIGRpZmZlcmVudCBkYXRhYmFzZTogXCIgKyBuLmdldCgzKSArIFwiIHZzIFwiICsgdC50LmRhdGFiYXNlKTtcbiAgICByZXR1cm4gbmV3IFkoYmUobikpO1xufVxuXG5mdW5jdGlvbiBnZSh0LCBlKSB7XG4gICAgcmV0dXJuIHBlKHQudCwgZSk7XG59XG5cbmZ1bmN0aW9uIG1lKHQpIHtcbiAgICB2YXIgZSA9IGRlKHQpO1xuICAgIC8vIEluIHYxYmV0YTEgcXVlcmllcyBmb3IgY29sbGVjdGlvbnMgYXQgdGhlIHJvb3QgZGlkIG5vdCBoYXZlIGEgdHJhaWxpbmdcbiAgICAvLyBcIi9kb2N1bWVudHNcIi4gSW4gdjEgYWxsIHJlc291cmNlIHBhdGhzIGNvbnRhaW4gXCIvZG9jdW1lbnRzXCIuIFByZXNlcnZlIHRoZVxuICAgIC8vIGFiaWxpdHkgdG8gcmVhZCB0aGUgdjFiZXRhMSBmb3JtIGZvciBjb21wYXRpYmlsaXR5IHdpdGggcXVlcmllcyBwZXJzaXN0ZWRcbiAgICAvLyBpbiB0aGUgbG9jYWwgdGFyZ2V0IGNhY2hlLlxuICAgICAgICByZXR1cm4gNCA9PT0gZS5sZW5ndGggPyBLLiQoKSA6IGJlKGUpO1xufVxuXG5mdW5jdGlvbiB3ZSh0KSB7XG4gICAgcmV0dXJuIG5ldyBLKFsgXCJwcm9qZWN0c1wiLCB0LnQucHJvamVjdElkLCBcImRhdGFiYXNlc1wiLCB0LnQuZGF0YWJhc2UgXSkuTSgpO1xufVxuXG5mdW5jdGlvbiBiZSh0KSB7XG4gICAgcmV0dXJuIGsodC5sZW5ndGggPiA0ICYmIFwiZG9jdW1lbnRzXCIgPT09IHQuZ2V0KDQpKSwgdC52KDUpXG4gICAgLyoqIENyZWF0ZXMgYSBEb2N1bWVudCBwcm90byBmcm9tIGtleSBhbmQgZmllbGRzIChidXQgbm8gY3JlYXRlL3VwZGF0ZSB0aW1lKSAqLztcbn1cblxuZnVuY3Rpb24gX2UodCwgZSwgbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHZlKHQsIGUpLFxuICAgICAgICBmaWVsZHM6IG4ucHJvdG8ubWFwVmFsdWUuZmllbGRzXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gSWUodCwgZSkge1xuICAgIHZhciBuO1xuICAgIGlmIChlIGluc3RhbmNlb2YgYW4pIG4gPSB7XG4gICAgICAgIHVwZGF0ZTogX2UodCwgZS5rZXksIGUudmFsdWUpXG4gICAgfTsgZWxzZSBpZiAoZSBpbnN0YW5jZW9mIGRuKSBuID0ge1xuICAgICAgICBkZWxldGU6IHZlKHQsIGUua2V5KVxuICAgIH07IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBjbikgbiA9IHtcbiAgICAgICAgdXBkYXRlOiBfZSh0LCBlLmtleSwgZS5kYXRhKSxcbiAgICAgICAgdXBkYXRlTWFzazogUmUoZS5RZSlcbiAgICB9OyBlbHNlIGlmIChlIGluc3RhbmNlb2YgZm4pIG4gPSB7XG4gICAgICAgIHRyYW5zZm9ybToge1xuICAgICAgICAgICAgZG9jdW1lbnQ6IHZlKHQsIGUua2V5KSxcbiAgICAgICAgICAgIGZpZWxkVHJhbnNmb3JtczogZS5maWVsZFRyYW5zZm9ybXMubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlLnRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBCZSkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogZS5maWVsZC5NKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUb1NlcnZlclZhbHVlOiBcIlJFUVVFU1RfVElNRVwiXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgemUpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IGUuZmllbGQuTSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTWlzc2luZ0VsZW1lbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBuLmVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgS2UpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IGUuZmllbGQuTSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQWxsRnJvbUFycmF5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBuLmVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgV2UpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IGUuZmllbGQuTSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50OiBuLktlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFMoKTtcbiAgICAgICAgICAgICAgICB9KDAsIHQpO1xuICAgICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICB9OyBlbHNlIHtcbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIHZuKSkgcmV0dXJuIFMoKTtcbiAgICAgICAgbiA9IHtcbiAgICAgICAgICAgIHZlcmlmeTogdmUodCwgZS5rZXkpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBlLmplLldlIHx8IChuLmN1cnJlbnREb2N1bWVudCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gZS51cGRhdGVUaW1lID8ge1xuICAgICAgICAgICAgdXBkYXRlVGltZTogZmUodCwgZS51cGRhdGVUaW1lKVxuICAgICAgICB9IDogdm9pZCAwICE9PSBlLmV4aXN0cyA/IHtcbiAgICAgICAgICAgIGV4aXN0czogZS5leGlzdHNcbiAgICAgICAgfSA6IFMoKTtcbiAgICB9KHQsIGUuamUpKSwgbjtcbn1cblxuZnVuY3Rpb24gRWUodCwgZSkge1xuICAgIHZhciBuID0gZS5jdXJyZW50RG9jdW1lbnQgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHQudXBkYXRlVGltZSA/IFplLnVwZGF0ZVRpbWUobGUodC51cGRhdGVUaW1lKSkgOiB2b2lkIDAgIT09IHQuZXhpc3RzID8gWmUuZXhpc3RzKHQuZXhpc3RzKSA6IFplLkdlKCk7XG4gICAgfShlLmN1cnJlbnREb2N1bWVudCkgOiBaZS5HZSgpO1xuICAgIGlmIChlLnVwZGF0ZSkge1xuICAgICAgICBlLnVwZGF0ZS5uYW1lO1xuICAgICAgICB2YXIgciA9IHllKHQsIGUudXBkYXRlLm5hbWUpLCBpID0gbmV3IHluKHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiBlLnVwZGF0ZS5maWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlLnVwZGF0ZU1hc2spIHtcbiAgICAgICAgICAgIHZhciBvID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdC5maWVsZFBhdGhzIHx8IFtdO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSmUoZS5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFcuVSh0KTtcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgfShlLnVwZGF0ZU1hc2spO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBjbihyLCBpLCBvLCBuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGFuKHIsIGksIG4pO1xuICAgIH1cbiAgICBpZiAoZS5kZWxldGUpIHtcbiAgICAgICAgdmFyIHUgPSB5ZSh0LCBlLmRlbGV0ZSk7XG4gICAgICAgIHJldHVybiBuZXcgZG4odSwgbik7XG4gICAgfVxuICAgIGlmIChlLnRyYW5zZm9ybSkge1xuICAgICAgICB2YXIgcyA9IHllKHQsIGUudHJhbnNmb3JtLmRvY3VtZW50KSwgYSA9IGUudHJhbnNmb3JtLmZpZWxkVHJhbnNmb3Jtcy5tYXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChcInNldFRvU2VydmVyVmFsdWVcIiBpbiBlKSBrKFwiUkVRVUVTVF9USU1FXCIgPT09IGUuc2V0VG9TZXJ2ZXJWYWx1ZSksIG4gPSBuZXcgQmU7IGVsc2UgaWYgKFwiYXBwZW5kTWlzc2luZ0VsZW1lbnRzXCIgaW4gZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGUuYXBwZW5kTWlzc2luZ0VsZW1lbnRzLnZhbHVlcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgbiA9IG5ldyB6ZShyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwicmVtb3ZlQWxsRnJvbUFycmF5XCIgaW4gZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGUucmVtb3ZlQWxsRnJvbUFycmF5LnZhbHVlcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgbiA9IG5ldyBLZShpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgXCJpbmNyZW1lbnRcIiBpbiBlID8gbiA9IG5ldyBXZSh0LCBlLmluY3JlbWVudCkgOiBTKCk7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBXLlUoZS5maWVsZFBhdGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgWGUobywgbik7XG4gICAgICAgICAgICB9KHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBrKCEwID09PSBuLmV4aXN0cyksIG5ldyBmbihzLCBhKTtcbiAgICB9XG4gICAgaWYgKGUudmVyaWZ5KSB7XG4gICAgICAgIHZhciBjID0geWUodCwgZS52ZXJpZnkpO1xuICAgICAgICByZXR1cm4gbmV3IHZuKGMsIG4pO1xuICAgIH1cbiAgICByZXR1cm4gUygpO1xufVxuXG5mdW5jdGlvbiBUZSh0LCBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZG9jdW1lbnRzOiBbIGdlKHQsIGUucGF0aCkgXVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIE5lKHQsIGUpIHtcbiAgICAvLyBEaXNzZWN0IHRoZSBwYXRoIGludG8gcGFyZW50LCBjb2xsZWN0aW9uSWQsIGFuZCBvcHRpb25hbCBrZXkgZmlsdGVyLlxuICAgIHZhciBuID0ge1xuICAgICAgICBzdHJ1Y3R1cmVkUXVlcnk6IHt9XG4gICAgfSwgciA9IGUucGF0aDtcbiAgICBudWxsICE9PSBlLmNvbGxlY3Rpb25Hcm91cCA/IChuLnBhcmVudCA9IGdlKHQsIHIpLCBuLnN0cnVjdHVyZWRRdWVyeS5mcm9tID0gWyB7XG4gICAgICAgIGNvbGxlY3Rpb25JZDogZS5jb2xsZWN0aW9uR3JvdXAsXG4gICAgICAgIGFsbERlc2NlbmRhbnRzOiAhMFxuICAgIH0gXSkgOiAobi5wYXJlbnQgPSBnZSh0LCByLlMoKSksIG4uc3RydWN0dXJlZFF1ZXJ5LmZyb20gPSBbIHtcbiAgICAgICAgY29sbGVjdGlvbklkOiByLkMoKVxuICAgIH0gXSk7XG4gICAgdmFyIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICgwICE9PSB0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0Lm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIC8vIHZpc2libGUgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCI9PVwiIC8qIEVRVUFMICovID09PSB0Lm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWUodC52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IFBlKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJJU19OQU5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGUodC52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IFBlKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJJU19OVUxMXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiIT1cIiAvKiBOT1RfRVFVQUwgKi8gPT09IHQub3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZSh0LnZhbHVlKSkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmFyeUZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogUGUodC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wOiBcIklTX05PVF9OQU5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGUodC52YWx1ZSkpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5hcnlGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IFBlKHQuZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJJU19OT1RfTlVMTFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRGaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogUGUodC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3A6IE9lKHQub3ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSh0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiAxID09PSBlLmxlbmd0aCA/IGVbMF0gOiB7XG4gICAgICAgICAgICAgICAgY29tcG9zaXRlRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIG9wOiBcIkFORFwiLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzOiBlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0oZS5maWx0ZXJzKTtcbiAgICBpICYmIChuLnN0cnVjdHVyZWRRdWVyeS53aGVyZSA9IGkpO1xuICAgIHZhciBvID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAoMCAhPT0gdC5sZW5ndGgpIHJldHVybiB0Lm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogUGUodC5maWVsZCksXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogRGUodC5kaXIpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0odCk7XG4gICAgICAgIH0pKTtcbiAgICB9KGUub3JkZXJCeSk7XG4gICAgbyAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkub3JkZXJCeSA9IG8pO1xuICAgIHZhciB1ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdC5VZSB8fCBIKGUpID8gZSA6IHtcbiAgICAgICAgICAgIHZhbHVlOiBlXG4gICAgICAgIH07XG4gICAgfSh0LCBlLmxpbWl0KTtcbiAgICByZXR1cm4gbnVsbCAhPT0gdSAmJiAobi5zdHJ1Y3R1cmVkUXVlcnkubGltaXQgPSB1KSwgZS5zdGFydEF0ICYmIChuLnN0cnVjdHVyZWRRdWVyeS5zdGFydEF0ID0gU2UoZS5zdGFydEF0KSksIFxuICAgIGUuZW5kQXQgJiYgKG4uc3RydWN0dXJlZFF1ZXJ5LmVuZEF0ID0gU2UoZS5lbmRBdCkpLCBuO1xufVxuXG5mdW5jdGlvbiB4ZSh0KSB7XG4gICAgdmFyIGUgPSBtZSh0LnBhcmVudCksIG4gPSB0LnN0cnVjdHVyZWRRdWVyeSwgciA9IG4uZnJvbSA/IG4uZnJvbS5sZW5ndGggOiAwLCBpID0gbnVsbDtcbiAgICBpZiAociA+IDApIHtcbiAgICAgICAgaygxID09PSByKTtcbiAgICAgICAgdmFyIG8gPSBuLmZyb21bMF07XG4gICAgICAgIG8uYWxsRGVzY2VuZGFudHMgPyBpID0gby5jb2xsZWN0aW9uSWQgOiBlID0gZS5jaGlsZChvLmNvbGxlY3Rpb25JZCk7XG4gICAgfVxuICAgIHZhciB1ID0gW107XG4gICAgbi53aGVyZSAmJiAodSA9IEFlKG4ud2hlcmUpKTtcbiAgICB2YXIgcyA9IFtdO1xuICAgIG4ub3JkZXJCeSAmJiAocyA9IG4ub3JkZXJCeS5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdHIoVmUodC5maWVsZCksIFxuICAgICAgICAgICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIkFTQ0VORElOR1wiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJhc2NcIiAvKiBBU0NFTkRJTkcgKi87XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJERVNDRU5ESU5HXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImRlc2NcIiAvKiBERVNDRU5ESU5HICovO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSh0LmRpcmVjdGlvbikpO1xuICAgICAgICB9KHQpO1xuICAgIH0pKSk7XG4gICAgdmFyIGEgPSBudWxsO1xuICAgIG4ubGltaXQgJiYgKGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICByZXR1cm4gSChlID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgdCA/IHQudmFsdWUgOiB0KSA/IG51bGwgOiBlO1xuICAgIH0obi5saW1pdCkpO1xuICAgIHZhciBjID0gbnVsbDtcbiAgICBuLnN0YXJ0QXQgJiYgKGMgPSBrZShuLnN0YXJ0QXQpKTtcbiAgICB2YXIgaCA9IG51bGw7XG4gICAgcmV0dXJuIG4uZW5kQXQgJiYgKGggPSBrZShuLmVuZEF0KSksIFRuKGUsIGksIHMsIHUsIGEsIFwiRlwiIC8qIEZpcnN0ICovICwgYywgaCk7XG59XG5cbmZ1bmN0aW9uIEFlKHQpIHtcbiAgICByZXR1cm4gdCA/IHZvaWQgMCAhPT0gdC51bmFyeUZpbHRlciA/IFsgTGUodCkgXSA6IHZvaWQgMCAhPT0gdC5maWVsZEZpbHRlciA/IFsgQ2UodCkgXSA6IHZvaWQgMCAhPT0gdC5jb21wb3NpdGVGaWx0ZXIgPyB0LmNvbXBvc2l0ZUZpbHRlci5maWx0ZXJzLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gQWUodCk7XG4gICAgfSkpLnJlZHVjZSgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdC5jb25jYXQoZSk7XG4gICAgfSkpIDogUygpIDogW107XG59XG5cbmZ1bmN0aW9uIFNlKHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiZWZvcmU6IHQuYmVmb3JlLFxuICAgICAgICB2YWx1ZXM6IHQucG9zaXRpb25cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBrZSh0KSB7XG4gICAgdmFyIGUgPSAhIXQuYmVmb3JlLCBuID0gdC52YWx1ZXMgfHwgW107XG4gICAgcmV0dXJuIG5ldyBKbihuLCBlKTtcbn1cblxuLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gRGUodCkge1xuICAgIHJldHVybiByZVt0XTtcbn1cblxuZnVuY3Rpb24gT2UodCkge1xuICAgIHJldHVybiBpZVt0XTtcbn1cblxuZnVuY3Rpb24gUGUodCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGZpZWxkUGF0aDogdC5NKClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBWZSh0KSB7XG4gICAgcmV0dXJuIFcuVSh0LmZpZWxkUGF0aCk7XG59XG5cbmZ1bmN0aW9uIENlKHQpIHtcbiAgICByZXR1cm4gam4uY3JlYXRlKFZlKHQuZmllbGRGaWx0ZXIuZmllbGQpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgIGNhc2UgXCJFUVVBTFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPT1cIiAvKiBFUVVBTCAqLztcblxuICAgICAgICAgIGNhc2UgXCJOT1RfRVFVQUxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIiE9XCIgLyogTk9UX0VRVUFMICovO1xuXG4gICAgICAgICAgY2FzZSBcIkdSRUFURVJfVEhBTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPlwiIC8qIEdSRUFURVJfVEhBTiAqLztcblxuICAgICAgICAgIGNhc2UgXCJHUkVBVEVSX1RIQU5fT1JfRVFVQUxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIj49XCIgLyogR1JFQVRFUl9USEFOX09SX0VRVUFMICovO1xuXG4gICAgICAgICAgY2FzZSBcIkxFU1NfVEhBTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPFwiIC8qIExFU1NfVEhBTiAqLztcblxuICAgICAgICAgIGNhc2UgXCJMRVNTX1RIQU5fT1JfRVFVQUxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIjw9XCIgLyogTEVTU19USEFOX09SX0VRVUFMICovO1xuXG4gICAgICAgICAgY2FzZSBcIkFSUkFZX0NPTlRBSU5TXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovO1xuXG4gICAgICAgICAgY2FzZSBcIklOXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJpblwiIC8qIElOICovO1xuXG4gICAgICAgICAgY2FzZSBcIk5PVF9JTlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwibm90LWluXCIgLyogTk9UX0lOICovO1xuXG4gICAgICAgICAgY2FzZSBcIkFSUkFZX0NPTlRBSU5TX0FOWVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovO1xuXG4gICAgICAgICAgY2FzZSBcIk9QRVJBVE9SX1VOU1BFQ0lGSUVEXCI6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBTKCk7XG4gICAgICAgIH1cbiAgICB9KHQuZmllbGRGaWx0ZXIub3ApLCB0LmZpZWxkRmlsdGVyLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gTGUodCkge1xuICAgIHN3aXRjaCAodC51bmFyeUZpbHRlci5vcCkge1xuICAgICAgY2FzZSBcIklTX05BTlwiOlxuICAgICAgICB2YXIgZSA9IFZlKHQudW5hcnlGaWx0ZXIuZmllbGQpO1xuICAgICAgICByZXR1cm4gam4uY3JlYXRlKGUsIFwiPT1cIiAvKiBFUVVBTCAqLyAsIHtcbiAgICAgICAgICAgIGRvdWJsZVZhbHVlOiBOYU5cbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgXCJJU19OVUxMXCI6XG4gICAgICAgIHZhciBuID0gVmUodC51bmFyeUZpbHRlci5maWVsZCk7XG4gICAgICAgIHJldHVybiBqbi5jcmVhdGUobiwgXCI9PVwiIC8qIEVRVUFMICovICwge1xuICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBcIklTX05PVF9OQU5cIjpcbiAgICAgICAgdmFyIHIgPSBWZSh0LnVuYXJ5RmlsdGVyLmZpZWxkKTtcbiAgICAgICAgcmV0dXJuIGpuLmNyZWF0ZShyLCBcIiE9XCIgLyogTk9UX0VRVUFMICovICwge1xuICAgICAgICAgICAgZG91YmxlVmFsdWU6IE5hTlxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBcIklTX05PVF9OVUxMXCI6XG4gICAgICAgIHZhciBpID0gVmUodC51bmFyeUZpbHRlci5maWVsZCk7XG4gICAgICAgIHJldHVybiBqbi5jcmVhdGUoaSwgXCIhPVwiIC8qIE5PVF9FUVVBTCAqLyAsIHtcbiAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgXCJPUEVSQVRPUl9VTlNQRUNJRklFRFwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFMoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFJlKHQpIHtcbiAgICB2YXIgZSA9IFtdO1xuICAgIHJldHVybiB0LmZpZWxkcy5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlLnB1c2godC5NKCkpO1xuICAgIH0pKSwge1xuICAgICAgICBmaWVsZFBhdGhzOiBlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gTWUodCkge1xuICAgIC8vIFJlc291cmNlIG5hbWVzIGhhdmUgYXQgbGVhc3QgNCBjb21wb25lbnRzIChwcm9qZWN0IElELCBkYXRhYmFzZSBJRClcbiAgICByZXR1cm4gdC5sZW5ndGggPj0gNCAmJiBcInByb2plY3RzXCIgPT09IHQuZ2V0KDApICYmIFwiZGF0YWJhc2VzXCIgPT09IHQuZ2V0KDIpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIFJlcHJlc2VudHMgYSB0cmFuc2Zvcm0gd2l0aGluIGEgVHJhbnNmb3JtTXV0YXRpb24uICovIHZhciBVZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBzdHJ1Y3R1cmFsIHR5cGUgb2YgYFRyYW5zZm9ybU9wZXJhdGlvbmAgaXMgdW5pcXVlLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzU0NTFcbiAgICB0aGlzLnplID0gdm9pZCAwO1xufTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbG9jYWwgdHJhbnNmb3JtIHJlc3VsdCBhZ2FpbnN0IHRoZSBwcm92aWRlZCBgcHJldmlvdXNWYWx1ZWAsXG4gKiBvcHRpb25hbGx5IHVzaW5nIHRoZSBwcm92aWRlZCBsb2NhbFdyaXRlVGltZS5cbiAqLyBmdW5jdGlvbiBxZSh0LCBlLCBuKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBCZSA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBfX3R5cGVfXzoge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdWYWx1ZTogXCJzZXJ2ZXJfdGltZXN0YW1wXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9fbG9jYWxfd3JpdGVfdGltZV9fOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzOiB0LnNlY29uZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW5vczogdC5uYW5vc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZSAmJiAobi5maWVsZHMuX19wcmV2aW91c192YWx1ZV9fID0gZSksIHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiBuXG4gICAgICAgIH07XG4gICAgfShuLCBlKSA6IHQgaW5zdGFuY2VvZiB6ZSA/IEdlKHQsIGUpIDogdCBpbnN0YW5jZW9mIEtlID8gUWUodCwgZSkgOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogU2luY2UgSmF2YVNjcmlwdCdzIGludGVnZXIgYXJpdGhtZXRpYyBpcyBsaW1pdGVkIHRvIDUzIGJpdFxuICAgICAgICAvLyBwcmVjaXNpb24gYW5kIHJlc29sdmVzIG92ZXJmbG93cyBieSByZWR1Y2luZyBwcmVjaXNpb24sIHdlIGRvIG5vdFxuICAgICAgICAvLyBtYW51YWxseSBjYXAgb3ZlcmZsb3dzIGF0IDJeNjMuXG4gICAgICAgIHZhciBuID0gamUodCwgZSksIHIgPSBZZShuKSArIFllKHQuS2UpO1xuICAgICAgICByZXR1cm4gJHQobikgJiYgJHQodC5LZSkgPyB1ZShyKSA6IHNlKHQuc2VyaWFsaXplciwgcik7XG4gICAgfSh0LCBlKTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIGZpbmFsIHRyYW5zZm9ybSByZXN1bHQgYWZ0ZXIgdGhlIHRyYW5zZm9ybSBoYXMgYmVlbiBhY2tub3dsZWRnZWRcbiAqIGJ5IHRoZSBzZXJ2ZXIsIHBvdGVudGlhbGx5IHVzaW5nIHRoZSBzZXJ2ZXItcHJvdmlkZWQgdHJhbnNmb3JtUmVzdWx0LlxuICovIGZ1bmN0aW9uIEZlKHQsIGUsIG4pIHtcbiAgICAvLyBUaGUgc2VydmVyIGp1c3Qgc2VuZHMgbnVsbCBhcyB0aGUgdHJhbnNmb3JtIHJlc3VsdCBmb3IgYXJyYXkgb3BlcmF0aW9ucyxcbiAgICAvLyBzbyB3ZSBoYXZlIHRvIGNhbGN1bGF0ZSBhIHJlc3VsdCB0aGUgc2FtZSBhcyB3ZSBkbyBmb3IgbG9jYWxcbiAgICAvLyBhcHBsaWNhdGlvbnMuXG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiB6ZSA/IEdlKHQsIGUpIDogdCBpbnN0YW5jZW9mIEtlID8gUWUodCwgZSkgOiBuO1xufVxuXG4vKipcbiAqIElmIHRoaXMgdHJhbnNmb3JtIG9wZXJhdGlvbiBpcyBub3QgaWRlbXBvdGVudCwgcmV0dXJucyB0aGUgYmFzZSB2YWx1ZSB0b1xuICogcGVyc2lzdCBmb3IgdGhpcyB0cmFuc2Zvcm0uIElmIGEgYmFzZSB2YWx1ZSBpcyByZXR1cm5lZCwgdGhlIHRyYW5zZm9ybVxuICogb3BlcmF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIHRvIHRoaXMgYmFzZSB2YWx1ZSwgZXZlbiBpZiBkb2N1bWVudCBoYXNcbiAqIGFscmVhZHkgYmVlbiB1cGRhdGVkLlxuICpcbiAqIEJhc2UgdmFsdWVzIHByb3ZpZGUgY29uc2lzdGVudCBiZWhhdmlvciBmb3Igbm9uLWlkZW1wb3RlbnQgdHJhbnNmb3JtcyBhbmRcbiAqIGFsbG93IHVzIHRvIHJldHVybiB0aGUgc2FtZSBsYXRlbmN5LWNvbXBlbnNhdGVkIHZhbHVlIGV2ZW4gaWYgdGhlIGJhY2tlbmRcbiAqIGhhcyBhbHJlYWR5IGFwcGxpZWQgdGhlIHRyYW5zZm9ybSBvcGVyYXRpb24uIFRoZSBiYXNlIHZhbHVlIGlzIG51bGwgZm9yXG4gKiBpZGVtcG90ZW50IHRyYW5zZm9ybXMsIGFzIHRoZXkgY2FuIGJlIHJlLXBsYXllZCBldmVuIGlmIHRoZSBiYWNrZW5kIGhhc1xuICogYWxyZWFkeSBhcHBsaWVkIHRoZW0uXG4gKlxuICogQHJldHVybiBhIGJhc2UgdmFsdWUgdG8gc3RvcmUgYWxvbmcgd2l0aCB0aGUgbXV0YXRpb24sIG9yIG51bGwgZm9yXG4gKiBpZGVtcG90ZW50IHRyYW5zZm9ybXMuXG4gKi8gZnVuY3Rpb24gamUodCwgZSkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgV2UgPyAkdChuID0gZSkgfHwgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gISF0ICYmIFwiZG91YmxlVmFsdWVcIiBpbiB0O1xuICAgIH0obikgPyBlIDoge1xuICAgICAgICBpbnRlZ2VyVmFsdWU6IDBcbiAgICB9IDogbnVsbDtcbiAgICB2YXIgbjtcbn1cblxuLyoqIFRyYW5zZm9ybXMgYSB2YWx1ZSBpbnRvIGEgc2VydmVyLWdlbmVyYXRlZCB0aW1lc3RhbXAuICovIHZhciBCZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSBlICYmIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbjtcbn0oVWUpLCB6ZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobiA9IGUuY2FsbCh0aGlzKSB8fCB0aGlzKS5lbGVtZW50cyA9IHQsIG47XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuO1xufShVZSk7XG5cbi8qKiBUcmFuc2Zvcm1zIGFuIGFycmF5IHZhbHVlIHZpYSBhIHVuaW9uIG9wZXJhdGlvbi4gKi8gZnVuY3Rpb24gR2UodCwgZSkge1xuICAgIGZvciAodmFyIG4gPSBIZShlKSwgciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgbi5zb21lKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gQnQoZSwgdCk7XG4gICAgICAgIH0pKSB8fCBuLnB1c2godCk7XG4gICAgfSwgaSA9IDAsIG8gPSB0LmVsZW1lbnRzOyBpIDwgby5sZW5ndGg7IGkrKykge1xuICAgICAgICByKG9baV0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhcnJheVZhbHVlOiB7XG4gICAgICAgICAgICB2YWx1ZXM6IG5cbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qKiBUcmFuc2Zvcm1zIGFuIGFycmF5IHZhbHVlIHZpYSBhIHJlbW92ZSBvcGVyYXRpb24uICovIHZhciBLZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobiA9IGUuY2FsbCh0aGlzKSB8fCB0aGlzKS5lbGVtZW50cyA9IHQsIG47XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuO1xufShVZSk7XG5cbmZ1bmN0aW9uIFFlKHQsIGUpIHtcbiAgICBmb3IgKHZhciBuID0gSGUoZSksIHIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIG4gPSBuLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuICFCdChlLCB0KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIGkgPSAwLCBvID0gdC5lbGVtZW50czsgaSA8IG8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcihvW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgdmFsdWVzOiBuXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGJhY2tlbmQgc2VtYW50aWNzIGZvciBsb2NhbGx5IGNvbXB1dGVkIE5VTUVSSUNfQUREIChpbmNyZW1lbnQpXG4gKiB0cmFuc2Zvcm1zLiBDb252ZXJ0cyBhbGwgZmllbGQgdmFsdWVzIHRvIGludGVnZXJzIG9yIGRvdWJsZXMsIGJ1dCB1bmxpa2UgdGhlXG4gKiBiYWNrZW5kIGRvZXMgbm90IGNhcCBpbnRlZ2VyIHZhbHVlcyBhdCAyXjYzLiBJbnN0ZWFkLCBKYXZhU2NyaXB0IG51bWJlclxuICogYXJpdGhtZXRpYyBpcyB1c2VkIGFuZCBwcmVjaXNpb24gbG9zcyBjYW4gb2NjdXIgZm9yIHZhbHVlcyBncmVhdGVyIHRoYW4gMl41My5cbiAqLyB2YXIgV2UgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHIgPSBlLmNhbGwodGhpcykgfHwgdGhpcykuc2VyaWFsaXplciA9IHQsIHIuS2UgPSBuLCByO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbjtcbn0oVWUpO1xuXG5mdW5jdGlvbiBZZSh0KSB7XG4gICAgcmV0dXJuIEh0KHQuaW50ZWdlclZhbHVlIHx8IHQuZG91YmxlVmFsdWUpO1xufVxuXG5mdW5jdGlvbiBIZSh0KSB7XG4gICAgcmV0dXJuIFp0KHQpICYmIHQuYXJyYXlWYWx1ZS52YWx1ZXMgPyB0LmFycmF5VmFsdWUudmFsdWVzLnNsaWNlKCkgOiBbXTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUHJvdmlkZXMgYSBzZXQgb2YgZmllbGRzIHRoYXQgY2FuIGJlIHVzZWQgdG8gcGFydGlhbGx5IHBhdGNoIGEgZG9jdW1lbnQuXG4gKiBGaWVsZE1hc2sgaXMgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIE9iamVjdFZhbHVlLlxuICogRXhhbXBsZXM6XG4gKiAgIGZvbyAtIE92ZXJ3cml0ZXMgZm9vIGVudGlyZWx5IHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlLiBJZiBmb28gaXMgbm90XG4gKiAgICAgICAgIHByZXNlbnQgaW4gdGhlIGNvbXBhbmlvbiBPYmplY3RWYWx1ZSwgdGhlIGZpZWxkIGlzIGRlbGV0ZWQuXG4gKiAgIGZvby5iYXIgLSBPdmVyd3JpdGVzIG9ubHkgdGhlIGZpZWxkIGJhciBvZiB0aGUgb2JqZWN0IGZvby5cbiAqICAgICAgICAgICAgIElmIGZvbyBpcyBub3QgYW4gb2JqZWN0LCBmb28gaXMgcmVwbGFjZWQgd2l0aCBhbiBvYmplY3RcbiAqICAgICAgICAgICAgIGNvbnRhaW5pbmcgZm9vXG4gKi8gdmFyIEplID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB0LCBcbiAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiB2YWxpZGF0aW9uIG9mIEZpZWxkTWFza1xuICAgICAgICAvLyBTb3J0IHRoZSBmaWVsZCBtYXNrIHRvIHN1cHBvcnQgYEZpZWxkTWFzay5pc0VxdWFsKClgIGFuZCBhc3NlcnQgYmVsb3cuXG4gICAgICAgIHQuc29ydChXLlYpXG4gICAgICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoYXQgYGZpZWxkUGF0aGAgaXMgaW5jbHVkZWQgYnkgYXQgbGVhc3Qgb25lIGZpZWxkIGluIHRoaXMgZmllbGRcbiAgICAgKiBtYXNrLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBhbiBPKG4pIG9wZXJhdGlvbiwgd2hlcmUgYG5gIGlzIHRoZSBzaXplIG9mIHRoZSBmaWVsZCBtYXNrLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkhlID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gMCwgbiA9IHRoaXMuZmllbGRzOyBlIDwgbi5sZW5ndGg7IGUrKykge1xuICAgICAgICAgICAgaWYgKG5bZV0uTih0KSkgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gQyh0aGlzLmZpZWxkcywgdC5maWVsZHMsIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5pc0VxdWFsKGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdDtcbn0oKSwgWGUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgdGhpcy5maWVsZCA9IHQsIHRoaXMudHJhbnNmb3JtID0gZTtcbn07XG5cbi8qKiBBIGZpZWxkIHBhdGggYW5kIHRoZSBUcmFuc2Zvcm1PcGVyYXRpb24gdG8gcGVyZm9ybSB1cG9uIGl0LiAqL1xuLyoqIFRoZSByZXN1bHQgb2Ygc3VjY2Vzc2Z1bGx5IGFwcGx5aW5nIGEgbXV0YXRpb24gdG8gdGhlIGJhY2tlbmQuICovIHZhciAkZSA9IGZ1bmN0aW9uKFxuLyoqXG4gICAgICogVGhlIHZlcnNpb24gYXQgd2hpY2ggdGhlIG11dGF0aW9uIHdhcyBjb21taXR0ZWQ6XG4gICAgICpcbiAgICAgKiAtIEZvciBtb3N0IG9wZXJhdGlvbnMsIHRoaXMgaXMgdGhlIHVwZGF0ZVRpbWUgaW4gdGhlIFdyaXRlUmVzdWx0LlxuICAgICAqIC0gRm9yIGRlbGV0ZXMsIHRoZSBjb21taXRUaW1lIG9mIHRoZSBXcml0ZVJlc3BvbnNlIChiZWNhdXNlIGRlbGV0ZXMgYXJlXG4gICAgICogICBub3Qgc3RvcmVkIGFuZCBoYXZlIG5vIHVwZGF0ZVRpbWUpLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoZXNlIHZlcnNpb25zIGNhbiBiZSBkaWZmZXJlbnQ6IE5vLW9wIHdyaXRlcyB3aWxsIG5vdCBjaGFuZ2VcbiAgICAgKiB0aGUgdXBkYXRlVGltZSBldmVuIHRob3VnaCB0aGUgY29tbWl0VGltZSBhZHZhbmNlcy5cbiAgICAgKi9cbnQsIFxuLyoqXG4gICAgICogVGhlIHJlc3VsdGluZyBmaWVsZHMgcmV0dXJuZWQgZnJvbSB0aGUgYmFja2VuZCBhZnRlciBhXG4gICAgICogVHJhbnNmb3JtTXV0YXRpb24gaGFzIGJlZW4gY29tbWl0dGVkLiBDb250YWlucyBvbmUgRmllbGRWYWx1ZSBmb3IgZWFjaFxuICAgICAqIEZpZWxkVHJhbnNmb3JtIHRoYXQgd2FzIGluIHRoZSBtdXRhdGlvbi5cbiAgICAgKlxuICAgICAqIFdpbGwgYmUgbnVsbCBpZiB0aGUgbXV0YXRpb24gd2FzIG5vdCBhIFRyYW5zZm9ybU11dGF0aW9uLlxuICAgICAqL1xuZSkge1xuICAgIHRoaXMudmVyc2lvbiA9IHQsIHRoaXMudHJhbnNmb3JtUmVzdWx0cyA9IGU7XG59LCBaZSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGltZSA9IHQsIHRoaXMuZXhpc3RzID0gZVxuICAgICAgICAvKiogQ3JlYXRlcyBhIG5ldyBlbXB0eSBQcmVjb25kaXRpb24uICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5HZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IHQ7XG4gICAgfSwgXG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgUHJlY29uZGl0aW9uIHdpdGggYW4gZXhpc3RzIGZsYWcuICovIHQuZXhpc3RzID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodm9pZCAwLCBlKTtcbiAgICB9LCBcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBQcmVjb25kaXRpb24gYmFzZWQgb24gYSB2ZXJzaW9uIGEgZG9jdW1lbnQgZXhpc3RzIGF0LiAqLyB0LnVwZGF0ZVRpbWUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChlKTtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiV2VcIiwge1xuICAgICAgICAvKiogUmV0dXJucyB3aGV0aGVyIHRoaXMgUHJlY29uZGl0aW9uIGlzIGVtcHR5LiAqLyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdGhpcy51cGRhdGVUaW1lICYmIHZvaWQgMCA9PT0gdGhpcy5leGlzdHM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4aXN0cyA9PT0gdC5leGlzdHMgJiYgKHRoaXMudXBkYXRlVGltZSA/ICEhdC51cGRhdGVUaW1lICYmIHRoaXMudXBkYXRlVGltZS5pc0VxdWFsKHQudXBkYXRlVGltZSkgOiAhdC51cGRhdGVUaW1lKTtcbiAgICB9LCB0O1xufSgpO1xuXG4vKipcbiAqIEVuY29kZXMgYSBwcmVjb25kaXRpb24gZm9yIGEgbXV0YXRpb24uIFRoaXMgZm9sbG93cyB0aGUgbW9kZWwgdGhhdCB0aGVcbiAqIGJhY2tlbmQgYWNjZXB0cyB3aXRoIHRoZSBzcGVjaWFsIGNhc2Ugb2YgYW4gZXhwbGljaXQgXCJlbXB0eVwiIHByZWNvbmRpdGlvblxuICogKG1lYW5pbmcgbm8gcHJlY29uZGl0aW9uKS5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByZWNvbmRpdGlvbnMgaXMgdmFsaWQgZm9yIHRoZSBnaXZlbiBkb2N1bWVudFxuICogKG9yIG51bGwgaWYgbm8gZG9jdW1lbnQgaXMgYXZhaWxhYmxlKS5cbiAqL1xuZnVuY3Rpb24gdG4odCwgZSkge1xuICAgIHJldHVybiB2b2lkIDAgIT09IHQudXBkYXRlVGltZSA/IGUgaW5zdGFuY2VvZiBibiAmJiBlLnZlcnNpb24uaXNFcXVhbCh0LnVwZGF0ZVRpbWUpIDogdm9pZCAwID09PSB0LmV4aXN0cyB8fCB0LmV4aXN0cyA9PT0gZSBpbnN0YW5jZW9mIGJuO1xufVxuXG4vKipcbiAqIEEgbXV0YXRpb24gZGVzY3JpYmVzIGEgc2VsZi1jb250YWluZWQgY2hhbmdlIHRvIGEgZG9jdW1lbnQuIE11dGF0aW9ucyBjYW5cbiAqIGNyZWF0ZSwgcmVwbGFjZSwgZGVsZXRlLCBhbmQgdXBkYXRlIHN1YnNldHMgb2YgZG9jdW1lbnRzLlxuICpcbiAqIE11dGF0aW9ucyBub3Qgb25seSBhY3Qgb24gdGhlIHZhbHVlIG9mIHRoZSBkb2N1bWVudCBidXQgYWxzbyBpdHMgdmVyc2lvbi5cbiAqXG4gKiBGb3IgbG9jYWwgbXV0YXRpb25zIChtdXRhdGlvbnMgdGhhdCBoYXZlbid0IGJlZW4gY29tbWl0dGVkIHlldCksIHdlIHByZXNlcnZlXG4gKiB0aGUgZXhpc3RpbmcgdmVyc2lvbiBmb3IgU2V0LCBQYXRjaCwgYW5kIFRyYW5zZm9ybSBtdXRhdGlvbnMuIEZvciBEZWxldGVcbiAqIG11dGF0aW9ucywgd2UgcmVzZXQgdGhlIHZlcnNpb24gdG8gMC5cbiAqXG4gKiBIZXJlJ3MgdGhlIGV4cGVjdGVkIHRyYW5zaXRpb24gdGFibGUuXG4gKlxuICogTVVUQVRJT04gICAgICAgICAgIEFQUExJRUQgVE8gICAgICAgICAgICBSRVNVTFRTIElOXG4gKlxuICogU2V0TXV0YXRpb24gICAgICAgIERvY3VtZW50KHYzKSAgICAgICAgICBEb2N1bWVudCh2MylcbiAqIFNldE11dGF0aW9uICAgICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgRG9jdW1lbnQodjApXG4gKiBTZXRNdXRhdGlvbiAgICAgICAgbnVsbCAgICAgICAgICAgICAgICAgIERvY3VtZW50KHYwKVxuICogUGF0Y2hNdXRhdGlvbiAgICAgIERvY3VtZW50KHYzKSAgICAgICAgICBEb2N1bWVudCh2MylcbiAqIFBhdGNoTXV0YXRpb24gICAgICBOb0RvY3VtZW50KHYzKSAgICAgICAgTm9Eb2N1bWVudCh2MylcbiAqIFBhdGNoTXV0YXRpb24gICAgICBudWxsICAgICAgICAgICAgICAgICAgbnVsbFxuICogVHJhbnNmb3JtTXV0YXRpb24gIERvY3VtZW50KHYzKSAgICAgICAgICBEb2N1bWVudCh2MylcbiAqIFRyYW5zZm9ybU11dGF0aW9uICBOb0RvY3VtZW50KHYzKSAgICAgICAgTm9Eb2N1bWVudCh2MylcbiAqIFRyYW5zZm9ybU11dGF0aW9uICBudWxsICAgICAgICAgICAgICAgICAgbnVsbFxuICogRGVsZXRlTXV0YXRpb24gICAgIERvY3VtZW50KHYzKSAgICAgICAgICBOb0RvY3VtZW50KHYwKVxuICogRGVsZXRlTXV0YXRpb24gICAgIE5vRG9jdW1lbnQodjMpICAgICAgICBOb0RvY3VtZW50KHYwKVxuICogRGVsZXRlTXV0YXRpb24gICAgIG51bGwgICAgICAgICAgICAgICAgICBOb0RvY3VtZW50KHYwKVxuICpcbiAqIEZvciBhY2tub3dsZWRnZWQgbXV0YXRpb25zLCB3ZSB1c2UgdGhlIHVwZGF0ZVRpbWUgb2YgdGhlIFdyaXRlUmVzcG9uc2UgYXNcbiAqIHRoZSByZXN1bHRpbmcgdmVyc2lvbiBmb3IgU2V0LCBQYXRjaCwgYW5kIFRyYW5zZm9ybSBtdXRhdGlvbnMuIEFzIGRlbGV0ZXNcbiAqIGhhdmUgbm8gZXhwbGljaXQgdXBkYXRlIHRpbWUsIHdlIHVzZSB0aGUgY29tbWl0VGltZSBvZiB0aGUgV3JpdGVSZXNwb25zZSBmb3JcbiAqIERlbGV0ZSBtdXRhdGlvbnMuXG4gKlxuICogSWYgYSBtdXRhdGlvbiBpcyBhY2tub3dsZWRnZWQgYnkgdGhlIGJhY2tlbmQgYnV0IGZhaWxzIHRoZSBwcmVjb25kaXRpb24gY2hlY2tcbiAqIGxvY2FsbHksIHdlIHJldHVybiBhbiBgVW5rbm93bkRvY3VtZW50YCBhbmQgcmVseSBvbiBXYXRjaCB0byBzZW5kIHVzIHRoZVxuICogdXBkYXRlZCB2ZXJzaW9uLlxuICpcbiAqIE5vdGUgdGhhdCBUcmFuc2Zvcm1NdXRhdGlvbnMgZG9uJ3QgY3JlYXRlIERvY3VtZW50cyAoaW4gdGhlIGNhc2Ugb2YgYmVpbmdcbiAqIGFwcGxpZWQgdG8gYSBOb0RvY3VtZW50KSwgZXZlbiB0aG91Z2ggdGhleSB3b3VsZCBvbiB0aGUgYmFja2VuZC4gVGhpcyBpc1xuICogYmVjYXVzZSB0aGUgY2xpZW50IGFsd2F5cyBjb21iaW5lcyB0aGUgVHJhbnNmb3JtTXV0YXRpb24gd2l0aCBhIFNldE11dGF0aW9uXG4gKiBvciBQYXRjaE11dGF0aW9uIGFuZCB3ZSBvbmx5IHdhbnQgdG8gYXBwbHkgdGhlIHRyYW5zZm9ybSBpZiB0aGUgcHJpb3JcbiAqIG11dGF0aW9uIHJlc3VsdGVkIGluIGEgRG9jdW1lbnQgKGFsd2F5cyB0cnVlIGZvciBhIFNldE11dGF0aW9uLCBidXQgbm90XG4gKiBuZWNlc3NhcmlseSBmb3IgYSBQYXRjaE11dGF0aW9uKS5cbiAqXG4gKiAjIyBTdWJjbGFzc2luZyBOb3Rlc1xuICpcbiAqIFN1YmNsYXNzZXMgb2YgTXV0YXRpb24gbmVlZCB0byBpbXBsZW1lbnQgYXBwbHlUb1JlbW90ZURvY3VtZW50KCkgYW5kXG4gKiBhcHBseVRvTG9jYWxWaWV3KCkgdG8gaW1wbGVtZW50IHRoZSBhY3R1YWwgYmVoYXZpb3Igb2YgYXBwbHlpbmcgdGhlIG11dGF0aW9uXG4gKiB0byBzb21lIHNvdXJjZSBkb2N1bWVudC5cbiAqLyB2YXIgZW4gPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIEFwcGxpZXMgdGhpcyBtdXRhdGlvbiB0byB0aGUgZ2l2ZW4gTWF5YmVEb2N1bWVudCBvciBudWxsIGZvciB0aGUgcHVycG9zZXNcbiAqIG9mIGNvbXB1dGluZyBhIG5ldyByZW1vdGUgZG9jdW1lbnQuIElmIHRoZSBpbnB1dCBkb2N1bWVudCBkb2Vzbid0IG1hdGNoIHRoZVxuICogZXhwZWN0ZWQgc3RhdGUgKGUuZy4gaXQgaXMgbnVsbCBvciBvdXRkYXRlZCksIGFuIGBVbmtub3duRG9jdW1lbnRgIGNhbiBiZVxuICogcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIG11dGF0aW9uIFRoZSBtdXRhdGlvbiB0byBhcHBseS5cbiAqIEBwYXJhbSBtYXliZURvYyBUaGUgZG9jdW1lbnQgdG8gbXV0YXRlLiBUaGUgaW5wdXQgZG9jdW1lbnQgY2FuIGJlIG51bGwgaWZcbiAqICAgICB0aGUgY2xpZW50IGhhcyBubyBrbm93bGVkZ2Ugb2YgdGhlIHByZS1tdXRhdGlvbiBzdGF0ZSBvZiB0aGUgZG9jdW1lbnQuXG4gKiBAcGFyYW0gbXV0YXRpb25SZXN1bHQgVGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgbXV0YXRpb24gZnJvbSB0aGUgYmFja2VuZC5cbiAqIEByZXR1cm4gVGhlIG11dGF0ZWQgZG9jdW1lbnQuIFRoZSByZXR1cm5lZCBkb2N1bWVudCBtYXkgYmUgYW5cbiAqICAgICBVbmtub3duRG9jdW1lbnQgaWYgdGhlIG11dGF0aW9uIGNvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoZSBsb2NhbGx5XG4gKiAgICAgY2FjaGVkIGJhc2UgZG9jdW1lbnQuXG4gKi8gZnVuY3Rpb24gbm4odCwgZSwgbikge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgYW4gPyBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIC8vIFVubGlrZSBhcHBseVNldE11dGF0aW9uVG9Mb2NhbFZpZXcsIGlmIHdlJ3JlIGFwcGx5aW5nIGEgbXV0YXRpb24gdG8gYVxuICAgICAgICAvLyByZW1vdGUgZG9jdW1lbnQgdGhlIHNlcnZlciBoYXMgYWNjZXB0ZWQgdGhlIG11dGF0aW9uIHNvIHRoZSBwcmVjb25kaXRpb25cbiAgICAgICAgLy8gbXVzdCBoYXZlIGhlbGQuXG4gICAgICAgIHJldHVybiBuZXcgYm4odC5rZXksIG4udmVyc2lvbiwgdC52YWx1ZSwge1xuICAgICAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiAhMFxuICAgICAgICB9KTtcbiAgICB9KHQsIDAsIG4pIDogdCBpbnN0YW5jZW9mIGNuID8gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBpZiAoIXRuKHQuamUsIGUpKSBcbiAgICAgICAgLy8gU2luY2UgdGhlIG11dGF0aW9uIHdhcyBub3QgcmVqZWN0ZWQsIHdlIGtub3cgdGhhdCB0aGUgIHByZWNvbmRpdGlvblxuICAgICAgICAvLyBtYXRjaGVkIG9uIHRoZSBiYWNrZW5kLiBXZSB0aGVyZWZvcmUgbXVzdCBub3QgaGF2ZSB0aGUgZXhwZWN0ZWQgdmVyc2lvblxuICAgICAgICAvLyBvZiB0aGUgZG9jdW1lbnQgaW4gb3VyIGNhY2hlIGFuZCByZXR1cm4gYW4gVW5rbm93bkRvY3VtZW50IHdpdGggdGhlXG4gICAgICAgIC8vIGtub3duIHVwZGF0ZVRpbWUuXG4gICAgICAgIHJldHVybiBuZXcgSW4odC5rZXksIG4udmVyc2lvbik7XG4gICAgICAgIHZhciByID0gaG4odCwgZSk7XG4gICAgICAgIHJldHVybiBuZXcgYm4odC5rZXksIG4udmVyc2lvbiwgciwge1xuICAgICAgICAgICAgaGFzQ29tbWl0dGVkTXV0YXRpb25zOiAhMFxuICAgICAgICB9KTtcbiAgICB9KHQsIGUsIG4pIDogdCBpbnN0YW5jZW9mIGZuID8gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBpZiAoayhudWxsICE9IG4udHJhbnNmb3JtUmVzdWx0cyksICF0bih0LmplLCBlKSkgXG4gICAgICAgIC8vIFNpbmNlIHRoZSBtdXRhdGlvbiB3YXMgbm90IHJlamVjdGVkLCB3ZSBrbm93IHRoYXQgdGhlICBwcmVjb25kaXRpb25cbiAgICAgICAgLy8gbWF0Y2hlZCBvbiB0aGUgYmFja2VuZC4gV2UgdGhlcmVmb3JlIG11c3Qgbm90IGhhdmUgdGhlIGV4cGVjdGVkIHZlcnNpb25cbiAgICAgICAgLy8gb2YgdGhlIGRvY3VtZW50IGluIG91ciBjYWNoZSBhbmQgcmV0dXJuIGFuIFVua25vd25Eb2N1bWVudCB3aXRoIHRoZVxuICAgICAgICAvLyBrbm93biB1cGRhdGVUaW1lLlxuICAgICAgICByZXR1cm4gbmV3IEluKHQua2V5LCBuLnZlcnNpb24pO1xuICAgICAgICB2YXIgciA9IGxuKHQsIGUpLCBpID0gXG4gICAgICAgIC8qKlxuICogQ3JlYXRlcyBhIGxpc3Qgb2YgXCJ0cmFuc2Zvcm0gcmVzdWx0c1wiIChhIHRyYW5zZm9ybSByZXN1bHQgaXMgYSBmaWVsZCB2YWx1ZVxuICogcmVwcmVzZW50aW5nIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSB0cmFuc2Zvcm0pIGZvciB1c2UgYWZ0ZXIgYVxuICogVHJhbnNmb3JtTXV0YXRpb24gaGFzIGJlZW4gYWNrbm93bGVkZ2VkIGJ5IHRoZSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtIGZpZWxkVHJhbnNmb3JtcyBUaGUgZmllbGQgdHJhbnNmb3JtcyB0byBhcHBseSB0aGUgcmVzdWx0IHRvLlxuICogQHBhcmFtIGJhc2VEb2MgVGhlIGRvY3VtZW50IHByaW9yIHRvIGFwcGx5aW5nIHRoaXMgbXV0YXRpb24gYmF0Y2guXG4gKiBAcGFyYW0gc2VydmVyVHJhbnNmb3JtUmVzdWx0cyBUaGUgdHJhbnNmb3JtIHJlc3VsdHMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAqIEByZXR1cm4gVGhlIHRyYW5zZm9ybSByZXN1bHRzIGxpc3QuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgdmFyIHIgPSBbXTtcbiAgICAgICAgICAgIGsodC5sZW5ndGggPT09IG4ubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvID0gdFtpXSwgdSA9IG8udHJhbnNmb3JtLCBzID0gbnVsbDtcbiAgICAgICAgICAgICAgICBlIGluc3RhbmNlb2YgYm4gJiYgKHMgPSBlLmZpZWxkKG8uZmllbGQpKSwgci5wdXNoKEZlKHUsIHMsIG5baV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9KHQuZmllbGRUcmFuc2Zvcm1zLCBlLCBuLnRyYW5zZm9ybVJlc3VsdHMpLCBvID0gbi52ZXJzaW9uLCB1ID0gcG4odCwgci5kYXRhKCksIGkpO1xuICAgICAgICByZXR1cm4gbmV3IGJuKHQua2V5LCBvLCB1LCB7XG4gICAgICAgICAgICBoYXNDb21taXR0ZWRNdXRhdGlvbnM6ICEwXG4gICAgICAgIH0pO1xuICAgIH0odCwgZSwgbikgOiBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIC8vIFVubGlrZSBhcHBseVRvTG9jYWxWaWV3LCBpZiB3ZSdyZSBhcHBseWluZyBhIG11dGF0aW9uIHRvIGEgcmVtb3RlXG4gICAgICAgIC8vIGRvY3VtZW50IHRoZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbiBzbyB0aGUgcHJlY29uZGl0aW9uIG11c3RcbiAgICAgICAgLy8gaGF2ZSBoZWxkLlxuICAgICAgICByZXR1cm4gbmV3IF9uKHQua2V5LCBuLnZlcnNpb24sIHtcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogITBcbiAgICAgICAgfSk7XG4gICAgfSh0LCAwLCBuKTtcbn1cblxuLyoqXG4gKiBBcHBsaWVzIHRoaXMgbXV0YXRpb24gdG8gdGhlIGdpdmVuIE1heWJlRG9jdW1lbnQgb3IgbnVsbCBmb3IgdGhlIHB1cnBvc2VzXG4gKiBvZiBjb21wdXRpbmcgdGhlIG5ldyBsb2NhbCB2aWV3IG9mIGEgZG9jdW1lbnQuIEJvdGggdGhlIGlucHV0IGFuZCByZXR1cm5lZFxuICogZG9jdW1lbnRzIGNhbiBiZSBudWxsLlxuICpcbiAqIEBwYXJhbSBtdXRhdGlvbiBUaGUgbXV0YXRpb24gdG8gYXBwbHkuXG4gKiBAcGFyYW0gbWF5YmVEb2MgVGhlIGRvY3VtZW50IHRvIG11dGF0ZS4gVGhlIGlucHV0IGRvY3VtZW50IGNhbiBiZSBudWxsIGlmXG4gKiAgICAgdGhlIGNsaWVudCBoYXMgbm8ga25vd2xlZGdlIG9mIHRoZSBwcmUtbXV0YXRpb24gc3RhdGUgb2YgdGhlIGRvY3VtZW50LlxuICogQHBhcmFtIGJhc2VEb2MgVGhlIHN0YXRlIG9mIHRoZSBkb2N1bWVudCBwcmlvciB0byB0aGlzIG11dGF0aW9uIGJhdGNoLiBUaGVcbiAqICAgICBpbnB1dCBkb2N1bWVudCBjYW4gYmUgbnVsbCBpZiB0aGUgY2xpZW50IGhhcyBubyBrbm93bGVkZ2Ugb2YgdGhlXG4gKiAgICAgcHJlLW11dGF0aW9uIHN0YXRlIG9mIHRoZSBkb2N1bWVudC5cbiAqIEBwYXJhbSBsb2NhbFdyaXRlVGltZSBBIHRpbWVzdGFtcCBpbmRpY2F0aW5nIHRoZSBsb2NhbCB3cml0ZSB0aW1lIG9mIHRoZVxuICogICAgIGJhdGNoIHRoaXMgbXV0YXRpb24gaXMgYSBwYXJ0IG9mLlxuICogQHJldHVybiBUaGUgbXV0YXRlZCBkb2N1bWVudC4gVGhlIHJldHVybmVkIGRvY3VtZW50IG1heSBiZSBudWxsLCBidXQgb25seVxuICogICAgIGlmIG1heWJlRG9jIHdhcyBudWxsIGFuZCB0aGUgbXV0YXRpb24gd291bGQgbm90IGNyZWF0ZSBhIG5ldyBkb2N1bWVudC5cbiAqLyBmdW5jdGlvbiBybih0LCBlLCBuLCByKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBhbiA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKCF0bih0LmplLCBlKSkgcmV0dXJuIGU7XG4gICAgICAgIHZhciBuID0gc24oZSk7XG4gICAgICAgIHJldHVybiBuZXcgYm4odC5rZXksIG4sIHQudmFsdWUsIHtcbiAgICAgICAgICAgIEplOiAhMFxuICAgICAgICB9KTtcbiAgICB9KHQsIGUpIDogdCBpbnN0YW5jZW9mIGNuID8gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAoIXRuKHQuamUsIGUpKSByZXR1cm4gZTtcbiAgICAgICAgdmFyIG4gPSBzbihlKSwgciA9IGhuKHQsIGUpO1xuICAgICAgICByZXR1cm4gbmV3IGJuKHQua2V5LCBuLCByLCB7XG4gICAgICAgICAgICBKZTogITBcbiAgICAgICAgfSk7XG4gICAgfSh0LCBlKSA6IHQgaW5zdGFuY2VvZiBmbiA/IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgaWYgKCF0bih0LmplLCBlKSkgcmV0dXJuIGU7XG4gICAgICAgIHZhciBpID0gbG4odCwgZSksIG8gPSBmdW5jdGlvbih0LCBlLCBuLCByKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gW10sIG8gPSAwLCB1ID0gdDsgbyA8IHUubGVuZ3RoOyBvKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHVbb10sIGEgPSBzLnRyYW5zZm9ybSwgYyA9IG51bGw7XG4gICAgICAgICAgICAgICAgbiBpbnN0YW5jZW9mIGJuICYmIChjID0gbi5maWVsZChzLmZpZWxkKSksIG51bGwgPT09IGMgJiYgciBpbnN0YW5jZW9mIGJuICYmIChcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBkb2N1bWVudCBkb2VzIG5vdCBjb250YWluIGEgdmFsdWUgZm9yIHRoZSBtdXRhdGVkXG4gICAgICAgICAgICAgICAgLy8gZmllbGQsIHVzZSB0aGUgdmFsdWUgdGhhdCBleGlzdGVkIGJlZm9yZSBhcHBseWluZyB0aGlzIG11dGF0aW9uXG4gICAgICAgICAgICAgICAgLy8gYmF0Y2guIFRoaXMgc29sdmVzIGFuIGVkZ2UgY2FzZSB3aGVyZSBhIFBhdGNoTXV0YXRpb24gY2xlYXJzIHRoZVxuICAgICAgICAgICAgICAgIC8vIHZhbHVlcyBpbiBhIG5lc3RlZCBtYXAgYmVmb3JlIHRoZSBUcmFuc2Zvcm1NdXRhdGlvbiBpcyBhcHBsaWVkLlxuICAgICAgICAgICAgICAgIGMgPSByLmZpZWxkKHMuZmllbGQpKSwgaS5wdXNoKHFlKGEsIGMsIGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KHQuZmllbGRUcmFuc2Zvcm1zLCBuLCBlLCByKSwgdSA9IHBuKHQsIGkuZGF0YSgpLCBvKTtcbiAgICAgICAgcmV0dXJuIG5ldyBibih0LmtleSwgaS52ZXJzaW9uLCB1LCB7XG4gICAgICAgICAgICBKZTogITBcbiAgICAgICAgfSk7XG4gICAgfSh0LCBlLCByLCBuKSA6IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRuKHQuamUsIGUpID8gbmV3IF9uKHQua2V5LCB6Lm1pbigpKSA6IGU7XG4gICAgfSh0LCBlKTtcbn1cblxuLyoqXG4gKiBJZiB0aGlzIG11dGF0aW9uIGlzIG5vdCBpZGVtcG90ZW50LCByZXR1cm5zIHRoZSBiYXNlIHZhbHVlIHRvIHBlcnNpc3Qgd2l0aFxuICogdGhpcyBtdXRhdGlvbi4gSWYgYSBiYXNlIHZhbHVlIGlzIHJldHVybmVkLCB0aGUgbXV0YXRpb24gaXMgYWx3YXlzIGFwcGxpZWRcbiAqIHRvIHRoaXMgYmFzZSB2YWx1ZSwgZXZlbiBpZiBkb2N1bWVudCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGJhc2UgdmFsdWUgaXMgYSBzcGFyc2Ugb2JqZWN0IHRoYXQgY29uc2lzdHMgb2Ygb25seSB0aGUgZG9jdW1lbnRcbiAqIGZpZWxkcyBmb3Igd2hpY2ggdGhpcyBtdXRhdGlvbiBjb250YWlucyBhIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybWF0aW9uXG4gKiAoZS5nLiBhIG51bWVyaWMgaW5jcmVtZW50KS4gVGhlIHByb3ZpZGVkIHZhbHVlIGd1YXJhbnRlZXMgY29uc2lzdGVudFxuICogYmVoYXZpb3IgZm9yIG5vbi1pZGVtcG90ZW50IHRyYW5zZm9ybXMgYW5kIGFsbG93IHVzIHRvIHJldHVybiB0aGUgc2FtZVxuICogbGF0ZW5jeS1jb21wZW5zYXRlZCB2YWx1ZSBldmVuIGlmIHRoZSBiYWNrZW5kIGhhcyBhbHJlYWR5IGFwcGxpZWQgdGhlXG4gKiBtdXRhdGlvbi4gVGhlIGJhc2UgdmFsdWUgaXMgbnVsbCBmb3IgaWRlbXBvdGVudCBtdXRhdGlvbnMsIGFzIHRoZXkgY2FuIGJlXG4gKiByZS1wbGF5ZWQgZXZlbiBpZiB0aGUgYmFja2VuZCBoYXMgYWxyZWFkeSBhcHBsaWVkIHRoZW0uXG4gKlxuICogQHJldHVybiBhIGJhc2UgdmFsdWUgdG8gc3RvcmUgYWxvbmcgd2l0aCB0aGUgbXV0YXRpb24sIG9yIG51bGwgZm9yXG4gKiBpZGVtcG90ZW50IG11dGF0aW9ucy5cbiAqLyBmdW5jdGlvbiBvbih0LCBlKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBmbiA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IG51bGwsIHIgPSAwLCBpID0gdC5maWVsZFRyYW5zZm9ybXM7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IGlbcl0sIHUgPSBlIGluc3RhbmNlb2YgYm4gPyBlLmZpZWxkKG8uZmllbGQpIDogdm9pZCAwLCBzID0gamUoby50cmFuc2Zvcm0sIHUgfHwgbnVsbCk7XG4gICAgICAgICAgICBudWxsICE9IHMgJiYgKG4gPSBudWxsID09IG4gPyAobmV3IGduKS5zZXQoby5maWVsZCwgcykgOiBuLnNldChvLmZpZWxkLCBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG4gPyBuLlllKCkgOiBudWxsO1xuICAgIH0odCwgZSkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB1bih0LCBlKSB7XG4gICAgcmV0dXJuIHQudHlwZSA9PT0gZS50eXBlICYmICEhdC5rZXkuaXNFcXVhbChlLmtleSkgJiYgISF0LmplLmlzRXF1YWwoZS5qZSkgJiYgKDAgLyogU2V0ICovID09PSB0LnR5cGUgPyB0LnZhbHVlLmlzRXF1YWwoZS52YWx1ZSkgOiAxIC8qIFBhdGNoICovID09PSB0LnR5cGUgPyB0LmRhdGEuaXNFcXVhbChlLmRhdGEpICYmIHQuUWUuaXNFcXVhbChlLlFlKSA6IDIgLyogVHJhbnNmb3JtICovICE9PSB0LnR5cGUgfHwgQyh0LmZpZWxkVHJhbnNmb3JtcywgdC5maWVsZFRyYW5zZm9ybXMsIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5maWVsZC5pc0VxdWFsKGUuZmllbGQpICYmIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIHplICYmIGUgaW5zdGFuY2VvZiB6ZSB8fCB0IGluc3RhbmNlb2YgS2UgJiYgZSBpbnN0YW5jZW9mIEtlID8gQyh0LmVsZW1lbnRzLCBlLmVsZW1lbnRzLCBCdCkgOiB0IGluc3RhbmNlb2YgV2UgJiYgZSBpbnN0YW5jZW9mIFdlID8gQnQodC5LZSwgZS5LZSkgOiB0IGluc3RhbmNlb2YgQmUgJiYgZSBpbnN0YW5jZW9mIEJlO1xuICAgICAgICAgICAgfSh0LnRyYW5zZm9ybSwgZS50cmFuc2Zvcm0pO1xuICAgICAgICB9KHQsIGUpO1xuICAgIH0pKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmVyc2lvbiBmcm9tIHRoZSBnaXZlbiBkb2N1bWVudCBmb3IgdXNlIGFzIHRoZSByZXN1bHQgb2YgYVxuICogbXV0YXRpb24uIE11dGF0aW9ucyBhcmUgZGVmaW5lZCB0byByZXR1cm4gdGhlIHZlcnNpb24gb2YgdGhlIGJhc2UgZG9jdW1lbnRcbiAqIG9ubHkgaWYgaXQgaXMgYW4gZXhpc3RpbmcgZG9jdW1lbnQuIERlbGV0ZWQgYW5kIHVua25vd24gZG9jdW1lbnRzIGhhdmUgYVxuICogcG9zdC1tdXRhdGlvbiB2ZXJzaW9uIG9mIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAqLyBmdW5jdGlvbiBzbih0KSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBibiA/IHQudmVyc2lvbiA6IHoubWluKCk7XG59XG5cbi8qKlxuICogQSBtdXRhdGlvbiB0aGF0IGNyZWF0ZXMgb3IgcmVwbGFjZXMgdGhlIGRvY3VtZW50IGF0IHRoZSBnaXZlbiBrZXkgd2l0aCB0aGVcbiAqIG9iamVjdCB2YWx1ZSBjb250ZW50cy5cbiAqLyB2YXIgYW4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGkgPSBlLmNhbGwodGhpcykgfHwgdGhpcykua2V5ID0gdCwgaS52YWx1ZSA9IG4sIGkuamUgPSByLCBpLnR5cGUgPSAwIC8qIFNldCAqLyAsIFxuICAgICAgICBpO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbjtcbn0oZW4pLCBjbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbiwgciwgaSkge1xuICAgICAgICB2YXIgbyA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobyA9IGUuY2FsbCh0aGlzKSB8fCB0aGlzKS5rZXkgPSB0LCBvLmRhdGEgPSBuLCBvLlFlID0gciwgby5qZSA9IGksIG8udHlwZSA9IDEgLyogUGF0Y2ggKi8gLCBcbiAgICAgICAgbztcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG47XG59KGVuKTtcblxuZnVuY3Rpb24gaG4odCwgZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gbmV3IGduKGUpO1xuICAgICAgICByZXR1cm4gdC5RZS5maWVsZHMuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKCFlLlQoKSkge1xuICAgICAgICAgICAgICAgIHZhciByID0gdC5kYXRhLmZpZWxkKGUpO1xuICAgICAgICAgICAgICAgIG51bGwgIT09IHIgPyBuLnNldChlLCByKSA6IG4uZGVsZXRlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSksIG4uWWUoKTtcbiAgICB9KHQsIGUgaW5zdGFuY2VvZiBibiA/IGUuZGF0YSgpIDogeW4uZW1wdHkoKSk7XG59XG5cbnZhciBmbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzKSB8fCB0aGlzKS5rZXkgPSB0LCByLmZpZWxkVHJhbnNmb3JtcyA9IG4sIHIudHlwZSA9IDIgLyogVHJhbnNmb3JtICovICwgXG4gICAgICAgIC8vIE5PVEU6IFdlIHNldCBhIHByZWNvbmRpdGlvbiBvZiBleGlzdHM6IHRydWUgYXMgYSBzYWZldHktY2hlY2ssIHNpbmNlIHdlXG4gICAgICAgIC8vIGFsd2F5cyBjb21iaW5lIFRyYW5zZm9ybU11dGF0aW9ucyB3aXRoIGEgU2V0TXV0YXRpb24gb3IgUGF0Y2hNdXRhdGlvbiB3aGljaFxuICAgICAgICAvLyAoaWYgc3VjY2Vzc2Z1bCkgc2hvdWxkIGVuZCB1cCB3aXRoIGFuIGV4aXN0aW5nIGRvY3VtZW50LlxuICAgICAgICByLmplID0gWmUuZXhpc3RzKCEwKSwgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG47XG59KGVuKTtcblxuZnVuY3Rpb24gbG4odCwgZSkge1xuICAgIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBwbih0LCBlLCBuKSB7XG4gICAgZm9yICh2YXIgciA9IG5ldyBnbihlKSwgaSA9IDA7IGkgPCB0LmZpZWxkVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbyA9IHQuZmllbGRUcmFuc2Zvcm1zW2ldO1xuICAgICAgICByLnNldChvLmZpZWxkLCBuW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHIuWWUoKTtcbn1cblxuLyoqIEEgbXV0YXRpb24gdGhhdCBkZWxldGVzIHRoZSBkb2N1bWVudCBhdCB0aGUgZ2l2ZW4ga2V5LiAqLyB2YXIgZG4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHIgPSBlLmNhbGwodGhpcykgfHwgdGhpcykua2V5ID0gdCwgci5qZSA9IG4sIHIudHlwZSA9IDMgLyogRGVsZXRlICovICwgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG47XG59KGVuKSwgdm4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHIgPSBlLmNhbGwodGhpcykgfHwgdGhpcykua2V5ID0gdCwgci5qZSA9IG4sIHIudHlwZSA9IDQgLyogVmVyaWZ5ICovICwgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG47XG59KGVuKSwgeW4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLnByb3RvID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQuZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHtcbiAgICAgICAgICAgIG1hcFZhbHVlOiB7fVxuICAgICAgICB9KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aCBvciBudWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggdGhlIHBhdGggdG8gc2VhcmNoXG4gICAgICogQHJldHVybiBUaGUgdmFsdWUgYXQgdGhlIHBhdGggb3IgaWYgdGhlcmUgaXQgZG9lc24ndCBleGlzdC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5maWVsZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHQuVCgpKSByZXR1cm4gdGhpcy5wcm90bztcbiAgICAgICAgZm9yICh2YXIgZSA9IHRoaXMucHJvdG8sIG4gPSAwOyBuIDwgdC5sZW5ndGggLSAxOyArK24pIHtcbiAgICAgICAgICAgIGlmICghZS5tYXBWYWx1ZS5maWVsZHMpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgaWYgKCFuZShlID0gZS5tYXBWYWx1ZS5maWVsZHNbdC5nZXQobildKSkgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChlID0gKGUubWFwVmFsdWUuZmllbGRzIHx8IHt9KVt0LkMoKV0pIHx8IG51bGw7XG4gICAgfSwgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIEJ0KHRoaXMucHJvdG8sIHQucHJvdG8pO1xuICAgIH0sIHQ7XG59KCksIGduID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYmFzZU9iamVjdCBUaGUgb2JqZWN0IHRvIG11dGF0ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0geW4uZW1wdHkoKSksIHRoaXMuWGUgPSB0LCBcbiAgICAgICAgLyoqIEEgbWFwIHRoYXQgY29udGFpbnMgdGhlIGFjY3VtdWxhdGVkIGNoYW5nZXMgaW4gdGhpcyBidWlsZGVyLiAqL1xuICAgICAgICB0aGlzLlplID0gbmV3IE1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmllbGQgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZpZWxkIHBhdGggdG8gc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgQnVpbGRlciBpbnN0YW5jZS5cbiAgICAgKi8gICAgcmV0dXJuIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG4odCwgZSksIHRoaXM7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZmllbGQgYXQgdGhlIHNwZWNpZmllZCBwYXRoLiBJZiB0aGVyZSBpcyBubyBmaWVsZCBhdCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgcGF0aCwgbm90aGluZyBpcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZpZWxkIHBhdGggdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgQnVpbGRlciBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRuKHQsIG51bGwpLCB0aGlzO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgb3ZlcmxheSBtYXAgYXQgYHBhdGhgLiBDcmVhdGVzIG5lc3RlZCBtYXAgZW50cmllcyBpZlxuICAgICAqIG5lZWRlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS50biA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IHRoaXMuWmUsIHIgPSAwOyByIDwgdC5sZW5ndGggLSAxOyArK3IpIHtcbiAgICAgICAgICAgIHZhciBpID0gdC5nZXQociksIG8gPSBuLmdldChpKTtcbiAgICAgICAgICAgIG8gaW5zdGFuY2VvZiBNYXAgPyBcbiAgICAgICAgICAgIC8vIFJlLXVzZSBhIHByZXZpb3VzbHkgY3JlYXRlZCBtYXBcbiAgICAgICAgICAgIG4gPSBvIDogbyAmJiAxMCAvKiBPYmplY3RWYWx1ZSAqLyA9PT0ganQobykgPyAoXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBleGlzdGluZyBQcm90b2J1ZiBNYXBWYWx1ZSBpbnRvIGEgbWFwXG4gICAgICAgICAgICBvID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhvLm1hcFZhbHVlLmZpZWxkcyB8fCB7fSkpLCBuLnNldChpLCBvKSwgbiA9IG8pIDogKFxuICAgICAgICAgICAgLy8gQ3JlYXRlIGFuIGVtcHR5IG1hcCB0byByZXByZXNlbnQgdGhlIGN1cnJlbnQgbmVzdGluZyBsZXZlbFxuICAgICAgICAgICAgbyA9IG5ldyBNYXAsIG4uc2V0KGksIG8pLCBuID0gbyk7XG4gICAgICAgIH1cbiAgICAgICAgbi5zZXQodC5DKCksIGUpO1xuICAgIH0sIFxuICAgIC8qKiBSZXR1cm5zIGFuIE9iamVjdFZhbHVlIHdpdGggYWxsIG11dGF0aW9ucyBhcHBsaWVkLiAqLyB0LnByb3RvdHlwZS5ZZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuZW4oVy4kKCksIHRoaXMuWmUpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPSB0ID8gbmV3IHluKHQpIDogdGhpcy5YZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGFueSBvdmVybGF5cyBmcm9tIGBjdXJyZW50T3ZlcmxheXNgIHRoYXQgZXhpc3QgYXQgYGN1cnJlbnRQYXRoYFxuICAgICAqIGFuZCByZXR1cm5zIHRoZSBtZXJnZWQgZGF0YSBhdCBgY3VycmVudFBhdGhgIChvciBudWxsIGlmIHRoZXJlIHdlcmUgbm9cbiAgICAgKiBjaGFuZ2VzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjdXJyZW50UGF0aCBUaGUgcGF0aCBhdCB0aGUgY3VycmVudCBuZXN0aW5nIGxldmVsLiBDYW4gYmUgc2V0IHRvXG4gICAgICogRmllbGRWYWx1ZS5lbXB0eVBhdGgoKSB0byByZXByZXNlbnQgdGhlIHJvb3QuXG4gICAgICogQHBhcmFtIGN1cnJlbnRPdmVybGF5cyBUaGUgb3ZlcmxheXMgYXQgdGhlIGN1cnJlbnQgbmVzdGluZyBsZXZlbCBpbiB0aGVcbiAgICAgKiBzYW1lIGZvcm1hdCBhcyBgb3ZlcmxheU1hcGAuXG4gICAgICogQHJldHVybiBUaGUgbWVyZ2VkIGRhdGEgYXQgYGN1cnJlbnRQYXRoYCBvciBudWxsIGlmIG5vIG1vZGlmaWNhdGlvbnNcbiAgICAgKiB3ZXJlIGFwcGxpZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZW4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9ICExLCBpID0gdGhpcy5YZS5maWVsZCh0KSwgbyA9IG5lKGkpID8gLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBkYXRhIGF0IHRoZSBjdXJyZW50IHBhdGgsIGJhc2Ugb3VyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIGkubWFwVmFsdWUuZmllbGRzKSA6IHt9O1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gbi5lbih0LmNoaWxkKGkpLCBlKTtcbiAgICAgICAgICAgICAgICBudWxsICE9IHUgJiYgKG9baV0gPSB1LCByID0gITApO1xuICAgICAgICAgICAgfSBlbHNlIG51bGwgIT09IGUgPyAob1tpXSA9IGUsIHIgPSAhMCkgOiBvLmhhc093blByb3BlcnR5KGkpICYmIChkZWxldGUgb1tpXSwgciA9ICEwKTtcbiAgICAgICAgfSkpLCByID8ge1xuICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IG9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSA6IG51bGw7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgRmllbGRNYXNrIGJ1aWx0IGZyb20gYWxsIGZpZWxkcyBpbiBhIE1hcFZhbHVlLlxuICovXG5mdW5jdGlvbiBtbih0KSB7XG4gICAgdmFyIGUgPSBbXTtcbiAgICByZXR1cm4gTSh0LmZpZWxkcyB8fCB7fSwgKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBuZXcgVyhbIHQgXSk7XG4gICAgICAgIGlmIChuZShuKSkge1xuICAgICAgICAgICAgdmFyIGkgPSBtbihuLm1hcFZhbHVlKS5maWVsZHM7XG4gICAgICAgICAgICBpZiAoMCA9PT0gaS5sZW5ndGgpIFxuICAgICAgICAgICAgLy8gUHJlc2VydmUgdGhlIGVtcHR5IG1hcCBieSBhZGRpbmcgaXQgdG8gdGhlIEZpZWxkTWFzay5cbiAgICAgICAgICAgIGUucHVzaChyKTsgZWxzZSBcbiAgICAgICAgICAgIC8vIEZvciBuZXN0ZWQgYW5kIG5vbi1lbXB0eSBPYmplY3RWYWx1ZXMsIGFkZCB0aGUgRmllbGRQYXRoIG9mIHRoZVxuICAgICAgICAgICAgLy8gbGVhZiBub2Rlcy5cbiAgICAgICAgICAgIGZvciAodmFyIG8gPSAwLCB1ID0gaTsgbyA8IHUubGVuZ3RoOyBvKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHVbb107XG4gICAgICAgICAgICAgICAgZS5wdXNoKHIuY2hpbGQocykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgXG4gICAgICAgIC8vIEZvciBuZXN0ZWQgYW5kIG5vbi1lbXB0eSBPYmplY3RWYWx1ZXMsIGFkZCB0aGUgRmllbGRQYXRoIG9mIHRoZSBsZWFmXG4gICAgICAgIC8vIG5vZGVzLlxuICAgICAgICBlLnB1c2gocik7XG4gICAgfSkpLCBuZXcgSmUoZSlcbiAgICAvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuICAgIC8qKlxuICogVGhlIHJlc3VsdCBvZiBhIGxvb2t1cCBmb3IgYSBnaXZlbiBwYXRoIG1heSBiZSBhbiBleGlzdGluZyBkb2N1bWVudCBvciBhXG4gKiBtYXJrZXIgdGhhdCB0aGlzIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0IGF0IGEgZ2l2ZW4gdmVyc2lvbi5cbiAqLztcbn1cblxudmFyIHduID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMua2V5ID0gdCwgdGhpcy52ZXJzaW9uID0gZTtcbn0sIGJuID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0LCBuLCByLCBpKSB7XG4gICAgICAgIHZhciBvID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChvID0gZS5jYWxsKHRoaXMsIHQsIG4pIHx8IHRoaXMpLm5uID0gciwgby5KZSA9ICEhaS5KZSwgby5oYXNDb21taXR0ZWRNdXRhdGlvbnMgPSAhIWkuaGFzQ29tbWl0dGVkTXV0YXRpb25zLCBcbiAgICAgICAgbztcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLmZpZWxkID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ubi5maWVsZCh0KTtcbiAgICB9LCBuLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5uO1xuICAgIH0sIG4ucHJvdG90eXBlLnNuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5uLnByb3RvO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0aGlzLmtleS5pc0VxdWFsKHQua2V5KSAmJiB0aGlzLnZlcnNpb24uaXNFcXVhbCh0LnZlcnNpb24pICYmIHRoaXMuSmUgPT09IHQuSmUgJiYgdGhpcy5oYXNDb21taXR0ZWRNdXRhdGlvbnMgPT09IHQuaGFzQ29tbWl0dGVkTXV0YXRpb25zICYmIHRoaXMubm4uaXNFcXVhbCh0Lm5uKTtcbiAgICB9LCBuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJEb2N1bWVudChcIiArIHRoaXMua2V5ICsgXCIsIFwiICsgdGhpcy52ZXJzaW9uICsgXCIsIFwiICsgdGhpcy5ubi50b1N0cmluZygpICsgXCIsIHtoYXNMb2NhbE11dGF0aW9uczogXCIgKyB0aGlzLkplICsgXCJ9KSwge2hhc0NvbW1pdHRlZE11dGF0aW9uczogXCIgKyB0aGlzLmhhc0NvbW1pdHRlZE11dGF0aW9ucyArIFwifSlcIjtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiaGFzUGVuZGluZ1dyaXRlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5KZSB8fCB0aGlzLmhhc0NvbW1pdHRlZE11dGF0aW9ucztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgbjtcbn0od24pLCBfbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaSA9IGUuY2FsbCh0aGlzLCB0LCBuKSB8fCB0aGlzKS5oYXNDb21taXR0ZWRNdXRhdGlvbnMgPSAhKCFyIHx8ICFyLmhhc0NvbW1pdHRlZE11dGF0aW9ucyksIFxuICAgICAgICBpO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiTm9Eb2N1bWVudChcIiArIHRoaXMua2V5ICsgXCIsIFwiICsgdGhpcy52ZXJzaW9uICsgXCIpXCI7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLCBcImhhc1BlbmRpbmdXcml0ZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBuLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIG4gJiYgdC5oYXNDb21taXR0ZWRNdXRhdGlvbnMgPT09IHRoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zICYmIHQudmVyc2lvbi5pc0VxdWFsKHRoaXMudmVyc2lvbikgJiYgdC5rZXkuaXNFcXVhbCh0aGlzLmtleSk7XG4gICAgfSwgbjtcbn0od24pLCBJbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSBlICYmIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiVW5rbm93bkRvY3VtZW50KFwiICsgdGhpcy5rZXkgKyBcIiwgXCIgKyB0aGlzLnZlcnNpb24gKyBcIilcIjtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiaGFzUGVuZGluZ1dyaXRlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgbiAmJiB0LnZlcnNpb24uaXNFcXVhbCh0aGlzLnZlcnNpb24pICYmIHQua2V5LmlzRXF1YWwodGhpcy5rZXkpO1xuICAgIH0sIG47XG59KHduKSwgRW4gPSBcbi8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgUXVlcnkgd2l0aCBhIHBhdGggYW5kIG9wdGlvbmFsIGFkZGl0aW9uYWwgcXVlcnkgY29uc3RyYWludHMuXG4gICAgICogUGF0aCBtdXN0IGN1cnJlbnRseSBiZSBlbXB0eSBpZiB0aGlzIGlzIGEgY29sbGVjdGlvbiBncm91cCBxdWVyeS5cbiAgICAgKi9cbmZ1bmN0aW9uKHQsIGUsIG4sIHIsIGksIG8gLyogRmlyc3QgKi8gLCB1LCBzKSB7XG4gICAgdm9pZCAwID09PSBlICYmIChlID0gbnVsbCksIHZvaWQgMCA9PT0gbiAmJiAobiA9IFtdKSwgdm9pZCAwID09PSByICYmIChyID0gW10pLCBcbiAgICB2b2lkIDAgPT09IGkgJiYgKGkgPSBudWxsKSwgdm9pZCAwID09PSBvICYmIChvID0gXCJGXCIpLCB2b2lkIDAgPT09IHUgJiYgKHUgPSBudWxsKSwgXG4gICAgdm9pZCAwID09PSBzICYmIChzID0gbnVsbCksIHRoaXMucGF0aCA9IHQsIHRoaXMuY29sbGVjdGlvbkdyb3VwID0gZSwgdGhpcy5ybiA9IG4sIFxuICAgIHRoaXMuZmlsdGVycyA9IHIsIHRoaXMubGltaXQgPSBpLCB0aGlzLmxpbWl0VHlwZSA9IG8sIHRoaXMuc3RhcnRBdCA9IHUsIHRoaXMuZW5kQXQgPSBzLCBcbiAgICB0aGlzLm9uID0gbnVsbCwgXG4gICAgLy8gVGhlIGNvcnJlc3BvbmRpbmcgYFRhcmdldGAgb2YgdGhpcyBgUXVlcnlgIGluc3RhbmNlLlxuICAgIHRoaXMuYW4gPSBudWxsLCB0aGlzLnN0YXJ0QXQsIHRoaXMuZW5kQXQ7XG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBkb2N1bWVudCBpbiBGaXJlc3RvcmUgd2l0aCBhIGtleSwgdmVyc2lvbiwgZGF0YSBhbmQgd2hldGhlciB0aGVcbiAqIGRhdGEgaGFzIGxvY2FsIG11dGF0aW9ucyBhcHBsaWVkIHRvIGl0LlxuICovXG4vKiogQ3JlYXRlcyBhIG5ldyBRdWVyeSBpbnN0YW5jZSB3aXRoIHRoZSBvcHRpb25zIHByb3ZpZGVkLiAqLyBmdW5jdGlvbiBUbih0LCBlLCBuLCByLCBpLCBvLCB1LCBzKSB7XG4gICAgcmV0dXJuIG5ldyBFbih0LCBlLCBuLCByLCBpLCBvLCB1LCBzKTtcbn1cblxuLyoqIENyZWF0ZXMgYSBuZXcgUXVlcnkgZm9yIGEgcXVlcnkgdGhhdCBtYXRjaGVzIGFsbCBkb2N1bWVudHMgYXQgYHBhdGhgICovIGZ1bmN0aW9uIE5uKHQpIHtcbiAgICByZXR1cm4gbmV3IEVuKHQpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBjb252ZXJ0IGEgY29sbGVjdGlvbiBncm91cCBxdWVyeSBpbnRvIGEgY29sbGVjdGlvbiBxdWVyeSBhdCBhXG4gKiBzcGVjaWZpYyBwYXRoLiBUaGlzIGlzIHVzZWQgd2hlbiBleGVjdXRpbmcgY29sbGVjdGlvbiBncm91cCBxdWVyaWVzLCBzaW5jZVxuICogd2UgaGF2ZSB0byBzcGxpdCB0aGUgcXVlcnkgaW50byBhIHNldCBvZiBjb2xsZWN0aW9uIHF1ZXJpZXMgYXQgbXVsdGlwbGVcbiAqIHBhdGhzLlxuICovIGZ1bmN0aW9uIHhuKHQpIHtcbiAgICByZXR1cm4gIUgodC5saW1pdCkgJiYgXCJGXCIgLyogRmlyc3QgKi8gPT09IHQubGltaXRUeXBlO1xufVxuXG5mdW5jdGlvbiBBbih0KSB7XG4gICAgcmV0dXJuICFIKHQubGltaXQpICYmIFwiTFwiIC8qIExhc3QgKi8gPT09IHQubGltaXRUeXBlO1xufVxuXG5mdW5jdGlvbiBTbih0KSB7XG4gICAgcmV0dXJuIHQucm4ubGVuZ3RoID4gMCA/IHQucm5bMF0uZmllbGQgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBrbih0KSB7XG4gICAgZm9yICh2YXIgZSA9IDAsIG4gPSB0LmZpbHRlcnM7IGUgPCBuLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgIHZhciByID0gbltlXTtcbiAgICAgICAgaWYgKHIuY24oKSkgcmV0dXJuIHIuZmllbGQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbnkgb2YgdGhlIHByb3ZpZGVkIE9wZXJhdG9ycyBhcmUgaW5jbHVkZWQgaW4gdGhlIHF1ZXJ5IGFuZFxuICogcmV0dXJucyB0aGUgZmlyc3Qgb25lIHRoYXQgaXMsIG9yIG51bGwgaWYgbm9uZSBhcmUuXG4gKi9cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBxdWVyeSBtYXRjaGVzIGEgY29sbGVjdGlvbiBncm91cCByYXRoZXIgdGhhbiBhIHNwZWNpZmljXG4gKiBjb2xsZWN0aW9uLlxuICovIGZ1bmN0aW9uIERuKHQpIHtcbiAgICByZXR1cm4gbnVsbCAhPT0gdC5jb2xsZWN0aW9uR3JvdXA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW1wbGljaXQgb3JkZXIgYnkgY29uc3RyYWludCB0aGF0IGlzIHVzZWQgdG8gZXhlY3V0ZSB0aGUgUXVlcnksXG4gKiB3aGljaCBjYW4gYmUgZGlmZmVyZW50IGZyb20gdGhlIG9yZGVyIGJ5IGNvbnN0cmFpbnRzIHRoZSB1c2VyIHByb3ZpZGVkIChlLmcuXG4gKiB0aGUgU0RLIGFuZCBiYWNrZW5kIGFsd2F5cyBvcmRlcnMgYnkgYF9fbmFtZV9fYCkuXG4gKi8gZnVuY3Rpb24gT24odCkge1xuICAgIHZhciBlID0gRCh0KTtcbiAgICBpZiAobnVsbCA9PT0gZS5vbikge1xuICAgICAgICBlLm9uID0gW107XG4gICAgICAgIHZhciBuID0ga24oZSksIHIgPSBTbihlKTtcbiAgICAgICAgaWYgKG51bGwgIT09IG4gJiYgbnVsbCA9PT0gcikgXG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGltcGxpY2l0bHkgYWRkIGtleSBvcmRlcmluZywgd2UgbXVzdCBhbHNvIGFkZCB0aGVcbiAgICAgICAgLy8gaW5lcXVhbGl0eSBmaWx0ZXIgZmllbGQgZm9yIGl0IHRvIGJlIGEgdmFsaWQgcXVlcnkuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgZGVmYXVsdCBpbmVxdWFsaXR5IGZpZWxkIGFuZCBrZXkgb3JkZXJpbmcgaXMgYXNjZW5kaW5nLlxuICAgICAgICBuLkIoKSB8fCBlLm9uLnB1c2gobmV3IHRyKG4pKSwgZS5vbi5wdXNoKG5ldyB0cihXLnEoKSwgXCJhc2NcIiAvKiBBU0NFTkRJTkcgKi8pKTsgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gITEsIG8gPSAwLCB1ID0gZS5ybjsgbyA8IHUubGVuZ3RoOyBvKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHVbb107XG4gICAgICAgICAgICAgICAgZS5vbi5wdXNoKHMpLCBzLmZpZWxkLkIoKSAmJiAoaSA9ICEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBvcmRlciBvZiB0aGUgaW1wbGljaXQga2V5IG9yZGVyaW5nIGFsd2F5cyBtYXRjaGVzIHRoZSBsYXN0XG4gICAgICAgICAgICAgICAgLy8gZXhwbGljaXQgb3JkZXIgYnlcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGUucm4ubGVuZ3RoID4gMCA/IGUucm5bZS5ybi5sZW5ndGggLSAxXS5kaXIgOiBcImFzY1wiIC8qIEFTQ0VORElORyAqLztcbiAgICAgICAgICAgICAgICBlLm9uLnB1c2gobmV3IHRyKFcucSgpLCBhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGUub247XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBgUXVlcnlgIGluc3RhbmNlIHRvIGl0J3MgY29ycmVzcG9uZGluZyBgVGFyZ2V0YCByZXByZXNlbnRhdGlvbi5cbiAqLyBmdW5jdGlvbiBQbih0KSB7XG4gICAgdmFyIGUgPSBEKHQpO1xuICAgIGlmICghZS5hbikgaWYgKFwiRlwiIC8qIEZpcnN0ICovID09PSBlLmxpbWl0VHlwZSkgZS5hbiA9IFooZS5wYXRoLCBlLmNvbGxlY3Rpb25Hcm91cCwgT24oZSksIGUuZmlsdGVycywgZS5saW1pdCwgZS5zdGFydEF0LCBlLmVuZEF0KTsgZWxzZSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgIC8vIEZsaXAgdGhlIG9yZGVyQnkgZGlyZWN0aW9ucyBzaW5jZSB3ZSB3YW50IHRoZSBsYXN0IHJlc3VsdHNcbiAgICAgICAgdmFyIG4gPSBbXSwgciA9IDAsIGkgPSBPbihlKTsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gaVtyXSwgdSA9IFwiZGVzY1wiIC8qIERFU0NFTkRJTkcgKi8gPT09IG8uZGlyID8gXCJhc2NcIiAvKiBBU0NFTkRJTkcgKi8gOiBcImRlc2NcIiAvKiBERVNDRU5ESU5HICovO1xuICAgICAgICAgICAgbi5wdXNoKG5ldyB0cihvLmZpZWxkLCB1KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbmVlZCB0byBzd2FwIHRoZSBjdXJzb3JzIHRvIG1hdGNoIHRoZSBub3ctZmxpcHBlZCBxdWVyeSBvcmRlcmluZy5cbiAgICAgICAgICAgICAgICB2YXIgcyA9IGUuZW5kQXQgPyBuZXcgSm4oZS5lbmRBdC5wb3NpdGlvbiwgIWUuZW5kQXQuYmVmb3JlKSA6IG51bGwsIGEgPSBlLnN0YXJ0QXQgPyBuZXcgSm4oZS5zdGFydEF0LnBvc2l0aW9uLCAhZS5zdGFydEF0LmJlZm9yZSkgOiBudWxsO1xuICAgICAgICAvLyBOb3cgcmV0dXJuIGFzIGEgTGltaXRUeXBlLkZpcnN0IHF1ZXJ5LlxuICAgICAgICAgICAgICAgIGUuYW4gPSBaKGUucGF0aCwgZS5jb2xsZWN0aW9uR3JvdXAsIG4sIGUuZmlsdGVycywgZS5saW1pdCwgcywgYSk7XG4gICAgfVxuICAgIHJldHVybiBlLmFuO1xufVxuXG5mdW5jdGlvbiBWbih0LCBlLCBuKSB7XG4gICAgcmV0dXJuIG5ldyBFbih0LnBhdGgsIHQuY29sbGVjdGlvbkdyb3VwLCB0LnJuLnNsaWNlKCksIHQuZmlsdGVycy5zbGljZSgpLCBlLCBuLCB0LnN0YXJ0QXQsIHQuZW5kQXQpO1xufVxuXG5mdW5jdGlvbiBDbih0LCBlKSB7XG4gICAgcmV0dXJuIG5ldyBFbih0LnBhdGgsIHQuY29sbGVjdGlvbkdyb3VwLCB0LnJuLnNsaWNlKCksIHQuZmlsdGVycy5zbGljZSgpLCB0LmxpbWl0LCB0LmxpbWl0VHlwZSwgZSwgdC5lbmRBdCk7XG59XG5cbmZ1bmN0aW9uIExuKHQsIGUpIHtcbiAgICByZXR1cm4gbmV3IEVuKHQucGF0aCwgdC5jb2xsZWN0aW9uR3JvdXAsIHQucm4uc2xpY2UoKSwgdC5maWx0ZXJzLnNsaWNlKCksIHQubGltaXQsIHQubGltaXRUeXBlLCB0LnN0YXJ0QXQsIGUpO1xufVxuXG5mdW5jdGlvbiBSbih0LCBlKSB7XG4gICAgcmV0dXJuIGV0KFBuKHQpLCBQbihlKSkgJiYgdC5saW1pdFR5cGUgPT09IGUubGltaXRUeXBlO1xufVxuXG4vLyBUT0RPKGIvMjkxODMxNjUpOiBUaGlzIGlzIHVzZWQgdG8gZ2V0IGEgdW5pcXVlIHN0cmluZyBmcm9tIGEgcXVlcnkgdG8sIGZvclxuLy8gZXhhbXBsZSwgdXNlIGFzIGEgZGljdGlvbmFyeSBrZXksIGJ1dCB0aGUgaW1wbGVtZW50YXRpb24gaXMgc3ViamVjdCB0b1xuLy8gY29sbGlzaW9ucy4gTWFrZSBpdCBjb2xsaXNpb24tZnJlZS5cbmZ1bmN0aW9uIE1uKHQpIHtcbiAgICByZXR1cm4gdHQoUG4odCkpICsgXCJ8bHQ6XCIgKyB0LmxpbWl0VHlwZTtcbn1cblxuZnVuY3Rpb24gVW4odCkge1xuICAgIHJldHVybiBcIlF1ZXJ5KHRhcmdldD1cIiArIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LnBhdGguTSgpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdC5jb2xsZWN0aW9uR3JvdXAgJiYgKGUgKz0gXCIgY29sbGVjdGlvbkdyb3VwPVwiICsgdC5jb2xsZWN0aW9uR3JvdXApLCBcbiAgICAgICAgdC5maWx0ZXJzLmxlbmd0aCA+IDAgJiYgKGUgKz0gXCIsIGZpbHRlcnM6IFtcIiArIHQuZmlsdGVycy5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAoZSA9IHQpLmZpZWxkLk0oKSArIFwiIFwiICsgZS5vcCArIFwiIFwiICsgUXQoZS52YWx1ZSk7XG4gICAgICAgICAgICAvKiogUmV0dXJucyBhIGRlYnVnIGRlc2NyaXB0aW9uIGZvciBgZmlsdGVyYC4gKi8gICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgIC8qKiBGaWx0ZXIgdGhhdCBtYXRjaGVzIG9uIGtleSBmaWVsZHMgKGkuZS4gJ19fbmFtZV9fJykuICovICAgICAgICB9KSkuam9pbihcIiwgXCIpICsgXCJdXCIpLCBcbiAgICAgICAgSCh0LmxpbWl0KSB8fCAoZSArPSBcIiwgbGltaXQ6IFwiICsgdC5saW1pdCksIHQub3JkZXJCeS5sZW5ndGggPiAwICYmIChlICs9IFwiLCBvcmRlckJ5OiBbXCIgKyB0Lm9yZGVyQnkubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gKGUgPSB0KS5maWVsZC5NKCkgKyBcIiAoXCIgKyBlLmRpciArIFwiKVwiO1xuICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgIH0pKS5qb2luKFwiLCBcIikgKyBcIl1cIiksIHQuc3RhcnRBdCAmJiAoZSArPSBcIiwgc3RhcnRBdDogXCIgKyBYbih0LnN0YXJ0QXQpKSwgdC5lbmRBdCAmJiAoZSArPSBcIiwgZW5kQXQ6IFwiICsgWG4odC5lbmRBdCkpLCBcbiAgICAgICAgXCJUYXJnZXQoXCIgKyBlICsgXCIpXCI7XG4gICAgfShQbih0KSkgKyBcIjsgbGltaXRUeXBlPVwiICsgdC5saW1pdFR5cGUgKyBcIilcIjtcbn1cblxuLyoqIFJldHVybnMgd2hldGhlciBgZG9jYCBtYXRjaGVzIHRoZSBjb25zdHJhaW50cyBvZiBgcXVlcnlgLiAqLyBmdW5jdGlvbiBxbih0LCBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBlLmtleS5wYXRoO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdC5jb2xsZWN0aW9uR3JvdXAgPyBlLmtleS5qKHQuY29sbGVjdGlvbkdyb3VwKSAmJiB0LnBhdGguTihuKSA6IFkuRyh0LnBhdGgpID8gdC5wYXRoLmlzRXF1YWwobikgOiB0LnBhdGguRihuKTtcbiAgICB9KHQsIGUpICYmIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSB0LnJuOyBuIDwgci5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgdmFyIGkgPSByW25dO1xuICAgICAgICAgICAgLy8gb3JkZXIgYnkga2V5IGFsd2F5cyBtYXRjaGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWkuZmllbGQuQigpICYmIG51bGwgPT09IGUuZmllbGQoaS5maWVsZCkpIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITA7XG4gICAgfSh0LCBlKSAmJiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSAwLCByID0gdC5maWx0ZXJzOyBuIDwgci5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgaWYgKCFyW25dLm1hdGNoZXMoZSkpIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITA7XG4gICAgfSh0LCBlKSAmJiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiAhKHQuc3RhcnRBdCAmJiAhJG4odC5zdGFydEF0LCBPbih0KSwgZSkpICYmICghdC5lbmRBdCB8fCAhJG4odC5lbmRBdCwgT24odCksIGUpKTtcbiAgICB9KHQsIGUpO1xufVxuXG5mdW5jdGlvbiBGbih0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgZm9yICh2YXIgciA9ICExLCBpID0gMCwgbyA9IE9uKHQpOyBpIDwgby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHUgPSBvW2ldLCBzID0gZXIodSwgZSwgbik7XG4gICAgICAgICAgICBpZiAoMCAhPT0gcykgcmV0dXJuIHM7XG4gICAgICAgICAgICByID0gciB8fCB1LmZpZWxkLkIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xufVxuXG52YXIgam4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGkgPSBlLmNhbGwodGhpcykgfHwgdGhpcykuZmllbGQgPSB0LCBpLm9wID0gbiwgaS52YWx1ZSA9IHIsIGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmaWx0ZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKi8gICAgcmV0dXJuIHQobiwgZSksIG4uY3JlYXRlID0gZnVuY3Rpb24odCwgZSwgcikge1xuICAgICAgICByZXR1cm4gdC5CKCkgPyBcImluXCIgLyogSU4gKi8gPT09IGUgfHwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gPT09IGUgPyB0aGlzLnVuKHQsIGUsIHIpIDogbmV3IEJuKHQsIGUsIHIpIDogXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovID09PSBlID8gbmV3IFFuKHQsIHIpIDogXCJpblwiIC8qIElOICovID09PSBlID8gbmV3IFduKHQsIHIpIDogXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gPT09IGUgPyBuZXcgWW4odCwgcikgOiBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIEFSUkFZX0NPTlRBSU5TX0FOWSAqLyA9PT0gZSA/IG5ldyBIbih0LCByKSA6IG5ldyBuKHQsIGUsIHIpO1xuICAgIH0sIG4udW4gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBcImluXCIgLyogSU4gKi8gPT09IGUgPyBuZXcgem4odCwgbikgOiBuZXcgR24odCwgbik7XG4gICAgfSwgbi5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICAvLyBUeXBlcyBkbyBub3QgaGF2ZSB0byBtYXRjaCBpbiBOT1RfRVFVQUwgZmlsdGVycy5cbiAgICAgICAgICAgICAgICByZXR1cm4gXCIhPVwiIC8qIE5PVF9FUVVBTCAqLyA9PT0gdGhpcy5vcCA/IG51bGwgIT09IGUgJiYgdGhpcy5obihHdChlLCB0aGlzLnZhbHVlKSkgOiBudWxsICE9PSBlICYmIGp0KHRoaXMudmFsdWUpID09PSBqdChlKSAmJiB0aGlzLmhuKEd0KGUsIHRoaXMudmFsdWUpKTtcbiAgICAgICAgLy8gT25seSBjb21wYXJlIHR5cGVzIHdpdGggbWF0Y2hpbmcgYmFja2VuZCBvcmRlciAoc3VjaCBhcyBkb3VibGUgYW5kIGludCkuXG4gICAgICAgIH0sIG4ucHJvdG90eXBlLmhuID0gZnVuY3Rpb24odCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMub3ApIHtcbiAgICAgICAgICBjYXNlIFwiPFwiIC8qIExFU1NfVEhBTiAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdCA8IDA7XG5cbiAgICAgICAgICBjYXNlIFwiPD1cIiAvKiBMRVNTX1RIQU5fT1JfRVFVQUwgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQgPD0gMDtcblxuICAgICAgICAgIGNhc2UgXCI9PVwiIC8qIEVRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiAwID09PSB0O1xuXG4gICAgICAgICAgY2FzZSBcIiE9XCIgLyogTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiAwICE9PSB0O1xuXG4gICAgICAgICAgY2FzZSBcIj5cIiAvKiBHUkVBVEVSX1RIQU4gKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQgPiAwO1xuXG4gICAgICAgICAgY2FzZSBcIj49XCIgLyogR1JFQVRFUl9USEFOX09SX0VRVUFMICovIDpcbiAgICAgICAgICAgIHJldHVybiB0ID49IDA7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFMoKTtcbiAgICAgICAgfVxuICAgIH0sIG4ucHJvdG90eXBlLmNuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbIFwiPFwiIC8qIExFU1NfVEhBTiAqLyAsIFwiPD1cIiAvKiBMRVNTX1RIQU5fT1JfRVFVQUwgKi8gLCBcIj5cIiAvKiBHUkVBVEVSX1RIQU4gKi8gLCBcIj49XCIgLyogR1JFQVRFUl9USEFOX09SX0VRVUFMICovICwgXCIhPVwiIC8qIE5PVF9FUVVBTCAqLyAsIFwibm90LWluXCIgLyogTk9UX0lOICovIF0uaW5kZXhPZih0aGlzLm9wKSA+PSAwO1xuICAgIH0sIG47XG59KChmdW5jdGlvbigpIHt9KSk7XG5cbnZhciBCbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaSA9IGUuY2FsbCh0aGlzLCB0LCBuLCByKSB8fCB0aGlzKS5rZXkgPSBZLlcoci5yZWZlcmVuY2VWYWx1ZSksIGk7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFkuVih0LmtleSwgdGhpcy5rZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5obihlKTtcbiAgICB9LCBuO1xufShqbiksIHpuID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0LCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChyID0gZS5jYWxsKHRoaXMsIHQsIFwiaW5cIiAvKiBJTiAqLyAsIG4pIHx8IHRoaXMpLmtleXMgPSBLbihcImluXCIgLyogSU4gKi8gLCBuKSwgXG4gICAgICAgIHI7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlzLnNvbWUoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmlzRXF1YWwodC5rZXkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgbjtcbn0oam4pLCBHbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzLCB0LCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyAsIG4pIHx8IHRoaXMpLmtleXMgPSBLbihcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyAsIG4pLCBcbiAgICAgICAgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5rZXlzLnNvbWUoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmlzRXF1YWwodC5rZXkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgbjtcbn0oam4pO1xuXG4vKiogRmlsdGVyIHRoYXQgbWF0Y2hlcyBvbiBrZXkgZmllbGRzIHdpdGhpbiBhbiBhcnJheS4gKi8gZnVuY3Rpb24gS24odCwgZSkge1xuICAgIHZhciBuO1xuICAgIHJldHVybiAoKG51bGwgPT09IChuID0gZS5hcnJheVZhbHVlKSB8fCB2b2lkIDAgPT09IG4gPyB2b2lkIDAgOiBuLnZhbHVlcykgfHwgW10pLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gWS5XKHQucmVmZXJlbmNlVmFsdWUpO1xuICAgIH0pKTtcbn1cblxuLyoqIEEgRmlsdGVyIHRoYXQgaW1wbGVtZW50cyB0aGUgYXJyYXktY29udGFpbnMgb3BlcmF0b3IuICovIHZhciBRbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICByZXR1cm4gZS5jYWxsKHRoaXMsIHQsIFwiYXJyYXktY29udGFpbnNcIiAvKiBBUlJBWV9DT05UQUlOUyAqLyAsIG4pIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiBadChlKSAmJiB6dChlLmFycmF5VmFsdWUsIHRoaXMudmFsdWUpO1xuICAgIH0sIG47XG59KGpuKSwgV24gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuY2FsbCh0aGlzLCB0LCBcImluXCIgLyogSU4gKi8gLCBuKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbi5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LmZpZWxkKHRoaXMuZmllbGQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiB6dCh0aGlzLnZhbHVlLmFycmF5VmFsdWUsIGUpO1xuICAgIH0sIG47XG59KGpuKSwgWW4gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGUuY2FsbCh0aGlzLCB0LCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyAsIG4pIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAoenQodGhpcy52YWx1ZS5hcnJheVZhbHVlLCB7XG4gICAgICAgICAgICBudWxsVmFsdWU6IFwiTlVMTF9WQUxVRVwiXG4gICAgICAgIH0pKSByZXR1cm4gITE7XG4gICAgICAgIHZhciBlID0gdC5maWVsZCh0aGlzLmZpZWxkKTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGUgJiYgIXp0KHRoaXMudmFsdWUuYXJyYXlWYWx1ZSwgZSk7XG4gICAgfSwgbjtcbn0oam4pLCBIbiA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICByZXR1cm4gZS5jYWxsKHRoaXMsIHQsIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovICwgbikgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHQuZmllbGQodGhpcy5maWVsZCk7XG4gICAgICAgIHJldHVybiAhKCFadChuKSB8fCAhbi5hcnJheVZhbHVlLnZhbHVlcykgJiYgbi5hcnJheVZhbHVlLnZhbHVlcy5zb21lKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4genQoZS52YWx1ZS5hcnJheVZhbHVlLCB0KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG47XG59KGpuKSwgSm4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHQsIHRoaXMuYmVmb3JlID0gZTtcbn07XG5cbi8qKiBBIEZpbHRlciB0aGF0IGltcGxlbWVudHMgdGhlIElOIG9wZXJhdG9yLiAqLyBmdW5jdGlvbiBYbih0KSB7XG4gICAgLy8gVE9ETyhiLzI5MTgzMTY1KTogTWFrZSB0aGlzIGNvbGxpc2lvbiByb2J1c3QuXG4gICAgcmV0dXJuICh0LmJlZm9yZSA/IFwiYlwiIDogXCJhXCIpICsgXCI6XCIgKyB0LnBvc2l0aW9uLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gUXQodCk7XG4gICAgfSkpLmpvaW4oXCIsXCIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGRvY3VtZW50IHNvcnRzIGJlZm9yZSBhIGJvdW5kIHVzaW5nIHRoZSBwcm92aWRlZCBzb3J0XG4gKiBvcmRlci5cbiAqLyBmdW5jdGlvbiAkbih0LCBlLCBuKSB7XG4gICAgZm9yICh2YXIgciA9IDAsIGkgPSAwOyBpIDwgdC5wb3NpdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbyA9IGVbaV0sIHUgPSB0LnBvc2l0aW9uW2ldO1xuICAgICAgICBpZiAociA9IG8uZmllbGQuQigpID8gWS5WKFkuVyh1LnJlZmVyZW5jZVZhbHVlKSwgbi5rZXkpIDogR3QodSwgbi5maWVsZChvLmZpZWxkKSksIFxuICAgICAgICBcImRlc2NcIiAvKiBERVNDRU5ESU5HICovID09PSBvLmRpciAmJiAociAqPSAtMSksIDAgIT09IHIpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdC5iZWZvcmUgPyByIDw9IDAgOiByIDwgMDtcbn1cblxuZnVuY3Rpb24gWm4odCwgZSkge1xuICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gbnVsbCA9PT0gZTtcbiAgICBpZiAobnVsbCA9PT0gZSkgcmV0dXJuICExO1xuICAgIGlmICh0LmJlZm9yZSAhPT0gZS5iZWZvcmUgfHwgdC5wb3NpdGlvbi5sZW5ndGggIT09IGUucG9zaXRpb24ubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0LnBvc2l0aW9uLmxlbmd0aDsgbisrKSBpZiAoIUJ0KHQucG9zaXRpb25bbl0sIGUucG9zaXRpb25bbl0pKSByZXR1cm4gITE7XG4gICAgcmV0dXJuICEwO1xufVxuXG4vKipcbiAqIEFuIG9yZGVyaW5nIG9uIGEgZmllbGQsIGluIHNvbWUgRGlyZWN0aW9uLiBEaXJlY3Rpb24gZGVmYXVsdHMgdG8gQVNDRU5ESU5HLlxuICovIHZhciB0ciA9IGZ1bmN0aW9uKHQsIGUgLyogQVNDRU5ESU5HICovKSB7XG4gICAgdm9pZCAwID09PSBlICYmIChlID0gXCJhc2NcIiksIHRoaXMuZmllbGQgPSB0LCB0aGlzLmRpciA9IGU7XG59O1xuXG5mdW5jdGlvbiBlcih0LCBlLCBuKSB7XG4gICAgdmFyIHIgPSB0LmZpZWxkLkIoKSA/IFkuVihlLmtleSwgbi5rZXkpIDogZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IGUuZmllbGQodCksIGkgPSBuLmZpZWxkKHQpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gciAmJiBudWxsICE9PSBpID8gR3QociwgaSkgOiBTKCk7XG4gICAgfSh0LmZpZWxkLCBlLCBuKTtcbiAgICBzd2l0Y2ggKHQuZGlyKSB7XG4gICAgICBjYXNlIFwiYXNjXCIgLyogQVNDRU5ESU5HICovIDpcbiAgICAgICAgcmV0dXJuIHI7XG5cbiAgICAgIGNhc2UgXCJkZXNjXCIgLyogREVTQ0VORElORyAqLyA6XG4gICAgICAgIHJldHVybiAtMSAqIHI7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBTKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBucih0LCBlKSB7XG4gICAgcmV0dXJuIHQuZGlyID09PSBlLmRpciAmJiB0LmZpZWxkLmlzRXF1YWwoZS5maWVsZCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIHZhciByciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gdGhpcztcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICB0LnJlc29sdmUgPSBlLCB0LnJlamVjdCA9IG47XG4gICAgfSkpO1xufSwgaXIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoXG4gICAgLyoqXG4gICAgICogVGhlIEFzeW5jUXVldWUgdG8gcnVuIGJhY2tvZmYgb3BlcmF0aW9ucyBvbi5cbiAgICAgKi9cbiAgICB0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgdG8gdXNlIHdoZW4gc2NoZWR1bGluZyBiYWNrb2ZmIG9wZXJhdGlvbnMgb24gdGhlIEFzeW5jUXVldWUuXG4gICAgICovXG4gICAgZSwgXG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgZGVsYXkgKHVzZWQgYXMgdGhlIGJhc2UgZGVsYXkgb24gdGhlIGZpcnN0IHJldHJ5IGF0dGVtcHQpLlxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXG4gICAgICogbGl0dGxlIGFzIDAuNSppbml0aWFsRGVsYXlNcy5cbiAgICAgKi9cbiAgICBuXG4gICAgLyoqXG4gICAgICogVGhlIG11bHRpcGxpZXIgdG8gdXNlIHRvIGRldGVybWluZSB0aGUgZXh0ZW5kZWQgYmFzZSBkZWxheSBhZnRlciBlYWNoXG4gICAgICogYXR0ZW1wdC5cbiAgICAgKi8gLCByXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gYmFzZSBkZWxheSBhZnRlciB3aGljaCBubyBmdXJ0aGVyIGJhY2tvZmYgaXMgcGVyZm9ybWVkLlxuICAgICAqIE5vdGUgdGhhdCBqaXR0ZXIgd2lsbCBzdGlsbCBiZSBhcHBsaWVkLCBzbyB0aGUgYWN0dWFsIGRlbGF5IGNvdWxkIGJlIGFzXG4gICAgICogbXVjaCBhcyAxLjUqbWF4RGVsYXlNcy5cbiAgICAgKi8gLCBpKSB7XG4gICAgICAgIHZvaWQgMCA9PT0gbiAmJiAobiA9IDFlMyksIHZvaWQgMCA9PT0gciAmJiAociA9IDEuNSksIHZvaWQgMCA9PT0gaSAmJiAoaSA9IDZlNCksIFxuICAgICAgICB0aGlzLmxuID0gdCwgdGhpcy5fbiA9IGUsIHRoaXMuZm4gPSBuLCB0aGlzLmRuID0gciwgdGhpcy53biA9IGksIHRoaXMuVG4gPSAwLCB0aGlzLkVuID0gbnVsbCwgXG4gICAgICAgIC8qKiBUaGUgbGFzdCBiYWNrb2ZmIGF0dGVtcHQsIGFzIGVwb2NoIG1pbGxpc2Vjb25kcy4gKi9cbiAgICAgICAgdGhpcy5JbiA9IERhdGUubm93KCksIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBiYWNrb2ZmIGRlbGF5LlxuICAgICAqXG4gICAgICogVGhlIHZlcnkgbmV4dCBiYWNrb2ZmQW5kV2FpdCgpIHdpbGwgaGF2ZSBubyBkZWxheS4gSWYgaXQgaXMgY2FsbGVkIGFnYWluXG4gICAgICogKGkuZS4gZHVlIHRvIGFuIGVycm9yKSwgaW5pdGlhbERlbGF5TXMgKHBsdXMgaml0dGVyKSB3aWxsIGJlIHVzZWQsIGFuZFxuICAgICAqIHN1YnNlcXVlbnQgb25lcyB3aWxsIGluY3JlYXNlIGFjY29yZGluZyB0byB0aGUgYmFja29mZkZhY3Rvci5cbiAgICAgKi8gICAgcmV0dXJuIHQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuVG4gPSAwO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgYmFja29mZiBkZWxheSB0byB0aGUgbWF4aW11bSBkZWxheSAoZS5nLiBmb3IgdXNlIGFmdGVyIGFcbiAgICAgKiBSRVNPVVJDRV9FWEhBVVNURUQgZXJyb3IpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLm1uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuVG4gPSB0aGlzLnduO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgY3VycmVudERlbGF5TXMsIGFuZCBpbmNyZWFzZXMgdGhlXG4gICAgICogZGVsYXkgZm9yIGFueSBzdWJzZXF1ZW50IGF0dGVtcHRzLiBJZiB0aGVyZSB3YXMgYSBwZW5kaW5nIGJhY2tvZmYgb3BlcmF0aW9uXG4gICAgICogYWxyZWFkeSwgaXQgd2lsbCBiZSBjYW5jZWxlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5BbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgYmFja29mZiBvcGVyYXRpb24uXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgLy8gRmlyc3Qgc2NoZWR1bGUgdXNpbmcgdGhlIGN1cnJlbnQgYmFzZSAod2hpY2ggbWF5IGJlIDAgYW5kIHNob3VsZCBiZVxuICAgICAgICAvLyBob25vcmVkIGFzIHN1Y2gpLlxuICAgICAgICB2YXIgbiA9IE1hdGguZmxvb3IodGhpcy5UbiArIHRoaXMuUm4oKSksIHIgPSBNYXRoLm1heCgwLCBEYXRlLm5vdygpIC0gdGhpcy5JbiksIGkgPSBNYXRoLm1heCgwLCBuIC0gcik7XG4gICAgICAgIC8vIEd1YXJkIGFnYWluc3QgbGFzdEF0dGVtcHRUaW1lIGJlaW5nIGluIHRoZSBmdXR1cmUgZHVlIHRvIGEgY2xvY2sgY2hhbmdlLlxuICAgICAgICAgICAgICAgIGkgPiAwICYmIFQoXCJFeHBvbmVudGlhbEJhY2tvZmZcIiwgXCJCYWNraW5nIG9mZiBmb3IgXCIgKyBpICsgXCIgbXMgKGJhc2UgZGVsYXk6IFwiICsgdGhpcy5UbiArIFwiIG1zLCBkZWxheSB3aXRoIGppdHRlcjogXCIgKyBuICsgXCIgbXMsIGxhc3QgYXR0ZW1wdDogXCIgKyByICsgXCIgbXMgYWdvKVwiKSwgXG4gICAgICAgIHRoaXMuRW4gPSB0aGlzLmxuLlBuKHRoaXMuX24sIGksIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLkluID0gRGF0ZS5ub3coKSwgdCgpO1xuICAgICAgICB9KSksIFxuICAgICAgICAvLyBBcHBseSBiYWNrb2ZmIGZhY3RvciB0byBkZXRlcm1pbmUgbmV4dCBkZWxheSBhbmQgZW5zdXJlIGl0IGlzIHdpdGhpblxuICAgICAgICAvLyBib3VuZHMuXG4gICAgICAgIHRoaXMuVG4gKj0gdGhpcy5kbiwgdGhpcy5UbiA8IHRoaXMuZm4gJiYgKHRoaXMuVG4gPSB0aGlzLmZuKSwgdGhpcy5UbiA+IHRoaXMud24gJiYgKHRoaXMuVG4gPSB0aGlzLnduKTtcbiAgICB9LCB0LnByb3RvdHlwZS5nbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLkVuICYmICh0aGlzLkVuLlZuKCksIHRoaXMuRW4gPSBudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5FbiAmJiAodGhpcy5Fbi5jYW5jZWwoKSwgdGhpcy5FbiA9IG51bGwpO1xuICAgIH0sIFxuICAgIC8qKiBSZXR1cm5zIGEgcmFuZG9tIHZhbHVlIGluIHRoZSByYW5nZSBbLWN1cnJlbnRCYXNlTXMvMiwgY3VycmVudEJhc2VNcy8yXSAqLyB0LnByb3RvdHlwZS5SbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAuNSkgKiB0aGlzLlRuO1xuICAgIH0sIHQ7XG59KCksIG9yID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAvLyBOT1RFOiBuZXh0L2NhdGNoQ2FsbGJhY2sgd2lsbCBhbHdheXMgcG9pbnQgdG8gb3VyIG93biB3cmFwcGVyIGZ1bmN0aW9ucyxcbiAgICAgICAgLy8gbm90IHRoZSB1c2VyJ3MgcmF3IG5leHQoKSBvciBjYXRjaCgpIGNhbGxiYWNrcy5cbiAgICAgICAgICAgICAgICB0aGlzLnluID0gbnVsbCwgdGhpcy5wbiA9IG51bGwsIFxuICAgICAgICAvLyBXaGVuIHRoZSBvcGVyYXRpb24gcmVzb2x2ZXMsIHdlJ2xsIHNldCByZXN1bHQgb3IgZXJyb3IgYW5kIG1hcmsgaXNEb25lLlxuICAgICAgICB0aGlzLnJlc3VsdCA9IHZvaWQgMCwgdGhpcy5lcnJvciA9IHZvaWQgMCwgdGhpcy52biA9ICExLCBcbiAgICAgICAgLy8gU2V0IHRvIHRydWUgd2hlbiAudGhlbigpIG9yIC5jYXRjaCgpIGFyZSBjYWxsZWQgYW5kIHByZXZlbnRzIGFkZGl0aW9uYWxcbiAgICAgICAgLy8gY2hhaW5pbmcuXG4gICAgICAgIHRoaXMuYm4gPSAhMSwgdCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZS52biA9ICEwLCBlLnJlc3VsdCA9IHQsIGUueW4gJiYgXG4gICAgICAgICAgICAvLyB2YWx1ZSBzaG91bGQgYmUgZGVmaW5lZCB1bmxlc3MgVCBpcyBWb2lkLCBidXQgd2UgY2FuJ3QgZXhwcmVzc1xuICAgICAgICAgICAgLy8gdGhhdCBpbiB0aGUgdHlwZSBzeXN0ZW0uXG4gICAgICAgICAgICBlLnluKHQpO1xuICAgICAgICB9KSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGUudm4gPSAhMCwgZS5lcnJvciA9IHQsIGUucG4gJiYgZS5wbih0KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHQodm9pZCAwLCB0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmJuICYmIFMoKSwgdGhpcy5ibiA9ICEwLCB0aGlzLnZuID8gdGhpcy5lcnJvciA/IHRoaXMuU24obiwgdGhpcy5lcnJvcikgOiB0aGlzLkRuKGUsIHRoaXMucmVzdWx0KSA6IG5ldyB0KChmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICByLnluID0gZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgIHIuRG4oZSwgbikubmV4dCh0LCBpKTtcbiAgICAgICAgICAgIH0sIHIucG4gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgci5TbihuLCBlKS5uZXh0KHQsIGkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkNuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgICAgICB0Lm5leHQoZSwgbik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5ObiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBuID0gZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG4gaW5zdGFuY2VvZiB0ID8gbiA6IHQucmVzb2x2ZShuKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUuRG4gPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHJldHVybiBlID8gdGhpcy5ObigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZShuKTtcbiAgICAgICAgfSkpIDogdC5yZXNvbHZlKG4pO1xuICAgIH0sIHQucHJvdG90eXBlLlNuID0gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICByZXR1cm4gZSA/IHRoaXMuTm4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUobik7XG4gICAgICAgIH0pKSA6IHQucmVqZWN0KG4pO1xuICAgIH0sIHQucmVzb2x2ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KChmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgICAgICB0KGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5yZWplY3QgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgbihlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQueG4gPSBmdW5jdGlvbihcbiAgICAvLyBBY2NlcHQgYWxsIFByb21pc2UgdHlwZXMgaW4gd2FpdEZvcigpLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgIHZhciByID0gMCwgaSA9IDAsIG8gPSAhMTtcbiAgICAgICAgICAgIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICsrciwgZS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgKytpLCBvICYmIGkgPT09IHIgJiYgdCgpO1xuICAgICAgICAgICAgICAgIH0pLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0KTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIG8gPSAhMCwgaSA9PT0gciAmJiB0KCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBHaXZlbiBhbiBhcnJheSBvZiBwcmVkaWNhdGUgZnVuY3Rpb25zIHRoYXQgYXN5bmNocm9ub3VzbHkgZXZhbHVhdGUgdG8gYVxuICAgICAqIGJvb2xlYW4sIGltcGxlbWVudHMgYSBzaG9ydC1jaXJjdWl0aW5nIGBvcmAgYmV0d2VlbiB0aGUgcmVzdWx0cy4gUHJlZGljYXRlc1xuICAgICAqIHdpbGwgYmUgZXZhbHVhdGVkIHVudGlsIG9uZSBvZiB0aGVtIHJldHVybnMgYHRydWVgLCB0aGVuIHN0b3AuIFRoZSBmaW5hbFxuICAgICAqIHJlc3VsdCB3aWxsIGJlIHdoZXRoZXIgYW55IG9mIHRoZW0gcmV0dXJuZWQgYHRydWVgLlxuICAgICAqL1xuICAgIHQuRm4gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSB0LnJlc29sdmUoITEpLCByID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgbiA9IG4ubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuID8gdC5yZXNvbHZlKG4pIDogZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LCBpID0gMCwgbyA9IGU7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByKG9baV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH0sIHQuZm9yRWFjaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gW107XG4gICAgICAgIHJldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgIHIucHVzaChlLmNhbGwobiwgdCwgaSkpO1xuICAgICAgICB9KSksIHRoaXMueG4ocik7XG4gICAgfSwgdDtcbn0oKSwgdXIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTaW1wbGVEYiB3cmFwcGVyIGZvciBJbmRleGVkRGIgZGF0YWJhc2UgYG5hbWVgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGB2ZXJzaW9uYCBtdXN0IG5vdCBiZSBhIGRvd25ncmFkZS4gSW5kZXhlZERCIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgKiBkb3duZ3JhZGluZyB0aGUgc2NoZW1hIHZlcnNpb24uIFdlIGN1cnJlbnRseSBkbyBub3Qgc3VwcG9ydCBhbnkgd2F5IHRvIGRvXG4gICAgICogdmVyc2lvbmluZyBvdXRzaWRlIG9mIEluZGV4ZWREQidzIHZlcnNpb25pbmcgbWVjaGFuaXNtLCBhcyBvbmx5XG4gICAgICogdmVyc2lvbi11cGdyYWRlIHRyYW5zYWN0aW9ucyBhcmUgYWxsb3dlZCB0byBkbyB0aGluZ3MgbGlrZSBjcmVhdGVcbiAgICAgKiBvYmplY3RzdG9yZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdChlLCBuLCByKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IGUsIHRoaXMudmVyc2lvbiA9IG4sIHRoaXMuT24gPSByLCBcbiAgICAgICAgLy8gTk9URTogQWNjb3JkaW5nIHRvIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xOTcwNTAsIHRoZVxuICAgICAgICAvLyBidWcgd2UncmUgY2hlY2tpbmcgZm9yIHNob3VsZCBleGlzdCBpbiBpT1MgPj0gMTIuMiBhbmQgPCAxMywgYnV0IGZvclxuICAgICAgICAvLyB3aGF0ZXZlciByZWFzb24gaXQncyBtdWNoIGhhcmRlciB0byBoaXQgYWZ0ZXIgMTIuMiBzbyB3ZSBvbmx5IHByb2FjdGl2ZWx5XG4gICAgICAgIC8vIGxvZyBvbiAxMi4yLlxuICAgICAgICAxMi4yID09PSB0Lk1uKHMoKSkgJiYgTihcIkZpcmVzdG9yZSBwZXJzaXN0ZW5jZSBzdWZmZXJzIGZyb20gYSBidWcgaW4gaU9TIDEyLjIgU2FmYXJpIHRoYXQgbWF5IGNhdXNlIHlvdXIgYXBwIHRvIHN0b3Agd29ya2luZy4gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS81NjQ5NjI5Ni8xMTA5MTUgZm9yIGRldGFpbHMgYW5kIGEgcG90ZW50aWFsIHdvcmthcm91bmQuXCIpO1xuICAgIH1cbiAgICAvKiogRGVsZXRlcyB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlLiAqLyAgICByZXR1cm4gdC5kZWxldGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBUKFwiU2ltcGxlRGJcIiwgXCJSZW1vdmluZyBkYXRhYmFzZTpcIiwgdCksIGxyKHdpbmRvdy5pbmRleGVkREIuZGVsZXRlRGF0YWJhc2UodCkpLkNuKCk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiBJbmRleGVkREIgaXMgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiAqLyB0LmtuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBpbmRleGVkREIpIHJldHVybiAhMTtcbiAgICAgICAgaWYgKHQuJG4oKSkgcmV0dXJuICEwO1xuICAgICAgICAvLyBXZSBleHRlbnNpdmVseSB1c2UgaW5kZXhlZCBhcnJheSB2YWx1ZXMgYW5kIGNvbXBvdW5kIGtleXMsXG4gICAgICAgIC8vIHdoaWNoIElFIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0LiBIb3dldmVyLCB0aGV5IHN0aWxsIGhhdmUgaW5kZXhlZERCXG4gICAgICAgIC8vIGRlZmluZWQgb24gdGhlIHdpbmRvdywgc28gd2UgbmVlZCB0byBjaGVjayBmb3IgdGhlbSBoZXJlIGFuZCBtYWtlIHN1cmVcbiAgICAgICAgLy8gdG8gcmV0dXJuIHRoYXQgcGVyc2lzdGVuY2UgaXMgbm90IGVuYWJsZWQgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgICAgICAvLyBGb3IgdHJhY2tpbmcgc3VwcG9ydCBvZiB0aGlzIGZlYXR1cmUsIHNlZSBoZXJlOlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL3N0YXR1cy9pbmRleGVkZGJhcnJheXNhbmRtdWx0aWVudHJ5c3VwcG9ydC9cbiAgICAgICAgLy8gQ2hlY2sgdGhlIFVBIHN0cmluZyB0byBmaW5kIG91dCB0aGUgYnJvd3Nlci5cbiAgICAgICAgICAgICAgICB2YXIgZSA9IHMoKSwgbiA9IHQuTW4oZSksIHIgPSAwIDwgbiAmJiBuIDwgMTAsIGkgPSB0LkxuKGUpLCBvID0gMCA8IGkgJiYgaSA8IDQuNTtcbiAgICAgICAgLy8gSUUgMTBcbiAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgMTAuMDsgV2luZG93cyBOVCA2LjI7IFRyaWRlbnQvNi4wKSc7XG4gICAgICAgIC8vIElFIDExXG4gICAgICAgIC8vIHVhID0gJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMzsgVHJpZGVudC83LjA7IHJ2OjExLjApIGxpa2UgR2Vja28nO1xuICAgICAgICAvLyBFZGdlXG4gICAgICAgIC8vIHVhID0gJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLFxuICAgICAgICAvLyBsaWtlIEdlY2tvKSBDaHJvbWUvMzkuMC4yMTcxLjcxIFNhZmFyaS81MzcuMzYgRWRnZS8xMi4wJztcbiAgICAgICAgLy8gaU9TIFNhZmFyaTogRGlzYWJsZSBmb3IgdXNlcnMgcnVubmluZyBpT1MgdmVyc2lvbiA8IDEwLlxuICAgICAgICAgICAgICAgIHJldHVybiAhKGUuaW5kZXhPZihcIk1TSUUgXCIpID4gMCB8fCBlLmluZGV4T2YoXCJUcmlkZW50L1wiKSA+IDAgfHwgZS5pbmRleE9mKFwiRWRnZS9cIikgPiAwIHx8IHIgfHwgbyk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBiYWNraW5nIEluZGV4ZWREQiBzdG9yZSBpcyB0aGUgTm9kZSBJbmRleGVkREJTaGltXG4gICAgICogKHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW0pLlxuICAgICAqL1xuICAgIHQuJG4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQ7XG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBwcm9jZXNzICYmIFwiWUVTXCIgPT09IChudWxsID09PSAodCA9IHByb2Nlc3MuZW52KSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LkJuKTtcbiAgICB9LCBcbiAgICAvKiogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZnJvbSBhIHRyYW5zYWN0aW9uLiAqLyB0LnFuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdC5zdG9yZShlKTtcbiAgICB9LCBcbiAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgLyoqIFBhcnNlIFVzZXIgQWdlbnQgdG8gZGV0ZXJtaW5lIGlPUyB2ZXJzaW9uLiBSZXR1cm5zIC0xIGlmIG5vdCBmb3VuZC4gKi9cbiAgICB0Lk1uID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQubWF0Y2goL2koPzpwaG9uZXxwYWR8cG9kKSBvcyAoW1xcZF9dKykvaSksIG4gPSBlID8gZVsxXS5zcGxpdChcIl9cIikuc2xpY2UoMCwgMikuam9pbihcIi5cIikgOiBcIi0xXCI7XG4gICAgICAgIHJldHVybiBOdW1iZXIobik7XG4gICAgfSwgXG4gICAgLy8gdmlzaWJsZSBmb3IgdGVzdGluZ1xuICAgIC8qKiBQYXJzZSBVc2VyIEFnZW50IHRvIGRldGVybWluZSBBbmRyb2lkIHZlcnNpb24uIFJldHVybnMgLTEgaWYgbm90IGZvdW5kLiAqL1xuICAgIHQuTG4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5tYXRjaCgvQW5kcm9pZCAoW1xcZC5dKykvaSksIG4gPSBlID8gZVsxXS5zcGxpdChcIi5cIikuc2xpY2UoMCwgMikuam9pbihcIi5cIikgOiBcIi0xXCI7XG4gICAgICAgIHJldHVybiBOdW1iZXIobik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHNwZWNpZmllZCBkYXRhYmFzZSwgY3JlYXRpbmcgb3IgdXBncmFkaW5nIGl0IGlmIG5lY2Vzc2FyeS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5VbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlLCByID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRiID8gWyAzIC8qYnJlYWsqLyAsIDIgXSA6IChUKFwiU2ltcGxlRGJcIiwgXCJPcGVuaW5nIGRhdGFiYXNlOlwiLCB0aGlzLm5hbWUpLCBcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMsIFsgNCAvKnlpZWxkKi8gLCBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBJbnZlc3RpZ2F0ZSBicm93c2VyIGNvbXBhdGliaWxpdHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW5kZXhlZERCX0FQSS9Vc2luZ19JbmRleGVkREJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1Z2dlc3RzIElFOSBhbmQgb2xkZXIgV2ViS2l0IGJyb3dzZXJzIGhhbmRsZSB1cGdyYWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaWZmZXJlbnRseS4gVGhleSBleHBlY3Qgc2V0VmVyc2lvbiwgYXMgZGVzY3JpYmVkIGhlcmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSURCVmVyc2lvbkNoYW5nZVJlcXVlc3Qvc2V0VmVyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBpbmRleGVkREIub3BlbihyLm5hbWUsIHIudmVyc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLm9uc3VjY2VzcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgaS5vbmJsb2NrZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuKG5ldyBhcih0LCBcIkNhbm5vdCB1cGdyYWRlIEluZGV4ZWREQiBzY2hlbWEgd2hpbGUgYW5vdGhlciB0YWIgaXMgb3Blbi4gQ2xvc2UgYWxsIHRhYnMgdGhhdCBhY2Nlc3MgRmlyZXN0b3JlIGFuZCByZWxvYWQgdGhpcyBwYWdlIHRvIHByb2NlZWQuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGkub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGUudGFyZ2V0LmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVmVyc2lvbkVycm9yXCIgPT09IHIubmFtZSA/IG4obmV3IGooRi5GQUlMRURfUFJFQ09ORElUSU9OLCBcIkEgbmV3ZXIgdmVyc2lvbiBvZiB0aGUgRmlyZXN0b3JlIFNESyB3YXMgcHJldmlvdXNseSB1c2VkIGFuZCBzbyB0aGUgcGVyc2lzdGVkIGRhdGEgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgdmVyc2lvbiBvZiB0aGUgU0RLIHlvdSBhcmUgbm93IHVzaW5nLiBUaGUgU0RLIHdpbGwgb3BlcmF0ZSB3aXRoIHBlcnNpc3RlbmNlIGRpc2FibGVkLiBJZiB5b3UgbmVlZCBwZXJzaXN0ZW5jZSwgcGxlYXNlIHJlLXVwZ3JhZGUgdG8gYSBuZXdlciB2ZXJzaW9uIG9mIHRoZSBTREsgb3IgZWxzZSBjbGVhciB0aGUgcGVyc2lzdGVkIEluZGV4ZWREQiBkYXRhIGZvciB5b3VyIGFwcCB0byBzdGFydCBmcmVzaC5cIikpIDogbihuZXcgYXIodCwgcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgaS5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVChcIlNpbXBsZURiXCIsICdEYXRhYmFzZSBcIicgKyByLm5hbWUgKyAnXCIgcmVxdWlyZXMgdXBncmFkZSBmcm9tIHZlcnNpb246JywgdC5vbGRWZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLk9uLmNyZWF0ZU9yVXBncmFkZShlLCBpLnRyYW5zYWN0aW9uLCB0Lm9sZFZlcnNpb24sIHIudmVyc2lvbikubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFQoXCJTaW1wbGVEYlwiLCBcIkRhdGFiYXNlIHVwZ3JhZGUgdG8gdmVyc2lvbiBcIiArIHIudmVyc2lvbiArIFwiIGNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pKSBdKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBlLmRiID0gbi5zZW50KCksIG4ubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsICh0aGlzLlFuICYmICh0aGlzLmRiLm9udmVyc2lvbmNoYW5nZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLlFuKHQpO1xuICAgICAgICAgICAgICAgICAgICB9KSwgdGhpcy5kYikgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5LbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5RbiA9IHQsIHRoaXMuZGIgJiYgKHRoaXMuZGIub252ZXJzaW9uY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQoZSk7XG4gICAgICAgIH0pO1xuICAgIH0sIHQucHJvdG90eXBlLnJ1blRyYW5zYWN0aW9uID0gZnVuY3Rpb24odCwgciwgaSwgbykge1xuICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGUsIHUsIHMsIGEsIGM7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoaC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBlID0gXCJyZWFkb25seVwiID09PSByLCB1ID0gMCwgcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIsIHMsIGMsIGgsIGY7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3UsIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnRyeXMucHVzaChbIDEsIDQsICwgNSBdKSwgWyA0IC8qeWllbGQqLyAsIGEuVW4odCkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gY29tcGxldGUgKGkuZS4gSW5kZXhlZERiJ3Mgb25zdWNjZXNzIGV2ZW50IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpcmUpLCBidXQgc3RpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbkZuUmVzdWx0IGJhY2sgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuZGIgPSBuLnNlbnQoKSwgciA9IGhyLm9wZW4oYS5kYiwgdCwgZSA/IFwicmVhZG9ubHlcIiA6IFwicmVhZHdyaXRlXCIsIGkpLCBzID0gbyhyKS5jYXRjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWJvcnQgdGhlIHRyYW5zYWN0aW9uIGlmIHRoZXJlIHdhcyBhbiBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmFib3J0KHQpLCBvci5yZWplY3QodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5DbigpLCBjID0ge30sIHMuY2F0Y2goKGZ1bmN0aW9uKCkge30pKSwgWyA0IC8qeWllbGQqLyAsIHIuV24gXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCAoYy52YWx1ZSA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIHRyYW5zYWN0aW9uIHRvIGNvbXBsZXRlIChpLmUuIEluZGV4ZWREYidzIG9uc3VjY2VzcyBldmVudCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXJlKSwgYnV0IHN0aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgdHJhbnNhY3Rpb25GblJlc3VsdCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2VudCgpLCBzKSwgYykgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCA9IG4uc2VudCgpLCBmID0gXCJGaXJlYmFzZUVycm9yXCIgIT09IGgubmFtZSAmJiB1IDwgMywgVChcIlNpbXBsZURiXCIsIFwiVHJhbnNhY3Rpb24gZmFpbGVkIHdpdGggZXJyb3I6XCIsIGgubWVzc2FnZSwgXCJSZXRyeWluZzpcIiwgZiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmNsb3NlKCksIGYgPyBbIDMgLypicmVhayovICwgNSBdIDogWyAyIC8qcmV0dXJuKi8gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogUHJvbWlzZS5yZWplY3QoaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgYSA9IHRoaXMsIGgubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDUgLyp5aWVsZCoqLyAsIHMoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiAoYyA9IGguc2VudCgpKSkgcmV0dXJuIFsgMiAvKnJldHVybiovICwgYy52YWx1ZSBdO1xuICAgICAgICAgICAgICAgICAgICBoLmxhYmVsID0gMztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDEgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRiICYmIHRoaXMuZGIuY2xvc2UoKSwgdGhpcy5kYiA9IHZvaWQgMDtcbiAgICB9LCB0O1xufSgpLCBzciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuam4gPSB0LCB0aGlzLkduID0gITEsIHRoaXMuem4gPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInZuXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkduO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwiSG5cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuem47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJjdXJzb3JcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHRoaXMuam4gPSB0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gc3RvcCBpdGVyYXRpb24gYXQgYW55IHBvaW50LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5HbiA9ICEwO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB0byBza2lwIHRvIHRoYXQgbmV4dCBrZXksIHdoaWNoIGNvdWxkIGJlXG4gICAgICogYW4gaW5kZXggb3IgYSBwcmltYXJ5IGtleS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5KbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy56biA9IHQ7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRGVsZXRlIHRoZSBjdXJyZW50IGN1cnNvciB2YWx1ZSBmcm9tIHRoZSBvYmplY3Qgc3RvcmUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBZb3UgQ0FOTk9UIGRvIHRoaXMgd2l0aCBhIGtleXNPbmx5IHF1ZXJ5LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbHIodGhpcy5qbi5kZWxldGUoKSk7XG4gICAgfSwgdDtcbn0oKSwgYXIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHIgPSBlLmNhbGwodGhpcywgRi5VTkFWQUlMQUJMRSwgXCJJbmRleGVkREIgdHJhbnNhY3Rpb24gJ1wiICsgdCArIFwiJyBmYWlsZWQ6IFwiICsgbikgfHwgdGhpcykubmFtZSA9IFwiSW5kZXhlZERiVHJhbnNhY3Rpb25FcnJvclwiLCBcbiAgICAgICAgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG47XG59KGopO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGhlbHBlciBmb3IgcnVubmluZyBkZWxheWVkIHRhc2tzIGZvbGxvd2luZyBhbiBleHBvbmVudGlhbCBiYWNrb2ZmIGN1cnZlXG4gKiBiZXR3ZWVuIGF0dGVtcHRzLlxuICpcbiAqIEVhY2ggZGVsYXkgaXMgbWFkZSB1cCBvZiBhIFwiYmFzZVwiIGRlbGF5IHdoaWNoIGZvbGxvd3MgdGhlIGV4cG9uZW50aWFsXG4gKiBiYWNrb2ZmIGN1cnZlLCBhbmQgYSArLy0gNTAlIFwiaml0dGVyXCIgdGhhdCBpcyBjYWxjdWxhdGVkIGFuZCBhZGRlZCB0byB0aGVcbiAqIGJhc2UgZGVsYXkuIFRoaXMgcHJldmVudHMgY2xpZW50cyBmcm9tIGFjY2lkZW50YWxseSBzeW5jaHJvbml6aW5nIHRoZWlyXG4gKiBkZWxheXMgY2F1c2luZyBzcGlrZXMgb2YgbG9hZCB0byB0aGUgYmFja2VuZC5cbiAqL1xuLyoqIFZlcmlmaWVzIHdoZXRoZXIgYGVgIGlzIGFuIEluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IuICovIGZ1bmN0aW9uIGNyKHQpIHtcbiAgICAvLyBVc2UgbmFtZSBlcXVhbGl0eSwgYXMgaW5zdGFuY2VvZiBjaGVja3Mgb24gZXJyb3JzIGRvbid0IHdvcmsgd2l0aCBlcnJvcnNcbiAgICAvLyB0aGF0IHdyYXAgb3RoZXIgZXJyb3JzLlxuICAgIHJldHVybiBcIkluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3JcIiA9PT0gdC5uYW1lO1xufVxuXG4vKipcbiAqIFdyYXBzIGFuIElEQlRyYW5zYWN0aW9uIGFuZCBleHBvc2VzIGEgc3RvcmUoKSBtZXRob2QgdG8gZ2V0IGEgaGFuZGxlIHRvIGFcbiAqIHNwZWNpZmljIG9iamVjdCBzdG9yZS5cbiAqLyB2YXIgaHIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gdCwgdGhpcy50cmFuc2FjdGlvbiA9IGUsIHRoaXMuYWJvcnRlZCA9ICExLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIEluZGV4ZWREYiB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLlluID0gbmV3IHJyLCB0aGlzLnRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG4uWW4ucmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aGlzLnRyYW5zYWN0aW9uLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGUuZXJyb3IgPyBuLlluLnJlamVjdChuZXcgYXIodCwgZS5lcnJvcikpIDogbi5Zbi5yZXNvbHZlKCk7XG4gICAgICAgIH0sIHRoaXMudHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciByID0gZHIoZS50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgbi5Zbi5yZWplY3QobmV3IGFyKHQsIHIpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHQub3BlbiA9IGZ1bmN0aW9uKGUsIG4sIHIsIGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdChuLCBlLnRyYW5zYWN0aW9uKGksIHIpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGFyKG4sIGUpO1xuICAgICAgICB9XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIlduXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlluLnByb21pc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0ICYmIHRoaXMuWW4ucmVqZWN0KHQpLCB0aGlzLmFib3J0ZWQgfHwgKFQoXCJTaW1wbGVEYlwiLCBcIkFib3J0aW5nIHRyYW5zYWN0aW9uOlwiLCB0ID8gdC5tZXNzYWdlIDogXCJDbGllbnQtaW5pdGlhdGVkIGFib3J0XCIpLCBcbiAgICAgICAgdGhpcy5hYm9ydGVkID0gITAsIHRoaXMudHJhbnNhY3Rpb24uYWJvcnQoKSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIFNpbXBsZURiU3RvcmU8S2V5VHlwZSwgVmFsdWVUeXBlPiBmb3IgdGhlIHNwZWNpZmllZCBzdG9yZS4gQWxsXG4gICAgICogb3BlcmF0aW9ucyBwZXJmb3JtZWQgb24gdGhlIFNpbXBsZURiU3RvcmUgaGFwcGVuIHdpdGhpbiB0aGUgY29udGV4dCBvZiB0aGlzXG4gICAgICogdHJhbnNhY3Rpb24gYW5kIGl0IGNhbm5vdCBiZSB1c2VkIGFueW1vcmUgb25jZSB0aGUgdHJhbnNhY3Rpb24gaXNcbiAgICAgKiBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgd2UgY2FuJ3QgYWN0dWFsbHkgZW5mb3JjZSB0aGF0IHRoZSBLZXlUeXBlIGFuZCBWYWx1ZVR5cGUgYXJlXG4gICAgICogY29ycmVjdCwgYnV0IHRoZXkgYWxsb3cgdHlwZSBzYWZldHkgdGhyb3VnaCB0aGUgcmVzdCBvZiB0aGUgY29uc3VtaW5nIGNvZGUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuc3RvcmUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy50cmFuc2FjdGlvbi5vYmplY3RTdG9yZSh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBmcihlKTtcbiAgICB9LCB0O1xufSgpLCBmciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbjtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gZSA/IChUKFwiU2ltcGxlRGJcIiwgXCJQVVRcIiwgdGhpcy5zdG9yZS5uYW1lLCB0LCBlKSwgbiA9IHRoaXMuc3RvcmUucHV0KGUsIHQpKSA6IChUKFwiU2ltcGxlRGJcIiwgXCJQVVRcIiwgdGhpcy5zdG9yZS5uYW1lLCBcIjxhdXRvLWtleT5cIiwgdCksIFxuICAgICAgICBuID0gdGhpcy5zdG9yZS5wdXQodCkpLCBscihuKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IHZhbHVlIGludG8gYW4gT2JqZWN0IFN0b3JlIGFuZCByZXR1cm5zIHRoZSBuZXcga2V5LiBTaW1pbGFyIHRvXG4gICAgICogSW5kZXhlZERiJ3MgYGFkZCgpYCwgdGhpcyBtZXRob2Qgd2lsbCBmYWlsIG9uIHByaW1hcnkga2V5IGNvbGxpc2lvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIG9iamVjdCB0byB3cml0ZS5cbiAgICAgKiBAcmV0dXJuIFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGFkZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBUKFwiU2ltcGxlRGJcIiwgXCJBRERcIiwgdGhpcy5zdG9yZS5uYW1lLCB0LCB0KSwgbHIodGhpcy5zdG9yZS5hZGQodCkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGZyb20gdGhlIHNwZWNpZmllZCBzdG9yZSwgb3IgbnVsbFxuICAgICAqIGlmIG5vIG9iamVjdCBleGlzdHMgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICAgKlxuICAgICAqIEBrZXkgVGhlIGtleSBvZiB0aGUgb2JqZWN0IHRvIGdldC5cbiAgICAgKiBAcmV0dXJuIFRoZSBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIGtleSBvciBudWxsIGlmIG5vIG9iamVjdCBleGlzdHMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIC8vIFdlJ3JlIGRvaW5nIGFuIHVuc2FmZSBjYXN0IHRvIFZhbHVlVHlwZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICByZXR1cm4gbHIodGhpcy5zdG9yZS5nZXQodCkpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBub25leGlzdGVuY2UgdG8gbnVsbC5cbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IG4gJiYgKG4gPSBudWxsKSwgVChcIlNpbXBsZURiXCIsIFwiR0VUXCIsIGUuc3RvcmUubmFtZSwgdCwgbiksIG47XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBUKFwiU2ltcGxlRGJcIiwgXCJERUxFVEVcIiwgdGhpcy5zdG9yZS5uYW1lLCB0KSwgbHIodGhpcy5zdG9yZS5kZWxldGUodCkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIElmIHdlIGV2ZXIgbmVlZCBtb3JlIG9mIHRoZSBjb3VudCB2YXJpYW50cywgd2UgY2FuIGFkZCBvdmVybG9hZHMuIEZvciBub3csXG4gICAgICogYWxsIHdlIG5lZWQgaXMgdG8gY291bnQgZXZlcnl0aGluZyBpbiBhIHN0b3JlLlxuICAgICAqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHN0b3JlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmNvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBUKFwiU2ltcGxlRGJcIiwgXCJDT1VOVFwiLCB0aGlzLnN0b3JlLm5hbWUpLCBscih0aGlzLnN0b3JlLmNvdW50KCkpO1xuICAgIH0sIHQucHJvdG90eXBlLlhuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuY3Vyc29yKHRoaXMub3B0aW9ucyh0LCBlKSksIHIgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuWm4obiwgKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHIucHVzaChlKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS50cyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgVChcIlNpbXBsZURiXCIsIFwiREVMRVRFIEFMTFwiLCB0aGlzLnN0b3JlLm5hbWUpO1xuICAgICAgICB2YXIgbiA9IHRoaXMub3B0aW9ucyh0LCBlKTtcbiAgICAgICAgbi5lcyA9ICExO1xuICAgICAgICB2YXIgciA9IHRoaXMuY3Vyc29yKG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5abihyLCAoZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgcmV0dXJuIG4uZGVsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5ucyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG47XG4gICAgICAgIGUgPyBuID0gdCA6IChuID0ge30sIGUgPSB0KTtcbiAgICAgICAgdmFyIHIgPSB0aGlzLmN1cnNvcihuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuWm4ociwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBhIHN0b3JlLCBidXQgd2FpdHMgZm9yIHRoZSBnaXZlbiBjYWxsYmFjayB0byBjb21wbGV0ZSBmb3JcbiAgICAgKiBlYWNoIGVudHJ5IGJlZm9yZSBpdGVyYXRpbmcgdGhlIG5leHQgZW50cnkuIFRoaXMgYWxsb3dzIHRoZSBjYWxsYmFjayB0byBkb1xuICAgICAqIGFzeW5jaHJvbm91cyB3b3JrIHRvIGRldGVybWluZSBpZiB0aGlzIGl0ZXJhdGlvbiBzaG91bGQgY29udGludWUuXG4gICAgICpcbiAgICAgKiBUaGUgcHJvdmlkZWQgY2FsbGJhY2sgc2hvdWxkIHJldHVybiBgdHJ1ZWAgdG8gY29udGludWUgaXRlcmF0aW9uLCBhbmRcbiAgICAgKiBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmN1cnNvcih7fSk7XG4gICAgICAgIHJldHVybiBuZXcgb3IoKGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgICAgIGUub25lcnJvciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGRyKHQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgICAgICByKGUpO1xuICAgICAgICAgICAgfSwgZS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgciA/IHQoci5wcmltYXJ5S2V5LCByLnZhbHVlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPyByLmNvbnRpbnVlKCkgOiBuKCk7XG4gICAgICAgICAgICAgICAgfSkpIDogbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlpuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IFtdO1xuICAgICAgICByZXR1cm4gbmV3IG9yKChmdW5jdGlvbihyLCBpKSB7XG4gICAgICAgICAgICB0Lm9uZXJyb3IgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgaSh0LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICB9LCB0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyBzcihpKSwgdSA9IGUoaS5wcmltYXJ5S2V5LCBpLnZhbHVlLCBvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgaW5zdGFuY2VvZiBvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB1LmNhdGNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uZG9uZSgpLCBvci5yZWplY3QodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgby52biA/IHIoKSA6IG51bGwgPT09IG8uSG4gPyBpLmNvbnRpbnVlKCkgOiBpLmNvbnRpbnVlKG8uSG4pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSByKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gb3IueG4obik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5vcHRpb25zID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdCAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IG4gPSB0IDogZSA9IHQpLCB7XG4gICAgICAgICAgICBpbmRleDogbixcbiAgICAgICAgICAgIHJhbmdlOiBlXG4gICAgICAgIH07XG4gICAgfSwgdC5wcm90b3R5cGUuY3Vyc29yID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFwibmV4dFwiO1xuICAgICAgICBpZiAodC5yZXZlcnNlICYmIChlID0gXCJwcmV2XCIpLCB0LmluZGV4KSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuc3RvcmUuaW5kZXgodC5pbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gdC5lcyA/IG4ub3BlbktleUN1cnNvcih0LnJhbmdlLCBlKSA6IG4ub3BlbkN1cnNvcih0LnJhbmdlLCBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5vcGVuQ3Vyc29yKHQucmFuZ2UsIGUpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCBhbiBJREJPYmplY3RTdG9yZSBwcm92aWRpbmcgYW4gQVBJIHRoYXQ6XG4gKlxuICogMSkgSGFzIGdlbmVyaWMgS2V5VHlwZSAvIFZhbHVlVHlwZSBwYXJhbWV0ZXJzIHRvIHByb3ZpZGUgc3Ryb25nbHktdHlwZWRcbiAqIG1ldGhvZHMgZm9yIGFjdGluZyBhZ2FpbnN0IHRoZSBvYmplY3Qgc3RvcmUuXG4gKiAyKSBEZWFscyB3aXRoIEluZGV4ZWREQidzIG9uc3VjY2VzcyAvIG9uZXJyb3IgZXZlbnQgY2FsbGJhY2tzLCBtYWtpbmcgZXZlcnlcbiAqIG1ldGhvZCByZXR1cm4gYSBQZXJzaXN0ZW5jZVByb21pc2UgaW5zdGVhZC5cbiAqIDMpIFByb3ZpZGVzIGEgaGlnaGVyLWxldmVsIEFQSSB0byBhdm9pZCBuZWVkaW5nIHRvIGRvIGV4Y2Vzc2l2ZSB3cmFwcGluZyBvZlxuICogaW50ZXJtZWRpYXRlIEluZGV4ZWREQiB0eXBlcyAoSURCQ3Vyc29yV2l0aFZhbHVlLCBldGMuKVxuICovXG4vKipcbiAqIFdyYXBzIGFuIElEQlJlcXVlc3QgaW4gYSBQZXJzaXN0ZW5jZVByb21pc2UsIHVzaW5nIHRoZSBvbnN1Y2Nlc3MgLyBvbmVycm9yXG4gKiBoYW5kbGVycyB0byByZXNvbHZlIC8gcmVqZWN0IHRoZSBQZXJzaXN0ZW5jZVByb21pc2UgYXMgYXBwcm9wcmlhdGUuXG4gKi9cbmZ1bmN0aW9uIGxyKHQpIHtcbiAgICByZXR1cm4gbmV3IG9yKChmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHQub25zdWNjZXNzID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICBlKG4pO1xuICAgICAgICB9LCB0Lm9uZXJyb3IgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IGRyKHQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgIG4oZSk7XG4gICAgICAgIH07XG4gICAgfSkpO1xufVxuXG4vLyBHdWFyZCBzbyB3ZSBvbmx5IHJlcG9ydCB0aGUgZXJyb3Igb25jZS5cbnZhciBwciA9ICExO1xuXG5mdW5jdGlvbiBkcih0KSB7XG4gICAgdmFyIGUgPSB1ci5NbihzKCkpO1xuICAgIGlmIChlID49IDEyLjIgJiYgZSA8IDEzKSB7XG4gICAgICAgIHZhciBuID0gXCJBbiBpbnRlcm5hbCBlcnJvciB3YXMgZW5jb3VudGVyZWQgaW4gdGhlIEluZGV4ZWQgRGF0YWJhc2Ugc2VydmVyXCI7XG4gICAgICAgIGlmICh0Lm1lc3NhZ2UuaW5kZXhPZihuKSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBXcmFwIGVycm9yIGluIGEgbW9yZSBkZXNjcmlwdGl2ZSBvbmUuXG4gICAgICAgICAgICB2YXIgciA9IG5ldyBqKFwiaW50ZXJuYWxcIiwgXCJJT1NfSU5ERVhFRERCX0JVRzE6IEluZGV4ZWREYiBoYXMgdGhyb3duICdcIiArIG4gKyBcIicuIFRoaXMgaXMgbGlrZWx5IGR1ZSB0byBhbiB1bmF2b2lkYWJsZSBidWcgaW4gaU9TLiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzU2NDk2Mjk2LzExMDkxNSBmb3IgZGV0YWlscyBhbmQgYSBwb3RlbnRpYWwgd29ya2Fyb3VuZC5cIik7XG4gICAgICAgICAgICByZXR1cm4gcHIgfHwgKHByID0gITAsIFxuICAgICAgICAgICAgLy8gVGhyb3cgYSBnbG9iYWwgZXhjZXB0aW9uIG91dHNpZGUgb2YgdGhpcyBwcm9taXNlIGNoYWluLCBmb3IgdGhlIHVzZXIgdG9cbiAgICAgICAgICAgIC8vIHBvdGVudGlhbGx5IGNhdGNoLlxuICAgICAgICAgICAgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcjtcbiAgICAgICAgICAgIH0pLCAwKSksIHI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogVGhlIFBsYXRmb3JtJ3MgJ3dpbmRvdycgaW1wbGVtZW50YXRpb24gb3IgbnVsbCBpZiBub3QgYXZhaWxhYmxlLiAqLyBmdW5jdGlvbiB2cigpIHtcbiAgICAvLyBgd2luZG93YCBpcyBub3QgYWx3YXlzIGF2YWlsYWJsZSwgZS5nLiBpbiBSZWFjdE5hdGl2ZSBhbmQgV2ViV29ya2Vycy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IG51bGw7XG59XG5cbi8qKiBUaGUgUGxhdGZvcm0ncyAnZG9jdW1lbnQnIGltcGxlbWVudGF0aW9uIG9yIG51bGwgaWYgbm90IGF2YWlsYWJsZS4gKi8gZnVuY3Rpb24geXIoKSB7XG4gICAgLy8gYGRvY3VtZW50YCBpcyBub3QgYWx3YXlzIGF2YWlsYWJsZSwgZS5nLiBpbiBSZWFjdE5hdGl2ZSBhbmQgV2ViV29ya2Vycy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ID8gZG9jdW1lbnQgOiBudWxsO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIG9wZXJhdGlvbiBzY2hlZHVsZWQgdG8gYmUgcnVuIGluIHRoZSBmdXR1cmUgb24gYW4gQXN5bmNRdWV1ZS5cbiAqXG4gKiBJdCBpcyBjcmVhdGVkIHZpYSBEZWxheWVkT3BlcmF0aW9uLmNyZWF0ZUFuZFNjaGVkdWxlKCkuXG4gKlxuICogU3VwcG9ydHMgY2FuY2VsbGF0aW9uICh2aWEgY2FuY2VsKCkpIGFuZCBlYXJseSBleGVjdXRpb24gKHZpYSBza2lwRGVsYXkoKSkuXG4gKlxuICogTm90ZTogV2UgaW1wbGVtZW50IGBQcm9taXNlTGlrZWAgaW5zdGVhZCBvZiBgUHJvbWlzZWAsIGFzIHRoZSBgUHJvbWlzZWAgdHlwZVxuICogaW4gbmV3ZXIgdmVyc2lvbnMgb2YgVHlwZVNjcmlwdCBkZWZpbmVzIGBmaW5hbGx5YCwgd2hpY2ggaXMgbm90IGF2YWlsYWJsZSBpblxuICogSUUuXG4gKi8gdmFyIGdyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgICAgdGhpcy5ycyA9IHQsIHRoaXMuX24gPSBlLCB0aGlzLm9zID0gbiwgdGhpcy5vcCA9IHIsIHRoaXMuY3MgPSBpLCB0aGlzLnVzID0gbmV3IHJyLCBcbiAgICAgICAgdGhpcy50aGVuID0gdGhpcy51cy5wcm9taXNlLnRoZW4uYmluZCh0aGlzLnVzLnByb21pc2UpLCBcbiAgICAgICAgLy8gSXQncyBub3JtYWwgZm9yIHRoZSBkZWZlcnJlZCBwcm9taXNlIHRvIGJlIGNhbmNlbGVkIChkdWUgdG8gY2FuY2VsbGF0aW9uKVxuICAgICAgICAvLyBhbmQgc28gd2UgYXR0YWNoIGEgZHVtbXkgY2F0Y2ggY2FsbGJhY2sgdG8gYXZvaWRcbiAgICAgICAgLy8gJ1VuaGFuZGxlZFByb21pc2VSZWplY3Rpb25XYXJuaW5nJyBsb2cgc3BhbS5cbiAgICAgICAgdGhpcy51cy5wcm9taXNlLmNhdGNoKChmdW5jdGlvbih0KSB7fSkpXG4gICAgICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBEZWxheWVkT3BlcmF0aW9uIHRoYXQgaGFzIGJlZW4gc2NoZWR1bGVkIHRvIGJlXG4gICAgICogZXhlY3V0ZWQgb24gdGhlIHByb3ZpZGVkIGFzeW5jUXVldWUgYWZ0ZXIgdGhlIHByb3ZpZGVkIGRlbGF5TXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXN5bmNRdWV1ZSBUaGUgcXVldWUgdG8gc2NoZWR1bGUgdGhlIG9wZXJhdGlvbiBvbi5cbiAgICAgKiBAcGFyYW0gaWQgQSBUaW1lciBJRCBpZGVudGlmeWluZyB0aGUgdHlwZSBvZiBvcGVyYXRpb24gdGhpcyBpcy5cbiAgICAgKiBAcGFyYW0gZGVsYXlNcyBUaGUgZGVsYXkgKG1zKSBiZWZvcmUgdGhlIG9wZXJhdGlvbiBzaG91bGQgYmUgc2NoZWR1bGVkLlxuICAgICAqIEBwYXJhbSBvcCBUaGUgb3BlcmF0aW9uIHRvIHJ1bi5cbiAgICAgKiBAcGFyYW0gcmVtb3ZhbENhbGxiYWNrIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgb25jZSB0aGVcbiAgICAgKiAgIG9wZXJhdGlvbiBpcyBleGVjdXRlZCBvciBjYW5jZWxlZCwgbm90aWZ5aW5nIHRoZSBBc3luY1F1ZXVlIHRvIHJlbW92ZSBpdFxuICAgICAqICAgZnJvbSBpdHMgZGVsYXllZE9wZXJhdGlvbnMgbGlzdC5cbiAgICAgKiAgIFBPUlRJTkcgTk9URTogVGhpcyBleGlzdHMgdG8gcHJldmVudCBtYWtpbmcgcmVtb3ZlRGVsYXllZE9wZXJhdGlvbigpIGFuZFxuICAgICAqICAgdGhlIERlbGF5ZWRPcGVyYXRpb24gY2xhc3MgcHVibGljLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuaHMgPSBmdW5jdGlvbihlLCBuLCByLCBpLCBvKSB7XG4gICAgICAgIHZhciB1ID0gbmV3IHQoZSwgbiwgRGF0ZS5ub3coKSArIHIsIGksIG8pO1xuICAgICAgICByZXR1cm4gdS5zdGFydChyKSwgdTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIHRpbWVyLiBUaGlzIGlzIGNhbGxlZCBpbW1lZGlhdGVseSBhZnRlciBjb25zdHJ1Y3Rpb24gYnlcbiAgICAgKiBjcmVhdGVBbmRTY2hlZHVsZSgpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHRoaXMubHMgPSBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLl9zKCk7XG4gICAgICAgIH0pLCB0KTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBRdWV1ZXMgdGhlIG9wZXJhdGlvbiB0byBydW4gaW1tZWRpYXRlbHkgKGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gcnVuIG9yXG4gICAgICogY2FuY2VsZWQpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlZuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgb3BlcmF0aW9uIGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gZXhlY3V0ZWQgb3IgY2FuY2VsZWQuIFRoZVxuICAgICAqIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZC5cbiAgICAgKlxuICAgICAqIEFzIGxvbmcgYXMgdGhlIG9wZXJhdGlvbiBoYXMgbm90IHlldCBiZWVuIHJ1biwgY2FsbGluZyBjYW5jZWwoKSBwcm92aWRlcyBhXG4gICAgICogZ3VhcmFudGVlIHRoYXQgdGhlIG9wZXJhdGlvbiB3aWxsIG5vdCBiZSBydW4uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24odCkge1xuICAgICAgICBudWxsICE9PSB0aGlzLmxzICYmICh0aGlzLmNsZWFyVGltZW91dCgpLCB0aGlzLnVzLnJlamVjdChuZXcgaihGLkNBTkNFTExFRCwgXCJPcGVyYXRpb24gY2FuY2VsbGVkXCIgKyAodCA/IFwiOiBcIiArIHQgOiBcIlwiKSkpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5fcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMucnMuZnMoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgIT09IHQubHMgPyAodC5jbGVhclRpbWVvdXQoKSwgdC5vcCgpLnRoZW4oKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC51cy5yZXNvbHZlKGUpO1xuICAgICAgICAgICAgfSkpKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMubHMgJiYgKHRoaXMuY3ModGhpcyksIGNsZWFyVGltZW91dCh0aGlzLmxzKSwgdGhpcy5scyA9IG51bGwpO1xuICAgIH0sIHQ7XG59KCksIG1yID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIC8vIFRoZSBsYXN0IHByb21pc2UgaW4gdGhlIHF1ZXVlLlxuICAgICAgICAgICAgICAgIHRoaXMuZHMgPSBQcm9taXNlLnJlc29sdmUoKSwgXG4gICAgICAgIC8vIEEgbGlzdCBvZiByZXRyeWFibGUgb3BlcmF0aW9ucy4gUmV0cnlhYmxlIG9wZXJhdGlvbnMgYXJlIHJ1biBpbiBvcmRlciBhbmRcbiAgICAgICAgLy8gcmV0cmllZCB3aXRoIGJhY2tvZmYuXG4gICAgICAgIHRoaXMud3MgPSBbXSwgXG4gICAgICAgIC8vIElzIHRoaXMgQXN5bmNRdWV1ZSBiZWluZyBzaHV0IGRvd24/IE9uY2UgaXQgaXMgc2V0IHRvIHRydWUsIGl0IHdpbGwgbm90XG4gICAgICAgIC8vIGJlIGNoYW5nZWQgYWdhaW4uXG4gICAgICAgIHRoaXMuVHMgPSAhMSwgXG4gICAgICAgIC8vIE9wZXJhdGlvbnMgc2NoZWR1bGVkIHRvIGJlIHF1ZXVlZCBpbiB0aGUgZnV0dXJlLiBPcGVyYXRpb25zIGFyZVxuICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSBhcmUgcnVuIG9yIGNhbmNlbGVkLlxuICAgICAgICB0aGlzLkVzID0gW10sIFxuICAgICAgICAvLyB2aXNpYmxlIGZvciB0ZXN0aW5nXG4gICAgICAgIHRoaXMuSXMgPSBudWxsLCBcbiAgICAgICAgLy8gRmxhZyBzZXQgd2hpbGUgdGhlcmUncyBhbiBvdXRzdGFuZGluZyBBc3luY1F1ZXVlIG9wZXJhdGlvbiwgdXNlZCBmb3JcbiAgICAgICAgLy8gYXNzZXJ0aW9uIHNhbml0eS1jaGVja3MuXG4gICAgICAgIHRoaXMuQXMgPSAhMSwgXG4gICAgICAgIC8vIExpc3Qgb2YgVGltZXJJZHMgdG8gZmFzdC1mb3J3YXJkIGRlbGF5cyBmb3IuXG4gICAgICAgIHRoaXMuUnMgPSBbXSwgXG4gICAgICAgIC8vIEJhY2tvZmYgdGltZXIgdXNlZCB0byBzY2hlZHVsZSByZXRyaWVzIGZvciByZXRyeWFibGUgb3BlcmF0aW9uc1xuICAgICAgICB0aGlzLlBzID0gbmV3IGlyKHRoaXMsIFwiYXN5bmNfcXVldWVfcmV0cnlcIiAvKiBBc3luY1F1ZXVlUmV0cnkgKi8pLCBcbiAgICAgICAgLy8gVmlzaWJpbGl0eSBoYW5kbGVyIHRoYXQgdHJpZ2dlcnMgYW4gaW1tZWRpYXRlIHJldHJ5IG9mIGFsbCByZXRyeWFibGVcbiAgICAgICAgLy8gb3BlcmF0aW9ucy4gTWVhbnQgdG8gc3BlZWQgdXAgcmVjb3Zlcnkgd2hlbiB3ZSByZWdhaW4gZmlsZSBzeXN0ZW0gYWNjZXNzXG4gICAgICAgIC8vIGFmdGVyIHBhZ2UgY29tZXMgaW50byBmb3JlZ3JvdW5kLlxuICAgICAgICB0aGlzLmdzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHlyKCk7XG4gICAgICAgICAgICBlICYmIFQoXCJBc3luY1F1ZXVlXCIsIFwiVmlzaWJpbGl0eSBzdGF0ZSBjaGFuZ2VkIHRvIFwiICsgZS52aXNpYmlsaXR5U3RhdGUpLCB0LlBzLmduKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBlID0geXIoKTtcbiAgICAgICAgZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUuYWRkRXZlbnRMaXN0ZW5lciAmJiBlLmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIlZzXCIsIHtcbiAgICAgICAgLy8gSXMgdGhpcyBBc3luY1F1ZXVlIGJlaW5nIHNodXQgZG93bj8gSWYgdHJ1ZSwgdGhpcyBpbnN0YW5jZSB3aWxsIG5vdCBlbnF1ZXVlXG4gICAgICAgIC8vIGFueSBuZXcgb3BlcmF0aW9ucywgUHJvbWlzZXMgZnJvbSBlbnF1ZXVlIHJlcXVlc3RzIHdpbGwgbm90IHJlc29sdmUuXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgXG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBvcGVyYXRpb24gdG8gdGhlIHF1ZXVlIHdpdGhvdXQgd2FpdGluZyBmb3IgaXQgdG8gY29tcGxldGUgKGkuZS5cbiAgICAgKiB3ZSBpZ25vcmUgdGhlIFByb21pc2UgcmVzdWx0KS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5mcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aGlzLmVucXVldWUodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVnYXJkbGVzcyBpZiB0aGUgcXVldWUgaGFzIGluaXRpYWxpemVkIHNodXRkb3duLCBhZGRzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGVcbiAgICAgKiBxdWV1ZSB3aXRob3V0IHdhaXRpbmcgZm9yIGl0IHRvIGNvbXBsZXRlIChpLmUuIHdlIGlnbm9yZSB0aGUgUHJvbWlzZSByZXN1bHQpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnlzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnBzKCksIFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgIHRoaXMudnModCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgc2h1dGRvd24gb2YgdGhpcyBxdWV1ZS4gT25jZSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsIHRoZVxuICAgICAqIG9ubHkgcG9zc2libGUgd2F5IHRvIHJlcXVlc3QgcnVubmluZyBhbiBvcGVyYXRpb24gaXMgdGhyb3VnaFxuICAgICAqIGBlbnF1ZXVlRXZlbldoaWxlUmVzdHJpY3RlZCgpYC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5icyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuVHMpIHtcbiAgICAgICAgICAgIHRoaXMuVHMgPSAhMDtcbiAgICAgICAgICAgIHZhciB0ID0geXIoKTtcbiAgICAgICAgICAgIHQgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0LnJlbW92ZUV2ZW50TGlzdGVuZXIgJiYgdC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLmdzKTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgb3BlcmF0aW9uIHRvIHRoZSBxdWV1ZS4gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gICAgICogd2hlbiB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgbmV3IG9wZXJhdGlvbiBpcyAod2l0aCBpdHMgdmFsdWUpLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBzKCksIHRoaXMuVHMgPyBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCkge30pKSA6IHRoaXMudnModCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRW5xdWV1ZSBhIHJldHJ5YWJsZSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBBIHJldHJ5YWJsZSBvcGVyYXRpb24gaXMgcmVzY2hlZHVsZWQgd2l0aCBiYWNrb2ZmIGlmIGl0IGZhaWxzIHdpdGggYVxuICAgICAqIEluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IgKHRoZSBlcnJvciB0eXBlIHVzZWQgYnkgU2ltcGxlRGIpLiBBbGxcbiAgICAgKiByZXRyeWFibGUgb3BlcmF0aW9ucyBhcmUgZXhlY3V0ZWQgaW4gb3JkZXIgYW5kIG9ubHkgcnVuIGlmIGFsbCBwcmlvclxuICAgICAqIG9wZXJhdGlvbnMgd2VyZSByZXRyaWVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5TcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICB0aGlzLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLndzLnB1c2godCksIGUuRHMoKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIG5leHQgb3BlcmF0aW9uIGZyb20gdGhlIHJldHJ5YWJsZSBxdWV1ZS4gSWYgdGhlIG9wZXJhdGlvbiBmYWlscyxcbiAgICAgKiByZXNjaGVkdWxlcyB3aXRoIGJhY2tvZmYuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuRHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0LCBlID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGlmICgwID09PSB0aGlzLndzLmxlbmd0aCkgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCA1IF07XG4gICAgICAgICAgICAgICAgICAgIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnRyeXMucHVzaChbIDEsIDMsICwgNCBdKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMud3NbMF0oKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgdGhpcy53cy5zaGlmdCgpLCB0aGlzLlBzLnJlc2V0KCksIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcih0ID0gbi5zZW50KCkpKSB0aHJvdyB0O1xuICAgICAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIHdpbGwgYmUgaGFuZGxlZCBieSBBc3luY1F1ZXVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFQoXCJBc3luY1F1ZXVlXCIsIFwiT3BlcmF0aW9uIGZhaWxlZCB3aXRoIHJldHJ5YWJsZSBlcnJvcjogXCIgKyB0KSwgXG4gICAgICAgICAgICAgICAgICAgIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5sZW5ndGggPiAwICYmIFxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgYWRkaXRpb25hbCBvcGVyYXRpb25zLCB3ZSByZS1zY2hlZHVsZSBgcmV0cnlOZXh0T3AoKWAuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHJ1biByZXRyeWFibGUgb3BlcmF0aW9ucyB0aGF0IGZhaWxlZCBkdXJpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlaXIgaW5pdGlhbCBhdHRlbXB0IHNpbmNlIHdlIGRvbid0IGtub3cgd2hldGhlciB0aGV5IGFyZSBhbHJlYWR5XG4gICAgICAgICAgICAgICAgICAgIC8vIGVucXVldWVkLiBJZiwgZm9yIGV4YW1wbGUsIGBvcDFgLCBgb3AyYCwgYG9wM2AgYXJlIGVucXVldWVkIGFuZCBgb3AxYFxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkcyB0byAgYmUgcmUtcnVuLCB3ZSB3aWxsIHJ1biBgb3AxYCwgYG9wMWAsIGBvcDJgIHVzaW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGVucXVldWVkIGNhbGxzIHRvIGByZXRyeU5leHRPcCgpYC4gYG9wMygpYCB3aWxsIHRoZW4gcnVuIGluIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHNjaGVkdWxlZCBoZXJlLlxuICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSBgYmFja29mZkFuZFJ1bigpYCBjYW5jZWxzIGFuIGV4aXN0aW5nIGJhY2tvZmYgYW5kIHNjaGVkdWxlcyBhXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBiYWNrb2ZmIG9uIGV2ZXJ5IGNhbGwsIHRoZXJlIGlzIG9ubHkgZXZlciBhIHNpbmdsZSBhZGRpdGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9wZXJhdGlvbiBpbiB0aGUgcXVldWUuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuUHMuQW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuRHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBuLmxhYmVsID0gNTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS52cyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gdGhpcy5kcy50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLkFzID0gITAsIHQoKS5jYXRjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIC8vIFJlLXRocm93IHRoZSBlcnJvciBzbyB0aGF0IHRoaXMudGFpbCBiZWNvbWVzIGEgcmVqZWN0ZWQgUHJvbWlzZSBhbmRcbiAgICAgICAgICAgICAgICAvLyBhbGwgZnVydGhlciBhdHRlbXB0cyB0byBjaGFpbiAodmlhIC50aGVuKSB3aWxsIGp1c3Qgc2hvcnQtY2lyY3VpdFxuICAgICAgICAgICAgICAgIC8vIGFuZCByZXR1cm4gdGhlIHJlamVjdGVkIFByb21pc2UuXG4gICAgICAgICAgICAgICAgdGhyb3cgZS5JcyA9IHQsIGUuQXMgPSAhMSwgTihcIklOVEVSTkFMIFVOSEFORExFRCBFUlJPUjogXCIsIFxuICAgICAgICAgICAgICAgIC8qKlxuICogQ2hyb21lIGluY2x1ZGVzIEVycm9yLm1lc3NhZ2UgaW4gRXJyb3Iuc3RhY2suIE90aGVyIGJyb3dzZXJzIGRvIG5vdC5cbiAqIFRoaXMgcmV0dXJucyBleHBlY3RlZCBvdXRwdXQgb2YgbWVzc2FnZSArIHN0YWNrIHdoZW4gYXZhaWxhYmxlLlxuICogQHBhcmFtIGVycm9yIEVycm9yIG9yIEZpcmVzdG9yZUVycm9yXG4gKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5tZXNzYWdlIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnN0YWNrICYmIChlID0gdC5zdGFjay5pbmNsdWRlcyh0Lm1lc3NhZ2UpID8gdC5zdGFjayA6IHQubWVzc2FnZSArIFwiXFxuXCIgKyB0LnN0YWNrKSwgXG4gICAgICAgICAgICAgICAgICAgIGU7XG4gICAgICAgICAgICAgICAgfSh0KSksIHQ7XG4gICAgICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLkFzID0gITEsIHQ7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHMgPSBuLCBuO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiBvcGVyYXRpb24gdG8gYmUgcXVldWVkIG9uIHRoZSBBc3luY1F1ZXVlIG9uY2UgdGhlIHNwZWNpZmllZFxuICAgICAqIGBkZWxheU1zYCBoYXMgZWxhcHNlZC4gVGhlIHJldHVybmVkIERlbGF5ZWRPcGVyYXRpb24gY2FuIGJlIHVzZWQgdG8gY2FuY2VsXG4gICAgICogb3IgZmFzdC1mb3J3YXJkIHRoZSBvcGVyYXRpb24gcHJpb3IgdG8gaXRzIHJ1bm5pbmcuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuUG4gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgdGhpcy5wcygpLCBcbiAgICAgICAgLy8gRmFzdC1mb3J3YXJkIGRlbGF5cyBmb3IgdGltZXJJZHMgdGhhdCBoYXZlIGJlZW4gb3ZlcnJpZGVuLlxuICAgICAgICB0aGlzLlJzLmluZGV4T2YodCkgPiAtMSAmJiAoZSA9IDApO1xuICAgICAgICB2YXIgaSA9IGdyLmhzKHRoaXMsIHQsIGUsIG4sIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gci5Dcyh0KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5Fcy5wdXNoKGkpLCBpO1xuICAgIH0sIHQucHJvdG90eXBlLnBzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuSXMgJiYgUygpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoZXJlJ3MgYW4gb3BlcmF0aW9uIGN1cnJlbnRseSBpbi1wcm9ncmVzcyBvbiB0aGUgQXN5bmNRdWV1ZS5cbiAgICAgKiBVbmZvcnR1bmF0ZWx5IHdlIGNhbid0IHZlcmlmeSB0aGF0IHRoZSBydW5uaW5nIGNvZGUgaXMgaW4gdGhlIHByb21pc2UgY2hhaW5cbiAgICAgKiBvZiB0aGF0IG9wZXJhdGlvbiwgc28gdGhpcyBpc24ndCBhIGZvb2xwcm9vZiBjaGVjaywgYnV0IGl0IHNob3VsZCBiZSBlbm91Z2hcbiAgICAgKiB0byBjYXRjaCBzb21lIGJ1Z3MuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTnMgPSBmdW5jdGlvbigpIHt9LCBcbiAgICAvKipcbiAgICAgKiBXYWl0cyB1bnRpbCBhbGwgY3VycmVudGx5IHF1ZXVlZCB0YXNrcyBhcmUgZmluaXNoZWQgZXhlY3V0aW5nLiBEZWxheWVkXG4gICAgICogb3BlcmF0aW9ucyBhcmUgbm90IHJ1bi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS54cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHQgPSB0aGlzLmRzIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICE9PSB0aGlzLmRzKSByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDAgXTtcbiAgICAgICAgICAgICAgICAgICAgZS5sYWJlbCA9IDM7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBEZXRlcm1pbmUgaWYgYSBkZWxheWVkIG9wZXJhdGlvbiB3aXRoIGEgcGFydGljdWxhciBUaW1lcklkXG4gICAgICogZXhpc3RzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkZzID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gMCwgbiA9IHRoaXMuRXM7IGUgPCBuLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICBpZiAobltlXS5fbiA9PT0gdCkgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBGb3IgVGVzdHM6IFJ1bnMgc29tZSBvciBhbGwgZGVsYXllZCBvcGVyYXRpb25zIGVhcmx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGxhc3RUaW1lcklkIERlbGF5ZWQgb3BlcmF0aW9ucyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoaXMgVGltZXJJZCB3aWxsXG4gICAgICogIGJlIGRyYWluZWQuIFBhc3MgVGltZXJJZC5BbGwgdG8gcnVuIGFsbCBkZWxheWVkIG9wZXJhdGlvbnMuXG4gICAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSBhbGwgb3BlcmF0aW9ucyBoYXZlIGJlZW4gcnVuLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLk9zID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIC8vIE5vdGUgdGhhdCBkcmFpbmluZyBtYXkgZ2VuZXJhdGUgbW9yZSBkZWxheWVkIG9wcywgc28gd2UgZG8gdGhhdCBmaXJzdC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54cygpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gUnVuIG9wcyBpbiB0aGUgc2FtZSBvcmRlciB0aGV5J2QgcnVuIGlmIHRoZXkgcmFuIG5hdHVyYWxseS5cbiAgICAgICAgICAgIGUuRXMuc29ydCgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0Lm9zIC0gZS5vcztcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSAwLCByID0gZS5FczsgbiA8IHIubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHJbbl07XG4gICAgICAgICAgICAgICAgaWYgKGkuVm4oKSwgXCJhbGxcIiAvKiBBbGwgKi8gIT09IHQgJiYgaS5fbiA9PT0gdCkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZS54cygpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRm9yIFRlc3RzOiBTa2lwIGFsbCBzdWJzZXF1ZW50IGRlbGF5cyBmb3IgYSB0aW1lciBpZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5NcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5Scy5wdXNoKHQpO1xuICAgIH0sIFxuICAgIC8qKiBDYWxsZWQgb25jZSBhIERlbGF5ZWRPcGVyYXRpb24gaXMgcnVuIG9yIGNhbmNlbGVkLiAqLyB0LnByb3RvdHlwZS5DcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gTk9URTogaW5kZXhPZiAvIHNsaWNlIGFyZSBPKG4pLCBidXQgZGVsYXllZE9wZXJhdGlvbnMgaXMgZXhwZWN0ZWQgdG8gYmUgc21hbGwuXG4gICAgICAgIHZhciBlID0gdGhpcy5Fcy5pbmRleE9mKHQpO1xuICAgICAgICB0aGlzLkVzLnNwbGljZShlLCAxKTtcbiAgICB9LCB0O1xufSgpO1xuXG4vKipcbiAqIFJldHVybnMgYSBGaXJlc3RvcmVFcnJvciB0aGF0IGNhbiBiZSBzdXJmYWNlZCB0byB0aGUgdXNlciBpZiB0aGUgcHJvdmlkZWRcbiAqIGVycm9yIGlzIGFuIEluZGV4ZWREYlRyYW5zYWN0aW9uRXJyb3IuIFJlLXRocm93cyB0aGUgZXJyb3Igb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiB3cih0LCBlKSB7XG4gICAgaWYgKE4oXCJBc3luY1F1ZXVlXCIsIGUgKyBcIjogXCIgKyB0KSwgY3IodCkpIHJldHVybiBuZXcgaihGLlVOQVZBSUxBQkxFLCBlICsgXCI6IFwiICsgdCk7XG4gICAgdGhyb3cgdDtcbn1cblxudmFyIGJyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5rcyA9IHZvaWQgMCwgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbn0sIF9yID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5xdWVyaWVzID0gbmV3IHEoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIE1uKHQpO1xuICAgIH0pLCBSbiksIHRoaXMub25saW5lU3RhdGUgPSBcIlVua25vd25cIiAvKiBVbmtub3duICovICwgdGhpcy4kcyA9IG5ldyBTZXQ7XG59O1xuXG5mdW5jdGlvbiBJcih0LCByKSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUsIGksIG8sIHUsIHMsIGEsIGM7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmIChlID0gRCh0KSwgaSA9IHIucXVlcnksIG8gPSAhMSwgKHUgPSBlLnF1ZXJpZXMuZ2V0KGkpKSB8fCAobyA9ICEwLCB1ID0gbmV3IGJyKSwgXG4gICAgICAgICAgICAgICAgIW8pIHJldHVybiBbIDMgLypicmVhayovICwgNCBdO1xuICAgICAgICAgICAgICAgIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbi50cnlzLnB1c2goWyAxLCAzLCAsIDQgXSksIHMgPSB1LCBbIDQgLyp5aWVsZCovICwgZS5McyhpKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5rcyA9IG4uc2VudCgpLCBbIDMgLypicmVhayovICwgNCBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYSA9IG4uc2VudCgpLCBjID0gd3IoYSwgXCJJbml0aWFsaXphdGlvbiBvZiBxdWVyeSAnXCIgKyBVbihyLnF1ZXJ5KSArIFwiJyBmYWlsZWRcIiksIFxuICAgICAgICAgICAgICAgIFsgMiAvKnJldHVybiovICwgdm9pZCByLm9uRXJyb3IoYykgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucXVlcmllcy5zZXQoaSwgdSksIHUubGlzdGVuZXJzLnB1c2gociksIFxuICAgICAgICAgICAgICAgIC8vIFJ1biBnbG9iYWwgc25hcHNob3QgbGlzdGVuZXJzIGlmIGEgY29uc2lzdGVudCBzbmFwc2hvdCBoYXMgYmVlbiBlbWl0dGVkLlxuICAgICAgICAgICAgICAgIHIuQnMoZS5vbmxpbmVTdGF0ZSksIHUua3MgJiYgci5xcyh1LmtzKSAmJiB4cihlKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gRXIodCwgcikge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCBpLCBvLCB1LCBzO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgcmV0dXJuIGUgPSBEKHQpLCBpID0gci5xdWVyeSwgbyA9ICExLCAodSA9IGUucXVlcmllcy5nZXQoaSkpICYmIChzID0gdS5saXN0ZW5lcnMuaW5kZXhPZihyKSkgPj0gMCAmJiAodS5saXN0ZW5lcnMuc3BsaWNlKHMsIDEpLCBcbiAgICAgICAgICAgIG8gPSAwID09PSB1Lmxpc3RlbmVycy5sZW5ndGgpLCBvID8gWyAyIC8qcmV0dXJuKi8gLCAoZS5xdWVyaWVzLmRlbGV0ZShpKSwgZS5VcyhpKSkgXSA6IFsgMiAvKnJldHVybiovIF07XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIFRyKHQsIGUpIHtcbiAgICBmb3IgKHZhciBuID0gRCh0KSwgciA9ICExLCBpID0gMCwgbyA9IGU7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB1ID0gb1tpXSwgcyA9IHUucXVlcnksIGEgPSBuLnF1ZXJpZXMuZ2V0KHMpO1xuICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIGggPSBhLmxpc3RlbmVyczsgYyA8IGgubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgICBoW2NdLnFzKHUpICYmIChyID0gITApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYS5rcyA9IHU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgciAmJiB4cihuKTtcbn1cblxuZnVuY3Rpb24gTnIodCwgZSwgbikge1xuICAgIHZhciByID0gRCh0KSwgaSA9IHIucXVlcmllcy5nZXQoZSk7XG4gICAgaWYgKGkpIGZvciAodmFyIG8gPSAwLCB1ID0gaS5saXN0ZW5lcnM7IG8gPCB1Lmxlbmd0aDsgbysrKSB7XG4gICAgICAgIHVbb10ub25FcnJvcihuKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMuIE5PVEU6IFdlIGRvbid0IG5lZWQgdG8gY2FsbCBzeW5jRW5naW5lLnVubGlzdGVuKClcbiAgICAvLyBhZnRlciBhbiBlcnJvci5cbiAgICAgICAgci5xdWVyaWVzLmRlbGV0ZShlKTtcbn1cblxuLy8gQ2FsbCBhbGwgZ2xvYmFsIHNuYXBzaG90IGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiBzZXQuXG5mdW5jdGlvbiB4cih0KSB7XG4gICAgdC4kcy5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHQubmV4dCgpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBRdWVyeUxpc3RlbmVyIHRha2VzIGEgc2VyaWVzIG9mIGludGVybmFsIHZpZXcgc25hcHNob3RzIGFuZCBkZXRlcm1pbmVzXG4gKiB3aGVuIHRvIHJhaXNlIHRoZSBldmVudC5cbiAqXG4gKiBJdCB1c2VzIGFuIE9ic2VydmVyIHRvIGRpc3BhdGNoIGV2ZW50cy5cbiAqLyB2YXIgQXIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbikge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gdCwgdGhpcy5RcyA9IGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluaXRpYWwgc25hcHNob3RzIChlLmcuIGZyb20gY2FjaGUpIG1heSBub3QgYmUgcHJvcGFnYXRlZCB0byB0aGUgd3JhcHBlZFxuICAgICAgICAgICAgICogb2JzZXJ2ZXIuIFRoaXMgZmxhZyBpcyBzZXQgdG8gdHJ1ZSBvbmNlIHdlJ3ZlIGFjdHVhbGx5IHJhaXNlZCBhbiBldmVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLktzID0gITEsIHRoaXMuV3MgPSBudWxsLCB0aGlzLm9ubGluZVN0YXRlID0gXCJVbmtub3duXCIgLyogVW5rbm93biAqLyAsIHRoaXMub3B0aW9ucyA9IG4gfHwge31cbiAgICAgICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgbmV3IFZpZXdTbmFwc2hvdCB0byB0aGlzIGxpc3RlbmVyLCByYWlzaW5nIGEgdXNlci1mYWNpbmcgZXZlbnRcbiAgICAgKiBpZiBhcHBsaWNhYmxlIChkZXBlbmRpbmcgb24gd2hhdCBjaGFuZ2VkLCB3aGV0aGVyIHRoZSB1c2VyIGhhcyBvcHRlZCBpbnRvXG4gICAgICogbWV0YWRhdGEtb25seSBjaGFuZ2VzLCBldGMuKS4gUmV0dXJucyB0cnVlIGlmIGEgdXNlci1mYWNpbmcgZXZlbnQgd2FzXG4gICAgICogaW5kZWVkIHJhaXNlZC5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5xcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcykge1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgbWV0YWRhdGEgb25seSBjaGFuZ2VzLlxuICAgICAgICAgICAgdmFyIGUgPSBbXSwgbiA9IDAsIHIgPSB0LmRvY0NoYW5nZXM7IG4gPCByLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSByW25dO1xuICAgICAgICAgICAgICAgIDMgLyogTWV0YWRhdGEgKi8gIT09IGkudHlwZSAmJiBlLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gbmV3IEF0KHQucXVlcnksIHQuZG9jcywgdC5VdCwgZSwgdC5RdCwgdC5mcm9tQ2FjaGUsIHQuS3QsIFxuICAgICAgICAgICAgLyogZXhjbHVkZXNNZXRhZGF0YUNoYW5nZXM9ICovICEwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbyA9ICExO1xuICAgICAgICByZXR1cm4gdGhpcy5LcyA/IHRoaXMuanModCkgJiYgKHRoaXMuUXMubmV4dCh0KSwgbyA9ICEwKSA6IHRoaXMuR3ModCwgdGhpcy5vbmxpbmVTdGF0ZSkgJiYgKHRoaXMuenModCksIFxuICAgICAgICBvID0gITApLCB0aGlzLldzID0gdCwgbztcbiAgICB9LCB0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlFzLmVycm9yKHQpO1xuICAgIH0sIFxuICAgIC8qKiBSZXR1cm5zIHdoZXRoZXIgYSBzbmFwc2hvdCB3YXMgcmFpc2VkLiAqLyB0LnByb3RvdHlwZS5CcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5vbmxpbmVTdGF0ZSA9IHQ7XG4gICAgICAgIHZhciBlID0gITE7XG4gICAgICAgIHJldHVybiB0aGlzLldzICYmICF0aGlzLktzICYmIHRoaXMuR3ModGhpcy5XcywgdCkgJiYgKHRoaXMuenModGhpcy5XcyksIGUgPSAhMCksIFxuICAgICAgICBlO1xuICAgIH0sIHQucHJvdG90eXBlLkdzID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBBbHdheXMgcmFpc2UgdGhlIGZpcnN0IGV2ZW50IHdoZW4gd2UncmUgc3luY2VkXG4gICAgICAgIGlmICghdC5mcm9tQ2FjaGUpIHJldHVybiAhMDtcbiAgICAgICAgLy8gTk9URTogV2UgY29uc2lkZXIgT25saW5lU3RhdGUuVW5rbm93biBhcyBvbmxpbmUgKGl0IHNob3VsZCBiZWNvbWUgT2ZmbGluZVxuICAgICAgICAvLyBvciBPbmxpbmUgaWYgd2Ugd2FpdCBsb25nIGVub3VnaCkuXG4gICAgICAgICAgICAgICAgdmFyIG4gPSBcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovICE9PSBlO1xuICAgICAgICAvLyBEb24ndCByYWlzZSB0aGUgZXZlbnQgaWYgd2UncmUgb25saW5lLCBhcmVuJ3Qgc3luY2VkIHlldCAoY2hlY2tlZFxuICAgICAgICAvLyBhYm92ZSkgYW5kIGFyZSB3YWl0aW5nIGZvciBhIHN5bmMuXG4gICAgICAgICAgICAgICAgcmV0dXJuICEodGhpcy5vcHRpb25zLkhzICYmIG4gfHwgdC5kb2NzLlQoKSAmJiBcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovICE9PSBlKTtcbiAgICAgICAgLy8gUmFpc2UgZGF0YSBmcm9tIGNhY2hlIGlmIHdlIGhhdmUgYW55IGRvY3VtZW50cyBvciB3ZSBhcmUgb2ZmbGluZVxuICAgICAgICB9LCB0LnByb3RvdHlwZS5qcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBoYW5kbGUgaW5jbHVkZURvY3VtZW50TWV0YWRhdGFDaGFuZ2VzIGhlcmUgYmVjYXVzZVxuICAgICAgICAvLyB0aGUgTWV0YWRhdGEgb25seSBjaGFuZ2VzIGhhdmUgYWxyZWFkeSBiZWVuIHN0cmlwcGVkIG91dCBpZiBuZWVkZWQuXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIG9ubHkgY2hhbmdlcyB3ZSB3aWxsIHNlZSBhcmUgdGhlIG9uZXMgd2Ugc2hvdWxkXG4gICAgICAgIC8vIHByb3BhZ2F0ZS5cbiAgICAgICAgaWYgKHQuZG9jQ2hhbmdlcy5sZW5ndGggPiAwKSByZXR1cm4gITA7XG4gICAgICAgIHZhciBlID0gdGhpcy5XcyAmJiB0aGlzLldzLmhhc1BlbmRpbmdXcml0ZXMgIT09IHQuaGFzUGVuZGluZ1dyaXRlcztcbiAgICAgICAgcmV0dXJuICEoIXQuS3QgJiYgIWUpICYmICEwID09PSB0aGlzLm9wdGlvbnMuaW5jbHVkZU1ldGFkYXRhQ2hhbmdlcztcbiAgICAgICAgLy8gR2VuZXJhbGx5IHdlIHNob3VsZCBoYXZlIGhpdCBvbmUgb2YgdGhlIGNhc2VzIGFib3ZlLCBidXQgaXQncyBwb3NzaWJsZVxuICAgICAgICAvLyB0byBnZXQgaGVyZSBpZiB0aGVyZSB3ZXJlIG9ubHkgbWV0YWRhdGEgZG9jQ2hhbmdlcyBhbmQgdGhleSBnb3RcbiAgICAgICAgLy8gc3RyaXBwZWQgb3V0LlxuICAgICAgICB9LCB0LnByb3RvdHlwZS56cyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdCA9IEF0Lmp0KHQucXVlcnksIHQuZG9jcywgdC5RdCwgdC5mcm9tQ2FjaGUpLCB0aGlzLktzID0gITAsIHRoaXMuUXMubmV4dCh0KTtcbiAgICB9LCB0O1xufSgpLCBTciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMudWlkID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkpzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9IHRoaXMudWlkO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBrZXkgcmVwcmVzZW50aW5nIHRoaXMgdXNlciwgc3VpdGFibGUgZm9yIGluY2x1c2lvbiBpbiBhXG4gICAgICogZGljdGlvbmFyeS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5ZcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5KcygpID8gXCJ1aWQ6XCIgKyB0aGlzLnVpZCA6IFwiYW5vbnltb3VzLXVzZXJcIjtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC51aWQgPT09IHRoaXMudWlkO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFNpbXBsZSB3cmFwcGVyIGFyb3VuZCBhIG51bGxhYmxlIFVJRC4gTW9zdGx5IGV4aXN0cyB0byBtYWtlIGNvZGUgbW9yZVxuICogcmVhZGFibGUuXG4gKi9cbi8qKiBBIHVzZXIgd2l0aCBhIG51bGwgVUlELiAqLyBTci5VTkFVVEhFTlRJQ0FURUQgPSBuZXcgU3IobnVsbCksIFxuLy8gVE9ETyhtaWtlbGVoZW4pOiBMb29rIGludG8gZ2V0dGluZyBhIHByb3BlciB1aWQtZXF1aXZhbGVudCBmb3Jcbi8vIG5vbi1GaXJlYmFzZUF1dGggcHJvdmlkZXJzLlxuU3IuWHMgPSBuZXcgU3IoXCJnb29nbGUtY3JlZGVudGlhbHMtdWlkXCIpLCBTci5acyA9IG5ldyBTcihcImZpcnN0LXBhcnR5LXVpZFwiKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBrciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICB0aGlzLnVzZXIgPSBlLCB0aGlzLnR5cGUgPSBcIk9BdXRoXCIsIHRoaXMudGkgPSB7fSwgXG4gICAgLy8gU2V0IHRoZSBoZWFkZXJzIHVzaW5nIE9iamVjdCBMaXRlcmFsIG5vdGF0aW9uIHRvIGF2b2lkIG1pbmlmaWNhdGlvblxuICAgIHRoaXMudGkuQXV0aG9yaXphdGlvbiA9IFwiQmVhcmVyIFwiICsgdDtcbn0sIERyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIHRoZSBsaXN0ZW5lciByZWdpc3RlcmVkIHdpdGggc2V0Q2hhbmdlTGlzdGVuZXIoKVxuICAgICAgICAgKiBUaGlzIGlzbid0IGFjdHVhbGx5IG5lY2Vzc2FyeSBzaW5jZSB0aGUgVUlEIG5ldmVyIGNoYW5nZXMsIGJ1dCB3ZSB1c2UgdGhpc1xuICAgICAgICAgKiB0byB2ZXJpZnkgdGhlIGxpc3RlbiBjb250cmFjdCBpcyBhZGhlcmVkIHRvIGluIHRlc3RzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5laSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5nZXRUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH0sIHQucHJvdG90eXBlLm5pID0gZnVuY3Rpb24oKSB7fSwgdC5wcm90b3R5cGUuc2kgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuZWkgPSB0LCBcbiAgICAgICAgLy8gRmlyZSB3aXRoIGluaXRpYWwgdXNlci5cbiAgICAgICAgdChTci5VTkFVVEhFTlRJQ0FURUQpO1xuICAgIH0sIHQucHJvdG90eXBlLmlpID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWkgPSBudWxsO1xuICAgIH0sIHQ7XG59KCksIE9yID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGF1dGggdG9rZW4gbGlzdGVuZXIgcmVnaXN0ZXJlZCB3aXRoIEZpcmViYXNlQXBwLCByZXRhaW5lZCBoZXJlIHNvIHdlXG4gICAgICAgICAqIGNhbiB1bnJlZ2lzdGVyIGl0LlxuICAgICAgICAgKi8gICAgICAgIHRoaXMucmkgPSBudWxsLCBcbiAgICAgICAgLyoqIFRyYWNrcyB0aGUgY3VycmVudCBVc2VyLiAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRVc2VyID0gU3IuVU5BVVRIRU5USUNBVEVELCB0aGlzLm9pID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvdW50ZXIgdXNlZCB0byBkZXRlY3QgaWYgdGhlIHRva2VuIGNoYW5nZWQgd2hpbGUgYSBnZXRUb2tlbiByZXF1ZXN0IHdhc1xuICAgICAgICAgICAgICogb3V0c3RhbmRpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5haSA9IDAsIFxuICAgICAgICAvKiogVGhlIGxpc3RlbmVyIHJlZ2lzdGVyZWQgd2l0aCBzZXRDaGFuZ2VMaXN0ZW5lcigpLiAqL1xuICAgICAgICB0aGlzLmVpID0gbnVsbCwgdGhpcy5mb3JjZVJlZnJlc2ggPSAhMSwgdGhpcy5yaSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZS5haSsrLCBlLmN1cnJlbnRVc2VyID0gZS5jaSgpLCBlLm9pID0gITAsIGUuZWkgJiYgZS5laShlLmN1cnJlbnRVc2VyKTtcbiAgICAgICAgfSwgdGhpcy5haSA9IDAsIHRoaXMuYXV0aCA9IHQuZ2V0SW1tZWRpYXRlKHtcbiAgICAgICAgICAgIG9wdGlvbmFsOiAhMFxuICAgICAgICB9KSwgdGhpcy5hdXRoID8gdGhpcy5hdXRoLmFkZEF1dGhUb2tlbkxpc3RlbmVyKHRoaXMucmkpIDogKFxuICAgICAgICAvLyBpZiBhdXRoIGlzIG5vdCBhdmFpbGFibGUsIGludm9rZSB0b2tlbkxpc3RlbmVyIG9uY2Ugd2l0aCBudWxsIHRva2VuXG4gICAgICAgIHRoaXMucmkobnVsbCksIHQuZ2V0KCkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZS5hdXRoID0gdCwgZS5yaSAmJiBcbiAgICAgICAgICAgIC8vIHRva2VuTGlzdGVuZXIgY2FuIGJlIHJlbW92ZWQgYnkgcmVtb3ZlQ2hhbmdlTGlzdGVuZXIoKVxuICAgICAgICAgICAgZS5hdXRoLmFkZEF1dGhUb2tlbkxpc3RlbmVyKGUucmkpO1xuICAgICAgICB9KSwgKGZ1bmN0aW9uKCkge30pKSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5nZXRUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMsIGUgPSB0aGlzLmFpLCBuID0gdGhpcy5mb3JjZVJlZnJlc2g7XG4gICAgICAgIC8vIFRha2Ugbm90ZSBvZiB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgdG9rZW5Db3VudGVyIHNvIHRoYXQgdGhpcyBtZXRob2RcbiAgICAgICAgLy8gY2FuIGZhaWwgKHdpdGggYW4gQUJPUlRFRCBlcnJvcikgaWYgdGhlcmUgaXMgYSB0b2tlbiBjaGFuZ2Ugd2hpbGUgdGhlXG4gICAgICAgIC8vIHJlcXVlc3QgaXMgb3V0c3RhbmRpbmcuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9yY2VSZWZyZXNoID0gITEsIHRoaXMuYXV0aCA/IHRoaXMuYXV0aC5nZXRUb2tlbihuKS50aGVuKChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAvLyBDYW5jZWwgdGhlIHJlcXVlc3Qgc2luY2UgdGhlIHRva2VuIGNoYW5nZWQgd2hpbGUgdGhlIHJlcXVlc3Qgd2FzXG4gICAgICAgICAgICAvLyBvdXRzdGFuZGluZyBzbyB0aGUgcmVzcG9uc2UgaXMgcG90ZW50aWFsbHkgZm9yIGEgcHJldmlvdXMgdXNlciAod2hpY2hcbiAgICAgICAgICAgIC8vIHVzZXIsIHdlIGNhbid0IGJlIHN1cmUpLlxuICAgICAgICAgICAgcmV0dXJuIHQuYWkgIT09IGUgPyAoVChcIkZpcmViYXNlQ3JlZGVudGlhbHNQcm92aWRlclwiLCBcImdldFRva2VuIGFib3J0ZWQgZHVlIHRvIHRva2VuIGNoYW5nZS5cIiksIFxuICAgICAgICAgICAgdC5nZXRUb2tlbigpKSA6IG4gPyAoayhcInN0cmluZ1wiID09IHR5cGVvZiBuLmFjY2Vzc1Rva2VuKSwgbmV3IGtyKG4uYWNjZXNzVG9rZW4sIHQuY3VycmVudFVzZXIpKSA6IG51bGw7XG4gICAgICAgIH0pKSA6IFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5uaSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmZvcmNlUmVmcmVzaCA9ICEwO1xuICAgIH0sIHQucHJvdG90eXBlLnNpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmVpID0gdCwgXG4gICAgICAgIC8vIEZpcmUgdGhlIGluaXRpYWwgZXZlbnRcbiAgICAgICAgdGhpcy5vaSAmJiB0KHRoaXMuY3VycmVudFVzZXIpO1xuICAgIH0sIHQucHJvdG90eXBlLmlpID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYXV0aCAmJiB0aGlzLmF1dGgucmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIodGhpcy5yaSksIHRoaXMucmkgPSBudWxsLCB0aGlzLmVpID0gbnVsbDtcbiAgICB9LCBcbiAgICAvLyBBdXRoLmdldFVpZCgpIGNhbiByZXR1cm4gbnVsbCBldmVuIHdpdGggYSB1c2VyIGxvZ2dlZCBpbi4gSXQgaXMgYmVjYXVzZVxuICAgIC8vIGdldFVpZCgpIGlzIHN5bmNocm9ub3VzLCBidXQgdGhlIGF1dGggY29kZSBwb3B1bGF0aW5nIFVpZCBpcyBhc3luY2hyb25vdXMuXG4gICAgLy8gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGluIHRoZSBBdXRoVG9rZW5MaXN0ZW5lciBjYWxsYmFja1xuICAgIC8vIHRvIGd1YXJhbnRlZSB0byBnZXQgdGhlIGFjdHVhbCB1c2VyLlxuICAgIHQucHJvdG90eXBlLmNpID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5hdXRoICYmIHRoaXMuYXV0aC5nZXRVaWQoKTtcbiAgICAgICAgcmV0dXJuIGsobnVsbCA9PT0gdCB8fCBcInN0cmluZ1wiID09IHR5cGVvZiB0KSwgbmV3IFNyKHQpO1xuICAgIH0sIHQ7XG59KCksIFByID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy51aSA9IHQsIHRoaXMuaGkgPSBlLCB0aGlzLnR5cGUgPSBcIkZpcnN0UGFydHlcIiwgdGhpcy51c2VyID0gU3IuWnM7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwidGlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB7XG4gICAgICAgICAgICAgICAgXCJYLUdvb2ctQXV0aFVzZXJcIjogdGhpcy5oaVxuICAgICAgICAgICAgfSwgZSA9IHRoaXMudWkuYXV0aC5nZXRBdXRoSGVhZGVyVmFsdWVGb3JGaXJzdFBhcnR5KFtdKTtcbiAgICAgICAgICAgIC8vIFVzZSBhcnJheSBub3RhdGlvbiB0byBwcmV2ZW50IG1pbmlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgJiYgKHQuQXV0aG9yaXphdGlvbiA9IGUpLCB0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0O1xufSgpLCBWciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMudWkgPSB0LCB0aGlzLmhpID0gZTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmdldFRva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IFByKHRoaXMudWksIHRoaXMuaGkpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gRmlyZSB3aXRoIGluaXRpYWwgdWlkLlxuICAgICAgICB0KFNyLlpzKTtcbiAgICB9LCB0LnByb3RvdHlwZS5paSA9IGZ1bmN0aW9uKCkge30sIHQucHJvdG90eXBlLm5pID0gZnVuY3Rpb24oKSB7fSwgdDtcbn0oKSwgQ3IgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBiYXRjaElkIFRoZSB1bmlxdWUgSUQgb2YgdGhpcyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgKiBAcGFyYW0gbG9jYWxXcml0ZVRpbWUgVGhlIG9yaWdpbmFsIHdyaXRlIHRpbWUgb2YgdGhpcyBtdXRhdGlvbi5cbiAgICAgKiBAcGFyYW0gYmFzZU11dGF0aW9ucyBNdXRhdGlvbnMgdGhhdCBhcmUgdXNlZCB0byBwb3B1bGF0ZSB0aGUgYmFzZVxuICAgICAqIHZhbHVlcyB3aGVuIHRoaXMgbXV0YXRpb24gaXMgYXBwbGllZCBsb2NhbGx5LiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvY2FsbHlcbiAgICAgKiBvdmVyd3JpdGUgdmFsdWVzIHRoYXQgYXJlIHBlcnNpc3RlZCBpbiB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLiBCYXNlXG4gICAgICogbXV0YXRpb25zIGFyZSBuZXZlciBzZW50IHRvIHRoZSBiYWNrZW5kLlxuICAgICAqIEBwYXJhbSBtdXRhdGlvbnMgVGhlIHVzZXItcHJvdmlkZWQgbXV0YXRpb25zIGluIHRoaXMgbXV0YXRpb24gYmF0Y2guXG4gICAgICogVXNlci1wcm92aWRlZCBtdXRhdGlvbnMgYXJlIGFwcGxpZWQgYm90aCBsb2NhbGx5IGFuZCByZW1vdGVseSBvbiB0aGVcbiAgICAgKiBiYWNrZW5kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgcikge1xuICAgICAgICB0aGlzLmJhdGNoSWQgPSB0LCB0aGlzLmxpID0gZSwgdGhpcy5iYXNlTXV0YXRpb25zID0gbiwgdGhpcy5tdXRhdGlvbnMgPSByXG4gICAgICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYWxsIHRoZSBtdXRhdGlvbnMgaW4gdGhpcyBNdXRhdGlvbkJhdGNoIHRvIHRoZSBzcGVjaWZpZWQgZG9jdW1lbnRcbiAgICAgKiB0byBjcmVhdGUgYSBuZXcgcmVtb3RlIGRvY3VtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jS2V5IFRoZSBrZXkgb2YgdGhlIGRvY3VtZW50IHRvIGFwcGx5IG11dGF0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0gbWF5YmVEb2MgVGhlIGRvY3VtZW50IHRvIGFwcGx5IG11dGF0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0gYmF0Y2hSZXN1bHQgVGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgTXV0YXRpb25CYXRjaCB0byB0aGVcbiAgICAgKiBiYWNrZW5kLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLl9pID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBmb3IgKHZhciByID0gbi5maSwgaSA9IDA7IGkgPCB0aGlzLm11dGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG8gPSB0aGlzLm11dGF0aW9uc1tpXTtcbiAgICAgICAgICAgIG8ua2V5LmlzRXF1YWwodCkgJiYgKGUgPSBubihvLCBlLCByW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGxvY2FsIHZpZXcgb2YgYSBkb2N1bWVudCBnaXZlbiBhbGwgdGhlIG11dGF0aW9ucyBpbiB0aGlzXG4gICAgICogYmF0Y2guXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jS2V5IFRoZSBrZXkgb2YgdGhlIGRvY3VtZW50IHRvIGFwcGx5IG11dGF0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0gbWF5YmVEb2MgVGhlIGRvY3VtZW50IHRvIGFwcGx5IG11dGF0aW9ucyB0by5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5kaSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gRmlyc3QsIGFwcGx5IHRoZSBiYXNlIHN0YXRlLiBUaGlzIGFsbG93cyB1cyB0byBhcHBseSBub24taWRlbXBvdGVudFxuICAgICAgICAvLyB0cmFuc2Zvcm0gYWdhaW5zdCBhIGNvbnNpc3RlbnQgc2V0IG9mIHZhbHVlcy5cbiAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSB0aGlzLmJhc2VNdXRhdGlvbnM7IG4gPCByLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHJbbl07XG4gICAgICAgICAgICBpLmtleS5pc0VxdWFsKHQpICYmIChlID0gcm4oaSwgZSwgZSwgdGhpcy5saSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlY29uZCwgYXBwbHkgYWxsIHVzZXItcHJvdmlkZWQgbXV0YXRpb25zLlxuICAgICAgICBmb3IgKHZhciBvID0gZSwgdSA9IDAsIHMgPSB0aGlzLm11dGF0aW9uczsgdSA8IHMubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICAgIHZhciBhID0gc1t1XTtcbiAgICAgICAgICAgIGEua2V5LmlzRXF1YWwodCkgJiYgKGUgPSBybihhLCBlLCBvLCB0aGlzLmxpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGxvY2FsIHZpZXcgZm9yIGFsbCBwcm92aWRlZCBkb2N1bWVudHMgZ2l2ZW4gdGhlIG11dGF0aW9ucyBpblxuICAgICAqIHRoaXMgYmF0Y2guXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUud2kgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHQ7XG4gICAgICAgIC8vIFRPRE8obXJzY2htaWR0KTogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBPKG5eMikuIElmIHdlIGFwcGx5IHRoZSBtdXRhdGlvbnNcbiAgICAgICAgLy8gZGlyZWN0bHkgKGFzIGRvbmUgaW4gYGFwcGx5VG9Mb2NhbFZpZXcoKWApLCB3ZSBjYW4gcmVkdWNlIHRoZSBjb21wbGV4aXR5XG4gICAgICAgIC8vIHRvIE8obikuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLmZvckVhY2goKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgIHZhciBpID0gZS5kaShyLmtleSwgdC5nZXQoci5rZXkpKTtcbiAgICAgICAgICAgIGkgJiYgKG4gPSBuLnJ0KHIua2V5LCBpKSk7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9LCB0LnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5yZWR1Y2UoKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmFkZChlLmtleSk7XG4gICAgICAgIH0pLCBJdCgpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXRjaElkID09PSB0LmJhdGNoSWQgJiYgQyh0aGlzLm11dGF0aW9ucywgdC5tdXRhdGlvbnMsIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW4odCwgZSk7XG4gICAgICAgIH0pKSAmJiBDKHRoaXMuYmFzZU11dGF0aW9ucywgdC5iYXNlTXV0YXRpb25zLCAoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuKHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdDtcbn0oKSwgTHIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgXG4gICAgLyoqXG4gICAgICogQSBwcmUtY29tcHV0ZWQgbWFwcGluZyBmcm9tIGVhY2ggbXV0YXRlZCBkb2N1bWVudCB0byB0aGUgcmVzdWx0aW5nXG4gICAgICogdmVyc2lvbi5cbiAgICAgKi9cbiAgICByKSB7XG4gICAgICAgIHRoaXMuYmF0Y2ggPSB0LCB0aGlzLlRpID0gZSwgdGhpcy5maSA9IG4sIHRoaXMuRWkgPSByXG4gICAgICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgTXV0YXRpb25CYXRjaFJlc3VsdCBmb3IgdGhlIGdpdmVuIGJhdGNoIGFuZCByZXN1bHRzLiBUaGVyZVxuICAgICAqIG11c3QgYmUgb25lIHJlc3VsdCBmb3IgZWFjaCBtdXRhdGlvbiBpbiB0aGUgYmF0Y2guIFRoaXMgc3RhdGljIGZhY3RvcnlcbiAgICAgKiBjYWNoZXMgYSBkb2N1bWVudD0+dmVyc2lvbiBtYXBwaW5nIChkb2NWZXJzaW9ucykuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5mcm9tID0gZnVuY3Rpb24oZSwgbiwgcikge1xuICAgICAgICBrKGUubXV0YXRpb25zLmxlbmd0aCA9PT0gci5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gYnQsIG8gPSBlLm11dGF0aW9ucywgdSA9IDA7IHUgPCBvLmxlbmd0aDsgdSsrKSBpID0gaS5ydChvW3VdLmtleSwgclt1XS52ZXJzaW9uKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0KGUsIG4sIHIsIGkpO1xuICAgIH0sIHQ7XG59KCksIFJyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICAvLyBBIG1hcHBpbmcgb2YgZG9jdW1lbnQga2V5IHRvIHRoZSBuZXcgY2FjaGUgZW50cnkgdGhhdCBzaG91bGQgYmUgd3JpdHRlbiAob3IgbnVsbCBpZiBhbnlcbiAgICAgICAgLy8gZXhpc3RpbmcgY2FjaGUgZW50cnkgc2hvdWxkIGJlIHJlbW92ZWQpLlxuICAgICAgICB0aGlzLklpID0gbmV3IHEoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnRvU3RyaW5nKCk7XG4gICAgICAgIH0pLCAoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuaXNFcXVhbChlKTtcbiAgICAgICAgfSkpLCB0aGlzLm1pID0gITE7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5BaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLklpLmdldCh0KTtcbiAgICAgICAgcmV0dXJuIGUgPyBlLnJlYWRUaW1lIDogei5taW4oKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBCdWZmZXJzIGEgYFJlbW90ZURvY3VtZW50Q2FjaGUuYWRkRW50cnkoKWAgY2FsbC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb25seSBtb2RpZnkgZG9jdW1lbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gcmV0cmlldmVkIHZpYVxuICAgICAqIGBnZXRFbnRyeSgpL2dldEVudHJpZXMoKWAgKGVuZm9yY2VkIHZpYSBJbmRleGVkRGJzIGBhcHBseSgpYCkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuUmkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHRoaXMuUGkoKSwgdGhpcy5JaS5zZXQodC5rZXksIHtcbiAgICAgICAgICAgIGdpOiB0LFxuICAgICAgICAgICAgcmVhZFRpbWU6IGVcbiAgICAgICAgfSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQnVmZmVycyBhIGBSZW1vdGVEb2N1bWVudENhY2hlLnJlbW92ZUVudHJ5KClgIGNhbGwuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9ubHkgcmVtb3ZlIGRvY3VtZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCB2aWFcbiAgICAgKiBgZ2V0RW50cnkoKS9nZXRFbnRyaWVzKClgIChlbmZvcmNlZCB2aWEgSW5kZXhlZERicyBgYXBwbHkoKWApLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlZpID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBudWxsKSwgdGhpcy5QaSgpLCB0aGlzLklpLnNldCh0LCB7XG4gICAgICAgICAgICBnaTogbnVsbCxcbiAgICAgICAgICAgIHJlYWRUaW1lOiBlXG4gICAgICAgIH0pO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIGFuIGVudHJ5IGluIHRoZSBjYWNoZS4gVGhlIGJ1ZmZlcmVkIGNoYW5nZXMgd2lsbCBmaXJzdCBiZSBjaGVja2VkLFxuICAgICAqIGFuZCBpZiBubyBidWZmZXJlZCBjaGFuZ2UgYXBwbGllcywgdGhpcyB3aWxsIGZvcndhcmQgdG9cbiAgICAgKiBgUmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBUaGUgdHJhbnNhY3Rpb24gaW4gd2hpY2ggdG8gcGVyZm9ybSBhbnkgcGVyc2lzdGVuY2VcbiAgICAgKiAgICAgb3BlcmF0aW9ucy5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJuIFRoZSBjYWNoZWQgRG9jdW1lbnQgb3IgTm9Eb2N1bWVudCBlbnRyeSwgb3IgbnVsbCBpZiB3ZSBoYXZlIG5vdGhpbmdcbiAgICAgKiBjYWNoZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUueWkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHRoaXMuUGkoKTtcbiAgICAgICAgdmFyIG4gPSB0aGlzLklpLmdldChlKTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gbiA/IG9yLnJlc29sdmUobi5naSkgOiB0aGlzLnBpKHQsIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIHNldmVyYWwgZW50cmllcyBpbiB0aGUgY2FjaGUsIGZvcndhcmRpbmcgdG9cbiAgICAgKiBgUmVtb3RlRG9jdW1lbnRDYWNoZS5nZXRFbnRyeSgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBUaGUgdHJhbnNhY3Rpb24gaW4gd2hpY2ggdG8gcGVyZm9ybSBhbnkgcGVyc2lzdGVuY2VcbiAgICAgKiAgICAgb3BlcmF0aW9ucy5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRLZXlzIFRoZSBrZXlzIG9mIHRoZSBlbnRyaWVzIHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybiBBIG1hcCBvZiBjYWNoZWQgYERvY3VtZW50YHMgb3IgYE5vRG9jdW1lbnRgcywgaW5kZXhlZCBieSBrZXkuIElmIGFuXG4gICAgICogICAgIGVudHJ5IGNhbm5vdCBiZSBmb3VuZCwgdGhlIGNvcnJlc3BvbmRpbmcga2V5IHdpbGwgYmUgbWFwcGVkIHRvIGEgbnVsbFxuICAgICAqICAgICB2YWx1ZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5nZXRFbnRyaWVzID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aSh0LCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGJ1ZmZlcmVkIGNoYW5nZXMgdG8gdGhlIHVuZGVybHlpbmcgUmVtb3RlRG9jdW1lbnRDYWNoZSwgdXNpbmdcbiAgICAgKiB0aGUgcHJvdmlkZWQgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlBpKCksIHRoaXMubWkgPSAhMCwgdGhpcy5iaSh0KTtcbiAgICB9LCBcbiAgICAvKiogSGVscGVyIHRvIGFzc2VydCB0aGlzLmNoYW5nZXMgaXMgbm90IG51bGwgICovIHQucHJvdG90eXBlLlBpID0gZnVuY3Rpb24oKSB7fSwgXG4gICAgdDtcbn0oKTtcblxuLyoqIEEgQ3JlZGVudGlhbHNQcm92aWRlciB0aGF0IGFsd2F5cyB5aWVsZHMgYW4gZW1wdHkgdG9rZW4uICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZnVuY3Rpb24gTXIodCkge1xuICAgIHJldHVybiBuZXcgb2UodCwgLyogdXNlUHJvdG8zSnNvbj0gKi8gITApO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiBVcih0KSB7XG4gICAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGFuIG9iamVjdCBhbmQgY29udGFpbnMgYXQgbGVhc3Qgb25lIG9mIHRoZSBzcGVjaWZpZWRcbiAqIG1ldGhvZHMuXG4gKi9cbiAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCBudWxsID09PSB0KSByZXR1cm4gITE7XG4gICAgICAgIGZvciAodmFyIG4gPSB0LCByID0gMCwgaSA9IFsgXCJuZXh0XCIsIFwiZXJyb3JcIiwgXCJjb21wbGV0ZVwiIF07IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IGlbcl07XG4gICAgICAgICAgICBpZiAobyBpbiBuICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbltvXSkgcmV0dXJuICEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9KHQpO1xufVxuXG52YXIgcXIgPSBcIlRoZSBjdXJyZW50IHRhYiBpcyBub3QgaW4gdGhlIHJlcXVpcmVkIHN0YXRlIHRvIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24uIEl0IG1pZ2h0IGJlIG5lY2Vzc2FyeSB0byByZWZyZXNoIHRoZSBicm93c2VyIHRhYi5cIiwgRnIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuU2kgPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkRpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlNpLnB1c2godCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQ2kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5TaS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCgpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdDtcbn0oKSwganIgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbikge1xuICAgICAgICB0aGlzLk5pID0gdCwgdGhpcy54aSA9IGUsIHRoaXMuRmkgPSBuXG4gICAgICAgIC8qKlxuICAgICAqIEdldCB0aGUgbG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnQgaWRlbnRpZmllZCBieSBga2V5YC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gTG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnQgb3IgbnVsbCBpZiB3ZSBkb24ndCBoYXZlIGFueSBjYWNoZWRcbiAgICAgKiBzdGF0ZSBmb3IgaXQuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuT2kgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMueGkuTWkodCwgZSkubmV4dCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgcmV0dXJuIG4ua2kodCwgZSwgcik7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiogSW50ZXJuYWwgdmVyc2lvbiBvZiBgZ2V0RG9jdW1lbnRgIHRoYXQgYWxsb3dzIHJldXNpbmcgYmF0Y2hlcy4gKi8gdC5wcm90b3R5cGUua2kgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk5pLnlpKHQsIGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBpID0gbjsgciA8IGkubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gaVtyXS5kaShlLCB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLy8gUmV0dXJucyB0aGUgdmlldyBvZiB0aGUgZ2l2ZW4gYGRvY3NgIGFzIHRoZXkgd291bGQgYXBwZWFyIGFmdGVyIGFwcGx5aW5nXG4gICAgLy8gYWxsIG11dGF0aW9ucyBpbiB0aGUgZ2l2ZW4gYGJhdGNoZXNgLlxuICAgIHQucHJvdG90eXBlLiRpID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IGd0KCk7XG4gICAgICAgIHJldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvID0gbjsgaSA8IG8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBlID0gb1tpXS5kaSh0LCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSByLnJ0KHQsIGUpO1xuICAgICAgICB9KSksIHI7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbG9jYWwgdmlldyBvZiB0aGUgZG9jdW1lbnRzIGlkZW50aWZpZWQgYnkgYGtleXNgLlxuICAgICAqXG4gICAgICogSWYgd2UgZG9uJ3QgaGF2ZSBjYWNoZWQgc3RhdGUgZm9yIGEgZG9jdW1lbnQgaW4gYGtleXNgLCBhIE5vRG9jdW1lbnQgd2lsbFxuICAgICAqIGJlIHN0b3JlZCBmb3IgdGhhdCBrZXkgaW4gdGhlIHJlc3VsdGluZyBzZXQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTGkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuTmkuZ2V0RW50cmllcyh0LCBlKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5CaSh0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFNpbWlsYXIgdG8gYGdldERvY3VtZW50c2AsIGJ1dCBjcmVhdGVzIHRoZSBsb2NhbCB2aWV3IGZyb20gdGhlIGdpdmVuXG4gICAgICogYGJhc2VEb2NzYCB3aXRob3V0IHJldHJpZXZpbmcgZG9jdW1lbnRzIGZyb20gdGhlIGxvY2FsIHN0b3JlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkJpID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnhpLnFpKHQsIGUpLm5leHQoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgIHZhciBpID0gbi4kaSh0LCBlLCByKSwgbyA9IHl0KCk7XG4gICAgICAgICAgICByZXR1cm4gaS5mb3JFYWNoKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhodHRwOi8vYi8zMjI3NTM3OCk6IERvbid0IGNvbmZsYXRlIG1pc3NpbmcgLyBkZWxldGVkLlxuICAgICAgICAgICAgICAgIGUgfHwgKGUgPSBuZXcgX24odCwgei5taW4oKSkpLCBvID0gby5ydCh0LCBlKTtcbiAgICAgICAgICAgIH0pKSwgbztcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcXVlcnkgYWdhaW5zdCB0aGUgbG9jYWwgdmlldyBvZiBhbGwgZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIFRoZSBwZXJzaXN0ZW5jZSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gcXVlcnkgVGhlIHF1ZXJ5IHRvIG1hdGNoIGRvY3VtZW50cyBhZ2FpbnN0LlxuICAgICAqIEBwYXJhbSBzaW5jZVJlYWRUaW1lIElmIG5vdCBzZXQgdG8gU25hcHNob3RWZXJzaW9uLm1pbigpLCByZXR1cm4gb25seVxuICAgICAqICAgICBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gcmVhZCBzaW5jZSB0aGlzIHNuYXBzaG90IHZlcnNpb24gKGV4Y2x1c2l2ZSkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVWkgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIC8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBxdWVyeSBtYXRjaGVzIGEgc2luZ2xlIGRvY3VtZW50IGJ5IHBhdGggKHJhdGhlciB0aGFuIGFcbiAqIGNvbGxlY3Rpb24pLlxuICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gWS5HKHQucGF0aCkgJiYgbnVsbCA9PT0gdC5jb2xsZWN0aW9uR3JvdXAgJiYgMCA9PT0gdC5maWx0ZXJzLmxlbmd0aDtcbiAgICAgICAgfShlKSA/IHRoaXMuUWkodCwgZS5wYXRoKSA6IERuKGUpID8gdGhpcy5LaSh0LCBlLCBuKSA6IHRoaXMuV2kodCwgZSwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuUWkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIEp1c3QgZG8gYSBzaW1wbGUgZG9jdW1lbnQgbG9va3VwLlxuICAgICAgICByZXR1cm4gdGhpcy5PaSh0LCBuZXcgWShlKSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGUgPSB3dCgpO1xuICAgICAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBibiAmJiAoZSA9IGUucnQodC5rZXksIHQpKSwgZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLktpID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSBlLmNvbGxlY3Rpb25Hcm91cCwgbyA9IHd0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLkZpLmppKHQsIGkpLm5leHQoKGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgICAgIHJldHVybiBvci5mb3JFYWNoKHUsIChmdW5jdGlvbih1KSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRW4oZSwgXG4gICAgICAgICAgICAgICAgICAgIC8qY29sbGVjdGlvbkdyb3VwPSovIG51bGwsIHQucm4uc2xpY2UoKSwgdC5maWx0ZXJzLnNsaWNlKCksIHQubGltaXQsIHQubGltaXRUeXBlLCB0LnN0YXJ0QXQsIHQuZW5kQXQpO1xuICAgICAgICAgICAgICAgIH0oZSwgdS5jaGlsZChpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuV2kodCwgcywgbikubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICB0LmZvckVhY2goKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBvLnJ0KHQsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuV2kgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByLCBpLCBvID0gdGhpcztcbiAgICAgICAgLy8gUXVlcnkgdGhlIHJlbW90ZSBkb2N1bWVudHMgYW5kIG92ZXJsYXkgbXV0YXRpb25zLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLk5pLlVpKHQsIGUsIG4pLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiByID0gbiwgby54aS5HaSh0LCBlKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpID0gZSwgby56aSh0LCBpLCByKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgciA9IHQ7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDAsIG4gPSBpOyBlIDwgbi5sZW5ndGg7IGUrKykgZm9yICh2YXIgbyA9IG5bZV0sIHUgPSAwLCBzID0gby5tdXRhdGlvbnM7IHUgPCBzLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gc1t1XSwgYyA9IGEua2V5LCBoID0gci5nZXQoYyksIGYgPSBybihhLCBoLCBoLCBvLmxpKTtcbiAgICAgICAgICAgICAgICAgICAgciA9IGYgaW5zdGFuY2VvZiBibiA/IHIucnQoYywgZikgOiByLnJlbW92ZShjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEZpbmFsbHksIGZpbHRlciBvdXQgYW55IGRvY3VtZW50cyB0aGF0IGRvbid0IGFjdHVhbGx5IG1hdGNoXG4gICAgICAgICAgICAvLyB0aGUgcXVlcnkuXG4gICAgICAgICAgICByZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgICAgICAgICAgcW4oZSwgbikgfHwgKHIgPSByLnJlbW92ZSh0KSk7XG4gICAgICAgICAgICB9KSksIHI7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS56aSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgZm9yICh2YXIgciA9IEl0KCksIGkgPSAwLCBvID0gZTsgaSA8IG8ubGVuZ3RoOyBpKyspIGZvciAodmFyIHUgPSAwLCBzID0gb1tpXS5tdXRhdGlvbnM7IHUgPCBzLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHNbdV07XG4gICAgICAgICAgICBhIGluc3RhbmNlb2YgY24gJiYgbnVsbCA9PT0gbi5nZXQoYS5rZXkpICYmIChyID0gci5hZGQoYS5rZXkpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYyA9IG47XG4gICAgICAgIHJldHVybiB0aGlzLk5pLmdldEVudHJpZXModCwgcikubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIG51bGwgIT09IGUgJiYgZSBpbnN0YW5jZW9mIGJuICYmIChjID0gYy5ydCh0LCBlKSk7XG4gICAgICAgICAgICB9KSksIGM7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpLCBCciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0LCB0aGlzLmZyb21DYWNoZSA9IGUsIHRoaXMuSGkgPSBuLCB0aGlzLkppID0gcjtcbiAgICB9XG4gICAgcmV0dXJuIHQuWWkgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIgPSBJdCgpLCBpID0gSXQoKSwgbyA9IDAsIHUgPSBuLmRvY0NoYW5nZXM7IG8gPCB1Lmxlbmd0aDsgbysrKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHVbb107XG4gICAgICAgICAgICBzd2l0Y2ggKHMudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIDAgLyogQWRkZWQgKi8gOlxuICAgICAgICAgICAgICAgIHIgPSByLmFkZChzLmRvYy5rZXkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMSAvKiBSZW1vdmVkICovIDpcbiAgICAgICAgICAgICAgICBpID0gaS5hZGQocy5kb2Mua2V5KTtcbiAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0KGUsIG4uZnJvbUNhY2hlLCByLCBpKTtcbiAgICB9LCB0O1xufSgpLCB6ciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlID0gdCwgZSAmJiAoZS5YaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuLlppKHQpO1xuICAgICAgICB9LCB0aGlzLnRyID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuZXIodCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuWmkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXZpb3VzVmFsdWUgPSBNYXRoLm1heCh0LCB0aGlzLnByZXZpb3VzVmFsdWUpLCB0aGlzLnByZXZpb3VzVmFsdWU7XG4gICAgfSwgdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9ICsrdGhpcy5wcmV2aW91c1ZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcy50ciAmJiB0aGlzLnRyKHQpLCB0O1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQSBiYXNlIGNsYXNzIHJlcHJlc2VudGluZyBhIHBlcnNpc3RlbmNlIHRyYW5zYWN0aW9uLCBlbmNhcHN1bGF0aW5nIGJvdGggdGhlXG4gKiB0cmFuc2FjdGlvbidzIHNlcXVlbmNlIG51bWJlcnMgYXMgd2VsbCBhcyBhIGxpc3Qgb2Ygb25Db21taXR0ZWQgbGlzdGVuZXJzLlxuICpcbiAqIFdoZW4geW91IGNhbGwgUGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oKSwgaXQgd2lsbCBjcmVhdGUgYSB0cmFuc2FjdGlvbiBhbmRcbiAqIHBhc3MgaXQgdG8geW91ciBjYWxsYmFjay4gWW91IHRoZW4gcGFzcyBpdCB0byBhbnkgbWV0aG9kIHRoYXQgb3BlcmF0ZXNcbiAqIG9uIHBlcnNpc3RlbmNlLlxuICovIGZ1bmN0aW9uIEdyKHQsIGUpIHtcbiAgICB2YXIgbiA9IHRbMF0sIHIgPSB0WzFdLCBpID0gZVswXSwgbyA9IGVbMV0sIHUgPSBWKG4sIGkpO1xuICAgIHJldHVybiAwID09PSB1ID8gVihyLCBvKSA6IHU7XG59XG5cbi8qKlxuICogVXNlZCB0byBjYWxjdWxhdGUgdGhlIG50aCBzZXF1ZW5jZSBudW1iZXIuIEtlZXBzIGEgcm9sbGluZyBidWZmZXIgb2YgdGhlXG4gKiBsb3dlc3QgbiB2YWx1ZXMgcGFzc2VkIHRvIGBhZGRFbGVtZW50YCwgYW5kIGZpbmFsbHkgcmVwb3J0cyB0aGUgbGFyZ2VzdCBvZlxuICogdGhlbSBpbiBgbWF4VmFsdWVgLlxuICovIHpyLm5yID0gLTE7XG5cbnZhciBLciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuc3IgPSB0LCB0aGlzLmJ1ZmZlciA9IG5ldyBwdChHciksIHRoaXMuaXIgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucnIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICsrdGhpcy5pcjtcbiAgICB9LCB0LnByb3RvdHlwZS5hciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBbIHQsIHRoaXMucnIoKSBdO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIuc2l6ZSA8IHRoaXMuc3IpIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuYWRkKGUpOyBlbHNlIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5idWZmZXIubGFzdCgpO1xuICAgICAgICAgICAgR3IoZSwgbikgPCAwICYmICh0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLmRlbGV0ZShuKS5hZGQoZSkpO1xuICAgICAgICB9XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIm1heFZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEd1YXJhbnRlZWQgdG8gYmUgbm9uLWVtcHR5LiBJZiB3ZSBkZWNpZGUgd2UgYXJlIG5vdCBjb2xsZWN0aW5nIGFueVxuICAgICAgICAgICAgLy8gc2VxdWVuY2UgbnVtYmVycywgbnRoU2VxdWVuY2VOdW1iZXIgYmVsb3cgc2hvcnQtY2lyY3VpdHMuIElmIHdlIGhhdmVcbiAgICAgICAgICAgIC8vIGRlY2lkZWQgdGhhdCB3ZSBhcmUgY29sbGVjdGluZyBuIHNlcXVlbmNlIG51bWJlcnMsIGl0J3MgYmVjYXVzZSBuIGlzIHNvbWVcbiAgICAgICAgICAgIC8vIHBlcmNlbnRhZ2Ugb2YgdGhlIGV4aXN0aW5nIHNlcXVlbmNlIG51bWJlcnMuIFRoYXQgbWVhbnMgd2Ugc2hvdWxkIG5ldmVyXG4gICAgICAgICAgICAvLyBiZSBpbiBhIHNpdHVhdGlvbiB3aGVyZSB3ZSBhcmUgY29sbGVjdGluZyBzZXF1ZW5jZSBudW1iZXJzIGJ1dCBkb24ndFxuICAgICAgICAgICAgLy8gYWN0dWFsbHkgaGF2ZSBhbnkuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGFzdCgpWzBdO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0O1xufSgpLCBRciA9IHtcbiAgICBjcjogITEsXG4gICAgdXI6IDAsXG4gICAgaHI6IDAsXG4gICAgbHI6IDBcbn0sIFdyID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KFxuICAgIC8vIFdoZW4gd2UgYXR0ZW1wdCB0byBjb2xsZWN0LCB3ZSB3aWxsIG9ubHkgZG8gc28gaWYgdGhlIGNhY2hlIHNpemUgaXMgZ3JlYXRlciB0aGFuIHRoaXNcbiAgICAvLyB0aHJlc2hvbGQuIFBhc3NpbmcgYENPTExFQ1RJT05fRElTQUJMRURgIGhlcmUgd2lsbCBjYXVzZSBjb2xsZWN0aW9uIHRvIGFsd2F5cyBiZSBza2lwcGVkLlxuICAgIHQsIFxuICAgIC8vIFRoZSBwZXJjZW50YWdlIG9mIHNlcXVlbmNlIG51bWJlcnMgdGhhdCB3ZSB3aWxsIGF0dGVtcHQgdG8gY29sbGVjdFxuICAgIGUsIFxuICAgIC8vIEEgY2FwIG9uIHRoZSB0b3RhbCBudW1iZXIgb2Ygc2VxdWVuY2UgbnVtYmVycyB0aGF0IHdpbGwgYmUgY29sbGVjdGVkLiBUaGlzIHByZXZlbnRzXG4gICAgLy8gdXMgZnJvbSBjb2xsZWN0aW5nIGEgaHVnZSBudW1iZXIgb2Ygc2VxdWVuY2UgbnVtYmVycyBpZiB0aGUgY2FjaGUgaGFzIGdyb3duIHZlcnkgbGFyZ2UuXG4gICAgbikge1xuICAgICAgICB0aGlzLl9yID0gdCwgdGhpcy5kciA9IGUsIHRoaXMud3IgPSBuO1xuICAgIH1cbiAgICByZXR1cm4gdC5UciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KGUsIHQuRXIsIHQuSXIpO1xuICAgIH0sIHQ7XG59KCk7XG5cbldyLkVyID0gMTAsIFdyLklyID0gMWUzLCBXci5tciA9IG5ldyBXcig0MTk0MzA0MCwgV3IuRXIsIFdyLklyKSwgV3IuQXIgPSBuZXcgV3IoLTEsIDAsIDApO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBzY2hlZHVsaW5nIG9mIExSVSBnYXJiYWdlIGNvbGxlY3Rpb24uIEl0IGhhbmRsZXMgY2hlY2tpbmdcbiAqIHdoZXRoZXIgb3Igbm90IEdDIGlzIGVuYWJsZWQsIGFzIHdlbGwgYXMgd2hpY2ggZGVsYXkgdG8gdXNlIGJlZm9yZSB0aGUgbmV4dCBydW4uXG4gKi9cbnZhciBZciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuUnIgPSB0LCB0aGlzLnJzID0gZSwgdGhpcy5QciA9ICExLCB0aGlzLmdyID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICAtMSAhPT0gdGhpcy5Sci5wYXJhbXMuX3IgJiYgdGhpcy5Wcih0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZ3IgJiYgKHRoaXMuZ3IuY2FuY2VsKCksIHRoaXMuZ3IgPSBudWxsKTtcbiAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwieXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuZ3I7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQucHJvdG90eXBlLlZyID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSB0aGlzLlByID8gM2U1IDogNmU0O1xuICAgICAgICBUKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBcIkdhcmJhZ2UgY29sbGVjdGlvbiBzY2hlZHVsZWQgaW4gXCIgKyBpICsgXCJtc1wiKSwgdGhpcy5nciA9IHRoaXMucnMuUG4oXCJscnVfZ2FyYmFnZV9jb2xsZWN0aW9uXCIgLyogTHJ1R2FyYmFnZUNvbGxlY3Rpb24gKi8gLCBpLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZShyLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3IgPSBudWxsLCB0aGlzLlByID0gITAsIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMSwgMywgLCA3IF0pLCBbIDQgLyp5aWVsZCovICwgdC5wcih0aGlzLlJyKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDMgLypicmVhayovICwgNyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyKGUgPSBuLnNlbnQoKSkgPyAoVChcIkxydUdhcmJhZ2VDb2xsZWN0b3JcIiwgXCJJZ25vcmluZyBJbmRleGVkREIgZXJyb3IgZHVyaW5nIGdhcmJhZ2UgY29sbGVjdGlvbjogXCIsIGUpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFsgMyAvKmJyZWFrKi8gLCA2IF0pIDogWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgSW8oZSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uc2VudCgpLCBuLmxhYmVsID0gNjtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDMgLypicmVhayovICwgNyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB0aGlzLlZyKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpLCBIciA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMudnIgPSB0LCB0aGlzLnBhcmFtcyA9IGVcbiAgICAgICAgLyoqIEdpdmVuIGEgcGVyY2VudGlsZSBvZiB0YXJnZXQgdG8gY29sbGVjdCwgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHRhcmdldHMgdG8gY29sbGVjdC4gKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudnIuU3IodCkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZSAvIDEwMCAqIHQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqIFJldHVybnMgdGhlIG50aCBzZXF1ZW5jZSBudW1iZXIsIGNvdW50aW5nIGluIG9yZGVyIGZyb20gdGhlIHNtYWxsZXN0LiAqLyB0LnByb3RvdHlwZS5EciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICBpZiAoMCA9PT0gZSkgcmV0dXJuIG9yLnJlc29sdmUoenIubnIpO1xuICAgICAgICB2YXIgciA9IG5ldyBLcihlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudnIuRGUodCwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiByLmFyKHQuc2VxdWVuY2VOdW1iZXIpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi52ci5Dcih0LCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByLmFyKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gci5tYXhWYWx1ZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGFyZ2V0cyB3aXRoIGEgc2VxdWVuY2UgbnVtYmVyIGVxdWFsIHRvIG9yIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gdXBwZXIgYm91bmQsIGFuZCByZW1vdmVzXG4gICAgICogZG9jdW1lbnQgYXNzb2NpYXRpb25zIHdpdGggdGhvc2UgdGFyZ2V0cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5OciA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudnIuTnIodCwgZSwgbik7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBkb2N1bWVudHMgdGhhdCBoYXZlIGEgc2VxdWVuY2UgbnVtYmVyIGVxdWFsIHRvIG9yIGxlc3MgdGhhbiB0aGUgdXBwZXIgYm91bmQgYW5kIGFyZSBub3RcbiAgICAgKiBvdGhlcndpc2UgcGlubmVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkZyID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ci5Gcih0LCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5PciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gLTEgPT09IHRoaXMucGFyYW1zLl9yID8gKFQoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IGRpc2FibGVkXCIpLCBcbiAgICAgICAgb3IucmVzb2x2ZShRcikpIDogdGhpcy5Ncih0KS5uZXh0KChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gciA8IG4ucGFyYW1zLl9yID8gKFQoXCJMcnVHYXJiYWdlQ29sbGVjdG9yXCIsIFwiR2FyYmFnZSBjb2xsZWN0aW9uIHNraXBwZWQ7IENhY2hlIHNpemUgXCIgKyByICsgXCIgaXMgbG93ZXIgdGhhbiB0aHJlc2hvbGQgXCIgKyBuLnBhcmFtcy5fciksIFxuICAgICAgICAgICAgUXIpIDogbi5rcih0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLk1yID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ci5Ncih0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5rciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4sIHIsIGksIG8sIHMsIGEsIGMsIGggPSB0aGlzLCBmID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnIodCwgdGhpcy5wYXJhbXMuZHIpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIC8vIENhcCBhdCB0aGUgY29uZmlndXJlZCBtYXhcbiAgICAgICAgICAgIHJldHVybiBlID4gaC5wYXJhbXMud3IgPyAoVChcIkxydUdhcmJhZ2VDb2xsZWN0b3JcIiwgXCJDYXBwaW5nIHNlcXVlbmNlIG51bWJlcnMgdG8gY29sbGVjdCBkb3duIHRvIHRoZSBtYXhpbXVtIG9mIFwiICsgaC5wYXJhbXMud3IgKyBcIiBmcm9tIFwiICsgZSksIFxuICAgICAgICAgICAgciA9IGgucGFyYW1zLndyKSA6IHIgPSBlLCBvID0gRGF0ZS5ub3coKSwgaC5Ecih0LCByKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgIHJldHVybiBuID0gciwgcyA9IERhdGUubm93KCksIGguTnIodCwgbiwgZSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gaSA9IGUsIGEgPSBEYXRlLm5vdygpLCBoLkZyKHQsIG4pO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGMgPSBEYXRlLm5vdygpLCBFKCkgPD0gdS5ERUJVRyAmJiBUKFwiTHJ1R2FyYmFnZUNvbGxlY3RvclwiLCBcIkxSVSBHYXJiYWdlIENvbGxlY3Rpb25cXG5cXHRDb3VudGVkIHRhcmdldHMgaW4gXCIgKyAobyAtIGYpICsgXCJtc1xcblxcdERldGVybWluZWQgbGVhc3QgcmVjZW50bHkgdXNlZCBcIiArIHIgKyBcIiBpbiBcIiArIChzIC0gbykgKyBcIm1zXFxuXFx0UmVtb3ZlZCBcIiArIGkgKyBcIiB0YXJnZXRzIGluIFwiICsgKGEgLSBzKSArIFwibXNcXG5cXHRSZW1vdmVkIFwiICsgdCArIFwiIGRvY3VtZW50cyBpbiBcIiArIChjIC0gYSkgKyBcIm1zXFxuVG90YWwgRHVyYXRpb246IFwiICsgKGMgLSBmKSArIFwibXNcIiksIFxuICAgICAgICAgICAgb3IucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgY3I6ICEwLFxuICAgICAgICAgICAgICAgIHVyOiByLFxuICAgICAgICAgICAgICAgIGhyOiBpLFxuICAgICAgICAgICAgICAgIGxyOiB0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKiBJbXBsZW1lbnRzIHRoZSBzdGVwcyBmb3IgTFJVIGdhcmJhZ2UgY29sbGVjdGlvbi4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEVuY29kZXMgYSByZXNvdXJjZSBwYXRoIGludG8gYSBJbmRleGVkRGItY29tcGF0aWJsZSBzdHJpbmcgZm9ybS5cbiAqL1xuZnVuY3Rpb24gSnIodCkge1xuICAgIGZvciAodmFyIGUgPSBcIlwiLCBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIGUubGVuZ3RoID4gMCAmJiAoZSA9ICRyKGUpKSwgZSA9IFhyKHQuZ2V0KG4pLCBlKTtcbiAgICByZXR1cm4gJHIoZSk7XG59XG5cbi8qKiBFbmNvZGVzIGEgc2luZ2xlIHNlZ21lbnQgb2YgYSByZXNvdXJjZSBwYXRoIGludG8gdGhlIGdpdmVuIHJlc3VsdCAqLyBmdW5jdGlvbiBYcih0LCBlKSB7XG4gICAgZm9yICh2YXIgbiA9IGUsIHIgPSB0Lmxlbmd0aCwgaSA9IDA7IGkgPCByOyBpKyspIHtcbiAgICAgICAgdmFyIG8gPSB0LmNoYXJBdChpKTtcbiAgICAgICAgc3dpdGNoIChvKSB7XG4gICAgICAgICAgY2FzZSBcIlxcMFwiOlxuICAgICAgICAgICAgbiArPSBcIlx1MDAwMVx1MDAxMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiXHUwMDAxXCI6XG4gICAgICAgICAgICBuICs9IFwiXHUwMDAxXHUwMDExXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuICs9IG87XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbi8qKiBFbmNvZGVzIGEgcGF0aCBzZXBhcmF0b3IgaW50byB0aGUgZ2l2ZW4gcmVzdWx0ICovIGZ1bmN0aW9uICRyKHQpIHtcbiAgICByZXR1cm4gdCArIFwiXHUwMDAxXHUwMDAxXCI7XG59XG5cbi8qKlxuICogRGVjb2RlcyB0aGUgZ2l2ZW4gSW5kZXhlZERiLWNvbXBhdGlibGUgc3RyaW5nIGZvcm0gb2YgYSByZXNvdXJjZSBwYXRoIGludG9cbiAqIGEgUmVzb3VyY2VQYXRoIGluc3RhbmNlLiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgaXMgbm90IHN1aXRhYmxlIGZvciB1c2Ugd2l0aFxuICogZGVjb2RpbmcgcmVzb3VyY2UgbmFtZXMgZnJvbSB0aGUgc2VydmVyOyB0aG9zZSBhcmUgT25lIFBsYXRmb3JtIGZvcm1hdFxuICogc3RyaW5ncy5cbiAqLyBmdW5jdGlvbiBacih0KSB7XG4gICAgLy8gRXZlbnQgdGhlIGVtcHR5IHBhdGggbXVzdCBlbmNvZGUgYXMgYSBwYXRoIG9mIGF0IGxlYXN0IGxlbmd0aCAyLiBBIHBhdGhcbiAgICAvLyB3aXRoIGV4YWN0bHkgMiBtdXN0IGJlIHRoZSBlbXB0eSBwYXRoLlxuICAgIHZhciBlID0gdC5sZW5ndGg7XG4gICAgaWYgKGsoZSA+PSAyKSwgMiA9PT0gZSkgcmV0dXJuIGsoXCJcdTAwMDFcIiA9PT0gdC5jaGFyQXQoMCkgJiYgXCJcdTAwMDFcIiA9PT0gdC5jaGFyQXQoMSkpLCBLLiQoKTtcbiAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyBjYW5ub3QgZXhpc3QgcGFzdCB0aGUgc2Vjb25kLXRvLWxhc3QgcG9zaXRpb24gaW4gdGhlXG4gICAgLy8gc291cmNlIHZhbHVlLlxuICAgICAgICBmb3IgKHZhciBuID0gZSAtIDIsIHIgPSBbXSwgaSA9IFwiXCIsIG8gPSAwOyBvIDwgZTsgKSB7XG4gICAgICAgIC8vIFRoZSBsYXN0IHR3byBjaGFyYWN0ZXJzIG9mIGEgdmFsaWQgZW5jb2RlZCBwYXRoIG11c3QgYmUgYSBzZXBhcmF0b3IsIHNvXG4gICAgICAgIC8vIHRoZXJlIG11c3QgYmUgYW4gZW5kIHRvIHRoaXMgc2VnbWVudC5cbiAgICAgICAgdmFyIHUgPSB0LmluZGV4T2YoXCJcdTAwMDFcIiwgbyk7XG4gICAgICAgIHN3aXRjaCAoKHUgPCAwIHx8IHUgPiBuKSAmJiBTKCksIHQuY2hhckF0KHUgKyAxKSkge1xuICAgICAgICAgIGNhc2UgXCJcdTAwMDFcIjpcbiAgICAgICAgICAgIHZhciBzID0gdC5zdWJzdHJpbmcobywgdSksIGEgPSB2b2lkIDA7XG4gICAgICAgICAgICAwID09PSBpLmxlbmd0aCA/IFxuICAgICAgICAgICAgLy8gQXZvaWQgY29weWluZyBmb3IgdGhlIGNvbW1vbiBjYXNlIG9mIGEgc2VnbWVudCB0aGF0IGV4Y2x1ZGVzIFxcMFxuICAgICAgICAgICAgLy8gYW5kIFxcMDAxXG4gICAgICAgICAgICBhID0gcyA6IChhID0gaSArPSBzLCBpID0gXCJcIiksIHIucHVzaChhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIlx1MDAxMFwiOlxuICAgICAgICAgICAgaSArPSB0LnN1YnN0cmluZyhvLCB1KSwgaSArPSBcIlxcMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiXHUwMDExXCI6XG4gICAgICAgICAgICAvLyBUaGUgZXNjYXBlIGNoYXJhY3RlciBjYW4gYmUgdXNlZCBpbiB0aGUgb3V0cHV0IHRvIGVuY29kZSBpdHNlbGYuXG4gICAgICAgICAgICBpICs9IHQuc3Vic3RyaW5nKG8sIHUgKyAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIFMoKTtcbiAgICAgICAgfVxuICAgICAgICBvID0gdSArIDI7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSyhyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBTZXJpYWxpemVyIGZvciB2YWx1ZXMgc3RvcmVkIGluIHRoZSBMb2NhbFN0b3JlLiAqLyB2YXIgdGkgPSBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy4kciA9IHQ7XG59O1xuXG4vKiogRGVjb2RlcyBhIHJlbW90ZSBkb2N1bWVudCBmcm9tIHN0b3JhZ2UgbG9jYWxseSB0byBhIERvY3VtZW50LiAqLyBmdW5jdGlvbiBlaSh0LCBlKSB7XG4gICAgaWYgKGUuZG9jdW1lbnQpIHJldHVybiBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0geWUodCwgZS5uYW1lKSwgaSA9IGxlKGUudXBkYXRlVGltZSksIG8gPSBuZXcgeW4oe1xuICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IGUuZmllbGRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IGJuKHIsIGksIG8sIHtcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogISFuXG4gICAgICAgIH0pO1xuICAgIH0odC4kciwgZS5kb2N1bWVudCwgISFlLmhhc0NvbW1pdHRlZE11dGF0aW9ucyk7XG4gICAgaWYgKGUubm9Eb2N1bWVudCkge1xuICAgICAgICB2YXIgbiA9IFkuSChlLm5vRG9jdW1lbnQucGF0aCksIHIgPSB1aShlLm5vRG9jdW1lbnQucmVhZFRpbWUpO1xuICAgICAgICByZXR1cm4gbmV3IF9uKG4sIHIsIHtcbiAgICAgICAgICAgIGhhc0NvbW1pdHRlZE11dGF0aW9uczogISFlLmhhc0NvbW1pdHRlZE11dGF0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGUudW5rbm93bkRvY3VtZW50KSB7XG4gICAgICAgIHZhciBpID0gWS5IKGUudW5rbm93bkRvY3VtZW50LnBhdGgpLCBvID0gdWkoZS51bmtub3duRG9jdW1lbnQudmVyc2lvbik7XG4gICAgICAgIHJldHVybiBuZXcgSW4oaSwgbyk7XG4gICAgfVxuICAgIHJldHVybiBTKCk7XG59XG5cbi8qKiBFbmNvZGVzIGEgZG9jdW1lbnQgZm9yIHN0b3JhZ2UgbG9jYWxseS4gKi8gZnVuY3Rpb24gbmkodCwgZSwgbikge1xuICAgIHZhciByID0gcmkobiksIGkgPSBlLmtleS5wYXRoLlMoKS5PKCk7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBibikge1xuICAgICAgICB2YXIgbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdmUodCwgZS5rZXkpLFxuICAgICAgICAgICAgICAgIGZpZWxkczogZS5zbigpLm1hcFZhbHVlLmZpZWxkcyxcbiAgICAgICAgICAgICAgICB1cGRhdGVUaW1lOiBjZSh0LCBlLnZlcnNpb24uUCgpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0LiRyLCBlKSwgdSA9IGUuaGFzQ29tbWl0dGVkTXV0YXRpb25zO1xuICAgICAgICByZXR1cm4gbmV3IFZpKFxuICAgICAgICAvKiB1bmtub3duRG9jdW1lbnQ9ICovIG51bGwsIFxuICAgICAgICAvKiBub0RvY3VtZW50PSAqLyBudWxsLCBvLCB1LCByLCBpKTtcbiAgICB9XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBfbikge1xuICAgICAgICB2YXIgcyA9IGUua2V5LnBhdGguTygpLCBhID0gb2koZS52ZXJzaW9uKSwgYyA9IGUuaGFzQ29tbWl0dGVkTXV0YXRpb25zO1xuICAgICAgICByZXR1cm4gbmV3IFZpKFxuICAgICAgICAvKiB1bmtub3duRG9jdW1lbnQ9ICovIG51bGwsIG5ldyBPaShzLCBhKSwgXG4gICAgICAgIC8qIGRvY3VtZW50PSAqLyBudWxsLCBjLCByLCBpKTtcbiAgICB9XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBJbikge1xuICAgICAgICB2YXIgaCA9IGUua2V5LnBhdGguTygpLCBmID0gb2koZS52ZXJzaW9uKTtcbiAgICAgICAgcmV0dXJuIG5ldyBWaShuZXcgUGkoaCwgZiksIFxuICAgICAgICAvKiBub0RvY3VtZW50PSAqLyBudWxsLCBcbiAgICAgICAgLyogZG9jdW1lbnQ9ICovIG51bGwsIFxuICAgICAgICAvKiBoYXNDb21taXR0ZWRNdXRhdGlvbnM9ICovICEwLCByLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIFMoKTtcbn1cblxuZnVuY3Rpb24gcmkodCkge1xuICAgIHZhciBlID0gdC5QKCk7XG4gICAgcmV0dXJuIFsgZS5zZWNvbmRzLCBlLm5hbm9zZWNvbmRzIF07XG59XG5cbmZ1bmN0aW9uIGlpKHQpIHtcbiAgICB2YXIgZSA9IG5ldyBCKHRbMF0sIHRbMV0pO1xuICAgIHJldHVybiB6Lm0oZSk7XG59XG5cbmZ1bmN0aW9uIG9pKHQpIHtcbiAgICB2YXIgZSA9IHQuUCgpO1xuICAgIHJldHVybiBuZXcgeGkoZS5zZWNvbmRzLCBlLm5hbm9zZWNvbmRzKTtcbn1cblxuZnVuY3Rpb24gdWkodCkge1xuICAgIHZhciBlID0gbmV3IEIodC5zZWNvbmRzLCB0Lm5hbm9zZWNvbmRzKTtcbiAgICByZXR1cm4gei5tKGUpO1xufVxuXG4vKiogRW5jb2RlcyBhIGJhdGNoIG9mIG11dGF0aW9ucyBpbnRvIGEgRGJNdXRhdGlvbkJhdGNoIGZvciBsb2NhbCBzdG9yYWdlLiAqL1xuLyoqIERlY29kZXMgYSBEYk11dGF0aW9uQmF0Y2ggaW50byBhIE11dGF0aW9uQmF0Y2ggKi8gZnVuY3Rpb24gc2kodCwgZSkge1xuICAgIHZhciBuID0gKGUuYmFzZU11dGF0aW9ucyB8fCBbXSkubWFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBFZSh0LiRyLCBlKTtcbiAgICB9KSksIHIgPSBlLm11dGF0aW9ucy5tYXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIEVlKHQuJHIsIGUpO1xuICAgIH0pKSwgaSA9IEIuZnJvbU1pbGxpcyhlLmxvY2FsV3JpdGVUaW1lTXMpO1xuICAgIHJldHVybiBuZXcgQ3IoZS5iYXRjaElkLCBpLCBuLCByKTtcbn1cblxuLyoqIERlY29kZXMgYSBEYlRhcmdldCBpbnRvIFRhcmdldERhdGEgKi8gZnVuY3Rpb24gYWkodCkge1xuICAgIHZhciBlLCBuLCByID0gdWkodC5yZWFkVGltZSksIGkgPSB2b2lkIDAgIT09IHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbiA/IHVpKHQubGFzdExpbWJvRnJlZVNuYXBzaG90VmVyc2lvbikgOiB6Lm1pbigpO1xuICAgIHJldHVybiB2b2lkIDAgIT09IHQucXVlcnkuZG9jdW1lbnRzID8gKGsoMSA9PT0gKG4gPSB0LnF1ZXJ5KS5kb2N1bWVudHMubGVuZ3RoKSwgXG4gICAgZSA9IFBuKE5uKG1lKG4uZG9jdW1lbnRzWzBdKSkpKSA6IGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBQbih4ZSh0KSk7XG4gICAgfSh0LnF1ZXJ5KSwgbmV3IHV0KGUsIHQudGFyZ2V0SWQsIDAgLyogTGlzdGVuICovICwgdC5sYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIsIHIsIGksIHJ0LmZyb21CYXNlNjRTdHJpbmcodC5yZXN1bWVUb2tlbikpXG4gICAgLyoqIEVuY29kZXMgVGFyZ2V0RGF0YSBpbnRvIGEgRGJUYXJnZXQgZm9yIHN0b3JhZ2UgbG9jYWxseS4gKi87XG59XG5cbmZ1bmN0aW9uIGNpKHQsIGUpIHtcbiAgICB2YXIgbiwgciA9IG9pKGUuZXQpLCBpID0gb2koZS5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uKTtcbiAgICBuID0gbnQoZS50YXJnZXQpID8gVGUodC4kciwgZS50YXJnZXQpIDogTmUodC4kciwgZS50YXJnZXQpO1xuICAgIC8vIFdlIGNhbid0IHN0b3JlIHRoZSByZXN1bWVUb2tlbiBhcyBhIEJ5dGVTdHJpbmcgaW4gSW5kZXhlZERiLCBzbyB3ZVxuICAgIC8vIGNvbnZlcnQgaXQgdG8gYSBiYXNlNjQgc3RyaW5nIGZvciBzdG9yYWdlLlxuICAgIHZhciBvID0gZS5yZXN1bWVUb2tlbi50b0Jhc2U2NCgpO1xuICAgIC8vIGxhc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciBpcyBhbHdheXMgMCB1bnRpbCB3ZSBkbyByZWFsIEdDLlxuICAgICAgICByZXR1cm4gbmV3IExpKGUudGFyZ2V0SWQsIHR0KGUudGFyZ2V0KSwgciwgbywgZS5zZXF1ZW5jZU51bWJlciwgaSwgbik7XG59XG5cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gZm9yIGZpZ3VyaW5nIG91dCB3aGF0IGtpbmQgb2YgcXVlcnkgaGFzIGJlZW4gc3RvcmVkLlxuICovXG4vKipcbiAqIEVuY29kZXMgYSBgQnVuZGxlZFF1ZXJ5YCBmcm9tIGJ1bmRsZSBwcm90byB0byBhIFF1ZXJ5IG9iamVjdC5cbiAqXG4gKiBUaGlzIHJlY29uc3RydWN0cyB0aGUgb3JpZ2luYWwgcXVlcnkgdXNlZCB0byBidWlsZCB0aGUgYnVuZGxlIGJlaW5nIGxvYWRlZCxcbiAqIGluY2x1ZGluZyBmZWF0dXJlcyBleGlzdHMgb25seSBpbiBTREtzIChmb3IgZXhhbXBsZTogbGltaXQtdG8tbGFzdCkuXG4gKi8gZnVuY3Rpb24gaGkodCkge1xuICAgIHZhciBlID0geGUoe1xuICAgICAgICBwYXJlbnQ6IHQucGFyZW50LFxuICAgICAgICBzdHJ1Y3R1cmVkUXVlcnk6IHQuc3RydWN0dXJlZFF1ZXJ5XG4gICAgfSk7XG4gICAgcmV0dXJuIFwiTEFTVFwiID09PSB0LmxpbWl0VHlwZSA/IFZuKGUsIGUubGltaXQsIFwiTFwiIC8qIExhc3QgKi8pIDogZTtcbn1cblxuLyoqIEVuY29kZXMgYSBOYW1lZFF1ZXJ5IHByb3RvIG9iamVjdCB0byBhIE5hbWVkUXVlcnkgbW9kZWwgb2JqZWN0LiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBBIG11dGF0aW9uIHF1ZXVlIGZvciBhIHNwZWNpZmljIHVzZXIsIGJhY2tlZCBieSBJbmRleGVkREIuICovIHZhciBmaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChcbiAgICAvKipcbiAgICAgKiBUaGUgbm9ybWFsaXplZCB1c2VySWQgKGUuZy4gbnVsbCBVSUQgPT4gXCJcIiB1c2VySWQpIHVzZWQgdG8gc3RvcmUgL1xuICAgICAqIHJldHJpZXZlIG11dGF0aW9ucy5cbiAgICAgKi9cbiAgICB0LCBlLCBuLCByKSB7XG4gICAgICAgIHRoaXMudXNlcklkID0gdCwgdGhpcy5zZXJpYWxpemVyID0gZSwgdGhpcy5GaSA9IG4sIHRoaXMuTHIgPSByLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWNoZXMgdGhlIGRvY3VtZW50IGtleXMgZm9yIHBlbmRpbmcgbXV0YXRpb24gYmF0Y2hlcy4gSWYgdGhlIG11dGF0aW9uXG4gICAgICAgICAgICAgKiBoYXMgYmVlbiByZW1vdmVkIGZyb20gSW5kZXhlZERiLCB0aGUgY2FjaGVkIHZhbHVlIG1heSBjb250aW51ZSB0b1xuICAgICAgICAgICAgICogYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgYmF0Y2gncyBkb2N1bWVudCBrZXlzLiBUbyByZW1vdmUgYSBjYWNoZWQgdmFsdWVcbiAgICAgICAgICAgICAqIGxvY2FsbHksIGByZW1vdmVDYWNoZWRNdXRhdGlvbktleXMoKWAgc2hvdWxkIGJlIGludm9rZWQgZWl0aGVyIGRpcmVjdGx5XG4gICAgICAgICAgICAgKiBvciB0aHJvdWdoIGByZW1vdmVNdXRhdGlvbkJhdGNoZXMoKWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogV2l0aCBtdWx0aS10YWIsIHdoZW4gdGhlIHByaW1hcnkgY2xpZW50IGFja25vd2xlZGdlcyBvciByZWplY3RzIGEgbXV0YXRpb24sXG4gICAgICAgICAgICAgKiB0aGlzIGNhY2hlIGlzIHVzZWQgYnkgc2Vjb25kYXJ5IGNsaWVudHMgdG8gaW52YWxpZGF0ZSB0aGUgbG9jYWxcbiAgICAgICAgICAgICAqIHZpZXcgb2YgdGhlIGRvY3VtZW50cyB0aGF0IHdlcmUgcHJldmlvdXNseSBhZmZlY3RlZCBieSB0aGUgbXV0YXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICAgICAgdGhpcy5CciA9IHt9XG4gICAgICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgbXV0YXRpb24gcXVldWUgZm9yIHRoZSBnaXZlbiB1c2VyLlxuICAgICAqIEBwYXJhbSB1c2VyIFRoZSB1c2VyIGZvciB3aGljaCB0byBjcmVhdGUgYSBtdXRhdGlvbiBxdWV1ZS5cbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplciBUaGUgc2VyaWFsaXplciB0byB1c2Ugd2hlbiBwZXJzaXN0aW5nIHRvIEluZGV4ZWREYi5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LnFyID0gZnVuY3Rpb24oZSwgbiwgciwgaSkge1xuICAgICAgICAvLyBUT0RPKG1jZyk6IEZpZ3VyZSBvdXQgd2hhdCBjb25zdHJhaW50cyB0aGVyZSBhcmUgb24gdXNlcklEc1xuICAgICAgICAvLyBJbiBwYXJ0aWN1bGFyLCBhcmUgdGhlcmUgYW55IHJlc2VydmVkIGNoYXJhY3RlcnM/IGFyZSBlbXB0eSBpZHMgYWxsb3dlZD9cbiAgICAgICAgLy8gRm9yIHRoZSBtb21lbnQgc3RvcmUgdGhlc2UgdG9nZXRoZXIgaW4gdGhlIHNhbWUgbXV0YXRpb25zIHRhYmxlIGFzc3VtaW5nXG4gICAgICAgIC8vIHRoYXQgZW1wdHkgdXNlcklEcyBhcmVuJ3QgYWxsb3dlZC5cbiAgICAgICAgcmV0dXJuIGsoXCJcIiAhPT0gZS51aWQpLCBuZXcgdChlLkpzKCkgPyBlLnVpZCA6IFwiXCIsIG4sIHIsIGkpO1xuICAgIH0sIHQucHJvdG90eXBlLlVyID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9ICEwLCBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZIF0sIFsgdGhpcy51c2VySWQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKTtcbiAgICAgICAgcmV0dXJuIGRpKHQpLm5zKHtcbiAgICAgICAgICAgIGluZGV4OiBraS51c2VyTXV0YXRpb25zSW5kZXgsXG4gICAgICAgICAgICByYW5nZTogblxuICAgICAgICB9LCAoZnVuY3Rpb24odCwgbiwgcikge1xuICAgICAgICAgICAgZSA9ICExLCByLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5RciA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLCBvID0gdmkodCksIHUgPSBkaSh0KTtcbiAgICAgICAgLy8gVGhlIEluZGV4ZWREYiBpbXBsZW1lbnRhdGlvbiBpbiBDaHJvbWUgKGFuZCBGaXJlZm94KSBkb2VzIG5vdCBoYW5kbGVcbiAgICAgICAgLy8gY29tcG91bmQgaW5kaWNlcyB0aGF0IGluY2x1ZGUgYXV0by1nZW5lcmF0ZWQga2V5cyBjb3JyZWN0bHkuIFRvIGVuc3VyZVxuICAgICAgICAvLyB0aGF0IHRoZSBpbmRleCBlbnRyeSBpcyBhZGRlZCBjb3JyZWN0bHkgaW4gYWxsIGJyb3dzZXJzLCB3ZSBwZXJmb3JtIHR3b1xuICAgICAgICAvLyB3cml0ZXM6IFRoZSBmaXJzdCB3cml0ZSBpcyB1c2VkIHRvIHJldHJpZXZlIHRoZSBuZXh0IGF1dG8tZ2VuZXJhdGVkIEJhdGNoXG4gICAgICAgIC8vIElELCBhbmQgdGhlIHNlY29uZCB3cml0ZSBwb3B1bGF0ZXMgdGhlIGluZGV4IGFuZCBzdG9yZXMgdGhlIGFjdHVhbFxuICAgICAgICAvLyBtdXRhdGlvbiBiYXRjaC5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03MDE5NzJcbiAgICAgICAgLy8gV2Ugd3JpdGUgYW4gZW1wdHkgb2JqZWN0IHRvIG9idGFpbiBrZXlcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIHUuYWRkKHt9KS5uZXh0KChmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICBrKFwibnVtYmVyXCIgPT0gdHlwZW9mIHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgYSA9IG5ldyBDcihzLCBlLCBuLCByKSwgYyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IG4uYmFzZU11dGF0aW9ucy5tYXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEllKHQuJHIsIGUpO1xuICAgICAgICAgICAgICAgIH0pKSwgaSA9IG4ubXV0YXRpb25zLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSWUodC4kciwgZSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcga2koZSwgbi5iYXRjaElkLCBuLmxpLnRvTWlsbGlzKCksIHIsIGkpO1xuICAgICAgICAgICAgfShpLnNlcmlhbGl6ZXIsIGkudXNlcklkLCBhKSwgaCA9IFtdLCBmID0gbmV3IHB0KChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFYodC5NKCksIGUuTSgpKTtcbiAgICAgICAgICAgIH0pKSwgbCA9IDAsIHAgPSByOyBsIDwgcC5sZW5ndGg7IGwrKykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gcFtsXSwgdiA9IERpLmtleShpLnVzZXJJZCwgZC5rZXkucGF0aCwgcyk7XG4gICAgICAgICAgICAgICAgZiA9IGYuYWRkKGQua2V5LnBhdGguUygpKSwgaC5wdXNoKHUucHV0KGMpKSwgaC5wdXNoKG8ucHV0KHYsIERpLlBMQUNFSE9MREVSKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZi5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaC5wdXNoKGkuRmkuS3IodCwgZSkpO1xuICAgICAgICAgICAgfSkpLCB0LkRpKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpLkJyW3NdID0gYS5rZXlzKCk7XG4gICAgICAgICAgICB9KSksIG9yLnhuKGgpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuV3IgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGRpKHQpLmdldChlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCA/IChrKHQudXNlcklkID09PSBuLnVzZXJJZCksIHNpKG4uc2VyaWFsaXplciwgdCkpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvY3VtZW50IGtleXMgZm9yIHRoZSBtdXRhdGlvbiBiYXRjaCB3aXRoIHRoZSBnaXZlbiBiYXRjaElkLlxuICAgICAqIEZvciBwcmltYXJ5IGNsaWVudHMsIHRoaXMgbWV0aG9kIHJldHVybnMgYG51bGxgIGFmdGVyXG4gICAgICogYHJlbW92ZU11dGF0aW9uQmF0Y2hlcygpYCBoYXMgYmVlbiBjYWxsZWQuIFNlY29uZGFyeSBjbGllbnRzIHJldHVybiBhXG4gICAgICogY2FjaGVkIHJlc3VsdCB1bnRpbCBgcmVtb3ZlQ2FjaGVkTXV0YXRpb25LZXlzKClgIGlzIGludm9rZWQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICB0LnByb3RvdHlwZS5qciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5CcltlXSA/IG9yLnJlc29sdmUodGhpcy5CcltlXSkgOiB0aGlzLldyKHQsIGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0LmtleXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5CcltlXSA9IHIsIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkdyID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlICsgMSwgaSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoWyB0aGlzLnVzZXJJZCwgciBdKSwgbyA9IG51bGw7XG4gICAgICAgIHJldHVybiBkaSh0KS5ucyh7XG4gICAgICAgICAgICBpbmRleDoga2kudXNlck11dGF0aW9uc0luZGV4LFxuICAgICAgICAgICAgcmFuZ2U6IGlcbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGUsIGkpIHtcbiAgICAgICAgICAgIGUudXNlcklkID09PSBuLnVzZXJJZCAmJiAoayhlLmJhdGNoSWQgPj0gciksIG8gPSBzaShuLnNlcmlhbGl6ZXIsIGUpKSwgaS5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuenIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gSURCS2V5UmFuZ2UudXBwZXJCb3VuZChbIHRoaXMudXNlcklkLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgXSksIG4gPSAtMTtcbiAgICAgICAgcmV0dXJuIGRpKHQpLm5zKHtcbiAgICAgICAgICAgIGluZGV4OiBraS51c2VyTXV0YXRpb25zSW5kZXgsXG4gICAgICAgICAgICByYW5nZTogZSxcbiAgICAgICAgICAgIHJldmVyc2U6ICEwXG4gICAgICAgIH0sIChmdW5jdGlvbih0LCBlLCByKSB7XG4gICAgICAgICAgICBuID0gZS5iYXRjaElkLCByLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5IciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gSURCS2V5UmFuZ2UuYm91bmQoWyB0aGlzLnVzZXJJZCwgLTEgXSwgWyB0aGlzLnVzZXJJZCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIF0pO1xuICAgICAgICByZXR1cm4gZGkodCkuWG4oa2kudXNlck11dGF0aW9uc0luZGV4LCBuKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2koZS5zZXJpYWxpemVyLCB0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLk1pID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBEaS5wcmVmaXhGb3JQYXRoKHRoaXMudXNlcklkLCBlLnBhdGgpLCBpID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChyKSwgbyA9IFtdO1xuICAgICAgICAvLyBTY2FuIHRoZSBkb2N1bWVudC1tdXRhdGlvbiBpbmRleCBzdGFydGluZyB3aXRoIGEgcHJlZml4IHN0YXJ0aW5nIHdpdGhcbiAgICAgICAgLy8gdGhlIGdpdmVuIGRvY3VtZW50S2V5LlxuICAgICAgICAgICAgICAgIHJldHVybiB2aSh0KS5ucyh7XG4gICAgICAgICAgICByYW5nZTogaVxuICAgICAgICB9LCAoZnVuY3Rpb24ociwgaSwgdSkge1xuICAgICAgICAgICAgdmFyIHMgPSByWzBdLCBhID0gclsxXSwgYyA9IHJbMl0sIGggPSBacihhKTtcbiAgICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgcm93cyBtYXRjaGluZyBleGFjdGx5IHRoZSBzcGVjaWZpYyBrZXkgb2ZcbiAgICAgICAgICAgIC8vIGludGVyZXN0LiBOb3RlIHRoYXQgYmVjYXVzZSB3ZSBvcmRlciBieSBwYXRoIGZpcnN0LCBhbmQgd2VcbiAgICAgICAgICAgIC8vIG9yZGVyIHRlcm1pbmF0b3JzIGJlZm9yZSBwYXRoIHNlcGFyYXRvcnMsIHdlJ2xsIGVuY291bnRlciBhbGxcbiAgICAgICAgICAgIC8vIHRoZSBpbmRleCByb3dzIGZvciBkb2N1bWVudEtleSBjb250aWd1b3VzbHkuIEluIHBhcnRpY3VsYXIsIGFsbFxuICAgICAgICAgICAgLy8gdGhlIHJvd3MgZm9yIGRvY3VtZW50S2V5IHdpbGwgb2NjdXIgYmVmb3JlIGFueSByb3dzIGZvclxuICAgICAgICAgICAgLy8gZG9jdW1lbnRzIG5lc3RlZCBpbiBhIHN1YmNvbGxlY3Rpb24gYmVuZWF0aCBkb2N1bWVudEtleSBzbyB3ZVxuICAgICAgICAgICAgLy8gY2FuIHN0b3AgYXMgc29vbiBhcyB3ZSBoaXQgYW55IHN1Y2ggcm93LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09IG4udXNlcklkICYmIGUucGF0aC5pc0VxdWFsKGgpKSBcbiAgICAgICAgICAgIC8vIExvb2sgdXAgdGhlIG11dGF0aW9uIGJhdGNoIGluIHRoZSBzdG9yZS5cbiAgICAgICAgICAgIHJldHVybiBkaSh0KS5nZXQoYykubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGlmICghdCkgdGhyb3cgUygpO1xuICAgICAgICAgICAgICAgIGsodC51c2VySWQgPT09IG4udXNlcklkKSwgby5wdXNoKHNpKG4uc2VyaWFsaXplciwgdCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdS5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucWkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IG5ldyBwdChWKSwgaSA9IFtdO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgbyA9IERpLnByZWZpeEZvclBhdGgobi51c2VySWQsIGUucGF0aCksIHUgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKG8pLCBzID0gdmkodCkubnMoe1xuICAgICAgICAgICAgICAgIHJhbmdlOiB1XG4gICAgICAgICAgICB9LCAoZnVuY3Rpb24odCwgaSwgbykge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gdFswXSwgcyA9IHRbMV0sIGEgPSB0WzJdLCBjID0gWnIocyk7XG4gICAgICAgICAgICAgICAgLy8gT25seSBjb25zaWRlciByb3dzIG1hdGNoaW5nIGV4YWN0bHkgdGhlIHNwZWNpZmljIGtleSBvZlxuICAgICAgICAgICAgICAgIC8vIGludGVyZXN0LiBOb3RlIHRoYXQgYmVjYXVzZSB3ZSBvcmRlciBieSBwYXRoIGZpcnN0LCBhbmQgd2VcbiAgICAgICAgICAgICAgICAvLyBvcmRlciB0ZXJtaW5hdG9ycyBiZWZvcmUgcGF0aCBzZXBhcmF0b3JzLCB3ZSdsbCBlbmNvdW50ZXIgYWxsXG4gICAgICAgICAgICAgICAgLy8gdGhlIGluZGV4IHJvd3MgZm9yIGRvY3VtZW50S2V5IGNvbnRpZ3VvdXNseS4gSW4gcGFydGljdWxhciwgYWxsXG4gICAgICAgICAgICAgICAgLy8gdGhlIHJvd3MgZm9yIGRvY3VtZW50S2V5IHdpbGwgb2NjdXIgYmVmb3JlIGFueSByb3dzIGZvclxuICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50cyBuZXN0ZWQgaW4gYSBzdWJjb2xsZWN0aW9uIGJlbmVhdGggZG9jdW1lbnRLZXkgc28gd2VcbiAgICAgICAgICAgICAgICAvLyBjYW4gc3RvcCBhcyBzb29uIGFzIHdlIGhpdCBhbnkgc3VjaCByb3cuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPT09IG4udXNlcklkICYmIGUucGF0aC5pc0VxdWFsKGMpID8gciA9IHIuYWRkKGEpIDogby5kb25lKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpLnB1c2gocyk7XG4gICAgICAgIH0pKSwgb3IueG4oaSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5Kcih0LCByKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkdpID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlLnBhdGgsIGkgPSByLmxlbmd0aCArIDEsIG8gPSBEaS5wcmVmaXhGb3JQYXRoKHRoaXMudXNlcklkLCByKSwgdSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQobyksIHMgPSBuZXcgcHQoVik7XG4gICAgICAgIHJldHVybiB2aSh0KS5ucyh7XG4gICAgICAgICAgICByYW5nZTogdVxuICAgICAgICB9LCAoZnVuY3Rpb24odCwgZSwgbykge1xuICAgICAgICAgICAgdmFyIHUgPSB0WzBdLCBhID0gdFsxXSwgYyA9IHRbMl0sIGggPSBacihhKTtcbiAgICAgICAgICAgIHUgPT09IG4udXNlcklkICYmIHIuTihoKSA/IFxuICAgICAgICAgICAgLy8gUm93cyB3aXRoIGRvY3VtZW50IGtleXMgbW9yZSB0aGFuIG9uZSBzZWdtZW50IGxvbmdlciB0aGFuIHRoZVxuICAgICAgICAgICAgLy8gcXVlcnkgcGF0aCBjYW4ndCBiZSBtYXRjaGVzLiBGb3IgZXhhbXBsZSwgYSBxdWVyeSBvbiAncm9vbXMnXG4gICAgICAgICAgICAvLyBjYW4ndCBtYXRjaCB0aGUgZG9jdW1lbnQgL3Jvb21zL2FiYy9tZXNzYWdlcy94eXguXG4gICAgICAgICAgICAvLyBUT0RPKG1jZyk6IHdlJ2xsIG5lZWQgYSBkaWZmZXJlbnQgc2Nhbm5lciB3aGVuIHdlIGltcGxlbWVudFxuICAgICAgICAgICAgLy8gYW5jZXN0b3IgcXVlcmllcy5cbiAgICAgICAgICAgIGgubGVuZ3RoID09PSBpICYmIChzID0gcy5hZGQoYykpIDogby5kb25lKCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuLkpyKHQsIHMpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuSnIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IFtdLCBpID0gW107XG4gICAgICAgIC8vIFRPRE8ocm9ja3dvb2QpOiBJbXBsZW1lbnQgdGhpcyB1c2luZyBpdGVyYXRlLlxuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpLnB1c2goZGkodCkuZ2V0KGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdCkgdGhyb3cgUygpO1xuICAgICAgICAgICAgICAgIGsodC51c2VySWQgPT09IG4udXNlcklkKSwgci5wdXNoKHNpKG4uc2VyaWFsaXplciwgdCkpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfSkpLCBvci54bihpKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuWXIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHBpKHQuWHIsIHRoaXMudXNlcklkLCBlKS5uZXh0KChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5EaSgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbi5acihlLmJhdGNoSWQpO1xuICAgICAgICAgICAgfSkpLCBvci5mb3JFYWNoKHIsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uTHIuZW8odCwgZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGNhY2hlZCBrZXlzIGZvciBhIG11dGF0aW9uIGJhdGNoLiBUaGlzIG1ldGhvZCBzaG91bGQgYmVcbiAgICAgKiBjYWxsZWQgYnkgc2Vjb25kYXJ5IGNsaWVudHMgYWZ0ZXIgdGhleSBwcm9jZXNzIG11dGF0aW9uIHVwZGF0ZXMuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgZG9lcyBub3QgaGF2ZSB0byBiZSBjYWxsZWQgZnJvbSBwcmltYXJ5IGNsaWVudHMgYXNcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBjYWNoZSBlbnRyaWVzIGFyZSBjbGVhcmVkIHdoZW4gYW4gYWNrbm93bGVkZ2VkIG9yXG4gICAgICogcmVqZWN0ZWQgYmF0Y2ggaXMgcmVtb3ZlZCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZS5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5XG4gICAgdC5wcm90b3R5cGUuWnIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLkJyW3RdO1xuICAgIH0sIHQucHJvdG90eXBlLm5vID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLlVyKHQpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIGlmICghbikgcmV0dXJuIG9yLnJlc29sdmUoKTtcbiAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZXJlIGFyZSBubyBlbnRyaWVzIGluIHRoZSBkb2N1bWVudE11dGF0aW9ucyBpbmRleCBpZlxuICAgICAgICAgICAgLy8gdGhlIHF1ZXVlIGlzIGVtcHR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBJREJLZXlSYW5nZS5sb3dlckJvdW5kKERpLnByZWZpeEZvclVzZXIoZS51c2VySWQpKSwgaSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHZpKHQpLm5zKHtcbiAgICAgICAgICAgICAgICByYW5nZTogclxuICAgICAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIG4sIHIpIHtcbiAgICAgICAgICAgICAgICBpZiAodFswXSA9PT0gZS51c2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBacih0WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG8pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSByLmRvbmUoKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBrKDAgPT09IGkubGVuZ3RoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnNvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gbGkodCwgdGhpcy51c2VySWQsIGUpO1xuICAgIH0sIFxuICAgIC8vIFBPUlRJTkcgTk9URTogTXVsdGktdGFiIG9ubHkgKHN0YXRlIGlzIGhlbGQgaW4gbWVtb3J5IGluIG90aGVyIGNsaWVudHMpLlxuICAgIC8qKiBSZXR1cm5zIHRoZSBtdXRhdGlvbiBxdWV1ZSdzIG1ldGFkYXRhIGZyb20gSW5kZXhlZERiLiAqL1xuICAgIHQucHJvdG90eXBlLmlvID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB5aSh0KS5nZXQodGhpcy51c2VySWQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0IHx8IG5ldyBTaShlLnVzZXJJZCwgLTEsIFxuICAgICAgICAgICAgLypsYXN0U3RyZWFtVG9rZW49Ki8gXCJcIik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpO1xuXG4vKipcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgbXV0YXRpb24gcXVldWUgZm9yIHRoZSBnaXZlbiB1c2VyIGNvbnRhaW5zIGEgcGVuZGluZ1xuICogICAgICAgICBtdXRhdGlvbiBmb3IgdGhlIGdpdmVuIGtleS5cbiAqLyBmdW5jdGlvbiBsaSh0LCBlLCBuKSB7XG4gICAgdmFyIHIgPSBEaS5wcmVmaXhGb3JQYXRoKGUsIG4ucGF0aCksIGkgPSByWzFdLCBvID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChyKSwgdSA9ICExO1xuICAgIHJldHVybiB2aSh0KS5ucyh7XG4gICAgICAgIHJhbmdlOiBvLFxuICAgICAgICBlczogITBcbiAgICB9LCAoZnVuY3Rpb24odCwgbiwgcikge1xuICAgICAgICB2YXIgbyA9IHRbMF0sIHMgPSB0WzFdO1xuICAgICAgICB0WzJdO1xuICAgICAgICBvID09PSBlICYmIHMgPT09IGkgJiYgKHUgPSAhMCksIHIuZG9uZSgpO1xuICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHU7XG4gICAgfSkpO1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIGFueSBtdXRhdGlvbiBxdWV1ZSBjb250YWlucyB0aGUgZ2l2ZW4gZG9jdW1lbnQuICovXG4vKipcbiAqIERlbGV0ZSBhIG11dGF0aW9uIGJhdGNoIGFuZCB0aGUgYXNzb2NpYXRlZCBkb2N1bWVudCBtdXRhdGlvbnMuXG4gKiBAcmV0dXJuIEEgUGVyc2lzdGVuY2VQcm9taXNlIG9mIHRoZSBkb2N1bWVudCBtdXRhdGlvbnMgdGhhdCB3ZXJlIHJlbW92ZWQuXG4gKi8gZnVuY3Rpb24gcGkodCwgZSwgbikge1xuICAgIHZhciByID0gdC5zdG9yZShraS5zdG9yZSksIGkgPSB0LnN0b3JlKERpLnN0b3JlKSwgbyA9IFtdLCB1ID0gSURCS2V5UmFuZ2Uub25seShuLmJhdGNoSWQpLCBzID0gMCwgYSA9IHIubnMoe1xuICAgICAgICByYW5nZTogdVxuICAgIH0sIChmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBzKyssIG4uZGVsZXRlKCk7XG4gICAgfSkpO1xuICAgIG8ucHVzaChhLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICBrKDEgPT09IHMpO1xuICAgIH0pKSk7XG4gICAgZm9yICh2YXIgYyA9IFtdLCBoID0gMCwgZiA9IG4ubXV0YXRpb25zOyBoIDwgZi5sZW5ndGg7IGgrKykge1xuICAgICAgICB2YXIgbCA9IGZbaF0sIHAgPSBEaS5rZXkoZSwgbC5rZXkucGF0aCwgbi5iYXRjaElkKTtcbiAgICAgICAgby5wdXNoKGkuZGVsZXRlKHApKSwgYy5wdXNoKGwua2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG9yLnhuKG8pLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYztcbiAgICB9KSk7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBtdXRhdGlvbnMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIGRpKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwga2kuc3RvcmUpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgbXV0YXRpb25RdWV1ZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIHZpKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwgRGkuc3RvcmUpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgbXV0YXRpb25RdWV1ZXMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIHlpKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwgU2kuc3RvcmUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGUgUmVtb3RlRG9jdW1lbnRDYWNoZSBmb3IgSW5kZXhlZERiLiBUbyBjb25zdHJ1Y3QsIGludm9rZVxuICogYG5ld0luZGV4ZWREYlJlbW90ZURvY3VtZW50Q2FjaGUoKWAuXG4gKi8gdmFyIGdpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplciBUaGUgZG9jdW1lbnQgc2VyaWFsaXplci5cbiAgICAgKiBAcGFyYW0gaW5kZXhNYW5hZ2VyIFRoZSBxdWVyeSBpbmRleGVzIHRoYXQgbmVlZCB0byBiZSBtYWludGFpbmVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSB0LCB0aGlzLkZpID0gZVxuICAgICAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBzdXBwbGllZCBlbnRyaWVzIHRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgYWRkRW50cnlgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAgdG8gZW5zdXJlIHByb3BlciBhY2NvdW50aW5nIG9mIG1ldGFkYXRhLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLlJpID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICByZXR1cm4gYmkodCkucHV0KF9pKGUpLCBuKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgZG9jdW1lbnQgZnJvbSB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBBbGwgY2FsbHMgb2YgYHJlbW92ZUVudHJ5YCAgYXJlIHJlcXVpcmVkIHRvIGdvIHRocm91Z2ggdGhlIFJlbW90ZURvY3VtZW50Q2hhbmdlQnVmZmVyXG4gICAgICogcmV0dXJuZWQgYnkgYG5ld0NoYW5nZUJ1ZmZlcigpYCB0byBlbnN1cmUgcHJvcGVyIGFjY291bnRpbmcgb2YgbWV0YWRhdGEuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVmkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gYmkodCksIHIgPSBfaShlKTtcbiAgICAgICAgcmV0dXJuIG4uZGVsZXRlKHIpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgY2FjaGUgc2l6ZS5cbiAgICAgKlxuICAgICAqIENhbGxlcnMgdG8gYGFkZEVudHJ5KClgIGFuZCBgcmVtb3ZlRW50cnkoKWAgKm11c3QqIGNhbGwgdGhpcyBhZnRlcndhcmRzIHRvIHVwZGF0ZSB0aGVcbiAgICAgKiBjYWNoZSdzIG1ldGFkYXRhLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnVwZGF0ZU1ldGFkYXRhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1ldGFkYXRhKHQpLm5leHQoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgIHJldHVybiByLmJ5dGVTaXplICs9IGUsIG4ucm8odCwgcik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS55aSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gYmkodCkuZ2V0KF9pKGUpKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbi5vbyh0KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIGFuIGVudHJ5IGluIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudEtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm4gVGhlIGNhY2hlZCBNYXliZURvY3VtZW50IGVudHJ5IGFuZCBpdHMgc2l6ZSwgb3IgbnVsbCBpZiB3ZSBoYXZlIG5vdGhpbmcgY2FjaGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmFvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBiaSh0KS5nZXQoX2koZSkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gbi5vbyh0KTtcbiAgICAgICAgICAgIHJldHVybiBlID8ge1xuICAgICAgICAgICAgICAgIGdpOiBlLFxuICAgICAgICAgICAgICAgIHNpemU6IElpKHQpXG4gICAgICAgICAgICB9IDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmdldEVudHJpZXMgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IGd0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvKHQsIGUsIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG4ub28oZSk7XG4gICAgICAgICAgICByID0gci5ydCh0LCBpKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBzZXZlcmFsIGVudHJpZXMgaW4gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50S2V5cyBUaGUgc2V0IG9mIGtleXMgZW50cmllcyB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm4gQSBtYXAgb2YgTWF5YmVEb2N1bWVudHMgaW5kZXhlZCBieSBrZXkgKGlmIGEgZG9jdW1lbnQgY2Fubm90IGJlXG4gICAgICogICAgIGZvdW5kLCB0aGUga2V5IHdpbGwgYmUgbWFwcGVkIHRvIG51bGwpIGFuZCBhIG1hcCBvZiBzaXplcyBpbmRleGVkIGJ5XG4gICAgICogICAgIGtleSAoemVybyBpZiB0aGUga2V5IGNhbm5vdCBiZSBmb3VuZCkuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudW8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IGd0KCksIGkgPSBuZXcgaHQoWS5WKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY28odCwgZSwgKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBvID0gbi5vbyhlKTtcbiAgICAgICAgICAgIG8gPyAociA9IHIucnQodCwgbyksIGkgPSBpLnJ0KHQsIElpKGUpKSkgOiAociA9IHIucnQodCwgbnVsbCksIGkgPSBpLnJ0KHQsIDApKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBobzogcixcbiAgICAgICAgICAgICAgICBsbzogaVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmNvID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICBpZiAoZS5UKCkpIHJldHVybiBvci5yZXNvbHZlKCk7XG4gICAgICAgIHZhciByID0gSURCS2V5UmFuZ2UuYm91bmQoZS5maXJzdCgpLnBhdGguTygpLCBlLmxhc3QoKS5wYXRoLk8oKSksIGkgPSBlLmx0KCksIG8gPSBpLkV0KCk7XG4gICAgICAgIHJldHVybiBiaSh0KS5ucyh7XG4gICAgICAgICAgICByYW5nZTogclxuICAgICAgICB9LCAoZnVuY3Rpb24odCwgZSwgcikge1xuICAgICAgICAgICAgLy8gR28gdGhyb3VnaCBrZXlzIG5vdCBmb3VuZCBpbiBjYWNoZS5cbiAgICAgICAgICAgIGZvciAodmFyIHUgPSBZLkgodCk7IG8gJiYgWS5WKG8sIHUpIDwgMDsgKSBuKG8sIG51bGwpLCBvID0gaS5FdCgpO1xuICAgICAgICAgICAgbyAmJiBvLmlzRXF1YWwodSkgJiYgKFxuICAgICAgICAgICAgLy8gS2V5IGZvdW5kIGluIGNhY2hlLlxuICAgICAgICAgICAgbihvLCBlKSwgbyA9IGkuSXQoKSA/IGkuRXQoKSA6IG51bGwpLCBcbiAgICAgICAgICAgIC8vIFNraXAgdG8gdGhlIG5leHQga2V5IChpZiB0aGVyZSBpcyBvbmUpLlxuICAgICAgICAgICAgbyA/IHIuSm4oby5wYXRoLk8oKSkgOiByLmRvbmUoKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIGtleXMgYXJlIG5vdCBpbiB0aGUgY2FjaGUuIE9uZSBjYXNlIHdoZXJlIGBpdGVyYXRlYFxuICAgICAgICAgICAgLy8gYWJvdmUgd29uJ3QgZ28gdGhyb3VnaCB0aGVtIGlzIHdoZW4gdGhlIGNhY2hlIGlzIGVtcHR5LlxuICAgICAgICAgICAgZm9yICg7bzsgKSBuKG8sIG51bGwpLCBvID0gaS5JdCgpID8gaS5FdCgpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlVpID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSB3dCgpLCBvID0gZS5wYXRoLmxlbmd0aCArIDEsIHUgPSB7fTtcbiAgICAgICAgaWYgKG4uaXNFcXVhbCh6Lm1pbigpKSkge1xuICAgICAgICAgICAgLy8gRG9jdW1lbnRzIGFyZSBvcmRlcmVkIGJ5IGtleSwgc28gd2UgY2FuIHVzZSBhIHByZWZpeCBzY2FuIHRvIG5hcnJvd1xuICAgICAgICAgICAgLy8gZG93biB0aGUgZG9jdW1lbnRzIHdlIG5lZWQgdG8gbWF0Y2ggdGhlIHF1ZXJ5IGFnYWluc3QuXG4gICAgICAgICAgICB2YXIgcyA9IGUucGF0aC5PKCk7XG4gICAgICAgICAgICB1LnJhbmdlID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgYW4gaW5kZXgtZnJlZSBxdWVyeSBhbmQgZmlsdGVyIGJ5IHJlYWQgdGltZS4gVGhpcyBpcyBzYWZlXG4gICAgICAgICAgICAvLyBzaW5jZSBhbGwgZG9jdW1lbnQgY2hhbmdlcyB0byBxdWVyaWVzIHRoYXQgaGF2ZSBhXG4gICAgICAgICAgICAvLyBsYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uIChgc2luY2VSZWFkVGltZWApIGhhdmUgYSByZWFkIHRpbWUgc2V0LlxuICAgICAgICAgICAgdmFyIGEgPSBlLnBhdGguTygpLCBjID0gcmkobik7XG4gICAgICAgICAgICB1LnJhbmdlID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChbIGEsIGMgXSwgXG4gICAgICAgICAgICAvKiBvcGVuPSAqLyAhMCksIHUuaW5kZXggPSBWaS5jb2xsZWN0aW9uUmVhZFRpbWVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmkodCkubnModSwgKGZ1bmN0aW9uKHQsIG4sIHUpIHtcbiAgICAgICAgICAgIC8vIFRoZSBxdWVyeSBpcyBhY3R1YWxseSByZXR1cm5pbmcgYW55IHBhdGggdGhhdCBzdGFydHMgd2l0aCB0aGUgcXVlcnlcbiAgICAgICAgICAgIC8vIHBhdGggcHJlZml4IHdoaWNoIG1heSBpbmNsdWRlIGRvY3VtZW50cyBpbiBzdWJjb2xsZWN0aW9ucy4gRm9yXG4gICAgICAgICAgICAvLyBleGFtcGxlLCBhIHF1ZXJ5IG9uICdyb29tcycgd2lsbCByZXR1cm4gcm9vbXMvYWJjL21lc3NhZ2VzL3h5eCBidXQgd2VcbiAgICAgICAgICAgIC8vIHNob3VsZG4ndCBtYXRjaCBpdC4gRml4IHRoaXMgYnkgZGlzY2FyZGluZyByb3dzIHdpdGggZG9jdW1lbnQga2V5c1xuICAgICAgICAgICAgLy8gbW9yZSB0aGFuIG9uZSBzZWdtZW50IGxvbmdlciB0aGFuIHRoZSBxdWVyeSBwYXRoLlxuICAgICAgICAgICAgaWYgKHQubGVuZ3RoID09PSBvKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlaShyLnNlcmlhbGl6ZXIsIG4pO1xuICAgICAgICAgICAgICAgIGUucGF0aC5OKHMua2V5LnBhdGgpID8gcyBpbnN0YW5jZW9mIGJuICYmIHFuKGUsIHMpICYmIChpID0gaS5ydChzLmtleSwgcykpIDogdS5kb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuX28gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgbWkodGhpcywgISF0ICYmIHQuZm8pO1xuICAgIH0sIHQucHJvdG90eXBlLndvID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRhZGF0YSh0KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5ieXRlU2l6ZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmdldE1ldGFkYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gd2kodCkuZ2V0KENpLmtleSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGsoISF0KSwgdDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnJvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gd2kodCkucHV0KENpLmtleSwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBgcmVtb3RlRG9jYCBhbmQgcmV0dXJucyB0aGUgZG9jdW1lbnQgKG9yIG51bGwsIGlmIHRoZSBkb2N1bWVudFxuICAgICAqIGNvcnJlc3BvbmRzIHRvIHRoZSBmb3JtYXQgdXNlZCBmb3Igc2VudGluZWwgZGVsZXRlcykuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUub28gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IGVpKHRoaXMuc2VyaWFsaXplciwgdCk7XG4gICAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIF9uICYmIGUudmVyc2lvbi5pc0VxdWFsKHoubWluKCkpID8gbnVsbCA6IGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgdDtcbn0oKSwgbWkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRDYWNoZSBUaGUgSW5kZXhlZERiUmVtb3RlRG9jdW1lbnRDYWNoZSB0byBhcHBseSB0aGUgY2hhbmdlcyB0by5cbiAgICAgKiBAcGFyYW0gdHJhY2tSZW1vdmFscyBXaGV0aGVyIHRvIGNyZWF0ZSBzZW50aW5lbCBkZWxldGVzIHRoYXQgY2FuIGJlIHRyYWNrZWQgYnlcbiAgICAgKiBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzKSB8fCB0aGlzKS5UbyA9IHQsIHIuZm8gPSBuLCBcbiAgICAgICAgLy8gQSBtYXAgb2YgZG9jdW1lbnQgc2l6ZXMgcHJpb3IgdG8gYXBwbHlpbmcgdGhlIGNoYW5nZXMgaW4gdGhpcyBidWZmZXIuXG4gICAgICAgIHIuRW8gPSBuZXcgcSgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHQudG9TdHJpbmcoKTtcbiAgICAgICAgfSksIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5pc0VxdWFsKGUpO1xuICAgICAgICB9KSksIHI7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5iaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gW10sIHIgPSAwLCBpID0gbmV3IHB0KChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gVih0Lk0oKSwgZS5NKCkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLklpLmZvckVhY2goKGZ1bmN0aW9uKG8sIHUpIHtcbiAgICAgICAgICAgIHZhciBzID0gZS5Fby5nZXQobyk7XG4gICAgICAgICAgICBpZiAodS5naSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gbmkoZS5Uby5zZXJpYWxpemVyLCB1LmdpLCBlLkFpKG8pKTtcbiAgICAgICAgICAgICAgICBpID0gaS5hZGQoby5wYXRoLlMoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBJaShhKTtcbiAgICAgICAgICAgICAgICByICs9IGMgLSBzLCBuLnB1c2goZS5Uby5SaSh0LCBvLCBhKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHIgLT0gcywgZS5mbykge1xuICAgICAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIHRyYWNrIHJlbW92YWxzLCB3ZSBzdG9yZSBhIFwic2VudGluZWwgZGVsZXRlXCIgaW4gdGhlXG4gICAgICAgICAgICAgICAgLy8gUmVtb3RlRG9jdW1lbnRDYWNoZS4gVGhpcyBlbnRyeSBpcyByZXByZXNlbnRlZCBieSBhIE5vRG9jdW1lbnRcbiAgICAgICAgICAgICAgICAvLyB3aXRoIGEgdmVyc2lvbiBvZiAwIGFuZCBpZ25vcmVkIGJ5IGBtYXliZURlY29kZURvY3VtZW50KClgIGJ1dFxuICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlZCBpbiBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgLlxuICAgICAgICAgICAgICAgIHZhciBoID0gbmkoZS5Uby5zZXJpYWxpemVyLCBuZXcgX24obywgei5taW4oKSksIGUuQWkobykpO1xuICAgICAgICAgICAgICAgIG4ucHVzaChlLlRvLlJpKHQsIG8sIGgpKTtcbiAgICAgICAgICAgIH0gZWxzZSBuLnB1c2goZS5Uby5WaSh0LCBvKSk7XG4gICAgICAgIH0pKSwgaS5mb3JFYWNoKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICBuLnB1c2goZS5Uby5GaS5Lcih0LCByKSk7XG4gICAgICAgIH0pKSwgbi5wdXNoKHRoaXMuVG8udXBkYXRlTWV0YWRhdGEodCwgcikpLCBvci54bihuKTtcbiAgICB9LCBuLnByb3RvdHlwZS5waSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHNpemUgb2YgZXZlcnl0aGluZyB3ZSBsb2FkIGZyb20gdGhlIGNhY2hlIHNvIHdlIGNhbiBjb21wdXRlIGEgZGVsdGEgbGF0ZXIuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVG8uYW8odCwgZSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IHQgPyAobi5Fby5zZXQoZSwgMCksIG51bGwpIDogKG4uRW8uc2V0KGUsIHQuc2l6ZSksIHQuZ2kpO1xuICAgICAgICB9KSk7XG4gICAgfSwgbi5wcm90b3R5cGUudmkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgLy8gUmVjb3JkIHRoZSBzaXplIG9mIGV2ZXJ5dGhpbmcgd2UgbG9hZCBmcm9tIHRoZSBjYWNoZSBzbyB3ZSBjYW4gY29tcHV0ZVxuICAgICAgICAvLyBhIGRlbHRhIGxhdGVyLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlRvLnVvKHQsIGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5obztcbiAgICAgICAgICAgIC8vIE5vdGU6IGBnZXRBbGxGcm9tQ2FjaGVgIHJldHVybnMgdHdvIG1hcHMgaW5zdGVhZCBvZiBhIHNpbmdsZSBtYXAgZnJvbVxuICAgICAgICAgICAgLy8ga2V5cyB0byBgRG9jdW1lbnRTaXplRW50cnlgcy4gVGhpcyBpcyB0byBhbGxvdyByZXR1cm5pbmcgdGhlXG4gICAgICAgICAgICAvLyBgTnVsbGFibGVNYXliZURvY3VtZW50TWFwYCBkaXJlY3RseSwgd2l0aG91dCBhIGNvbnZlcnNpb24uXG4gICAgICAgICAgICByZXR1cm4gdC5sby5mb3JFYWNoKChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgbi5Fby5zZXQodCwgZSk7XG4gICAgICAgICAgICB9KSksIGU7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuO1xufShScik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLlxuICpcbiAqIEBwYXJhbSBzZXJpYWxpemVyIFRoZSBkb2N1bWVudCBzZXJpYWxpemVyLlxuICogQHBhcmFtIGluZGV4TWFuYWdlciBUaGUgcXVlcnkgaW5kZXhlcyB0aGF0IG5lZWQgdG8gYmUgbWFpbnRhaW5lZC5cbiAqL1xuLyoqXG4gKiBIYW5kbGVzIHRoZSBkZXRhaWxzIG9mIGFkZGluZyBhbmQgdXBkYXRpbmcgZG9jdW1lbnRzIGluIHRoZSBJbmRleGVkRGJSZW1vdGVEb2N1bWVudENhY2hlLlxuICpcbiAqIFVubGlrZSB0aGUgTWVtb3J5UmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXIsIHRoZSBJbmRleGVkRGIgaW1wbGVtZW50YXRpb24gY29tcHV0ZXMgdGhlIHNpemVcbiAqIGRlbHRhIGZvciBhbGwgc3VibWl0dGVkIGNoYW5nZXMuIFRoaXMgYXZvaWRzIGhhdmluZyB0byByZS1yZWFkIGFsbCBkb2N1bWVudHMgZnJvbSBJbmRleGVkRGJcbiAqIHdoZW4gd2UgYXBwbHkgdGhlIGNoYW5nZXMuXG4gKi8gZnVuY3Rpb24gd2kodCkge1xuICAgIHJldHVybiBuby5xbih0LCBDaS5zdG9yZSk7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSByZW1vdGVEb2N1bWVudHMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIGJpKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwgVmkuc3RvcmUpO1xufVxuXG5mdW5jdGlvbiBfaSh0KSB7XG4gICAgcmV0dXJuIHQucGF0aC5PKCk7XG59XG5cbi8qKlxuICogUmV0cnVzbiBhbiBhcHByb3hpbWF0ZSBzaXplIGZvciB0aGUgZ2l2ZW4gZG9jdW1lbnQuXG4gKi8gZnVuY3Rpb24gSWkodCkge1xuICAgIHZhciBlO1xuICAgIGlmICh0LmRvY3VtZW50KSBlID0gdC5kb2N1bWVudDsgZWxzZSBpZiAodC51bmtub3duRG9jdW1lbnQpIGUgPSB0LnVua25vd25Eb2N1bWVudDsgZWxzZSB7XG4gICAgICAgIGlmICghdC5ub0RvY3VtZW50KSB0aHJvdyBTKCk7XG4gICAgICAgIGUgPSB0Lm5vRG9jdW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlKS5sZW5ndGg7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGluLW1lbW9yeSBpbXBsZW1lbnRhdGlvbiBvZiBJbmRleE1hbmFnZXIuXG4gKi8gdmFyIEVpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICB0aGlzLklvID0gbmV3IFRpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuS3IgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLklvLmFkZChlKSwgb3IucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLmppID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gb3IucmVzb2x2ZSh0aGlzLklvLmdldEVudHJpZXMoZSkpO1xuICAgIH0sIHQ7XG59KCksIFRpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICB0aGlzLmluZGV4ID0ge307XG4gICAgfVxuICAgIC8vIFJldHVybnMgZmFsc2UgaWYgdGhlIGVudHJ5IGFscmVhZHkgZXhpc3RlZC5cbiAgICAgICAgcmV0dXJuIHQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LkMoKSwgbiA9IHQuUygpLCByID0gdGhpcy5pbmRleFtlXSB8fCBuZXcgcHQoSy5WKSwgaSA9ICFyLmhhcyhuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhbZV0gPSByLmFkZChuKSwgaTtcbiAgICB9LCB0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdC5DKCksIG4gPSB0LlMoKSwgciA9IHRoaXMuaW5kZXhbZV07XG4gICAgICAgIHJldHVybiByICYmIHIuaGFzKG4pO1xuICAgIH0sIHQucHJvdG90eXBlLmdldEVudHJpZXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5pbmRleFt0XSB8fCBuZXcgcHQoSy5WKSkuTygpO1xuICAgIH0sIHQ7XG59KCksIE5pID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgZGF0YWJhc2UgY3JlYXRpb24gYW5kIHNjaGVtYSB1cGdyYWRlcy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpbiBwcm9kdWN0aW9uLCB0aGlzIG1ldGhvZCBpcyBvbmx5IGV2ZXIgdXNlZCB0byB1cGdyYWRlIHRoZSBzY2hlbWFcbiAgICAgKiB0byBTQ0hFTUFfVkVSU0lPTi4gRGlmZmVyZW50IHZhbHVlcyBvZiB0b1ZlcnNpb24gYXJlIG9ubHkgdXNlZCBmb3IgdGVzdGluZ1xuICAgICAqIGFuZCBsb2NhbCBmZWF0dXJlIGRldmVsb3BtZW50LlxuICAgICAqLyAgICByZXR1cm4gdC5wcm90b3R5cGUuY3JlYXRlT3JVcGdyYWRlID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIGsobiA8IHIgJiYgbiA+PSAwICYmIHIgPD0gMTEpO1xuICAgICAgICB2YXIgbyA9IG5ldyBocihcImNyZWF0ZU9yVXBncmFkZVwiLCBlKTtcbiAgICAgICAgbiA8IDEgJiYgciA+PSAxICYmIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKEFpLnN0b3JlKTtcbiAgICAgICAgfSh0KSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShTaS5zdG9yZSwge1xuICAgICAgICAgICAgICAgIGtleVBhdGg6IFNpLmtleVBhdGhcbiAgICAgICAgICAgIH0pLCB0LmNyZWF0ZU9iamVjdFN0b3JlKGtpLnN0b3JlLCB7XG4gICAgICAgICAgICAgICAga2V5UGF0aDoga2kua2V5UGF0aCxcbiAgICAgICAgICAgICAgICBhdXRvSW5jcmVtZW50OiAhMFxuICAgICAgICAgICAgfSkuY3JlYXRlSW5kZXgoa2kudXNlck11dGF0aW9uc0luZGV4LCBraS51c2VyTXV0YXRpb25zS2V5UGF0aCwge1xuICAgICAgICAgICAgICAgIHVuaXF1ZTogITBcbiAgICAgICAgICAgIH0pLCB0LmNyZWF0ZU9iamVjdFN0b3JlKERpLnN0b3JlKTtcbiAgICAgICAgfSh0KSwgcWkodCksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoVmkuc3RvcmUpO1xuICAgICAgICB9KHQpKTtcbiAgICAgICAgLy8gTWlncmF0aW9uIDIgdG8gcG9wdWxhdGUgdGhlIHRhcmdldEdsb2JhbCBvYmplY3Qgbm8gbG9uZ2VyIG5lZWRlZCBzaW5jZVxuICAgICAgICAvLyBtaWdyYXRpb24gMyB1bmNvbmRpdGlvbmFsbHkgY2xlYXJzIGl0LlxuICAgICAgICB2YXIgdSA9IG9yLnJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuIG4gPCAzICYmIHIgPj0gMyAmJiAoXG4gICAgICAgIC8vIEJyYW5kIG5ldyBjbGllbnRzIGRvbid0IG5lZWQgdG8gZHJvcCBhbmQgcmVjcmVhdGUtLW9ubHkgY2xpZW50cyB0aGF0XG4gICAgICAgIC8vIHBvdGVudGlhbGx5IGhhdmUgY29ycnVwdCBkYXRhLlxuICAgICAgICAwICE9PSBuICYmIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0LmRlbGV0ZU9iamVjdFN0b3JlKFJpLnN0b3JlKSwgdC5kZWxldGVPYmplY3RTdG9yZShMaS5zdG9yZSksIHQuZGVsZXRlT2JqZWN0U3RvcmUoTWkuc3RvcmUpO1xuICAgICAgICB9KHQpLCBxaSh0KSksIHUgPSB1Lm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgdGFyZ2V0IGdsb2JhbCBzaW5nbGV0b24gcm93LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtJREJUcmFuc2FjdGlvbn0gdHhuIFRoZSB2ZXJzaW9uIHVwZ3JhZGUgdHJhbnNhY3Rpb24gZm9yIGluZGV4ZWRkYlxuICAgICAqL1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHQuc3RvcmUoTWkuc3RvcmUpLCBuID0gbmV3IE1pKFxuICAgICAgICAgICAgICAgIC8qaGlnaGVzdFRhcmdldElkPSovIDAsIFxuICAgICAgICAgICAgICAgIC8qbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyPSovIDAsIHoubWluKCkuUCgpLCBcbiAgICAgICAgICAgICAgICAvKnRhcmdldENvdW50PSovIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnB1dChNaS5rZXksIG4pO1xuICAgICAgICAgICAgfShvKTtcbiAgICAgICAgfSkpKSwgbiA8IDQgJiYgciA+PSA0ICYmICgwICE9PSBuICYmIChcbiAgICAgICAgLy8gU2NoZW1hIHZlcnNpb24gMyB1c2VzIGF1dG8tZ2VuZXJhdGVkIGtleXMgdG8gZ2VuZXJhdGUgZ2xvYmFsbHkgdW5pcXVlXG4gICAgICAgIC8vIG11dGF0aW9uIGJhdGNoIElEcyAodGhpcyB3YXMgcHJldmlvdXNseSBlbnN1cmVkIGludGVybmFsbHkgYnkgdGhlXG4gICAgICAgIC8vIGNsaWVudCkuIFRvIG1pZ3JhdGUgdG8gdGhlIG5ldyBzY2hlbWEsIHdlIGhhdmUgdG8gcmVhZCBhbGwgbXV0YXRpb25zXG4gICAgICAgIC8vIGFuZCB3cml0ZSB0aGVtIGJhY2sgb3V0LiBXZSBwcmVzZXJ2ZSB0aGUgZXhpc3RpbmcgYmF0Y2ggSURzIHRvIGd1YXJhbnRlZVxuICAgICAgICAvLyBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIG9iamVjdCBzdG9yZXMuIEFueSBmdXJ0aGVyIG11dGF0aW9uIGJhdGNoIElEcyB3aWxsXG4gICAgICAgIC8vIGJlIGF1dG8tZ2VuZXJhdGVkLlxuICAgICAgICB1ID0gdS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuc3RvcmUoa2kuc3RvcmUpLlhuKCkubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICB0LmRlbGV0ZU9iamVjdFN0b3JlKGtpLnN0b3JlKSwgdC5jcmVhdGVPYmplY3RTdG9yZShraS5zdG9yZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5UGF0aDoga2kua2V5UGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9JbmNyZW1lbnQ6ICEwXG4gICAgICAgICAgICAgICAgICAgIH0pLmNyZWF0ZUluZGV4KGtpLnVzZXJNdXRhdGlvbnNJbmRleCwga2kudXNlck11dGF0aW9uc0tleVBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZTogITBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gZS5zdG9yZShraS5zdG9yZSksIGkgPSBuLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIucHV0KHQpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvci54bihpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KHQsIG8pO1xuICAgICAgICB9KSkpLCB1ID0gdS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICFmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdC5jcmVhdGVPYmplY3RTdG9yZShGaS5zdG9yZSwge1xuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBGaS5rZXlQYXRoXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KHQpO1xuICAgICAgICB9KSkpLCBuIDwgNSAmJiByID49IDUgJiYgKHUgPSB1Lm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGkucmVtb3ZlQWNrbm93bGVkZ2VkTXV0YXRpb25zKG8pO1xuICAgICAgICB9KSkpLCBuIDwgNiAmJiByID49IDYgJiYgKHUgPSB1Lm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKENpLnN0b3JlKTtcbiAgICAgICAgICAgIH0odCksIGkuYWRkRG9jdW1lbnRHbG9iYWwobyk7XG4gICAgICAgIH0pKSksIG4gPCA3ICYmIHIgPj0gNyAmJiAodSA9IHUubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaS5lbnN1cmVTZXF1ZW5jZU51bWJlcnMobyk7XG4gICAgICAgIH0pKSksIG4gPCA4ICYmIHIgPj0gOCAmJiAodSA9IHUubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaS5jcmVhdGVDb2xsZWN0aW9uUGFyZW50SW5kZXgodCwgbyk7XG4gICAgICAgIH0pKSksIG4gPCA5ICYmIHIgPj0gOSAmJiAodSA9IHUubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBNdWx0aS1UYWIgdXNlZCB0byBtYW5hZ2UgaXRzIG93biBjaGFuZ2Vsb2csIGJ1dCB0aGlzIGhhcyBiZWVuIG1vdmVkXG4gICAgICAgICAgICAvLyB0byB0aGUgRGJSZW1vdGVEb2N1bWVudCBvYmplY3Qgc3RvcmUgaXRzZWxmLiBTaW5jZSB0aGUgcHJldmlvdXMgY2hhbmdlXG4gICAgICAgICAgICAvLyBsb2cgb25seSBjb250YWluZWQgdHJhbnNpZW50IGRhdGEsIHdlIGNhbiBkcm9wIGl0cyBvYmplY3Qgc3RvcmUuXG4gICAgICAgICAgICAhZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHQub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhcInJlbW90ZURvY3VtZW50Q2hhbmdlc1wiKSAmJiB0LmRlbGV0ZU9iamVjdFN0b3JlKFwicmVtb3RlRG9jdW1lbnRDaGFuZ2VzXCIpO1xuICAgICAgICAgICAgfSh0KSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdC5vYmplY3RTdG9yZShWaS5zdG9yZSk7XG4gICAgICAgICAgICAgICAgZS5jcmVhdGVJbmRleChWaS5yZWFkVGltZUluZGV4LCBWaS5yZWFkVGltZUluZGV4UGF0aCwge1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICAgICAgfSksIGUuY3JlYXRlSW5kZXgoVmkuY29sbGVjdGlvblJlYWRUaW1lSW5kZXgsIFZpLmNvbGxlY3Rpb25SZWFkVGltZUluZGV4UGF0aCwge1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWU6ICExXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KGUpO1xuICAgICAgICB9KSkpLCBuIDwgMTAgJiYgciA+PSAxMCAmJiAodSA9IHUubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaS5yZXdyaXRlQ2Fub25pY2FsSWRzKG8pO1xuICAgICAgICB9KSkpLCBuIDwgMTEgJiYgciA+PSAxMSAmJiAodSA9IHUubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAhZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoamkuc3RvcmUsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogamkua2V5UGF0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSh0KSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHQuY3JlYXRlT2JqZWN0U3RvcmUoQmkuc3RvcmUsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogQmkua2V5UGF0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSh0KTtcbiAgICAgICAgfSkpKSwgdTtcbiAgICB9LCB0LnByb3RvdHlwZS5hZGREb2N1bWVudEdsb2JhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSAwO1xuICAgICAgICByZXR1cm4gdC5zdG9yZShWaS5zdG9yZSkubnMoKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgIGUgKz0gSWkobik7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuID0gbmV3IENpKGUpO1xuICAgICAgICAgICAgcmV0dXJuIHQuc3RvcmUoQ2kuc3RvcmUpLnB1dChDaS5rZXksIG4pO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucmVtb3ZlQWNrbm93bGVkZ2VkTXV0YXRpb25zID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB0LnN0b3JlKFNpLnN0b3JlKSwgciA9IHQuc3RvcmUoa2kuc3RvcmUpO1xuICAgICAgICByZXR1cm4gbi5YbigpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBvci5mb3JFYWNoKG4sIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBJREJLZXlSYW5nZS5ib3VuZChbIG4udXNlcklkLCAtMSBdLCBbIG4udXNlcklkLCBuLmxhc3RBY2tub3dsZWRnZWRCYXRjaElkIF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByLlhuKGtpLnVzZXJNdXRhdGlvbnNJbmRleCwgaSkubmV4dCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3IuZm9yRWFjaChyLCAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgayhyLnVzZXJJZCA9PT0gbi51c2VySWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBzaShlLnNlcmlhbGl6ZXIsIHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpKHQsIG4udXNlcklkLCBpKS5uZXh0KChmdW5jdGlvbigpIHt9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoYXQgZXZlcnkgZG9jdW1lbnQgaW4gdGhlIHJlbW90ZSBkb2N1bWVudCBjYWNoZSBoYXMgYSBjb3JyZXNwb25kaW5nIHNlbnRpbmVsIHJvd1xuICAgICAqIHdpdGggYSBzZXF1ZW5jZSBudW1iZXIuIE1pc3Npbmcgcm93cyBhcmUgZ2l2ZW4gdGhlIG1vc3QgcmVjZW50bHkgdXNlZCBzZXF1ZW5jZSBudW1iZXIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZW5zdXJlU2VxdWVuY2VOdW1iZXJzID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQuc3RvcmUoUmkuc3RvcmUpLCBuID0gdC5zdG9yZShWaS5zdG9yZSk7XG4gICAgICAgIHJldHVybiB0LnN0b3JlKE1pLnN0b3JlKS5nZXQoTWkua2V5KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIG4ubnMoKGZ1bmN0aW9uKG4sIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyBLKG4pLCB1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAwLCBKcih0KSBdO1xuICAgICAgICAgICAgICAgIH0obyk7XG4gICAgICAgICAgICAgICAgci5wdXNoKGUuZ2V0KHUpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPyBvci5yZXNvbHZlKCkgOiBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wdXQobmV3IFJpKDAsIEpyKG4pLCB0LmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcikpO1xuICAgICAgICAgICAgICAgICAgICB9KG8pO1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yLnhuKHIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuY3JlYXRlQ29sbGVjdGlvblBhcmVudEluZGV4ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGluZGV4LlxuICAgICAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFVpLnN0b3JlLCB7XG4gICAgICAgICAgICBrZXlQYXRoOiBVaS5rZXlQYXRoXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbiA9IGUuc3RvcmUoVWkuc3RvcmUpLCByID0gbmV3IFRpLCBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHIuYWRkKHQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0LkMoKSwgaSA9IHQuUygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnB1dCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBKcihpKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBIZWxwZXIgdG8gYWRkIGFuIGluZGV4IGVudHJ5IGlmZiB3ZSBoYXZlbid0IGFscmVhZHkgd3JpdHRlbiBpdC5cbiAgICAgICAgLy8gSW5kZXggZXhpc3RpbmcgcmVtb3RlIGRvY3VtZW50cy5cbiAgICAgICAgICAgICAgICByZXR1cm4gZS5zdG9yZShWaS5zdG9yZSkubnMoe1xuICAgICAgICAgICAgZXM6ICEwXG4gICAgICAgIH0sIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IG5ldyBLKHQpO1xuICAgICAgICAgICAgcmV0dXJuIGkobi5TKCkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5zdG9yZShEaS5zdG9yZSkubnMoe1xuICAgICAgICAgICAgICAgIGVzOiAhMFxuICAgICAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB0WzBdO1xuICAgICAgICAgICAgICAgIHZhciBuID0gdFsxXSwgciA9ICh0WzJdLCBacihuKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkoci5TKCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucmV3cml0ZUNhbm9uaWNhbElkcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gdC5zdG9yZShMaS5zdG9yZSk7XG4gICAgICAgIHJldHVybiBuLm5zKChmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGFpKHIpLCBvID0gY2koZS5zZXJpYWxpemVyLCBpKTtcbiAgICAgICAgICAgIHJldHVybiBuLnB1dChvKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCksIHhpID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMuc2Vjb25kcyA9IHQsIHRoaXMubmFub3NlY29uZHMgPSBlO1xufSwgQWkgPSBmdW5jdGlvbih0LCBcbi8qKiBXaGV0aGVyIHRvIGFsbG93IHNoYXJlZCBhY2Nlc3MgZnJvbSBtdWx0aXBsZSB0YWJzLiAqL1xuZSwgbikge1xuICAgIHRoaXMub3duZXJJZCA9IHQsIHRoaXMuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24gPSBlLCB0aGlzLmxlYXNlVGltZXN0YW1wTXMgPSBuO1xufTtcblxuLyoqXG4gKiBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgY29sbGVjdGlvbi1wYXJlbnQgaW5kZXggZXhwb3NlZCBieSBNZW1vcnlJbmRleE1hbmFnZXIuXG4gKiBBbHNvIHVzZWQgZm9yIGluLW1lbW9yeSBjYWNoaW5nIGJ5IEluZGV4ZWREYkluZGV4TWFuYWdlciBhbmQgaW5pdGlhbCBpbmRleCBwb3B1bGF0aW9uXG4gKiBpbiBpbmRleGVkZGJfc2NoZW1hLnRzXG4gKi9cbi8qKlxuICogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG5hbWUgJ293bmVyJyBpcyBjaG9zZW4gdG8gZW5zdXJlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGhcbiAqIG9sZGVyIGNsaWVudHMgdGhhdCBvbmx5IHN1cHBvcnRlZCBzaW5nbGUgbG9ja2VkIGFjY2VzcyB0byB0aGUgcGVyc2lzdGVuY2VcbiAqIGxheWVyLlxuICovXG5BaS5zdG9yZSA9IFwib3duZXJcIiwgXG4vKipcbiAgICAgKiBUaGUga2V5IHN0cmluZyB1c2VkIGZvciB0aGUgc2luZ2xlIG9iamVjdCB0aGF0IGV4aXN0cyBpbiB0aGVcbiAgICAgKiBEYlByaW1hcnlDbGllbnQgc3RvcmUuXG4gICAgICovXG5BaS5rZXkgPSBcIm93bmVyXCI7XG5cbnZhciBTaSA9IGZ1bmN0aW9uKFxuLyoqXG4gICAgICogVGhlIG5vcm1hbGl6ZWQgdXNlciBJRCB0byB3aGljaCB0aGlzIHF1ZXVlIGJlbG9uZ3MuXG4gICAgICovXG50LCBcbi8qKlxuICAgICAqIEFuIGlkZW50aWZpZXIgZm9yIHRoZSBoaWdoZXN0IG51bWJlcmVkIGJhdGNoIHRoYXQgaGFzIGJlZW4gYWNrbm93bGVkZ2VkXG4gICAgICogYnkgdGhlIHNlcnZlci4gQWxsIE11dGF0aW9uQmF0Y2hlcyBpbiB0aGlzIHF1ZXVlIHdpdGggYmF0Y2hJZHMgbGVzc1xuICAgICAqIHRoYW4gb3IgZXF1YWwgdG8gdGhpcyB2YWx1ZSBhcmUgY29uc2lkZXJlZCB0byBoYXZlIGJlZW4gYWNrbm93bGVkZ2VkIGJ5XG4gICAgICogdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIE5PVEU6IHRoaXMgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIHVzZWQgYnkgdGhlIGNvZGUuXG4gICAgICovXG5lLCBcbi8qKlxuICAgICAqIEEgc3RyZWFtIHRva2VuIHRoYXQgd2FzIHByZXZpb3VzbHkgc2VudCBieSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogU2VlIFN0cmVhbWluZ1dyaXRlUmVxdWVzdCBpbiBkYXRhc3RvcmUucHJvdG8gZm9yIG1vcmUgZGV0YWlscyBhYm91dFxuICAgICAqIHVzYWdlLlxuICAgICAqXG4gICAgICogQWZ0ZXIgc2VuZGluZyB0aGlzIHRva2VuLCBlYXJsaWVyIHRva2VucyBtYXkgbm90IGJlIHVzZWQgYW55bW9yZSBzb1xuICAgICAqIG9ubHkgYSBzaW5nbGUgc3RyZWFtIHRva2VuIGlzIHJldGFpbmVkLlxuICAgICAqXG4gICAgICogTk9URTogdGhpcyBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgdXNlZCBieSB0aGUgY29kZS5cbiAgICAgKi9cbm4pIHtcbiAgICB0aGlzLnVzZXJJZCA9IHQsIHRoaXMubGFzdEFja25vd2xlZGdlZEJhdGNoSWQgPSBlLCB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IG47XG59O1xuXG4vKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gICovIFNpLnN0b3JlID0gXCJtdXRhdGlvblF1ZXVlc1wiLCBcbi8qKiBLZXlzIGFyZSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHZpYSB0aGUgdXNlcklkIHByb3BlcnR5LiAqL1xuU2kua2V5UGF0aCA9IFwidXNlcklkXCI7XG5cbi8qKlxuICogQW4gb2JqZWN0IHRvIGJlIHN0b3JlZCBpbiB0aGUgJ211dGF0aW9ucycgc3RvcmUgaW4gSW5kZXhlZERiLlxuICpcbiAqIFJlcHJlc2VudHMgYSBiYXRjaCBvZiB1c2VyLWxldmVsIG11dGF0aW9ucyBpbnRlbmRlZCB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXJcbiAqIGluIGEgc2luZ2xlIHdyaXRlLiBFYWNoIHVzZXItbGV2ZWwgYmF0Y2ggZ2V0cyBhIHNlcGFyYXRlIERiTXV0YXRpb25CYXRjaFxuICogd2l0aCBhIG5ldyBiYXRjaElkLlxuICovXG52YXIga2kgPSBmdW5jdGlvbihcbi8qKlxuICAgICAqIFRoZSBub3JtYWxpemVkIHVzZXIgSUQgdG8gd2hpY2ggdGhpcyBiYXRjaCBiZWxvbmdzLlxuICAgICAqL1xudCwgXG4vKipcbiAgICAgKiBBbiBpZGVudGlmaWVyIGZvciB0aGlzIGJhdGNoLCBhbGxvY2F0ZWQgdXNpbmcgYW4gYXV0by1nZW5lcmF0ZWQga2V5LlxuICAgICAqL1xuZSwgXG4vKipcbiAgICAgKiBUaGUgbG9jYWwgd3JpdGUgdGltZSBvZiB0aGUgYmF0Y2gsIHN0b3JlZCBhcyBtaWxsaXNlY29uZHMgc2luY2UgdGhlXG4gICAgICogZXBvY2guXG4gICAgICovXG5uLCBcbi8qKlxuICAgICAqIEEgbGlzdCBvZiBcIm11dGF0aW9uc1wiIHRoYXQgcmVwcmVzZW50IGEgcGFydGlhbCBiYXNlIHN0YXRlIGZyb20gd2hlbiB0aGlzXG4gICAgICogd3JpdGUgYmF0Y2ggd2FzIGluaXRpYWxseSBjcmVhdGVkLiBEdXJpbmcgbG9jYWwgYXBwbGljYXRpb24gb2YgdGhlIHdyaXRlXG4gICAgICogYmF0Y2gsIHRoZXNlIGJhc2VNdXRhdGlvbnMgYXJlIGFwcGxpZWQgcHJpb3IgdG8gdGhlIHJlYWwgd3JpdGVzIGluIG9yZGVyXG4gICAgICogdG8gb3ZlcnJpZGUgY2VydGFpbiBkb2N1bWVudCBmaWVsZHMgZnJvbSB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLiBUaGlzXG4gICAgICogaXMgbmVjZXNzYXJ5IGluIHRoZSBjYXNlIG9mIG5vbi1pZGVtcG90ZW50IHdyaXRlcyAoZS5nLiBgaW5jcmVtZW50KClgXG4gICAgICogdHJhbnNmb3JtcykgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGxvY2FsIHZpZXcgb2YgdGhlIG1vZGlmaWVkIGRvY3VtZW50c1xuICAgICAqIGRvZXNuJ3QgZmxpY2tlciBpZiB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlIHJlY2VpdmVzIHRoZSByZXN1bHQgb2YgdGhlXG4gICAgICogbm9uLWlkZW1wb3RlbnQgd3JpdGUgYmVmb3JlIHRoZSB3cml0ZSBpcyByZW1vdmVkIGZyb20gdGhlIHF1ZXVlLlxuICAgICAqXG4gICAgICogVGhlc2UgbXV0YXRpb25zIGFyZSBuZXZlciBzZW50IHRvIHRoZSBiYWNrZW5kLlxuICAgICAqL1xuciwgXG4vKipcbiAgICAgKiBBIGxpc3Qgb2YgbXV0YXRpb25zIHRvIGFwcGx5LiBBbGwgbXV0YXRpb25zIHdpbGwgYmUgYXBwbGllZCBhdG9taWNhbGx5LlxuICAgICAqXG4gICAgICogTXV0YXRpb25zIGFyZSBzZXJpYWxpemVkIHZpYSB0b011dGF0aW9uKCkuXG4gICAgICovXG5pKSB7XG4gICAgdGhpcy51c2VySWQgPSB0LCB0aGlzLmJhdGNoSWQgPSBlLCB0aGlzLmxvY2FsV3JpdGVUaW1lTXMgPSBuLCB0aGlzLmJhc2VNdXRhdGlvbnMgPSByLCBcbiAgICB0aGlzLm11dGF0aW9ucyA9IGk7XG59O1xuXG4vKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gICovIGtpLnN0b3JlID0gXCJtdXRhdGlvbnNcIiwgXG4vKiogS2V5cyBhcmUgYXV0b21hdGljYWxseSBhc3NpZ25lZCB2aWEgdGhlIHVzZXJJZCwgYmF0Y2hJZCBwcm9wZXJ0aWVzLiAqL1xua2kua2V5UGF0aCA9IFwiYmF0Y2hJZFwiLCBcbi8qKiBUaGUgaW5kZXggbmFtZSBmb3IgbG9va3VwIG9mIG11dGF0aW9ucyBieSB1c2VyLiAqL1xua2kudXNlck11dGF0aW9uc0luZGV4ID0gXCJ1c2VyTXV0YXRpb25zSW5kZXhcIiwgXG4vKiogVGhlIHVzZXIgbXV0YXRpb25zIGluZGV4IGlzIGtleWVkIGJ5IFt1c2VySWQsIGJhdGNoSWRdIHBhaXJzLiAqL1xua2kudXNlck11dGF0aW9uc0tleVBhdGggPSBbIFwidXNlcklkXCIsIFwiYmF0Y2hJZFwiIF07XG5cbnZhciBEaSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFt1c2VySWRdIGtleSBmb3IgdXNlIGluIHRoZSBEYkRvY3VtZW50TXV0YXRpb25zIGluZGV4IHRvIGl0ZXJhdGVcbiAgICAgKiBvdmVyIGFsbCBvZiBhIHVzZXIncyBkb2N1bWVudCBtdXRhdGlvbnMuXG4gICAgICovICAgIHJldHVybiB0LnByZWZpeEZvclVzZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbIHQgXTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgW3VzZXJJZCwgZW5jb2RlZFBhdGhdIGtleSBmb3IgdXNlIGluIHRoZSBEYkRvY3VtZW50TXV0YXRpb25zXG4gICAgICogaW5kZXggdG8gaXRlcmF0ZSBvdmVyIGFsbCBhdCBkb2N1bWVudCBtdXRhdGlvbnMgZm9yIGEgZ2l2ZW4gcGF0aCBvciBsb3dlci5cbiAgICAgKi9cbiAgICB0LnByZWZpeEZvclBhdGggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBbIHQsIEpyKGUpIF07XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bGwgaW5kZXgga2V5IG9mIFt1c2VySWQsIGVuY29kZWRQYXRoLCBiYXRjaElkXSBmb3IgaW5zZXJ0aW5nXG4gICAgICogYW5kIGRlbGV0aW5nIGludG8gdGhlIERiRG9jdW1lbnRNdXRhdGlvbnMgaW5kZXguXG4gICAgICovXG4gICAgdC5rZXkgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBbIHQsIEpyKGUpLCBuIF07XG4gICAgfSwgdDtcbn0oKTtcblxuRGkuc3RvcmUgPSBcImRvY3VtZW50TXV0YXRpb25zXCIsIFxuLyoqXG4gICAgICogQmVjYXVzZSB3ZSBzdG9yZSBhbGwgdGhlIHVzZWZ1bCBpbmZvcm1hdGlvbiBmb3IgdGhpcyBzdG9yZSBpbiB0aGUga2V5LFxuICAgICAqIHRoZXJlIGlzIG5vIHVzZWZ1bCBpbmZvcm1hdGlvbiB0byBzdG9yZSBhcyB0aGUgdmFsdWUuIFRoZSByYXcgKHVuZW5jb2RlZClcbiAgICAgKiBwYXRoIGNhbm5vdCBiZSBzdG9yZWQgYmVjYXVzZSBJbmRleGVkRGIgZG9lc24ndCBzdG9yZSBwcm90b3R5cGVcbiAgICAgKiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbkRpLlBMQUNFSE9MREVSID0gbmV3IERpO1xuXG52YXIgT2kgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgdGhpcy5wYXRoID0gdCwgdGhpcy5yZWFkVGltZSA9IGU7XG59LCBQaSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICB0aGlzLnBhdGggPSB0LCB0aGlzLnZlcnNpb24gPSBlO1xufSwgVmkgPSBcbi8vIFRPRE86IFdlIGFyZSBjdXJyZW50bHkgc3RvcmluZyBmdWxsIGRvY3VtZW50IGtleXMgYWxtb3N0IHRocmVlIHRpbWVzXG4vLyAob25jZSBhcyBwYXJ0IG9mIHRoZSBwcmltYXJ5IGtleSwgb25jZSAtIHBhcnRseSAtIGFzIGBwYXJlbnRQYXRoYCBhbmQgb25jZVxuLy8gaW5zaWRlIHRoZSBlbmNvZGVkIGRvY3VtZW50cykuIER1cmluZyBvdXIgbmV4dCBtaWdyYXRpb24sIHdlIHNob3VsZFxuLy8gcmV3cml0ZSB0aGUgcHJpbWFyeSBrZXkgYXMgcGFyZW50UGF0aCArIGRvY3VtZW50IElEIHdoaWNoIHdvdWxkIGFsbG93IHVzXG4vLyB0byBkcm9wIG9uZSB2YWx1ZS5cbmZ1bmN0aW9uKFxuLyoqXG4gICAgICogU2V0IHRvIGFuIGluc3RhbmNlIG9mIERiVW5rbm93bkRvY3VtZW50IGlmIHRoZSBkYXRhIGZvciBhIGRvY3VtZW50IGlzXG4gICAgICogbm90IGtub3duLCBidXQgaXQgaXMga25vd24gdGhhdCBhIGRvY3VtZW50IGV4aXN0cyBhdCB0aGUgc3BlY2lmaWVkXG4gICAgICogdmVyc2lvbiAoZS5nLiBpdCBoYWQgYSBzdWNjZXNzZnVsIHVwZGF0ZSBhcHBsaWVkIHRvIGl0KVxuICAgICAqL1xudCwgXG4vKipcbiAgICAgKiBTZXQgdG8gYW4gaW5zdGFuY2Ugb2YgYSBEYk5vRG9jdW1lbnQgaWYgaXQgaXMga25vd24gdGhhdCBubyBkb2N1bWVudFxuICAgICAqIGV4aXN0cy5cbiAgICAgKi9cbmUsIFxuLyoqXG4gICAgICogU2V0IHRvIGFuIGluc3RhbmNlIG9mIGEgRG9jdW1lbnQgaWYgdGhlcmUncyBhIGNhY2hlZCB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIGRvY3VtZW50LlxuICAgICAqL1xubiwgXG4vKipcbiAgICAgKiBEb2N1bWVudHMgdGhhdCB3ZXJlIHdyaXR0ZW4gdG8gdGhlIHJlbW90ZSBkb2N1bWVudCBzdG9yZSBiYXNlZCBvblxuICAgICAqIGEgd3JpdGUgYWNrbm93bGVkZ21lbnQgYXJlIG1hcmtlZCB3aXRoIGBoYXNDb21taXR0ZWRNdXRhdGlvbnNgLiBUaGVzZVxuICAgICAqIGRvY3VtZW50cyBhcmUgcG90ZW50aWFsbHkgaW5jb25zaXN0ZW50IHdpdGggdGhlIGJhY2tlbmQncyBjb3B5IGFuZCB1c2VcbiAgICAgKiB0aGUgd3JpdGUncyBjb21taXQgdmVyc2lvbiBhcyB0aGVpciBkb2N1bWVudCB2ZXJzaW9uLlxuICAgICAqL1xuciwgXG4vKipcbiAgICAgKiBXaGVuIHRoZSBkb2N1bWVudCB3YXMgcmVhZCBmcm9tIHRoZSBiYWNrZW5kLiBVbmRlZmluZWQgZm9yIGRhdGEgd3JpdHRlblxuICAgICAqIHByaW9yIHRvIHNjaGVtYSB2ZXJzaW9uIDkuXG4gICAgICovXG5pLCBcbi8qKlxuICAgICAqIFRoZSBwYXRoIG9mIHRoZSBjb2xsZWN0aW9uIHRoaXMgZG9jdW1lbnQgaXMgcGFydCBvZi4gVW5kZWZpbmVkIGZvciBkYXRhXG4gICAgICogd3JpdHRlbiBwcmlvciB0byBzY2hlbWEgdmVyc2lvbiA5LlxuICAgICAqL1xubykge1xuICAgIHRoaXMudW5rbm93bkRvY3VtZW50ID0gdCwgdGhpcy5ub0RvY3VtZW50ID0gZSwgdGhpcy5kb2N1bWVudCA9IG4sIHRoaXMuaGFzQ29tbWl0dGVkTXV0YXRpb25zID0gciwgXG4gICAgdGhpcy5yZWFkVGltZSA9IGksIHRoaXMucGFyZW50UGF0aCA9IG87XG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBkb2N1bWVudCB0aGF0IGlzIGtub3duIHRvIGV4aXN0IGJ1dCB3aG9zZSBkYXRhIGlzIHVua25vd24uXG4gKiBTdG9yZWQgaW4gSW5kZXhlZERiIGFzIHBhcnQgb2YgYSBEYlJlbW90ZURvY3VtZW50IG9iamVjdC5cbiAqLyBWaS5zdG9yZSA9IFwicmVtb3RlRG9jdW1lbnRzXCIsIFxuLyoqXG4gICAgICogQW4gaW5kZXggdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGVudHJpZXMgc29ydGVkIGJ5IHJlYWQgdGltZSAod2hpY2hcbiAgICAgKiBjb3JyZXNwb25kcyB0byB0aGUgbGFzdCBtb2RpZmljYXRpb24gdGltZSBvZiBlYWNoIHJvdykuXG4gICAgICpcbiAgICAgKiBUaGlzIGluZGV4IGlzIHVzZWQgdG8gcHJvdmlkZSBhIGNoYW5nZWxvZyBmb3IgTXVsdGktVGFiLlxuICAgICAqL1xuVmkucmVhZFRpbWVJbmRleCA9IFwicmVhZFRpbWVJbmRleFwiLCBWaS5yZWFkVGltZUluZGV4UGF0aCA9IFwicmVhZFRpbWVcIiwgXG4vKipcbiAgICAgKiBBbiBpbmRleCB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBkb2N1bWVudHMgaW4gYSBjb2xsZWN0aW9uIHNvcnRlZCBieSByZWFkXG4gICAgICogdGltZS5cbiAgICAgKlxuICAgICAqIFRoaXMgaW5kZXggaXMgdXNlZCB0byBhbGxvdyB0aGUgUmVtb3RlRG9jdW1lbnRDYWNoZSB0byBmZXRjaCBuZXdseSBjaGFuZ2VkXG4gICAgICogZG9jdW1lbnRzIGluIGEgY29sbGVjdGlvbi5cbiAgICAgKi9cblZpLmNvbGxlY3Rpb25SZWFkVGltZUluZGV4ID0gXCJjb2xsZWN0aW9uUmVhZFRpbWVJbmRleFwiLCBWaS5jb2xsZWN0aW9uUmVhZFRpbWVJbmRleFBhdGggPSBbIFwicGFyZW50UGF0aFwiLCBcInJlYWRUaW1lXCIgXTtcblxuLyoqXG4gKiBDb250YWlucyBhIHNpbmdsZSBlbnRyeSB0aGF0IGhhcyBtZXRhZGF0YSBhYm91dCB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlLlxuICovXG52YXIgQ2kgPSBcbi8qKlxuICAgICAqIEBwYXJhbSBieXRlU2l6ZSBBcHByb3hpbWF0ZWx5IHRoZSB0b3RhbCBzaXplIGluIGJ5dGVzIG9mIGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBkb2N1bWVudFxuICAgICAqIGNhY2hlLlxuICAgICAqL1xuZnVuY3Rpb24odCkge1xuICAgIHRoaXMuYnl0ZVNpemUgPSB0O1xufTtcblxuQ2kuc3RvcmUgPSBcInJlbW90ZURvY3VtZW50R2xvYmFsXCIsIENpLmtleSA9IFwicmVtb3RlRG9jdW1lbnRHbG9iYWxLZXlcIjtcblxudmFyIExpID0gZnVuY3Rpb24oXG4vKipcbiAgICAgKiBBbiBhdXRvLWdlbmVyYXRlZCBzZXF1ZW50aWFsIG51bWVyaWMgaWRlbnRpZmllciBmb3IgdGhlIHF1ZXJ5LlxuICAgICAqXG4gICAgICogUXVlcmllcyBhcmUgc3RvcmVkIHVzaW5nIHRoZWlyIGNhbm9uaWNhbElkIGFzIHRoZSBrZXksIGJ1dCB0aGVzZVxuICAgICAqIGNhbm9uaWNhbElkcyBjYW4gYmUgcXVpdGUgbG9uZyBzbyB3ZSBhZGRpdGlvbmFsbHkgYXNzaWduIGEgdW5pcXVlXG4gICAgICogcXVlcnlJZCB3aGljaCBjYW4gYmUgdXNlZCBieSByZWZlcmVuY2VkIGRhdGEgc3RydWN0dXJlcyAoZS5nLlxuICAgICAqIGluZGV4ZXMpIHRvIG1pbmltaXplIHRoZSBvbi1kaXNrIGNvc3QuXG4gICAgICovXG50LCBcbi8qKlxuICAgICAqIFRoZSBjYW5vbmljYWwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGlzIHF1ZXJ5LiBUaGlzIGlzIG5vdCB1bmlxdWUuXG4gICAgICovXG5lLCBcbi8qKlxuICAgICAqIFRoZSBsYXN0IHJlYWRUaW1lIHJlY2VpdmVkIGZyb20gdGhlIFdhdGNoIFNlcnZpY2UgZm9yIHRoaXMgcXVlcnkuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHRoZSBzYW1lIHZhbHVlIGFzIFRhcmdldENoYW5nZS5yZWFkX3RpbWUgaW4gdGhlIHByb3Rvcy5cbiAgICAgKi9cbm4sIFxuLyoqXG4gICAgICogQW4gb3BhcXVlLCBzZXJ2ZXItYXNzaWduZWQgdG9rZW4gdGhhdCBhbGxvd3Mgd2F0Y2hpbmcgYSBxdWVyeSB0byBiZVxuICAgICAqIHJlc3VtZWQgYWZ0ZXIgZGlzY29ubmVjdGluZyB3aXRob3V0IHJldHJhbnNtaXR0aW5nIGFsbCB0aGUgZGF0YVxuICAgICAqIHRoYXQgbWF0Y2hlcyB0aGUgcXVlcnkuIFRoZSByZXN1bWUgdG9rZW4gZXNzZW50aWFsbHkgaWRlbnRpZmllcyBhXG4gICAgICogcG9pbnQgaW4gdGltZSBmcm9tIHdoaWNoIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlc3VtZSBzZW5kaW5nIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHJlbGF0ZWQgdG8gdGhlIHNuYXBzaG90VmVyc2lvbiBpbiB0aGF0IHRoZSByZXN1bWVUb2tlblxuICAgICAqIGVmZmVjdGl2ZWx5IGFsc28gZW5jb2RlcyB0aGF0IHZhbHVlLCBidXQgdGhlIHJlc3VtZVRva2VuIGlzIG9wYXF1ZVxuICAgICAqIGFuZCBzb21ldGltZXMgZW5jb2RlcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQSBjb25zZXF1ZW5jZSBvZiB0aGlzIGlzIHRoYXQgdGhlIHJlc3VtZVRva2VuIHNob3VsZCBiZSB1c2VkIHdoZW5cbiAgICAgKiBhc2tpbmcgdGhlIHNlcnZlciB0byByZWFzb24gYWJvdXQgd2hlcmUgdGhpcyBjbGllbnQgaXMgaW4gdGhlIHdhdGNoXG4gICAgICogc3RyZWFtLCBidXQgdGhlIGNsaWVudCBzaG91bGQgdXNlIHRoZSBzbmFwc2hvdFZlcnNpb24gZm9yIGl0cyBvd25cbiAgICAgKiBwdXJwb3Nlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdGhlIHNhbWUgdmFsdWUgYXMgVGFyZ2V0Q2hhbmdlLnJlc3VtZV90b2tlbiBpbiB0aGUgcHJvdG9zLlxuICAgICAqL1xuciwgXG4vKipcbiAgICAgKiBBIHNlcXVlbmNlIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGxhc3QgdGltZSB0aGlzIHF1ZXJ5IHdhc1xuICAgICAqIGxpc3RlbmVkIHRvLCB1c2VkIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24gcHVycG9zZXMuXG4gICAgICpcbiAgICAgKiBDb252ZW50aW9uYWxseSB0aGlzIHdvdWxkIGJlIGEgdGltZXN0YW1wIHZhbHVlLCBidXQgZGV2aWNlLWxvY2FsXG4gICAgICogY2xvY2tzIGFyZSB1bnJlbGlhYmxlIGFuZCB0aGV5IG11c3QgYmUgYWJsZSB0byBjcmVhdGUgbmV3IGxpc3RlbnNcbiAgICAgKiBldmVuIHdoaWxlIGRpc2Nvbm5lY3RlZC4gSW5zdGVhZCB0aGlzIHNob3VsZCBiZSBhIG1vbm90b25pY2FsbHlcbiAgICAgKiBpbmNyZWFzaW5nIG51bWJlciB0aGF0J3MgaW5jcmVtZW50ZWQgb24gZWFjaCBsaXN0ZW4gY2FsbC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gdGhlIHF1ZXJ5SWQgc2luY2UgdGhlIHF1ZXJ5SWQgaXMgYW5cbiAgICAgKiBpbW11dGFibGUgaWRlbnRpZmllciBhc3NpZ25lZCB0byB0aGUgUXVlcnkgb24gZmlyc3QgdXNlIHdoaWxlXG4gICAgICogbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIGlzIHVwZGF0ZWQgZXZlcnkgdGltZSB0aGUgcXVlcnkgaXNcbiAgICAgKiBsaXN0ZW5lZCB0by5cbiAgICAgKi9cbmksIFxuLyoqXG4gICAgICogRGVub3RlcyB0aGUgbWF4aW11bSBzbmFwc2hvdCB2ZXJzaW9uIGF0IHdoaWNoIHRoZSBhc3NvY2lhdGVkIHF1ZXJ5IHZpZXdcbiAgICAgKiBjb250YWluZWQgbm8gbGltYm8gZG9jdW1lbnRzLiAgVW5kZWZpbmVkIGZvciBkYXRhIHdyaXR0ZW4gcHJpb3IgdG9cbiAgICAgKiBzY2hlbWEgdmVyc2lvbiA5LlxuICAgICAqL1xubywgXG4vKipcbiAgICAgKiBUaGUgcXVlcnkgZm9yIHRoaXMgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQmVjYXVzZSBjYW5vbmljYWwgaWRzIGFyZSBub3QgdW5pcXVlIHdlIG11c3Qgc3RvcmUgdGhlIGFjdHVhbCBxdWVyeS4gV2VcbiAgICAgKiB1c2UgdGhlIHByb3RvIHRvIGhhdmUgYW4gb2JqZWN0IHdlIGNhbiBwZXJzaXN0IHdpdGhvdXQgaGF2aW5nIHRvXG4gICAgICogZHVwbGljYXRlIHRyYW5zbGF0aW9uIGxvZ2ljIHRvIGFuZCBmcm9tIGEgYFF1ZXJ5YCBvYmplY3QuXG4gICAgICovXG51KSB7XG4gICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMuY2Fub25pY2FsSWQgPSBlLCB0aGlzLnJlYWRUaW1lID0gbiwgdGhpcy5yZXN1bWVUb2tlbiA9IHIsIFxuICAgIHRoaXMubGFzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gaSwgdGhpcy5sYXN0TGltYm9GcmVlU25hcHNob3RWZXJzaW9uID0gbywgdGhpcy5xdWVyeSA9IHU7XG59O1xuXG5MaS5zdG9yZSA9IFwidGFyZ2V0c1wiLCBcbi8qKiBLZXlzIGFyZSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHZpYSB0aGUgdGFyZ2V0SWQgcHJvcGVydHkuICovXG5MaS5rZXlQYXRoID0gXCJ0YXJnZXRJZFwiLCBcbi8qKiBUaGUgbmFtZSBvZiB0aGUgcXVlcnlUYXJnZXRzIGluZGV4LiAqL1xuTGkucXVlcnlUYXJnZXRzSW5kZXhOYW1lID0gXCJxdWVyeVRhcmdldHNJbmRleFwiLCBcbi8qKlxuICAgICAqIFRoZSBpbmRleCBvZiBhbGwgY2Fub25pY2FsSWRzIHRvIHRoZSB0YXJnZXRzIHRoYXQgdGhleSBtYXRjaC4gVGhpcyBpcyBub3RcbiAgICAgKiBhIHVuaXF1ZSBtYXBwaW5nIGJlY2F1c2UgY2Fub25pY2FsSWQgZG9lcyBub3QgcHJvbWlzZSBhIHVuaXF1ZSBuYW1lIGZvciBhbGxcbiAgICAgKiBwb3NzaWJsZSBxdWVyaWVzLCBzbyB3ZSBhcHBlbmQgdGhlIHRhcmdldElkIHRvIG1ha2UgdGhlIG1hcHBpbmcgdW5pcXVlLlxuICAgICAqL1xuTGkucXVlcnlUYXJnZXRzS2V5UGF0aCA9IFsgXCJjYW5vbmljYWxJZFwiLCBcInRhcmdldElkXCIgXTtcblxuLyoqXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGFzc29jaWF0aW9uIGJldHdlZW4gYSB0YXJnZXQgYW5kIGEgZG9jdW1lbnQsIG9yIGFcbiAqIHNlbnRpbmVsIHJvdyBtYXJraW5nIHRoZSBsYXN0IHNlcXVlbmNlIG51bWJlciBhdCB3aGljaCBhIGRvY3VtZW50IHdhcyB1c2VkLlxuICogRWFjaCBkb2N1bWVudCBjYWNoZWQgbXVzdCBoYXZlIGEgY29ycmVzcG9uZGluZyBzZW50aW5lbCByb3cgYmVmb3JlIGxydVxuICogZ2FyYmFnZSBjb2xsZWN0aW9uIGlzIGVuYWJsZWQuXG4gKlxuICogVGhlIHRhcmdldCBhc3NvY2lhdGlvbnMgYW5kIHNlbnRpbmVsIHJvd3MgYXJlIGNvLWxvY2F0ZWQgc28gdGhhdCBvcnBoYW5lZFxuICogZG9jdW1lbnRzIGFuZCB0aGVpciBzZXF1ZW5jZSBudW1iZXJzIGNhbiBiZSBpZGVudGlmaWVkIGVmZmljaWVudGx5IHZpYSBhIHNjYW5cbiAqIG9mIHRoaXMgc3RvcmUuXG4gKi9cbnZhciBSaSA9IGZ1bmN0aW9uKFxuLyoqXG4gICAgICogVGhlIHRhcmdldElkIGlkZW50aWZ5aW5nIGEgdGFyZ2V0IG9yIDAgZm9yIGEgc2VudGluZWwgcm93LlxuICAgICAqL1xudCwgXG4vKipcbiAgICAgKiBUaGUgcGF0aCB0byB0aGUgZG9jdW1lbnQsIGFzIGVuY29kZWQgaW4gdGhlIGtleS5cbiAgICAgKi9cbmUsIFxuLyoqXG4gICAgICogSWYgdGhpcyBpcyBhIHNlbnRpbmVsIHJvdywgdGhpcyBzaG91bGQgYmUgdGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgbGFzdFxuICAgICAqIHRpbWUgdGhlIGRvY3VtZW50IHNwZWNpZmllZCBieSBgcGF0aGAgd2FzIHVzZWQuIE90aGVyd2lzZSwgaXQgc2hvdWxkIGJlXG4gICAgICogYHVuZGVmaW5lZGAuXG4gICAgICovXG5uKSB7XG4gICAgdGhpcy50YXJnZXRJZCA9IHQsIHRoaXMucGF0aCA9IGUsIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSBuO1xufTtcblxuLyoqIE5hbWUgb2YgdGhlIEluZGV4ZWREYiBvYmplY3Qgc3RvcmUuICAqLyBSaS5zdG9yZSA9IFwidGFyZ2V0RG9jdW1lbnRzXCIsIFxuLyoqIEtleXMgYXJlIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgdmlhIHRoZSB0YXJnZXRJZCwgcGF0aCBwcm9wZXJ0aWVzLiAqL1xuUmkua2V5UGF0aCA9IFsgXCJ0YXJnZXRJZFwiLCBcInBhdGhcIiBdLCBcbi8qKiBUaGUgaW5kZXggbmFtZSBmb3IgdGhlIHJldmVyc2UgaW5kZXguICovXG5SaS5kb2N1bWVudFRhcmdldHNJbmRleCA9IFwiZG9jdW1lbnRUYXJnZXRzSW5kZXhcIiwgXG4vKiogV2UgYWxzbyBuZWVkIHRvIGNyZWF0ZSB0aGUgcmV2ZXJzZSBpbmRleCBmb3IgdGhlc2UgcHJvcGVydGllcy4gKi9cblJpLmRvY3VtZW50VGFyZ2V0c0tleVBhdGggPSBbIFwicGF0aFwiLCBcInRhcmdldElkXCIgXTtcblxuLyoqXG4gKiBBIHJlY29yZCBvZiBnbG9iYWwgc3RhdGUgdHJhY2tlZCBhY3Jvc3MgYWxsIFRhcmdldHMsIHRyYWNrZWQgc2VwYXJhdGVseVxuICogdG8gYXZvaWQgdGhlIG5lZWQgZm9yIGV4dHJhIGluZGV4ZXMuXG4gKlxuICogVGhpcyBzaG91bGQgYmUga2VwdCBpbi1zeW5jIHdpdGggdGhlIHByb3RvIHVzZWQgaW4gdGhlIGlPUyBjbGllbnQuXG4gKi9cbnZhciBNaSA9IGZ1bmN0aW9uKFxuLyoqXG4gICAgICogVGhlIGhpZ2hlc3QgbnVtYmVyZWQgdGFyZ2V0IGlkIGFjcm9zcyBhbGwgdGFyZ2V0cy5cbiAgICAgKlxuICAgICAqIFNlZSBEYlRhcmdldC50YXJnZXRJZC5cbiAgICAgKi9cbnQsIFxuLyoqXG4gICAgICogVGhlIGhpZ2hlc3QgbnVtYmVyZWQgbGFzdExpc3RlblNlcXVlbmNlTnVtYmVyIGFjcm9zcyBhbGwgdGFyZ2V0cy5cbiAgICAgKlxuICAgICAqIFNlZSBEYlRhcmdldC5sYXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIuXG4gICAgICovXG5lLCBcbi8qKlxuICAgICAqIEEgZ2xvYmFsIHNuYXBzaG90IHZlcnNpb24gcmVwcmVzZW50aW5nIHRoZSBsYXN0IGNvbnNpc3RlbnQgc25hcHNob3Qgd2VcbiAgICAgKiByZWNlaXZlZCBmcm9tIHRoZSBiYWNrZW5kLiBUaGlzIGlzIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZyBhbmQgYW55XG4gICAgICogc25hcHNob3RzIHJlY2VpdmVkIGZyb20gdGhlIGJhY2tlbmQgcHJpb3IgdG8gdGhpcyB2ZXJzaW9uIChlLmcuIGZvclxuICAgICAqIHRhcmdldHMgcmVzdW1lZCB3aXRoIGEgcmVzdW1lVG9rZW4pIHNob3VsZCBiZSBzdXBwcmVzc2VkIChidWZmZXJlZClcbiAgICAgKiB1bnRpbCB0aGUgYmFja2VuZCBoYXMgY2F1Z2h0IHVwIHRvIHRoaXMgc25hcHNob3QgdmVyc2lvbiBhZ2Fpbi4gVGhpc1xuICAgICAqIHByZXZlbnRzIG91ciBjYWNoZSBmcm9tIGV2ZXIgZ29pbmcgYmFja3dhcmRzIGluIHRpbWUuXG4gICAgICovXG5uLCBcbi8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdGFyZ2V0cyBwZXJzaXN0ZWQuXG4gICAgICovXG5yKSB7XG4gICAgdGhpcy5oaWdoZXN0VGFyZ2V0SWQgPSB0LCB0aGlzLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IGUsIHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IG4sIFxuICAgIHRoaXMudGFyZ2V0Q291bnQgPSByO1xufTtcblxuLyoqXG4gKiBUaGUga2V5IHN0cmluZyB1c2VkIGZvciB0aGUgc2luZ2xlIG9iamVjdCB0aGF0IGV4aXN0cyBpbiB0aGVcbiAqIERiVGFyZ2V0R2xvYmFsIHN0b3JlLlxuICovIE1pLmtleSA9IFwidGFyZ2V0R2xvYmFsS2V5XCIsIE1pLnN0b3JlID0gXCJ0YXJnZXRHbG9iYWxcIjtcblxuLyoqXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGFzc29jaWF0aW9uIGJldHdlZW4gYSBDb2xsZWN0aW9uIGlkIChlLmcuICdtZXNzYWdlcycpXG4gKiB0byBhIHBhcmVudCBwYXRoIChlLmcuICcvY2hhdHMvMTIzJykgdGhhdCBjb250YWlucyBpdCBhcyBhIChzdWIpY29sbGVjdGlvbi5cbiAqIFRoaXMgaXMgdXNlZCB0byBlZmZpY2llbnRseSBmaW5kIGFsbCBjb2xsZWN0aW9ucyB0byBxdWVyeSB3aGVuIHBlcmZvcm1pbmdcbiAqIGEgQ29sbGVjdGlvbiBHcm91cCBxdWVyeS5cbiAqL1xudmFyIFVpID0gZnVuY3Rpb24oXG4vKipcbiAgICAgKiBUaGUgY29sbGVjdGlvbklkIChlLmcuICdtZXNzYWdlcycpXG4gICAgICovXG50LCBcbi8qKlxuICAgICAqIFRoZSBwYXRoIHRvIHRoZSBwYXJlbnQgKGVpdGhlciBhIGRvY3VtZW50IGxvY2F0aW9uIG9yIGFuIGVtcHR5IHBhdGggZm9yXG4gICAgICogYSByb290LWxldmVsIGNvbGxlY3Rpb24pLlxuICAgICAqL1xuZSkge1xuICAgIHRoaXMuY29sbGVjdGlvbklkID0gdCwgdGhpcy5wYXJlbnQgPSBlO1xufTtcblxuLyoqIE5hbWUgb2YgdGhlIEluZGV4ZWREYiBvYmplY3Qgc3RvcmUuICovIGZ1bmN0aW9uIHFpKHQpIHtcbiAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKFJpLnN0b3JlLCB7XG4gICAgICAgIGtleVBhdGg6IFJpLmtleVBhdGhcbiAgICB9KS5jcmVhdGVJbmRleChSaS5kb2N1bWVudFRhcmdldHNJbmRleCwgUmkuZG9jdW1lbnRUYXJnZXRzS2V5UGF0aCwge1xuICAgICAgICB1bmlxdWU6ICEwXG4gICAgfSksIFxuICAgIC8vIE5PVEU6IFRoaXMgaXMgdW5pcXVlIG9ubHkgYmVjYXVzZSB0aGUgVGFyZ2V0SWQgaXMgdGhlIHN1ZmZpeC5cbiAgICB0LmNyZWF0ZU9iamVjdFN0b3JlKExpLnN0b3JlLCB7XG4gICAgICAgIGtleVBhdGg6IExpLmtleVBhdGhcbiAgICB9KS5jcmVhdGVJbmRleChMaS5xdWVyeVRhcmdldHNJbmRleE5hbWUsIExpLnF1ZXJ5VGFyZ2V0c0tleVBhdGgsIHtcbiAgICAgICAgdW5pcXVlOiAhMFxuICAgIH0pLCB0LmNyZWF0ZU9iamVjdFN0b3JlKE1pLnN0b3JlKTtcbn1cblxuVWkuc3RvcmUgPSBcImNvbGxlY3Rpb25QYXJlbnRzXCIsIFxuLyoqIEtleXMgYXJlIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgdmlhIHRoZSBjb2xsZWN0aW9uSWQsIHBhcmVudCBwcm9wZXJ0aWVzLiAqL1xuVWkua2V5UGF0aCA9IFsgXCJjb2xsZWN0aW9uSWRcIiwgXCJwYXJlbnRcIiBdO1xuXG52YXIgRmkgPSBmdW5jdGlvbihcbi8vIE5vdGU6IFByZXZpb3VzIHNjaGVtYSB2ZXJzaW9ucyBpbmNsdWRlZCBhIGZpZWxkXG4vLyBcImxhc3RQcm9jZXNzZWREb2N1bWVudENoYW5nZUlkXCIuIERvbid0IHVzZSBhbnltb3JlLlxuLyoqIFRoZSBhdXRvLWdlbmVyYXRlZCBjbGllbnQgaWQgYXNzaWduZWQgYXQgY2xpZW50IHN0YXJ0dXAuICovXG50LCBcbi8qKiBUaGUgbGFzdCB0aW1lIHRoaXMgc3RhdGUgd2FzIHVwZGF0ZWQuICovXG5lLCBcbi8qKiBXaGV0aGVyIHRoZSBjbGllbnQncyBuZXR3b3JrIGNvbm5lY3Rpb24gaXMgZW5hYmxlZC4gKi9cbm4sIFxuLyoqIFdoZXRoZXIgdGhpcyBjbGllbnQgaXMgcnVubmluZyBpbiBhIGZvcmVncm91bmQgdGFiLiAqL1xucikge1xuICAgIHRoaXMuY2xpZW50SWQgPSB0LCB0aGlzLnVwZGF0ZVRpbWVNcyA9IGUsIHRoaXMubmV0d29ya0VuYWJsZWQgPSBuLCB0aGlzLmluRm9yZWdyb3VuZCA9IHI7XG59O1xuXG4vKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gKi8gRmkuc3RvcmUgPSBcImNsaWVudE1ldGFkYXRhXCIsIFxuLyoqIEtleXMgYXJlIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgdmlhIHRoZSBjbGllbnRJZCBwcm9wZXJ0aWVzLiAqL1xuRmkua2V5UGF0aCA9IFwiY2xpZW50SWRcIjtcblxudmFyIGppID0gZnVuY3Rpb24oXG4vKiogVGhlIElEIG9mIHRoZSBsb2FkZWQgYnVuZGxlLiAqL1xudCwgXG4vKiogVGhlIGNyZWF0ZSB0aW1lIG9mIHRoZSBsb2FkZWQgYnVuZGxlLiAqL1xuZSwgXG4vKiogVGhlIHNjaGVtYSB2ZXJzaW9uIG9mIHRoZSBsb2FkZWQgYnVuZGxlLiAqL1xubikge1xuICAgIHRoaXMuYnVuZGxlSWQgPSB0LCB0aGlzLmNyZWF0ZVRpbWUgPSBlLCB0aGlzLnZlcnNpb24gPSBuO1xufTtcblxuLyoqIE5hbWUgb2YgdGhlIEluZGV4ZWREYiBvYmplY3Qgc3RvcmUuICovIGppLnN0b3JlID0gXCJidW5kbGVzXCIsIGppLmtleVBhdGggPSBcImJ1bmRsZUlkXCI7XG5cbnZhciBCaSA9IGZ1bmN0aW9uKFxuLyoqIFRoZSBuYW1lIG9mIHRoZSBxdWVyeS4gKi9cbnQsIFxuLyoqIFRoZSByZWFkIHRpbWUgb2YgdGhlIHJlc3VsdHMgc2F2ZWQgaW4gdGhlIGJ1bmRsZSBmcm9tIHRoZSBuYW1lZCBxdWVyeS4gKi9cbmUsIFxuLyoqIFRoZSBxdWVyeSBzYXZlZCBpbiB0aGUgYnVuZGxlLiAqL1xubikge1xuICAgIHRoaXMubmFtZSA9IHQsIHRoaXMucmVhZFRpbWUgPSBlLCB0aGlzLmJ1bmRsZWRRdWVyeSA9IG47XG59O1xuXG4vKiogTmFtZSBvZiB0aGUgSW5kZXhlZERiIG9iamVjdCBzdG9yZS4gKi8gQmkuc3RvcmUgPSBcIm5hbWVkUXVlcmllc1wiLCBCaS5rZXlQYXRoID0gXCJuYW1lXCI7XG5cbnZhciB6aSA9IHIocihyKHIoWyBTaS5zdG9yZSwga2kuc3RvcmUsIERpLnN0b3JlLCBWaS5zdG9yZSwgTGkuc3RvcmUsIEFpLnN0b3JlLCBNaS5zdG9yZSwgUmkuc3RvcmUgXSwgWyBGaS5zdG9yZSBdKSwgWyBDaS5zdG9yZSBdKSwgWyBVaS5zdG9yZSBdKSwgWyBqaS5zdG9yZSwgQmkuc3RvcmUgXSksIEdpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLm1vID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gS2kodCkuZ2V0KGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0KSByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiAoZSA9IHQpLmJ1bmRsZUlkLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVRpbWU6IHVpKGUuY3JlYXRlVGltZSksXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogZS52ZXJzaW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqIEVuY29kZXMgYSBEYkJ1bmRsZSB0byBhIEJ1bmRsZS4gKi8gICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgIC8qKiBFbmNvZGVzIGEgQnVuZGxlTWV0YWRhdGEgdG8gYSBEYkJ1bmRsZS4gKi8gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5BbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIEtpKHQpLnB1dCh7XG4gICAgICAgICAgICBidW5kbGVJZDogKG4gPSBlKS5pZCxcbiAgICAgICAgICAgIGNyZWF0ZVRpbWU6IG9pKGxlKG4uY3JlYXRlVGltZSkpLFxuICAgICAgICAgICAgdmVyc2lvbjogbi52ZXJzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbjtcbiAgICAgICAgLyoqIEVuY29kZXMgYSBEYk5hbWVkUXVlcnkgdG8gYSBOYW1lZFF1ZXJ5LiAqLyAgICB9LCB0LnByb3RvdHlwZS5SbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFFpKHQpLmdldChlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodCkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAoZSA9IHQpLm5hbWUsXG4gICAgICAgICAgICAgICAgcXVlcnk6IGhpKGUuYnVuZGxlZFF1ZXJ5KSxcbiAgICAgICAgICAgICAgICByZWFkVGltZTogdWkoZS5yZWFkVGltZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgIC8qKiBFbmNvZGVzIGEgTmFtZWRRdWVyeSBmcm9tIGEgYnVuZGxlIHByb3RvIHRvIGEgRGJOYW1lZFF1ZXJ5LiAqLyAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlBvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gUWkodCkucHV0KGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdC5uYW1lLFxuICAgICAgICAgICAgICAgIHJlYWRUaW1lOiBvaShsZSh0LnJlYWRUaW1lKSksXG4gICAgICAgICAgICAgICAgYnVuZGxlZFF1ZXJ5OiB0LmJ1bmRsZWRRdWVyeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfShlKSk7XG4gICAgfSwgdDtcbn0oKTtcblxuLy8gVjIgaXMgbm8gbG9uZ2VyIHVzYWJsZSAoc2VlIGNvbW1lbnQgYXQgdG9wIG9mIGZpbGUpXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIGJ1bmRsZXMgb2JqZWN0IHN0b3JlLlxuICovXG5mdW5jdGlvbiBLaSh0KSB7XG4gICAgcmV0dXJuIG5vLnFuKHQsIGppLnN0b3JlKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIG5hbWVkUXVlcmllcyBvYmplY3Qgc3RvcmUuXG4gKi8gZnVuY3Rpb24gUWkodCkge1xuICAgIHJldHVybiBuby5xbih0LCBCaS5zdG9yZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgcGVyc2lzdGVkIGltcGxlbWVudGF0aW9uIG9mIEluZGV4TWFuYWdlci5cbiAqLyB2YXIgV2kgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBpbi1tZW1vcnkgY29weSBvZiB0aGUgaW5kZXggZW50cmllcyB3ZSd2ZSBhbHJlYWR5IHdyaXR0ZW4gc2luY2UgdGhlIFNES1xuICAgICAgICAgKiBsYXVuY2hlZC4gVXNlZCB0byBhdm9pZCByZS13cml0aW5nIHRoZSBzYW1lIGVudHJ5IHJlcGVhdGVkbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgKk5PVCogYSBjb21wbGV0ZSBjYWNoZSBvZiB3aGF0J3MgaW4gcGVyc2lzdGVuY2UgYW5kIHNvIGNhbiBuZXZlciBiZSB1c2VkIHRvXG4gICAgICAgICAqIHNhdGlzZnkgcmVhZHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLlZvID0gbmV3IFRpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IGVudHJ5IHRvIHRoZSBjb2xsZWN0aW9uIHBhcmVudCBpbmRleC5cbiAgICAgKlxuICAgICAqIFJlcGVhdGVkIGNhbGxzIGZvciB0aGUgc2FtZSBjb2xsZWN0aW9uUGF0aCBzaG91bGQgYmUgYXZvaWRlZCB3aXRoaW4gYVxuICAgICAqIHRyYW5zYWN0aW9uIGFzIEluZGV4ZWREYkluZGV4TWFuYWdlciBvbmx5IGNhY2hlcyB3cml0ZXMgb25jZSBhIHRyYW5zYWN0aW9uXG4gICAgICogaGFzIGJlZW4gY29tbWl0dGVkLlxuICAgICAqLyAgICByZXR1cm4gdC5wcm90b3R5cGUuS3IgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLlZvLmhhcyhlKSkge1xuICAgICAgICAgICAgdmFyIHIgPSBlLkMoKSwgaSA9IGUuUygpO1xuICAgICAgICAgICAgdC5EaSgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBjb2xsZWN0aW9uIHRvIHRoZSBpbiBtZW1vcnkgY2FjaGUgb25seSBpZiB0aGUgdHJhbnNhY3Rpb24gd2FzXG4gICAgICAgICAgICAgICAgLy8gc3VjY2Vzc2Z1bGx5IGNvbW1pdHRlZC5cbiAgICAgICAgICAgICAgICBuLlZvLmFkZChlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHZhciBvID0ge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogcixcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IEpyKGkpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFlpKHQpLnB1dChvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3IucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLmppID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IFtdLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyBlLCBcIlwiIF0sIFsgTChlKSwgXCJcIiBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCk7XG4gICAgICAgIHJldHVybiBZaSh0KS5YbihyKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciByID0gMCwgaSA9IHQ7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBpW3JdO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY29sbGVjdGlvbklkIGd1YXJkIHNob3VsZG4ndCBiZSBuZWNlc3NhcnkgKGFuZCBpc24ndCBhcyBsb25nXG4gICAgICAgICAgICAgICAgLy8gYXMgd2UncmUgcnVubmluZyBpbiBhIHJlYWwgYnJvd3NlciksIGJ1dCB0aGVyZSdzIGEgYnVnIGluXG4gICAgICAgICAgICAgICAgLy8gaW5kZXhlZGRic2hpbSB0aGF0IGJyZWFrcyBvdXIgcmFuZ2UgaW4gb3VyIHRlc3RzIHJ1bm5pbmcgaW4gbm9kZTpcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW0vaXNzdWVzLzMzNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5jb2xsZWN0aW9uSWQgIT09IGUpIGJyZWFrO1xuICAgICAgICAgICAgICAgIG4ucHVzaChacihvLnBhcmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpO1xuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgY29sbGVjdGlvblBhcmVudHNcbiAqIGRvY3VtZW50IHN0b3JlLlxuICovIGZ1bmN0aW9uIFlpKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwgVWkuc3RvcmUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIE9mZnNldCB0byBlbnN1cmUgbm9uLW92ZXJsYXBwaW5nIHRhcmdldCBpZHMuICovXG4vKipcbiAqIEdlbmVyYXRlcyBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgdGFyZ2V0IElEcyBmb3Igc2VuZGluZyB0YXJnZXRzIHRvIHRoZVxuICogd2F0Y2ggc3RyZWFtLlxuICpcbiAqIFRoZSBjbGllbnQgY29uc3RydWN0cyB0d28gZ2VuZXJhdG9ycywgb25lIGZvciB0aGUgdGFyZ2V0IGNhY2hlLCBhbmQgb25lIGZvclxuICogZm9yIHRoZSBzeW5jIGVuZ2luZSAodG8gZ2VuZXJhdGUgbGltYm8gZG9jdW1lbnRzIHRhcmdldHMpLiBUaGVzZVxuICogZ2VuZXJhdG9ycyBwcm9kdWNlIG5vbi1vdmVybGFwcGluZyBJRHMgKGJ5IHVzaW5nIGV2ZW4gYW5kIG9kZCBJRHNcbiAqIHJlc3BlY3RpdmVseSkuXG4gKlxuICogQnkgc2VwYXJhdGluZyB0aGUgdGFyZ2V0IElEIHNwYWNlLCB0aGUgcXVlcnkgY2FjaGUgY2FuIGdlbmVyYXRlIHRhcmdldCBJRHNcbiAqIHRoYXQgcGVyc2lzdCBhY3Jvc3MgY2xpZW50IHJlc3RhcnRzLCB3aGlsZSBzeW5jIGVuZ2luZSBjYW4gaW5kZXBlbmRlbnRseVxuICogZ2VuZXJhdGUgaW4tbWVtb3J5IHRhcmdldCBJRHMgdGhhdCBhcmUgdHJhbnNpZW50IGFuZCBjYW4gYmUgcmV1c2VkIGFmdGVyIGFcbiAqIHJlc3RhcnQuXG4gKi8gdmFyIEhpID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy55byA9IHQ7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnlvICs9IDIsIHRoaXMueW87XG4gICAgfSwgdC5wbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBUaGUgdGFyZ2V0IGNhY2hlIGdlbmVyYXRvciBtdXN0IHJldHVybiAnMicgaW4gaXRzIGZpcnN0IGNhbGwgdG8gYG5leHQoKWBcbiAgICAgICAgLy8gYXMgdGhlcmUgaXMgbm8gZGlmZmVyZW50aWF0aW9uIGluIHRoZSBwcm90b2NvbCBsYXllciBiZXR3ZWVuIGFuIHVuc2V0XG4gICAgICAgIC8vIG51bWJlciBhbmQgdGhlIG51bWJlciAnMCcuIElmIHdlIHdlcmUgdG8gc2VudCBhIHRhcmdldCB3aXRoIHRhcmdldCBJRFxuICAgICAgICAvLyAnMCcsIHRoZSBiYWNrZW5kIHdvdWxkIGNvbnNpZGVyIGl0IHVuc2V0IGFuZCByZXBsYWNlIGl0IHdpdGggaXRzIG93biBJRC5cbiAgICAgICAgcmV0dXJuIG5ldyB0KDApO1xuICAgIH0sIHQudm8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gU3luYyBlbmdpbmUgYXNzaWducyB0YXJnZXQgSURzIGZvciBsaW1ibyBkb2N1bWVudCBkZXRlY3Rpb24uXG4gICAgICAgIHJldHVybiBuZXcgdCgtMSk7XG4gICAgfSwgdDtcbn0oKSwgSmkgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLkxyID0gdCwgdGhpcy5zZXJpYWxpemVyID0gZTtcbiAgICB9XG4gICAgLy8gUE9SVElORyBOT1RFOiBXZSBkb24ndCBjYWNoZSBnbG9iYWwgbWV0YWRhdGEgZm9yIHRoZSB0YXJnZXQgY2FjaGUsIHNpbmNlXG4gICAgLy8gc29tZSBvZiBpdCAoaW4gcGFydGljdWxhciBgaGlnaGVzdFRhcmdldElkYCkgY2FuIGJlIG1vZGlmaWVkIGJ5IHNlY29uZGFyeVxuICAgIC8vIHRhYnMuIFdlIGNvdWxkIHBlcmhhcHMgYmUgbW9yZSBncmFudWxhciAoYW5kIGUuZy4gc3RpbGwgY2FjaGVcbiAgICAvLyBgbGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbmAgaW4gbWVtb3J5KSBidXQgZm9yIHNpbXBsaWNpdHkgd2UgY3VycmVudGx5IGdvXG4gICAgLy8gdG8gSW5kZXhlZERiIHdoZW5ldmVyIHdlIG5lZWQgdG8gcmVhZCBtZXRhZGF0YS4gV2UgY2FuIHJldmlzaXQgaWYgaXQgdHVybnNcbiAgICAvLyBvdXQgdG8gaGF2ZSBhIG1lYW5pbmdmdWwgcGVyZm9ybWFuY2UgaW1wYWN0LlxuICAgICAgICByZXR1cm4gdC5wcm90b3R5cGUuYm8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuU28odCkubmV4dCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgdmFyIHIgPSBuZXcgSGkobi5oaWdoZXN0VGFyZ2V0SWQpO1xuICAgICAgICAgICAgcmV0dXJuIG4uaGlnaGVzdFRhcmdldElkID0gci5uZXh0KCksIGUuRG8odCwgbikubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uaGlnaGVzdFRhcmdldElkO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuQ28gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlNvKHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB6Lm0obmV3IEIodC5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uLnNlY29uZHMsIHQubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbi5uYW5vc2Vjb25kcykpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuTm8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlNvKHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlcjtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnhvID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLlNvKHQpLm5leHQoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IGUsIG4gJiYgKGkubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IG4uUCgpKSwgXG4gICAgICAgICAgICBlID4gaS5oaWdoZXN0TGlzdGVuU2VxdWVuY2VOdW1iZXIgJiYgKGkuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyID0gZSksIHIuRG8odCwgaSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5GbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5Pbyh0LCBlKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuLlNvKHQpLm5leHQoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gci50YXJnZXRDb3VudCArPSAxLCBuLk1vKGUsIHIpLCBuLkRvKHQsIHIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUua28gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk9vKHQsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLiRvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLkxvKHQsIGUudGFyZ2V0SWQpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFhpKHQpLmRlbGV0ZShlLnRhcmdldElkKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uU28odCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gayhlLnRhcmdldENvdW50ID4gMCksIGUudGFyZ2V0Q291bnQgLT0gMSwgbi5Ebyh0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIERyb3BzIGFueSB0YXJnZXRzIHdpdGggc2VxdWVuY2UgbnVtYmVyIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdXBwZXIgYm91bmQsIGV4Y2VwdGluZyB0aG9zZVxuICAgICAqIHByZXNlbnQgaW4gYGFjdGl2ZVRhcmdldElkc2AuIERvY3VtZW50IGFzc29jaWF0aW9ucyBmb3IgdGhlIHJlbW92ZWQgdGFyZ2V0cyBhcmUgYWxzbyByZW1vdmVkLlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB0YXJnZXRzIHJlbW92ZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTnIgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcywgaSA9IDAsIG8gPSBbXTtcbiAgICAgICAgcmV0dXJuIFhpKHQpLm5zKChmdW5jdGlvbih1LCBzKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGFpKHMpO1xuICAgICAgICAgICAgYS5zZXF1ZW5jZU51bWJlciA8PSBlICYmIG51bGwgPT09IG4uZ2V0KGEudGFyZ2V0SWQpICYmIChpKyssIG8ucHVzaChyLiRvKHQsIGEpKSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvci54bihvKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDYWxsIHByb3ZpZGVkIGZ1bmN0aW9uIHdpdGggZWFjaCBgVGFyZ2V0RGF0YWAgdGhhdCB3ZSBoYXZlIGNhY2hlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5EZSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFhpKHQpLm5zKChmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgICAgICB2YXIgciA9IGFpKG4pO1xuICAgICAgICAgICAgZShyKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlNvID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gJGkodCkuZ2V0KE1pLmtleSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGsobnVsbCAhPT0gdCksIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5EbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuICRpKHQpLnB1dChNaS5rZXksIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLk9vID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gWGkodCkucHV0KGNpKHRoaXMuc2VyaWFsaXplciwgZSkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEluLXBsYWNlIHVwZGF0ZXMgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIHRvIGFjY291bnQgZm9yIHZhbHVlcyBpbiB0aGUgZ2l2ZW5cbiAgICAgKiBUYXJnZXREYXRhLiBTYXZpbmcgaXMgZG9uZSBzZXBhcmF0ZWx5LiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgd2VyZSBhbnlcbiAgICAgKiBjaGFuZ2VzIHRvIHRoZSBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5NbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSAhMTtcbiAgICAgICAgcmV0dXJuIHQudGFyZ2V0SWQgPiBlLmhpZ2hlc3RUYXJnZXRJZCAmJiAoZS5oaWdoZXN0VGFyZ2V0SWQgPSB0LnRhcmdldElkLCBuID0gITApLCBcbiAgICAgICAgdC5zZXF1ZW5jZU51bWJlciA+IGUuaGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyICYmIChlLmhpZ2hlc3RMaXN0ZW5TZXF1ZW5jZU51bWJlciA9IHQuc2VxdWVuY2VOdW1iZXIsIFxuICAgICAgICBuID0gITApLCBuO1xuICAgIH0sIHQucHJvdG90eXBlLkJvID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5Tbyh0KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC50YXJnZXRDb3VudDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnFvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBJdGVyYXRpbmcgYnkgdGhlIGNhbm9uaWNhbElkIG1heSB5aWVsZCBtb3JlIHRoYW4gb25lIHJlc3VsdCBiZWNhdXNlXG4gICAgICAgIC8vIGNhbm9uaWNhbElkIHZhbHVlcyBhcmUgbm90IHJlcXVpcmVkIHRvIGJlIHVuaXF1ZSBwZXIgdGFyZ2V0LiBUaGlzIHF1ZXJ5XG4gICAgICAgIC8vIGRlcGVuZHMgb24gdGhlIHF1ZXJ5VGFyZ2V0cyBpbmRleCB0byBiZSBlZmZpY2llbnQuXG4gICAgICAgIHZhciBuID0gdHQoZSksIHIgPSBJREJLZXlSYW5nZS5ib3VuZChbIG4sIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSBdLCBbIG4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSBdKSwgaSA9IG51bGw7XG4gICAgICAgIHJldHVybiBYaSh0KS5ucyh7XG4gICAgICAgICAgICByYW5nZTogcixcbiAgICAgICAgICAgIGluZGV4OiBMaS5xdWVyeVRhcmdldHNJbmRleE5hbWVcbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIG4sIHIpIHtcbiAgICAgICAgICAgIHZhciBvID0gYWkobik7XG4gICAgICAgICAgICAvLyBBZnRlciBmaW5kaW5nIGEgcG90ZW50aWFsIG1hdGNoLCBjaGVjayB0aGF0IHRoZSB0YXJnZXQgaXNcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGVxdWFsIHRvIHRoZSByZXF1ZXN0ZWQgdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICAgICAgZXQoZSwgby50YXJnZXQpICYmIChpID0gbywgci5kb25lKCkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlVvID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSBbXSwgbyA9IFppKHQpO1xuICAgICAgICAvLyBQT1JUSU5HIE5PVEU6IFRoZSByZXZlcnNlIGluZGV4IChkb2N1bWVudHNUYXJnZXRzKSBpcyBtYWludGFpbmVkIGJ5XG4gICAgICAgIC8vIEluZGV4ZWREYi5cbiAgICAgICAgICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdSA9IEpyKGUucGF0aCk7XG4gICAgICAgICAgICBpLnB1c2goby5wdXQobmV3IFJpKG4sIHUpKSksIGkucHVzaChyLkxyLlFvKHQsIG4sIGUpKTtcbiAgICAgICAgfSkpLCBvci54bihpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5LbyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gWmkodCk7XG4gICAgICAgIC8vIFBPUlRJTkcgTk9URTogVGhlIHJldmVyc2UgaW5kZXggKGRvY3VtZW50c1RhcmdldHMpIGlzIG1haW50YWluZWQgYnlcbiAgICAgICAgLy8gSW5kZXhlZERiLlxuICAgICAgICAgICAgICAgIHJldHVybiBvci5mb3JFYWNoKGUsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgbyA9IEpyKGUucGF0aCk7XG4gICAgICAgICAgICByZXR1cm4gb3IueG4oWyBpLmRlbGV0ZShbIG4sIG8gXSksIHIuTHIuV28odCwgbiwgZSkgXSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5MbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBaaSh0KSwgciA9IElEQktleVJhbmdlLmJvdW5kKFsgZSBdLCBbIGUgKyAxIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKTtcbiAgICAgICAgcmV0dXJuIG4uZGVsZXRlKHIpO1xuICAgIH0sIHQucHJvdG90eXBlLmpvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IElEQktleVJhbmdlLmJvdW5kKFsgZSBdLCBbIGUgKyAxIF0sIFxuICAgICAgICAvKmxvd2VyT3Blbj0qLyAhMSwgXG4gICAgICAgIC8qdXBwZXJPcGVuPSovICEwKSwgciA9IFppKHQpLCBpID0gSXQoKTtcbiAgICAgICAgcmV0dXJuIHIubnMoe1xuICAgICAgICAgICAgcmFuZ2U6IG4sXG4gICAgICAgICAgICBlczogITBcbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIHZhciByID0gWnIodFsxXSksIG8gPSBuZXcgWShyKTtcbiAgICAgICAgICAgIGkgPSBpLmFkZChvKTtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBKcihlLnBhdGgpLCByID0gSURCS2V5UmFuZ2UuYm91bmQoWyBuIF0sIFsgTChuKSBdLCBcbiAgICAgICAgLypsb3dlck9wZW49Ki8gITEsIFxuICAgICAgICAvKnVwcGVyT3Blbj0qLyAhMCksIGkgPSAwO1xuICAgICAgICByZXR1cm4gWmkodCkubnMoe1xuICAgICAgICAgICAgaW5kZXg6IFJpLmRvY3VtZW50VGFyZ2V0c0luZGV4LFxuICAgICAgICAgICAgZXM6ICEwLFxuICAgICAgICAgICAgcmFuZ2U6IHJcbiAgICAgICAgfSwgKGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIHZhciByID0gdFswXTtcbiAgICAgICAgICAgIC8vIEhhdmluZyBhIHNlbnRpbmVsIHJvdyBmb3IgYSBkb2N1bWVudCBkb2VzIG5vdCBjb3VudCBhcyBjb250YWluaW5nIHRoYXQgZG9jdW1lbnQ7XG4gICAgICAgICAgICAvLyBGb3IgdGhlIHRhcmdldCBjYWNoZSwgY29udGFpbmluZyB0aGUgZG9jdW1lbnQgbWVhbnMgdGhlIGRvY3VtZW50IGlzIHBhcnQgb2Ygc29tZVxuICAgICAgICAgICAgLy8gdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICAgICAgdFsxXTtcbiAgICAgICAgICAgIDAgIT09IHIgJiYgKGkrKywgbi5kb25lKCkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaSA+IDA7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBMb29rcyB1cCBhIFRhcmdldERhdGEgZW50cnkgYnkgdGFyZ2V0IElELlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldElkIFRoZSB0YXJnZXQgSUQgb2YgdGhlIFRhcmdldERhdGEgZW50cnkgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJuIFRoZSBjYWNoZWQgVGFyZ2V0RGF0YSBlbnRyeSwgb3IgbnVsbCBpZiB0aGUgY2FjaGUgaGFzIG5vIGVudHJ5IGZvclxuICAgICAqIHRoZSB0YXJnZXQuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICB0LnByb3RvdHlwZS5xZSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFhpKHQpLmdldChlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCA/IGFpKHQpIDogbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgcXVlcmllcyBvYmplY3Qgc3RvcmUuXG4gKi9cbmZ1bmN0aW9uIFhpKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwgTGkuc3RvcmUpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgdGFyZ2V0IGdsb2JhbHMgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uICRpKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwgTWkuc3RvcmUpO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYSB0eXBlZCBTaW1wbGVEYlN0b3JlIGZvciB0aGUgZG9jdW1lbnQgdGFyZ2V0IG9iamVjdCBzdG9yZS5cbiAqLyBmdW5jdGlvbiBaaSh0KSB7XG4gICAgcmV0dXJuIG5vLnFuKHQsIFJpLnN0b3JlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gdmFyIHRvID0gXCJGYWlsZWQgdG8gb2J0YWluIGV4Y2x1c2l2ZSBhY2Nlc3MgdG8gdGhlIHBlcnNpc3RlbmNlIGxheWVyLiBUbyBhbGxvdyBzaGFyZWQgYWNjZXNzLCBtdWx0aS10YWIgc3luY2hyb25pemF0aW9uIGhhcyB0byBiZSBlbmFibGVkIGluIGFsbCB0YWJzLiBJZiB5b3UgYXJlIHVzaW5nIGBleHBlcmltZW50YWxGb3JjZU93bmluZ1RhYjp0cnVlYCwgbWFrZSBzdXJlIHRoYXQgb25seSBvbmUgdGFiIGhhcyBwZXJzaXN0ZW5jZSBlbmFibGVkIGF0IGFueSBnaXZlbiB0aW1lLlwiLCBlbyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzKSB8fCB0aGlzKS5YciA9IHQsIHIuR28gPSBuLCByO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbjtcbn0oRnIpLCBubyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHN5bmNocm9uaXplIHRoZSBpbi1tZW1vcnkgc3RhdGUgb2YgbXVsdGlwbGUgdGFicyBhbmQgc2hhcmVcbiAgICAgKiBhY2Nlc3MgdG8gbG9jYWwgcGVyc2lzdGVuY2UuXG4gICAgICovXG4gICAgZSwgbiwgciwgaSwgbywgdSwgcywgYSwgYywgXG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIHRydWUsIGZvcmNlZnVsbHkgb2J0YWlucyBkYXRhYmFzZSBhY2Nlc3MuIEV4aXN0aW5nIHRhYnMgd2lsbFxuICAgICAqIG5vIGxvbmdlciBiZSBhYmxlIHRvIGFjY2VzcyBJbmRleGVkREIuXG4gICAgICovXG4gICAgaCkge1xuICAgICAgICBpZiAodGhpcy5hbGxvd1RhYlN5bmNocm9uaXphdGlvbiA9IGUsIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBuLCB0aGlzLmNsaWVudElkID0gciwgXG4gICAgICAgIHRoaXMubG4gPSBvLCB0aGlzLndpbmRvdyA9IHUsIHRoaXMuZG9jdW1lbnQgPSBzLCB0aGlzLnpvID0gYywgdGhpcy5IbyA9IGgsIHRoaXMuSm8gPSBudWxsLCBcbiAgICAgICAgdGhpcy5ZbyA9ICExLCB0aGlzLmlzUHJpbWFyeSA9ICExLCB0aGlzLm5ldHdvcmtFbmFibGVkID0gITAsIFxuICAgICAgICAvKiogT3VyIHdpbmRvdy51bmxvYWQgaGFuZGxlciwgaWYgcmVnaXN0ZXJlZC4gKi9cbiAgICAgICAgdGhpcy5YbyA9IG51bGwsIHRoaXMuaW5Gb3JlZ3JvdW5kID0gITEsIFxuICAgICAgICAvKiogT3VyICd2aXNpYmlsaXR5Y2hhbmdlJyBsaXN0ZW5lciBpZiByZWdpc3RlcmVkLiAqL1xuICAgICAgICB0aGlzLlpvID0gbnVsbCwgXG4gICAgICAgIC8qKiBUaGUgY2xpZW50IG1ldGFkYXRhIHJlZnJlc2ggdGFzay4gKi9cbiAgICAgICAgdGhpcy50YSA9IG51bGwsIFxuICAgICAgICAvKiogVGhlIGxhc3QgdGltZSB3ZSBnYXJiYWdlIGNvbGxlY3RlZCB0aGUgY2xpZW50IG1ldGFkYXRhIG9iamVjdCBzdG9yZS4gKi9cbiAgICAgICAgdGhpcy5lYSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgXG4gICAgICAgIC8qKiBBIGxpc3RlbmVyIHRvIG5vdGlmeSBvbiBwcmltYXJ5IHN0YXRlIGNoYW5nZXMuICovXG4gICAgICAgIHRoaXMubmEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH0sICF0LmtuKCkpIHRocm93IG5ldyBqKEYuVU5JTVBMRU1FTlRFRCwgXCJUaGlzIHBsYXRmb3JtIGlzIGVpdGhlciBtaXNzaW5nIEluZGV4ZWREQiBvciBpcyBrbm93biB0byBoYXZlIGFuIGluY29tcGxldGUgaW1wbGVtZW50YXRpb24uIE9mZmxpbmUgcGVyc2lzdGVuY2UgaGFzIGJlZW4gZGlzYWJsZWQuXCIpO1xuICAgICAgICB0aGlzLkxyID0gbmV3IG9vKHRoaXMsIGkpLCB0aGlzLnNhID0gbiArIFwibWFpblwiLCB0aGlzLnNlcmlhbGl6ZXIgPSBuZXcgdGkoYSksIHRoaXMuaWEgPSBuZXcgdXIodGhpcy5zYSwgMTEsIG5ldyBOaSh0aGlzLnNlcmlhbGl6ZXIpKSwgXG4gICAgICAgIHRoaXMucmEgPSBuZXcgSmkodGhpcy5MciwgdGhpcy5zZXJpYWxpemVyKSwgdGhpcy5GaSA9IG5ldyBXaSwgdGhpcy5OaSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ2kodCwgZSk7XG4gICAgICAgIH0odGhpcy5zZXJpYWxpemVyLCB0aGlzLkZpKSwgdGhpcy5vYSA9IG5ldyBHaSh0aGlzLnNlcmlhbGl6ZXIpLCB0aGlzLndpbmRvdyAmJiB0aGlzLndpbmRvdy5sb2NhbFN0b3JhZ2UgPyB0aGlzLmFhID0gdGhpcy53aW5kb3cubG9jYWxTdG9yYWdlIDogKHRoaXMuYWEgPSBudWxsLCBcbiAgICAgICAgITEgPT09IGggJiYgTihcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiTG9jYWxTdG9yYWdlIGlzIHVuYXZhaWxhYmxlLiBBcyBhIHJlc3VsdCwgcGVyc2lzdGVuY2UgbWF5IG5vdCB3b3JrIHJlbGlhYmx5LiBJbiBwYXJ0aWN1bGFyIGVuYWJsZVBlcnNpc3RlbmNlKCkgY291bGQgZmFpbCBpbW1lZGlhdGVseSBhZnRlciByZWZyZXNoaW5nIHRoZSBwYWdlLlwiKSk7XG4gICAgfVxuICAgIHJldHVybiB0LnFuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGVvKSByZXR1cm4gdXIucW4odC5YciwgZSk7XG4gICAgICAgIHRocm93IFMoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBdHRlbXB0IHRvIHN0YXJ0IEluZGV4ZWREYiBwZXJzaXN0ZW5jZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IFdoZXRoZXIgcGVyc2lzdGVuY2Ugd2FzIGVuYWJsZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGV4cGVjdGVkIHRvIGZhaWwgc29tZXRpbWVzIChpbiB0aGUgY2FzZSBvZiBhbm90aGVyIHRhYlxuICAgICAgICAvLyBhbHJlYWR5IGhhdmluZyB0aGUgcGVyc2lzdGVuY2UgbG9jayksIHNvIGl0J3MgdGhlIGZpcnN0IHRoaW5nIHdlIHNob3VsZFxuICAgICAgICAvLyBkby5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYSgpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0LmlzUHJpbWFyeSAmJiAhdC5hbGxvd1RhYlN5bmNocm9uaXphdGlvbikgXG4gICAgICAgICAgICAvLyBGYWlsIGBzdGFydCgpYCBpZiBgc3luY2hyb25pemVUYWJzYCBpcyBkaXNhYmxlZCBhbmQgd2UgY2Fubm90XG4gICAgICAgICAgICAvLyBvYnRhaW4gdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICAgICAgICB0aHJvdyBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIHRvKTtcbiAgICAgICAgICAgIHJldHVybiB0LnVhKCksIHQuaGEoKSwgdC5sYSgpLCB0LnJ1blRyYW5zYWN0aW9uKFwiZ2V0SGlnaGVzdExpc3RlblNlcXVlbmNlTnVtYmVyXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5yYS5ObyhlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLnRoZW4oKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHQuSm8gPSBuZXcgenIoZSwgdC56byk7XG4gICAgICAgIH0pKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHQuWW8gPSAhMDtcbiAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5pYSAmJiB0LmlhLmNsb3NlKCksIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgdGhhdCBnZXRzIGNhbGxlZCB3aGVuIHRoZSBwcmltYXJ5IHN0YXRlIG9mIHRoZVxuICAgICAqIGluc3RhbmNlIGNoYW5nZXMuIFVwb24gcmVnaXN0ZXJpbmcsIHRoaXMgbGlzdGVuZXIgaXMgaW52b2tlZCBpbW1lZGlhdGVseVxuICAgICAqIHdpdGggdGhlIGN1cnJlbnQgcHJpbWFyeSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFBPUlRJTkcgTk9URTogVGhpcyBpcyBvbmx5IHVzZWQgZm9yIFdlYiBtdWx0aS10YWIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuX2EgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMubmEgPSBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICByZXR1cm4gZShyLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnlyID8gWyAyIC8qcmV0dXJuKi8gLCB0KGkpIF0gOiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgdCh0aGlzLmlzUHJpbWFyeSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgdGhhdCBnZXRzIGNhbGxlZCB3aGVuIHRoZSBkYXRhYmFzZSByZWNlaXZlcyBhXG4gICAgICogdmVyc2lvbiBjaGFuZ2UgZXZlbnQgaW5kaWNhdGluZyB0aGF0IGl0IGhhcyBkZWxldGVkLlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5mYSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICB0aGlzLmlhLktuKChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICByZXR1cm4gZShyLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09PSBpLm5ld1ZlcnNpb24gPyBbIDQgLyp5aWVsZCovICwgdCgpIF0gOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBZGp1c3RzIHRoZSBjdXJyZW50IG5ldHdvcmsgc3RhdGUgaW4gdGhlIGNsaWVudCdzIG1ldGFkYXRhLCBwb3RlbnRpYWxseVxuICAgICAqIGFmZmVjdGluZyB0aGUgcHJpbWFyeSBsZWFzZS5cbiAgICAgKlxuICAgICAqIFBPUlRJTkcgTk9URTogVGhpcyBpcyBvbmx5IHVzZWQgZm9yIFdlYiBtdWx0aS10YWIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgdGhpcy5uZXR3b3JrRW5hYmxlZCAhPT0gdCAmJiAodGhpcy5uZXR3b3JrRW5hYmxlZCA9IHQsIFxuICAgICAgICAvLyBTY2hlZHVsZSBhIHByaW1hcnkgbGVhc2UgcmVmcmVzaCBmb3IgaW1tZWRpYXRlIGV4ZWN1dGlvbi4gVGhlIGV2ZW50dWFsXG4gICAgICAgIC8vIGxlYXNlIHVwZGF0ZSB3aWxsIGJlIHByb3BhZ2F0ZWQgdmlhIGBwcmltYXJ5U3RhdGVMaXN0ZW5lcmAuXG4gICAgICAgIHRoaXMubG4uZnMoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy55ciA/IFsgNCAvKnlpZWxkKi8gLCB0aGlzLmNhKCkgXSA6IFsgMyAvKmJyZWFrKi8gLCAyIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNlbnQoKSwgdC5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjbGllbnQgbWV0YWRhdGEgaW4gSW5kZXhlZERiIGFuZCBhdHRlbXB0cyB0byBlaXRoZXIgb2J0YWluIG9yXG4gICAgICogZXh0ZW5kIHRoZSBwcmltYXJ5IGxlYXNlIGZvciB0aGUgbG9jYWwgY2xpZW50LiBBc3luY2hyb25vdXNseSBub3RpZmllcyB0aGVcbiAgICAgKiBwcmltYXJ5IHN0YXRlIGxpc3RlbmVyIGlmIHRoZSBjbGllbnQgZWl0aGVyIG5ld2x5IG9idGFpbmVkIG9yIHJlbGVhc2VkIGl0c1xuICAgICAqIHByaW1hcnkgbGVhc2UuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuY2EgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5ydW5UcmFuc2FjdGlvbihcInVwZGF0ZUNsaWVudE1ldGFkYXRhQW5kVHJ5QmVjb21lUHJpbWFyeVwiLCBcInJlYWR3cml0ZVwiLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlvKGUpLnB1dChuZXcgRmkodC5jbGllbnRJZCwgRGF0ZS5ub3coKSwgdC5uZXR3b3JrRW5hYmxlZCwgdC5pbkZvcmVncm91bmQpKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodC5pc1ByaW1hcnkpIHJldHVybiB0LndhKGUpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZSB8fCAodC5pc1ByaW1hcnkgPSAhMSwgdC5sbi5TcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5uYSghMSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LlRhKGUpO1xuICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5pc1ByaW1hcnkgJiYgIW4gPyB0LkVhKGUpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfSkpIDogISFuICYmIHQuSWEoZSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5jYXRjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGNyKGUpKSBcbiAgICAgICAgICAgIC8vIFByb2NlZWQgd2l0aCB0aGUgZXhpc3Rpbmcgc3RhdGUuIEFueSBzdWJzZXF1ZW50IGFjY2VzcyB0b1xuICAgICAgICAgICAgLy8gSW5kZXhlZERCIHdpbGwgdmVyaWZ5IHRoZSBsZWFzZS5cbiAgICAgICAgICAgIHJldHVybiBUKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJGYWlsZWQgdG8gZXh0ZW5kIG93bmVyIGxlYXNlOiBcIiwgZSksIHQuaXNQcmltYXJ5O1xuICAgICAgICAgICAgaWYgKCF0LmFsbG93VGFiU3luY2hyb25pemF0aW9uKSB0aHJvdyBlO1xuICAgICAgICAgICAgcmV0dXJuIFQoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIlJlbGVhc2luZyBvd25lciBsZWFzZSBhZnRlciBlcnJvciBkdXJpbmcgbGVhc2UgcmVmcmVzaFwiLCBlKSwgXG4gICAgICAgICAgICAvKiBpc1ByaW1hcnk9ICovICExO1xuICAgICAgICB9KSkudGhlbigoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdC5pc1ByaW1hcnkgIT09IGUgJiYgdC5sbi5TcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQubmEoZSk7XG4gICAgICAgICAgICB9KSksIHQuaXNQcmltYXJ5ID0gZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLndhID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBybyh0KS5nZXQoQWkua2V5KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gb3IucmVzb2x2ZShlLm1hKHQpKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkFhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gaW8odCkuZGVsZXRlKHRoaXMuY2xpZW50SWQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIElmIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gdGhyZXNob2xkIGhhcyBwYXNzZWQsIHBydW5lcyB0aGVcbiAgICAgKiBSZW1vdGVEb2N1bWVudENoYW5nZXMgYW5kIHRoZSBDbGllbnRNZXRhZGF0YSBzdG9yZSBiYXNlZCBvbiB0aGUgbGFzdCB1cGRhdGVcbiAgICAgKiB0aW1lIG9mIGFsbCBjbGllbnRzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLlJhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSwgciwgaSwgbywgdSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNQcmltYXJ5IHx8IHRoaXMuUGEodGhpcy5lYSwgMThlNSkgPyBbIDMgLypicmVhayovICwgMiBdIDogKHRoaXMuZWEgPSBEYXRlLm5vdygpLCBcbiAgICAgICAgICAgICAgICAgICAgWyA0IC8qeWllbGQqLyAsIHRoaXMucnVuVHJhbnNhY3Rpb24oXCJtYXliZUdhcmJhZ2VDb2xsZWN0TXVsdGlDbGllbnRTdGF0ZVwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQucW4oZSwgRmkuc3RvcmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uWG4oKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB1LmdhKHQsIDE4ZTUpLCByID0gdC5maWx0ZXIoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xID09PSBlLmluZGV4T2YodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBtZXRhZGF0YSBmb3IgY2xpZW50cyB0aGF0IGFyZSBubyBsb25nZXIgY29uc2lkZXJlZCBhY3RpdmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvci5mb3JFYWNoKHIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmRlbGV0ZSh0LmNsaWVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgfSkpIF0pO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBwb3RlbnRpYWwgbGVmdG92ZXIgZW50cmllcyB0aGF0IG1heSBjb250aW51ZSB0byBtYXJrIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBpbmFjdGl2ZSBjbGllbnRzIGFzIHpvbWJpZWQgaW4gTG9jYWxTdG9yYWdlLlxuICAgICAgICAgICAgICAgICAgICAvLyBJZGVhbGx5IHdlJ2QgZGVsZXRlIHRoZSBJbmRleGVkRGIgYW5kIExvY2FsU3RvcmFnZSB6b21iaWUgZW50cmllcyBmb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGNsaWVudCBhdG9taWNhbGx5LCBidXQgd2UgY2FuJ3QuIFNvIHdlIG9wdCB0byBkZWxldGUgdGhlIEluZGV4ZWREYlxuICAgICAgICAgICAgICAgICAgICAvLyBlbnRyaWVzIGZpcnN0IHRvIGF2b2lkIHBvdGVudGlhbGx5IHJldml2aW5nIGEgem9tYmllZCBjbGllbnQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlID0gbi5zZW50KCksIHRoaXMuYWEpIGZvciAociA9IDAsIGkgPSBlOyByIDwgaS5sZW5ndGg7IHIrKykgbyA9IGlbcl0sIHRoaXMuYWEucmVtb3ZlSXRlbSh0aGlzLlZhKG8uY2xpZW50SWQpKTtcbiAgICAgICAgICAgICAgICAgICAgbi5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGEgcmVjdXJyaW5nIHRpbWVyIHRvIHVwZGF0ZSB0aGUgY2xpZW50IG1ldGFkYXRhIGFuZCB0byBlaXRoZXJcbiAgICAgKiBleHRlbmQgb3IgYWNxdWlyZSB0aGUgcHJpbWFyeSBsZWFzZSBpZiB0aGUgY2xpZW50IGlzIGVsaWdpYmxlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmxhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy50YSA9IHRoaXMubG4uUG4oXCJjbGllbnRfbWV0YWRhdGFfcmVmcmVzaFwiIC8qIENsaWVudE1ldGFkYXRhUmVmcmVzaCAqLyAsIDRlMywgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHQuY2EoKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5SYSgpO1xuICAgICAgICAgICAgfSkpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LmxhKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiogQ2hlY2tzIHdoZXRoZXIgYGNsaWVudGAgaXMgdGhlIGxvY2FsIGNsaWVudC4gKi8gdC5wcm90b3R5cGUubWEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAhIXQgJiYgdC5vd25lcklkID09PSB0aGlzLmNsaWVudElkO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEV2YWx1YXRlIHRoZSBzdGF0ZSBvZiBhbGwgYWN0aXZlIGNsaWVudHMgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoZSBsb2NhbFxuICAgICAqIGNsaWVudCBpcyBvciBjYW4gYWN0IGFzIHRoZSBob2xkZXIgb2YgdGhlIHByaW1hcnkgbGVhc2UuIFJldHVybnMgd2hldGhlclxuICAgICAqIHRoZSBjbGllbnQgaXMgZWxpZ2libGUgZm9yIHRoZSBsZWFzZSwgYnV0IGRvZXMgbm90IGFjdHVhbGx5IGFjcXVpcmUgaXQuXG4gICAgICogTWF5IHJldHVybiAnZmFsc2UnIGV2ZW4gaWYgdGhlcmUgaXMgbm8gYWN0aXZlIGxlYXNlaG9sZGVyIGFuZCBhbm90aGVyXG4gICAgICogKGZvcmVncm91bmQpIGNsaWVudCBzaG91bGQgYmVjb21lIGxlYXNlaG9sZGVyIGluc3RlYWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuSG8gPyBvci5yZXNvbHZlKCEwKSA6IHJvKHQpLmdldChBaS5rZXkpLm5leHQoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIC8vIEEgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGUgcHJpbWFyeSBsZWFzZSBpZjpcbiAgICAgICAgICAgIC8vIC0gaXRzIG5ldHdvcmsgaXMgZW5hYmxlZCBhbmQgdGhlIGNsaWVudCdzIHRhYiBpcyBpbiB0aGUgZm9yZWdyb3VuZC5cbiAgICAgICAgICAgIC8vIC0gaXRzIG5ldHdvcmsgaXMgZW5hYmxlZCBhbmQgbm8gb3RoZXIgY2xpZW50J3MgdGFiIGlzIGluIHRoZVxuICAgICAgICAgICAgLy8gICBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSBldmVyeSBjbGllbnRzIG5ldHdvcmsgaXMgZGlzYWJsZWQgYW5kIHRoZSBjbGllbnQncyB0YWIgaXMgaW4gdGhlXG4gICAgICAgICAgICAvLyAgIGZvcmVncm91bmQuXG4gICAgICAgICAgICAvLyAtIGV2ZXJ5IGNsaWVudHMgbmV0d29yayBpcyBkaXNhYmxlZCBhbmQgbm8gb3RoZXIgY2xpZW50J3MgdGFiIGlzIGluXG4gICAgICAgICAgICAvLyAgIHRoZSBmb3JlZ3JvdW5kLlxuICAgICAgICAgICAgLy8gLSB0aGUgYGZvcmNlT3duaW5nVGFiYCBzZXR0aW5nIHdhcyBwYXNzZWQgaW4uXG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gbiAmJiBlLlBhKG4ubGVhc2VUaW1lc3RhbXBNcywgNWUzKSAmJiAhZS55YShuLm93bmVySWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubWEobikgJiYgZS5uZXR3b3JrRW5hYmxlZCkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIGlmICghZS5tYShuKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW4uYWxsb3dUYWJTeW5jaHJvbml6YXRpb24pIFxuICAgICAgICAgICAgICAgICAgICAvLyBGYWlsIHRoZSBgY2FuQWN0QXNQcmltYXJ5YCBjaGVjayBpZiB0aGUgY3VycmVudCBsZWFzZWhvbGRlciBoYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IG9wdGVkIGludG8gbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi4gSWYgdGhpcyBoYXBwZW5zIGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudCBzdGFydHVwLCB3ZSByZWplY3QgdGhlIFByb21pc2UgcmV0dXJuZWQgYnlcbiAgICAgICAgICAgICAgICAgICAgLy8gYGVuYWJsZVBlcnNpc3RlbmNlKClgIGFuZCB0aGUgdXNlciBjYW4gY29udGludWUgdG8gdXNlIEZpcmVzdG9yZVxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGluLW1lbW9yeSBwZXJzaXN0ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBmYWlscyBkdXJpbmcgYSBsZWFzZSByZWZyZXNoLCB3ZSB3aWxsIGluc3RlYWQgYmxvY2sgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzeW5jUXVldWUgZnJvbSBleGVjdXRpbmcgZnVydGhlciBvcGVyYXRpb25zLiBOb3RlIHRoYXQgdGhpcyBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBhY2NlcHRhYmxlIHNpbmNlIG1peGluZyAmIG1hdGNoaW5nIGRpZmZlcmVudCBgc3luY2hyb25pemVUYWJzYFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR0aW5ncyBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGIvMTE0MjI2MjM0KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiBgc3luY2hyb25pemVUYWJzYCBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIGJlIHR1cm5lZCBvZmYuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBqKEYuRkFJTEVEX1BSRUNPTkRJVElPTiwgdG8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICEoIWUubmV0d29ya0VuYWJsZWQgfHwgIWUuaW5Gb3JlZ3JvdW5kKSB8fCBpbyh0KS5YbigpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBlLmdhKHQsIDVlMykuZmluZCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jbGllbnRJZCAhPT0gdC5jbGllbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAhZS5uZXR3b3JrRW5hYmxlZCAmJiB0Lm5ldHdvcmtFbmFibGVkLCByID0gIWUuaW5Gb3JlZ3JvdW5kICYmIHQuaW5Gb3JlZ3JvdW5kLCBpID0gZS5uZXR3b3JrRW5hYmxlZCA9PT0gdC5uZXR3b3JrRW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuIHx8IHIgJiYgaSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5pc1ByaW1hcnkgIT09IHQgJiYgVChcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiQ2xpZW50IFwiICsgKHQgPyBcImlzXCIgOiBcImlzIG5vdFwiKSArIFwiIGVsaWdpYmxlIGZvciBhIHByaW1hcnkgbGVhc2UuXCIpLCBcbiAgICAgICAgICAgIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5wYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIGBTaW1wbGVEYi5ydW5UcmFuc2FjdGlvbmAgZGlyZWN0bHkgdG8gYXZvaWQgZmFpbGluZyBpZiBhbm90aGVyIHRhYlxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgb2J0YWluZWQgdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzaHV0ZG93bigpIG9wZXJhdGlvbnMgYXJlIGlkZW1wb3RlbnQgYW5kIGNhbiBiZSBjYWxsZWQgZXZlbiB3aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0KCkgYWJvcnRlZCAoZS5nLiBiZWNhdXNlIGl0IGNvdWxkbid0IGFjcXVpcmUgdGhlIHBlcnNpc3RlbmNlIGxlYXNlKS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuWW8gPSAhMSwgdGhpcy52YSgpLCB0aGlzLnRhICYmICh0aGlzLnRhLmNhbmNlbCgpLCB0aGlzLnRhID0gbnVsbCksIHRoaXMuYmEoKSwgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuU2EoKSwgWyA0IC8qeWllbGQqLyAsIHRoaXMuaWEucnVuVHJhbnNhY3Rpb24oXCJzaHV0ZG93blwiLCBcInJlYWR3cml0ZVwiLCBbIEFpLnN0b3JlLCBGaS5zdG9yZSBdLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgZW8oZSwgenIubnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuRWEobikubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuQWEobik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzaHV0ZG93bigpIG9wZXJhdGlvbnMgYXJlIGlkZW1wb3RlbnQgYW5kIGNhbiBiZSBjYWxsZWQgZXZlbiB3aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0KCkgYWJvcnRlZCAoZS5nLiBiZWNhdXNlIGl0IGNvdWxkbid0IGFjcXVpcmUgdGhlIHBlcnNpc3RlbmNlIGxlYXNlKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIGBTaW1wbGVEYi5ydW5UcmFuc2FjdGlvbmAgZGlyZWN0bHkgdG8gYXZvaWQgZmFpbGluZyBpZiBhbm90aGVyIHRhYlxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgb2J0YWluZWQgdGhlIHByaW1hcnkgbGVhc2UuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgdGhpcy5pYS5jbG9zZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBlbnRyeSBtYXJraW5nIHRoZSBjbGllbnQgYXMgem9tYmllZCBmcm9tIExvY2FsU3RvcmFnZSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBzdWNjZXNzZnVsbHkgZGVsZXRlZCBpdHMgbWV0YWRhdGEgZnJvbSBJbmRleGVkRGIuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRGEoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNsaWVudHMgdGhhdCBhcmUgbm90IHpvbWJpZWQgYW5kIGhhdmUgYW4gdXBkYXRlVGltZSB3aXRoaW4gdGhlXG4gICAgICogcHJvdmlkZWQgdGhyZXNob2xkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmdhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0LmZpbHRlcigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uUGEodC51cGRhdGVUaW1lTXMsIGUpICYmICFuLnlhKHQuY2xpZW50SWQpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSURzIG9mIHRoZSBjbGllbnRzIHRoYXQgYXJlIGN1cnJlbnRseSBhY3RpdmUuIElmIG11bHRpLXRhYlxuICAgICAqIGlzIG5vdCBzdXBwb3J0ZWQsIHJldHVybnMgYW4gYXJyYXkgdGhhdCBvbmx5IGNvbnRhaW5zIHRoZSBsb2NhbCBjbGllbnQnc1xuICAgICAqIElELlxuICAgICAqXG4gICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgV2ViIG11bHRpLXRhYi5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5DYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1blRyYW5zYWN0aW9uKFwiZ2V0QWN0aXZlQ2xpZW50c1wiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW8oZSkuWG4oKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuZ2EoZSwgMThlNSkubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNsaWVudElkO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJ5clwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ZbztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuTmEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBmaS5xcih0LCB0aGlzLnNlcmlhbGl6ZXIsIHRoaXMuRmksIHRoaXMuTHIpO1xuICAgIH0sIHQucHJvdG90eXBlLnhhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhO1xuICAgIH0sIHQucHJvdG90eXBlLkZhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk5pO1xuICAgIH0sIHQucHJvdG90eXBlLk9hID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkZpO1xuICAgIH0sIHQucHJvdG90eXBlLk1hID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9hO1xuICAgIH0sIHQucHJvdG90eXBlLnJ1blRyYW5zYWN0aW9uID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIFQoXCJJbmRleGVkRGJQZXJzaXN0ZW5jZVwiLCBcIlN0YXJ0aW5nIHRyYW5zYWN0aW9uOlwiLCB0KTtcbiAgICAgICAgdmFyIGksIG8gPSBcInJlYWRvbmx5XCIgPT09IGUgPyBcInJlYWRvbmx5XCIgOiBcInJlYWR3cml0ZVwiO1xuICAgICAgICAvLyBEbyBhbGwgdHJhbnNhY3Rpb25zIGFzIHJlYWR3cml0ZSBhZ2FpbnN0IGFsbCBvYmplY3Qgc3RvcmVzLCBzaW5jZSB3ZVxuICAgICAgICAvLyBhcmUgdGhlIG9ubHkgcmVhZGVyL3dyaXRlci5cbiAgICAgICAgcmV0dXJuIHRoaXMuaWEucnVuVHJhbnNhY3Rpb24odCwgbywgemksIChmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICByZXR1cm4gaSA9IG5ldyBlbyhvLCByLkpvID8gci5Kby5uZXh0KCkgOiB6ci5uciksIFwicmVhZHdyaXRlLXByaW1hcnlcIiA9PT0gZSA/IHIud2EoaSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXQgfHwgci5UYShpKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlKSB0aHJvdyBOKFwiRmFpbGVkIHRvIG9idGFpbiBwcmltYXJ5IGxlYXNlIGZvciBhY3Rpb24gJ1wiICsgdCArIFwiJy5cIiksIHIuaXNQcmltYXJ5ID0gITEsIFxuICAgICAgICAgICAgICAgIHIubG4uU3MoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5uYSghMSk7XG4gICAgICAgICAgICAgICAgfSkpLCBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIHFyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbihpKTtcbiAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuSWEoaSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKSA6IHIua2EoaSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4oaSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gaS5DaSgpLCB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgdGhhdCB0aGUgY3VycmVudCB0YWIgaXMgdGhlIHByaW1hcnkgbGVhc2Vob2xkZXIgb3IgYWx0ZXJuYXRpdmVseVxuICAgICAqIHRoYXQgdGhlIGxlYXNlaG9sZGVyIGhhcyBvcHRlZCBpbnRvIG11bHRpLXRhYiBzeW5jaHJvbml6YXRpb24uXG4gICAgICovXG4gICAgLy8gVE9ETyhiLzExNDIyNjIzNCk6IFJlbW92ZSB0aGlzIGNoZWNrIHdoZW4gYHN5bmNocm9uaXplVGFic2AgY2FuIG5vIGxvbmdlclxuICAgIC8vIGJlIHR1cm5lZCBvZmYuXG4gICAgdC5wcm90b3R5cGUua2EgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHJvKHQpLmdldChBaS5rZXkpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSB0ICYmIGUuUGEodC5sZWFzZVRpbWVzdGFtcE1zLCA1ZTMpICYmICFlLnlhKHQub3duZXJJZCkgJiYgIWUubWEodCkgJiYgIShlLkhvIHx8IGUuYWxsb3dUYWJTeW5jaHJvbml6YXRpb24gJiYgdC5hbGxvd1RhYlN5bmNocm9uaXphdGlvbikpIHRocm93IG5ldyBqKEYuRkFJTEVEX1BSRUNPTkRJVElPTiwgdG8pO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogT2J0YWlucyBvciBleHRlbmRzIHRoZSBuZXcgcHJpbWFyeSBsZWFzZSBmb3IgdGhlIGxvY2FsIGNsaWVudC4gVGhpc1xuICAgICAqIG1ldGhvZCBkb2VzIG5vdCB2ZXJpZnkgdGhhdCB0aGUgY2xpZW50IGlzIGVsaWdpYmxlIGZvciB0aGlzIGxlYXNlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLklhID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IG5ldyBBaSh0aGlzLmNsaWVudElkLCB0aGlzLmFsbG93VGFiU3luY2hyb25pemF0aW9uLCBEYXRlLm5vdygpKTtcbiAgICAgICAgcmV0dXJuIHJvKHQpLnB1dChBaS5rZXksIGUpO1xuICAgIH0sIHQua24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHVyLmtuKCk7XG4gICAgfSwgXG4gICAgLyoqIENoZWNrcyB0aGUgcHJpbWFyeSBsZWFzZSBhbmQgcmVtb3ZlcyBpdCBpZiB3ZSBhcmUgdGhlIGN1cnJlbnQgcHJpbWFyeS4gKi8gdC5wcm90b3R5cGUuRWEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHJvKHQpO1xuICAgICAgICByZXR1cm4gbi5nZXQoQWkua2V5KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5tYSh0KSA/IChUKFwiSW5kZXhlZERiUGVyc2lzdGVuY2VcIiwgXCJSZWxlYXNpbmcgcHJpbWFyeSBsZWFzZS5cIiksIG4uZGVsZXRlKEFpLmtleSkpIDogb3IucmVzb2x2ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqIFZlcmlmaWVzIHRoYXQgYHVwZGF0ZVRpbWVNc2AgaXMgd2l0aGluIGBtYXhBZ2VNc2AuICovIHQucHJvdG90eXBlLlBhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiAhKHQgPCBuIC0gZSB8fCB0ID4gbiAmJiAoTihcIkRldGVjdGVkIGFuIHVwZGF0ZSB0aW1lIHRoYXQgaXMgaW4gdGhlIGZ1dHVyZTogXCIgKyB0ICsgXCIgPiBcIiArIG4pLCBcbiAgICAgICAgMSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnVhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgbnVsbCAhPT0gdGhpcy5kb2N1bWVudCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiAodGhpcy5abyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdC5sbi5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuaW5Gb3JlZ3JvdW5kID0gXCJ2aXNpYmxlXCIgPT09IHQuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlLCB0LmNhKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5abyksIHRoaXMuaW5Gb3JlZ3JvdW5kID0gXCJ2aXNpYmxlXCIgPT09IHRoaXMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5iYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLlpvICYmICh0aGlzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuWm8pLCB0aGlzLlpvID0gbnVsbCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSB3aW5kb3cudW5sb2FkIGhhbmRsZXIgdGhhdCB3aWxsIHN5bmNocm9ub3VzbHkgd3JpdGUgb3VyXG4gICAgICogY2xpZW50SWQgdG8gYSBcInpvbWJpZSBjbGllbnQgaWRcIiBsb2NhdGlvbiBpbiBMb2NhbFN0b3JhZ2UuIFRoaXMgY2FuIGJlIHVzZWRcbiAgICAgKiBieSB0YWJzIHRyeWluZyB0byBhY3F1aXJlIHRoZSBwcmltYXJ5IGxlYXNlIHRvIGRldGVybWluZSB0aGF0IHRoZSBsZWFzZVxuICAgICAqIGlzIG5vIGxvbmdlciB2YWxpZCBldmVuIGlmIHRoZSB0aW1lc3RhbXAgaXMgcmVjZW50LiBUaGlzIGlzIHBhcnRpY3VsYXJseVxuICAgICAqIGltcG9ydGFudCBmb3IgdGhlIHJlZnJlc2ggY2FzZSAoc28gdGhlIHRhYiBjb3JyZWN0bHkgcmUtYWNxdWlyZXMgdGhlXG4gICAgICogcHJpbWFyeSBsZWFzZSkuIExvY2FsU3RvcmFnZSBpcyB1c2VkIGZvciB0aGlzIHJhdGhlciB0aGFuIEluZGV4ZWREYiBiZWNhdXNlXG4gICAgICogaXQgaXMgYSBzeW5jaHJvbm91cyBBUEkgYW5kIHNvIGNhbiBiZSB1c2VkIHJlbGlhYmx5IGZyb20gIGFuIHVubG9hZFxuICAgICAqIGhhbmRsZXIuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQsIGUgPSB0aGlzO1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChudWxsID09PSAodCA9IHRoaXMud2luZG93KSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmFkZEV2ZW50TGlzdGVuZXIpICYmICh0aGlzLlhvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBOb3RlOiBJbiB0aGVvcnksIHRoaXMgc2hvdWxkIGJlIHNjaGVkdWxlZCBvbiB0aGUgQXN5bmNRdWV1ZSBzaW5jZSBpdFxuICAgICAgICAgICAgLy8gYWNjZXNzZXMgaW50ZXJuYWwgc3RhdGUuIFdlIGV4ZWN1dGUgdGhpcyBjb2RlIGRpcmVjdGx5IGR1cmluZyBzaHV0ZG93blxuICAgICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIGl0IGdldHMgYSBjaGFuY2UgdG8gcnVuLlxuICAgICAgICAgICAgZS52YSgpLCBlLmxuLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5wYSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LCB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsIHRoaXMuWG8pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5TYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLlhvICYmICh0aGlzLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsIHRoaXMuWG8pLCB0aGlzLlhvID0gbnVsbCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY2xpZW50IGlzIFwiem9tYmllZFwiIGJhc2VkIG9uIGl0cyBMb2NhbFN0b3JhZ2UgZW50cnkuXG4gICAgICogQ2xpZW50cyBiZWNvbWUgem9tYmllZCB3aGVuIHRoZWlyIHRhYiBjbG9zZXMgd2l0aG91dCBydW5uaW5nIGFsbCBvZiB0aGVcbiAgICAgKiBjbGVhbnVwIGxvZ2ljIGluIGBzaHV0ZG93bigpYC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS55YSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbiA9IG51bGwgIT09IChudWxsID09PSAoZSA9IHRoaXMuYWEpIHx8IHZvaWQgMCA9PT0gZSA/IHZvaWQgMCA6IGUuZ2V0SXRlbSh0aGlzLlZhKHQpKSk7XG4gICAgICAgICAgICByZXR1cm4gVChcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiQ2xpZW50ICdcIiArIHQgKyBcIicgXCIgKyAobiA/IFwiaXNcIiA6IFwiaXMgbm90XCIpICsgXCIgem9tYmllZCBpbiBMb2NhbFN0b3JhZ2VcIiksIFxuICAgICAgICAgICAgbjtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgLy8gR3JhY2VmdWxseSBoYW5kbGUgaWYgTG9jYWxTdG9yYWdlIGlzbid0IHdvcmtpbmcuXG4gICAgICAgICAgICByZXR1cm4gTihcIkluZGV4ZWREYlBlcnNpc3RlbmNlXCIsIFwiRmFpbGVkIHRvIGdldCB6b21iaWVkIGNsaWVudCBpZC5cIiwgdCksICExO1xuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVjb3JkIGNsaWVudCBhcyB6b21iaWVkIChhIGNsaWVudCB0aGF0IGhhZCBpdHMgdGFiIGNsb3NlZCkuIFpvbWJpZWRcbiAgICAgKiBjbGllbnRzIGFyZSBpZ25vcmVkIGR1cmluZyBwcmltYXJ5IHRhYiBzZWxlY3Rpb24uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudmEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuYWEpIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmFhLnNldEl0ZW0odGhpcy5WYSh0aGlzLmNsaWVudElkKSwgU3RyaW5nKERhdGUubm93KCkpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgLy8gR3JhY2VmdWxseSBoYW5kbGUgaWYgTG9jYWxTdG9yYWdlIGlzbid0IGF2YWlsYWJsZSAvIHdvcmtpbmcuXG4gICAgICAgICAgICBOKFwiRmFpbGVkIHRvIHNldCB6b21iaWUgY2xpZW50IGlkLlwiLCB0KTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKiBSZW1vdmVzIHRoZSB6b21iaWVkIGNsaWVudCBlbnRyeSBpZiBpdCBleGlzdHMuICovIHQucHJvdG90eXBlLkRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmFhKSB0cnkge1xuICAgICAgICAgICAgdGhpcy5hYS5yZW1vdmVJdGVtKHRoaXMuVmEodGhpcy5jbGllbnRJZCkpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLlZhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gXCJmaXJlc3RvcmVfem9tYmllX1wiICsgdGhpcy5wZXJzaXN0ZW5jZUtleSArIFwiX1wiICsgdDtcbiAgICB9LCB0O1xufSgpO1xuXG4vKipcbiAqIE9sZGVzdCBhY2NlcHRhYmxlIGFnZSBpbiBtaWxsaXNlY29uZHMgZm9yIGNsaWVudCBtZXRhZGF0YSBiZWZvcmUgdGhlIGNsaWVudFxuICogaXMgY29uc2lkZXJlZCBpbmFjdGl2ZSBhbmQgaXRzIGFzc29jaWF0ZWQgZGF0YSBpcyBnYXJiYWdlIGNvbGxlY3RlZC5cbiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IGEgdHlwZWQgU2ltcGxlRGJTdG9yZSBmb3IgdGhlIHByaW1hcnkgY2xpZW50IG9iamVjdCBzdG9yZS5cbiAqL1xuZnVuY3Rpb24gcm8odCkge1xuICAgIHJldHVybiBuby5xbih0LCBBaS5zdG9yZSk7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCBhIHR5cGVkIFNpbXBsZURiU3RvcmUgZm9yIHRoZSBjbGllbnQgbWV0YWRhdGEgb2JqZWN0IHN0b3JlLlxuICovIGZ1bmN0aW9uIGlvKHQpIHtcbiAgICByZXR1cm4gbm8ucW4odCwgRmkuc3RvcmUpO1xufVxuXG4vKiogUHJvdmlkZXMgTFJVIGZ1bmN0aW9uYWxpdHkgZm9yIEluZGV4ZWREQiBwZXJzaXN0ZW5jZS4gKi8gdmFyIG9vID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5kYiA9IHQsIHRoaXMuUnIgPSBuZXcgSHIodGhpcywgZSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5TciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLiRhKHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYi54YSgpLkJvKHQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCArIGU7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS4kYSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy5Dcih0LCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZSsrO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkRlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi54YSgpLkRlKHQsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLkNyID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5MYSh0LCAoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgcmV0dXJuIGUobik7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5RbyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIHVvKHQsIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLldvID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICByZXR1cm4gdW8odCwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuTnIgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnhhKCkuTnIodCwgZSwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuZW8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB1byh0LCBlKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW55dGhpbmcgd291bGQgcHJldmVudCB0aGlzIGRvY3VtZW50IGZyb20gYmVpbmcgZ2FyYmFnZVxuICAgICAqIGNvbGxlY3RlZCwgZ2l2ZW4gdGhhdCB0aGUgZG9jdW1lbnQgaW4gcXVlc3Rpb24gaXMgbm90IHByZXNlbnQgaW4gYW55XG4gICAgICogdGFyZ2V0cyBhbmQgaGFzIGEgc2VxdWVuY2UgbnVtYmVyIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdXBwZXIgYm91bmQgZm9yXG4gICAgICogdGhlIGNvbGxlY3Rpb24gcnVuLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkJhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIG4gPSAhMTtcbiAgICAgICAgICAgIHJldHVybiB5aSh0KS5zcygoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaSh0LCByLCBlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIChuID0gITApLCBvci5yZXNvbHZlKCF0KTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0odCwgZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuRnIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IHRoaXMuZGIuRmEoKS5fbygpLCBpID0gW10sIG8gPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy5MYSh0LCAoZnVuY3Rpb24odSwgcykge1xuICAgICAgICAgICAgaWYgKHMgPD0gZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gbi5CYSh0LCB1KS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZSkgXG4gICAgICAgICAgICAgICAgICAgIC8vIE91ciBzaXplIGFjY291bnRpbmcgcmVxdWlyZXMgdXMgdG8gcmVhZCBhbGwgZG9jdW1lbnRzIGJlZm9yZVxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmluZyB0aGVtLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbysrLCByLnlpKHQsIHUpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuVmkodSksIFppKHQpLmRlbGV0ZShbIDAsIEpyKHUucGF0aCkgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgaS5wdXNoKGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gb3IueG4oaSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiByLmFwcGx5KHQpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnJlbW92ZVRhcmdldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBlLm50KHQuR28pO1xuICAgICAgICByZXR1cm4gdGhpcy5kYi54YSgpLmtvKHQsIG4pO1xuICAgIH0sIHQucHJvdG90eXBlLnFhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdW8odCwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ2FsbCBwcm92aWRlZCBmdW5jdGlvbiBmb3IgZWFjaCBkb2N1bWVudCBpbiB0aGUgY2FjaGUgdGhhdCBpcyAnb3JwaGFuZWQnLiBPcnBoYW5lZFxuICAgICAqIG1lYW5zIG5vdCBhIHBhcnQgb2YgYW55IHRhcmdldCwgc28gdGhlIG9ubHkgZW50cnkgaW4gdGhlIHRhcmdldC1kb2N1bWVudCBpbmRleCBmb3JcbiAgICAgKiB0aGF0IGRvY3VtZW50IHdpbGwgYmUgdGhlIHNlbnRpbmVsIHJvdyAodGFyZ2V0SWQgMCksIHdoaWNoIHdpbGwgYWxzbyBoYXZlIHRoZSBzZXF1ZW5jZVxuICAgICAqIG51bWJlciBmb3IgdGhlIGxhc3QgdGltZSB0aGUgZG9jdW1lbnQgd2FzIGFjY2Vzc2VkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkxhID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiwgciA9IFppKHQpLCBpID0genIubnI7XG4gICAgICAgIHJldHVybiByLm5zKHtcbiAgICAgICAgICAgIGluZGV4OiBSaS5kb2N1bWVudFRhcmdldHNJbmRleFxuICAgICAgICB9LCAoZnVuY3Rpb24odCwgcikge1xuICAgICAgICAgICAgdmFyIG8gPSB0WzBdLCB1ID0gKHRbMV0sIHIucGF0aCksIHMgPSByLnNlcXVlbmNlTnVtYmVyO1xuICAgICAgICAgICAgMCA9PT0gbyA/IChcbiAgICAgICAgICAgIC8vIGlmIG5leHRUb1JlcG9ydCBpcyB2YWxpZCwgcmVwb3J0IGl0LCB0aGlzIGlzIGEgbmV3IGtleSBzbyB0aGVcbiAgICAgICAgICAgIC8vIGxhc3Qgb25lIG11c3Qgbm90IGJlIGEgbWVtYmVyIG9mIGFueSB0YXJnZXRzLlxuICAgICAgICAgICAgaSAhPT0genIubnIgJiYgZShuZXcgWShacihuKSksIGkpLCBcbiAgICAgICAgICAgIC8vIHNldCBuZXh0VG9SZXBvcnQgdG8gYmUgdGhpcyBzZXF1ZW5jZSBudW1iZXIuIEl0J3MgdGhlIG5leHQgb25lIHdlXG4gICAgICAgICAgICAvLyBtaWdodCByZXBvcnQsIGlmIHdlIGRvbid0IGZpbmQgYW55IHRhcmdldHMgZm9yIHRoaXMgZG9jdW1lbnQuXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhlIHNlcXVlbmNlIG51bWJlciBtdXN0IGJlIGRlZmluZWQgd2hlbiB0aGUgdGFyZ2V0SWRcbiAgICAgICAgICAgIC8vIGlzIDAuXG4gICAgICAgICAgICBpID0gcywgbiA9IHUpIDogXG4gICAgICAgICAgICAvLyBzZXQgbmV4dFRvUmVwb3J0IHRvIGJlIGludmFsaWQsIHdlIGtub3cgd2UgZG9uJ3QgbmVlZCB0byByZXBvcnRcbiAgICAgICAgICAgIC8vIHRoaXMgb25lIHNpbmNlIHdlIGZvdW5kIGEgdGFyZ2V0IGZvciBpdC5cbiAgICAgICAgICAgIGkgPSB6ci5ucjtcbiAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gU2luY2Ugd2UgcmVwb3J0IHNlcXVlbmNlIG51bWJlcnMgYWZ0ZXIgZ2V0dGluZyB0byB0aGUgbmV4dCBrZXksIHdlXG4gICAgICAgICAgICAvLyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBsYXN0IGtleSB3ZSBpdGVyYXRlZCBvdmVyIHdhcyBhbiBvcnBoYW5lZFxuICAgICAgICAgICAgLy8gZG9jdW1lbnQgYW5kIHJlcG9ydCBpdC5cbiAgICAgICAgICAgIGkgIT09IHpyLm5yICYmIGUobmV3IFkoWnIobikpLCBpKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLk1yID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5GYSgpLndvKHQpO1xuICAgIH0sIHQ7XG59KCk7XG5cbmZ1bmN0aW9uIHVvKHQsIGUpIHtcbiAgICByZXR1cm4gWmkodCkucHV0KFxuICAgIC8qKlxuICogQHJldHVybiBBIHZhbHVlIHN1aXRhYmxlIGZvciB3cml0aW5nIGEgc2VudGluZWwgcm93IGluIHRoZSB0YXJnZXQtZG9jdW1lbnRcbiAqIHN0b3JlLlxuICovXG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IFJpKDAsIEpyKHQucGF0aCksIGUpO1xuICAgIH0oZSwgdC5HbykpO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB1c2VkIGFzIGEgcHJlZml4IHdoZW4gc3RvcmluZyBkYXRhIGluIEluZGV4ZWREQiBhbmRcbiAqIExvY2FsU3RvcmFnZS5cbiAqLyBmdW5jdGlvbiBzbyh0LCBlKSB7XG4gICAgLy8gVXNlIHR3byBkaWZmZXJlbnQgcHJlZml4IGZvcm1hdHM6XG4gICAgLy8gICAqIGZpcmVzdG9yZSAvIHBlcnNpc3RlbmNlS2V5IC8gcHJvamVjdElEIC4gZGF0YWJhc2VJRCAvIC4uLlxuICAgIC8vICAgKiBmaXJlc3RvcmUgLyBwZXJzaXN0ZW5jZUtleSAvIHByb2plY3RJRCAvIC4uLlxuICAgIC8vIHByb2plY3RJRHMgYXJlIEROUy1jb21wYXRpYmxlIG5hbWVzIGFuZCBjYW5ub3QgY29udGFpbiBkb3RzXG4gICAgLy8gc28gdGhlcmUncyBubyBkYW5nZXIgb2YgY29sbGlzaW9ucy5cbiAgICB2YXIgbiA9IHQucHJvamVjdElkO1xuICAgIHJldHVybiB0Lm8gfHwgKG4gKz0gXCIuXCIgKyB0LmRhdGFiYXNlKSwgXCJmaXJlc3RvcmUvXCIgKyBlICsgXCIvXCIgKyBuICsgXCIvXCJcbiAgICAvKipcbiAqIEltcGxlbWVudHMgYExvY2FsU3RvcmVgIGludGVyZmFjZS5cbiAqXG4gKiBOb3RlOiBzb21lIGZpZWxkIGRlZmluZWQgaW4gdGhpcyBjbGFzcyBtaWdodCBoYXZlIHB1YmxpYyBhY2Nlc3MgbGV2ZWwsIGJ1dFxuICogdGhlIGNsYXNzIGlzIG5vdCBleHBvcnRlZCBzbyB0aGV5IGFyZSBvbmx5IGFjY2Vzc2libGUgZnJvbSB0aGlzIG1vZHVsZS5cbiAqIFRoaXMgaXMgdXNlZnVsIHRvIGltcGxlbWVudCBvcHRpb25hbCBmZWF0dXJlcyAobGlrZSBidW5kbGVzKSBpbiBmcmVlXG4gKiBmdW5jdGlvbnMsIHN1Y2ggdGhhdCB0aGV5IGFyZSB0cmVlLXNoYWtlYWJsZS5cbiAqLztcbn1cblxudmFyIGFvID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KFxuICAgIC8qKiBNYW5hZ2VzIG91ciBpbi1tZW1vcnkgb3IgZHVyYWJsZSBwZXJzaXN0ZW5jZS4gKi9cbiAgICB0LCBlLCBuLCByKSB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2UgPSB0LCB0aGlzLlVhID0gZSwgdGhpcy5zZXJpYWxpemVyID0gciwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogTWFwcyBhIHRhcmdldElEIHRvIGRhdGEgYWJvdXQgaXRzIHRhcmdldC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBQT1JUSU5HIE5PVEU6IFdlIGFyZSB1c2luZyBhbiBpbW11dGFibGUgZGF0YSBzdHJ1Y3R1cmUgb24gV2ViIHRvIG1ha2UgcmUtcnVuc1xuICAgICAgICAgICAgICogb2YgYGFwcGx5UmVtb3RlRXZlbnQoKWAgaWRlbXBvdGVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLlFhID0gbmV3IGh0KFYpLCBcbiAgICAgICAgLyoqIE1hcHMgYSB0YXJnZXQgdG8gaXRzIHRhcmdldElELiAqL1xuICAgICAgICAvLyBUT0RPKHd1YW5keSk6IEV2YWx1YXRlIGlmIFRhcmdldElkIGNhbiBiZSBwYXJ0IG9mIFRhcmdldC5cbiAgICAgICAgdGhpcy5LYSA9IG5ldyBxKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHQodCk7XG4gICAgICAgIH0pLCBldCksIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSByZWFkIHRpbWUgb2YgdGhlIGxhc3QgZW50cnkgcHJvY2Vzc2VkIGJ5IGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogUE9SVElORyBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgbXVsdGktdGFiIHN5bmNocm9uaXphdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLldhID0gei5taW4oKSwgdGhpcy54aSA9IHQuTmEobiksIHRoaXMuamEgPSB0LkZhKCksIHRoaXMucmEgPSB0LnhhKCksIHRoaXMuR2EgPSBuZXcganIodGhpcy5qYSwgdGhpcy54aSwgdGhpcy5wZXJzaXN0ZW5jZS5PYSgpKSwgXG4gICAgICAgIHRoaXMub2EgPSB0Lk1hKCksIHRoaXMuVWEuemEodGhpcy5HYSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5wciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkNvbGxlY3QgZ2FyYmFnZVwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5PcihuLCBlLlFhKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbmZ1bmN0aW9uIGNvKFxuLyoqIE1hbmFnZXMgb3VyIGluLW1lbW9yeSBvciBkdXJhYmxlIHBlcnNpc3RlbmNlLiAqL1xudCwgZSwgbiwgcikge1xuICAgIHJldHVybiBuZXcgYW8odCwgZSwgbiwgcik7XG59XG5cbi8qKlxuICogVGVsbHMgdGhlIExvY2FsU3RvcmUgdGhhdCB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBoYXMgY2hhbmdlZC5cbiAqXG4gKiBJbiByZXNwb25zZSB0aGUgbG9jYWwgc3RvcmUgc3dpdGNoZXMgdGhlIG11dGF0aW9uIHF1ZXVlIHRvIHRoZSBuZXcgdXNlciBhbmRcbiAqIHJldHVybnMgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzLlxuICovXG4vLyBQT1JUSU5HIE5PVEU6IEFuZHJvaWQgYW5kIGlPUyBvbmx5IHJldHVybiB0aGUgZG9jdW1lbnRzIGFmZmVjdGVkIGJ5IHRoZVxuLy8gY2hhbmdlLlxuZnVuY3Rpb24gaG8odCwgcikge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCBpLCBvLCB1O1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZSA9IEQodCksIGkgPSBlLnhpLCBvID0gZS5HYSwgWyA0IC8qeWllbGQqLyAsIGUucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJIYW5kbGUgdXNlciBjaGFuZ2VcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTd2FwIG91dCB0aGUgbXV0YXRpb24gcXVldWUsIGdyYWJiaW5nIHRoZSBwZW5kaW5nIG11dGF0aW9uIGJhdGNoZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVmb3JlIGFuZCBhZnRlci5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG47XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnhpLkhyKHQpLm5leHQoKGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gdSwgaSA9IGUucGVyc2lzdGVuY2UuTmEociksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVjcmVhdGUgb3VyIExvY2FsRG9jdW1lbnRzVmlldyB1c2luZyB0aGUgbmV3XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNdXRhdGlvblF1ZXVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG5ldyBqcihlLmphLCBpLCBlLnBlcnNpc3RlbmNlLk9hKCkpLCBpLkhyKHQpO1xuICAgICAgICAgICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IFtdLCBpID0gW10sIHUgPSBJdCgpLCBzID0gMCwgYSA9IG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuaW9uIHRoZSBvbGQvbmV3IGNoYW5nZWQga2V5cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIDsgcyA8IGEubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGFbc107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKGMuYmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDAsIGYgPSBjLm11dGF0aW9uczsgaCA8IGYubGVuZ3RoOyBoKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBmW2hdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gdS5hZGQobC5rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgPSAwLCBkID0gZTsgcCA8IGQubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IGRbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKHYuYmF0Y2hJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDAsIGcgPSB2Lm11dGF0aW9uczsgeSA8IGcubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBnW3ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gdS5hZGQobS5rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgc2V0IG9mIGFsbCAocG90ZW50aWFsbHkpIGNoYW5nZWQgZG9jdW1lbnRzIGFuZCB0aGUgbGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgbXV0YXRpb24gYmF0Y2ggSURzIHRoYXQgd2VyZSBhZmZlY3RlZCBieSBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5MaSh0LCB1KS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGE6IHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphOiByLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZYTogaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHUgPSBuLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gLCAoZS54aSA9IGksIGUuR2EgPSBvLCBlLlVhLnphKGUuR2EpLCB1KSBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG4vKiBBY2NlcHRzIGxvY2FsbHkgZ2VuZXJhdGVkIE11dGF0aW9ucyBhbmQgY29tbWl0IHRoZW0gdG8gc3RvcmFnZS4gKi9cbi8qKlxuICogQWNrbm93bGVkZ2VzIHRoZSBnaXZlbiBiYXRjaC5cbiAqXG4gKiBPbiB0aGUgaGFwcHkgcGF0aCB3aGVuIGEgYmF0Y2ggaXMgYWNrbm93bGVkZ2VkLCB0aGUgbG9jYWwgc3RvcmUgd2lsbFxuICpcbiAqICArIHJlbW92ZSB0aGUgYmF0Y2ggZnJvbSB0aGUgbXV0YXRpb24gcXVldWU7XG4gKiAgKyBhcHBseSB0aGUgY2hhbmdlcyB0byB0aGUgcmVtb3RlIGRvY3VtZW50IGNhY2hlO1xuICogICsgcmVjYWxjdWxhdGUgdGhlIGxhdGVuY3kgY29tcGVuc2F0ZWQgdmlldyBpbXBsaWVkIGJ5IHRob3NlIGNoYW5nZXMgKHRoZXJlXG4gKiAgICBtYXkgYmUgbXV0YXRpb25zIGluIHRoZSBxdWV1ZSB0aGF0IGFmZmVjdCB0aGUgZG9jdW1lbnRzIGJ1dCBoYXZlbid0IGJlZW5cbiAqICAgIGFja25vd2xlZGdlZCB5ZXQpOyBhbmRcbiAqICArIGdpdmUgdGhlIGNoYW5nZWQgZG9jdW1lbnRzIGJhY2sgdGhlIHN5bmMgZW5naW5lXG4gKlxuICogQHJldHVybnMgVGhlIHJlc3VsdGluZyAobW9kaWZpZWQpIGRvY3VtZW50cy5cbiAqLyBmdW5jdGlvbiBmbyh0LCBlKSB7XG4gICAgdmFyIG4gPSBEKHQpO1xuICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiQWNrbm93bGVkZ2UgYmF0Y2hcIiwgXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCAoZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgciA9IGUuYmF0Y2gua2V5cygpLCBpID0gbi5qYS5fbyh7XG4gICAgICAgICAgICBmbzogITBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCByKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG4uYmF0Y2gsIG8gPSBpLmtleXMoKSwgdSA9IG9yLnJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBvLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB1ID0gdS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIueWkoZSwgdCk7XG4gICAgICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLCB1ID0gbi5FaS5nZXQodCk7XG4gICAgICAgICAgICAgICAgICAgIGsobnVsbCAhPT0gdSksICghbyB8fCBvLnZlcnNpb24uQSh1KSA8IDApICYmICgobyA9IGkuX2kodCwgbywgbikpICYmIFxuICAgICAgICAgICAgICAgICAgICAvLyBXZSB1c2UgdGhlIGNvbW1pdFZlcnNpb24gYXMgdGhlIHJlYWRUaW1lIHJhdGhlciB0aGFuIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBkb2N1bWVudCdzIHVwZGF0ZVRpbWUgc2luY2UgdGhlIHVwZGF0ZVRpbWUgaXMgbm90IGFkdmFuY2VkXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciB1cGRhdGVzIHRoYXQgZG8gbm90IG1vZGlmeSB0aGUgdW5kZXJseWluZyBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICAgICAgci5SaShvLCBuLlRpKSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLCB1Lm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnhpLllyKGUsIGkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KG4sIHQsIGUsIGkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGkuYXBwbHkodCk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuLnhpLm5vKHQpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5HYS5MaSh0LCByKTtcbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIG11dGF0aW9ucyBmcm9tIHRoZSBNdXRhdGlvblF1ZXVlIGZvciB0aGUgc3BlY2lmaWVkIGJhdGNoO1xuICogTG9jYWxEb2N1bWVudHMgd2lsbCBiZSByZWNhbGN1bGF0ZWQuXG4gKlxuICogQHJldHVybnMgVGhlIHJlc3VsdGluZyBtb2RpZmllZCBkb2N1bWVudHMuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgbGFzdCBjb25zaXN0ZW50IHNuYXBzaG90IHByb2Nlc3NlZCAodXNlZCBieSB0aGUgUmVtb3RlU3RvcmUgdG9cbiAqIGRldGVybWluZSB3aGV0aGVyIHRvIGJ1ZmZlciBpbmNvbWluZyBzbmFwc2hvdHMgZnJvbSB0aGUgYmFja2VuZCkuXG4gKi8gZnVuY3Rpb24gbG8odCkge1xuICAgIHZhciBlID0gRCh0KTtcbiAgICByZXR1cm4gZS5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBsYXN0IHJlbW90ZSBzbmFwc2hvdCB2ZXJzaW9uXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUucmEuQ28odCk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIFwiZ3JvdW5kLXN0YXRlXCIgKHJlbW90ZSkgZG9jdW1lbnRzLiBXZSBhc3N1bWUgdGhhdCB0aGUgcmVtb3RlXG4gKiBldmVudCByZWZsZWN0cyBhbnkgd3JpdGUgYmF0Y2hlcyB0aGF0IGhhdmUgYmVlbiBhY2tub3dsZWRnZWQgb3IgcmVqZWN0ZWRcbiAqIChpLmUuIHdlIGRvIG5vdCByZS1hcHBseSBsb2NhbCBtdXRhdGlvbnMgdG8gdXBkYXRlcyBmcm9tIHRoaXMgZXZlbnQpLlxuICpcbiAqIExvY2FsRG9jdW1lbnRzIGFyZSByZS1jYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSByZW1haW5pbmcgbXV0YXRpb25zIGluIHRoZVxuICogcXVldWUuXG4gKi8gZnVuY3Rpb24gcG8odCwgZSkge1xuICAgIHZhciBuID0gRCh0KSwgciA9IGUuZXQsIGkgPSBuLlFhO1xuICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiQXBwbHkgcmVtb3RlIGV2ZW50XCIsIFwicmVhZHdyaXRlLXByaW1hcnlcIiwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIG8gPSBuLmphLl9vKHtcbiAgICAgICAgICAgIGZvOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmVzZXQgbmV3VGFyZ2V0RGF0YUJ5VGFyZ2V0TWFwIGluIGNhc2UgdGhpcyB0cmFuc2FjdGlvbiBnZXRzIHJlLXJ1bi5cbiAgICAgICAgICAgICAgICBpID0gbi5RYTtcbiAgICAgICAgdmFyIHUgPSBbXTtcbiAgICAgICAgZS5HdC5mb3JFYWNoKChmdW5jdGlvbihlLCBvKSB7XG4gICAgICAgICAgICB2YXIgcyA9IGkuZ2V0KG8pO1xuICAgICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSB0aGUgcmVtb3RlIGtleXMgaWYgdGhlIHRhcmdldCBpcyBzdGlsbCBhY3RpdmUuIFRoaXNcbiAgICAgICAgICAgICAgICAvLyBlbnN1cmVzIHRoYXQgd2UgY2FuIHBlcnNpc3QgdGhlIHVwZGF0ZWQgdGFyZ2V0IGRhdGEgYWxvbmcgd2l0aFxuICAgICAgICAgICAgICAgIC8vIHRoZSB1cGRhdGVkIGFzc2lnbm1lbnQuXG4gICAgICAgICAgICAgICAgdS5wdXNoKG4ucmEuS28odCwgZS5uZSwgbykubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnJhLlVvKHQsIGUudGUsIG8pO1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBlLnJlc3VtZVRva2VuO1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVzdW1lIHRva2VuIGlmIHRoZSBjaGFuZ2UgaW5jbHVkZXMgb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5YKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gcy5zdChhLCByKS5udCh0LkdvKTtcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkucnQobywgYyksIFxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRhcmdldCBkYXRhIGlmIHRoZXJlIGFyZSB0YXJnZXQgY2hhbmdlcyAob3IgaWZcbiAgICAgICAgICAgICAgICAgICAgLy8gc3VmZmljaWVudCB0aW1lIGhhcyBwYXNzZWQgc2luY2UgdGhlIGxhc3QgdXBkYXRlKS5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBuZXdUYXJnZXREYXRhIHNob3VsZCBiZSBwZXJzaXN0ZWQgZHVyaW5nIGFuIHVwZGF0ZSBvZlxuICAgICAqIGFuIGFjdGl2ZSB0YXJnZXQuIFRhcmdldERhdGEgc2hvdWxkIGFsd2F5cyBiZSBwZXJzaXN0ZWQgd2hlbiBhIHRhcmdldCBpc1xuICAgICAqIGJlaW5nIHJlbGVhc2VkIGFuZCBzaG91bGQgbm90IGNhbGwgdGhpcyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFdoaWxlIHRoZSB0YXJnZXQgaXMgYWN0aXZlLCBUYXJnZXREYXRhIHVwZGF0ZXMgY2FuIGJlIG9taXR0ZWQgd2hlbiBub3RoaW5nXG4gICAgICogYWJvdXQgdGhlIHRhcmdldCBoYXMgY2hhbmdlZCBleGNlcHQgbWV0YWRhdGEgbGlrZSB0aGUgcmVzdW1lIHRva2VuIG9yXG4gICAgICogc25hcHNob3QgdmVyc2lvbi4gT2NjYXNpb25hbGx5IGl0J3Mgd29ydGggdGhlIGV4dHJhIHdyaXRlIHRvIHByZXZlbnQgdGhlc2VcbiAgICAgKiB2YWx1ZXMgZnJvbSBnZXR0aW5nIHRvbyBzdGFsZSBhZnRlciBhIGNyYXNoLCBidXQgdGhpcyBkb2Vzbid0IGhhdmUgdG8gYmVcbiAgICAgKiB0b28gZnJlcXVlbnQuXG4gICAgICovXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBwZXJzaXN0IHRhcmdldCBkYXRhIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhIHJlc3VtZSB0b2tlbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrKGUucmVzdW1lVG9rZW4uWCgpID4gMCksIDAgPT09IHQucmVzdW1lVG9rZW4uWCgpIHx8IChcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGFsbG93IHJlc3VtZSB0b2tlbiBjaGFuZ2VzIHRvIGJlIGJ1ZmZlcmVkIGluZGVmaW5pdGVseS4gVGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsb3dzIHVzIHRvIGJlIHJlYXNvbmFibHkgdXAtdG8tZGF0ZSBhZnRlciBhIGNyYXNoIGFuZCBhdm9pZHMgbmVlZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gbG9vcCBvdmVyIGFsbCBhY3RpdmUgcXVlcmllcyBvbiBzaHV0ZG93bi4gRXNwZWNpYWxseSBpbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbWF5IG5vdCBnZXQgdGltZSB0byBkbyBhbnl0aGluZyBpbnRlcmVzdGluZyB3aGlsZSB0aGUgY3VycmVudCB0YWIgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsb3NpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmV0LlIoKSAtIHQuZXQuUigpID49IDNlOCB8fCBuLnRlLnNpemUgKyBuLmVlLnNpemUgKyBuLm5lLnNpemUgPiAwKTtcbiAgICAgICAgICAgICAgICAgICAgfShzLCBjLCBlKSAmJiB1LnB1c2gobi5yYS5rbyh0LCBjKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBzID0geXQoKTtcbiAgICAgICAgLy8gSEFDSzogVGhlIG9ubHkgcmVhc29uIHdlIGFsbG93IGEgbnVsbCBzbmFwc2hvdCB2ZXJzaW9uIGlzIHNvIHRoYXQgd2VcbiAgICAgICAgLy8gY2FuIHN5bnRoZXNpemUgcmVtb3RlIGV2ZW50cyB3aGVuIHdlIGdldCBwZXJtaXNzaW9uIGRlbmllZCBlcnJvcnMgd2hpbGVcbiAgICAgICAgLy8gdHJ5aW5nIHRvIHJlc29sdmUgdGhlIHN0YXRlIG9mIGEgbG9jYWxseSBjYWNoZWQgZG9jdW1lbnQgdGhhdCBpcyBpblxuICAgICAgICAvLyBsaW1iby5cbiAgICAgICAgICAgICAgICBpZiAoZS5IdC5mb3JFYWNoKChmdW5jdGlvbihyLCBpKSB7XG4gICAgICAgICAgICBlLkp0LmhhcyhyKSAmJiB1LnB1c2gobi5wZXJzaXN0ZW5jZS5Mci5xYSh0LCByKSk7XG4gICAgICAgIH0pKSwgXG4gICAgICAgIC8vIEVhY2ggbG9vcCBpdGVyYXRpb24gb25seSBhZmZlY3RzIGl0cyBcIm93blwiIGRvYywgc28gaXQncyBzYWZlIHRvIGdldCBhbGwgdGhlIHJlbW90ZVxuICAgICAgICAvLyBkb2N1bWVudHMgaW4gYWR2YW5jZSBpbiBhIHNpbmdsZSBjYWxsLlxuICAgICAgICB1LnB1c2goXG4gICAgICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyBkb2N1bWVudCBjaGFuZ2UgYnVmZmVyIHdpdGggZG9jdW1lbnRzIGZyb20gYmFja2VuZCBvciBhIGJ1bmRsZS5cbiAgICAgKiBSZXR1cm5zIHRoZSBkb2N1bWVudCBjaGFuZ2VzIHJlc3VsdGluZyBmcm9tIGFwcGx5aW5nIHRob3NlIGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eG4gVHJhbnNhY3Rpb24gdG8gdXNlIHRvIHJlYWQgZXhpc3RpbmcgZG9jdW1lbnRzIGZyb20gc3RvcmFnZS5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRCdWZmZXIgRG9jdW1lbnQgYnVmZmVyIHRvIGNvbGxlY3QgdGhlIHJlc3VsdGVkIGNoYW5nZXMgdG8gYmVcbiAgICAgKiAgICAgICAgYXBwbGllZCB0byBzdG9yYWdlLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudHMgRG9jdW1lbnRzIHRvIGJlIGFwcGxpZWQuXG4gICAgICogQHBhcmFtIGdsb2JhbFZlcnNpb24gQSBgU25hcHNob3RWZXJzaW9uYCByZXByZXNlbnRpbmcgdGhlIHJlYWQgdGltZSBpZiBhbGxcbiAgICAgKiAgICAgICAgZG9jdW1lbnRzIGhhdmUgdGhlIHNhbWUgcmVhZCB0aW1lLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudFZlcnNpb25zIEEgRG9jdW1lbnRLZXktdG8tU25hcHNob3RWZXJzaW9uIG1hcCBpZiBkb2N1bWVudHNcbiAgICAgKiAgICAgICAgaGF2ZSB0aGVpciBvd24gcmVhZCB0aW1lLlxuICAgICAqXG4gICAgICogTm90ZTogdGhpcyBmdW5jdGlvbiB3aWxsIHVzZSBgZG9jdW1lbnRWZXJzaW9uc2AgaWYgaXQgaXMgZGVmaW5lZDtcbiAgICAgKiB3aGVuIGl0IGlzIG5vdCBkZWZpbmVkLCByZXNvcnRzIHRvIGBnbG9iYWxWZXJzaW9uYC5cbiAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24odCwgZSwgbiwgciwgXG4gICAgICAgIC8vIFRPRE8od3VhbmR5KTogV2UgY291bGQgYWRkIGByZWFkVGltZWAgdG8gTWF5YmVEb2N1bWVudCBpbnN0ZWFkIHRvIHJlbW92ZVxuICAgICAgICAvLyB0aGlzIHBhcmFtZXRlci5cbiAgICAgICAgaSkge1xuICAgICAgICAgICAgdmFyIG8gPSBJdCgpO1xuICAgICAgICAgICAgcmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvID0gby5hZGQodCk7XG4gICAgICAgICAgICB9KSksIGUuZ2V0RW50cmllcyh0LCBvKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB5dCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuLmZvckVhY2goKGZ1bmN0aW9uKG4sIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSB0LmdldChuKSwgcyA9IHI7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IFRoZSBvcmRlciBvZiB0aGUgc3RlcHMgYmVsb3cgaXMgaW1wb3J0YW50LCBzaW5jZSB3ZSB3YW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGVuc3VyZSB0aGF0IHJlamVjdGVkIGxpbWJvIHJlc29sdXRpb25zICh3aGljaCBmYWJyaWNhdGVcbiAgICAgICAgICAgICAgICAgICAgLy8gTm9Eb2N1bWVudHMgd2l0aCBTbmFwc2hvdFZlcnNpb24ubWluKCkpIG5ldmVyIGFkZCBkb2N1bWVudHMgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gY2FjaGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyBpbnN0YW5jZW9mIF9uICYmIG8udmVyc2lvbi5pc0VxdWFsKHoubWluKCkpID8gKFxuICAgICAgICAgICAgICAgICAgICAvLyBOb0RvY3VtZW50cyB3aXRoIFNuYXBzaG90VmVyc2lvbi5taW4oKSBhcmUgdXNlZCBpbiBtYW51ZmFjdHVyZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLiBXZSByZW1vdmUgdGhlc2UgZG9jdW1lbnRzIGZyb20gY2FjaGUgc2luY2Ugd2UgbG9zdFxuICAgICAgICAgICAgICAgICAgICAvLyBhY2Nlc3MuXG4gICAgICAgICAgICAgICAgICAgIGUuVmkobiwgcyksIGkgPSBpLnJ0KG4sIG8pKSA6IG51bGwgPT0gdSB8fCBvLnZlcnNpb24uQSh1LnZlcnNpb24pID4gMCB8fCAwID09PSBvLnZlcnNpb24uQSh1LnZlcnNpb24pICYmIHUuaGFzUGVuZGluZ1dyaXRlcyA/IChlLlJpKG8sIHMpLCBcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkucnQobiwgbykpIDogVChcIkxvY2FsU3RvcmVcIiwgXCJJZ25vcmluZyBvdXRkYXRlZCB3YXRjaCB1cGRhdGUgZm9yIFwiLCBuLCBcIi4gQ3VycmVudCB2ZXJzaW9uOlwiLCB1LnZlcnNpb24sIFwiIFdhdGNoIHZlcnNpb246XCIsIG8udmVyc2lvbik7XG4gICAgICAgICAgICAgICAgfSkpLCBpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KHQsIG8sIGUuSHQsIHIpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHMgPSB0O1xuICAgICAgICB9KSkpLCAhci5pc0VxdWFsKHoubWluKCkpKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG4ucmEuQ28odCkubmV4dCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLnJhLnhvKHQsIHQuR28sIHIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdS5wdXNoKGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvci54bih1KS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvLmFwcGx5KHQpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5HYS5CaSh0LCBzKTtcbiAgICAgICAgfSkpO1xuICAgIH0pKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuLlFhID0gaSwgdDtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbXV0YXRpb24gYmF0Y2ggYWZ0ZXIgdGhlIHBhc3NlZCBpbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZVxuICogb3IgbnVsbCBpZiBlbXB0eS5cbiAqIEBwYXJhbSBhZnRlckJhdGNoSWQgSWYgcHJvdmlkZWQsIHRoZSBiYXRjaCB0byBzZWFyY2ggYWZ0ZXIuXG4gKiBAcmV0dXJucyBUaGUgbmV4dCBtdXRhdGlvbiBvciBudWxsIGlmIHRoZXJlIHdhc24ndCBvbmUuXG4gKi8gZnVuY3Rpb24gdm8odCwgZSkge1xuICAgIHZhciBuID0gRCh0KTtcbiAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCBuZXh0IG11dGF0aW9uIGJhdGNoXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IC0xKSwgbi54aS5Hcih0LCBlKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBEb2N1bWVudCB3aXRoIGEgZ2l2ZW4ga2V5IG9yIG51bGwgaWYgbm90XG4gKiBmb3VuZCAtIHVzZWQgZm9yIHRlc3RpbmcuXG4gKi9cbi8qKlxuICogQXNzaWducyB0aGUgZ2l2ZW4gdGFyZ2V0IGFuIGludGVybmFsIElEIHNvIHRoYXQgaXRzIHJlc3VsdHMgY2FuIGJlIHBpbm5lZCBzb1xuICogdGhleSBkb24ndCBnZXQgR0MnZC4gQSB0YXJnZXQgbXVzdCBiZSBhbGxvY2F0ZWQgaW4gdGhlIGxvY2FsIHN0b3JlIGJlZm9yZVxuICogdGhlIHN0b3JlIGNhbiBiZSB1c2VkIHRvIG1hbmFnZSBpdHMgdmlldy5cbiAqXG4gKiBBbGxvY2F0aW5nIGFuIGFscmVhZHkgYWxsb2NhdGVkIGBUYXJnZXRgIHdpbGwgcmV0dXJuIHRoZSBleGlzdGluZyBgVGFyZ2V0RGF0YWBcbiAqIGZvciB0aGF0IGBUYXJnZXRgLlxuICovIGZ1bmN0aW9uIHlvKHQsIGUpIHtcbiAgICB2YXIgbiA9IEQodCk7XG4gICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UucnVuVHJhbnNhY3Rpb24oXCJBbGxvY2F0ZSB0YXJnZXRcIiwgXCJyZWFkd3JpdGVcIiwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIHI7XG4gICAgICAgIHJldHVybiBuLnJhLnFvKHQsIGUpLm5leHQoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpID8gKFxuICAgICAgICAgICAgLy8gVGhpcyB0YXJnZXQgaGFzIGJlZW4gbGlzdGVuZWQgdG8gcHJldmlvdXNseSwgc28gcmV1c2UgdGhlXG4gICAgICAgICAgICAvLyBwcmV2aW91cyB0YXJnZXRJRC5cbiAgICAgICAgICAgIC8vIFRPRE8obWNnKTogZnJlc2hlbiBsYXN0IGFjY2Vzc2VkIGRhdGU/XG4gICAgICAgICAgICByID0gaSwgb3IucmVzb2x2ZShyKSkgOiBuLnJhLmJvKHQpLm5leHQoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gciA9IG5ldyB1dChlLCBpLCAwIC8qIExpc3RlbiAqLyAsIHQuR28pLCBuLnJhLkZvKHQsIHIpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9KSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBJZiBNdWx0aS1UYWIgaXMgZW5hYmxlZCwgdGhlIGV4aXN0aW5nIHRhcmdldCBkYXRhIG1heSBiZSBuZXdlciB0aGFuXG4gICAgICAgIC8vIHRoZSBpbi1tZW1vcnkgZGF0YVxuICAgICAgICB2YXIgciA9IG4uUWEuZ2V0KHQudGFyZ2V0SWQpO1xuICAgICAgICByZXR1cm4gKG51bGwgPT09IHIgfHwgdC5ldC5BKHIuZXQpID4gMCkgJiYgKG4uUWEgPSBuLlFhLnJ0KHQudGFyZ2V0SWQsIHQpLCBuLkthLnNldChlLCB0LnRhcmdldElkKSksIFxuICAgICAgICB0O1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBUYXJnZXREYXRhIGFzIHNlZW4gYnkgdGhlIExvY2FsU3RvcmUsIGluY2x1ZGluZyB1cGRhdGVzIHRoYXQgbWF5XG4gKiBoYXZlIG5vdCB5ZXQgYmVlbiBwZXJzaXN0ZWQgdG8gdGhlIFRhcmdldENhY2hlLlxuICovXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nLlxuLyoqXG4gKiBVbnBpbnMgYWxsIHRoZSBkb2N1bWVudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiB0YXJnZXQuIElmXG4gKiBga2VlcFBlcnNpc3RlZFRhcmdldERhdGFgIGlzIHNldCB0byBmYWxzZSBhbmQgRWFnZXIgR0MgZW5hYmxlZCwgdGhlIG1ldGhvZFxuICogZGlyZWN0bHkgcmVtb3ZlcyB0aGUgYXNzb2NpYXRlZCB0YXJnZXQgZGF0YSBmcm9tIHRoZSB0YXJnZXQgY2FjaGUuXG4gKlxuICogUmVsZWFzaW5nIGEgbm9uLWV4aXN0aW5nIGBUYXJnZXRgIGlzIGEgbm8tb3AuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogYGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhYCBpcyBtdWx0aS10YWIgb25seS5cbmZ1bmN0aW9uIGdvKHQsIHIsIGkpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgbywgdSwgcztcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZSA9IEQodCksIG8gPSBlLlFhLmdldChyKSwgdSA9IGkgPyBcInJlYWR3cml0ZVwiIDogXCJyZWFkd3JpdGUtcHJpbWFyeVwiLCBuLmxhYmVsID0gMTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMSwgNCwgLCA1IF0pLCBpID8gWyAzIC8qYnJlYWsqLyAsIDMgXSA6IFsgNCAvKnlpZWxkKi8gLCBlLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiUmVsZWFzZSB0YXJnZXRcIiwgdSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucGVyc2lzdGVuY2UuTHIucmVtb3ZlVGFyZ2V0KHQsIG8pO1xuICAgICAgICAgICAgICAgIH0pKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBuLnNlbnQoKSwgbi5sYWJlbCA9IDM7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDMgLypicmVhayovICwgNSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBpZiAoIWNyKHMgPSBuLnNlbnQoKSkpIHRocm93IHM7XG4gICAgICAgICAgICAgICAgLy8gQWxsIGByZWxlYXNlVGFyZ2V0YCBkb2VzIGlzIHJlY29yZCB0aGUgZmluYWwgbWV0YWRhdGEgc3RhdGUgZm9yIHRoZVxuICAgICAgICAgICAgICAgIC8vIHRhcmdldCwgYnV0IHdlJ3ZlIGJlZW4gcmVjb3JkaW5nIHRoaXMgcGVyaW9kaWNhbGx5IGR1cmluZyB0YXJnZXRcbiAgICAgICAgICAgICAgICAvLyBhY3Rpdml0eS4gSWYgd2UgbG9zZSB0aGlzIHdyaXRlIHRoaXMgY291bGQgY2F1c2UgYSB2ZXJ5IHNsaWdodFxuICAgICAgICAgICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gdGhlIG9yZGVyIG9mIHRhcmdldCBkZWxldGlvbiBkdXJpbmcgR0MsIGJ1dCB3ZVxuICAgICAgICAgICAgICAgIC8vIGRvbid0IGRlZmluZSBleGFjdCBMUlUgc2VtYW50aWNzIHNvIHRoaXMgaXMgYWNjZXB0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFQoXCJMb2NhbFN0b3JlXCIsIFwiRmFpbGVkIHRvIHVwZGF0ZSBzZXF1ZW5jZSBudW1iZXJzIGZvciB0YXJnZXQgXCIgKyByICsgXCI6IFwiICsgcyksIFxuICAgICAgICAgICAgICAgIFsgMyAvKmJyZWFrKi8gLCA1IF07XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiBlLlFhID0gZS5RYS5yZW1vdmUociksIGUuS2EuZGVsZXRlKG8udGFyZ2V0KSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSdW5zIHRoZSBzcGVjaWZpZWQgcXVlcnkgYWdhaW5zdCB0aGUgbG9jYWwgc3RvcmUgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMsXG4gKiBwb3RlbnRpYWxseSB0YWtpbmcgYWR2YW50YWdlIG9mIHF1ZXJ5IGRhdGEgZnJvbSBwcmV2aW91cyBleGVjdXRpb25zIChzdWNoXG4gKiBhcyB0aGUgc2V0IG9mIHJlbW90ZSBrZXlzKS5cbiAqXG4gKiBAcGFyYW0gdXNlUHJldmlvdXNSZXN1bHRzIFdoZXRoZXIgcmVzdWx0cyBmcm9tIHByZXZpb3VzIGV4ZWN1dGlvbnMgY2FuXG4gKiBiZSB1c2VkIHRvIG9wdGltaXplIHRoaXMgcXVlcnkgZXhlY3V0aW9uLlxuICovIGZ1bmN0aW9uIG1vKHQsIGUsIG4pIHtcbiAgICB2YXIgciA9IEQodCksIGkgPSB6Lm1pbigpLCBvID0gSXQoKTtcbiAgICByZXR1cm4gci5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkV4ZWN1dGUgcXVlcnlcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgdmFyIHIgPSBEKHQpLCBpID0gci5LYS5nZXQobik7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBpID8gb3IucmVzb2x2ZShyLlFhLmdldChpKSkgOiByLnJhLnFvKGUsIG4pO1xuICAgICAgICB9KHIsIHQsIFBuKGUpKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoZSkgcmV0dXJuIGkgPSBlLmxhc3RMaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24sIHIucmEuam8odCwgZS50YXJnZXRJZCkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIG8gPSB0O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gci5VYS5VaSh0LCBlLCBuID8gaSA6IHoubWluKCksIG4gPyBvIDogSXQoKSk7XG4gICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50czogdCxcbiAgICAgICAgICAgICAgICBYYTogb1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIHdvKHQsIGUpIHtcbiAgICB2YXIgbiA9IEQodCksIHIgPSBEKG4ucmEpLCBpID0gbi5RYS5nZXQoZSk7XG4gICAgcmV0dXJuIGkgPyBQcm9taXNlLnJlc29sdmUoaS50YXJnZXQpIDogbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkdldCB0YXJnZXQgZGF0YVwiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiByLnFlKHQsIGUpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ID8gdC50YXJnZXQgOiBudWxsO1xuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNldCBvZiBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLlxuICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgcmV0dXJucyB0aGUgc2V0IG9mIGNoYW5nZXMgc2luY2UgY2xpZW50XG4gKiBpbml0aWFsaXphdGlvbi4gRnVydGhlciBpbnZvY2F0aW9ucyB3aWxsIHJldHVybiBkb2N1bWVudCB0aGF0IGhhdmUgY2hhbmdlZFxuICogc2luY2UgdGhlIHByaW9yIGNhbGwuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiBibyh0KSB7XG4gICAgdmFyIGUgPSBEKHQpO1xuICAgIHJldHVybiBlLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IG5ldyBkb2N1bWVudCBjaGFuZ2VzXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIHZhciByID0gRCh0KSwgaSA9IHl0KCksIG8gPSByaShuKSwgdSA9IGJpKGUpLCBzID0gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChvLCAhMCk7XG4gICAgICAgICAgICByZXR1cm4gdS5ucyh7XG4gICAgICAgICAgICAgICAgaW5kZXg6IFZpLnJlYWRUaW1lSW5kZXgsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHNcbiAgICAgICAgICAgIH0sIChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgLy8gVW5saWtlIGBnZXRFbnRyeSgpYCBhbmQgb3RoZXJzLCBgZ2V0TmV3RG9jdW1lbnRDaGFuZ2VzKClgIHBhcnNlc1xuICAgICAgICAgICAgICAgIC8vIHRoZSBkb2N1bWVudHMgZGlyZWN0bHkgc2luY2Ugd2Ugd2FudCB0byBrZWVwIHNlbnRpbmVsIGRlbGV0ZXMuXG4gICAgICAgICAgICAgICAgdmFyIG4gPSBlaShyLnNlcmlhbGl6ZXIsIGUpO1xuICAgICAgICAgICAgICAgIGkgPSBpLnJ0KG4ua2V5LCBuKSwgbyA9IGUucmVhZFRpbWU7XG4gICAgICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgWmE6IGksXG4gICAgICAgICAgICAgICAgICAgIHJlYWRUaW1lOiBpaShvKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0oZS5qYSwgdCwgZS5XYSk7XG4gICAgfSkpLnRoZW4oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0LlphLCByID0gdC5yZWFkVGltZTtcbiAgICAgICAgcmV0dXJuIGUuV2EgPSByLCBuO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZWFkcyB0aGUgbmV3ZXN0IGRvY3VtZW50IGNoYW5nZSBmcm9tIHBlcnNpc3RlbmNlIGFuZCBtb3ZlcyB0aGUgaW50ZXJuYWxcbiAqIHN5bmNocm9uaXphdGlvbiBtYXJrZXIgZm9yd2FyZCBzbyB0aGF0IGNhbGxzIHRvIGBnZXROZXdEb2N1bWVudENoYW5nZXMoKWBcbiAqIG9ubHkgcmV0dXJuIGNoYW5nZXMgdGhhdCBoYXBwZW5lZCBhZnRlciBjbGllbnQgaW5pdGlhbGl6YXRpb24uXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiBfbyh0KSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCAoZSA9IEQodCkpLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiU3luY2hyb25pemUgbGFzdCBkb2N1bWVudCBjaGFuZ2UgcmVhZCB0aW1lXCIsIFwicmVhZG9ubHlcIiwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGJpKHQpLCBuID0gei5taW4oKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGV4aXN0aW5nIGVudHJpZXMsIHdlIHJldHVybiBTbmFwc2hvdFZlcnNpb24ubWluKCkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUubnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IFZpLnJlYWRUaW1lSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXZlcnNlOiAhMFxuICAgICAgICAgICAgICAgICAgICB9LCAoZnVuY3Rpb24odCwgZSwgcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5yZWFkVGltZSAmJiAobiA9IGlpKGUucmVhZFRpbWUpKSwgci5kb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSh0KTtcbiAgICAgICAgICAgIH0pKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgZS5XYSA9IHQ7XG4gICAgICAgICAgICB9KSkgXTtcbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBWZXJpZmllcyB0aGUgZXJyb3IgdGhyb3duIGJ5IGEgTG9jYWxTdG9yZSBvcGVyYXRpb24uIElmIGEgTG9jYWxTdG9yZVxuICogb3BlcmF0aW9uIGZhaWxzIGJlY2F1c2UgdGhlIHByaW1hcnkgbGVhc2UgaGFzIGJlZW4gdGFrZW4gYnkgYW5vdGhlciBjbGllbnQsXG4gKiB3ZSBpZ25vcmUgdGhlIGVycm9yICh0aGUgcGVyc2lzdGVuY2UgbGF5ZXIgd2lsbCBpbW1lZGlhdGVseSBjYWxsXG4gKiBgYXBwbHlQcmltYXJ5TGVhc2VgIHRvIHByb3BhZ2F0ZSB0aGUgcHJpbWFyeSBzdGF0ZSBjaGFuZ2UpLiBBbGwgb3RoZXIgZXJyb3JzXG4gKiBhcmUgcmUtdGhyb3duLlxuICpcbiAqIEBwYXJhbSBlcnIgQW4gZXJyb3IgcmV0dXJuZWQgYnkgYSBMb2NhbFN0b3JlIG9wZXJhdGlvbi5cbiAqIEByZXR1cm4gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgd2UgcmVjb3ZlcmVkLCBvciB0aGUgb3JpZ2luYWwgZXJyb3IuXG4gKi8gZnVuY3Rpb24gSW8odCkge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAodC5jb2RlICE9PSBGLkZBSUxFRF9QUkVDT05ESVRJT04gfHwgdC5tZXNzYWdlICE9PSBxcikgdGhyb3cgdDtcbiAgICAgICAgICAgIHJldHVybiBUKFwiTG9jYWxTdG9yZVwiLCBcIlVuZXhwZWN0ZWRseSBsb3N0IHByaW1hcnkgbGVhc2VcIiksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSBpcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHN0cmVhbWluZyBSUENcbiAqIHRvIHRoZSBGaXJlc3RvcmUgYmFja2VuZC4gSXQncyBidWlsdCBvbiB0b3Agb2YgdGhlIGNvbm5lY3Rpb25zIG93biBzdXBwb3J0XG4gKiBmb3Igc3RyZWFtaW5nIFJQQ3MsIGFuZCBhZGRzIHNldmVyYWwgY3JpdGljYWwgZmVhdHVyZXMgZm9yIG91ciBjbGllbnRzOlxuICpcbiAqICAgLSBFeHBvbmVudGlhbCBiYWNrb2ZmIG9uIGZhaWx1cmVcbiAqICAgLSBBdXRoZW50aWNhdGlvbiB2aWEgQ3JlZGVudGlhbHNQcm92aWRlclxuICogICAtIERpc3BhdGNoaW5nIGFsbCBjYWxsYmFja3MgaW50byB0aGUgc2hhcmVkIHdvcmtlciBxdWV1ZVxuICogICAtIENsb3NpbmcgaWRsZSBzdHJlYW1zIGFmdGVyIDYwIHNlY29uZHMgb2YgaW5hY3Rpdml0eVxuICpcbiAqIFN1YmNsYXNzZXMgb2YgUGVyc2lzdGVudFN0cmVhbSBpbXBsZW1lbnQgc2VyaWFsaXphdGlvbiBvZiBtb2RlbHMgdG8gYW5kXG4gKiBmcm9tIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwcm90b2NvbCBidWZmZXJzIGZvciBhIHNwZWNpZmljXG4gKiBzdHJlYW1pbmcgUlBDLlxuICpcbiAqICMjIFN0YXJ0aW5nIGFuZCBTdG9wcGluZ1xuICpcbiAqIFN0cmVhbWluZyBSUENzIGFyZSBzdGF0ZWZ1bCBhbmQgbmVlZCB0byBiZSBzdGFydCgpZWQgYmVmb3JlIG1lc3NhZ2VzIGNhblxuICogYmUgc2VudCBhbmQgcmVjZWl2ZWQuIFRoZSBQZXJzaXN0ZW50U3RyZWFtIHdpbGwgY2FsbCB0aGUgb25PcGVuKCkgZnVuY3Rpb25cbiAqIG9mIHRoZSBsaXN0ZW5lciBvbmNlIHRoZSBzdHJlYW0gaXMgcmVhZHkgdG8gYWNjZXB0IHJlcXVlc3RzLlxuICpcbiAqIFNob3VsZCBhIHN0YXJ0KCkgZmFpbCwgUGVyc2lzdGVudFN0cmVhbSB3aWxsIGNhbGwgdGhlIHJlZ2lzdGVyZWQgb25DbG9zZSgpXG4gKiBsaXN0ZW5lciB3aXRoIGEgRmlyZXN0b3JlRXJyb3IgaW5kaWNhdGluZyB3aGF0IHdlbnQgd3JvbmcuXG4gKlxuICogQSBQZXJzaXN0ZW50U3RyZWFtIGNhbiBiZSBzdGFydGVkIGFuZCBzdG9wcGVkIHJlcGVhdGVkbHkuXG4gKlxuICogR2VuZXJpYyB0eXBlczpcbiAqICBTZW5kVHlwZTogVGhlIHR5cGUgb2YgdGhlIG91dGdvaW5nIG1lc3NhZ2Ugb2YgdGhlIHVuZGVybHlpbmdcbiAqICAgIGNvbm5lY3Rpb24gc3RyZWFtXG4gKiAgUmVjZWl2ZVR5cGU6IFRoZSB0eXBlIG9mIHRoZSBpbmNvbWluZyBtZXNzYWdlIG9mIHRoZSB1bmRlcmx5aW5nXG4gKiAgICBjb25uZWN0aW9uIHN0cmVhbVxuICogIExpc3RlbmVyVHlwZTogVGhlIHR5cGUgb2YgdGhlIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSB1c2VkIGZvciBjYWxsYmFja3NcbiAqLyB2YXIgRW8gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgciwgaSwgbykge1xuICAgICAgICB0aGlzLmxuID0gdCwgdGhpcy50YyA9IG4sIHRoaXMuZWMgPSByLCB0aGlzLm5jID0gaSwgdGhpcy5saXN0ZW5lciA9IG8sIHRoaXMuc3RhdGUgPSAwIC8qIEluaXRpYWwgKi8gLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGNsb3NlIGNvdW50IHRoYXQncyBpbmNyZW1lbnRlZCBldmVyeSB0aW1lIHRoZSBzdHJlYW0gaXMgY2xvc2VkOyB1c2VkIGJ5XG4gICAgICAgICAgICAgKiBnZXRDbG9zZUd1YXJkZWREaXNwYXRjaGVyKCkgdG8gaW52YWxpZGF0ZSBjYWxsYmFja3MgdGhhdCBoYXBwZW4gYWZ0ZXJcbiAgICAgICAgICAgICAqIGNsb3NlLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2MgPSAwLCB0aGlzLmljID0gbnVsbCwgdGhpcy5zdHJlYW0gPSBudWxsLCB0aGlzLlBzID0gbmV3IGlyKHQsIGUpXG4gICAgICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBzdGFydCgpIGhhcyBiZWVuIGNhbGxlZCBhbmQgbm8gZXJyb3IgaGFzIG9jY3VycmVkLiBUcnVlXG4gICAgICogaW5kaWNhdGVzIHRoZSBzdHJlYW0gaXMgb3BlbiBvciBpbiB0aGUgcHJvY2VzcyBvZiBvcGVuaW5nICh3aGljaFxuICAgICAqIGVuY29tcGFzc2VzIHJlc3BlY3RpbmcgYmFja29mZiwgZ2V0dGluZyBhdXRoIHRva2VucywgYW5kIHN0YXJ0aW5nIHRoZVxuICAgICAqIGFjdHVhbCBSUEMpLiBVc2UgaXNPcGVuKCkgdG8gZGV0ZXJtaW5lIGlmIHRoZSBzdHJlYW0gaXMgb3BlbiBhbmQgcmVhZHkgZm9yXG4gICAgICogb3V0Ym91bmQgcmVxdWVzdHMuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDEgLyogU3RhcnRpbmcgKi8gPT09IHRoaXMuc3RhdGUgfHwgMiAvKiBPcGVuICovID09PSB0aGlzLnN0YXRlIHx8IDQgLyogQmFja29mZiAqLyA9PT0gdGhpcy5zdGF0ZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVuZGVybHlpbmcgUlBDIGlzIG9wZW4gKHRoZSBvbk9wZW4oKSBsaXN0ZW5lciBoYXMgYmVlblxuICAgICAqIGNhbGxlZCkgYW5kIHRoZSBzdHJlYW0gaXMgcmVhZHkgZm9yIG91dGJvdW5kIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLm9jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAyIC8qIE9wZW4gKi8gPT09IHRoaXMuc3RhdGU7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBSUEMuIE9ubHkgYWxsb3dlZCBpZiBpc1N0YXJ0ZWQoKSByZXR1cm5zIGZhbHNlLiBUaGUgc3RyZWFtIGlzXG4gICAgICogbm90IGltbWVkaWF0ZWx5IHJlYWR5IGZvciB1c2U6IG9uT3BlbigpIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBSUEMgaXNcbiAgICAgKiByZWFkeSBmb3Igb3V0Ym91bmQgcmVxdWVzdHMsIGF0IHdoaWNoIHBvaW50IGlzT3BlbigpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICpcbiAgICAgKiBXaGVuIHN0YXJ0IHJldHVybnMsIGlzU3RhcnRlZCgpIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgMyAvKiBFcnJvciAqLyAhPT0gdGhpcy5zdGF0ZSA/IHRoaXMuYXV0aCgpIDogdGhpcy5hYygpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBSUEMuIFRoaXMgY2FsbCBpcyBpZGVtcG90ZW50IGFuZCBhbGxvd2VkIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgICogY3VycmVudCBpc1N0YXJ0ZWQoKSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFdoZW4gc3RvcCByZXR1cm5zLCBpc1N0YXJ0ZWQoKSBhbmQgaXNPcGVuKCkgd2lsbCBib3RoIHJldHVybiBmYWxzZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yYygpID8gWyA0IC8qeWllbGQqLyAsIHRoaXMuY2xvc2UoMCAvKiBJbml0aWFsICovKSBdIDogWyAzIC8qYnJlYWsqLyAsIDIgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB0LnNlbnQoKSwgdC5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQWZ0ZXIgYW4gZXJyb3IgdGhlIHN0cmVhbSB3aWxsIHVzdWFsbHkgYmFjayBvZmYgb24gdGhlIG5leHQgYXR0ZW1wdCB0b1xuICAgICAqIHN0YXJ0IGl0LiBJZiB0aGUgZXJyb3Igd2FycmFudHMgYW4gaW1tZWRpYXRlIHJlc3RhcnQgb2YgdGhlIHN0cmVhbSwgdGhlXG4gICAgICogc2VuZGVyIGNhbiB1c2UgdGhpcyB0byBpbmRpY2F0ZSB0aGF0IHRoZSByZWNlaXZlciBzaG91bGQgbm90IGJhY2sgb2ZmLlxuICAgICAqXG4gICAgICogRWFjaCBlcnJvciB3aWxsIGNhbGwgdGhlIG9uQ2xvc2UoKSBsaXN0ZW5lci4gVGhhdCBmdW5jdGlvbiBjYW4gZGVjaWRlIHRvXG4gICAgICogaW5oaWJpdCBiYWNrb2ZmIGlmIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmNjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAwIC8qIEluaXRpYWwgKi8gLCB0aGlzLlBzLnJlc2V0KCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogTWFya3MgdGhpcyBzdHJlYW0gYXMgaWRsZS4gSWYgbm8gZnVydGhlciBhY3Rpb25zIGFyZSBwZXJmb3JtZWQgb24gdGhlXG4gICAgICogc3RyZWFtIGZvciBvbmUgbWludXRlLCB0aGUgc3RyZWFtIHdpbGwgYXV0b21hdGljYWxseSBjbG9zZSBpdHNlbGYgYW5kXG4gICAgICogbm90aWZ5IHRoZSBzdHJlYW0ncyBvbkNsb3NlKCkgaGFuZGxlciB3aXRoIFN0YXR1cy5PSy4gVGhlIHN0cmVhbSB3aWxsIHRoZW5cbiAgICAgKiBiZSBpbiBhICFpc1N0YXJ0ZWQoKSBzdGF0ZSwgcmVxdWlyaW5nIHRoZSBjYWxsZXIgdG8gc3RhcnQgdGhlIHN0cmVhbSBhZ2FpblxuICAgICAqIGJlZm9yZSBmdXJ0aGVyIHVzZS5cbiAgICAgKlxuICAgICAqIE9ubHkgc3RyZWFtcyB0aGF0IGFyZSBpbiBzdGF0ZSAnT3BlbicgY2FuIGJlIG1hcmtlZCBpZGxlLCBhcyBhbGwgb3RoZXJcbiAgICAgKiBzdGF0ZXMgaW1wbHkgcGVuZGluZyBuZXR3b3JrIG9wZXJhdGlvbnMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudWMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAvLyBTdGFydHMgdGhlIGlkbGUgdGltZSBpZiB3ZSBhcmUgaW4gc3RhdGUgJ09wZW4nIGFuZCBhcmUgbm90IHlldCBhbHJlYWR5XG4gICAgICAgIC8vIHJ1bm5pbmcgYSB0aW1lciAoaW4gd2hpY2ggY2FzZSB0aGUgcHJldmlvdXMgaWRsZSB0aW1lb3V0IHN0aWxsIGFwcGxpZXMpLlxuICAgICAgICAgICAgICAgIHRoaXMub2MoKSAmJiBudWxsID09PSB0aGlzLmljICYmICh0aGlzLmljID0gdGhpcy5sbi5Qbih0aGlzLnRjLCA2ZTQsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmhjKCk7XG4gICAgICAgIH0pKSk7XG4gICAgfSwgXG4gICAgLyoqIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgdW5kZXJseWluZyBzdHJlYW0uICovIHQucHJvdG90eXBlLmxjID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLl9jKCksIHRoaXMuc3RyZWFtLnNlbmQodCk7XG4gICAgfSwgXG4gICAgLyoqIENhbGxlZCBieSB0aGUgaWRsZSB0aW1lciB3aGVuIHRoZSBzdHJlYW0gc2hvdWxkIGNsb3NlIGR1ZSB0byBpbmFjdGl2aXR5LiAqLyB0LnByb3RvdHlwZS5oYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vYygpID8gWyAyIC8qcmV0dXJuKi8gLCB0aGlzLmNsb3NlKDAgLyogSW5pdGlhbCAqLykgXSA6IFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKiogTWFya3MgdGhlIHN0cmVhbSBhcyBhY3RpdmUgYWdhaW4uICovIHQucHJvdG90eXBlLl9jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaWMgJiYgKHRoaXMuaWMuY2FuY2VsKCksIHRoaXMuaWMgPSBudWxsKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIHN0cmVhbSBhbmQgY2xlYW5zIHVwIGFzIG5lY2Vzc2FyeTpcbiAgICAgKlxuICAgICAqICogY2xvc2VzIHRoZSB1bmRlcmx5aW5nIEdSUEMgc3RyZWFtO1xuICAgICAqICogY2FsbHMgdGhlIG9uQ2xvc2UgaGFuZGxlciB3aXRoIHRoZSBnaXZlbiAnZXJyb3InO1xuICAgICAqICogc2V0cyBpbnRlcm5hbCBzdHJlYW0gc3RhdGUgdG8gJ2ZpbmFsU3RhdGUnO1xuICAgICAqICogYWRqdXN0cyB0aGUgYmFja29mZiB0aW1lciBiYXNlZCBvbiB0aGUgZXJyb3JcbiAgICAgKlxuICAgICAqIEEgbmV3IHN0cmVhbSBjYW4gYmUgb3BlbmVkIGJ5IGNhbGxpbmcgc3RhcnQoKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaW5hbFN0YXRlIHRoZSBpbnRlbmRlZCBzdGF0ZSBvZiB0aGUgc3RyZWFtIGFmdGVyIGNsb3NpbmcuXG4gICAgICogQHBhcmFtIGVycm9yIHRoZSBlcnJvciB0aGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkIHdpdGguXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbih0LCByKSB7XG4gICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgdGhlIGxpc3RlbmVyIHRoYXQgdGhlIHN0cmVhbSBjbG9zZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBhbnkgb3V0c3RhbmRpbmcgdGltZXJzICh0aGV5J3JlIGd1YXJhbnRlZWQgbm90IHRvIGV4ZWN1dGUpLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYygpLCB0aGlzLlBzLmNhbmNlbCgpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZXMgYW55IHN0cmVhbS1yZWxhdGVkIGNhbGxiYWNrcyAoZS5nLiBmcm9tIGF1dGggb3IgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZGVybHlpbmcgc3RyZWFtKSwgZ3VhcmFudGVlaW5nIHRoZXkgd29uJ3QgZXhlY3V0ZS5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYysrLCAzIC8qIEVycm9yICovICE9PSB0ID8gXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYW4gaW50ZW50aW9uYWwgY2xvc2UgZW5zdXJlIHdlIGRvbid0IGRlbGF5IG91ciBuZXh0IGNvbm5lY3Rpb24gYXR0ZW1wdC5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Qcy5yZXNldCgpIDogciAmJiByLmNvZGUgPT09IEYuUkVTT1VSQ0VfRVhIQVVTVEVEID8gKFxuICAgICAgICAgICAgICAgICAgICAvLyBMb2cgdGhlIGVycm9yLiAoUHJvYmFibHkgZWl0aGVyICdxdW90YSBleGNlZWRlZCcgb3IgJ21heCBxdWV1ZSBsZW5ndGggcmVhY2hlZCcuKVxuICAgICAgICAgICAgICAgICAgICBOKHIudG9TdHJpbmcoKSksIE4oXCJVc2luZyBtYXhpbXVtIGJhY2tvZmYgZGVsYXkgdG8gcHJldmVudCBvdmVybG9hZGluZyB0aGUgYmFja2VuZC5cIiksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLlBzLm1uKCkpIDogciAmJiByLmNvZGUgPT09IEYuVU5BVVRIRU5USUNBVEVEICYmIFxuICAgICAgICAgICAgICAgICAgICAvLyBcInVuYXV0aGVudGljYXRlZFwiIGVycm9yIG1lYW5zIHRoZSB0b2tlbiB3YXMgcmVqZWN0ZWQuIFRyeSBmb3JjZSByZWZyZXNoaW5nIGl0IGluIGNhc2UgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBleHBpcmVkLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5jLm5pKCksIFxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgdW5kZXJseWluZyBzdHJlYW0gYmVjYXVzZSB3ZSBhcmUgbm8gbG9uZ2VyIGludGVyZXN0ZWQgaW4gZXZlbnRzLlxuICAgICAgICAgICAgICAgICAgICBudWxsICE9PSB0aGlzLnN0cmVhbSAmJiAodGhpcy5mYygpLCB0aGlzLnN0cmVhbS5jbG9zZSgpLCB0aGlzLnN0cmVhbSA9IG51bGwpLCBcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzdGF0ZSBtdXN0IGJlIGFzc2lnbmVkIGJlZm9yZSBjYWxsaW5nIG9uQ2xvc2UoKSB0byBhbGxvdyB0aGUgY2FsbGJhY2sgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gaW5oaWJpdCBiYWNrb2ZmIG9yIG90aGVyd2lzZSBtYW5pcHVsYXRlIHRoZSBzdGF0ZSBpbiBpdHMgbm9uLXN0YXJ0ZWQgc3RhdGUuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0LCBbIDQgLyp5aWVsZCovICwgdGhpcy5saXN0ZW5lci5kYyhyKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBhbnkgb3V0c3RhbmRpbmcgdGltZXJzICh0aGV5J3JlIGd1YXJhbnRlZWQgbm90IHRvIGV4ZWN1dGUpLlxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgdGhlIGxpc3RlbmVyIHRoYXQgdGhlIHN0cmVhbSBjbG9zZWQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDYW4gYmUgb3ZlcnJpZGRlbiB0byBwZXJmb3JtIGFkZGl0aW9uYWwgY2xlYW51cCBiZWZvcmUgdGhlIHN0cmVhbSBpcyBjbG9zZWQuXG4gICAgICogQ2FsbGluZyBzdXBlci50ZWFyRG93bigpIGlzIG5vdCByZXF1aXJlZC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5mYyA9IGZ1bmN0aW9uKCkge30sIHQucHJvdG90eXBlLmF1dGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0YXRlID0gMSAvKiBTdGFydGluZyAqLztcbiAgICAgICAgdmFyIGUgPSB0aGlzLndjKHRoaXMuc2MpLCBuID0gdGhpcy5zYztcbiAgICAgICAgLy8gVE9ETyhtaWtlbGVoZW4pOiBKdXN0IHVzZSBkaXNwYXRjaElmTm90Q2xvc2VkLCBidXQgc2VlIFRPRE8gYmVsb3cuXG4gICAgICAgICAgICAgICAgdGhpcy5uYy5nZXRUb2tlbigpLnRoZW4oKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIC8vIFN0cmVhbSBjYW4gYmUgc3RvcHBlZCB3aGlsZSB3YWl0aW5nIGZvciBhdXRoZW50aWNhdGlvbi5cbiAgICAgICAgICAgIC8vIFRPRE8obWlrZWxlaGVuKTogV2UgcmVhbGx5IHNob3VsZCBqdXN0IHVzZSBkaXNwYXRjaElmTm90Q2xvc2VkXG4gICAgICAgICAgICAvLyBhbmQgbGV0IHRoaXMgZGlzcGF0Y2ggb250byB0aGUgcXVldWUsIGJ1dCB0aGF0IG9wZW5lZCBhIHNwZWMgdGVzdCBjYW5cbiAgICAgICAgICAgIC8vIG9mIHdvcm1zIHRoYXQgSSBkb24ndCB3YW50IHRvIGRlYWwgd2l0aCBpbiB0aGlzIFBSLlxuICAgICAgICAgICAgdC5zYyA9PT0gbiAmJiBcbiAgICAgICAgICAgIC8vIE5vcm1hbGx5IHdlJ2QgaGF2ZSB0byBzY2hlZHVsZSB0aGUgY2FsbGJhY2sgb24gdGhlIEFzeW5jUXVldWUuXG4gICAgICAgICAgICAvLyBIb3dldmVyLCB0aGUgZm9sbG93aW5nIGNhbGxzIGFyZSBzYWZlIHRvIGJlIGNhbGxlZCBvdXRzaWRlIHRoZVxuICAgICAgICAgICAgLy8gQXN5bmNRdWV1ZSBzaW5jZSB0aGV5IGRvbid0IGNoYWluIGFzeW5jaHJvbm91cyBjYWxsc1xuICAgICAgICAgICAgdC5UYyhlKTtcbiAgICAgICAgfSksIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBlKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBqKEYuVU5LTk9XTiwgXCJGZXRjaGluZyBhdXRoIHRva2VuIGZhaWxlZDogXCIgKyBuLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0LkVjKGUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuVGMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHRoaXMud2ModGhpcy5zYyk7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gdGhpcy5JYyh0KSwgdGhpcy5zdHJlYW0ubWMoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuc3RhdGUgPSAyIC8qIE9wZW4gKi8gLCBlLmxpc3RlbmVyLm1jKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKSwgdGhpcy5zdHJlYW0uZGMoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIG4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLkVjKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIHRoaXMuc3RyZWFtLm9uTWVzc2FnZSgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUub25NZXNzYWdlKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuYWMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0YXRlID0gNCAvKiBCYWNrb2ZmICovICwgdGhpcy5Qcy5BbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZSh0LCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlID0gMCAvKiBJbml0aWFsICovICwgdGhpcy5zdGFydCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFxuICAgIC8vIFZpc2libGUgZm9yIHRlc3RzXG4gICAgdC5wcm90b3R5cGUuRWMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIEluIHRoZW9yeSB0aGUgc3RyZWFtIGNvdWxkIGNsb3NlIGNsZWFubHksIGhvd2V2ZXIsIGluIG91ciBjdXJyZW50IG1vZGVsXG4gICAgICAgIC8vIHdlIG5ldmVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWNhdXNlIGlmIHdlIHN0b3AgYSBzdHJlYW0gb3Vyc2VsdmVzLFxuICAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgbmV2ZXIgYmUgY2FsbGVkLiBUbyBwcmV2ZW50IGNhc2VzIHdoZXJlIHdlIHJldHJ5XG4gICAgICAgIC8vIHdpdGhvdXQgYSBiYWNrb2ZmIGFjY2lkZW50YWxseSwgd2Ugc2V0IHRoZSBzdHJlYW0gdG8gZXJyb3IgaW4gYWxsIGNhc2VzLlxuICAgICAgICByZXR1cm4gVChcIlBlcnNpc3RlbnRTdHJlYW1cIiwgXCJjbG9zZSB3aXRoIGVycm9yOiBcIiArIHQpLCB0aGlzLnN0cmVhbSA9IG51bGwsIHRoaXMuY2xvc2UoMyAvKiBFcnJvciAqLyAsIHQpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBcImRpc3BhdGNoZXJcIiBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb3BlcmF0aW9ucyBvbnRvIHRoZVxuICAgICAqIEFzeW5jUXVldWUgYnV0IG9ubHkgcnVucyB0aGVtIGlmIGNsb3NlQ291bnQgcmVtYWlucyB1bmNoYW5nZWQuIFRoaXMgYWxsb3dzXG4gICAgICogdXMgdG8gdHVybiBhdXRoIC8gc3RyZWFtIGNhbGxiYWNrcyBpbnRvIG5vLW9wcyBpZiB0aGUgc3RyZWFtIGlzIGNsb3NlZCAvXG4gICAgICogcmUtb3BlbmVkLCBldGMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUud2MgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIGUubG4uZnMoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnNjID09PSB0ID8gbigpIDogKFQoXCJQZXJzaXN0ZW50U3RyZWFtXCIsIFwic3RyZWFtIGNhbGxiYWNrIHNraXBwZWQgYnkgZ2V0Q2xvc2VHdWFyZGVkRGlzcGF0Y2hlci5cIiksIFxuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICB9LCB0O1xufSgpLCBUbyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbiwgciwgaSwgbykge1xuICAgICAgICB2YXIgdSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAodSA9IGUuY2FsbCh0aGlzLCB0LCBcImxpc3Rlbl9zdHJlYW1fY29ubmVjdGlvbl9iYWNrb2ZmXCIgLyogTGlzdGVuU3RyZWFtQ29ubmVjdGlvbkJhY2tvZmYgKi8gLCBcImxpc3Rlbl9zdHJlYW1faWRsZVwiIC8qIExpc3RlblN0cmVhbUlkbGUgKi8gLCBuLCByLCBvKSB8fCB0aGlzKS5zZXJpYWxpemVyID0gaSwgXG4gICAgICAgIHU7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5JYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWMuQWMoXCJMaXN0ZW5cIiwgdCk7XG4gICAgfSwgbi5wcm90b3R5cGUub25NZXNzYWdlID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBBIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgbWVhbnMgdGhlIHN0cmVhbSBpcyBoZWFsdGh5XG4gICAgICAgIHRoaXMuUHMucmVzZXQoKTtcbiAgICAgICAgdmFyIGUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbjtcbiAgICAgICAgICAgIGlmIChcInRhcmdldENoYW5nZVwiIGluIGUpIHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldENoYW5nZTtcbiAgICAgICAgICAgICAgICAvLyBwcm90bzMgZGVmYXVsdCB2YWx1ZSBpcyB1bnNldCBpbiBKU09OICh1bmRlZmluZWQpLCBzbyB1c2UgJ05PX0NIQU5HRSdcbiAgICAgICAgICAgICAgICAvLyBpZiB1bnNldFxuICAgICAgICAgICAgICAgIHZhciByID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJOT19DSEFOR0VcIiA9PT0gdCA/IDAgLyogTm9DaGFuZ2UgKi8gOiBcIkFERFwiID09PSB0ID8gMSAvKiBBZGRlZCAqLyA6IFwiUkVNT1ZFXCIgPT09IHQgPyAyIC8qIFJlbW92ZWQgKi8gOiBcIkNVUlJFTlRcIiA9PT0gdCA/IDMgLyogQ3VycmVudCAqLyA6IFwiUkVTRVRcIiA9PT0gdCA/IDQgLyogUmVzZXQgKi8gOiBTKCk7XG4gICAgICAgICAgICAgICAgfShlLnRhcmdldENoYW5nZS50YXJnZXRDaGFuZ2VUeXBlIHx8IFwiTk9fQ0hBTkdFXCIpLCBpID0gZS50YXJnZXRDaGFuZ2UudGFyZ2V0SWRzIHx8IFtdLCBvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5VZSA/IChrKHZvaWQgMCA9PT0gZSB8fCBcInN0cmluZ1wiID09IHR5cGVvZiBlKSwgcnQuZnJvbUJhc2U2NFN0cmluZyhlIHx8IFwiXCIpKSA6IChrKHZvaWQgMCA9PT0gZSB8fCBlIGluc3RhbmNlb2YgVWludDhBcnJheSksIFxuICAgICAgICAgICAgICAgICAgICBydC5mcm9tVWludDhBcnJheShlIHx8IG5ldyBVaW50OEFycmF5KSk7XG4gICAgICAgICAgICAgICAgfSh0LCBlLnRhcmdldENoYW5nZS5yZXN1bWVUb2tlbiksIHUgPSBlLnRhcmdldENoYW5nZS5jYXVzZSwgcyA9IHUgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHZvaWQgMCA9PT0gdC5jb2RlID8gRi5VTktOT1dOIDogY3QodC5jb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBqKGUsIHQubWVzc2FnZSB8fCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9KHUpO1xuICAgICAgICAgICAgICAgIG4gPSBuZXcgUHQociwgaSwgbywgcyB8fCBudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJkb2N1bWVudENoYW5nZVwiIGluIGUpIHtcbiAgICAgICAgICAgICAgICBlLmRvY3VtZW50Q2hhbmdlO1xuICAgICAgICAgICAgICAgIHZhciBhID0gZS5kb2N1bWVudENoYW5nZTtcbiAgICAgICAgICAgICAgICBhLmRvY3VtZW50LCBhLmRvY3VtZW50Lm5hbWUsIGEuZG9jdW1lbnQudXBkYXRlVGltZTtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHllKHQsIGEuZG9jdW1lbnQubmFtZSksIGggPSBsZShhLmRvY3VtZW50LnVwZGF0ZVRpbWUpLCBmID0gbmV3IHluKHtcbiAgICAgICAgICAgICAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkczogYS5kb2N1bWVudC5maWVsZHNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLCBsID0gbmV3IGJuKGMsIGgsIGYsIHt9KSwgcCA9IGEudGFyZ2V0SWRzIHx8IFtdLCBkID0gYS5yZW1vdmVkVGFyZ2V0SWRzIHx8IFtdO1xuICAgICAgICAgICAgICAgIG4gPSBuZXcgRHQocCwgZCwgbC5rZXksIGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcImRvY3VtZW50RGVsZXRlXCIgaW4gZSkge1xuICAgICAgICAgICAgICAgIGUuZG9jdW1lbnREZWxldGU7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBlLmRvY3VtZW50RGVsZXRlO1xuICAgICAgICAgICAgICAgIHYuZG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSB5ZSh0LCB2LmRvY3VtZW50KSwgZyA9IHYucmVhZFRpbWUgPyBsZSh2LnJlYWRUaW1lKSA6IHoubWluKCksIG0gPSBuZXcgX24oeSwgZyksIHcgPSB2LnJlbW92ZWRUYXJnZXRJZHMgfHwgW107XG4gICAgICAgICAgICAgICAgbiA9IG5ldyBEdChbXSwgdywgbS5rZXksIG0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcImRvY3VtZW50UmVtb3ZlXCIgaW4gZSkge1xuICAgICAgICAgICAgICAgIGUuZG9jdW1lbnRSZW1vdmU7XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBlLmRvY3VtZW50UmVtb3ZlO1xuICAgICAgICAgICAgICAgIGIuZG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIF8gPSB5ZSh0LCBiLmRvY3VtZW50KSwgSSA9IGIucmVtb3ZlZFRhcmdldElkcyB8fCBbXTtcbiAgICAgICAgICAgICAgICBuID0gbmV3IER0KFtdLCBJLCBfLCBudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoXCJmaWx0ZXJcIiBpbiBlKSkgcmV0dXJuIFMoKTtcbiAgICAgICAgICAgICAgICBlLmZpbHRlcjtcbiAgICAgICAgICAgICAgICB2YXIgRSA9IGUuZmlsdGVyO1xuICAgICAgICAgICAgICAgIEUudGFyZ2V0SWQ7XG4gICAgICAgICAgICAgICAgdmFyIFQgPSBFLmNvdW50IHx8IDAsIE4gPSBuZXcgc3QoVCksIHggPSBFLnRhcmdldElkO1xuICAgICAgICAgICAgICAgIG4gPSBuZXcgT3QoeCwgTik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfSh0aGlzLnNlcmlhbGl6ZXIsIHQpLCBuID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSBvbmx5IHJlYWNoZWQgYSBjb25zaXN0ZW50IHNuYXBzaG90IGZvciB0aGUgZW50aXJlIHN0cmVhbSBpZiB0aGVyZVxuICAgICAgICAgICAgLy8gaXMgYSByZWFkX3RpbWUgc2V0IGFuZCBpdCBhcHBsaWVzIHRvIGFsbCB0YXJnZXRzIChpLmUuIHRoZSBsaXN0IG9mXG4gICAgICAgICAgICAvLyB0YXJnZXRzIGlzIGVtcHR5KS4gVGhlIGJhY2tlbmQgaXMgZ3VhcmFudGVlZCB0byBzZW5kIHN1Y2ggcmVzcG9uc2VzLlxuICAgICAgICAgICAgaWYgKCEoXCJ0YXJnZXRDaGFuZ2VcIiBpbiB0KSkgcmV0dXJuIHoubWluKCk7XG4gICAgICAgICAgICB2YXIgZSA9IHQudGFyZ2V0Q2hhbmdlO1xuICAgICAgICAgICAgcmV0dXJuIGUudGFyZ2V0SWRzICYmIGUudGFyZ2V0SWRzLmxlbmd0aCA/IHoubWluKCkgOiBlLnJlYWRUaW1lID8gbGUoZS5yZWFkVGltZSkgOiB6Lm1pbigpO1xuICAgICAgICB9KHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5SYyhlLCBuKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgaW50ZXJlc3QgaW4gdGhlIHJlc3VsdHMgb2YgdGhlIGdpdmVuIHRhcmdldC4gSWYgdGhlIHRhcmdldFxuICAgICAqIGluY2x1ZGVzIGEgcmVzdW1lVG9rZW4gaXQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVxdWVzdC4gUmVzdWx0cyB0aGF0XG4gICAgICogYWZmZWN0IHRoZSB0YXJnZXQgd2lsbCBiZSBzdHJlYW1lZCBiYWNrIGFzIFdhdGNoQ2hhbmdlIG1lc3NhZ2VzIHRoYXRcbiAgICAgKiByZWZlcmVuY2UgdGhlIHRhcmdldElkLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLlBjID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHt9O1xuICAgICAgICBlLmRhdGFiYXNlID0gd2UodGhpcy5zZXJpYWxpemVyKSwgZS5hZGRUYXJnZXQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiwgciA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIChuID0gbnQocikgPyB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRzOiBUZSh0LCByKVxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogTmUodCwgcilcbiAgICAgICAgICAgIH0pLnRhcmdldElkID0gZS50YXJnZXRJZCwgZS5yZXN1bWVUb2tlbi5YKCkgPiAwID8gbi5yZXN1bWVUb2tlbiA9IGhlKHQsIGUucmVzdW1lVG9rZW4pIDogZS5ldC5BKHoubWluKCkpID4gMCAmJiAoXG4gICAgICAgICAgICAvLyBUT0RPKHd1YW5keSk6IENvbnNpZGVyIHJlbW92aW5nIGFib3ZlIGNoZWNrIGJlY2F1c2UgaXQgaXMgbW9zdCBsaWtlbHkgdHJ1ZS5cbiAgICAgICAgICAgIC8vIFJpZ2h0IG5vdywgbWFueSB0ZXN0cyBkZXBlbmQgb24gdGhpcyBiZWhhdmlvdXIgdGhvdWdoIChsZWF2aW5nIG1pbigpIG91dFxuICAgICAgICAgICAgLy8gb2Ygc2VyaWFsaXphdGlvbikuXG4gICAgICAgICAgICBuLnJlYWRUaW1lID0gY2UodCwgZS5ldC5QKCkpKSwgbjtcbiAgICAgICAgfSh0aGlzLnNlcmlhbGl6ZXIsIHQpO1xuICAgICAgICB2YXIgbiA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBuID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwIC8qIExpc3RlbiAqLyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEgLyogRXhpc3RlbmNlRmlsdGVyTWlzbWF0Y2ggKi8gOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJleGlzdGVuY2UtZmlsdGVyLW1pc21hdGNoXCI7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBMaW1ib1Jlc29sdXRpb24gKi8gOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsaW1iby1kb2N1bWVudFwiO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0oMCwgZS50dCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBuID8gbnVsbCA6IHtcbiAgICAgICAgICAgICAgICBcImdvb2ctbGlzdGVuLXRhZ3NcIjogblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0aGlzLnNlcmlhbGl6ZXIsIHQpO1xuICAgICAgICBuICYmIChlLmxhYmVscyA9IG4pLCB0aGlzLmxjKGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIGludGVyZXN0IGluIHRoZSByZXN1bHRzIG9mIHRoZSB0YXJnZXQgYXNzb2NpYXRlZCB3aXRoIHRoZVxuICAgICAqIGdpdmVuIHRhcmdldElkLlxuICAgICAqL1xuICAgIG4ucHJvdG90eXBlLmdjID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHt9O1xuICAgICAgICBlLmRhdGFiYXNlID0gd2UodGhpcy5zZXJpYWxpemVyKSwgZS5yZW1vdmVUYXJnZXQgPSB0LCB0aGlzLmxjKGUpO1xuICAgIH0sIG47XG59KEVvKSwgTm8gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHUgPSBlLmNhbGwodGhpcywgdCwgXCJ3cml0ZV9zdHJlYW1fY29ubmVjdGlvbl9iYWNrb2ZmXCIgLyogV3JpdGVTdHJlYW1Db25uZWN0aW9uQmFja29mZiAqLyAsIFwid3JpdGVfc3RyZWFtX2lkbGVcIiAvKiBXcml0ZVN0cmVhbUlkbGUgKi8gLCBuLCByLCBvKSB8fCB0aGlzKS5zZXJpYWxpemVyID0gaSwgXG4gICAgICAgIHUuVmMgPSAhMSwgdTtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJ5Y1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFja3Mgd2hldGhlciBvciBub3QgYSBoYW5kc2hha2UgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGV4Y2hhbmdlZCBhbmRcbiAgICAgICAgICogdGhlIHN0cmVhbSBpcyByZWFkeSB0byBhY2NlcHQgbXV0YXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlZjO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvLyBPdmVycmlkZSBvZiBQZXJzaXN0ZW50U3RyZWFtLnN0YXJ0XG4gICAgbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5WYyA9ICExLCB0aGlzLmxhc3RTdHJlYW1Ub2tlbiA9IHZvaWQgMCwgZS5wcm90b3R5cGUuc3RhcnQuY2FsbCh0aGlzKTtcbiAgICB9LCBuLnByb3RvdHlwZS5mYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLlZjICYmIHRoaXMudmMoW10pO1xuICAgIH0sIG4ucHJvdG90eXBlLkljID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYy5BYyhcIldyaXRlXCIsIHQpO1xuICAgIH0sIG4ucHJvdG90eXBlLm9uTWVzc2FnZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBBbHdheXMgY2FwdHVyZSB0aGUgbGFzdCBzdHJlYW0gdG9rZW4uXG4gICAgICAgIGsoISF0LnN0cmVhbVRva2VuKSwgdGhpcy5sYXN0U3RyZWFtVG9rZW4gPSB0LnN0cmVhbVRva2VuLCB0aGlzLlZjKSB7XG4gICAgICAgICAgICAvLyBBIHN1Y2Nlc3NmdWwgZmlyc3Qgd3JpdGUgcmVzcG9uc2UgbWVhbnMgdGhlIHN0cmVhbSBpcyBoZWFsdGh5LFxuICAgICAgICAgICAgLy8gTm90ZSwgdGhhdCB3ZSBjb3VsZCBjb25zaWRlciBhIHN1Y2Nlc3NmdWwgaGFuZHNoYWtlIGhlYWx0aHksIGhvd2V2ZXIsXG4gICAgICAgICAgICAvLyB0aGUgd3JpdGUgaXRzZWxmIG1pZ2h0IGJlIGNhdXNpbmcgYW4gZXJyb3Igd2Ugd2FudCB0byBiYWNrIG9mZiBmcm9tLlxuICAgICAgICAgICAgdGhpcy5Qcy5yZXNldCgpO1xuICAgICAgICAgICAgdmFyIGUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgdC5sZW5ndGggPiAwID8gKGsodm9pZCAwICE9PSBlKSwgdC5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IERlbGV0ZXMgZG9uJ3QgaGF2ZSBhbiB1cGRhdGVUaW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LnVwZGF0ZVRpbWUgPyBsZSh0LnVwZGF0ZVRpbWUpIDogbGUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLmlzRXF1YWwoei5taW4oKSkgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIEZpcmVzdG9yZSBFbXVsYXRvciBjdXJyZW50bHkgcmV0dXJucyBhbiB1cGRhdGUgdGltZSBvZiAwIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlcyBvZiBub24tZXhpc3RpbmcgZG9jdW1lbnRzIChyYXRoZXIgdGhhbiBudWxsKS4gVGhpcyBicmVha3MgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZXN0IFwiZ2V0IGRlbGV0ZWQgZG9jIHdoaWxlIG9mZmxpbmUgd2l0aCBzb3VyY2U9Y2FjaGVcIiBhcyBOb0RvY3VtZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB2ZXJzaW9uIDAgYXJlIGZpbHRlcmVkIGJ5IEluZGV4ZWREYidzIFJlbW90ZURvY3VtZW50Q2FjaGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKCMyMTQ5KTogUmVtb3ZlIHRoaXMgd2hlbiBFbXVsYXRvciBpcyBmaXhlZFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGxlKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnRyYW5zZm9ybVJlc3VsdHMgJiYgdC50cmFuc2Zvcm1SZXN1bHRzLmxlbmd0aCA+IDAgJiYgKHIgPSB0LnRyYW5zZm9ybVJlc3VsdHMpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyAkZShuLCByKTtcbiAgICAgICAgICAgICAgICAgICAgfSh0LCBlKTtcbiAgICAgICAgICAgICAgICB9KSkpIDogW107XG4gICAgICAgICAgICB9KHQud3JpdGVSZXN1bHRzLCB0LmNvbW1pdFRpbWUpLCBuID0gbGUodC5jb21taXRUaW1lKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmJjKG4sIGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBmaXJzdCByZXNwb25zZSBpcyBhbHdheXMgdGhlIGhhbmRzaGFrZSByZXNwb25zZVxuICAgICAgICAgICAgICAgIHJldHVybiBrKCF0LndyaXRlUmVzdWx0cyB8fCAwID09PSB0LndyaXRlUmVzdWx0cy5sZW5ndGgpLCB0aGlzLlZjID0gITAsIFxuICAgICAgICB0aGlzLmxpc3RlbmVyLlNjKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gaW5pdGlhbCBzdHJlYW1Ub2tlbiB0byB0aGUgc2VydmVyLCBwZXJmb3JtaW5nIHRoZSBoYW5kc2hha2VcbiAgICAgKiByZXF1aXJlZCB0byBtYWtlIHRoZSBTdHJlYW1pbmdXcml0ZSBSUEMgd29yay4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHNob3VsZCB3YWl0IHVudGlsIG9uSGFuZHNoYWtlQ29tcGxldGUgd2FzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBuLnByb3RvdHlwZS5EYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBUT0RPKGRpbW9uZCk6IFN1cHBvcnQgc3RyZWFtIHJlc3VtcHRpb24uIFdlIGludGVudGlvbmFsbHkgZG8gbm90IHNldCB0aGVcbiAgICAgICAgLy8gc3RyZWFtIHRva2VuIG9uIHRoZSBoYW5kc2hha2UsIGlnbm9yaW5nIGFueSBzdHJlYW0gdG9rZW4gd2UgbWlnaHQgaGF2ZS5cbiAgICAgICAgdmFyIHQgPSB7fTtcbiAgICAgICAgdC5kYXRhYmFzZSA9IHdlKHRoaXMuc2VyaWFsaXplciksIHRoaXMubGModCk7XG4gICAgfSwgXG4gICAgLyoqIFNlbmRzIGEgZ3JvdXAgb2YgbXV0YXRpb25zIHRvIHRoZSBGaXJlc3RvcmUgYmFja2VuZCB0byBhcHBseS4gKi8gbi5wcm90b3R5cGUudmMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHtcbiAgICAgICAgICAgIHN0cmVhbVRva2VuOiB0aGlzLmxhc3RTdHJlYW1Ub2tlbixcbiAgICAgICAgICAgIHdyaXRlczogdC5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSWUoZS5zZXJpYWxpemVyLCB0KTtcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxjKG4pO1xuICAgIH0sIG47XG59KEVvKSwgeG8gPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGkgPSBlLmNhbGwodGhpcykgfHwgdGhpcykuY3JlZGVudGlhbHMgPSB0LCBpLmVjID0gbiwgaS5zZXJpYWxpemVyID0gciwgaS5DYyA9ICExLCBcbiAgICAgICAgaTtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLk5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLkNjKSB0aHJvdyBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiVGhlIGNsaWVudCBoYXMgYWxyZWFkeSBiZWVuIHRlcm1pbmF0ZWQuXCIpO1xuICAgIH0sIFxuICAgIC8qKiBHZXRzIGFuIGF1dGggdG9rZW4gYW5kIGludm9rZXMgdGhlIHByb3ZpZGVkIFJQQy4gKi8gbi5wcm90b3R5cGUueGMgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuTmMoKSwgdGhpcy5jcmVkZW50aWFscy5nZXRUb2tlbigpLnRoZW4oKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHJldHVybiByLmVjLnhjKHQsIGUsIG4sIGkpO1xuICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHRocm93IHQuY29kZSA9PT0gRi5VTkFVVEhFTlRJQ0FURUQgJiYgci5jcmVkZW50aWFscy5uaSgpLCB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqIEdldHMgYW4gYXV0aCB0b2tlbiBhbmQgaW52b2tlcyB0aGUgcHJvdmlkZWQgUlBDIHdpdGggc3RyZWFtZWQgcmVzdWx0cy4gKi8gbi5wcm90b3R5cGUuRmMgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuTmMoKSwgdGhpcy5jcmVkZW50aWFscy5nZXRUb2tlbigpLnRoZW4oKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHJldHVybiByLmVjLkZjKHQsIGUsIG4sIGkpO1xuICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHRocm93IHQuY29kZSA9PT0gRi5VTkFVVEhFTlRJQ0FURUQgJiYgci5jcmVkZW50aWFscy5uaSgpLCB0O1xuICAgICAgICB9KSk7XG4gICAgfSwgbi5wcm90b3R5cGUudGVybWluYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuQ2MgPSAhMTtcbiAgICB9LCBuO1xufSgoZnVuY3Rpb24oKSB7fSkpLCBBbyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMucnMgPSB0LCB0aGlzLk9jID0gZSwgXG4gICAgICAgIC8qKiBUaGUgY3VycmVudCBPbmxpbmVTdGF0ZS4gKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFwiVW5rbm93blwiIC8qIFVua25vd24gKi8gLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGNvdW50IG9mIGNvbnNlY3V0aXZlIGZhaWx1cmVzIHRvIG9wZW4gdGhlIHN0cmVhbS4gSWYgaXQgcmVhY2hlcyB0aGVcbiAgICAgICAgICAgICAqIG1heGltdW0gZGVmaW5lZCBieSBNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTLCB3ZSdsbCBzZXQgdGhlIE9ubGluZVN0YXRlIHRvXG4gICAgICAgICAgICAgKiBPZmZsaW5lLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuTWMgPSAwLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIHRpbWVyIHRoYXQgZWxhcHNlcyBhZnRlciBPTkxJTkVfU1RBVEVfVElNRU9VVF9NUywgYXQgd2hpY2ggcG9pbnQgd2VcbiAgICAgICAgICAgICAqIHRyYW5zaXRpb24gZnJvbSBPbmxpbmVTdGF0ZS5Vbmtub3duIHRvIE9ubGluZVN0YXRlLk9mZmxpbmUgd2l0aG91dCB3YWl0aW5nXG4gICAgICAgICAgICAgKiBmb3IgdGhlIHN0cmVhbSB0byBhY3R1YWxseSBmYWlsIChNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTIHRpbWVzKS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLmtjID0gbnVsbCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hldGhlciB0aGUgY2xpZW50IHNob3VsZCBsb2cgYSB3YXJuaW5nIG1lc3NhZ2UgaWYgaXQgZmFpbHMgdG8gY29ubmVjdCB0b1xuICAgICAgICAgICAgICogdGhlIGJhY2tlbmQgKGluaXRpYWxseSB0cnVlLCBjbGVhcmVkIGFmdGVyIGEgc3VjY2Vzc2Z1bCBzdHJlYW0sIG9yIGlmIHdlJ3ZlXG4gICAgICAgICAgICAgKiBsb2dnZWQgdGhlIG1lc3NhZ2UgYWxyZWFkeSkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kYyA9ICEwXG4gICAgICAgIC8qKlxuICAgICAqIENhbGxlZCBieSBSZW1vdGVTdG9yZSB3aGVuIGEgd2F0Y2ggc3RyZWFtIGlzIHN0YXJ0ZWQgKGluY2x1ZGluZyBvbiBlYWNoXG4gICAgICogYmFja29mZiBhdHRlbXB0KS5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IGF0dGVtcHQsIGl0IHNldHMgdGhlIE9ubGluZVN0YXRlIHRvIFVua25vd24gYW5kIHN0YXJ0c1xuICAgICAqIHRoZSBvbmxpbmVTdGF0ZVRpbWVyLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkxjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgMCA9PT0gdGhpcy5NYyAmJiAodGhpcy5CYyhcIlVua25vd25cIiAvKiBVbmtub3duICovKSwgdGhpcy5rYyA9IHRoaXMucnMuUG4oXCJvbmxpbmVfc3RhdGVfdGltZW91dFwiIC8qIE9ubGluZVN0YXRlVGltZW91dCAqLyAsIDFlNCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHQua2MgPSBudWxsLCB0LnFjKFwiQmFja2VuZCBkaWRuJ3QgcmVzcG9uZCB3aXRoaW4gMTAgc2Vjb25kcy5cIiksIHQuQmMoXCJPZmZsaW5lXCIgLyogT2ZmbGluZSAqLyksIFxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH0pKSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBvdXIgT25saW5lU3RhdGUgYXMgYXBwcm9wcmlhdGUgYWZ0ZXIgdGhlIHdhdGNoIHN0cmVhbSByZXBvcnRzIGFcbiAgICAgKiBmYWlsdXJlLiBUaGUgZmlyc3QgZmFpbHVyZSBtb3ZlcyB1cyB0byB0aGUgJ1Vua25vd24nIHN0YXRlLiBXZSB0aGVuIG1heVxuICAgICAqIGFsbG93IG11bHRpcGxlIGZhaWx1cmVzIChiYXNlZCBvbiBNQVhfV0FUQ0hfU1RSRUFNX0ZBSUxVUkVTKSBiZWZvcmUgd2VcbiAgICAgKiBhY3R1YWxseSB0cmFuc2l0aW9uIHRvIHRoZSAnT2ZmbGluZScgc3RhdGUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVWMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIFwiT25saW5lXCIgLyogT25saW5lICovID09PSB0aGlzLnN0YXRlID8gdGhpcy5CYyhcIlVua25vd25cIiAvKiBVbmtub3duICovKSA6ICh0aGlzLk1jKyssIFxuICAgICAgICB0aGlzLk1jID49IDEgJiYgKHRoaXMuUWMoKSwgdGhpcy5xYyhcIkNvbm5lY3Rpb24gZmFpbGVkIDEgdGltZXMuIE1vc3QgcmVjZW50IGVycm9yOiBcIiArIHQudG9TdHJpbmcoKSksIFxuICAgICAgICB0aGlzLkJjKFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8pKSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRXhwbGljaXRseSBzZXRzIHRoZSBPbmxpbmVTdGF0ZSB0byB0aGUgc3BlY2lmaWVkIHN0YXRlLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgcmVzZXRzIG91ciB0aW1lcnMgLyBmYWlsdXJlIGNvdW50ZXJzLCBldGMuIHVzZWQgYnkgb3VyXG4gICAgICogT2ZmbGluZSBoZXVyaXN0aWNzLCBzbyBtdXN0IG5vdCBiZSB1c2VkIGluIHBsYWNlIG9mXG4gICAgICogaGFuZGxlV2F0Y2hTdHJlYW1TdGFydCgpIGFuZCBoYW5kbGVXYXRjaFN0cmVhbUZhaWx1cmUoKS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuUWMoKSwgdGhpcy5NYyA9IDAsIFwiT25saW5lXCIgLyogT25saW5lICovID09PSB0ICYmIChcbiAgICAgICAgLy8gV2UndmUgY29ubmVjdGVkIHRvIHdhdGNoIGF0IGxlYXN0IG9uY2UuIERvbid0IHdhcm4gdGhlIGRldmVsb3BlclxuICAgICAgICAvLyBhYm91dCBiZWluZyBvZmZsaW5lIGdvaW5nIGZvcndhcmQuXG4gICAgICAgIHRoaXMuJGMgPSAhMSksIHRoaXMuQmModCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQmMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHQgIT09IHRoaXMuc3RhdGUgJiYgKHRoaXMuc3RhdGUgPSB0LCB0aGlzLk9jKHQpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5xYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBcIkNvdWxkIG5vdCByZWFjaCBDbG91ZCBGaXJlc3RvcmUgYmFja2VuZC4gXCIgKyB0ICsgXCJcXG5UaGlzIHR5cGljYWxseSBpbmRpY2F0ZXMgdGhhdCB5b3VyIGRldmljZSBkb2VzIG5vdCBoYXZlIGEgaGVhbHRoeSBJbnRlcm5ldCBjb25uZWN0aW9uIGF0IHRoZSBtb21lbnQuIFRoZSBjbGllbnQgd2lsbCBvcGVyYXRlIGluIG9mZmxpbmUgbW9kZSB1bnRpbCBpdCBpcyBhYmxlIHRvIHN1Y2Nlc3NmdWxseSBjb25uZWN0IHRvIHRoZSBiYWNrZW5kLlwiO1xuICAgICAgICB0aGlzLiRjID8gKE4oZSksIHRoaXMuJGMgPSAhMSkgOiBUKFwiT25saW5lU3RhdGVUcmFja2VyXCIsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLlFjID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG51bGwgIT09IHRoaXMua2MgJiYgKHRoaXMua2MuY2FuY2VsKCksIHRoaXMua2MgPSBudWxsKTtcbiAgICB9LCB0O1xufSgpLCBTbyA9IGZ1bmN0aW9uKFxuLyoqXG4gICAgICogVGhlIGxvY2FsIHN0b3JlLCB1c2VkIHRvIGZpbGwgdGhlIHdyaXRlIHBpcGVsaW5lIHdpdGggb3V0Ym91bmQgbXV0YXRpb25zLlxuICAgICAqL1xudCwgXG4vKiogVGhlIGNsaWVudC1zaWRlIHByb3h5IGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBiYWNrZW5kLiAqL1xuciwgaSwgbywgdSkge1xuICAgIHZhciBzID0gdGhpcztcbiAgICB0aGlzLktjID0gdCwgdGhpcy5XYyA9IHIsIHRoaXMucnMgPSBpLCB0aGlzLmpjID0ge30sIFxuICAgIC8qKlxuICAgICAgICAgICAgICogQSBsaXN0IG9mIHVwIHRvIE1BWF9QRU5ESU5HX1dSSVRFUyB3cml0ZXMgdGhhdCB3ZSBoYXZlIGZldGNoZWQgZnJvbSB0aGVcbiAgICAgICAgICAgICAqIExvY2FsU3RvcmUgdmlhIGZpbGxXcml0ZVBpcGVsaW5lKCkgYW5kIGhhdmUgb3Igd2lsbCBzZW5kIHRvIHRoZSB3cml0ZVxuICAgICAgICAgICAgICogc3RyZWFtLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFdoZW5ldmVyIHdyaXRlUGlwZWxpbmUubGVuZ3RoID4gMCB0aGUgUmVtb3RlU3RvcmUgd2lsbCBhdHRlbXB0IHRvIHN0YXJ0IG9yXG4gICAgICAgICAgICAgKiByZXN0YXJ0IHRoZSB3cml0ZSBzdHJlYW0uIFdoZW4gdGhlIHN0cmVhbSBpcyBlc3RhYmxpc2hlZCB0aGUgd3JpdGVzIGluIHRoZVxuICAgICAgICAgICAgICogcGlwZWxpbmUgd2lsbCBiZSBzZW50IGluIG9yZGVyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFdyaXRlcyByZW1haW4gaW4gd3JpdGVQaXBlbGluZSB1bnRpbCB0aGV5IGFyZSBhY2tub3dsZWRnZWQgYnkgdGhlIGJhY2tlbmRcbiAgICAgICAgICAgICAqIGFuZCB0aHVzIHdpbGwgYXV0b21hdGljYWxseSBiZSByZS1zZW50IGlmIHRoZSBzdHJlYW0gaXMgaW50ZXJydXB0ZWQgL1xuICAgICAgICAgICAgICogcmVzdGFydGVkIGJlZm9yZSB0aGV5J3JlIGFja25vd2xlZGdlZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBXcml0ZSByZXNwb25zZXMgZnJvbSB0aGUgYmFja2VuZCBhcmUgbGlua2VkIHRvIHRoZWlyIG9yaWdpbmF0aW5nIHJlcXVlc3RcbiAgICAgICAgICAgICAqIHB1cmVseSBiYXNlZCBvbiBvcmRlciwgYW5kIHNvIHdlIGNhbiBqdXN0IHNoaWZ0KCkgd3JpdGVzIGZyb20gdGhlIGZyb250IG9mXG4gICAgICAgICAgICAgKiB0aGUgd3JpdGVQaXBlbGluZSBhcyB3ZSByZWNlaXZlIHJlc3BvbnNlcy5cbiAgICAgICAgICAgICAqL1xuICAgIHRoaXMuR2MgPSBbXSwgXG4gICAgLyoqXG4gICAgICAgICAgICAgKiBBIG1hcHBpbmcgb2Ygd2F0Y2hlZCB0YXJnZXRzIHRoYXQgdGhlIGNsaWVudCBjYXJlcyBhYm91dCB0cmFja2luZyBhbmQgdGhlXG4gICAgICAgICAgICAgKiB1c2VyIGhhcyBleHBsaWNpdGx5IGNhbGxlZCBhICdsaXN0ZW4nIGZvciB0aGlzIHRhcmdldC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUaGVzZSB0YXJnZXRzIG1heSBvciBtYXkgbm90IGhhdmUgYmVlbiBzZW50IHRvIG9yIGFja25vd2xlZGdlZCBieSB0aGVcbiAgICAgICAgICAgICAqIHNlcnZlci4gT24gcmUtZXN0YWJsaXNoaW5nIHRoZSBsaXN0ZW4gc3RyZWFtLCB0aGVzZSB0YXJnZXRzIHNob3VsZCBiZSBzZW50XG4gICAgICAgICAgICAgKiB0byB0aGUgc2VydmVyLiBUaGUgdGFyZ2V0cyByZW1vdmVkIHdpdGggdW5saXN0ZW5zIGFyZSByZW1vdmVkIGVhZ2VybHlcbiAgICAgICAgICAgICAqIHdpdGhvdXQgd2FpdGluZyBmb3IgY29uZmlybWF0aW9uIGZyb20gdGhlIGxpc3RlbiBzdHJlYW0uXG4gICAgICAgICAgICAgKi9cbiAgICB0aGlzLnpjID0gbmV3IE1hcCwgXG4gICAgLyoqXG4gICAgICAgICAgICAgKiBBIHNldCBvZiByZWFzb25zIGZvciB3aHkgdGhlIFJlbW90ZVN0b3JlIG1heSBiZSBvZmZsaW5lLiBJZiBlbXB0eSwgdGhlXG4gICAgICAgICAgICAgKiBSZW1vdGVTdG9yZSBtYXkgc3RhcnQgaXRzIG5ldHdvcmsgY29ubmVjdGlvbnMuXG4gICAgICAgICAgICAgKi9cbiAgICB0aGlzLkhjID0gbmV3IFNldCwgXG4gICAgLyoqXG4gICAgICAgICAgICAgKiBFdmVudCBoYW5kbGVycyB0aGF0IGdldCBjYWxsZWQgd2hlbiB0aGUgbmV0d29yayBpcyBkaXNhYmxlZCBvciBlbmFibGVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFBPUlRJTkcgTk9URTogVGhlc2UgZnVuY3Rpb25zIGFyZSB1c2VkIG9uIHRoZSBXZWIgY2xpZW50IHRvIGNyZWF0ZSB0aGVcbiAgICAgICAgICAgICAqIHVuZGVybHlpbmcgc3RyZWFtcyAodG8gc3VwcG9ydCB0cmVlLXNoYWtlYWJsZSBzdHJlYW1zKS4gT24gQW5kcm9pZCBhbmQgaU9TLFxuICAgICAgICAgICAgICogdGhlIHN0cmVhbXMgYXJlIGNyZWF0ZWQgZHVyaW5nIGNvbnN0cnVjdGlvbiBvZiBSZW1vdGVTdG9yZS5cbiAgICAgICAgICAgICAqL1xuICAgIHRoaXMuSmMgPSBbXSwgdGhpcy5ZYyA9IHUsIHRoaXMuWWMuWGMoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaS5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZShzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNbyh0aGlzKSA/IChUKFwiUmVtb3RlU3RvcmVcIiwgXCJSZXN0YXJ0aW5nIHN0cmVhbXMgZm9yIG5ldHdvcmsgcmVhY2hhYmlsaXR5IGNoYW5nZS5cIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgWyA0IC8qeWllbGQqLyAsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChlID0gRCh0KSkuSGMuYWRkKDQgLyogQ29ubmVjdGl2aXR5Q2hhbmdlICovKSwgWyA0IC8qeWllbGQqLyAsIERvKGUpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgZS5aYy5zZXQoXCJVbmtub3duXCIgLyogVW5rbm93biAqLyksIGUuSGMuZGVsZXRlKDQgLyogQ29ubmVjdGl2aXR5Q2hhbmdlICovKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyA0IC8qeWllbGQqLyAsIGtvKGUpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0odGhpcykgXSkgOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZW50KCksIHQubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9KSksIHRoaXMuWmMgPSBuZXcgQW8oaSwgbyk7XG59O1xuXG4vKipcbiAqIEEgUGVyc2lzdGVudFN0cmVhbSB0aGF0IGltcGxlbWVudHMgdGhlIExpc3RlbiBSUEMuXG4gKlxuICogT25jZSB0aGUgTGlzdGVuIHN0cmVhbSBoYXMgY2FsbGVkIHRoZSBvbk9wZW4oKSBsaXN0ZW5lciwgYW55IG51bWJlciBvZlxuICogbGlzdGVuKCkgYW5kIHVubGlzdGVuKCkgY2FsbHMgY2FuIGJlIG1hZGUgdG8gY29udHJvbCB3aGF0IGNoYW5nZXMgd2lsbCBiZVxuICogc2VudCBmcm9tIHRoZSBzZXJ2ZXIgZm9yIExpc3RlblJlc3BvbnNlcy5cbiAqLyBmdW5jdGlvbiBrbyh0KSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUsIHI7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmICghTW8odCkpIHJldHVybiBbIDMgLypicmVhayovICwgNCBdO1xuICAgICAgICAgICAgICAgIGUgPSAwLCByID0gdC5KYywgbi5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBlIDwgci5sZW5ndGggPyBbIDQgLyp5aWVsZCovICwgKDAsIHJbZV0pKC8qIGVuYWJsZWQ9ICovICEwKSBdIDogWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbi5zZW50KCksIG4ubGFiZWwgPSAzO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZSsrLCBbIDMgLypicmVhayovICwgMSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBUZW1wb3JhcmlseSBkaXNhYmxlcyB0aGUgbmV0d29yay4gVGhlIG5ldHdvcmsgY2FuIGJlIHJlLWVuYWJsZWQgdXNpbmdcbiAqIGVuYWJsZU5ldHdvcmsoKS5cbiAqLyBmdW5jdGlvbiBEbyh0KSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUsIHI7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGUgPSAwLCByID0gdC5KYywgbi5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBlIDwgci5sZW5ndGggPyBbIDQgLyp5aWVsZCovICwgKDAsIHJbZV0pKC8qIGVuYWJsZWQ9ICovICExKSBdIDogWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbi5zZW50KCksIG4ubGFiZWwgPSAzO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZSsrLCBbIDMgLypicmVhayovICwgMSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBTdGFydHMgbmV3IGxpc3RlbiBmb3IgdGhlIGdpdmVuIHRhcmdldC4gVXNlcyByZXN1bWUgdG9rZW4gaWYgcHJvdmlkZWQuIEl0XG4gKiBpcyBhIG5vLW9wIGlmIHRoZSB0YXJnZXQgb2YgZ2l2ZW4gYFRhcmdldERhdGFgIGlzIGFscmVhZHkgYmVpbmcgbGlzdGVuZWQgdG8uXG4gKi8gZnVuY3Rpb24gT28odCwgZSkge1xuICAgIHZhciBuID0gRCh0KTtcbiAgICBuLnpjLmhhcyhlLnRhcmdldElkKSB8fCAoXG4gICAgLy8gTWFyayB0aGlzIGFzIHNvbWV0aGluZyB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBsaXN0ZW5pbmcgZm9yLlxuICAgIG4uemMuc2V0KGUudGFyZ2V0SWQsIGUpLCBSbyhuKSA/IFxuICAgIC8vIFRoZSBsaXN0ZW4gd2lsbCBiZSBzZW50IGluIG9uV2F0Y2hTdHJlYW1PcGVuXG4gICAgTG8obikgOiAkbyhuKS5vYygpICYmIFZvKG4sIGUpKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBsaXN0ZW4gZnJvbSBzZXJ2ZXIuIEl0IGlzIGEgbm8tb3AgaWYgdGhlIGdpdmVuIHRhcmdldCBpZCBpc1xuICogbm90IGJlaW5nIGxpc3RlbmVkIHRvLlxuICovIGZ1bmN0aW9uIFBvKHQsIGUpIHtcbiAgICB2YXIgbiA9IEQodCksIHIgPSAkbyhuKTtcbiAgICBuLnpjLmRlbGV0ZShlKSwgci5vYygpICYmIENvKG4sIGUpLCAwID09PSBuLnpjLnNpemUgJiYgKHIub2MoKSA/IHIudWMoKSA6IE1vKG4pICYmIFxuICAgIC8vIFJldmVydCB0byBPbmxpbmVTdGF0ZS5Vbmtub3duIGlmIHRoZSB3YXRjaCBzdHJlYW0gaXMgbm90IG9wZW4gYW5kIHdlXG4gICAgLy8gaGF2ZSBubyBsaXN0ZW5lcnMsIHNpbmNlIHdpdGhvdXQgYW55IGxpc3RlbnMgdG8gc2VuZCB3ZSBjYW5ub3RcbiAgICAvLyBjb25maXJtIGlmIHRoZSBzdHJlYW0gaXMgaGVhbHRoeSBhbmQgdXBncmFkZSB0byBPbmxpbmVTdGF0ZS5PbmxpbmUuXG4gICAgbi5aYy5zZXQoXCJVbmtub3duXCIgLyogVW5rbm93biAqLykpO1xufVxuXG4vKipcbiAqIFdlIG5lZWQgdG8gaW5jcmVtZW50IHRoZSB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIHdlJ3JlIGR1ZVxuICogZnJvbSB3YXRjaCBzbyB3ZSB3YWl0IGZvciB0aGUgYWNrIHRvIHByb2Nlc3MgYW55IG1lc3NhZ2VzIGZyb20gdGhpcyB0YXJnZXQuXG4gKi8gZnVuY3Rpb24gVm8odCwgZSkge1xuICAgIHQudHUuSWUoZS50YXJnZXRJZCksICRvKHQpLlBjKGUpXG4gICAgLyoqXG4gKiBXZSBuZWVkIHRvIGluY3JlbWVudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHBlbmRpbmcgcmVzcG9uc2VzIHdlJ3JlIGR1ZVxuICogZnJvbSB3YXRjaCBzbyB3ZSB3YWl0IGZvciB0aGUgcmVtb3ZhbCBvbiB0aGUgc2VydmVyIGJlZm9yZSB3ZSBwcm9jZXNzIGFueVxuICogbWVzc2FnZXMgZnJvbSB0aGlzIHRhcmdldC5cbiAqLztcbn1cblxuZnVuY3Rpb24gQ28odCwgZSkge1xuICAgIHQudHUuSWUoZSksICRvKHQpLmdjKGUpO1xufVxuXG5mdW5jdGlvbiBMbyh0KSB7XG4gICAgdC50dSA9IG5ldyBDdCh7XG4gICAgICAgIEJlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5qYy5CZShlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnpjLmdldChlKSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgfSksICRvKHQpLnN0YXJ0KCksIHQuWmMuTGMoKVxuICAgIC8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSB3YXRjaCBzdHJlYW0gc2hvdWxkIGJlIHN0YXJ0ZWQgYmVjYXVzZSBpdCdzIG5lY2Vzc2FyeVxuICogYW5kIGhhcyBub3QgeWV0IGJlZW4gc3RhcnRlZC5cbiAqLztcbn1cblxuZnVuY3Rpb24gUm8odCkge1xuICAgIHJldHVybiBNbyh0KSAmJiAhJG8odCkucmMoKSAmJiB0LnpjLnNpemUgPiAwO1xufVxuXG5mdW5jdGlvbiBNbyh0KSB7XG4gICAgcmV0dXJuIDAgPT09IEQodCkuSGMuc2l6ZTtcbn1cblxuZnVuY3Rpb24gVW8odCkge1xuICAgIHQudHUgPSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIHFvKHQpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuemMuZm9yRWFjaCgoZnVuY3Rpb24oZSwgbikge1xuICAgICAgICAgICAgICAgIFZvKHQsIGUpO1xuICAgICAgICAgICAgfSkpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBGbyh0LCByKSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBVbyh0KSwgXG4gICAgICAgICAgICAvLyBJZiB3ZSBzdGlsbCBuZWVkIHRoZSB3YXRjaCBzdHJlYW0sIHJldHJ5IHRoZSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgUm8odCkgPyAodC5aYy5VYyhyKSwgTG8odCkpIDogXG4gICAgICAgICAgICAvLyBObyBuZWVkIHRvIHJlc3RhcnQgd2F0Y2ggc3RyZWFtIGJlY2F1c2UgdGhlcmUgYXJlIG5vIGFjdGl2ZSB0YXJnZXRzLlxuICAgICAgICAgICAgLy8gVGhlIG9ubGluZSBzdGF0ZSBpcyBzZXQgdG8gdW5rbm93biBiZWNhdXNlIHRoZXJlIGlzIG5vIGFjdGl2ZSBhdHRlbXB0XG4gICAgICAgICAgICAvLyBhdCBlc3RhYmxpc2hpbmcgYSBjb25uZWN0aW9uXG4gICAgICAgICAgICB0LlpjLnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gam8odCwgciwgaSkge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvLCB1LCBzO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgc3dpdGNoIChhLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpZiAodC5aYy5zZXQoXCJPbmxpbmVcIiAvKiBPbmxpbmUgKi8pLCAhKHIgaW5zdGFuY2VvZiBQdCAmJiAyIC8qIFJlbW92ZWQgKi8gPT09IHIuc3RhdGUgJiYgci5jYXVzZSkpIFxuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIGNsaWVudCBhcyBvbmxpbmUgc2luY2Ugd2UgZ290IGEgbWVzc2FnZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDYgXTtcbiAgICAgICAgICAgICAgICBhLmxhYmVsID0gMTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEudHJ5cy5wdXNoKFsgMSwgMywgLCA1IF0pLCBbIDQgLyp5aWVsZCovICwgXG4gICAgICAgICAgICAgICAgLyoqIEhhbmRsZXMgYW4gZXJyb3Igb24gYSB0YXJnZXQgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSwgaSwgbywgdTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSByLmNhdXNlLCBpID0gMCwgbyA9IHIudGFyZ2V0SWRzLCBuLmxhYmVsID0gMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA8IG8ubGVuZ3RoID8gKHUgPSBvW2ldLCB0LnpjLmhhcyh1KSA/IFsgNCAvKnlpZWxkKi8gLCB0LmpjLmV1KHUsIGUpIF0gOiBbIDMgLypicmVhayovICwgMyBdKSA6IFsgMyAvKmJyZWFrKi8gLCA1IF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZW50KCksIHQuemMuZGVsZXRlKHUpLCB0LnR1LnJlbW92ZVRhcmdldCh1KSwgbi5sYWJlbCA9IDM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5sYWJlbCA9IDQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkrKywgWyAzIC8qYnJlYWsqLyAsIDEgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KHQsIHIpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBhLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDUgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG8gPSBhLnNlbnQoKSwgVChcIlJlbW90ZVN0b3JlXCIsIFwiRmFpbGVkIHRvIHJlbW92ZSB0YXJnZXRzICVzOiAlcyBcIiwgci50YXJnZXRJZHMuam9pbihcIixcIiksIG8pLCBcbiAgICAgICAgICAgICAgICBbIDQgLyp5aWVsZCovICwgQm8odCwgbykgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuc2VudCgpLCBbIDMgLypicmVhayovICwgNSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDEzIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGlmIChyIGluc3RhbmNlb2YgRHQgPyB0LnR1LnBlKHIpIDogciBpbnN0YW5jZW9mIE90ID8gdC50dS5GZShyKSA6IHQudHUuU2UociksIGkuaXNFcXVhbCh6Lm1pbigpKSkgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCAxMyBdO1xuICAgICAgICAgICAgICAgIGEubGFiZWwgPSA3O1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYS50cnlzLnB1c2goWyA3LCAxMSwgLCAxMyBdKSwgWyA0IC8qeWllbGQqLyAsIGxvKHQuS2MpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHJldHVybiB1ID0gYS5zZW50KCksIGkuQSh1KSA+PSAwID8gWyA0IC8qeWllbGQqLyAsIFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRha2VzIGEgYmF0Y2ggb2YgY2hhbmdlcyBmcm9tIHRoZSBEYXRhc3RvcmUsIHJlcGFja2FnZXMgdGhlbSBhcyBhXG4gICAgICAgICAgICAgICAgICogUmVtb3RlRXZlbnQsIGFuZCBwYXNzZXMgdGhhdCBvbiB0byB0aGUgbGlzdGVuZXIsIHdoaWNoIGlzIHR5cGljYWxseSB0aGVcbiAgICAgICAgICAgICAgICAgKiBTeW5jRW5naW5lLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LnR1LmtlKGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgaW4tbWVtb3J5IHJlc3VtZSB0b2tlbnMuIExvY2FsU3RvcmUgd2lsbCB1cGRhdGUgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHBlcnNpc3RlbnQgdmlldyBvZiB0aGVzZSB3aGVuIGFwcGx5aW5nIHRoZSBjb21wbGV0ZWQgUmVtb3RlRXZlbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uR3QuZm9yRWFjaCgoZnVuY3Rpb24obiwgcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4ucmVzdW1lVG9rZW4uWCgpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC56Yy5nZXQocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSB3YXRjaGVkIHRhcmdldCBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZCBhbHJlYWR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICYmIHQuemMuc2V0KHIsIGkuc3Qobi5yZXN1bWVUb2tlbiwgZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSksIFxuICAgICAgICAgICAgICAgICAgICAvLyBSZS1lc3RhYmxpc2ggbGlzdGVucyBmb3IgdGhlIHRhcmdldHMgdGhhdCBoYXZlIGJlZW4gaW52YWxpZGF0ZWQgYnlcbiAgICAgICAgICAgICAgICAgICAgLy8gZXhpc3RlbmNlIGZpbHRlciBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgICAgICAgICBuLnp0LmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC56Yy5nZXQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSByZXN1bWUgdG9rZW4gZm9yIHRoZSB0YXJnZXQsIHNpbmNlIHdlJ3JlIGluIGEga25vd24gbWlzbWF0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGF0ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnpjLnNldChlLCBuLnN0KHJ0LlosIG4uZXQpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2F1c2UgYSBoYXJkIHJlc2V0IGJ5IHVud2F0Y2hpbmcgYW5kIHJld2F0Y2hpbmcgaW1tZWRpYXRlbHksIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGliZXJhdGVseSBkb24ndCBzZW5kIGEgcmVzdW1lIHRva2VuIHNvIHRoYXQgd2UgZ2V0IGEgZnVsbCB1cGRhdGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ28odCwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgdGFyZ2V0IHdlIHNlbmQgYXMgYmVpbmcgb24gYmVoYWxmIG9mIGFuIGV4aXN0ZW5jZSBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtaXNtYXRjaCwgYnV0IGRvbid0IGFjdHVhbGx5IHJldGFpbiB0aGF0IGluIGxpc3RlblRhcmdldHMuIFRoaXMgZW5zdXJlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoYXQgd2UgZmxhZyB0aGUgZmlyc3QgcmUtbGlzdGVuIHRoaXMgd2F5IHdpdGhvdXQgaW1wYWN0aW5nIGZ1dHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpc3RlbnMgb2YgdGhpcyB0YXJnZXQgKHRoYXQgbWlnaHQgaGFwcGVuIGUuZy4gb24gcmVjb25uZWN0KS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG5ldyB1dChuLnRhcmdldCwgZSwgMSAvKiBFeGlzdGVuY2VGaWx0ZXJNaXNtYXRjaCAqLyAsIG4uc2VxdWVuY2VOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZvKHQsIHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSksIHQuamMubnUobik7XG4gICAgICAgICAgICAgICAgfSh0LCBpKSBdIDogWyAzIC8qYnJlYWsqLyAsIDEwIF07XG5cbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHJlY2VpdmVkIGEgdGFyZ2V0IGNoYW5nZSB3aXRoIGEgZ2xvYmFsIHNuYXBzaG90IGlmIHRoZSBzbmFwc2hvdFxuICAgICAgICAgICAgICAgIC8vIHZlcnNpb24gaXMgbm90IGVxdWFsIHRvIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHJlY2VpdmVkIGEgdGFyZ2V0IGNoYW5nZSB3aXRoIGEgZ2xvYmFsIHNuYXBzaG90IGlmIHRoZSBzbmFwc2hvdFxuICAgICAgICAgICAgICAgIC8vIHZlcnNpb24gaXMgbm90IGVxdWFsIHRvIFNuYXBzaG90VmVyc2lvbi5taW4oKS5cbiAgICAgICAgICAgICAgICBhLnNlbnQoKSwgYS5sYWJlbCA9IDEwO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCAxMyBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFQoXCJSZW1vdGVTdG9yZVwiLCBcIkZhaWxlZCB0byByYWlzZSBzbmFwc2hvdDpcIiwgcyA9IGEuc2VudCgpKSwgWyA0IC8qeWllbGQqLyAsIEJvKHQsIHMpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCAxMyBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmVjb3ZlcnkgbG9naWMgZm9yIEluZGV4ZWREQiBlcnJvcnMgdGhhdCB0YWtlcyB0aGUgbmV0d29yayBvZmZsaW5lIHVudGlsXG4gKiBgb3BgIHN1Y2NlZWRzLiBSZXRyaWVzIGFyZSBzY2hlZHVsZWQgd2l0aCBiYWNrb2ZmIHVzaW5nXG4gKiBgZW5xdWV1ZVJldHJ5YWJsZSgpYC4gSWYgYG9wKClgIGlzIG5vdCBwcm92aWRlZCwgSW5kZXhlZERCIGFjY2VzcyBpc1xuICogdmFsaWRhdGVkIHZpYSBhIGdlbmVyaWMgb3BlcmF0aW9uLlxuICpcbiAqIFRoZSByZXR1cm5lZCBQcm9taXNlIGlzIHJlc29sdmVkIG9uY2UgdGhlIG5ldHdvcmsgaXMgZGlzYWJsZWQgYW5kIGJlZm9yZVxuICogYW55IHJldHJ5IGF0dGVtcHQuXG4gKi8gZnVuY3Rpb24gQm8odCwgciwgaSkge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodS5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCFjcihyKSkgdGhyb3cgcjtcbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIG5ldHdvcmsgYW5kIHJhaXNlIG9mZmxpbmUgc25hcHNob3RzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuSGMuYWRkKDEgLyogSW5kZXhlZERiRmFpbGVkICovKSwgWyA0IC8qeWllbGQqLyAsIERvKHQpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIC8vIERpc2FibGUgbmV0d29yayBhbmQgcmFpc2Ugb2ZmbGluZSBzbmFwc2hvdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gdS5zZW50KCksIHQuWmMuc2V0KFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8pLCBpIHx8IChcbiAgICAgICAgICAgICAgICAvLyBVc2UgYSBzaW1wbGUgcmVhZCBvcGVyYXRpb24gdG8gZGV0ZXJtaW5lIGlmIEluZGV4ZWREQiByZWNvdmVyZWQuXG4gICAgICAgICAgICAgICAgLy8gSWRlYWxseSwgd2Ugd291bGQgZXhwb3NlIGEgaGVhbHRoIGNoZWNrIGRpcmVjdGx5IG9uIFNpbXBsZURiLCBidXRcbiAgICAgICAgICAgICAgICAvLyBSZW1vdGVTdG9yZSBvbmx5IGhhcyBhY2Nlc3MgdG8gcGVyc2lzdGVuY2UgdGhyb3VnaCBMb2NhbFN0b3JlLlxuICAgICAgICAgICAgICAgIGkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvKHQuS2MpO1xuICAgICAgICAgICAgICAgIH0pLCBcbiAgICAgICAgICAgICAgICAvLyBQcm9iZSBJbmRleGVkREIgcGVyaW9kaWNhbGx5IGFuZCByZS1lbmFibGUgbmV0d29ya1xuICAgICAgICAgICAgICAgIHQucnMuU3MoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZShvLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFQoXCJSZW1vdGVTdG9yZVwiLCBcIlJldHJ5aW5nIEluZGV4ZWREQiBhY2Nlc3NcIiksIFsgNCAvKnlpZWxkKi8gLCBpKCkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIHQuSGMuZGVsZXRlKDEgLyogSW5kZXhlZERiRmFpbGVkICovKSwgWyA0IC8qeWllbGQqLyAsIGtvKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBFeGVjdXRlcyBgb3BgLiBJZiBgb3BgIGZhaWxzLCB0YWtlcyB0aGUgbmV0d29yayBvZmZsaW5lIHVudGlsIGBvcGBcbiAqIHN1Y2NlZWRzLiBSZXR1cm5zIGFmdGVyIHRoZSBmaXJzdCBhdHRlbXB0LlxuICovIGZ1bmN0aW9uIHpvKHQsIGUpIHtcbiAgICByZXR1cm4gZSgpLmNhdGNoKChmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiBCbyh0LCBuLCBlKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIEdvKHQpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgciwgaSwgbywgdTtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZSA9IEQodCksIHIgPSBabyhlKSwgaSA9IGUuR2MubGVuZ3RoID4gMCA/IGUuR2NbZS5HYy5sZW5ndGggLSAxXS5iYXRjaElkIDogLTEsIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIVxuICAgICAgICAgICAgICAgIC8qKlxuICogUmV0dXJucyB0cnVlIGlmIHdlIGNhbiBhZGQgdG8gdGhlIHdyaXRlIHBpcGVsaW5lIChpLmUuIHRoZSBuZXR3b3JrIGlzXG4gKiBlbmFibGVkIGFuZCB0aGUgd3JpdGUgcGlwZWxpbmUgaXMgbm90IGZ1bGwpLlxuICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW8odCkgJiYgdC5HYy5sZW5ndGggPCAxMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyoqXG4gKiBRdWV1ZXMgYWRkaXRpb25hbCB3cml0ZXMgdG8gYmUgc2VudCB0byB0aGUgd3JpdGUgc3RyZWFtLCBzZW5kaW5nIHRoZW1cbiAqIGltbWVkaWF0ZWx5IGlmIHRoZSB3cml0ZSBzdHJlYW0gaXMgZXN0YWJsaXNoZWQuXG4gKi8gKGUpKSByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDcgXTtcbiAgICAgICAgICAgICAgICBuLmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMiwgNCwgLCA2IF0pLCBbIDQgLyp5aWVsZCovICwgdm8oZS5LYywgaSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IChvID0gbi5zZW50KCkpID8gKDAgPT09IGUuR2MubGVuZ3RoICYmIHIudWMoKSwgWyAzIC8qYnJlYWsqLyAsIDcgXSkgOiAoaSA9IG8uYmF0Y2hJZCwgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICB0LkdjLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gWm8odCk7XG4gICAgICAgICAgICAgICAgICAgIG4ub2MoKSAmJiBuLnljICYmIG4udmMoZS5tdXRhdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0oZSwgbyksIFsgMyAvKmJyZWFrKi8gLCA2IF0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdSA9IG4uc2VudCgpLCBbIDQgLyp5aWVsZCovICwgQm8oZSwgdSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDEgXTtcblxuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEtvKGUpICYmIFFvKGUpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBLbyh0KSB7XG4gICAgcmV0dXJuIE1vKHQpICYmICFabyh0KS5yYygpICYmIHQuR2MubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gUW8odCkge1xuICAgIFpvKHQpLnN0YXJ0KCk7XG59XG5cbmZ1bmN0aW9uIFdvKHQpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIFpvKHQpLkRjKCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIFlvKHQpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgciwgaSwgbztcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIC8vIFNlbmQgdGhlIHdyaXRlIHBpcGVsaW5lIG5vdyB0aGF0IHRoZSBzdHJlYW0gaXMgZXN0YWJsaXNoZWQuXG4gICAgICAgICAgICBmb3IgKGUgPSBabyh0KSwgciA9IDAsIGkgPSB0LkdjOyByIDwgaS5sZW5ndGg7IHIrKykgbyA9IGlbcl0sIGUudmMoby5tdXRhdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIEhvKHQsIHIsIGkpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgbztcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPSB0LkdjLnNoaWZ0KCksIG8gPSBMci5mcm9tKGUsIHIsIGkpLCBbIDQgLyp5aWVsZCovICwgem8odCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5qYy5zdShvKTtcbiAgICAgICAgICAgICAgICB9KSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdpdGggdGhlIGNvbXBsZXRpb24gb2YgdGhpcyBtdXRhdGlvbiBhbm90aGVyXG4gICAgICAgICAgICAgICAgLy8gc2xvdCBoYXMgZnJlZWQgdXAuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDQgLyp5aWVsZCovICwgR28odCkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdpdGggdGhlIGNvbXBsZXRpb24gb2YgdGhpcyBtdXRhdGlvbiBhbm90aGVyXG4gICAgICAgICAgICAgICAgLy8gc2xvdCBoYXMgZnJlZWQgdXAuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBKbyh0LCByKSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoaS5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgWm8odCkueWMgPyBbIDQgLyp5aWVsZCovICwgZnVuY3Rpb24odCwgcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXQoaSA9IHIuY29kZSkgJiYgaSAhPT0gRi5BQk9SVEVEID8gKGUgPSB0LkdjLnNoaWZ0KCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgaXQncyBhbHNvIHVubGlrZWx5IHRoYXQgdGhlIHNlcnZlciBpdHNlbGYgaXMgbWVsdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb3duIC0tIHRoaXMgd2FzIGp1c3QgYSBiYWQgcmVxdWVzdCBzbyBpbmhpYml0IGJhY2tvZmYgb24gdGhlIG5leHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdGFydC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWm8odCkuY2MoKSwgWyA0IC8qeWllbGQqLyAsIHpvKHQsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmpjLml1KGUuYmF0Y2hJZCwgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSBdKSA6IFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdpdGggdGhlIGNvbXBsZXRpb24gb2YgdGhpcyBtdXRhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbm90aGVyIHNsb3QgaGFzIGZyZWVkIHVwLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCBHbyh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSBpdCdzIGFsc28gdW5saWtlbHkgdGhhdCB0aGUgc2VydmVyIGl0c2VsZiBpcyBtZWx0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvd24gLS0gdGhpcyB3YXMganVzdCBhIGJhZCByZXF1ZXN0IHNvIGluaGliaXQgYmFja29mZiBvbiB0aGUgbmV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXN0YXJ0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2l0aCB0aGUgY29tcGxldGlvbiBvZiB0aGlzIG11dGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFub3RoZXIgc2xvdCBoYXMgZnJlZWQgdXAuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2VudCgpLCBuLmxhYmVsID0gMztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KHQsIHIpIF0gOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBlcnJvciBhZmZlY3RzIHRoZSBhY3R1YWwgd3JpdGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBlcnJvciBhZmZlY3RzIHRoZSBhY3R1YWwgd3JpdGUuXG4gICAgICAgICAgICAgICAgaS5zZW50KCksIGkubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgd3JpdGUgc3RyZWFtIGNsb3NlZCBhZnRlciB0aGUgd3JpdGUgaGFuZHNoYWtlIGNvbXBsZXRlcywgYSB3cml0ZVxuICAgICAgICAgICAgICAgIC8vIG9wZXJhdGlvbiBmYWlsZWQgYW5kIHdlIGZhaWwgdGhlIHBlbmRpbmcgb3BlcmF0aW9uLlxuICAgICAgICAgICAgICAgIC8vIFRoZSB3cml0ZSBzdHJlYW0gbWlnaHQgaGF2ZSBiZWVuIHN0YXJ0ZWQgYnkgcmVmaWxsaW5nIHRoZSB3cml0ZVxuICAgICAgICAgICAgICAgIC8vIHBpcGVsaW5lIGZvciBmYWlsZWQgd3JpdGVzXG4gICAgICAgICAgICAgICAgcmV0dXJuIEtvKHQpICYmIFFvKHQpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFRvZ2dsZXMgdGhlIG5ldHdvcmsgc3RhdGUgd2hlbiB0aGUgY2xpZW50IGdhaW5zIG9yIGxvc2VzIGl0cyBwcmltYXJ5IGxlYXNlLlxuICovIGZ1bmN0aW9uIFhvKHQsIHIpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgaTtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBEKHQpLCByID8gKGUuSGMuZGVsZXRlKDIgLyogSXNTZWNvbmRhcnkgKi8pLCBbIDQgLyp5aWVsZCovICwga28oZSkgXSkgOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA1IF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiAoaSA9IHIpID8gWyAzIC8qYnJlYWsqLyAsIDQgXSA6IChlLkhjLmFkZCgyIC8qIElzU2Vjb25kYXJ5ICovKSwgWyA0IC8qeWllbGQqLyAsIERvKGUpIF0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBuLnNlbnQoKSwgaSA9IGUuWmMuc2V0KFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pLCBuLmxhYmVsID0gNDtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgaSwgbi5sYWJlbCA9IDU7XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIElmIG5vdCB5ZXQgaW5pdGlhbGl6ZWQsIHJlZ2lzdGVycyB0aGUgV2F0Y2hTdHJlYW0gYW5kIGl0cyBuZXR3b3JrIHN0YXRlXG4gKiBjYWxsYmFjayB3aXRoIGByZW1vdGVTdG9yZUltcGxgLiBSZXR1cm5zIHRoZSBleGlzdGluZyBzdHJlYW0gaWYgb25lIGlzXG4gKiBhbHJlYWR5IGF2YWlsYWJsZS5cbiAqXG4gKiBQT1JUSU5HIE5PVEU6IE9uIGlPUyBhbmQgQW5kcm9pZCwgdGhlIFdhdGNoU3RyZWFtIGdldHMgcmVnaXN0ZXJlZCBvbiBzdGFydHVwLlxuICogVGhpcyBpcyBub3QgZG9uZSBvbiBXZWIgdG8gYWxsb3cgaXQgdG8gYmUgdHJlZS1zaGFrZW4uXG4gKi8gZnVuY3Rpb24gJG8odCkge1xuICAgIHZhciByID0gdGhpcztcbiAgICByZXR1cm4gdC5ydSB8fCAoXG4gICAgLy8gQ3JlYXRlIHN0cmVhbSAoYnV0IG5vdGUgdGhhdCBpdCBpcyBub3Qgc3RhcnRlZCB5ZXQpLlxuICAgIHQucnUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gRCh0KTtcbiAgICAgICAgcmV0dXJuIHIuTmMoKSwgbmV3IFRvKGUsIHIuZWMsIHIuY3JlZGVudGlhbHMsIHIuc2VyaWFsaXplciwgbik7XG4gICAgfSh0LldjLCB0LnJzLCB7XG4gICAgICAgIG1jOiBxby5iaW5kKG51bGwsIHQpLFxuICAgICAgICBkYzogRm8uYmluZChudWxsLCB0KSxcbiAgICAgICAgUmM6IGpvLmJpbmQobnVsbCwgdClcbiAgICB9KSwgdC5KYy5wdXNoKChmdW5jdGlvbihpKSB7XG4gICAgICAgIHJldHVybiBlKHIsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA/ICh0LnJ1LmNjKCksIFJvKHQpID8gTG8odCkgOiB0LlpjLnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSwgWyAzIC8qYnJlYWsqLyAsIDMgXSkgOiBbIDMgLypicmVhayovICwgMSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdC5ydS5zdG9wKCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBlLnNlbnQoKSwgVW8odCksIGUubGFiZWwgPSAzO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0pKSksIHQucnVcbiAgICAvKipcbiAqIElmIG5vdCB5ZXQgaW5pdGlhbGl6ZWQsIHJlZ2lzdGVycyB0aGUgV3JpdGVTdHJlYW0gYW5kIGl0cyBuZXR3b3JrIHN0YXRlXG4gKiBjYWxsYmFjayB3aXRoIGByZW1vdGVTdG9yZUltcGxgLiBSZXR1cm5zIHRoZSBleGlzdGluZyBzdHJlYW0gaWYgb25lIGlzXG4gKiBhbHJlYWR5IGF2YWlsYWJsZS5cbiAqXG4gKiBQT1JUSU5HIE5PVEU6IE9uIGlPUyBhbmQgQW5kcm9pZCwgdGhlIFdyaXRlU3RyZWFtIGdldHMgcmVnaXN0ZXJlZCBvbiBzdGFydHVwLlxuICogVGhpcyBpcyBub3QgZG9uZSBvbiBXZWIgdG8gYWxsb3cgaXQgdG8gYmUgdHJlZS1zaGFrZW4uXG4gKi87XG59XG5cbmZ1bmN0aW9uIFpvKHQpIHtcbiAgICB2YXIgciA9IHRoaXM7XG4gICAgcmV0dXJuIHQub3UgfHwgKFxuICAgIC8vIENyZWF0ZSBzdHJlYW0gKGJ1dCBub3RlIHRoYXQgaXQgaXMgbm90IHN0YXJ0ZWQgeWV0KS5cbiAgICB0Lm91ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IEQodCk7XG4gICAgICAgIHJldHVybiByLk5jKCksIG5ldyBObyhlLCByLmVjLCByLmNyZWRlbnRpYWxzLCByLnNlcmlhbGl6ZXIsIG4pO1xuICAgIH0odC5XYywgdC5ycywge1xuICAgICAgICBtYzogV28uYmluZChudWxsLCB0KSxcbiAgICAgICAgZGM6IEpvLmJpbmQobnVsbCwgdCksXG4gICAgICAgIFNjOiBZby5iaW5kKG51bGwsIHQpLFxuICAgICAgICBiYzogSG8uYmluZChudWxsLCB0KVxuICAgIH0pLCB0LkpjLnB1c2goKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIGUociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID8gKHQub3UuY2MoKSwgWyA0IC8qeWllbGQqLyAsIEdvKHQpIF0pIDogWyAzIC8qYnJlYWsqLyAsIDIgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgc3RhcnQgdGhlIHdyaXRlIHN0cmVhbSBpZiBuZWNlc3NhcnkuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHQub3Uuc3RvcCgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgZS5zZW50KCksIHQuR2MubGVuZ3RoID4gMCAmJiAoVChcIlJlbW90ZVN0b3JlXCIsIFwiU3RvcHBpbmcgd3JpdGUgc3RyZWFtIHdpdGggXCIgKyB0LkdjLmxlbmd0aCArIFwiIHBlbmRpbmcgd3JpdGVzXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgdC5HYyA9IFtdKSwgZS5sYWJlbCA9IDQ7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSkpKSwgdC5vdVxuICAgIC8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4gICAgLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgcmVmZXJlbmNlcyB0byBhIGRvY3VtZW50IGZyb20gc29tZSBraW5kIG9mIG51bWJlcmVkIGVudGl0eVxuICogKGVpdGhlciBhIHRhcmdldCBJRCBvciBiYXRjaCBJRCkuIEFzIHJlZmVyZW5jZXMgYXJlIGFkZGVkIHRvIG9yIHJlbW92ZWQgZnJvbVxuICogdGhlIHNldCBjb3JyZXNwb25kaW5nIGV2ZW50cyBhcmUgZW1pdHRlZCB0byBhIHJlZ2lzdGVyZWQgZ2FyYmFnZSBjb2xsZWN0b3IuXG4gKlxuICogRWFjaCByZWZlcmVuY2UgaXMgcmVwcmVzZW50ZWQgYnkgYSBEb2N1bWVudFJlZmVyZW5jZSBvYmplY3QuIEVhY2ggb2YgdGhlbVxuICogY29udGFpbnMgZW5vdWdoIGluZm9ybWF0aW9uIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSByZWZlcmVuY2UuIFRoZXkgYXJlIGFsbFxuICogc3RvcmVkIHByaW1hcmlseSBpbiBhIHNldCBzb3J0ZWQgYnkga2V5LiBBIGRvY3VtZW50IGlzIGNvbnNpZGVyZWQgZ2FyYmFnZSBpZlxuICogdGhlcmUncyBubyByZWZlcmVuY2VzIGluIHRoYXQgc2V0ICh0aGlzIGNhbiBiZSBlZmZpY2llbnRseSBjaGVja2VkIHRoYW5rcyB0b1xuICogc29ydGluZyBieSBrZXkpLlxuICpcbiAqIFJlZmVyZW5jZVNldCBhbHNvIGtlZXBzIGEgc2Vjb25kYXJ5IHNldCB0aGF0IGNvbnRhaW5zIHJlZmVyZW5jZXMgc29ydGVkIGJ5XG4gKiBJRHMuIFRoaXMgb25lIGlzIHVzZWQgdG8gZWZmaWNpZW50bHkgaW1wbGVtZW50IHJlbW92YWwgb2YgYWxsIHJlZmVyZW5jZXMgYnlcbiAqIHNvbWUgdGFyZ2V0IElELlxuICovO1xufVxuXG52YXIgdHUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIC8vIEEgc2V0IG9mIG91dHN0YW5kaW5nIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBzb3J0ZWQgYnkga2V5LlxuICAgICAgICB0aGlzLmF1ID0gbmV3IHB0KGV1LmN1KSwgXG4gICAgICAgIC8vIEEgc2V0IG9mIG91dHN0YW5kaW5nIHJlZmVyZW5jZXMgdG8gYSBkb2N1bWVudCBzb3J0ZWQgYnkgdGFyZ2V0IGlkLlxuICAgICAgICB0aGlzLnV1ID0gbmV3IHB0KGV1Lmh1KVxuICAgICAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSByZWZlcmVuY2Ugc2V0IGNvbnRhaW5zIG5vIHJlZmVyZW5jZXMuICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuVCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdS5UKCk7XG4gICAgfSwgXG4gICAgLyoqIEFkZHMgYSByZWZlcmVuY2UgdG8gdGhlIGdpdmVuIGRvY3VtZW50IGtleSBmb3IgdGhlIGdpdmVuIElELiAqLyB0LnByb3RvdHlwZS5RbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBuZXcgZXUodCwgZSk7XG4gICAgICAgIHRoaXMuYXUgPSB0aGlzLmF1LmFkZChuKSwgdGhpcy51dSA9IHRoaXMudXUuYWRkKG4pO1xuICAgIH0sIFxuICAgIC8qKiBBZGQgcmVmZXJlbmNlcyB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQga2V5cyBmb3IgdGhlIGdpdmVuIElELiAqLyB0LnByb3RvdHlwZS5sdSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICB0LmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuLlFvKHQsIGUpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQga2V5IGZvciB0aGUgZ2l2ZW5cbiAgICAgKiBJRC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5XbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdGhpcy5fdShuZXcgZXUodCwgZSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmZ1ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHQuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uV28odCwgZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHJlZmVyZW5jZXMgd2l0aCBhIGdpdmVuIElELiBDYWxscyByZW1vdmVSZWYoKSBmb3IgZWFjaCBrZXlcbiAgICAgKiByZW1vdmVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmR1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSBuZXcgWShuZXcgSyhbXSkpLCByID0gbmV3IGV1KG4sIHQpLCBpID0gbmV3IGV1KG4sIHQgKyAxKSwgbyA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy51dS5OdChbIHIsIGkgXSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGUuX3UodCksIG8ucHVzaCh0LmtleSk7XG4gICAgICAgIH0pKSwgbztcbiAgICB9LCB0LnByb3RvdHlwZS53dSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuYXUuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuX3UoZSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5fdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5hdSA9IHRoaXMuYXUuZGVsZXRlKHQpLCB0aGlzLnV1ID0gdGhpcy51dS5kZWxldGUodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuVHUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gbmV3IFkobmV3IEsoW10pKSwgbiA9IG5ldyBldShlLCB0KSwgciA9IG5ldyBldShlLCB0ICsgMSksIGkgPSBJdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy51dS5OdChbIG4sIHIgXSwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGkgPSBpLmFkZCh0LmtleSk7XG4gICAgICAgIH0pKSwgaTtcbiAgICB9LCB0LnByb3RvdHlwZS5zbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBuZXcgZXUodCwgMCksIG4gPSB0aGlzLmF1LkZ0KGUpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gbiAmJiB0LmlzRXF1YWwobi5rZXkpO1xuICAgIH0sIHQ7XG59KCksIGV1ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5rZXkgPSB0LCB0aGlzLkV1ID0gZVxuICAgICAgICAvKiogQ29tcGFyZSBieSBrZXkgdGhlbiBieSBJRCAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQuY3UgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBZLlYodC5rZXksIGUua2V5KSB8fCBWKHQuRXUsIGUuRXUpO1xuICAgIH0sIFxuICAgIC8qKiBDb21wYXJlIGJ5IElEIHRoZW4gYnkga2V5ICovIHQuaHUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBWKHQuRXUsIGUuRXUpIHx8IFkuVih0LmtleSwgZS5rZXkpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBUaGUgZm9ybWF0IG9mIHRoZSBMb2NhbFN0b3JhZ2Uga2V5IHRoYXQgc3RvcmVzIHRoZSBjbGllbnQgc3RhdGUgaXM6XG4vLyAgICAgZmlyZXN0b3JlX2NsaWVudHNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGluc3RhbmNlX2tleT5cbi8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBjbGllbnQgc3RhdGUgaW4gV2ViU3RvcmFnZSAqL1xuZnVuY3Rpb24gbnUodCwgZSkge1xuICAgIHJldHVybiBcImZpcmVzdG9yZV9jbGllbnRzX1wiICsgdCArIFwiX1wiICsgZTtcbn1cblxuLy8gVGhlIGZvcm1hdCBvZiB0aGUgV2ViU3RvcmFnZSBrZXkgdGhhdCBzdG9yZXMgdGhlIG11dGF0aW9uIHN0YXRlIGlzOlxuLy8gICAgIGZpcmVzdG9yZV9tdXRhdGlvbnNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGJhdGNoX2lkPlxuLy8gICAgIChmb3IgdW5hdXRoZW50aWNhdGVkIHVzZXJzKVxuLy8gb3I6IGZpcmVzdG9yZV9tdXRhdGlvbnNfPHBlcnNpc3RlbmNlX3ByZWZpeD5fPGJhdGNoX2lkPl88dXNlcl91aWQ+XG4vLyAndXNlcl91aWQnIGlzIGxhc3QgdG8gYXZvaWQgbmVlZGluZyB0byBlc2NhcGUgJ18nIGNoYXJhY3RlcnMgdGhhdCBpdCBtaWdodFxuLy8gY29udGFpbi5cbi8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgYSBtdXRhdGlvbiBiYXRjaCBpbiBXZWJTdG9yYWdlICovIGZ1bmN0aW9uIHJ1KHQsIGUsIG4pIHtcbiAgICB2YXIgciA9IFwiZmlyZXN0b3JlX211dGF0aW9uc19cIiArIHQgKyBcIl9cIiArIG47XG4gICAgcmV0dXJuIGUuSnMoKSAmJiAociArPSBcIl9cIiArIGUudWlkKSwgcjtcbn1cblxuLy8gVGhlIGZvcm1hdCBvZiB0aGUgV2ViU3RvcmFnZSBrZXkgdGhhdCBzdG9yZXMgYSBxdWVyeSB0YXJnZXQncyBtZXRhZGF0YSBpczpcbi8vICAgICBmaXJlc3RvcmVfdGFyZ2V0c188cGVyc2lzdGVuY2VfcHJlZml4Pl88dGFyZ2V0X2lkPlxuLyoqIEFzc2VtYmxlcyB0aGUga2V5IGZvciBhIHF1ZXJ5IHN0YXRlIGluIFdlYlN0b3JhZ2UgKi8gZnVuY3Rpb24gaXUodCwgZSkge1xuICAgIHJldHVybiBcImZpcmVzdG9yZV90YXJnZXRzX1wiICsgdCArIFwiX1wiICsgZTtcbn1cblxuLy8gVGhlIFdlYlN0b3JhZ2UgcHJlZml4IHRoYXQgc3RvcmVzIHRoZSBwcmltYXJ5IHRhYidzIG9ubGluZSBzdGF0ZS4gVGhlXG4vLyBmb3JtYXQgb2YgdGhlIGtleSBpczpcbi8vICAgICBmaXJlc3RvcmVfb25saW5lX3N0YXRlXzxwZXJzaXN0ZW5jZV9wcmVmaXg+XG4vKipcbiAqIEhvbGRzIHRoZSBzdGF0ZSBvZiBhIG11dGF0aW9uIGJhdGNoLCBpbmNsdWRpbmcgaXRzIHVzZXIgSUQsIGJhdGNoIElEIGFuZFxuICogd2hldGhlciB0aGUgYmF0Y2ggaXMgJ3BlbmRpbmcnLCAnYWNrbm93bGVkZ2VkJyBvciAncmVqZWN0ZWQnLlxuICovXG4vLyBWaXNpYmxlIGZvciB0ZXN0aW5nXG52YXIgb3UgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgcikge1xuICAgICAgICB0aGlzLnVzZXIgPSB0LCB0aGlzLmJhdGNoSWQgPSBlLCB0aGlzLnN0YXRlID0gbiwgdGhpcy5lcnJvciA9IHJcbiAgICAgICAgLyoqXG4gICAgICogUGFyc2VzIGEgTXV0YXRpb25NZXRhZGF0YSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0Lkl1ID0gZnVuY3Rpb24oZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IEpTT04ucGFyc2UociksIG8gPSBcIm9iamVjdFwiID09IHR5cGVvZiBpICYmIC0xICE9PSBbIFwicGVuZGluZ1wiLCBcImFja25vd2xlZGdlZFwiLCBcInJlamVjdGVkXCIgXS5pbmRleE9mKGkuc3RhdGUpICYmICh2b2lkIDAgPT09IGkuZXJyb3IgfHwgXCJvYmplY3RcIiA9PSB0eXBlb2YgaS5lcnJvciksIHUgPSB2b2lkIDA7XG4gICAgICAgIHJldHVybiBvICYmIGkuZXJyb3IgJiYgKChvID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgaS5lcnJvci5tZXNzYWdlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGkuZXJyb3IuY29kZSkgJiYgKHUgPSBuZXcgaihpLmVycm9yLmNvZGUsIGkuZXJyb3IubWVzc2FnZSkpKSwgXG4gICAgICAgIG8gPyBuZXcgdChlLCBuLCBpLnN0YXRlLCB1KSA6IChOKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJGYWlsZWQgdG8gcGFyc2UgbXV0YXRpb24gc3RhdGUgZm9yIElEICdcIiArIG4gKyBcIic6IFwiICsgciksIFxuICAgICAgICBudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5tdSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHtcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yICYmICh0LmVycm9yID0ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5lcnJvci5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5lcnJvci5tZXNzYWdlXG4gICAgICAgIH0pLCBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9LCB0O1xufSgpLCB1dSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSB0LCB0aGlzLnN0YXRlID0gZSwgdGhpcy5lcnJvciA9IG5cbiAgICAgICAgLyoqXG4gICAgICogUGFyc2VzIGEgUXVlcnlUYXJnZXRNZXRhZGF0YSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uIGluIFdlYlN0b3JhZ2UuXG4gICAgICogTG9ncyBhIHdhcm5pbmcgYW5kIHJldHVybnMgbnVsbCBpZiB0aGUgZm9ybWF0IG9mIHRoZSBkYXRhIGlzIG5vdCB2YWxpZC5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0Lkl1ID0gZnVuY3Rpb24oZSwgbikge1xuICAgICAgICB2YXIgciA9IEpTT04ucGFyc2UobiksIGkgPSBcIm9iamVjdFwiID09IHR5cGVvZiByICYmIC0xICE9PSBbIFwibm90LWN1cnJlbnRcIiwgXCJjdXJyZW50XCIsIFwicmVqZWN0ZWRcIiBdLmluZGV4T2Yoci5zdGF0ZSkgJiYgKHZvaWQgMCA9PT0gci5lcnJvciB8fCBcIm9iamVjdFwiID09IHR5cGVvZiByLmVycm9yKSwgbyA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIGkgJiYgci5lcnJvciAmJiAoKGkgPSBcInN0cmluZ1wiID09IHR5cGVvZiByLmVycm9yLm1lc3NhZ2UgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygci5lcnJvci5jb2RlKSAmJiAobyA9IG5ldyBqKHIuZXJyb3IuY29kZSwgci5lcnJvci5tZXNzYWdlKSkpLCBcbiAgICAgICAgaSA/IG5ldyB0KGUsIHIuc3RhdGUsIG8pIDogKE4oXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIkZhaWxlZCB0byBwYXJzZSB0YXJnZXQgc3RhdGUgZm9yIElEICdcIiArIGUgKyBcIic6IFwiICsgbiksIFxuICAgICAgICBudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5tdSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHtcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgdXBkYXRlVGltZU1zOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yICYmICh0LmVycm9yID0ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5lcnJvci5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5lcnJvci5tZXNzYWdlXG4gICAgICAgIH0pLCBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICB9LCB0O1xufSgpLCBzdSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSB0LCB0aGlzLmFjdGl2ZVRhcmdldElkcyA9IGVcbiAgICAgICAgLyoqXG4gICAgICogUGFyc2VzIGEgUmVtb3RlQ2xpZW50U3RhdGUgZnJvbSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBpbiBXZWJTdG9yYWdlLlxuICAgICAqIExvZ3MgYSB3YXJuaW5nIGFuZCByZXR1cm5zIG51bGwgaWYgdGhlIGZvcm1hdCBvZiB0aGUgZGF0YSBpcyBub3QgdmFsaWQuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5JdSA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgZm9yICh2YXIgciA9IEpTT04ucGFyc2UobiksIGkgPSBcIm9iamVjdFwiID09IHR5cGVvZiByICYmIHIuYWN0aXZlVGFyZ2V0SWRzIGluc3RhbmNlb2YgQXJyYXksIG8gPSBUdCgpLCB1ID0gMDsgaSAmJiB1IDwgci5hY3RpdmVUYXJnZXRJZHMubGVuZ3RoOyArK3UpIGkgPSBYKHIuYWN0aXZlVGFyZ2V0SWRzW3VdKSwgXG4gICAgICAgIG8gPSBvLmFkZChyLmFjdGl2ZVRhcmdldElkc1t1XSk7XG4gICAgICAgIHJldHVybiBpID8gbmV3IHQoZSwgbykgOiAoTihcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiRmFpbGVkIHRvIHBhcnNlIGNsaWVudCBkYXRhIGZvciBpbnN0YW5jZSAnXCIgKyBlICsgXCInOiBcIiArIG4pLCBcbiAgICAgICAgbnVsbCk7XG4gICAgfSwgdDtcbn0oKSwgYXUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICB0aGlzLmNsaWVudElkID0gdCwgdGhpcy5vbmxpbmVTdGF0ZSA9IGVcbiAgICAgICAgLyoqXG4gICAgICogUGFyc2VzIGEgU2hhcmVkT25saW5lU3RhdGUgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbiBpbiBXZWJTdG9yYWdlLlxuICAgICAqIExvZ3MgYSB3YXJuaW5nIGFuZCByZXR1cm5zIG51bGwgaWYgdGhlIGZvcm1hdCBvZiB0aGUgZGF0YSBpcyBub3QgdmFsaWQuXG4gICAgICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5JdSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIG4gPSBKU09OLnBhcnNlKGUpO1xuICAgICAgICByZXR1cm4gXCJvYmplY3RcIiA9PSB0eXBlb2YgbiAmJiAtMSAhPT0gWyBcIlVua25vd25cIiwgXCJPbmxpbmVcIiwgXCJPZmZsaW5lXCIgXS5pbmRleE9mKG4ub25saW5lU3RhdGUpICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIG4uY2xpZW50SWQgPyBuZXcgdChuLmNsaWVudElkLCBuLm9ubGluZVN0YXRlKSA6IChOKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJGYWlsZWQgdG8gcGFyc2Ugb25saW5lIHN0YXRlOiBcIiArIGUpLCBcbiAgICAgICAgbnVsbCk7XG4gICAgfSwgdDtcbn0oKSwgY3UgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlVGFyZ2V0SWRzID0gVHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkF1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldElkcyA9IHRoaXMuYWN0aXZlVGFyZ2V0SWRzLmFkZCh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5SdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVUYXJnZXRJZHMgPSB0aGlzLmFjdGl2ZVRhcmdldElkcy5kZWxldGUodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBlbnRyeSBpbnRvIGEgSlNPTi1lbmNvZGVkIGZvcm1hdCB3ZSBjYW4gdXNlIGZvciBXZWJTdG9yYWdlLlxuICAgICAqIERvZXMgbm90IGVuY29kZSBgY2xpZW50SWRgIGFzIGl0IGlzIHBhcnQgb2YgdGhlIGtleSBpbiBXZWJTdG9yYWdlLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLm11ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0ge1xuICAgICAgICAgICAgYWN0aXZlVGFyZ2V0SWRzOiB0aGlzLmFjdGl2ZVRhcmdldElkcy5PKCksXG4gICAgICAgICAgICB1cGRhdGVUaW1lTXM6IERhdGUubm93KClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHQpO1xuICAgIH0sIHQ7XG59KCksIGh1ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgICAgdGhpcy53aW5kb3cgPSB0LCB0aGlzLmxuID0gZSwgdGhpcy5wZXJzaXN0ZW5jZUtleSA9IG4sIHRoaXMuUHUgPSByLCB0aGlzLmd1ID0gbnVsbCwgXG4gICAgICAgIHRoaXMuT2MgPSBudWxsLCB0aGlzLlhpID0gbnVsbCwgdGhpcy5WdSA9IHRoaXMueXUuYmluZCh0aGlzKSwgdGhpcy5wdSA9IG5ldyBodChWKSwgXG4gICAgICAgIHRoaXMueXIgPSAhMSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FwdHVyZXMgV2ViU3RvcmFnZSBldmVudHMgdGhhdCBvY2N1ciBiZWZvcmUgYHN0YXJ0KClgIGlzIGNhbGxlZC4gVGhlc2VcbiAgICAgICAgICAgICAqIGV2ZW50cyBhcmUgcmVwbGF5ZWQgb25jZSBgV2ViU3RvcmFnZVNoYXJlZENsaWVudFN0YXRlYCBpcyBzdGFydGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMudnUgPSBbXTtcbiAgICAgICAgLy8gRXNjYXBlIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgbWVudGlvbmVkIGhlcmU6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvR3VpZGUvUmVndWxhcl9FeHByZXNzaW9uc1xuICAgICAgICB2YXIgbyA9IG4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICB0aGlzLnN0b3JhZ2UgPSB0aGlzLndpbmRvdy5sb2NhbFN0b3JhZ2UsIHRoaXMuY3VycmVudFVzZXIgPSBpLCB0aGlzLmJ1ID0gbnUodGhpcy5wZXJzaXN0ZW5jZUtleSwgdGhpcy5QdSksIFxuICAgICAgICB0aGlzLlN1ID0gXG4gICAgICAgIC8qKiBBc3NlbWJsZXMgdGhlIGtleSBmb3IgdGhlIGN1cnJlbnQgc2VxdWVuY2UgbnVtYmVyLiAqL1xuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJmaXJlc3RvcmVfc2VxdWVuY2VfbnVtYmVyX1wiICsgdDtcbiAgICAgICAgfSh0aGlzLnBlcnNpc3RlbmNlS2V5KSwgdGhpcy5wdSA9IHRoaXMucHUucnQodGhpcy5QdSwgbmV3IGN1KSwgdGhpcy5EdSA9IG5ldyBSZWdFeHAoXCJeZmlyZXN0b3JlX2NsaWVudHNfXCIgKyBvICsgXCJfKFteX10qKSRcIiksIFxuICAgICAgICB0aGlzLkN1ID0gbmV3IFJlZ0V4cChcIl5maXJlc3RvcmVfbXV0YXRpb25zX1wiICsgbyArIFwiXyhcXFxcZCspKD86XyguKikpPyRcIiksIHRoaXMuTnUgPSBuZXcgUmVnRXhwKFwiXmZpcmVzdG9yZV90YXJnZXRzX1wiICsgbyArIFwiXyhcXFxcZCspJFwiKSwgXG4gICAgICAgIHRoaXMueHUgPSBcbiAgICAgICAgLyoqIEFzc2VtYmxlcyB0aGUga2V5IGZvciB0aGUgb25saW5lIHN0YXRlIG9mIHRoZSBwcmltYXJ5IHRhYi4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZmlyZXN0b3JlX29ubGluZV9zdGF0ZV9cIiArIHQ7XG4gICAgICAgIH0odGhpcy5wZXJzaXN0ZW5jZUtleSksIHRoaXMuRnUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJmaXJlc3RvcmVfYnVuZGxlX2xvYWRlZF9cIiArIHQ7XG4gICAgICAgIH0odGhpcy5wZXJzaXN0ZW5jZUtleSksIFxuICAgICAgICAvLyBSYXRoZXIgdGhhbiBhZGRpbmcgdGhlIHN0b3JhZ2Ugb2JzZXJ2ZXIgZHVyaW5nIHN0YXJ0KCksIHdlIGFkZCB0aGVcbiAgICAgICAgLy8gc3RvcmFnZSBvYnNlcnZlciBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFRoaXMgZW5zdXJlcyB0aGF0IHdlIGNvbGxlY3RcbiAgICAgICAgLy8gZXZlbnRzIGJlZm9yZSBvdGhlciBjb21wb25lbnRzIHBvcHVsYXRlIHRoZWlyIGluaXRpYWwgc3RhdGUgKGR1cmluZyB0aGVpclxuICAgICAgICAvLyByZXNwZWN0aXZlIHN0YXJ0KCkgY2FsbHMpLiBPdGhlcndpc2UsIHdlIG1pZ2h0IGZvciBleGFtcGxlIG1pc3MgYVxuICAgICAgICAvLyBtdXRhdGlvbiB0aGF0IGlzIGFkZGVkIGFmdGVyIExvY2FsU3RvcmUncyBzdGFydCgpIHByb2Nlc3NlZCB0aGUgZXhpc3RpbmdcbiAgICAgICAgLy8gbXV0YXRpb25zIGJ1dCBiZWZvcmUgd2Ugb2JzZXJ2ZSBXZWJTdG9yYWdlIGV2ZW50cy5cbiAgICAgICAgdGhpcy53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgdGhpcy5WdSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zICd0cnVlJyBpZiBXZWJTdG9yYWdlIGlzIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC4gKi8gICAgcmV0dXJuIHQua24gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiAhKCF0IHx8ICF0LmxvY2FsU3RvcmFnZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0LCBlLCByLCBpLCBvLCB1LCBzLCBhLCBjLCBoLCBmLCBsID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgdGhpcy5ndS5DYSgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZm9yICh0ID0gbi5zZW50KCksIGUgPSAwLCByID0gdDsgZSA8IHIubGVuZ3RoOyBlKyspIChpID0gcltlXSkgIT09IHRoaXMuUHUgJiYgKG8gPSB0aGlzLmdldEl0ZW0obnUodGhpcy5wZXJzaXN0ZW5jZUtleSwgaSkpKSAmJiAodSA9IHN1Lkl1KGksIG8pKSAmJiAodGhpcy5wdSA9IHRoaXMucHUucnQodS5jbGllbnRJZCwgdSkpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHRoaXMuT3UoKSwgKHMgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnh1KSkgJiYgKGEgPSB0aGlzLk11KHMpKSAmJiB0aGlzLmt1KGEpLCBcbiAgICAgICAgICAgICAgICAgICAgYyA9IDAsIGggPSB0aGlzLnZ1OyBjIDwgaC5sZW5ndGg7IGMrKykgZiA9IGhbY10sIHRoaXMueXUoZik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZ1ID0gW10sIFxuICAgICAgICAgICAgICAgICAgICAvLyBSZWdpc3RlciBhIHdpbmRvdyB1bmxvYWQgaG9vayB0byByZW1vdmUgdGhlIGNsaWVudCBtZXRhZGF0YSBlbnRyeSBmcm9tXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlYlN0b3JhZ2UgZXZlbiBpZiBgc2h1dGRvd24oKWAgd2FzIG5vdCBjYWxsZWQuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGwucGEoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCB0aGlzLnlyID0gITAsIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuc2V0SXRlbSh0aGlzLlN1LCBKU09OLnN0cmluZ2lmeSh0KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuJHUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTHUodGhpcy5wdSk7XG4gICAgfSwgdC5wcm90b3R5cGUuQnUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gITE7XG4gICAgICAgIHJldHVybiB0aGlzLnB1LmZvckVhY2goKGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgICAgIHIuYWN0aXZlVGFyZ2V0SWRzLmhhcyh0KSAmJiAoZSA9ICEwKTtcbiAgICAgICAgfSkpLCBlO1xuICAgIH0sIHQucHJvdG90eXBlLnF1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlV1KHQsIFwicGVuZGluZ1wiKTtcbiAgICB9LCB0LnByb3RvdHlwZS5RdSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5VdSh0LCBlLCBuKSwgXG4gICAgICAgIC8vIE9uY2UgYSBmaW5hbCBtdXRhdGlvbiByZXN1bHQgaXMgb2JzZXJ2ZWQgYnkgb3RoZXIgY2xpZW50cywgdGhleSBubyBsb25nZXJcbiAgICAgICAgLy8gYWNjZXNzIHRoZSBtdXRhdGlvbidzIG1ldGFkYXRhIGVudHJ5LiBTaW5jZSBXZWJTdG9yYWdlIHJlcGxheXMgZXZlbnRzXG4gICAgICAgIC8vIGluIG9yZGVyLCBpdCBpcyBzYWZlIHRvIGRlbGV0ZSB0aGUgZW50cnkgcmlnaHQgYWZ0ZXIgdXBkYXRpbmcgaXQuXG4gICAgICAgIHRoaXMuS3UodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuV3UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gXCJub3QtY3VycmVudFwiO1xuICAgICAgICAvLyBMb29rdXAgYW4gZXhpc3RpbmcgcXVlcnkgc3RhdGUgaWYgdGhlIHRhcmdldCBJRCB3YXMgYWxyZWFkeSByZWdpc3RlcmVkXG4gICAgICAgIC8vIGJ5IGFub3RoZXIgdGFiXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuQnUodCkpIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0oaXUodGhpcy5wZXJzaXN0ZW5jZUtleSwgdCkpO1xuICAgICAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHV1Lkl1KHQsIG4pO1xuICAgICAgICAgICAgICAgIHIgJiYgKGUgPSByLnN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5qdS5BdSh0KSwgdGhpcy5PdSgpLCBlO1xuICAgIH0sIHQucHJvdG90eXBlLkd1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmp1LlJ1KHQpLCB0aGlzLk91KCk7XG4gICAgfSwgdC5wcm90b3R5cGUuenUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmp1LmFjdGl2ZVRhcmdldElkcy5oYXModCk7XG4gICAgfSwgdC5wcm90b3R5cGUuSHUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbShpdSh0aGlzLnBlcnNpc3RlbmNlS2V5LCB0KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuSnUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuWXUodCwgZSwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUuWHUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgZS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByLkt1KHQpO1xuICAgICAgICB9KSksIHRoaXMuY3VycmVudFVzZXIgPSB0LCBuLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHIucXUodCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5adSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy50aCh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5laCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5oKCk7XG4gICAgfSwgdC5wcm90b3R5cGUucGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy55ciAmJiAodGhpcy53aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgdGhpcy5WdSksIHRoaXMucmVtb3ZlSXRlbSh0aGlzLmJ1KSwgXG4gICAgICAgIHRoaXMueXIgPSAhMSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSh0KTtcbiAgICAgICAgcmV0dXJuIFQoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIlJFQURcIiwgdCwgZSksIGU7XG4gICAgfSwgdC5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgVChcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiU0VUXCIsIHQsIGUpLCB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0LCBlKTtcbiAgICB9LCB0LnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24odCkge1xuICAgICAgICBUKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJSRU1PVkVcIiwgdCksIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLnl1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSB0O1xuICAgICAgICAvLyBOb3RlOiBUaGUgZnVuY3Rpb24gaXMgdHlwZWQgdG8gdGFrZSBFdmVudCB0byBiZSBpbnRlcmZhY2UtY29tcGF0aWJsZSB3aXRoXG4gICAgICAgIC8vIGBXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcmAuXG4gICAgICAgICAgICAgICAgaWYgKGkuc3RvcmFnZUFyZWEgPT09IHRoaXMuc3RvcmFnZSkge1xuICAgICAgICAgICAgaWYgKFQoXCJTaGFyZWRDbGllbnRTdGF0ZVwiLCBcIkVWRU5UXCIsIGkua2V5LCBpLm5ld1ZhbHVlKSwgaS5rZXkgPT09IHRoaXMuYnUpIHJldHVybiB2b2lkIE4oXCJSZWNlaXZlZCBXZWJTdG9yYWdlIG5vdGlmaWNhdGlvbiBmb3IgbG9jYWwgY2hhbmdlLiBBbm90aGVyIGNsaWVudCBtaWdodCBoYXZlIGdhcmJhZ2UtY29sbGVjdGVkIG91ciBzdGF0ZVwiKTtcbiAgICAgICAgICAgIHRoaXMubG4uU3MoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlKHIsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0LCBlLCByLCBvLCB1LCBzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMueXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gaS5rZXkpIGlmICh0aGlzLkR1LnRlc3QoaS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IGkubmV3VmFsdWUpIHJldHVybiB0ID0gdGhpcy5zaChpLmtleSksIFsgMiAvKnJldHVybiovICwgdGhpcy5paCh0LCBudWxsKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA9IHRoaXMucmgoaS5rZXksIGkubmV3VmFsdWUpKSByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCB0aGlzLmloKGUuY2xpZW50SWQsIGUpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLkN1LnRlc3QoaS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBpLm5ld1ZhbHVlICYmIChyID0gdGhpcy5vaChpLmtleSwgaS5uZXdWYWx1ZSkpKSByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCB0aGlzLmFoKHIpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLk51LnRlc3QoaS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBpLm5ld1ZhbHVlICYmIChvID0gdGhpcy51aChpLmtleSwgaS5uZXdWYWx1ZSkpKSByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCB0aGlzLmhoKG8pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpLmtleSA9PT0gdGhpcy54dSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gaS5uZXdWYWx1ZSAmJiAodSA9IHRoaXMuTXUoaS5uZXdWYWx1ZSkpKSByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCB0aGlzLmt1KHUpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpLmtleSA9PT0gdGhpcy5TdSkgKHMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0genIubnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHQpIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IEpTT04ucGFyc2UodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrKFwibnVtYmVyXCIgPT0gdHlwZW9mIG4pLCBlID0gbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTihcIlNoYXJlZENsaWVudFN0YXRlXCIsIFwiRmFpbGVkIHRvIHJlYWQgc2VxdWVuY2UgbnVtYmVyIGZyb20gV2ViU3RvcmFnZVwiLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KGkubmV3VmFsdWUpKSAhPT0genIubnIgJiYgdGhpcy5YaShzKTsgZWxzZSBpZiAoaS5rZXkgPT09IHRoaXMuRnUpIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIHRoaXMuZ3UubGgoKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMudnUucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImp1XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1LmdldCh0aGlzLlB1KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuT3UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMuYnUsIHRoaXMuanUubXUoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuVXUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gbmV3IG91KHRoaXMuY3VycmVudFVzZXIsIHQsIGUsIG4pLCBpID0gcnUodGhpcy5wZXJzaXN0ZW5jZUtleSwgdGhpcy5jdXJyZW50VXNlciwgdCk7XG4gICAgICAgIHRoaXMuc2V0SXRlbShpLCByLm11KCkpO1xuICAgIH0sIHQucHJvdG90eXBlLkt1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHJ1KHRoaXMucGVyc2lzdGVuY2VLZXksIHRoaXMuY3VycmVudFVzZXIsIHQpO1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oZSk7XG4gICAgfSwgdC5wcm90b3R5cGUudGggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0ge1xuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuUHUsXG4gICAgICAgICAgICBvbmxpbmVTdGF0ZTogdFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnh1LCBKU09OLnN0cmluZ2lmeShlKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuWXUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gaXUodGhpcy5wZXJzaXN0ZW5jZUtleSwgdCksIGkgPSBuZXcgdXUodCwgZSwgbik7XG4gICAgICAgIHRoaXMuc2V0SXRlbShyLCBpLm11KCkpO1xuICAgIH0sIHQucHJvdG90eXBlLm5oID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0SXRlbSh0aGlzLkZ1LCBcInZhbHVlLW5vdC11c2VkXCIpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGNsaWVudCBzdGF0ZSBrZXkgaW4gV2ViU3RvcmFnZS4gUmV0dXJucyBudWxsIGlmIHRoZSBrZXkgZG9lcyBub3RcbiAgICAgKiBtYXRjaCB0aGUgZXhwZWN0ZWQga2V5IGZvcm1hdC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5zaCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLkR1LmV4ZWModCk7XG4gICAgICAgIHJldHVybiBlID8gZVsxXSA6IG51bGw7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgY2xpZW50IHN0YXRlIGluIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZSBjb3VsZCBub3RcbiAgICAgKiBiZSBwYXJzZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUucmggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5zaCh0KTtcbiAgICAgICAgcmV0dXJuIHN1Lkl1KG4sIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIG11dGF0aW9uIGJhdGNoIHN0YXRlIGluIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZVxuICAgICAqIGNvdWxkIG5vdCBiZSBwYXJzZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUub2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5DdS5leGVjKHQpLCByID0gTnVtYmVyKG5bMV0pLCBpID0gdm9pZCAwICE9PSBuWzJdID8gblsyXSA6IG51bGw7XG4gICAgICAgIHJldHVybiBvdS5JdShuZXcgU3IoaSksIHIsIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHF1ZXJ5IHRhcmdldCBzdGF0ZSBmcm9tIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZVxuICAgICAqIGNvdWxkIG5vdCBiZSBwYXJzZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudWggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5OdS5leGVjKHQpLCByID0gTnVtYmVyKG5bMV0pO1xuICAgICAgICByZXR1cm4gdXUuSXUociwgZSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGFuIG9ubGluZSBzdGF0ZSBmcm9tIFdlYlN0b3JhZ2UuIFJldHVybnMgJ251bGwnIGlmIHRoZSB2YWx1ZVxuICAgICAqIGNvdWxkIG5vdCBiZSBwYXJzZWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuTXUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBhdS5JdSh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5haCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQudXNlci51aWQgPT09IHRoaXMuY3VycmVudFVzZXIudWlkID8gWyAyIC8qcmV0dXJuKi8gLCB0aGlzLmd1Ll9oKHQuYmF0Y2hJZCwgdC5zdGF0ZSwgdC5lcnJvcikgXSA6IChUKFwiU2hhcmVkQ2xpZW50U3RhdGVcIiwgXCJJZ25vcmluZyBtdXRhdGlvbiBmb3Igbm9uLWFjdGl2ZSB1c2VyIFwiICsgdC51c2VyLnVpZCksIFxuICAgICAgICAgICAgICAgIFsgMiAvKnJldHVybiovIF0pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuaGggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmd1LmZoKHQudGFyZ2V0SWQsIHQuc3RhdGUsIHQuZXJyb3IpO1xuICAgIH0sIHQucHJvdG90eXBlLmloID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlID8gdGhpcy5wdS5ydCh0LCBlKSA6IHRoaXMucHUucmVtb3ZlKHQpLCBpID0gdGhpcy5MdSh0aGlzLnB1KSwgbyA9IHRoaXMuTHUociksIHUgPSBbXSwgcyA9IFtdO1xuICAgICAgICByZXR1cm4gby5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpLmhhcyh0KSB8fCB1LnB1c2godCk7XG4gICAgICAgIH0pKSwgaS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBvLmhhcyh0KSB8fCBzLnB1c2godCk7XG4gICAgICAgIH0pKSwgdGhpcy5ndS5kaCh1LCBzKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG4ucHUgPSByO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUua3UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIFdlIGNoZWNrIHdoZXRoZXIgdGhlIGNsaWVudCB0aGF0IHdyb3RlIHRoaXMgb25saW5lIHN0YXRlIGlzIHN0aWxsIGFjdGl2ZVxuICAgICAgICAvLyBieSBjb21wYXJpbmcgaXRzIGNsaWVudCBJRCB0byB0aGUgbGlzdCBvZiBjbGllbnRzIGtlcHQgYWN0aXZlIGluXG4gICAgICAgIC8vIEluZGV4ZWREYi4gSWYgYSBjbGllbnQgZG9lcyBub3QgdXBkYXRlIHRoZWlyIEluZGV4ZWREYiBjbGllbnQgc3RhdGVcbiAgICAgICAgLy8gd2l0aGluIDUgc2Vjb25kcywgaXQgaXMgY29uc2lkZXJlZCBpbmFjdGl2ZSBhbmQgd2UgZG9uJ3QgZW1pdCBhbiBvbmxpbmVcbiAgICAgICAgLy8gc3RhdGUgZXZlbnQuXG4gICAgICAgIHRoaXMucHUuZ2V0KHQuY2xpZW50SWQpICYmIHRoaXMuT2ModC5vbmxpbmVTdGF0ZSk7XG4gICAgfSwgdC5wcm90b3R5cGUuTHUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gVHQoKTtcbiAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgZSA9IGUuT3Qobi5hY3RpdmVUYXJnZXRJZHMpO1xuICAgICAgICB9KSksIGU7XG4gICAgfSwgdDtcbn0oKSwgZnUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMud2ggPSBuZXcgY3UsIHRoaXMuVGggPSB7fSwgdGhpcy5PYyA9IG51bGwsIHRoaXMuWGkgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucXUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH0sIHQucHJvdG90eXBlLlF1ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAvLyBObyBvcC5cbiAgICB9LCB0LnByb3RvdHlwZS5XdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2guQXUodCksIHRoaXMuVGhbdF0gfHwgXCJub3QtY3VycmVudFwiO1xuICAgIH0sIHQucHJvdG90eXBlLkp1ID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB0aGlzLlRoW3RdID0gZTtcbiAgICB9LCB0LnByb3RvdHlwZS5HdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy53aC5SdSh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS56dSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2guYWN0aXZlVGFyZ2V0SWRzLmhhcyh0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5IdSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuVGhbdF07XG4gICAgfSwgdC5wcm90b3R5cGUuJHUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2guYWN0aXZlVGFyZ2V0SWRzO1xuICAgIH0sIHQucHJvdG90eXBlLkJ1ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aC5hY3RpdmVUYXJnZXRJZHMuaGFzKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndoID0gbmV3IGN1LCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5YdSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfSwgdC5wcm90b3R5cGUuWnUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIE5vIG9wLlxuICAgIH0sIHQucHJvdG90eXBlLnBhID0gZnVuY3Rpb24oKSB7fSwgdC5wcm90b3R5cGUuZXIgPSBmdW5jdGlvbih0KSB7fSwgdC5wcm90b3R5cGUuZWggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfSwgdDtcbn0oKSwgbHUgPSBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5rZXkgPSB0O1xufSwgcHUgPSBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5rZXkgPSB0O1xufSwgZHUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgXG4gICAgLyoqIERvY3VtZW50cyBpbmNsdWRlZCBpbiB0aGUgcmVtb3RlIHRhcmdldCAqL1xuICAgIGUpIHtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHQsIHRoaXMuRWggPSBlLCB0aGlzLkloID0gbnVsbCwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBmbGFnIHdoZXRoZXIgdGhlIHZpZXcgaXMgY3VycmVudCB3aXRoIHRoZSBiYWNrZW5kLiBBIHZpZXcgaXMgY29uc2lkZXJlZFxuICAgICAgICAgICAgICogY3VycmVudCBhZnRlciBpdCBoYXMgc2VlbiB0aGUgY3VycmVudCBmbGFnIGZyb20gdGhlIGJhY2tlbmQgYW5kIGRpZCBub3RcbiAgICAgICAgICAgICAqIGxvc2UgY29uc2lzdGVuY3kgd2l0aGluIHRoZSB3YXRjaCBzdHJlYW0gKGUuZy4gYmVjYXVzZSBvZiBhbiBleGlzdGVuY2VcbiAgICAgICAgICAgICAqIGZpbHRlciBtaXNtYXRjaCkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5adCA9ICExLCBcbiAgICAgICAgLyoqIERvY3VtZW50cyBpbiB0aGUgdmlldyBidXQgbm90IGluIHRoZSByZW1vdGUgdGFyZ2V0ICovXG4gICAgICAgIHRoaXMubWggPSBJdCgpLCBcbiAgICAgICAgLyoqIERvY3VtZW50IEtleXMgdGhhdCBoYXZlIGxvY2FsIGNoYW5nZXMgKi9cbiAgICAgICAgdGhpcy5RdCA9IEl0KCksIHRoaXMuQWggPSBGbih0KSwgdGhpcy5SaCA9IG5ldyBOdCh0aGlzLkFoKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJQaFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2V0IG9mIHJlbW90ZSBkb2N1bWVudHMgdGhhdCB0aGUgc2VydmVyIGhhcyB0b2xkIHVzIGJlbG9uZ3MgdG8gdGhlIHRhcmdldCBhc3NvY2lhdGVkIHdpdGhcbiAgICAgICAgICogdGhpcyB2aWV3LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGEgc2V0IG9mIGRvYyBjaGFuZ2VzLCBhcHBsaWVzIHRoZSBxdWVyeSBsaW1pdCwgYW5kIGNvbXB1dGVzXG4gICAgICogd2hhdCB0aGUgbmV3IHJlc3VsdHMgc2hvdWxkIGJlLCB3aGF0IHRoZSBjaGFuZ2VzIHdlcmUsIGFuZCB3aGV0aGVyIHdlIG1heVxuICAgICAqIG5lZWQgdG8gZ28gYmFjayB0byB0aGUgbG9jYWwgY2FjaGUgZm9yIG1vcmUgcmVzdWx0cy4gRG9lcyBub3QgbWFrZSBhbnlcbiAgICAgKiBjaGFuZ2VzIHRvIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSBkb2NDaGFuZ2VzIFRoZSBkb2MgY2hhbmdlcyB0byBhcHBseSB0byB0aGlzIHZpZXcuXG4gICAgICogQHBhcmFtIHByZXZpb3VzQ2hhbmdlcyBJZiB0aGlzIGlzIGJlaW5nIGNhbGxlZCB3aXRoIGEgcmVmaWxsLCB0aGVuIHN0YXJ0XG4gICAgICogICAgICAgIHdpdGggdGhpcyBzZXQgb2YgZG9jcyBhbmQgY2hhbmdlcyBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHZpZXcuXG4gICAgICogQHJldHVybiBhIG5ldyBzZXQgb2YgZG9jcywgY2hhbmdlcywgYW5kIHJlZmlsbCBmbGFnLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmdoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBlID8gZS5WaCA6IG5ldyB4dCwgaSA9IGUgPyBlLlJoIDogdGhpcy5SaCwgbyA9IGUgPyBlLlF0IDogdGhpcy5RdCwgdSA9IGksIHMgPSAhMSwgYSA9IHhuKHRoaXMucXVlcnkpICYmIGkuc2l6ZSA9PT0gdGhpcy5xdWVyeS5saW1pdCA/IGkubGFzdCgpIDogbnVsbCwgYyA9IEFuKHRoaXMucXVlcnkpICYmIGkuc2l6ZSA9PT0gdGhpcy5xdWVyeS5saW1pdCA/IGkuZmlyc3QoKSA6IG51bGw7XG4gICAgICAgIC8vIERyb3AgZG9jdW1lbnRzIG91dCB0byBtZWV0IGxpbWl0L2xpbWl0VG9MYXN0IHJlcXVpcmVtZW50LlxuICAgICAgICBpZiAodC51dCgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIGggPSBpLmdldCh0KSwgZiA9IGUgaW5zdGFuY2VvZiBibiA/IGUgOiBudWxsO1xuICAgICAgICAgICAgZiAmJiAoZiA9IHFuKG4ucXVlcnksIGYpID8gZiA6IG51bGwpO1xuICAgICAgICAgICAgdmFyIGwgPSAhIWggJiYgbi5RdC5oYXMoaC5rZXkpLCBwID0gISFmICYmIChmLkplIHx8IFxuICAgICAgICAgICAgLy8gV2Ugb25seSBjb25zaWRlciBjb21taXR0ZWQgbXV0YXRpb25zIGZvciBkb2N1bWVudHMgdGhhdCB3ZXJlXG4gICAgICAgICAgICAvLyBtdXRhdGVkIGR1cmluZyB0aGUgbGlmZXRpbWUgb2YgdGhlIHZpZXcuXG4gICAgICAgICAgICBuLlF0LmhhcyhmLmtleSkgJiYgZi5oYXNDb21taXR0ZWRNdXRhdGlvbnMpLCBkID0gITE7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgY2hhbmdlXG4gICAgICAgICAgICBoICYmIGYgPyBoLmRhdGEoKS5pc0VxdWFsKGYuZGF0YSgpKSA/IGwgIT09IHAgJiYgKHIudHJhY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6IDMgLyogTWV0YWRhdGEgKi8gLFxuICAgICAgICAgICAgICAgIGRvYzogZlxuICAgICAgICAgICAgfSksIGQgPSAhMCkgOiBuLnloKGgsIGYpIHx8IChyLnRyYWNrKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAyIC8qIE1vZGlmaWVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGZcbiAgICAgICAgICAgIH0pLCBkID0gITAsIChhICYmIG4uQWgoZiwgYSkgPiAwIHx8IGMgJiYgbi5BaChmLCBjKSA8IDApICYmIChcbiAgICAgICAgICAgIC8vIFRoaXMgZG9jIG1vdmVkIGZyb20gaW5zaWRlIHRoZSBsaW1pdCB0byBvdXRzaWRlIHRoZSBsaW1pdC5cbiAgICAgICAgICAgIC8vIFRoYXQgbWVhbnMgdGhlcmUgbWF5IGJlIHNvbWUgb3RoZXIgZG9jIGluIHRoZSBsb2NhbCBjYWNoZVxuICAgICAgICAgICAgLy8gdGhhdCBzaG91bGQgYmUgaW5jbHVkZWQgaW5zdGVhZC5cbiAgICAgICAgICAgIHMgPSAhMCkpIDogIWggJiYgZiA/IChyLnRyYWNrKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIEFkZGVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGZcbiAgICAgICAgICAgIH0pLCBkID0gITApIDogaCAmJiAhZiAmJiAoci50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBSZW1vdmVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGhcbiAgICAgICAgICAgIH0pLCBkID0gITAsIChhIHx8IGMpICYmIChcbiAgICAgICAgICAgIC8vIEEgZG9jIHdhcyByZW1vdmVkIGZyb20gYSBmdWxsIGxpbWl0IHF1ZXJ5LiBXZSdsbCBuZWVkIHRvXG4gICAgICAgICAgICAvLyByZXF1ZXJ5IGZyb20gdGhlIGxvY2FsIGNhY2hlIHRvIHNlZSBpZiB3ZSBrbm93IGFib3V0IHNvbWUgb3RoZXJcbiAgICAgICAgICAgIC8vIGRvYyB0aGF0IHNob3VsZCBiZSBpbiB0aGUgcmVzdWx0cy5cbiAgICAgICAgICAgIHMgPSAhMCkpLCBkICYmIChmID8gKHUgPSB1LmFkZChmKSwgbyA9IHAgPyBvLmFkZCh0KSA6IG8uZGVsZXRlKHQpKSA6ICh1ID0gdS5kZWxldGUodCksIFxuICAgICAgICAgICAgbyA9IG8uZGVsZXRlKHQpKSk7XG4gICAgICAgIH0pKSwgeG4odGhpcy5xdWVyeSkgfHwgQW4odGhpcy5xdWVyeSkpIGZvciAoO3Uuc2l6ZSA+IHRoaXMucXVlcnkubGltaXQ7ICkge1xuICAgICAgICAgICAgdmFyIGggPSB4bih0aGlzLnF1ZXJ5KSA/IHUubGFzdCgpIDogdS5maXJzdCgpO1xuICAgICAgICAgICAgdSA9IHUuZGVsZXRlKGgua2V5KSwgbyA9IG8uZGVsZXRlKGgua2V5KSwgci50cmFjayh7XG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBSZW1vdmVkICovICxcbiAgICAgICAgICAgICAgICBkb2M6IGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBSaDogdSxcbiAgICAgICAgICAgIFZoOiByLFxuICAgICAgICAgICAgcGg6IHMsXG4gICAgICAgICAgICBRdDogb1xuICAgICAgICB9O1xuICAgIH0sIHQucHJvdG90eXBlLnloID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAvLyBXZSBzdXBwcmVzcyB0aGUgaW5pdGlhbCBjaGFuZ2UgZXZlbnQgZm9yIGRvY3VtZW50cyB0aGF0IHdlcmUgbW9kaWZpZWQgYXNcbiAgICAgICAgLy8gcGFydCBvZiBhIHdyaXRlIGFja25vd2xlZGdtZW50IChlLmcuIHdoZW4gdGhlIHZhbHVlIG9mIGEgc2VydmVyIHRyYW5zZm9ybVxuICAgICAgICAvLyBpcyBhcHBsaWVkKSBhcyBXYXRjaCB3aWxsIHNlbmQgdXMgdGhlIHNhbWUgZG9jdW1lbnQgYWdhaW4uXG4gICAgICAgIC8vIEJ5IHN1cHByZXNzaW5nIHRoZSBldmVudCwgd2Ugb25seSByYWlzZSB0d28gdXNlciB2aXNpYmxlIGV2ZW50cyAob25lIHdpdGhcbiAgICAgICAgLy8gYGhhc1BlbmRpbmdXcml0ZXNgIGFuZCB0aGUgZmluYWwgc3RhdGUgb2YgdGhlIGRvY3VtZW50KSBpbnN0ZWFkIG9mIHRocmVlXG4gICAgICAgIC8vIChvbmUgd2l0aCBgaGFzUGVuZGluZ1dyaXRlc2AsIHRoZSBtb2RpZmllZCBkb2N1bWVudCB3aXRoXG4gICAgICAgIC8vIGBoYXNQZW5kaW5nV3JpdGVzYCBhbmQgdGhlIGZpbmFsIHN0YXRlIG9mIHRoZSBkb2N1bWVudCkuXG4gICAgICAgIHJldHVybiB0LkplICYmIGUuaGFzQ29tbWl0dGVkTXV0YXRpb25zICYmICFlLkplO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHZpZXcgd2l0aCB0aGUgZ2l2ZW4gVmlld0RvY3VtZW50Q2hhbmdlcyBhbmQgb3B0aW9uYWxseSB1cGRhdGVzXG4gICAgICogbGltYm8gZG9jcyBhbmQgc3luYyBzdGF0ZSBmcm9tIHRoZSBwcm92aWRlZCB0YXJnZXQgY2hhbmdlLlxuICAgICAqIEBwYXJhbSBkb2NDaGFuZ2VzIFRoZSBzZXQgb2YgY2hhbmdlcyB0byBtYWtlIHRvIHRoZSB2aWV3J3MgZG9jcy5cbiAgICAgKiBAcGFyYW0gdXBkYXRlTGltYm9Eb2N1bWVudHMgV2hldGhlciB0byB1cGRhdGUgbGltYm8gZG9jdW1lbnRzIGJhc2VkIG9uIHRoaXNcbiAgICAgKiAgICAgICAgY2hhbmdlLlxuICAgICAqIEBwYXJhbSB0YXJnZXRDaGFuZ2UgQSB0YXJnZXQgY2hhbmdlIHRvIGFwcGx5IGZvciBjb21wdXRpbmcgbGltYm8gZG9jcyBhbmRcbiAgICAgKiAgICAgICAgc3luYyBzdGF0ZS5cbiAgICAgKiBAcmV0dXJuIEEgbmV3IFZpZXdDaGFuZ2Ugd2l0aCB0aGUgZ2l2ZW4gZG9jcywgY2hhbmdlcywgYW5kIHN5bmMgc3RhdGUuXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBUaGUgaU9TL0FuZHJvaWQgY2xpZW50cyBhbHdheXMgY29tcHV0ZSBsaW1ibyBkb2N1bWVudCBjaGFuZ2VzLlxuICAgIHQucHJvdG90eXBlLmJpID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSB0aGlzLlJoO1xuICAgICAgICB0aGlzLlJoID0gdC5SaCwgdGhpcy5RdCA9IHQuUXQ7XG4gICAgICAgIC8vIFNvcnQgY2hhbmdlcyBiYXNlZCBvbiB0eXBlIGFuZCBxdWVyeSBjb21wYXJhdG9yXG4gICAgICAgIHZhciBvID0gdC5WaC5xdCgpO1xuICAgICAgICBvLnNvcnQoKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMCAvKiBBZGRlZCAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBNb2RpZmllZCAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzIC8qIE1ldGFkYXRhICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgbWV0YWRhdGEgY2hhbmdlIGlzIGNvbnZlcnRlZCB0byBhIG1vZGlmaWVkIGNoYW5nZSBhdCB0aGUgcHVibGljXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcGkgbGF5ZXIuICBTaW5jZSB3ZSBzb3J0IGJ5IGRvY3VtZW50IGtleSBhbmQgdGhlbiBjaGFuZ2UgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ldGFkYXRhIGFuZCBtb2RpZmllZCBjaGFuZ2VzIG11c3QgYmUgc29ydGVkIGVxdWl2YWxlbnRseS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxIC8qIFJlbW92ZWQgKi8gOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4odCkgLSBuKGUpO1xuICAgICAgICAgICAgfSh0LnR5cGUsIGUudHlwZSkgfHwgci5BaCh0LmRvYywgZS5kb2MpO1xuICAgICAgICB9KSksIHRoaXMuYmgobik7XG4gICAgICAgIHZhciB1ID0gZSA/IHRoaXMuU2goKSA6IFtdLCBzID0gMCA9PT0gdGhpcy5taC5zaXplICYmIHRoaXMuWnQgPyAxIC8qIFN5bmNlZCAqLyA6IDAgLyogTG9jYWwgKi8gLCBhID0gcyAhPT0gdGhpcy5JaDtcbiAgICAgICAgcmV0dXJuIHRoaXMuSWggPSBzLCAwICE9PSBvLmxlbmd0aCB8fCBhID8ge1xuICAgICAgICAgICAgc25hcHNob3Q6IG5ldyBBdCh0aGlzLnF1ZXJ5LCB0LlJoLCBpLCBvLCB0LlF0LCAwIC8qIExvY2FsICovID09PSBzLCBhLCBcbiAgICAgICAgICAgIC8qIGV4Y2x1ZGVzTWV0YWRhdGFDaGFuZ2VzPSAqLyAhMSksXG4gICAgICAgICAgICBEaDogdVxuICAgICAgICB9IDoge1xuICAgICAgICAgICAgRGg6IHVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gbm8gY2hhbmdlc1xuICAgICAgICB9LCBcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGFuIE9ubGluZVN0YXRlIGNoYW5nZSB0byB0aGUgdmlldywgcG90ZW50aWFsbHkgZ2VuZXJhdGluZyBhXG4gICAgICogVmlld0NoYW5nZSBpZiB0aGUgdmlldydzIHN5bmNTdGF0ZSBjaGFuZ2VzIGFzIGEgcmVzdWx0LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkJzID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5adCAmJiBcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovID09PSB0ID8gKFxuICAgICAgICAvLyBJZiB3ZSdyZSBvZmZsaW5lLCBzZXQgYGN1cnJlbnRgIHRvIGZhbHNlIGFuZCB0aGVuIGNhbGwgYXBwbHlDaGFuZ2VzKClcbiAgICAgICAgLy8gdG8gcmVmcmVzaCBvdXIgc3luY1N0YXRlIGFuZCBnZW5lcmF0ZSBhIFZpZXdDaGFuZ2UgYXMgYXBwcm9wcmlhdGUuIFdlXG4gICAgICAgIC8vIGFyZSBndWFyYW50ZWVkIHRvIGdldCBhIG5ldyBUYXJnZXRDaGFuZ2UgdGhhdCBzZXRzIGBjdXJyZW50YCBiYWNrIHRvXG4gICAgICAgIC8vIHRydWUgb25jZSB0aGUgY2xpZW50IGlzIGJhY2sgb25saW5lLlxuICAgICAgICB0aGlzLlp0ID0gITEsIHRoaXMuYmkoe1xuICAgICAgICAgICAgUmg6IHRoaXMuUmgsXG4gICAgICAgICAgICBWaDogbmV3IHh0LFxuICAgICAgICAgICAgUXQ6IHRoaXMuUXQsXG4gICAgICAgICAgICBwaDogITFcbiAgICAgICAgfSwgXG4gICAgICAgIC8qIHVwZGF0ZUxpbWJvRG9jdW1lbnRzPSAqLyAhMSkpIDoge1xuICAgICAgICAgICAgRGg6IFtdXG4gICAgICAgIH07XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBkb2MgZm9yIHRoZSBnaXZlbiBrZXkgc2hvdWxkIGJlIGluIGxpbWJvLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLkNoID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBJZiB0aGUgcmVtb3RlIGVuZCBzYXlzIGl0J3MgcGFydCBvZiB0aGlzIHF1ZXJ5LCBpdCdzIG5vdCBpbiBsaW1iby5cbiAgICAgICAgcmV0dXJuICF0aGlzLkVoLmhhcyh0KSAmJiBcbiAgICAgICAgLy8gVGhlIGxvY2FsIHN0b3JlIGRvZXNuJ3QgdGhpbmsgaXQncyBhIHJlc3VsdCwgc28gaXQgc2hvdWxkbid0IGJlIGluIGxpbWJvLlxuICAgICAgICAhIXRoaXMuUmguaGFzKHQpICYmICF0aGlzLlJoLmdldCh0KS5KZTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHN5bmNlZERvY3VtZW50cywgY3VycmVudCwgYW5kIGxpbWJvIGRvY3MgYmFzZWQgb24gdGhlIGdpdmVuIGNoYW5nZS5cbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGNoYW5nZXMgdG8gd2hpY2ggZG9jcyBhcmUgaW4gbGltYm8uXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuYmggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgdCAmJiAodC50ZS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5FaCA9IGUuRWguYWRkKHQpO1xuICAgICAgICB9KSksIHQuZWUuZm9yRWFjaCgoZnVuY3Rpb24odCkge30pKSwgdC5uZS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5FaCA9IGUuRWguZGVsZXRlKHQpO1xuICAgICAgICB9KSksIHRoaXMuWnQgPSB0Llp0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5TaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIC8vIFdlIGNhbiBvbmx5IGRldGVybWluZSBsaW1ibyBkb2N1bWVudHMgd2hlbiB3ZSdyZSBpbi1zeW5jIHdpdGggdGhlIHNlcnZlci5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuWnQpIHJldHVybiBbXTtcbiAgICAgICAgLy8gVE9ETyhrbGltdCk6IERvIHRoaXMgaW5jcmVtZW50YWxseSBzbyB0aGF0IGl0J3Mgbm90IHF1YWRyYXRpYyB3aGVuXG4gICAgICAgIC8vIHVwZGF0aW5nIG1hbnkgZG9jdW1lbnRzLlxuICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5taDtcbiAgICAgICAgdGhpcy5taCA9IEl0KCksIHRoaXMuUmguZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdC5DaChlLmtleSkgJiYgKHQubWggPSB0Lm1oLmFkZChlLmtleSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIC8vIERpZmYgdGhlIG5ldyBsaW1ibyBkb2NzIHdpdGggdGhlIG9sZCBsaW1ibyBkb2NzLlxuICAgICAgICB2YXIgbiA9IFtdO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0Lm1oLmhhcyhlKSB8fCBuLnB1c2gobmV3IHB1KGUpKTtcbiAgICAgICAgfSkpLCB0aGlzLm1oLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGUuaGFzKHQpIHx8IG4ucHVzaChuZXcgbHUodCkpO1xuICAgICAgICB9KSksIG47XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBpbi1tZW1vcnkgc3RhdGUgb2YgdGhlIGN1cnJlbnQgdmlldyB3aXRoIHRoZSBzdGF0ZSByZWFkIGZyb21cbiAgICAgKiBwZXJzaXN0ZW5jZS5cbiAgICAgKlxuICAgICAqIFdlIHVwZGF0ZSB0aGUgcXVlcnkgdmlldyB3aGVuZXZlciBhIGNsaWVudCdzIHByaW1hcnkgc3RhdHVzIGNoYW5nZXM6XG4gICAgICogLSBXaGVuIGEgY2xpZW50IHRyYW5zaXRpb25zIGZyb20gcHJpbWFyeSB0byBzZWNvbmRhcnksIGl0IGNhbiBtaXNzXG4gICAgICogICBMb2NhbFN0b3JhZ2UgdXBkYXRlcyBhbmQgaXRzIHF1ZXJ5IHZpZXdzIG1heSB0ZW1wb3JhcmlseSBub3QgYmVcbiAgICAgKiAgIHN5bmNocm9uaXplZCB3aXRoIHRoZSBzdGF0ZSBvbiBkaXNrLlxuICAgICAqIC0gRm9yIHNlY29uZGFyeSB0byBwcmltYXJ5IHRyYW5zaXRpb25zLCB0aGUgY2xpZW50IG5lZWRzIHRvIHVwZGF0ZSB0aGUgbGlzdFxuICAgICAqICAgb2YgYHN5bmNlZERvY3VtZW50c2Agc2luY2Ugc2Vjb25kYXJ5IGNsaWVudHMgdXBkYXRlIHRoZWlyIHF1ZXJ5IHZpZXdzXG4gICAgICogICBiYXNlZCBwdXJlbHkgb24gc3ludGhlc2l6ZWQgUmVtb3RlRXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXJ5UmVzdWx0LmRvY3VtZW50cyAtIFRoZSBkb2N1bWVudHMgdGhhdCBtYXRjaCB0aGUgcXVlcnkgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIExvY2FsU3RvcmUuXG4gICAgICogQHBhcmFtIHF1ZXJ5UmVzdWx0LnJlbW90ZUtleXMgLSBUaGUga2V5cyBvZiB0aGUgZG9jdW1lbnRzIHRoYXQgbWF0Y2ggdGhlXG4gICAgICogcXVlcnkgYWNjb3JkaW5nIHRvIHRoZSBiYWNrZW5kLlxuICAgICAqXG4gICAgICogQHJldHVybiBUaGUgVmlld0NoYW5nZSB0aGF0IHJlc3VsdGVkIGZyb20gdGhpcyBzeW5jaHJvbml6YXRpb24uXG4gICAgICovXG4gICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICB0LnByb3RvdHlwZS5OaCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5FaCA9IHQuWGEsIHRoaXMubWggPSBJdCgpO1xuICAgICAgICB2YXIgZSA9IHRoaXMuZ2godC5kb2N1bWVudHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5iaShlLCAvKnVwZGF0ZUxpbWJvRG9jdW1lbnRzPSovICEwKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdmlldyBzbmFwc2hvdCBhcyBpZiB0aGlzIHF1ZXJ5IHdhcyBqdXN0IGxpc3RlbmVkIHRvLiBDb250YWluc1xuICAgICAqIGEgZG9jdW1lbnQgYWRkIGZvciBldmVyeSBleGlzdGluZyBkb2N1bWVudCBhbmQgdGhlIGBmcm9tQ2FjaGVgIGFuZFxuICAgICAqIGBoYXNQZW5kaW5nV3JpdGVzYCBzdGF0dXMgb2YgdGhlIGFscmVhZHkgZXN0YWJsaXNoZWQgdmlldy5cbiAgICAgKi9cbiAgICAvLyBQT1JUSU5HIE5PVEU6IE11bHRpLXRhYiBvbmx5LlxuICAgIHQucHJvdG90eXBlLnhoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBdC5qdCh0aGlzLnF1ZXJ5LCB0aGlzLlJoLCB0aGlzLlF0LCAwIC8qIExvY2FsICovID09PSB0aGlzLkloKTtcbiAgICB9LCB0O1xufSgpLCB2dSA9IGZ1bmN0aW9uKFxuLyoqXG4gICAgICogVGhlIHF1ZXJ5IGl0c2VsZi5cbiAgICAgKi9cbnQsIFxuLyoqXG4gICAgICogVGhlIHRhcmdldCBudW1iZXIgY3JlYXRlZCBieSB0aGUgY2xpZW50IHRoYXQgaXMgdXNlZCBpbiB0aGUgd2F0Y2hcbiAgICAgKiBzdHJlYW0gdG8gaWRlbnRpZnkgdGhpcyBxdWVyeS5cbiAgICAgKi9cbmUsIFxuLyoqXG4gICAgICogVGhlIHZpZXcgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGluZyB0aGUgZmluYWwgbWVyZ2VkIHRydXRoIG9mIHdoYXRcbiAgICAgKiBkb2NzIGFyZSBpbiB0aGUgcXVlcnkuIEl0IGdldHMgbm90aWZpZWQgb2YgbG9jYWwgYW5kIHJlbW90ZSBjaGFuZ2VzLFxuICAgICAqIGFuZCBhcHBsaWVzIHRoZSBxdWVyeSBmaWx0ZXJzIGFuZCBsaW1pdHMgdG8gZGV0ZXJtaW5lIHRoZSBtb3N0IGNvcnJlY3RcbiAgICAgKiBwb3NzaWJsZSByZXN1bHRzLlxuICAgICAqL1xubikge1xuICAgIHRoaXMucXVlcnkgPSB0LCB0aGlzLnRhcmdldElkID0gZSwgdGhpcy52aWV3ID0gbjtcbn0sIHl1ID0gZnVuY3Rpb24odCkge1xuICAgIHRoaXMua2V5ID0gdCwgXG4gICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdG8gdHJ1ZSBvbmNlIHdlJ3ZlIHJlY2VpdmVkIGEgZG9jdW1lbnQuIFRoaXMgaXMgdXNlZCBpblxuICAgICAgICAgICAgICogZ2V0UmVtb3RlS2V5c0ZvclRhcmdldCgpIGFuZCB1bHRpbWF0ZWx5IHVzZWQgYnkgV2F0Y2hDaGFuZ2VBZ2dyZWdhdG9yIHRvXG4gICAgICAgICAgICAgKiBkZWNpZGUgd2hldGhlciBpdCBuZWVkcyB0byBtYW51ZmFjdHVyZSBhIGRlbGV0ZSBldmVudCBmb3IgdGhlIHRhcmdldCBvbmNlXG4gICAgICAgICAgICAgKiB0aGUgdGFyZ2V0IGlzIENVUlJFTlQuXG4gICAgICAgICAgICAgKi9cbiAgICB0aGlzLkZoID0gITE7XG59LCBndSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCBcbiAgICAvLyBQT1JUSU5HIE5PVEU6IE1hbmFnZXMgc3RhdGUgc3luY2hyb25pemF0aW9uIGluIG11bHRpLXRhYiBlbnZpcm9ubWVudHMuXG4gICAgciwgaSwgbykge1xuICAgICAgICB0aGlzLktjID0gdCwgdGhpcy5PaCA9IGUsIHRoaXMuTWggPSBuLCB0aGlzLmtoID0gciwgdGhpcy5jdXJyZW50VXNlciA9IGksIHRoaXMuJGggPSBvLCBcbiAgICAgICAgdGhpcy5MaCA9IHt9LCB0aGlzLkJoID0gbmV3IHEoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBNbih0KTtcbiAgICAgICAgfSksIFJuKSwgdGhpcy5xaCA9IG5ldyBNYXAsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBrZXlzIG9mIGRvY3VtZW50cyB0aGF0IGFyZSBpbiBsaW1ibyBmb3Igd2hpY2ggd2UgaGF2ZW4ndCB5ZXQgc3RhcnRlZCBhXG4gICAgICAgICAgICAgKiBsaW1ibyByZXNvbHV0aW9uIHF1ZXJ5LlxuICAgICAgICAgICAgICovXG4gICAgICAgIHRoaXMuVWggPSBbXSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIHRhcmdldCBJRCBmb3IgZWFjaCBkb2N1bWVudCB0aGF0IGlzIGluIGxpbWJvIHdpdGggYW5cbiAgICAgICAgICAgICAqIGFjdGl2ZSB0YXJnZXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5RaCA9IG5ldyBodChZLlYpLCBcbiAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBLZWVwcyB0cmFjayBvZiB0aGUgaW5mb3JtYXRpb24gYWJvdXQgYW4gYWN0aXZlIGxpbWJvIHJlc29sdXRpb24gZm9yIGVhY2hcbiAgICAgICAgICAgICAqIGFjdGl2ZSB0YXJnZXQgSUQgdGhhdCB3YXMgc3RhcnRlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgbGltYm8gcmVzb2x1dGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLktoID0gbmV3IE1hcCwgdGhpcy5XaCA9IG5ldyB0dSwgXG4gICAgICAgIC8qKiBTdG9yZXMgdXNlciBjb21wbGV0aW9uIGhhbmRsZXJzLCBpbmRleGVkIGJ5IFVzZXIgYW5kIEJhdGNoSWQuICovXG4gICAgICAgIHRoaXMuamggPSB7fSwgXG4gICAgICAgIC8qKiBTdG9yZXMgdXNlciBjYWxsYmFja3Mgd2FpdGluZyBmb3IgYWxsIHBlbmRpbmcgd3JpdGVzIHRvIGJlIGFja25vd2xlZGdlZC4gKi9cbiAgICAgICAgdGhpcy5HaCA9IG5ldyBNYXAsIHRoaXMuemggPSBIaS52bygpLCB0aGlzLm9ubGluZVN0YXRlID0gXCJVbmtub3duXCIgLyogVW5rbm93biAqLyAsIFxuICAgICAgICAvLyBUaGUgcHJpbWFyeSBzdGF0ZSBpcyBzZXQgdG8gYHRydWVgIG9yIGBmYWxzZWAgaW1tZWRpYXRlbHkgYWZ0ZXIgRmlyZXN0b3JlXG4gICAgICAgIC8vIHN0YXJ0dXAuIEluIHRoZSBpbnRlcmltLCBhIGNsaWVudCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIHByaW1hcnkgaWZcbiAgICAgICAgLy8gYGlzUHJpbWFyeWAgaXMgdHJ1ZS5cbiAgICAgICAgdGhpcy5IaCA9IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJKaFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gITAgPT09IHRoaXMuSGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIHQ7XG59KCk7XG5cbi8qKlxuICogSG9sZHMgdGhlIHN0YXRlIG9mIGEgcXVlcnkgdGFyZ2V0LCBpbmNsdWRpbmcgaXRzIHRhcmdldCBJRCBhbmQgd2hldGhlciB0aGVcbiAqIHRhcmdldCBpcyAnbm90LWN1cnJlbnQnLCAnY3VycmVudCcgb3IgJ3JlamVjdGVkJy5cbiAqL1xuLy8gVmlzaWJsZSBmb3IgdGVzdGluZ1xuLyoqXG4gKiBJbml0aWF0ZXMgdGhlIG5ldyBsaXN0ZW4sIHJlc29sdmVzIHByb21pc2Ugd2hlbiBsaXN0ZW4gZW5xdWV1ZWQgdG8gdGhlXG4gKiBzZXJ2ZXIuIEFsbCB0aGUgc3Vic2VxdWVudCB2aWV3IHNuYXBzaG90cyBvciBlcnJvcnMgYXJlIHNlbnQgdG8gdGhlXG4gKiBzdWJzY3JpYmVkIGhhbmRsZXJzLiBSZXR1cm5zIHRoZSBpbml0aWFsIHNuYXBzaG90LlxuICovXG5mdW5jdGlvbiBtdSh0LCByKSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUsIGksIG8sIHUsIHMsIGE7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBlID0gV3UodCksICh1ID0gZS5CaC5nZXQocikpID8gKFxuICAgICAgICAgICAgICAgIC8vIFBPUlRJTkcgTk9URTogV2l0aCBNdWx0aS1UYWIgV2ViLCBpdCBpcyBwb3NzaWJsZSB0aGF0IGEgcXVlcnkgdmlld1xuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgZXhpc3RzIHdoZW4gRXZlbnRNYW5hZ2VyIGNhbGxzIHVzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpc1xuICAgICAgICAgICAgICAgIC8vIGhhcHBlbnMgd2hlbiB0aGUgcHJpbWFyeSB0YWIgaXMgYWxyZWFkeSBsaXN0ZW5pbmcgdG8gdGhpcyBxdWVyeSBvblxuICAgICAgICAgICAgICAgIC8vIGJlaGFsZiBvZiBhbm90aGVyIHRhYiBhbmQgdGhlIHVzZXIgb2YgdGhlIHByaW1hcnkgYWxzbyBzdGFydHMgbGlzdGVuaW5nXG4gICAgICAgICAgICAgICAgLy8gdG8gdGhlIHF1ZXJ5LiBFdmVudE1hbmFnZXIgd2lsbCBub3QgaGF2ZSBhbiBhc3NpZ25lZCB0YXJnZXQgSUQgaW4gdGhpc1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgYW5kIGNhbGxzIGBsaXN0ZW5gIHRvIG9idGFpbiB0aGlzIElELlxuICAgICAgICAgICAgICAgIGkgPSB1LnRhcmdldElkLCBlLmtoLld1KGkpLCBvID0gdS52aWV3LnhoKCksIFsgMyAvKmJyZWFrKi8gLCA0IF0pIDogWyAzIC8qYnJlYWsqLyAsIDEgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCB5byhlLktjLCBQbihyKSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMgPSBuLnNlbnQoKSwgYSA9IGUua2guV3Uocy50YXJnZXRJZCksIGkgPSBzLnRhcmdldElkLCBbIDQgLyp5aWVsZCovICwgd3UoZSwgciwgaSwgXCJjdXJyZW50XCIgPT09IGEpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIG8gPSBuLnNlbnQoKSwgZS5KaCAmJiBPbyhlLk9oLCBzKSwgbi5sYWJlbCA9IDQ7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIG8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSB2aWV3IGZvciBhIHByZXZpb3VzbHkgdW5rbm93biBxdWVyeSBhbmQgY29tcHV0ZXMgaXRzIGluaXRpYWxcbiAqIHNuYXBzaG90LlxuICovIGZ1bmN0aW9uIHd1KHQsIHIsIGksIG8pIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdSwgcywgYSwgYywgaCwgZjtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobC5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgLy8gUE9SVElORyBOT1RFOiBPbiBXZWIgb25seSwgd2UgaW5qZWN0IHRoZSBjb2RlIHRoYXQgcmVnaXN0ZXJzIG5ldyBMaW1ib1xuICAgICAgICAgICAgICAgIC8vIHRhcmdldHMgYmFzZWQgb24gdmlldyBjaGFuZ2VzLiBUaGlzIGFsbG93cyB1cyB0byBvbmx5IGRlcGVuZCBvbiBMaW1ib1xuICAgICAgICAgICAgICAgIC8vIGNoYW5nZXMgd2hlbiB1c2VyIGNvZGUgaW5jbHVkZXMgcXVlcmllcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdC5ZaCA9IGZ1bmN0aW9uKHIsIGksIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIHIsIGksIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIHUsIHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSByLnZpZXcuZ2goaSksIGUucGggPyBbIDQgLyp5aWVsZCovICwgbW8odC5LYywgci5xdWVyeSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB1c2VQcmV2aW91c1Jlc3VsdHM9ICovICExKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LmRvY3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci52aWV3LmdoKG4sIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpIF0gOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHF1ZXJ5IGhhcyBhIGxpbWl0IGFuZCBzb21lIGRvY3Mgd2VyZSByZW1vdmVkLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byByZS1ydW4gdGhlIHF1ZXJ5IGFnYWluc3QgdGhlIGxvY2FsIHN0b3JlIHRvIG1ha2Ugc3VyZSB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlkbid0IGxvc2UgYW55IGdvb2QgZG9jcyB0aGF0IGhhZCBiZWVuIHBhc3QgdGhlIGxpbWl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IG4uc2VudCgpLCBuLmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1ID0gbyAmJiBvLkd0LmdldChyLnRhcmdldElkKSwgcyA9IHIudmlldy5iaShlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHVwZGF0ZUxpbWJvRG9jdW1lbnRzPSAqLyB0LkpoLCB1KSwgWyAyIC8qcmV0dXJuKi8gLCAoUHUodCwgci50YXJnZXRJZCwgcy5EaCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zbmFwc2hvdCkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSh0LCByLCBpLCBvKTtcbiAgICAgICAgICAgICAgICB9LCBbIDQgLyp5aWVsZCovICwgbW8odC5LYywgciwgXG4gICAgICAgICAgICAgICAgLyogdXNlUHJldmlvdXNSZXN1bHRzPSAqLyAhMCkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHUgPSBsLnNlbnQoKSwgcyA9IG5ldyBkdShyLCB1LlhhKSwgYSA9IHMuZ2godS5kb2N1bWVudHMpLCBjID0ga3QuWHQoaSwgbyAmJiBcIk9mZmxpbmVcIiAvKiBPZmZsaW5lICovICE9PSB0Lm9ubGluZVN0YXRlKSwgXG4gICAgICAgICAgICAgICAgaCA9IHMuYmkoYSwgXG4gICAgICAgICAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovIHQuSmgsIGMpLCBQdSh0LCBpLCBoLkRoKSwgZiA9IG5ldyB2dShyLCBpLCBzKSwgWyAyIC8qcmV0dXJuKi8gLCAodC5CaC5zZXQociwgZiksIFxuICAgICAgICAgICAgICAgIHQucWguaGFzKGkpID8gdC5xaC5nZXQoaSkucHVzaChyKSA6IHQucWguc2V0KGksIFsgciBdKSwgaC5zbmFwc2hvdCkgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqIFN0b3BzIGxpc3RlbmluZyB0byB0aGUgcXVlcnkuICovIGZ1bmN0aW9uIGJ1KHQsIHIpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgaSwgbztcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBEKHQpLCBpID0gZS5CaC5nZXQociksIChvID0gZS5xaC5nZXQoaS50YXJnZXRJZCkpLmxlbmd0aCA+IDEgPyBbIDIgLypyZXR1cm4qLyAsIChlLnFoLnNldChpLnRhcmdldElkLCBvLmZpbHRlcigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIVJuKHQsIHIpO1xuICAgICAgICAgICAgICAgIH0pKSksIHZvaWQgZS5CaC5kZWxldGUocikpIF0gOiBlLkpoID8gKFxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBsb2NhbCBxdWVyeSB0YXJnZXQgZmlyc3QgdG8gYWxsb3cgdXMgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgICAgLy8gd2hldGhlciBhbnkgb3RoZXIgY2xpZW50IGlzIHN0aWxsIGludGVyZXN0ZWQgaW4gdGhpcyB0YXJnZXQuXG4gICAgICAgICAgICAgICAgZS5raC5HdShpLnRhcmdldElkKSwgZS5raC5CdShpLnRhcmdldElkKSA/IFsgMyAvKmJyZWFrKi8gLCAyIF0gOiBbIDQgLyp5aWVsZCovICwgZ28oZS5LYywgaS50YXJnZXRJZCwgXG4gICAgICAgICAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMSkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGUua2guSHUoaS50YXJnZXRJZCksIFBvKGUuT2gsIGkudGFyZ2V0SWQpLCBEdShlLCBpLnRhcmdldElkKTtcbiAgICAgICAgICAgICAgICB9KSkuY2F0Y2goSW8pIF0pIDogWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbi5zZW50KCksIG4ubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDUgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIER1KGUsIGkudGFyZ2V0SWQpLCBbIDQgLyp5aWVsZCovICwgZ28oZS5LYywgaS50YXJnZXRJZCwgXG4gICAgICAgICAgICAgICAgLyprZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YT0qLyAhMCkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgbi5zZW50KCksIG4ubGFiZWwgPSA1O1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBJbml0aWF0ZXMgdGhlIHdyaXRlIG9mIGxvY2FsIG11dGF0aW9uIGJhdGNoIHdoaWNoIGludm9sdmVzIGFkZGluZyB0aGVcbiAqIHdyaXRlcyB0byB0aGUgbXV0YXRpb24gcXVldWUsIG5vdGlmeWluZyB0aGUgcmVtb3RlIHN0b3JlIGFib3V0IG5ld1xuICogbXV0YXRpb25zIGFuZCByYWlzaW5nIGV2ZW50cyBmb3IgYW55IGNoYW5nZXMgdGhpcyB3cml0ZSBjYXVzZWQuXG4gKlxuICogVGhlIHByb21pc2UgcmV0dXJuZWQgYnkgdGhpcyBjYWxsIGlzIHJlc29sdmVkIHdoZW4gdGhlIGFib3ZlIHN0ZXBzXG4gKiBoYXZlIGNvbXBsZXRlZCwgKm5vdCogd2hlbiB0aGUgd3JpdGUgd2FzIGFja2VkIGJ5IHRoZSBiYWNrZW5kLiBUaGVcbiAqIHVzZXJDYWxsYmFjayBpcyByZXNvbHZlZCBvbmNlIHRoZSB3cml0ZSB3YXMgYWNrZWQvcmVqZWN0ZWQgYnkgdGhlXG4gKiBiYWNrZW5kIChvciBmYWlsZWQgbG9jYWxseSBmb3IgYW55IG90aGVyIHJlYXNvbikuXG4gKi8gZnVuY3Rpb24gX3UodCwgciwgaSkge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCBvLCB1LCBzO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBlID0gWXUodCksIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbi50cnlzLnB1c2goWyAxLCA1LCAsIDYgXSksIFsgNCAvKnlpZWxkKi8gLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuLCByID0gRCh0KSwgaSA9IEIubm93KCksIG8gPSBlLnJlZHVjZSgoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYWRkKGUua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSksIEl0KCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIkxvY2FsbHkgd3JpdGUgbXV0YXRpb25zXCIsIFwicmVhZHdyaXRlXCIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5HYS5MaSh0LCBvKS5uZXh0KChmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm9uLWlkZW1wb3RlbnQgbXV0YXRpb25zIChzdWNoIGFzIGBGaWVsZFZhbHVlLmluY3JlbWVudCgpYCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgcmVjb3JkIHRoZSBiYXNlIHN0YXRlIGluIGEgc2VwYXJhdGUgcGF0Y2ggbXV0YXRpb24uIFRoaXMgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsYXRlciB1c2VkIHRvIGd1YXJhbnRlZSBjb25zaXN0ZW50IHZhbHVlcyBhbmQgcHJldmVudHMgZmxpY2tlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV2ZW4gaWYgdGhlIGJhY2tlbmQgc2VuZHMgdXMgYW4gdXBkYXRlIHRoYXQgYWxyZWFkeSBpbmNsdWRlcyBvdXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmFuc2Zvcm0uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBbXSwgcyA9IDAsIGEgPSBlOyBzIDwgYS5sZW5ndGg7IHMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGFbc10sIGggPSBvbihjLCBuLmdldChjLmtleSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9IGggJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFRoZSBiYXNlIHN0YXRlIHNob3VsZCBvbmx5IGJlIGFwcGxpZWQgaWYgdGhlcmUncyBzb21lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGRvY3VtZW50IHRvIG92ZXJyaWRlLCBzbyB1c2UgYSBQcmVjb25kaXRpb24gb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhpc3RzPXRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5wdXNoKG5ldyBjbihjLmtleSwgaCwgbW4oaC5wcm90by5tYXBWYWx1ZSksIFplLmV4aXN0cyghMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIueGkuUXIodCwgaSwgdSwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQud2kobik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhdGNoSWQ6IHQuYmF0Y2hJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJaTogZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0oZS5LYywgcikgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG8gPSBuLnNlbnQoKSwgZS5raC5xdShvLmJhdGNoSWQpLCBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gdC5qaFt0LmN1cnJlbnRVc2VyLllzKCldO1xuICAgICAgICAgICAgICAgICAgICByIHx8IChyID0gbmV3IGh0KFYpKSwgciA9IHIucnQoZSwgbiksIHQuamhbdC5jdXJyZW50VXNlci5ZcygpXSA9IHI7XG4gICAgICAgICAgICAgICAgfShlLCBvLmJhdGNoSWQsIGkpLCBbIDQgLyp5aWVsZCovICwgTHUoZSwgby5JaSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDQgLyp5aWVsZCovICwgR28oZS5PaCkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdSA9IG4uc2VudCgpLCBzID0gd3IodSwgXCJGYWlsZWQgdG8gcGVyc2lzdCB3cml0ZVwiKSwgaS5yZWplY3QocyksIFsgMyAvKmJyZWFrKi8gLCA2IF07XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIEFwcGxpZXMgb25lIHJlbW90ZSBldmVudCB0byB0aGUgc3luYyBlbmdpbmUsIG5vdGlmeWluZyBhbnkgdmlld3Mgb2YgdGhlXG4gKiBjaGFuZ2VzLCBhbmQgcmVsZWFzaW5nIGFueSBwZW5kaW5nIG11dGF0aW9uIGJhdGNoZXMgdGhhdCB3b3VsZCBiZWNvbWVcbiAqIHZpc2libGUgYmVjYXVzZSBvZiB0aGUgc25hcHNob3QgdmVyc2lvbiB0aGUgcmVtb3RlIGV2ZW50IGNvbnRhaW5zLlxuICovIGZ1bmN0aW9uIEl1KHQsIHIpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgaTtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZSA9IEQodCksIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbi50cnlzLnB1c2goWyAxLCA0LCAsIDYgXSksIFsgNCAvKnlpZWxkKi8gLCBwbyhlLktjLCByKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA9IG4uc2VudCgpLCBcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgYHJlY2VpdmVkRG9jdW1lbnRgIGFzIGFwcHJvcHJpYXRlIGZvciBhbnkgbGltYm8gdGFyZ2V0cy5cbiAgICAgICAgICAgICAgICByLkd0LmZvckVhY2goKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlLktoLmdldChuKTtcbiAgICAgICAgICAgICAgICAgICAgciAmJiAoXG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoaXMgaXMgYSBsaW1ibyByZXNvbHV0aW9uIGxvb2t1cCwgaXQncyBmb3IgYSBzaW5nbGUgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGl0IGNvdWxkIGJlIGFkZGVkLCBtb2RpZmllZCwgb3IgcmVtb3ZlZCwgYnV0IG5vdCBhIGNvbWJpbmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICBrKHQudGUuc2l6ZSArIHQuZWUuc2l6ZSArIHQubmUuc2l6ZSA8PSAxKSwgdC50ZS5zaXplID4gMCA/IHIuRmggPSAhMCA6IHQuZWUuc2l6ZSA+IDAgPyBrKHIuRmgpIDogdC5uZS5zaXplID4gMCAmJiAoayhyLkZoKSwgXG4gICAgICAgICAgICAgICAgICAgIHIuRmggPSAhMSkpO1xuICAgICAgICAgICAgICAgIH0pKSwgWyA0IC8qeWllbGQqLyAsIEx1KGUsIGksIHIpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBgcmVjZWl2ZWREb2N1bWVudGAgYXMgYXBwcm9wcmlhdGUgZm9yIGFueSBsaW1ibyB0YXJnZXRzLlxuICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDYgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBJbyhuLnNlbnQoKSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBBcHBsaWVzIGFuIE9ubGluZVN0YXRlIGNoYW5nZSB0byB0aGUgc3luYyBlbmdpbmUgYW5kIG5vdGlmaWVzIGFueSB2aWV3cyBvZlxuICogdGhlIGNoYW5nZS5cbiAqLyBmdW5jdGlvbiBFdSh0LCBlLCBuKSB7XG4gICAgdmFyIHIgPSBEKHQpO1xuICAgIC8vIElmIHdlIGFyZSB0aGUgc2Vjb25kYXJ5IGNsaWVudCwgd2UgZXhwbGljaXRseSBpZ25vcmUgdGhlIHJlbW90ZSBzdG9yZSdzXG4gICAgLy8gb25saW5lIHN0YXRlICh0aGUgbG9jYWwgY2xpZW50IG1heSBnbyBvZmZsaW5lLCBldmVuIHRob3VnaCB0aGUgcHJpbWFyeVxuICAgIC8vIHRhYiByZW1haW5zIG9ubGluZSkgYW5kIG9ubHkgYXBwbHkgdGhlIHByaW1hcnkgdGFiJ3Mgb25saW5lIHN0YXRlIGZyb21cbiAgICAvLyBTaGFyZWRDbGllbnRTdGF0ZS5cbiAgICAgICAgaWYgKHIuSmggJiYgMCAvKiBSZW1vdGVTdG9yZSAqLyA9PT0gbiB8fCAhci5KaCAmJiAxIC8qIFNoYXJlZENsaWVudFN0YXRlICovID09PSBuKSB7XG4gICAgICAgIHZhciBpID0gW107XG4gICAgICAgIHIuQmguZm9yRWFjaCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgdmFyIHIgPSBuLnZpZXcuQnMoZSk7XG4gICAgICAgICAgICByLnNuYXBzaG90ICYmIGkucHVzaChyLnNuYXBzaG90KTtcbiAgICAgICAgfSkpLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IEQodCk7XG4gICAgICAgICAgICBuLm9ubGluZVN0YXRlID0gZTtcbiAgICAgICAgICAgIHZhciByID0gITE7XG4gICAgICAgICAgICBuLnF1ZXJpZXMuZm9yRWFjaCgoZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvID0gbi5saXN0ZW5lcnM7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biBnbG9iYWwgc25hcHNob3QgbGlzdGVuZXJzIGlmIGEgY29uc2lzdGVudCBzbmFwc2hvdCBoYXMgYmVlbiBlbWl0dGVkLlxuICAgICAgICAgICAgICAgICAgICBvW2ldLkJzKGUpICYmIChyID0gITApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSwgciAmJiB4cihuKTtcbiAgICAgICAgfShyLk1oLCBlKSwgaS5sZW5ndGggJiYgci5MaC5SYyhpKSwgci5vbmxpbmVTdGF0ZSA9IGUsIHIuSmggJiYgci5raC5adShlKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVqZWN0cyB0aGUgbGlzdGVuIGZvciB0aGUgZ2l2ZW4gdGFyZ2V0SUQuIFRoaXMgY2FuIGJlIHRyaWdnZXJlZCBieSB0aGVcbiAqIGJhY2tlbmQgZm9yIGFueSBhY3RpdmUgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSBzeW5jRW5naW5lIFRoZSBzeW5jIGVuZ2luZSBpbXBsZW1lbnRhdGlvbi5cbiAqIEBwYXJhbSB0YXJnZXRJZCBUaGUgdGFyZ2V0SUQgY29ycmVzcG9uZHMgdG8gb25lIHByZXZpb3VzbHkgaW5pdGlhdGVkIGJ5IHRoZVxuICogdXNlciBhcyBwYXJ0IG9mIFRhcmdldERhdGEgcGFzc2VkIHRvIGxpc3RlbigpIG9uIFJlbW90ZVN0b3JlLlxuICogQHBhcmFtIGVyciBBIGRlc2NyaXB0aW9uIG9mIHRoZSBjb25kaXRpb24gdGhhdCBoYXMgZm9yY2VkIHRoZSByZWplY3Rpb24uXG4gKiBOZWFybHkgYWx3YXlzIHRoaXMgd2lsbCBiZSBhbiBpbmRpY2F0aW9uIHRoYXQgdGhlIHVzZXIgaXMgbm8gbG9uZ2VyXG4gKiBhdXRob3JpemVkIHRvIHNlZSB0aGUgZGF0YSBtYXRjaGluZyB0aGUgdGFyZ2V0LlxuICovIGZ1bmN0aW9uIFR1KHQsIHIsIGkpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgbywgdSwgcywgYSwgYztcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS10YWIgb25seS5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGUgPSBEKHQpKS5raC5KdShyLCBcInJlamVjdGVkXCIsIGkpLCBvID0gZS5LaC5nZXQociksICh1ID0gbyAmJiBvLmtleSkgPyAocyA9IChzID0gbmV3IGh0KFkuVikpLnJ0KHUsIG5ldyBfbih1LCB6Lm1pbigpKSksIFxuICAgICAgICAgICAgICAgIGEgPSBJdCgpLmFkZCh1KSwgYyA9IG5ldyBTdCh6Lm1pbigpLCBcbiAgICAgICAgICAgICAgICAvKiB0YXJnZXRDaGFuZ2VzPSAqLyBuZXcgTWFwLCBcbiAgICAgICAgICAgICAgICAvKiB0YXJnZXRNaXNtYXRjaGVzPSAqLyBuZXcgcHQoViksIHMsIGEpLCBbIDQgLyp5aWVsZCovICwgSXUoZSwgYykgXSkgOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoaXMgcXVlcnkgZmFpbGVkLCB3ZSB3b24ndCB3YW50IHRvIG1hbnVhbGx5IHVubGlzdGVuIHRvIGl0LlxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgcmVtb3ZlIGl0IGZyb20gYm9va2tlZXBpbmcgYWZ0ZXIgd2Ugc3VjY2Vzc2Z1bGx5IGFwcGxpZWQgdGhlXG4gICAgICAgICAgICAgICAgLy8gUmVtb3RlRXZlbnQuIElmIGBhcHBseVJlbW90ZUV2ZW50KClgIHRocm93cywgd2Ugd2FudCB0byByZS1saXN0ZW4gdG9cbiAgICAgICAgICAgICAgICAvLyB0aGlzIHF1ZXJ5IHdoZW4gdGhlIFJlbW90ZVN0b3JlIHJlc3RhcnRzIHRoZSBXYXRjaCBzdHJlYW0sIHdoaWNoIHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIHJlLXRyaWdnZXIgdGhlIHRhcmdldCBmYWlsdXJlLlxuICAgICAgICAgICAgICAgIGUuUWggPSBlLlFoLnJlbW92ZSh1KSwgZS5LaC5kZWxldGUociksIEN1KGUpLCBbIDMgLypicmVhayovICwgNCBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIGdvKGUuS2MsIHIsIFxuICAgICAgICAgICAgICAgIC8qIGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhICovICExKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIER1KGUsIHIsIGkpO1xuICAgICAgICAgICAgICAgIH0pKS5jYXRjaChJbykgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgbi5zZW50KCksIG4ubGFiZWwgPSA0O1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gTnUodCwgcikge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCBpLCBvO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBlID0gRCh0KSwgaSA9IHIuYmF0Y2guYmF0Y2hJZCwgbi5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBuLnRyeXMucHVzaChbIDEsIDQsICwgNiBdKSwgWyA0IC8qeWllbGQqLyAsIGZvKGUuS2MsIHIpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBvID0gbi5zZW50KCksIFxuICAgICAgICAgICAgICAgIC8vIFRoZSBsb2NhbCBzdG9yZSBtYXkgb3IgbWF5IG5vdCBiZSBhYmxlIHRvIGFwcGx5IHRoZSB3cml0ZSByZXN1bHQgYW5kXG4gICAgICAgICAgICAgICAgLy8gcmFpc2UgZXZlbnRzIGltbWVkaWF0ZWx5IChkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgd2F0Y2hlciBpcyBjYXVnaHRcbiAgICAgICAgICAgICAgICAvLyB1cCksIHNvIHdlIHJhaXNlIHVzZXIgY2FsbGJhY2tzIGZpcnN0IHNvIHRoYXQgdGhleSBjb25zaXN0ZW50bHkgaGFwcGVuXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlIGxpc3RlbiBldmVudHMuXG4gICAgICAgICAgICAgICAga3UoZSwgaSwgLyplcnJvcj0qLyBudWxsKSwgU3UoZSwgaSksIGUua2guUXUoaSwgXCJhY2tub3dsZWRnZWRcIiksIFsgNCAvKnlpZWxkKi8gLCBMdShlLCBvKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgbWF5IG9yIG1heSBub3QgYmUgYWJsZSB0byBhcHBseSB0aGUgd3JpdGUgcmVzdWx0IGFuZFxuICAgICAgICAgICAgICAgIC8vIHJhaXNlIGV2ZW50cyBpbW1lZGlhdGVseSAoZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHdhdGNoZXIgaXMgY2F1Z2h0XG4gICAgICAgICAgICAgICAgLy8gdXApLCBzbyB3ZSByYWlzZSB1c2VyIGNhbGxiYWNrcyBmaXJzdCBzbyB0aGF0IHRoZXkgY29uc2lzdGVudGx5IGhhcHBlblxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZSBsaXN0ZW4gZXZlbnRzLlxuICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDYgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBJbyhuLnNlbnQoKSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24geHUodCwgciwgaSkge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCBvO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBlID0gRCh0KSwgbi5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBuLnRyeXMucHVzaChbIDEsIDQsICwgNiBdKSwgWyA0IC8qeWllbGQqLyAsIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBEKHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIlJlamVjdCBiYXRjaFwiLCBcInJlYWR3cml0ZS1wcmltYXJ5XCIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnhpLldyKHQsIGUpLm5leHQoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gayhudWxsICE9PSBlKSwgciA9IGUua2V5cygpLCBuLnhpLllyKHQsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnhpLm5vKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLkdhLkxpKHQsIHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfShlLktjLCByKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbyA9IG4uc2VudCgpLCBcbiAgICAgICAgICAgICAgICAvLyBUaGUgbG9jYWwgc3RvcmUgbWF5IG9yIG1heSBub3QgYmUgYWJsZSB0byBhcHBseSB0aGUgd3JpdGUgcmVzdWx0IGFuZFxuICAgICAgICAgICAgICAgIC8vIHJhaXNlIGV2ZW50cyBpbW1lZGlhdGVseSAoZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHdhdGNoZXIgaXMgY2F1Z2h0IHVwKSxcbiAgICAgICAgICAgICAgICAvLyBzbyB3ZSByYWlzZSB1c2VyIGNhbGxiYWNrcyBmaXJzdCBzbyB0aGF0IHRoZXkgY29uc2lzdGVudGx5IGhhcHBlbiBiZWZvcmVcbiAgICAgICAgICAgICAgICAvLyBsaXN0ZW4gZXZlbnRzLlxuICAgICAgICAgICAgICAgIGt1KGUsIHIsIGkpLCBTdShlLCByKSwgZS5raC5RdShyLCBcInJlamVjdGVkXCIsIGkpLCBbIDQgLyp5aWVsZCovICwgTHUoZSwgbykgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgLy8gVGhlIGxvY2FsIHN0b3JlIG1heSBvciBtYXkgbm90IGJlIGFibGUgdG8gYXBwbHkgdGhlIHdyaXRlIHJlc3VsdCBhbmRcbiAgICAgICAgICAgICAgICAvLyByYWlzZSBldmVudHMgaW1tZWRpYXRlbHkgKGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSB3YXRjaGVyIGlzIGNhdWdodCB1cCksXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgcmFpc2UgdXNlciBjYWxsYmFja3MgZmlyc3Qgc28gdGhhdCB0aGV5IGNvbnNpc3RlbnRseSBoYXBwZW4gYmVmb3JlXG4gICAgICAgICAgICAgICAgLy8gbGlzdGVuIGV2ZW50cy5cbiAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA2IF07XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgSW8obi5zZW50KCkpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDYgXTtcblxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgdXNlciBjYWxsYmFjayB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHBlbmRpbmcgbXV0YXRpb25zIGF0IHRoZSBtb21lbnQgb2YgY2FsbGluZ1xuICogYXJlIGFja25vd2xlZGdlZCAuXG4gKi8gZnVuY3Rpb24gQXUodCwgcikge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCBpLCBvLCB1LCBzO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBNbygoZSA9IEQodCkpLk9oKSB8fCBUKFwiU3luY0VuZ2luZVwiLCBcIlRoZSBuZXR3b3JrIGlzIGRpc2FibGVkLiBUaGUgdGFzayByZXR1cm5lZCBieSAnYXdhaXRQZW5kaW5nV3JpdGVzKCknIHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoZSBuZXR3b3JrIGlzIGVuYWJsZWQuXCIpLCBcbiAgICAgICAgICAgICAgICBuLmxhYmVsID0gMTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMSwgMywgLCA0IF0pLCBbIDQgLyp5aWVsZCovICwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IEQodCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiR2V0IGhpZ2hlc3QgdW5hY2tub3dsZWRnZWQgYmF0Y2ggaWRcIiwgXCJyZWFkb25seVwiLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUueGkuenIodCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KGUuS2MpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiAtMSA9PT0gKGkgPSBuLnNlbnQoKSkgPyBbIDIgLypyZXR1cm4qLyAsIHZvaWQgci5yZXNvbHZlKCkgXSA6ICgobyA9IGUuR2guZ2V0KGkpIHx8IFtdKS5wdXNoKHIpLCBcbiAgICAgICAgICAgICAgICBlLkdoLnNldChpLCBvKSwgWyAzIC8qYnJlYWsqLyAsIDQgXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiB1ID0gbi5zZW50KCksIHMgPSB3cih1LCBcIkluaXRpYWxpemF0aW9uIG9mIHdhaXRGb3JQZW5kaW5nV3JpdGVzKCkgb3BlcmF0aW9uIGZhaWxlZFwiKSwgXG4gICAgICAgICAgICAgICAgci5yZWplY3QocyksIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIFRyaWdnZXJzIHRoZSBjYWxsYmFja3MgdGhhdCBhcmUgd2FpdGluZyBmb3IgdGhpcyBiYXRjaCBpZCB0byBnZXQgYWNrbm93bGVkZ2VkIGJ5IHNlcnZlcixcbiAqIGlmIHRoZXJlIGFyZSBhbnkuXG4gKi8gZnVuY3Rpb24gU3UodCwgZSkge1xuICAgICh0LkdoLmdldChlKSB8fCBbXSkuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICB0LnJlc29sdmUoKTtcbiAgICB9KSksIHQuR2guZGVsZXRlKGUpXG4gICAgLyoqIFJlamVjdCBhbGwgb3V0c3RhbmRpbmcgY2FsbGJhY2tzIHdhaXRpbmcgZm9yIHBlbmRpbmcgd3JpdGVzIHRvIGNvbXBsZXRlLiAqLztcbn1cblxuZnVuY3Rpb24ga3UodCwgZSwgbikge1xuICAgIHZhciByID0gRCh0KSwgaSA9IHIuamhbci5jdXJyZW50VXNlci5ZcygpXTtcbiAgICAvLyBOT1RFOiBNdXRhdGlvbnMgcmVzdG9yZWQgZnJvbSBwZXJzaXN0ZW5jZSB3b24ndCBoYXZlIGNhbGxiYWNrcywgc28gaXQnc1xuICAgIC8vIG9rYXkgZm9yIHRoZXJlIHRvIGJlIG5vIGNhbGxiYWNrIGZvciB0aGlzIElELlxuICAgIGlmIChpKSB7XG4gICAgICAgIHZhciBvID0gaS5nZXQoZSk7XG4gICAgICAgIG8gJiYgKG4gPyBvLnJlamVjdChuKSA6IG8ucmVzb2x2ZSgpLCBpID0gaS5yZW1vdmUoZSkpLCByLmpoW3IuY3VycmVudFVzZXIuWXMoKV0gPSBpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gRHUodCwgZSwgbikge1xuICAgIHZvaWQgMCA9PT0gbiAmJiAobiA9IG51bGwpLCB0LmtoLkd1KGUpO1xuICAgIGZvciAodmFyIHIgPSAwLCBpID0gdC5xaC5nZXQoZSk7IHIgPCBpLmxlbmd0aDsgcisrKSB7XG4gICAgICAgIHZhciBvID0gaVtyXTtcbiAgICAgICAgdC5CaC5kZWxldGUobyksIG4gJiYgdC5MaC5YaChvLCBuKTtcbiAgICB9XG4gICAgdC5xaC5kZWxldGUoZSksIHQuSmggJiYgdC5XaC5kdShlKS5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgIHQuV2guc28oZSkgfHwgXG4gICAgICAgIC8vIFdlIHJlbW92ZWQgdGhlIGxhc3QgcmVmZXJlbmNlIGZvciB0aGlzIGtleVxuICAgICAgICBPdSh0LCBlKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIE91KHQsIGUpIHtcbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHRhcmdldCBhbHJlYWR5IGdvdCByZW1vdmVkIGJlY2F1c2UgdGhlIHF1ZXJ5IGZhaWxlZC4gSW4gdGhhdCBjYXNlLFxuICAgIC8vIHRoZSBrZXkgd29uJ3QgZXhpc3QgaW4gYGxpbWJvVGFyZ2V0c0J5S2V5YC4gT25seSBkbyB0aGUgY2xlYW51cCBpZiB3ZSBzdGlsbCBoYXZlIHRoZSB0YXJnZXQuXG4gICAgdmFyIG4gPSB0LlFoLmdldChlKTtcbiAgICBudWxsICE9PSBuICYmIChQbyh0Lk9oLCBuKSwgdC5RaCA9IHQuUWgucmVtb3ZlKGUpLCB0LktoLmRlbGV0ZShuKSwgQ3UodCkpO1xufVxuXG5mdW5jdGlvbiBQdSh0LCBlLCBuKSB7XG4gICAgZm9yICh2YXIgciA9IDAsIGkgPSBuOyByIDwgaS5sZW5ndGg7IHIrKykge1xuICAgICAgICB2YXIgbyA9IGlbcl07XG4gICAgICAgIG8gaW5zdGFuY2VvZiBsdSA/ICh0LldoLlFvKG8ua2V5LCBlKSwgVnUodCwgbykpIDogbyBpbnN0YW5jZW9mIHB1ID8gKFQoXCJTeW5jRW5naW5lXCIsIFwiRG9jdW1lbnQgbm8gbG9uZ2VyIGluIGxpbWJvOiBcIiArIG8ua2V5KSwgXG4gICAgICAgIHQuV2guV28oby5rZXksIGUpLCB0LldoLnNvKG8ua2V5KSB8fCBcbiAgICAgICAgLy8gV2UgcmVtb3ZlZCB0aGUgbGFzdCByZWZlcmVuY2UgZm9yIHRoaXMga2V5XG4gICAgICAgIE91KHQsIG8ua2V5KSkgOiBTKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBWdSh0LCBlKSB7XG4gICAgdmFyIG4gPSBlLmtleTtcbiAgICB0LlFoLmdldChuKSB8fCAoVChcIlN5bmNFbmdpbmVcIiwgXCJOZXcgZG9jdW1lbnQgaW4gbGltYm86IFwiICsgbiksIHQuVWgucHVzaChuKSwgQ3UodCkpO1xufVxuXG4vKipcbiAqIFN0YXJ0cyBsaXN0ZW5zIGZvciBkb2N1bWVudHMgaW4gbGltYm8gdGhhdCBhcmUgZW5xdWV1ZWQgZm9yIHJlc29sdXRpb24sXG4gKiBzdWJqZWN0IHRvIGEgbWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCByZXNvbHV0aW9ucy5cbiAqXG4gKiBXaXRob3V0IGJvdW5kaW5nIHRoZSBudW1iZXIgb2YgY29uY3VycmVudCByZXNvbHV0aW9ucywgdGhlIHNlcnZlciBjYW4gZmFpbFxuICogd2l0aCBcInJlc291cmNlIGV4aGF1c3RlZFwiIGVycm9ycyB3aGljaCBjYW4gbGVhZCB0byBwYXRob2xvZ2ljYWwgY2xpZW50XG4gKiBiZWhhdmlvciBhcyBzZWVuIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzI2ODMuXG4gKi8gZnVuY3Rpb24gQ3UodCkge1xuICAgIGZvciAoO3QuVWgubGVuZ3RoID4gMCAmJiB0LlFoLnNpemUgPCB0LiRoOyApIHtcbiAgICAgICAgdmFyIGUgPSB0LlVoLnNoaWZ0KCksIG4gPSB0LnpoLm5leHQoKTtcbiAgICAgICAgdC5LaC5zZXQobiwgbmV3IHl1KGUpKSwgdC5RaCA9IHQuUWgucnQoZSwgbiksIE9vKHQuT2gsIG5ldyB1dChQbihObihlLnBhdGgpKSwgbiwgMiAvKiBMaW1ib1Jlc29sdXRpb24gKi8gLCB6ci5ucikpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gTHUodCwgciwgaSkge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvLCB1LCBzLCBhO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgc3dpdGNoIChjLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbyA9IEQodCksIHUgPSBbXSwgcyA9IFtdLCBhID0gW10sIG8uQmguVCgpID8gWyAzIC8qYnJlYWsqLyAsIDMgXSA6IChvLkJoLmZvckVhY2goKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKG8uWWgoZSwgciwgaSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLkpoICYmIG8ua2guSnUoZS50YXJnZXRJZCwgdC5mcm9tQ2FjaGUgPyBcIm5vdC1jdXJyZW50XCIgOiBcImN1cnJlbnRcIiksIHUucHVzaCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IEJyLllpKGUudGFyZ2V0SWQsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICB9KSksIFsgNCAvKnlpZWxkKi8gLCBQcm9taXNlLmFsbChhKSBdKTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMuc2VudCgpLCBvLkxoLlJjKHUpLCBbIDQgLyp5aWVsZCovICwgZnVuY3Rpb24odCwgcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIGksIG8sIHUsIHMsIGEsIGMsIGgsIGY7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gRCh0KSwgbi5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMSwgMywgLCA0IF0pLCBbIDQgLyp5aWVsZCovICwgZS5wZXJzaXN0ZW5jZS5ydW5UcmFuc2FjdGlvbihcIm5vdGlmeUxvY2FsVmlld0NoYW5nZXNcIiwgXCJyZWFkd3JpdGVcIiwgKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvci5mb3JFYWNoKHIsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yLmZvckVhY2gobi5IaSwgKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucGVyc2lzdGVuY2UuTHIuUW8odCwgbi50YXJnZXRJZCwgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLm5leHQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3IuZm9yRWFjaChuLkppLCAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucGVyc2lzdGVuY2UuTHIuV28odCwgbi50YXJnZXRJZCwgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgWyAzIC8qYnJlYWsqLyAsIDQgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNyKGkgPSBuLnNlbnQoKSkpIHRocm93IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGBub3RpZnlMb2NhbFZpZXdDaGFuZ2VzYCBmYWlscywgd2UgZGlkIG5vdCBhZHZhbmNlIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBudW1iZXIgZm9yIHRoZSBkb2N1bWVudHMgdGhhdCB3ZXJlIGluY2x1ZGVkIGluIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbWlnaHQgdHJpZ2dlciB0aGVtIHRvIGJlIGRlbGV0ZWQgZWFybGllciB0aGFuIHRoZXkgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdvdWxkIGhhdmUsIGJ1dCBpdCBzaG91bGQgbm90IGludmFsaWRhdGUgdGhlIGludGVncml0eSBvZiB0aGUgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVChcIkxvY2FsU3RvcmVcIiwgXCJGYWlsZWQgdG8gdXBkYXRlIHNlcXVlbmNlIG51bWJlcnM6IFwiICsgaSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIDMgLypicmVhayovICwgNCBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyA9IDAsIHUgPSByOyBvIDwgdS5sZW5ndGg7IG8rKykgcyA9IHVbb10sIGEgPSBzLnRhcmdldElkLCBzLmZyb21DYWNoZSB8fCAoYyA9IGUuUWEuZ2V0KGEpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGMuZXQsIGYgPSBjLml0KGgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSB0aGUgbGFzdCBsaW1ibyBmcmVlIHNuYXBzaG90IHZlcnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5RYSA9IGUuUWEucnQoYSwgZikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KG8uS2MsIHMpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGMuc2VudCgpLCBjLmxhYmVsID0gMztcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIFJ1KHQsIHIpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgaTtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChlID0gRCh0KSkuY3VycmVudFVzZXIuaXNFcXVhbChyKSA/IFsgMyAvKmJyZWFrKi8gLCAzIF0gOiAoVChcIlN5bmNFbmdpbmVcIiwgXCJVc2VyIGNoYW5nZS4gTmV3IHVzZXI6XCIsIHIuWXMoKSksIFxuICAgICAgICAgICAgICAgIFsgNCAvKnlpZWxkKi8gLCBobyhlLktjLCByKSBdKTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPSBuLnNlbnQoKSwgZS5jdXJyZW50VXNlciA9IHIsIFxuICAgICAgICAgICAgICAgIC8vIEZhaWxzIHRhc2tzIHdhaXRpbmcgZm9yIHBlbmRpbmcgd3JpdGVzIHJlcXVlc3RlZCBieSBwcmV2aW91cyB1c2VyLlxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdC5HaC5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnJlamVjdChuZXcgaihGLkNBTkNFTExFRCwgXCInd2FpdEZvclBlbmRpbmdXcml0ZXMnIHByb21pc2UgaXMgcmVqZWN0ZWQgZHVlIHRvIGEgdXNlciBjaGFuZ2UuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCB0LkdoLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfShlKSwgXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhiLzExNDIyNjQxNyk6IENvbnNpZGVyIGNhbGxpbmcgdGhpcyBvbmx5IGluIHRoZSBwcmltYXJ5IHRhYi5cbiAgICAgICAgICAgICAgICBlLmtoLlh1KHIsIGkuSmEsIGkuWWEpLCBbIDQgLyp5aWVsZCovICwgTHUoZSwgaS5IYSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbi5zZW50KCksIG4ubGFiZWwgPSAzO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gTXUodCwgZSkge1xuICAgIHZhciBuID0gRCh0KSwgciA9IG4uS2guZ2V0KGUpO1xuICAgIGlmIChyICYmIHIuRmgpIHJldHVybiBJdCgpLmFkZChyLmtleSk7XG4gICAgdmFyIGkgPSBJdCgpLCBvID0gbi5xaC5nZXQoZSk7XG4gICAgaWYgKCFvKSByZXR1cm4gaTtcbiAgICBmb3IgKHZhciB1ID0gMCwgcyA9IG87IHUgPCBzLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgIHZhciBhID0gc1t1XSwgYyA9IG4uQmguZ2V0KGEpO1xuICAgICAgICBpID0gaS5PdChjLnZpZXcuUGgpO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cblxuLyoqXG4gKiBSZWNvbmNpbGUgdGhlIGxpc3Qgb2Ygc3luY2VkIGRvY3VtZW50cyBpbiBhbiBleGlzdGluZyB2aWV3IHdpdGggdGhvc2VcbiAqIGZyb20gcGVyc2lzdGVuY2UuXG4gKi8gZnVuY3Rpb24gVXUodCwgcikge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCBpLCBvO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIG1vKChlID0gRCh0KSkuS2MsIHIucXVlcnksIFxuICAgICAgICAgICAgICAgIC8qIHVzZVByZXZpb3VzUmVzdWx0cz0gKi8gITApIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBpID0gbi5zZW50KCksIG8gPSByLnZpZXcuTmgoaSksIFsgMiAvKnJldHVybiovICwgKGUuSmggJiYgUHUoZSwgci50YXJnZXRJZCwgby5EaCksIFxuICAgICAgICAgICAgICAgIG8pIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIG5ld2x5IGNoYW5nZWQgZG9jdW1lbnRzIGZyb20gcmVtb3RlIGRvY3VtZW50IGNhY2hlIGFuZCByYWlzZXNcbiAqIHNuYXBzaG90cyBpZiBuZWVkZWQuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiBxdSh0KSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCBibygoZSA9IEQodCkpLktjKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEx1KGUsIHQpO1xuICAgICAgICAgICAgfSkpIF07XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qKiBBcHBsaWVzIGEgbXV0YXRpb24gc3RhdGUgdG8gYW4gZXhpc3RpbmcgYmF0Y2guICAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIEZ1KHQsIHIsIGksIG8pIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgdTtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gRCh0KSwgciA9IEQobi54aSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwiTG9va3VwIG11dGF0aW9uIGRvY3VtZW50c1wiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5qcih0LCBlKS5uZXh0KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPyBuLkdhLkxpKHQsIGUpIDogb3IucmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0oKGUgPSBEKHQpKS5LYywgcikgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09ICh1ID0gbi5zZW50KCkpID8gWyAzIC8qYnJlYWsqLyAsIDYgXSA6IFwicGVuZGluZ1wiICE9PSBpID8gWyAzIC8qYnJlYWsqLyAsIDMgXSA6IFsgNCAvKnlpZWxkKi8gLCBHbyhlLk9oKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgdGhlIHByaW1hcnkgY2xpZW50LCB3ZSBuZWVkIHRvIHNlbmQgdGhpcyB3cml0ZSB0byB0aGVcbiAgICAgICAgICAgICAgICAvLyBiYWNrZW5kLiBTZWNvbmRhcnkgY2xpZW50cyB3aWxsIGlnbm9yZSB0aGVzZSB3cml0ZXMgc2luY2UgdGhlaXIgcmVtb3RlXG4gICAgICAgICAgICAgICAgLy8gY29ubmVjdGlvbiBpcyBkaXNhYmxlZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIFwiYWNrbm93bGVkZ2VkXCIgPT09IGkgfHwgXCJyZWplY3RlZFwiID09PSBpID8gKFxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IEJvdGggdGhlc2UgbWV0aG9kcyBhcmUgbm8tb3BzIGZvciBiYXRjaGVzIHRoYXQgb3JpZ2luYXRlZCBmcm9tXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgY2xpZW50cy5cbiAgICAgICAgICAgICAgICBrdShlLCByLCBvIHx8IG51bGwpLCBTdShlLCByKSwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICBEKEQodCkueGkpLlpyKGUpO1xuICAgICAgICAgICAgICAgIH0oZS5LYywgcikpIDogUygpLCBuLmxhYmVsID0gNDtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBMdShlLCB1KSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgMyAvKmJyZWFrKi8gLCA3IF07XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIC8vIEEgdGhyb3R0bGVkIHRhYiBtYXkgbm90IGhhdmUgc2VlbiB0aGUgbXV0YXRpb24gYmVmb3JlIGl0IHdhcyBjb21wbGV0ZWRcbiAgICAgICAgICAgICAgICAvLyBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBtdXRhdGlvbiBxdWV1ZSwgaW4gd2hpY2ggY2FzZSB3ZSB3b24ndCBoYXZlIGNhY2hlZFxuICAgICAgICAgICAgICAgIC8vIHRoZSBhZmZlY3RlZCBkb2N1bWVudHMuIEluIHRoaXMgY2FzZSB3ZSBjYW4gc2FmZWx5IGlnbm9yZSB0aGUgdXBkYXRlXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhhdCBtZWFucyB3ZSBkaWRuJ3QgYXBwbHkgdGhlIG11dGF0aW9uIGxvY2FsbHkgYXQgYWxsIChpZiB3ZVxuICAgICAgICAgICAgICAgIC8vIGhhZCwgd2Ugd291bGQgaGF2ZSBjYWNoZWQgdGhlIGFmZmVjdGVkIGRvY3VtZW50cyksIGFuZCBzbyB3ZSB3aWxsIGp1c3RcbiAgICAgICAgICAgICAgICAvLyBzZWUgYW55IHJlc3VsdGluZyBkb2N1bWVudCBjaGFuZ2VzIHZpYSBub3JtYWwgcmVtb3RlIGRvY3VtZW50IHVwZGF0ZXNcbiAgICAgICAgICAgICAgICAvLyBhcyBhcHBsaWNhYmxlLlxuICAgICAgICAgICAgICAgIFQoXCJTeW5jRW5naW5lXCIsIFwiQ2Fubm90IGFwcGx5IG11dGF0aW9uIGJhdGNoIHdpdGggaWQ6IFwiICsgciksIG4ubGFiZWwgPSA3O1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqIEFwcGxpZXMgYSBxdWVyeSB0YXJnZXQgY2hhbmdlIGZyb20gYSBkaWZmZXJlbnQgdGFiLiAqL1xuLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbmZ1bmN0aW9uIGp1KHQsIHIpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgaSwgbywgdSwgcywgYSwgYywgaDtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFd1KGUgPSBEKHQpKSwgWXUoZSksICEwICE9PSByIHx8ICEwID09PSBlLkhoID8gWyAzIC8qYnJlYWsqLyAsIDMgXSA6IChpID0gZS5raC4kdSgpLCBcbiAgICAgICAgICAgICAgICBbIDQgLyp5aWVsZCovICwgQnUoZSwgaS5PKCkpIF0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbyA9IG4uc2VudCgpLCBlLkhoID0gITAsIFsgNCAvKnlpZWxkKi8gLCBYbyhlLk9oLCAhMCkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZm9yIChuLnNlbnQoKSwgdSA9IDAsIHMgPSBvOyB1IDwgcy5sZW5ndGg7IHUrKykgYSA9IHNbdV0sIE9vKGUuT2gsIGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbIDMgLypicmVhayovICwgNyBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gITEgIT09IHIgfHwgITEgPT09IGUuSGggPyBbIDMgLypicmVhayovICwgNyBdIDogKGMgPSBbXSwgaCA9IFByb21pc2UucmVzb2x2ZSgpLCBcbiAgICAgICAgICAgICAgICBlLnFoLmZvckVhY2goKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgZS5raC56dShuKSA/IGMucHVzaChuKSA6IGggPSBoLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIER1KGUsIG4pLCBnbyhlLktjLCBuLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qa2VlcFBlcnNpc3RlZFRhcmdldERhdGE9Ki8gITApO1xuICAgICAgICAgICAgICAgICAgICB9KSksIFBvKGUuT2gsIG4pO1xuICAgICAgICAgICAgICAgIH0pKSwgWyA0IC8qeWllbGQqLyAsIGggXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIEJ1KGUsIGMpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgXG4gICAgICAgICAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNdWx0aS1UYWIgb25seS5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gRCh0KTtcbiAgICAgICAgICAgICAgICAgICAgZS5LaC5mb3JFYWNoKChmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQbyhlLk9oLCBuKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBlLldoLnd1KCksIGUuS2ggPSBuZXcgTWFwLCBlLlFoID0gbmV3IGh0KFkuVik7XG4gICAgICAgICAgICAgICAgfShlKSwgZS5IaCA9ICExLCBbIDQgLyp5aWVsZCovICwgWG8oZS5PaCwgITEpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIG4uc2VudCgpLCBuLmxhYmVsID0gNztcblxuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIEJ1KHQsIHIsIGkpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgaSwgbywgdSwgcywgYSwgYywgaCwgZiwgbCwgcCwgZCwgdiwgeTtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZSA9IEQodCksIGkgPSBbXSwgbyA9IFtdLCB1ID0gMCwgcyA9IHIsIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdSA8IHMubGVuZ3RoID8gKGEgPSBzW3VdLCBjID0gdm9pZCAwLCAoaCA9IGUucWguZ2V0KGEpKSAmJiAwICE9PSBoLmxlbmd0aCA/IFsgNCAvKnlpZWxkKi8gLCB5byhlLktjLCBQbihoWzBdKSkgXSA6IFsgMyAvKmJyZWFrKi8gLCA3IF0pIDogWyAzIC8qYnJlYWsqLyAsIDEzIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIC8vIEZvciBxdWVyaWVzIHRoYXQgaGF2ZSBhIGxvY2FsIFZpZXcsIHdlIGZldGNoIHRoZWlyIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgICAgICAvLyBmcm9tIExvY2FsU3RvcmUgKGFzIHRoZSByZXN1bWUgdG9rZW4gYW5kIHRoZSBzbmFwc2hvdCB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgLy8gbWlnaHQgaGF2ZSBjaGFuZ2VkKSBhbmQgcmVjb25jaWxlIHRoZWlyIHZpZXdzIHdpdGggdGhlIHBlcnNpc3RlZFxuICAgICAgICAgICAgICAgIC8vIHN0YXRlICh0aGUgbGlzdCBvZiBzeW5jZWREb2N1bWVudHMgbWF5IGhhdmUgZ290dGVuIG91dCBvZiBzeW5jKS5cbiAgICAgICAgICAgICAgICBjID0gbi5zZW50KCksIGYgPSAwLCBsID0gaCwgbi5sYWJlbCA9IDM7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiBmIDwgbC5sZW5ndGggPyAocCA9IGxbZl0sIGQgPSBlLkJoLmdldChwKSwgWyA0IC8qeWllbGQqLyAsIFV1KGUsIGQpIF0pIDogWyAzIC8qYnJlYWsqLyAsIDYgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgKHYgPSBuLnNlbnQoKSkuc25hcHNob3QgJiYgby5wdXNoKHYuc25hcHNob3QpLCBuLmxhYmVsID0gNTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYrKywgWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCAxMSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHdvKGUuS2MsIGEpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHJldHVybiB5ID0gbi5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCB5byhlLktjLCB5KSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA9IG4uc2VudCgpLCBbIDQgLyp5aWVsZCovICwgd3UoZSwgenUoeSksIGEsIFxuICAgICAgICAgICAgICAgIC8qY3VycmVudD0qLyAhMSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIG4uc2VudCgpLCBuLmxhYmVsID0gMTE7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBpLnB1c2goYyksIG4ubGFiZWwgPSAxMjtcblxuICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIHJldHVybiB1KyssIFsgMyAvKmJyZWFrKi8gLCAxIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCAoZS5MaC5SYyhvKSwgaSkgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYFF1ZXJ5YCBvYmplY3QgZnJvbSB0aGUgc3BlY2lmaWVkIGBUYXJnZXRgLiBUaGVyZSBpcyBubyB3YXkgdG9cbiAqIG9idGFpbiB0aGUgb3JpZ2luYWwgYFF1ZXJ5YCwgc28gd2Ugc3ludGhlc2l6ZSBhIGBRdWVyeWAgZnJvbSB0aGUgYFRhcmdldGBcbiAqIG9iamVjdC5cbiAqXG4gKiBUaGUgc3ludGhlc2l6ZWQgcmVzdWx0IG1pZ2h0IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBvcmlnaW5hbCBgUXVlcnlgLCBidXRcbiAqIHNpbmNlIHRoZSBzeW50aGVzaXplZCBgUXVlcnlgIHNob3VsZCByZXR1cm4gdGhlIHNhbWUgcmVzdWx0cyBhcyB0aGVcbiAqIG9yaWdpbmFsIG9uZSAob25seSB0aGUgcHJlc2VudGF0aW9uIG9mIHJlc3VsdHMgbWlnaHQgZGlmZmVyKSwgdGhlIHBvdGVudGlhbFxuICogZGlmZmVyZW5jZSB3aWxsIG5vdCBjYXVzZSBpc3N1ZXMuXG4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiB6dSh0KSB7XG4gICAgcmV0dXJuIFRuKHQucGF0aCwgdC5jb2xsZWN0aW9uR3JvdXAsIHQub3JkZXJCeSwgdC5maWx0ZXJzLCB0LmxpbWl0LCBcIkZcIiAvKiBGaXJzdCAqLyAsIHQuc3RhcnRBdCwgdC5lbmRBdCk7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBJRHMgb2YgdGhlIGNsaWVudHMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiBHdSh0KSB7XG4gICAgdmFyIGUgPSBEKHQpO1xuICAgIHJldHVybiBEKEQoZS5LYykucGVyc2lzdGVuY2UpLkNhKCk7XG59XG5cbi8qKiBBcHBsaWVzIGEgcXVlcnkgdGFyZ2V0IGNoYW5nZSBmcm9tIGEgZGlmZmVyZW50IHRhYi4gKi9cbi8vIFBPUlRJTkcgTk9URTogTXVsdGktVGFiIG9ubHkuXG5mdW5jdGlvbiBLdSh0LCByLCBpLCBvKSB7XG4gICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUsIHUsIHM7XG4gICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiAoZSA9IEQodCkpLkhoID8gKFxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlY2VpdmUgYSB0YXJnZXQgc3RhdGUgbm90aWZpY2F0aW9uIHZpYSBXZWJTdG9yYWdlLCB3ZSBhcmVcbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgYWxyZWFkeSBzZWNvbmRhcnkgb3IgYW5vdGhlciB0YWIgaGFzIHRha2VuIHRoZSBwcmltYXJ5IGxlYXNlLlxuICAgICAgICAgICAgICAgIFQoXCJTeW5jRW5naW5lXCIsIFwiSWdub3JpbmcgdW5leHBlY3RlZCBxdWVyeSBzdGF0ZSBub3RpZmljYXRpb24uXCIpLCBbIDMgLypicmVhayovICwgOCBdKSA6IFsgMyAvKmJyZWFrKi8gLCAxIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmICghZS5xaC5oYXMocikpIHJldHVybiBbIDMgLypicmVhayovICwgOCBdO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImN1cnJlbnRcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3QtY3VycmVudFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDIgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDMgLypicmVhayovICwgNSBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWyAzIC8qYnJlYWsqLyAsIDcgXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBibyhlLktjKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdSA9IG4uc2VudCgpLCBzID0gU3QuWXQociwgXCJjdXJyZW50XCIgPT09IGkpLCBbIDQgLyp5aWVsZCovICwgTHUoZSwgdSwgcykgXTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDMgLypicmVhayovICwgOCBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIGdvKGUuS2MsIHIsIFxuICAgICAgICAgICAgICAgIC8qIGtlZXBQZXJzaXN0ZWRUYXJnZXREYXRhICovICEwKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIER1KGUsIHIsIG8pLCBbIDMgLypicmVhayovICwgOCBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBTKCksIG4ubGFiZWwgPSA4O1xuXG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqIEFkZHMgb3IgcmVtb3ZlcyBXYXRjaCB0YXJnZXRzIGZvciBxdWVyaWVzIGZyb20gZGlmZmVyZW50IHRhYnMuICovIGZ1bmN0aW9uIFF1KHQsIHIsIGkpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgbywgdSwgcywgYSwgYywgaCwgZiwgbCwgcDtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZC5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCEoZSA9IFd1KHQpKS5IaCkgcmV0dXJuIFsgMyAvKmJyZWFrKi8gLCAxMCBdO1xuICAgICAgICAgICAgICAgIG8gPSAwLCB1ID0gciwgZC5sYWJlbCA9IDE7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBvIDwgdS5sZW5ndGggPyAocyA9IHVbb10sIGUucWguaGFzKHMpID8gKFxuICAgICAgICAgICAgICAgIC8vIEEgdGFyZ2V0IG1pZ2h0IGhhdmUgYmVlbiBhZGRlZCBpbiBhIHByZXZpb3VzIGF0dGVtcHRcbiAgICAgICAgICAgICAgICBUKFwiU3luY0VuZ2luZVwiLCBcIkFkZGluZyBhbiBhbHJlYWR5IGFjdGl2ZSB0YXJnZXQgXCIgKyBzKSwgWyAzIC8qYnJlYWsqLyAsIDUgXSkgOiBbIDQgLyp5aWVsZCovICwgd28oZS5LYywgcykgXSkgOiBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYSA9IGQuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgeW8oZS5LYywgYSkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgPSBkLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIHd1KGUsIHp1KGEpLCBjLnRhcmdldElkLCBcbiAgICAgICAgICAgICAgICAvKmN1cnJlbnQ9Ki8gITEpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGQuc2VudCgpLCBPbyhlLk9oLCBjKSwgZC5sYWJlbCA9IDU7XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiBvKyssIFsgMyAvKmJyZWFrKi8gLCAxIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGggPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnFoLmhhcyh0KSA/IFsgNCAvKnlpZWxkKi8gLCBnbyhlLktjLCB0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBrZWVwUGVyc2lzdGVkVGFyZ2V0RGF0YSAqLyAhMSkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvKGUuT2gsIHQpLCBEdShlLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkuY2F0Y2goSW8pIF0gOiBbIDMgLypicmVhayovICwgMiBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVsZWFzZSBxdWVyaWVzIHRoYXQgYXJlIHN0aWxsIGFjdGl2ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWxlYXNlIHF1ZXJpZXMgdGhhdCBhcmUgc3RpbGwgYWN0aXZlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2VudCgpLCBuLmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9LCBmID0gMCwgbCA9IGksIGQubGFiZWwgPSA3O1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZiA8IGwubGVuZ3RoID8gKHAgPSBsW2ZdLCBbIDUgLyp5aWVsZCoqLyAsIGgocCkgXSkgOiBbIDMgLypicmVhayovICwgMTAgXTtcblxuICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgZC5zZW50KCksIGQubGFiZWwgPSA5O1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gZisrLCBbIDMgLypicmVhayovICwgNyBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIFd1KHQpIHtcbiAgICB2YXIgZSA9IEQodCk7XG4gICAgcmV0dXJuIGUuT2guamMubnUgPSBJdS5iaW5kKG51bGwsIGUpLCBlLk9oLmpjLkJlID0gTXUuYmluZChudWxsLCBlKSwgZS5PaC5qYy5ldSA9IFR1LmJpbmQobnVsbCwgZSksIFxuICAgIGUuTGguUmMgPSBUci5iaW5kKG51bGwsIGUuTWgpLCBlLkxoLlhoID0gTnIuYmluZChudWxsLCBlLk1oKSwgZTtcbn1cblxuZnVuY3Rpb24gWXUodCkge1xuICAgIHZhciBlID0gRCh0KTtcbiAgICByZXR1cm4gZS5PaC5qYy5zdSA9IE51LmJpbmQobnVsbCwgZSksIGUuT2guamMuaXUgPSB4dS5iaW5kKG51bGwsIGUpLCBlO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gVE9PRChiLzE0MDkzODUxMik6IERyb3AgU2ltcGxlUXVlcnlFbmdpbmUgYW5kIHJlbmFtZSBJbmRleEZyZWVRdWVyeUVuZ2luZS5cbi8qKlxuICogQSBxdWVyeSBlbmdpbmUgdGhhdCB0YWtlcyBhZHZhbnRhZ2Ugb2YgdGhlIHRhcmdldCBkb2N1bWVudCBtYXBwaW5nIGluIHRoZVxuICogUXVlcnlDYWNoZS4gVGhlIEluZGV4RnJlZVF1ZXJ5RW5naW5lIG9wdGltaXplcyBxdWVyeSBleGVjdXRpb24gYnkgb25seVxuICogcmVhZGluZyB0aGUgZG9jdW1lbnRzIHRoYXQgcHJldmlvdXNseSBtYXRjaGVkIGEgcXVlcnkgcGx1cyBhbnkgZG9jdW1lbnRzIHRoYXQgd2VyZVxuICogZWRpdGVkIGFmdGVyIHRoZSBxdWVyeSB3YXMgbGFzdCBsaXN0ZW5lZCB0by5cbiAqXG4gKiBUaGVyZSBhcmUgc29tZSBjYXNlcyB3aGVyZSBJbmRleC1GcmVlIHF1ZXJpZXMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIHByb2R1Y2VcbiAqIHRoZSBzYW1lIHJlc3VsdHMgYXMgZnVsbCBjb2xsZWN0aW9uIHNjYW5zLiBJbiB0aGVzZSBjYXNlcywgdGhlXG4gKiBJbmRleEZyZWVRdWVyeUVuZ2luZSBmYWxscyBiYWNrIHRvIGZ1bGwgcXVlcnkgcHJvY2Vzc2luZy4gVGhlc2UgY2FzZXMgYXJlOlxuICpcbiAqIC0gTGltaXQgcXVlcmllcyB3aGVyZSBhIGRvY3VtZW50IHRoYXQgbWF0Y2hlZCB0aGUgcXVlcnkgcHJldmlvdXNseSBubyBsb25nZXJcbiAqICAgbWF0Y2hlcyB0aGUgcXVlcnkuXG4gKlxuICogLSBMaW1pdCBxdWVyaWVzIHdoZXJlIGEgZG9jdW1lbnQgZWRpdCBtYXkgY2F1c2UgdGhlIGRvY3VtZW50IHRvIHNvcnQgYmVsb3dcbiAqICAgYW5vdGhlciBkb2N1bWVudCB0aGF0IGlzIGluIHRoZSBsb2NhbCBjYWNoZS5cbiAqXG4gKiAtIFF1ZXJpZXMgdGhhdCBoYXZlIG5ldmVyIGJlZW4gQ1VSUkVOVCBvciBmcmVlIG9mIExpbWJvIGRvY3VtZW50cy5cbiAqLyB2YXIgSHUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7fVxuICAgIHJldHVybiB0LnByb3RvdHlwZS56YSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5aaCA9IHQ7XG4gICAgfSwgdC5wcm90b3R5cGUuVWkgPSBmdW5jdGlvbih0LCBlLCBuLCByKSB7XG4gICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgLy8gUXVlcmllcyB0aGF0IG1hdGNoIGFsbCBkb2N1bWVudHMgZG9uJ3QgYmVuZWZpdCBmcm9tIHVzaW5nXG4gICAgICAgIC8vIEluZGV4RnJlZVF1ZXJpZXMuIEl0IGlzIG1vcmUgZWZmaWNpZW50IHRvIHNjYW4gYWxsIGRvY3VtZW50cyBpbiBhXG4gICAgICAgIC8vIGNvbGxlY3Rpb24sIHJhdGhlciB0aGFuIHRvIHBlcmZvcm0gaW5kaXZpZHVhbCBsb29rdXBzLlxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gMCA9PT0gdC5maWx0ZXJzLmxlbmd0aCAmJiBudWxsID09PSB0LmxpbWl0ICYmIG51bGwgPT0gdC5zdGFydEF0ICYmIG51bGwgPT0gdC5lbmRBdCAmJiAoMCA9PT0gdC5ybi5sZW5ndGggfHwgMSA9PT0gdC5ybi5sZW5ndGggJiYgdC5yblswXS5maWVsZC5CKCkpO1xuICAgICAgICB9KGUpIHx8IG4uaXNFcXVhbCh6Lm1pbigpKSA/IHRoaXMudGwodCwgZSkgOiB0aGlzLlpoLkxpKHQsIHIpLm5leHQoKGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgIHZhciBzID0gaS5lbChlLCBvKTtcbiAgICAgICAgICAgIHJldHVybiAoeG4oZSkgfHwgQW4oZSkpICYmIGkucGgoZS5saW1pdFR5cGUsIHMsIHIsIG4pID8gaS50bCh0LCBlKSA6IChFKCkgPD0gdS5ERUJVRyAmJiBUKFwiSW5kZXhGcmVlUXVlcnlFbmdpbmVcIiwgXCJSZS11c2luZyBwcmV2aW91cyByZXN1bHQgZnJvbSAlcyB0byBleGVjdXRlIHF1ZXJ5OiAlc1wiLCBuLnRvU3RyaW5nKCksIFVuKGUpKSwgXG4gICAgICAgICAgICBpLlpoLlVpKHQsIGUsIG4pLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBtZXJnZSBgcHJldmlvdXNSZXN1bHRzYCBpbnRvIGB1cGRhdGVSZXN1bHRzYCwgc2luY2VcbiAgICAgICAgICAgICAgICAvLyBgdXBkYXRlUmVzdWx0c2AgaXMgYWxyZWFkeSBhIERvY3VtZW50TWFwLiBJZiBhIGRvY3VtZW50IGlzXG4gICAgICAgICAgICAgICAgLy8gY29udGFpbmVkIGluIGJvdGggbGlzdHMsIHRoZW4gaXRzIGNvbnRlbnRzIGFyZSB0aGUgc2FtZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gcy5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSB0LnJ0KGUua2V5LCBlKTtcbiAgICAgICAgICAgICAgICB9KSksIHQ7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIC8vIFF1ZXJpZXMgdGhhdCBoYXZlIG5ldmVyIHNlZW4gYSBzbmFwc2hvdCB3aXRob3V0IGxpbWJvIGZyZWUgZG9jdW1lbnRzXG4gICAgICAgIC8vIHNob3VsZCBhbHNvIGJlIHJ1biBhcyBhIGZ1bGwgY29sbGVjdGlvbiBzY2FuLlxuICAgICAgICB9LCBcbiAgICAvKiogQXBwbGllcyB0aGUgcXVlcnkgZmlsdGVyIGFuZCBzb3J0aW5nIHRvIHRoZSBwcm92aWRlZCBkb2N1bWVudHMuICAqLyB0LnByb3RvdHlwZS5lbCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gU29ydCB0aGUgZG9jdW1lbnRzIGFuZCByZS1hcHBseSB0aGUgcXVlcnkgZmlsdGVyIHNpbmNlIHByZXZpb3VzbHlcbiAgICAgICAgLy8gbWF0Y2hpbmcgZG9jdW1lbnRzIGRvIG5vdCBuZWNlc3NhcmlseSBzdGlsbCBtYXRjaCB0aGUgcXVlcnkuXG4gICAgICAgIHZhciBuID0gbmV3IHB0KEZuKHQpKTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSwgcikge1xuICAgICAgICAgICAgciBpbnN0YW5jZW9mIGJuICYmIHFuKHQsIHIpICYmIChuID0gbi5hZGQocikpO1xuICAgICAgICB9KSksIG47XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIGxpbWl0IHF1ZXJ5IG5lZWRzIHRvIGJlIHJlZmlsbGVkIGZyb20gY2FjaGUsIG1ha2luZyBpdFxuICAgICAqIGluZWxpZ2libGUgZm9yIGluZGV4LWZyZWUgZXhlY3V0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvcnRlZFByZXZpb3VzUmVzdWx0cyBUaGUgZG9jdW1lbnRzIHRoYXQgbWF0Y2hlZCB0aGUgcXVlcnkgd2hlbiBpdFxuICAgICAqIHdhcyBsYXN0IHN5bmNocm9uaXplZCwgc29ydGVkIGJ5IHRoZSBxdWVyeSdzIGNvbXBhcmF0b3IuXG4gICAgICogQHBhcmFtIHJlbW90ZUtleXMgVGhlIGRvY3VtZW50IGtleXMgdGhhdCBtYXRjaGVkIHRoZSBxdWVyeSBhdCB0aGUgbGFzdFxuICAgICAqIHNuYXBzaG90LlxuICAgICAqIEBwYXJhbSBsaW1ib0ZyZWVTbmFwc2hvdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIHNuYXBzaG90IHdoZW4gdGhlIHF1ZXJ5XG4gICAgICogd2FzIGxhc3Qgc3luY2hyb25pemVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnBoID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICAvLyBUaGUgcXVlcnkgbmVlZHMgdG8gYmUgcmVmaWxsZWQgaWYgYSBwcmV2aW91c2x5IG1hdGNoaW5nIGRvY3VtZW50IG5vXG4gICAgICAgIC8vIGxvbmdlciBtYXRjaGVzLlxuICAgICAgICBpZiAobi5zaXplICE9PSBlLnNpemUpIHJldHVybiAhMDtcbiAgICAgICAgLy8gTGltaXQgcXVlcmllcyBhcmUgbm90IGVsaWdpYmxlIGZvciBpbmRleC1mcmVlIHF1ZXJ5IGV4ZWN1dGlvbiBpZiB0aGVyZSBpc1xuICAgICAgICAvLyBhIHBvdGVudGlhbCB0aGF0IGFuIG9sZGVyIGRvY3VtZW50IGZyb20gY2FjaGUgbm93IHNvcnRzIGJlZm9yZSBhIGRvY3VtZW50XG4gICAgICAgIC8vIHRoYXQgd2FzIHByZXZpb3VzbHkgcGFydCBvZiB0aGUgbGltaXQuIFRoaXMsIGhvd2V2ZXIsIGNhbiBvbmx5IGhhcHBlbiBpZlxuICAgICAgICAvLyB0aGUgZG9jdW1lbnQgYXQgdGhlIGVkZ2Ugb2YgdGhlIGxpbWl0IGdvZXMgb3V0IG9mIGxpbWl0LlxuICAgICAgICAvLyBJZiBhIGRvY3VtZW50IHRoYXQgaXMgbm90IHRoZSBsaW1pdCBib3VuZGFyeSBzb3J0cyBkaWZmZXJlbnRseSxcbiAgICAgICAgLy8gdGhlIGJvdW5kYXJ5IG9mIHRoZSBsaW1pdCBpdHNlbGYgZGlkIG5vdCBjaGFuZ2UgYW5kIGRvY3VtZW50cyBmcm9tIGNhY2hlXG4gICAgICAgIC8vIHdpbGwgY29udGludWUgdG8gYmUgXCJyZWplY3RlZFwiIGJ5IHRoaXMgYm91bmRhcnkuIFRoZXJlZm9yZSwgd2UgY2FuIGlnbm9yZVxuICAgICAgICAvLyBhbnkgbW9kaWZpY2F0aW9ucyB0aGF0IGRvbid0IGFmZmVjdCB0aGUgbGFzdCBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICB2YXIgaSA9IFwiRlwiIC8qIEZpcnN0ICovID09PSB0ID8gZS5sYXN0KCkgOiBlLmZpcnN0KCk7XG4gICAgICAgIHJldHVybiAhIWkgJiYgKGkuaGFzUGVuZGluZ1dyaXRlcyB8fCBpLnZlcnNpb24uQShyKSA+IDApO1xuICAgIH0sIHQucHJvdG90eXBlLnRsID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gRSgpIDw9IHUuREVCVUcgJiYgVChcIkluZGV4RnJlZVF1ZXJ5RW5naW5lXCIsIFwiVXNpbmcgZnVsbCBjb2xsZWN0aW9uIHNjYW4gdG8gZXhlY3V0ZSBxdWVyeTpcIiwgVW4oZSkpLCBcbiAgICAgICAgdGhpcy5aaC5VaSh0LCBlLCB6Lm1pbigpKTtcbiAgICB9LCB0O1xufSgpLCBKdSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuRmkgPSB0LCB0aGlzLkxyID0gZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIHNldCBvZiBhbGwgbXV0YXRpb25zIHRoYXQgaGF2ZSBiZWVuIHNlbnQgYnV0IG5vdCB5ZXQgYmVlbiBhcHBsaWVkIHRvXG4gICAgICAgICAgICAgKiB0aGUgYmFja2VuZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLnhpID0gW10sIFxuICAgICAgICAvKiogTmV4dCB2YWx1ZSB0byB1c2Ugd2hlbiBhc3NpZ25pbmcgc2VxdWVudGlhbCBJRHMgdG8gZWFjaCBtdXRhdGlvbiBiYXRjaC4gKi9cbiAgICAgICAgdGhpcy5ubCA9IDEsIFxuICAgICAgICAvKiogQW4gb3JkZXJlZCBtYXBwaW5nIGJldHdlZW4gZG9jdW1lbnRzIGFuZCB0aGUgbXV0YXRpb25zIGJhdGNoIElEcy4gKi9cbiAgICAgICAgdGhpcy5zbCA9IG5ldyBwdChldS5jdSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5VciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUoMCA9PT0gdGhpcy54aS5sZW5ndGgpO1xuICAgIH0sIHQucHJvdG90eXBlLlFyID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXMubmw7XG4gICAgICAgIHRoaXMubmwrKywgdGhpcy54aS5sZW5ndGggPiAwICYmIHRoaXMueGlbdGhpcy54aS5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG8gPSBuZXcgQ3IoaSwgZSwgbiwgcik7XG4gICAgICAgIHRoaXMueGkucHVzaChvKTtcbiAgICAgICAgLy8gVHJhY2sgcmVmZXJlbmNlcyBieSBkb2N1bWVudCBrZXkgYW5kIGluZGV4IGNvbGxlY3Rpb24gcGFyZW50cy5cbiAgICAgICAgZm9yICh2YXIgdSA9IDAsIHMgPSByOyB1IDwgcy5sZW5ndGg7IHUrKykge1xuICAgICAgICAgICAgdmFyIGEgPSBzW3VdO1xuICAgICAgICAgICAgdGhpcy5zbCA9IHRoaXMuc2wuYWRkKG5ldyBldShhLmtleSwgaSkpLCB0aGlzLkZpLktyKHQsIGEua2V5LnBhdGguUygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3IucmVzb2x2ZShvKTtcbiAgICB9LCB0LnByb3RvdHlwZS5XciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUodGhpcy5pbChlKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuR3IgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gZSArIDEsIHIgPSB0aGlzLnJsKG4pLCBpID0gciA8IDAgPyAwIDogcjtcbiAgICAgICAgLy8gVGhlIHJlcXVlc3RlZCBiYXRjaElkIG1heSBzdGlsbCBiZSBvdXQgb2YgcmFuZ2Ugc28gbm9ybWFsaXplIGl0IHRvIHRoZVxuICAgICAgICAvLyBzdGFydCBvZiB0aGUgcXVldWUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUodGhpcy54aS5sZW5ndGggPiBpID8gdGhpcy54aVtpXSA6IG51bGwpO1xuICAgIH0sIHQucHJvdG90eXBlLnpyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvci5yZXNvbHZlKDAgPT09IHRoaXMueGkubGVuZ3RoID8gLTEgOiB0aGlzLm5sIC0gMSk7XG4gICAgfSwgdC5wcm90b3R5cGUuSHIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBvci5yZXNvbHZlKHRoaXMueGkuc2xpY2UoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuTWkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IG5ldyBldShlLCAwKSwgaSA9IG5ldyBldShlLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpLCBvID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLnNsLk50KFsgciwgaSBdLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGUgPSBuLmlsKHQuRXUpO1xuICAgICAgICAgICAgby5wdXNoKGUpO1xuICAgICAgICB9KSksIG9yLnJlc29sdmUobyk7XG4gICAgfSwgdC5wcm90b3R5cGUucWkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IG5ldyBwdChWKTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGUgPSBuZXcgZXUodCwgMCksIGkgPSBuZXcgZXUodCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgICAgIG4uc2wuTnQoWyBlLCBpIF0sIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgciA9IHIuYWRkKHQuRXUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSksIG9yLnJlc29sdmUodGhpcy5vbChyKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuR2kgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIC8vIFVzZSB0aGUgcXVlcnkgcGF0aCBhcyBhIHByZWZpeCBmb3IgdGVzdGluZyBpZiBhIGRvY3VtZW50IG1hdGNoZXMgdGhlXG4gICAgICAgIC8vIHF1ZXJ5LlxuICAgICAgICB2YXIgbiA9IGUucGF0aCwgciA9IG4ubGVuZ3RoICsgMSwgaSA9IG47XG4gICAgICAgIC8vIENvbnN0cnVjdCBhIGRvY3VtZW50IHJlZmVyZW5jZSBmb3IgYWN0dWFsbHkgc2Nhbm5pbmcgdGhlIGluZGV4LiBVbmxpa2VcbiAgICAgICAgLy8gdGhlIHByZWZpeCB0aGUgZG9jdW1lbnQga2V5IGluIHRoaXMgcmVmZXJlbmNlIG11c3QgaGF2ZSBhbiBldmVuIG51bWJlciBvZlxuICAgICAgICAvLyBzZWdtZW50cy4gVGhlIGVtcHR5IHNlZ21lbnQgY2FuIGJlIHVzZWQgYSBzdWZmaXggb2YgdGhlIHF1ZXJ5IHBhdGhcbiAgICAgICAgLy8gYmVjYXVzZSBpdCBwcmVjZWRlcyBhbGwgb3RoZXIgc2VnbWVudHMgaW4gYW4gb3JkZXJlZCB0cmF2ZXJzYWwuXG4gICAgICAgICAgICAgICAgWS5HKGkpIHx8IChpID0gaS5jaGlsZChcIlwiKSk7XG4gICAgICAgIHZhciBvID0gbmV3IGV1KG5ldyBZKGkpLCAwKSwgdSA9IG5ldyBwdChWKTtcbiAgICAgICAgLy8gRmluZCB1bmlxdWUgYmF0Y2hJRHMgcmVmZXJlbmNlZCBieSBhbGwgZG9jdW1lbnRzIHBvdGVudGlhbGx5IG1hdGNoaW5nIHRoZVxuICAgICAgICAvLyBxdWVyeS5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zbC54dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmtleS5wYXRoO1xuICAgICAgICAgICAgcmV0dXJuICEhbi5OKGUpICYmIChcbiAgICAgICAgICAgIC8vIFJvd3Mgd2l0aCBkb2N1bWVudCBrZXlzIG1vcmUgdGhhbiBvbmUgc2VnbWVudCBsb25nZXIgdGhhbiB0aGUgcXVlcnlcbiAgICAgICAgICAgIC8vIHBhdGggY2FuJ3QgYmUgbWF0Y2hlcy4gRm9yIGV4YW1wbGUsIGEgcXVlcnkgb24gJ3Jvb21zJyBjYW4ndCBtYXRjaFxuICAgICAgICAgICAgLy8gdGhlIGRvY3VtZW50IC9yb29tcy9hYmMvbWVzc2FnZXMveHl4LlxuICAgICAgICAgICAgLy8gVE9ETyhtY2cpOiB3ZSdsbCBuZWVkIGEgZGlmZmVyZW50IHNjYW5uZXIgd2hlbiB3ZSBpbXBsZW1lbnRcbiAgICAgICAgICAgIC8vIGFuY2VzdG9yIHF1ZXJpZXMuXG4gICAgICAgICAgICBlLmxlbmd0aCA9PT0gciAmJiAodSA9IHUuYWRkKHQuRXUpKSwgITApO1xuICAgICAgICB9KSwgbyksIG9yLnJlc29sdmUodGhpcy5vbCh1KSk7XG4gICAgfSwgdC5wcm90b3R5cGUub2wgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IFtdO1xuICAgICAgICAvLyBDb25zdHJ1Y3QgYW4gYXJyYXkgb2YgbWF0Y2hpbmcgYmF0Y2hlcywgc29ydGVkIGJ5IGJhdGNoSUQgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgLy8gbXVsdGlwbGUgbXV0YXRpb25zIGFmZmVjdGluZyB0aGUgc2FtZSBkb2N1bWVudCBrZXkgYXJlIGFwcGxpZWQgaW4gb3JkZXIuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIHIgPSBlLmlsKHQpO1xuICAgICAgICAgICAgbnVsbCAhPT0gciAmJiBuLnB1c2gocik7XG4gICAgICAgIH0pKSwgbjtcbiAgICB9LCB0LnByb3RvdHlwZS5ZciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICBrKDAgPT09IHRoaXMuYWwoZS5iYXRjaElkLCBcInJlbW92ZWRcIikpLCB0aGlzLnhpLnNoaWZ0KCk7XG4gICAgICAgIHZhciByID0gdGhpcy5zbDtcbiAgICAgICAgcmV0dXJuIG9yLmZvckVhY2goZS5tdXRhdGlvbnMsIChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG5ldyBldShpLmtleSwgZS5iYXRjaElkKTtcbiAgICAgICAgICAgIHJldHVybiByID0gci5kZWxldGUobyksIG4uTHIuZW8odCwgaS5rZXkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuLnNsID0gcjtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLlpyID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBOby1vcCBzaW5jZSB0aGUgbWVtb3J5IG11dGF0aW9uIHF1ZXVlIGRvZXMgbm90IG1haW50YWluIGEgc2VwYXJhdGUgY2FjaGUuXG4gICAgfSwgdC5wcm90b3R5cGUuc28gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gbmV3IGV1KGUsIDApLCByID0gdGhpcy5zbC5GdChuKTtcbiAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUoZS5pc0VxdWFsKHIgJiYgci5rZXkpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5ubyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueGkubGVuZ3RoLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZSBhbmQgYXNzZXJ0cyB0aGF0XG4gICAgICogdGhlIHJlc3VsdGluZyBpbmRleCBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmF0Y2hJZCBUaGUgYmF0Y2hJZCB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIGFjdGlvbiBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGNhbGxlciBpcyBkb2luZywgcGhyYXNlZCBpbiBwYXNzaXZlXG4gICAgICogZm9ybSAoZS5nLiBcImFja25vd2xlZGdlZFwiIGluIGEgcm91dGluZSB0aGF0IGFja25vd2xlZGdlcyBiYXRjaGVzKS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5hbCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmwodCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBiYXRjaElkIGluIHRoZSBtdXRhdGlvbiBxdWV1ZS4gVGhpcyBvcGVyYXRpb25cbiAgICAgKiBpcyBPKDEpLlxuICAgICAqXG4gICAgICogQHJldHVybiBUaGUgY29tcHV0ZWQgaW5kZXggb2YgdGhlIGJhdGNoIHdpdGggdGhlIGdpdmVuIGJhdGNoSWQsIGJhc2VkIG9uXG4gICAgICogdGhlIHN0YXRlIG9mIHRoZSBxdWV1ZS4gTm90ZSB0aGlzIGluZGV4IGNhbiBiZSBuZWdhdGl2ZSBpZiB0aGUgcmVxdWVzdGVkXG4gICAgICogYmF0Y2hJZCBoYXMgYWxyZWFkeSBiZWVuIHJlbXZvZWQgZnJvbSB0aGUgcXVldWUgb3IgcGFzdCB0aGUgZW5kIG9mIHRoZVxuICAgICAqIHF1ZXVlIGlmIHRoZSBiYXRjaElkIGlzIGxhcmdlciB0aGFuIHRoZSBsYXN0IGFkZGVkIGJhdGNoLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLnJsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gMCA9PT0gdGhpcy54aS5sZW5ndGggPyAwIDogdCAtIHRoaXMueGlbMF0uYmF0Y2hJZDtcbiAgICAgICAgLy8gRXhhbWluZSB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlIHRvIGZpZ3VyZSBvdXQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVcbiAgICAgICAgLy8gYmF0Y2hJZCBhbmQgaW5kZXhlcyBpbiB0aGUgYXJyYXkuIE5vdGUgdGhhdCBzaW5jZSB0aGUgcXVldWUgaXMgb3JkZXJlZFxuICAgICAgICAvLyBieSBiYXRjaElkLCBpZiB0aGUgZmlyc3QgYmF0Y2ggaGFzIGEgbGFyZ2VyIGJhdGNoSWQgdGhlbiB0aGUgcmVxdWVzdGVkXG4gICAgICAgIC8vIGJhdGNoSWQgZG9lc24ndCBleGlzdCBpbiB0aGUgcXVldWUuXG4gICAgICAgIH0sIFxuICAgIC8qKlxuICAgICAqIEEgdmVyc2lvbiBvZiBsb29rdXBNdXRhdGlvbkJhdGNoIHRoYXQgZG9lc24ndCByZXR1cm4gYSBwcm9taXNlLCB0aGlzIG1ha2VzXG4gICAgICogb3RoZXIgZnVuY3Rpb25zIHRoYXQgdXNlcyB0aGlzIGNvZGUgZWFzaWVyIHRvIHJlYWQgYW5kIG1vcmUgZWZmaWNlbnQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5ybCh0KTtcbiAgICAgICAgcmV0dXJuIGUgPCAwIHx8IGUgPj0gdGhpcy54aS5sZW5ndGggPyBudWxsIDogdGhpcy54aVtlXTtcbiAgICB9LCB0O1xufSgpLCBYdSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNpemVyIFVzZWQgdG8gYXNzZXNzIHRoZSBzaXplIG9mIGEgZG9jdW1lbnQuIEZvciBlYWdlciBHQywgdGhpcyBpcyBleHBlY3RlZCB0byBqdXN0XG4gICAgICogcmV0dXJuIDAgdG8gYXZvaWQgdW5uZWNlc3NhcmlseSBkb2luZyB0aGUgd29yayBvZiBjYWxjdWxhdGluZyB0aGUgc2l6ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5GaSA9IHQsIHRoaXMuY2wgPSBlLCBcbiAgICAgICAgLyoqIFVuZGVybHlpbmcgY2FjaGUgb2YgZG9jdW1lbnRzIGFuZCB0aGVpciByZWFkIHRpbWVzLiAqL1xuICAgICAgICB0aGlzLmRvY3MgPSBuZXcgaHQoWS5WKSwgXG4gICAgICAgIC8qKiBTaXplIG9mIGFsbCBjYWNoZWQgZG9jdW1lbnRzLiAqL1xuICAgICAgICB0aGlzLnNpemUgPSAwXG4gICAgICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHN1cHBsaWVkIGVudHJ5IHRvIHRoZSBjYWNoZSBhbmQgdXBkYXRlcyB0aGUgY2FjaGUgc2l6ZSBhcyBhcHByb3ByaWF0ZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgYWRkRW50cnlgICBhcmUgcmVxdWlyZWQgdG8gZ28gdGhyb3VnaCB0aGUgUmVtb3RlRG9jdW1lbnRDaGFuZ2VCdWZmZXJcbiAgICAgKiByZXR1cm5lZCBieSBgbmV3Q2hhbmdlQnVmZmVyKClgLlxuICAgICAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLlJpID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB2YXIgciA9IGUua2V5LCBpID0gdGhpcy5kb2NzLmdldChyKSwgbyA9IGkgPyBpLnNpemUgOiAwLCB1ID0gdGhpcy5jbChlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jcyA9IHRoaXMuZG9jcy5ydChyLCB7XG4gICAgICAgICAgICBnaTogZSxcbiAgICAgICAgICAgIHNpemU6IHUsXG4gICAgICAgICAgICByZWFkVGltZTogblxuICAgICAgICB9KSwgdGhpcy5zaXplICs9IHUgLSBvLCB0aGlzLkZpLktyKHQsIHIucGF0aC5TKCkpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBlbnRyeSBmcm9tIHRoZSBjYWNoZSBhbmQgdXBkYXRlcyB0aGUgY2FjaGUgc2l6ZSBhcyBhcHByb3ByaWF0ZS5cbiAgICAgKlxuICAgICAqIEFsbCBjYWxscyBvZiBgcmVtb3ZlRW50cnlgIGFyZSByZXF1aXJlZCB0byBnbyB0aHJvdWdoIHRoZSBSZW1vdGVEb2N1bWVudENoYW5nZUJ1ZmZlclxuICAgICAqIHJldHVybmVkIGJ5IGBuZXdDaGFuZ2VCdWZmZXIoKWAuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVmkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5kb2NzLmdldCh0KTtcbiAgICAgICAgZSAmJiAodGhpcy5kb2NzID0gdGhpcy5kb2NzLnJlbW92ZSh0KSwgdGhpcy5zaXplIC09IGUuc2l6ZSk7XG4gICAgfSwgdC5wcm90b3R5cGUueWkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5kb2NzLmdldChlKTtcbiAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUobiA/IG4uZ2kgOiBudWxsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5nZXRFbnRyaWVzID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBndCgpO1xuICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IG4uZG9jcy5nZXQodCk7XG4gICAgICAgICAgICByID0gci5ydCh0LCBlID8gZS5naSA6IG51bGwpO1xuICAgICAgICB9KSksIG9yLnJlc29sdmUocik7XG4gICAgfSwgdC5wcm90b3R5cGUuVWkgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIgPSB3dCgpLCBpID0gbmV3IFkoZS5wYXRoLmNoaWxkKFwiXCIpKSwgbyA9IHRoaXMuZG9jcy5fdChpKVxuICAgICAgICAvLyBEb2N1bWVudHMgYXJlIG9yZGVyZWQgYnkga2V5LCBzbyB3ZSBjYW4gdXNlIGEgcHJlZml4IHNjYW4gdG8gbmFycm93IGRvd25cbiAgICAgICAgLy8gdGhlIGRvY3VtZW50cyB3ZSBuZWVkIHRvIG1hdGNoIHRoZSBxdWVyeSBhZ2FpbnN0LlxuICAgICAgICA7IG8uSXQoKTsgKSB7XG4gICAgICAgICAgICB2YXIgdSA9IG8uRXQoKSwgcyA9IHUua2V5LCBhID0gdS52YWx1ZSwgYyA9IGEuZ2ksIGggPSBhLnJlYWRUaW1lO1xuICAgICAgICAgICAgaWYgKCFlLnBhdGguTihzLnBhdGgpKSBicmVhaztcbiAgICAgICAgICAgIGguQShuKSA8PSAwIHx8IGMgaW5zdGFuY2VvZiBibiAmJiBxbihlLCBjKSAmJiAociA9IHIucnQoYy5rZXksIGMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3IucmVzb2x2ZShyKTtcbiAgICB9LCB0LnByb3RvdHlwZS51bCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG9yLmZvckVhY2godGhpcy5kb2NzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUodCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5fbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gYHRyYWNrUmVtb3ZhbHNgIGlzIGlnbm9yZXMgc2luY2UgdGhlIE1lbW9yeVJlbW90ZURvY3VtZW50Q2FjaGUga2VlcHNcbiAgICAgICAgLy8gYSBzZXBhcmF0ZSBjaGFuZ2Vsb2cgYW5kIGRvZXMgbm90IG5lZWQgc3BlY2lhbCBoYW5kbGluZyBmb3IgcmVtb3ZhbHMuXG4gICAgICAgIHJldHVybiBuZXcgJHUodGhpcyk7XG4gICAgfSwgdC5wcm90b3R5cGUud28gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBvci5yZXNvbHZlKHRoaXMuc2l6ZSk7XG4gICAgfSwgdDtcbn0oKSwgJHUgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKG4gPSBlLmNhbGwodGhpcykgfHwgdGhpcykuVG8gPSB0LCBuO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbi5wcm90b3R5cGUuYmkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5JaS5mb3JFYWNoKChmdW5jdGlvbihyLCBpKSB7XG4gICAgICAgICAgICBpICYmIGkuZ2kgPyBuLnB1c2goZS5Uby5SaSh0LCBpLmdpLCBlLkFpKHIpKSkgOiBlLlRvLlZpKHIpO1xuICAgICAgICB9KSksIG9yLnhuKG4pO1xuICAgIH0sIG4ucHJvdG90eXBlLnBpID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5Uby55aSh0LCBlKTtcbiAgICB9LCBuLnByb3RvdHlwZS52aSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVG8uZ2V0RW50cmllcyh0LCBlKTtcbiAgICB9LCBuO1xufShSciksIFp1ID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZSA9IHQsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1hcHMgYSB0YXJnZXQgdG8gdGhlIGRhdGEgYWJvdXQgdGhhdCB0YXJnZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLmhsID0gbmV3IHEoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0dCh0KTtcbiAgICAgICAgfSksIGV0KSwgXG4gICAgICAgIC8qKiBUaGUgbGFzdCByZWNlaXZlZCBzbmFwc2hvdCB2ZXJzaW9uLiAqL1xuICAgICAgICB0aGlzLmxhc3RSZW1vdGVTbmFwc2hvdFZlcnNpb24gPSB6Lm1pbigpLCBcbiAgICAgICAgLyoqIFRoZSBoaWdoZXN0IG51bWJlcmVkIHRhcmdldCBJRCBlbmNvdW50ZXJlZC4gKi9cbiAgICAgICAgdGhpcy5oaWdoZXN0VGFyZ2V0SWQgPSAwLCBcbiAgICAgICAgLyoqIFRoZSBoaWdoZXN0IHNlcXVlbmNlIG51bWJlciBlbmNvdW50ZXJlZC4gKi9cbiAgICAgICAgdGhpcy5sbCA9IDAsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgb3JkZXJlZCBiaWRpcmVjdGlvbmFsIG1hcHBpbmcgYmV0d2VlbiBkb2N1bWVudHMgYW5kIHRoZSByZW1vdGUgdGFyZ2V0XG4gICAgICAgICAgICAgKiBJRHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbCA9IG5ldyB0dSwgdGhpcy50YXJnZXRDb3VudCA9IDAsIHRoaXMuZmwgPSBIaS5wbygpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuRGUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhsLmZvckVhY2goKGZ1bmN0aW9uKHQsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiBlKG4pO1xuICAgICAgICB9KSksIG9yLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5DbyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUodGhpcy5sYXN0UmVtb3RlU25hcHNob3RWZXJzaW9uKTtcbiAgICB9LCB0LnByb3RvdHlwZS5ObyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUodGhpcy5sbCk7XG4gICAgfSwgdC5wcm90b3R5cGUuYm8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IHRoaXMuZmwubmV4dCgpLCBvci5yZXNvbHZlKHRoaXMuaGlnaGVzdFRhcmdldElkKTtcbiAgICB9LCB0LnByb3RvdHlwZS54byA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG4gJiYgKHRoaXMubGFzdFJlbW90ZVNuYXBzaG90VmVyc2lvbiA9IG4pLCBlID4gdGhpcy5sbCAmJiAodGhpcy5sbCA9IGUpLCBcbiAgICAgICAgb3IucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLk9vID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmhsLnNldCh0LnRhcmdldCwgdCk7XG4gICAgICAgIHZhciBlID0gdC50YXJnZXRJZDtcbiAgICAgICAgZSA+IHRoaXMuaGlnaGVzdFRhcmdldElkICYmICh0aGlzLmZsID0gbmV3IEhpKGUpLCB0aGlzLmhpZ2hlc3RUYXJnZXRJZCA9IGUpLCB0LnNlcXVlbmNlTnVtYmVyID4gdGhpcy5sbCAmJiAodGhpcy5sbCA9IHQuc2VxdWVuY2VOdW1iZXIpO1xuICAgIH0sIHQucHJvdG90eXBlLkZvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5PbyhlKSwgdGhpcy50YXJnZXRDb3VudCArPSAxLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUua28gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLk9vKGUpLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuJG8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhsLmRlbGV0ZShlLnRhcmdldCksIHRoaXMuX2wuZHUoZS50YXJnZXRJZCksIHRoaXMudGFyZ2V0Q291bnQgLT0gMSwgXG4gICAgICAgIG9yLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5OciA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gMCwgbyA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5obC5mb3JFYWNoKChmdW5jdGlvbih1LCBzKSB7XG4gICAgICAgICAgICBzLnNlcXVlbmNlTnVtYmVyIDw9IGUgJiYgbnVsbCA9PT0gbi5nZXQocy50YXJnZXRJZCkgJiYgKHIuaGwuZGVsZXRlKHUpLCBvLnB1c2goci5Mbyh0LCBzLnRhcmdldElkKSksIFxuICAgICAgICAgICAgaSsrKTtcbiAgICAgICAgfSkpLCBvci54bihvKS5uZXh0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuQm8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBvci5yZXNvbHZlKHRoaXMudGFyZ2V0Q291bnQpO1xuICAgIH0sIHQucHJvdG90eXBlLnFvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuaGwuZ2V0KGUpIHx8IG51bGw7XG4gICAgICAgIHJldHVybiBvci5yZXNvbHZlKG4pO1xuICAgIH0sIHQucHJvdG90eXBlLlVvID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbC5sdShlLCBuKSwgb3IucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLktvID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICB0aGlzLl9sLmZ1KGUsIG4pO1xuICAgICAgICB2YXIgciA9IHRoaXMucGVyc2lzdGVuY2UuTHIsIGkgPSBbXTtcbiAgICAgICAgcmV0dXJuIHIgJiYgZS5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpLnB1c2goci5lbyh0LCBlKSk7XG4gICAgICAgIH0pKSwgb3IueG4oaSk7XG4gICAgfSwgdC5wcm90b3R5cGUuTG8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sLmR1KGUpLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuam8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5fbC5UdShlKTtcbiAgICAgICAgcmV0dXJuIG9yLnJlc29sdmUobik7XG4gICAgfSwgdC5wcm90b3R5cGUuc28gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBvci5yZXNvbHZlKHRoaXMuX2wuc28oZSkpO1xuICAgIH0sIHQ7XG59KCksIHRzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyID0gdCwgdGhpcy5kbCA9IG5ldyBNYXAsIHRoaXMud2wgPSBuZXcgTWFwO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUubW8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBvci5yZXNvbHZlKHRoaXMuZGwuZ2V0KGUpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5BbyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLyoqIEVuY29kZXMgYSBCdW5kbGVNZXRhZGF0YSBwcm90byBvYmplY3QgdG8gYSBCdW5kbGUgbW9kZWwgb2JqZWN0LiAqL1xuICAgICAgICB2YXIgbjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGwuc2V0KGUuaWQsIHtcbiAgICAgICAgICAgIGlkOiAobiA9IGUpLmlkLFxuICAgICAgICAgICAgdmVyc2lvbjogbi52ZXJzaW9uLFxuICAgICAgICAgICAgY3JlYXRlVGltZTogbGUobi5jcmVhdGVUaW1lKVxuICAgICAgICB9KSwgb3IucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLlJvID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gb3IucmVzb2x2ZSh0aGlzLndsLmdldChlKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuUG8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuO1xuICAgICAgICByZXR1cm4gdGhpcy53bC5zZXQoZS5uYW1lLCB7XG4gICAgICAgICAgICBuYW1lOiAobiA9IGUpLm5hbWUsXG4gICAgICAgICAgICBxdWVyeTogaGkobi5idW5kbGVkUXVlcnkpLFxuICAgICAgICAgICAgcmVhZFRpbWU6IGxlKG4ucmVhZFRpbWUpXG4gICAgICAgIH0pLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgdDtcbn0oKSwgZXMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25zdHJ1Y3RvciBhY2NlcHRzIGEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgYSByZWZlcmVuY2UgZGVsZWdhdGUuIFRoaXNcbiAgICAgKiBhbGxvd3MgYm90aCB0aGUgZGVsZWdhdGUgYW5kIHRoaXMgaW5zdGFuY2UgdG8gaGF2ZSBzdHJvbmcgcmVmZXJlbmNlcyB0b1xuICAgICAqIGVhY2ggb3RoZXIgd2l0aG91dCBoYXZpbmcgbnVsbGFibGUgZmllbGRzIHRoYXQgd291bGQgdGhlbiBuZWVkIHRvIGJlXG4gICAgICogY2hlY2tlZCBvciBhc3NlcnRlZCBvbiBldmVyeSBhY2Nlc3MuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgdGhpcy5UbCA9IHt9LCB0aGlzLkpvID0gbmV3IHpyKDApLCB0aGlzLllvID0gITEsIHRoaXMuWW8gPSAhMCwgdGhpcy5MciA9IHQodGhpcyksIFxuICAgICAgICB0aGlzLnJhID0gbmV3IFp1KHRoaXMpLCB0aGlzLkZpID0gbmV3IEVpLCB0aGlzLk5pID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBYdSh0LCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLkxyLkVsKHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KHRoaXMuRmkpLCB0aGlzLnNlcmlhbGl6ZXIgPSBuZXcgdGkoZSksIHRoaXMub2EgPSBuZXcgdHModGhpcy5zZXJpYWxpemVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5wYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBObyBkdXJhYmxlIHN0YXRlIHRvIGVuc3VyZSBpcyBjbG9zZWQgb24gc2h1dGRvd24uXG4gICAgICAgIHJldHVybiB0aGlzLllvID0gITEsIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJ5clwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ZbztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuZmEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfSwgdC5wcm90b3R5cGUuZGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTm8gb3AuXG4gICAgfSwgdC5wcm90b3R5cGUuT2EgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRmk7XG4gICAgfSwgdC5wcm90b3R5cGUuTmEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5UbFt0LllzKCldO1xuICAgICAgICByZXR1cm4gZSB8fCAoZSA9IG5ldyBKdSh0aGlzLkZpLCB0aGlzLkxyKSwgdGhpcy5UbFt0LllzKCldID0gZSksIGU7XG4gICAgfSwgdC5wcm90b3R5cGUueGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmE7XG4gICAgfSwgdC5wcm90b3R5cGUuRmEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTmk7XG4gICAgfSwgdC5wcm90b3R5cGUuTWEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2E7XG4gICAgfSwgdC5wcm90b3R5cGUucnVuVHJhbnNhY3Rpb24gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgVChcIk1lbW9yeVBlcnNpc3RlbmNlXCIsIFwiU3RhcnRpbmcgdHJhbnNhY3Rpb246XCIsIHQpO1xuICAgICAgICB2YXIgaSA9IG5ldyBucyh0aGlzLkpvLm5leHQoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLkxyLklsKCksIG4oaSkubmV4dCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHIuTHIubWwoaSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKS5DbigpLnRoZW4oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpLkNpKCksIHQ7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5BbCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG9yLkZuKE9iamVjdC52YWx1ZXModGhpcy5UbCkubWFwKChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4uc28odCwgZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSkpO1xuICAgIH0sIHQ7XG59KCksIG5zID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0KSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChuID0gZS5jYWxsKHRoaXMpIHx8IHRoaXMpLkdvID0gdCwgbjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG47XG59KEZyKSwgcnMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlID0gdCwgXG4gICAgICAgIC8qKiBUcmFja3MgYWxsIGRvY3VtZW50cyB0aGF0IGFyZSBhY3RpdmUgaW4gUXVlcnkgdmlld3MuICovXG4gICAgICAgIHRoaXMuUmwgPSBuZXcgdHUsIFxuICAgICAgICAvKiogVGhlIGxpc3Qgb2YgZG9jdW1lbnRzIHRoYXQgYXJlIHBvdGVudGlhbGx5IEdDZWQgYWZ0ZXIgZWFjaCB0cmFuc2FjdGlvbi4gKi9cbiAgICAgICAgdGhpcy5QbCA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0LmdsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQoZSk7XG4gICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIlZsXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLlBsKSByZXR1cm4gdGhpcy5QbDtcbiAgICAgICAgICAgIHRocm93IFMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgdC5wcm90b3R5cGUuUW8gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlJsLlFvKG4sIGUpLCB0aGlzLlZsLmRlbGV0ZShuLnRvU3RyaW5nKCkpLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuV28gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlJsLldvKG4sIGUpLCB0aGlzLlZsLmFkZChuLnRvU3RyaW5nKCkpLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUuZW8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlZsLmFkZChlLnRvU3RyaW5nKCkpLCBvci5yZXNvbHZlKCk7XG4gICAgfSwgdC5wcm90b3R5cGUucmVtb3ZlVGFyZ2V0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHRoaXMuUmwuZHUoZS50YXJnZXRJZCkuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uVmwuYWRkKHQudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnBlcnNpc3RlbmNlLnhhKCk7XG4gICAgICAgIHJldHVybiByLmpvKHQsIGUudGFyZ2V0SWQpLm5leHQoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHQuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLlZsLmFkZCh0LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gci4kbyh0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLklsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuUGwgPSBuZXcgU2V0O1xuICAgIH0sIHQucHJvdG90eXBlLm1sID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB0aGlzLnBlcnNpc3RlbmNlLkZhKCkuX28oKTtcbiAgICAgICAgLy8gUmVtb3ZlIG5ld2x5IG9ycGhhbmVkIGRvY3VtZW50cy5cbiAgICAgICAgICAgICAgICByZXR1cm4gb3IuZm9yRWFjaCh0aGlzLlZsLCAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgdmFyIGkgPSBZLksocik7XG4gICAgICAgICAgICByZXR1cm4gZS55bCh0LCBpKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdCB8fCBuLlZpKGkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkubmV4dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5QbCA9IG51bGwsIG4uYXBwbHkodCk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5xYSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy55bCh0LCBlKS5uZXh0KChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB0ID8gbi5WbC5kZWxldGUoZS50b1N0cmluZygpKSA6IG4uVmwuYWRkKGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5FbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gRm9yIGVhZ2VyIEdDLCB3ZSBkb24ndCBjYXJlIGFib3V0IHRoZSBkb2N1bWVudCBzaXplLCB0aGVyZSBhcmUgbm8gc2l6ZSB0aHJlc2hvbGRzLlxuICAgICAgICByZXR1cm4gMDtcbiAgICB9LCB0LnByb3RvdHlwZS55bCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gb3IuRm4oWyBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvci5yZXNvbHZlKG4uUmwuc28oZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnhhKCkuc28odCwgZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG4ucGVyc2lzdGVuY2UuQWwodCwgZSk7XG4gICAgICAgIH0gXSk7XG4gICAgfSwgdDtcbn0oKSwgaXMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLnBsID0gdC5wbCwgdGhpcy52bCA9IHQudmw7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5tYyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5ibCA9IHQ7XG4gICAgfSwgdC5wcm90b3R5cGUuZGMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuU2wgPSB0O1xuICAgIH0sIHQucHJvdG90eXBlLm9uTWVzc2FnZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5EbCA9IHQ7XG4gICAgfSwgdC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy52bCgpO1xuICAgIH0sIHQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMucGwodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuQ2wgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ibCgpO1xuICAgIH0sIHQucHJvdG90eXBlLk5sID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLlNsKHQpO1xuICAgIH0sIHQucHJvdG90eXBlLnhsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLkRsKHQpO1xuICAgIH0sIHQ7XG59KCksIG9zID0ge1xuICAgIEJhdGNoR2V0RG9jdW1lbnRzOiBcImJhdGNoR2V0XCIsXG4gICAgQ29tbWl0OiBcImNvbW1pdFwiLFxuICAgIFJ1blF1ZXJ5OiBcInJ1blF1ZXJ5XCJcbn0sIHVzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0KSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChuID0gZS5jYWxsKHRoaXMsIHQpIHx8IHRoaXMpLmZvcmNlTG9uZ1BvbGxpbmcgPSB0LmZvcmNlTG9uZ1BvbGxpbmcsIG4uaSA9IHQuaSwgXG4gICAgICAgIG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJhc2UgY2xhc3MgZm9yIGFsbCBSZXN0LWJhc2VkIGNvbm5lY3Rpb25zIHRvIHRoZSBiYWNrZW5kIChXZWJDaGFubmVsIGFuZFxuICAgICAqIEhUVFApLlxuICAgICAqL1xuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5MbCA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihpLCBvKSB7XG4gICAgICAgICAgICB2YXIgdSA9IG5ldyBkO1xuICAgICAgICAgICAgdS5saXN0ZW5PbmNlKHYuQ09NUExFVEUsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHUuZ2V0TGFzdEVycm9yQ29kZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSB5Lk5PX0VSUk9SOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB1LmdldFJlc3BvbnNlSnNvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgVChcIkNvbm5lY3Rpb25cIiwgXCJYSFIgcmVjZWl2ZWQ6XCIsIEpTT04uc3RyaW5naWZ5KGUpKSwgaShlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSB5LlRJTUVPVVQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBUKFwiQ29ubmVjdGlvblwiLCAnUlBDIFwiJyArIHQgKyAnXCIgdGltZWQgb3V0JyksIG8obmV3IGooRi5ERUFETElORV9FWENFRURFRCwgXCJSZXF1ZXN0IHRpbWUgb3V0XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSB5LkhUVFBfRVJST1I6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHUuZ2V0U3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoVChcIkNvbm5lY3Rpb25cIiwgJ1JQQyBcIicgKyB0ICsgJ1wiIGZhaWxlZCB3aXRoIHN0YXR1czonLCBuLCBcInJlc3BvbnNlIHRleHQ6XCIsIHUuZ2V0UmVzcG9uc2VUZXh0KCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB1LmdldFJlc3BvbnNlSnNvbigpLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyICYmIHIuc3RhdHVzICYmIHIubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoXCJfXCIsIFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKEYpLmluZGV4T2YoZSkgPj0gMCA/IGUgOiBGLlVOS05PV047XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oci5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvKG5ldyBqKHMsIHIubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBvKG5ldyBqKEYuVU5LTk9XTiwgXCJTZXJ2ZXIgcmVzcG9uZGVkIHdpdGggc3RhdHVzIFwiICsgdS5nZXRTdGF0dXMoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVjZWl2ZWQgYW4gSFRUUF9FUlJPUiBidXQgdGhlcmUncyBubyBzdGF0dXMgY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgbW9zdCBwcm9iYWJseSBhIGNvbm5lY3Rpb24gaXNzdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIG8obmV3IGooRi5VTkFWQUlMQUJMRSwgXCJDb25uZWN0aW9uIGZhaWxlZC5cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgUygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgVChcIkNvbm5lY3Rpb25cIiwgJ1JQQyBcIicgKyB0ICsgJ1wiIGNvbXBsZXRlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2YXIgcyA9IEpTT04uc3RyaW5naWZ5KHIpO1xuICAgICAgICAgICAgdS5zZW5kKGUsIFwiUE9TVFwiLCBzLCBuLCAxNSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBuLnByb3RvdHlwZS5BYyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBbIHRoaXMuT2wsIFwiL1wiLCBcImdvb2dsZS5maXJlc3RvcmUudjEuRmlyZXN0b3JlXCIsIFwiL1wiLCB0LCBcIi9jaGFubmVsXCIgXSwgciA9IGcoKSwgaSA9IHtcbiAgICAgICAgICAgIC8vIFJlcXVpcmVkIGZvciBiYWNrZW5kIHN0aWNraW5lc3MsIHJvdXRpbmcgYmVoYXZpb3IgaXMgYmFzZWQgb24gdGhpc1xuICAgICAgICAgICAgLy8gcGFyYW1ldGVyLlxuICAgICAgICAgICAgaHR0cFNlc3Npb25JZFBhcmFtOiBcImdzZXNzaW9uaWRcIixcbiAgICAgICAgICAgIGluaXRNZXNzYWdlSGVhZGVyczoge30sXG4gICAgICAgICAgICBtZXNzYWdlVXJsUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBwYXJhbSBpcyB1c2VkIHRvIGltcHJvdmUgcm91dGluZyBhbmQgcHJvamVjdCBpc29sYXRpb24gYnkgdGhlXG4gICAgICAgICAgICAgICAgLy8gYmFja2VuZCBhbmQgbXVzdCBiZSBpbmNsdWRlZCBpbiBldmVyeSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgIGRhdGFiYXNlOiBcInByb2plY3RzL1wiICsgdGhpcy50LnByb2plY3RJZCArIFwiL2RhdGFiYXNlcy9cIiArIHRoaXMudC5kYXRhYmFzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlbmRSYXdKc29uOiAhMCxcbiAgICAgICAgICAgIHN1cHBvcnRzQ3Jvc3NEb21haW5YaHI6ICEwLFxuICAgICAgICAgICAgaW50ZXJuYWxDaGFubmVsUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgLy8gT3ZlcnJpZGUgdGhlIGRlZmF1bHQgdGltZW91dCAocmFuZG9taXplZCBiZXR3ZWVuIDEwLTIwIHNlY29uZHMpIHNpbmNlXG4gICAgICAgICAgICAgICAgLy8gYSBsYXJnZSB3cml0ZSBiYXRjaCBvbiBhIHNsb3cgaW50ZXJuZXQgY29ubmVjdGlvbiBtYXkgdGFrZSBhIGxvbmdcbiAgICAgICAgICAgICAgICAvLyB0aW1lIHRvIHNlbmQgdG8gdGhlIGJhY2tlbmQuIFJhdGhlciB0aGFuIGhhdmUgV2ViQ2hhbm5lbCBpbXBvc2UgYVxuICAgICAgICAgICAgICAgIC8vIHRpZ2h0IHRpbWVvdXQgd2hpY2ggY291bGQgbGVhZCB0byBpbmZpbml0ZSB0aW1lb3V0cyBhbmQgcmV0cmllcywgd2VcbiAgICAgICAgICAgICAgICAvLyBzZXQgaXQgdmVyeSBsYXJnZSAoNS0xMCBtaW51dGVzKSBhbmQgcmVseSBvbiB0aGUgYnJvd3NlcidzIGJ1aWx0aW5cbiAgICAgICAgICAgICAgICAvLyB0aW1lb3V0cyB0byBraWNrIGluIGlmIHRoZSByZXF1ZXN0IGlzbid0IHdvcmtpbmcuXG4gICAgICAgICAgICAgICAgZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zOiA2ZTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JjZUxvbmdQb2xsaW5nOiB0aGlzLmZvcmNlTG9uZ1BvbGxpbmcsXG4gICAgICAgICAgICBkZXRlY3RCdWZmZXJpbmdQcm94eTogdGhpcy5pXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuJGwoaS5pbml0TWVzc2FnZUhlYWRlcnMsIGUpLCBcbiAgICAgICAgLy8gU2VuZGluZyB0aGUgY3VzdG9tIGhlYWRlcnMgd2UganVzdCBhZGRlZCB0byByZXF1ZXN0LmluaXRNZXNzYWdlSGVhZGVyc1xuICAgICAgICAvLyAoQXV0aG9yaXphdGlvbiwgZXRjLikgd2lsbCB0cmlnZ2VyIHRoZSBicm93c2VyIHRvIG1ha2UgYSBDT1JTIHByZWZsaWdodFxuICAgICAgICAvLyByZXF1ZXN0IGJlY2F1c2UgdGhlIFhIUiB3aWxsIG5vIGxvbmdlciBtZWV0IHRoZSBjcml0ZXJpYSBmb3IgYSBcInNpbXBsZVwiXG4gICAgICAgIC8vIENPUlMgcmVxdWVzdDpcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9DT1JTI1NpbXBsZV9yZXF1ZXN0c1xuICAgICAgICAvLyBUaGVyZWZvcmUgdG8gYXZvaWQgdGhlIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3QgKGFuIGV4dHJhIG5ldHdvcmtcbiAgICAgICAgLy8gcm91bmR0cmlwKSwgd2UgdXNlIHRoZSBodHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtIG9wdGlvbiB0byBzcGVjaWZ5IHRoYXRcbiAgICAgICAgLy8gdGhlIGhlYWRlcnMgc2hvdWxkIGluc3RlYWQgYmUgZW5jb2RlZCBpbnRvIGEgc3BlY2lhbCBcIiRodHRwSGVhZGVyc1wiIHF1ZXJ5XG4gICAgICAgIC8vIHBhcmFtZXRlciwgd2hpY2ggaXMgcmVjb2duaXplZCBieSB0aGUgd2ViY2hhbm5lbCBiYWNrZW5kLiBUaGlzIGlzXG4gICAgICAgIC8vIGZvcm1hbGx5IGRlZmluZWQgaGVyZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9iMGUxODE1YjEzZmI5MmE0NmQ3YzliM2MzMGRlNWQ2YTM5NmEzMjQ1L2Nsb3N1cmUvZ29vZy9uZXQvcnBjL2h0dHBjb3JzLmpzI0wzMlxuICAgICAgICAvLyBUT0RPKGIvMTQ1NjI0NzU2KTogVGhlcmUgaXMgYSBiYWNrZW5kIGJ1ZyB3aGVyZSAkaHR0cEhlYWRlcnMgaXNuJ3QgcmVzcGVjdGVkIGlmIHRoZSByZXF1ZXN0XG4gICAgICAgIC8vIGRvZXNuJ3QgaGF2ZSBhbiBPcmlnaW4gaGVhZGVyLiBTbyB3ZSBoYXZlIHRvIGV4Y2x1ZGUgYSBmZXcgYnJvd3NlciBlbnZpcm9ubWVudHMgdGhhdCBhcmVcbiAgICAgICAgLy8ga25vd24gdG8gKHNvbWV0aW1lcykgbm90IGluY2x1ZGUgYW4gT3JpZ2luLiBTZWVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9pc3N1ZXMvMTQ5MS5cbiAgICAgICAgYSgpIHx8IGMoKSB8fCBoKCkgfHwgZigpIHx8IGwoKSB8fCBwKCkgfHwgKGkuaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSA9IFwiJGh0dHBIZWFkZXJzXCIpO1xuICAgICAgICB2YXIgbyA9IG4uam9pbihcIlwiKTtcbiAgICAgICAgVChcIkNvbm5lY3Rpb25cIiwgXCJDcmVhdGluZyBXZWJDaGFubmVsOiBcIiArIG8sIGkpO1xuICAgICAgICB2YXIgdSA9IHIuY3JlYXRlV2ViQ2hhbm5lbChvLCBpKSwgcyA9ICExLCBkID0gITEsIHYgPSBuZXcgaXMoe1xuICAgICAgICAgICAgcGw6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBkID8gVChcIkNvbm5lY3Rpb25cIiwgXCJOb3Qgc2VuZGluZyBiZWNhdXNlIFdlYkNoYW5uZWwgaXMgY2xvc2VkOlwiLCB0KSA6IChzIHx8IChUKFwiQ29ubmVjdGlvblwiLCBcIk9wZW5pbmcgV2ViQ2hhbm5lbCB0cmFuc3BvcnQuXCIpLCBcbiAgICAgICAgICAgICAgICB1Lm9wZW4oKSwgcyA9ICEwKSwgVChcIkNvbm5lY3Rpb25cIiwgXCJXZWJDaGFubmVsIHNlbmRpbmc6XCIsIHQpLCB1LnNlbmQodCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgeSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogY2xvc3VyZSB0eXBpbmcgc2VlbXMgYnJva2VuIGJlY2F1c2UgV2ViQ2hhbm5lbCBkb2VzXG4gICAgICAgICAgICAvLyBub3QgaW1wbGVtZW50IGdvb2cuZXZlbnRzLkxpc3RlbmFibGVcbiAgICAgICAgICAgIHUubGlzdGVuKHQsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZSh0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdDtcbiAgICAgICAgICAgICAgICAgICAgfSksIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gV2ViQ2hhbm5lbCBzdXBwb3J0cyBzZW5kaW5nIHRoZSBmaXJzdCBtZXNzYWdlIHdpdGggdGhlIGhhbmRzaGFrZSAtIHNhdmluZ1xuICAgICAgICAvLyBhIG5ldHdvcmsgcm91bmQgdHJpcC4gSG93ZXZlciwgaXQgd2lsbCBoYXZlIHRvIGNhbGwgc2VuZCBpbiB0aGUgc2FtZVxuICAgICAgICAvLyBKUyBldmVudCBsb29wIGFzIG9wZW4uIEluIG9yZGVyIHRvIGVuZm9yY2UgdGhpcywgd2UgZGVsYXkgYWN0dWFsbHlcbiAgICAgICAgLy8gb3BlbmluZyB0aGUgV2ViQ2hhbm5lbCB1bnRpbCBzZW5kIGlzIGNhbGxlZC4gV2hldGhlciB3ZSBoYXZlIGNhbGxlZFxuICAgICAgICAvLyBvcGVuIGlzIHRyYWNrZWQgd2l0aCB0aGlzIHZhcmlhYmxlLlxuICAgICAgICAgICAgICAgIC8vIENsb3N1cmUgZXZlbnRzIGFyZSBndWFyZGVkIGFuZCBleGNlcHRpb25zIGFyZSBzd2FsbG93ZWQsIHNvIGNhdGNoIGFueVxuICAgICAgICAvLyBleGNlcHRpb24gYW5kIHJldGhyb3cgdXNpbmcgYSBzZXRUaW1lb3V0IHNvIHRoZXkgYmVjb21lIHZpc2libGUgYWdhaW4uXG4gICAgICAgIC8vIE5vdGUgdGhhdCBldmVudHVhbGx5IHRoaXMgZnVuY3Rpb24gY291bGQgZ28gYXdheSBpZiB3ZSBhcmUgY29uZmlkZW50XG4gICAgICAgIC8vIGVub3VnaCB0aGUgY29kZSBpcyBleGNlcHRpb24gZnJlZS5cbiAgICAgICAgcmV0dXJuIHkobS5FdmVudFR5cGUuT1BFTiwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZCB8fCBUKFwiQ29ubmVjdGlvblwiLCBcIldlYkNoYW5uZWwgdHJhbnNwb3J0IG9wZW5lZC5cIik7XG4gICAgICAgIH0pKSwgeShtLkV2ZW50VHlwZS5DTE9TRSwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZCB8fCAoZCA9ICEwLCBUKFwiQ29ubmVjdGlvblwiLCBcIldlYkNoYW5uZWwgdHJhbnNwb3J0IGNsb3NlZFwiKSwgdi5ObCgpKTtcbiAgICAgICAgfSkpLCB5KG0uRXZlbnRUeXBlLkVSUk9SLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZCB8fCAoZCA9ICEwLCB4KFwiQ29ubmVjdGlvblwiLCBcIldlYkNoYW5uZWwgdHJhbnNwb3J0IGVycm9yZWQ6XCIsIHQpLCB2Lk5sKG5ldyBqKEYuVU5BVkFJTEFCTEUsIFwiVGhlIG9wZXJhdGlvbiBjb3VsZCBub3QgYmUgY29tcGxldGVkXCIpKSk7XG4gICAgICAgIH0pKSwgeShtLkV2ZW50VHlwZS5NRVNTQUdFLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICBpZiAoIWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHQuZGF0YVswXTtcbiAgICAgICAgICAgICAgICBrKCEhbik7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhiLzM1MTQzODkxKTogVGhlcmUgaXMgYSBidWcgaW4gT25lIFBsYXRmb3JtIHRoYXQgY2F1c2VkIGVycm9yc1xuICAgICAgICAgICAgICAgIC8vIChhbmQgb25seSBlcnJvcnMpIHRvIGJlIHdyYXBwZWQgaW4gYW4gZXh0cmEgYXJyYXkuIFRvIGJlIGZvcndhcmRcbiAgICAgICAgICAgICAgICAvLyBjb21wYXRpYmxlIHdpdGggdGhlIGJ1ZyB3ZSBuZWVkIHRvIGNoZWNrIGVpdGhlciBjb25kaXRpb24uIFRoZSBsYXR0ZXJcbiAgICAgICAgICAgICAgICAvLyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBmaXggaGFzIGJlZW4gcm9sbGVkIG91dC5cbiAgICAgICAgICAgICAgICAvLyBVc2UgYW55IGJlY2F1c2UgbXNnRGF0YS5lcnJvciBpcyBub3QgdHlwZWQuXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBuLCBpID0gci5lcnJvciB8fCAobnVsbCA9PT0gKGUgPSByWzBdKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgICAgICBUKFwiQ29ubmVjdGlvblwiLCBcIldlYkNoYW5uZWwgcmVjZWl2ZWQgZXJyb3I6XCIsIGkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBlcnJvci5zdGF0dXMgd2lsbCBiZSBhIHN0cmluZyBsaWtlICdPSycgb3IgJ05PVF9GT1VORCcuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gaS5zdGF0dXMsIHMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb29rdXAgYnkgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBpdFt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGUpIHJldHVybiBjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgfShvKSwgYSA9IGkubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBzICYmIChzID0gRi5JTlRFUk5BTCwgYSA9IFwiVW5rbm93biBlcnJvciBzdGF0dXM6IFwiICsgbyArIFwiIHdpdGggbWVzc2FnZSBcIiArIGkubWVzc2FnZSksIFxuICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIGNsb3NlZCBzbyBubyBmdXJ0aGVyIGV2ZW50cyBhcmUgcHJvcGFnYXRlZFxuICAgICAgICAgICAgICAgICAgICBkID0gITAsIHYuTmwobmV3IGoocywgYSkpLCB1LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIFQoXCJDb25uZWN0aW9uXCIsIFwiV2ViQ2hhbm5lbCByZWNlaXZlZDpcIiwgbiksIHYueGwobik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBUZWNobmljYWxseSB3ZSBjb3VsZC9zaG91bGQgd2FpdCBmb3IgdGhlIFdlYkNoYW5uZWwgb3BlbmVkIGV2ZW50LFxuICAgICAgICAgICAgLy8gYnV0IGJlY2F1c2Ugd2Ugd2FudCB0byBzZW5kIHRoZSBmaXJzdCBtZXNzYWdlIHdpdGggdGhlIFdlYkNoYW5uZWxcbiAgICAgICAgICAgIC8vIGhhbmRzaGFrZSB3ZSBwcmV0ZW5kIHRoZSBjaGFubmVsIG9wZW5lZCBoZXJlIChhc3luY2hyb25vdXNseSksIGFuZFxuICAgICAgICAgICAgLy8gdGhlbiBkZWxheSB0aGUgYWN0dWFsIG9wZW4gdW50aWwgdGhlIGZpcnN0IG1lc3NhZ2UgaXMgc2VudC5cbiAgICAgICAgICAgIHYuQ2woKTtcbiAgICAgICAgfSksIDApLCB2O1xuICAgIH0sIG47XG59KC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgIHRoaXMuRmwgPSB0LCB0aGlzLnQgPSB0LnQ7XG4gICAgICAgIHZhciBlID0gdC5zc2wgPyBcImh0dHBzXCIgOiBcImh0dHBcIjtcbiAgICAgICAgdGhpcy5PbCA9IGUgKyBcIjovL1wiICsgdC5ob3N0LCB0aGlzLk1sID0gXCJwcm9qZWN0cy9cIiArIHRoaXMudC5wcm9qZWN0SWQgKyBcIi9kYXRhYmFzZXMvXCIgKyB0aGlzLnQuZGF0YWJhc2UgKyBcIi9kb2N1bWVudHNcIjtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnhjID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICB2YXIgaSA9IHRoaXMua2wodCwgZSk7XG4gICAgICAgIFQoXCJSZXN0Q29ubmVjdGlvblwiLCBcIlNlbmRpbmc6IFwiLCBpLCBuKTtcbiAgICAgICAgdmFyIG8gPSB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGwobywgciksIHRoaXMuTGwodCwgaSwgbywgbikudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIFQoXCJSZXN0Q29ubmVjdGlvblwiLCBcIlJlY2VpdmVkOiBcIiwgdCksIHQ7XG4gICAgICAgIH0pLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGhyb3cgeChcIlJlc3RDb25uZWN0aW9uXCIsIHQgKyBcIiBmYWlsZWQgd2l0aCBlcnJvcjogXCIsIGUsIFwidXJsOiBcIiwgaSwgXCJyZXF1ZXN0OlwiLCBuKSwgXG4gICAgICAgICAgICBlO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUuRmMgPSBmdW5jdGlvbih0LCBlLCBuLCByKSB7XG4gICAgICAgIC8vIFRoZSBSRVNUIEFQSSBhdXRvbWF0aWNhbGx5IGFnZ3JlZ2F0ZXMgYWxsIG9mIHRoZSBzdHJlYW1lZCByZXN1bHRzLCBzbyB3ZVxuICAgICAgICAvLyBjYW4ganVzdCB1c2UgdGhlIG5vcm1hbCBpbnZva2UoKSBtZXRob2QuXG4gICAgICAgIHJldHVybiB0aGlzLnhjKHQsIGUsIG4sIHIpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIE1vZGlmaWVzIHRoZSBoZWFkZXJzIGZvciBhIHJlcXVlc3QsIGFkZGluZyBhbnkgYXV0aG9yaXphdGlvbiB0b2tlbiBpZlxuICAgICAqIHByZXNlbnQgYW5kIGFueSBhZGRpdGlvbmFsIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLiRsID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAodFtcIlgtR29vZy1BcGktQ2xpZW50XCJdID0gXCJnbC1qcy8gZmlyZS84LjAuMlwiLCBcbiAgICAgICAgLy8gQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluIHdpbGwgYXZvaWQgcHJlZmxpZ2h0IHJlcXVlc3RzIHdoaWNoIG1pZ2h0XG4gICAgICAgIC8vIG1lc3Mgd2l0aCBDT1JTIGFuZCByZWRpcmVjdHMgYnkgcHJveGllcy4gSWYgd2UgYWRkIGN1c3RvbSBoZWFkZXJzXG4gICAgICAgIC8vIHdlIHdpbGwgbmVlZCB0byBjaGFuZ2UgdGhpcyBjb2RlIHRvIHBvdGVudGlhbGx5IHVzZSB0aGUgJGh0dHBPdmVyd3JpdGVcbiAgICAgICAgLy8gcGFyYW1ldGVyIHN1cHBvcnRlZCBieSBFU0YgdG8gYXZvaWQgdHJpZ2dlcmluZyBwcmVmbGlnaHQgcmVxdWVzdHMuXG4gICAgICAgIHRbXCJDb250ZW50LVR5cGVcIl0gPSBcInRleHQvcGxhaW5cIiwgZSkgZm9yICh2YXIgbiBpbiBlLnRpKSBlLnRpLmhhc093blByb3BlcnR5KG4pICYmICh0W25dID0gZS50aVtuXSk7XG4gICAgfSwgdC5wcm90b3R5cGUua2wgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gb3NbdF07XG4gICAgICAgIHJldHVybiB0aGlzLk9sICsgXCIvdjEvXCIgKyBlICsgXCI6XCIgKyBuO1xuICAgIH0sIHQ7XG59KCkpLCBzcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLkJsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5xbCgpO1xuICAgICAgICB9LCB0aGlzLlVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5RbCgpO1xuICAgICAgICB9LCB0aGlzLktsID0gW10sIHRoaXMuV2woKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLlhjID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLktsLnB1c2godCk7XG4gICAgfSwgdC5wcm90b3R5cGUucGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgdGhpcy5CbCksIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLlVsKTtcbiAgICB9LCB0LnByb3RvdHlwZS5XbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCB0aGlzLkJsKSwgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMuVWwpO1xuICAgIH0sIHQucHJvdG90eXBlLnFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFQoXCJDb25uZWN0aXZpdHlNb25pdG9yXCIsIFwiTmV0d29yayBjb25uZWN0aXZpdHkgY2hhbmdlZDogQVZBSUxBQkxFXCIpO1xuICAgICAgICBmb3IgKHZhciB0ID0gMCwgZSA9IHRoaXMuS2w7IHQgPCBlLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICAoMCwgZVt0XSkoMCAvKiBBVkFJTEFCTEUgKi8pO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUuUWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgVChcIkNvbm5lY3Rpdml0eU1vbml0b3JcIiwgXCJOZXR3b3JrIGNvbm5lY3Rpdml0eSBjaGFuZ2VkOiBVTkFWQUlMQUJMRVwiKTtcbiAgICAgICAgZm9yICh2YXIgdCA9IDAsIGUgPSB0aGlzLktsOyB0IDwgZS5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgKDAsIGVbdF0pKDEgLyogVU5BVkFJTEFCTEUgKi8pO1xuICAgICAgICB9XG4gICAgfSwgXG4gICAgLy8gVE9ETyhjaGVuYnJpYW4pOiBDb25zaWRlciBwYXNzaW5nIGluIHdpbmRvdyBlaXRoZXIgaW50byB0aGlzIGNvbXBvbmVudCBvclxuICAgIC8vIGhlcmUgZm9yIHRlc3RpbmcgdmlhIEZha2VXaW5kb3cuXG4gICAgLyoqIENoZWNrcyB0aGF0IGFsbCB1c2VkIGF0dHJpYnV0ZXMgb2Ygd2luZG93IGFyZSBhdmFpbGFibGUuICovXG4gICAgdC5rbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ICYmIHZvaWQgMCAhPT0gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJiYgdm9pZCAwICE9PSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbiAgICB9LCB0O1xufSgpLCBhcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLlhjID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBOby1vcC5cbiAgICB9LCB0LnByb3RvdHlwZS5wYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBOby1vcC5cbiAgICB9LCB0O1xufSgpLCBjcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgdGhpcy5zeW5jaHJvbml6ZVRhYnMgPSAhMTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVyID0gTXIodC5GbC50KSwgdGhpcy5raCA9IHRoaXMuamwodCksIHRoaXMucGVyc2lzdGVuY2UgPSB0aGlzLkdsKHQpLCBcbiAgICAgICAgICAgICAgICAgICAgWyA0IC8qeWllbGQqLyAsIHRoaXMucGVyc2lzdGVuY2Uuc3RhcnQoKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgdGhpcy56bCA9IHRoaXMuSGwodCksIHRoaXMuS2MgPSB0aGlzLkpsKHQpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkhsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCB0LnByb3RvdHlwZS5KbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGNvKHRoaXMucGVyc2lzdGVuY2UsIG5ldyBIdSwgdC5ZbCwgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9LCB0LnByb3RvdHlwZS5HbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBlcyhycy5nbCwgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9LCB0LnByb3RvdHlwZS5qbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBmdTtcbiAgICB9LCB0LnByb3RvdHlwZS50ZXJtaW5hdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnpsICYmIHRoaXMuemwuc3RvcCgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5raC5wYSgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5wZXJzaXN0ZW5jZS5wYSgpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQ7XG59KCksIGhzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihyKSB7XG4gICAgZnVuY3Rpb24gaSh0LCBlLCBuKSB7XG4gICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChpID0gci5jYWxsKHRoaXMpIHx8IHRoaXMpLlhsID0gdCwgaS5jYWNoZVNpemVCeXRlcyA9IGUsIGkuZm9yY2VPd25lcnNoaXAgPSBuLCBcbiAgICAgICAgaS5zeW5jaHJvbml6ZVRhYnMgPSAhMSwgaTtcbiAgICB9XG4gICAgcmV0dXJuIHQoaSwgciksIGkucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHIucHJvdG90eXBlLmluaXRpYWxpemUuY2FsbCh0aGlzLCB0KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyA0IC8qeWllbGQqLyAsIF9vKHRoaXMuS2MpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgdGhpcy5YbC5pbml0aWFsaXplKHRoaXMsIHQpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5xdWV1ZSB3cml0ZXMgZnJvbSBhIHByZXZpb3VzIHNlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgWXUodGhpcy5YbC5ndSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAvLyBFbnF1ZXVlIHdyaXRlcyBmcm9tIGEgcHJldmlvdXMgc2Vzc2lvblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCBHbyh0aGlzLlhsLk9oKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBpLnByb3RvdHlwZS5KbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGNvKHRoaXMucGVyc2lzdGVuY2UsIG5ldyBIdSwgdC5ZbCwgdGhpcy5zZXJpYWxpemVyKTtcbiAgICB9LCBpLnByb3RvdHlwZS5IbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnBlcnNpc3RlbmNlLkxyLlJyO1xuICAgICAgICByZXR1cm4gbmV3IFlyKGUsIHQucnMpO1xuICAgIH0sIGkucHJvdG90eXBlLkdsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHNvKHQuRmwudCwgdC5GbC5wZXJzaXN0ZW5jZUtleSksIG4gPSB2b2lkIDAgIT09IHRoaXMuY2FjaGVTaXplQnl0ZXMgPyBXci5Ucih0aGlzLmNhY2hlU2l6ZUJ5dGVzKSA6IFdyLm1yO1xuICAgICAgICByZXR1cm4gbmV3IG5vKHRoaXMuc3luY2hyb25pemVUYWJzLCBlLCB0LmNsaWVudElkLCBuLCB0LnJzLCB2cigpLCB5cigpLCB0aGlzLnNlcmlhbGl6ZXIsIHRoaXMua2gsICEhdGhpcy5mb3JjZU93bmVyc2hpcCk7XG4gICAgfSwgaS5wcm90b3R5cGUuamwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgZnU7XG4gICAgfSwgaTtcbn0oY3MpLCBmcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24ocikge1xuICAgIGZ1bmN0aW9uIGkodCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobiA9IHIuY2FsbCh0aGlzLCB0LCBlLCAvKiBmb3JjZU93bmVyc2hpcD0gKi8gITEpIHx8IHRoaXMpLlhsID0gdCwgbi5jYWNoZVNpemVCeXRlcyA9IGUsIFxuICAgICAgICBuLnN5bmNocm9uaXplVGFicyA9ICEwLCBuO1xuICAgIH1cbiAgICByZXR1cm4gdChpLCByKSwgaS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpLCBvID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbih1KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh1LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgci5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIHQpIF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUuc2VudCgpLCBpID0gdGhpcy5YbC5ndSwgdGhpcy5raCBpbnN0YW5jZW9mIGh1ID8gKHRoaXMua2guZ3UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaDogRnUuYmluZChudWxsLCBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZoOiBLdS5iaW5kKG51bGwsIGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGg6IFF1LmJpbmQobnVsbCwgaSksXG4gICAgICAgICAgICAgICAgICAgICAgICBDYTogR3UuYmluZChudWxsLCBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxoOiBxdS5iaW5kKG51bGwsIGkpXG4gICAgICAgICAgICAgICAgICAgIH0sIFsgNCAvKnlpZWxkKi8gLCB0aGlzLmtoLnN0YXJ0KCkgXSkgOiBbIDMgLypicmVhayovICwgMyBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHUuc2VudCgpLCB1LmxhYmVsID0gMztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBUaGlzIHdpbGwgaW1tZWRpYXRlbHkgY2FsbCB0aGUgbGlzdGVuZXIsIHNvIHdlIG1ha2Ugc3VyZSB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgaXQgYWZ0ZXIgbG9jYWxTdG9yZSAvIHJlbW90ZVN0b3JlIGFyZSBzdGFydGVkLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHRoaXMucGVyc2lzdGVuY2UuX2EoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKG8sIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBqdSh0aGlzLlhsLmd1LCB0KSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VudCgpLCB0aGlzLnpsICYmICh0ICYmICF0aGlzLnpsLnlyID8gdGhpcy56bC5zdGFydCh0aGlzLktjKSA6IHQgfHwgdGhpcy56bC5zdG9wKCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgd2lsbCBpbW1lZGlhdGVseSBjYWxsIHRoZSBsaXN0ZW5lciwgc28gd2UgbWFrZSBzdXJlIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCBpdCBhZnRlciBsb2NhbFN0b3JlIC8gcmVtb3RlU3RvcmUgYXJlIHN0YXJ0ZWQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1LnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBpLnByb3RvdHlwZS5qbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB2cigpO1xuICAgICAgICBpZiAoIWh1LmtuKGUpKSB0aHJvdyBuZXcgaihGLlVOSU1QTEVNRU5URUQsIFwiSW5kZXhlZERCIHBlcnNpc3RlbmNlIGlzIG9ubHkgYXZhaWxhYmxlIG9uIHBsYXRmb3JtcyB0aGF0IHN1cHBvcnQgTG9jYWxTdG9yYWdlLlwiKTtcbiAgICAgICAgdmFyIG4gPSBzbyh0LkZsLnQsIHQuRmwucGVyc2lzdGVuY2VLZXkpO1xuICAgICAgICByZXR1cm4gbmV3IGh1KGUsIHQucnMsIG4sIHQuY2xpZW50SWQsIHQuWWwpO1xuICAgIH0sIGk7XG59KGhzKSwgbHMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7fVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24odCwgcikge1xuICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuS2MgPyBbIDMgLypicmVhayovICwgMiBdIDogKHRoaXMuS2MgPSB0LktjLCB0aGlzLmtoID0gdC5raCwgdGhpcy5XYyA9IHRoaXMuWmwociksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLk9oID0gdGhpcy50XyhyKSwgdGhpcy5NaCA9IHRoaXMuZV8ociksIHRoaXMuZ3UgPSB0aGlzLm5fKHIsIFxuICAgICAgICAgICAgICAgICAgICAvKiBzdGFydEFzUHJpbWFyeT0qLyAhdC5zeW5jaHJvbml6ZVRhYnMpLCB0aGlzLmtoLk9jID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV1KGUuZ3UsIHQsIDEgLyogU2hhcmVkQ2xpZW50U3RhdGUgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLk9oLmpjLnNfID0gUnUuYmluZChudWxsLCB0aGlzLmd1KSwgWyA0IC8qeWllbGQqLyAsIFhvKHRoaXMuT2gsIHRoaXMuZ3UuSmgpIF0pO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG4uc2VudCgpLCBuLmxhYmVsID0gMjtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5lXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfcjtcbiAgICB9LCB0LnByb3RvdHlwZS5abCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUsIG4gPSBNcih0LkZsLnQpLCByID0gKGUgPSB0LkZsLCBuZXcgdXMoZSkpO1xuICAgICAgICAvKiogUmV0dXJuIHRoZSBQbGF0Zm9ybS1zcGVjaWZpYyBjb25uZWN0aXZpdHkgbW9uaXRvci4gKi8gcmV0dXJuIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgeG8odCwgZSwgbik7XG4gICAgICAgIH0odC5jcmVkZW50aWFscywgciwgbik7XG4gICAgfSwgdC5wcm90b3R5cGUudF8gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlLCBuLCByLCBpLCBvLCB1ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGUgPSB0aGlzLktjLCBuID0gdGhpcy5XYywgciA9IHQucnMsIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gRXUodS5ndSwgdCwgMCAvKiBSZW1vdGVTdG9yZSAqLyk7XG4gICAgICAgIH0sIG8gPSBzcy5rbigpID8gbmV3IHNzIDogbmV3IGFzLCBuZXcgU28oZSwgbiwgciwgaSwgbyk7XG4gICAgfSwgdC5wcm90b3R5cGUubl8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBlLCBuLCBcbiAgICAgICAgLy8gUE9SVElORyBOT1RFOiBNYW5hZ2VzIHN0YXRlIHN5bmNocm9uaXphdGlvbiBpbiBtdWx0aS10YWIgZW52aXJvbm1lbnRzLlxuICAgICAgICByLCBpLCBvLCB1KSB7XG4gICAgICAgICAgICB2YXIgcyA9IG5ldyBndSh0LCBlLCBuLCByLCBpLCBvKTtcbiAgICAgICAgICAgIHJldHVybiB1ICYmIChzLkhoID0gITApLCBzO1xuICAgICAgICB9KHRoaXMuS2MsIHRoaXMuT2gsIHRoaXMuTWgsIHRoaXMua2gsIHQuWWwsIHQuJGgsIGUpO1xuICAgIH0sIHQucHJvdG90eXBlLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9IEQodCksIFQoXCJSZW1vdGVTdG9yZVwiLCBcIlJlbW90ZVN0b3JlIHNodXR0aW5nIGRvd24uXCIpLCBlLkhjLmFkZCg1IC8qIFNodXRkb3duICovKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBbIDQgLyp5aWVsZCovICwgRG8oZSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgZS5ZYy5wYSgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgT25saW5lU3RhdGUgdG8gVW5rbm93biAocmF0aGVyIHRoYW4gT2ZmbGluZSkgdG8gYXZvaWQgcG90ZW50aWFsbHlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJpbmcgc3B1cmlvdXMgbGlzdGVuZXIgZXZlbnRzIHdpdGggY2FjaGVkIGRhdGEsIGV0Yy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGUuWmMuc2V0KFwiVW5rbm93blwiIC8qIFVua25vd24gKi8pLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KHRoaXMuT2gpO1xuICAgIH0sIHQ7XG59KCksIHBzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IHQsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdoZW4gc2V0IHRvIHRydWUsIHdpbGwgbm90IHJhaXNlIGZ1dHVyZSBldmVudHMuIE5lY2Vzc2FyeSB0byBkZWFsIHdpdGhcbiAgICAgICAgICAgICAqIGFzeW5jIGRldGFjaG1lbnQgb2YgbGlzdGVuZXIuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tdXRlZCA9ICExO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5uZXh0ICYmIHRoaXMuaV8odGhpcy5vYnNlcnZlci5uZXh0LCB0KTtcbiAgICB9LCB0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5lcnJvciA/IHRoaXMuaV8odGhpcy5vYnNlcnZlci5lcnJvciwgdCkgOiBjb25zb2xlLmVycm9yKFwiVW5jYXVnaHQgRXJyb3IgaW4gc25hcHNob3QgbGlzdGVuZXI6XCIsIHQpO1xuICAgIH0sIHQucHJvdG90eXBlLnJfID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubXV0ZWQgPSAhMDtcbiAgICB9LCB0LnByb3RvdHlwZS5pXyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICB0aGlzLm11dGVkIHx8IHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbi5tdXRlZCB8fCB0KGUpO1xuICAgICAgICB9KSwgMCk7XG4gICAgfSwgdDtcbn0oKSwgZHMgPSBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5vXyA9IHQ7XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIHZzKHQsIGUsIG4pIHtcbiAgICBpZiAoIW4pIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIHQgKyBcIigpIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBhbiBlbXB0eSBcIiArIGUgKyBcIi5cIik7XG59XG5cbmZ1bmN0aW9uIHlzKHQsIGUpIHtcbiAgICBpZiAodm9pZCAwID09PSBlKSByZXR1cm4ge1xuICAgICAgICBtZXJnZTogITFcbiAgICB9O1xuICAgIGlmICh2b2lkIDAgIT09IGUubWVyZ2VGaWVsZHMgJiYgdm9pZCAwICE9PSBlLm1lcmdlKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBvcHRpb25zIHBhc3NlZCB0byBmdW5jdGlvbiBcIiArIHQgKyAnKCk6IFlvdSBjYW5ub3Qgc3BlY2lmeSBib3RoIFwibWVyZ2VcIiBhbmQgXCJtZXJnZUZpZWxkc1wiLicpO1xuICAgIHJldHVybiBlO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHR3byBib29sZWFuIG9wdGlvbnMgYXJlIG5vdCBzZXQgYXQgdGhlIHNhbWUgdGltZS5cbiAqLyBmdW5jdGlvbiBncyh0LCBlLCBuLCByKSB7XG4gICAgaWYgKCEwID09PSBlICYmICEwID09PSByKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIHQgKyBcIiBhbmQgXCIgKyBuICsgXCIgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXIuXCIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBpdCdzIGEgbm9uLW51bGwgb2JqZWN0IHdpdGhvdXQgYSBjdXN0b20gcHJvdG90eXBlXG4gKiAoaS5lLiBleGNsdWRlcyBBcnJheSwgRGF0ZSwgZXRjLikuXG4gKi9cbi8qKiBSZXR1cm5zIGEgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHR5cGUgLyB2YWx1ZSBvZiB0aGUgcHJvdmlkZWQgaW5wdXQuICovIGZ1bmN0aW9uIG1zKHQpIHtcbiAgICBpZiAodm9pZCAwID09PSB0KSByZXR1cm4gXCJ1bmRlZmluZWRcIjtcbiAgICBpZiAobnVsbCA9PT0gdCkgcmV0dXJuIFwibnVsbFwiO1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSByZXR1cm4gdC5sZW5ndGggPiAyMCAmJiAodCA9IHQuc3Vic3RyaW5nKDAsIDIwKSArIFwiLi4uXCIpLCBcbiAgICBKU09OLnN0cmluZ2lmeSh0KTtcbiAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCB8fCBcImJvb2xlYW5cIiA9PSB0eXBlb2YgdCkgcmV0dXJuIFwiXCIgKyB0O1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiB0KSB7XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgQXJyYXkpIHJldHVybiBcImFuIGFycmF5XCI7XG4gICAgICAgIHZhciBlID0gXG4gICAgICAgIC8qKiBIYWNreSBtZXRob2QgdG8gdHJ5IHRvIGdldCB0aGUgY29uc3RydWN0b3IgbmFtZSBmb3IgYW4gb2JqZWN0LiAqL1xuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciBlID0gL2Z1bmN0aW9uXFxzKyhbXlxccyhdKylcXHMqXFwoLy5leGVjKHQuY29uc3RydWN0b3IudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGUgJiYgZS5sZW5ndGggPiAxKSByZXR1cm4gZVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KHQpO1xuICAgICAgICByZXR1cm4gZSA/IFwiYSBjdXN0b20gXCIgKyBlICsgXCIgb2JqZWN0XCIgOiBcImFuIG9iamVjdFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ID8gXCJhIGZ1bmN0aW9uXCIgOiBTKCk7XG59XG5cbmZ1bmN0aW9uIHdzKHQsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmUpIHtcbiAgICBpZiAodCBpbnN0YW5jZW9mIGRzICYmICh0ID0gdC5vXyksICEodCBpbnN0YW5jZW9mIGUpKSB7XG4gICAgICAgIGlmIChlLm5hbWUgPT09IHQuY29uc3RydWN0b3IubmFtZSkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIlR5cGUgZG9lcyBub3QgbWF0Y2ggdGhlIGV4cGVjdGVkIGluc3RhbmNlLiBEaWQgeW91IHBhc3MgYSByZWZlcmVuY2UgZnJvbSBhIGRpZmZlcmVudCBGaXJlc3RvcmUgU0RLP1wiKTtcbiAgICAgICAgdmFyIG4gPSBtcyh0KTtcbiAgICAgICAgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkV4cGVjdGVkIHR5cGUgJ1wiICsgZS5uYW1lICsgXCInLCBidXQgaXQgd2FzOiBcIiArIG4pO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gYnModCwgZSkge1xuICAgIGlmIChlIDw9IDApIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBcIiArIHQgKyBcIigpIHJlcXVpcmVzIGEgcG9zaXRpdmUgbnVtYmVyLCBidXQgaXQgd2FzOiBcIiArIGUgKyBcIi5cIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFNlbnRpbmVsIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIHdoZW4gd3JpdGluZyBkb2N1bWVudCBmaWVsZHMgd2l0aCBgc2V0KClgXG4gKiBvciBgdXBkYXRlKClgLlxuICovIHZhciBfcyA9IFxuLyoqXG4gICAgICogQHBhcmFtIF9tZXRob2ROYW1lIFRoZSBwdWJsaWMgQVBJIGVuZHBvaW50IHRoYXQgcmV0dXJucyB0aGlzIGNsYXNzLlxuICAgICAqL1xuZnVuY3Rpb24odCkge1xuICAgIHRoaXMuYV8gPSB0O1xufSwgSXMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLmNfID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAoMiAvKiBNZXJnZVNldCAqLyAhPT0gdC51XykgdGhyb3cgMSAvKiBVcGRhdGUgKi8gPT09IHQudV8gPyB0LmhfKHRoaXMuYV8gKyBcIigpIGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsIG9mIHlvdXIgdXBkYXRlIGRhdGFcIikgOiB0LmhfKHRoaXMuYV8gKyBcIigpIGNhbm5vdCBiZSB1c2VkIHdpdGggc2V0KCkgdW5sZXNzIHlvdSBwYXNzIHttZXJnZTp0cnVlfVwiKTtcbiAgICAgICAgLy8gTm8gdHJhbnNmb3JtIHRvIGFkZCBmb3IgYSBkZWxldGUsIGJ1dCB3ZSBuZWVkIHRvIGFkZCBpdCB0byBvdXJcbiAgICAgICAgLy8gZmllbGRNYXNrIHNvIGl0IGdldHMgZGVsZXRlZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdC5RZS5wdXNoKHQucGF0aCksIG51bGw7XG4gICAgfSwgbi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBuO1xuICAgIH0sIG47XG59KF9zKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc2VudGluZWwgZm9yIHVzZSB3aXRoIHtAbGluayB1cGRhdGVEb2MoKX0gb3JcbiAqIHtAbGluayBzZXREb2MgYHNldERvYyh7fSwgeyBtZXJnZTogdHJ1ZSB9KWB9IHRvIG1hcmsgYSBmaWVsZCBmb3IgZGVsZXRpb24uXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBjaGlsZCBjb250ZXh0IGZvciBwYXJzaW5nIFNlcmlhbGl6YWJsZUZpZWxkVmFsdWVzLlxuICpcbiAqIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gY2FsbGluZyBgUGFyc2VDb250ZXh0LmNvbnRleHRXaXRoYCBiZWNhdXNlIGl0IGtlZXBzXG4gKiB0aGUgZmllbGRUcmFuc2Zvcm1zIGFuZCBmaWVsZE1hc2sgc2VwYXJhdGUuXG4gKlxuICogVGhlIGNyZWF0ZWQgY29udGV4dCBoYXMgaXRzIGBkYXRhU291cmNlYCBzZXQgdG8gYFVzZXJEYXRhU291cmNlLkFyZ3VtZW50YC5cbiAqIEFsdGhvdWdoIHRoZXNlIHZhbHVlcyBhcmUgdXNlZCB3aXRoIHdyaXRlcywgYW55IGVsZW1lbnRzIGluIHRoZXNlIEZpZWxkVmFsdWVzXG4gKiBhcmUgbm90IGNvbnNpZGVyZWQgd3JpdGVzIHNpbmNlIHRoZXkgY2Fubm90IGNvbnRhaW4gYW55IEZpZWxkVmFsdWUgc2VudGluZWxzLFxuICogZXRjLlxuICpcbiAqIEBwYXJhbSBmaWVsZFZhbHVlIFRoZSBzZW50aW5lbCBGaWVsZFZhbHVlIGZvciB3aGljaCB0byBjcmVhdGUgYSBjaGlsZFxuICogICAgIGNvbnRleHQuXG4gKiBAcGFyYW0gY29udGV4dCBUaGUgcGFyZW50IGNvbnRleHQuXG4gKiBAcGFyYW0gYXJyYXlFbGVtZW50IFdoZXRoZXIgb3Igbm90IHRoZSBGaWVsZFZhbHVlIGhhcyBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gRXModCwgZSwgbikge1xuICAgIHJldHVybiBuZXcgSHMoe1xuICAgICAgICB1XzogMyAvKiBBcmd1bWVudCAqLyAsXG4gICAgICAgIGxfOiBlLnNldHRpbmdzLmxfLFxuICAgICAgICBtZXRob2ROYW1lOiB0LmFfLFxuICAgICAgICBfXzogblxuICAgIH0sIGUudCwgZS5zZXJpYWxpemVyLCBlLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpO1xufVxuXG52YXIgVHMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLmNfID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IFhlKHQucGF0aCwgbmV3IEJlKTtcbiAgICB9LCBuLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIG47XG4gICAgfSwgbjtcbn0oX3MpLCBOcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzLCB0KSB8fCB0aGlzKS5mXyA9IG4sIHI7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5jXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSBFcyh0aGlzLCB0LCBcbiAgICAgICAgLyphcnJheT0qLyAhMCksIG4gPSB0aGlzLmZfLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIGVhKHQsIGUpO1xuICAgICAgICB9KSksIHIgPSBuZXcgemUobik7XG4gICAgICAgIHJldHVybiBuZXcgWGUodC5wYXRoLCByKTtcbiAgICB9LCBuLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IEltcGxlbWVudCBpc0VxdWFsc1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gdDtcbiAgICB9LCBuO1xufShfcyksIHhzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0LCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChyID0gZS5jYWxsKHRoaXMsIHQpIHx8IHRoaXMpLmZfID0gbiwgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLmNfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IEVzKHRoaXMsIHQsIFxuICAgICAgICAvKmFycmF5PSovICEwKSwgbiA9IHRoaXMuZl8ubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZWEodCwgZSk7XG4gICAgICAgIH0pKSwgciA9IG5ldyBLZShuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBYZSh0LnBhdGgsIHIpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIFRPRE8obXJzY2htaWR0KTogSW1wbGVtZW50IGlzRXF1YWxzXG4gICAgICAgIHJldHVybiB0aGlzID09PSB0O1xuICAgIH0sIG47XG59KF9zKSwgQXMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKHIgPSBlLmNhbGwodGhpcywgdCkgfHwgdGhpcykuZF8gPSBuLCByO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgbi5wcm90b3R5cGUuY18gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gbmV3IFdlKHQuc2VyaWFsaXplciwgYWUodC5zZXJpYWxpemVyLCB0aGlzLmRfKSk7XG4gICAgICAgIHJldHVybiBuZXcgWGUodC5wYXRoLCBlKTtcbiAgICB9LCBuLnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICAvLyBUT0RPKG1yc2NobWlkdCk6IEltcGxlbWVudCBpc0VxdWFsc1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gdDtcbiAgICB9LCBuO1xufShfcyksIFNzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGltbXV0YWJsZSBgR2VvUG9pbnRgIG9iamVjdCB3aXRoIHRoZSBwcm92aWRlZCBsYXRpdHVkZSBhbmRcbiAgICAgKiBsb25naXR1ZGUgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBsYXRpdHVkZSBUaGUgbGF0aXR1ZGUgYXMgbnVtYmVyIGJldHdlZW4gLTkwIGFuZCA5MC5cbiAgICAgKiBAcGFyYW0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGUgYXMgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHQodCwgZSkge1xuICAgICAgICBpZiAoIWlzRmluaXRlKHQpIHx8IHQgPCAtOTAgfHwgdCA+IDkwKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiTGF0aXR1ZGUgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIC05MCBhbmQgOTAsIGJ1dCB3YXM6IFwiICsgdCk7XG4gICAgICAgIGlmICghaXNGaW5pdGUoZSkgfHwgZSA8IC0xODAgfHwgZSA+IDE4MCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkxvbmdpdHVkZSBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gLTE4MCBhbmQgMTgwLCBidXQgd2FzOiBcIiArIGUpO1xuICAgICAgICB0aGlzLndfID0gdCwgdGhpcy5UXyA9IGU7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwibGF0aXR1ZGVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhdGl0dWRlIG9mIHRoaXMgYEdlb1BvaW50YCBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53XztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImxvbmdpdHVkZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbG9uZ2l0dWRlIG9mIHRoaXMgYEdlb1BvaW50YCBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UXztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYEdlb1BvaW50YCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIFRoZSBgR2VvUG9pbnRgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhpcyBgR2VvUG9pbnRgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud18gPT09IHQud18gJiYgdGhpcy5UXyA9PT0gdC5UXztcbiAgICB9LCB0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiB0aGlzLndfLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiB0aGlzLlRfXG4gICAgICAgIH07XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQWN0dWFsbHkgcHJpdmF0ZSB0byBKUyBjb25zdW1lcnMgb2Ygb3VyIEFQSSwgc28gdGhpcyBmdW5jdGlvbiBpcyBwcmVmaXhlZFxuICAgICAqIHdpdGggYW4gdW5kZXJzY29yZS5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5JID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gVih0aGlzLndfLCB0LndfKSB8fCBWKHRoaXMuVF8sIHQuVF8pO1xuICAgIH0sIHQ7XG59KCksIGtzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5FXyA9IHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYEJ5dGVzYCBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gQmFzZTY0IHN0cmluZywgY29udmVydGluZyBpdCB0b1xuICAgICAqIGJ5dGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhc2U2NCBUaGUgQmFzZTY0IHN0cmluZyB1c2VkIHRvIGNyZWF0ZSB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICovICAgIHJldHVybiB0LmZyb21CYXNlNjRTdHJpbmcgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHQocnQuZnJvbUJhc2U2NFN0cmluZyhlKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJGYWlsZWQgdG8gY29uc3RydWN0IEJ5dGVzIGZyb20gQmFzZTY0IHN0cmluZzogXCIgKyBlKTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYEJ5dGVzYCBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gVWludDhBcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcnJheSBUaGUgVWludDhBcnJheSB1c2VkIHRvIGNyZWF0ZSB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICovXG4gICAgdC5mcm9tVWludDhBcnJheSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0KHJ0LmZyb21VaW50OEFycmF5KGUpKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIGJ5dGVzIGFzIGEgQmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiBUaGUgQmFzZTY0LWVuY29kZWQgc3RyaW5nIGNyZWF0ZWQgZnJvbSB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUudG9CYXNlNjQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRV8udG9CYXNlNjQoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIGJ5dGVzIGluIGEgbmV3IGBVaW50OEFycmF5YC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIFVpbnQ4QXJyYXkgY3JlYXRlZCBmcm9tIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS50b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRV8udG9VaW50OEFycmF5KCk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYEJ5dGVzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBgQnl0ZXNgIG9iamVjdC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJCeXRlcyhiYXNlNjQ6IFwiICsgdGhpcy50b0Jhc2U2NCgpICsgXCIpXCI7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYEJ5dGVzYCBvYmplY3QgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlciBUaGUgYEJ5dGVzYCBvYmplY3QgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGlzIGBCeXRlc2Agb2JqZWN0IGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRV8uaXNFcXVhbCh0LkVfKTtcbiAgICB9LCB0O1xufSgpLCBEcyA9IG5ldyBNYXAsIE9zID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IHQuaG9zdCkge1xuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdC5zc2wpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJDYW4ndCBwcm92aWRlIHNzbCBvcHRpb24gaWYgaG9zdCBvcHRpb24gaXMgbm90IHNldFwiKTtcbiAgICAgICAgICAgIHRoaXMuaG9zdCA9IFwiZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tXCIsIHRoaXMuc3NsID0gITA7XG4gICAgICAgIH0gZWxzZSB0aGlzLmhvc3QgPSB0Lmhvc3QsIHRoaXMuc3NsID0gbnVsbCA9PT0gKGUgPSB0LnNzbCkgfHwgdm9pZCAwID09PSBlIHx8IGU7XG4gICAgICAgIGlmICh0aGlzLmNyZWRlbnRpYWxzID0gdC5jcmVkZW50aWFscywgdGhpcy5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzID0gISF0Lmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMsIFxuICAgICAgICB2b2lkIDAgPT09IHQuY2FjaGVTaXplQnl0ZXMpIHRoaXMuY2FjaGVTaXplQnl0ZXMgPSA0MTk0MzA0MDsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoLTEgIT09IHQuY2FjaGVTaXplQnl0ZXMgJiYgdC5jYWNoZVNpemVCeXRlcyA8IDEwNDg1NzYpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJjYWNoZVNpemVCeXRlcyBtdXN0IGJlIGF0IGxlYXN0IDEwNDg1NzZcIik7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2l6ZUJ5dGVzID0gdC5jYWNoZVNpemVCeXRlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcgPSAhIXQuZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZywgdGhpcy5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPSAhIXQuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nLCBcbiAgICAgICAgZ3MoXCJleHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nXCIsIHQuZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZywgXCJleHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmdcIiwgdC5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdCA9PT0gdC5ob3N0ICYmIHRoaXMuc3NsID09PSB0LnNzbCAmJiB0aGlzLmNyZWRlbnRpYWxzID09PSB0LmNyZWRlbnRpYWxzICYmIHRoaXMuY2FjaGVTaXplQnl0ZXMgPT09IHQuY2FjaGVTaXplQnl0ZXMgJiYgdGhpcy5leHBlcmltZW50YWxGb3JjZUxvbmdQb2xsaW5nID09PSB0LmV4cGVyaW1lbnRhbEZvcmNlTG9uZ1BvbGxpbmcgJiYgdGhpcy5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcgPT09IHQuZXhwZXJpbWVudGFsQXV0b0RldGVjdExvbmdQb2xsaW5nICYmIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcyA9PT0gdC5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogVGhlIENsb3VkIEZpcmVzdG9yZSBzZXJ2aWNlIGludGVyZmFjZS5cbiAqXG4gKiBEbyBub3QgY2FsbCB0aGlzIGNvbnN0cnVjdG9yIGRpcmVjdGx5LiBJbnN0ZWFkLCB1c2Uge0BsaW5rIGdldEZpcmVzdG9yZSgpfS5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBIZWxwZXIgZnVuY3Rpb24gdG8gYXNzZXJ0IFVpbnQ4QXJyYXkgaXMgYXZhaWxhYmxlIGF0IHJ1bnRpbWUuICovXG5mdW5jdGlvbiBQcygpIHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgVWludDhBcnJheSkgdGhyb3cgbmV3IGooRi5VTklNUExFTUVOVEVELCBcIlVpbnQ4QXJyYXlzIGFyZSBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXCIpO1xufVxuXG4vKiogSGVscGVyIGZ1bmN0aW9uIHRvIGFzc2VydCBCYXNlNjQgZnVuY3Rpb25zIGFyZSBhdmFpbGFibGUgYXQgcnVudGltZS4gKi8gZnVuY3Rpb24gVnMoKSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGF0b2IpIHRocm93IG5ldyBqKEYuVU5JTVBMRU1FTlRFRCwgXCJCbG9icyBhcmUgdW5hdmFpbGFibGUgaW4gRmlyZXN0b3JlIGluIHRoaXMgZW52aXJvbm1lbnQuXCIpO1xufVxuXG4vKipcbiAqIEltbXV0YWJsZSBjbGFzcyBob2xkaW5nIGEgYmxvYiAoYmluYXJ5IGRhdGEpLlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgZGlyZWN0bHkgZXhwb3NlZCBpbiB0aGUgcHVibGljIEFQSS4gSXQgZXh0ZW5kcyB0aGUgQnl0ZXMgY2xhc3NcbiAqIG9mIHRoZSBmaXJlc3RvcmUtZXhwIEFQSSB0byBzdXBwb3J0IGBpbnN0YW5jZW9mIEJ5dGVzYCBjaGVja3MgZHVyaW5nIHVzZXJcbiAqIGRhdGEgY29udmVyc2lvbi5cbiAqXG4gKiBOb3RlIHRoYXQgd2hpbGUgeW91IGNhbid0IGhpZGUgdGhlIGNvbnN0cnVjdG9yIGluIEphdmFTY3JpcHQgY29kZSwgd2UgYXJlXG4gKiB1c2luZyB0aGUgaGFjayBhYm92ZSB0byBtYWtlIHN1cmUgbm8tb25lIG91dHNpZGUgdGhpcyBtb2R1bGUgY2FuIGNhbGwgaXQuXG4gKi8gdmFyIENzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGUgJiYgZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLmZyb21CYXNlNjRTdHJpbmcgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIFZzKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IG4ocnQuZnJvbUJhc2U2NFN0cmluZyh0KSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJGYWlsZWQgdG8gY29uc3RydWN0IEJsb2IgZnJvbSBCYXNlNjQgc3RyaW5nOiBcIiArIHQpO1xuICAgICAgICB9XG4gICAgfSwgbi5mcm9tVWludDhBcnJheSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFBzKCksIG5ldyBuKHJ0LmZyb21VaW50OEFycmF5KHQpKTtcbiAgICB9LCBuLnByb3RvdHlwZS50b0Jhc2U2NCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVnMoKSwgZS5wcm90b3R5cGUudG9CYXNlNjQuY2FsbCh0aGlzKTtcbiAgICB9LCBuLnByb3RvdHlwZS50b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBzKCksIGUucHJvdG90eXBlLnRvVWludDhBcnJheS5jYWxsKHRoaXMpO1xuICAgIH0sIG4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIkJsb2IoYmFzZTY0OiBcIiArIHRoaXMudG9CYXNlNjQoKSArIFwiKVwiO1xuICAgIH0sIG47XG59KGtzKSwgTHMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7fVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5JXyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgc3dpdGNoICh2b2lkIDAgPT09IGUgJiYgKGUgPSBcIm5vbmVcIiksIGp0KHQpKSB7XG4gICAgICAgICAgY2FzZSAwIC8qIE51bGxWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgIGNhc2UgMSAvKiBCb29sZWFuVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHQuYm9vbGVhblZhbHVlO1xuXG4gICAgICAgICAgY2FzZSAyIC8qIE51bWJlclZhbHVlICovIDpcbiAgICAgICAgICAgIHJldHVybiBIdCh0LmludGVnZXJWYWx1ZSB8fCB0LmRvdWJsZVZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgMyAvKiBUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tXyh0LnRpbWVzdGFtcFZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgNCAvKiBTZXJ2ZXJUaW1lc3RhbXBWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5BXyh0LCBlKTtcblxuICAgICAgICAgIGNhc2UgNSAvKiBTdHJpbmdWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdC5zdHJpbmdWYWx1ZTtcblxuICAgICAgICAgIGNhc2UgNiAvKiBCbG9iVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUl8oSnQodC5ieXRlc1ZhbHVlKSk7XG5cbiAgICAgICAgICBjYXNlIDcgLyogUmVmVmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUF8odC5yZWZlcmVuY2VWYWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIDggLyogR2VvUG9pbnRWYWx1ZSAqLyA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nXyh0Lmdlb1BvaW50VmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSA5IC8qIEFycmF5VmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVl8odC5hcnJheVZhbHVlLCBlKTtcblxuICAgICAgICAgIGNhc2UgMTAgLyogT2JqZWN0VmFsdWUgKi8gOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueV8odC5tYXBWYWx1ZSwgZSk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgUygpO1xuICAgICAgICB9XG4gICAgfSwgdC5wcm90b3R5cGUueV8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IHt9O1xuICAgICAgICByZXR1cm4gTSh0LmZpZWxkcyB8fCB7fSwgKGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgIHJbdF0gPSBuLklfKGksIGUpO1xuICAgICAgICB9KSksIHI7XG4gICAgfSwgdC5wcm90b3R5cGUuZ18gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgU3MoSHQodC5sYXRpdHVkZSksIEh0KHQubG9uZ2l0dWRlKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuVl8gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgcmV0dXJuICh0LnZhbHVlcyB8fCBbXSkubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbi5JXyh0LCBlKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkFfID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBzd2l0Y2ggKGUpIHtcbiAgICAgICAgICBjYXNlIFwicHJldmlvdXNcIjpcbiAgICAgICAgICAgIHZhciBuID0gVXQodCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBuID8gbnVsbCA6IHRoaXMuSV8obiwgZSk7XG5cbiAgICAgICAgICBjYXNlIFwiZXN0aW1hdGVcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1fKHF0KHQpKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLm1fID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFl0KHQpO1xuICAgICAgICByZXR1cm4gbmV3IEIoZS5zZWNvbmRzLCBlLm5hbm9zKTtcbiAgICB9LCB0LnByb3RvdHlwZS5wXyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBLLmsodCk7XG4gICAgICAgIGsoTWUobikpO1xuICAgICAgICB2YXIgciA9IG5ldyBfKG4uZ2V0KDEpLCBuLmdldCgzKSksIGkgPSBuZXcgWShuLnYoNSkpO1xuICAgICAgICByZXR1cm4gci5pc0VxdWFsKGUpIHx8IFxuICAgICAgICAvLyBUT0RPKGIvNjQxMzAyMDIpOiBTb21laG93IHN1cHBvcnQgZm9yZWlnbiByZWZlcmVuY2VzLlxuICAgICAgICBOKFwiRG9jdW1lbnQgXCIgKyBpICsgXCIgY29udGFpbnMgYSBkb2N1bWVudCByZWZlcmVuY2Ugd2l0aGluIGEgZGlmZmVyZW50IGRhdGFiYXNlIChcIiArIHIucHJvamVjdElkICsgXCIvXCIgKyByLmRhdGFiYXNlICsgXCIpIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQuIEl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHJlZmVyZW5jZSBpbiB0aGUgY3VycmVudCBkYXRhYmFzZSAoXCIgKyBlLnByb2plY3RJZCArIFwiL1wiICsgZS5kYXRhYmFzZSArIFwiKSBpbnN0ZWFkLlwiKSwgXG4gICAgICAgIGk7XG4gICAgfSwgdDtcbn0oKSwgUnMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKG4gPSBlLmNhbGwodGhpcykgfHwgdGhpcykuZmlyZXN0b3JlID0gdCwgbjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLlJfID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IENzKHQpO1xuICAgIH0sIG4ucHJvdG90eXBlLlBfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMucF8odCwgdGhpcy5maXJlc3RvcmUudl8pO1xuICAgICAgICByZXR1cm4gemEuYl8oZSwgdGhpcy5maXJlc3RvcmUsIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCk7XG4gICAgfSwgbjtcbn0oTHMpLCBNcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgLy8gTm90ZTogVGhpcyBjbGFzcyBpcyBzdHJpcHBlZCBkb3duIHZlcnNpb24gb2YgdGhlIERvY3VtZW50U25hcHNob3QgaW5cbiAgICAvLyB0aGUgbGVnYWN5IFNESy4gVGhlIGNoYW5nZXMgYXJlOlxuICAgIC8vIC0gTm8gc3VwcG9ydCBmb3IgU25hcHNob3RNZXRhZGF0YS5cbiAgICAvLyAtIE5vIHN1cHBvcnQgZm9yIFNuYXBzaG90T3B0aW9ucy5cbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgICAgdGhpcy5TXyA9IHQsIHRoaXMuRF8gPSBlLCB0aGlzLkNfID0gbiwgdGhpcy5OXyA9IHIsIHRoaXMueF8gPSBpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgLyoqIFByb3BlcnR5IG9mIHRoZSBgRG9jdW1lbnRTbmFwc2hvdGAgdGhhdCBwcm92aWRlcyB0aGUgZG9jdW1lbnQncyBJRC4gKi8gZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNfLnBhdGguQygpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwicmVmXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBgRG9jdW1lbnRSZWZlcmVuY2VgIGZvciB0aGUgZG9jdW1lbnQgaW5jbHVkZWQgaW4gdGhlIGBEb2N1bWVudFNuYXBzaG90YC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGpzKHRoaXMuU18sIHRoaXMueF8sIHRoaXMuQ18pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBTaWduYWxzIHdoZXRoZXIgb3Igbm90IHRoZSBkb2N1bWVudCBhdCB0aGUgc25hcHNob3QncyBsb2NhdGlvbiBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIGRvY3VtZW50IGV4aXN0cy5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5leGlzdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuTl87XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmXG4gICAgICogdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgb3IgYHVuZGVmaW5lZGBcbiAgICAgKiBpZiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKi9cbiAgICB0LnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLk5fKSB7XG4gICAgICAgICAgICBpZiAodGhpcy54Xykge1xuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byB1c2UgdGhlIGNvbnZlcnRlciBhbmQgY3JlYXRlIGEgbmV3IERvY3VtZW50U25hcHNob3RcbiAgICAgICAgICAgICAgICAvLyBpZiBhIGNvbnZlcnRlciBoYXMgYmVlbiBwcm92aWRlZC5cbiAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBVcyh0aGlzLlNfLCB0aGlzLkRfLCB0aGlzLkNfLCB0aGlzLk5fLCBcbiAgICAgICAgICAgICAgICAvKiBjb252ZXJ0ZXI9ICovIG51bGwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnhfLmZyb21GaXJlc3RvcmUodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EXy5JXyh0aGlzLk5fLnNuKCkpO1xuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBmaWVsZCBzcGVjaWZpZWQgYnkgYGZpZWxkUGF0aGAuIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgdGhlXG4gICAgICogZG9jdW1lbnQgb3IgZmllbGQgZG9lc24ndCBleGlzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWVsZFBhdGggVGhlIHBhdGggKGZvciBleGFtcGxlICdmb28nIG9yICdmb28uYmFyJykgdG8gYSBzcGVjaWZpY1xuICAgICAqIGZpZWxkLlxuICAgICAqIEByZXR1cm4gVGhlIGRhdGEgYXQgdGhlIHNwZWNpZmllZCBmaWVsZCBsb2NhdGlvbiBvciB1bmRlZmluZWQgaWYgbm8gc3VjaFxuICAgICAqIGZpZWxkIGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICovXG4gICAgLy8gV2UgYXJlIHVzaW5nIGBhbnlgIGhlcmUgdG8gYXZvaWQgYW4gZXhwbGljaXQgY2FzdCBieSBvdXIgdXNlcnMuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICh0aGlzLk5fKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuTl8uZGF0YSgpLmZpZWxkKHFzKFwiRG9jdW1lbnRTbmFwc2hvdC5nZXRcIiwgdCkpO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGUpIHJldHVybiB0aGlzLkRfLklfKGUpO1xuICAgICAgICB9XG4gICAgfSwgdDtcbn0oKSwgVXMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiBBbiBgT2JqZWN0YCBjb250YWluaW5nIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqLyAgICByZXR1cm4gdChuLCBlKSwgbi5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZS5wcm90b3R5cGUuZGF0YS5jYWxsKHRoaXMpO1xuICAgIH0sIG47XG59KE1zKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29udmVydHMgRmlyZXN0b3JlJ3MgaW50ZXJuYWwgdHlwZXMgdG8gdGhlIEphdmFTY3JpcHQgdHlwZXMgdGhhdCB3ZSBleHBvc2VcbiAqIHRvIHRoZSB1c2VyLlxuICovXG4vKipcbiAqIEhlbHBlciB0aGF0IGNhbGxzIGZyb21Eb3RTZXBhcmF0ZWRTdHJpbmcoKSBidXQgd3JhcHMgYW55IGVycm9yIHRocm93bi5cbiAqL1xuZnVuY3Rpb24gcXModCwgZSkge1xuICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gc2EodCwgZSkgOiBlIGluc3RhbmNlb2YgZHMgPyBlLm9fLkZfIDogZS5GXztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBgRmllbGRQYXRoYCByZWZlcnMgdG8gYSBmaWVsZCBpbiBhIGRvY3VtZW50LiBUaGUgcGF0aCBtYXkgY29uc2lzdCBvZiBhXG4gKiBzaW5nbGUgZmllbGQgbmFtZSAocmVmZXJyaW5nIHRvIGEgdG9wLWxldmVsIGZpZWxkIGluIHRoZSBkb2N1bWVudCksIG9yIGFcbiAqIGxpc3Qgb2YgZmllbGQgbmFtZXMgKHJlZmVycmluZyB0byBhIG5lc3RlZCBmaWVsZCBpbiB0aGUgZG9jdW1lbnQpLlxuICpcbiAqIENyZWF0ZSBhIGBGaWVsZFBhdGhgIGJ5IHByb3ZpZGluZyBmaWVsZCBuYW1lcy4gSWYgbW9yZSB0aGFuIG9uZSBmaWVsZFxuICogbmFtZSBpcyBwcm92aWRlZCwgdGhlIHBhdGggd2lsbCBwb2ludCB0byBhIG5lc3RlZCBmaWVsZCBpbiBhIGRvY3VtZW50LlxuICovIHZhciBGcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIEZpZWxkUGF0aCBmcm9tIHRoZSBwcm92aWRlZCBmaWVsZCBuYW1lcy4gSWYgbW9yZSB0aGFuIG9uZSBmaWVsZFxuICAgICAqIG5hbWUgaXMgcHJvdmlkZWQsIHRoZSBwYXRoIHdpbGwgcG9pbnQgdG8gYSBuZXN0ZWQgZmllbGQgaW4gYSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWVsZE5hbWVzIEEgbGlzdCBvZiBmaWVsZCBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICBmb3IgKHZhciB0ID0gW10sIGUgPSAwOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB0W2VdID0gYXJndW1lbnRzW2VdO1xuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHQubGVuZ3RoOyArK24pIGlmICgwID09PSB0W25dLmxlbmd0aCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgZmllbGQgbmFtZSBhdCBhcmd1bWVudCAkKGkgKyAxKS4gRmllbGQgbmFtZXMgbXVzdCBub3QgYmUgZW1wdHkuXCIpO1xuICAgICAgICB0aGlzLkZfID0gbmV3IFcodCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGBGaWVsZFBhdGhgIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgVGhlIGBGaWVsZFBhdGhgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhpcyBgRmllbGRQYXRoYCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgb25lLlxuICAgICAqLyAgICByZXR1cm4gdC5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRl8uaXNFcXVhbCh0LkZfKTtcbiAgICB9LCB0O1xufSgpLCBqcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMueF8gPSBlLCB0aGlzLkNfID0gbiwgXG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGlzIEZpcmVzdG9yZSByZWZlcmVuY2UuICovXG4gICAgICAgIHRoaXMudHlwZSA9IFwiZG9jdW1lbnRcIiwgdGhpcy5maXJlc3RvcmUgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIk9fXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNfLnBhdGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZG9jdW1lbnQncyBpZGVudGlmaWVyIHdpdGhpbiBpdHMgY29sbGVjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5DXy5wYXRoLkMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInBhdGhcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBwYXRoIG9mIHRoZSByZWZlcmVuY2VkIGRvY3VtZW50IChyZWxhdGl2ZVxuICAgICAgICAgKiB0byB0aGUgcm9vdCBvZiB0aGUgZGF0YWJhc2UpLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNfLnBhdGguTSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2xsZWN0aW9uIHRoaXMgYERvY3VtZW50UmVmZXJlbmNlYCBiZWxvbmdzIHRvLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgenModGhpcy5maXJlc3RvcmUsIHRoaXMueF8sIHRoaXMuQ18ucGF0aC5TKCkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGEgY3VzdG9tIGRhdGEgY29udmVydGVyIHRvIHRoaXMgYERvY3VtZW50UmVmZXJlbmNlYCwgYWxsb3dpbmcgeW91XG4gICAgICogdG8gdXNlIHlvdXIgb3duIGN1c3RvbSBtb2RlbCBvYmplY3RzIHdpdGggRmlyZXN0b3JlLiBXaGVuIHlvdSBjYWxsIHtAbGlua1xuICAgICAqIHNldERvYygpfSwge0BsaW5rIGdldERvYygpfSwgZXRjLiB3aXRoIHRoZSByZXR1cm5lZCBgRG9jdW1lbnRSZWZlcmVuY2VgXG4gICAgICogaW5zdGFuY2UsIHRoZSBwcm92aWRlZCBjb252ZXJ0ZXIgd2lsbCBjb252ZXJ0IGJldHdlZW4gRmlyZXN0b3JlIGRhdGEgYW5kXG4gICAgICogeW91ciBjdXN0b20gdHlwZSBgVWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udmVydGVyIENvbnZlcnRzIG9iamVjdHMgdG8gYW5kIGZyb20gRmlyZXN0b3JlLlxuICAgICAqIEByZXR1cm4gQSBgRG9jdW1lbnRSZWZlcmVuY2U8VT5gIHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgY29udmVydGVyLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLndpdGhDb252ZXJ0ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdCh0aGlzLmZpcmVzdG9yZSwgZSwgdGhpcy5DXyk7XG4gICAgfSwgdDtcbn0oKSwgQnMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGxpdGUgdmVyc2lvbiBvZiB0aGUgUXVlcnkgY2xhc3MgaW4gdGhlIG1haW4gU0RLLlxuICAgIGZ1bmN0aW9uIHQodCwgZSwgbikge1xuICAgICAgICB0aGlzLnhfID0gZSwgdGhpcy5NXyA9IG4sIFxuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBGaXJlc3RvcmUgcmVmZXJlbmNlLiAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBcInF1ZXJ5XCIsIHRoaXMuZmlyZXN0b3JlID0gdFxuICAgICAgICAvKipcbiAgICAgKiBBcHBsaWVzIGEgY3VzdG9tIGRhdGEgY29udmVydGVyIHRvIHRoaXMgcXVlcnksIGFsbG93aW5nIHlvdSB0byB1c2UgeW91ciBvd25cbiAgICAgKiBjdXN0b20gbW9kZWwgb2JqZWN0cyB3aXRoIEZpcmVzdG9yZS4gV2hlbiB5b3UgY2FsbCB7QGxpbmsgZ2V0RG9jcygpfSB3aXRoXG4gICAgICogdGhlIHJldHVybmVkIHF1ZXJ5LCB0aGUgcHJvdmlkZWQgY29udmVydGVyIHdpbGwgY29udmVydCBiZXR3ZWVuIEZpcmVzdG9yZVxuICAgICAqIGRhdGEgYW5kIHlvdXIgY3VzdG9tIHR5cGUgYFVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnZlcnRlciBDb252ZXJ0cyBvYmplY3RzIHRvIGFuZCBmcm9tIEZpcmVzdG9yZS5cbiAgICAgKiBAcmV0dXJuIEEgYFF1ZXJ5PFU+YCB0aGF0IHVzZXMgdGhlIHByb3ZpZGVkIGNvbnZlcnRlci5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS53aXRoQ29udmVydGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5maXJlc3RvcmUsIGUsIHRoaXMuTV8pO1xuICAgIH0sIHQ7XG59KCksIHpzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0LCBuLCByKSB7XG4gICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChpID0gZS5jYWxsKHRoaXMsIHQsIG4sIE5uKHIpKSB8fCB0aGlzKS5maXJlc3RvcmUgPSB0LCBpLk9fID0gciwgaS50eXBlID0gXCJjb2xsZWN0aW9uXCIsIFxuICAgICAgICBpO1xuICAgIH1cbiAgICByZXR1cm4gdChuLCBlKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgLyoqIFRoZSBjb2xsZWN0aW9uJ3MgaWRlbnRpZmllci4gKi8gZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk1fLnBhdGguQygpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwicGF0aFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHBhdGggb2YgdGhlIHJlZmVyZW5jZWQgY29sbGVjdGlvbiAocmVsYXRpdmVcbiAgICAgICAgICogdG8gdGhlIHJvb3Qgb2YgdGhlIGRhdGFiYXNlKS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5NXy5wYXRoLk0oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY29udGFpbmluZyBgRG9jdW1lbnRSZWZlcmVuY2VgIGlmIHRoaXMgaXMgYVxuICAgICAgICAgKiBzdWJjb2xsZWN0aW9uLiBJZiB0aGlzIGlzbid0IGEgc3ViY29sbGVjdGlvbiwgdGhlIHJlZmVyZW5jZSBpcyBudWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5PXy5TKCk7XG4gICAgICAgICAgICByZXR1cm4gdC5UKCkgPyBudWxsIDogbmV3IGpzKHRoaXMuZmlyZXN0b3JlLCBcbiAgICAgICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCwgbmV3IFkodCkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGEgY3VzdG9tIGRhdGEgY29udmVydGVyIHRvIHRoaXMgQ29sbGVjdGlvblJlZmVyZW5jZSwgYWxsb3dpbmcgeW91XG4gICAgICogdG8gdXNlIHlvdXIgb3duIGN1c3RvbSBtb2RlbCBvYmplY3RzIHdpdGggRmlyZXN0b3JlLiBXaGVuIHlvdSBjYWxsIHtAbGlua1xuICAgICAqIGFkZERvYygpfSB3aXRoIHRoZSByZXR1cm5lZCBgQ29sbGVjdGlvblJlZmVyZW5jZWAgaW5zdGFuY2UsIHRoZSBwcm92aWRlZFxuICAgICAqIGNvbnZlcnRlciB3aWxsIGNvbnZlcnQgYmV0d2VlbiBGaXJlc3RvcmUgZGF0YSBhbmQgeW91ciBjdXN0b20gdHlwZSBgVWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udmVydGVyIENvbnZlcnRzIG9iamVjdHMgdG8gYW5kIGZyb20gRmlyZXN0b3JlLlxuICAgICAqIEByZXR1cm4gQSBgQ29sbGVjdGlvblJlZmVyZW5jZTxVPmAgdGhhdCB1c2VzIHRoZSBwcm92aWRlZCBjb252ZXJ0ZXIuXG4gICAgICovXG4gICAgbi5wcm90b3R5cGUud2l0aENvbnZlcnRlciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBuKHRoaXMuZmlyZXN0b3JlLCB0LCB0aGlzLk9fKTtcbiAgICB9LCBuO1xufShCcyk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgYERvY3VtZW50UmVmZXJlbmNlYCByZWZlcnMgdG8gYSBkb2N1bWVudCBsb2NhdGlvbiBpbiBhIEZpcmVzdG9yZSBkYXRhYmFzZVxuICogYW5kIGNhbiBiZSB1c2VkIHRvIHdyaXRlLCByZWFkLCBvciBsaXN0ZW4gdG8gdGhlIGxvY2F0aW9uLiBUaGUgZG9jdW1lbnQgYXRcbiAqIHRoZSByZWZlcmVuY2VkIGxvY2F0aW9uIG1heSBvciBtYXkgbm90IGV4aXN0LlxuICovXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgcmVmZXJlbmNlcyBhcmUgZXF1YWwuXG4gKlxuICogQHBhcmFtIGxlZnQgQSByZWZlcmVuY2UgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSByaWdodCBBIHJlZmVyZW5jZSB0byBjb21wYXJlLlxuICogQHJldHVybiB0cnVlIGlmIHRoZSByZWZlcmVuY2VzIHBvaW50IHRvIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBzYW1lXG4gKiBGaXJlc3RvcmUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIEdzKHQpIHtcbiAgICB2YXIgZSA9IHQua18oKSwgbiA9IE1yKHQudl8pO1xuICAgIHJldHVybiBuZXcgSnModC52XywgISFlLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMsIG4pO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyB2YXIgS3MgPSAvXl9fLipfXyQvLCBRcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHQsIHRoaXMuUWUgPSBlLCB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IG47XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5MXyA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSBbXTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IHRoaXMuUWUgPyBuLnB1c2gobmV3IGNuKHQsIHRoaXMuZGF0YSwgdGhpcy5RZSwgZSkpIDogbi5wdXNoKG5ldyBhbih0LCB0aGlzLmRhdGEsIGUpKSwgXG4gICAgICAgIHRoaXMuZmllbGRUcmFuc2Zvcm1zLmxlbmd0aCA+IDAgJiYgbi5wdXNoKG5ldyBmbih0LCB0aGlzLmZpZWxkVHJhbnNmb3JtcykpLCBuO1xuICAgIH0sIHQ7XG59KCksIFdzID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy5kYXRhID0gdCwgdGhpcy5RZSA9IGUsIHRoaXMuZmllbGRUcmFuc2Zvcm1zID0gbjtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkxfID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IFsgbmV3IGNuKHQsIHRoaXMuZGF0YSwgdGhpcy5RZSwgZSkgXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRUcmFuc2Zvcm1zLmxlbmd0aCA+IDAgJiYgbi5wdXNoKG5ldyBmbih0LCB0aGlzLmZpZWxkVHJhbnNmb3JtcykpLCBcbiAgICAgICAgbjtcbiAgICB9LCB0O1xufSgpO1xuXG4vKiogVGhlIHJlc3VsdCBvZiBwYXJzaW5nIGRvY3VtZW50IGRhdGEgKGUuZy4gZm9yIGEgc2V0RGF0YSBjYWxsKS4gKi8gZnVuY3Rpb24gWXModCkge1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgY2FzZSAwIC8qIFNldCAqLyA6XG4gLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIGNhc2UgMiAvKiBNZXJnZVNldCAqLyA6XG4gLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIGNhc2UgMSAvKiBVcGRhdGUgKi8gOlxuICAgICAgICByZXR1cm4gITA7XG5cbiAgICAgIGNhc2UgMyAvKiBBcmd1bWVudCAqLyA6XG4gICAgICBjYXNlIDQgLyogQXJyYXlBcmd1bWVudCAqLyA6XG4gICAgICAgIHJldHVybiAhMTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgUygpO1xuICAgIH1cbn1cblxuLyoqIEEgXCJjb250ZXh0XCIgb2JqZWN0IHBhc3NlZCBhcm91bmQgd2hpbGUgcGFyc2luZyB1c2VyIGRhdGEuICovIHZhciBIcyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBQYXJzZUNvbnRleHQgd2l0aCB0aGUgZ2l2ZW4gc291cmNlIGFuZCBwYXRoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNldHRpbmdzIFRoZSBzZXR0aW5ncyBmb3IgdGhlIHBhcnNlci5cbiAgICAgKiBAcGFyYW0gZGF0YWJhc2VJZCBUaGUgZGF0YWJhc2UgSUQgb2YgdGhlIEZpcmVzdG9yZSBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplciBUaGUgc2VyaWFsaXplciB0byB1c2UgdG8gZ2VuZXJhdGUgdGhlIFZhbHVlIHByb3RvLlxuICAgICAqIEBwYXJhbSBpZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzIFdoZXRoZXIgdG8gaWdub3JlIHVuZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAgICogcmF0aGVyIHRoYW4gdGhyb3cuXG4gICAgICogQHBhcmFtIGZpZWxkVHJhbnNmb3JtcyBBIG11dGFibGUgbGlzdCBvZiBmaWVsZCB0cmFuc2Zvcm1zIGVuY291bnRlcmVkIHdoaWxlXG4gICAgICogICAgIHBhcnNpbmcgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGZpZWxkTWFzayBBIG11dGFibGUgbGlzdCBvZiBmaWVsZCBwYXRocyBlbmNvdW50ZXJlZCB3aGlsZSBwYXJzaW5nXG4gICAgICogICAgIHRoZSBkYXRhLlxuICAgICAqXG4gICAgICogVE9ETyhiLzM0ODcxMTMxKTogV2UgZG9uJ3Qgc3VwcG9ydCBhcnJheSBwYXRocyByaWdodCBub3csIHNvIHBhdGggY2FuIGJlXG4gICAgICogbnVsbCB0byBpbmRpY2F0ZSB0aGUgY29udGV4dCByZXByZXNlbnRzIGFueSBsb2NhdGlvbiB3aXRoaW4gYW4gYXJyYXkgKGluXG4gICAgICogd2hpY2ggY2FzZSBjZXJ0YWluIGZlYXR1cmVzIHdpbGwgbm90IHdvcmsgYW5kIGVycm9ycyB3aWxsIGJlIHNvbWV3aGF0XG4gICAgICogY29tcHJvbWlzZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbiwgciwgaSwgbykge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gdCwgdGhpcy50ID0gZSwgdGhpcy5zZXJpYWxpemVyID0gbiwgdGhpcy5pZ25vcmVVbmRlZmluZWRQcm9wZXJ0aWVzID0gciwgXG4gICAgICAgIC8vIE1pbm9yIGhhY2s6IElmIGZpZWxkVHJhbnNmb3JtcyBpcyB1bmRlZmluZWQsIHdlIGFzc3VtZSB0aGlzIGlzIGFuXG4gICAgICAgIC8vIGV4dGVybmFsIGNhbGwgYW5kIHdlIG5lZWQgdG8gdmFsaWRhdGUgdGhlIGVudGlyZSBwYXRoLlxuICAgICAgICB2b2lkIDAgPT09IGkgJiYgdGhpcy5CXygpLCB0aGlzLmZpZWxkVHJhbnNmb3JtcyA9IGkgfHwgW10sIHRoaXMuUWUgPSBvIHx8IFtdO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInBhdGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MucGF0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcInVfXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnVfO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBcbiAgICAvKiogUmV0dXJucyBhIG5ldyBjb250ZXh0IHdpdGggdGhlIHNwZWNpZmllZCBzZXR0aW5ncyBvdmVyd3JpdHRlbi4gKi8gdC5wcm90b3R5cGUucV8gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc2V0dGluZ3MpLCBlKSwgdGhpcy50LCB0aGlzLnNlcmlhbGl6ZXIsIHRoaXMuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcywgdGhpcy5maWVsZFRyYW5zZm9ybXMsIHRoaXMuUWUpO1xuICAgIH0sIHQucHJvdG90eXBlLlVfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSwgbiA9IG51bGwgPT09IChlID0gdGhpcy5wYXRoKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmNoaWxkKHQpLCByID0gdGhpcy5xXyh7XG4gICAgICAgICAgICBwYXRoOiBuLFxuICAgICAgICAgICAgX186ICExXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gci5RXyh0KSwgcjtcbiAgICB9LCB0LnByb3RvdHlwZS5LXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUsIG4gPSBudWxsID09PSAoZSA9IHRoaXMucGF0aCkgfHwgdm9pZCAwID09PSBlID8gdm9pZCAwIDogZS5jaGlsZCh0KSwgciA9IHRoaXMucV8oe1xuICAgICAgICAgICAgcGF0aDogbixcbiAgICAgICAgICAgIF9fOiAhMVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHIuQl8oKSwgcjtcbiAgICB9LCB0LnByb3RvdHlwZS5XXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgLy8gVE9ETyhiLzM0ODcxMTMxKTogV2UgZG9uJ3Qgc3VwcG9ydCBhcnJheSBwYXRocyByaWdodCBub3c7IHNvIG1ha2UgcGF0aFxuICAgICAgICAvLyB1bmRlZmluZWQuXG4gICAgICAgIHJldHVybiB0aGlzLnFfKHtcbiAgICAgICAgICAgIHBhdGg6IHZvaWQgMCxcbiAgICAgICAgICAgIF9fOiAhMFxuICAgICAgICB9KTtcbiAgICB9LCB0LnByb3RvdHlwZS5oXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGFhKHQsIHRoaXMuc2V0dGluZ3MubWV0aG9kTmFtZSwgdGhpcy5zZXR0aW5ncy5qXyB8fCAhMSwgdGhpcy5wYXRoLCB0aGlzLnNldHRpbmdzLmxfKTtcbiAgICB9LCBcbiAgICAvKiogUmV0dXJucyAndHJ1ZScgaWYgJ2ZpZWxkUGF0aCcgd2FzIHRyYXZlcnNlZCB3aGVuIGNyZWF0aW5nIHRoaXMgY29udGV4dC4gKi8gdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMuUWUuZmluZCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuTihlKTtcbiAgICAgICAgfSkpIHx8IHZvaWQgMCAhPT0gdGhpcy5maWVsZFRyYW5zZm9ybXMuZmluZCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuTihlLmZpZWxkKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLkJfID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRPRE8oYi8zNDg3MTEzMSk6IFJlbW92ZSBudWxsIGNoZWNrIG9uY2Ugd2UgaGF2ZSBwcm9wZXIgcGF0aHMgZm9yIGZpZWxkc1xuICAgICAgICAvLyB3aXRoaW4gYXJyYXlzLlxuICAgICAgICBpZiAodGhpcy5wYXRoKSBmb3IgKHZhciB0ID0gMDsgdCA8IHRoaXMucGF0aC5sZW5ndGg7IHQrKykgdGhpcy5RXyh0aGlzLnBhdGguZ2V0KHQpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5RXyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKDAgPT09IHQubGVuZ3RoKSB0aHJvdyB0aGlzLmhfKFwiRG9jdW1lbnQgZmllbGRzIG11c3Qgbm90IGJlIGVtcHR5XCIpO1xuICAgICAgICBpZiAoWXModGhpcy51XykgJiYgS3MudGVzdCh0KSkgdGhyb3cgdGhpcy5oXygnRG9jdW1lbnQgZmllbGRzIGNhbm5vdCBiZWdpbiBhbmQgZW5kIHdpdGggXCJfX1wiJyk7XG4gICAgfSwgdDtcbn0oKSwgSnMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCwgZSwgbikge1xuICAgICAgICB0aGlzLnQgPSB0LCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMgPSBlLCB0aGlzLnNlcmlhbGl6ZXIgPSBuIHx8IE1yKHQpXG4gICAgICAgIC8qKiBDcmVhdGVzIGEgbmV3IHRvcC1sZXZlbCBwYXJzZSBjb250ZXh0LiAqLztcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLkdfID0gZnVuY3Rpb24odCwgZSwgbiwgcikge1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSByICYmIChyID0gITEpLCBuZXcgSHMoe1xuICAgICAgICAgICAgdV86IHQsXG4gICAgICAgICAgICBtZXRob2ROYW1lOiBlLFxuICAgICAgICAgICAgbF86IG4sXG4gICAgICAgICAgICBwYXRoOiBXLiQoKSxcbiAgICAgICAgICAgIF9fOiAhMSxcbiAgICAgICAgICAgIGpfOiByXG4gICAgICAgIH0sIHRoaXMudCwgdGhpcy5zZXJpYWxpemVyLCB0aGlzLmlnbm9yZVVuZGVmaW5lZFByb3BlcnRpZXMpO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogSGVscGVyIGZvciBwYXJzaW5nIHJhdyB1c2VyIGlucHV0IChwcm92aWRlZCB2aWEgdGhlIEFQSSkgaW50byBpbnRlcm5hbCBtb2RlbFxuICogY2xhc3Nlcy5cbiAqL1xuLyoqIFBhcnNlIGRvY3VtZW50IGRhdGEgZnJvbSBhIHNldCgpIGNhbGwuICovIGZ1bmN0aW9uIFhzKHQsIGUsIG4sIHIsIGksIG8pIHtcbiAgICB2b2lkIDAgPT09IG8gJiYgKG8gPSB7fSk7XG4gICAgdmFyIHUgPSB0LkdfKG8ubWVyZ2UgfHwgby5tZXJnZUZpZWxkcyA/IDIgLyogTWVyZ2VTZXQgKi8gOiAwIC8qIFNldCAqLyAsIGUsIG4sIGkpO1xuICAgIGlhKFwiRGF0YSBtdXN0IGJlIGFuIG9iamVjdCwgYnV0IGl0IHdhczpcIiwgdSwgcik7XG4gICAgdmFyIHMsIGEsIGMgPSBuYShyLCB1KTtcbiAgICBpZiAoby5tZXJnZSkgcyA9IG5ldyBKZSh1LlFlKSwgYSA9IHUuZmllbGRUcmFuc2Zvcm1zOyBlbHNlIGlmIChvLm1lcmdlRmllbGRzKSB7XG4gICAgICAgIGZvciAodmFyIGggPSBbXSwgZiA9IDAsIGwgPSBvLm1lcmdlRmllbGRzOyBmIDwgbC5sZW5ndGg7IGYrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBvYShlLCBsW2ZdLCBuKTtcbiAgICAgICAgICAgIGlmICghdS5jb250YWlucyhwKSkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkZpZWxkICdcIiArIHAgKyBcIicgaXMgc3BlY2lmaWVkIGluIHlvdXIgZmllbGQgbWFzayBidXQgbWlzc2luZyBmcm9tIHlvdXIgaW5wdXQgZGF0YS5cIik7XG4gICAgICAgICAgICBjYShoLCBwKSB8fCBoLnB1c2gocCk7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IG5ldyBKZShoKSwgYSA9IHUuZmllbGRUcmFuc2Zvcm1zLmZpbHRlcigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHMuSGUodC5maWVsZCk7XG4gICAgICAgIH0pKTtcbiAgICB9IGVsc2UgcyA9IG51bGwsIGEgPSB1LmZpZWxkVHJhbnNmb3JtcztcbiAgICByZXR1cm4gbmV3IFFzKG5ldyB5bihjKSwgcywgYSk7XG59XG5cbi8qKiBQYXJzZSB1cGRhdGUgZGF0YSBmcm9tIGFuIHVwZGF0ZSgpIGNhbGwuICovIGZ1bmN0aW9uICRzKHQsIGUsIG4sIHIpIHtcbiAgICB2YXIgaSA9IHQuR18oMSAvKiBVcGRhdGUgKi8gLCBlLCBuKTtcbiAgICBpYShcIkRhdGEgbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXM6XCIsIGksIHIpO1xuICAgIHZhciBvID0gW10sIHUgPSBuZXcgZ247XG4gICAgTShyLCAoZnVuY3Rpb24odCwgcikge1xuICAgICAgICB2YXIgcyA9IHNhKGUsIHQsIG4pO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgciBpbnN0YW5jZW9mIGRzICYmIChyID0gci5vXyk7XG4gICAgICAgIHZhciBhID0gaS5LXyhzKTtcbiAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBJcykgXG4gICAgICAgIC8vIEFkZCBpdCB0byB0aGUgZmllbGQgbWFzaywgYnV0IGRvbid0IGFkZCBhbnl0aGluZyB0byB1cGRhdGVEYXRhLlxuICAgICAgICBvLnB1c2gocyk7IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGMgPSBlYShyLCBhKTtcbiAgICAgICAgICAgIG51bGwgIT0gYyAmJiAoby5wdXNoKHMpLCB1LnNldChzLCBjKSk7XG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgdmFyIHMgPSBuZXcgSmUobyk7XG4gICAgcmV0dXJuIG5ldyBXcyh1LlllKCksIHMsIGkuZmllbGRUcmFuc2Zvcm1zKTtcbn1cblxuLyoqIFBhcnNlIHVwZGF0ZSBkYXRhIGZyb20gYSBsaXN0IG9mIGZpZWxkL3ZhbHVlIGFyZ3VtZW50cy4gKi8gZnVuY3Rpb24gWnModCwgZSwgbiwgciwgaSwgbykge1xuICAgIHZhciB1ID0gdC5HXygxIC8qIFVwZGF0ZSAqLyAsIGUsIG4pLCBzID0gWyBvYShlLCByLCBuKSBdLCBhID0gWyBpIF07XG4gICAgaWYgKG8ubGVuZ3RoICUgMiAhPSAwKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiRnVuY3Rpb24gXCIgKyBlICsgXCIoKSBuZWVkcyB0byBiZSBjYWxsZWQgd2l0aCBhbiBldmVuIG51bWJlciBvZiBhcmd1bWVudHMgdGhhdCBhbHRlcm5hdGUgYmV0d2VlbiBmaWVsZCBuYW1lcyBhbmQgdmFsdWVzLlwiKTtcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IG8ubGVuZ3RoOyBjICs9IDIpIHMucHVzaChvYShlLCBvW2NdKSksIGEucHVzaChvW2MgKyAxXSk7XG4gICAgLy8gV2UgaXRlcmF0ZSBpbiByZXZlcnNlIG9yZGVyIHRvIHBpY2sgdGhlIGxhc3QgdmFsdWUgZm9yIGEgZmllbGQgaWYgdGhlXG4gICAgLy8gdXNlciBzcGVjaWZpZWQgdGhlIGZpZWxkIG11bHRpcGxlIHRpbWVzLlxuICAgIGZvciAodmFyIGggPSBbXSwgZiA9IG5ldyBnbiwgbCA9IHMubGVuZ3RoIC0gMTsgbCA+PSAwOyAtLWwpIGlmICghY2EoaCwgc1tsXSkpIHtcbiAgICAgICAgdmFyIHAgPSBzW2xdLCBkID0gYVtsXTtcbiAgICAgICAgLy8gRm9yIENvbXBhdCB0eXBlcywgd2UgaGF2ZSB0byBcImV4dHJhY3RcIiB0aGUgdW5kZXJseWluZyB0eXBlcyBiZWZvcmVcbiAgICAgICAgLy8gcGVyZm9ybWluZyB2YWxpZGF0aW9uLlxuICAgICAgICBkIGluc3RhbmNlb2YgZHMgJiYgKGQgPSBkLm9fKTtcbiAgICAgICAgdmFyIHYgPSB1LktfKHApO1xuICAgICAgICBpZiAoZCBpbnN0YW5jZW9mIElzKSBcbiAgICAgICAgLy8gQWRkIGl0IHRvIHRoZSBmaWVsZCBtYXNrLCBidXQgZG9uJ3QgYWRkIGFueXRoaW5nIHRvIHVwZGF0ZURhdGEuXG4gICAgICAgIGgucHVzaChwKTsgZWxzZSB7XG4gICAgICAgICAgICB2YXIgeSA9IGVhKGQsIHYpO1xuICAgICAgICAgICAgbnVsbCAhPSB5ICYmIChoLnB1c2gocCksIGYuc2V0KHAsIHkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgZyA9IG5ldyBKZShoKTtcbiAgICByZXR1cm4gbmV3IFdzKGYuWWUoKSwgZywgdS5maWVsZFRyYW5zZm9ybXMpO1xufVxuXG4vKipcbiAqIFBhcnNlIGEgXCJxdWVyeSB2YWx1ZVwiIChlLmcuIHZhbHVlIGluIGEgd2hlcmUgZmlsdGVyIG9yIGEgdmFsdWUgaW4gYSBjdXJzb3JcbiAqIGJvdW5kKS5cbiAqXG4gKiBAcGFyYW0gYWxsb3dBcnJheXMgV2hldGhlciB0aGUgcXVlcnkgdmFsdWUgaXMgYW4gYXJyYXkgdGhhdCBtYXkgZGlyZWN0bHlcbiAqIGNvbnRhaW4gYWRkaXRpb25hbCBhcnJheXMgKGUuZy4gdGhlIG9wZXJhbmQgb2YgYW4gYGluYCBxdWVyeSkuXG4gKi8gZnVuY3Rpb24gdGEodCwgZSwgbiwgcikge1xuICAgIHJldHVybiB2b2lkIDAgPT09IHIgJiYgKHIgPSAhMSksIGVhKG4sIHQuR18ociA/IDQgLyogQXJyYXlBcmd1bWVudCAqLyA6IDMgLyogQXJndW1lbnQgKi8gLCBlKSk7XG59XG5cbi8qKlxuICogUGFyc2VzIHVzZXIgZGF0YSB0byBQcm90b2J1ZiBWYWx1ZXMuXG4gKlxuICogQHBhcmFtIGlucHV0IERhdGEgdG8gYmUgcGFyc2VkLlxuICogQHBhcmFtIGNvbnRleHQgQSBjb250ZXh0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgcGF0aCBiZWluZyBwYXJzZWQsXG4gKiB0aGUgc291cmNlIG9mIHRoZSBkYXRhIGJlaW5nIHBhcnNlZCwgZXRjLlxuICogQHJldHVybiBUaGUgcGFyc2VkIHZhbHVlLCBvciBudWxsIGlmIHRoZSB2YWx1ZSB3YXMgYSBGaWVsZFZhbHVlIHNlbnRpbmVsXG4gKiB0aGF0IHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGluZyBwYXJzZWQgZGF0YS5cbiAqLyBmdW5jdGlvbiBlYSh0LCBlKSB7XG4gICAgaWYgKFxuICAgIC8vIFVud3JhcCB0aGUgQVBJIHR5cGUgZnJvbSB0aGUgQ29tcGF0IFNESy4gVGhpcyB3aWxsIHJldHVybiB0aGUgQVBJIHR5cGVcbiAgICAvLyBmcm9tIGZpcmVzdG9yZS1leHAuXG4gICAgdCBpbnN0YW5jZW9mIGRzICYmICh0ID0gdC5vXyksIHJhKHQpKSByZXR1cm4gaWEoXCJVbnN1cHBvcnRlZCBmaWVsZCB2YWx1ZTpcIiwgZSwgdCksIFxuICAgIG5hKHQsIGUpO1xuICAgIGlmICh0IGluc3RhbmNlb2YgX3MpIFxuICAgIC8vIEZpZWxkVmFsdWVzIHVzdWFsbHkgcGFyc2UgaW50byB0cmFuc2Zvcm1zIChleGNlcHQgRmllbGRWYWx1ZS5kZWxldGUoKSlcbiAgICAvLyBpbiB3aGljaCBjYXNlIHdlIGRvIG5vdCB3YW50IHRvIGluY2x1ZGUgdGhpcyBmaWVsZCBpbiBvdXIgcGFyc2VkIGRhdGFcbiAgICAvLyAoYXMgZG9pbmcgc28gd2lsbCBvdmVyd3JpdGUgdGhlIGZpZWxkIGRpcmVjdGx5IHByaW9yIHRvIHRoZSB0cmFuc2Zvcm1cbiAgICAvLyB0cnlpbmcgdG8gdHJhbnNmb3JtIGl0KS4gU28gd2UgZG9uJ3QgYWRkIHRoaXMgbG9jYXRpb24gdG9cbiAgICAvLyBjb250ZXh0LmZpZWxkTWFzayBhbmQgd2UgcmV0dXJuIG51bGwgYXMgb3VyIHBhcnNpbmcgcmVzdWx0LlxuICAgIC8qKlxuICAgICAqIFwiUGFyc2VzXCIgdGhlIHByb3ZpZGVkIEZpZWxkVmFsdWVJbXBsLCBhZGRpbmcgYW55IG5lY2Vzc2FyeSB0cmFuc2Zvcm1zIHRvXG4gICAgICogY29udGV4dC5maWVsZFRyYW5zZm9ybXMuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgLy8gU2VudGluZWxzIGFyZSBvbmx5IHN1cHBvcnRlZCB3aXRoIHdyaXRlcywgYW5kIG5vdCB3aXRoaW4gYXJyYXlzLlxuICAgICAgICBpZiAoIVlzKGUudV8pKSB0aHJvdyBlLmhfKHQuYV8gKyBcIigpIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB1cGRhdGUoKSBhbmQgc2V0KClcIik7XG4gICAgICAgIGlmICghZS5wYXRoKSB0aHJvdyBlLmhfKHQuYV8gKyBcIigpIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluc2lkZSBhcnJheXNcIik7XG4gICAgICAgIHZhciBuID0gdC5jXyhlKTtcbiAgICAgICAgbiAmJiBlLmZpZWxkVHJhbnNmb3Jtcy5wdXNoKG4pO1xuICAgIH0odCwgZSksIG51bGw7XG4gICAgaWYgKFxuICAgIC8vIElmIGNvbnRleHQucGF0aCBpcyBudWxsIHdlIGFyZSBpbnNpZGUgYW4gYXJyYXkgYW5kIHdlIGRvbid0IHN1cHBvcnRcbiAgICAvLyBmaWVsZCBtYXNrIHBhdGhzIG1vcmUgZ3JhbnVsYXIgdGhhbiB0aGUgdG9wLWxldmVsIGFycmF5LlxuICAgIGUucGF0aCAmJiBlLlFlLnB1c2goZS5wYXRoKSwgdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIC8vIFRPRE8oYi8zNDg3MTEzMSk6IEluY2x1ZGUgdGhlIHBhdGggY29udGFpbmluZyB0aGUgYXJyYXkgaW4gdGhlIGVycm9yXG4gICAgICAgIC8vIG1lc3NhZ2UuXG4gICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIElOIHF1ZXJpZXMsIHRoZSBwYXJzZWQgZGF0YSBpcyBhbiBhcnJheSAocmVwcmVzZW50aW5nXG4gICAgICAgIC8vIHRoZSBzZXQgb2YgdmFsdWVzIHRvIGJlIGluY2x1ZGVkIGZvciB0aGUgSU4gcXVlcnkpIHRoYXQgbWF5IGRpcmVjdGx5XG4gICAgICAgIC8vIGNvbnRhaW4gYWRkaXRpb25hbCBhcnJheXMgKGVhY2ggcmVwcmVzZW50aW5nIGFuIGluZGl2aWR1YWwgZmllbGRcbiAgICAgICAgLy8gdmFsdWUpLCBzbyB3ZSBkaXNhYmxlIHRoaXMgdmFsaWRhdGlvbi5cbiAgICAgICAgaWYgKGUuc2V0dGluZ3MuX18gJiYgNCAvKiBBcnJheUFyZ3VtZW50ICovICE9PSBlLnVfKSB0aHJvdyBlLmhfKFwiTmVzdGVkIGFycmF5cyBhcmUgbm90IHN1cHBvcnRlZFwiKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSBbXSwgciA9IDAsIGkgPSAwLCBvID0gdDsgaSA8IG8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IGVhKG9baV0sIGUuV18ocikpO1xuICAgICAgICAgICAgICAgIG51bGwgPT0gdSAmJiAoXG4gICAgICAgICAgICAgICAgLy8gSnVzdCBpbmNsdWRlIG51bGxzIGluIHRoZSBhcnJheSBmb3IgZmllbGRzIGJlaW5nIHJlcGxhY2VkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIHNlbnRpbmVsLlxuICAgICAgICAgICAgICAgIHUgPSB7XG4gICAgICAgICAgICAgICAgICAgIG51bGxWYWx1ZTogXCJOVUxMX1ZBTFVFXCJcbiAgICAgICAgICAgICAgICB9KSwgbi5wdXNoKHUpLCByKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFycmF5VmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0LCBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBkcyAmJiAodCA9IHQub18pLCBudWxsID09PSB0KSByZXR1cm4ge1xuICAgICAgICAgICAgbnVsbFZhbHVlOiBcIk5VTExfVkFMVUVcIlxuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCkgcmV0dXJuIGFlKGUuc2VyaWFsaXplciwgdCk7XG4gICAgICAgIGlmIChcImJvb2xlYW5cIiA9PSB0eXBlb2YgdCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGJvb2xlYW5WYWx1ZTogdFxuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiB0XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgdmFyIG4gPSBCLmZyb21EYXRlKHQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBWYWx1ZTogY2UoZS5zZXJpYWxpemVyLCBuKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIEIpIHtcbiAgICAgICAgICAgIC8vIEZpcmVzdG9yZSBiYWNrZW5kIHRydW5jYXRlcyBwcmVjaXNpb24gZG93biB0byBtaWNyb3NlY29uZHMuIFRvIGVuc3VyZVxuICAgICAgICAgICAgLy8gb2ZmbGluZSBtb2RlIHdvcmtzIHRoZSBzYW1lIHdpdGggcmVnYXJkcyB0byB0cnVuY2F0aW9uLCBwZXJmb3JtIHRoZVxuICAgICAgICAgICAgLy8gdHJ1bmNhdGlvbiBpbW1lZGlhdGVseSB3aXRob3V0IHdhaXRpbmcgZm9yIHRoZSBiYWNrZW5kIHRvIGRvIHRoYXQuXG4gICAgICAgICAgICB2YXIgciA9IG5ldyBCKHQuc2Vjb25kcywgMWUzICogTWF0aC5mbG9vcih0Lm5hbm9zZWNvbmRzIC8gMWUzKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlOiBjZShlLnNlcmlhbGl6ZXIsIHIpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgU3MpIHJldHVybiB7XG4gICAgICAgICAgICBnZW9Qb2ludFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgbGF0aXR1ZGU6IHQubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiB0LmxvbmdpdHVkZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGtzKSByZXR1cm4ge1xuICAgICAgICAgICAgYnl0ZXNWYWx1ZTogaGUoZS5zZXJpYWxpemVyLCB0LkVfKVxuICAgICAgICB9O1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGpzKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGUudCwgbyA9IHQuZmlyZXN0b3JlLnZfO1xuICAgICAgICAgICAgaWYgKCFvLmlzRXF1YWwoaSkpIHRocm93IGUuaF8oXCJEb2N1bWVudCByZWZlcmVuY2UgaXMgZm9yIGRhdGFiYXNlIFwiICsgby5wcm9qZWN0SWQgKyBcIi9cIiArIG8uZGF0YWJhc2UgKyBcIiBidXQgc2hvdWxkIGJlIGZvciBkYXRhYmFzZSBcIiArIGkucHJvamVjdElkICsgXCIvXCIgKyBpLmRhdGFiYXNlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlVmFsdWU6IHBlKHQuZmlyZXN0b3JlLnZfIHx8IGUudCwgdC5DXy5wYXRoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodm9pZCAwID09PSB0ICYmIGUuaWdub3JlVW5kZWZpbmVkUHJvcGVydGllcykgcmV0dXJuIG51bGw7XG4gICAgICAgIHRocm93IGUuaF8oXCJVbnN1cHBvcnRlZCBmaWVsZCB2YWx1ZTogXCIgKyBtcyh0KSk7XG4gICAgfSh0LCBlKTtcbn1cblxuZnVuY3Rpb24gbmEodCwgZSkge1xuICAgIHZhciBuID0ge307XG4gICAgcmV0dXJuIFUodCkgPyBcbiAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZW1wdHkgb2JqZWN0LCB3ZSBleHBsaWNpdGx5IGFkZCBpdCB0byB0aGUgdXBkYXRlXG4gICAgLy8gbWFzayB0byBlbnN1cmUgdGhhdCB0aGUgc2VydmVyIGNyZWF0ZXMgYSBtYXAgZW50cnkuXG4gICAgZS5wYXRoICYmIGUucGF0aC5sZW5ndGggPiAwICYmIGUuUWUucHVzaChlLnBhdGgpIDogTSh0LCAoZnVuY3Rpb24odCwgcikge1xuICAgICAgICB2YXIgaSA9IGVhKHIsIGUuVV8odCkpO1xuICAgICAgICBudWxsICE9IGkgJiYgKG5bdF0gPSBpKTtcbiAgICB9KSksIHtcbiAgICAgICAgbWFwVmFsdWU6IHtcbiAgICAgICAgICAgIGZpZWxkczogblxuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcmEodCkge1xuICAgIHJldHVybiAhKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgbnVsbCA9PT0gdCB8fCB0IGluc3RhbmNlb2YgQXJyYXkgfHwgdCBpbnN0YW5jZW9mIERhdGUgfHwgdCBpbnN0YW5jZW9mIEIgfHwgdCBpbnN0YW5jZW9mIFNzIHx8IHQgaW5zdGFuY2VvZiBrcyB8fCB0IGluc3RhbmNlb2YganMgfHwgdCBpbnN0YW5jZW9mIF9zKTtcbn1cblxuZnVuY3Rpb24gaWEodCwgZSwgbikge1xuICAgIGlmICghcmEobikgfHwgIWZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgbnVsbCAhPT0gdCAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpID09PSBPYmplY3QucHJvdG90eXBlIHx8IG51bGwgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSk7XG4gICAgfShuKSkge1xuICAgICAgICB2YXIgciA9IG1zKG4pO1xuICAgICAgICB0aHJvdyBcImFuIG9iamVjdFwiID09PSByID8gZS5oXyh0ICsgXCIgYSBjdXN0b20gb2JqZWN0XCIpIDogZS5oXyh0ICsgXCIgXCIgKyByKTtcbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgY2FsbHMgZnJvbURvdFNlcGFyYXRlZFN0cmluZygpIGJ1dCB3cmFwcyBhbnkgZXJyb3IgdGhyb3duLlxuICovIGZ1bmN0aW9uIG9hKHQsIGUsIG4pIHtcbiAgICBpZiAoXG4gICAgLy8gSWYgcmVxdWlyZWQsIHJlcGxhY2UgdGhlIEZpZWxkUGF0aCBDb21wYXQgY2xhc3Mgd2l0aCB3aXRoIHRoZSBmaXJlc3RvcmUtZXhwXG4gICAgLy8gRmllbGRQYXRoLlxuICAgIGUgaW5zdGFuY2VvZiBkcyAmJiAoZSA9IGUub18pLCBlIGluc3RhbmNlb2YgRnMpIHJldHVybiBlLkZfO1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSByZXR1cm4gc2EodCwgZSk7XG4gICAgdGhyb3cgYWEoXCJGaWVsZCBwYXRoIGFyZ3VtZW50cyBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIG9yIEZpZWxkUGF0aC5cIiwgdCwgXG4gICAgLyogaGFzQ29udmVydGVyPSAqLyAhMSwgXG4gICAgLyogcGF0aD0gKi8gdm9pZCAwLCBuKTtcbn1cblxuLyoqXG4gKiBNYXRjaGVzIGFueSBjaGFyYWN0ZXJzIGluIGEgZmllbGQgcGF0aCBzdHJpbmcgdGhhdCBhcmUgcmVzZXJ2ZWQuXG4gKi8gdmFyIHVhID0gbmV3IFJlZ0V4cChcIlt+XFxcXCovXFxcXFtcXFxcXV1cIik7XG5cbi8qKlxuICogV3JhcHMgZnJvbURvdFNlcGFyYXRlZFN0cmluZyB3aXRoIGFuIGVycm9yIG1lc3NhZ2UgYWJvdXQgdGhlIG1ldGhvZCB0aGF0XG4gKiB3YXMgdGhyb3duLlxuICogQHBhcmFtIG1ldGhvZE5hbWUgVGhlIHB1YmxpY2x5IHZpc2libGUgbWV0aG9kIG5hbWVcbiAqIEBwYXJhbSBwYXRoIFRoZSBkb3Qtc2VwYXJhdGVkIHN0cmluZyBmb3JtIG9mIGEgZmllbGQgcGF0aCB3aGljaCB3aWxsIGJlIHNwbGl0XG4gKiBvbiBkb3RzLlxuICogQHBhcmFtIHRhcmdldERvYyBUaGUgZG9jdW1lbnQgYWdhaW5zdCB3aGljaCB0aGUgZmllbGQgcGF0aCB3aWxsIGJlIGV2YWx1YXRlZC5cbiAqLyBmdW5jdGlvbiBzYSh0LCBlLCBuKSB7XG4gICAgaWYgKGUuc2VhcmNoKHVhKSA+PSAwKSB0aHJvdyBhYShcIkludmFsaWQgZmllbGQgcGF0aCAoXCIgKyBlICsgXCIpLiBQYXRocyBtdXN0IG5vdCBjb250YWluICd+JywgJyonLCAnLycsICdbJywgb3IgJ10nXCIsIHQsIFxuICAgIC8qIGhhc0NvbnZlcnRlcj0gKi8gITEsIFxuICAgIC8qIHBhdGg9ICovIHZvaWQgMCwgbik7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIChuZXcgKEZzLmJpbmQuYXBwbHkoRnMsIHIoWyB2b2lkIDAgXSwgZS5zcGxpdChcIi5cIikpKSkpLkZfO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgICAgdGhyb3cgYWEoXCJJbnZhbGlkIGZpZWxkIHBhdGggKFwiICsgZSArIFwiKS4gUGF0aHMgbXVzdCBub3QgYmUgZW1wdHksIGJlZ2luIHdpdGggJy4nLCBlbmQgd2l0aCAnLicsIG9yIGNvbnRhaW4gJy4uJ1wiLCB0LCBcbiAgICAgICAgLyogaGFzQ29udmVydGVyPSAqLyAhMSwgXG4gICAgICAgIC8qIHBhdGg9ICovIHZvaWQgMCwgbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhYSh0LCBlLCBuLCByLCBpKSB7XG4gICAgdmFyIG8gPSByICYmICFyLlQoKSwgdSA9IHZvaWQgMCAhPT0gaSwgcyA9IFwiRnVuY3Rpb24gXCIgKyBlICsgXCIoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGRhdGFcIjtcbiAgICBuICYmIChzICs9IFwiICh2aWEgYHRvRmlyZXN0b3JlKClgKVwiKTtcbiAgICB2YXIgYSA9IFwiXCI7XG4gICAgcmV0dXJuIChvIHx8IHUpICYmIChhICs9IFwiIChmb3VuZFwiLCBvICYmIChhICs9IFwiIGluIGZpZWxkIFwiICsgciksIHUgJiYgKGEgKz0gXCIgaW4gZG9jdW1lbnQgXCIgKyBpKSwgXG4gICAgYSArPSBcIilcIiksIG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgKHMgKz0gXCIuIFwiKSArIHQgKyBhKVxuICAgIC8qKiBDaGVja3MgYGhheXN0YWNrYCBpZiBGaWVsZFBhdGggYG5lZWRsZWAgaXMgcHJlc2VudC4gUnVucyBpbiBPKG4pLiAqLztcbn1cblxuZnVuY3Rpb24gY2EodCwgZSkge1xuICAgIHJldHVybiB0LnNvbWUoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuaXNFcXVhbChlKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEludGVybmFsIHRyYW5zYWN0aW9uIG9iamVjdCByZXNwb25zaWJsZSBmb3IgYWNjdW11bGF0aW5nIHRoZSBtdXRhdGlvbnMgdG9cbiAqIHBlcmZvcm0gYW5kIHRoZSBiYXNlIHZlcnNpb25zIGZvciBhbnkgZG9jdW1lbnRzIHJlYWQuXG4gKi8gdmFyIGhhID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgdGhpcy5XYyA9IHQsIFxuICAgICAgICAvLyBUaGUgdmVyc2lvbiBvZiBlYWNoIGRvY3VtZW50IHRoYXQgd2FzIHJlYWQgZHVyaW5nIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICAgIHRoaXMuel8gPSBuZXcgTWFwLCB0aGlzLm11dGF0aW9ucyA9IFtdLCB0aGlzLkhfID0gITEsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgZGVmZXJyZWQgdXNhZ2UgZXJyb3IgdGhhdCBvY2N1cnJlZCBwcmV2aW91c2x5IGluIHRoaXMgdHJhbnNhY3Rpb24gdGhhdFxuICAgICAgICAgICAgICogd2lsbCBjYXVzZSB0aGUgdHJhbnNhY3Rpb24gdG8gZmFpbCBvbmNlIGl0IGFjdHVhbGx5IGNvbW1pdHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5KXyA9IG51bGwsIFxuICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldCBvZiBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gd3JpdHRlbiBpbiB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogV2hlbiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgd3JpdGUgdG8gdGhlIHNhbWUga2V5IGluIGEgdHJhbnNhY3Rpb24sIGFueVxuICAgICAgICAgICAgICogd3JpdGVzIGFmdGVyIHRoZSBmaXJzdCBhcmUgaGFuZGxlZCBkaWZmZXJlbnRseS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICB0aGlzLllfID0gbmV3IFNldDtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLlhfID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHIsIGkgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG8ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuWl8oKSwgdGhpcy5tdXRhdGlvbnMubGVuZ3RoID4gMCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkZpcmVzdG9yZSB0cmFuc2FjdGlvbnMgcmVxdWlyZSBhbGwgcmVhZHMgdG8gYmUgZXhlY3V0ZWQgYmVmb3JlIGFsbCB3cml0ZXMuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIGZ1bmN0aW9uKHQsIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIGksIG8sIHUsIHMsIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBEKHQpLCBpID0gd2UoZS5zZXJpYWxpemVyKSArIFwiL2RvY3VtZW50c1wiLCBvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50czogci5tYXAoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZlKGUuc2VyaWFsaXplciwgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBbIDQgLyp5aWVsZCovICwgZS5GYyhcIkJhdGNoR2V0RG9jdW1lbnRzXCIsIGksIG8pIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdSA9IG4uc2VudCgpLCBzID0gbmV3IE1hcCwgdS5mb3JFYWNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImZvdW5kXCIgaW4gZSA/IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsoISFlLmZvdW5kKSwgZS5mb3VuZC5uYW1lLCBlLmZvdW5kLnVwZGF0ZVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHllKHQsIGUuZm91bmQubmFtZSksIHIgPSBsZShlLmZvdW5kLnVwZGF0ZVRpbWUpLCBpID0gbmV3IHluKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IGUuZm91bmQuZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGJuKG4sIHIsIGksIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSh0LCBlKSA6IFwibWlzc2luZ1wiIGluIGUgPyBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrKCEhZS5taXNzaW5nKSwgayghIWUucmVhZFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB5ZSh0LCBlLm1pc3NpbmcpLCByID0gbGUoZS5yZWFkVGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9uKG4sIHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KHQsIGUpIDogUygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oZS5zZXJpYWxpemVyLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNldChuLmtleS50b1N0cmluZygpLCBuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgYSA9IFtdLCBbIDIgLypyZXR1cm4qLyAsIChyLmZvckVhY2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHMuZ2V0KHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayghIWUpLCBhLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksIGEpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0odGhpcy5XYywgdCkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCAoKHIgPSBvLnNlbnQoKSkuZm9yRWFjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdCBpbnN0YW5jZW9mIF9uIHx8IHQgaW5zdGFuY2VvZiBibiA/IGkudGYodCkgOiBTKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSwgcikgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHRoaXMud3JpdGUoZS5MXyh0LCB0aGlzLmplKHQpKSksIHRoaXMuWV8uYWRkKHQudG9TdHJpbmcoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53cml0ZShlLkxfKHQsIHRoaXMuZWYodCkpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgdGhpcy5KXyA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ZXy5hZGQodC50b1N0cmluZygpKTtcbiAgICB9LCB0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMud3JpdGUoWyBuZXcgZG4odCwgdGhpcy5qZSh0KSkgXSksIHRoaXMuWV8uYWRkKHQudG9TdHJpbmcoKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCwgciA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoaS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5aXygpLCB0aGlzLkpfKSB0aHJvdyB0aGlzLkpfO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHRoaXMuel8sIFxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBtdXRhdGlvbiwgbm90ZSB0aGF0IHRoZSBkb2Mgd2FzIHdyaXR0ZW4uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25zLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZGVsZXRlKGUua2V5LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICB9KSksIFxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBkb2N1bWVudCB0aGF0IHdhcyByZWFkIGJ1dCBub3Qgd3JpdHRlbiB0bywgd2Ugd2FudCB0byBwZXJmb3JtXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgYHZlcmlmeWAgb3BlcmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICB0LmZvckVhY2goKGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gWS5LKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgci5tdXRhdGlvbnMucHVzaChuZXcgdm4obiwgci5qZShuKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSksIFsgNCAvKnlpZWxkKi8gLCBmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlLCBpLCBvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gRCh0KSwgaSA9IHdlKGUuc2VyaWFsaXplcikgKyBcIi9kb2N1bWVudHNcIiwgbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXM6IHIubWFwKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJZShlLnNlcmlhbGl6ZXIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgWyA0IC8qeWllbGQqLyAsIGUueGMoXCJDb21taXRcIiwgaSwgbykgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSh0aGlzLldjLCB0aGlzLm11dGF0aW9ucykgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBtdXRhdGlvbiwgbm90ZSB0aGF0IHRoZSBkb2Mgd2FzIHdyaXR0ZW4uXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpLnNlbnQoKSwgdGhpcy5IXyA9ICEwLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnRmID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBibikgZSA9IHQudmVyc2lvbjsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgX24pKSB0aHJvdyBTKCk7XG4gICAgICAgICAgICAvLyBGb3IgZGVsZXRlZCBkb2NzLCB3ZSBtdXN0IHVzZSBiYXNlVmVyc2lvbiAwIHdoZW4gd2Ugb3ZlcndyaXRlIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gei5taW4oKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IHRoaXMuel8uZ2V0KHQua2V5LnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgaWYgKCFlLmlzRXF1YWwobikpIFxuICAgICAgICAgICAgLy8gVGhpcyB0cmFuc2FjdGlvbiB3aWxsIGZhaWwgbm8gbWF0dGVyIHdoYXQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgaihGLkFCT1JURUQsIFwiRG9jdW1lbnQgdmVyc2lvbiBjaGFuZ2VkIGJldHdlZW4gdHdvIHJlYWRzLlwiKTtcbiAgICAgICAgfSBlbHNlIHRoaXMuel8uc2V0KHQua2V5LnRvU3RyaW5nKCksIGUpO1xuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZlcnNpb24gb2YgdGhpcyBkb2N1bWVudCB3aGVuIGl0IHdhcyByZWFkIGluIHRoaXMgdHJhbnNhY3Rpb24sXG4gICAgICogYXMgYSBwcmVjb25kaXRpb24sIG9yIG5vIHByZWNvbmRpdGlvbiBpZiBpdCB3YXMgbm90IHJlYWQuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuamUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy56Xy5nZXQodC50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuICF0aGlzLllfLmhhcyh0LnRvU3RyaW5nKCkpICYmIGUgPyBaZS51cGRhdGVUaW1lKGUpIDogWmUuR2UoKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcmVjb25kaXRpb24gZm9yIGEgZG9jdW1lbnQgaWYgdGhlIG9wZXJhdGlvbiBpcyBhbiB1cGRhdGUuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZWYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy56Xy5nZXQodC50b1N0cmluZygpKTtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHRpbWUgYSBkb2N1bWVudCBpcyB3cml0dGVuLCB3ZSB3YW50IHRvIHRha2UgaW50byBhY2NvdW50IHRoZVxuICAgICAgICAvLyByZWFkIHRpbWUgYW5kIGV4aXN0ZW5jZVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ZXy5oYXModC50b1N0cmluZygpKSAmJiBlKSB7XG4gICAgICAgICAgICBpZiAoZS5pc0VxdWFsKHoubWluKCkpKSBcbiAgICAgICAgICAgIC8vIFRoZSBkb2N1bWVudCBkb2Vzbid0IGV4aXN0LCBzbyBmYWlsIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgIC8vIFRoaXMgaGFzIHRvIGJlIHZhbGlkYXRlZCBsb2NhbGx5IGJlY2F1c2UgeW91IGNhbid0IHNlbmQgYVxuICAgICAgICAgICAgLy8gcHJlY29uZGl0aW9uIHRoYXQgYSBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCB3aXRob3V0IGNoYW5naW5nIHRoZVxuICAgICAgICAgICAgLy8gc2VtYW50aWNzIG9mIHRoZSBiYWNrZW5kIHdyaXRlIHRvIGJlIGFuIGluc2VydC4gVGhpcyBpcyB0aGUgcmV2ZXJzZVxuICAgICAgICAgICAgLy8gb2Ygd2hhdCB3ZSB3YW50LCBzaW5jZSB3ZSB3YW50IHRvIGFzc2VydCB0aGF0IHRoZSBkb2N1bWVudCBkb2Vzbid0XG4gICAgICAgICAgICAvLyBleGlzdCBidXQgdGhlbiBzZW5kIHRoZSB1cGRhdGUgYW5kIGhhdmUgaXQgZmFpbC4gU2luY2Ugd2UgY2FuJ3RcbiAgICAgICAgICAgIC8vIGV4cHJlc3MgdGhhdCB0byB0aGUgYmFja2VuZCwgd2UgaGF2ZSB0byB2YWxpZGF0ZSBsb2NhbGx5LlxuICAgICAgICAgICAgLy8gTm90ZTogdGhpcyBjYW4gY2hhbmdlIG9uY2Ugd2UgY2FuIHNlbmQgc2VwYXJhdGUgdmVyaWZ5IHdyaXRlcyBpbiB0aGVcbiAgICAgICAgICAgIC8vIHRyYW5zYWN0aW9uLlxuICAgICAgICAgICAgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkNhbid0IHVwZGF0ZSBhIGRvY3VtZW50IHRoYXQgZG9lc24ndCBleGlzdC5cIik7XG4gICAgICAgICAgICAvLyBEb2N1bWVudCBleGlzdHMsIGJhc2UgcHJlY29uZGl0aW9uIG9uIGRvY3VtZW50IHVwZGF0ZSB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFplLnVwZGF0ZVRpbWUoZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG9jdW1lbnQgd2FzIG5vdCByZWFkLCBzbyB3ZSBqdXN0IHVzZSB0aGUgcHJlY29uZGl0aW9ucyBmb3IgYSBibGluZFxuICAgICAgICAvLyB1cGRhdGUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFplLmV4aXN0cyghMCk7XG4gICAgfSwgdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuWl8oKSwgdGhpcy5tdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9ucy5jb25jYXQodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuWl8gPSBmdW5jdGlvbigpIHt9LCB0O1xufSgpLCBmYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByKSB7XG4gICAgICAgIHRoaXMucnMgPSB0LCB0aGlzLldjID0gZSwgdGhpcy51cGRhdGVGdW5jdGlvbiA9IG4sIHRoaXMudXMgPSByLCB0aGlzLm5mID0gNSwgdGhpcy5QcyA9IG5ldyBpcih0aGlzLnJzLCBcInRyYW5zYWN0aW9uX3JldHJ5XCIgLyogVHJhbnNhY3Rpb25SZXRyeSAqLylcbiAgICAgICAgLyoqIFJ1bnMgdGhlIHRyYW5zYWN0aW9uIGFuZCBzZXRzIHRoZSByZXN1bHQgb24gZGVmZXJyZWQuICovO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2YoKTtcbiAgICB9LCB0LnByb3RvdHlwZS5zZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuUHMuQW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUodCwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCwgZSwgciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBuZXcgaGEodGhpcy5XYyksIChlID0gdGhpcy5yZih0KSkgJiYgZS50aGVuKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByLnJzLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jb21taXQoKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci51cy5yZXNvbHZlKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5jYXRjaCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmFmKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByLmFmKHQpO1xuICAgICAgICAgICAgICAgICAgICB9KSksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSwgdC5wcm90b3R5cGUucmYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMudXBkYXRlRnVuY3Rpb24odCk7XG4gICAgICAgICAgICByZXR1cm4gIUgoZSkgJiYgZS5jYXRjaCAmJiBlLnRoZW4gPyBlIDogKHRoaXMudXMucmVqZWN0KEVycm9yKFwiVHJhbnNhY3Rpb24gY2FsbGJhY2sgbXVzdCByZXR1cm4gYSBQcm9taXNlXCIpKSwgXG4gICAgICAgICAgICBudWxsKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgLy8gRG8gbm90IHJldHJ5IGVycm9ycyB0aHJvd24gYnkgdXNlciBwcm92aWRlZCB1cGRhdGVGdW5jdGlvbi5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVzLnJlamVjdCh0KSwgbnVsbDtcbiAgICAgICAgfVxuICAgIH0sIHQucHJvdG90eXBlLmFmID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHRoaXMubmYgPiAwICYmIHRoaXMuY2YodCkgPyAodGhpcy5uZiAtPSAxLCB0aGlzLnJzLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnNmKCksIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9KSkpIDogdGhpcy51cy5yZWplY3QodCk7XG4gICAgfSwgdC5wcm90b3R5cGUuY2YgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmIChcIkZpcmViYXNlRXJyb3JcIiA9PT0gdC5uYW1lKSB7XG4gICAgICAgICAgICAvLyBJbiB0cmFuc2FjdGlvbnMsIHRoZSBiYWNrZW5kIHdpbGwgZmFpbCBvdXRkYXRlZCByZWFkcyB3aXRoIEZBSUxFRF9QUkVDT05ESVRJT04gYW5kXG4gICAgICAgICAgICAvLyBub24tbWF0Y2hpbmcgZG9jdW1lbnQgdmVyc2lvbnMgd2l0aCBBQk9SVEVELiBUaGVzZSBlcnJvcnMgc2hvdWxkIGJlIHJldHJpZWQuXG4gICAgICAgICAgICB2YXIgZSA9IHQuY29kZTtcbiAgICAgICAgICAgIHJldHVybiBcImFib3J0ZWRcIiA9PT0gZSB8fCBcImZhaWxlZC1wcmVjb25kaXRpb25cIiA9PT0gZSB8fCAhYXQoZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICExO1xuICAgIH0sIHQ7XG59KCksIGxhID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIFxuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91cyBxdWV1ZSByZXNwb25zaWJsZSBmb3IgYWxsIG9mIG91ciBpbnRlcm5hbCBwcm9jZXNzaW5nLiBXaGVuXG4gICAgICogd2UgZ2V0IGluY29taW5nIHdvcmsgZnJvbSB0aGUgdXNlciAodmlhIHB1YmxpYyBBUEkpIG9yIHRoZSBuZXR3b3JrXG4gICAgICogKGluY29taW5nIEdSUEMgbWVzc2FnZXMpLCB3ZSBzaG91bGQgYWx3YXlzIHNjaGVkdWxlIG9udG8gdGhpcyBxdWV1ZS5cbiAgICAgKiBUaGlzIGVuc3VyZXMgYWxsIG9mIG91ciB3b3JrIGlzIHByb3Blcmx5IHNlcmlhbGl6ZWQgKGUuZy4gd2UgZG9uJ3RcbiAgICAgKiBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IG9wZXJhdGlvbiB3aGlsZSB0aGUgcHJldmlvdXMgb25lIGlzIHdhaXRpbmcgZm9yXG4gICAgICogYW4gYXN5bmMgSS9PIHRvIGNvbXBsZXRlKS5cbiAgICAgKi9cbiAgICBlLCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IHQsIHRoaXMucnMgPSBlLCB0aGlzLkZsID0gbiwgdGhpcy51c2VyID0gU3IuVU5BVVRIRU5USUNBVEVELCBcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IFAudSgpLCB0aGlzLnVmID0gZnVuY3Rpb24oKSB7fSwgdGhpcy5vaSA9IG5ldyByciwgdGhpcy5jcmVkZW50aWFscy5zaSgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgVChcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlJlY2VpdmVkIHVzZXI9XCIsIHQudWlkKSwgci51c2VyLmlzRXF1YWwodCkgfHwgKHIudXNlciA9IHQsIFxuICAgICAgICAgICAgci51Zih0KSksIHIub2kucmVzb2x2ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5nZXRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHRoaXMub2kucHJvbWlzZSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsICh0LnNlbnQoKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcnM6IHRoaXMucnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBGbDogdGhpcy5GbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IHRoaXMuY3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBZbDogdGhpcy51c2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgJGg6IDEwMFxuICAgICAgICAgICAgICAgICAgICB9KSBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLmhmID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIHRoaXMudWYgPSB0LCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB0aGlzLm9pLnByb21pc2UudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZS51ZihlLnVzZXIpO1xuICAgICAgICB9KSk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoYXQgdGhlIGNsaWVudCBoYXMgbm90IGJlZW4gdGVybWluYXRlZC4gRW5zdXJlcyB0aGF0IG90aGVyIG1ldGhvZHMgb25cbiAgICAgKiB0aGlzIGNsYXNzIGNhbm5vdCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGNsaWVudCBpcyB0ZXJtaW5hdGVkLlxuICAgICAqL1xuICAgIHQucHJvdG90eXBlLmxmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnJzLlZzKSB0aHJvdyBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiVGhlIGNsaWVudCBoYXMgYWxyZWFkeSBiZWVuIHRlcm1pbmF0ZWQuXCIpO1xuICAgIH0sIHQucHJvdG90eXBlLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMucnMuYnMoKTtcbiAgICAgICAgdmFyIHIgPSBuZXcgcnI7XG4gICAgICAgIHJldHVybiB0aGlzLnJzLnlzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlKHQsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQsIGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMCwgNSwgLCA2IF0pLCB0aGlzLl9mID8gWyA0IC8qeWllbGQqLyAsIHRoaXMuX2YudGVybWluYXRlKCkgXSA6IFsgMyAvKmJyZWFrKi8gLCAyIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnNlbnQoKSwgbi5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZiA/IFsgNCAvKnlpZWxkKi8gLCB0aGlzLmZmLnRlcm1pbmF0ZSgpIF0gOiBbIDMgLypicmVhayovICwgNCBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgbi5zZW50KCksIG4ubGFiZWwgPSA0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYHJlbW92ZUNoYW5nZUxpc3RlbmVyYCBtdXN0IGJlIGNhbGxlZCBhZnRlciBzaHV0dGluZyBkb3duIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3RlU3RvcmUgYXMgaXQgd2lsbCBwcmV2ZW50IHRoZSBSZW1vdGVTdG9yZSBmcm9tIHJldHJpZXZpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF1dGggdG9rZW5zLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlZGVudGlhbHMuaWkoKSwgci5yZXNvbHZlKCksIFsgMyAvKmJyZWFrKi8gLCA2IF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IG4uc2VudCgpLCBlID0gd3IodCwgXCJGYWlsZWQgdG8gc2h1dGRvd24gcGVyc2lzdGVuY2VcIiksIHIucmVqZWN0KGUpLCBbIDMgLypicmVhayovICwgNiBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKSwgci5wcm9taXNlO1xuICAgIH0sIHQ7XG59KCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRyYW5zYWN0aW9uUnVubmVyIGVuY2Fwc3VsYXRlcyB0aGUgbG9naWMgbmVlZGVkIHRvIHJ1biBhbmQgcmV0cnkgdHJhbnNhY3Rpb25zXG4gKiB3aXRoIGJhY2tvZmYuXG4gKi8gZnVuY3Rpb24gcGEodCwgcikge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBvID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodS5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQucnMuTnMoKSwgVChcIkZpcmVzdG9yZUNsaWVudFwiLCBcIkluaXRpYWxpemluZyBPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXJcIiksIFxuICAgICAgICAgICAgICAgIFsgNCAvKnlpZWxkKi8gLCB0LmdldENvbmZpZ3VyYXRpb24oKSBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA9IHUuc2VudCgpLCBbIDQgLyp5aWVsZCovICwgci5pbml0aWFsaXplKGkpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiB1LnNlbnQoKSwgdC5oZigoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5ycy5TcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZShvLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgaG8oci5LYywgaSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pKSwgXG4gICAgICAgICAgICAgICAgLy8gV2hlbiBhIHVzZXIgY2FsbHMgY2xlYXJQZXJzaXN0ZW5jZSgpIGluIG9uZSBjbGllbnQsIGFsbCBvdGhlciBjbGllbnRzXG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byBiZSB0ZXJtaW5hdGVkIHRvIGFsbG93IHRoZSBkZWxldGUgdG8gc3VjY2VlZC5cbiAgICAgICAgICAgICAgICByLnBlcnNpc3RlbmNlLmZhKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQudGVybWluYXRlKCk7XG4gICAgICAgICAgICAgICAgfSkpLCB0LmZmID0gciwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gZGEodCwgcikge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBvO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24odSkge1xuICAgICAgICAgICAgc3dpdGNoICh1LmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5ycy5OcygpLCBbIDQgLyp5aWVsZCovICwgdmEodCkgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPSB1LnNlbnQoKSwgVChcIkZpcmVzdG9yZUNsaWVudFwiLCBcIkluaXRpYWxpemluZyBPbmxpbmVDb21wb25lbnRQcm92aWRlclwiKSwgXG4gICAgICAgICAgICAgICAgWyA0IC8qeWllbGQqLyAsIHQuZ2V0Q29uZmlndXJhdGlvbigpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBvID0gdS5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCByLmluaXRpYWxpemUoaSwgbykgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHUuc2VudCgpLCBcbiAgICAgICAgICAgICAgICAvLyBUaGUgQ3JlZGVudGlhbENoYW5nZUxpc3RlbmVyIG9mIHRoZSBvbmxpbmUgY29tcG9uZW50IHByb3ZpZGVyIHRha2VzXG4gICAgICAgICAgICAgICAgLy8gcHJlY2VkZW5jZSBvdmVyIHRoZSBvZmZsaW5lIGNvbXBvbmVudCBwcm92aWRlci5cbiAgICAgICAgICAgICAgICB0LmhmKChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnJzLlNzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZSA9IEQodCkpLnJzLk5zKCksIFQoXCJSZW1vdGVTdG9yZVwiLCBcIlJlbW90ZVN0b3JlIHJlY2VpdmVkIG5ldyBjcmVkZW50aWFsc1wiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IE1vKGUpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUZWFyIGRvd24gYW5kIHJlLWNyZWF0ZSBvdXIgbmV0d29yayBzdHJlYW1zLiBUaGlzIHdpbGwgZW5zdXJlIHdlIGdldCBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnJlc2ggYXV0aCB0b2tlbiBmb3IgdGhlIG5ldyB1c2VyIGFuZCByZS1maWxsIHRoZSB3cml0ZSBwaXBlbGluZSB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV3IG11dGF0aW9ucyBmcm9tIHRoZSBMb2NhbFN0b3JlIChzaW5jZSBtdXRhdGlvbnMgYXJlIHBlci11c2VyKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLkhjLmFkZCgzIC8qIENyZWRlbnRpYWxDaGFuZ2UgKi8pLCBbIDQgLyp5aWVsZCovICwgRG8oZSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBpICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHNldCB0aGUgbmV0d29yayBzdGF0dXMgdG8gVW5rbm93biBpZiB3ZSBhcmUgb2ZmbGluZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLlpjLnNldChcIlVua25vd25cIiAvKiBVbmtub3duICovKSwgWyA0IC8qeWllbGQqLyAsIGUuamMuc18ocikgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBlLkhjLmRlbGV0ZSgzIC8qIENyZWRlbnRpYWxDaGFuZ2UgKi8pLCBbIDQgLyp5aWVsZCovICwga28oZSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVhciBkb3duIGFuZCByZS1jcmVhdGUgb3VyIG5ldHdvcmsgc3RyZWFtcy4gVGhpcyB3aWxsIGVuc3VyZSB3ZSBnZXQgYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZyZXNoIGF1dGggdG9rZW4gZm9yIHRoZSBuZXcgdXNlciBhbmQgcmUtZmlsbCB0aGUgd3JpdGUgcGlwZWxpbmUgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyBtdXRhdGlvbnMgZnJvbSB0aGUgTG9jYWxTdG9yZSAoc2luY2UgbXV0YXRpb25zIGFyZSBwZXItdXNlcikuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uc2VudCgpLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfShyLk9oLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pKSwgdC5fZiA9IHIsIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHZhKHQpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5mZiA/IFsgMyAvKmJyZWFrKi8gLCAyIF0gOiAoVChcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlVzaW5nIGRlZmF1bHQgT2ZmbGluZUNvbXBvbmVudFByb3ZpZGVyXCIpLCBcbiAgICAgICAgICAgICAgICBbIDQgLyp5aWVsZCovICwgcGEodCwgbmV3IGNzKSBdKTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgZS5zZW50KCksIGUubGFiZWwgPSAyO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAyIC8qcmV0dXJuKi8gLCB0LmZmIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHlhKHQpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5fZiA/IFsgMyAvKmJyZWFrKi8gLCAyIF0gOiAoVChcIkZpcmVzdG9yZUNsaWVudFwiLCBcIlVzaW5nIGRlZmF1bHQgT25saW5lQ29tcG9uZW50UHJvdmlkZXJcIiksIFxuICAgICAgICAgICAgICAgIFsgNCAvKnlpZWxkKi8gLCBkYSh0LCBuZXcgbHMpIF0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBlLnNlbnQoKSwgZS5sYWJlbCA9IDI7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIHQuX2YgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gZ2EodCkge1xuICAgIHJldHVybiB2YSh0KS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0LnBlcnNpc3RlbmNlO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gbWEodCkge1xuICAgIHJldHVybiB2YSh0KS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0LktjO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gd2EodCkge1xuICAgIHJldHVybiB5YSh0KS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Lk9oO1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gYmEodCkge1xuICAgIHJldHVybiB5YSh0KS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Lmd1O1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gX2EodCkge1xuICAgIHJldHVybiBlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlLCByO1xuICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIHlhKHQpIF07XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBlID0gbi5zZW50KCksIFsgMiAvKnJldHVybiovICwgKChyID0gZS5NaCkuTHMgPSBtdS5iaW5kKG51bGwsIGUuZ3UpLCByLlVzID0gYnUuYmluZChudWxsLCBlLmd1KSwgXG4gICAgICAgICAgICAgICAgcikgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pKTtcbn1cblxuLyoqIEVuYWJsZXMgdGhlIG5ldHdvcmsgY29ubmVjdGlvbiBhbmQgcmUtZW5xdWV1ZXMgYWxsIHBlbmRpbmcgb3BlcmF0aW9ucy4gKi8gZnVuY3Rpb24gSWEodCwgcikge1xuICAgIHZhciBpID0gdGhpcywgbyA9IG5ldyBycjtcbiAgICByZXR1cm4gdC5ycy5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlKGksIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gX3UsIFsgNCAvKnlpZWxkKi8gLCBiYSh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIGUuYXBwbHkodm9pZCAwLCBbIG4uc2VudCgpLCByLCBvIF0pIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSkpLCBvLnByb21pc2VcbiAgICAvKipcbiAqIFRha2VzIGFuIHVwZGF0ZUZ1bmN0aW9uIGluIHdoaWNoIGEgc2V0IG9mIHJlYWRzIGFuZCB3cml0ZXMgY2FuIGJlIHBlcmZvcm1lZFxuICogYXRvbWljYWxseS4gSW4gdGhlIHVwZGF0ZUZ1bmN0aW9uLCB0aGUgY2xpZW50IGNhbiByZWFkIGFuZCB3cml0ZSB2YWx1ZXNcbiAqIHVzaW5nIHRoZSBzdXBwbGllZCB0cmFuc2FjdGlvbiBvYmplY3QuIEFmdGVyIHRoZSB1cGRhdGVGdW5jdGlvbiwgYWxsXG4gKiBjaGFuZ2VzIHdpbGwgYmUgY29tbWl0dGVkLiBJZiBhIHJldHJ5YWJsZSBlcnJvciBvY2N1cnMgKGV4OiBzb21lIG90aGVyXG4gKiBjbGllbnQgaGFzIGNoYW5nZWQgYW55IG9mIHRoZSBkYXRhIHJlZmVyZW5jZWQpLCB0aGVuIHRoZSB1cGRhdGVGdW5jdGlvblxuICogd2lsbCBiZSBjYWxsZWQgYWdhaW4gYWZ0ZXIgYSBiYWNrb2ZmLiBJZiB0aGUgdXBkYXRlRnVuY3Rpb24gc3RpbGwgZmFpbHNcbiAqIGFmdGVyIGFsbCByZXRyaWVzLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHJlamVjdGVkLlxuICpcbiAqIFRoZSB0cmFuc2FjdGlvbiBvYmplY3QgcGFzc2VkIHRvIHRoZSB1cGRhdGVGdW5jdGlvbiBjb250YWlucyBtZXRob2RzIGZvclxuICogYWNjZXNzaW5nIGRvY3VtZW50cyBhbmQgY29sbGVjdGlvbnMuIFVubGlrZSBvdGhlciBkYXRhc3RvcmUgYWNjZXNzLCBkYXRhXG4gKiBhY2Nlc3NlZCB3aXRoIHRoZSB0cmFuc2FjdGlvbiB3aWxsIG5vdCByZWZsZWN0IGxvY2FsIGNoYW5nZXMgdGhhdCBoYXZlIG5vdFxuICogYmVlbiBjb21taXR0ZWQuIEZvciB0aGlzIHJlYXNvbiwgaXQgaXMgcmVxdWlyZWQgdGhhdCBhbGwgcmVhZHMgYXJlXG4gKiBwZXJmb3JtZWQgYmVmb3JlIGFueSB3cml0ZXMuIFRyYW5zYWN0aW9ucyBtdXN0IGJlIHBlcmZvcm1lZCB3aGlsZSBvbmxpbmUuXG4gKi87XG59XG5cbmZ1bmN0aW9uIEVhKHQsIHIsIGkpIHtcbiAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgbywgdTtcbiAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMCwgMiwgLCAzIF0pLCBbIDQgLyp5aWVsZCovICwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IEQodCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnBlcnNpc3RlbmNlLnJ1blRyYW5zYWN0aW9uKFwicmVhZCBkb2N1bWVudFwiLCBcInJlYWRvbmx5XCIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5HYS5PaSh0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0odCwgcikgXTtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChlID0gbi5zZW50KCkpIGluc3RhbmNlb2YgYm4gPyBpLnJlc29sdmUoZSkgOiBlIGluc3RhbmNlb2YgX24gPyBpLnJlc29sdmUobnVsbCkgOiBpLnJlamVjdChuZXcgaihGLlVOQVZBSUxBQkxFLCBcIkZhaWxlZCB0byBnZXQgZG9jdW1lbnQgZnJvbSBjYWNoZS4gKEhvd2V2ZXIsIHRoaXMgZG9jdW1lbnQgbWF5IGV4aXN0IG9uIHRoZSBzZXJ2ZXIuIFJ1biBhZ2FpbiB3aXRob3V0IHNldHRpbmcgJ3NvdXJjZScgaW4gdGhlIEdldE9wdGlvbnMgdG8gYXR0ZW1wdCB0byByZXRyaWV2ZSB0aGUgZG9jdW1lbnQgZnJvbSB0aGUgc2VydmVyLilcIikpLCBcbiAgICAgICAgICAgICAgICBbIDMgLypicmVhayovICwgMyBdO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbyA9IG4uc2VudCgpLCB1ID0gd3IobywgXCJGYWlsZWQgdG8gZ2V0IGRvY3VtZW50ICdcIiArIHIgKyBcIiBmcm9tIGNhY2hlXCIpLCBcbiAgICAgICAgICAgICAgICBpLnJlamVjdCh1KSwgWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIGEgbGF0ZW5jeS1jb21wZW5zYXRlZCBkb2N1bWVudCBmcm9tIHRoZSBiYWNrZW5kIHZpYSBhXG4gKiBTbmFwc2hvdExpc3RlbmVyLlxuICovIGZ1bmN0aW9uIFRhKHQsIGUsIG4sIHIsIGkpIHtcbiAgICB2YXIgbyA9IG5ldyBwcyh7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBxdWVyeSBmaXJzdCBiZWZvcmUgcGFzc2luZyBldmVudCB0byB1c2VyIHRvIGF2b2lkXG4gICAgICAgICAgICAvLyB1c2VyIGFjdGlvbnMgYWZmZWN0aW5nIHRoZSBub3cgc3RhbGUgcXVlcnkuXG4gICAgICAgICAgICBlLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXIodCwgdSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2YXIgcyA9IG8uZG9jcy5oYXMobik7XG4gICAgICAgICAgICAhcyAmJiBvLmZyb21DYWNoZSA/IFxuICAgICAgICAgICAgLy8gVE9ETyhkaW1vbmQpOiBJZiB3ZSdyZSBvbmxpbmUgYW5kIHRoZSBkb2N1bWVudCBkb2Vzbid0XG4gICAgICAgICAgICAvLyBleGlzdCB0aGVuIHdlIHJlc29sdmUgd2l0aCBhIGRvYy5leGlzdHMgc2V0IHRvIGZhbHNlLiBJZlxuICAgICAgICAgICAgLy8gd2UncmUgb2ZmbGluZSBob3dldmVyLCB3ZSByZWplY3QgdGhlIFByb21pc2UgaW4gdGhpc1xuICAgICAgICAgICAgLy8gY2FzZS4gVHdvIG9wdGlvbnM6IDEpIENhY2hlIHRoZSBuZWdhdGl2ZSByZXNwb25zZSBmcm9tXG4gICAgICAgICAgICAvLyB0aGUgc2VydmVyIHNvIHdlIGNhbiBkZWxpdmVyIHRoYXQgZXZlbiB3aGVuIHlvdSdyZVxuICAgICAgICAgICAgLy8gb2ZmbGluZSAyKSBBY3R1YWxseSByZWplY3QgdGhlIFByb21pc2UgaW4gdGhlIG9ubGluZSBjYXNlXG4gICAgICAgICAgICAvLyBpZiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgICAgICAgIGkucmVqZWN0KG5ldyBqKEYuVU5BVkFJTEFCTEUsIFwiRmFpbGVkIHRvIGdldCBkb2N1bWVudCBiZWNhdXNlIHRoZSBjbGllbnQgaXMgb2ZmbGluZS5cIikpIDogcyAmJiBvLmZyb21DYWNoZSAmJiByICYmIFwic2VydmVyXCIgPT09IHIuc291cmNlID8gaS5yZWplY3QobmV3IGooRi5VTkFWQUlMQUJMRSwgJ0ZhaWxlZCB0byBnZXQgZG9jdW1lbnQgZnJvbSBzZXJ2ZXIuIChIb3dldmVyLCB0aGlzIGRvY3VtZW50IGRvZXMgZXhpc3QgaW4gdGhlIGxvY2FsIGNhY2hlLiBSdW4gYWdhaW4gd2l0aG91dCBzZXR0aW5nIHNvdXJjZSB0byBcInNlcnZlclwiIHRvIHJldHJpZXZlIHRoZSBjYWNoZWQgZG9jdW1lbnQuKScpKSA6IGkucmVzb2x2ZShvKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpLnJlamVjdCh0KTtcbiAgICAgICAgfVxuICAgIH0pLCB1ID0gbmV3IEFyKE5uKG4ucGF0aCksIG8sIHtcbiAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogITAsXG4gICAgICAgIEhzOiAhMFxuICAgIH0pO1xuICAgIHJldHVybiBJcih0LCB1KTtcbn1cblxuLyoqXG4gKiBUaGUgQ2xvdWQgRmlyZXN0b3JlIHNlcnZpY2UgaW50ZXJmYWNlLlxuICpcbiAqIERvIG5vdCBjYWxsIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIEluc3RlYWQsIHVzZSB7QGxpbmsgZ2V0RmlyZXN0b3JlKCl9LlxuICovIHZhciBOYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzLCB0LCBuKSB8fCB0aGlzKS55ZiA9IG5ldyBtciwgci5kZiA9IFwibmFtZVwiIGluIHQgPyB0Lm5hbWUgOiBcIltERUZBVUxUXVwiLCBcbiAgICAgICAgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLlZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBmIHx8IFxuICAgICAgICAvLyBUaGUgY2xpZW50IG11c3QgYmUgaW5pdGlhbGl6ZWQgdG8gZW5zdXJlIHRoYXQgYWxsIHN1YnNlcXVlbnQgQVBJXG4gICAgICAgIC8vIHVzYWdlIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgIEZhKHRoaXMpLCB0aGlzLnBmLnRlcm1pbmF0ZSgpO1xuICAgIH0sIG47XG59KC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuZGYgPSBcIihsaXRlKVwiLCB0aGlzLndmID0gbmV3IE9zKHt9KSwgdGhpcy5UZiA9ICExLCB0IGluc3RhbmNlb2YgXyA/ICh0aGlzLnZfID0gdCwgXG4gICAgICAgIHRoaXMuRWYgPSBuZXcgRHIpIDogKHRoaXMuSWYgPSB0LCB0aGlzLnZfID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmFwcGx5KHQub3B0aW9ucywgWyBcInByb2plY3RJZFwiIF0pKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsICdcInByb2plY3RJZFwiIG5vdCBwcm92aWRlZCBpbiBmaXJlYmFzZS5pbml0aWFsaXplQXBwLicpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBfKHQub3B0aW9ucy5wcm9qZWN0SWQpO1xuICAgICAgICB9KHQpLCB0aGlzLkVmID0gbmV3IE9yKGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJhcHBcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHtAbGluayBGaXJlYmFzZUFwcCBhcHB9IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGBGaXJlc3RvcmVgIHNlcnZpY2VcbiAgICAgICAgICogaW5zdGFuY2UuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLklmKSB0aHJvdyBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiRmlyZXN0b3JlIHdhcyBub3QgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlIEZpcmViYXNlIFNESy4gJ2FwcCcgaXMgbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklmO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIFwibWZcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVGY7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJBZlwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLlJmO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCB0LnByb3RvdHlwZS5QZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHRoaXMuVGYpIHRocm93IG5ldyBqKEYuRkFJTEVEX1BSRUNPTkRJVElPTiwgXCJGaXJlc3RvcmUgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGFuZCBpdHMgc2V0dGluZ3MgY2FuIG5vIGxvbmdlciBiZSBjaGFuZ2VkLiBZb3UgY2FuIG9ubHkgbW9kaWZ5IHNldHRpbmdzIGJlZm9yZSBjYWxsaW5nIGFueSBvdGhlciBtZXRob2RzIG9uIGEgRmlyZXN0b3JlIG9iamVjdC5cIik7XG4gICAgICAgIHRoaXMud2YgPSBuZXcgT3ModCksIHZvaWQgMCAhPT0gdC5jcmVkZW50aWFscyAmJiAodGhpcy5FZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICghdCkgcmV0dXJuIG5ldyBEcjtcbiAgICAgICAgICAgIHN3aXRjaCAodC50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJnYXBpXCI6XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0LmNsaWVudDtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhpcyByZWFsbHkgaXMgYSBHYXBpIGNsaWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGsoIShcIm9iamVjdFwiICE9IHR5cGVvZiBlIHx8IG51bGwgPT09IGUgfHwgIWUuYXV0aCB8fCAhZS5hdXRoLmdldEF1dGhIZWFkZXJWYWx1ZUZvckZpcnN0UGFydHkpKSwgXG4gICAgICAgICAgICAgICAgbmV3IFZyKGUsIHQuc2Vzc2lvbkluZGV4IHx8IFwiMFwiKTtcblxuICAgICAgICAgICAgICBjYXNlIFwicHJvdmlkZXJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5jbGllbnQ7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwibWFrZUNyZWRlbnRpYWxzUHJvdmlkZXIgZmFpbGVkIGR1ZSB0byBpbnZhbGlkIGNyZWRlbnRpYWwgdHlwZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSh0LmNyZWRlbnRpYWxzKSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZ2YgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Y7XG4gICAgfSwgdC5wcm90b3R5cGUua18gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVGYgPSAhMCwgdGhpcy53ZjtcbiAgICB9LCB0LnByb3RvdHlwZS5fZGVsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlJmIHx8ICh0aGlzLlJmID0gdGhpcy5WZigpKSwgdGhpcy5SZjtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGVzIGFsbCBjb21wb25lbnRzIHVzZWQgYnkgdGhpcyBjbGllbnQuIFN1YmNsYXNzZXMgY2FuIG92ZXJyaWRlXG4gICAgICogdGhpcyBtZXRob2QgdG8gY2xlYW4gdXAgdGhlaXIgb3duIGRlcGVuZGVuY2llcywgYnV0IG11c3QgYWxzbyBjYWxsIHRoaXNcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiBPbmx5IGV2ZXIgY2FsbGVkIG9uY2UuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuVmYgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLyoqXG4gKiBSZW1vdmVzIGFsbCBjb21wb25lbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgaW5zdGFuY2UuIE11c3QgYmUgY2FsbGVkXG4gKiB3aGVuIHRoZSBgRmlyZXN0b3JlYCBpbnN0YW5jZSBpcyB0ZXJtaW5hdGVkLlxuICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IERzLmdldCh0KTtcbiAgICAgICAgICAgIGUgJiYgKFQoXCJDb21wb25lbnRQcm92aWRlclwiLCBcIlJlbW92aW5nIERhdGFzdG9yZVwiKSwgRHMuZGVsZXRlKHQpLCBlLnRlcm1pbmF0ZSgpKTtcbiAgICAgICAgfSh0aGlzKSwgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSwgdDtcbn0oKSk7XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5hYmxlIHBlcnNpc3RlbnQgc3RvcmFnZSwgaWYgcG9zc2libGUuXG4gKlxuICogTXVzdCBiZSBjYWxsZWQgYmVmb3JlIGFueSBvdGhlciBmdW5jdGlvbnMgKG90aGVyIHRoYW5cbiAqIHtAbGluayBpbml0aWFsaXplRmlyZXN0b3JlKCl9LCB7QGxpbmsgZ2V0RmlyZXN0b3JlKCl9IG9yXG4gKiB7QGxpbmsgY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZSgpfS5cbiAqXG4gKiBJZiB0aGlzIGZhaWxzLCBgZW5hYmxlSW5kZXhlZERiUGVyc2lzdGVuY2UoKWAgd2lsbCByZWplY3QgdGhlIHByb21pc2UgaXRcbiAqIHJldHVybnMuIE5vdGUgdGhhdCBldmVuIGFmdGVyIHRoaXMgZmFpbHVyZSwgdGhlIGBGaXJlc3RvcmVgIGluc3RhbmNlIHdpbGxcbiAqIHJlbWFpbiB1c2FibGUsIGhvd2V2ZXIgb2ZmbGluZSBwZXJzaXN0ZW5jZSB3aWxsIGJlIGRpc2FibGVkLlxuICpcbiAqIFRoZXJlIGFyZSBzZXZlcmFsIHJlYXNvbnMgd2h5IHRoaXMgY2FuIGZhaWwsIHdoaWNoIGNhbiBiZSBpZGVudGlmaWVkIGJ5XG4gKiB0aGUgYGNvZGVgIG9uIHRoZSBlcnJvci5cbiAqXG4gKiAgICogZmFpbGVkLXByZWNvbmRpdGlvbjogVGhlIGFwcCBpcyBhbHJlYWR5IG9wZW4gaW4gYW5vdGhlciBicm93c2VyIHRhYi5cbiAqICAgKiB1bmltcGxlbWVudGVkOiBUaGUgYnJvd3NlciBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgb2ZmbGluZVxuICogICAgIHBlcnNpc3RlbmNlIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBmaXJlc3RvcmUgVGhlIGBGaXJlc3RvcmVgIGluc3RhbmNlIHRvIGVuYWJsZSBwZXJzaXN0ZW5jZSBmb3IuXG4gKiBAcGFyYW0gcGVyc2lzdGVuY2VTZXR0aW5ncyBPcHRpb25hbCBzZXR0aW5ncyBvYmplY3QgdG8gY29uZmlndXJlIHBlcnNpc3RlbmNlLlxuICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXByZXNlbnRzIHN1Y2Nlc3NmdWxseSBlbmFibGluZyBwZXJzaXN0ZW50IHN0b3JhZ2UuXG4gKi9cbi8qKlxuICogUmVnaXN0ZXJzIGJvdGggdGhlIGBPZmZsaW5lQ29tcG9uZW50UHJvdmlkZXJgIGFuZCBgT25saW5lQ29tcG9uZW50UHJvdmlkZXJgLlxuICogSWYgdGhlIG9wZXJhdGlvbiBmYWlscyB3aXRoIGEgcmVjb3ZlcmFibGUgZXJyb3IgKHNlZVxuICogYGNhblJlY292ZXJGcm9tSW5kZXhlZERiRXJyb3IoKWAgYmVsb3cpLCB0aGUgcmV0dXJuZWQgUHJvbWlzZSBpcyByZWplY3RlZFxuICogYnV0IHRoZSBjbGllbnQgcmVtYWlucyB1c2FibGUuXG4gKi8gZnVuY3Rpb24geGEodCwgciwgaSkge1xuICAgIHZhciBvID0gdGhpcywgdSA9IG5ldyBycjtcbiAgICByZXR1cm4gdC5ycy5lbnF1ZXVlKChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGUobywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMCwgMywgLCA0IF0pLCBbIDQgLyp5aWVsZCovICwgcGEodCwgaSkgXTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCBkYSh0LCByKSBdO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNlbnQoKSwgdS5yZXNvbHZlKCksIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAqIERlY2lkZXMgd2hldGhlciB0aGUgcHJvdmlkZWQgZXJyb3IgYWxsb3dzIHVzIHRvIGdyYWNlZnVsbHkgZGlzYWJsZVxuICAgICAgICAgKiBwZXJzaXN0ZW5jZSAoYXMgb3Bwb3NlZCB0byBjcmFzaGluZyB0aGUgY2xpZW50KS5cbiAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpcmViYXNlRXJyb3JcIiA9PT0gdC5uYW1lID8gdC5jb2RlID09PSBGLkZBSUxFRF9QUkVDT05ESVRJT04gfHwgdC5jb2RlID09PSBGLlVOSU1QTEVNRU5URUQgOiAhKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIERPTUV4Y2VwdGlvbiAmJiB0IGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uKSB8fCAoMjIgPT09IHQuY29kZSB8fCAyMCA9PT0gdC5jb2RlIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCBQcml2YXRlIEJyb3dzaW5nIG1vZGUgZGlzYWJsZXMgSW5kZXhlZERiIGFuZCByZXR1cm5zXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJTlZBTElEX1NUQVRFIGZvciBhbnkgdXNhZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAxMSA9PT0gdC5jb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfShlID0gbi5zZW50KCkpKSB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFwiRXJyb3IgZW5hYmxpbmcgb2ZmbGluZSBwZXJzaXN0ZW5jZS4gRmFsbGluZyBiYWNrIHRvIHBlcnNpc3RlbmNlIGRpc2FibGVkOiBcIiArIGUpLCBcbiAgICAgICAgICAgICAgICAgICAgdS5yZWplY3QoZSksIFsgMyAvKmJyZWFrKi8gLCA0IF07XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfSkpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdS5wcm9taXNlO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBSZS1lbmFibGVzIHVzZSBvZiB0aGUgbmV0d29yayBmb3IgdGhpcyBGaXJlc3RvcmUgaW5zdGFuY2UgYWZ0ZXIgYSBwcmlvclxuICogY2FsbCB0byB7QGxpbmsgZGlzYWJsZU5ldHdvcmsoKX0uXG4gKlxuICogQHJldHVybiBBIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCBvbmNlIHRoZSBuZXR3b3JrIGhhcyBiZWVuIGVuYWJsZWQuXG4gKi9cbmZ1bmN0aW9uIEFhKHQpIHtcbiAgICBpZiAodC5tZiB8fCB0LkFmKSB0aHJvdyBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiRmlyZXN0b3JlIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCBhbmQgcGVyc2lzdGVuY2UgY2FuIG5vIGxvbmdlciBiZSBlbmFibGVkLiBZb3UgY2FuIG9ubHkgZW5hYmxlIHBlcnNpc3RlbmNlIGJlZm9yZSBjYWxsaW5nIGFueSBvdGhlciBtZXRob2RzIG9uIGEgRmlyZXN0b3JlIG9iamVjdC5cIik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5zIGRhdGEgcmVhZCBmcm9tIGEgZG9jdW1lbnQgaW4geW91ciBGaXJlc3RvcmVcbiAqIGRhdGFiYXNlLiBUaGUgZGF0YSBjYW4gYmUgZXh0cmFjdGVkIHdpdGggYC5kYXRhKClgIG9yIGAuZ2V0KDxmaWVsZD4pYCB0b1xuICogZ2V0IGEgc3BlY2lmaWMgZmllbGQuXG4gKlxuICogRm9yIGEgYERvY3VtZW50U25hcHNob3RgIHRoYXQgcG9pbnRzIHRvIGEgbm9uLWV4aXN0aW5nIGRvY3VtZW50LCBhbnkgZGF0YVxuICogYWNjZXNzIHdpbGwgcmV0dXJuICd1bmRlZmluZWQnLiBZb3UgY2FuIHVzZSB0aGUgYGV4aXN0cygpYCBtZXRob2QgdG9cbiAqIGV4cGxpY2l0bHkgdmVyaWZ5IGEgZG9jdW1lbnQncyBleGlzdGVuY2UuXG4gKi8gdmFyIFNhID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0LCBuLCByLCBpLCBvLCB1KSB7XG4gICAgICAgIHZhciBzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChzID0gZS5jYWxsKHRoaXMsIHQsIG4sIHIsIGksIHUpIHx8IHRoaXMpLlNfID0gdCwgcy52ZiA9IHQsIHMubWV0YWRhdGEgPSBvLCBcbiAgICAgICAgcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgb2YgdGhlIGBEb2N1bWVudFNuYXBzaG90YCB0aGF0IHNpZ25hbHMgd2hldGhlciBvciBub3QgdGhlIGRhdGFcbiAgICAgKiBleGlzdHMuIFRydWUgaWYgdGhlIGRvY3VtZW50IGV4aXN0cy5cbiAgICAgKi8gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLmV4aXN0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZS5wcm90b3R5cGUuZXhpc3RzLmNhbGwodGhpcyk7XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBmaWVsZHMgaW4gdGhlIGRvY3VtZW50IGFzIGFuIGBPYmplY3RgLiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmXG4gICAgICogdGhlIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBgRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKWAgdmFsdWVzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW5cbiAgICAgKiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBhcyBgbnVsbGAuIFlvdSBjYW4gb3ZlcnJpZGVcbiAgICAgKiB0aGlzIGJ5IHBhc3NpbmcgYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBbiBvcHRpb25zIG9iamVjdCB0byBjb25maWd1cmUgaG93IGRhdGEgaXMgcmV0cmlldmVkIGZyb21cbiAgICAgKiB0aGUgc25hcHNob3QgKGZvciBleGFtcGxlIHRoZSBkZXNpcmVkIGJlaGF2aW9yIGZvciBzZXJ2ZXIgdGltZXN0YW1wcyB0aGF0XG4gICAgICogaGF2ZSBub3QgeWV0IGJlZW4gc2V0IHRvIHRoZWlyIGZpbmFsIHZhbHVlKS5cbiAgICAgKiBAcmV0dXJuIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgb3IgYHVuZGVmaW5lZGAgaWZcbiAgICAgKiB0aGUgZG9jdW1lbnQgZG9lc24ndCBleGlzdC5cbiAgICAgKi9cbiAgICBuLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodm9pZCAwID09PSB0ICYmICh0ID0ge30pLCB0aGlzLk5fKSB7XG4gICAgICAgICAgICBpZiAodGhpcy54Xykge1xuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byB1c2UgdGhlIGNvbnZlcnRlciBhbmQgY3JlYXRlIGEgbmV3IERvY3VtZW50U25hcHNob3RcbiAgICAgICAgICAgICAgICAvLyBpZiBhIGNvbnZlcnRlciBoYXMgYmVlbiBwcm92aWRlZC5cbiAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBrYSh0aGlzLlNfLCB0aGlzLkRfLCB0aGlzLkNfLCB0aGlzLk5fLCB0aGlzLm1ldGFkYXRhLCBcbiAgICAgICAgICAgICAgICAvKiBjb252ZXJ0ZXI9ICovIG51bGwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnhfLmZyb21GaXJlc3RvcmUoZSwgdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EXy5JXyh0aGlzLk5fLnNuKCksIHQuc2VydmVyVGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGZpZWxkIHNwZWNpZmllZCBieSBgZmllbGRQYXRoYC4gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiB0aGVcbiAgICAgKiBkb2N1bWVudCBvciBmaWVsZCBkb2Vzbid0IGV4aXN0LlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgYSBgRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKWAgdGhhdCBoYXMgbm90IHlldCBiZWVuIHNldCB0b1xuICAgICAqIGl0cyBmaW5hbCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGFzIGBudWxsYC4gWW91IGNhbiBvdmVycmlkZSB0aGlzIGJ5XG4gICAgICogcGFzc2luZyBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWVsZFBhdGggVGhlIHBhdGggKGZvciBleGFtcGxlICdmb28nIG9yICdmb28uYmFyJykgdG8gYSBzcGVjaWZpY1xuICAgICAqIGZpZWxkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFuIG9wdGlvbnMgb2JqZWN0IHRvIGNvbmZpZ3VyZSBob3cgdGhlIGZpZWxkIGlzIHJldHJpZXZlZFxuICAgICAqIGZyb20gdGhlIHNuYXBzaG90IChmb3IgZXhhbXBsZSB0aGUgZGVzaXJlZCBiZWhhdmlvciBmb3Igc2VydmVyIHRpbWVzdGFtcHNcbiAgICAgKiB0aGF0IGhhdmUgbm90IHlldCBiZWVuIHNldCB0byB0aGVpciBmaW5hbCB2YWx1ZSkuXG4gICAgICogQHJldHVybiBUaGUgZGF0YSBhdCB0aGUgc3BlY2lmaWVkIGZpZWxkIGxvY2F0aW9uIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoXG4gICAgICogZmllbGQgZXhpc3RzIGluIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICAvLyBXZSBhcmUgdXNpbmcgYGFueWAgaGVyZSB0byBhdm9pZCBhbiBleHBsaWNpdCBjYXN0IGJ5IG91ciB1c2Vycy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIG4ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gZSAmJiAoZSA9IHt9KSwgdGhpcy5OXykge1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzLk5fLmRhdGEoKS5maWVsZChxcyhcIkRvY3VtZW50U25hcHNob3QuZ2V0XCIsIHQpKTtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBuKSByZXR1cm4gdGhpcy5EXy5JXyhuLCBlLnNlcnZlclRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgfSwgbjtcbn0oTXMpLCBrYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSBlICYmIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQgYXMgYW4gYE9iamVjdGAuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBgRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKWAgdmFsdWVzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW5cbiAgICAgKiBzZXQgdG8gdGhlaXIgZmluYWwgdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBhcyBgbnVsbGAuIFlvdSBjYW4gb3ZlcnJpZGVcbiAgICAgKiB0aGlzIGJ5IHBhc3NpbmcgYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBbiBvcHRpb25zIG9iamVjdCB0byBjb25maWd1cmUgaG93IGRhdGEgaXMgcmV0cmlldmVkIGZyb21cbiAgICAgKiB0aGUgc25hcHNob3QgKGZvciBleGFtcGxlIHRoZSBkZXNpcmVkIGJlaGF2aW9yIGZvciBzZXJ2ZXIgdGltZXN0YW1wcyB0aGF0XG4gICAgICogaGF2ZSBub3QgeWV0IGJlZW4gc2V0IHRvIHRoZWlyIGZpbmFsIHZhbHVlKS5cbiAgICAgKiBAcmV0dXJuIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgYWxsIGZpZWxkcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICovICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0ICYmICh0ID0ge30pLCBlLnByb3RvdHlwZS5kYXRhLmNhbGwodGhpcywgdCk7XG4gICAgfSwgbjtcbn0oU2EpLCBEYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuLCByKSB7XG4gICAgICAgIHRoaXMuU18gPSB0LCB0aGlzLkRfID0gZSwgdGhpcy5iZiA9IHIsIHRoaXMubWV0YWRhdGEgPSBuZXcgS2Eoci5oYXNQZW5kaW5nV3JpdGVzLCByLmZyb21DYWNoZSksIFxuICAgICAgICB0aGlzLnF1ZXJ5ID0gbjtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJkb2NzXCIsIHtcbiAgICAgICAgLyoqIEFuIGFycmF5IG9mIGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBgUXVlcnlTbmFwc2hvdGAuICovIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnB1c2goZSk7XG4gICAgICAgICAgICB9KSksIHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgLyoqIFRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIGluIHRoZSBgUXVlcnlTbmFwc2hvdGAuICovIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iZi5kb2NzLnNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSwgXCJlbXB0eVwiLCB7XG4gICAgICAgIC8qKiBUcnVlIGlmIHRoZXJlIGFyZSBubyBkb2N1bWVudHMgaW4gdGhlIGBRdWVyeVNuYXBzaG90YC4gKi8gZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAwID09PSB0aGlzLnNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIFxuICAgIC8qKlxuICAgICAqIEVudW1lcmF0ZXMgYWxsIG9mIHRoZSBkb2N1bWVudHMgaW4gdGhlIGBRdWVyeVNuYXBzaG90YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aXRoIGEgYFF1ZXJ5RG9jdW1lbnRTbmFwc2hvdGAgZm9yXG4gICAgICogZWFjaCBkb2N1bWVudCBpbiB0aGUgc25hcHNob3QuXG4gICAgICogQHBhcmFtIHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIGZvciB0aGUgY2FsbGJhY2suXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICB0aGlzLmJmLmRvY3MuZm9yRWFjaCgoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgdC5jYWxsKGUsIG5ldyBrYShuLlNfLCBuLkRfLCByLmtleSwgciwgbmV3IEthKG4uYmYuUXQuaGFzKHIua2V5KSwgbi5iZi5mcm9tQ2FjaGUpLCBuLnF1ZXJ5LnhfKSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBkb2N1bWVudHMgY2hhbmdlcyBzaW5jZSB0aGUgbGFzdCBzbmFwc2hvdC4gSWYgdGhpc1xuICAgICAqIGlzIHRoZSBmaXJzdCBzbmFwc2hvdCwgYWxsIGRvY3VtZW50cyB3aWxsIGJlIGluIHRoZSBsaXN0IGFzICdhZGRlZCdcbiAgICAgKiBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgYFNuYXBzaG90TGlzdGVuT3B0aW9uc2AgdGhhdCBjb250cm9sIHdoZXRoZXIgbWV0YWRhdGEtb25seVxuICAgICAqIGNoYW5nZXMgKGkuZS4gb25seSBgRG9jdW1lbnRTbmFwc2hvdC5tZXRhZGF0YWAgY2hhbmdlZCkgc2hvdWxkIHRyaWdnZXJcbiAgICAgKiBzbmFwc2hvdCBldmVudHMuXG4gICAgICovXG4gICAgdC5wcm90b3R5cGUuZG9jQ2hhbmdlcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0ge30pO1xuICAgICAgICB2YXIgZSA9ICEhdC5pbmNsdWRlTWV0YWRhdGFDaGFuZ2VzO1xuICAgICAgICBpZiAoZSAmJiB0aGlzLmJmLld0KSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiVG8gaW5jbHVkZSBtZXRhZGF0YSBjaGFuZ2VzIHdpdGggeW91ciBkb2N1bWVudCBjaGFuZ2VzLCB5b3UgbXVzdCBhbHNvIHBhc3MgeyBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOnRydWUgfSB0byBvblNuYXBzaG90KCkuXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5TZiAmJiB0aGlzLkRmID09PSBlIHx8ICh0aGlzLlNmID0gXG4gICAgICAgIC8qKiBDYWxjdWxhdGVzIHRoZSBhcnJheSBvZiBEb2N1bWVudENoYW5nZXMgZm9yIGEgZ2l2ZW4gVmlld1NuYXBzaG90LiAqL1xuICAgICAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICBpZiAodC5iZi5VdC5UKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgdGhlIGZpcnN0IHNuYXBzaG90IGJlY2F1c2UgaW5kZXggY2FsY3VsYXRpb24gaXMgZWFzeSBhbmRcbiAgICAgICAgICAgICAgICAvLyBmYXN0XG4gICAgICAgICAgICAgICAgdmFyIG4gPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiB0LmJmLmRvY0NoYW5nZXMubWFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gbmV3IGthKHQuU18sIHQuRF8sIGUuZG9jLmtleSwgZS5kb2MsIG5ldyBLYSh0LmJmLlF0LmhhcyhlLmRvYy5rZXkpLCB0LmJmLmZyb21DYWNoZSksIHQucXVlcnkueF8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5kb2MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvYzogcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZEluZGV4OiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4OiBuKytcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBIERvY3VtZW50U2V0IHRoYXQgaXMgdXBkYXRlZCBpbmNyZW1lbnRhbGx5IGFzIGNoYW5nZXMgYXJlIGFwcGxpZWQgdG8gdXNlXG4gICAgICAgICAgICAvLyB0byBsb29rdXAgdGhlIGluZGV4IG9mIGEgZG9jdW1lbnQuXG4gICAgICAgICAgICB2YXIgciA9IHQuYmYuVXQ7XG4gICAgICAgICAgICByZXR1cm4gdC5iZi5kb2NDaGFuZ2VzLmZpbHRlcigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlIHx8IDMgLyogTWV0YWRhdGEgKi8gIT09IHQudHlwZTtcbiAgICAgICAgICAgIH0pKS5tYXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyBrYSh0LlNfLCB0LkRfLCBlLmRvYy5rZXksIGUuZG9jLCBuZXcgS2EodC5iZi5RdC5oYXMoZS5kb2Mua2V5KSwgdC5iZi5mcm9tQ2FjaGUpLCB0LnF1ZXJ5LnhfKSwgaSA9IC0xLCBvID0gLTE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogQWRkZWQgKi8gIT09IGUudHlwZSAmJiAoaSA9IHIuaW5kZXhPZihlLmRvYy5rZXkpLCByID0gci5kZWxldGUoZS5kb2Mua2V5KSksIFxuICAgICAgICAgICAgICAgIDEgLyogUmVtb3ZlZCAqLyAhPT0gZS50eXBlICYmIChvID0gKHIgPSByLmFkZChlLmRvYykpLmluZGV4T2YoZS5kb2Mua2V5KSksIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogT2EoZS50eXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZG9jOiBuLFxuICAgICAgICAgICAgICAgICAgICBvbGRJbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXg6IG9cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KHRoaXMsIGUpLCB0aGlzLkRmID0gZSksIHRoaXMuU2Y7XG4gICAgfSwgdDtcbn0oKTtcblxuLyoqXG4gKiBBIGBRdWVyeURvY3VtZW50U25hcHNob3RgIGNvbnRhaW5zIGRhdGEgcmVhZCBmcm9tIGEgZG9jdW1lbnQgaW4geW91clxuICogRmlyZXN0b3JlIGRhdGFiYXNlIGFzIHBhcnQgb2YgYSBxdWVyeS4gVGhlIGRvY3VtZW50IGlzIGd1YXJhbnRlZWQgdG8gZXhpc3RcbiAqIGFuZCBpdHMgZGF0YSBjYW4gYmUgZXh0cmFjdGVkIHdpdGggYC5kYXRhKClgIG9yIGAuZ2V0KDxmaWVsZD4pYCB0byBnZXQgYVxuICogc3BlY2lmaWMgZmllbGQuXG4gKlxuICogQSBgUXVlcnlEb2N1bWVudFNuYXBzaG90YCBvZmZlcnMgdGhlIHNhbWUgQVBJIHN1cmZhY2UgYXMgYVxuICogYERvY3VtZW50U25hcHNob3RgLiBTaW5jZSBxdWVyeSByZXN1bHRzIGNvbnRhaW4gb25seSBleGlzdGluZyBkb2N1bWVudHMsIHRoZVxuICogYGV4aXN0c2AgcHJvcGVydHkgd2lsbCBhbHdheXMgYmUgdHJ1ZSBhbmQgYGRhdGEoKWAgd2lsbCBuZXZlciByZXR1cm5cbiAqICd1bmRlZmluZWQnLlxuICovIGZ1bmN0aW9uIE9hKHQpIHtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgMCAvKiBBZGRlZCAqLyA6XG4gICAgICAgIHJldHVybiBcImFkZGVkXCI7XG5cbiAgICAgIGNhc2UgMiAvKiBNb2RpZmllZCAqLyA6XG4gICAgICBjYXNlIDMgLyogTWV0YWRhdGEgKi8gOlxuICAgICAgICByZXR1cm4gXCJtb2RpZmllZFwiO1xuXG4gICAgICBjYXNlIDEgLyogUmVtb3ZlZCAqLyA6XG4gICAgICAgIHJldHVybiBcInJlbW92ZWRcIjtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFMoKTtcbiAgICB9XG59XG5cbi8vIFRPRE8oZmlyZXN0b3JlZXhwKTogQWRkIHRlc3RzIGZvciBzbmFwc2hvdEVxdWFsIHdpdGggZGlmZmVyZW50IHNuYXBzaG90XG4vLyBtZXRhZGF0YVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIHNuYXBzaG90cyBhcmUgZXF1YWwuXG4gKlxuICogQHBhcmFtIGxlZnQgQSBzbmFwc2hvdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHJpZ2h0IEEgc25hcHNob3QgdG8gY29tcGFyZS5cbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgc25hcHNob3RzIGFyZSBlcXVhbC5cbiAqLyBmdW5jdGlvbiBQYSh0LCBlKSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBTYSAmJiBlIGluc3RhbmNlb2YgU2EgPyB0LlNfID09PSBlLlNfICYmIHQuQ18uaXNFcXVhbChlLkNfKSAmJiAobnVsbCA9PT0gdC5OXyA/IG51bGwgPT09IGUuTl8gOiB0Lk5fLmlzRXF1YWwoZS5OXykpICYmIHQueF8gPT09IGUueF8gOiB0IGluc3RhbmNlb2YgRGEgJiYgZSBpbnN0YW5jZW9mIERhICYmIHQuU18gPT09IGUuU18gJiYgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBxdWVyaWVzIHBvaW50IHRvIHRoZSBzYW1lIGNvbGxlY3Rpb24gYW5kIGFwcGx5XG4gICAgICogdGhlIHNhbWUgY29uc3RyYWludHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGVmdCBBIGBRdWVyeWAgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0gcmlnaHQgQSBRdWVyeWAgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIHJlZmVyZW5jZXMgcG9pbnQgdG8gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIHNhbWVcbiAgICAgKiBGaXJlc3RvcmUgZGF0YWJhc2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIEJzICYmIGUgaW5zdGFuY2VvZiBCcyAmJiB0LmZpcmVzdG9yZSA9PT0gZS5maXJlc3RvcmUgJiYgUm4odC5NXywgZS5NXykgJiYgdC54XyA9PT0gZS54XztcbiAgICB9KHQucXVlcnksIGUucXVlcnkpICYmIHQubWV0YWRhdGEuaXNFcXVhbChlLm1ldGFkYXRhKSAmJiB0LmJmLmlzRXF1YWwoZS5iZik7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFJlYWRzIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGlzIGBEb2N1bWVudFJlZmVyZW5jZWAuXG4gKlxuICogTm90ZTogYGdldERvYygpYCBhdHRlbXB0cyB0byBwcm92aWRlIHVwLXRvLWRhdGUgZGF0YSB3aGVuIHBvc3NpYmxlIGJ5IHdhaXRpbmdcbiAqIGZvciBkYXRhIGZyb20gdGhlIHNlcnZlciwgYnV0IGl0IG1heSByZXR1cm4gY2FjaGVkIGRhdGEgb3IgZmFpbCBpZiB5b3UgYXJlXG4gKiBvZmZsaW5lIGFuZCB0aGUgc2VydmVyIGNhbm5vdCBiZSByZWFjaGVkLiBUbyBzcGVjaWZ5IHRoaXMgYmVoYXZpb3IsIGludm9rZVxuICoge0BsaW5rIGdldERvY0Zyb21DYWNoZSgpfSBvciB7QGxpbmsgZ2V0RG9jRnJvbVNlcnZlcigpfS5cbiAqXG4gKiBAcGFyYW0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2Ugb2YgdGhlIGRvY3VtZW50IHRvIGZldGNoLlxuICogQHJldHVybiBBIFByb21pc2UgcmVzb2x2ZWQgd2l0aCBhIGBEb2N1bWVudFNuYXBzaG90YCBjb250YWluaW5nIHRoZVxuICogY3VycmVudCBkb2N1bWVudCBjb250ZW50cy5cbiAqLyB2YXIgVmEgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKG4gPSBlLmNhbGwodGhpcykgfHwgdGhpcykuZmlyZXN0b3JlID0gdCwgbjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4ucHJvdG90eXBlLlJfID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IGtzKHQpO1xuICAgIH0sIG4ucHJvdG90eXBlLlBfID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMucF8odCwgdGhpcy5maXJlc3RvcmUudl8pO1xuICAgICAgICByZXR1cm4gbmV3IGpzKHRoaXMuZmlyZXN0b3JlLCAvKiBjb252ZXJ0ZXI9ICovIG51bGwsIGUpO1xuICAgIH0sIG47XG59KExzKTtcblxuLyoqXG4gKiBSZWFkcyB0aGUgZG9jdW1lbnQgcmVmZXJyZWQgdG8gYnkgdGhpcyBgRG9jdW1lbnRSZWZlcmVuY2VgIGZyb20gY2FjaGUuXG4gKiBSZXR1cm5zIGFuIGVycm9yIGlmIHRoZSBkb2N1bWVudCBpcyBub3QgY3VycmVudGx5IGNhY2hlZC5cbiAqXG4gKiBAcmV0dXJuIEEgUHJvbWlzZSByZXNvbHZlZCB3aXRoIGEgYERvY3VtZW50U25hcHNob3RgIGNvbnRhaW5pbmcgdGhlXG4gKiBjdXJyZW50IGRvY3VtZW50IGNvbnRlbnRzLlxuICovIGZ1bmN0aW9uIENhKHQsIGUsIG4pIHtcbiAgICBmb3IgKHZhciByID0gW10sIGkgPSAzOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSByW2kgLSAzXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB2YXIgbyA9IHdzKHQuZmlyZXN0b3JlLCBOYSksIHUgPSBHcyhvKTtcbiAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgIC8vIHBlcmZvcm1pbmcgdmFsaWRhdGlvbi5cbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIGRzICYmIChlID0gZS5vXyksIExhKG8sIChcInN0cmluZ1wiID09IHR5cGVvZiBlIHx8IGUgaW5zdGFuY2VvZiBGcyA/IFpzKHUsIFwidXBkYXRlRG9jXCIsIHQuQ18sIGUsIG4sIHIpIDogJHModSwgXCJ1cGRhdGVEb2NcIiwgdC5DXywgZSkpLkxfKHQuQ18sIFplLmV4aXN0cyghMCkpKTtcbn1cblxuLyoqXG4gKiBEZWxldGVzIHRoZSBkb2N1bWVudCByZWZlcnJlZCB0byBieSB0aGUgc3BlY2lmaWVkIGBEb2N1bWVudFJlZmVyZW5jZWAuXG4gKlxuICogQHBhcmFtIHJlZmVyZW5jZSBBIHJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgdG8gZGVsZXRlLlxuICogQHJldHVybiBBIFByb21pc2UgcmVzb2x2ZWQgb25jZSB0aGUgZG9jdW1lbnQgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5XG4gKiBkZWxldGVkIGZyb20gdGhlIGJhY2tlbmQgKG5vdGUgdGhhdCBpdCB3b24ndCByZXNvbHZlIHdoaWxlIHlvdSdyZSBvZmZsaW5lKS5cbiAqL1xuLyoqIExvY2FsbHkgd3JpdGVzIGBtdXRhdGlvbnNgIG9uIHRoZSBhc3luYyBxdWV1ZS4gKi8gZnVuY3Rpb24gTGEodCwgZSkge1xuICAgIHJldHVybiBJYShxYSh0KSwgZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBWaWV3U25hcHNob3QgdGhhdCBjb250YWlucyB0aGUgc2luZ2xlIGRvY3VtZW50IHNwZWNpZmllZCBieSBgcmVmYFxuICogdG8gYSBEb2N1bWVudFNuYXBzaG90LlxuICovIGZ1bmN0aW9uIFJhKHQsIGUsIG4pIHtcbiAgICB2YXIgciA9IG4uZG9jcy5nZXQoZS5DXyksIGkgPSBuZXcgVmEodCk7XG4gICAgcmV0dXJuIG5ldyBTYSh0LCBpLCBlLkNfLCByLCBuZXcgS2Eobi5oYXNQZW5kaW5nV3JpdGVzLCBuLmZyb21DYWNoZSksIGUueF8pO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGluZGljYXRlIHRoZSBMUlUgZ2FyYmFnZSBjb2xsZWN0aW9uIHNob3VsZCBiZSBkaXNhYmxlZC5cbiAqIFNldCB0aGlzIHZhbHVlIGFzIHRoZSBgY2FjaGVTaXplQnl0ZXNgIG9uIHRoZSBzZXR0aW5ncyBwYXNzZWQgdG8gdGhlXG4gKiBgRmlyZXN0b3JlYCBpbnN0YW5jZS5cbiAqL1xuLyoqXG4gKiBUaGUgcGVyc2lzdGVuY2UgcHJvdmlkZXIgaW5jbHVkZWQgd2l0aCB0aGUgZnVsbCBGaXJlc3RvcmUgU0RLLlxuICovIHZhciBNYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLmVuYWJsZUluZGV4ZWREYlBlcnNpc3RlbmNlID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgQWEodCk7XG4gICAgICAgICAgICB2YXIgbiA9IHFhKHQpLCByID0gdC5rXygpLCBpID0gbmV3IGxzO1xuICAgICAgICAgICAgcmV0dXJuIHhhKG4sIGksIG5ldyBocyhpLCByLmNhY2hlU2l6ZUJ5dGVzLCBudWxsID09IGUgPyB2b2lkIDAgOiBlLmZvcmNlT3duZXJzaGlwKSk7XG4gICAgICAgIH0odC5vXywge1xuICAgICAgICAgICAgZm9yY2VPd25lcnNoaXA6IGVcbiAgICAgICAgfSk7XG4gICAgfSwgdC5wcm90b3R5cGUuZW5hYmxlTXVsdGlUYWJJbmRleGVkRGJQZXJzaXN0ZW5jZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIEFhKHQpO1xuICAgICAgICAgICAgdmFyIGUgPSBxYSh0KSwgbiA9IHQua18oKSwgciA9IG5ldyBscztcbiAgICAgICAgICAgIHJldHVybiB4YShlLCByLCBuZXcgZnMociwgbi5jYWNoZVNpemVCeXRlcykpO1xuICAgICAgICB9KHQub18pO1xuICAgIH0sIHQucHJvdG90eXBlLmNsZWFySW5kZXhlZERiUGVyc2lzdGVuY2UgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodC5tZiAmJiAhdC5BZikgdGhyb3cgbmV3IGooRi5GQUlMRURfUFJFQ09ORElUSU9OLCBcIlBlcnNpc3RlbmNlIGNhbiBvbmx5IGJlIGNsZWFyZWQgYmVmb3JlIGEgRmlyZXN0b3JlIGluc3RhbmNlIGlzIGluaXRpYWxpemVkIG9yIGFmdGVyIGl0IGlzIHRlcm1pbmF0ZWQuXCIpO1xuICAgICAgICAgICAgdmFyIGkgPSBuZXcgcnI7XG4gICAgICAgICAgICByZXR1cm4gdC55Zi55cygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG8ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnRyeXMucHVzaChbIDAsIDIsICwgMyBdKSwgWyA0IC8qeWllbGQqLyAsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVyLmtuKCkgPyAoZSA9IHQgKyBcIm1haW5cIiwgWyA0IC8qeWllbGQqLyAsIHVyLmRlbGV0ZShlKSBdKSA6IFsgMiAvKnJldHVybiovICwgUHJvbWlzZS5yZXNvbHZlKCkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfShzbyh0LnZfLCB0LmRmKSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VudCgpLCBpLnJlc29sdmUoKSwgWyAzIC8qYnJlYWsqLyAsIDMgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPSBvLnNlbnQoKSwgaS5yZWplY3QociksIFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpLCBpLnByb21pc2VcbiAgICAgICAgICAgIC8qKlxuICogV2FpdHMgdW50aWwgYWxsIGN1cnJlbnRseSBwZW5kaW5nIHdyaXRlcyBmb3IgdGhlIGFjdGl2ZSB1c2VyIGhhdmUgYmVlblxuICogYWNrbm93bGVkZ2VkIGJ5IHRoZSBiYWNrZW5kLlxuICpcbiAqIFRoZSByZXR1cm5lZCBQcm9taXNlIHJlc29sdmVzIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGFyZSBubyBvdXRzdGFuZGluZyB3cml0ZXMuXG4gKiBPdGhlcndpc2UsIHRoZSBQcm9taXNlIHdhaXRzIGZvciBhbGwgcHJldmlvdXNseSBpc3N1ZWQgd3JpdGVzIChpbmNsdWRpbmdcbiAqIHRob3NlIHdyaXR0ZW4gaW4gYSBwcmV2aW91cyBhcHAgc2Vzc2lvbiksIGJ1dCBpdCBkb2VzIG5vdCB3YWl0IGZvciB3cml0ZXNcbiAqIHRoYXQgd2VyZSBhZGRlZCBhZnRlciB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkLiBJZiB5b3Ugd2FudCB0byB3YWl0IGZvclxuICogYWRkaXRpb25hbCB3cml0ZXMsIGNhbGwgYHdhaXRGb3JQZW5kaW5nV3JpdGVzKClgIGFnYWluLlxuICpcbiAqIEFueSBvdXRzdGFuZGluZyBgd2FpdEZvclBlbmRpbmdXcml0ZXMoKWAgUHJvbWlzZXMgYXJlIHJlamVjdGVkIGR1cmluZyB1c2VyXG4gKiBjaGFuZ2VzLlxuICpcbiAqIEByZXR1cm4gQSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIHdoZW4gYWxsIGN1cnJlbnRseSBwZW5kaW5nIHdyaXRlcyBoYXZlIGJlZW5cbiAqIGFja25vd2xlZGdlZCBieSB0aGUgYmFja2VuZC5cbiAqLztcbiAgICAgICAgfSh0Lm9fKTtcbiAgICB9LCB0O1xufSgpLCBVYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24ocikge1xuICAgIGZ1bmN0aW9uIGkodCwgZSwgbikge1xuICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaSA9IHIuY2FsbCh0aGlzLCBlKSB8fCB0aGlzKS5DZiA9IG4sIGkuSU5URVJOQUwgPSB7XG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0IGluc3RhbmNlb2YgXyB8fCAoaS5OZiA9IHQpLCBpO1xuICAgIH1cbiAgICByZXR1cm4gdChpLCByKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGkucHJvdG90eXBlLCBcInZfXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9fLnZfO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBpLnByb3RvdHlwZS5zZXR0aW5ncyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdC5tZXJnZSAmJiBcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwcm9wZXJ0eSBmcm9tIHRoZSBzZXR0aW5ncyBvbmNlIHRoZSBtZXJnZSBpcyBjb21wbGV0ZWRcbiAgICAgICAgZGVsZXRlICh0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9fLmdmKCkpLCB0KSkubWVyZ2UsIHRoaXMub18uUGYodCk7XG4gICAgfSwgaS5wcm90b3R5cGUudXNlRW11bGF0b3IgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIFwiZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tXCIgIT09IHRoaXMub18uZ2YoKS5ob3N0ICYmIHgoXCJIb3N0IGhhcyBiZWVuIHNldCBpbiBib3RoIHNldHRpbmdzKCkgYW5kIHVzZUVtdWxhdG9yKCksIGVtdWxhdG9yIGhvc3Qgd2lsbCBiZSB1c2VkXCIpLCBcbiAgICAgICAgdGhpcy5zZXR0aW5ncyh7XG4gICAgICAgICAgICBob3N0OiB0ICsgXCI6XCIgKyBlLFxuICAgICAgICAgICAgc3NsOiAhMSxcbiAgICAgICAgICAgIG1lcmdlOiAhMFxuICAgICAgICB9KTtcbiAgICB9LCBpLnByb3RvdHlwZS5lbmFibGVOZXR3b3JrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gdC5ycy5lbnF1ZXVlKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZShyLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSwgcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBnYSh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9IG4uc2VudCgpLCBbIDQgLyp5aWVsZCovICwgd2EodCkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPSBuLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gLCAoZS5kYSghMCksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBEKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5IYy5kZWxldGUoMCAvKiBVc2VyRGlzYWJsZWQgKi8pLCBrbyhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KHIpKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBEaXNhYmxlcyB0aGUgbmV0d29yayBjb25uZWN0aW9uLiBQZW5kaW5nIG9wZXJhdGlvbnMgd2lsbCBub3QgY29tcGxldGUuICovIChxYSh0aGlzLm9fKSk7XG4gICAgfSwgaS5wcm90b3R5cGUuZGlzYWJsZU5ldHdvcmsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0LnJzLmVucXVldWUoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlKHIsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByLCBpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChvLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIGdhKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID0gby5zZW50KCksIFsgNCAvKnlpZWxkKi8gLCB3YSh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9IG8uc2VudCgpLCBbIDIgLypyZXR1cm4qLyAsIChyLmRhKCExKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGUgPSBEKHQpKS5IYy5hZGQoMCAvKiBVc2VyRGlzYWJsZWQgKi8pLCBbIDQgLyp5aWVsZCovICwgRG8oZSkgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZW50KCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIE9ubGluZVN0YXRlIHRvIE9mZmxpbmUgc28gZ2V0KClzIHJldHVybiBmcm9tIGNhY2hlLCBldGMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuWmMuc2V0KFwiT2ZmbGluZVwiIC8qIE9mZmxpbmUgKi8pLCBbIDIgLypyZXR1cm4qLyBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oaSkpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHdyaXRlcyB0aGF0IHdlcmUgcGVuZGluZyBhdCB0aGUgdGltZVxuICogdGhpcyBtZXRob2Qgd2FzIGNhbGxlZCByZWNlaXZlZCBzZXJ2ZXIgYWNrbm93bGVkZ2VtZW50LiBBbiBhY2tub3dsZWRnZW1lbnRcbiAqIGNhbiBiZSBlaXRoZXIgYWNjZXB0YW5jZSBvciByZWplY3Rpb24uXG4gKi8gKHFhKHRoaXMub18pKTtcbiAgICB9LCBpLnByb3RvdHlwZS5lbmFibGVQZXJzaXN0ZW5jZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSAhMSwgbiA9ICExO1xuICAgICAgICByZXR1cm4gdCAmJiBncyhcInN5bmNocm9uaXplVGFic1wiLCBlID0gISF0LnN5bmNocm9uaXplVGFicywgXCJleHBlcmltZW50YWxGb3JjZU93bmluZ1RhYlwiLCBuID0gISF0LmV4cGVyaW1lbnRhbEZvcmNlT3duaW5nVGFiKSwgXG4gICAgICAgIGUgPyB0aGlzLkNmLmVuYWJsZU11bHRpVGFiSW5kZXhlZERiUGVyc2lzdGVuY2UodGhpcykgOiB0aGlzLkNmLmVuYWJsZUluZGV4ZWREYlBlcnNpc3RlbmNlKHRoaXMsIG4pO1xuICAgIH0sIGkucHJvdG90eXBlLmNsZWFyUGVyc2lzdGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuQ2YuY2xlYXJJbmRleGVkRGJQZXJzaXN0ZW5jZSh0aGlzKTtcbiAgICB9LCBpLnByb3RvdHlwZS50ZXJtaW5hdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLl9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UoXCJmaXJlc3RvcmVcIiksIHRoaXMuYXBwLl9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UoXCJmaXJlc3RvcmUtZXhwXCIpLCBcbiAgICAgICAgdGhpcy5vXy5fZGVsZXRlKCk7XG4gICAgfSwgaS5wcm90b3R5cGUud2FpdEZvclBlbmRpbmdXcml0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLCBpID0gbmV3IHJyO1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnJzLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBBdSwgWyA0IC8qeWllbGQqLyAsIGJhKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovICwgZS5hcHBseSh2b2lkIDAsIFsgbi5zZW50KCksIGkgXSkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSksIGkucHJvbWlzZTtcbiAgICAgICAgICAgIH0ocWEodCkpO1xuICAgICAgICB9KHRoaXMub18pO1xuICAgIH0sIGkucHJvdG90eXBlLm9uU25hcHNob3RzSW5TeW5jID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgcikge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLCBvID0gcWEodCksIHUgPSBVcihyKSA/IHIgOiB7XG4gICAgICAgICAgICAgICAgbmV4dDogclxuICAgICAgICAgICAgfSwgcyA9IG5ldyBwcyh1KTtcbiAgICAgICAgICAgIHJldHVybiB0LnlmLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZShpLCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEQodCkuJHMuYWRkKGUpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW1tZWRpYXRlbHkgZmlyZSBhbiBpbml0aWFsIGV2ZW50LCBpbmRpY2F0aW5nIGFsbCBleGlzdGluZyBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGluLXN5bmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFsgNCAvKnlpZWxkKi8gLCBfYShvKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5hcHBseSh2b2lkIDAsIFsgZS5zZW50KCksIHMgXSksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHMucl8oKSwgdC55Zi5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlKGksIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRCh0KS4kcy5kZWxldGUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFsgNCAvKnlpZWxkKi8gLCBfYShvKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmFwcGx5KHZvaWQgMCwgWyBlLnNlbnQoKSwgcyBdKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHRoaXMub18sIHQpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnByb3RvdHlwZSwgXCJhcHBcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLk5mKSB0aHJvdyBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiRmlyZXN0b3JlIHdhcyBub3QgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlIEZpcmViYXNlIFNESy4gJ2FwcCcgaXMgbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk5mO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBpLnByb3RvdHlwZS5jb2xsZWN0aW9uID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdnMoXCJGaXJlc3RvcmUuY29sbGVjdGlvblwiLCBcInBhdGhcIiwgdCksIHFhKHRoaXMub18pLCBuZXcgZWMoSy5rKHQpLCB0aGlzLCBcbiAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsKTtcbiAgICB9LCBpLnByb3RvdHlwZS5kb2MgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB2cyhcIkZpcmVzdG9yZS5kb2NcIiwgXCJwYXRoXCIsIHQpLCBxYSh0aGlzLm9fKSwgemEueGYoSy5rKHQpLCB0aGlzLCBcbiAgICAgICAgLyogY29udmVydGVyPSAqLyBudWxsKTtcbiAgICB9LCBpLnByb3RvdHlwZS5jb2xsZWN0aW9uR3JvdXAgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICh2cyhcIkZpcmVzdG9yZS5jb2xsZWN0aW9uR3JvdXBcIiwgXCJjb2xsZWN0aW9uSWRcIiwgdCksIHQuaW5kZXhPZihcIi9cIikgPj0gMCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgY29sbGVjdGlvbiBJRCAnXCIgKyB0ICsgXCInIHBhc3NlZCB0byBmdW5jdGlvbiBGaXJlc3RvcmUuY29sbGVjdGlvbkdyb3VwKCkuIENvbGxlY3Rpb24gSURzIG11c3Qgbm90IGNvbnRhaW4gJy8nLlwiKTtcbiAgICAgICAgcmV0dXJuIHFhKHRoaXMub18pLCBuZXcgJGEoXG4gICAgICAgIC8qKlxuICogQ3JlYXRlcyBhIG5ldyBRdWVyeSBmb3IgYSBjb2xsZWN0aW9uIGdyb3VwIHF1ZXJ5IHRoYXQgbWF0Y2hlcyBhbGwgZG9jdW1lbnRzXG4gKiB3aXRoaW4gdGhlIHByb3ZpZGVkIGNvbGxlY3Rpb24gZ3JvdXAuXG4gKi9cbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbihLLiQoKSwgdCk7XG4gICAgICAgIH0odCksIHRoaXMsIFxuICAgICAgICAvKiBjb252ZXJ0ZXI9ICovIG51bGwpO1xuICAgIH0sIGkucHJvdG90eXBlLnJ1blRyYW5zYWN0aW9uID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0LCByKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMsIG8gPSBuZXcgcnI7XG4gICAgICAgICAgICByZXR1cm4gdC5ycy5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUoaSwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDQgLyp5aWVsZCovICwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geWEodCkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuV2M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gbi5zZW50KCksIG5ldyBmYSh0LnJzLCBlLCByLCBvKS5ydW4oKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKSwgby5wcm9taXNlO1xuICAgICAgICB9KHFhKHRoaXMub18pLCAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHQobmV3IGphKHIsIGUpKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIGkucHJvdG90eXBlLmJhdGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBxYSh0aGlzLm9fKSwgbmV3IEJhKHRoaXMpO1xuICAgIH0sIGk7XG59KGRzKTtcblxuLyoqXG4gKiBDb21wYXQgY2xhc3MgZm9yIEZpcmVzdG9yZS4gRXhwb3NlcyBGaXJlc3RvcmUgTGVnYWN5IEFQSSwgYnV0IGRlbGVnYXRlc1xuICogdG8gdGhlIGZ1bmN0aW9uYWwgQVBJIG9mIGZpcmVzdG9yZS1leHAuXG4gKi8gZnVuY3Rpb24gcWEodCkge1xuICAgIHJldHVybiB0LnBmIHx8IEZhKHQpLCB0LnBmLmxmKCksIHQucGY7XG59XG5cbmZ1bmN0aW9uIEZhKHQpIHtcbiAgICB2YXIgZSA9IHQua18oKSwgbiA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBiKHQsIGUsIG4uaG9zdCwgbi5zc2wsIG4uZXhwZXJpbWVudGFsRm9yY2VMb25nUG9sbGluZywgbi5leHBlcmltZW50YWxBdXRvRGV0ZWN0TG9uZ1BvbGxpbmcpO1xuICAgIH0odC52XywgdC5kZiwgZSk7XG4gICAgdC5wZiA9IG5ldyBsYSh0LkVmLCB0LnlmLCBuKTtcbn1cblxuLyoqXG4gKiBBIHJlZmVyZW5jZSB0byBhIHRyYW5zYWN0aW9uLlxuICovIHZhciBqYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuU18gPSB0LCB0aGlzLkZmID0gZSwgdGhpcy5PZiA9IEdzKHRoaXMuU18ub18pO1xuICAgIH1cbiAgICByZXR1cm4gdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSBuYyhcIlRyYW5zYWN0aW9uLmdldFwiLCB0LCB0aGlzLlNfKSwgciA9IG5ldyBScyh0aGlzLlNfKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuRmYuWF8oWyBuLkNfIF0pLnRoZW4oKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICghdCB8fCAxICE9PSB0Lmxlbmd0aCkgcmV0dXJuIFMoKTtcbiAgICAgICAgICAgIHZhciBpID0gdFswXTtcbiAgICAgICAgICAgIGlmIChpIGluc3RhbmNlb2YgX24pIHJldHVybiBuZXcgUWEoZS5TXywgbmV3IFNhKGUuU18ub18sIHIsIG4uQ18sIG51bGwsIG5ldyBLYShcbiAgICAgICAgICAgIC8qaGFzUGVuZGluZ1dyaXRlcz0gKi8gITEsIFxuICAgICAgICAgICAgLyogZnJvbUNhY2hlPSAqLyAhMSksIG4ueF8pKTtcbiAgICAgICAgICAgIGlmIChpIGluc3RhbmNlb2YgYm4pIHJldHVybiBuZXcgUWEoZS5TXywgbmV3IFNhKGUuU18ub18sIHIsIG4uQ18sIGksIG5ldyBLYShcbiAgICAgICAgICAgIC8qaGFzUGVuZGluZ1dyaXRlcz0gKi8gITEsIFxuICAgICAgICAgICAgLyogZnJvbUNhY2hlPSAqLyAhMSksIG4ueF8pKTtcbiAgICAgICAgICAgIHRocm93IFMoKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBuYyhcIlRyYW5zYWN0aW9uLnNldFwiLCB0LCB0aGlzLlNfKTtcbiAgICAgICAgbiA9IHlzKFwiVHJhbnNhY3Rpb24uc2V0XCIsIG4pO1xuICAgICAgICB2YXIgaSA9IHJjKHIueF8sIGUsIG4pLCBvID0gWHModGhpcy5PZiwgXCJUcmFuc2FjdGlvbi5zZXRcIiwgci5DXywgaSwgbnVsbCAhPT0gci54Xywgbik7XG4gICAgICAgIHJldHVybiB0aGlzLkZmLnNldChyLkNfLCBvKSwgdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIgPSBbXSwgaSA9IDM7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHJbaSAtIDNdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB2YXIgbywgdSA9IG5jKFwiVHJhbnNhY3Rpb24udXBkYXRlXCIsIHQsIHRoaXMuU18pO1xuICAgICAgICAvLyBGb3IgQ29tcGF0IHR5cGVzLCB3ZSBoYXZlIHRvIFwiZXh0cmFjdFwiIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGJlZm9yZVxuICAgICAgICAvLyBwZXJmb3JtaW5nIHZhbGlkYXRpb24uXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBkcyAmJiAoZSA9IGUub18pLCBvID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSB8fCBlIGluc3RhbmNlb2YgRnMgPyBacyh0aGlzLk9mLCBcIlRyYW5zYWN0aW9uLnVwZGF0ZVwiLCB1LkNfLCBlLCBuLCByKSA6ICRzKHRoaXMuT2YsIFwiVHJhbnNhY3Rpb24udXBkYXRlXCIsIHUuQ18sIGUpLCBcbiAgICAgICAgdGhpcy5GZi51cGRhdGUodS5DXywgbyksIHRoaXM7XG4gICAgfSwgdC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IG5jKFwiVHJhbnNhY3Rpb24uZGVsZXRlXCIsIHQsIHRoaXMuU18pO1xuICAgICAgICByZXR1cm4gdGhpcy5GZi5kZWxldGUoZS5DXyksIHRoaXM7XG4gICAgfSwgdDtcbn0oKSwgQmEgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQodCkge1xuICAgICAgICB0aGlzLlNfID0gdCwgdGhpcy5NZiA9IFtdLCB0aGlzLmtmID0gITEsIHRoaXMuT2YgPSBHcyh0aGlzLlNfLm9fKTtcbiAgICB9XG4gICAgcmV0dXJuIHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgdGhpcy4kZigpO1xuICAgICAgICB2YXIgciA9IG5jKFwiV3JpdGVCYXRjaC5zZXRcIiwgdCwgdGhpcy5TXyk7XG4gICAgICAgIG4gPSB5cyhcIldyaXRlQmF0Y2guc2V0XCIsIG4pO1xuICAgICAgICB2YXIgaSA9IHJjKHIueF8sIGUsIG4pLCBvID0gWHModGhpcy5PZiwgXCJXcml0ZUJhdGNoLnNldFwiLCByLkNfLCBpLCBudWxsICE9PSByLnhfLCBuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuTWYgPSB0aGlzLk1mLmNvbmNhdChvLkxfKHIuQ18sIFplLkdlKCkpKSwgdGhpcztcbiAgICB9LCB0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIgPSBbXSwgaSA9IDM7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHJbaSAtIDNdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB0aGlzLiRmKCk7XG4gICAgICAgIHZhciBvLCB1ID0gbmMoXCJXcml0ZUJhdGNoLnVwZGF0ZVwiLCB0LCB0aGlzLlNfKTtcbiAgICAgICAgLy8gRm9yIENvbXBhdCB0eXBlcywgd2UgaGF2ZSB0byBcImV4dHJhY3RcIiB0aGUgdW5kZXJseWluZyB0eXBlcyBiZWZvcmVcbiAgICAgICAgLy8gcGVyZm9ybWluZyB2YWxpZGF0aW9uLlxuICAgICAgICAgICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgZHMgJiYgKGUgPSBlLm9fKSwgbyA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgfHwgZSBpbnN0YW5jZW9mIEZzID8gWnModGhpcy5PZiwgXCJXcml0ZUJhdGNoLnVwZGF0ZVwiLCB1LkNfLCBlLCBuLCByKSA6ICRzKHRoaXMuT2YsIFwiV3JpdGVCYXRjaC51cGRhdGVcIiwgdS5DXywgZSksIFxuICAgICAgICB0aGlzLk1mID0gdGhpcy5NZi5jb25jYXQoby5MXyh1LkNfLCBaZS5leGlzdHMoITApKSksIHRoaXM7XG4gICAgfSwgdC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLiRmKCk7XG4gICAgICAgIHZhciBlID0gbmMoXCJXcml0ZUJhdGNoLmRlbGV0ZVwiLCB0LCB0aGlzLlNfKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuTWYgPSB0aGlzLk1mLmNvbmNhdChuZXcgZG4oZS5DXywgWmUuR2UoKSkpLCB0aGlzO1xuICAgIH0sIHQucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kZigpLCB0aGlzLmtmID0gITAsIHRoaXMuTWYubGVuZ3RoID4gMCA/IElhKHFhKHRoaXMuU18ub18pLCB0aGlzLk1mKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sIHQucHJvdG90eXBlLiRmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmtmKSB0aHJvdyBuZXcgaihGLkZBSUxFRF9QUkVDT05ESVRJT04sIFwiQSB3cml0ZSBiYXRjaCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgYWZ0ZXIgY29tbWl0KCkgaGFzIGJlZW4gY2FsbGVkLlwiKTtcbiAgICB9LCB0O1xufSgpLCB6YSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oaSkge1xuICAgIGZ1bmN0aW9uIG8odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIHJldHVybiAobiA9IGkuY2FsbCh0aGlzLCBlKSB8fCB0aGlzKS5maXJlc3RvcmUgPSB0LCBuLkRfID0gbmV3IFJzKHQpLCBuO1xuICAgIH1cbiAgICByZXR1cm4gdChvLCBpKSwgby54ZiA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgaWYgKHQubGVuZ3RoICUgMiAhPSAwKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBkb2N1bWVudCByZWZlcmVuY2UuIERvY3VtZW50IHJlZmVyZW5jZXMgbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mIHNlZ21lbnRzLCBidXQgXCIgKyB0Lk0oKSArIFwiIGhhcyBcIiArIHQubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBvKGUsIG5ldyBqcyhlLm9fLCBuLCBuZXcgWSh0KSkpO1xuICAgIH0sIG8uYl8gPSBmdW5jdGlvbih0LCBlLCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgbyhlLCBuZXcganMoZS5vXywgbiwgdCkpO1xuICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vXy5pZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8ucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVjKHRoaXMub18uT18uUygpLCB0aGlzLmZpcmVzdG9yZSwgdGhpcy5vXy54Xyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9fLnBhdGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIG8ucHJvdG90eXBlLmNvbGxlY3Rpb24gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICh2cyhcIkRvY3VtZW50UmVmZXJlbmNlLmNvbGxlY3Rpb25cIiwgXCJwYXRoXCIsIHQpLCAhdCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIk11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSBjb2xsZWN0aW9uIG5hbWUgdG8gY29sbGVjdGlvbigpXCIpO1xuICAgICAgICB2YXIgZSA9IEsuayh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBlYyh0aGlzLm9fLk9fLmNoaWxkKGUpLCB0aGlzLmZpcmVzdG9yZSwgXG4gICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCk7XG4gICAgfSwgby5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBkcyAmJiAodCA9IHQub18pLCB0IGluc3RhbmNlb2YganMgJiYgKG4gPSB0LCAoKGUgPSB0aGlzLm9fKSBpbnN0YW5jZW9mIGpzIHx8IGUgaW5zdGFuY2VvZiB6cykgJiYgKG4gaW5zdGFuY2VvZiBqcyB8fCBuIGluc3RhbmNlb2YgenMpICYmIGUuZmlyZXN0b3JlID09PSBuLmZpcmVzdG9yZSAmJiBlLnBhdGggPT09IG4ucGF0aCAmJiBlLnhfID09PSBuLnhfKTtcbiAgICAgICAgdmFyIGUsIG47XG4gICAgfSwgby5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBlID0geXMoXCJEb2N1bWVudFJlZmVyZW5jZS5zZXRcIiwgZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbikge1xuICAgICAgICAgICAgICAgIHZhciByID0gd3ModC5maXJlc3RvcmUsIE5hKSwgaSA9IHJjKHQueF8sIGUsIG4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBMYShyLCBYcyhHcyhyKSwgXCJzZXREb2NcIiwgdC5DXywgaSwgbnVsbCAhPT0gdC54XywgbikuTF8odC5DXywgWmUuR2UoKSkpO1xuICAgICAgICAgICAgfSh0aGlzLm9fLCB0LCBlKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgdGhyb3cgR2EodCwgXCJzZXREb2NcIiwgXCJEb2N1bWVudFJlZmVyZW5jZS5zZXRcIik7XG4gICAgICAgIH1cbiAgICB9LCBvLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIG5baSAtIDJdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIDEgPT09IGFyZ3VtZW50cy5sZW5ndGggPyBDYSh0aGlzLm9fLCB0KSA6IENhLmFwcGx5KHZvaWQgMCwgcihbIHRoaXMub18sIHQsIGUgXSwgbikpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICB0aHJvdyBHYSh0LCBcInVwZGF0ZURvY1wiLCBcIkRvY3VtZW50UmVmZXJlbmNlLnVwZGF0ZVwiKTtcbiAgICAgICAgfVxuICAgIH0sIG8ucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTGEod3MoKHQgPSB0aGlzLm9fKS5maXJlc3RvcmUsIE5hKSwgWyBuZXcgZG4odC5DXywgWmUuR2UoKSkgXSk7XG4gICAgICAgIHZhciB0O1xuICAgIH0sIG8ucHJvdG90eXBlLm9uU25hcHNob3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgdCA9IHRoaXMsIHIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHJbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIHZhciBvID0gXG4gICAgICAgIC8qKlxuICogSXRlcmF0ZXMgdGhlIGxpc3Qgb2YgYXJndW1lbnRzIGZyb20gYW4gYG9uU25hcHNob3RgIGNhbGwgYW5kIHJldHVybnMgdGhlXG4gKiBmaXJzdCBhcmd1bWVudCB0aGF0IG1heSBiZSBhbiBgU25hcHNob3RMaXN0ZW5PcHRpb25zYCBvYmplY3QuIFJldHVybnMgYW5cbiAqIGVtcHR5IG9iamVjdCBpZiBub25lIGlzIGZvdW5kLlxuICovXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGUgPSAwLCBuID0gdDsgZSA8IG4ubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IG5bZV07XG4gICAgICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHIgJiYgIVVyKHIpKSByZXR1cm4gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfShyKSwgdSA9IGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgICAgIHZhciByLCBpLCBvO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIG8ubmV4dCAmJiBvLm5leHQoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBRYSh0LmZpcmVzdG9yZSwgbmV3IFNhKHQuZmlyZXN0b3JlLm9fLCB0LkRfLCBlLkNfLCBlLk5fLCBlLm1ldGFkYXRhLCB0Lm9fLnhfKSk7XG4gICAgICAgICAgICAgICAgICAgIH0oZSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IG51bGwgPT09IChyID0gKG8gPSBVcihlWzBdKSA/IGVbMF0gOiBVcihlWzFdKSA/IGVbMV0gOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGVbMF0gPyB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGVbMF0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZVsyXVxuICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGVbMV0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlWzJdLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZVszXVxuICAgICAgICAgICAgICAgIH0pLmVycm9yKSB8fCB2b2lkIDAgPT09IHIgPyB2b2lkIDAgOiByLmJpbmQobyksXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IG51bGwgPT09IChpID0gby5jb21wbGV0ZSkgfHwgdm9pZCAwID09PSBpID8gdm9pZCAwIDogaS5iaW5kKG8pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZm9yICh2YXIgciwgaSwgbywgdSA9IHRoaXMsIHMgPSBbXSwgYSA9IDE7IGEgPCBhcmd1bWVudHMubGVuZ3RoOyBhKyspIHNbYSAtIDFdID0gYXJndW1lbnRzW2FdO1xuICAgICAgICAgICAgdmFyIGMgPSB7XG4gICAgICAgICAgICAgICAgaW5jbHVkZU1ldGFkYXRhQ2hhbmdlczogITFcbiAgICAgICAgICAgIH0sIGggPSAwO1xuICAgICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2Ygc1toXSB8fCBVcihzW2hdKSB8fCAoYyA9IHNbaF0sIGgrKyk7XG4gICAgICAgICAgICB2YXIgZiwgbCwgcCwgZCA9IHtcbiAgICAgICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGFDaGFuZ2VzOiBjLmluY2x1ZGVNZXRhZGF0YUNoYW5nZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoVXIoc1toXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IHNbaF07XG4gICAgICAgICAgICAgICAgc1toXSA9IG51bGwgPT09IChyID0gdi5uZXh0KSB8fCB2b2lkIDAgPT09IHIgPyB2b2lkIDAgOiByLmJpbmQodiksIHNbaCArIDFdID0gbnVsbCA9PT0gKGkgPSB2LmVycm9yKSB8fCB2b2lkIDAgPT09IGkgPyB2b2lkIDAgOiBpLmJpbmQodiksIFxuICAgICAgICAgICAgICAgIHNbaCArIDJdID0gbnVsbCA9PT0gKG8gPSB2LmNvbXBsZXRlKSB8fCB2b2lkIDAgPT09IG8gPyB2b2lkIDAgOiBvLmJpbmQodik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGpzKSBsID0gd3ModC5maXJlc3RvcmUsIE5hKSwgcCA9IE5uKHQuQ18ucGF0aCksIGYgPSB7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBzW2hdICYmIHNbaF0oUmEobCwgdCwgZSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHNbaCArIDFdLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBzW2ggKyAyXVxuICAgICAgICAgICAgfTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgbCA9IHdzKHQuZmlyZXN0b3JlLCBOYSksIHAgPSB0Lk1fO1xuICAgICAgICAgICAgICAgIHZhciB5ID0gbmV3IFZhKGwpO1xuICAgICAgICAgICAgICAgIGYgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNbaF0gJiYgc1toXShuZXcgRGEobCwgeSwgdCwgZSkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogc1toICsgMV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBzW2ggKyAyXVxuICAgICAgICAgICAgICAgIH0sIFhhKHQuTV8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGcgPSBxYShsKSwgbSA9IG5ldyBwcyhmKSwgdyA9IG5ldyBBcihwLCBtLCBkKTtcbiAgICAgICAgICAgIHJldHVybiBsLnlmLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSh1LCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBJciwgWyA0IC8qeWllbGQqLyAsIF9hKGcpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIHQuYXBwbHkodm9pZCAwLCBbIGUuc2VudCgpLCB3IF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG0ucl8oKSwgbC55Zi5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHUsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gRXIsIFsgNCAvKnlpZWxkKi8gLCBfYShnKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIHQuYXBwbHkodm9pZCAwLCBbIGUuc2VudCgpLCB3IF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSh0aGlzLm9fLCBvLCB1KTtcbiAgICB9LCBvLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChcImNhY2hlXCIgPT09IChudWxsID09IHQgPyB2b2lkIDAgOiB0LnNvdXJjZSkgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSB3cyh0LmZpcmVzdG9yZSwgTmEpLCBvID0gcWEoaSksIHUgPSBuZXcgVmEoaSksIHMgPSBuZXcgcnI7XG4gICAgICAgICAgICByZXR1cm4gaS55Zi5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBtYShvKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIEVhKGUuc2VudCgpLCB0LkNfLCBzKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIHMucHJvbWlzZS50aGVuKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTYShpLCB1LCB0LkNfLCBlLCBuZXcgS2EoZSBpbnN0YW5jZW9mIGJuICYmIGUuSmUsIFxuICAgICAgICAgICAgICAgIC8qIGZyb21DYWNoZT0gKi8gITApLCB0LnhfKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSh0aGlzLm9fKSA6IFwic2VydmVyXCIgPT09IChudWxsID09IHQgPyB2b2lkIDAgOiB0LnNvdXJjZSkgPyBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSB3cyh0LmZpcmVzdG9yZSwgTmEpLCBvID0gcWEoaSksIHUgPSBuZXcgcnI7XG4gICAgICAgICAgICByZXR1cm4gaS55Zi5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBfYShvKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIFRhKGUuc2VudCgpLCBpLnlmLCB0LkNfLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogXCJzZXJ2ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHUpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbnQoKSwgWyAyIC8qcmV0dXJuKi8gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKSwgdS5wcm9taXNlLnRoZW4oKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmEoaSwgdCwgZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0odGhpcy5vXykgOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXMsIGkgPSB3cyh0LmZpcmVzdG9yZSwgTmEpLCBvID0gcWEoaSksIHUgPSBuZXcgcnI7XG4gICAgICAgICAgICByZXR1cm4gaS55Zi5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUociwgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgNCAvKnlpZWxkKi8gLCBfYShvKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyA0IC8qeWllbGQqLyAsIFRhKGUuc2VudCgpLCBpLnlmLCB0LkNfLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogXCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB1KSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zZW50KCksIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIHUucHJvbWlzZS50aGVuKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJhKGksIHQsIGUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KHRoaXMub18pKS50aGVuKChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFFhKHIuZmlyZXN0b3JlLCBuZXcgU2Eoci5maXJlc3RvcmUub18sIHIuRF8sIHQuQ18sIHQuTl8sIHQubWV0YWRhdGEsIHIub18ueF8pKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG8ucHJvdG90eXBlLndpdGhDb252ZXJ0ZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBuZXcgbyh0aGlzLmZpcmVzdG9yZSwgdGhpcy5vXy53aXRoQ29udmVydGVyKHQpKTtcbiAgICB9LCBvO1xufShkcyk7XG5cbi8qKlxuICogUmVwbGFjZXMgdGhlIGZ1bmN0aW9uIG5hbWUgaW4gYW4gZXJyb3IgdGhyb3duIGJ5IHRoZSBmaXJlc3RvcmUtZXhwIEFQSVxuICogd2l0aCB0aGUgZnVuY3Rpb24gbmFtZXMgdXNlZCBpbiB0aGUgY2xhc3NpYyBBUEkuXG4gKi9cbmZ1bmN0aW9uIEdhKHQsIGUsIG4pIHtcbiAgICByZXR1cm4gdC5tZXNzYWdlID0gdC5tZXNzYWdlLnJlcGxhY2UoZSArIFwiKClcIiwgbiArIFwiKClcIiksIHQ7XG59XG5cbnZhciBLYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ1dyaXRlcyA9IHQsIHRoaXMuZnJvbUNhY2hlID0gZVxuICAgICAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgU25hcHNob3RNZXRhZGF0YWAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlciBUaGUgYFNuYXBzaG90TWV0YWRhdGFgIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhpcyBgU25hcHNob3RNZXRhZGF0YWAgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi87XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNQZW5kaW5nV3JpdGVzID09PSB0Lmhhc1BlbmRpbmdXcml0ZXMgJiYgdGhpcy5mcm9tQ2FjaGUgPT09IHQuZnJvbUNhY2hlO1xuICAgIH0sIHQ7XG59KCksIFFhID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0LCBuKSB7XG4gICAgICAgIHZhciByID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChyID0gZS5jYWxsKHRoaXMsIG4pIHx8IHRoaXMpLlNfID0gdCwgcjtcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJyZWZcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB6YSh0aGlzLlNfLCB0aGlzLm9fLnJlZik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vXy5pZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLCBcIm1ldGFkYXRhXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9fLm1ldGFkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiZXhpc3RzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9fLmV4aXN0cygpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBuLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vXy5kYXRhKHQpO1xuICAgIH0sIG4ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub18uZ2V0KHQsIGUpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBQYSh0aGlzLm9fLCB0Lm9fKTtcbiAgICB9LCBuO1xufShkcyksIFdhID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGUgJiYgZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vXy5kYXRhKHQpO1xuICAgIH0sIG47XG59KFFhKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBCb3VuZCBmcm9tIGEgcXVlcnkgYW5kIGEgZG9jdW1lbnQuXG4gKlxuICogTm90ZSB0aGF0IHRoZSBCb3VuZCB3aWxsIGFsd2F5cyBpbmNsdWRlIHRoZSBrZXkgb2YgdGhlIGRvY3VtZW50XG4gKiBhbmQgc28gb25seSB0aGUgcHJvdmlkZWQgZG9jdW1lbnQgd2lsbCBjb21wYXJlIGVxdWFsIHRvIHRoZSByZXR1cm5lZFxuICogcG9zaXRpb24uXG4gKlxuICogV2lsbCB0aHJvdyBpZiB0aGUgZG9jdW1lbnQgZG9lcyBub3QgY29udGFpbiBhbGwgZmllbGRzIG9mIHRoZSBvcmRlciBieVxuICogb2YgdGhlIHF1ZXJ5IG9yIGlmIGFueSBvZiB0aGUgZmllbGRzIGluIHRoZSBvcmRlciBieSBhcmUgYW4gdW5jb21taXR0ZWRcbiAqIHNlcnZlciB0aW1lc3RhbXAuXG4gKi9cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiBkb2N1bWVudElkVmFsdWUgaW50byBhIFJlZmVyZW5jZVZhbHVlLCB0aHJvd2luZ1xuICogYXBwcm9wcmlhdGUgZXJyb3JzIGlmIHRoZSB2YWx1ZSBpcyBhbnl0aGluZyBvdGhlciB0aGFuIGEgRG9jdW1lbnRSZWZlcmVuY2VcbiAqIG9yIFN0cmluZywgb3IgaWYgdGhlIHN0cmluZyBpcyBtYWxmb3JtZWQuXG4gKi9cbmZ1bmN0aW9uIFlhKHQsIGUsIG4pIHtcbiAgICBpZiAobiBpbnN0YW5jZW9mIGRzICYmIChuID0gbi5vXyksIFwic3RyaW5nXCIgPT0gdHlwZW9mIG4pIHtcbiAgICAgICAgaWYgKFwiXCIgPT09IG4pIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIHdpdGggRmllbGRQYXRoLmRvY3VtZW50SWQoKSwgeW91IG11c3QgcHJvdmlkZSBhIHZhbGlkIGRvY3VtZW50IElELCBidXQgaXQgd2FzIGFuIGVtcHR5IHN0cmluZy5cIik7XG4gICAgICAgIGlmICghRG4oZSkgJiYgLTEgIT09IG4uaW5kZXhPZihcIi9cIikpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBXaGVuIHF1ZXJ5aW5nIGEgY29sbGVjdGlvbiBieSBGaWVsZFBhdGguZG9jdW1lbnRJZCgpLCB5b3UgbXVzdCBwcm92aWRlIGEgcGxhaW4gZG9jdW1lbnQgSUQsIGJ1dCAnXCIgKyBuICsgXCInIGNvbnRhaW5zIGEgJy8nIGNoYXJhY3Rlci5cIik7XG4gICAgICAgIHZhciByID0gZS5wYXRoLmNoaWxkKEsuayhuKSk7XG4gICAgICAgIGlmICghWS5HKHIpKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyBhIGNvbGxlY3Rpb24gZ3JvdXAgYnkgRmllbGRQYXRoLmRvY3VtZW50SWQoKSwgdGhlIHZhbHVlIHByb3ZpZGVkIG11c3QgcmVzdWx0IGluIGEgdmFsaWQgZG9jdW1lbnQgcGF0aCwgYnV0ICdcIiArIHIgKyBcIicgaXMgbm90IGJlY2F1c2UgaXQgaGFzIGFuIG9kZCBudW1iZXIgb2Ygc2VnbWVudHMgKFwiICsgci5sZW5ndGggKyBcIikuXCIpO1xuICAgICAgICByZXR1cm4gWHQodCwgbmV3IFkocikpO1xuICAgIH1cbiAgICBpZiAobiBpbnN0YW5jZW9mIGpzKSByZXR1cm4gWHQodCwgbi5DXyk7XG4gICAgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgd2l0aCBGaWVsZFBhdGguZG9jdW1lbnRJZCgpLCB5b3UgbXVzdCBwcm92aWRlIGEgdmFsaWQgc3RyaW5nIG9yIGEgRG9jdW1lbnRSZWZlcmVuY2UsIGJ1dCBpdCB3YXM6IFwiICsgbXMobikgKyBcIi5cIik7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbnRvIGEgZGlzanVuY3RpdmUgZmlsdGVyIHNhdGlzZmllcyBhbGxcbiAqIGFycmF5IHJlcXVpcmVtZW50cy5cbiAqLyBmdW5jdGlvbiBIYSh0LCBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHQpIHx8IDAgPT09IHQubGVuZ3RoKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBRdWVyeS4gQSBub24tZW1wdHkgYXJyYXkgaXMgcmVxdWlyZWQgZm9yICdcIiArIGUudG9TdHJpbmcoKSArIFwiJyBmaWx0ZXJzLlwiKTtcbiAgICBpZiAodC5sZW5ndGggPiAxMCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgUXVlcnkuICdcIiArIGUudG9TdHJpbmcoKSArIFwiJyBmaWx0ZXJzIHN1cHBvcnQgYSBtYXhpbXVtIG9mIDEwIGVsZW1lbnRzIGluIHRoZSB2YWx1ZSBhcnJheS5cIik7XG59XG5cbmZ1bmN0aW9uIEphKHQsIGUsIG4pIHtcbiAgICBpZiAoIW4uaXNFcXVhbChlKSkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFlvdSBoYXZlIGEgd2hlcmUgZmlsdGVyIHdpdGggYW4gaW5lcXVhbGl0eSAoPCwgPD0sID4sIG9yID49KSBvbiBmaWVsZCAnXCIgKyBlLnRvU3RyaW5nKCkgKyBcIicgYW5kIHNvIHlvdSBtdXN0IGFsc28gdXNlICdcIiArIGUudG9TdHJpbmcoKSArIFwiJyBhcyB5b3VyIGZpcnN0IG9yZGVyQnkoKSwgYnV0IHlvdXIgZmlyc3Qgb3JkZXJCeSgpIGlzIG9uIGZpZWxkICdcIiArIG4udG9TdHJpbmcoKSArIFwiJyBpbnN0ZWFkLlwiKTtcbn1cblxuZnVuY3Rpb24gWGEodCkge1xuICAgIGlmIChBbih0KSAmJiAwID09PSB0LnJuLmxlbmd0aCkgdGhyb3cgbmV3IGooRi5VTklNUExFTUVOVEVELCBcImxpbWl0VG9MYXN0KCkgcXVlcmllcyByZXF1aXJlIHNwZWNpZnlpbmcgYXQgbGVhc3Qgb25lIG9yZGVyQnkoKSBjbGF1c2VcIik7XG59XG5cbnZhciAkYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlLCBuKSB7XG4gICAgICAgIHRoaXMuTV8gPSB0LCB0aGlzLmZpcmVzdG9yZSA9IGUsIHRoaXMueF8gPSBuLCB0aGlzLkxmID0gR3MoZS5vXyksIHRoaXMuRF8gPSBuZXcgUnMoZSk7XG4gICAgfVxuICAgIHJldHVybiB0LnByb3RvdHlwZS53aGVyZSA9IGZ1bmN0aW9uKGUsIG4sIHIpIHtcbiAgICAgICAgdmFyIGkgPSBvYShcIlF1ZXJ5LndoZXJlXCIsIGUpLCBvID0gZnVuY3Rpb24odCwgZSwgbiwgciwgaSwgbywgdSkge1xuICAgICAgICAgICAgdmFyIHM7XG4gICAgICAgICAgICBpZiAoaS5CKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovID09PSBvIHx8IFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovID09PSBvKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBRdWVyeS4gWW91IGNhbid0IHBlcmZvcm0gJ1wiICsgbyArIFwiJyBxdWVyaWVzIG9uIEZpZWxkUGF0aC5kb2N1bWVudElkKCkuXCIpO1xuICAgICAgICAgICAgICAgIGlmIChcImluXCIgLyogSU4gKi8gPT09IG8gfHwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgSGEodSwgbyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSBbXSwgYyA9IDAsIGggPSB1OyBjIDwgaC5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBoW2NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5wdXNoKFlhKHIsIHQsIGYpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogYVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBzID0gWWEociwgdCwgdSk7XG4gICAgICAgICAgICB9IGVsc2UgXCJpblwiIC8qIElOICovICE9PSBvICYmIFwibm90LWluXCIgLyogTk9UX0lOICovICE9PSBvICYmIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovICE9PSBvIHx8IEhhKHUsIG8pLCBcbiAgICAgICAgICAgIHMgPSB0YShuLCBlLCB1LCBcbiAgICAgICAgICAgIC8qIGFsbG93QXJyYXlzPSAqLyBcImluXCIgLyogSU4gKi8gPT09IG8gfHwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gPT09IG8pO1xuICAgICAgICAgICAgdmFyIGwgPSBqbi5jcmVhdGUoaSwgbywgcyk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmNuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBrbih0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG4gJiYgIW4uaXNFcXVhbChlLmZpZWxkKSkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIEFsbCB3aGVyZSBmaWx0ZXJzIHdpdGggYW4gaW5lcXVhbGl0eSAoPCwgPD0sID4sIG9yID49KSBtdXN0IGJlIG9uIHRoZSBzYW1lIGZpZWxkLiBCdXQgeW91IGhhdmUgaW5lcXVhbGl0eSBmaWx0ZXJzIG9uICdcIiArIG4udG9TdHJpbmcoKSArIFwiJyBhbmQgJ1wiICsgZS5maWVsZC50b1N0cmluZygpICsgXCInXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IFNuKHQpO1xuICAgICAgICAgICAgICAgICAgICBudWxsICE9PSByICYmIEphKDAsIGUuZmllbGQsIHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSB0LmZpbHRlcnM7IG4gPCByLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHJbbl07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5pbmRleE9mKGkub3ApID49IDApIHJldHVybiBpLm9wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0odCwgXG4gICAgICAgICAgICAgICAgLyoqXG4gKiBHaXZlbiBhbiBvcGVyYXRvciwgcmV0dXJucyB0aGUgc2V0IG9mIG9wZXJhdG9ycyB0aGF0IGNhbm5vdCBiZSB1c2VkIHdpdGggaXQuXG4gKlxuICogT3BlcmF0b3JzIGluIGEgcXVlcnkgbXVzdCBhZGhlcmUgdG8gdGhlIGZvbGxvd2luZyBzZXQgb2YgcnVsZXM6XG4gKiAxLiBPbmx5IG9uZSBhcnJheSBvcGVyYXRvciBpcyBhbGxvd2VkLlxuICogMi4gT25seSBvbmUgZGlzanVuY3RpdmUgb3BlcmF0b3IgaXMgYWxsb3dlZC5cbiAqIDMuIE5PVF9FUVVBTCBjYW5ub3QgYmUgdXNlZCB3aXRoIGFub3RoZXIgTk9UX0VRVUFMIG9wZXJhdG9yLlxuICogNC4gTk9UX0lOIGNhbm5vdCBiZSB1c2VkIHdpdGggYXJyYXksIGRpc2p1bmN0aXZlLCBvciBOT1RfRVFVQUwgb3BlcmF0b3JzLlxuICpcbiAqIEFycmF5IG9wZXJhdG9yczogQVJSQVlfQ09OVEFJTlMsIEFSUkFZX0NPTlRBSU5TX0FOWVxuICogRGlzanVuY3RpdmUgb3BlcmF0b3JzOiBJTiwgQVJSQVlfQ09OVEFJTlNfQU5ZLCBOT1RfSU5cbiAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiE9XCIgLyogTk9UX0VRVUFMICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIFwiIT1cIiAvKiBOT1RfRVFVQUwgKi8gLCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJhcnJheS1jb250YWluc1wiIC8qIEFSUkFZX0NPTlRBSU5TICovICwgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gLCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluXCIgLyogSU4gKi8gOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJhcnJheS1jb250YWlucy1hbnlcIiAvKiBBUlJBWV9DT05UQUlOU19BTlkgKi8gLCBcImluXCIgLyogSU4gKi8gLCBcIm5vdC1pblwiIC8qIE5PVF9JTiAqLyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIEFSUkFZX0NPTlRBSU5TX0FOWSAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBcImFycmF5LWNvbnRhaW5zXCIgLyogQVJSQVlfQ09OVEFJTlMgKi8gLCBcImFycmF5LWNvbnRhaW5zLWFueVwiIC8qIEFSUkFZX0NPTlRBSU5TX0FOWSAqLyAsIFwiaW5cIiAvKiBJTiAqLyAsIFwibm90LWluXCIgLyogTk9UX0lOICovIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm90LWluXCIgLyogTk9UX0lOICovIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIFwiYXJyYXktY29udGFpbnNcIiAvKiBBUlJBWV9DT05UQUlOUyAqLyAsIFwiYXJyYXktY29udGFpbnMtYW55XCIgLyogQVJSQVlfQ09OVEFJTlNfQU5ZICovICwgXCJpblwiIC8qIElOICovICwgXCJub3QtaW5cIiAvKiBOT1RfSU4gKi8gLCBcIiE9XCIgLyogTk9UX0VRVUFMICovIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfShlLm9wKSk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGkpIFxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSB3aGVuIGl0J3MgYSBkdXBsaWNhdGUgb3AgdG8gZ2l2ZSBhIHNsaWdodGx5IGNsZWFyZXIgZXJyb3IgbWVzc2FnZS5cbiAgICAgICAgICAgICAgICB0aHJvdyBpID09PSBlLm9wID8gbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFlvdSBjYW5ub3QgdXNlIG1vcmUgdGhhbiBvbmUgJ1wiICsgZS5vcC50b1N0cmluZygpICsgXCInIGZpbHRlci5cIikgOiBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gWW91IGNhbm5vdCB1c2UgJ1wiICsgZS5vcC50b1N0cmluZygpICsgXCInIGZpbHRlcnMgd2l0aCAnXCIgKyBpLnRvU3RyaW5nKCkgKyBcIicgZmlsdGVycy5cIik7XG4gICAgICAgICAgICB9KHQsIGwpLCBsO1xuICAgICAgICB9KHRoaXMuTV8sIFwiUXVlcnkud2hlcmVcIiwgdGhpcy5MZiwgdGhpcy5maXJlc3RvcmUudl8sIGksIG4sIHIpO1xuICAgICAgICByZXR1cm4gbmV3IHQoZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgdmFyIG4gPSB0LmZpbHRlcnMuY29uY2F0KFsgZSBdKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRW4odC5wYXRoLCB0LmNvbGxlY3Rpb25Hcm91cCwgdC5ybi5zbGljZSgpLCBuLCB0LmxpbWl0LCB0LmxpbWl0VHlwZSwgdC5zdGFydEF0LCB0LmVuZEF0KTtcbiAgICAgICAgfSh0aGlzLk1fLCBvKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMueF8pO1xuICAgIH0sIHQucHJvdG90eXBlLm9yZGVyQnkgPSBmdW5jdGlvbihlLCBuKSB7XG4gICAgICAgIHZhciByO1xuICAgICAgICBpZiAodm9pZCAwID09PSBuIHx8IFwiYXNjXCIgPT09IG4pIHIgPSBcImFzY1wiIC8qIEFTQ0VORElORyAqLzsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoXCJkZXNjXCIgIT09IG4pIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJGdW5jdGlvbiBRdWVyeS5vcmRlckJ5KCkgaGFzIHVua25vd24gZGlyZWN0aW9uICdcIiArIG4gKyBcIicsIGV4cGVjdGVkICdhc2MnIG9yICdkZXNjJy5cIik7XG4gICAgICAgICAgICByID0gXCJkZXNjXCIgLyogREVTQ0VORElORyAqLztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaSA9IG9hKFwiUXVlcnkub3JkZXJCeVwiLCBlKSwgbyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSB0LnN0YXJ0QXQpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBZb3UgbXVzdCBub3QgY2FsbCBzdGFydEF0KCkgb3Igc3RhcnRBZnRlcigpIGJlZm9yZSBjYWxsaW5nIG9yZGVyQnkoKS5cIik7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gdC5lbmRBdCkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFlvdSBtdXN0IG5vdCBjYWxsIGVuZEF0KCkgb3IgZW5kQmVmb3JlKCkgYmVmb3JlIGNhbGxpbmcgb3JkZXJCeSgpLlwiKTtcbiAgICAgICAgICAgIHZhciByID0gbmV3IHRyKGUsIG4pO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gU24odCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3Qgb3JkZXIgYnkuIEl0IG11c3QgbWF0Y2ggYW55IGluZXF1YWxpdHkuXG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0ga24odCk7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IG4gJiYgSmEoMCwgbiwgZS5maWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSh0LCByKSwgcjtcbiAgICAgICAgfSh0aGlzLk1fLCBpLCByKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0KGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIC8vIFRPRE8oZGltb25kKTogdmFsaWRhdGUgdGhhdCBvcmRlckJ5IGRvZXMgbm90IGxpc3QgdGhlIHNhbWUga2V5IHR3aWNlLlxuICAgICAgICAgICAgdmFyIG4gPSB0LnJuLmNvbmNhdChbIGUgXSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVuKHQucGF0aCwgdC5jb2xsZWN0aW9uR3JvdXAsIG4sIHQuZmlsdGVycy5zbGljZSgpLCB0LmxpbWl0LCB0LmxpbWl0VHlwZSwgdC5zdGFydEF0LCB0LmVuZEF0KTtcbiAgICAgICAgfSh0aGlzLk1fLCBvKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMueF8pO1xuICAgIH0sIHQucHJvdG90eXBlLmxpbWl0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gYnMoXCJRdWVyeS5saW1pdFwiLCBlKSwgbmV3IHQoVm4odGhpcy5NXywgZSwgXCJGXCIgLyogRmlyc3QgKi8pLCB0aGlzLmZpcmVzdG9yZSwgdGhpcy54Xyk7XG4gICAgfSwgdC5wcm90b3R5cGUubGltaXRUb0xhc3QgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBicyhcIlF1ZXJ5LmxpbWl0VG9MYXN0XCIsIGUpLCBuZXcgdChWbih0aGlzLk1fLCBlLCBcIkxcIiAvKiBMYXN0ICovKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMueF8pO1xuICAgIH0sIHQucHJvdG90eXBlLnN0YXJ0QXQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSBbXSwgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIG5bciAtIDFdID0gYXJndW1lbnRzW3JdO1xuICAgICAgICB2YXIgaSA9IHRoaXMuQmYoXCJRdWVyeS5zdGFydEF0XCIsIGUsIG4sIFxuICAgICAgICAvKmJlZm9yZT0qLyAhMCk7XG4gICAgICAgIHJldHVybiBuZXcgdChDbih0aGlzLk1fLCBpKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMueF8pO1xuICAgIH0sIHQucHJvdG90eXBlLnN0YXJ0QWZ0ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGZvciAodmFyIG4gPSBbXSwgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIG5bciAtIDFdID0gYXJndW1lbnRzW3JdO1xuICAgICAgICB2YXIgaSA9IHRoaXMuQmYoXCJRdWVyeS5zdGFydEFmdGVyXCIsIGUsIG4sIFxuICAgICAgICAvKmJlZm9yZT0qLyAhMSk7XG4gICAgICAgIHJldHVybiBuZXcgdChDbih0aGlzLk1fLCBpKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMueF8pO1xuICAgIH0sIHQucHJvdG90eXBlLmVuZEJlZm9yZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IFtdLCByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgbltyIC0gMV0gPSBhcmd1bWVudHNbcl07XG4gICAgICAgIHZhciBpID0gdGhpcy5CZihcIlF1ZXJ5LmVuZEJlZm9yZVwiLCBlLCBuLCBcbiAgICAgICAgLypiZWZvcmU9Ki8gITApO1xuICAgICAgICByZXR1cm4gbmV3IHQoTG4odGhpcy5NXywgaSksIHRoaXMuZmlyZXN0b3JlLCB0aGlzLnhfKTtcbiAgICB9LCB0LnByb3RvdHlwZS5lbmRBdCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IFtdLCByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgbltyIC0gMV0gPSBhcmd1bWVudHNbcl07XG4gICAgICAgIHZhciBpID0gdGhpcy5CZihcIlF1ZXJ5LmVuZEF0XCIsIGUsIG4sIFxuICAgICAgICAvKmJlZm9yZT0qLyAhMSk7XG4gICAgICAgIHJldHVybiBuZXcgdChMbih0aGlzLk1fLCBpKSwgdGhpcy5maXJlc3RvcmUsIHRoaXMueF8pO1xuICAgIH0sIHQucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgdCAmJiB0aGlzLmZpcmVzdG9yZSA9PT0gZS5maXJlc3RvcmUgJiYgUm4odGhpcy5NXywgZS5NXykgJiYgdGhpcy54XyA9PT0gZS54XztcbiAgICB9LCB0LnByb3RvdHlwZS53aXRoQ29udmVydGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5NXywgdGhpcy5maXJlc3RvcmUsIGUpO1xuICAgIH0sIFxuICAgIC8qKiBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGEgYm91bmQgZnJvbSBhIGRvY3VtZW50IG9yIGZpZWxkcyAqLyB0LnByb3RvdHlwZS5CZiA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBRYSkgcmV0dXJuIGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgIGlmICghcikgdGhyb3cgbmV3IGooRi5OT1RfRk9VTkQsIFwiQ2FuJ3QgdXNlIGEgRG9jdW1lbnRTbmFwc2hvdCB0aGF0IGRvZXNuJ3QgZXhpc3QgZm9yIFwiICsgbiArIFwiKCkuXCIpO1xuICAgICAgICAgICAgLy8gQmVjYXVzZSBwZW9wbGUgZXhwZWN0IHRvIGNvbnRpbnVlL2VuZCBhIHF1ZXJ5IGF0IHRoZSBleGFjdCBkb2N1bWVudFxuICAgICAgICAgICAgLy8gcHJvdmlkZWQsIHdlIG5lZWQgdG8gdXNlIHRoZSBpbXBsaWNpdCBzb3J0IG9yZGVyIHJhdGhlciB0aGFuIHRoZSBleHBsaWNpdFxuICAgICAgICAgICAgLy8gc29ydCBvcmRlciwgYmVjYXVzZSBpdCdzIGd1YXJhbnRlZWQgdG8gY29udGFpbiB0aGUgZG9jdW1lbnQga2V5LiBUaGF0IHdheVxuICAgICAgICAgICAgLy8gdGhlIHBvc2l0aW9uIGJlY29tZXMgdW5hbWJpZ3VvdXMgYW5kIHRoZSBxdWVyeSBjb250aW51ZXMvZW5kcyBleGFjdGx5IGF0XG4gICAgICAgICAgICAvLyB0aGUgcHJvdmlkZWQgZG9jdW1lbnQuIFdpdGhvdXQgdGhlIGtleSAoYnkgdXNpbmcgdGhlIGV4cGxpY2l0IHNvcnRcbiAgICAgICAgICAgIC8vIG9yZGVycyksIG11bHRpcGxlIGRvY3VtZW50cyBjb3VsZCBtYXRjaCB0aGUgcG9zaXRpb24sIHlpZWxkaW5nIGR1cGxpY2F0ZVxuICAgICAgICAgICAgLy8gcmVzdWx0cy5cbiAgICAgICAgICAgIGZvciAodmFyIG8gPSBbXSwgdSA9IDAsIHMgPSBPbih0KTsgdSA8IHMubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHNbdV07XG4gICAgICAgICAgICAgICAgaWYgKGEuZmllbGQuQigpKSBvLnB1c2goWHQoZSwgci5rZXkpKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gci5maWVsZChhLmZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE10KGMpKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsICdJbnZhbGlkIHF1ZXJ5LiBZb3UgYXJlIHRyeWluZyB0byBzdGFydCBvciBlbmQgYSBxdWVyeSB1c2luZyBhIGRvY3VtZW50IGZvciB3aGljaCB0aGUgZmllbGQgXCInICsgYS5maWVsZCArICdcIiBpcyBhbiB1bmNvbW1pdHRlZCBzZXJ2ZXIgdGltZXN0YW1wLiAoU2luY2UgdGhlIHZhbHVlIG9mIHRoaXMgZmllbGQgaXMgdW5rbm93biwgeW91IGNhbm5vdCBzdGFydC9lbmQgYSBxdWVyeSB3aXRoIGl0LiknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gYS5maWVsZC5NKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gWW91IGFyZSB0cnlpbmcgdG8gc3RhcnQgb3IgZW5kIGEgcXVlcnkgdXNpbmcgYSBkb2N1bWVudCBmb3Igd2hpY2ggdGhlIGZpZWxkICdcIiArIGggKyBcIicgKHVzZWQgYXMgdGhlIG9yZGVyQnkpIGRvZXMgbm90IGV4aXN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvLnB1c2goYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKbihvLCBpKTtcbiAgICAgICAgfSh0aGlzLk1fLCB0aGlzLmZpcmVzdG9yZS52XywgdCwgZS5vXy5OXywgcik7XG4gICAgICAgIHZhciBpID0gWyBlIF0uY29uY2F0KG4pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSwgbiwgciwgaSwgbykge1xuICAgICAgICAgICAgLy8gVXNlIGV4cGxpY2l0IG9yZGVyIGJ5J3MgYmVjYXVzZSBpdCBoYXMgdG8gbWF0Y2ggdGhlIHF1ZXJ5IHRoZSB1c2VyIG1hZGVcbiAgICAgICAgICAgIHZhciB1ID0gdC5ybjtcbiAgICAgICAgICAgIGlmIChpLmxlbmd0aCA+IHUubGVuZ3RoKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkIHRvIFwiICsgciArIFwiKCkuIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3JkZXJCeSgpIGNsYXVzZXNcIik7XG4gICAgICAgICAgICBmb3IgKHZhciBzID0gW10sIGEgPSAwOyBhIDwgaS5sZW5ndGg7IGErKykge1xuICAgICAgICAgICAgICAgIHZhciBjID0gaVthXTtcbiAgICAgICAgICAgICAgICBpZiAodVthXS5maWVsZC5CKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGMpIHRocm93IG5ldyBqKEYuSU5WQUxJRF9BUkdVTUVOVCwgXCJJbnZhbGlkIHF1ZXJ5LiBFeHBlY3RlZCBhIHN0cmluZyBmb3IgZG9jdW1lbnQgSUQgaW4gXCIgKyByICsgXCIoKSwgYnV0IGdvdCBhIFwiICsgdHlwZW9mIGMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIURuKHQpICYmIC0xICE9PSBjLmluZGV4T2YoXCIvXCIpKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBxdWVyeS4gV2hlbiBxdWVyeWluZyBhIGNvbGxlY3Rpb24gYW5kIG9yZGVyaW5nIGJ5IEZpZWxkUGF0aC5kb2N1bWVudElkKCksIHRoZSB2YWx1ZSBwYXNzZWQgdG8gXCIgKyByICsgXCIoKSBtdXN0IGJlIGEgcGxhaW4gZG9jdW1lbnQgSUQsIGJ1dCAnXCIgKyBjICsgXCInIGNvbnRhaW5zIGEgc2xhc2guXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IHQucGF0aC5jaGlsZChLLmsoYykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIVkuRyhoKSkgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIkludmFsaWQgcXVlcnkuIFdoZW4gcXVlcnlpbmcgYSBjb2xsZWN0aW9uIGdyb3VwIGFuZCBvcmRlcmluZyBieSBGaWVsZFBhdGguZG9jdW1lbnRJZCgpLCB0aGUgdmFsdWUgcGFzc2VkIHRvIFwiICsgciArIFwiKCkgbXVzdCByZXN1bHQgaW4gYSB2YWxpZCBkb2N1bWVudCBwYXRoLCBidXQgJ1wiICsgaCArIFwiJyBpcyBub3QgYmVjYXVzZSBpdCBjb250YWlucyBhbiBvZGQgbnVtYmVyIG9mIHNlZ21lbnRzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBuZXcgWShoKTtcbiAgICAgICAgICAgICAgICAgICAgcy5wdXNoKFh0KGUsIGYpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRhKG4sIHIsIGMpO1xuICAgICAgICAgICAgICAgICAgICBzLnB1c2gobCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKbihzLCBvKTtcbiAgICAgICAgfSh0aGlzLk1fLCB0aGlzLmZpcmVzdG9yZS52XywgdGhpcy5MZiwgdCwgaSwgcik7XG4gICAgfSwgdC5wcm90b3R5cGUub25TbmFwc2hvdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciB0LCByLCBpLCBvID0gdGhpcywgdSA9IFtdLCBzID0gMDsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykgdVtzXSA9IGFyZ3VtZW50c1tzXTtcbiAgICAgICAgdmFyIGEgPSB7fSwgYyA9IDA7XG4gICAgICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiB1W2NdIHx8IFVyKHVbY10pIHx8IChhID0gdVtjXSwgYysrKSwgVXIodVtjXSkpIHtcbiAgICAgICAgICAgIHZhciBoID0gdVtjXTtcbiAgICAgICAgICAgIHVbY10gPSBudWxsID09PSAodCA9IGgubmV4dCkgfHwgdm9pZCAwID09PSB0ID8gdm9pZCAwIDogdC5iaW5kKGgpLCB1W2MgKyAxXSA9IG51bGwgPT09IChyID0gaC5lcnJvcikgfHwgdm9pZCAwID09PSByID8gdm9pZCAwIDogci5iaW5kKGgpLCBcbiAgICAgICAgICAgIHVbYyArIDJdID0gbnVsbCA9PT0gKGkgPSBoLmNvbXBsZXRlKSB8fCB2b2lkIDAgPT09IGkgPyB2b2lkIDAgOiBpLmJpbmQoaCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGYgPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdVtjXSAmJiB1W2NdKG5ldyB0YyhvLmZpcmVzdG9yZSwgbmV3IERhKG8uZmlyZXN0b3JlLm9fLCBvLkRfLCBuZXcgQnMoby5maXJlc3RvcmUub18sIG8ueF8sIG8uTV8pLCB0KSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiB1W2MgKyAxXSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiB1W2MgKyAyXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gWGEodGhpcy5NXyksIGZ1bmN0aW9uKHQsIHIsIGksIG8pIHtcbiAgICAgICAgICAgIHZhciB1ID0gdGhpcywgcyA9IG5ldyBwcyhvKSwgYSA9IG5ldyBBcihyLCBzLCBpKTtcbiAgICAgICAgICAgIHJldHVybiB0LnJzLmZzKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSh1LCB2b2lkIDAsIHZvaWQgMCwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBJciwgWyA0IC8qeWllbGQqLyAsIF9hKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIGUuYXBwbHkodm9pZCAwLCBbIG4uc2VudCgpLCBhIF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHMucl8oKSwgdC5ycy5mcygoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHUsIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gRXIsIFsgNCAvKnlpZWxkKi8gLCBfYSh0KSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIGUuYXBwbHkodm9pZCAwLCBbIG4uc2VudCgpLCBhIF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfShxYSh0aGlzLmZpcmVzdG9yZS5vXyksIHRoaXMuTV8sIGEsIGYpO1xuICAgIH0sIHQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICBYYSh0aGlzLk1fKTtcbiAgICAgICAgdmFyIGkgPSBxYSh0aGlzLmZpcmVzdG9yZS5vXyk7XG4gICAgICAgIHJldHVybiAodCAmJiBcImNhY2hlXCIgPT09IHQuc291cmNlID8gZnVuY3Rpb24odCwgcikge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLCBvID0gbmV3IHJyO1xuICAgICAgICAgICAgcmV0dXJuIHQucnMuZnMoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlKGksIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24odSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh1LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9IGZ1bmN0aW9uKHQsIHIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlLCBvLCB1LCBzLCBhLCBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4odGhpcywgKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4udHJ5cy5wdXNoKFsgMCwgMiwgLCAzIF0pLCBbIDQgLyp5aWVsZCovICwgbW8odCwgciwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHVzZVByZXZpb3VzUmVzdWx0cz0gKi8gITApIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBuLnNlbnQoKSwgbyA9IG5ldyBkdShyLCBlLlhhKSwgdSA9IG8uZ2goZS5kb2N1bWVudHMpLCBzID0gby5iaSh1LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdXBkYXRlTGltYm9Eb2N1bWVudHM9ICovICExKSwgaS5yZXNvbHZlKHMuc25hcHNob3QpLCBbIDMgLypicmVhayovICwgMyBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhID0gbi5zZW50KCksIGMgPSB3cihhLCBcIkZhaWxlZCB0byBleGVjdXRlIHF1ZXJ5ICdcIiArIHIgKyBcIiBhZ2FpbnN0IGNhY2hlXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5yZWplY3QoYyksIFsgMyAvKmJyZWFrKi8gLCAzIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgMiAvKnJldHVybiovIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgWyA0IC8qeWllbGQqLyAsIG1hKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIGkuYXBwbHkodm9pZCAwLCBbIHUuc2VudCgpLCByLCBvIF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIG8ucHJvbWlzZTtcbiAgICAgICAgfShpLCB0aGlzLk1fKSA6IGZ1bmN0aW9uKHQsIHIsIGkpIHtcbiAgICAgICAgICAgIHZhciBvID0gdGhpcztcbiAgICAgICAgICAgIHZvaWQgMCA9PT0gaSAmJiAoaSA9IHt9KTtcbiAgICAgICAgICAgIHZhciB1ID0gbmV3IHJyO1xuICAgICAgICAgICAgcmV0dXJuIHQucnMuZnMoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlKG8sIHZvaWQgMCwgdm9pZCAwLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0aGlzLCAoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChuLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBuZXcgcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBxdWVyeSBmaXJzdCBiZWZvcmUgcGFzc2luZyBldmVudCB0byB1c2VyIHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlciBhY3Rpb25zIGFmZmVjdGluZyB0aGUgbm93IHN0YWxlIHF1ZXJ5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZnMoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRXIodCwgdSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBuLmZyb21DYWNoZSAmJiBcInNlcnZlclwiID09PSByLnNvdXJjZSA/IGkucmVqZWN0KG5ldyBqKEYuVU5BVkFJTEFCTEUsICdGYWlsZWQgdG8gZ2V0IGRvY3VtZW50cyBmcm9tIHNlcnZlci4gKEhvd2V2ZXIsIHRoZXNlIGRvY3VtZW50cyBtYXkgZXhpc3QgaW4gdGhlIGxvY2FsIGNhY2hlLiBSdW4gYWdhaW4gd2l0aG91dCBzZXR0aW5nIHNvdXJjZSB0byBcInNlcnZlclwiIHRvIHJldHJpZXZlIHRoZSBjYWNoZWQgZG9jdW1lbnRzLiknKSkgOiBpLnJlc29sdmUobik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5yZWplY3QodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB1ID0gbmV3IEFyKG4sIG8sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVNZXRhZGF0YUNoYW5nZXM6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSHM6ICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSXIodCwgdSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgWyA0IC8qeWllbGQqLyAsIF9hKHQpIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIDIgLypyZXR1cm4qLyAsIGUuYXBwbHkodm9pZCAwLCBbIG4uc2VudCgpLCB0LnJzLCByLCBpLCB1IF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSksIHUucHJvbWlzZTtcbiAgICAgICAgfShpLCB0aGlzLk1fLCB0KSkudGhlbigoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0YyhyLmZpcmVzdG9yZSwgbmV3IERhKHIuZmlyZXN0b3JlLm9fLCByLkRfLCBuZXcgQnMoci5maXJlc3RvcmUub18sIHIueF8sIHIuTV8pLCB0KSk7XG4gICAgICAgIH0pKTtcbiAgICB9LCB0O1xufSgpLCBaYSA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzLCBuKSB8fCB0aGlzKS5TXyA9IHQsIHI7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwidHlwZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vXy50eXBlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiZG9jXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV2EodGhpcy5TXywgdGhpcy5vXy5kb2MpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwib2xkSW5kZXhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub18ub2xkSW5kZXg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJuZXdJbmRleFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vXy5vbGRJbmRleDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgbjtcbn0oZHMpLCB0YyA9IC8qKiBAY2xhc3MgKi8gZnVuY3Rpb24oZSkge1xuICAgIGZ1bmN0aW9uIG4odCwgbikge1xuICAgICAgICB2YXIgciA9IHRoaXM7XG4gICAgICAgIHJldHVybiAociA9IGUuY2FsbCh0aGlzLCBuKSB8fCB0aGlzKS5TXyA9IHQsIHI7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwicXVlcnlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAkYSh0aGlzLm9fLnF1ZXJ5Lk1fLCB0aGlzLlNfLCB0aGlzLm9fLnF1ZXJ5LnhfKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLCBcIm1ldGFkYXRhXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9fLm1ldGFkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vXy5zaXplO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiZW1wdHlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub18uZW1wdHk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJkb2NzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9fLmRvY3MubWFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXYSh0LlNfLCBlKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KSwgbi5wcm90b3R5cGUuZG9jQ2hhbmdlcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5vXy5kb2NDaGFuZ2VzKHQpLm1hcCgoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBaYShlLlNfLCB0KTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG4ucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgdGhpcy5vXy5mb3JFYWNoKChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICB0LmNhbGwoZSwgbmV3IFdhKG4uU18sIHIpKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBQYSh0aGlzLm9fLCB0Lm9fKTtcbiAgICB9LCBuO1xufShkcyksIGVjID0gLyoqIEBjbGFzcyAqLyBmdW5jdGlvbihlKSB7XG4gICAgZnVuY3Rpb24gbih0LCBuLCByKSB7XG4gICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgaWYgKChpID0gZS5jYWxsKHRoaXMsIE5uKHQpLCBuLCByKSB8fCB0aGlzKS5PXyA9IHQsIHQubGVuZ3RoICUgMiAhPSAxKSB0aHJvdyBuZXcgaihGLklOVkFMSURfQVJHVU1FTlQsIFwiSW52YWxpZCBjb2xsZWN0aW9uIHJlZmVyZW5jZS4gQ29sbGVjdGlvbiByZWZlcmVuY2VzIG11c3QgaGF2ZSBhbiBvZGQgbnVtYmVyIG9mIHNlZ21lbnRzLCBidXQgXCIgKyB0Lk0oKSArIFwiIGhhcyBcIiArIHQubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5wcm90b3R5cGUsIFwiaWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTV8ucGF0aC5DKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJwYXJlbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLk1fLnBhdGguUygpO1xuICAgICAgICAgICAgcmV0dXJuIHQuVCgpID8gbnVsbCA6IHphLnhmKHQsIHRoaXMuZmlyZXN0b3JlLCBcbiAgICAgICAgICAgIC8qIGNvbnZlcnRlcj0gKi8gbnVsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk1fLnBhdGguTSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH0pLCBuLnByb3RvdHlwZS5kb2MgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIC8vIFdlIGFsbG93IG9taXNzaW9uIG9mICdwYXRoU3RyaW5nJyBidXQgZXhwbGljaXRseSBwcm9oaWJpdCBwYXNzaW5nIGluIGJvdGhcbiAgICAgICAgLy8gJ3VuZGVmaW5lZCcgYW5kICdudWxsJy5cbiAgICAgICAgMCA9PT0gYXJndW1lbnRzLmxlbmd0aCAmJiAodCA9IFAudSgpKSwgdnMoXCJDb2xsZWN0aW9uUmVmZXJlbmNlLmRvY1wiLCBcInBhdGhcIiwgdCk7XG4gICAgICAgIHZhciBlID0gSy5rKHQpO1xuICAgICAgICByZXR1cm4gemEueGYodGhpcy5NXy5wYXRoLmNoaWxkKGUpLCB0aGlzLmZpcmVzdG9yZSwgdGhpcy54Xyk7XG4gICAgfSwgbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMueF8gPyB0aGlzLnhfLnRvRmlyZXN0b3JlKHQpIDogdCwgbiA9IHRoaXMuZG9jKCk7XG4gICAgICAgIC8vIENhbGwgc2V0KCkgd2l0aCB0aGUgY29udmVydGVkIHZhbHVlIGRpcmVjdGx5IHRvIGF2b2lkIGNhbGxpbmcgdG9GaXJlc3RvcmUoKSBhIHNlY29uZCB0aW1lLlxuICAgICAgICAgICAgICAgIHJldHVybiB6YS5iXyhuLm9fLkNfLCB0aGlzLmZpcmVzdG9yZSwgbnVsbCkuc2V0KGUpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0pKTtcbiAgICB9LCBuLnByb3RvdHlwZS53aXRoQ29udmVydGVyID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IG4odGhpcy5PXywgdGhpcy5maXJlc3RvcmUsIHQpO1xuICAgIH0sIG47XG59KCRhKTtcblxuZnVuY3Rpb24gbmModCwgZSwgbikge1xuICAgIHZhciByID0gd3MoZSwganMpO1xuICAgIGlmIChyLmZpcmVzdG9yZSAhPT0gbi5vXykgdGhyb3cgbmV3IGooRi5JTlZBTElEX0FSR1VNRU5ULCBcIlByb3ZpZGVkIGRvY3VtZW50IHJlZmVyZW5jZSBpcyBmcm9tIGEgZGlmZmVyZW50IEZpcmVzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogQ29udmVydHMgY3VzdG9tIG1vZGVsIG9iamVjdCBvZiB0eXBlIFQgaW50byBEb2N1bWVudERhdGEgYnkgYXBwbHlpbmcgdGhlXG4gKiBjb252ZXJ0ZXIgaWYgaXQgZXhpc3RzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIGNvbnZlcnRpbmcgdXNlciBvYmplY3RzIHRvIERvY3VtZW50RGF0YVxuICogYmVjYXVzZSB3ZSB3YW50IHRvIHByb3ZpZGUgdGhlIHVzZXIgd2l0aCBhIG1vcmUgc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSBpZlxuICogdGhlaXIgc2V0KCkgb3IgZmFpbHMgZHVlIHRvIGludmFsaWQgZGF0YSBvcmlnaW5hdGluZyBmcm9tIGEgdG9GaXJlc3RvcmUoKVxuICogY2FsbC5cbiAqLyBmdW5jdGlvbiByYyh0LCBlLCBuKSB7XG4gICAgLy8gQ2FzdCB0byBgYW55YCBpbiBvcmRlciB0byBzYXRpc2Z5IHRoZSB1bmlvbiB0eXBlIGNvbnN0cmFpbnQgb25cbiAgICAvLyB0b0ZpcmVzdG9yZSgpLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcmV0dXJuIHQgPyBuICYmIChuLm1lcmdlIHx8IG4ubWVyZ2VGaWVsZHMpID8gdC50b0ZpcmVzdG9yZShlLCBuKSA6IHQudG9GaXJlc3RvcmUoZSkgOiBlO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gVGhlIG9iamVjdHMgdGhhdCBhcmUgYSBwYXJ0IG9mIHRoaXMgQVBJIGFyZSBleHBvc2VkIHRvIHRoaXJkLXBhcnRpZXMgYXNcbi8vIGNvbXBpbGVkIGphdmFzY3JpcHQgc28gd2Ugd2FudCB0byBmbGFnIG91ciBwcml2YXRlIG1lbWJlcnMgd2l0aCBhIGxlYWRpbmdcbi8vIHVuZGVyc2NvcmUgdG8gZGlzY291cmFnZSB0aGVpciB1c2UuXG4vKipcbiAqIEEgYEZpZWxkUGF0aGAgcmVmZXJzIHRvIGEgZmllbGQgaW4gYSBkb2N1bWVudC4gVGhlIHBhdGggbWF5IGNvbnNpc3Qgb2YgYVxuICogc2luZ2xlIGZpZWxkIG5hbWUgKHJlZmVycmluZyB0byBhIHRvcC1sZXZlbCBmaWVsZCBpbiB0aGUgZG9jdW1lbnQpLCBvciBhIGxpc3RcbiAqIG9mIGZpZWxkIG5hbWVzIChyZWZlcnJpbmcgdG8gYSBuZXN0ZWQgZmllbGQgaW4gdGhlIGRvY3VtZW50KS5cbiAqLyB2YXIgaWMgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgRmllbGRQYXRoIGZyb20gdGhlIHByb3ZpZGVkIGZpZWxkIG5hbWVzLiBJZiBtb3JlIHRoYW4gb25lIGZpZWxkXG4gICAgICogbmFtZSBpcyBwcm92aWRlZCwgdGhlIHBhdGggd2lsbCBwb2ludCB0byBhIG5lc3RlZCBmaWVsZCBpbiBhIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpZWxkTmFtZXMgQSBsaXN0IG9mIGZpZWxkIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIGZvciAodmFyIHQgPSBbXSwgbiA9IDA7IG4gPCBhcmd1bWVudHMubGVuZ3RoOyBuKyspIHRbbl0gPSBhcmd1bWVudHNbbl07XG4gICAgICAgIHJldHVybiBlLmNhbGwodGhpcywgbmV3IChGcy5iaW5kLmFwcGx5KEZzLCByKFsgdm9pZCAwIF0sIHQpKSkpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0KG4sIGUpLCBuLmRvY3VtZW50SWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludGVybmFsIE5vdGU6IFRoZSBiYWNrZW5kIGRvZXNuJ3QgdGVjaG5pY2FsbHkgc3VwcG9ydCBxdWVyeWluZyBieVxuICAgICAgICAgKiBkb2N1bWVudCBJRC4gSW5zdGVhZCBpdCBxdWVyaWVzIGJ5IHRoZSBlbnRpcmUgZG9jdW1lbnQgbmFtZSAoZnVsbCBwYXRoXG4gICAgICAgICAqIGluY2x1ZGVkKSwgYnV0IGluIHRoZSBjYXNlcyB3ZSBjdXJyZW50bHkgc3VwcG9ydCBkb2N1bWVudElkKCksIHRoZSBuZXRcbiAgICAgICAgICogZWZmZWN0IGlzIHRoZSBzYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIG5ldyBuKFcucSgpLk0oKSk7XG4gICAgfSwgbi5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBkcyAmJiAodCA9IHQub18pLCB0IGluc3RhbmNlb2YgRnMgJiYgdGhpcy5vXy5GXy5pc0VxdWFsKHQuRl8pO1xuICAgIH0sIG47XG59KGRzKSwgb2MgPSAvKiogQGNsYXNzICovIGZ1bmN0aW9uKGUpIHtcbiAgICBmdW5jdGlvbiBuKCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHQobiwgZSksIG4uc2VydmVyVGltZXN0YW1wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gbmV3IFRzKFwic2VydmVyVGltZXN0YW1wXCIpO1xuICAgICAgICByZXR1cm4gdC5hXyA9IFwiRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXBcIiwgbmV3IG4odCk7XG4gICAgfSwgbi5kZWxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBuZXcgSXMoXCJkZWxldGVGaWVsZFwiKTtcbiAgICAgICAgcmV0dXJuIHQuYV8gPSBcIkZpZWxkVmFsdWUuZGVsZXRlXCIsIG5ldyBuKHQpO1xuICAgIH0sIG4uYXJyYXlVbmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciB0ID0gW10sIGUgPSAwOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB0W2VdID0gYXJndW1lbnRzW2VdO1xuICAgICAgICB2YXIgciA9IFxuICAgICAgICAvKipcbiAqIFJldHVybnMgYSBzcGVjaWFsIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgc2V0RG9jKCl9IG9yIHtAbGlua1xuICogdXBkYXRlRG9jKCl9IHRoYXQgdGVsbHMgdGhlIHNlcnZlciB0byB1bmlvbiB0aGUgZ2l2ZW4gZWxlbWVudHMgd2l0aCBhbnkgYXJyYXlcbiAqIHZhbHVlIHRoYXQgYWxyZWFkeSBleGlzdHMgb24gdGhlIHNlcnZlci4gRWFjaCBzcGVjaWZpZWQgZWxlbWVudCB0aGF0IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QgaW4gdGhlIGFycmF5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZC4gSWYgdGhlIGZpZWxkIGJlaW5nXG4gKiBtb2RpZmllZCBpcyBub3QgYWxyZWFkeSBhbiBhcnJheSBpdCB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggYW4gYXJyYXlcbiAqIGNvbnRhaW5pbmcgZXhhY3RseSB0aGUgc3BlY2lmaWVkIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50cyBUaGUgZWxlbWVudHMgdG8gdW5pb24gaW50byB0aGUgYXJyYXkuXG4gKiBAcmV0dXJuIFRoZSBgRmllbGRWYWx1ZWAgc2VudGluZWwgZm9yIHVzZSBpbiBhIGNhbGwgdG8gYHNldERvYygpYCBvclxuICogYHVwZGF0ZURvYygpYC5cbiAqL1xuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSBbXSwgZSA9IDA7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHRbZV0gPSBhcmd1bWVudHNbZV07XG4gICAgICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCBhY3R1YWxseSBwYXJzZSB0aGUgZGF0YSB1bnRpbCBpdCdzIHVzZWQgaW4gc2V0KCkgb3JcbiAgICAgICAgICAgIC8vIHVwZGF0ZSgpIHNpbmNlIHdlJ2QgbmVlZCB0aGUgRmlyZXN0b3JlIGluc3RhbmNlIHRvIGRvIHRoaXMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5zKFwiYXJyYXlVbmlvblwiLCB0KTtcbiAgICAgICAgfS5hcHBseSh2b2lkIDAsIHQpO1xuICAgICAgICByZXR1cm4gci5hXyA9IFwiRmllbGRWYWx1ZS5hcnJheVVuaW9uXCIsIG5ldyBuKHIpO1xuICAgIH0sIG4uYXJyYXlSZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgdCA9IFtdLCBlID0gMDsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgdFtlXSA9IGFyZ3VtZW50c1tlXTtcbiAgICAgICAgdmFyIHIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSBbXSwgZSA9IDA7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHRbZV0gPSBhcmd1bWVudHNbZV07XG4gICAgICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCBhY3R1YWxseSBwYXJzZSB0aGUgZGF0YSB1bnRpbCBpdCdzIHVzZWQgaW4gc2V0KCkgb3JcbiAgICAgICAgICAgIC8vIHVwZGF0ZSgpIHNpbmNlIHdlJ2QgbmVlZCB0aGUgRmlyZXN0b3JlIGluc3RhbmNlIHRvIGRvIHRoaXMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHhzKFwiYXJyYXlSZW1vdmVcIiwgdCk7XG4gICAgICAgIH0uYXBwbHkodm9pZCAwLCB0KTtcbiAgICAgICAgcmV0dXJuIHIuYV8gPSBcIkZpZWxkVmFsdWUuYXJyYXlSZW1vdmVcIiwgbmV3IG4ocik7XG4gICAgfSwgbi5pbmNyZW1lbnQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcyhcImluY3JlbWVudFwiLCB0KTtcbiAgICAgICAgfSh0KTtcbiAgICAgICAgcmV0dXJuIGUuYV8gPSBcIkZpZWxkVmFsdWUuaW5jcmVtZW50XCIsIG5ldyBuKGUpO1xuICAgIH0sIG4ucHJvdG90eXBlLmlzRXF1YWwgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9fLmlzRXF1YWwodC5vXyk7XG4gICAgfSwgbjtcbn0oZHMpLCB1YyA9IHtcbiAgICBGaXJlc3RvcmU6IFVhLFxuICAgIEdlb1BvaW50OiBTcyxcbiAgICBUaW1lc3RhbXA6IEIsXG4gICAgQmxvYjogQ3MsXG4gICAgVHJhbnNhY3Rpb246IGphLFxuICAgIFdyaXRlQmF0Y2g6IEJhLFxuICAgIERvY3VtZW50UmVmZXJlbmNlOiB6YSxcbiAgICBEb2N1bWVudFNuYXBzaG90OiBRYSxcbiAgICBRdWVyeTogJGEsXG4gICAgUXVlcnlEb2N1bWVudFNuYXBzaG90OiBXYSxcbiAgICBRdWVyeVNuYXBzaG90OiB0YyxcbiAgICBDb2xsZWN0aW9uUmVmZXJlbmNlOiBlYyxcbiAgICBGaWVsZFBhdGg6IGljLFxuICAgIEZpZWxkVmFsdWU6IG9jLFxuICAgIHNldExvZ0xldmVsOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBlID0gdCwgSS5zZXRMb2dMZXZlbChlKTtcbiAgICB9LFxuICAgIENBQ0hFX1NJWkVfVU5MSU1JVEVEOiAtMVxufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ29uZmlndXJlcyBGaXJlc3RvcmUgYXMgcGFydCBvZiB0aGUgRmlyZWJhc2UgU0RLIGJ5IGNhbGxpbmcgcmVnaXN0ZXJTZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSBmaXJlYmFzZSBUaGUgRmlyZWJhc2VOYW1lc3BhY2UgdG8gcmVnaXN0ZXIgRmlyZXN0b3JlIHdpdGhcbiAqIEBwYXJhbSBmaXJlc3RvcmVGYWN0b3J5IEEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBuZXcgRmlyZXN0b3JlXG4gKiAgICBpbnN0YW5jZS5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmVnaXN0ZXJzIHRoZSBtYWluIEZpcmVzdG9yZSBidWlsZCB3aXRoIHRoZSBjb21wb25lbnRzIGZyYW1ld29yay5cbiAqIFBlcnNpc3RlbmNlIGNhbiBiZSBlbmFibGVkIHZpYSBgZmlyZWJhc2UuZmlyZXN0b3JlKCkuZW5hYmxlUGVyc2lzdGVuY2UoKWAuXG4gKi9cbmZ1bmN0aW9uIHNjKHQpIHtcbiAgICAhZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0LklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KG5ldyB3KFwiZmlyZXN0b3JlXCIsIChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWEodCwgbmV3IE5hKHQsIGUpLCBuZXcgTWEpO1xuICAgICAgICAgICAgfSh0LmdldFByb3ZpZGVyKFwiYXBwXCIpLmdldEltbWVkaWF0ZSgpLCB0LmdldFByb3ZpZGVyKFwiYXV0aC1pbnRlcm5hbFwiKSk7XG4gICAgICAgIH0pLCBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqLykuc2V0U2VydmljZVByb3BzKE9iamVjdC5hc3NpZ24oe30sIHVjKSkpO1xuICAgIH0odCksIHQucmVnaXN0ZXJWZXJzaW9uKFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiLCBcIjIuMC4yXCIpO1xufVxuXG5zYyhpKTtcblxuZXhwb3J0IHsgc2MgYXMgX19QUklWQVRFX3JlZ2lzdGVyRmlyZXN0b3JlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCIvLyBGaXJlYmFzZSBBcHAgKHRoZSBjb3JlIEZpcmViYXNlIFNESykgaXMgYWx3YXlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGxpc3RlZCBmaXJzdFxuaW1wb3J0IGZpcmViYXNlIGZyb20gXCJmaXJlYmFzZS9hcHBcIjtcblxuLy8gSWYgeW91IGVuYWJsZWQgQW5hbHl0aWNzIGluIHlvdXIgcHJvamVjdCwgYWRkIHRoZSBGaXJlYmFzZSBTREsgZm9yIEFuYWx5dGljc1xuaW1wb3J0IFwiZmlyZWJhc2UvYW5hbHl0aWNzXCI7XG5cbi8vIEFkZCB0aGUgRmlyZWJhc2UgcHJvZHVjdHMgdGhhdCB5b3Ugd2FudCB0byB1c2VcbmltcG9ydCBcImZpcmViYXNlL2F1dGhcIjtcbmltcG9ydCBcImZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuXG4vLyBGb3IgRmlyZWJhc2UgSlMgU0RLIHY3LjIwLjAgYW5kIGxhdGVyLCBtZWFzdXJlbWVudElkIGlzIG9wdGlvbmFsXG5jb25zdCBmaXJlYmFzZUNvbmZpZyA9IHtcbiAgYXBpS2V5OiBcIkFJemFTeUFiQkxGV01maldGcUF6bVJVOEo1aDdESEgwYkRlc1l6VVwiLFxuICBhdXRoRG9tYWluOiBcImNoaWNhZ28tc2Vuc2UuZmlyZWJhc2VhcHAuY29tXCIsXG4gIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vY2hpY2Fnby1zZW5zZS5maXJlYmFzZWlvLmNvbVwiLFxuICBwcm9qZWN0SWQ6IFwiY2hpY2Fnby1zZW5zZVwiLFxuICBzdG9yYWdlQnVja2V0OiBcImNoaWNhZ28tc2Vuc2UuYXBwc3BvdC5jb21cIixcbiAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiNDQ4Njk1NzA5NTI3XCIsXG4gIGFwcElkOiBcIjE6NDQ4Njk1NzA5NTI3OndlYjowMzE3ZDVjZTQxNTY1OTM3MzExODEyXCIsXG4gIG1lYXN1cmVtZW50SWQ6IFwiRy1WUlBWUzBQSE1WXCIsXG59O1xuXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXG52YXIgZiA9IGZpcmViYXNlLmluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xudmFyIGRiID0gZmlyZWJhc2UuZmlyZXN0b3JlKCk7XG5cbmV4cG9ydCB7IGYsIGRiLCBmaXJlYmFzZSB9O1xuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8qIEZpcmViYXNlICovXG5pbXBvcnQgeyBmIGFzIGZpcmViYXNlLCBkYiwgZmlyZWJhc2UgYXMgZiB9IGZyb20gXCIuL2ZpcmViYXNlXCI7XG5cbi8qIENTUyAqL1xuaW1wb3J0IFwiLi9jc3MvcmVzZXQuY3NzXCI7XG5pbXBvcnQgXCIuL2Nzcy9pbmRleC5jc3NcIjtcblxuZnVuY3Rpb24gc2lnbkluKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtcbiAgY29uc3QgZW1haWwgPSBpbnB1dFswXS52YWx1ZTtcbiAgY29uc3QgcGFzc3dvcmQgPSBpbnB1dFsxXS52YWx1ZTtcbiAgY29uc3QgY2hlY2tlZCA9IGlucHV0WzJdLmNoZWNrZWQ7XG4gIGNvbnNvbGUubG9nKGZpcmViYXNlLmF1dGgpO1xuXG4gIGlmICghY2hlY2tlZCkge1xuICAgIGZpcmViYXNlXG4gICAgICAuYXV0aCgpXG4gICAgICAuc2V0UGVyc2lzdGVuY2UoZi5hdXRoLkF1dGguUGVyc2lzdGVuY2UuU0VTU0lPTilcbiAgICAgIC50aGVuKCgpID0+IGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbCwgcGFzc3dvcmQpKVxuICAgICAgLnRoZW4oKHVzZXIpID0+IHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gXCIuL2hvbWUuaHRtbFwiO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGFsZXJ0KGVycm9yLm1lc3NhZ2UpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXJlYmFzZVxuICAgIC5hdXRoKClcbiAgICAuc2V0UGVyc2lzdGVuY2UoZi5hdXRoLkF1dGguUGVyc2lzdGVuY2UuTE9DQUwpXG4gICAgLnRoZW4oKCkgPT4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGVtYWlsLCBwYXNzd29yZCkpXG4gICAgLnRoZW4oKHVzZXIpID0+IHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IFwiLi9ob21lLmh0bWxcIjtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IGFsZXJ0KGVycm9yLm1lc3NhZ2UpKTtcbn1cblxuY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmb3JtXCIpO1xuZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHNpZ25Jbik7XG4iXSwic291cmNlUm9vdCI6IiJ9