/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t={340:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var r=n(15),i=n.n(r),o=n(645),s=n.n(o),a=n(667),u=n.n(a),c=n(297),h=s()(i()),f=u()(c);h.push([t.id,".header {\n  height: 100vh; /* out of 100 */\n  background-image: linear-gradient(\n      to right,\n      rgba(67, 48, 133, 0.8),\n      rgba(58, 65, 62, 0.692)\n    ),\n    url("+f+');\n  background-size: cover; /* try to fit width of viewport or element */\n  background-position: top; /* top of img stays atop container */\n  position: relative;\n}\n\n.text-box {\n  position: absolute;\n  top: 50%; /* from parent element */\n  left: 50%; /* from parent element */\n  transform: translate(-50%, -50%); /* from itself (top-left corner entry) */\n  text-align: center;\n}\n\n.heading-primary {\n  color: #fff;\n  text-transform: uppercase;\n\n  backface-visibility: hidden; /* fixes shaking in animation */\n  margin-bottom: 30px;\n}\n\n.heading-primary-main {\n  display: block;\n  font-size: 50px;\n  font-weight: 800;\n  letter-spacing: 20px;\n  line-height: 1.3;\n\n  animation-name: moveInLeft;\n  animation-duration: 2s;\n  animation-timing-function: ease-out;\n}\n\n.heading-primary-sub {\n  display: block;\n  font-size: 15px;\n  font-weight: 700;\n  letter-spacing: 7.4px;\n  line-height: 1.3;\n\n  animation: moveInRight 2s ease-out;\n}\n\n/* it\'s best to only animate two properties (opacity, transform) */\n@keyframes moveInLeft {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      -100px\n    ); /* (x, y) -> neg goes left/down, pos goes right/up */\n  }\n\n  80% {\n    transform: translateX(10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\n@keyframes moveInRight {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      100px\n    ); /* (x, y) -> neg goes left/up, pos goes right/down */\n  }\n\n  80% {\n    transform: translateX(-10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\nform {\n  margin: 0 auto;\n  background-color: white;\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  overflow: hidden;\n  width: 240px;\n}\n\nfieldset {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\ninput {\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  margin: 0;\n}\n\n.account-info {\n  padding: 20px 20px 0 20px;\n}\n\n.account-info label {\n  color: #395870;\n  display: block;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.account-info input {\n  background: #fff;\n  border: 1px solid #c6c7cc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  color: #636466;\n  padding: 6px;\n  margin-top: 6px;\n  width: 100%;\n}\n\n.account-action {\n  background: #f0f0f2;\n  border-top: 1px solid #c6c7cc;\n  padding: 3px 20px 10px 20px;\n}\n\n.account-action .btn {\n  background: linear-gradient(#49708f, #293f50);\n  border: 0;\n  color: #fff;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 8px 16px;\n}\n\n.account-support {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-content: center;\n  margin-bottom: 10px;\n  font-size: 10px;\n}\n\n.account-support label {\n  color: #7c7c80;\n}\n\n.account-support input {\n  position: relative;\n  top: 3px;\n}\n\n.account-support a {\n  position: relative;\n  top: 2px;\n}\n\n.account-action .btn:link,\n.account-action .btn:visited {\n  transition: all 0.2s; /* initial state */\n  position: relative;\n  outline: none;\n}\n\n.account-action .btn:hover {\n  transform: translateY(-3px); /* goes up 3px */\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-action .btn:focus {\n  outline: none;\n}\n\n.account-action .btn:active {\n  outline: none;\n  transform: translateY(-1px); /* goes up 1 px */\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-register {\n  display: block;\n  margin-top: 10px;\n  color: white;\n}\n',"",{version:3,sources:["webpack://./src/css/index.css"],names:[],mappings:"AAAA;EACE,aAAa,EAAE,eAAe;EAC9B;;;;;2CAK8B;EAC9B,sBAAsB,EAAE,4CAA4C;EACpE,wBAAwB,EAAE,oCAAoC;EAC9D,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,QAAQ,EAAE,wBAAwB;EAClC,SAAS,EAAE,wBAAwB;EACnC,gCAAgC,EAAE,wCAAwC;EAC1E,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,yBAAyB;;EAEzB,2BAA2B,EAAE,+BAA+B;EAC5D,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,eAAe;EACf,gBAAgB;EAChB,oBAAoB;EACpB,gBAAgB;;EAEhB,0BAA0B;EAC1B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE,cAAc;EACd,eAAe;EACf,gBAAgB;EAChB,qBAAqB;EACrB,gBAAgB;;EAEhB,kCAAkC;AACpC;;AAEA,kEAAkE;AAClE;EACE;IACE,UAAU;IACV;;KAEC,EAAE,oDAAoD;EACzD;;EAEA;IACE,2BAA2B;EAC7B;;EAEA;IACE,UAAU;IACV,uBAAuB;EACzB;AACF;;AAEA;EACE;IACE,UAAU;IACV;;KAEC,EAAE,oDAAoD;EACzD;;EAEA;IACE,4BAA4B;EAC9B;;EAEA;IACE,UAAU;IACV,uBAAuB;EACzB;AACF;;AAEA;EACE,cAAc;EACd,uBAAuB;EACvB,kBAAkB;EAClB,6DAA6D;EAC7D,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,SAAS;EACT,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,6DAA6D;EAC7D,SAAS;AACX;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,cAAc;EACd,cAAc;EACd,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,8CAA8C;EAC9C,cAAc;EACd,YAAY;EACZ,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,6BAA6B;EAC7B,2BAA2B;AAC7B;;AAEA;EACE,6CAA6C;EAC7C,SAAS;EACT,WAAW;EACX,eAAe;EACf,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,qBAAqB;EACrB,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;AACV;;AAEA;EACE,kBAAkB;EAClB,QAAQ;AACV;;AAEA;;EAEE,oBAAoB,EAAE,kBAAkB;EACxC,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,2BAA2B,EAAE,gBAAgB;EAC7C,0CAA0C,EAAE,wBAAwB;AACtE;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,2BAA2B,EAAE,iBAAiB;EAC9C,yCAAyC,EAAE,wBAAwB;AACrE;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,YAAY;AACd",sourcesContent:['.header {\n  height: 100vh; /* out of 100 */\n  background-image: linear-gradient(\n      to right,\n      rgba(67, 48, 133, 0.8),\n      rgba(58, 65, 62, 0.692)\n    ),\n    url("../images/chicago.jpg");\n  background-size: cover; /* try to fit width of viewport or element */\n  background-position: top; /* top of img stays atop container */\n  position: relative;\n}\n\n.text-box {\n  position: absolute;\n  top: 50%; /* from parent element */\n  left: 50%; /* from parent element */\n  transform: translate(-50%, -50%); /* from itself (top-left corner entry) */\n  text-align: center;\n}\n\n.heading-primary {\n  color: #fff;\n  text-transform: uppercase;\n\n  backface-visibility: hidden; /* fixes shaking in animation */\n  margin-bottom: 30px;\n}\n\n.heading-primary-main {\n  display: block;\n  font-size: 50px;\n  font-weight: 800;\n  letter-spacing: 20px;\n  line-height: 1.3;\n\n  animation-name: moveInLeft;\n  animation-duration: 2s;\n  animation-timing-function: ease-out;\n}\n\n.heading-primary-sub {\n  display: block;\n  font-size: 15px;\n  font-weight: 700;\n  letter-spacing: 7.4px;\n  line-height: 1.3;\n\n  animation: moveInRight 2s ease-out;\n}\n\n/* it\'s best to only animate two properties (opacity, transform) */\n@keyframes moveInLeft {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      -100px\n    ); /* (x, y) -> neg goes left/down, pos goes right/up */\n  }\n\n  80% {\n    transform: translateX(10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\n@keyframes moveInRight {\n  0% {\n    opacity: 0;\n    transform: translateX(\n      100px\n    ); /* (x, y) -> neg goes left/up, pos goes right/down */\n  }\n\n  80% {\n    transform: translateX(-10px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n\nform {\n  margin: 0 auto;\n  background-color: white;\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  overflow: hidden;\n  width: 240px;\n}\n\nfieldset {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\ninput {\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  margin: 0;\n}\n\n.account-info {\n  padding: 20px 20px 0 20px;\n}\n\n.account-info label {\n  color: #395870;\n  display: block;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.account-info input {\n  background: #fff;\n  border: 1px solid #c6c7cc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  color: #636466;\n  padding: 6px;\n  margin-top: 6px;\n  width: 100%;\n}\n\n.account-action {\n  background: #f0f0f2;\n  border-top: 1px solid #c6c7cc;\n  padding: 3px 20px 10px 20px;\n}\n\n.account-action .btn {\n  background: linear-gradient(#49708f, #293f50);\n  border: 0;\n  color: #fff;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 8px 16px;\n}\n\n.account-support {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-content: center;\n  margin-bottom: 10px;\n  font-size: 10px;\n}\n\n.account-support label {\n  color: #7c7c80;\n}\n\n.account-support input {\n  position: relative;\n  top: 3px;\n}\n\n.account-support a {\n  position: relative;\n  top: 2px;\n}\n\n.account-action .btn:link,\n.account-action .btn:visited {\n  transition: all 0.2s; /* initial state */\n  position: relative;\n  outline: none;\n}\n\n.account-action .btn:hover {\n  transform: translateY(-3px); /* goes up 3px */\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-action .btn:focus {\n  outline: none;\n}\n\n.account-action .btn:active {\n  outline: none;\n  transform: translateY(-1px); /* goes up 1 px */\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-register {\n  display: block;\n  margin-top: 10px;\n  color: white;\n}\n'],sourceRoot:""}]);const l=h},538:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var r=n(15),i=n.n(r),o=n(645),s=n.n(o),a=n(667),u=n.n(a),c=n(955),h=s()(i()),f=u()(c);h.push([t.id,'@font-face {\n  font-family: "Open Sans";\n  src: url('+f+') format("ttf");\n  font-weight: 400;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; /* borders and paddings no longer add to total width/height */\n}\n\nbody {\n  font-family: "Open Sans", sans-serif; /* inherited by all child elements of body */\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.7;\n  color: #777;\n}\n',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,0DAAuD;EACvD,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB,EAAE,6DAA6D;AACvF;;AAEA;EACE,oCAAoC,EAAE,4CAA4C;EAClF,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,WAAW;AACb",sourcesContent:['@font-face {\n  font-family: "Open Sans";\n  src: url("../fonts/OpenSans-Regular.ttf") format("ttf");\n  font-weight: 400;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; /* borders and paddings no longer add to total width/height */\n}\n\nbody {\n  font-family: "Open Sans", sans-serif; /* inherited by all child elements of body */\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.7;\n  color: #777;\n}\n'],sourceRoot:""}]);const l=h},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var u=[].concat(t[a]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],s=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(u," */"),h=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(h).concat([c]).join("\n")}return[o].join("\n")}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},676:function(t,e){!function(t){"use strict";function e(t){return Array.prototype.slice.call(t)}function n(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function r(t,e,r){var i,o=new Promise((function(o,s){n(i=t[e].apply(t,r)).then(o,s)}));return o.request=i,o}function i(t,e,n){var i=r(t,e,n);return i.then((function(t){if(t)return new h(t,i.request)}))}function o(t,e,n){n.forEach((function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})}))}function s(t,e,n,i){i.forEach((function(i){i in n.prototype&&(t.prototype[i]=function(){return r(this[e],i,arguments)})}))}function a(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})}))}function u(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return i(this[e],r,arguments)})}))}function c(t){this._index=t}function h(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function l(t){this._tx=t,this.complete=new Promise((function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}}))}function p(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new l(n)}function d(t){this._db=t}o(c,"_index",["name","keyPath","multiEntry","unique"]),s(c,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(c,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(h,"_cursor",["direction","key","primaryKey","value"]),s(h,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(t){t in IDBCursor.prototype&&(h.prototype[t]=function(){var e=this,r=arguments;return Promise.resolve().then((function(){return e._cursor[t].apply(e._cursor,r),n(e._request).then((function(t){if(t)return new h(t,e._request)}))}))})})),f.prototype.createIndex=function(){return new c(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new c(this._store.index.apply(this._store,arguments))},o(f,"_store",["name","keyPath","indexNames","autoIncrement"]),s(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),a(f,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},o(l,"_tx",["objectStoreNames","mode"]),a(l,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},o(p,"_db",["name","version","objectStoreNames"]),a(p,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},o(d,"_db",["name","version","objectStoreNames"]),a(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(t){[f,c].forEach((function(n){t in n.prototype&&(n.prototype[t.replace("open","iterate")]=function(){var n=e(arguments),r=n[n.length-1],i=this._store||this._index,o=i[t].apply(i,n.slice(0,-1));o.onsuccess=function(){r(o.result)}})}))})),[c,f].forEach((function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise((function(i){n.iterateCursor(t,(function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():i(r)):i(r)}))}))})})),t.openDb=function(t,e,n){var i=r(indexedDB,"open",[t,e]),o=i.request;return o&&(o.onupgradeneeded=function(t){n&&n(new p(o.result,t.oldVersion,o.transaction))}),i.then((function(t){return new d(t)}))},t.deleteDb=function(t){return r(indexedDB,"deleteDatabase",[t])},Object.defineProperty(t,"__esModule",{value:!0})}(e)},379:(t,e,n)=>{"use strict";var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function s(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},r=[],i=0;i<t.length;i++){var a=t[i],u=e.base?a[0]+e.base:a[0],c=n[u]||0,h="".concat(u," ").concat(c);n[u]=c+1;var f=s(h),l={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(o[f].references++,o[f].updater(l)):o.push({identifier:h,updater:v(l,e),references:1}),r.push(h)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=i(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function f(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=h(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function l(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,d=0;function v(t,e){var n,r,i;if(e.singleton){var o=d++;n=p||(p=u(e)),r=f.bind(null,n,o,!1),i=f.bind(null,n,o,!0)}else n=u(e),r=l.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=s(n[r]);o[i].references--}for(var u=a(t,e),c=0;c<n.length;c++){var h=s(n[c]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}n=u}}}},955:(t,e,n)=>{"use strict";t.exports=n.p+"1b0809d519837cb7aad3.ttf"},297:(t,e,n)=>{"use strict";t.exports=n.p+"f46bb183eee6b540f0be.jpg"}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{"use strict";var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var r=function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function i(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))}function o(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function s(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function u(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(a(arguments[e]));return t}function c(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&"__proto__"!==n&&(t[n]=h(t[n],e[n]));return t}var f=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();function l(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function p(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}function d(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function v(){return"indexedDB"in self&&null!=indexedDB}function y(){return new Promise((function(t,e){try{var n=!0,r="validate-browser-context-for-indexeddb-analytics-module",i=window.indexedDB.open(r);i.onsuccess=function(){i.result.close(),n||window.indexedDB.deleteDatabase(r),t(!0)},i.onupgradeneeded=function(){n=!1},i.onerror=function(){var t;e((null===(t=i.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function g(){return!(!navigator||!navigator.cookieEnabled)}var m=function(t){function n(e,r,i){var o=t.call(this,r)||this;return o.code=e,o.customData=i,o.name="FirebaseError",Object.setPrototypeOf(o,n.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,b.prototype.create),o}return e(n,t),n}(Error),b=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e[0]||{},i=this.service+"/"+t,o=this.errors[t],s=o?w(o,r):"Error",a=this.serviceName+": "+s+" ("+i+").",u=new m(i,a,r);return u},t}();function w(t,e){return t.replace(I,(function(t,n){var r=e[n];return null!=r?String(r):"<"+n+"?>"}))}var I=/\{\$([^}]+)}/g;function E(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function A(t,e){var n=new _(t,e);return n.subscribe.bind(n)}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,s,a=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(o=h^u&(c^h),s=1518500249):(o=u^c^h,s=1859775393):r<60?(o=u&c|h&(u|c),s=2400959708):(o=u^c^h,s=3395469782),i=(a<<5|a>>>27)+o+f+s+n[r]&4294967295,f=h,h=c,c=4294967295&(u<<30|u>>>2),u=a,a=i;this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0===o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t}}();var _=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(r.next=T),void 0===r.error&&(r.error=T),void 0===r.complete&&(r.complete=T);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function T(){}function S(t,e,n){void 0===e&&(e=1e3),void 0===n&&(n=2);var r=e*Math.pow(n,t),i=Math.round(.5*r*(Math.random()-.5)*2);return Math.min(144e5,r+i)}var N,k=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),C="[DEFAULT]",x=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t=C);var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new f;this.instancesDeferred.set(e,n);try{var r=this.getOrInitializeService(e);r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=r({identifier:C,optional:!1},t),n=e.identifier,i=e.optional,o=this.normalizeInstanceIdentifier(n);try{var s=this.getOrInitializeService(o);if(!s){if(i)return null;throw Error("Service "+this.name+" is not available")}return s}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService(C)}catch(t){}try{for(var r=s(this.instancesDeferred.entries()),i=r.next();!i.done;i=r.next()){var o=a(i.value,2),u=o[0],c=o[1],h=this.normalizeInstanceIdentifier(u);try{var f=this.getOrInitializeService(h);c.resolve(f)}catch(t){}}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t=C),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(u(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})),t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()}))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return t===C?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:C:t},t}(),O=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new x(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();function D(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}var P,R=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(P||(P={}));var L,M={debug:P.DEBUG,verbose:P.VERBOSE,info:P.INFO,warn:P.WARN,error:P.ERROR,silent:P.SILENT},V=P.INFO,j=((N={})[P.DEBUG]="log",N[P.VERBOSE]="log",N[P.INFO]="info",N[P.WARN]="warn",N[P.ERROR]="error",N),U=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(e<t.logLevel)){var i=(new Date).toISOString(),o=j[e];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[o].apply(console,D(["["+i+"]  "+t.name+":"],n))}},B=function(){function t(t){this.name=t,this._logLevel=V,this._logHandler=U,this._userLogHandler=null,R.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in P))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?M[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.DEBUG],t)),this._logHandler.apply(this,D([this,P.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.VERBOSE],t)),this._logHandler.apply(this,D([this,P.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.INFO],t)),this._logHandler.apply(this,D([this,P.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.WARN],t)),this._logHandler.apply(this,D([this,P.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,D([this,P.ERROR],t)),this._logHandler.apply(this,D([this,P.ERROR],t))},t}();function F(t){R.forEach((function(e){e.setLogLevel(t)}))}var q,G=((L={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",L["bad-app-name"]="Illegal App name: '{$appName}",L["duplicate-app"]="Firebase App named '{$appName}' already exists",L["app-deleted"]="Firebase App named '{$appName}' already deleted",L["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",L["invalid-log-argument"]="First argument to `onLog` must be null or a function.",L),z=new b("app","Firebase",G),K="@firebase/app",H="[DEFAULT]",W=((q={})[K]="fire-core",q["@firebase/analytics"]="fire-analytics",q["@firebase/auth"]="fire-auth",q["@firebase/database"]="fire-rtdb",q["@firebase/functions"]="fire-fn",q["@firebase/installations"]="fire-iid",q["@firebase/messaging"]="fire-fcm",q["@firebase/performance"]="fire-perf",q["@firebase/remote-config"]="fire-rc",q["@firebase/storage"]="fire-gcs",q["@firebase/firestore"]="fire-fst",q["fire-js"]="fire-js",q["firebase-wrapper"]="fire-js-all",q),X=new B("@firebase/app"),Y=function(){function t(t,e,n){var r,i,o=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=h(void 0,t),this.container=new O(e.name),this._addComponent(new k("app",(function(){return o}),"PUBLIC"));try{for(var a=s(this.firebase_.INTERNAL.components.values()),u=a.next();!u.done;u=a.next()){var c=u.value;this._addComponent(c)}}catch(t){r={error:t}}finally{try{u&&!u.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e=H),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e=H),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){X.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw z.create("app-deleted",{appName:this.name_})},t}();Y.prototype.name&&Y.prototype.options||Y.prototype.delete||console.log("dc");var J=function t(){var e=function(t){var e={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={}),"object"==typeof i&&null!==i||(i={name:i});var o=i;void 0===o.name&&(o.name=H);var s=o.name;if("string"!=typeof s||!s)throw z.create("bad-app-name",{appName:String(s)});if(E(e,s))throw z.create("duplicate-app",{appName:s});var a=new t(n,o,r);return e[s]=a,a},app:i,registerVersion:function(t,e,n){var r,i=null!==(r=W[t])&&void 0!==r?r:t;n&&(i+="-"+n);var s=i.match(/\s|\//),a=e.match(/\s|\//);if(s||a){var u=['Unable to register library "'+i+'" with version "'+e+'":'];return s&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),s&&a&&u.push("and"),a&&u.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void X.warn(u.join(" "))}o(new k(i+"-version",(function(){return{library:i,version:e}}),"VERSION"))},setLogLevel:F,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw z.create("invalid-log-argument",{appName:name});!function(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=M[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];var s=i.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:P[n].toLowerCase(),message:s,args:i,type:e.name})}},r=0,i=R;r<i.length;r++)n(i[r])}(t,e)},apps:null,SDK_VERSION:"8.0.1",INTERNAL:{registerComponent:o,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function i(t){if(!E(e,t=t||H))throw z.create("no-app",{appName:t});return e[t]}function o(o){var a,u,c=o.name;if(n.has(c))return X.debug("There were multiple attempts to register component "+c+"."),"PUBLIC"===o.type?r[c]:null;if(n.set(c,o),"PUBLIC"===o.type){var f=function(t){if(void 0===t&&(t=i()),"function"!=typeof t[c])throw z.create("invalid-app-argument",{appName:c});return t[c]()};void 0!==o.serviceProps&&h(f,o.serviceProps),r[c]=f,t.prototype[c]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this._getService.bind(this,c).apply(this,o.multipleInstances?t:[])}}try{for(var l=s(Object.keys(e)),p=l.next();!p.done;p=l.next()){var d=p.value;e[d]._addComponent(o)}}catch(t){a={error:t}}finally{try{p&&!p.done&&(u=l.return)&&u.call(l)}finally{if(a)throw a.error}}return"PUBLIC"===o.type?r[c]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),i.App=t,r}(Y);return e.INTERNAL=r(r({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){h(e,t)},createSubscribe:A,ErrorFactory:b,deepExtend:h}),e}(),Q=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();if("object"==typeof self&&self.self===self&&void 0!==self.firebase){X.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var $=self.firebase.SDK_VERSION;$&&$.indexOf("LITE")>=0&&X.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var Z=J.initializeApp;J.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return p()&&X.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),Z.apply(void 0,t)};var tt=J;!function(t,e){t.INTERNAL.registerComponent(new k("platform-logger",(function(t){return new Q(t)}),"PRIVATE")),t.registerVersion(K,"0.6.13",void 0),t.registerVersion("fire-js","")}(tt);const et=tt;et.registerVersion("firebase","8.0.2","app");var nt,rt=n(676),it="w:0.4.19",ot=((nt={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',nt["not-registered"]="Firebase Installation is not registered.",nt["installation-not-found"]="Firebase Installation not found.",nt["request-failed"]='{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',nt["app-offline"]="Could not process request. Application offline.",nt["delete-pending-registration"]="Can't delete installation while there is a pending registration request.",nt),st=new b("installations","Installations",ot);function at(t){return t instanceof m&&t.code.includes("request-failed")}function ut(t){return"https://firebaseinstallations.googleapis.com/v1/projects/"+t.projectId+"/installations"}function ct(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}function ht(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return[4,e.json()];case 1:return n=i.sent(),r=n.error,[2,st.create("request-failed",{requestName:t,serverCode:r.code,serverMessage:r.message,serverStatus:r.status})]}}))}))}function ft(t){var e=t.apiKey;return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function lt(t,e){var n=e.refreshToken,r=ft(t);return r.append("Authorization",function(t){return"FIS_v2 "+t}(n)),r}function pt(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,t()];case 1:return(e=n.sent()).status>=500&&e.status<600?[2,t()]:[2,e]}}))}))}function dt(t,e){var n=e.fid;return i(this,void 0,void 0,(function(){var e,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return e=ut(t),r=ft(t),i={fid:n,authVersion:"FIS_v2",appId:t.appId,sdkVersion:it},s={method:"POST",headers:r,body:JSON.stringify(i)},[4,pt((function(){return fetch(e,s)}))];case 1:return(a=o.sent()).ok?[4,a.json()]:[3,3];case 2:return[2,{fid:(u=o.sent()).fid||n,registrationStatus:2,refreshToken:u.refreshToken,authToken:ct(u.authToken)}];case 3:return[4,ht("Create Installation",a)];case 4:throw o.sent()}}))}))}function vt(t){return new Promise((function(e){setTimeout(e,t)}))}var yt=/^[cdef][\w-]{21}$/;function gt(){try{var t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;var e=function(t){return(e=t,btoa(String.fromCharCode.apply(String,u(e))).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var e}(t);return yt.test(e)?e:""}catch(t){return""}}function mt(t){return t.appName+"!"+t.appId}var bt=new Map;function wt(t,e){var n=mt(t);It(n,e),function(t,e){var n=At();n&&n.postMessage({key:t,fid:e}),_t()}(n,e)}function It(t,e){var n,r,i=bt.get(t);if(i)try{for(var o=s(i),a=o.next();!a.done;a=o.next())(0,a.value)(e)}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}var Et=null;function At(){return!Et&&"BroadcastChannel"in self&&((Et=new BroadcastChannel("[Firebase] FID Change")).onmessage=function(t){It(t.data.key,t.data.fid)}),Et}function _t(){0===bt.size&&Et&&(Et.close(),Et=null)}var Tt,St="firebase-installations-store",Nt=null;function kt(){return Nt||(Nt=(0,rt.openDb)("firebase-installations-database",1,(function(t){switch(t.oldVersion){case 0:t.createObjectStore(St)}}))),Nt}function Ct(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a;return o(this,(function(o){switch(o.label){case 0:return n=mt(t),[4,kt()];case 1:return r=o.sent(),i=r.transaction(St,"readwrite"),[4,(s=i.objectStore(St)).get(n)];case 2:return a=o.sent(),[4,s.put(e,n)];case 3:return o.sent(),[4,i.complete];case 4:return o.sent(),a&&a.fid===e.fid||wt(t,e.fid),[2,e]}}))}))}function xt(t){return i(this,void 0,void 0,(function(){var e,n,r;return o(this,(function(i){switch(i.label){case 0:return e=mt(t),[4,kt()];case 1:return n=i.sent(),[4,(r=n.transaction(St,"readwrite")).objectStore(St).delete(e)];case 2:return i.sent(),[4,r.complete];case 3:return i.sent(),[2]}}))}))}function Ot(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return n=mt(t),[4,kt()];case 1:return r=o.sent(),i=r.transaction(St,"readwrite"),[4,(s=i.objectStore(St)).get(n)];case 2:return a=o.sent(),void 0!==(u=e(a))?[3,4]:[4,s.delete(n)];case 3:return o.sent(),[3,6];case 4:return[4,s.put(u,n)];case 5:o.sent(),o.label=6;case 6:return[4,i.complete];case 7:return o.sent(),!u||a&&a.fid===u.fid||wt(t,u.fid),[2,u]}}))}))}function Dt(t){return i(this,void 0,void 0,(function(){var e,n,r;return o(this,(function(s){switch(s.label){case 0:return[4,Ot(t,(function(n){var r=function(t){return Lt(t||{fid:gt(),registrationStatus:0})}(n),s=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine)return{installationEntry:e,registrationPromise:Promise.reject(st.create("app-offline"))};var n={fid:e.fid,registrationStatus:1,registrationTime:Date.now()};return{installationEntry:n,registrationPromise:function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,7]),[4,dt(t,e)];case 1:return n=i.sent(),[2,Ct(t,n)];case 2:return at(r=i.sent())&&409===r.customData.serverCode?[4,xt(t)]:[3,4];case 3:return i.sent(),[3,6];case 4:return[4,Ct(t,{fid:e.fid,registrationStatus:0})];case 5:i.sent(),i.label=6;case 6:throw r;case 7:return[2]}}))}))}(t,n)}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:Pt(t)}:{installationEntry:e}}(t,r);return e=s.registrationPromise,s.installationEntry}))];case 1:return""!==(n=s.sent()).fid?[3,3]:(r={},[4,e]);case 2:return[2,(r.installationEntry=s.sent(),r)];case 3:return[2,{installationEntry:n,registrationPromise:e}]}}))}))}function Pt(t){return i(this,void 0,void 0,(function(){var e,n,r,i;return o(this,(function(o){switch(o.label){case 0:return[4,Rt(t)];case 1:e=o.sent(),o.label=2;case 2:return 1!==e.registrationStatus?[3,5]:[4,vt(100)];case 3:return o.sent(),[4,Rt(t)];case 4:return e=o.sent(),[3,2];case 5:return 0!==e.registrationStatus?[3,7]:[4,Dt(t)];case 6:return n=o.sent(),r=n.installationEntry,(i=n.registrationPromise)?[2,i]:[2,r];case 7:return[2,e]}}))}))}function Rt(t){return Ot(t,(function(t){if(!t)throw st.create("installation-not-found");return Lt(t)}))}function Lt(t){return 1===(e=t).registrationStatus&&e.registrationTime+1e4<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}function Mt(t,e){var n=t.appConfig,r=t.platformLoggerProvider;return i(this,void 0,void 0,(function(){var t,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return t=function(t,e){var n=e.fid;return ut(t)+"/"+n+"/authTokens:generate"}(n,e),i=lt(n,e),(s=r.getImmediate({optional:!0}))&&i.append("x-firebase-client",s.getPlatformInfoString()),a={installation:{sdkVersion:it}},u={method:"POST",headers:i,body:JSON.stringify(a)},[4,pt((function(){return fetch(t,u)}))];case 1:return(c=o.sent()).ok?[4,c.json()]:[3,3];case 2:return[2,ct(o.sent())];case 3:return[4,ht("Generate Auth Token",c)];case 4:throw o.sent()}}))}))}function Vt(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,(function(){var n,s,a;return o(this,(function(u){switch(u.label){case 0:return[4,Ot(t.appConfig,(function(s){if(!Ut(s))throw st.create("not-registered");var a,u=s.authToken;if(!e&&(2===(a=u).requestStatus&&!function(t){var e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+36e5}(a)))return s;if(1===u.requestStatus)return n=function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return[4,jt(t.appConfig)];case 1:n=i.sent(),i.label=2;case 2:return 1!==n.authToken.requestStatus?[3,5]:[4,vt(100)];case 3:return i.sent(),[4,jt(t.appConfig)];case 4:return n=i.sent(),[3,2];case 5:return 0===(r=n.authToken).requestStatus?[2,Vt(t,e)]:[2,r]}}))}))}(t,e),s;if(!navigator.onLine)throw st.create("app-offline");var c=function(t){var e={requestStatus:1,requestTime:Date.now()};return r(r({},t),{authToken:e})}(s);return n=function(t,e){return i(this,void 0,void 0,(function(){var n,i,s;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,8]),[4,Mt(t,e)];case 1:return n=o.sent(),s=r(r({},e),{authToken:n}),[4,Ct(t.appConfig,s)];case 2:return o.sent(),[2,n];case 3:return!at(i=o.sent())||401!==i.customData.serverCode&&404!==i.customData.serverCode?[3,5]:[4,xt(t.appConfig)];case 4:return o.sent(),[3,7];case 5:return s=r(r({},e),{authToken:{requestStatus:0}}),[4,Ct(t.appConfig,s)];case 6:o.sent(),o.label=7;case 7:throw i;case 8:return[2]}}))}))}(t,c),c}))];case 1:return s=u.sent(),n?[4,n]:[3,3];case 2:return a=u.sent(),[3,4];case 3:a=s.authToken,u.label=4;case 4:return[2,a]}}))}))}function jt(t){return Ot(t,(function(t){if(!Ut(t))throw st.create("not-registered");var e;return 1===(e=t.authToken).requestStatus&&e.requestTime+1e4<Date.now()?r(r({},t),{authToken:{requestStatus:0}}):t}))}function Ut(t){return void 0!==t&&2===t.registrationStatus}function Bt(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,Dt(t)];case 1:return(e=n.sent().registrationPromise)?[4,e]:[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))}function Ft(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:return n=function(t,e){var n=e.fid;return ut(t)+"/"+n}(t,e),r=lt(t,e),i={method:"DELETE",headers:r},[4,pt((function(){return fetch(n,i)}))];case 1:return(s=o.sent()).ok?[3,3]:[4,ht("Delete Installation",s)];case 2:throw o.sent();case 3:return[2]}}))}))}function qt(t){return st.create("missing-app-config-values",{valueName:t})}(Tt=et).INTERNAL.registerComponent(new k("installations",(function(t){var e=t.getProvider("app").getImmediate(),n={appConfig:function(t){var e,n;if(!t||!t.options)throw qt("App Configuration");if(!t.name)throw qt("App Name");try{for(var r=s(["projectId","apiKey","appId"]),i=r.next();!i.done;i=r.next()){var o=i.value;if(!t.options[o])throw qt(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e),platformLoggerProvider:t.getProvider("platform-logger")};return{app:e,getId:function(){return function(t){return i(this,void 0,void 0,(function(){var e,n,r;return o(this,(function(i){switch(i.label){case 0:return[4,Dt(t.appConfig)];case 1:return e=i.sent(),n=e.installationEntry,(r=e.registrationPromise)?r.catch(console.error):Vt(t).catch(console.error),[2,n.fid]}}))}))}(n)},getToken:function(t){return function(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,Bt(t.appConfig)];case 1:return n.sent(),[4,Vt(t,e)];case 2:return[2,n.sent().token]}}))}))}(n,t)},delete:function(){return function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,Ot(e=t.appConfig,(function(t){if(!t||0!==t.registrationStatus)return t}))];case 1:if(!(n=r.sent()))return[3,6];if(1!==n.registrationStatus)return[3,2];throw st.create("delete-pending-registration");case 2:if(2!==n.registrationStatus)return[3,6];if(navigator.onLine)return[3,3];throw st.create("app-offline");case 3:return[4,Ft(e,n)];case 4:return r.sent(),[4,xt(e)];case 5:r.sent(),r.label=6;case 6:return[2]}}))}))}(n)},onIdChange:function(t){return function(t,e){var n=t.appConfig;return function(t,e){At();var n=mt(t),r=bt.get(n);r||(r=new Set,bt.set(n,r)),r.add(e)}(n,e),function(){!function(t,e){var n=mt(t),r=bt.get(n);r&&(r.delete(e),0===r.size&&bt.delete(n),_t())}(n,e)}}(n,t)}}}),"PUBLIC")),Tt.registerVersion("@firebase/installations","0.4.19");var Gt,zt,Kt="https://www.googletagmanager.com/gtag/js";!function(t){t.EVENT="event",t.SET="set",t.CONFIG="config"}(Gt||(Gt={})),function(t){t.ADD_SHIPPING_INFO="add_shipping_info",t.ADD_PAYMENT_INFO="add_payment_info",t.ADD_TO_CART="add_to_cart",t.ADD_TO_WISHLIST="add_to_wishlist",t.BEGIN_CHECKOUT="begin_checkout",t.CHECKOUT_PROGRESS="checkout_progress",t.EXCEPTION="exception",t.GENERATE_LEAD="generate_lead",t.LOGIN="login",t.PAGE_VIEW="page_view",t.PURCHASE="purchase",t.REFUND="refund",t.REMOVE_FROM_CART="remove_from_cart",t.SCREEN_VIEW="screen_view",t.SEARCH="search",t.SELECT_CONTENT="select_content",t.SELECT_ITEM="select_item",t.SELECT_PROMOTION="select_promotion",t.SET_CHECKOUT_OPTION="set_checkout_option",t.SHARE="share",t.SIGN_UP="sign_up",t.TIMING_COMPLETE="timing_complete",t.VIEW_CART="view_cart",t.VIEW_ITEM="view_item",t.VIEW_ITEM_LIST="view_item_list",t.VIEW_PROMOTION="view_promotion",t.VIEW_SEARCH_RESULTS="view_search_results"}(zt||(zt={}));var Ht,Wt=new B("@firebase/analytics");function Xt(t,e,n,r,s,a){return i(this,void 0,void 0,(function(){var i,u,c,h;return o(this,(function(o){switch(o.label){case 0:i=r[s],o.label=1;case 1:return o.trys.push([1,7,,8]),i?[4,e[i]]:[3,3];case 2:return o.sent(),[3,6];case 3:return[4,Promise.all(n)];case 4:return u=o.sent(),(c=u.find((function(t){return t.measurementId===s})))?[4,e[c.appId]]:[3,6];case 5:o.sent(),o.label=6;case 6:return[3,8];case 7:return h=o.sent(),Wt.error(h),[3,8];case 8:return t(Gt.CONFIG,s,a),[2]}}))}))}function Yt(t,e,n,r,s){return i(this,void 0,void 0,(function(){var i,a,u,c,h,f,l,p;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),i=[],s&&s.send_to?(a=s.send_to,Array.isArray(a)||(a=[a]),[4,Promise.all(n)]):[3,2];case 1:for(u=o.sent(),c=function(t){var n=u.find((function(e){return e.measurementId===t})),r=n&&e[n.appId];if(!r)return i=[],"break";i.push(r)},h=0,f=a;h<f.length&&(l=f[h],"break"!==c(l));h++);o.label=2;case 2:return 0===i.length&&(i=Object.values(e)),[4,Promise.all(i)];case 3:return o.sent(),t(Gt.EVENT,r,s||{}),[3,5];case 4:return p=o.sent(),Wt.error(p),[3,5];case 5:return[2]}}))}))}var Jt=((Ht={})["already-exists"]="A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.",Ht["already-initialized"]="Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",Ht["interop-component-reg-failed"]="Firebase Analytics Interop Component failed to instantiate: {$reason}",Ht["invalid-analytics-context"]="Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",Ht["indexeddb-unavailable"]="IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",Ht["fetch-throttle"]="The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",Ht["config-fetch-failed"]="Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",Ht["no-api-key"]='The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',Ht["no-app-id"]='The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',Ht),Qt=new b("analytics","Analytics",Jt),$t=new(function(){function t(t,e){void 0===t&&(t={}),void 0===e&&(e=1e3),this.throttleMetadata=t,this.intervalMillis=e}return t.prototype.getThrottleMetadata=function(t){return this.throttleMetadata[t]},t.prototype.setThrottleMetadata=function(t,e){this.throttleMetadata[t]=e},t.prototype.deleteThrottleMetadata=function(t){delete this.throttleMetadata[t]},t}());function Zt(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}function te(t){var e;return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return n=t.appId,r=t.apiKey,i={method:"GET",headers:Zt(r)},s="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),[4,fetch(s,i)];case 1:if(200===(a=o.sent()).status||304===a.status)return[3,6];u="",o.label=2;case 2:return o.trys.push([2,4,,5]),[4,a.json()];case 3:return c=o.sent(),(null===(e=c.error)||void 0===e?void 0:e.message)&&(u=c.error.message),[3,5];case 4:return o.sent(),[3,5];case 5:throw Qt.create("config-fetch-failed",{httpStatus:a.status,responseMessage:u});case 6:return[2,a.json()]}}))}))}function ee(t,e,n,r){var s=e.throttleEndTimeMillis,a=e.backoffCount;return void 0===r&&(r=$t),i(this,void 0,void 0,(function(){var e,i,u,c,h,f,l;return o(this,(function(o){switch(o.label){case 0:e=t.appId,i=t.measurementId,o.label=1;case 1:return o.trys.push([1,3,,4]),[4,ne(n,s)];case 2:return o.sent(),[3,4];case 3:if(u=o.sent(),i)return Wt.warn("Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID "+i+' provided in the "measurementId" field in the local Firebase config. ['+u.message+"]"),[2,{appId:e,measurementId:i}];throw u;case 4:return o.trys.push([4,6,,7]),[4,te(t)];case 5:return c=o.sent(),r.deleteThrottleMetadata(e),[2,c];case 6:if(!function(t){if(!(t instanceof m&&t.customData))return!1;var e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(h=o.sent())){if(r.deleteThrottleMetadata(e),i)return Wt.warn("Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID "+i+' provided in the "measurementId" field in the local Firebase config. ['+h.message+"]"),[2,{appId:e,measurementId:i}];throw h}return f=503===Number(h.customData.httpStatus)?S(a,r.intervalMillis,30):S(a,r.intervalMillis),l={throttleEndTimeMillis:Date.now()+f,backoffCount:a+1},r.setThrottleMetadata(e,l),Wt.debug("Calling attemptFetch again in "+f+" millis"),[2,ee(t,l,n,r)];case 7:return[2]}}))}))}function ne(t,e){return new Promise((function(n,r){var i=Math.max(e-Date.now(),0),o=setTimeout(n,i);t.addEventListener((function(){clearTimeout(o),r(Qt.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}var re=function(){function t(){this.listeners=[]}return t.prototype.addEventListener=function(t){this.listeners.push(t)},t.prototype.abort=function(){this.listeners.forEach((function(t){return t()}))},t}();var ie,oe,se={},ae=[],ue={},ce="dataLayer",he="gtag",fe=!1;function le(t){if(fe)throw Qt.create("already-initialized");t.dataLayerName&&(ce=t.dataLayerName),t.gtagName&&(he=t.gtagName)}function pe(t,e){!function(){var t=[];if(d()&&t.push("This is a browser extension environment."),g()||t.push("Cookies are not available."),t.length>0){var e=t.map((function(t,e){return"("+(e+1)+") "+t})).join(" "),n=Qt.create("invalid-analytics-context",{errorInfo:e});Wt.warn(n.message)}}();var n=t.options.appId;if(!n)throw Qt.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw Qt.create("no-api-key");Wt.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID '+t.options.measurementId+' provided in the "measurementId" field in the local Firebase config.')}if(null!=se[n])throw Qt.create("already-exists",{id:n});if(!fe){(function(){for(var t=window.document.getElementsByTagName("script"),e=0,n=Object.values(t);e<n.length;e++){var r=n[e];if(r.src&&r.src.includes(Kt))return r}return null})()||function(t){var e=document.createElement("script");e.src=Kt+"?l="+t,e.async=!0,document.head.appendChild(e)}(ce),function(t){var e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(ce);var s=function(t,e,n,r,s){var a=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];window[r].push(arguments)};return window[s]&&"function"==typeof window[s]&&(a=window[s]),window[s]=function(t,e,n,r){return function(s,a,u){return i(this,void 0,void 0,(function(){var i;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),s!==Gt.EVENT?[3,2]:[4,Yt(t,e,n,a,u)];case 1:return o.sent(),[3,5];case 2:return s!==Gt.CONFIG?[3,4]:[4,Xt(t,e,n,r,a,u)];case 3:return o.sent(),[3,5];case 4:t(Gt.SET,a),o.label=5;case 5:return[3,7];case 6:return i=o.sent(),Wt.error(i),[3,7];case 7:return[2]}}))}))}}(a,t,e,n),{gtagCore:a,wrappedGtag:window[s]}}(se,ae,ue,ce,he),a=s.wrappedGtag,u=s.gtagCore;oe=a,ie=u,fe=!0}return se[n]=function(t,e,n,r,s){return i(this,void 0,void 0,(function(){var a,u,c,h,f,l,p;return o(this,(function(d){switch(d.label){case 0:return(a=function(t,e,n){return void 0===e&&(e=$t),i(this,void 0,void 0,(function(){var n,r,s,a,u,c,h=this;return o(this,(function(f){if(n=t.options,r=n.appId,s=n.apiKey,a=n.measurementId,!r)throw Qt.create("no-app-id");if(!s){if(a)return[2,{measurementId:a,appId:r}];throw Qt.create("no-api-key")}return u=e.getThrottleMetadata(r)||{backoffCount:0,throttleEndTimeMillis:Date.now()},c=new re,setTimeout((function(){return i(h,void 0,void 0,(function(){return o(this,(function(t){return c.abort(),[2]}))}))}),6e4),[2,ee({appId:r,apiKey:s,measurementId:a},u,c,e)]}))}))}(t)).then((function(e){n[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&Wt.warn("The measurement ID in the local Firebase config ("+t.options.measurementId+") does not match the measurement ID fetched from the server ("+e.measurementId+"). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.")})).catch((function(t){return Wt.error(t)})),e.push(a),u=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return v()?[3,1]:(Wt.warn(Qt.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),[2,!1]);case 1:return e.trys.push([1,3,,4]),[4,y()];case 2:return e.sent(),[3,4];case 3:return t=e.sent(),Wt.warn(Qt.create("indexeddb-unavailable",{errorInfo:t}).message),[2,!1];case 4:return[2,!0]}}))}))}().then((function(t){return t?r.getId():void 0})),[4,Promise.all([a,u])];case 1:return c=d.sent(),h=c[0],f=c[1],s("js",new Date),(p={}).origin="firebase",p.update=!0,l=p,null!=f&&(l.firebase_id=f),s(Gt.CONFIG,h.measurementId,l),[2,h.measurementId]}}))}))}(t,ae,ue,e,ie),{app:t,logEvent:function(t,e,s){(function(t,e,n,s,a){return i(this,void 0,void 0,(function(){var i,u;return o(this,(function(o){switch(o.label){case 0:return a&&a.global?(t(Gt.EVENT,n,s),[2]):[3,1];case 1:return[4,e];case 2:i=o.sent(),u=r(r({},s),{send_to:i}),t(Gt.EVENT,n,u),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e,s).catch((function(t){return Wt.error(t)}))},setCurrentScreen:function(t,e){(function(t,e,n,r){return i(this,void 0,void 0,(function(){var i;return o(this,(function(o){switch(o.label){case 0:return r&&r.global?(t(Gt.SET,{screen_name:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=o.sent(),t(Gt.CONFIG,i,{update:!0,screen_name:n}),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e).catch((function(t){return Wt.error(t)}))},setUserId:function(t,e){(function(t,e,n,r){return i(this,void 0,void 0,(function(){var i;return o(this,(function(o){switch(o.label){case 0:return r&&r.global?(t(Gt.SET,{user_id:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=o.sent(),t(Gt.CONFIG,i,{update:!0,user_id:n}),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e).catch((function(t){return Wt.error(t)}))},setUserProperties:function(t,e){(function(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:if(!r||!r.global)return[3,1];for(i={},s=0,a=Object.keys(n);s<a.length;s++)u=a[s],i["user_properties."+u]=n[u];return t(Gt.SET,i),[2,Promise.resolve()];case 1:return[4,e];case 2:c=o.sent(),t(Gt.CONFIG,c,{update:!0,user_properties:n}),o.label=3;case 3:return[2]}}))}))})(oe,se[n],t,e).catch((function(t){return Wt.error(t)}))},setAnalyticsCollectionEnabled:function(t){(function(t,e){return i(this,void 0,void 0,(function(){var n;return o(this,(function(r){switch(r.label){case 0:return[4,t];case 1:return n=r.sent(),window["ga-disable-"+n]=!e,[2]}}))}))})(se[n],t).catch((function(t){return Wt.error(t)}))},INTERNAL:{delete:function(){return delete se[n],Promise.resolve()}}}}var de="analytics";function ve(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:if(d())return[2,!1];if(!g())return[2,!1];if(!v())return[2,!1];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,y()];case 2:return[2,t.sent()];case 3:return t.sent(),[2,!1];case 4:return[2]}}))}))}!function(t){t.INTERNAL.registerComponent(new k(de,(function(t){return pe(t.getProvider("app").getImmediate(),t.getProvider("installations").getImmediate())}),"PUBLIC").setServiceProps({settings:le,EventName:zt,isSupported:ve})),t.INTERNAL.registerComponent(new k("analytics-internal",(function(t){try{return{logEvent:t.getProvider(de).getImmediate().logEvent}}catch(t){throw Qt.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),t.registerVersion("@firebase/analytics","0.6.2")}(et),function(){var t,e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},r=function(t){t=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g,t];for(var e=0;e<t.length;++e){var r=t[e];if(r&&r.Math==Math)return r}return globalThis}(this);function i(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function o(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:i(t)}}!function(t,n){if(n){var i=r;t=t.split(".");for(var o=0;o<t.length-1;o++){var s=t[o];s in i||(i[s]={}),i=i[s]}(n=n(o=i[t=t[t.length-1]]))!=o&&null!=n&&e(i,t,{configurable:!0,writable:!0,value:n})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function i(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var s=r.setTimeout;n.prototype.c=function(t){s(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.v),reject:t(this.g)}},e.prototype.v=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.o(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.m(t):this.h(t)}},e.prototype.m=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.u(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)a.b(this.a[t]);this.a=null}};var a=new n;return e.prototype.o=function(t){var e=this.f();t.Pa(e.resolve,e.reject)},e.prototype.u=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{i(t(e))}catch(t){o(t)}}:e}var i,o,s=new e((function(t,e){i=t,o=e}));return this.Pa(r(t,i),r(n,o)),s},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Pa=function(t,e){function n(){switch(r.b){case 1:t(r.c);break;case 2:e(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?a.b(n):this.a.push(n)},e.resolve=i,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var r=o(t),s=r.next();!s.done;s=r.next())i(s.value).Pa(e,n)}))},e.all=function(t){var n=o(t),r=n.next();return r.done?i([]):new e((function(t,e){function o(e){return function(n){s[e]=n,0==--a&&t(s)}}var s=[],a=0;do{s.push(void 0),a++,i(r.value).Pa(o(s.length-1),e),r=n.next()}while(!r.done)}))},e}));var s=s||{},a=this||self,u=/^[\w+/_-]+[=]{0,2}$/,c=null;function h(t){return(t=t.querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&u.test(t)?t:""}function f(){}function l(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function p(t){var e=l(t);return"array"==e||"object"==e&&"number"==typeof t.length}function d(t){return"function"==l(t)}function v(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function y(t){return Object.prototype.hasOwnProperty.call(t,g)&&t[g]||(t[g]=++m)}var g="closure_uid_"+(1e9*Math.random()>>>0),m=0;function b(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function I(t,e,n){return(I=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?b:w).apply(null,arguments)}function E(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var A=Date.now;function _(t,e){function n(){}n.prototype=e.prototype,t.$a=e.prototype,t.prototype=new n,t.prototype.constructor=t}function T(t){return t}function S(t,e,n){this.code=C+t,this.message=e||x[t]||"",this.a=n||null}function N(t){var e=t&&t.code;return e?new S(e.substring(C.length),t.message,t.serverResponse):null}_(S,Error),S.prototype.w=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},S.prototype.toJSON=function(){return this.w()};var k,C="auth/",x={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},O={kd:{Sa:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},rd:{Sa:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://securetoken.googleapis.com/v1/token",Va:"https://identitytoolkit.googleapis.com/v2/",id:"p"},td:{Sa:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},ud:{Sa:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Ya:"https://test-securetoken.sandbox.googleapis.com/v1/token",Va:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function D(t){for(var e in O)if(O[e].id===t)return{firebaseEndpoint:(t=O[e]).Sa,secureTokenEndpoint:t.Ya,identityPlatformEndpoint:t.Va};return null}function P(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function R(t){if(Error.captureStackTrace)Error.captureStackTrace(this,R);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function L(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");R.call(this,n+t[r])}function M(t,e){throw new L("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function V(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function j(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function U(){this.b=this.a=null}k=D("__EID__")?"__EID__":void 0,_(R,Error),R.prototype.name="CustomError",_(L,R),L.prototype.name="AssertionError",V.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var B=new V((function(){return new q}),(function(t){t.reset()}));function F(){var t=we,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function q(){this.next=this.b=this.a=null}U.prototype.add=function(t,e){var n=B.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},q.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},q.prototype.reset=function(){this.next=this.b=this.a=null};var G=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},z=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)},K=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=[],i=0,o="string"==typeof t?t.split(""):t,s=0;s<n;s++)if(s in o){var a=o[s];e.call(void 0,a,s,t)&&(r[i++]=a)}return r},H=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),i="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in i&&(r[o]=e.call(void 0,i[o],o,t));return r},W=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function X(t,e){return 0<=G(t,e)}function Y(t,e){var n;return(n=0<=(e=G(t,e)))&&Array.prototype.splice.call(t,e,1),n}function J(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,r=t.length-1;0<=r;--r)r in n&&e.call(void 0,n[r],r,t)}(t,(function(n,r){e.call(void 0,n,r,t)&&Array.prototype.splice.call(t,r,1).length}))}function Q(t){return Array.prototype.concat.apply([],arguments)}function $(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}var Z,tt=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},nt=/&/g,rt=/</g,it=/>/g,ot=/"/g,st=/'/g,at=/\x00/g,ut=/[\x00&<>"']/;function ct(t,e){return-1!=t.indexOf(e)}function ht(t,e){return t<e?-1:t>e?1:0}t:{var ft=a.navigator;if(ft){var lt=ft.userAgent;if(lt){Z=lt;break t}}Z=""}function pt(t){return ct(Z,t)}function dt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function vt(t){for(var e in t)return!1;return!0}function yt(t){var e,n={};for(e in t)n[e]=t[e];return n}var gt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function mt(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<gt.length;o++)n=gt[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function bt(t,e){t:{try{var n=t&&t.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||a).Element&&r.Location){var i=r;break t}}catch(t){}i=null}if(i&&void 0!==i[e]&&(!t||!(t instanceof i[e])&&(t instanceof i.Location||t instanceof i.Element))){if(v(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;M("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function wt(t,e){this.a=t===_t&&e||"",this.b=At}function It(t){return t instanceof wt&&t.constructor===wt&&t.b===At?t.a:(M("expected object of type Const, got '"+t+"'"),"type_error:Const")}wt.prototype.sa=!0,wt.prototype.ra=function(){return this.a},wt.prototype.toString=function(){return"Const{"+this.a+"}"};var Et,At={},_t={};function Tt(){if(void 0===Et){var t=null,e=a.trustedTypes;if(e&&e.createPolicy){try{t=e.createPolicy("goog#html",{createHTML:T,createScript:T,createScriptURL:T})}catch(t){a.console&&a.console.error(t.message)}Et=t}else Et=t}return Et}function St(t,e){this.a=e===Ot?t:""}function Nt(t){return t instanceof St&&t.constructor===St?t.a:(M("expected object of type TrustedResourceUrl, got '"+t+"' of type "+l(t)),"type_error:TrustedResourceUrl")}function kt(t,e){var n=It(t);if(!xt.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=Tt();return new St(t=e?e.createScriptURL(t):t,Ot)}(t=n.replace(Ct,(function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof wt?It(t):encodeURIComponent(String(t))})))}St.prototype.sa=!0,St.prototype.ra=function(){return this.a.toString()},St.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var Ct=/%{(\w+)}/g,xt=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Ot={};function Dt(t,e){this.a=e===Ut?t:""}function Pt(t){return t instanceof Dt&&t.constructor===Dt?t.a:(M("expected object of type SafeUrl, got '"+t+"' of type "+l(t)),"type_error:SafeUrl")}Dt.prototype.sa=!0,Dt.prototype.ra=function(){return this.a.toString()},Dt.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Rt=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Lt=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Mt=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Vt(t){if(t instanceof Dt)return t;if(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t))t=new Dt(t,Ut);else{var e=(t=(t=String(t)).replace(/(%0A|%0D)/g,"")).match(Lt);t=e&&Rt.test(e[1])?new Dt(t,Ut):null}return t}function jt(t){return t instanceof Dt?t:(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t)||(t="about:invalid#zClosurez"),new Dt(t,Ut))}var Ut={},Bt=new Dt("about:invalid#zClosurez",Ut);function Ft(t,e,n){this.a=n===qt?t:""}Ft.prototype.sa=!0,Ft.prototype.ra=function(){return this.a.toString()},Ft.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var qt={};function Gt(t,e,n,r){return t=t instanceof Dt?t:jt(t),e=e||a,n=n instanceof wt?It(n):n||"",e.open(Pt(t),n,r,void 0)}function zt(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Kt(t){return ut.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(nt,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(rt,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(it,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(ot,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(st,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(at,"&#0;"))),t}function Ht(t){return Ht[" "](t),t}Ht[" "]=f;var Wt,Xt,Yt=pt("Opera"),Jt=pt("Trident")||pt("MSIE"),Qt=pt("Edge"),$t=Qt||Jt,Zt=pt("Gecko")&&!(ct(Z.toLowerCase(),"webkit")&&!pt("Edge"))&&!(pt("Trident")||pt("MSIE"))&&!pt("Edge"),te=ct(Z.toLowerCase(),"webkit")&&!pt("Edge");function ee(){var t=a.document;return t?t.documentMode:void 0}t:{var ne="",re=(Xt=Z,Zt?/rv:([^\);]+)(\)|;)/.exec(Xt):Qt?/Edge\/([\d\.]+)/.exec(Xt):Jt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Xt):te?/WebKit\/(\S+)/.exec(Xt):Yt?/(?:Version)[ \/]?(\S+)/.exec(Xt):void 0);if(re&&(ne=re?re[1]:""),Jt){var ie=ee();if(null!=ie&&ie>parseFloat(ne)){Wt=String(ie);break t}}Wt=ne}var oe,se={};function ae(t){return function(t,e){var n=se;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=tt(String(Wt)).split("."),r=tt(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var s=n[o]||"",a=r[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],0==s[0].length&&0==a[0].length)break;e=ht(0==s[1].length?0:parseInt(s[1],10),0==a[1].length?0:parseInt(a[1],10))||ht(0==s[2].length,0==a[2].length)||ht(s[2],a[2]),s=s[3],a=a[3]}while(0==e)}return 0<=e}))}a.document&&Jt?oe=ee()||parseInt(Wt,10)||void 0:oe=void 0;var ue=oe;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Xt){}var ce=!Jt||9<=Number(ue);function he(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function fe(t,e){dt(e,(function(e,n){e&&"object"==typeof e&&e.sa&&(e=e.ra()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:de.hasOwnProperty(n)?t.setAttribute(de[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var le,pe,de={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function ve(t,e,n){function r(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];if(!p(o)||v(o)&&0<o.nodeType)r(o);else{t:{if(o&&"number"==typeof o.length){if(v(o)){var s="function"==typeof o.item||"string"==typeof o.item;break t}if(d(o)){s="function"==typeof o.item;break t}}s=!1}z(s?$(o):o,r)}}}function ye(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function ge(t){a.setTimeout((function(){throw t}),0)}function me(t,e){pe||function(){if(a.Promise&&a.Promise.resolve){var t=a.Promise.resolve(void 0);pe=function(){t.then(Ie)}}else pe=function(){var t=Ie;!d(a.setImmediate)||a.Window&&a.Window.prototype&&!pt("Edge")&&a.Window.prototype.setImmediate==a.setImmediate?(le||(le=function(){var t=a.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!pt("Presto")&&(t=function(){var t=ye(document,"IFRAME");t.style.display="none",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=I((function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!pt("Trident")&&!pt("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Fb;n.Fb=null,t()}},function(t){r.next={Fb:t},r=r.next,e.port2.postMessage(0)}}return function(t){a.setTimeout(t,0)}}()),le(t)):a.setImmediate(t)}}(),be||(pe(),be=!0),we.add(t,e)}var be=!1,we=new U;function Ie(){for(var t;t=F();){try{t.a.call(t.b)}catch(t){ge(t)}j(B,t)}be=!1}function Ee(t,e){if(this.a=Ae,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=f)try{var n=this;t.call(e,(function(t){Me(n,_e,t)}),(function(t){if(!(t instanceof Ge))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Me(n,Te,t)}))}catch(t){Me(this,Te,t)}}var Ae=0,_e=2,Te=3;function Se(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Se.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Ne=new V((function(){return new Se}),(function(t){t.reset()}));function ke(t,e,n){var r=Ne.get();return r.g=t,r.b=e,r.f=n,r}function Ce(t){if(t instanceof Ee)return t;var e=new Ee(f);return Me(e,_e,t),e}function xe(t){return new Ee((function(e,n){n(t)}))}function Oe(t,e,n){Ve(t,e,n,null)||me(E(e,t))}function De(t){return new Ee((function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Ob:!0,value:o}:{Ob:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)Oe(t[o],E(i,o,!0),E(i,o,!1));else e(r)}))}function Pe(t,e){if(t.a==Ae)if(t.c){var n=t.c;if(n.b){for(var r=0,i=null,o=null,s=n.b;s&&(s.c||(r++,s.a==t&&(i=s),!(i&&1<r)));s=s.next)i||(o=s);i&&(n.a==Ae&&1==r?Pe(n,e):(o?((r=o).next==n.f&&(n.f=r),r.next=r.next.next):Ue(n),Be(n,i,Te,e)))}t.c=null}else Me(t,Te,e)}function Re(t,e){t.b||t.a!=_e&&t.a!=Te||je(t),t.f?t.f.next=e:t.b=e,t.f=e}function Le(t,e,n,r){var i=ke(null,null,null);return i.a=new Ee((function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof Ge?o(e):t(i)}catch(t){o(t)}}:o})),i.a.c=t,Re(t,i),i.a}function Me(t,e,n){t.a==Ae&&(t===n&&(e=Te,n=new TypeError("Promise cannot resolve to itself")),t.a=1,Ve(n,t.Zc,t.$c,t)||(t.i=n,t.a=e,t.c=null,je(t),e!=Te||n instanceof Ge||function(t,e){t.g=!0,me((function(){t.g&&qe.call(null,e)}))}(t,n)))}function Ve(t,e,n,r){if(t instanceof Ee)return Re(t,ke(e||f,n||null,r)),!0;if(P(t))return t.then(e,n,r),!0;if(v(t))try{var i=t.then;if(d(i))return function(t,e,n,r,i){function o(t){s||(s=!0,r.call(i,t))}var s=!1;try{e.call(t,(function(t){s||(s=!0,n.call(i,t))}),o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function je(t){t.h||(t.h=!0,me(t.fc,t))}function Ue(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Be(t,e,n,r){if(n==Te&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Fe(e,n,r);else try{e.c?e.g.call(e.f):Fe(e,n,r)}catch(t){qe.call(null,t)}j(Ne,e)}function Fe(t,e,n){e==_e?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}Ee.prototype.then=function(t,e,n){return Le(this,d(t)?t:null,d(e)?e:null,n)},Ee.prototype.$goog_Thenable=!0,(t=Ee.prototype).na=function(t,e){return(t=ke(t,t,e)).c=!0,Re(this,t),this},t.s=function(t,e){return Le(this,null,t,e)},t.cancel=function(t){if(this.a==Ae){var e=new Ge(t);me((function(){Pe(this,e)}),this)}},t.Zc=function(t){this.a=Ae,Me(this,_e,t)},t.$c=function(t){this.a=Ae,Me(this,Te,t)},t.fc=function(){for(var t;t=Ue(this);)Be(this,t,this.a,this.i);this.h=!1};var qe=ge;function Ge(t){R.call(this,t)}function ze(){0!=Ke&&(He[y(this)]=this),this.xa=this.xa,this.oa=this.oa}_(Ge,R),Ge.prototype.name="cancel";var Ke=0,He={};function We(t){if(!t.xa&&(t.xa=!0,t.Da(),0!=Ke)){var e=y(t);if(0!=Ke&&t.oa&&0<t.oa.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete He[e]}}ze.prototype.xa=!1,ze.prototype.Da=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()};var Xe=Object.freeze||function(t){return t},Ye=!Jt||9<=Number(ue),Je=Jt&&!ae("9"),Qe=function(){if(!a.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{a.addEventListener("test",f,e),a.removeEventListener("test",f,e)}catch(t){}return t}();function $e(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Ze(t,e){if($e.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Zt){t:{try{Ht(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:tn[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}$e.prototype.preventDefault=function(){this.defaultPrevented=!0},_(Ze,$e);var tn=Xe({2:"touch",3:"pen",4:"mouse"});Ze.prototype.preventDefault=function(){Ze.$a.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Je)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Ze.prototype.g=function(){return this.a};var en="closure_listenable_"+(1e6*Math.random()|0),nn=0;function rn(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.Ua=i,this.key=++nn,this.va=this.Oa=!1}function on(t){t.va=!0,t.listener=null,t.proxy=null,t.src=null,t.Ua=null}function sn(t){this.src=t,this.a={},this.b=0}function an(t,e){var n=e.type;n in t.a&&Y(t.a[n],e)&&(on(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function un(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.va&&o.listener==e&&o.capture==!!n&&o.Ua==r)return i}return-1}sn.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var s=un(t,e,r,i);return-1<s?(e=t[s],n||(e.Oa=!1)):((e=new rn(e,this.src,o,!!r,i)).Oa=n,t.push(e)),e};var cn="closure_lm_"+(1e6*Math.random()|0),hn={};function fn(t,e,n,r,i){if(r&&r.once)pn(t,e,n,r,i);else if(Array.isArray(e))for(var o=0;o<e.length;o++)fn(t,e[o],n,r,i);else n=En(n),t&&t[en]?_n(t,e,n,v(r)?!!r.capture:!!r,i):ln(t,e,n,!1,r,i)}function ln(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var s=v(i)?!!i.capture:!!i,a=wn(t);if(a||(t[cn]=a=new sn(t)),!(n=a.add(e,n,r,s,o)).proxy)if(r=function(){var t=bn,e=Ye?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)Qe||(i=s),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(yn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}}function pn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)pn(t,e[o],n,r,i);else n=En(n),t&&t[en]?Tn(t,e,n,v(r)?!!r.capture:!!r,i):ln(t,e,n,!0,r,i)}function dn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)dn(t,e[o],n,r,i);else r=v(r)?!!r.capture:!!r,n=En(n),t&&t[en]?(t=t.v,(e=String(e).toString())in t.a&&-1<(n=un(o=t.a[e],n,r,i))&&(on(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=wn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=un(e,n,r,i)),(n=-1<t?e[t]:null)&&vn(n))}function vn(t){if("number"!=typeof t&&t&&!t.va){var e=t.src;if(e&&e[en])an(e.v,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(yn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=wn(e))?(an(n,t),0==n.b&&(n.src=null,e[cn]=null)):on(t)}}}function yn(t){return t in hn?hn[t]:hn[t]="on"+t}function gn(t,e,n,r){var i=!0;if((t=wn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.va&&(o=mn(o,r),i=i&&!1!==o)}return i}function mn(t,e){var n=t.listener,r=t.Ua||t.src;return t.Oa&&vn(t),n.call(r,e)}function bn(t,e){if(t.va)return!0;if(!Ye){if(!e)t:{e=["window","event"];for(var n=a,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}if(e=new Ze(r=e,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){t:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=e.b;i;i=i.parentNode)r.push(i);for(t=t.type,i=r.length-1;0<=i;i--){e.b=r[i];var o=gn(r[i],t,!0,e);n=n&&o}for(i=0;i<r.length;i++)e.b=r[i],o=gn(r[i],t,!1,e),n=n&&o}return n}return mn(t,new Ze(e,this))}function wn(t){return(t=t[cn])instanceof sn?t:null}var In="__closure_events_fn_"+(1e9*Math.random()>>>0);function En(t){return d(t)?t:(t[In]||(t[In]=function(e){return t.handleEvent(e)}),t[In])}function An(){ze.call(this),this.v=new sn(this),this.$b=this,this.fb=null}function _n(t,e,n,r,i){t.v.add(String(e),n,!1,r,i)}function Tn(t,e,n,r,i){t.v.add(String(e),n,!0,r,i)}function Sn(t,e,n,r){if(!(e=t.v.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var s=e[o];if(s&&!s.va&&s.capture==n){var a=s.listener,u=s.Ua||s.src;s.Oa&&an(t.v,s),i=!1!==a.call(u,r)&&i}}return i&&!r.defaultPrevented}function Nn(t,e,n){if(d(t))n&&(t=I(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=I(t.handleEvent,t)}return 2147483647<Number(e)?-1:a.setTimeout(t,e||0)}function kn(t){var e=null;return new Ee((function(n,r){-1==(e=Nn((function(){n(void 0)}),t))&&r(Error("Failed to schedule timer."))})).s((function(t){throw a.clearTimeout(e),t}))}function Cn(t){if(t.V&&"function"==typeof t.V)return t.V();if("string"==typeof t)return t.split("");if(p(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function xn(t){if(t.Y&&"function"==typeof t.Y)return t.Y();if(!t.V||"function"!=typeof t.V){if(p(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function On(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof On)for(n=t.Y(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Dn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Pn(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Pn(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Pn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}_(An,ze),An.prototype[en]=!0,An.prototype.addEventListener=function(t,e,n,r){fn(this,t,e,n,r)},An.prototype.removeEventListener=function(t,e,n,r){dn(this,t,e,n,r)},An.prototype.dispatchEvent=function(t){var e,n=this.fb;if(n)for(e=[];n;n=n.fb)e.push(n);n=this.$b;var r=t.type||t;if("string"==typeof t)t=new $e(t,n);else if(t instanceof $e)t.target=t.target||n;else{var i=t;mt(t=new $e(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var s=t.b=e[o];i=Sn(s,r,!0,t)&&i}if(i=Sn(s=t.b=n,r,!0,t)&&i,i=Sn(s,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=Sn(s=t.b=e[o],r,!1,t)&&i;return i},An.prototype.Da=function(){if(An.$a.Da.call(this),this.v){var t,e=this.v;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)on(n[r]);delete e.a[t],e.b--}}this.fb=null},(t=On.prototype).V=function(){Dn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.Y=function(){return Dn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Pn(this.b,t)?this.b[t]:e},t.set=function(t,e){Pn(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.Y(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Rn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Ln(t,e){var n;this.a=this.l=this.f="",this.g=null,this.h=this.c="",this.i=!1,t instanceof Ln?(this.i=void 0!==e?e:t.i,Mn(this,t.f),this.l=t.l,this.a=t.a,Vn(this,t.g),this.c=t.c,jn(this,rr(t.b)),this.h=t.h):t&&(n=String(t).match(Rn))?(this.i=!!e,Mn(this,n[1]||"",!0),this.l=Gn(n[2]||""),this.a=Gn(n[3]||"",!0),Vn(this,n[4]),this.c=Gn(n[5]||"",!0),jn(this,n[6]||"",!0),this.h=Gn(n[7]||"")):(this.i=!!e,this.b=new Qn(null,this.i))}function Mn(t,e,n){t.f=n?Gn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Vn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.g=e}else t.g=null}function jn(t,e,n){e instanceof Qn?(t.b=e,function(t,e){e&&!t.f&&($n(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(tr(this,e),nr(this,n,t))}),t)),t.f=e}(t.b,t.i)):(n||(e=zn(e,Yn)),t.b=new Qn(e,t.i))}function Un(t,e,n){t.b.set(e,n)}function Bn(t,e){return t.b.get(e)}function Fn(t){return t instanceof Ln?new Ln(t):new Ln(t,void 0)}function qn(t,e,n,r){var i=new Ln(null,void 0);return t&&Mn(i,t),e&&(i.a=e),n&&Vn(i,n),r&&(i.c=r),i}function Gn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function zn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Kn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Kn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Ln.prototype.toString=function(){var t=[],e=this.f;e&&t.push(zn(e,Hn,!0),":");var n=this.a;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(zn(e,Hn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.g)&&t.push(":",String(n))),(n=this.c)&&(this.a&&"/"!=n.charAt(0)&&t.push("/"),t.push(zn(n,"/"==n.charAt(0)?Xn:Wn,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.h)&&t.push("#",zn(n,Jn)),t.join("")},Ln.prototype.resolve=function(t){var e=new Ln(this),n=!!t.f;n?Mn(e,t.f):n=!!t.l,n?e.l=t.l:n=!!t.a,n?e.a=t.a:n=null!=t.g;var r=t.c;if(n)Vn(e,t.g);else if(n=!!t.c){if("/"!=r.charAt(0))if(this.a&&!this.c)r="/"+r;else{var i=e.c.lastIndexOf("/");-1!=i&&(r=e.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(ct(i,"./")||ct(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],s=0;s<i.length;){var a=i[s++];"."==a?r&&s==i.length&&o.push(""):".."==a?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&s==i.length&&o.push("")):(o.push(a),r=!0)}r=o.join("/")}else r=i}return n?e.c=r:n=""!==t.b.toString(),n?jn(e,rr(t.b)):n=!!t.h,n&&(e.h=t.h),e};var Hn=/[#\/\?@]/g,Wn=/[#\?:]/g,Xn=/[#\?]/g,Yn=/[#\?@]/g,Jn=/#/g;function Qn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function $n(t){t.a||(t.a=new On,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Zn(t){var e=xn(t);if(void 0===e)throw Error("Keys are undefined");var n=new Qn(null,void 0);t=Cn(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];Array.isArray(o)?nr(n,i,o):n.add(i,o)}return n}function tr(t,e){$n(t),e=ir(t,e),Pn(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Pn((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Dn(t)))}function er(t,e){return $n(t),e=ir(t,e),Pn(t.a.b,e)}function nr(t,e,n){tr(t,e),0<n.length&&(t.c=null,t.a.set(ir(t,e),$(n)),t.b+=n.length)}function rr(t){var e=new Qn;return e.c=t.c,t.a&&(e.a=new On(t.a),e.b=t.b),e}function ir(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function or(t){var e=[];return ar(new sr,t,e),e.join("")}function sr(){}function ar(t,e,n){if(null==e)n.push("null");else{if("object"==typeof e){if(Array.isArray(e)){var r=e;e=r.length,n.push("[");for(var i="",o=0;o<e;o++)n.push(i),ar(t,r[o],n),i=",";return void n.push("]")}if(!(e instanceof String||e instanceof Number||e instanceof Boolean)){for(r in n.push("{"),i="",e)Object.prototype.hasOwnProperty.call(e,r)&&"function"!=typeof(o=e[r])&&(n.push(i),hr(r,n),n.push(":"),ar(t,o,n),i=",");return void n.push("}")}e=e.valueOf()}switch(typeof e){case"string":hr(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?String(e):"null");break;case"boolean":n.push(String(e));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof e)}}}(t=Qn.prototype).add=function(t,e){$n(this),this.c=null,t=ir(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){$n(this),this.a.forEach((function(n,r){z(n,(function(n){t.call(e,n,r,this)}),this)}),this)},t.Y=function(){$n(this);for(var t=this.a.V(),e=this.a.Y(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.V=function(t){$n(this);var e=[];if("string"==typeof t)er(this,t)&&(e=Q(e,this.a.get(ir(this,t))));else{t=this.a.V();for(var n=0;n<t.length;n++)e=Q(e,t[n])}return e},t.set=function(t,e){return $n(this),this.c=null,er(this,t=ir(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return t&&0<(t=this.V(t)).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.Y(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.V(r);for(var o=0;o<r.length;o++){var s=i;""!==r[o]&&(s+="="+encodeURIComponent(String(r[o]))),t.push(s)}}return this.c=t.join("&")};var ur={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},cr=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function hr(t,e){e.push('"',t.replace(cr,(function(t){var e=ur[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ur[t]=e),e})),'"')}function fr(){var t=Or();return Jt&&!!ue&&11==ue||/Edge\/\d+/.test(t)}function lr(){return a.window&&a.window.location.href||self&&self.location&&self.location.href||""}function pr(t,e){e=e||a.window;var n="about:blank";t&&(n=Pt(Vt(t)||Bt)),e.location.href=n}function dr(t,e){var n,r=[];for(n in t)n in e?typeof t[n]!=typeof e[n]?r.push(n):"object"==typeof t[n]&&null!=t[n]&&null!=e[n]?0<dr(t[n],e[n]).length&&r.push(n):t[n]!==e[n]&&r.push(n):r.push(n);for(n in e)n in t||r.push(n);return r}function vr(t){return!!((t=(t||Or()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function yr(t){t=t||a.window;try{t.close()}catch(t){}}function gr(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(s in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Or().toLowerCase(),r&&(e.target=r,ct(n,"crios/")&&(e.target="_blank")),kr(Or())==Sr&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof Dt?n:Vt(void 0!==n.href?n.href:String(n))||Bt,n=t.target||n.target,i=[],t)switch(s){case"width":case"height":case"top":case"left":i.push(s+"="+t[s]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(s+"="+(t[s]?1:0))}var s=i.join(",");if((pt("iPhone")&&!pt("iPod")&&!pt("iPad")||pt("iPad")||pt("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(bt(s=ye(document,"A"),"HTMLAnchorElement"),e=e instanceof Dt?e:jt(e),s.href=Pt(e),s.setAttribute("target",n),t.noreferrer&&s.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),s.dispatchEvent(t),s={}):t.noreferrer?(s=Gt("",r,n,s),t=Pt(e),s&&($t&&ct(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),s.opener=null,t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Kt(t)+'">',t=new Ft(t=(r=Tt())?r.createHTML(t):t,null,qt),r=s.document)&&(r.write(function(t){return t instanceof Ft&&t.constructor===Ft?t.a:(M("expected object of type SafeHtml, got '"+t+"' of type "+l(t)),"type_error:SafeHtml")}(t)),r.close())):(s=Gt(e,r,n,s))&&t.noopener&&(s.opener=null),s)try{s.focus()}catch(t){}return s}var mr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,br=/^[^@]+@[^@]+$/;function wr(){var t=null;return new Ee((function(e){"complete"==a.document.readyState?e():(t=function(){e()},pn(window,"load",t))})).s((function(e){throw dn(window,"load",t),e}))}function Ir(t){return t=t||Or(),!("file:"!==Mr()&&"ionic:"!==Mr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function Er(){var t=a.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Ar(){return void 0!==a.WorkerGlobalScope&&"function"==typeof a.importScripts}function _r(){return et.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":et.INTERNAL.hasOwnProperty("node")?"Node":Ar()?"Worker":"Browser"}function Tr(){var t=_r();return"ReactNative"===t||"Node"===t}var Sr="Firefox",Nr="Chrome";function kr(t){var e=t.toLowerCase();return ct(e,"opera/")||ct(e,"opr/")||ct(e,"opios/")?"Opera":ct(e,"iemobile")?"IEMobile":ct(e,"msie")||ct(e,"trident/")?"IE":ct(e,"edge/")?"Edge":ct(e,"firefox/")?Sr:ct(e,"silk/")?"Silk":ct(e,"blackberry")?"Blackberry":ct(e,"webos")?"Webos":!ct(e,"safari/")||ct(e,"chrome/")||ct(e,"crios/")||ct(e,"android")?!ct(e,"chrome/")&&!ct(e,"crios/")||ct(e,"edge/")?ct(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":Nr:"Safari"}var Cr={ld:"FirebaseCore-web",nd:"FirebaseUI-web"};function xr(t,e){e=e||[];var n,r=[],i={};for(n in Cr)i[Cr[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=_r())?r=kr(i=Or()):"Worker"===r&&(r=kr(i=Or())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function Or(){return a.navigator&&a.navigator.userAgent||""}function Dr(t,e){t=t.split("."),e=e||a;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function Pr(){try{var t=a.localStorage,e=Fr();if(t)return t.setItem(e,"1"),t.removeItem(e),!fr()||!!a.indexedDB}catch(t){return Ar()&&!!a.indexedDB}return!1}function Rr(){return(Lr()||"chrome-extension:"===Mr()||Ir())&&!Tr()&&Pr()&&!Ar()}function Lr(){return"http:"===Mr()||"https:"===Mr()}function Mr(){return a.location&&a.location.protocol||null}function Vr(t){return!vr(t=t||Or())&&kr(t)!=Sr}function jr(t){return void 0===t?null:or(t)}function Ur(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Br(t){if(null!==t)return JSON.parse(t)}function Fr(t){return t||Math.floor(1e9*Math.random()).toString()}function qr(t){return"Safari"!=kr(t=t||Or())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Gr(){var t=a.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function zr(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Or(),e=_r(),this.b=vr(t)||"ReactNative"===e}function Kr(){var t=a.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Hr(t){"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t)}function Wr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Xr(){return!(!Dr("fireauth.oauthhelper",a)&&!Dr("fireauth.iframe",a))}zr.prototype.get=function(){var t=a.navigator;return!t||"boolean"!=typeof t.onLine||!Lr()&&"chrome-extension:"!==Mr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Yr,Jr={};function Qr(t){Jr[t]||(Jr[t]=!0,Hr(t))}try{var $r={};Object.defineProperty($r,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty($r,"abcd",{configurable:!0,enumerable:!0,value:2}),Yr=2==$r.abcd}catch(Xt){Yr=!1}function Zr(t,e,n){Yr?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function ti(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Zr(t,n,e[n])}function ei(t){var e={};return ti(e,t),e}function ni(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Zr(e,n,ni(t[n]));return e}function ri(t){var e=t&&(t[ui]?"phone":null);if(!(e&&t&&t[ai]))throw new S("internal-error","Internal assert: invalid MultiFactorInfo object");Zr(this,"uid",t[ai]),Zr(this,"displayName",t[oi]||null);var n=null;t[si]&&(n=new Date(t[si]).toUTCString()),Zr(this,"enrollmentTime",n),Zr(this,"factorId",e)}function ii(t){try{var e=new ci(t)}catch(t){e=null}return e}ri.prototype.w=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var oi="displayName",si="enrolledAt",ai="mfaEnrollmentId",ui="phoneInfo";function ci(t){ri.call(this,t),Zr(this,"phoneNumber",t[ui])}function hi(t){var e={},n=t[di],r=t[yi],i=t[gi];if(t=ii(t[vi]),!i||i!=li&&i!=pi&&!n||i==pi&&!r||i==fi&&!t)throw Error("Invalid checkActionCode response!");i==pi?(e[bi]=n||null,e[Ii]=n||null,e[mi]=r):(e[bi]=r||null,e[Ii]=r||null,e[mi]=n||null),e[wi]=t||null,Zr(this,Ai,i),Zr(this,Ei,ni(e))}_(ci,ri),ci.prototype.w=function(){var t=ci.$a.w.call(this);return t.phoneNumber=this.phoneNumber,t};var fi="REVERT_SECOND_FACTOR_ADDITION",li="EMAIL_SIGNIN",pi="VERIFY_AND_CHANGE_EMAIL",di="email",vi="mfaInfo",yi="newEmail",gi="requestType",mi="email",bi="fromEmail",wi="multiFactorInfo",Ii="previousEmail",Ei="data",Ai="operation";function _i(t){var e=Bn(t=Fn(t),Ti)||null,n=Bn(t,Si)||null,r=Bn(t,Ci)||null;if(r=r&&Oi[r]||null,!e||!n||!r)throw new S("argument-error",Ti+", "+Si+"and "+Ci+" are required in a valid action code URL.");ti(this,{apiKey:e,operation:r,code:n,continueUrl:Bn(t,Ni)||null,languageCode:Bn(t,ki)||null,tenantId:Bn(t,xi)||null})}var Ti="apiKey",Si="oobCode",Ni="continueUrl",ki="languageCode",Ci="mode",xi="tenantId",Oi={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:fi,signIn:li,verifyAndChangeEmail:pi,verifyEmail:"VERIFY_EMAIL"};function Di(t){try{return new _i(t)}catch(t){return null}}function Pi(t){var e=t[ji];if(void 0===e)throw new S("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new S("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Ri];if(n&&"object"==typeof n){e=n[Fi];var r=n[Ui];if(n=n[Bi],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new S("argument-error",Ui+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new S("argument-error",Bi+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new S("argument-error",Fi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new S("missing-android-pkg-name")}}else if(void 0!==n)throw new S("argument-error",Ri+" property must be a non null object when specified.");if(this.f=null,(e=t[Vi])&&"object"==typeof e){if("string"==typeof(e=e[qi])&&e.length)this.f=e;else if(void 0!==e)throw new S("argument-error",qi+" property must be a non empty string when specified.")}else if(void 0!==e)throw new S("argument-error",Vi+" property must be a non null object when specified.");if(void 0!==(e=t[Mi])&&"boolean"!=typeof e)throw new S("argument-error",Mi+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[Li])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new S("argument-error",Li+" property must be a non empty string when specified.");this.i=t||null}var Ri="android",Li="dynamicLinkDomain",Mi="handleCodeInApp",Vi="iOS",ji="url",Ui="installApp",Bi="minimumVersion",Fi="packageName",qi="bundleId";function Gi(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var zi=null;function Ki(t){var e=Wi(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.g=t,this.c=e.exp,this.h=e.sub,A(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Hi(t){try{return new Ki(t)}catch(t){return null}}function Wi(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(function(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=zi[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!zi){zi={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=t.concat(e[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===zi[o]&&(zi[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),s=n(64),a=n(64);if(64===a&&-1===i)break;e(i<<2|o>>4),64!=s&&(e(o<<4&240|s>>2),64!=a&&e(s<<6&192|a))}}(t,(function(t){e+=String.fromCharCode(t)})),e}(t))}catch(t){}return null}Ki.prototype.S=function(){return this.f},Ki.prototype.i=function(){return this.b},Ki.prototype.toString=function(){return this.g};var Xi="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Yi=["client_id","response_type","scope","redirect_uri","state"],Ji={md:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Wa:Yi},od:{Ja:null,ua:500,ta:750,fa:"github.com",Wa:Yi},pd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Wa:Yi},vd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Wa:Xi},jd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Wa:[]}};function Qi(t){for(var e in Ji)if(Ji[e].fa==t)return Ji[e];return null}function $i(t){var e={};e["facebook.com"]=ro,e["google.com"]=oo,e["github.com"]=io,e["twitter.com"]=so;var n=t&&t[to];try{if(n)return e[n]?new e[n](t):new no(t);if(void 0!==t[Zi])return new eo(t)}catch(t){}return null}var Zi="idToken",to="providerId";function eo(t){var e=t[to];if(!e&&t[Zi]){var n=Hi(t[Zi]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Zr(this,"providerId",e),Zr(this,"isNewUser",n)}function no(t){eo.call(this,t),Zr(this,"profile",ni((t=Br(t.rawUserInfo||"{}"))||{}))}function ro(t){if(no.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function io(t){if(no.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",this.profile&&this.profile.login||null)}function oo(t){if(no.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function so(t){if(no.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",t.screenName||null)}function ao(t){var e=Fn(t),n=Bn(e,"link"),r=Bn(Fn(n),"link");return e=Bn(e,"deep_link_id"),Bn(Fn(e),"link")||e||r||n||t}function uo(t,e){if(!t&&!e)throw new S("internal-error","Internal assert: no raw session string available");if(t&&e)throw new S("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?co:ho}_(no,eo),_(ro,no),_(io,no),_(oo,no),_(so,no);var co="enroll",ho="signin";function fo(){}function lo(t,e){return t.then((function(t){if(t[ta]){var n=Hi(t[ta]);if(!n||e!=n.h)throw new S("user-mismatch");return t}throw new S("user-mismatch")})).s((function(t){throw t&&t.code&&t.code==C+"user-not-found"?new S("user-mismatch"):t}))}function po(t,e){if(!e)throw new S("internal-error","failed to construct a credential");this.a=e,Zr(this,"providerId",t),Zr(this,"signInMethod",t)}function vo(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function yo(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new po(t.providerId,t.pendingToken)}catch(t){}return null}function go(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Zr(this,"idToken",e.idToken),e.accessToken&&Zr(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Zr(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new S("internal-error","failed to construct a credential");Zr(this,"accessToken",e.oauthToken),Zr(this,"secret",e.oauthTokenSecret)}Zr(this,"providerId",t),Zr(this,"signInMethod",n)}function mo(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Zn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function bo(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new go(t.providerId,e,t.signInMethod)}catch(t){}}return null}function wo(t,e){this.Pc=e||[],ti(this,{providerId:t,isOAuthProvider:!0}),this.Hb={},this.ob=(Qi(t)||{}).Ja||null,this.nb=null}function Io(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new S("argument-error",'SAML provider IDs must be prefixed with "saml."');wo.call(this,t,[])}function Eo(t){wo.call(this,t,Yi),this.a=[]}function Ao(){Eo.call(this,"facebook.com")}function _o(t){if(!t)throw new S("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new Ao).credential({accessToken:e})}function To(){Eo.call(this,"github.com")}function So(t){if(!t)throw new S("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new To).credential({accessToken:e})}function No(){Eo.call(this,"google.com"),this.Ca("profile")}function ko(t,e){var n=t;return v(t)&&(n=t.idToken,e=t.accessToken),(new No).credential({idToken:n,accessToken:e})}function Co(){wo.call(this,"twitter.com",Xi)}function xo(t,e){var n=t;if(v(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new S("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new go("twitter.com",n,"twitter.com")}function Oo(t,e,n){this.a=t,this.f=e,Zr(this,"providerId","password"),Zr(this,"signInMethod",n===Po.EMAIL_LINK_SIGN_IN_METHOD?Po.EMAIL_LINK_SIGN_IN_METHOD:Po.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Do(t){return t&&t.email&&t.password?new Oo(t.email,t.password,t.signInMethod):null}function Po(){ti(this,{providerId:"password",isOAuthProvider:!1})}function Ro(t,e){if(!(e=Lo(e)))throw new S("argument-error","Invalid email link!");return new Oo(t,e.code,Po.EMAIL_LINK_SIGN_IN_METHOD)}function Lo(t){return(t=Di(t=ao(t)))&&t.operation===li?t:null}function Mo(t){if(!(t.cb&&t.bb||t.La&&t.ea))throw new S("internal-error");this.a=t,Zr(this,"providerId","phone"),this.fa="phone",Zr(this,"signInMethod","phone")}function Vo(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return z(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new Mo(e)}return null}function jo(t){return t.a.La&&t.a.ea?{temporaryProof:t.a.La,phoneNumber:t.a.ea}:{sessionInfo:t.a.cb,code:t.a.bb}}function Uo(t){try{this.a=t||et.auth()}catch(t){throw new S("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}ti(this,{providerId:"phone",isOAuthProvider:!1})}function Bo(t,e){if(!t)throw new S("missing-verification-id");if(!e)throw new S("missing-verification-code");return new Mo({cb:t,bb:e})}function Fo(t){if(t.temporaryProof&&t.phoneNumber)return new Mo({La:t.temporaryProof,ea:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret,i=t&&t.nonce,o=t&&t.oauthIdToken,s=t&&t.pendingToken;try{switch(e){case"google.com":return ko(o,n);case"facebook.com":return _o(n);case"github.com":return So(n);case"twitter.com":return xo(n,r);default:return n||r||o||s?s?0==e.indexOf("saml.")?new po(e,s):new go(e,{pendingToken:s,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new Eo(e).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(t){return null}}function qo(t){if(!t.isOAuthProvider)throw new S("invalid-oauth-provider")}function Go(t,e,n,r,i,o,s){if(this.c=t,this.b=e||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=s||null,this.a=i||null,!this.g&&!this.a)throw new S("invalid-auth-event");if(this.g&&this.a)throw new S("invalid-auth-event");if(this.g&&!this.f)throw new S("invalid-auth-event")}function zo(t){return(t=t||{}).type?new Go(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&N(t.error),t.postBody,t.tenantId):null}function Ko(){this.b=null,this.a=[]}uo.prototype.Ha=function(){return this.a?Ce(this.a):Ce(this.b)},uo.prototype.w=function(){return this.type==co?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},fo.prototype.ja=function(){},fo.prototype.b=function(){},fo.prototype.c=function(){},fo.prototype.w=function(){},po.prototype.ja=function(t){return Ia(t,vo(this))},po.prototype.b=function(t,e){var n=vo(this);return n.idToken=e,Ea(t,n)},po.prototype.c=function(t,e){return lo(Aa(t,vo(this)),e)},po.prototype.w=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},go.prototype.ja=function(t){return Ia(t,mo(this))},go.prototype.b=function(t,e){var n=mo(this);return n.idToken=e,Ea(t,n)},go.prototype.c=function(t,e){return lo(Aa(t,mo(this)),e)},go.prototype.w=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},wo.prototype.Ka=function(t){return this.Hb=yt(t),this},_(Io,wo),_(Eo,wo),Eo.prototype.Ca=function(t){return X(this.a,t)||this.a.push(t),this},Eo.prototype.Pb=function(){return $(this.a)},Eo.prototype.credential=function(t,e){var n;if(!(n=v(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new S("argument-error","credential failed: must provide the ID token and/or the access token.");return new go(this.providerId,n,this.providerId)},_(Ao,Eo),Zr(Ao,"PROVIDER_ID","facebook.com"),Zr(Ao,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),_(To,Eo),Zr(To,"PROVIDER_ID","github.com"),Zr(To,"GITHUB_SIGN_IN_METHOD","github.com"),_(No,Eo),Zr(No,"PROVIDER_ID","google.com"),Zr(No,"GOOGLE_SIGN_IN_METHOD","google.com"),_(Co,wo),Zr(Co,"PROVIDER_ID","twitter.com"),Zr(Co,"TWITTER_SIGN_IN_METHOD","twitter.com"),Oo.prototype.ja=function(t){return this.signInMethod==Po.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Oa,{email:this.a,oobCode:this.f}):iu(t,Za,{email:this.a,password:this.f})},Oo.prototype.b=function(t,e){return this.signInMethod==Po.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Da,{idToken:e,email:this.a,oobCode:this.f}):iu(t,Ka,{idToken:e,email:this.a,password:this.f})},Oo.prototype.c=function(t,e){return lo(this.ja(t),e)},Oo.prototype.w=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},ti(Po,{PROVIDER_ID:"password"}),ti(Po,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),ti(Po,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Mo.prototype.ja=function(t){return t.eb(jo(this))},Mo.prototype.b=function(t,e){var n=jo(this);return n.idToken=e,iu(t,eu,n)},Mo.prototype.c=function(t,e){var n=jo(this);return n.operation="REAUTH",lo(t=iu(t,nu,n),e)},Mo.prototype.w=function(){var t={providerId:"phone"};return this.a.cb&&(t.verificationId=this.a.cb),this.a.bb&&(t.verificationCode=this.a.bb),this.a.La&&(t.temporaryProof=this.a.La),this.a.ea&&(t.phoneNumber=this.a.ea),t},Uo.prototype.eb=function(t,e){var n=this.a.a;return Ce(e.verify()).then((function(r){if("string"!=typeof r)throw new S("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var i=v(t)?t.session:null,o=v(t)?t.phoneNumber:t;return(i&&i.type==co?i.Ha().then((function(t){return function(t,e){return iu(t,Wa,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==ho?i.Ha().then((function(e){return function(t,e){return iu(t,Xa,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(t,e){return iu(t,Ga,e)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new S("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},ti(Uo,{PROVIDER_ID:"phone"}),ti(Uo,{PHONE_SIGN_IN_METHOD:"phone"}),Go.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Go.prototype.S=function(){return this.h},Go.prototype.w=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};var Ho,Wo=null;function Xo(t){var e="unauthorized-domain",n=void 0,r=Fn(t);t=r.a,"chrome-extension"==(r=r.f)?n=zt("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=zt("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",S.call(this,e,n)}function Yo(t,e,n){S.call(this,t,n),(t=e||{}).Ib&&Zr(this,"email",t.Ib),t.ea&&Zr(this,"phoneNumber",t.ea),t.credential&&Zr(this,"credential",t.credential),t.Yb&&Zr(this,"tenantId",t.Yb)}function Jo(t){if(t.code){var e=t.code||"";0==e.indexOf(C)&&(e=e.substring(C.length));var n={credential:Fo(t),Yb:t.tenantId};if(t.email)n.Ib=t.email;else if(t.phoneNumber)n.ea=t.phoneNumber;else if(!n.credential)return new S(e,t.message||void 0);return new Yo(e,n,t.message)}return null}function Qo(){}function $o(t){return t.c||(t.c=t.b())}function Zo(){}function ts(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function es(){}function ns(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=I(this.pc,this),this.a.onerror=I(this.Rb,this),this.a.onprogress=I(this.qc,this),this.a.ontimeout=I(this.uc,this)}function rs(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function is(t,e,n){this.reset(t,e,n,void 0,void 0)}function os(t){this.f=t,this.b=this.c=this.a=null}function ss(t,e){this.name=t,this.value=e}_(Xo,S),_(Yo,S),Yo.prototype.w=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.w();return e&&mt(t,e),t},Yo.prototype.toJSON=function(){return this.w()},Qo.prototype.c=null,_(Zo,Qo),Zo.prototype.a=function(){var t=ts(this);return t?new ActiveXObject(t):new XMLHttpRequest},Zo.prototype.b=function(){var t={};return ts(this)&&(t[0]=!0,t[1]=!0),t},Ho=new Zo,_(es,Qo),es.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new ns;throw Error("Unsupported browser")},es.prototype.b=function(){return{}},(t=ns.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.pc=function(){this.status=200,this.response=this.responseText=this.a.responseText,rs(this,4)},t.Rb=function(){this.status=500,this.response=this.responseText="",rs(this,4)},t.uc=function(){this.Rb()},t.qc=function(){this.status=200,rs(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},is.prototype.a=null,is.prototype.reset=function(t,e,n,r,i){r||A(),delete this.a},ss.prototype.toString=function(){return this.name};var as=new ss("SEVERE",1e3),us=new ss("WARNING",900),cs=new ss("CONFIG",700),hs=new ss("FINE",500);function fs(t){return t.c?t.c:t.a?fs(t.a):(M("Root logger has no level set."),null)}os.prototype.log=function(t,e,n){if(t.value>=fs(this).value)for(d(e)&&(e=e()),t=new is(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var ls={},ps=null;function ds(t){var e;if(ps||(ps=new os(""),ls[""]=ps,ps.c=cs),!(e=ls[t])){e=new os(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=ds(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,ls[t]=e}return e}function vs(t,e){t&&t.log(hs,e,void 0)}function ys(t){this.f=t}function gs(t){An.call(this),this.u=t,this.h=void 0,this.readyState=ms,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.l=new Headers,this.b=null,this.o="GET",this.f="",this.a=!1,this.i=ds("goog.net.FetchXmlHttp"),this.m=this.c=this.g=null}_(ys,Qo),ys.prototype.a=function(){return new gs(this.f)},ys.prototype.b=function(t){return function(){return t}}({}),_(gs,An);var ms=0;function bs(t){t.c.read().then(t.oc.bind(t)).catch(t.Ta.bind(t))}function ws(t){t.readyState=4,t.g=null,t.c=null,t.m=null,Is(t)}function Is(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function Es(t){An.call(this),this.headers=new On,this.O=t||null,this.c=!1,this.A=this.a=null,this.h=this.P=this.l="",this.f=this.N=this.i=this.G=!1,this.g=0,this.o=null,this.m=As,this.u=this.R=!1}(t=gs.prototype).open=function(t,e){if(this.readyState!=ms)throw this.abort(),Error("Error reopening a connection");this.o=t,this.f=e,this.readyState=1,Is(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.l,method:this.o,credentials:this.h,cache:void 0};t&&(e.body=t),this.u.fetch(new Request(this.f,e)).then(this.tc.bind(this),this.Ta.bind(this))},t.abort=function(){this.response=this.responseText="",this.l=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,ws(this)),this.readyState=ms},t.tc=function(t){this.a&&(this.g=t,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=t.headers,this.readyState=2,Is(this)),this.a&&(this.readyState=3,Is(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.rc.bind(this),this.Ta.bind(this)):void 0!==a.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.m=new TextDecoder,bs(this)):t.text().then(this.sc.bind(this),this.Ta.bind(this)))))},t.oc=function(t){if(this.a){var e=this.m.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?ws(this):Is(this),3==this.readyState&&bs(this)}},t.sc=function(t){this.a&&(this.response=this.responseText=t,ws(this))},t.rc=function(t){this.a&&(this.response=t,ws(this))},t.Ta=function(t){var e=this.i;e&&e.log(us,"Failed to fetch url "+this.f,t instanceof Error?t:Error(t)),this.a&&ws(this)},t.setRequestHeader=function(t,e){this.l.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.i)&&t.log(us,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.i;return t&&t.log(us,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(gs.prototype,"withCredentials",{get:function(){return"include"===this.h},set:function(t){this.h=t?"include":"same-origin"}}),_(Es,An);var As="";Es.prototype.b=ds("goog.net.XhrIo");var _s=/^https?$/i,Ts=["POST","PUT"];function Ss(t){return"content-type"==t.toLowerCase()}function Ns(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,ks(t),xs(t)}function ks(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Cs(t){if(t.c&&void 0!==s)if(t.A[1]&&4==Ds(t)&&2==Ps(t))vs(t.b,Rs(t,"Local request error detected and ignored"));else if(t.i&&4==Ds(t))Nn(t.Ub,0,t);else if(t.dispatchEvent("readystatechange"),4==Ds(t)){vs(t.b,Rs(t,"Request complete")),t.c=!1;try{var e,n=Ps(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.l).match(Rn)[1]||null;if(!o&&a.self&&a.self.location){var u=a.self.location.protocol;o=u.substr(0,u.length-1)}i=!_s.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Ds(t)?t.a.statusText:""}catch(e){vs(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Ps(t)+"]",ks(t)}}finally{xs(t)}}}function xs(t,e){if(t.a){Os(t);var n=t.a,r=t.A[0]?f:null;t.a=null,t.A=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(as,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Os(t){t.a&&t.u&&(t.a.ontimeout=null),t.o&&(a.clearTimeout(t.o),t.o=null)}function Ds(t){return t.a?t.a.readyState:0}function Ps(t){try{return 2<Ds(t)?t.a.status:-1}catch(t){return-1}}function Rs(t,e){return e+" ["+t.P+" "+t.l+" "+Ps(t)+"]"}function Ls(t){var e=Hs;this.g=[],this.u=e,this.o=t||null,this.f=this.a=!1,this.c=void 0,this.m=this.A=this.i=!1,this.h=0,this.b=null,this.l=0}function Ms(t,e,n){t.a=!0,t.c=n,t.f=!e,Bs(t)}function Vs(t){if(t.a){if(!t.m)throw new Fs(t);t.m=!1}}function js(t,e,n,r){t.g.push([e,n,r]),t.a&&Bs(t)}function Us(t){return W(t.g,(function(t){return d(t[1])}))}function Bs(t){if(t.h&&t.a&&Us(t)){var e=t.h,n=zs[e];n&&(a.clearTimeout(n.a),delete zs[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var r=n=!1;t.g.length&&!t.i;){var i=t.g.shift(),o=i[0],s=i[1];if(i=i[2],o=t.f?s:o)try{var u=o.call(i||t.o,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(P(e)||"function"==typeof a.Promise&&e instanceof a.Promise)&&(r=!0,t.i=!0)}catch(r){e=r,t.f=!0,Us(t)||(n=!0)}}t.c=e,r&&(u=I(t.v,t,!0),r=I(t.v,t,!1),e instanceof Ls?(js(e,u,r),e.A=!0):e.then(u,r)),n&&(e=new Gs(e),zs[e.a]=e,t.h=e.a)}function Fs(){R.call(this)}function qs(){R.call(this)}function Gs(t){this.a=a.setTimeout(I(this.c,this),0),this.b=t}(t=Es.prototype).Ma=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",vs(this.b,Rs(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(vs(this.b,Rs(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),xs(this))},t.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),xs(this,!0)),Es.$a.Da.call(this)},t.Ub=function(){this.xa||(this.N||this.i||this.f?Cs(this):this.Ic())},t.Ic=function(){Cs(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case As:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(as,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return vs(this.b,"Can not get response: "+t.message),null}},Ls.prototype.cancel=function(t){if(this.a)this.c instanceof Ls&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.u?this.u.call(this.o,this):this.m=!0,this.a||(t=new qs(this),Vs(this),Ms(this,!1,t))}},Ls.prototype.v=function(t,e){this.i=!1,Ms(this,t,e)},Ls.prototype.then=function(t,e,n){var r,i,o=new Ee((function(t,e){r=t,i=e}));return js(this,r,(function(t){t instanceof qs?o.cancel():i(t)})),o.then(t,e,n)},Ls.prototype.$goog_Thenable=!0,_(Fs,R),Fs.prototype.message="Deferred has already fired",Fs.prototype.name="AlreadyCalledError",_(qs,R),qs.prototype.message="Deferred was canceled",qs.prototype.name="CanceledError",Gs.prototype.c=function(){throw delete zs[this.a],this.b};var zs={};function Ks(t){var e={},n=e.document||document,r=Nt(t).toString(),i=ye(document,"SCRIPT"),o={Vb:i,Ma:void 0},s=new Ls(o),u=null,f=null!=e.timeout?e.timeout:5e3;return 0<f&&(u=window.setTimeout((function(){Ws(i,!0);var t=new Js(Ys,"Timeout reached for loading script "+r);Vs(s),Ms(s,!1,t)}),f),o.Ma=u),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Ws(i,e.wd||!1,u),Vs(s),Ms(s,!0,null))},i.onerror=function(){Ws(i,!0,u);var t=new Js(Xs,"Error while loading script "+r);Vs(s),Ms(s,!1,t)},mt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),fe(i,o),function(t,e){bt(t,"HTMLScriptElement"),t.src=Nt(e),(e=t.ownerDocument&&t.ownerDocument.defaultView)&&e!=a?e=h(e.document):(null===c&&(c=h(a.document)),e=c),e&&t.setAttribute("nonce",e)}(i,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),s}function Hs(){if(this&&this.Vb){var t=this.Vb;t&&"SCRIPT"==t.tagName&&Ws(t,!0,this.Ma)}}function Ws(t,e,n){null!=n&&a.clearTimeout(n),t.onload=f,t.onerror=f,t.onreadystatechange=f,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var Xs=0,Ys=1;function Js(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),R.call(this,n),this.code=t}function Qs(t){this.f=t}function $s(t,e,n){if(this.c=t,t=e||{},this.l=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.v=t.secureTokenTimeout||ea,this.g=yt(t.secureTokenHeaders||na),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.m=t.firebaseTimeout||ra,this.a=yt(t.firebaseHeaders||ia),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==_r(),!(n=a.XMLHttpRequest||n&&et.INTERNAL.node&&et.INTERNAL.node.XMLHttpRequest)&&!Ar())throw new S("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,Ar()?this.f=new ys(self):Tr()?this.f=new Qs(n):this.f=new es,this.b=null}_(Js,R),_(Qs,Qo),Qs.prototype.a=function(){return new this.f},Qs.prototype.b=function(){return{}};var Zs,ta="idToken",ea=new zr(3e4,6e4),na={"Content-Type":"application/x-www-form-urlencoded"},ra=new zr(3e4,6e4),ia={"Content-Type":"application/json"};function oa(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function sa(t,e){e&&(t.l=aa("https://securetoken.googleapis.com/v1/token",e),t.h=aa("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",e),t.i=aa("https://identitytoolkit.googleapis.com/v2/",e))}function aa(t,e){return t=Fn(t),e=Fn(e.url),t.c=t.a+t.c,Mn(t,e.f),t.a=e.a,Vn(t,e.g),t.toString()}function ua(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function ca(t,e,n,r,i,o,s){(function(){var t=Or();return!((t=kr(t)!=Nr?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||Jt&&ue&&!(9<ue))})()||Ar()?t=I(t.u,t):(Zs||(Zs=new Ee((function(t,e){!function(t,e){((window.gapi||{}).client||{}).request?t():(a[fa]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){js(t,null,e,void 0)}(Ks(kt(ha,{onload:fa})),(function(){e(Error("CORS_UNSUPPORTED"))})))}(t,e)}))),t=I(t.o,t)),t(e,n,r,i,o,s)}$s.prototype.S=function(){return this.b},$s.prototype.u=function(t,e,n,r,i,o){if(Ar()&&(void 0===a.fetch||void 0===a.Headers||void 0===a.Request))throw new S("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new Es(this.f);if(o){s.g=Math.max(0,o);var u=setTimeout((function(){s.dispatchEvent("timeout")}),o)}_n(s,"complete",(function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return vs(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),Tn(s,"ready",(function(){u&&clearTimeout(u),We(this)})),Tn(s,"timeout",(function(){u&&clearTimeout(u),We(this),e&&e(null)})),function(t,e,n,r,i){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.G=!1,t.c=!0,t.a=t.O?t.O.a():Ho.a(),t.A=t.O?$o(t.O):$o(Ho),t.a.onreadystatechange=I(t.Ub,t);try{vs(t.b,Rs(t,"Opening Xhr")),t.N=!0,t.a.open(n,String(e),!0),t.N=!1}catch(e){return vs(t.b,Rs(t,"Error opening Xhr: "+e.message)),void Ns(t,e)}e=r||"";var o=new On(t.headers);i&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(p(t)||"string"==typeof t)z(t,e,void 0);else for(var n=xn(t),r=Cn(t),i=r.length,o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}(i,(function(t,e){o.set(e,t)})),i=function(t){t:{for(var e=Ss,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.Y()),r=a.FormData&&e instanceof a.FormData,!X(Ts,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.R&&(t.a.withCredentials=t.R);try{Os(t),0<t.g&&(t.u=function(t){return Jt&&ae(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),vs(t.b,Rs(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.u)),t.u?(t.a.timeout=t.g,t.a.ontimeout=I(t.Ma,t)):t.o=Nn(t.Ma,t.g,t)),vs(t.b,Rs(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){vs(t.b,Rs(t,"Send error: "+e.message)),Ns(t,e)}}(s,t,n,r,i)};var ha=new wt(_t,"https://apis.google.com/js/client.js?onload=%{onload}"),fa="__fcb"+Math.floor(1e6*Math.random()).toString();function la(t){if("string"!=typeof(t=t.email)||!br.test(t))throw new S("invalid-email")}function pa(t){"email"in t&&la(t)}function da(t){if(!t[ta]){if(t.mfaPendingCredential)throw new S("multi-factor-auth-required",null,yt(t));throw new S("internal-error")}}function va(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new S("internal-error")}else{if(!t.sessionInfo)throw new S("missing-verification-id");if(!t.code)throw new S("missing-verification-code")}}$s.prototype.o=function(t,e,n,r,i){var o=this;Zs.then((function(){window.gapi.client.setApiKey(o.c);var s=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(s),e&&e(t)}})})).s((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},$s.prototype.yb=function(){return iu(this,Ha,{})},$s.prototype.Ab=function(t,e){return iu(this,za,{idToken:t,email:e})},$s.prototype.Bb=function(t,e){return iu(this,Ka,{idToken:t,password:e})};var ya={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function ga(t){if(!t.phoneVerificationInfo)throw new S("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new S("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new S("missing-verification-code")}function ma(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new S("internal-error")}function ba(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&er(t=new Qn(t.postBody),"nonce")&&(e.nonce=t.get("nonce"))),e}function wa(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Jo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Jo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Jo(t)):t.errorMessage&&(e=ou(t.errorMessage)),e)throw e;da(t)}function Ia(t,e){return e.returnIdpCredential=!0,iu(t,Ya,e)}function Ea(t,e){return e.returnIdpCredential=!0,iu(t,Qa,e)}function Aa(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,iu(t,Ja,e)}function _a(t){if(!t.oobCode)throw new S("invalid-action-code")}(t=$s.prototype).Cb=function(t,e){var n={idToken:t},r=[];return dt(ya,(function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),iu(this,za,n)},t.ub=function(t,e){return mt(t={requestType:"PASSWORD_RESET",email:t},e),iu(this,Ua,t)},t.vb=function(t,e){return mt(t={requestType:"EMAIL_SIGNIN",email:t},e),iu(this,Ma,t)},t.tb=function(t,e){return mt(t={requestType:"VERIFY_EMAIL",idToken:t},e),iu(this,Va,t)},t.Db=function(t,e,n){return mt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),iu(this,ja,t)},t.eb=function(t){return iu(this,tu,t)},t.mb=function(t,e){return iu(this,qa,{oobCode:t,newPassword:e})},t.Qa=function(t){return iu(this,Sa,{oobCode:t})},t.ib=function(t){return iu(this,Ta,{oobCode:t})};var Ta={endpoint:"setAccountInfo",B:_a,Z:"email",C:!0},Sa={endpoint:"resetPassword",B:_a,F:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new S("internal-error")},C:!0},Na={endpoint:"signupNewUser",B:function(t){if(la(t),!t.password)throw new S("weak-password")},F:da,U:!0,C:!0},ka={endpoint:"createAuthUri",C:!0},Ca={endpoint:"deleteAccount",M:["idToken"]},xa={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],B:function(t){if(!Array.isArray(t.deleteProvider))throw new S("internal-error")}},Oa={endpoint:"emailLinkSignin",M:["email","oobCode"],B:la,F:da,U:!0,C:!0},Da={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],B:la,F:da,U:!0},Pa={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],B:ga,F:da,C:!0,Na:!0},Ra={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],B:ga,F:da,C:!0,Na:!0},La={endpoint:"getAccountInfo"},Ma={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new S("internal-error");la(t)},Z:"email",C:!0},Va={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],B:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new S("internal-error")},Z:"email",C:!0},ja={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],B:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new S("internal-error")},Z:"email",C:!0},Ua={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("PASSWORD_RESET"!=t.requestType)throw new S("internal-error");la(t)},Z:"email",C:!0},Ba={kb:!0,endpoint:"getProjectConfig",Tb:"GET"},Fa={kb:!0,endpoint:"getRecaptchaParam",Tb:"GET",F:function(t){if(!t.recaptchaSiteKey)throw new S("internal-error")}},qa={endpoint:"resetPassword",B:_a,Z:"email",C:!0},Ga={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Z:"sessionInfo",C:!0},za={endpoint:"setAccountInfo",M:["idToken"],B:pa,U:!0},Ka={endpoint:"setAccountInfo",M:["idToken"],B:function(t){if(pa(t),!t.password)throw new S("weak-password")},F:da,U:!0},Ha={endpoint:"signupNewUser",F:da,U:!0,C:!0},Wa={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],B:function(t){if(!t.phoneEnrollmentInfo)throw new S("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new S("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new S("missing-app-credential")},F:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new S("internal-error")},C:!0,Na:!0},Xa={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],B:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new S("missing-app-credential")},F:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new S("internal-error")},C:!0,Na:!0},Ya={endpoint:"verifyAssertion",B:ma,Xa:ba,F:wa,U:!0,C:!0},Ja={endpoint:"verifyAssertion",B:ma,Xa:ba,F:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new S("user-not-found");if(t.errorMessage)throw ou(t.errorMessage);da(t)},U:!0,C:!0},Qa={endpoint:"verifyAssertion",B:function(t){if(ma(t),!t.idToken)throw new S("internal-error")},Xa:ba,F:wa,U:!0},$a={endpoint:"verifyCustomToken",B:function(t){if(!t.token)throw new S("invalid-custom-token")},F:da,U:!0,C:!0},Za={endpoint:"verifyPassword",B:function(t){if(la(t),!t.password)throw new S("wrong-password")},F:da,U:!0,C:!0},tu={endpoint:"verifyPhoneNumber",B:va,F:da,C:!0},eu={endpoint:"verifyPhoneNumber",B:function(t){if(!t.idToken)throw new S("internal-error");va(t)},F:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Jo(t);da(t)}},nu={Gb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:va,F:da,C:!0},ru={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],F:function(t){if(!!t[ta]^!!t.refreshToken)throw new S("internal-error")},C:!0,Na:!0};function iu(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(null==r||""===r)return!1}return!0}(n,e.M))return xe(new S("internal-error"));var r,i=!!e.Na,o=e.Tb||"POST";return Ce(n).then(e.B).then((function(){return e.U&&(n.returnSecureToken=!0),e.C&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),function(t,e,n,r,i,o,s){var a=Fn(e+n);Un(a,"key",t.c),s&&Un(a,"cb",A().toString());var u="GET"==r;if(u)for(var c in i)i.hasOwnProperty(c)&&Un(a,c,i[c]);return new Ee((function(e,n){ca(t,a.toString(),(function(t){t?t.error?n(su(t,o||{})):e(t):n(new S("network-request-failed"))}),r,u?void 0:or(Ur(i)),t.a,t.m.get())}))}(t,i?t.i:t.h,e.endpoint,o,n,e.Gb,e.kb||!1)})).then((function(t){return r=t,e.Xa?e.Xa(n,r):r})).then(e.F).then((function(){if(!e.Z)return r;if(!(e.Z in r))throw new S("internal-error");return r[e.Z]}))}function ou(t){return su({error:{errors:[{message:t}],code:400,message:t}})}function su(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new S(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",mt(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new S(r[i],e);return!e&&t&&(e=jr(t)),new S("internal-error",e)}function au(t){this.b=t,this.a=null,this.qb=function(t){return(fu||(fu=new Ee((function(t,e){function n(){Gr(),Dr("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Gr(),e(Error("Network Error"))},timeout:cu.get()})}if(Dr("gapi.iframes.Iframe"))t();else if(Dr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();a[r]=function(){Dr("gapi.load")?n():e(Error("Network Error"))},Ce(Ks(r=kt(uu,{onload:r}))).s((function(){e(Error("Network Error"))}))}})).s((function(t){throw fu=null,t})))).then((function(){return new Ee((function(e,n){Dr("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),hu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var uu=new wt(_t,"https://apis.google.com/js/api.js?onload=%{onload}"),cu=new zr(3e4,6e4),hu=new zr(5e3,15e3),fu=null;function lu(t,e,n,r){this.l=t,this.h=e,this.i=n,this.g=r,this.f=null,t=this.g?qn((t=Fn(this.g.url)).f,t.a,t.g,"/emulator/auth/iframe"):qn("https",this.l,null,"/__/auth/iframe"),this.a=t,Un(this.a,"apiKey",this.h),Un(this.a,"appName",this.i),this.b=null,this.c=[]}function pu(t,e,n,r,i,o){this.u=t,this.o=e,this.c=n,this.v=r,this.m=o,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function du(t){try{return et.app(t).auth().Ga()}catch(t){return[]}}function vu(t,e,n,r,i,o){this.o=t,this.g=e,this.b=n,this.f=o,this.c=r||null,this.i=i||null,this.l=this.u=this.A=null,this.h=[],this.v=this.a=null}function yu(t){var e=lr();return function(t){return iu(t,Ba,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=Fn(e),r=n.f;n=n.a;for(var i=0;i<t.length;i++){var o=t[i],s=n,a=r;if(0==o.indexOf("chrome-extension://")?s=Fn(o).a==s&&"chrome-extension"==a:"http"!=a&&"https"!=a?s=!1:mr.test(o)?s=s==o:(o=o.split(".").join("\\."),s=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(s)),s){t=!0;break t}}t=!1}if(!t)throw new Xo(lr())}))}function gu(t){return t.v||(t.v=wr().then((function(){if(!t.u){var e=t.c,n=t.i,r=du(t.b),i=new lu(t.o,t.g,t.b,t.f);i.f=e,i.b=n,i.c=$(r||[]),t.u=i.toString()}t.m=new au(t.u),function(t){if(!t.m)throw Error("IfcHandler must be initialized!");!function(t,e){t.qb.then((function(){t.a.register("authEvent",e,Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.m,(function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=zo(e.authEvent),n=0;n<t.h.length;n++)r=t.h[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Ce(n)}return n.status="ERROR",Ce(n)}))}(t)}))),t.v}function mu(t){return t.l||(t.A=t.c?xr(t.c,du(t.b)):null,t.l=new $s(t.g,D(t.i),t.A),t.f&&sa(t.l,t.f)),t.l}function bu(t,e,n,r,i,o,s,a,u,c,h,f){return(t=new pu(t,e,n,r,i,f)).l=o,t.g=s,t.i=a,t.b=yt(u||null),t.f=c,t.xb(h).toString()}function wu(t){if(this.a=t||et.INTERNAL.reactNative&&et.INTERNAL.reactNative.AsyncStorage,!this.a)throw new S("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Iu(t){this.b=t,this.a={},this.f=I(this.c,this)}lu.prototype.toString=function(){return this.f?Un(this.a,"v",this.f):tr(this.a.b,"v"),this.b?Un(this.a,"eid",this.b):tr(this.a.b,"eid"),this.c.length?Un(this.a,"fw",this.c.join(",")):tr(this.a.b,"fw"),this.a.toString()},pu.prototype.xb=function(t){return this.h=t,this},pu.prototype.toString=function(){if(this.m){var t=Fn(this.m.url);t=qn(t.f,t.a,t.g,"/emulator/auth/handler")}else t=qn("https",this.u,null,"/__/auth/handler");if(Un(t,"apiKey",this.o),Un(t,"appName",this.c),Un(t,"authType",this.v),this.a.isOAuthProvider){var e=this.a;try{var n=et.app(this.c).auth().ka()}catch(t){n=null}for(var r in e.nb=n,Un(t,"providerId",this.a.providerId),e=Ur((n=this.a).Hb))e[r]=e[r].toString();r=n.Pc,e=yt(e);for(var i=0;i<r.length;i++){var o=r[i];o in e&&delete e[o]}n.ob&&n.nb&&!e[n.ob]&&(e[n.ob]=n.nb),vt(e)||Un(t,"customParameters",jr(e))}if("function"==typeof this.a.Pb&&(n=this.a.Pb()).length&&Un(t,"scopes",n.join(",")),this.l?Un(t,"redirectUrl",this.l):tr(t.b,"redirectUrl"),this.g?Un(t,"eventId",this.g):tr(t.b,"eventId"),this.i?Un(t,"v",this.i):tr(t.b,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Bn(t,s)&&Un(t,s,this.b[s]);return this.h?Un(t,"tid",this.h):tr(t.b,"tid"),this.f?Un(t,"eid",this.f):tr(t.b,"eid"),(s=du(this.c)).length&&Un(t,"fw",s.join(",")),t.toString()},(t=vu.prototype).Nb=function(t,e,n){var r=new S("popup-closed-by-user"),i=new S("web-storage-unsupported"),o=this,s=!1;return this.la().then((function(){(function(t){var e={type:"webStorageSupport"};return gu(t).then((function(){return function(t,e){return t.qb.then((function(){return new Ee((function(n){t.a.send(e.type,e,n,Dr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.m,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&yr(t),e(i),s=!0)}))})).s((function(){})).then((function(){if(!s)return function(t){return new Ee((function(e){return function n(){kn(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!s)return kn(n).then((function(){e(r)}))}))},t.Wb=function(){var t=Or();return!Vr(t)&&!qr(t)},t.Sb=function(){return!1},t.Lb=function(t,e,n,r,i,o,s,a){if(!t)return xe(new S("popup-blocked"));if(s&&!Vr())return this.la().s((function(e){yr(t),i(e)})),r(),Ce();this.a||(this.a=yu(mu(this)));var u=this;return this.a.then((function(){var e=u.la().s((function(e){throw yr(t),i(e),e}));return r(),e})).then((function(){qo(n),s||pr(bu(u.o,u.g,u.b,e,n,null,o,u.c,void 0,u.i,a,u.f),t)})).s((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},t.Mb=function(t,e,n,r){this.a||(this.a=yu(mu(this)));var i=this;return this.a.then((function(){qo(e),pr(bu(i.o,i.g,i.b,t,e,lr(),n,i.c,void 0,i.i,r,i.f))})).s((function(t){throw"auth/network-request-failed"==t.code&&(i.a=null),t}))},t.la=function(){var t=this;return gu(this).then((function(){return t.m.qb})).s((function(){throw t.a=null,new S("network-request-failed")}))},t.Zb=function(){return!0},t.Ea=function(t){this.h.push(t)},t.Ra=function(t){J(this.h,(function(e){return e==t}))},(t=wu.prototype).get=function(t){return Ce(this.a.getItem(t)).then((function(t){return t&&Br(t)}))},t.set=function(t,e){return Ce(this.a.setItem(t,jr(e)))},t.T=function(t){return Ce(this.a.removeItem(t))},t.ca=function(){},t.ia=function(){};var Eu,Au=[];function _u(t,e,n){vt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function Tu(t){this.a=t}function Su(t){this.c=t,this.b=!1,this.a=[]}function Nu(t,e,n,r){var i,o,s,a,u=n||{},c=null;if(t.b)return xe(Error("connection_unavailable"));var h=r?800:50,f="undefined"!=typeof MessageChannel?new MessageChannel:null;return new Ee((function(n,r){f?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),f.port1.start(),s=setTimeout((function(){r(Error("unsupported_event"))}),h),c={messageChannel:f,onMessage:o=function(t){t.data.eventId===i&&("ack"===t.data.status?(clearTimeout(s),a=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(a),void 0!==t.data.response?n(t.data.response):r(Error("unknown_error"))):(clearTimeout(s),clearTimeout(a),r(Error("invalid_response"))))}},t.a.push(c),f.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:i,data:u},[f.port2])):r(Error("connection_unavailable"))})).then((function(e){return ku(t,c),e})).s((function(e){throw ku(t,c),e}))}function ku(t,e){if(e){var n=e.messageChannel,r=e.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),J(t.a,(function(t){return t==e}))}}function Cu(){if(!Pu())throw new S("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.v=a.indexedDB,this.type="indexedDB",this.g=this.m=this.f=this.l=null,this.o=!1,this.h=null;var t=this;Ar()&&self?(this.m=function(){var t=Ar()?self:null;if(z(Au,(function(n){n.b==t&&(e=n)})),!e){var e=new Iu(t);Au.push(e)}return e}(),_u(this.m,"keyChanged",(function(e,n){return ju(t).then((function(e){return 0<e.length&&z(t.a,(function(t){t(e)})),{keyProcessed:X(e,n.key)}}))})),_u(this.m,"ping",(function(){return Ce(["keyChanged"])}))):function(){var t=a.navigator;return t&&t.serviceWorker?Ce().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).s((function(){return null})):Ce(null)}().then((function(e){(t.h=e)&&(t.g=new Su(new Tu(e)),Nu(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&X(e[0].value,"keyChanged")&&(t.o=!0)})).s((function(){})))}))}function xu(t){return new Ee((function(e,n){var r=t.v.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new Ee((function(e,n){var r=t.v.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return xu(t)})).then((function(t){e(t)})).s((function(t){n(t)}))}}))}function Ou(t){return t.i||(t.i=xu(t)),t.i}function Du(t,e){var n=0;return new Ee((function r(i,o){Ou(t).then(e).then(i).s((function(e){if(!(3<++n))return Ou(t).then((function(e){return e.close(),t.i=void 0,r(i,o)}));o(e)}))}))}function Pu(){try{return!!a.indexedDB}catch(t){return!1}}function Ru(t){return t.objectStore("firebaseLocalStorage")}function Lu(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Mu(t){return new Ee((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function Vu(t,e){return t.g&&t.h&&function(){var t=a.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?Nu(t.g,"keyChanged",{key:e},t.o).then((function(){})).s((function(){})):Ce()}function ju(t){return Ou(t).then((function(t){var e=Ru(Lu(t,!1));return e.getAll?Mu(e.getAll()):new Ee((function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=dr(t.c,n),t.c=n}return r}))}function Uu(t){t.l&&t.l.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Bu(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Ce().then((function(){if(Pu()){var t=Fr(),r="__sak"+t;return Eu||(Eu=new Cu),(n=Eu).set(r,t).then((function(){return n.get(r)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.T(r)})).then((function(){return n})).s((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ca((function(t){z(e.a,(function(e){e(t)}))})),t}))}function Fu(){this.a={},this.type="inMemory"}function qu(){if(!function(){var t="Node"==_r();if(!(t=Gu()||t&&et.INTERNAL.node&&et.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==_r())throw new S("internal-error","The LocalStorage compatibility library was not found.");throw new S("web-storage-unsupported")}this.a=Gu()||et.INTERNAL.node.localStorage,this.type="localStorage"}function Gu(){try{var t=a.localStorage,e=Fr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function zu(){this.type="nullStorage"}function Ku(){if(!function(){var t="Node"==_r();if(!(t=Hu()||t&&et.INTERNAL.node&&et.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==_r())throw new S("internal-error","The SessionStorage compatibility library was not found.");throw new S("web-storage-unsupported")}this.a=Hu()||et.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Hu(){try{var t=a.sessionStorage,e=Fr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Wu(){var t={};t.Browser=Ju,t.Node=Qu,t.ReactNative=$u,t.Worker=Zu,this.a=t[_r()]}Iu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,r=this.a[e];if(r&&0<r.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var i=[];z(r,(function(e){i.push(Ce().then((function(){return e(t.origin,t.data.data)})))})),De(i).then((function(r){var i=[];z(r,(function(t){i.push({fulfilled:t.Ob,value:t.value,reason:t.reason?t.reason.message:void 0})})),z(i,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:i})}))}},Tu.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},Su.prototype.close=function(){for(;0<this.a.length;)ku(this,this.a[0]);this.b=!0},(t=Cu.prototype).set=function(t,e){var n=this,r=!1;return Du(this,(function(e){return Mu((e=Ru(Lu(e,!0))).get(t))})).then((function(i){return Du(n,(function(o){if(o=Ru(Lu(o,!0)),i)return i.value=e,Mu(o.put(i));n.b++,r=!0;var s={};return s.fbase_key=t,s.value=e,Mu(o.add(s))}))})).then((function(){return n.c[t]=e,Vu(n,t)})).na((function(){r&&n.b--}))},t.get=function(t){return Du(this,(function(e){return Mu(Ru(Lu(e,!1)).get(t))})).then((function(t){return t&&t.value}))},t.T=function(t){var e=this,n=!1;return Du(this,(function(r){return n=!0,e.b++,Mu(Ru(Lu(r,!0)).delete(t))})).then((function(){return delete e.c[t],Vu(e,t)})).na((function(){n&&e.b--}))},t.ca=function(t){0==this.a.length&&function(t){Uu(t),function e(){t.f=setTimeout((function(){t.l=ju(t).then((function(e){0<e.length&&z(t.a,(function(t){t(e)}))})).then((function(){e()})).s((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},t.ia=function(t){J(this.a,(function(e){return e==t})),0==this.a.length&&Uu(this)},(t=Bu.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},t.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},t.T=function(t){return this.b.then((function(e){return e.T(t)}))},t.ca=function(t){this.a.push(t)},t.ia=function(t){J(this.a,(function(e){return e==t}))},(t=Fu.prototype).get=function(t){return Ce(this.a[t])},t.set=function(t,e){return this.a[t]=e,Ce()},t.T=function(t){return delete this.a[t],Ce()},t.ca=function(){},t.ia=function(){},(t=qu.prototype).get=function(t){var e=this;return Ce().then((function(){return Br(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ce().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Ce().then((function(){e.a.removeItem(t)}))},t.ca=function(t){a.window&&fn(a.window,"storage",t)},t.ia=function(t){a.window&&dn(a.window,"storage",t)},(t=zu.prototype).get=function(){return Ce(null)},t.set=function(){return Ce()},t.T=function(){return Ce()},t.ca=function(){},t.ia=function(){},(t=Ku.prototype).get=function(t){var e=this;return Ce().then((function(){return Br(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ce().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Ce().then((function(){e.a.removeItem(t)}))},t.ca=function(){},t.ia=function(){};var Xu,Yu,Ju={D:qu,ab:Ku},Qu={D:qu,ab:Ku},$u={D:wu,ab:zu},Zu={D:qu,ab:zu},tc={qd:"local",NONE:"none",sd:"session"};function ec(){var t=!(qr(Or())||!Er()),e=Vr(),n=Pr();this.v=t,this.h=e,this.l=n,this.a={},Xu||(Xu=new Wu),t=Xu;try{this.g=!fr()&&Xr()||!a.indexedDB?new t.a.D:new Bu(Ar()?new Fu:new t.a.D)}catch(t){this.g=new Fu,this.h=!0}try{this.i=new t.a.ab}catch(t){this.i=new Fu}this.m=new Fu,this.f=I(this.Xb,this),this.b={}}function nc(){return Yu||(Yu=new ec),Yu}function rc(t,e){switch(e){case"session":return t.i;case"none":return t.m;default:return t.g}}function ic(t,e){return"firebase:"+t.name+(e?":"+e:"")}function oc(t,e,n){return n=ic(e,n),"local"==e.D&&(t.b[n]=null),rc(t,e.D).T(n)}function sc(t){t.c&&(clearInterval(t.c),t.c=null)}function ac(t){this.a=t,this.b=nc()}(t=ec.prototype).get=function(t,e){return rc(this,t.D).get(ic(t,e))},t.set=function(t,e,n){var r=ic(t,n),i=this,o=rc(this,t.D);return o.set(r,e).then((function(){return o.get(r)})).then((function(e){"local"==t.D&&(i.b[r]=e)}))},t.addListener=function(t,e,n){t=ic(t,e),this.l&&(this.b[t]=a.localStorage.getItem(t)),vt(this.a)&&(rc(this,"local").ca(this.f),this.h||(fr()||!Xr())&&a.indexedDB||!this.l||function(t){sc(t),t.c=setInterval((function(){for(var e in t.a){var n=a.localStorage.getItem(e),r=t.b[e];n!=r&&(t.b[e]=n,n=new Ze({type:"storage",key:e,target:window,oldValue:r,newValue:n,a:!0}),t.Xb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},t.removeListener=function(t,e,n){t=ic(t,e),this.a[t]&&(J(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),vt(this.a)&&(rc(this,"local").ia(this.f),sc(this))},t.Xb=function(t){if(t&&t.g){var e=t.a.key;if(null==e)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=a.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.lb(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?rc(this,"local").ia(this.f):sc(this),this.v)if(n=a.localStorage.getItem(e),(r=t.a.newValue)!==n)null!==r?a.localStorage.setItem(e,r):a.localStorage.removeItem(e);else if(this.b[e]===r&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===a.localStorage.getItem(e)||(o.b[e]=a.localStorage.getItem(e),o.lb(e))},Jt&&ue&&10==ue&&a.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else z(t,I(this.lb,this))},t.lb=function(t){this.a[t]&&z(this.a[t],(function(t){t()}))};var uc,cc={name:"authEvent",D:"local"};function hc(){this.a=nc()}function fc(t,e){this.b=lc,this.f=a.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=a.Int32Array?new Int32Array(64):Array(64),void 0===uc&&(uc=a.Int32Array?new Int32Array(bc):bc),this.reset()}_(fc,(function(){this.b=-1}));for(var lc=64,pc=lc-1,dc=[],vc=0;vc<pc;vc++)dc[vc]=0;var yc=Q(128,dc);function gc(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,s=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+s|0}r=0|t.a[0],i=0|t.a[1];var a=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],f=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var l=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&a^i&a)|0;s=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((s=(s=c&h^~c&f)+(0|uc[e])|0)+(0|n[e])|0)|0,o=f,f=h,h=c,c=u+s|0,u=a,a=i,i=r,r=s+l|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+a|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+f|0,t.a[7]=t.a[7]+o|0}function mc(t,e,n){void 0===n&&(n=e.length);var r=0,i=t.c;if("string"==typeof e)for(;r<n;)t.f[i++]=e.charCodeAt(r++),i==t.b&&(gc(t),i=0);else{if(!p(e))throw Error("message must be string or array");for(;r<n;){var o=e[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[i++]=o,i==t.b&&(gc(t),i=0)}}t.c=i,t.g+=n}fc.prototype.reset=function(){this.g=this.c=0,this.a=a.Int32Array?new Int32Array(this.h):$(this.h)};var bc=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function wc(){fc.call(this,8,Ic)}_(wc,fc);var Ic=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Ec(t,e,n,r,i,o){this.m=t,this.i=e,this.l=n,this.v=r||null,this.u=i||null,this.o=o,this.h=e+":"+n,this.A=new hc,this.g=new ac(this.h),this.f=null,this.b=[],this.a=this.c=null}function Ac(t){return new S("invalid-cordova-configuration",t)}function _c(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function Tc(t){return t.f||(t.f=t.la().then((function(){return new Ee((function(e){t.Ea((function n(r){return e(r),t.Ra(n),!1})),function(t){function e(e){r=!0,i&&i.cancel(),Sc(t).then((function(r){var i=n;if(r&&e&&e.url){var o=null;-1!=(i=ao(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Br(Bn(o=Fn(i),"firebaseError")||null))?N(o):null)?new Go(r.c,r.b,null,null,o,null,r.S()):new Go(r.c,r.b,i,r.f,null,null,r.S())),i=o||n}_c(t,i)}))}var n=new Go("unknown",null,null,null,new S("no-auth-event")),r=!1,i=kn(500).then((function(){return Sc(t).then((function(){r||_c(t,n)}))})),o=a.handleOpenURL;a.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(Dr("BuildInfo.packageName",a).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},Wo||(Wo=new Ko),function(t){var e=Wo;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=Dr("universalLinks.subscribe",a))&&t(null,e.b))}(e)}(t)}))}))),t.f}function Sc(t){var e=null;return function(t){return t.b.get(cc,t.a).then((function(t){return zo(t)}))}(t.g).then((function(n){return e=n,oc((n=t.g).b,cc,n.a)})).then((function(){return e}))}function Nc(t){this.a=t,this.b=nc()}(t=Ec.prototype).la=function(){return this.Ia?this.Ia:this.Ia=(Ir(void 0)?wr().then((function(){return new Ee((function(t,e){var n=a.document,r=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),t()}),!1)}))})):xe(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Dr("universalLinks.subscribe",a))throw Ac("cordova-universal-links-plugin-fix is not installed");if(void 0===Dr("BuildInfo.packageName",a))throw Ac("cordova-plugin-buildinfo is not installed");if("function"!=typeof Dr("cordova.plugins.browsertab.openUrl",a))throw Ac("cordova-plugin-browsertab is not installed");if("function"!=typeof Dr("cordova.InAppBrowser.open",a))throw Ac("cordova-plugin-inappbrowser is not installed")}),(function(){throw new S("cordova-not-ready")}))},t.Nb=function(t,e){return e(new S("operation-not-supported-in-this-environment")),Ce()},t.Lb=function(){return xe(new S("operation-not-supported-in-this-environment"))},t.Zb=function(){return!1},t.Wb=function(){return!0},t.Sb=function(){return!0},t.Mb=function(t,e,n,r){if(this.c)return xe(new S("redirect-operation-pending"));var i=this,o=a.document,s=null,u=null,c=null,h=null;return this.c=Ce().then((function(){return qo(e),Tc(i)})).then((function(){return function(t,e,n,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),s=new Go(e,r,null,o,new S("no-auth-event"),null,i),u=Dr("BuildInfo.packageName",a);if("string"!=typeof u)throw new S("invalid-cordova-configuration");var c=Dr("BuildInfo.displayName",a),h={};if(Or().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=u;else{if(!Or().toLowerCase().match(/android/))return xe(new S("operation-not-supported-in-this-environment"));h.apn=u}c&&(h.appDisplayName=c),o=function(t){var e=new wc;mc(e,t),t=[];var n=8*e.g;56>e.c?mc(e,yc,56-e.c):mc(e,yc,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(gc(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return H(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}(o),h.sessionId=o;var f=bu(t.m,t.i,t.l,e,n,null,r,t.v,h,t.u,i,t.o);return t.la().then((function(){var e=t.h;return t.A.a.set(cc,s.w(),e)})).then((function(){var e=Dr("cordova.plugins.browsertab.isAvailable",a);if("function"!=typeof e)throw new S("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=Dr("cordova.plugins.browsertab.openUrl",a)))throw new S("invalid-cordova-configuration");n(f)}else{if("function"!=typeof(n=Dr("cordova.InAppBrowser.open",a)))throw new S("invalid-cordova-configuration");e=Or(),t.a=n(f,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,t,e,n,r)})).then((function(){return new Ee((function(t,e){u=function(){var e=Dr("cordova.plugins.browsertab.close",a);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ea(u),c=function(){s||(s=kn(2e3).then((function(){e(new S("redirect-cancelled-by-user"))})))},h=function(){Kr()&&c()},o.addEventListener("resume",c,!1),Or().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).s((function(t){return Sc(i).then((function(){throw t}))}))})).na((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),s&&s.cancel(),u&&i.Ra(u),i.c=null}))},t.Ea=function(t){this.b.push(t),Tc(this).s((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Go("unknown",null,null,null,new S("no-auth-event")),t(e))}))},t.Ra=function(t){J(this.b,(function(e){return e==t}))};var kc={name:"pendingRedirect",D:"session"};function Cc(t){return oc(t.b,kc,t.a)}function xc(t,e,n,r){this.i={},this.u=0,this.O=t,this.m=e,this.v=n,this.G=r,this.h=[],this.f=!1,this.l=I(this.o,this),this.b=new Kc,this.A=new Jc,this.g=new Nc(Gc(this.m,this.v)),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.A,this.c.linkViaPopup=this.A,this.c.reauthViaPopup=this.A,this.a=Oc(this.O,this.m,this.v,k,this.G)}function Oc(t,e,n,r,i){var o=et.SDK_VERSION||null;return Ir()?new Ec(t,e,n,o,r,i):new vu(t,e,n,o,r,i)}function Dc(t){t.f||(t.f=!0,t.a.Ea(t.l));var e=t.a;return t.a.la().s((function(n){throw t.a==e&&t.reset(),n}))}function Pc(t){t.a.Wb()&&Dc(t).s((function(e){var n=new Go("unknown",null,null,null,new S("operation-not-supported-in-this-environment"));Uc(e)&&t.o(n)})),t.a.Sb()||Hc(t.b)}function Rc(t,e){X(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(kc,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Cc(t.g).then((function(){Dc(t).s((function(e){var n=new Go("unknown",null,null,null,new S("operation-not-supported-in-this-environment"));Uc(e)&&t.o(n)}))})):Pc(t)})).s((function(){Pc(t)}))}function Lc(t,e){J(t.h,(function(t){return t==e}))}xc.prototype.reset=function(){this.f=!1,this.a.Ra(this.l),this.a=Oc(this.O,this.m,this.v,null,this.G),this.i={}},xc.prototype.o=function(t){if(!t)throw new S("invalid-auth-event");if(6e5<=A()-this.u&&(this.i={},this.u=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Eb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,r),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.u=A())),e=!0;break}}return Hc(this.b),e};var Mc=new zr(2e3,1e4),Vc=new zr(3e4,6e4);function jc(t,e,n,r,i,o,s){return t.a.Lb(e,n,r,(function(){t.f||(t.f=!0,t.a.Ea(t.l))}),(function(){t.reset()}),i,o,s)}function Uc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Bc(t,e,n,r,i){var o;return function(t){return t.b.set(kc,"pending",t.a)}(t.g).then((function(){return t.a.Mb(e,n,r,i).s((function(e){if(Uc(e))throw new S("operation-not-supported-in-this-environment");return o=e,Cc(t.g).then((function(){throw o}))})).then((function(){return t.a.Zb()?new Ee((function(){})):Cc(t.g).then((function(){return t.qa()})).then((function(){})).s((function(){}))}))}))}function Fc(t,e,n,r,i){return t.a.Nb(r,(function(t){e.ma(n,null,t,i)}),Mc.get())}xc.prototype.qa=function(){return this.b.qa()};var qc={};function Gc(t,e,n){return t=t+":"+e,n&&(t=t+":"+n.url),t}function zc(t,e,n,r){var i=Gc(e,n,r);return qc[i]||(qc[i]=new xc(t,e,n,r)),qc[i]}function Kc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Hc(t){t.g||(t.g=!0,Yc(t,!1,null,null))}function Wc(t){t.g&&!t.i&&Yc(t,!1,null,null)}function Xc(t,e){if(t.b=function(){return Ce(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Yc(t,e,n,r){e?r?function(t,e){if(t.b=function(){return xe(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):Xc(t,n):Xc(t,{user:null}),t.f=[],t.c=[]}function Jc(){}function Qc(){this.hb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.hb},set:function(t){this.hb=t},enumerable:!1})}function $c(t,e){this.a=e,Zr(this,"verificationId",t)}function Zc(t,e,n,r){return new Uo(t).eb(e,n).then((function(t){return new $c(t,r)}))}function th(t){var e=Wi(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new S("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");ti(this,{token:t,expirationTime:Wr(1e3*e.exp),authTime:Wr(1e3*e.auth_time),issuedAtTime:Wr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function eh(t,e,n){var r=e&&e[rh];if(!r)throw new S("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=yt(e),this.g=n,this.c=new uo(null,r),this.b=[];var i=this;z(e[nh]||[],(function(t){(t=ii(t))&&i.b.push(t)})),Zr(this,"auth",this.a),Zr(this,"session",this.c),Zr(this,"hints",this.b)}Kc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Kc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,r=t.b,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?t.a?(Yc(this,!0,null,t.a),Ce()):e.Fa(n,r)?function(t,e,n){n=n.Fa(e.c,e.b);var r=e.g,i=e.f,o=e.i,s=e.S(),a=!!e.c.match(/Redirect$/);n(r,i,s,o).then((function(e){Yc(t,a,e,null)})).s((function(e){Yc(t,a,null,e)}))}(this,t,e):xe(new S("invalid-auth-event")):(Yc(this,!1,null,null),Ce())}else xe(new S("invalid-auth-event"))},Kc.prototype.qa=function(){var t=this;return new Ee((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new S("timeout");t.a&&t.a.cancel(),t.a=kn(Vc.get()).then((function(){t.b||(t.g=!0,Yc(t,!0,null,e))}))}(t))}))},Jc.prototype.h=function(t,e){if(t){var n=t.c,r=t.b;t.a?(e.ma(t.c,null,t.a,t.b),Ce()):e.Fa(n,r)?function(t,e){var n=t.b,r=t.c;e.Fa(r,n)(t.g,t.f,t.S(),t.i).then((function(t){e.ma(r,t,null,n)})).s((function(t){e.ma(r,null,t,n)}))}(t,e):xe(new S("invalid-auth-event"))}else xe(new S("invalid-auth-event"))},$c.prototype.confirm=function(t){return t=Bo(this.verificationId,t),this.a(t)};var nh="mfaInfo",rh="mfaPendingCredential";function ih(t,e,n,r){S.call(this,"multi-factor-auth-required",r,e),this.b=new eh(t,e,n),Zr(this,"resolver",this.b)}function oh(t,e,n){if(t&&v(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new ih(e,t.serverResponse,n,t.message)}catch(t){}return null}function sh(){}function ah(t){Zr(this,"factorId",t.fa),this.a=t}function uh(t){if(ah.call(this,t),this.a.fa!=Uo.PROVIDER_ID)throw new S("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function ch(t,e){for(var n in $e.call(this,t),e)this[n]=e[n]}function hh(t,e){this.a=t,this.b=[],this.c=I(this.xc,this),fn(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&z(e.multiFactor.enrolledFactors,(function(t){var e=null,r={};if(t){t.uid&&(r[ai]=t.uid),t.displayName&&(r[oi]=t.displayName),t.enrollmentTime&&(r[si]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(r[ui]=t.phoneNumber);try{e=new ci(r)}catch(t){}t=e}else t=null;t&&n.push(t)})),fh(this,n)}function fh(t,e){t.b=e,Zr(t,"enrolledFactors",e)}function lh(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function ph(t,e){t.stop(),t.b=kn(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(t,e)).then((function(){return function(){var t=a.document,e=null;return Kr()||!t?Ce():new Ee((function(n){e=function(){Kr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).s((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return t.h()})).then((function(){ph(t,!0)})).s((function(e){t.i(e)&&ph(t,!1)}))}function dh(t){this.c=t,this.b=this.a=null}function vh(t){return t.b&&1e3*t.b.c||0}function yh(t,e){var n=e.refreshToken;t.b=Hi(e[ta]||""),t.a=n}function gh(t,e){this.a=t||null,this.b=e||null,ti(this,{lastSignInTime:Wr(e||null),creationTime:Wr(t||null)})}function mh(t,e,n,r,i,o){ti(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}function bh(t,e,n){this.G=[],this.l=t.apiKey,this.m=t.appName,this.o=t.authDomain||null;var r=et.SDK_VERSION?xr(et.SDK_VERSION):null;this.a=new $s(this.l,D(k),r),t.emulatorConfig&&sa(this.a,t.emulatorConfig),this.b=new dh(this.a),Nh(this,e[ta]),yh(this.b,e),Zr(this,"refreshToken",this.b.a),xh(this,n||{}),An.call(this),this.P=!1,this.o&&Rr()&&(this.i=zc(this.o,this.l,this.m)),this.R=[],this.f=null,this.u=function(t){return new lh((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=vh(t.b)-A()-3e5;return 0<e?e:0}))}(this),this.$=I(this.gb,this);var i=this;this.pa=null,this.Ba=function(t){i.wa(t.h)},this.ba=null,this.za=function(t){sa(i.a,t.c)},this.W=null,this.X=[],this.Aa=function(t){Eh(i,t.f)},this.aa=null,this.N=new hh(this,n),Zr(this,"multiFactor",this.N)}function wh(t,e){t.ba&&dn(t.ba,"languageCodeChanged",t.Ba),(t.ba=e)&&fn(e,"languageCodeChanged",t.Ba)}function Ih(t,e){t.W&&dn(t.W,"emulatorConfigChanged",t.za),(t.W=e)&&fn(e,"emulatorConfigChanged",t.za)}function Eh(t,e){t.X=e,ua(t.a,et.SDK_VERSION?xr(et.SDK_VERSION,t.X):null)}function Ah(t,e){t.aa&&dn(t.aa,"frameworkChanged",t.Aa),(t.aa=e)&&fn(e,"frameworkChanged",t.Aa)}function _h(t){try{return et.app(t.m).auth()}catch(e){throw new S("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function Th(t){t.A||t.u.b||(t.u.start(),dn(t,"tokenChanged",t.$),fn(t,"tokenChanged",t.$))}function Sh(t){dn(t,"tokenChanged",t.$),t.u.stop()}function Nh(t,e){t.ya=e,Zr(t,"_lat",e)}function kh(t){for(var e=[],n=0;n<t.R.length;n++)e.push(t.R[n](t));return De(e).then((function(){return t}))}function Ch(t){t.i&&!t.P&&(t.P=!0,Rc(t.i,t))}function xh(t,e){ti(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new gh(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Oh(){}function Dh(t){return Ce().then((function(){if(t.A)throw new S("app-deleted")}))}function Ph(t){return H(t.providerData,(function(t){return t.providerId}))}function Rh(t,e){e&&(Lh(t,e.providerId),t.providerData.push(e))}function Lh(t,e){J(t.providerData,(function(t){return t.providerId==e}))}function Mh(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Zr(t,e,n)}function Vh(t,e){t!=e&&(ti(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Zr(t,"metadata",function(t){return new gh(t.a,t.b)}(e.metadata)):Zr(t,"metadata",new gh),z(e.providerData,(function(e){Rh(t,e)})),function(t,e){t.b=e.b,t.a=e.a}(t.b,e.b),Zr(t,"refreshToken",t.b.a),fh(t.N,e.N.b))}function jh(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return iu(t.a,La,{idToken:e}).then(I(t.Jc,t))}(t,e).then((function(){return n||Mh(t,"isAnonymous",!1),e}))}))}function Uh(t,e){e[ta]&&t.ya!=e[ta]&&(yh(t.b,e),t.dispatchEvent(new ch("tokenChanged")),Nh(t,e[ta]),Mh(t,"refreshToken",t.b.a))}function Bh(t,e){return jh(t).then((function(){if(X(Ph(t),e))return kh(t).then((function(){throw new S("provider-already-linked")}))}))}function Fh(t,e,n){return ei({user:t,credential:Fo(e),additionalUserInfo:e=$i(e),operationType:n})}function qh(t,e){return Uh(t,e),t.reload().then((function(){return t}))}function Gh(t,e,n,r,i){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));if(t.f&&!i)return xe(t.f);var o=Qi(n.providerId),s=Fr(t.uid+":::"),a=null;(!Vr()||Er())&&t.o&&n.isOAuthProvider&&(a=bu(t.o,t.l,t.m,e,n,null,s,et.SDK_VERSION||null,null,null,t.tenantId));var u=gr(a,o&&o.ua,o&&o.ta);return r=r().then((function(){if(Kh(t),!i)return t.I().then((function(){}))})).then((function(){return jc(t.i,u,e,n,s,!!a,t.tenantId)})).then((function(){return new Ee((function(n,r){t.ma(e,null,new S("cancelled-popup-request"),t.h||null),t.g=n,t.O=r,t.h=s,t.c=Fc(t.i,t,e,u,s)}))})).then((function(t){return u&&yr(u),t?ei(t):null})).s((function(t){throw u&&yr(u),t})),Hh(t,r,i)}function zh(t,e,n,r,i){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));if(t.f&&!i)return xe(t.f);var o=null,s=Fr(t.uid+":::");return r=r().then((function(){if(Kh(t),!i)return t.I().then((function(){}))})).then((function(){return t.ga=s,kh(t)})).then((function(e){return t.ha&&(e=(e=t.ha).b.set(Yh,t.w(),e.a)),e})).then((function(){return Bc(t.i,e,n,s,t.tenantId)})).s((function(e){if(o=e,t.ha)return Jh(t.ha);throw o})).then((function(){if(o)throw o})),Hh(t,r,i)}function Kh(t){if(!t.i||!t.P){if(t.i&&!t.P)throw new S("internal-error");throw new S("auth-domain-config-required")}}function Hh(t,e,n){var r=function(t,e,n){return t.f&&!n?(e.cancel(),xe(t.f)):e.s((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.f||t.dispatchEvent(new ch("userInvalidated")),t.f=e),e}))}(t,e,n);return t.G.push(r),r.na((function(){Y(t.G,r)})),r.s((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),_h(t),I(t.ic,t))),n||e}))}function Wh(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName,emulatorConfig:t.emulatorConfig},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[ta]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var r=new bh(e,n,t);return t.providerData&&z(t.providerData,(function(t){t&&Rh(r,ei(t))})),t.redirectEventId&&(r.ga=t.redirectEventId),r}function Xh(t){this.a=t,this.b=nc()}eh.prototype.Qc=function(t){var e=this;return t.rb(this.a.a,this.c).then((function(t){var n=yt(e.f);return delete n[nh],delete n[rh],mt(n,t),e.g(n)}))},_(ih,S),sh.prototype.rb=function(t,e,n){return e.type==co?function(t,e,n,r){return n.Ha().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),mt(n,{phoneVerificationInfo:jo(t.a)}),iu(e,Pa,n)}))}(this,t,e,n):function(t,e,n){return n.Ha().then((function(n){return mt(n={mfaPendingCredential:n},{phoneVerificationInfo:jo(t.a)}),iu(e,Ra,n)}))}(this,t,e)},_(ah,sh),_(uh,ah),_(ch,$e),(t=hh.prototype).xc=function(t){fh(this,function(t){var e=[];return z(t.mfaInfo||[],(function(t){(t=ii(t))&&e.push(t)})),e}(t.gd))},t.Qb=function(){return this.a.I().then((function(t){return new uo(t,null)}))},t.ec=function(t,e){var n=this,r=this.a.a;return this.Qb().then((function(n){return t.rb(r,n,e)})).then((function(t){return Uh(n.a,t),n.a.reload()}))},t.ad=function(t){var e=this,n="string"==typeof t?t:t.uid,r=this.a.a;return this.a.I().then((function(t){return iu(r,ru,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var r=K(e.b,(function(t){return t.uid!=n}));return fh(e,r),Uh(e.a,t),e.a.reload().s((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},t.w=function(){return{multiFactor:{enrolledFactors:H(this.b,(function(t){return t.w()}))}}},lh.prototype.start=function(){this.a=this.c,ph(this,!0)},lh.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},dh.prototype.w=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:vh(this)}},dh.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?xe(new S("user-token-expired")):t||!this.b||A()>vh(this)-3e4?this.a?function(t,e){return function(t,e){return new Ee((function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?ca(t,t.l+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?r(su(t)):t.access_token&&t.refresh_token?n(t):r(new S("internal-error")):r(new S("network-request-failed"))}),"POST",Zn(e).toString(),t.g,t.v.get()):r(new S("internal-error"))}))}(t.c,e).then((function(e){return t.b=Hi(e.access_token),t.a=e.refresh_token,{accessToken:t.b.toString(),refreshToken:t.a}})).s((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):Ce(null):Ce({accessToken:this.b.toString(),refreshToken:this.a})},gh.prototype.w=function(){return{lastLoginAt:this.b,createdAt:this.a}},_(bh,An),bh.prototype.wa=function(t){this.pa=t,oa(this.a,t)},bh.prototype.ka=function(){return this.pa},bh.prototype.Ga=function(){return $(this.X)},bh.prototype.gb=function(){this.u.b&&(this.u.stop(),this.u.start())},Zr(bh.prototype,"providerId","firebase"),(t=bh.prototype).reload=function(){var t=this;return Hh(this,Dh(this).then((function(){return jh(t).then((function(){return kh(t)})).then(Oh)})))},t.nc=function(t){return this.I(t).then((function(t){return new th(t)}))},t.I=function(t){var e=this;return Hh(this,Dh(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new S("internal-error");return t.accessToken!=e.ya&&(Nh(e,t.accessToken),e.dispatchEvent(new ch("tokenChanged"))),Mh(e,"refreshToken",t.refreshToken),t.accessToken})))},t.Jc=function(t){if(!(t=t.users)||!t.length)throw new S("internal-error");xh(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?H(t,(function(t){return new mh(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Rh(this,e[n]);Mh(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new ch("userReloaded",{gd:t}))},t.Kc=function(t){return Qr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.sb(t)},t.sb=function(t){var e=this,n=null;return Hh(this,t.c(this.a,this.uid).then((function(t){return Uh(e,t),n=Fh(e,t,"reauthenticate"),e.f=null,e.reload()})).then((function(){return n})),!0)},t.Bc=function(t){return Qr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.pb(t)},t.pb=function(t){var e=this,n=null;return Hh(this,Bh(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=Fh(e,t,"link"),qh(e,t)})).then((function(){return n})))},t.Cc=function(t,e){var n=this;return Hh(this,Bh(this,"phone").then((function(){return Zc(_h(n),t,e,I(n.pb,n))})))},t.Lc=function(t,e){var n=this;return Hh(this,Ce().then((function(){return Zc(_h(n),t,e,I(n.sb,n))})),!0)},t.Ab=function(t){var e=this;return Hh(this,this.I().then((function(n){return e.a.Ab(n,t)})).then((function(t){return Uh(e,t),e.reload()})))},t.dd=function(t){var e=this;return Hh(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return Uh(e,t),e.reload()})))},t.Bb=function(t){var e=this;return Hh(this,this.I().then((function(n){return e.a.Bb(n,t)})).then((function(t){return Uh(e,t),e.reload()})))},t.Cb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Dh(this);var e=this;return Hh(this,this.I().then((function(n){return e.a.Cb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return Uh(e,t),Mh(e,"displayName",t.displayName||null),Mh(e,"photoURL",t.photoUrl||null),z(e.providerData,(function(t){"password"===t.providerId&&(Zr(t,"displayName",e.displayName),Zr(t,"photoURL",e.photoURL))})),kh(e)})).then(Oh))},t.bd=function(t){var e=this;return Hh(this,jh(this).then((function(n){return X(Ph(e),t)?function(t,e,n){return iu(t,xa,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return z(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),z(Ph(e),(function(t){n[t]||Lh(e,t)})),n[Uo.PROVIDER_ID]||Zr(e,"phoneNumber",null),kh(e)})):kh(e).then((function(){throw new S("no-such-provider")}))})))},t.delete=function(){var t=this;return Hh(this,this.I().then((function(e){return iu(t.a,Ca,{idToken:e})})).then((function(){t.dispatchEvent(new ch("userDeleted"))}))).then((function(){for(var e=0;e<t.G.length;e++)t.G[e].cancel("app-deleted");wh(t,null),Ih(t,null),Ah(t,null),t.G=[],t.A=!0,Sh(t),Zr(t,"refreshToken",null),t.i&&Lc(t.i,t)}))},t.Eb=function(t,e){return!!("linkViaPopup"==t&&(this.h||null)==e&&this.g||"reauthViaPopup"==t&&(this.h||null)==e&&this.g||"linkViaRedirect"==t&&(this.ga||null)==e||"reauthViaRedirect"==t&&(this.ga||null)==e)},t.ma=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.h||null)||(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"linkViaPopup"==t&&e==(this.h||null)?I(this.Jb,this):"reauthViaPopup"==t&&e==(this.h||null)?I(this.Kb,this):"linkViaRedirect"==t&&(this.ga||null)==e?I(this.Jb,this):"reauthViaRedirect"==t&&(this.ga||null)==e?I(this.Kb,this):null},t.Dc=function(t){var e=this;return Gh(this,"linkViaPopup",t,(function(){return Bh(e,t.providerId).then((function(){return kh(e)}))}),!1)},t.Mc=function(t){return Gh(this,"reauthViaPopup",t,(function(){return Ce()}),!0)},t.Ec=function(t){var e=this;return zh(this,"linkViaRedirect",t,(function(){return Bh(e,t.providerId)}),!1)},t.Nc=function(t){return zh(this,"reauthViaRedirect",t,(function(){return Ce()}),!0)},t.Jb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Hh(this,this.I().then((function(n){return Ea(i.a,{requestUri:t,postBody:r,sessionId:e,idToken:n})})).then((function(t){return o=Fh(i,t,"link"),qh(i,t)})).then((function(){return o})))},t.Kb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Hh(this,Ce().then((function(){return lo(Aa(i.a,{requestUri:t,sessionId:e,postBody:r,tenantId:n}),i.uid)})).then((function(t){return o=Fh(i,t,"reauthenticate"),Uh(i,t),i.f=null,i.reload()})).then((function(){return o})),!0)},t.tb=function(t){var e=this,n=null;return Hh(this,this.I().then((function(e){return n=e,void 0===t||vt(t)?{}:Gi(new Pi(t))})).then((function(t){return e.a.tb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},t.Db=function(t,e){var n=this,r=null;return Hh(this,this.I().then((function(t){return r=t,void 0===e||vt(e)?{}:Gi(new Pi(e))})).then((function(e){return n.a.Db(r,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},t.ic=function(t){var e=null,n=this;return Hh(this,t=lo(Ce(t),n.uid).then((function(t){return e=Fh(n,t,"reauthenticate"),Uh(n,t),n.f=null,n.reload()})).then((function(){return e})),!0)},t.toJSON=function(){return this.w()},t.w=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};return this.metadata&&mt(t,this.metadata.w()),z(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),mt(t,this.N.w()),t};var Yh={name:"redirectUser",D:"session"};function Jh(t){return oc(t.b,Yh,t.a)}function Qh(t){this.a=t,this.b=nc(),this.c=null,this.f=function(t){var e=tf("local"),n=tf("session"),r=tf("none");return function(t,e,n){var r=ic(e,n),i=rc(t,e.D);return t.get(e,n).then((function(o){var s=null;try{s=Br(a.localStorage.getItem(r))}catch(t){}if(s&&!o)return a.localStorage.removeItem(r),t.set(e,s,n);s&&o&&"localStorage"!=i.type&&a.localStorage.removeItem(r)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(i){return i?n:t.b.get(r,t.a).then((function(n){return n?r:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(Zh,t.a).then((function(t){return t?tf(t):e}))}))}))})).then((function(e){return t.c=e,$h(t,e.D)})).s((function(){t.c||(t.c=e)}))}(this),this.b.addListener(tf("local"),this.a,I(this.g,this))}function $h(t,e){var n,r=[];for(n in tc)tc[n]!==e&&r.push(oc(t.b,tf(tc[n]),t.a));return r.push(oc(t.b,Zh,t.a)),function(t){return new Ee((function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},s=function(t){n(t)},a=0;a<t.length;a++)Oe(t[a],E(o,a),s);else e(i)}))}(r)}Qh.prototype.g=function(){var t=this,e=tf("local");of(this,(function(){return Ce().then((function(){return t.c&&"local"!=t.c.D?t.b.get(e,t.a):null})).then((function(n){if(n)return $h(t,"local").then((function(){t.c=e}))}))}))};var Zh={name:"persistence",D:"session"};function tf(t){return{name:"authUser",D:t}}function ef(t,e){return of(t,(function(){return t.b.set(t.c,e.w(),t.a)}))}function nf(t){return of(t,(function(){return oc(t.b,t.c,t.a)}))}function rf(t,e,n){return of(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),t&&n&&(t.emulatorConfig=n),Wh(t||{})}))}))}function of(t,e){return t.f=t.f.then(e,e),t.f}function sf(t){if(this.m=!1,Zr(this,"settings",new Qc),Zr(this,"app",t),!df(this).options||!df(this).options.apiKey)throw new S("invalid-api-key");t=et.SDK_VERSION?xr(et.SDK_VERSION):null,this.a=new $s(df(this).options&&df(this).options.apiKey,D(k),t),this.R=[],this.u=[],this.P=[],this.ac=et.INTERNAL.createSubscribe(I(this.yc,this)),this.X=void 0,this.bc=et.INTERNAL.createSubscribe(I(this.zc,this)),lf(this,null),this.l=new Qh(df(this).options.apiKey+":"+df(this).name),this.G=new Xh(df(this).options.apiKey+":"+df(this).name),this.$=mf(this,function(t){var e=df(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(Yh,t.a).then((function(t){return t&&e&&(t.authDomain=e),Wh(t||{})}))}(t.G,df(t).options.authDomain).then((function(e){return(t.o=e)&&(e.ha=t.G),Jh(t.G)}));return mf(t,e)}(t).then((function(){return rf(t.l,e,t.f)})).then((function(e){return e?(e.ha=t.G,t.o&&(t.o.ga||null)==(e.ga||null)?e:e.reload().then((function(){return ef(t.l,e).then((function(){return e}))})).s((function(n){return"auth/network-request-failed"==n.code?e:nf(t.l)}))):null})).then((function(e){lf(t,e||null)}));return mf(t,n)}(this)),this.i=mf(this,function(t){return t.$.then((function(){return ff(t)})).s((function(){})).then((function(){if(!t.m)return t.pa()})).s((function(){})).then((function(){if(!t.m){t.ba=!0;var e=t.l;e.b.addListener(tf("local"),e.a,t.pa)}}))}(this)),this.ba=!1,this.pa=I(this.Yc,this),this.Ba=I(this.da,this),this.ya=I(this.kc,this),this.za=I(this.vc,this),this.Aa=I(this.wc,this),this.b=null,function(t){var e=df(t).options.authDomain,n=df(t).options.apiKey;e&&Rr()&&(t.gb=t.$.then((function(){if(!t.m){if(t.b=zc(e,n,df(t).name,t.f),Rc(t.b,t),vf(t)&&Ch(vf(t)),t.o){Ch(t.o);var r=t.o;r.wa(t.ka()),wh(r,t),Eh(r=t.o,t.N),Ah(r,t),sa((r=t.o).a,t.f),Ih(r,t),t.o=null}return t.b}})))}(this),this.INTERNAL={},this.INTERNAL.delete=I(this.delete,this),this.INTERNAL.logFramework=I(this.Fc,this),this.A=0,An.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ka()},set:function(t){this.wa(t)},enumerable:!1}),t.aa=null,Object.defineProperty(t,"ti",{get:function(){return this.S()},set:function(t){this.xb(t)},enumerable:!1}),t.W=null}(this),this.N=[],this.f=null}function af(t){$e.call(this,"languageCodeChanged"),this.h=t}function uf(t){$e.call(this,"emulatorConfigChanged"),this.c=t}function cf(t){$e.call(this,"frameworkChanged"),this.f=t}function hf(t){return t.gb||xe(new S("auth-domain-config-required"))}function ff(t){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));var e=hf(t).then((function(){return t.b.qa()})).then((function(t){return t?ei(t):null}));return mf(t,e)}function lf(t,e){vf(t)&&(function(t,e){J(t.R,(function(t){return t==e}))}(vf(t),t.Ba),dn(vf(t),"tokenChanged",t.ya),dn(vf(t),"userDeleted",t.za),dn(vf(t),"userInvalidated",t.Aa),Sh(vf(t))),e&&(e.R.push(t.Ba),fn(e,"tokenChanged",t.ya),fn(e,"userDeleted",t.za),fn(e,"userInvalidated",t.Aa),0<t.A&&Th(e)),Zr(t,"currentUser",e),e&&(e.wa(t.ka()),wh(e,t),Eh(e,t.N),Ah(e,t),sa(e.a,t.f),Ih(e,t))}function pf(t,e){var n=null,r=null;return mf(t,e.then((function(e){return n=Fo(e),r=$i(e),function(t,e){var n={};return n.apiKey=df(t).options.apiKey,n.authDomain=df(t).options.authDomain,n.appName=df(t).name,t.f&&(n.emulatorConfig=t.f),t.$.then((function(){return function(t,e,n,r){var i=new bh(t,e);return n&&(i.ha=n),r&&Eh(i,r),i.reload().then((function(){return i}))}(n,e,t.G,t.Ga())})).then((function(e){return vf(t)&&e.uid==vf(t).uid?(Vh(vf(t),e),t.da(e)):(lf(t,e),Ch(e),t.da(e))})).then((function(){gf(t)}))}(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),t,I(t.jc,t))),n||e})).then((function(){return ei({user:vf(t),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function df(t){return t.app}function vf(t){return t.currentUser}function yf(t){return vf(t)&&vf(t)._lat||null}function gf(t){if(t.ba){for(var e=0;e<t.u.length;e++)t.u[e]&&t.u[e](yf(t));if(t.X!==t.getUid()&&t.P.length)for(t.X=t.getUid(),e=0;e<t.P.length;e++)t.P[e]&&t.P[e](yf(t))}}function mf(t,e){return t.R.push(e),e.na((function(){Y(t.R,e)})),e}function bf(){}function wf(){this.a={},this.b=1e12}Qh.prototype.wb=function(t){var e=null,n=this;return function(t){var e=new S("invalid-persistence-type"),n=new S("unsupported-persistence-type");t:{for(r in tc)if(tc[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(_r()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;case"Worker":if("session"===t||!Pu()&&"none"!==t)throw n;break;default:if(!Pr()&&"none"!==t)throw n}}(t),of(this,(function(){return t!=n.c.D?n.b.get(n.c,n.a).then((function(r){return e=r,$h(n,t)})).then((function(){if(n.c=tf(t),e)return n.b.set(n.c,e,n.a)})):Ce()}))},_(sf,An),_(af,$e),_(uf,$e),_(cf,$e),(t=sf.prototype).wb=function(t){return mf(this,t=this.l.wb(t))},t.wa=function(t){this.aa===t||this.m||(this.aa=t,oa(this.a,this.aa),this.dispatchEvent(new af(this.ka())))},t.ka=function(){return this.aa},t.ed=function(){var t=a.navigator;this.wa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.fd=function(t){if(!this.f){if(!/^https?:\/\//.test(t))throw new S("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");Hr("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),a.document&&wr().then((function(){var t=a.document.createElement("div");t.innerText="Running in emulator mode. Do not use with production credentials.",t.style.position="fixed",t.style.width="100%",t.style.backgroundColor="#ffffff",t.style.border=".1em solid #000000",t.style.color="#ff0000",t.style.bottom="0px",t.style.left="0px",t.style.margin="0px",t.style.zIndex=1e4,t.style.textAlign="center",t.classList.add("firebase-emulator-warning"),a.document.body.appendChild(t)})),this.f={url:t},this.settings.hb=!0,sa(this.a,this.f),this.dispatchEvent(new uf(this.f))}},t.Fc=function(t){this.N.push(t),ua(this.a,et.SDK_VERSION?xr(et.SDK_VERSION,this.N):null),this.dispatchEvent(new cf(this.N))},t.Ga=function(){return $(this.N)},t.xb=function(t){this.W===t||this.m||(this.W=t,this.a.b=this.W)},t.S=function(){return this.W},t.toJSON=function(){return{apiKey:df(this).options.apiKey,authDomain:df(this).options.authDomain,appName:df(this).name,currentUser:vf(this)&&vf(this).w()}},t.Eb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.h==e&&!!this.g;default:return!1}},t.ma=function(t,e,n,r){"signInViaPopup"==t&&this.h==r&&(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.h==e&&this.g?I(this.hc,this):null},t.hc=function(t,e,n,r){var i=this,o={requestUri:t,postBody:r,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.$.then((function(){return pf(i,Ia(i.a,o))}))},t.Wc=function(t){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));var e=this,n=Qi(t.providerId),r=Fr(),i=null;(!Vr()||Er())&&df(this).options.authDomain&&t.isOAuthProvider&&(i=bu(df(this).options.authDomain,df(this).options.apiKey,df(this).name,"signInViaPopup",t,null,r,et.SDK_VERSION||null,null,null,this.S(),this.f));var o=gr(i,n&&n.ua,n&&n.ta);return mf(this,n=hf(this).then((function(n){return jc(n,o,"signInViaPopup",t,r,!!i,e.S())})).then((function(){return new Ee((function(t,n){e.ma("signInViaPopup",null,new S("cancelled-popup-request"),e.h),e.g=t,e.O=n,e.h=r,e.c=Fc(e.b,e,"signInViaPopup",o,r)}))})).then((function(t){return o&&yr(o),t?ei(t):null})).s((function(t){throw o&&yr(o),t})))},t.Xc=function(t){if(!Rr())return xe(new S("operation-not-supported-in-this-environment"));var e=this;return mf(this,hf(this).then((function(){return function(t){return of(t,(function(){return t.b.set(Zh,t.c.D,t.a)}))}(e.l)})).then((function(){return Bc(e.b,"signInViaRedirect",t,void 0,e.S())})))},t.qa=function(){var t=this;return ff(this).then((function(e){return t.b&&Wc(t.b.b),e})).s((function(e){throw t.b&&Wc(t.b.b),e}))},t.cd=function(t){if(!t)return xe(new S("null-user"));if(this.W!=t.tenantId)return xe(new S("tenant-id-mismatch"));var e=this,n={};n.apiKey=df(this).options.apiKey,n.authDomain=df(this).options.authDomain,n.appName=df(this).name;var r=function(t,e,n,r){var i=t.b,o={};return o[ta]=i.b&&i.b.toString(),o.refreshToken=i.a,e=new bh(e||{apiKey:t.l,authDomain:t.o,appName:t.m},o),n&&(e.ha=n),r&&Eh(e,r),Vh(e,t),e}(t,n,e.G,e.Ga());return mf(this,this.i.then((function(){if(df(e).options.apiKey!=t.l)return r.reload()})).then((function(){return vf(e)&&t.uid==vf(e).uid?(Vh(vf(e),t),e.da(t)):(lf(e,r),Ch(r),e.da(r))})).then((function(){gf(e)})))},t.zb=function(){var t=this;return mf(this,this.i.then((function(){return t.b&&Wc(t.b.b),vf(t)?(lf(t,null),nf(t.l).then((function(){gf(t)}))):Ce()})))},t.Yc=function(){var t=this;return rf(this.l,df(this).options.authDomain).then((function(e){if(!t.m){var n;if(n=vf(t)&&e){n=vf(t).uid;var r=e.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Vh(vf(t),e),vf(t).I();(vf(t)||e)&&(lf(t,e),e&&(Ch(e),e.ha=t.G),t.b&&Rc(t.b,t),gf(t))}}))},t.da=function(t){return ef(this.l,t)},t.kc=function(){gf(this),this.da(vf(this))},t.vc=function(){this.zb()},t.wc=function(){this.zb()},t.jc=function(t){var e=this;return this.i.then((function(){return pf(e,Ce(t))}))},t.yc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(vf(e))}))},t.zc=function(t){var e=this;!function(t,e){t.P.push(e),mf(t,t.i.then((function(){!t.m&&X(t.P,e)&&t.X!==t.getUid()&&(t.X=t.getUid(),e(yf(t)))})))}(this,(function(){t.next(vf(e))}))},t.Hc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){"function"==typeof t?t(vf(r)):"function"==typeof t.next&&t.next(vf(r))})),this.ac(t,e,n)},t.Gc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){r.X=r.getUid(),"function"==typeof t?t(vf(r)):"function"==typeof t.next&&t.next(vf(r))})),this.bc(t,e,n)},t.mc=function(t){var e=this;return mf(this,this.i.then((function(){return vf(e)?vf(e).I(t).then((function(t){return{accessToken:t}})):null})))},t.Sc=function(t){var e=this;return this.i.then((function(){return pf(e,iu(e.a,$a,{token:t}))})).then((function(t){var n=t.user;return Mh(n,"isAnonymous",!1),e.da(n),t}))},t.Tc=function(t,e){var n=this;return this.i.then((function(){return pf(n,iu(n.a,Za,{email:t,password:e}))}))},t.dc=function(t,e){var n=this;return this.i.then((function(){return pf(n,iu(n.a,Na,{email:t,password:e}))}))},t.Za=function(t){var e=this;return this.i.then((function(){return pf(e,t.ja(e.a))}))},t.Rc=function(t){return Qr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Za(t)},t.yb=function(){var t=this;return this.i.then((function(){var e=vf(t);if(e&&e.isAnonymous){var n=ei({providerId:null,isNewUser:!1});return ei({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return pf(t,t.a.yb()).then((function(e){var n=e.user;return Mh(n,"isAnonymous",!0),t.da(n),e}))}))},t.getUid=function(){return vf(this)&&vf(this).uid||null},t.cc=function(t){this.addAuthTokenListener(t),this.A++,0<this.A&&vf(this)&&Th(vf(this))},t.Oc=function(t){var e=this;z(this.u,(function(n){n==t&&e.A--})),0>this.A&&(this.A=0),0==this.A&&vf(this)&&Sh(vf(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.u.push(t),mf(this,this.i.then((function(){e.m||X(e.u,t)&&t(yf(e))})))},t.removeAuthTokenListener=function(t){J(this.u,(function(e){return e==t}))},t.delete=function(){this.m=!0;for(var t=0;t<this.R.length;t++)this.R[t].cancel("app-deleted");return this.R=[],this.l&&(t=this.l).b.removeListener(tf("local"),t.a,this.pa),this.b&&(Lc(this.b,this),Wc(this.b.b)),Promise.resolve()},t.gc=function(t){return mf(this,function(t,e){return iu(t,ka,{identifier:e,continueUri:Lr()?lr():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.a,t))},t.Ac=function(t){return!!Lo(t)},t.vb=function(t,e){var n=this;return mf(this,Ce().then((function(){var t=new Pi(e);if(!t.c)throw new S("argument-error",Mi+" must be true when sending sign in link to email");return Gi(t)})).then((function(e){return n.a.vb(t,e)})).then((function(){})))},t.hd=function(t){return this.Qa(t).then((function(t){return t.data.email}))},t.mb=function(t,e){return mf(this,this.a.mb(t,e).then((function(){})))},t.Qa=function(t){return mf(this,this.a.Qa(t).then((function(t){return new hi(t)})))},t.ib=function(t){return mf(this,this.a.ib(t).then((function(){})))},t.ub=function(t,e){var n=this;return mf(this,Ce().then((function(){return void 0===e||vt(e)?{}:Gi(new Pi(e))})).then((function(e){return n.a.ub(t,e)})).then((function(){})))},t.Vc=function(t,e){return mf(this,Zc(this,t,e,I(this.Za,this)))},t.Uc=function(t,e){var n=this;return mf(this,Ce().then((function(){var r=e||lr(),i=Ro(t,r);if(!(r=Lo(r)))throw new S("argument-error","Invalid email link!");if(r.tenantId!==n.S())throw new S("tenant-id-mismatch");return n.Za(i)})))},bf.prototype.render=function(){},bf.prototype.reset=function(){},bf.prototype.getResponse=function(){},bf.prototype.execute=function(){};var If=null;function Ef(t,e){return(e=Af(e))&&t.a[e]||null}function Af(t){return(t=void 0===t?1e12:t)?t.toString():null}function _f(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=he(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():fn(this.f,"click",this.i)}function Tf(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function Sf(){}function Nf(){}wf.prototype.render=function(t,e){return this.a[this.b.toString()]=new _f(t,e),this.b++},wf.prototype.reset=function(t){var e=Ef(this,t);t=Af(t),e&&t&&(e.delete(),delete this.a[t])},wf.prototype.getResponse=function(t){return(t=Ef(this,t))?t.getResponse():null},wf.prototype.execute=function(t){(t=Ef(this,t))&&t.execute()},_f.prototype.getResponse=function(){return Tf(this),this.b},_f.prototype.execute=function(){Tf(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},_f.prototype.delete=function(){Tf(this),this.g=!0,clearTimeout(this.a),this.a=null,dn(this.f,"click",this.i)},Zr(Sf,"FACTOR_ID","phone"),Nf.prototype.g=function(){return If||(If=new wf),Ce(If)},Nf.prototype.c=function(){};var kf=null;function Cf(){this.b=a.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var xf=new wt(_t,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Of=new zr(3e4,6e4);Cf.prototype.g=function(t){var e=this;return new Ee((function(n,r){var i=setTimeout((function(){r(new S("network-request-failed"))}),Of.get());!a.grecaptcha||t!==e.f&&!e.b?(a[e.a]=function(){if(a.grecaptcha){e.f=t;var o=a.grecaptcha.render;a.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(i),n(a.grecaptcha)}else clearTimeout(i),r(new S("internal-error"));delete a[e.a]},Ce(Ks(kt(xf,{onload:e.a,hl:t||""}))).s((function(){clearTimeout(i),r(new S("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(a.grecaptcha))}))},Cf.prototype.c=function(){this.b--};var Df=null;function Pf(t,e,n,r,i,o,s){if(Zr(this,"type","recaptcha"),this.c=this.f=null,this.A=!1,this.m=e,this.g=null,s?(kf||(kf=new Nf),s=kf):(Df||(Df=new Cf),s=Df),this.v=s,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Mf])throw new S("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Vf],!a.document)throw new S("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!he(e)||!this.i&&he(e).hasChildNodes())throw new S("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new $s(t,o||null,i||null),this.u=r||function(){return null};var u=this;this.l=[];var c=this.a[Rf];this.a[Rf]=function(t){if(jf(u,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=Dr(c,a);"function"==typeof e&&e(t)}};var h=this.a[Lf];this.a[Lf]=function(){if(jf(u,null),"function"==typeof h)h();else if("string"==typeof h){var t=Dr(h,a);"function"==typeof t&&t()}}}var Rf="callback",Lf="expired-callback",Mf="sitekey",Vf="size";function jf(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function Uf(t,e){return t.h.push(e),e.na((function(){Y(t.h,e)})),e}function Bf(t){if(t.A)throw new S("internal-error","RecaptchaVerifier instance has been destroyed.")}function Ff(t,e,n){var r=!1;try{this.b=n||et.app()}catch(t){throw new S("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new S("invalid-api-key");n=this.b.options.apiKey;var i=this,o=null;try{o=this.b.auth().Ga()}catch(t){}try{r=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}o=et.SDK_VERSION?xr(et.SDK_VERSION,o):null,Pf.call(this,n,t,e,(function(){try{var t=i.b.auth().ka()}catch(e){t=null}return t}),o,D(k),r)}function qf(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,s=0;s<e.length;s++)if(e[s].optional)o=!0;else{if(o)throw new S("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].K(n[i])&&!o){if(e=e[i],0>i||i>=Gf.length)throw new S("internal-error","Argument validator received an unsupported number of arguments.");n=Gf[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.J+".";break t}r=null}}if(r)throw new S("argument-error",t+" failed: "+r)}(t=Pf.prototype).Ia=function(){var t=this;return this.f?this.f:this.f=Uf(this,Ce().then((function(){if(Lr()&&!Ar())return wr();throw new S("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.v.g(t.u())})).then((function(e){return t.g=e,iu(t.o,Fa,{})})).then((function(e){t.a[Mf]=e.recaptchaSiteKey})).s((function(e){throw t.f=null,e})))},t.render=function(){Bf(this);var t=this;return Uf(this,this.Ia().then((function(){if(null===t.c){var e=t.m;if(!t.i){var n=he(e);e=function(t,e,n){var r=arguments,i=document,o=String(r[0]),s=r[1];if(!ce&&s&&(s.name||s.type)){if(o=["<",o],s.name&&o.push(' name="',Kt(s.name),'"'),s.type){o.push(' type="',Kt(s.type),'"');var a={};mt(a,s),delete a.type,s=a}o.push(">"),o=o.join("")}return o=ye(i,o),s&&("string"==typeof s?o.className=s:Array.isArray(s)?o.className=s.join(" "):fe(o,s)),2<r.length&&ve(i,o,r),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},t.verify=function(){Bf(this);var t=this;return Uf(this,this.render().then((function(e){return new Ee((function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){J(t.l,(function(t){return t==e}))}(t,i),n(e))};t.l.push(i),t.i&&t.g.execute(t.c)}}))})))},t.reset=function(){Bf(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Bf(this),this.A=!0,this.v.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=he(this.m);for(var e;e=t.firstChild;)t.removeChild(e)}},_(Ff,Pf);var Gf="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function zf(t,e){return{name:t||"",J:"a valid string",optional:!!e,K:function(t){return"string"==typeof t}}}function Kf(t,e){return{name:t||"",J:"a boolean",optional:!!e,K:function(t){return"boolean"==typeof t}}}function Hf(t,e){return{name:t||"",J:"a valid object",optional:!!e,K:v}}function Wf(t,e){return{name:t||"",J:"a function",optional:!!e,K:function(t){return"function"==typeof t}}}function Xf(t,e){return{name:t||"",J:"null",optional:!!e,K:function(t){return null===t}}}function Yf(t){return{name:t?t+"Credential":"credential",J:t?"a valid "+t+" credential":"a valid credential",optional:!1,K:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ja||!n)}}}function Jf(t,e){return v(t)&&"string"==typeof t.type&&t.type===e&&"function"==typeof t.Ha}function Qf(t){return v(t)&&"string"==typeof t.uid}function $f(t,e,n,r){return{name:n||"",J:t.J+" or "+e.J,optional:!!r,K:function(n){return t.K(n)||e.K(n)}}}function Zf(t,e){for(var n in e){var r=e[n].name;t[r]=nl(r,t[n],e[n].j)}}function tl(t,e){for(var n in e){var r=e[n].name;r!==n&&Object.defineProperty(t,r,{get:E((function(t){return this[t]}),n),set:E((function(t,e,n,r){qf(t,[n],[r],!0),this[e]=r}),r,n,e[n].jb),enumerable:!0})}}function el(t,e,n,r){t[e]=nl(e,n,r)}function nl(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return qf(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}Zf(sf.prototype,{ib:{name:"applyActionCode",j:[zf("code")]},Qa:{name:"checkActionCode",j:[zf("code")]},mb:{name:"confirmPasswordReset",j:[zf("code"),zf("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[zf("email"),zf("password")]},gc:{name:"fetchSignInMethodsForEmail",j:[zf("email")]},qa:{name:"getRedirectResult",j:[]},Ac:{name:"isSignInWithEmailLink",j:[zf("emailLink")]},Gc:{name:"onAuthStateChanged",j:[$f(Hf(),Wf(),"nextOrObserver"),Wf("opt_error",!0),Wf("opt_completed",!0)]},Hc:{name:"onIdTokenChanged",j:[$f(Hf(),Wf(),"nextOrObserver"),Wf("opt_error",!0),Wf("opt_completed",!0)]},ub:{name:"sendPasswordResetEmail",j:[zf("email"),$f(Hf("opt_actionCodeSettings",!0),Xf(null,!0),"opt_actionCodeSettings",!0)]},vb:{name:"sendSignInLinkToEmail",j:[zf("email"),Hf("actionCodeSettings")]},wb:{name:"setPersistence",j:[zf("persistence")]},Rc:{name:"signInAndRetrieveDataWithCredential",j:[Yf()]},yb:{name:"signInAnonymously",j:[]},Za:{name:"signInWithCredential",j:[Yf()]},Sc:{name:"signInWithCustomToken",j:[zf("token")]},Tc:{name:"signInWithEmailAndPassword",j:[zf("email"),zf("password")]},Uc:{name:"signInWithEmailLink",j:[zf("email"),zf("emailLink",!0)]},Vc:{name:"signInWithPhoneNumber",j:[zf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Wc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Xc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},cd:{name:"updateCurrentUser",j:[$f({name:"user",J:"an instance of Firebase User",optional:!1,K:function(t){return!!(t&&t instanceof bh)}},Xf(),"user")]},zb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[zf(null,!0)]},ed:{name:"useDeviceLanguage",j:[]},fd:{name:"useEmulator",j:[zf("url")]},hd:{name:"verifyPasswordResetCode",j:[zf("code")]}}),tl(sf.prototype,{lc:{name:"languageCode",jb:$f(zf(),Xf(),"languageCode")},ti:{name:"tenantId",jb:$f(zf(),Xf(),"tenantId")}}),sf.Persistence=tc,sf.Persistence.LOCAL="local",sf.Persistence.SESSION="session",sf.Persistence.NONE="none",Zf(bh.prototype,{delete:{name:"delete",j:[]},nc:{name:"getIdTokenResult",j:[Kf("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Kf("opt_forceRefresh",!0)]},Bc:{name:"linkAndRetrieveDataWithCredential",j:[Yf()]},pb:{name:"linkWithCredential",j:[Yf()]},Cc:{name:"linkWithPhoneNumber",j:[zf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Dc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ec:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Kc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Yf()]},sb:{name:"reauthenticateWithCredential",j:[Yf()]},Lc:{name:"reauthenticateWithPhoneNumber",j:[zf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Mc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Nc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},tb:{name:"sendEmailVerification",j:[$f(Hf("opt_actionCodeSettings",!0),Xf(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[zf(null,!0)]},bd:{name:"unlink",j:[zf("provider")]},Ab:{name:"updateEmail",j:[zf("email")]},Bb:{name:"updatePassword",j:[zf("password")]},dd:{name:"updatePhoneNumber",j:[Yf("phone")]},Cb:{name:"updateProfile",j:[Hf("profile")]},Db:{name:"verifyBeforeUpdateEmail",j:[zf("email"),$f(Hf("opt_actionCodeSettings",!0),Xf(null,!0),"opt_actionCodeSettings",!0)]}}),Zf(wf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zf(bf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zf(Ee.prototype,{na:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),tl(Qc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",jb:Kf("appVerificationDisabledForTesting")}}),Zf($c.prototype,{confirm:{name:"confirm",j:[zf("verificationCode")]}}),el(fo,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[bo,Do,Vo,yo],r=0;r<n.length;r++)if(e=n[r](t))return e;return null}),[$f(zf(),Hf(),"json")]),el(Po,"credential",(function(t,e){return new Oo(t,e)}),[zf("email"),zf("password")]),Zf(Oo.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),Zf(Ao.prototype,{Ca:{name:"addScope",j:[zf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(Ao,"credential",_o,[$f(zf(),Hf(),"token")]),el(Po,"credentialWithLink",Ro,[zf("email"),zf("emailLink")]),Zf(To.prototype,{Ca:{name:"addScope",j:[zf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(To,"credential",So,[$f(zf(),Hf(),"token")]),Zf(No.prototype,{Ca:{name:"addScope",j:[zf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(No,"credential",ko,[$f(zf(),$f(Hf(),Xf()),"idToken"),$f(zf(),Xf(),"accessToken",!0)]),Zf(Co.prototype,{Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),el(Co,"credential",xo,[$f(zf(),Hf(),"token"),zf("secret",!0)]),Zf(Eo.prototype,{Ca:{name:"addScope",j:[zf("scope")]},credential:{name:"credential",j:[$f(zf(),$f(Hf(),Xf()),"optionsOrIdToken"),$f(zf(),Xf(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),Zf(go.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),Zf(po.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),el(Uo,"credential",Bo,[zf("verificationId"),zf("verificationCode")]),Zf(Uo.prototype,{eb:{name:"verifyPhoneNumber",j:[$f(zf(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(t){return!!t&&(t.session&&t.phoneNumber?Jf(t.session,co)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?Jf(t.session,ho)&&Qf(t.multiFactorHint):t.session&&t.multiFactorUid?Jf(t.session,ho)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]}}),Zf(Mo.prototype,{w:{name:"toJSON",j:[zf(null,!0)]}}),Zf(S.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(Yo.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(Xo.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(ih.prototype,{toJSON:{name:"toJSON",j:[zf(null,!0)]}}),Zf(eh.prototype,{Qc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}}]}}),Zf(hh.prototype,{Qb:{name:"getSession",j:[]},ec:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}},zf("displayName",!0)]},ad:{name:"unenroll",j:[$f({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Qf},zf(),"multiFactorInfoIdentifier")]}}),Zf(Ff.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),el(_i,"parseLink",Di,[zf("link")]),el(Sf,"assertion",(function(t){return new uh(t)}),[Yf("phone")]),function(){if(void 0===et||!et.INTERNAL||!et.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:li,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:fi,VERIFY_AND_CHANGE_EMAIL:pi,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:sf,AuthCredential:fo,Error:S};el(t,"EmailAuthProvider",Po,[]),el(t,"FacebookAuthProvider",Ao,[]),el(t,"GithubAuthProvider",To,[]),el(t,"GoogleAuthProvider",No,[]),el(t,"TwitterAuthProvider",Co,[]),el(t,"OAuthProvider",Eo,[zf("providerId")]),el(t,"SAMLAuthProvider",Io,[zf("providerId")]),el(t,"PhoneAuthProvider",Uo,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(t){return!!(t&&t instanceof sf)}}]),el(t,"RecaptchaVerifier",Ff,[$f(zf(),{name:"",J:"an HTML element",optional:!1,K:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Hf("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(t){return!!(t&&t instanceof et.app.App)}}]),el(t,"ActionCodeURL",_i,[]),el(t,"PhoneMultiFactorGenerator",Sf,[]),et.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new sf(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),et.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:I((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:I(t.mc,t),addAuthTokenListener:I(t.cc,t),removeAuthTokenListener:I(t.Oc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),et.registerVersion("@firebase/auth","0.15.2"),et.INTERNAL.extendNamespace({User:bh})}()}.apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var ye=function(t,e){return(ye=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function ge(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}var me,be="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},we=we||{},Ie=be||self;function Ee(){}function Ae(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function _e(t){var e=Ae(t);return"array"==e||"object"==e&&"number"==typeof t.length}function Te(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var Se="closure_uid_"+(1e9*Math.random()>>>0),Ne=0;function ke(t,e,n){return t.call.apply(t.bind,arguments)}function Ce(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function xe(t,e,n){return(xe=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ke:Ce).apply(null,arguments)}function Oe(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var De=Date.now;function Pe(t,e){function n(){}n.prototype=e.prototype,t.S=e.prototype,t.prototype=new n,t.prototype.constructor=t}function Re(){this.j=this.j,this.i=this.i}Re.prototype.j=!1,Re.prototype.ja=function(){!this.j&&(this.j=!0,this.G(),0)&&function(t){Object.prototype.hasOwnProperty.call(t,Se)&&t[Se]||(t[Se]=++Ne)}(this)},Re.prototype.G=function(){if(this.i)for(;this.i.length;)this.i.shift()()};var Le=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},Me=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)};function Ve(t){return Array.prototype.concat.apply([],arguments)}function je(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function Ue(t){return/^[\s\xa0]*$/.test(t)}var Be,Fe=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function qe(t,e){return-1!=t.indexOf(e)}function Ge(t,e){return t<e?-1:t>e?1:0}t:{var ze=Ie.navigator;if(ze){var Ke=ze.userAgent;if(Ke){Be=Ke;break t}}Be=""}function He(t,e,n){for(var r in t)e.call(n,t[r],r,t)}function We(t){var e={};for(var n in t)e[n]=t[n];return e}var Xe="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Ye(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<Xe.length;o++)n=Xe[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function Je(t){return Je[" "](t),t}Je[" "]=Ee;var Qe,$e,Ze=qe(Be,"Opera"),tn=qe(Be,"Trident")||qe(Be,"MSIE"),en=qe(Be,"Edge"),nn=en||tn,rn=qe(Be,"Gecko")&&!(qe(Be.toLowerCase(),"webkit")&&!qe(Be,"Edge"))&&!(qe(Be,"Trident")||qe(Be,"MSIE"))&&!qe(Be,"Edge"),on=qe(Be.toLowerCase(),"webkit")&&!qe(Be,"Edge");function sn(){var t=Ie.document;return t?t.documentMode:void 0}t:{var an="",un=($e=Be,rn?/rv:([^\);]+)(\)|;)/.exec($e):en?/Edge\/([\d\.]+)/.exec($e):tn?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec($e):on?/WebKit\/(\S+)/.exec($e):Ze?/(?:Version)[ \/]?(\S+)/.exec($e):void 0);if(un&&(an=un?un[1]:""),tn){var cn=sn();if(null!=cn&&cn>parseFloat(an)){Qe=String(cn);break t}}Qe=an}var hn,fn={};function ln(t){return function(t,e){var n=fn;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=Fe(String(Qe)).split("."),r=Fe(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var s=n[o]||"",a=r[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],0==s[0].length&&0==a[0].length)break;e=Ge(0==s[1].length?0:parseInt(s[1],10),0==a[1].length?0:parseInt(a[1],10))||Ge(0==s[2].length,0==a[2].length)||Ge(s[2],a[2]),s=s[3],a=a[3]}while(0==e)}return 0<=e}))}Ie.document&&tn?hn=sn()||parseInt(Qe,10)||void 0:hn=void 0;var pn=hn,dn=!tn||9<=Number(pn),vn=tn&&!ln("9"),yn=function(){if(!Ie.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{Ie.addEventListener("test",Ee,e),Ie.removeEventListener("test",Ee,e)}catch(t){}return t}();function gn(t,e){this.type=t,this.a=this.target=e,this.defaultPrevented=!1}function mn(t,e){if(gn.call(this,t?t.type:""),this.relatedTarget=this.a=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.c=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.a=e,e=t.relatedTarget){if(rn){t:{try{Je(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:bn[t.pointerType]||"",this.c=t,t.defaultPrevented&&this.b()}}gn.prototype.b=function(){this.defaultPrevented=!0},Pe(mn,gn);var bn={2:"touch",3:"pen",4:"mouse"};mn.prototype.b=function(){mn.S.b.call(this);var t=this.c;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,vn)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}};var wn="closure_listenable_"+(1e6*Math.random()|0),In=0;function En(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.ca=i,this.key=++In,this.Y=this.Z=!1}function An(t){t.Y=!0,t.listener=null,t.proxy=null,t.src=null,t.ca=null}function _n(t){this.src=t,this.a={},this.b=0}function Tn(t,e){var n=e.type;if(n in t.a){var r,i=t.a[n],o=Le(i,e);(r=0<=o)&&Array.prototype.splice.call(i,o,1),r&&(An(e),0==t.a[n].length&&(delete t.a[n],t.b--))}}function Sn(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.Y&&o.listener==e&&o.capture==!!n&&o.ca==r)return i}return-1}_n.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var s=Sn(t,e,r,i);return-1<s?(e=t[s],n||(e.Z=!1)):((e=new En(e,this.src,o,!!r,i)).Z=n,t.push(e)),e};var Nn="closure_lm_"+(1e6*Math.random()|0),kn={};function Cn(t,e,n,r,i){if(r&&r.once)return On(t,e,n,r,i);if(Array.isArray(e)){for(var o=0;o<e.length;o++)Cn(t,e[o],n,r,i);return null}return n=Un(n),t&&t[wn]?t.va(e,n,Te(r)?!!r.capture:!!r,i):xn(t,e,n,!1,r,i)}function xn(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var s=Te(i)?!!i.capture:!!i;if(s&&!dn)return null;var a=Vn(t);if(a||(t[Nn]=a=new _n(t)),(n=a.add(e,n,r,s,o)).proxy)return n;if(r=function(){var t=Mn,e=dn?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)yn||(i=s),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(Rn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}return n}function On(t,e,n,r,i){if(Array.isArray(e)){for(var o=0;o<e.length;o++)On(t,e[o],n,r,i);return null}return n=Un(n),t&&t[wn]?t.wa(e,n,Te(r)?!!r.capture:!!r,i):xn(t,e,n,!0,r,i)}function Dn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)Dn(t,e[o],n,r,i);else r=Te(r)?!!r.capture:!!r,n=Un(n),t&&t[wn]?(t=t.c,(e=String(e).toString())in t.a&&-1<(n=Sn(o=t.a[e],n,r,i))&&(An(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=Vn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=Sn(e,n,r,i)),(n=-1<t?e[t]:null)&&Pn(n))}function Pn(t){if("number"!=typeof t&&t&&!t.Y){var e=t.src;if(e&&e[wn])Tn(e.c,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(Rn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=Vn(e))?(Tn(n,t),0==n.b&&(n.src=null,e[Nn]=null)):An(t)}}}function Rn(t){return t in kn?kn[t]:kn[t]="on"+t}function Ln(t,e){var n=t.listener,r=t.ca||t.src;return t.Z&&Pn(t),n.call(r,e)}function Mn(t,e){if(t.Y)return!0;if(!dn){if(!e)t:{e=["window","event"];for(var n=Ie,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}return Ln(t,e=new mn(e,this))}return Ln(t,new mn(e,this))}function Vn(t){return(t=t[Nn])instanceof _n?t:null}var jn="__closure_events_fn_"+(1e9*Math.random()>>>0);function Un(t){return"function"==Ae(t)?t:(t[jn]||(t[jn]=function(e){return t.handleEvent(e)}),t[jn])}function Bn(){Re.call(this),this.c=new _n(this),this.J=this,this.C=null}function Fn(t,e,n,r){if(!(e=t.c.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var s=e[o];if(s&&!s.Y&&s.capture==n){var a=s.listener,u=s.ca||s.src;s.Z&&Tn(t.c,s),i=!1!==a.call(u,r)&&i}}return i&&!r.defaultPrevented}Pe(Bn,Re),Bn.prototype[wn]=!0,(me=Bn.prototype).addEventListener=function(t,e,n,r){Cn(this,t,e,n,r)},me.removeEventListener=function(t,e,n,r){Dn(this,t,e,n,r)},me.dispatchEvent=function(t){var e,n=this.C;if(n)for(e=[];n;n=n.C)e.push(n);n=this.J;var r=t.type||t;if("string"==typeof t)t=new gn(t,n);else if(t instanceof gn)t.target=t.target||n;else{var i=t;Ye(t=new gn(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var s=t.a=e[o];i=Fn(s,r,!0,t)&&i}if(i=Fn(s=t.a=n,r,!0,t)&&i,i=Fn(s,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=Fn(s=t.a=e[o],r,!1,t)&&i;return i},me.G=function(){if(Bn.S.G.call(this),this.c){var t,e=this.c;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)An(n[r]);delete e.a[t],e.b--}}this.C=null},me.va=function(t,e,n,r){return this.c.add(String(t),e,!1,n,r)},me.wa=function(t,e,n,r){return this.c.add(String(t),e,!0,n,r)};var qn=Ie.JSON.stringify;function Gn(){this.b=this.a=null}var zn,Kn=new(function(){function t(t,e,n){this.f=n,this.c=t,this.g=e,this.b=0,this.a=null}return t.prototype.get=function(){var t;return 0<this.b?(this.b--,t=this.a,this.a=t.next,t.next=null):t=this.c(),t},t}())((function(){return new Wn}),(function(t){t.reset()}),100);function Hn(){var t=Qn,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function Wn(){this.next=this.b=this.a=null}function Xn(t){Ie.setTimeout((function(){throw t}),0)}function Yn(t,e){zn||function(){var t=Ie.Promise.resolve(void 0);zn=function(){t.then($n)}}(),Jn||(zn(),Jn=!0),Qn.add(t,e)}Gn.prototype.add=function(t,e){var n=Kn.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},Wn.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},Wn.prototype.reset=function(){this.next=this.b=this.a=null};var Jn=!1,Qn=new Gn;function $n(){for(var t;t=Hn();){try{t.a.call(t.b)}catch(t){Xn(t)}var e=Kn;e.g(t),e.b<e.f&&(e.b++,t.next=e.a,e.a=t)}Jn=!1}function Zn(t,e){Bn.call(this),this.b=t||1,this.a=e||Ie,this.f=xe(this.Ya,this),this.g=De()}function tr(t){t.aa=!1,t.M&&(t.a.clearTimeout(t.M),t.M=null)}function er(t,e,n){if("function"==Ae(t))n&&(t=xe(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=xe(t.handleEvent,t)}return 2147483647<Number(e)?-1:Ie.setTimeout(t,e||0)}function nr(t){t.a=er((function(){t.a=null,t.c&&(t.c=!1,nr(t))}),t.h);var e=t.b;t.b=null,t.g.apply(null,e)}Pe(Zn,Bn),(me=Zn.prototype).aa=!1,me.M=null,me.Ya=function(){if(this.aa){var t=De()-this.g;0<t&&t<.8*this.b?this.M=this.a.setTimeout(this.f,this.b-t):(this.M&&(this.a.clearTimeout(this.M),this.M=null),this.dispatchEvent("tick"),this.aa&&(tr(this),this.start()))}},me.start=function(){this.aa=!0,this.M||(this.M=this.a.setTimeout(this.f,this.b),this.g=De())},me.G=function(){Zn.S.G.call(this),tr(this),delete this.a};var rr=function(t){function e(e,n,r){var i=t.call(this)||this;return i.g=null!=r?e.bind(r):e,i.h=n,i.b=null,i.c=!1,i.a=null,i}return function(t,e){function n(){this.constructor=t}ye(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.f=function(t){this.b=arguments,this.a?this.c=!0:nr(this)},e.prototype.G=function(){t.prototype.G.call(this),this.a&&(Ie.clearTimeout(this.a),this.a=null,this.c=!1,this.b=null)},e}(Re);function ir(t){Re.call(this),this.b=t,this.a={}}Pe(ir,Re);var or=[];function sr(t,e,n,r){Array.isArray(n)||(n&&(or[0]=n.toString()),n=or);for(var i=0;i<n.length;i++){var o=Cn(e,n[i],r||t.handleEvent,!1,t.b||t);if(!o)break;t.a[o.key]=o}}function ar(t){He(t.a,(function(t,e){this.a.hasOwnProperty(e)&&Pn(t)}),t),t.a={}}function ur(){this.a=!0}function cr(t,e,n,r){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.a)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var r=n[t];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var o=i[0];if("noop"!=o&&"stop"!=o&&"close"!=o)for(var s=1;s<i.length;s++)i[s]=""}}}return qn(n)}catch(t){return e}}(t,n)+(r?" "+r:"")}))}ir.prototype.G=function(){ir.S.G.call(this),ar(this)},ir.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},ur.prototype.info=function(){};var hr=null;function fr(){return hr=hr||new Bn}function lr(t){gn.call(this,"serverreachability",t)}function pr(t){var e=fr();e.dispatchEvent(new lr(e,t))}function dr(t){gn.call(this,"statevent",t)}function vr(t){var e=fr();e.dispatchEvent(new dr(e,t))}function yr(t){gn.call(this,"timingevent",t)}function gr(t,e){if("function"!=Ae(t))throw Error("Fn must not be null and must be a function");return Ie.setTimeout((function(){t()}),e)}Pe(lr,gn),Pe(dr,gn),Pe(yr,gn);var mr={NO_ERROR:0,Za:1,gb:2,fb:3,bb:4,eb:5,hb:6,Da:7,TIMEOUT:8,kb:9},br={ab:"complete",ob:"success",Ea:"error",Da:"abort",mb:"ready",nb:"readystatechange",TIMEOUT:"timeout",ib:"incrementaldata",lb:"progress",cb:"downloadprogress",pb:"uploadprogress"};function wr(){}function Ir(t){var e;return(e=t.a)||(e=t.a={}),e}function Er(){}wr.prototype.a=null;var Ar,_r={OPEN:"a",$a:"b",Ea:"c",jb:"d"};function Tr(){gn.call(this,"d")}function Sr(){gn.call(this,"c")}function Nr(){}function kr(t,e,n,r){this.g=t,this.c=e,this.f=n,this.T=r||1,this.J=new ir(this),this.P=Cr,t=nn?125:void 0,this.R=new Zn(t),this.B=null,this.b=!1,this.j=this.l=this.i=this.H=this.u=this.U=this.o=null,this.s=[],this.a=null,this.D=0,this.h=this.m=null,this.N=-1,this.A=!1,this.O=0,this.F=null,this.W=this.C=this.V=this.I=!1}Pe(Tr,gn),Pe(Sr,gn),Pe(Nr,wr),Ar=new Nr;var Cr=45e3,xr={},Or={};function Dr(t,e,n){t.H=1,t.i=ti(Xr(e)),t.j=n,t.I=!0,Pr(t,null)}function Pr(t,e){t.u=De(),Mr(t),t.l=Xr(t.i);var n=t.l,r=t.T;Array.isArray(r)||(r=[String(r)]),pi(n.b,"t",r),t.D=0,t.a=ao(t.g,t.g.C?e:null),0<t.O&&(t.F=new rr(xe(t.Ca,t,t.a),t.O)),sr(t.J,t.a,"readystatechange",t.Wa),e=t.B?We(t.B):{},t.j?(t.m||(t.m="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.a.ba(t.l,t.m,t.j,e)):(t.m="GET",t.a.ba(t.l,t.m,null,e)),pr(1),function(t,e,n,r,i,o){t.info((function(){if(t.a)if(o)for(var s="",a=o.split("&"),u=0;u<a.length;u++){var c=a[u].split("=");if(1<c.length){var h=c[0];c=c[1];var f=h.split("_");s=2<=f.length&&"type"==f[1]?s+(h+"=")+c+"&":s+(h+"=redacted&")}}else s=null;else s=o;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+e+"\n"+n+"\n"+s}))}(t.c,t.m,t.l,t.f,t.T,t.j)}function Rr(t,e,n){for(var r=!0;!t.A&&t.D<n.length;){var i=Lr(t,n);if(i==Or){4==e&&(t.h=4,vr(14),r=!1),cr(t.c,t.f,null,"[Incomplete Response]");break}if(i==xr){t.h=4,vr(15),cr(t.c,t.f,n,"[Invalid Chunk]"),r=!1;break}cr(t.c,t.f,i,null),Fr(t,i)}4==e&&0==n.length&&(t.h=1,vr(16),r=!1),t.b=t.b&&r,r?0<n.length&&!t.W&&(t.W=!0,(e=t.g).a==t&&e.V&&!e.F&&(e.c.info("Great, no buffering proxy detected. Bytes received: "+n.length),Zi(e),e.F=!0)):(cr(t.c,t.f,n,"[Invalid Chunked Response]"),Br(t),Ur(t))}function Lr(t,e){var n=t.D,r=e.indexOf("\n",n);return-1==r?Or:(n=Number(e.substring(n,r)),isNaN(n)?xr:(r+=1)+n>e.length?Or:(e=e.substr(r,n),t.D=r+n,e))}function Mr(t){t.U=De()+t.P,Vr(t,t.P)}function Vr(t,e){if(null!=t.o)throw Error("WatchDog timer not null");t.o=gr(xe(t.Ua,t),e)}function jr(t){t.o&&(Ie.clearTimeout(t.o),t.o=null)}function Ur(t){0==t.g.v||t.A||no(t.g,t)}function Br(t){jr(t);var e=t.F;e&&"function"==typeof e.ja&&e.ja(),t.F=null,tr(t.R),ar(t.J),t.a&&(e=t.a,t.a=null,e.abort(),e.ja())}function Fr(t,e){try{var n=t.g;if(0!=n.v&&(n.a==t||wi(n.b,t)))if(n.I=t.N,!t.C&&wi(n.b,t)&&3==n.v){try{var r=n.ka.a.parse(e)}catch(t){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){t:if(!n.j){if(n.a){if(!(n.a.u+3e3<t.u))break t;eo(n),zi(n)}$i(n),vr(18)}}else n.oa=i[1],0<n.oa-n.P&&37500>i[2]&&n.H&&0==n.o&&!n.m&&(n.m=gr(xe(n.Ra,n),6e3));if(1>=bi(n.b)&&n.ea){try{n.ea()}catch(t){}n.ea=void 0}}else io(n,11)}else if((t.C||n.a==t)&&eo(n),!Ue(e))for(e=r=n.ka.a.parse(e),r=0;r<e.length;r++)if(i=e[r],n.P=i[0],i=i[1],2==n.v)if("c"==i[0]){n.J=i[1],n.ga=i[2];var o=i[3];null!=o&&(n.ha=o,n.c.info("VER="+n.ha));var s=i[4];null!=s&&(n.pa=s,n.c.info("SVER="+n.pa));var a=i[5];if(null!=a&&"number"==typeof a&&0<a){var u=1.5*a;n.D=u,n.c.info("backChannelRequestTimeoutMs_="+u)}u=n;var c=t.a;if(c){var h=c.a?c.a.getResponseHeader("X-Client-Wire-Protocol"):null;if(h){var f=u.b;!f.a&&(qe(h,"spdy")||qe(h,"quic")||qe(h,"h2"))&&(f.f=f.g,f.a=new Set,f.b&&(Ii(f,f.b),f.b=null))}if(u.A){var l=c.a?c.a.getResponseHeader("X-HTTP-Session-Id"):null;l&&(u.na=l,Zr(u.B,u.A,l))}}n.v=3,n.f&&n.f.ta(),n.V&&(n.N=De()-t.u,n.c.info("Handshake RTT: "+n.N+"ms"));var p=t;if((u=n).la=so(u,u.C?u.ga:null,u.fa),p.C){Ei(u.b,p);var d=p,v=u.D;v&&d.setTimeout(v),d.o&&(jr(d),Mr(d)),u.a=p}else Qi(u);0<n.g.length&&Wi(n)}else"stop"!=i[0]&&"close"!=i[0]||io(n,7);else 3==n.v&&("stop"==i[0]||"close"==i[0]?"stop"==i[0]?io(n,7):Gi(n):"noop"!=i[0]&&n.f&&n.f.sa(i),n.o=0);pr(4)}catch(t){}}function qr(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(_e(t)||"string"==typeof t)Me(t,e,void 0);else{if(t.L&&"function"==typeof t.L)var n=t.L();else if(t.K&&"function"==typeof t.K)n=void 0;else if(_e(t)||"string"==typeof t){n=[];for(var r=t.length,i=0;i<r;i++)n.push(i)}else for(i in n=[],r=0,t)n[r++]=i;i=(r=function(t){if(t.K&&"function"==typeof t.K)return t.K();if("string"==typeof t)return t.split("");if(_e(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}(t)).length;for(var o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}}function Gr(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Gr)for(n=t.L(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function zr(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Kr(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Kr(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Kr(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(me=kr.prototype).setTimeout=function(t){this.P=t},me.Wa=function(t){t=t.target;var e=this.F;e&&3==Ui(t)?e.f():this.Ca(t)},me.Ca=function(t){try{if(t==this.a)t:{var e=Ui(this.a),n=this.a.ua(),r=this.a.X();if(!(3>e||3==e&&!nn&&!this.a.$())){this.A||4!=e||7==n||pr(8==n||0>=r?3:2),jr(this);var i=this.a.X();this.N=i;var o=this.a.$();if(this.b=200==i,function(t,e,n,r,i,o,s){t.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+e+"\n"+n+"\n"+o+" "+s}))}(this.c,this.m,this.l,this.f,this.T,e,i),this.b){if(this.V&&!this.C){e:{if(this.a){var s,a=this.a;if((s=a.a?a.a.getResponseHeader("X-HTTP-Initial-Response"):null)&&!Ue(s)){var u=s;break e}}u=null}if(!u){this.b=!1,this.h=3,vr(12),Br(this),Ur(this);break t}cr(this.c,this.f,u,"Initial handshake response via X-HTTP-Initial-Response"),this.C=!0,Fr(this,u)}this.I?(Rr(this,e,o),nn&&this.b&&3==e&&(sr(this.J,this.R,"tick",this.Va),this.R.start())):(cr(this.c,this.f,o,null),Fr(this,o)),4==e&&Br(this),this.b&&!this.A&&(4==e?no(this.g,this):(this.b=!1,Mr(this)))}else 400==i&&0<o.indexOf("Unknown SID")?(this.h=3,vr(12)):(this.h=0,vr(13)),Br(this),Ur(this)}}}catch(t){}},me.Va=function(){if(this.a){var t=Ui(this.a),e=this.a.$();this.D<e.length&&(jr(this),Rr(this,t,e),this.b&&4!=t&&Mr(this))}},me.cancel=function(){this.A=!0,Br(this)},me.Ua=function(){this.o=null;var t=De();0<=t-this.U?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.c,this.l),2!=this.H&&(pr(3),vr(17)),Br(this),this.h=2,Ur(this)):Vr(this,this.U-t)},(me=Gr.prototype).K=function(){zr(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},me.L=function(){return zr(this),this.a.concat()},me.get=function(t,e){return Kr(this.b,t)?this.b[t]:e},me.set=function(t,e){Kr(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},me.forEach=function(t,e){for(var n=this.L(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Hr=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Wr(t,e){if(this.c=this.j=this.f="",this.h=null,this.i=this.g="",this.a=!1,t instanceof Wr){this.a=void 0!==e?e:t.a,Yr(this,t.f),this.j=t.j,Jr(this,t.c),Qr(this,t.h),this.g=t.g,e=t.b;var n=new ci;n.c=e.c,e.a&&(n.a=new Gr(e.a),n.b=e.b),$r(this,n),this.i=t.i}else t&&(n=String(t).match(Hr))?(this.a=!!e,Yr(this,n[1]||"",!0),this.j=ei(n[2]||""),Jr(this,n[3]||"",!0),Qr(this,n[4]),this.g=ei(n[5]||"",!0),$r(this,n[6]||"",!0),this.i=ei(n[7]||"")):(this.a=!!e,this.b=new ci(null,this.a))}function Xr(t){return new Wr(t)}function Yr(t,e,n){t.f=n?ei(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Jr(t,e,n){t.c=n?ei(e,!0):e}function Qr(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.h=e}else t.h=null}function $r(t,e,n){e instanceof ci?(t.b=e,function(t,e){e&&!t.f&&(hi(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(fi(this,e),pi(this,n,t))}),t)),t.f=e}(t.b,t.a)):(n||(e=ni(e,ai)),t.b=new ci(e,t.a))}function Zr(t,e,n){t.b.set(e,n)}function ti(t){return Zr(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^De()).toString(36)),t}function ei(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function ni(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,ri),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function ri(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Wr.prototype.toString=function(){var t=[],e=this.f;e&&t.push(ni(e,ii,!0),":");var n=this.c;return(n||"file"==e)&&(t.push("//"),(e=this.j)&&t.push(ni(e,ii,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.h)&&t.push(":",String(n))),(n=this.g)&&(this.c&&"/"!=n.charAt(0)&&t.push("/"),t.push(ni(n,"/"==n.charAt(0)?si:oi,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.i)&&t.push("#",ni(n,ui)),t.join("")};var ii=/[#\/\?@]/g,oi=/[#\?:]/g,si=/[#\?]/g,ai=/[#\?@]/g,ui=/#/g;function ci(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function hi(t){t.a||(t.a=new Gr,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function fi(t,e){hi(t),e=di(t,e),Kr(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Kr((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&zr(t)))}function li(t,e){return hi(t),e=di(t,e),Kr(t.a.b,e)}function pi(t,e,n){fi(t,e),0<n.length&&(t.c=null,t.a.set(di(t,e),je(n)),t.b+=n.length)}function di(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function vi(t,e){this.b=t,this.a=e}function yi(t){this.g=t||gi,t=Ie.PerformanceNavigationTiming?0<(t=Ie.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(Ie.ia&&Ie.ia.ya&&Ie.ia.ya()&&Ie.ia.ya().qb),this.f=t?this.g:1,this.a=null,1<this.f&&(this.a=new Set),this.b=null,this.c=[]}(me=ci.prototype).add=function(t,e){hi(this),this.c=null,t=di(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},me.forEach=function(t,e){hi(this),this.a.forEach((function(n,r){Me(n,(function(n){t.call(e,n,r,this)}),this)}),this)},me.L=function(){hi(this);for(var t=this.a.K(),e=this.a.L(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},me.K=function(t){hi(this);var e=[];if("string"==typeof t)li(this,t)&&(e=Ve(e,this.a.get(di(this,t))));else{t=this.a.K();for(var n=0;n<t.length;n++)e=Ve(e,t[n])}return e},me.set=function(t,e){return hi(this),this.c=null,li(this,t=di(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},me.get=function(t,e){return t&&0<(t=this.K(t)).length?String(t[0]):e},me.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.L(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.K(r);for(var o=0;o<r.length;o++){var s=i;""!==r[o]&&(s+="="+encodeURIComponent(String(r[o]))),t.push(s)}}return this.c=t.join("&")};var gi=10;function mi(t){return!!t.b||!!t.a&&t.a.size>=t.f}function bi(t){return t.b?1:t.a?t.a.size:0}function wi(t,e){return t.b?t.b==e:!!t.a&&t.a.has(e)}function Ii(t,e){t.a?t.a.add(e):t.b=e}function Ei(t,e){t.b&&t.b==e?t.b=null:t.a&&t.a.has(e)&&t.a.delete(e)}function Ai(t){var e,n;if(null!=t.b)return t.c.concat(t.b.s);if(null!=t.a&&0!==t.a.size){var r=t.c;try{for(var i=ge(t.a.values()),o=i.next();!o.done;o=i.next()){var s=o.value;r=r.concat(s.s)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return r}return je(t.c)}function _i(){}function Ti(){this.a=new _i}function Si(t,e,n){var r=n||"";try{qr(t,(function(t,n){var i=t;Te(t)&&(i=qn(t)),e.push(r+n+"="+encodeURIComponent(i))}))}catch(t){throw e.push(r+"type="+encodeURIComponent("_badmap")),t}}function Ni(t,e,n,r,i){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(r)}catch(t){}}yi.prototype.cancel=function(){var t,e;if(this.c=Ai(this),this.b)this.b.cancel(),this.b=null;else if(this.a&&0!==this.a.size){try{for(var n=ge(this.a.values()),r=n.next();!r.done;r=n.next())r.value.cancel()}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.a.clear()}},_i.prototype.stringify=function(t){return Ie.JSON.stringify(t,void 0)},_i.prototype.parse=function(t){return Ie.JSON.parse(t,void 0)};var ki=Ie.JSON.parse;function Ci(t){Bn.call(this),this.headers=new Gr,this.H=t||null,this.b=!1,this.s=this.a=null,this.B="",this.h=0,this.f="",this.g=this.A=this.l=this.u=!1,this.o=0,this.m=null,this.I=xi,this.D=this.F=!1}Pe(Ci,Bn);var xi="",Oi=/^https?$/i,Di=["POST","PUT"];function Pi(t){return"content-type"==t.toLowerCase()}function Ri(t,e){t.b=!1,t.a&&(t.g=!0,t.a.abort(),t.g=!1),t.f=e,t.h=5,Li(t),Vi(t)}function Li(t){t.u||(t.u=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Mi(t){if(t.b&&void 0!==we&&(!t.s[1]||4!=Ui(t)||2!=t.X()))if(t.l&&4==Ui(t))er(t.za,0,t);else if(t.dispatchEvent("readystatechange"),4==Ui(t)){t.b=!1;try{var e,n=t.X();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.B).match(Hr)[1]||null;if(!o&&Ie.self&&Ie.self.location){var s=Ie.self.location.protocol;o=s.substr(0,s.length-1)}i=!Oi.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{t.h=6;try{var a=2<Ui(t)?t.a.statusText:""}catch(t){a=""}t.f=a+" ["+t.X()+"]",Li(t)}}finally{Vi(t)}}}function Vi(t,e){if(t.a){ji(t);var n=t.a,r=t.s[0]?Ee:null;t.a=null,t.s=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){}}}function ji(t){t.a&&t.D&&(t.a.ontimeout=null),t.m&&(Ie.clearTimeout(t.m),t.m=null)}function Ui(t){return t.a?t.a.readyState:0}function Bi(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}r||(n=function(t){var e="";return He(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Zr(t,e,n))}function Fi(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function qi(t){this.pa=0,this.g=[],this.c=new ur,this.ga=this.la=this.B=this.fa=this.a=this.na=this.A=this.W=this.i=this.O=this.l=null,this.La=this.R=0,this.Ia=Fi("failFast",!1,t),this.H=this.m=this.j=this.h=this.f=null,this.T=!0,this.I=this.oa=this.P=-1,this.U=this.o=this.u=0,this.Fa=Fi("baseRetryDelayMs",5e3,t),this.Ma=Fi("retryDelaySeedMs",1e4,t),this.Ja=Fi("forwardChannelMaxRetries",2,t),this.ma=Fi("forwardChannelRequestTimeoutMs",2e4,t),this.Ka=t&&t.g||void 0,this.D=void 0,this.C=t&&t.supportsCrossDomainXhr||!1,this.J="",this.b=new yi(t&&t.concurrentRequestLimit),this.ka=new Ti,this.da=t&&t.fastHandshake||!1,this.Ga=t&&t.b||!1,t&&t.f&&(this.c.a=!1),t&&t.forceLongPolling&&(this.T=!1),this.V=!this.da&&this.T&&t&&t.c||!1,this.ea=void 0,this.N=0,this.F=!1,this.s=null}function Gi(t){if(Ki(t),3==t.v){var e=t.R++,n=Xr(t.B);Zr(n,"SID",t.J),Zr(n,"RID",e),Zr(n,"TYPE","terminate"),Yi(t,n),(e=new kr(t,t.c,e,void 0)).H=2,e.i=ti(Xr(n)),n=!1,Ie.navigator&&Ie.navigator.sendBeacon&&(n=Ie.navigator.sendBeacon(e.i.toString(),"")),!n&&Ie.Image&&((new Image).src=e.i,n=!0),n||(e.a=ao(e.g,null),e.a.ba(e.i)),e.u=De(),Mr(e)}oo(t)}function zi(t){t.a&&(Zi(t),t.a.cancel(),t.a=null)}function Ki(t){zi(t),t.j&&(Ie.clearTimeout(t.j),t.j=null),eo(t),t.b.cancel(),t.h&&("number"==typeof t.h&&Ie.clearTimeout(t.h),t.h=null)}function Hi(t,e){t.g.push(new vi(t.La++,e)),3==t.v&&Wi(t)}function Wi(t){mi(t.b)||t.h||(t.h=!0,Yn(t.Ba,t),t.u=0)}function Xi(t,e){var n;n=e?e.f:t.R++;var r=Xr(t.B);Zr(r,"SID",t.J),Zr(r,"RID",n),Zr(r,"AID",t.P),Yi(t,r),t.i&&t.l&&Bi(r,t.i,t.l),n=new kr(t,t.c,n,t.u+1),null===t.i&&(n.B=t.l),e&&(t.g=e.s.concat(t.g)),e=Ji(t,n,1e3),n.setTimeout(Math.round(.5*t.ma)+Math.round(.5*t.ma*Math.random())),Ii(t.b,n),Dr(n,r,e)}function Yi(t,e){t.f&&qr({},(function(t,n){Zr(e,n,t)}))}function Ji(t,e,n){n=Math.min(t.g.length,n);var r=t.f?xe(t.f.Ha,t.f,t):null;t:for(var i=t.g,o=-1;;){var s=["count="+n];-1==o?0<n?(o=i[0].b,s.push("ofs="+o)):o=0:s.push("ofs="+o);for(var a=!0,u=0;u<n;u++){var c=i[u].b,h=i[u].a;if(0>(c-=o))o=Math.max(0,i[u].b-100),a=!1;else try{Si(h,s,"req"+c+"_")}catch(t){r&&r(h)}}if(a){r=s.join("&");break t}}return t=t.g.splice(0,n),e.s=t,r}function Qi(t){t.a||t.j||(t.U=1,Yn(t.Aa,t),t.o=0)}function $i(t){return!(t.a||t.j||3<=t.o||(t.U++,t.j=gr(xe(t.Aa,t),ro(t,t.o)),t.o++,0))}function Zi(t){null!=t.s&&(Ie.clearTimeout(t.s),t.s=null)}function to(t){t.a=new kr(t,t.c,"rpc",t.U),null===t.i&&(t.a.B=t.l),t.a.O=0;var e=Xr(t.la);Zr(e,"RID","rpc"),Zr(e,"SID",t.J),Zr(e,"CI",t.H?"0":"1"),Zr(e,"AID",t.P),Yi(t,e),Zr(e,"TYPE","xmlhttp"),t.i&&t.l&&Bi(e,t.i,t.l),t.D&&t.a.setTimeout(t.D);var n=t.a;t=t.ga,n.H=1,n.i=ti(Xr(e)),n.j=null,n.I=!0,Pr(n,t)}function eo(t){null!=t.m&&(Ie.clearTimeout(t.m),t.m=null)}function no(t,e){var n=null;if(t.a==e){eo(t),Zi(t),t.a=null;var r=2}else{if(!wi(t.b,e))return;n=e.s,Ei(t.b,e),r=1}if(t.I=e.N,0!=t.v)if(e.b)if(1==r){n=e.j?e.j.length:0,e=De()-e.u;var i=t.u;(r=fr()).dispatchEvent(new yr(r,n,e,i)),Wi(t)}else Qi(t);else if(3==(i=e.h)||0==i&&0<t.I||!(1==r&&function(t,e){return!(bi(t.b)>=t.b.f-(t.h?1:0)||(t.h?(t.g=e.s.concat(t.g),0):1==t.v||2==t.v||t.u>=(t.Ia?0:t.Ja)||(t.h=gr(xe(t.Ba,t,e),ro(t,t.u)),t.u++,0)))}(t,e)||2==r&&$i(t)))switch(n&&0<n.length&&(e=t.b,e.c=e.c.concat(n)),i){case 1:io(t,5);break;case 4:io(t,10);break;case 3:io(t,6);break;default:io(t,2)}}function ro(t,e){var n=t.Fa+Math.floor(Math.random()*t.Ma);return t.f||(n*=2),n*e}function io(t,e){if(t.c.info("Error code "+e),2==e){var n=null;t.f&&(n=null);var r=xe(t.Xa,t);n||(n=new Wr("//www.google.com/images/cleardot.gif"),Ie.location&&"http"==Ie.location.protocol||Yr(n,"https"),ti(n)),function(t,e){var n=new ur;if(Ie.Image){var r=new Image;r.onload=Oe(Ni,n,r,"TestLoadImage: loaded",!0,e),r.onerror=Oe(Ni,n,r,"TestLoadImage: error",!1,e),r.onabort=Oe(Ni,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=Oe(Ni,n,r,"TestLoadImage: timeout",!1,e),Ie.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=t}else e(!1)}(n.toString(),r)}else vr(2);t.v=0,t.f&&t.f.ra(e),oo(t),Ki(t)}function oo(t){t.v=0,t.I=-1,t.f&&(0==Ai(t.b).length&&0==t.g.length||(t.b.c.length=0,je(t.g),t.g.length=0),t.f.qa())}function so(t,e,n){var r=function(t){return t instanceof Wr?Xr(t):new Wr(t,void 0)}(n);if(""!=r.c)e&&Jr(r,e+"."+r.c),Qr(r,r.h);else{var i=Ie.location;r=function(t,e,n,r){var i=new Wr(null,void 0);return t&&Yr(i,t),e&&Jr(i,e),n&&Qr(i,n),r&&(i.g=r),i}(i.protocol,e?e+"."+i.hostname:i.hostname,+i.port,n)}return t.W&&He(t.W,(function(t,e){Zr(r,e,t)})),e=t.A,n=t.na,e&&n&&Zr(r,e,n),Zr(r,"VER",t.ha),Yi(t,r),r}function ao(t,e){if(e&&!t.C)throw Error("Can't create secondary domain capable XhrIo object.");return(e=new Ci(t.Ka)).F=t.C,e}function uo(){}function co(){if(tn&&!(10<=Number(pn)))throw Error("Environmental error: no available transport.")}function ho(t,e){Bn.call(this),this.a=new qi(e),this.l=t,this.b=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.a.l=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.a&&(t?t["X-WebChannel-Client-Profile"]=e.a:t={"X-WebChannel-Client-Profile":e.a}),this.a.O=t,(t=e&&e.httpHeadersOverwriteParam)&&!Ue(t)&&(this.a.i=t),this.h=e&&e.supportsCrossDomainXhr||!1,this.g=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!Ue(e)&&(this.a.A=e,null!==(t=this.b)&&e in t&&e in(t=this.b)&&delete t[e]),this.f=new po(this)}function fo(t){Tr.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.c=t)?(t=this.c,this.data=null!==e&&t in e?e[t]:void 0):this.data=e}else this.data=t}function lo(){Sr.call(this),this.status=1}function po(t){this.a=t}(me=Ci.prototype).ba=function(t,e,n,r){if(this.a)throw Error("[goog.net.XhrIo] Object is active with another request="+this.B+"; newUri="+t);e=e?e.toUpperCase():"GET",this.B=t,this.f="",this.h=0,this.u=!1,this.b=!0,this.a=new XMLHttpRequest,this.s=this.H?Ir(this.H):Ir(Ar),this.a.onreadystatechange=xe(this.za,this);try{this.A=!0,this.a.open(e,String(t),!0),this.A=!1}catch(t){return void Ri(this,t)}t=n||"";var i=new Gr(this.headers);r&&qr(r,(function(t,e){i.set(e,t)})),r=function(t){t:{for(var e=Pi,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(i.L()),n=Ie.FormData&&t instanceof Ie.FormData,!(0<=Le(Di,e))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(t,e){this.a.setRequestHeader(e,t)}),this),this.I&&(this.a.responseType=this.I),"withCredentials"in this.a&&this.a.withCredentials!==this.F&&(this.a.withCredentials=this.F);try{ji(this),0<this.o&&((this.D=function(t){return tn&&ln(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.a))?(this.a.timeout=this.o,this.a.ontimeout=xe(this.xa,this)):this.m=er(this.xa,this.o,this)),this.l=!0,this.a.send(t),this.l=!1}catch(t){Ri(this,t)}},me.xa=function(){void 0!==we&&this.a&&(this.f="Timed out after "+this.o+"ms, aborting",this.h=8,this.dispatchEvent("timeout"),this.abort(8))},me.abort=function(t){this.a&&this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1,this.h=t||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Vi(this))},me.G=function(){this.a&&(this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1),Vi(this,!0)),Ci.S.G.call(this)},me.za=function(){this.j||(this.A||this.l||this.g?Mi(this):this.Ta())},me.Ta=function(){Mi(this)},me.X=function(){try{return 2<Ui(this)?this.a.status:-1}catch(t){return-1}},me.$=function(){try{return this.a?this.a.responseText:""}catch(t){return""}},me.Na=function(t){if(this.a){var e=this.a.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),ki(e)}},me.ua=function(){return this.h},me.Qa=function(){return"string"==typeof this.f?this.f:String(this.f)},(me=qi.prototype).ha=8,me.v=1,me.Ba=function(t){if(this.h)if(this.h=null,1==this.v){if(!t){this.R=Math.floor(1e5*Math.random()),t=this.R++;var e,n=new kr(this,this.c,t,void 0),r=this.l;if(this.O&&(r?Ye(r=We(r),this.O):r=this.O),null===this.i&&(n.B=r),this.da)t:{for(var i=e=0;i<this.g.length;i++){var o=this.g[i];if(void 0===(o="__data__"in o.a&&"string"==typeof(o=o.a.__data__)?o.length:void 0))break;if(4096<(e+=o)){e=i;break t}if(4096===e||i===this.g.length-1){e=i+1;break t}}e=1e3}else e=1e3;e=Ji(this,n,e),Zr(i=Xr(this.B),"RID",t),Zr(i,"CVER",22),this.A&&Zr(i,"X-HTTP-Session-Id",this.A),Yi(this,i),this.i&&r&&Bi(i,this.i,r),Ii(this.b,n),this.Ga&&Zr(i,"TYPE","init"),this.da?(Zr(i,"$req",e),Zr(i,"SID","null"),n.V=!0,Dr(n,i,null)):Dr(n,i,e),this.v=2}}else 3==this.v&&(t?Xi(this,t):0==this.g.length||mi(this.b)||Xi(this))},me.Aa=function(){if(this.j=null,to(this),this.V&&!(this.F||null==this.a||0>=this.N)){var t=2*this.N;this.c.info("BP detection timer enabled: "+t),this.s=gr(xe(this.Sa,this),t)}},me.Sa=function(){this.s&&(this.s=null,this.c.info("BP detection timeout reached."),this.c.info("Buffering proxy detected and switch to long-polling!"),this.H=!1,this.F=!0,zi(this),to(this))},me.Ra=function(){null!=this.m&&(this.m=null,zi(this),$i(this),vr(19))},me.Xa=function(t){t?(this.c.info("Successfully pinged google.com"),vr(2)):(this.c.info("Failed to ping google.com"),vr(1))},(me=uo.prototype).ta=function(){},me.sa=function(){},me.ra=function(){},me.qa=function(){},me.Ha=function(){},co.prototype.a=function(t,e){return new ho(t,e)},Pe(ho,Bn),(me=ho.prototype).addEventListener=function(t,e,n,r){ho.S.addEventListener.call(this,t,e,n,r)},me.removeEventListener=function(t,e,n,r){ho.S.removeEventListener.call(this,t,e,n,r)},me.Oa=function(){this.a.f=this.f,this.h&&(this.a.C=!0);var t=this.a,e=this.l,n=this.b||void 0;vr(0),t.fa=e,t.W=n||{},t.H=t.T,t.B=so(t,null,t.fa),Wi(t)},me.close=function(){Gi(this.a)},me.Pa=function(t){if("string"==typeof t){var e={};e.__data__=t,Hi(this.a,e)}else this.g?((e={}).__data__=qn(t),Hi(this.a,e)):Hi(this.a,t)},me.G=function(){this.a.f=null,delete this.f,Gi(this.a),delete this.a,ho.S.G.call(this)},Pe(fo,Tr),Pe(lo,Sr),Pe(po,uo),po.prototype.ta=function(){this.a.dispatchEvent("a")},po.prototype.sa=function(t){this.a.dispatchEvent(new fo(t))},po.prototype.ra=function(t){this.a.dispatchEvent(new lo(t))},po.prototype.qa=function(){this.a.dispatchEvent("b")},co.prototype.createWebChannel=co.prototype.a,ho.prototype.send=ho.prototype.Pa,ho.prototype.open=ho.prototype.Oa,ho.prototype.close=ho.prototype.close,mr.NO_ERROR=0,mr.TIMEOUT=8,mr.HTTP_ERROR=6,br.COMPLETE="complete",Er.EventType=_r,_r.OPEN="a",_r.CLOSE="b",_r.ERROR="c",_r.MESSAGE="d",Bn.prototype.listen=Bn.prototype.va,Ci.prototype.listenOnce=Ci.prototype.wa,Ci.prototype.getLastError=Ci.prototype.Qa,Ci.prototype.getLastErrorCode=Ci.prototype.ua,Ci.prototype.getStatus=Ci.prototype.X,Ci.prototype.getResponseJson=Ci.prototype.Na,Ci.prototype.getResponseText=Ci.prototype.$,Ci.prototype.send=Ci.prototype.ba;var vo=mr,yo=br,go=Er,mo=Ci,bo=function(t,e,n,r,i,o){this.t=t,this.persistenceKey=e,this.host=n,this.ssl=r,this.forceLongPolling=i,this.i=o},wo=function(){function t(t,e){this.projectId=t,this.database=e||"(default)"}return Object.defineProperty(t.prototype,"o",{get:function(){return"(default)"===this.database},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(e){return e instanceof t&&e.projectId===this.projectId&&e.database===this.database},t}(),Io=new B("@firebase/firestore");function Eo(){return Io.logLevel}function Ao(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Io.logLevel<=P.DEBUG){var r=e.map(So);Io.debug.apply(Io,c(["Firestore (8.0.2): "+t],r))}}function _o(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Io.logLevel<=P.ERROR){var r=e.map(So);Io.error.apply(Io,c(["Firestore (8.0.2): "+t],r))}}function To(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Io.logLevel<=P.WARN){var r=e.map(So);Io.warn.apply(Io,c(["Firestore (8.0.2): "+t],r))}}function So(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function No(t){void 0===t&&(t="Unexpected state");var e="FIRESTORE (8.0.2) INTERNAL ASSERTION FAILED: "+t;throw _o(e),new Error(e)}function ko(t,e){t||No()}function Co(t,e){return t}function xo(t){var e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(var r=0;r<t;r++)n[r]=Math.floor(256*Math.random());return n}var Oo=function(){function t(){}return t.u=function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length,n="";n.length<20;)for(var r=xo(40),i=0;i<r.length;++i)n.length<20&&r[i]<e&&(n+=t.charAt(r[i]%t.length));return n},t}();function Do(t,e){return t<e?-1:t>e?1:0}function Po(t,e,n){return t.length===e.length&&t.every((function(t,r){return n(t,e[r])}))}function Ro(t){return t+"\0"}function Lo(t){var e=0;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Mo(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function Vo(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}var jo=function(){function t(t,e){this.h=t,this.l=e,this._={}}return t.prototype.get=function(t){var e=this.h(t),n=this._[e];if(void 0!==n)for(var r=0,i=n;r<i.length;r++){var o=i[r],s=o[0],a=o[1];if(this.l(s,t))return a}},t.prototype.has=function(t){return void 0!==this.get(t)},t.prototype.set=function(t,e){var n=this.h(t),r=this._[n];if(void 0!==r){for(var i=0;i<r.length;i++)if(this.l(r[i][0],t))return void(r[i]=[t,e]);r.push([t,e])}else this._[n]=[[t,e]]},t.prototype.delete=function(t){var e=this.h(t),n=this._[e];if(void 0===n)return!1;for(var r=0;r<n.length;r++)if(this.l(n[r][0],t))return 1===n.length?delete this._[e]:n.splice(r,1),!0;return!1},t.prototype.forEach=function(t){Mo(this._,(function(e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r],s=o[0],a=o[1];t(s,a)}}))},t.prototype.T=function(){return Vo(this._)},t}(),Uo={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"},Bo=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).code=e,r.message=n,r.name="FirebaseError",r.toString=function(){return r.name+": [code="+r.code+"]: "+r.message},r}return e(n,t),n}(Error),Fo=function(){function t(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new Bo(Uo.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}return t.now=function(){return t.fromMillis(Date.now())},t.fromDate=function(e){return t.fromMillis(e.getTime())},t.fromMillis=function(e){var n=Math.floor(e/1e3);return new t(n,1e6*(e-1e3*n))},t.prototype.toDate=function(){return new Date(this.toMillis())},t.prototype.toMillis=function(){return 1e3*this.seconds+this.nanoseconds/1e6},t.prototype.I=function(t){return this.seconds===t.seconds?Do(this.nanoseconds,t.nanoseconds):Do(this.seconds,t.seconds)},t.prototype.isEqual=function(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds},t.prototype.toString=function(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"},t.prototype.toJSON=function(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}},t.prototype.valueOf=function(){var t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")},t}(),qo=function(){function t(t){this.timestamp=t}return t.m=function(e){return new t(e)},t.min=function(){return new t(new Fo(0,0))},t.prototype.A=function(t){return this.timestamp.I(t.timestamp)},t.prototype.isEqual=function(t){return this.timestamp.isEqual(t.timestamp)},t.prototype.R=function(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3},t.prototype.toString=function(){return"SnapshotVersion("+this.timestamp.toString()+")"},t.prototype.P=function(){return this.timestamp},t}(),Go=function(){function t(t,e,n){void 0===e?e=0:e>t.length&&No(),void 0===n?n=t.length-e:n>t.length-e&&No(),this.segments=t,this.offset=e,this.g=n}return Object.defineProperty(t.prototype,"length",{get:function(){return this.g},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(e){return 0===t.V(this,e)},t.prototype.child=function(e){var n=this.segments.slice(this.offset,this.limit());return e instanceof t?e.forEach((function(t){n.push(t)})):n.push(e),this.p(n)},t.prototype.limit=function(){return this.offset+this.length},t.prototype.v=function(t){return t=void 0===t?1:t,this.p(this.segments,this.offset+t,this.length-t)},t.prototype.S=function(){return this.p(this.segments,this.offset,this.length-1)},t.prototype.D=function(){return this.segments[this.offset]},t.prototype.C=function(){return this.get(this.length-1)},t.prototype.get=function(t){return this.segments[this.offset+t]},t.prototype.T=function(){return 0===this.length},t.prototype.N=function(t){if(t.length<this.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.F=function(t){if(this.length+1!==t.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.forEach=function(t){for(var e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])},t.prototype.O=function(){return this.segments.slice(this.offset,this.limit())},t.V=function(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r++){var i=t.get(r),o=e.get(r);if(i<o)return-1;if(i>o)return 1}return t.length<e.length?-1:t.length>e.length?1:0},t}(),zo=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.p=function(t,e,r){return new n(t,e,r)},n.prototype.M=function(){return this.O().join("/")},n.prototype.toString=function(){return this.M()},n.k=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=[],i=0,o=t;i<o.length;i++){var s=o[i];if(s.indexOf("//")>=0)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid segment ("+s+"). Paths must not contain // in them.");r.push.apply(r,s.split("/").filter((function(t){return t.length>0})))}return new n(r)},n.$=function(){return new n([])},n}(Go),Ko=/^[_a-zA-Z][_a-zA-Z0-9]*$/,Ho=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.p=function(t,e,r){return new n(t,e,r)},n.L=function(t){return Ko.test(t)},n.prototype.M=function(){return this.O().map((function(t){return t=t.replace("\\","\\\\").replace("`","\\`"),n.L(t)||(t="`"+t+"`"),t})).join(".")},n.prototype.toString=function(){return this.M()},n.prototype.B=function(){return 1===this.length&&"__name__"===this.get(0)},n.q=function(){return new n(["__name__"])},n.U=function(t){for(var e=[],r="",i=0,o=function(){if(0===r.length)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not be empty, begin with '.', end with '.', or contain '..'");e.push(r),r=""},s=!1;i<t.length;){var a=t[i];if("\\"===a){if(i+1===t.length)throw new Bo(Uo.INVALID_ARGUMENT,"Path has trailing escape character: "+t);var u=t[i+1];if("\\"!==u&&"."!==u&&"`"!==u)throw new Bo(Uo.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);r+=u,i+=2}else"`"===a?(s=!s,i++):"."!==a||s?(r+=a,i++):(o(),i++)}if(o(),s)throw new Bo(Uo.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new n(e)},n.$=function(){return new n([])},n}(Go),Wo=function(){function t(t){this.path=t}return t.K=function(e){return new t(zo.k(e))},t.W=function(e){return new t(zo.k(e).v(5))},t.prototype.j=function(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t},t.prototype.isEqual=function(t){return null!==t&&0===zo.V(this.path,t.path)},t.prototype.toString=function(){return this.path.toString()},t.V=function(t,e){return zo.V(t.path,e.path)},t.G=function(t){return t.length%2==0},t.H=function(e){return new t(new zo(e.slice()))},t}();function Xo(t){return null==t}function Yo(t){return 0===t&&1/t==-1/0}function Jo(t){return"number"==typeof t&&Number.isInteger(t)&&!Yo(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}var Qo=function(t,e,n,r,i,o,s){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o=null),void 0===s&&(s=null),this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=o,this.endAt=s,this.J=null};function $o(t,e,n,r,i,o,s){return void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o=null),void 0===s&&(s=null),new Qo(t,e,n,r,i,o,s)}function Zo(t){var e=Co(t);if(null===e.J){var n=e.path.M();null!==e.collectionGroup&&(n+="|cg:"+e.collectionGroup),n+="|f:",n+=e.filters.map((function(t){return function(t){return t.field.M()+t.op.toString()+Ks(t.value)}(t)})).join(","),n+="|ob:",n+=e.orderBy.map((function(t){return(e=t).field.M()+e.dir;var e})).join(","),Xo(e.limit)||(n+="|l:",n+=e.limit),e.startAt&&(n+="|lb:",n+=Yu(e.startAt)),e.endAt&&(n+="|ub:",n+=Yu(e.endAt)),e.J=n}return e.J}function ts(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(var n=0;n<t.orderBy.length;n++)if(!tc(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(var r=0;r<t.filters.length;r++)if(i=t.filters[r],o=e.filters[r],i.op!==o.op||!i.field.isEqual(o.field)||!Fs(i.value,o.value))return!1;var i,o;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!Qu(t.startAt,e.startAt)&&Qu(t.endAt,e.endAt)}function es(t){return Wo.G(t.path)&&null===t.collectionGroup&&0===t.filters.length}var ns=function(){function t(t){this.Y=t}return t.fromBase64String=function(e){return new t(atob(e))},t.fromUint8Array=function(e){return new t(function(t){for(var e="",n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(e))},t.prototype.toBase64=function(){return t=this.Y,btoa(t);var t},t.prototype.toUint8Array=function(){return function(t){for(var e=new Uint8Array(t.length),n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.Y)},t.prototype.X=function(){return 2*this.Y.length},t.prototype.A=function(t){return Do(this.Y,t.Y)},t.prototype.isEqual=function(t){return this.Y===t.Y},t}();ns.Z=new ns("");var rs,is,os=function(){function t(t,e,n,r,i,o,s){void 0===i&&(i=qo.min()),void 0===o&&(o=qo.min()),void 0===s&&(s=ns.Z),this.target=t,this.targetId=e,this.tt=n,this.sequenceNumber=r,this.et=i,this.lastLimboFreeSnapshotVersion=o,this.resumeToken=s}return t.prototype.nt=function(e){return new t(this.target,this.targetId,this.tt,e,this.et,this.lastLimboFreeSnapshotVersion,this.resumeToken)},t.prototype.st=function(e,n){return new t(this.target,this.targetId,this.tt,this.sequenceNumber,n,this.lastLimboFreeSnapshotVersion,e)},t.prototype.it=function(e){return new t(this.target,this.targetId,this.tt,this.sequenceNumber,this.et,e,this.resumeToken)},t}(),ss=function(t){this.count=t};function as(t){switch(t){case Uo.OK:return No();case Uo.CANCELLED:case Uo.UNKNOWN:case Uo.DEADLINE_EXCEEDED:case Uo.RESOURCE_EXHAUSTED:case Uo.INTERNAL:case Uo.UNAVAILABLE:case Uo.UNAUTHENTICATED:return!1;case Uo.INVALID_ARGUMENT:case Uo.NOT_FOUND:case Uo.ALREADY_EXISTS:case Uo.PERMISSION_DENIED:case Uo.FAILED_PRECONDITION:case Uo.ABORTED:case Uo.OUT_OF_RANGE:case Uo.UNIMPLEMENTED:case Uo.DATA_LOSS:return!0;default:return No()}}function us(t){if(void 0===t)return _o("GRPC error has no .code"),Uo.UNKNOWN;switch(t){case rs.OK:return Uo.OK;case rs.CANCELLED:return Uo.CANCELLED;case rs.UNKNOWN:return Uo.UNKNOWN;case rs.DEADLINE_EXCEEDED:return Uo.DEADLINE_EXCEEDED;case rs.RESOURCE_EXHAUSTED:return Uo.RESOURCE_EXHAUSTED;case rs.INTERNAL:return Uo.INTERNAL;case rs.UNAVAILABLE:return Uo.UNAVAILABLE;case rs.UNAUTHENTICATED:return Uo.UNAUTHENTICATED;case rs.INVALID_ARGUMENT:return Uo.INVALID_ARGUMENT;case rs.NOT_FOUND:return Uo.NOT_FOUND;case rs.ALREADY_EXISTS:return Uo.ALREADY_EXISTS;case rs.PERMISSION_DENIED:return Uo.PERMISSION_DENIED;case rs.FAILED_PRECONDITION:return Uo.FAILED_PRECONDITION;case rs.ABORTED:return Uo.ABORTED;case rs.OUT_OF_RANGE:return Uo.OUT_OF_RANGE;case rs.UNIMPLEMENTED:return Uo.UNIMPLEMENTED;case rs.DATA_LOSS:return Uo.DATA_LOSS;default:return No()}}(is=rs||(rs={}))[is.OK=0]="OK",is[is.CANCELLED=1]="CANCELLED",is[is.UNKNOWN=2]="UNKNOWN",is[is.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",is[is.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",is[is.NOT_FOUND=5]="NOT_FOUND",is[is.ALREADY_EXISTS=6]="ALREADY_EXISTS",is[is.PERMISSION_DENIED=7]="PERMISSION_DENIED",is[is.UNAUTHENTICATED=16]="UNAUTHENTICATED",is[is.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",is[is.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",is[is.ABORTED=10]="ABORTED",is[is.OUT_OF_RANGE=11]="OUT_OF_RANGE",is[is.UNIMPLEMENTED=12]="UNIMPLEMENTED",is[is.INTERNAL=13]="INTERNAL",is[is.UNAVAILABLE=14]="UNAVAILABLE",is[is.DATA_LOSS=15]="DATA_LOSS";var cs=function(){function t(t,e){this.V=t,this.root=e||fs.EMPTY}return t.prototype.rt=function(e,n){return new t(this.V,this.root.rt(e,n,this.V).copy(null,null,fs.ot,null,null))},t.prototype.remove=function(e){return new t(this.V,this.root.remove(e,this.V).copy(null,null,fs.ot,null,null))},t.prototype.get=function(t){for(var e=this.root;!e.T();){var n=this.V(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null},t.prototype.indexOf=function(t){for(var e=0,n=this.root;!n.T();){var r=this.V(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1},t.prototype.T=function(){return this.root.T()},Object.defineProperty(t.prototype,"size",{get:function(){return this.root.size},enumerable:!1,configurable:!0}),t.prototype.at=function(){return this.root.at()},t.prototype.ct=function(){return this.root.ct()},t.prototype.ut=function(t){return this.root.ut(t)},t.prototype.forEach=function(t){this.ut((function(e,n){return t(e,n),!1}))},t.prototype.toString=function(){var t=[];return this.ut((function(e,n){return t.push(e+":"+n),!1})),"{"+t.join(", ")+"}"},t.prototype.ht=function(t){return this.root.ht(t)},t.prototype.lt=function(){return new hs(this.root,null,this.V,!1)},t.prototype._t=function(t){return new hs(this.root,t,this.V,!1)},t.prototype.ft=function(){return new hs(this.root,null,this.V,!0)},t.prototype.dt=function(t){return new hs(this.root,t,this.V,!0)},t}(),hs=function(){function t(t,e,n,r){this.wt=r,this.Tt=[];for(var i=1;!t.T();)if(i=e?n(t.key,e):1,r&&(i*=-1),i<0)t=this.wt?t.left:t.right;else{if(0===i){this.Tt.push(t);break}this.Tt.push(t),t=this.wt?t.right:t.left}}return t.prototype.Et=function(){var t=this.Tt.pop(),e={key:t.key,value:t.value};if(this.wt)for(t=t.left;!t.T();)this.Tt.push(t),t=t.right;else for(t=t.right;!t.T();)this.Tt.push(t),t=t.left;return e},t.prototype.It=function(){return this.Tt.length>0},t.prototype.At=function(){if(0===this.Tt.length)return null;var t=this.Tt[this.Tt.length-1];return{key:t.key,value:t.value}},t}(),fs=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:t.EMPTY,this.right=null!=o?o:t.EMPTY,this.size=this.left.size+1+this.right.size}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.T=function(){return!1},t.prototype.ut=function(t){return this.left.ut(t)||t(this.key,this.value)||this.right.ut(t)},t.prototype.ht=function(t){return this.right.ht(t)||t(this.key,this.value)||this.left.ht(t)},t.prototype.min=function(){return this.left.T()?this:this.left.min()},t.prototype.at=function(){return this.min().key},t.prototype.ct=function(){return this.right.T()?this.key:this.right.ct()},t.prototype.rt=function(t,e,n){var r=this,i=n(t,r.key);return(r=i<0?r.copy(null,null,null,r.left.rt(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.rt(t,e,n))).Rt()},t.prototype.Pt=function(){if(this.left.T())return t.EMPTY;var e=this;return e.left.gt()||e.left.left.gt()||(e=e.Vt()),(e=e.copy(null,null,null,e.left.Pt(),null)).Rt()},t.prototype.remove=function(e,n){var r,i=this;if(n(e,i.key)<0)i.left.T()||i.left.gt()||i.left.left.gt()||(i=i.Vt()),i=i.copy(null,null,null,i.left.remove(e,n),null);else{if(i.left.gt()&&(i=i.yt()),i.right.T()||i.right.gt()||i.right.left.gt()||(i=i.vt()),0===n(e,i.key)){if(i.right.T())return t.EMPTY;r=i.right.min(),i=i.copy(r.key,r.value,null,null,i.right.Pt())}i=i.copy(null,null,null,null,i.right.remove(e,n))}return i.Rt()},t.prototype.gt=function(){return this.color},t.prototype.Rt=function(){var t=this;return t.right.gt()&&!t.left.gt()&&(t=t.bt()),t.left.gt()&&t.left.left.gt()&&(t=t.yt()),t.left.gt()&&t.right.gt()&&(t=t.St()),t},t.prototype.Vt=function(){var t=this.St();return t.right.left.gt()&&(t=(t=(t=t.copy(null,null,null,null,t.right.yt())).bt()).St()),t},t.prototype.vt=function(){var t=this.St();return t.left.left.gt()&&(t=(t=t.yt()).St()),t},t.prototype.bt=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.yt=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.St=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.Dt=function(){var t=this.Ct();return Math.pow(2,t)<=this.size+1},t.prototype.Ct=function(){if(this.gt()&&this.left.gt())throw No();if(this.right.gt())throw No();var t=this.left.Ct();if(t!==this.right.Ct())throw No();return t+(this.gt()?0:1)},t}();fs.EMPTY=null,fs.RED=!0,fs.ot=!1,fs.EMPTY=new(function(){function t(){this.size=0}return Object.defineProperty(t.prototype,"key",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){throw No()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){throw No()},enumerable:!1,configurable:!0}),t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.rt=function(t,e,n){return new fs(t,e)},t.prototype.remove=function(t,e){return this},t.prototype.T=function(){return!0},t.prototype.ut=function(t){return!1},t.prototype.ht=function(t){return!1},t.prototype.at=function(){return null},t.prototype.ct=function(){return null},t.prototype.gt=function(){return!1},t.prototype.Dt=function(){return!0},t.prototype.Ct=function(){return 0},t}());var ls=function(){function t(t){this.V=t,this.data=new cs(this.V)}return t.prototype.has=function(t){return null!==this.data.get(t)},t.prototype.first=function(){return this.data.at()},t.prototype.last=function(){return this.data.ct()},Object.defineProperty(t.prototype,"size",{get:function(){return this.data.size},enumerable:!1,configurable:!0}),t.prototype.indexOf=function(t){return this.data.indexOf(t)},t.prototype.forEach=function(t){this.data.ut((function(e,n){return t(e),!1}))},t.prototype.Nt=function(t,e){for(var n=this.data._t(t[0]);n.It();){var r=n.Et();if(this.V(r.key,t[1])>=0)return;e(r.key)}},t.prototype.xt=function(t,e){var n;for(n=void 0!==e?this.data._t(e):this.data.lt();n.It();)if(!t(n.Et().key))return},t.prototype.Ft=function(t){var e=this.data._t(t);return e.It()?e.Et().key:null},t.prototype.lt=function(){return new ps(this.data.lt())},t.prototype._t=function(t){return new ps(this.data._t(t))},t.prototype.add=function(t){return this.copy(this.data.remove(t).rt(t,!0))},t.prototype.delete=function(t){return this.has(t)?this.copy(this.data.remove(t)):this},t.prototype.T=function(){return this.data.T()},t.prototype.Ot=function(t){var e=this;return e.size<t.size&&(e=t,t=this),t.forEach((function(t){e=e.add(t)})),e},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.data.lt(),r=e.data.lt();n.It();){var i=n.Et().key,o=r.Et().key;if(0!==this.V(i,o))return!1}return!0},t.prototype.O=function(){var t=[];return this.forEach((function(e){t.push(e)})),t},t.prototype.toString=function(){var t=[];return this.forEach((function(e){return t.push(e)})),"SortedSet("+t.toString()+")"},t.prototype.copy=function(e){var n=new t(this.V);return n.data=e,n},t}(),ps=function(){function t(t){this.Mt=t}return t.prototype.Et=function(){return this.Mt.Et().key},t.prototype.It=function(){return this.Mt.It()},t}(),ds=new cs(Wo.V);function vs(){return ds}function ys(){return vs()}var gs=new cs(Wo.V);function ms(){return gs}var bs=new cs(Wo.V),ws=new ls(Wo.V);function Is(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=ws,r=0,i=t;r<i.length;r++){var o=i[r];n=n.add(o)}return n}var Es=new ls(Do);function As(){return Es}var _s=function(){function t(t){this.V=t?function(e,n){return t(e,n)||Wo.V(e.key,n.key)}:function(t,e){return Wo.V(t.key,e.key)},this.kt=ms(),this.$t=new cs(this.V)}return t.Lt=function(e){return new t(e.V)},t.prototype.has=function(t){return null!=this.kt.get(t)},t.prototype.get=function(t){return this.kt.get(t)},t.prototype.first=function(){return this.$t.at()},t.prototype.last=function(){return this.$t.ct()},t.prototype.T=function(){return this.$t.T()},t.prototype.indexOf=function(t){var e=this.kt.get(t);return e?this.$t.indexOf(e):-1},Object.defineProperty(t.prototype,"size",{get:function(){return this.$t.size},enumerable:!1,configurable:!0}),t.prototype.forEach=function(t){this.$t.ut((function(e,n){return t(e),!1}))},t.prototype.add=function(t){var e=this.delete(t.key);return e.copy(e.kt.rt(t.key,t),e.$t.rt(t,null))},t.prototype.delete=function(t){var e=this.get(t);return e?this.copy(this.kt.remove(t),this.$t.remove(e)):this},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.$t.lt(),r=e.$t.lt();n.It();){var i=n.Et().key,o=r.Et().key;if(!i.isEqual(o))return!1}return!0},t.prototype.toString=function(){var t=[];return this.forEach((function(e){t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"},t.prototype.copy=function(e,n){var r=new t;return r.V=this.V,r.kt=e,r.$t=n,r},t}(),Ts=function(){function t(){this.Bt=new cs(Wo.V)}return t.prototype.track=function(t){var e=t.doc.key,n=this.Bt.get(e);n?0!==t.type&&3===n.type?this.Bt=this.Bt.rt(e,t):3===t.type&&1!==n.type?this.Bt=this.Bt.rt(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Bt=this.Bt.rt(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Bt=this.Bt.rt(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Bt=this.Bt.remove(e):1===t.type&&2===n.type?this.Bt=this.Bt.rt(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Bt=this.Bt.rt(e,{type:2,doc:t.doc}):No():this.Bt=this.Bt.rt(e,t)},t.prototype.qt=function(){var t=[];return this.Bt.ut((function(e,n){t.push(n)})),t},t}(),Ss=function(){function t(t,e,n,r,i,o,s,a){this.query=t,this.docs=e,this.Ut=n,this.docChanges=r,this.Qt=i,this.fromCache=o,this.Kt=s,this.Wt=a}return t.jt=function(e,n,r,i){var o=[];return n.forEach((function(t){o.push({type:0,doc:t})})),new t(e,n,_s.Lt(n),o,r,i,!0,!1)},Object.defineProperty(t.prototype,"hasPendingWrites",{get:function(){return!this.Qt.T()},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){if(!(this.fromCache===t.fromCache&&this.Kt===t.Kt&&this.Qt.isEqual(t.Qt)&&Ru(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.Ut.isEqual(t.Ut)))return!1;var e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(var r=0;r<e.length;r++)if(e[r].type!==n[r].type||!e[r].doc.isEqual(n[r].doc))return!1;return!0},t}(),Ns=function(){function t(t,e,n,r,i){this.et=t,this.Gt=e,this.zt=n,this.Ht=r,this.Jt=i}return t.Yt=function(e,n){var r=new Map;return r.set(e,ks.Xt(e,n)),new t(qo.min(),r,As(),vs(),Is())},t}(),ks=function(){function t(t,e,n,r,i){this.resumeToken=t,this.Zt=e,this.te=n,this.ee=r,this.ne=i}return t.Xt=function(e,n){return new t(ns.Z,n,Is(),Is(),Is())},t}(),Cs=function(t,e,n,r){this.se=t,this.removedTargetIds=e,this.key=n,this.ie=r},xs=function(t,e){this.targetId=t,this.re=e},Os=function(t,e,n,r){void 0===n&&(n=ns.Z),void 0===r&&(r=null),this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r},Ds=function(){function t(){this.oe=0,this.ae=Ls(),this.ce=ns.Z,this.ue=!1,this.he=!0}return Object.defineProperty(t.prototype,"Zt",{get:function(){return this.ue},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resumeToken",{get:function(){return this.ce},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"le",{get:function(){return 0!==this.oe},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_e",{get:function(){return this.he},enumerable:!1,configurable:!0}),t.prototype.fe=function(t){t.X()>0&&(this.he=!0,this.ce=t)},t.prototype.de=function(){var t=Is(),e=Is(),n=Is();return this.ae.forEach((function(r,i){switch(i){case 0:t=t.add(r);break;case 2:e=e.add(r);break;case 1:n=n.add(r);break;default:No()}})),new ks(this.ce,this.ue,t,e,n)},t.prototype.we=function(){this.he=!1,this.ae=Ls()},t.prototype.Te=function(t,e){this.he=!0,this.ae=this.ae.rt(t,e)},t.prototype.Ee=function(t){this.he=!0,this.ae=this.ae.remove(t)},t.prototype.Ie=function(){this.oe+=1},t.prototype.me=function(){this.oe-=1},t.prototype.Ae=function(){this.he=!0,this.ue=!0},t}(),Ps=function(){function t(t){this.Re=t,this.Pe=new Map,this.ge=vs(),this.Ve=Rs(),this.ye=new ls(Do)}return t.prototype.pe=function(t){for(var e=0,n=t.se;e<n.length;e++){var r=n[e];t.ie instanceof mu?this.ve(r,t.ie):t.ie instanceof bu&&this.be(r,t.key,t.ie)}for(var i=0,o=t.removedTargetIds;i<o.length;i++){var s=o[i];this.be(s,t.key,t.ie)}},t.prototype.Se=function(t){var e=this;this.De(t,(function(n){var r=e.Ce(n);switch(t.state){case 0:e.Ne(n)&&r.fe(t.resumeToken);break;case 1:r.me(),r.le||r.we(),r.fe(t.resumeToken);break;case 2:r.me(),r.le||e.removeTarget(n);break;case 3:e.Ne(n)&&(r.Ae(),r.fe(t.resumeToken));break;case 4:e.Ne(n)&&(e.xe(n),r.fe(t.resumeToken));break;default:No()}}))},t.prototype.De=function(t,e){var n=this;t.targetIds.length>0?t.targetIds.forEach(e):this.Pe.forEach((function(t,r){n.Ne(r)&&e(r)}))},t.prototype.Fe=function(t){var e=t.targetId,n=t.re.count,r=this.Oe(e);if(r){var i=r.target;if(es(i))if(0===n){var o=new Wo(i.path);this.be(e,o,new bu(o,qo.min()))}else ko(1===n);else this.Me(e)!==n&&(this.xe(e),this.ye=this.ye.add(e))}},t.prototype.ke=function(t){var e=this,n=new Map;this.Pe.forEach((function(r,i){var o=e.Oe(i);if(o){if(r.Zt&&es(o.target)){var s=new Wo(o.target.path);null!==e.ge.get(s)||e.$e(i,s)||e.be(i,s,new bu(s,t))}r._e&&(n.set(i,r.de()),r.we())}}));var r=Is();this.Ve.forEach((function(t,n){var i=!0;n.xt((function(t){var n=e.Oe(t);return!n||2===n.tt||(i=!1,!1)})),i&&(r=r.add(t))}));var i=new Ns(t,n,this.ye,this.ge,r);return this.ge=vs(),this.Ve=Rs(),this.ye=new ls(Do),i},t.prototype.ve=function(t,e){if(this.Ne(t)){var n=this.$e(t,e.key)?2:0;this.Ce(t).Te(e.key,n),this.ge=this.ge.rt(e.key,e),this.Ve=this.Ve.rt(e.key,this.Le(e.key).add(t))}},t.prototype.be=function(t,e,n){if(this.Ne(t)){var r=this.Ce(t);this.$e(t,e)?r.Te(e,1):r.Ee(e),this.Ve=this.Ve.rt(e,this.Le(e).delete(t)),n&&(this.ge=this.ge.rt(e,n))}},t.prototype.removeTarget=function(t){this.Pe.delete(t)},t.prototype.Me=function(t){var e=this.Ce(t).de();return this.Re.Be(t).size+e.te.size-e.ne.size},t.prototype.Ie=function(t){this.Ce(t).Ie()},t.prototype.Ce=function(t){var e=this.Pe.get(t);return e||(e=new Ds,this.Pe.set(t,e)),e},t.prototype.Le=function(t){var e=this.Ve.get(t);return e||(e=new ls(Do),this.Ve=this.Ve.rt(t,e)),e},t.prototype.Ne=function(t){var e=null!==this.Oe(t);return e||Ao("WatchChangeAggregator","Detected inactive target",t),e},t.prototype.Oe=function(t){var e=this.Pe.get(t);return e&&e.le?null:this.Re.qe(t)},t.prototype.xe=function(t){var e=this;this.Pe.set(t,new Ds),this.Re.Be(t).forEach((function(n){e.be(t,n,null)}))},t.prototype.$e=function(t,e){return this.Re.Be(t).has(e)},t}();function Rs(){return new cs(Wo.V)}function Ls(){return new cs(Wo.V)}function Ms(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function Vs(t){var e=t.mapValue.fields.__previous_value__;return Ms(e)?Vs(e):e}function js(t){var e=Ws(t.mapValue.fields.__local_write_time__.timestampValue);return new Fo(e.seconds,e.nanos)}var Us=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function Bs(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?Ms(t)?4:10:No()}function Fs(t,e){var n=Bs(t);if(n!==Bs(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return js(t).isEqual(js(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;var n=Ws(t.timestampValue),r=Ws(e.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return Ys(t.bytesValue).isEqual(Ys(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return Xs(t.geoPointValue.latitude)===Xs(e.geoPointValue.latitude)&&Xs(t.geoPointValue.longitude)===Xs(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return Xs(t.integerValue)===Xs(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){var n=Xs(t.doubleValue),r=Xs(e.doubleValue);return n===r?Yo(n)===Yo(r):isNaN(n)&&isNaN(r)}return!1}(t,e);case 9:return Po(t.arrayValue.values||[],e.arrayValue.values||[],Fs);case 10:return function(t,e){var n=t.mapValue.fields||{},r=e.mapValue.fields||{};if(Lo(n)!==Lo(r))return!1;for(var i in n)if(n.hasOwnProperty(i)&&(void 0===r[i]||!Fs(n[i],r[i])))return!1;return!0}(t,e);default:return No()}}function qs(t,e){return void 0!==(t.values||[]).find((function(t){return Fs(t,e)}))}function Gs(t,e){var n=Bs(t),r=Bs(e);if(n!==r)return Do(n,r);switch(n){case 0:return 0;case 1:return Do(t.booleanValue,e.booleanValue);case 2:return function(t,e){var n=Xs(t.integerValue||t.doubleValue),r=Xs(e.integerValue||e.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(t,e);case 3:return zs(t.timestampValue,e.timestampValue);case 4:return zs(js(t),js(e));case 5:return Do(t.stringValue,e.stringValue);case 6:return function(t,e){var n=Ys(t),r=Ys(e);return n.A(r)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){for(var n=t.split("/"),r=e.split("/"),i=0;i<n.length&&i<r.length;i++){var o=Do(n[i],r[i]);if(0!==o)return o}return Do(n.length,r.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){var n=Do(Xs(t.latitude),Xs(e.latitude));return 0!==n?n:Do(Xs(t.longitude),Xs(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){for(var n=t.values||[],r=e.values||[],i=0;i<n.length&&i<r.length;++i){var o=Gs(n[i],r[i]);if(o)return o}return Do(n.length,r.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){var n=t.fields||{},r=Object.keys(n),i=e.fields||{},o=Object.keys(i);r.sort(),o.sort();for(var s=0;s<r.length&&s<o.length;++s){var a=Do(r[s],o[s]);if(0!==a)return a;var u=Gs(n[r[s]],i[o[s]]);if(0!==u)return u}return Do(r.length,o.length)}(t.mapValue,e.mapValue);default:throw No()}}function zs(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return Do(t,e);var n=Ws(t),r=Ws(e),i=Do(n.seconds,r.seconds);return 0!==i?i:Do(n.nanos,r.nanos)}function Ks(t){return Hs(t)}function Hs(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){var e=Ws(t);return"time("+e.seconds+","+e.nanos+")"}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?Ys(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,Wo.W(n).toString()):"geoPointValue"in t?"geo("+(e=t.geoPointValue).latitude+","+e.longitude+")":"arrayValue"in t?function(t){for(var e="[",n=!0,r=0,i=t.values||[];r<i.length;r++)n?n=!1:e+=",",e+=Hs(i[r]);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){for(var e="{",n=!0,r=0,i=Object.keys(t.fields||{}).sort();r<i.length;r++){var o=i[r];n?n=!1:e+=",",e+=o+":"+Hs(t.fields[o])}return e+"}"}(t.mapValue):No();var e,n}function Ws(t){if(ko(!!t),"string"==typeof t){var e=0,n=Us.exec(t);if(ko(!!n),n[1]){var r=n[1];r=(r+"000000000").substr(0,9),e=Number(r)}var i=new Date(t);return{seconds:Math.floor(i.getTime()/1e3),nanos:e}}return{seconds:Xs(t.seconds),nanos:Xs(t.nanos)}}function Xs(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function Ys(t){return"string"==typeof t?ns.fromBase64String(t):ns.fromUint8Array(t)}function Js(t,e){return{referenceValue:"projects/"+t.projectId+"/databases/"+t.database+"/documents/"+e.path.M()}}function Qs(t){return!!t&&"integerValue"in t}function $s(t){return!!t&&"arrayValue"in t}function Zs(t){return!!t&&"nullValue"in t}function ta(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function ea(t){return!!t&&"mapValue"in t}var na={asc:"ASCENDING",desc:"DESCENDING"},ra={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"},ia=function(t,e){this.t=t,this.Ue=e};function oa(t){return{integerValue:""+t}}function sa(t,e){if(t.Ue){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Yo(e)?"-0":e}}function aa(t,e){return Jo(e)?oa(e):sa(t,e)}function ua(t,e){return t.Ue?new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")+"."+("000000000"+e.nanoseconds).slice(-9)+"Z":{seconds:""+e.seconds,nanos:e.nanoseconds}}function ca(t,e){return t.Ue?e.toBase64():e.toUint8Array()}function ha(t,e){return ua(t,e.P())}function fa(t){return ko(!!t),qo.m(function(t){var e=Ws(t);return new Fo(e.seconds,e.nanos)}(t))}function la(t,e){return function(t){return new zo(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).M()}function pa(t){var e=zo.k(t);return ko(Ma(e)),e}function da(t,e){return la(t.t,e.path)}function va(t,e){var n=pa(e);if(n.get(1)!==t.t.projectId)throw new Bo(Uo.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.t.projectId);if(n.get(3)!==t.t.database)throw new Bo(Uo.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.t.database);return new Wo(ba(n))}function ya(t,e){return la(t.t,e)}function ga(t){var e=pa(t);return 4===e.length?zo.$():ba(e)}function ma(t){return new zo(["projects",t.t.projectId,"databases",t.t.database]).M()}function ba(t){return ko(t.length>4&&"documents"===t.get(4)),t.v(5)}function wa(t,e,n){return{name:da(t,e),fields:n.proto.mapValue.fields}}function Ia(t,e){var n;if(e instanceof su)n={update:wa(t,e.key,e.value)};else if(e instanceof lu)n={delete:da(t,e.key)};else if(e instanceof au)n={update:wa(t,e.key,e.data),updateMask:La(e.Qe)};else if(e instanceof cu)n={transform:{document:da(t,e.key),fieldTransforms:e.fieldTransforms.map((function(t){return function(t,e){var n=e.transform;if(n instanceof Fa)return{fieldPath:e.field.M(),setToServerValue:"REQUEST_TIME"};if(n instanceof qa)return{fieldPath:e.field.M(),appendMissingElements:{values:n.elements}};if(n instanceof za)return{fieldPath:e.field.M(),removeAllFromArray:{values:n.elements}};if(n instanceof Ha)return{fieldPath:e.field.M(),increment:n.Ke};throw No()}(0,t)}))}};else{if(!(e instanceof pu))return No();n={verify:da(t,e.key)}}return e.je.We||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:ha(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:No()}(t,e.je)),n}function Ea(t,e){var n=e.currentDocument?function(t){return void 0!==t.updateTime?$a.updateTime(fa(t.updateTime)):void 0!==t.exists?$a.exists(t.exists):$a.Ge()}(e.currentDocument):$a.Ge();if(e.update){e.update.name;var r=va(t,e.update.name),i=new du({mapValue:{fields:e.update.fields}});if(e.updateMask){var o=function(t){var e=t.fieldPaths||[];return new Ya(e.map((function(t){return Ho.U(t)})))}(e.updateMask);return new au(r,i,o,n)}return new su(r,i,n)}if(e.delete){var s=va(t,e.delete);return new lu(s,n)}if(e.transform){var a=va(t,e.transform.document),u=e.transform.fieldTransforms.map((function(e){return function(t,e){var n=null;if("setToServerValue"in e)ko("REQUEST_TIME"===e.setToServerValue),n=new Fa;else if("appendMissingElements"in e){var r=e.appendMissingElements.values||[];n=new qa(r)}else if("removeAllFromArray"in e){var i=e.removeAllFromArray.values||[];n=new za(i)}else"increment"in e?n=new Ha(t,e.increment):No();var o=Ho.U(e.fieldPath);return new Ja(o,n)}(t,e)}));return ko(!0===n.exists),new cu(a,u)}if(e.verify){var c=va(t,e.verify);return new pu(c,n)}return No()}function Aa(t,e){return{documents:[ya(t,e.path)]}}function _a(t,e){var n={structuredQuery:{}},r=e.path;null!==e.collectionGroup?(n.parent=ya(t,r),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=ya(t,r.S()),n.structuredQuery.from=[{collectionId:r.C()}]);var i=function(t){if(0!==t.length){var e=t.map((function(t){return function(t){if("=="===t.op){if(ta(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NAN"}};if(Zs(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(ta(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NOT_NAN"}};if(Zs(t.value))return{unaryFilter:{field:Oa(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Oa(t.field),op:xa(t.op),value:t.value}}}(t)}));return 1===e.length?e[0]:{compositeFilter:{op:"AND",filters:e}}}}(e.filters);i&&(n.structuredQuery.where=i);var o=function(t){if(0!==t.length)return t.map((function(t){return function(t){return{field:Oa(t.field),direction:Ca(t.dir)}}(t)}))}(e.orderBy);o&&(n.structuredQuery.orderBy=o);var s=function(t,e){return t.Ue||Xo(e)?e:{value:e}}(t,e.limit);return null!==s&&(n.structuredQuery.limit=s),e.startAt&&(n.structuredQuery.startAt=Na(e.startAt)),e.endAt&&(n.structuredQuery.endAt=Na(e.endAt)),n}function Ta(t){var e=ga(t.parent),n=t.structuredQuery,r=n.from?n.from.length:0,i=null;if(r>0){ko(1===r);var o=n.from[0];o.allDescendants?i=o.collectionId:e=e.child(o.collectionId)}var s=[];n.where&&(s=Sa(n.where));var a=[];n.orderBy&&(a=n.orderBy.map((function(t){return function(t){return new $u(Da(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t)})));var u=null;n.limit&&(u=function(t){var e;return Xo(e="object"==typeof t?t.value:t)?null:e}(n.limit));var c=null;n.startAt&&(c=ka(n.startAt));var h=null;return n.endAt&&(h=ka(n.endAt)),Eu(e,i,a,s,u,"F",c,h)}function Sa(t){return t?void 0!==t.unaryFilter?[Ra(t)]:void 0!==t.fieldFilter?[Pa(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((function(t){return Sa(t)})).reduce((function(t,e){return t.concat(e)})):No():[]}function Na(t){return{before:t.before,values:t.position}}function ka(t){var e=!!t.before,n=t.values||[];return new Xu(n,e)}function Ca(t){return na[t]}function xa(t){return ra[t]}function Oa(t){return{fieldPath:t.M()}}function Da(t){return Ho.U(t.fieldPath)}function Pa(t){return Uu.create(Da(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";case"OPERATOR_UNSPECIFIED":default:return No()}}(t.fieldFilter.op),t.fieldFilter.value)}function Ra(t){switch(t.unaryFilter.op){case"IS_NAN":var e=Da(t.unaryFilter.field);return Uu.create(e,"==",{doubleValue:NaN});case"IS_NULL":var n=Da(t.unaryFilter.field);return Uu.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":var r=Da(t.unaryFilter.field);return Uu.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":var i=Da(t.unaryFilter.field);return Uu.create(i,"!=",{nullValue:"NULL_VALUE"});case"OPERATOR_UNSPECIFIED":default:return No()}}function La(t){var e=[];return t.fields.forEach((function(t){return e.push(t.M())})),{fieldPaths:e}}function Ma(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}var Va=function(){this.ze=void 0};function ja(t,e,n){return t instanceof Fa?function(t,e){var n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof qa?Ga(t,e):t instanceof za?Ka(t,e):function(t,e){var n=Ba(t,e),r=Wa(n)+Wa(t.Ke);return Qs(n)&&Qs(t.Ke)?oa(r):sa(t.serializer,r)}(t,e)}function Ua(t,e,n){return t instanceof qa?Ga(t,e):t instanceof za?Ka(t,e):n}function Ba(t,e){return t instanceof Ha?Qs(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}var Fa=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n}(Va),qa=function(t){function n(e){var n=this;return(n=t.call(this)||this).elements=e,n}return e(n,t),n}(Va);function Ga(t,e){for(var n=Xa(e),r=function(t){n.some((function(e){return Fs(e,t)}))||n.push(t)},i=0,o=t.elements;i<o.length;i++)r(o[i]);return{arrayValue:{values:n}}}var za=function(t){function n(e){var n=this;return(n=t.call(this)||this).elements=e,n}return e(n,t),n}(Va);function Ka(t,e){for(var n=Xa(e),r=function(t){n=n.filter((function(e){return!Fs(e,t)}))},i=0,o=t.elements;i<o.length;i++)r(o[i]);return{arrayValue:{values:n}}}var Ha=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).serializer=e,r.Ke=n,r}return e(n,t),n}(Va);function Wa(t){return Xs(t.integerValue||t.doubleValue)}function Xa(t){return $s(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}var Ya=function(){function t(t){this.fields=t,t.sort(Ho.V)}return t.prototype.He=function(t){for(var e=0,n=this.fields;e<n.length;e++)if(n[e].N(t))return!0;return!1},t.prototype.isEqual=function(t){return Po(this.fields,t.fields,(function(t,e){return t.isEqual(e)}))},t}(),Ja=function(t,e){this.field=t,this.transform=e},Qa=function(t,e){this.version=t,this.transformResults=e},$a=function(){function t(t,e){this.updateTime=t,this.exists=e}return t.Ge=function(){return new t},t.exists=function(e){return new t(void 0,e)},t.updateTime=function(e){return new t(e)},Object.defineProperty(t.prototype,"We",{get:function(){return void 0===this.updateTime&&void 0===this.exists},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)},t}();function Za(t,e){return void 0!==t.updateTime?e instanceof mu&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e instanceof mu}var tu=function(){};function eu(t,e,n){return t instanceof su?function(t,e,n){return new mu(t.key,n.version,t.value,{hasCommittedMutations:!0})}(t,0,n):t instanceof au?function(t,e,n){if(!Za(t.je,e))return new wu(t.key,n.version);var r=uu(t,e);return new mu(t.key,n.version,r,{hasCommittedMutations:!0})}(t,e,n):t instanceof cu?function(t,e,n){if(ko(null!=n.transformResults),!Za(t.je,e))return new wu(t.key,n.version);var r=hu(0,e),i=function(t,e,n){var r=[];ko(t.length===n.length);for(var i=0;i<n.length;i++){var o=t[i],s=o.transform,a=null;e instanceof mu&&(a=e.field(o.field)),r.push(Ua(s,a,n[i]))}return r}(t.fieldTransforms,e,n.transformResults),o=n.version,s=fu(t,r.data(),i);return new mu(t.key,o,s,{hasCommittedMutations:!0})}(t,e,n):function(t,e,n){return new bu(t.key,n.version,{hasCommittedMutations:!0})}(t,0,n)}function nu(t,e,n,r){return t instanceof su?function(t,e){if(!Za(t.je,e))return e;var n=ou(e);return new mu(t.key,n,t.value,{Je:!0})}(t,e):t instanceof au?function(t,e){if(!Za(t.je,e))return e;var n=ou(e),r=uu(t,e);return new mu(t.key,n,r,{Je:!0})}(t,e):t instanceof cu?function(t,e,n,r){if(!Za(t.je,e))return e;var i=hu(0,e),o=function(t,e,n,r){for(var i=[],o=0,s=t;o<s.length;o++){var a=s[o],u=a.transform,c=null;n instanceof mu&&(c=n.field(a.field)),null===c&&r instanceof mu&&(c=r.field(a.field)),i.push(ja(u,c,e))}return i}(t.fieldTransforms,n,e,r),s=fu(t,i.data(),o);return new mu(t.key,i.version,s,{Je:!0})}(t,e,r,n):function(t,e){return Za(t.je,e)?new bu(t.key,qo.min()):e}(t,e)}function ru(t,e){return t instanceof cu?function(t,e){for(var n=null,r=0,i=t.fieldTransforms;r<i.length;r++){var o=i[r],s=e instanceof mu?e.field(o.field):void 0,a=Ba(o.transform,s||null);null!=a&&(n=null==n?(new vu).set(o.field,a):n.set(o.field,a))}return n?n.Ye():null}(t,e):null}function iu(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.je.isEqual(e.je)&&(0===t.type?t.value.isEqual(e.value):1===t.type?t.data.isEqual(e.data)&&t.Qe.isEqual(e.Qe):2!==t.type||Po(t.fieldTransforms,t.fieldTransforms,(function(t,e){return function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof qa&&e instanceof qa||t instanceof za&&e instanceof za?Po(t.elements,e.elements,Fs):t instanceof Ha&&e instanceof Ha?Fs(t.Ke,e.Ke):t instanceof Fa&&e instanceof Fa}(t.transform,e.transform)}(t,e)})))}function ou(t){return t instanceof mu?t.version:qo.min()}var su=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).key=e,i.value=n,i.je=r,i.type=0,i}return e(n,t),n}(tu),au=function(t){function n(e,n,r,i){var o=this;return(o=t.call(this)||this).key=e,o.data=n,o.Qe=r,o.je=i,o.type=1,o}return e(n,t),n}(tu);function uu(t,e){return function(t,e){var n=new vu(e);return t.Qe.fields.forEach((function(e){if(!e.T()){var r=t.data.field(e);null!==r?n.set(e,r):n.delete(e)}})),n.Ye()}(t,e instanceof mu?e.data():du.empty())}var cu=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).key=e,r.fieldTransforms=n,r.type=2,r.je=$a.exists(!0),r}return e(n,t),n}(tu);function hu(t,e){return e}function fu(t,e,n){for(var r=new vu(e),i=0;i<t.fieldTransforms.length;i++){var o=t.fieldTransforms[i];r.set(o.field,n[i])}return r.Ye()}var lu=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).key=e,r.je=n,r.type=3,r}return e(n,t),n}(tu),pu=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).key=e,r.je=n,r.type=4,r}return e(n,t),n}(tu),du=function(){function t(t){this.proto=t}return t.empty=function(){return new t({mapValue:{}})},t.prototype.field=function(t){if(t.T())return this.proto;for(var e=this.proto,n=0;n<t.length-1;++n){if(!e.mapValue.fields)return null;if(!ea(e=e.mapValue.fields[t.get(n)]))return null}return(e=(e.mapValue.fields||{})[t.C()])||null},t.prototype.isEqual=function(t){return Fs(this.proto,t.proto)},t}(),vu=function(){function t(t){void 0===t&&(t=du.empty()),this.Xe=t,this.Ze=new Map}return t.prototype.set=function(t,e){return this.tn(t,e),this},t.prototype.delete=function(t){return this.tn(t,null),this},t.prototype.tn=function(t,e){for(var n=this.Ze,r=0;r<t.length-1;++r){var i=t.get(r),o=n.get(i);o instanceof Map?n=o:o&&10===Bs(o)?(o=new Map(Object.entries(o.mapValue.fields||{})),n.set(i,o),n=o):(o=new Map,n.set(i,o),n=o)}n.set(t.C(),e)},t.prototype.Ye=function(){var t=this.en(Ho.$(),this.Ze);return null!=t?new du(t):this.Xe},t.prototype.en=function(t,e){var n=this,r=!1,i=this.Xe.field(t),o=ea(i)?Object.assign({},i.mapValue.fields):{};return e.forEach((function(e,i){if(e instanceof Map){var s=n.en(t.child(i),e);null!=s&&(o[i]=s,r=!0)}else null!==e?(o[i]=e,r=!0):o.hasOwnProperty(i)&&(delete o[i],r=!0)})),r?{mapValue:{fields:o}}:null},t}();function yu(t){var e=[];return Mo(t.fields||{},(function(t,n){var r=new Ho([t]);if(ea(n)){var i=yu(n.mapValue).fields;if(0===i.length)e.push(r);else for(var o=0,s=i;o<s.length;o++){var a=s[o];e.push(r.child(a))}}else e.push(r)})),new Ya(e)}var gu=function(t,e){this.key=t,this.version=e},mu=function(t){function n(e,n,r,i){var o=this;return(o=t.call(this,e,n)||this).nn=r,o.Je=!!i.Je,o.hasCommittedMutations=!!i.hasCommittedMutations,o}return e(n,t),n.prototype.field=function(t){return this.nn.field(t)},n.prototype.data=function(){return this.nn},n.prototype.sn=function(){return this.nn.proto},n.prototype.isEqual=function(t){return t instanceof n&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.Je===t.Je&&this.hasCommittedMutations===t.hasCommittedMutations&&this.nn.isEqual(t.nn)},n.prototype.toString=function(){return"Document("+this.key+", "+this.version+", "+this.nn.toString()+", {hasLocalMutations: "+this.Je+"}), {hasCommittedMutations: "+this.hasCommittedMutations+"})"},Object.defineProperty(n.prototype,"hasPendingWrites",{get:function(){return this.Je||this.hasCommittedMutations},enumerable:!1,configurable:!0}),n}(gu),bu=function(t){function n(e,n,r){var i=this;return(i=t.call(this,e,n)||this).hasCommittedMutations=!(!r||!r.hasCommittedMutations),i}return e(n,t),n.prototype.toString=function(){return"NoDocument("+this.key+", "+this.version+")"},Object.defineProperty(n.prototype,"hasPendingWrites",{get:function(){return this.hasCommittedMutations},enumerable:!1,configurable:!0}),n.prototype.isEqual=function(t){return t instanceof n&&t.hasCommittedMutations===this.hasCommittedMutations&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},n}(gu),wu=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.toString=function(){return"UnknownDocument("+this.key+", "+this.version+")"},Object.defineProperty(n.prototype,"hasPendingWrites",{get:function(){return!0},enumerable:!1,configurable:!0}),n.prototype.isEqual=function(t){return t instanceof n&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},n}(gu),Iu=function(t,e,n,r,i,o,s,a){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o="F"),void 0===s&&(s=null),void 0===a&&(a=null),this.path=t,this.collectionGroup=e,this.rn=n,this.filters=r,this.limit=i,this.limitType=o,this.startAt=s,this.endAt=a,this.on=null,this.an=null,this.startAt,this.endAt};function Eu(t,e,n,r,i,o,s,a){return new Iu(t,e,n,r,i,o,s,a)}function Au(t){return new Iu(t)}function _u(t){return!Xo(t.limit)&&"F"===t.limitType}function Tu(t){return!Xo(t.limit)&&"L"===t.limitType}function Su(t){return t.rn.length>0?t.rn[0].field:null}function Nu(t){for(var e=0,n=t.filters;e<n.length;e++){var r=n[e];if(r.cn())return r.field}return null}function ku(t){return null!==t.collectionGroup}function Cu(t){var e=Co(t);if(null===e.on){e.on=[];var n=Nu(e),r=Su(e);if(null!==n&&null===r)n.B()||e.on.push(new $u(n)),e.on.push(new $u(Ho.q(),"asc"));else{for(var i=!1,o=0,s=e.rn;o<s.length;o++){var a=s[o];e.on.push(a),a.field.B()&&(i=!0)}if(!i){var u=e.rn.length>0?e.rn[e.rn.length-1].dir:"asc";e.on.push(new $u(Ho.q(),u))}}}return e.on}function xu(t){var e=Co(t);if(!e.an)if("F"===e.limitType)e.an=$o(e.path,e.collectionGroup,Cu(e),e.filters,e.limit,e.startAt,e.endAt);else{for(var n=[],r=0,i=Cu(e);r<i.length;r++){var o=i[r],s="desc"===o.dir?"asc":"desc";n.push(new $u(o.field,s))}var a=e.endAt?new Xu(e.endAt.position,!e.endAt.before):null,u=e.startAt?new Xu(e.startAt.position,!e.startAt.before):null;e.an=$o(e.path,e.collectionGroup,n,e.filters,e.limit,a,u)}return e.an}function Ou(t,e,n){return new Iu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}function Du(t,e){return new Iu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,e,t.endAt)}function Pu(t,e){return new Iu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,e)}function Ru(t,e){return ts(xu(t),xu(e))&&t.limitType===e.limitType}function Lu(t){return Zo(xu(t))+"|lt:"+t.limitType}function Mu(t){return"Query(target="+function(t){var e=t.path.M();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=", filters: ["+t.filters.map((function(t){return(e=t).field.M()+" "+e.op+" "+Ks(e.value);var e})).join(", ")+"]"),Xo(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=", orderBy: ["+t.orderBy.map((function(t){return(e=t).field.M()+" ("+e.dir+")";var e})).join(", ")+"]"),t.startAt&&(e+=", startAt: "+Yu(t.startAt)),t.endAt&&(e+=", endAt: "+Yu(t.endAt)),"Target("+e+")"}(xu(t))+"; limitType="+t.limitType+")"}function Vu(t,e){return function(t,e){var n=e.key.path;return null!==t.collectionGroup?e.key.j(t.collectionGroup)&&t.path.N(n):Wo.G(t.path)?t.path.isEqual(n):t.path.F(n)}(t,e)&&function(t,e){for(var n=0,r=t.rn;n<r.length;n++){var i=r[n];if(!i.field.B()&&null===e.field(i.field))return!1}return!0}(t,e)&&function(t,e){for(var n=0,r=t.filters;n<r.length;n++)if(!r[n].matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!Ju(t.startAt,Cu(t),e)||t.endAt&&Ju(t.endAt,Cu(t),e))}(t,e)}function ju(t){return function(e,n){for(var r=!1,i=0,o=Cu(t);i<o.length;i++){var s=o[i],a=Zu(s,e,n);if(0!==a)return a;r=r||s.field.B()}return 0}}var Uu=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).field=e,i.op=n,i.value=r,i}return e(n,t),n.create=function(t,e,r){return t.B()?"in"===e||"not-in"===e?this.un(t,e,r):new Bu(t,e,r):"array-contains"===e?new zu(t,r):"in"===e?new Ku(t,r):"not-in"===e?new Hu(t,r):"array-contains-any"===e?new Wu(t,r):new n(t,e,r)},n.un=function(t,e,n){return"in"===e?new Fu(t,n):new qu(t,n)},n.prototype.matches=function(t){var e=t.field(this.field);return"!="===this.op?null!==e&&this.hn(Gs(e,this.value)):null!==e&&Bs(this.value)===Bs(e)&&this.hn(Gs(e,this.value))},n.prototype.hn=function(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return No()}},n.prototype.cn=function(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0},n}((function(){})),Bu=function(t){function n(e,n,r){var i=this;return(i=t.call(this,e,n,r)||this).key=Wo.W(r.referenceValue),i}return e(n,t),n.prototype.matches=function(t){var e=Wo.V(t.key,this.key);return this.hn(e)},n}(Uu),Fu=function(t){function n(e,n){var r=this;return(r=t.call(this,e,"in",n)||this).keys=Gu(0,n),r}return e(n,t),n.prototype.matches=function(t){return this.keys.some((function(e){return e.isEqual(t.key)}))},n}(Uu),qu=function(t){function n(e,n){var r=this;return(r=t.call(this,e,"not-in",n)||this).keys=Gu(0,n),r}return e(n,t),n.prototype.matches=function(t){return!this.keys.some((function(e){return e.isEqual(t.key)}))},n}(Uu);function Gu(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((function(t){return Wo.W(t.referenceValue)}))}var zu=function(t){function n(e,n){return t.call(this,e,"array-contains",n)||this}return e(n,t),n.prototype.matches=function(t){var e=t.field(this.field);return $s(e)&&qs(e.arrayValue,this.value)},n}(Uu),Ku=function(t){function n(e,n){return t.call(this,e,"in",n)||this}return e(n,t),n.prototype.matches=function(t){var e=t.field(this.field);return null!==e&&qs(this.value.arrayValue,e)},n}(Uu),Hu=function(t){function n(e,n){return t.call(this,e,"not-in",n)||this}return e(n,t),n.prototype.matches=function(t){if(qs(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;var e=t.field(this.field);return null!==e&&!qs(this.value.arrayValue,e)},n}(Uu),Wu=function(t){function n(e,n){return t.call(this,e,"array-contains-any",n)||this}return e(n,t),n.prototype.matches=function(t){var e=this,n=t.field(this.field);return!(!$s(n)||!n.arrayValue.values)&&n.arrayValue.values.some((function(t){return qs(e.value.arrayValue,t)}))},n}(Uu),Xu=function(t,e){this.position=t,this.before=e};function Yu(t){return(t.before?"b":"a")+":"+t.position.map((function(t){return Ks(t)})).join(",")}function Ju(t,e,n){for(var r=0,i=0;i<t.position.length;i++){var o=e[i],s=t.position[i];if(r=o.field.B()?Wo.V(Wo.W(s.referenceValue),n.key):Gs(s,n.field(o.field)),"desc"===o.dir&&(r*=-1),0!==r)break}return t.before?r<=0:r<0}function Qu(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(var n=0;n<t.position.length;n++)if(!Fs(t.position[n],e.position[n]))return!1;return!0}var $u=function(t,e){void 0===e&&(e="asc"),this.field=t,this.dir=e};function Zu(t,e,n){var r=t.field.B()?Wo.V(e.key,n.key):function(t,e,n){var r=e.field(t),i=n.field(t);return null!==r&&null!==i?Gs(r,i):No()}(t.field,e,n);switch(t.dir){case"asc":return r;case"desc":return-1*r;default:return No()}}function tc(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}var ec=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))},nc=function(){function t(t,e,n,r,i){void 0===n&&(n=1e3),void 0===r&&(r=1.5),void 0===i&&(i=6e4),this.ln=t,this._n=e,this.fn=n,this.dn=r,this.wn=i,this.Tn=0,this.En=null,this.In=Date.now(),this.reset()}return t.prototype.reset=function(){this.Tn=0},t.prototype.mn=function(){this.Tn=this.wn},t.prototype.An=function(t){var e=this;this.cancel();var n=Math.floor(this.Tn+this.Rn()),r=Math.max(0,Date.now()-this.In),i=Math.max(0,n-r);i>0&&Ao("ExponentialBackoff","Backing off for "+i+" ms (base delay: "+this.Tn+" ms, delay with jitter: "+n+" ms, last attempt: "+r+" ms ago)"),this.En=this.ln.Pn(this._n,i,(function(){return e.In=Date.now(),t()})),this.Tn*=this.dn,this.Tn<this.fn&&(this.Tn=this.fn),this.Tn>this.wn&&(this.Tn=this.wn)},t.prototype.gn=function(){null!==this.En&&(this.En.Vn(),this.En=null)},t.prototype.cancel=function(){null!==this.En&&(this.En.cancel(),this.En=null)},t.prototype.Rn=function(){return(Math.random()-.5)*this.Tn},t}(),rc=function(){function t(t){var e=this;this.yn=null,this.pn=null,this.result=void 0,this.error=void 0,this.vn=!1,this.bn=!1,t((function(t){e.vn=!0,e.result=t,e.yn&&e.yn(t)}),(function(t){e.vn=!0,e.error=t,e.pn&&e.pn(t)}))}return t.prototype.catch=function(t){return this.next(void 0,t)},t.prototype.next=function(e,n){var r=this;return this.bn&&No(),this.bn=!0,this.vn?this.error?this.Sn(n,this.error):this.Dn(e,this.result):new t((function(t,i){r.yn=function(n){r.Dn(e,n).next(t,i)},r.pn=function(e){r.Sn(n,e).next(t,i)}}))},t.prototype.Cn=function(){var t=this;return new Promise((function(e,n){t.next(e,n)}))},t.prototype.Nn=function(e){try{var n=e();return n instanceof t?n:t.resolve(n)}catch(e){return t.reject(e)}},t.prototype.Dn=function(e,n){return e?this.Nn((function(){return e(n)})):t.resolve(n)},t.prototype.Sn=function(e,n){return e?this.Nn((function(){return e(n)})):t.reject(n)},t.resolve=function(e){return new t((function(t,n){t(e)}))},t.reject=function(e){return new t((function(t,n){n(e)}))},t.xn=function(e){return new t((function(t,n){var r=0,i=0,o=!1;e.forEach((function(e){++r,e.next((function(){++i,o&&i===r&&t()}),(function(t){return n(t)}))})),o=!0,i===r&&t()}))},t.Fn=function(e){for(var n=t.resolve(!1),r=function(e){n=n.next((function(n){return n?t.resolve(n):e()}))},i=0,o=e;i<o.length;i++)r(o[i]);return n},t.forEach=function(t,e){var n=this,r=[];return t.forEach((function(t,i){r.push(e.call(n,t,i))})),this.xn(r)},t}(),ic=function(){function t(e,n,r){this.name=e,this.version=n,this.On=r,12.2===t.Mn(l())&&_o("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.")}return t.delete=function(t){return Ao("SimpleDb","Removing database:",t),hc(window.indexedDB.deleteDatabase(t)).Cn()},t.kn=function(){if("undefined"==typeof indexedDB)return!1;if(t.$n())return!0;var e=l(),n=t.Mn(e),r=0<n&&n<10,i=t.Ln(e),o=0<i&&i<4.5;return!(e.indexOf("MSIE ")>0||e.indexOf("Trident/")>0||e.indexOf("Edge/")>0||r||o)},t.$n=function(){var t;return"undefined"!=typeof process&&"YES"===(null===(t=process.env)||void 0===t?void 0:t.Bn)},t.qn=function(t,e){return t.store(e)},t.Mn=function(t){var e=t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),n=e?e[1].split("_").slice(0,2).join("."):"-1";return Number(n)},t.Ln=function(t){var e=t.match(/Android ([\d.]+)/i),n=e?e[1].split(".").slice(0,2).join("."):"-1";return Number(n)},t.prototype.Un=function(t){return i(this,void 0,void 0,(function(){var e,n=this;return o(this,(function(r){switch(r.label){case 0:return this.db?[3,2]:(Ao("SimpleDb","Opening database:",this.name),e=this,[4,new Promise((function(e,r){var i=indexedDB.open(n.name,n.version);i.onsuccess=function(t){var n=t.target.result;e(n)},i.onblocked=function(){r(new sc(t,"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."))},i.onerror=function(e){var n=e.target.error;"VersionError"===n.name?r(new Bo(Uo.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")):r(new sc(t,n))},i.onupgradeneeded=function(t){Ao("SimpleDb",'Database "'+n.name+'" requires upgrade from version:',t.oldVersion);var e=t.target.result;n.On.createOrUpgrade(e,i.transaction,t.oldVersion,n.version).next((function(){Ao("SimpleDb","Database upgrade to version "+n.version+" complete")}))}}))]);case 1:e.db=r.sent(),r.label=2;case 2:return[2,(this.Qn&&(this.db.onversionchange=function(t){return n.Qn(t)}),this.db)]}}))}))},t.prototype.Kn=function(t){this.Qn=t,this.db&&(this.db.onversionchange=function(e){return t(e)})},t.prototype.runTransaction=function(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a,u,c;return o(this,(function(h){switch(h.label){case 0:i="readonly"===e,s=0,a=function(){var e,a,c,h,f;return o(this,(function(o){switch(o.label){case 0:++s,o.label=1;case 1:return o.trys.push([1,4,,5]),[4,u.Un(t)];case 2:return u.db=o.sent(),e=uc.open(u.db,t,i?"readonly":"readwrite",n),a=r(e).catch((function(t){return e.abort(t),rc.reject(t)})).Cn(),c={},a.catch((function(){})),[4,e.Wn];case 3:return[2,(c.value=(o.sent(),a),c)];case 4:return h=o.sent(),f="FirebaseError"!==h.name&&s<3,Ao("SimpleDb","Transaction failed with error:",h.message,"Retrying:",f),u.close(),f?[3,5]:[2,{value:Promise.reject(h)}];case 5:return[2]}}))},u=this,h.label=1;case 1:return[5,a()];case 2:if("object"==typeof(c=h.sent()))return[2,c.value];h.label=3;case 3:return[3,1];case 4:return[2]}}))}))},t.prototype.close=function(){this.db&&this.db.close(),this.db=void 0},t}(),oc=function(){function t(t){this.jn=t,this.Gn=!1,this.zn=null}return Object.defineProperty(t.prototype,"vn",{get:function(){return this.Gn},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"Hn",{get:function(){return this.zn},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cursor",{set:function(t){this.jn=t},enumerable:!1,configurable:!0}),t.prototype.done=function(){this.Gn=!0},t.prototype.Jn=function(t){this.zn=t},t.prototype.delete=function(){return hc(this.jn.delete())},t}(),sc=function(t){function n(e,n){var r=this;return(r=t.call(this,Uo.UNAVAILABLE,"IndexedDB transaction '"+e+"' failed: "+n)||this).name="IndexedDbTransactionError",r}return e(n,t),n}(Bo);function ac(t){return"IndexedDbTransactionError"===t.name}var uc=function(){function t(t,e){var n=this;this.action=t,this.transaction=e,this.aborted=!1,this.Yn=new ec,this.transaction.oncomplete=function(){n.Yn.resolve()},this.transaction.onabort=function(){e.error?n.Yn.reject(new sc(t,e.error)):n.Yn.resolve()},this.transaction.onerror=function(e){var r=lc(e.target.error);n.Yn.reject(new sc(t,r))}}return t.open=function(e,n,r,i){try{return new t(n,e.transaction(i,r))}catch(e){throw new sc(n,e)}},Object.defineProperty(t.prototype,"Wn",{get:function(){return this.Yn.promise},enumerable:!1,configurable:!0}),t.prototype.abort=function(t){t&&this.Yn.reject(t),this.aborted||(Ao("SimpleDb","Aborting transaction:",t?t.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort())},t.prototype.store=function(t){var e=this.transaction.objectStore(t);return new cc(e)},t}(),cc=function(){function t(t){this.store=t}return t.prototype.put=function(t,e){var n;return void 0!==e?(Ao("SimpleDb","PUT",this.store.name,t,e),n=this.store.put(e,t)):(Ao("SimpleDb","PUT",this.store.name,"<auto-key>",t),n=this.store.put(t)),hc(n)},t.prototype.add=function(t){return Ao("SimpleDb","ADD",this.store.name,t,t),hc(this.store.add(t))},t.prototype.get=function(t){var e=this;return hc(this.store.get(t)).next((function(n){return void 0===n&&(n=null),Ao("SimpleDb","GET",e.store.name,t,n),n}))},t.prototype.delete=function(t){return Ao("SimpleDb","DELETE",this.store.name,t),hc(this.store.delete(t))},t.prototype.count=function(){return Ao("SimpleDb","COUNT",this.store.name),hc(this.store.count())},t.prototype.Xn=function(t,e){var n=this.cursor(this.options(t,e)),r=[];return this.Zn(n,(function(t,e){r.push(e)})).next((function(){return r}))},t.prototype.ts=function(t,e){Ao("SimpleDb","DELETE ALL",this.store.name);var n=this.options(t,e);n.es=!1;var r=this.cursor(n);return this.Zn(r,(function(t,e,n){return n.delete()}))},t.prototype.ns=function(t,e){var n;e?n=t:(n={},e=t);var r=this.cursor(n);return this.Zn(r,e)},t.prototype.ss=function(t){var e=this.cursor({});return new rc((function(n,r){e.onerror=function(t){var e=lc(t.target.error);r(e)},e.onsuccess=function(e){var r=e.target.result;r?t(r.primaryKey,r.value).next((function(t){t?r.continue():n()})):n()}}))},t.prototype.Zn=function(t,e){var n=[];return new rc((function(r,i){t.onerror=function(t){i(t.target.error)},t.onsuccess=function(t){var i=t.target.result;if(i){var o=new oc(i),s=e(i.primaryKey,i.value,o);if(s instanceof rc){var a=s.catch((function(t){return o.done(),rc.reject(t)}));n.push(a)}o.vn?r():null===o.Hn?i.continue():i.continue(o.Hn)}else r()}})).next((function(){return rc.xn(n)}))},t.prototype.options=function(t,e){var n=void 0;return void 0!==t&&("string"==typeof t?n=t:e=t),{index:n,range:e}},t.prototype.cursor=function(t){var e="next";if(t.reverse&&(e="prev"),t.index){var n=this.store.index(t.index);return t.es?n.openKeyCursor(t.range,e):n.openCursor(t.range,e)}return this.store.openCursor(t.range,e)},t}();function hc(t){return new rc((function(e,n){t.onsuccess=function(t){var n=t.target.result;e(n)},t.onerror=function(t){var e=lc(t.target.error);n(e)}}))}var fc=!1;function lc(t){var e=ic.Mn(l());if(e>=12.2&&e<13){var n="An internal error was encountered in the Indexed Database server";if(t.message.indexOf(n)>=0){var r=new Bo("internal","IOS_INDEXEDDB_BUG1: IndexedDb has thrown '"+n+"'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");return fc||(fc=!0,setTimeout((function(){throw r}),0)),r}}return t}function pc(){return"undefined"!=typeof window?window:null}function dc(){return"undefined"!=typeof document?document:null}var vc=function(){function t(t,e,n,r,i){this.rs=t,this._n=e,this.os=n,this.op=r,this.cs=i,this.us=new ec,this.then=this.us.promise.then.bind(this.us.promise),this.us.promise.catch((function(t){}))}return t.hs=function(e,n,r,i,o){var s=new t(e,n,Date.now()+r,i,o);return s.start(r),s},t.prototype.start=function(t){var e=this;this.ls=setTimeout((function(){return e._s()}),t)},t.prototype.Vn=function(){return this._s()},t.prototype.cancel=function(t){null!==this.ls&&(this.clearTimeout(),this.us.reject(new Bo(Uo.CANCELLED,"Operation cancelled"+(t?": "+t:""))))},t.prototype._s=function(){var t=this;this.rs.fs((function(){return null!==t.ls?(t.clearTimeout(),t.op().then((function(e){return t.us.resolve(e)}))):Promise.resolve()}))},t.prototype.clearTimeout=function(){null!==this.ls&&(this.cs(this),clearTimeout(this.ls),this.ls=null)},t}(),yc=function(){function t(){var t=this;this.ds=Promise.resolve(),this.ws=[],this.Ts=!1,this.Es=[],this.Is=null,this.As=!1,this.Rs=[],this.Ps=new nc(this,"async_queue_retry"),this.gs=function(){var e=dc();e&&Ao("AsyncQueue","Visibility state changed to "+e.visibilityState),t.Ps.gn()};var e=dc();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.gs)}return Object.defineProperty(t.prototype,"Vs",{get:function(){return this.Ts},enumerable:!1,configurable:!0}),t.prototype.fs=function(t){this.enqueue(t)},t.prototype.ys=function(t){this.ps(),this.vs(t)},t.prototype.bs=function(){if(!this.Ts){this.Ts=!0;var t=dc();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.gs)}},t.prototype.enqueue=function(t){return this.ps(),this.Ts?new Promise((function(t){})):this.vs(t)},t.prototype.Ss=function(t){var e=this;this.fs((function(){return e.ws.push(t),e.Ds()}))},t.prototype.Ds=function(){return i(this,void 0,void 0,(function(){var t,e=this;return o(this,(function(n){switch(n.label){case 0:if(0===this.ws.length)return[3,5];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.ws[0]()];case 2:return n.sent(),this.ws.shift(),this.Ps.reset(),[3,4];case 3:if(!ac(t=n.sent()))throw t;return Ao("AsyncQueue","Operation failed with retryable error: "+t),[3,4];case 4:this.ws.length>0&&this.Ps.An((function(){return e.Ds()})),n.label=5;case 5:return[2]}}))}))},t.prototype.vs=function(t){var e=this,n=this.ds.then((function(){return e.As=!0,t().catch((function(t){throw e.Is=t,e.As=!1,_o("INTERNAL UNHANDLED ERROR: ",function(t){var e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t)),t})).then((function(t){return e.As=!1,t}))}));return this.ds=n,n},t.prototype.Pn=function(t,e,n){var r=this;this.ps(),this.Rs.indexOf(t)>-1&&(e=0);var i=vc.hs(this,t,e,n,(function(t){return r.Cs(t)}));return this.Es.push(i),i},t.prototype.ps=function(){this.Is&&No()},t.prototype.Ns=function(){},t.prototype.xs=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return[4,t=this.ds];case 1:e.sent(),e.label=2;case 2:if(t!==this.ds)return[3,0];e.label=3;case 3:return[2]}}))}))},t.prototype.Fs=function(t){for(var e=0,n=this.Es;e<n.length;e++)if(n[e]._n===t)return!0;return!1},t.prototype.Os=function(t){var e=this;return this.xs().then((function(){e.Es.sort((function(t,e){return t.os-e.os}));for(var n=0,r=e.Es;n<r.length;n++){var i=r[n];if(i.Vn(),"all"!==t&&i._n===t)break}return e.xs()}))},t.prototype.Ms=function(t){this.Rs.push(t)},t.prototype.Cs=function(t){var e=this.Es.indexOf(t);this.Es.splice(e,1)},t}();function gc(t,e){if(_o("AsyncQueue",e+": "+t),ac(t))return new Bo(Uo.UNAVAILABLE,e+": "+t);throw t}var mc=function(){this.ks=void 0,this.listeners=[]},bc=function(){this.queries=new jo((function(t){return Lu(t)}),Ru),this.onlineState="Unknown",this.$s=new Set};function wc(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:if(n=Co(t),r=e.query,i=!1,(s=n.queries.get(r))||(i=!0,s=new mc),!i)return[3,4];o.label=1;case 1:return o.trys.push([1,3,,4]),a=s,[4,n.Ls(r)];case 2:return a.ks=o.sent(),[3,4];case 3:return u=o.sent(),c=gc(u,"Initialization of query '"+Mu(e.query)+"' failed"),[2,void e.onError(c)];case 4:return n.queries.set(r,s),s.listeners.push(e),e.Bs(n.onlineState),s.ks&&e.qs(s.ks)&&_c(n),[2]}}))}))}function Ic(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a;return o(this,(function(o){return n=Co(t),r=e.query,i=!1,(s=n.queries.get(r))&&(a=s.listeners.indexOf(e))>=0&&(s.listeners.splice(a,1),i=0===s.listeners.length),i?[2,(n.queries.delete(r),n.Us(r))]:[2]}))}))}function Ec(t,e){for(var n=Co(t),r=!1,i=0,o=e;i<o.length;i++){var s=o[i],a=s.query,u=n.queries.get(a);if(u){for(var c=0,h=u.listeners;c<h.length;c++)h[c].qs(s)&&(r=!0);u.ks=s}}r&&_c(n)}function Ac(t,e,n){var r=Co(t),i=r.queries.get(e);if(i)for(var o=0,s=i.listeners;o<s.length;o++)s[o].onError(n);r.queries.delete(e)}function _c(t){t.$s.forEach((function(t){t.next()}))}var Tc=function(){function t(t,e,n){this.query=t,this.Qs=e,this.Ks=!1,this.Ws=null,this.onlineState="Unknown",this.options=n||{}}return t.prototype.qs=function(t){if(!this.options.includeMetadataChanges){for(var e=[],n=0,r=t.docChanges;n<r.length;n++){var i=r[n];3!==i.type&&e.push(i)}t=new Ss(t.query,t.docs,t.Ut,e,t.Qt,t.fromCache,t.Kt,!0)}var o=!1;return this.Ks?this.js(t)&&(this.Qs.next(t),o=!0):this.Gs(t,this.onlineState)&&(this.zs(t),o=!0),this.Ws=t,o},t.prototype.onError=function(t){this.Qs.error(t)},t.prototype.Bs=function(t){this.onlineState=t;var e=!1;return this.Ws&&!this.Ks&&this.Gs(this.Ws,t)&&(this.zs(this.Ws),e=!0),e},t.prototype.Gs=function(t,e){if(!t.fromCache)return!0;var n="Offline"!==e;return!(this.options.Hs&&n||t.docs.T()&&"Offline"!==e)},t.prototype.js=function(t){if(t.docChanges.length>0)return!0;var e=this.Ws&&this.Ws.hasPendingWrites!==t.hasPendingWrites;return!(!t.Kt&&!e)&&!0===this.options.includeMetadataChanges},t.prototype.zs=function(t){t=Ss.jt(t.query,t.docs,t.Qt,t.fromCache),this.Ks=!0,this.Qs.next(t)},t}(),Sc=function(){function t(t){this.uid=t}return t.prototype.Js=function(){return null!=this.uid},t.prototype.Ys=function(){return this.Js()?"uid:"+this.uid:"anonymous-user"},t.prototype.isEqual=function(t){return t.uid===this.uid},t}();Sc.UNAUTHENTICATED=new Sc(null),Sc.Xs=new Sc("google-credentials-uid"),Sc.Zs=new Sc("first-party-uid");var Nc=function(t,e){this.user=e,this.type="OAuth",this.ti={},this.ti.Authorization="Bearer "+t},kc=function(){function t(){this.ei=null}return t.prototype.getToken=function(){return Promise.resolve(null)},t.prototype.ni=function(){},t.prototype.si=function(t){this.ei=t,t(Sc.UNAUTHENTICATED)},t.prototype.ii=function(){this.ei=null},t}(),Cc=function(){function t(t){var e=this;this.ri=null,this.currentUser=Sc.UNAUTHENTICATED,this.oi=!1,this.ai=0,this.ei=null,this.forceRefresh=!1,this.ri=function(){e.ai++,e.currentUser=e.ci(),e.oi=!0,e.ei&&e.ei(e.currentUser)},this.ai=0,this.auth=t.getImmediate({optional:!0}),this.auth?this.auth.addAuthTokenListener(this.ri):(this.ri(null),t.get().then((function(t){e.auth=t,e.ri&&e.auth.addAuthTokenListener(e.ri)}),(function(){})))}return t.prototype.getToken=function(){var t=this,e=this.ai,n=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(n).then((function(n){return t.ai!==e?(Ao("FirebaseCredentialsProvider","getToken aborted due to token change."),t.getToken()):n?(ko("string"==typeof n.accessToken),new Nc(n.accessToken,t.currentUser)):null})):Promise.resolve(null)},t.prototype.ni=function(){this.forceRefresh=!0},t.prototype.si=function(t){this.ei=t,this.oi&&t(this.currentUser)},t.prototype.ii=function(){this.auth&&this.auth.removeAuthTokenListener(this.ri),this.ri=null,this.ei=null},t.prototype.ci=function(){var t=this.auth&&this.auth.getUid();return ko(null===t||"string"==typeof t),new Sc(t)},t}(),xc=function(){function t(t,e){this.ui=t,this.hi=e,this.type="FirstParty",this.user=Sc.Zs}return Object.defineProperty(t.prototype,"ti",{get:function(){var t={"X-Goog-AuthUser":this.hi},e=this.ui.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),t},enumerable:!1,configurable:!0}),t}(),Oc=function(){function t(t,e){this.ui=t,this.hi=e}return t.prototype.getToken=function(){return Promise.resolve(new xc(this.ui,this.hi))},t.prototype.si=function(t){t(Sc.Zs)},t.prototype.ii=function(){},t.prototype.ni=function(){},t}(),Dc=function(){function t(t,e,n,r){this.batchId=t,this.li=e,this.baseMutations=n,this.mutations=r}return t.prototype._i=function(t,e,n){for(var r=n.fi,i=0;i<this.mutations.length;i++){var o=this.mutations[i];o.key.isEqual(t)&&(e=eu(o,e,r[i]))}return e},t.prototype.di=function(t,e){for(var n=0,r=this.baseMutations;n<r.length;n++){var i=r[n];i.key.isEqual(t)&&(e=nu(i,e,e,this.li))}for(var o=e,s=0,a=this.mutations;s<a.length;s++){var u=a[s];u.key.isEqual(t)&&(e=nu(u,e,o,this.li))}return e},t.prototype.wi=function(t){var e=this,n=t;return this.mutations.forEach((function(r){var i=e.di(r.key,t.get(r.key));i&&(n=n.rt(r.key,i))})),n},t.prototype.keys=function(){return this.mutations.reduce((function(t,e){return t.add(e.key)}),Is())},t.prototype.isEqual=function(t){return this.batchId===t.batchId&&Po(this.mutations,t.mutations,(function(t,e){return iu(t,e)}))&&Po(this.baseMutations,t.baseMutations,(function(t,e){return iu(t,e)}))},t}(),Pc=function(){function t(t,e,n,r){this.batch=t,this.Ti=e,this.fi=n,this.Ei=r}return t.from=function(e,n,r){ko(e.mutations.length===r.length);for(var i=bs,o=e.mutations,s=0;s<o.length;s++)i=i.rt(o[s].key,r[s].version);return new t(e,n,r,i)},t}(),Rc=function(){function t(){this.Ii=new jo((function(t){return t.toString()}),(function(t,e){return t.isEqual(e)})),this.mi=!1}return t.prototype.Ai=function(t){var e=this.Ii.get(t);return e?e.readTime:qo.min()},t.prototype.Ri=function(t,e){this.Pi(),this.Ii.set(t.key,{gi:t,readTime:e})},t.prototype.Vi=function(t,e){void 0===e&&(e=null),this.Pi(),this.Ii.set(t,{gi:null,readTime:e})},t.prototype.yi=function(t,e){this.Pi();var n=this.Ii.get(e);return void 0!==n?rc.resolve(n.gi):this.pi(t,e)},t.prototype.getEntries=function(t,e){return this.vi(t,e)},t.prototype.apply=function(t){return this.Pi(),this.mi=!0,this.bi(t)},t.prototype.Pi=function(){},t}();function Lc(t){return new ia(t,!0)}function Mc(t){return function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=t,r=0,i=["next","error","complete"];r<i.length;r++){var o=i[r];if(o in n&&"function"==typeof n[o])return!0}return!1}(t)}var Vc="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.",jc=function(){function t(){this.Si=[]}return t.prototype.Di=function(t){this.Si.push(t)},t.prototype.Ci=function(){this.Si.forEach((function(t){return t()}))},t}(),Uc=function(){function t(t,e,n){this.Ni=t,this.xi=e,this.Fi=n}return t.prototype.Oi=function(t,e){var n=this;return this.xi.Mi(t,e).next((function(r){return n.ki(t,e,r)}))},t.prototype.ki=function(t,e,n){return this.Ni.yi(t,e).next((function(t){for(var r=0,i=n;r<i.length;r++)t=i[r].di(e,t);return t}))},t.prototype.$i=function(t,e,n){var r=ys();return e.forEach((function(t,e){for(var i=0,o=n;i<o.length;i++)e=o[i].di(t,e);r=r.rt(t,e)})),r},t.prototype.Li=function(t,e){var n=this;return this.Ni.getEntries(t,e).next((function(e){return n.Bi(t,e)}))},t.prototype.Bi=function(t,e){var n=this;return this.xi.qi(t,e).next((function(r){var i=n.$i(t,e,r),o=vs();return i.forEach((function(t,e){e||(e=new bu(t,qo.min())),o=o.rt(t,e)})),o}))},t.prototype.Ui=function(t,e,n){return function(t){return Wo.G(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Qi(t,e.path):ku(e)?this.Ki(t,e,n):this.Wi(t,e,n)},t.prototype.Qi=function(t,e){return this.Oi(t,new Wo(e)).next((function(t){var e=ms();return t instanceof mu&&(e=e.rt(t.key,t)),e}))},t.prototype.Ki=function(t,e,n){var r=this,i=e.collectionGroup,o=ms();return this.Fi.ji(t,i).next((function(s){return rc.forEach(s,(function(s){var a=function(t,e){return new Iu(e,null,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,s.child(i));return r.Wi(t,a,n).next((function(t){t.forEach((function(t,e){o=o.rt(t,e)}))}))})).next((function(){return o}))}))},t.prototype.Wi=function(t,e,n){var r,i,o=this;return this.Ni.Ui(t,e,n).next((function(n){return r=n,o.xi.Gi(t,e)})).next((function(e){return i=e,o.zi(t,i,r).next((function(t){r=t;for(var e=0,n=i;e<n.length;e++)for(var o=n[e],s=0,a=o.mutations;s<a.length;s++){var u=a[s],c=u.key,h=r.get(c),f=nu(u,h,h,o.li);r=f instanceof mu?r.rt(c,f):r.remove(c)}}))})).next((function(){return r.forEach((function(t,n){Vu(e,n)||(r=r.remove(t))})),r}))},t.prototype.zi=function(t,e,n){for(var r=Is(),i=0,o=e;i<o.length;i++)for(var s=0,a=o[i].mutations;s<a.length;s++){var u=a[s];u instanceof au&&null===n.get(u.key)&&(r=r.add(u.key))}var c=n;return this.Ni.getEntries(t,r).next((function(t){return t.forEach((function(t,e){null!==e&&e instanceof mu&&(c=c.rt(t,e))})),c}))},t}(),Bc=function(){function t(t,e,n,r){this.targetId=t,this.fromCache=e,this.Hi=n,this.Ji=r}return t.Yi=function(e,n){for(var r=Is(),i=Is(),o=0,s=n.docChanges;o<s.length;o++){var a=s[o];switch(a.type){case 0:r=r.add(a.doc.key);break;case 1:i=i.add(a.doc.key)}}return new t(e,n.fromCache,r,i)},t}(),Fc=function(){function t(t,e){var n=this;this.previousValue=t,e&&(e.Xi=function(t){return n.Zi(t)},this.tr=function(t){return e.er(t)})}return t.prototype.Zi=function(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue},t.prototype.next=function(){var t=++this.previousValue;return this.tr&&this.tr(t),t},t}();function qc(t,e){var n=t[0],r=t[1],i=e[0],o=e[1],s=Do(n,i);return 0===s?Do(r,o):s}Fc.nr=-1;var Gc=function(){function t(t){this.sr=t,this.buffer=new ls(qc),this.ir=0}return t.prototype.rr=function(){return++this.ir},t.prototype.ar=function(t){var e=[t,this.rr()];if(this.buffer.size<this.sr)this.buffer=this.buffer.add(e);else{var n=this.buffer.last();qc(e,n)<0&&(this.buffer=this.buffer.delete(n).add(e))}},Object.defineProperty(t.prototype,"maxValue",{get:function(){return this.buffer.last()[0]},enumerable:!1,configurable:!0}),t}(),zc={cr:!1,ur:0,hr:0,lr:0},Kc=function(){function t(t,e,n){this._r=t,this.dr=e,this.wr=n}return t.Tr=function(e){return new t(e,t.Er,t.Ir)},t}();Kc.Er=10,Kc.Ir=1e3,Kc.mr=new Kc(41943040,Kc.Er,Kc.Ir),Kc.Ar=new Kc(-1,0,0);var Hc=function(){function t(t,e){this.Rr=t,this.rs=e,this.Pr=!1,this.gr=null}return t.prototype.start=function(t){-1!==this.Rr.params._r&&this.Vr(t)},t.prototype.stop=function(){this.gr&&(this.gr.cancel(),this.gr=null)},Object.defineProperty(t.prototype,"yr",{get:function(){return null!==this.gr},enumerable:!1,configurable:!0}),t.prototype.Vr=function(t){var e=this,n=this.Pr?3e5:6e4;Ao("LruGarbageCollector","Garbage collection scheduled in "+n+"ms"),this.gr=this.rs.Pn("lru_garbage_collection",n,(function(){return i(e,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:this.gr=null,this.Pr=!0,n.label=1;case 1:return n.trys.push([1,3,,7]),[4,t.pr(this.Rr)];case 2:return n.sent(),[3,7];case 3:return ac(e=n.sent())?(Ao("LruGarbageCollector","Ignoring IndexedDB error during garbage collection: ",e),[3,6]):[3,4];case 4:return[4,wf(e)];case 5:n.sent(),n.label=6;case 6:return[3,7];case 7:return[4,this.Vr(t)];case 8:return n.sent(),[2]}}))}))}))},t}(),Wc=function(){function t(t,e){this.vr=t,this.params=e}return t.prototype.br=function(t,e){return this.vr.Sr(t).next((function(t){return Math.floor(e/100*t)}))},t.prototype.Dr=function(t,e){var n=this;if(0===e)return rc.resolve(Fc.nr);var r=new Gc(e);return this.vr.De(t,(function(t){return r.ar(t.sequenceNumber)})).next((function(){return n.vr.Cr(t,(function(t){return r.ar(t)}))})).next((function(){return r.maxValue}))},t.prototype.Nr=function(t,e,n){return this.vr.Nr(t,e,n)},t.prototype.Fr=function(t,e){return this.vr.Fr(t,e)},t.prototype.Or=function(t,e){var n=this;return-1===this.params._r?(Ao("LruGarbageCollector","Garbage collection skipped; disabled"),rc.resolve(zc)):this.Mr(t).next((function(r){return r<n.params._r?(Ao("LruGarbageCollector","Garbage collection skipped; Cache size "+r+" is lower than threshold "+n.params._r),zc):n.kr(t,e)}))},t.prototype.Mr=function(t){return this.vr.Mr(t)},t.prototype.kr=function(t,e){var n,r,i,o,s,a,u,c=this,h=Date.now();return this.br(t,this.params.dr).next((function(e){return e>c.params.wr?(Ao("LruGarbageCollector","Capping sequence numbers to collect down to the maximum of "+c.params.wr+" from "+e),r=c.params.wr):r=e,o=Date.now(),c.Dr(t,r)})).next((function(r){return n=r,s=Date.now(),c.Nr(t,n,e)})).next((function(e){return i=e,a=Date.now(),c.Fr(t,n)})).next((function(t){return u=Date.now(),Eo()<=P.DEBUG&&Ao("LruGarbageCollector","LRU Garbage Collection\n\tCounted targets in "+(o-h)+"ms\n\tDetermined least recently used "+r+" in "+(s-o)+"ms\n\tRemoved "+i+" targets in "+(a-s)+"ms\n\tRemoved "+t+" documents in "+(u-a)+"ms\nTotal Duration: "+(u-h)+"ms"),rc.resolve({cr:!0,ur:r,hr:i,lr:t})}))},t}();function Xc(t){for(var e="",n=0;n<t.length;n++)e.length>0&&(e=Jc(e)),e=Yc(t.get(n),e);return Jc(e)}function Yc(t,e){for(var n=e,r=t.length,i=0;i<r;i++){var o=t.charAt(i);switch(o){case"\0":n+="";break;case"":n+="";break;default:n+=o}}return n}function Jc(t){return t+""}function Qc(t){var e=t.length;if(ko(e>=2),2===e)return ko(""===t.charAt(0)&&""===t.charAt(1)),zo.$();for(var n=e-2,r=[],i="",o=0;o<e;){var s=t.indexOf("",o);switch((s<0||s>n)&&No(),t.charAt(s+1)){case"":var a=t.substring(o,s),u=void 0;0===i.length?u=a:(u=i+=a,i=""),r.push(u);break;case"":i+=t.substring(o,s),i+="\0";break;case"":i+=t.substring(o,s+1);break;default:No()}o=s+2}return new zo(r)}var $c=function(t){this.$r=t};function Zc(t,e){if(e.document)return function(t,e,n){var r=va(t,e.name),i=fa(e.updateTime),o=new du({mapValue:{fields:e.fields}});return new mu(r,i,o,{hasCommittedMutations:!!n})}(t.$r,e.document,!!e.hasCommittedMutations);if(e.noDocument){var n=Wo.H(e.noDocument.path),r=ih(e.noDocument.readTime);return new bu(n,r,{hasCommittedMutations:!!e.hasCommittedMutations})}if(e.unknownDocument){var i=Wo.H(e.unknownDocument.path),o=ih(e.unknownDocument.version);return new wu(i,o)}return No()}function th(t,e,n){var r=eh(n),i=e.key.path.S().O();if(e instanceof mu){var o=function(t,e){return{name:da(t,e.key),fields:e.sn().mapValue.fields,updateTime:ua(t,e.version.P())}}(t.$r,e),s=e.hasCommittedMutations;return new Oh(null,null,o,s,r,i)}if(e instanceof bu){var a=e.key.path.O(),u=rh(e.version),c=e.hasCommittedMutations;return new Oh(null,new Ch(a,u),null,c,r,i)}if(e instanceof wu){var h=e.key.path.O(),f=rh(e.version);return new Oh(new xh(h,f),null,null,!0,r,i)}return No()}function eh(t){var e=t.P();return[e.seconds,e.nanoseconds]}function nh(t){var e=new Fo(t[0],t[1]);return qo.m(e)}function rh(t){var e=t.P();return new _h(e.seconds,e.nanoseconds)}function ih(t){var e=new Fo(t.seconds,t.nanoseconds);return qo.m(e)}function oh(t,e){var n=(e.baseMutations||[]).map((function(e){return Ea(t.$r,e)})),r=e.mutations.map((function(e){return Ea(t.$r,e)})),i=Fo.fromMillis(e.localWriteTimeMs);return new Dc(e.batchId,i,n,r)}function sh(t){var e,n,r=ih(t.readTime),i=void 0!==t.lastLimboFreeSnapshotVersion?ih(t.lastLimboFreeSnapshotVersion):qo.min();return void 0!==t.query.documents?(ko(1===(n=t.query).documents.length),e=xu(Au(ga(n.documents[0])))):e=function(t){return xu(Ta(t))}(t.query),new os(e,t.targetId,0,t.lastListenSequenceNumber,r,i,ns.fromBase64String(t.resumeToken))}function ah(t,e){var n,r=rh(e.et),i=rh(e.lastLimboFreeSnapshotVersion);n=es(e.target)?Aa(t.$r,e.target):_a(t.$r,e.target);var o=e.resumeToken.toBase64();return new Ph(e.targetId,Zo(e.target),r,o,e.sequenceNumber,i,n)}function uh(t){var e=Ta({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?Ou(e,e.limit,"L"):e}var ch=function(){function t(t,e,n,r){this.userId=t,this.serializer=e,this.Fi=n,this.Lr=r,this.Br={}}return t.qr=function(e,n,r,i){return ko(""!==e.uid),new t(e.Js()?e.uid:"",n,r,i)},t.prototype.Ur=function(t){var e=!0,n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return lh(t).ns({index:Nh.userMutationsIndex,range:n},(function(t,n,r){e=!1,r.done()})).next((function(){return e}))},t.prototype.Qr=function(t,e,n,r){var i=this,o=ph(t),s=lh(t);return s.add({}).next((function(a){ko("number"==typeof a);for(var u=new Dc(a,e,n,r),c=function(t,e,n){var r=n.baseMutations.map((function(e){return Ia(t.$r,e)})),i=n.mutations.map((function(e){return Ia(t.$r,e)}));return new Nh(e,n.batchId,n.li.toMillis(),r,i)}(i.serializer,i.userId,u),h=[],f=new ls((function(t,e){return Do(t.M(),e.M())})),l=0,p=r;l<p.length;l++){var d=p[l],v=kh.key(i.userId,d.key.path,a);f=f.add(d.key.path.S()),h.push(s.put(c)),h.push(o.put(v,kh.PLACEHOLDER))}return f.forEach((function(e){h.push(i.Fi.Kr(t,e))})),t.Di((function(){i.Br[a]=u.keys()})),rc.xn(h).next((function(){return u}))}))},t.prototype.Wr=function(t,e){var n=this;return lh(t).get(e).next((function(t){return t?(ko(t.userId===n.userId),oh(n.serializer,t)):null}))},t.prototype.jr=function(t,e){var n=this;return this.Br[e]?rc.resolve(this.Br[e]):this.Wr(t,e).next((function(t){if(t){var r=t.keys();return n.Br[e]=r,r}return null}))},t.prototype.Gr=function(t,e){var n=this,r=e+1,i=IDBKeyRange.lowerBound([this.userId,r]),o=null;return lh(t).ns({index:Nh.userMutationsIndex,range:i},(function(t,e,i){e.userId===n.userId&&(ko(e.batchId>=r),o=oh(n.serializer,e)),i.done()})).next((function(){return o}))},t.prototype.zr=function(t){var e=IDBKeyRange.upperBound([this.userId,Number.POSITIVE_INFINITY]),n=-1;return lh(t).ns({index:Nh.userMutationsIndex,range:e,reverse:!0},(function(t,e,r){n=e.batchId,r.done()})).next((function(){return n}))},t.prototype.Hr=function(t){var e=this,n=IDBKeyRange.bound([this.userId,-1],[this.userId,Number.POSITIVE_INFINITY]);return lh(t).Xn(Nh.userMutationsIndex,n).next((function(t){return t.map((function(t){return oh(e.serializer,t)}))}))},t.prototype.Mi=function(t,e){var n=this,r=kh.prefixForPath(this.userId,e.path),i=IDBKeyRange.lowerBound(r),o=[];return ph(t).ns({range:i},(function(r,i,s){var a=r[0],u=r[1],c=r[2],h=Qc(u);if(a===n.userId&&e.path.isEqual(h))return lh(t).get(c).next((function(t){if(!t)throw No();ko(t.userId===n.userId),o.push(oh(n.serializer,t))}));s.done()})).next((function(){return o}))},t.prototype.qi=function(t,e){var n=this,r=new ls(Do),i=[];return e.forEach((function(e){var o=kh.prefixForPath(n.userId,e.path),s=IDBKeyRange.lowerBound(o),a=ph(t).ns({range:s},(function(t,i,o){var s=t[0],a=t[1],u=t[2],c=Qc(a);s===n.userId&&e.path.isEqual(c)?r=r.add(u):o.done()}));i.push(a)})),rc.xn(i).next((function(){return n.Jr(t,r)}))},t.prototype.Gi=function(t,e){var n=this,r=e.path,i=r.length+1,o=kh.prefixForPath(this.userId,r),s=IDBKeyRange.lowerBound(o),a=new ls(Do);return ph(t).ns({range:s},(function(t,e,o){var s=t[0],u=t[1],c=t[2],h=Qc(u);s===n.userId&&r.N(h)?h.length===i&&(a=a.add(c)):o.done()})).next((function(){return n.Jr(t,a)}))},t.prototype.Jr=function(t,e){var n=this,r=[],i=[];return e.forEach((function(e){i.push(lh(t).get(e).next((function(t){if(null===t)throw No();ko(t.userId===n.userId),r.push(oh(n.serializer,t))})))})),rc.xn(i).next((function(){return r}))},t.prototype.Yr=function(t,e){var n=this;return fh(t.Xr,this.userId,e).next((function(r){return t.Di((function(){n.Zr(e.batchId)})),rc.forEach(r,(function(e){return n.Lr.eo(t,e)}))}))},t.prototype.Zr=function(t){delete this.Br[t]},t.prototype.no=function(t){var e=this;return this.Ur(t).next((function(n){if(!n)return rc.resolve();var r=IDBKeyRange.lowerBound(kh.prefixForUser(e.userId)),i=[];return ph(t).ns({range:r},(function(t,n,r){if(t[0]===e.userId){var o=Qc(t[1]);i.push(o)}else r.done()})).next((function(){ko(0===i.length)}))}))},t.prototype.so=function(t,e){return hh(t,this.userId,e)},t.prototype.io=function(t){var e=this;return dh(t).get(this.userId).next((function(t){return t||new Sh(e.userId,-1,"")}))},t}();function hh(t,e,n){var r=kh.prefixForPath(e,n.path),i=r[1],o=IDBKeyRange.lowerBound(r),s=!1;return ph(t).ns({range:o,es:!0},(function(t,n,r){var o=t[0],a=t[1];t[2],o===e&&a===i&&(s=!0),r.done()})).next((function(){return s}))}function fh(t,e,n){var r=t.store(Nh.store),i=t.store(kh.store),o=[],s=IDBKeyRange.only(n.batchId),a=0,u=r.ns({range:s},(function(t,e,n){return a++,n.delete()}));o.push(u.next((function(){ko(1===a)})));for(var c=[],h=0,f=n.mutations;h<f.length;h++){var l=f[h],p=kh.key(e,l.key.path,n.batchId);o.push(i.delete(p)),c.push(l.key)}return rc.xn(o).next((function(){return c}))}function lh(t){return tf.qn(t,Nh.store)}function ph(t){return tf.qn(t,kh.store)}function dh(t){return tf.qn(t,Sh.store)}var vh=function(){function t(t,e){this.serializer=t,this.Fi=e}return t.prototype.Ri=function(t,e,n){return mh(t).put(bh(e),n)},t.prototype.Vi=function(t,e){var n=mh(t),r=bh(e);return n.delete(r)},t.prototype.updateMetadata=function(t,e){var n=this;return this.getMetadata(t).next((function(r){return r.byteSize+=e,n.ro(t,r)}))},t.prototype.yi=function(t,e){var n=this;return mh(t).get(bh(e)).next((function(t){return n.oo(t)}))},t.prototype.ao=function(t,e){var n=this;return mh(t).get(bh(e)).next((function(t){var e=n.oo(t);return e?{gi:e,size:wh(t)}:null}))},t.prototype.getEntries=function(t,e){var n=this,r=ys();return this.co(t,e,(function(t,e){var i=n.oo(e);r=r.rt(t,i)})).next((function(){return r}))},t.prototype.uo=function(t,e){var n=this,r=ys(),i=new cs(Wo.V);return this.co(t,e,(function(t,e){var o=n.oo(e);o?(r=r.rt(t,o),i=i.rt(t,wh(e))):(r=r.rt(t,null),i=i.rt(t,0))})).next((function(){return{ho:r,lo:i}}))},t.prototype.co=function(t,e,n){if(e.T())return rc.resolve();var r=IDBKeyRange.bound(e.first().path.O(),e.last().path.O()),i=e.lt(),o=i.Et();return mh(t).ns({range:r},(function(t,e,r){for(var s=Wo.H(t);o&&Wo.V(o,s)<0;)n(o,null),o=i.Et();o&&o.isEqual(s)&&(n(o,e),o=i.It()?i.Et():null),o?r.Jn(o.path.O()):r.done()})).next((function(){for(;o;)n(o,null),o=i.It()?i.Et():null}))},t.prototype.Ui=function(t,e,n){var r=this,i=ms(),o=e.path.length+1,s={};if(n.isEqual(qo.min())){var a=e.path.O();s.range=IDBKeyRange.lowerBound(a)}else{var u=e.path.O(),c=eh(n);s.range=IDBKeyRange.lowerBound([u,c],!0),s.index=Oh.collectionReadTimeIndex}return mh(t).ns(s,(function(t,n,s){if(t.length===o){var a=Zc(r.serializer,n);e.path.N(a.key.path)?a instanceof mu&&Vu(e,a)&&(i=i.rt(a.key,a)):s.done()}})).next((function(){return i}))},t.prototype._o=function(t){return new yh(this,!!t&&t.fo)},t.prototype.wo=function(t){return this.getMetadata(t).next((function(t){return t.byteSize}))},t.prototype.getMetadata=function(t){return gh(t).get(Dh.key).next((function(t){return ko(!!t),t}))},t.prototype.ro=function(t,e){return gh(t).put(Dh.key,e)},t.prototype.oo=function(t){if(t){var e=Zc(this.serializer,t);return e instanceof bu&&e.version.isEqual(qo.min())?null:e}return null},t}(),yh=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).To=e,r.fo=n,r.Eo=new jo((function(t){return t.toString()}),(function(t,e){return t.isEqual(e)})),r}return e(n,t),n.prototype.bi=function(t){var e=this,n=[],r=0,i=new ls((function(t,e){return Do(t.M(),e.M())}));return this.Ii.forEach((function(o,s){var a=e.Eo.get(o);if(s.gi){var u=th(e.To.serializer,s.gi,e.Ai(o));i=i.add(o.path.S());var c=wh(u);r+=c-a,n.push(e.To.Ri(t,o,u))}else if(r-=a,e.fo){var h=th(e.To.serializer,new bu(o,qo.min()),e.Ai(o));n.push(e.To.Ri(t,o,h))}else n.push(e.To.Vi(t,o))})),i.forEach((function(r){n.push(e.To.Fi.Kr(t,r))})),n.push(this.To.updateMetadata(t,r)),rc.xn(n)},n.prototype.pi=function(t,e){var n=this;return this.To.ao(t,e).next((function(t){return null===t?(n.Eo.set(e,0),null):(n.Eo.set(e,t.size),t.gi)}))},n.prototype.vi=function(t,e){var n=this;return this.To.uo(t,e).next((function(t){var e=t.ho;return t.lo.forEach((function(t,e){n.Eo.set(t,e)})),e}))},n}(Rc);function gh(t){return tf.qn(t,Dh.store)}function mh(t){return tf.qn(t,Oh.store)}function bh(t){return t.path.O()}function wh(t){var e;if(t.document)e=t.document;else if(t.unknownDocument)e=t.unknownDocument;else{if(!t.noDocument)throw No();e=t.noDocument}return JSON.stringify(e).length}var Ih=function(){function t(){this.Io=new Eh}return t.prototype.Kr=function(t,e){return this.Io.add(e),rc.resolve()},t.prototype.ji=function(t,e){return rc.resolve(this.Io.getEntries(e))},t}(),Eh=function(){function t(){this.index={}}return t.prototype.add=function(t){var e=t.C(),n=t.S(),r=this.index[e]||new ls(zo.V),i=!r.has(n);return this.index[e]=r.add(n),i},t.prototype.has=function(t){var e=t.C(),n=t.S(),r=this.index[e];return r&&r.has(n)},t.prototype.getEntries=function(t){return(this.index[t]||new ls(zo.V)).O()},t}(),Ah=function(){function t(t){this.serializer=t}return t.prototype.createOrUpgrade=function(t,e,n,r){var i=this;ko(n<r&&n>=0&&r<=11);var o=new uc("createOrUpgrade",e);n<1&&r>=1&&(function(t){t.createObjectStore(Th.store)}(t),function(t){t.createObjectStore(Sh.store,{keyPath:Sh.keyPath}),t.createObjectStore(Nh.store,{keyPath:Nh.keyPath,autoIncrement:!0}).createIndex(Nh.userMutationsIndex,Nh.userMutationsKeyPath,{unique:!0}),t.createObjectStore(kh.store)}(t),Vh(t),function(t){t.createObjectStore(Oh.store)}(t));var s=rc.resolve();return n<3&&r>=3&&(0!==n&&(function(t){t.deleteObjectStore(Rh.store),t.deleteObjectStore(Ph.store),t.deleteObjectStore(Lh.store)}(t),Vh(t)),s=s.next((function(){return function(t){var e=t.store(Lh.store),n=new Lh(0,0,qo.min().P(),0);return e.put(Lh.key,n)}(o)}))),n<4&&r>=4&&(0!==n&&(s=s.next((function(){return function(t,e){return e.store(Nh.store).Xn().next((function(n){t.deleteObjectStore(Nh.store),t.createObjectStore(Nh.store,{keyPath:Nh.keyPath,autoIncrement:!0}).createIndex(Nh.userMutationsIndex,Nh.userMutationsKeyPath,{unique:!0});var r=e.store(Nh.store),i=n.map((function(t){return r.put(t)}));return rc.xn(i)}))}(t,o)}))),s=s.next((function(){!function(t){t.createObjectStore(jh.store,{keyPath:jh.keyPath})}(t)}))),n<5&&r>=5&&(s=s.next((function(){return i.removeAcknowledgedMutations(o)}))),n<6&&r>=6&&(s=s.next((function(){return function(t){t.createObjectStore(Dh.store)}(t),i.addDocumentGlobal(o)}))),n<7&&r>=7&&(s=s.next((function(){return i.ensureSequenceNumbers(o)}))),n<8&&r>=8&&(s=s.next((function(){return i.createCollectionParentIndex(t,o)}))),n<9&&r>=9&&(s=s.next((function(){!function(t){t.objectStoreNames.contains("remoteDocumentChanges")&&t.deleteObjectStore("remoteDocumentChanges")}(t),function(t){var e=t.objectStore(Oh.store);e.createIndex(Oh.readTimeIndex,Oh.readTimeIndexPath,{unique:!1}),e.createIndex(Oh.collectionReadTimeIndex,Oh.collectionReadTimeIndexPath,{unique:!1})}(e)}))),n<10&&r>=10&&(s=s.next((function(){return i.rewriteCanonicalIds(o)}))),n<11&&r>=11&&(s=s.next((function(){!function(t){t.createObjectStore(Uh.store,{keyPath:Uh.keyPath})}(t),function(t){t.createObjectStore(Bh.store,{keyPath:Bh.keyPath})}(t)}))),s},t.prototype.addDocumentGlobal=function(t){var e=0;return t.store(Oh.store).ns((function(t,n){e+=wh(n)})).next((function(){var n=new Dh(e);return t.store(Dh.store).put(Dh.key,n)}))},t.prototype.removeAcknowledgedMutations=function(t){var e=this,n=t.store(Sh.store),r=t.store(Nh.store);return n.Xn().next((function(n){return rc.forEach(n,(function(n){var i=IDBKeyRange.bound([n.userId,-1],[n.userId,n.lastAcknowledgedBatchId]);return r.Xn(Nh.userMutationsIndex,i).next((function(r){return rc.forEach(r,(function(r){ko(r.userId===n.userId);var i=oh(e.serializer,r);return fh(t,n.userId,i).next((function(){}))}))}))}))}))},t.prototype.ensureSequenceNumbers=function(t){var e=t.store(Rh.store),n=t.store(Oh.store);return t.store(Lh.store).get(Lh.key).next((function(t){var r=[];return n.ns((function(n,i){var o=new zo(n),s=function(t){return[0,Xc(t)]}(o);r.push(e.get(s).next((function(n){return n?rc.resolve():function(n){return e.put(new Rh(0,Xc(n),t.highestListenSequenceNumber))}(o)})))})).next((function(){return rc.xn(r)}))}))},t.prototype.createCollectionParentIndex=function(t,e){t.createObjectStore(Mh.store,{keyPath:Mh.keyPath});var n=e.store(Mh.store),r=new Eh,i=function(t){if(r.add(t)){var e=t.C(),i=t.S();return n.put({collectionId:e,parent:Xc(i)})}};return e.store(Oh.store).ns({es:!0},(function(t,e){var n=new zo(t);return i(n.S())})).next((function(){return e.store(kh.store).ns({es:!0},(function(t,e){t[0];var n=t[1],r=(t[2],Qc(n));return i(r.S())}))}))},t.prototype.rewriteCanonicalIds=function(t){var e=this,n=t.store(Ph.store);return n.ns((function(t,r){var i=sh(r),o=ah(e.serializer,i);return n.put(o)}))},t}(),_h=function(t,e){this.seconds=t,this.nanoseconds=e},Th=function(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n};Th.store="owner",Th.key="owner";var Sh=function(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n};Sh.store="mutationQueues",Sh.keyPath="userId";var Nh=function(t,e,n,r,i){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=r,this.mutations=i};Nh.store="mutations",Nh.keyPath="batchId",Nh.userMutationsIndex="userMutationsIndex",Nh.userMutationsKeyPath=["userId","batchId"];var kh=function(){function t(){}return t.prefixForUser=function(t){return[t]},t.prefixForPath=function(t,e){return[t,Xc(e)]},t.key=function(t,e,n){return[t,Xc(e),n]},t}();kh.store="documentMutations",kh.PLACEHOLDER=new kh;var Ch=function(t,e){this.path=t,this.readTime=e},xh=function(t,e){this.path=t,this.version=e},Oh=function(t,e,n,r,i,o){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r,this.readTime=i,this.parentPath=o};Oh.store="remoteDocuments",Oh.readTimeIndex="readTimeIndex",Oh.readTimeIndexPath="readTime",Oh.collectionReadTimeIndex="collectionReadTimeIndex",Oh.collectionReadTimeIndexPath=["parentPath","readTime"];var Dh=function(t){this.byteSize=t};Dh.store="remoteDocumentGlobal",Dh.key="remoteDocumentGlobalKey";var Ph=function(t,e,n,r,i,o,s){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=o,this.query=s};Ph.store="targets",Ph.keyPath="targetId",Ph.queryTargetsIndexName="queryTargetsIndex",Ph.queryTargetsKeyPath=["canonicalId","targetId"];var Rh=function(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n};Rh.store="targetDocuments",Rh.keyPath=["targetId","path"],Rh.documentTargetsIndex="documentTargetsIndex",Rh.documentTargetsKeyPath=["path","targetId"];var Lh=function(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r};Lh.key="targetGlobalKey",Lh.store="targetGlobal";var Mh=function(t,e){this.collectionId=t,this.parent=e};function Vh(t){t.createObjectStore(Rh.store,{keyPath:Rh.keyPath}).createIndex(Rh.documentTargetsIndex,Rh.documentTargetsKeyPath,{unique:!0}),t.createObjectStore(Ph.store,{keyPath:Ph.keyPath}).createIndex(Ph.queryTargetsIndexName,Ph.queryTargetsKeyPath,{unique:!0}),t.createObjectStore(Lh.store)}Mh.store="collectionParents",Mh.keyPath=["collectionId","parent"];var jh=function(t,e,n,r){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r};jh.store="clientMetadata",jh.keyPath="clientId";var Uh=function(t,e,n){this.bundleId=t,this.createTime=e,this.version=n};Uh.store="bundles",Uh.keyPath="bundleId";var Bh=function(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n};Bh.store="namedQueries",Bh.keyPath="name";var Fh=c(c(c(c([Sh.store,Nh.store,kh.store,Oh.store,Ph.store,Th.store,Lh.store,Rh.store],[jh.store]),[Dh.store]),[Mh.store]),[Uh.store,Bh.store]),qh=function(){function t(t){this.serializer=t}return t.prototype.mo=function(t,e){return Gh(t).get(e).next((function(t){if(t)return{id:(e=t).bundleId,createTime:ih(e.createTime),version:e.version};var e}))},t.prototype.Ao=function(t,e){return Gh(t).put({bundleId:(n=e).id,createTime:rh(fa(n.createTime)),version:n.version});var n},t.prototype.Ro=function(t,e){return zh(t).get(e).next((function(t){if(t)return{name:(e=t).name,query:uh(e.bundledQuery),readTime:ih(e.readTime)};var e}))},t.prototype.Po=function(t,e){return zh(t).put(function(t){return{name:t.name,readTime:rh(fa(t.readTime)),bundledQuery:t.bundledQuery}}(e))},t}();function Gh(t){return tf.qn(t,Uh.store)}function zh(t){return tf.qn(t,Bh.store)}var Kh=function(){function t(){this.Vo=new Eh}return t.prototype.Kr=function(t,e){var n=this;if(!this.Vo.has(e)){var r=e.C(),i=e.S();t.Di((function(){n.Vo.add(e)}));var o={collectionId:r,parent:Xc(i)};return Hh(t).put(o)}return rc.resolve()},t.prototype.ji=function(t,e){var n=[],r=IDBKeyRange.bound([e,""],[Ro(e),""],!1,!0);return Hh(t).Xn(r).next((function(t){for(var r=0,i=t;r<i.length;r++){var o=i[r];if(o.collectionId!==e)break;n.push(Qc(o.parent))}return n}))},t}();function Hh(t){return tf.qn(t,Mh.store)}var Wh=function(){function t(t){this.yo=t}return t.prototype.next=function(){return this.yo+=2,this.yo},t.po=function(){return new t(0)},t.vo=function(){return new t(-1)},t}(),Xh=function(){function t(t,e){this.Lr=t,this.serializer=e}return t.prototype.bo=function(t){var e=this;return this.So(t).next((function(n){var r=new Wh(n.highestTargetId);return n.highestTargetId=r.next(),e.Do(t,n).next((function(){return n.highestTargetId}))}))},t.prototype.Co=function(t){return this.So(t).next((function(t){return qo.m(new Fo(t.lastRemoteSnapshotVersion.seconds,t.lastRemoteSnapshotVersion.nanoseconds))}))},t.prototype.No=function(t){return this.So(t).next((function(t){return t.highestListenSequenceNumber}))},t.prototype.xo=function(t,e,n){var r=this;return this.So(t).next((function(i){return i.highestListenSequenceNumber=e,n&&(i.lastRemoteSnapshotVersion=n.P()),e>i.highestListenSequenceNumber&&(i.highestListenSequenceNumber=e),r.Do(t,i)}))},t.prototype.Fo=function(t,e){var n=this;return this.Oo(t,e).next((function(){return n.So(t).next((function(r){return r.targetCount+=1,n.Mo(e,r),n.Do(t,r)}))}))},t.prototype.ko=function(t,e){return this.Oo(t,e)},t.prototype.$o=function(t,e){var n=this;return this.Lo(t,e.targetId).next((function(){return Yh(t).delete(e.targetId)})).next((function(){return n.So(t)})).next((function(e){return ko(e.targetCount>0),e.targetCount-=1,n.Do(t,e)}))},t.prototype.Nr=function(t,e,n){var r=this,i=0,o=[];return Yh(t).ns((function(s,a){var u=sh(a);u.sequenceNumber<=e&&null===n.get(u.targetId)&&(i++,o.push(r.$o(t,u)))})).next((function(){return rc.xn(o)})).next((function(){return i}))},t.prototype.De=function(t,e){return Yh(t).ns((function(t,n){var r=sh(n);e(r)}))},t.prototype.So=function(t){return Jh(t).get(Lh.key).next((function(t){return ko(null!==t),t}))},t.prototype.Do=function(t,e){return Jh(t).put(Lh.key,e)},t.prototype.Oo=function(t,e){return Yh(t).put(ah(this.serializer,e))},t.prototype.Mo=function(t,e){var n=!1;return t.targetId>e.highestTargetId&&(e.highestTargetId=t.targetId,n=!0),t.sequenceNumber>e.highestListenSequenceNumber&&(e.highestListenSequenceNumber=t.sequenceNumber,n=!0),n},t.prototype.Bo=function(t){return this.So(t).next((function(t){return t.targetCount}))},t.prototype.qo=function(t,e){var n=Zo(e),r=IDBKeyRange.bound([n,Number.NEGATIVE_INFINITY],[n,Number.POSITIVE_INFINITY]),i=null;return Yh(t).ns({range:r,index:Ph.queryTargetsIndexName},(function(t,n,r){var o=sh(n);ts(e,o.target)&&(i=o,r.done())})).next((function(){return i}))},t.prototype.Uo=function(t,e,n){var r=this,i=[],o=Qh(t);return e.forEach((function(e){var s=Xc(e.path);i.push(o.put(new Rh(n,s))),i.push(r.Lr.Qo(t,n,e))})),rc.xn(i)},t.prototype.Ko=function(t,e,n){var r=this,i=Qh(t);return rc.forEach(e,(function(e){var o=Xc(e.path);return rc.xn([i.delete([n,o]),r.Lr.Wo(t,n,e)])}))},t.prototype.Lo=function(t,e){var n=Qh(t),r=IDBKeyRange.bound([e],[e+1],!1,!0);return n.delete(r)},t.prototype.jo=function(t,e){var n=IDBKeyRange.bound([e],[e+1],!1,!0),r=Qh(t),i=Is();return r.ns({range:n,es:!0},(function(t,e,n){var r=Qc(t[1]),o=new Wo(r);i=i.add(o)})).next((function(){return i}))},t.prototype.so=function(t,e){var n=Xc(e.path),r=IDBKeyRange.bound([n],[Ro(n)],!1,!0),i=0;return Qh(t).ns({index:Rh.documentTargetsIndex,es:!0,range:r},(function(t,e,n){var r=t[0];t[1],0!==r&&(i++,n.done())})).next((function(){return i>0}))},t.prototype.qe=function(t,e){return Yh(t).get(e).next((function(t){return t?sh(t):null}))},t}();function Yh(t){return tf.qn(t,Ph.store)}function Jh(t){return tf.qn(t,Lh.store)}function Qh(t){return tf.qn(t,Rh.store)}var $h="Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.",Zh=function(t){function n(e,n){var r=this;return(r=t.call(this)||this).Xr=e,r.Go=n,r}return e(n,t),n}(jc),tf=function(){function t(e,n,r,i,o,s,a,u,c,h){if(this.allowTabSynchronization=e,this.persistenceKey=n,this.clientId=r,this.ln=o,this.window=s,this.document=a,this.zo=c,this.Ho=h,this.Jo=null,this.Yo=!1,this.isPrimary=!1,this.networkEnabled=!0,this.Xo=null,this.inForeground=!1,this.Zo=null,this.ta=null,this.ea=Number.NEGATIVE_INFINITY,this.na=function(t){return Promise.resolve()},!t.kn())throw new Bo(Uo.UNIMPLEMENTED,"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");this.Lr=new rf(this,i),this.sa=n+"main",this.serializer=new $c(u),this.ia=new ic(this.sa,11,new Ah(this.serializer)),this.ra=new Xh(this.Lr,this.serializer),this.Fi=new Kh,this.Ni=function(t,e){return new vh(t,e)}(this.serializer,this.Fi),this.oa=new qh(this.serializer),this.window&&this.window.localStorage?this.aa=this.window.localStorage:(this.aa=null,!1===h&&_o("IndexedDbPersistence","LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."))}return t.qn=function(t,e){if(t instanceof Zh)return ic.qn(t.Xr,e);throw No()},t.prototype.start=function(){var t=this;return this.ca().then((function(){if(!t.isPrimary&&!t.allowTabSynchronization)throw new Bo(Uo.FAILED_PRECONDITION,$h);return t.ua(),t.ha(),t.la(),t.runTransaction("getHighestListenSequenceNumber","readonly",(function(e){return t.ra.No(e)}))})).then((function(e){t.Jo=new Fc(e,t.zo)})).then((function(){t.Yo=!0})).catch((function(e){return t.ia&&t.ia.close(),Promise.reject(e)}))},t.prototype._a=function(t){var e=this;return this.na=function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){return this.yr?[2,t(n)]:[2]}))}))},t(this.isPrimary)},t.prototype.fa=function(t){var e=this;this.ia.Kn((function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return null===n.newVersion?[4,t()]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))}))}))},t.prototype.da=function(t){var e=this;this.networkEnabled!==t&&(this.networkEnabled=t,this.ln.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return this.yr?[4,this.ca()]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))})))},t.prototype.ca=function(){var t=this;return this.runTransaction("updateClientMetadataAndTryBecomePrimary","readwrite",(function(e){return nf(e).put(new jh(t.clientId,Date.now(),t.networkEnabled,t.inForeground)).next((function(){if(t.isPrimary)return t.wa(e).next((function(e){e||(t.isPrimary=!1,t.ln.Ss((function(){return t.na(!1)})))}))})).next((function(){return t.Ta(e)})).next((function(n){return t.isPrimary&&!n?t.Ea(e).next((function(){return!1})):!!n&&t.Ia(e).next((function(){return!0}))}))})).catch((function(e){if(ac(e))return Ao("IndexedDbPersistence","Failed to extend owner lease: ",e),t.isPrimary;if(!t.allowTabSynchronization)throw e;return Ao("IndexedDbPersistence","Releasing owner lease after error during lease refresh",e),!1})).then((function(e){t.isPrimary!==e&&t.ln.Ss((function(){return t.na(e)})),t.isPrimary=e}))},t.prototype.wa=function(t){var e=this;return ef(t).get(Th.key).next((function(t){return rc.resolve(e.ma(t))}))},t.prototype.Aa=function(t){return nf(t).delete(this.clientId)},t.prototype.Ra=function(){return i(this,void 0,void 0,(function(){var e,n,r,i,s=this;return o(this,(function(o){switch(o.label){case 0:return!this.isPrimary||this.Pa(this.ea,18e5)?[3,2]:(this.ea=Date.now(),[4,this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",(function(e){var n=t.qn(e,jh.store);return n.Xn().next((function(t){var e=s.ga(t,18e5),r=t.filter((function(t){return-1===e.indexOf(t)}));return rc.forEach(r,(function(t){return n.delete(t.clientId)})).next((function(){return r}))}))})).catch((function(){return[]}))]);case 1:if(e=o.sent(),this.aa)for(n=0,r=e;n<r.length;n++)i=r[n],this.aa.removeItem(this.Va(i.clientId));o.label=2;case 2:return[2]}}))}))},t.prototype.la=function(){var t=this;this.ta=this.ln.Pn("client_metadata_refresh",4e3,(function(){return t.ca().then((function(){return t.Ra()})).then((function(){return t.la()}))}))},t.prototype.ma=function(t){return!!t&&t.ownerId===this.clientId},t.prototype.Ta=function(t){var e=this;return this.Ho?rc.resolve(!0):ef(t).get(Th.key).next((function(n){if(null!==n&&e.Pa(n.leaseTimestampMs,5e3)&&!e.ya(n.ownerId)){if(e.ma(n)&&e.networkEnabled)return!0;if(!e.ma(n)){if(!n.allowTabSynchronization)throw new Bo(Uo.FAILED_PRECONDITION,$h);return!1}}return!(!e.networkEnabled||!e.inForeground)||nf(t).Xn().next((function(t){return void 0===e.ga(t,5e3).find((function(t){if(e.clientId!==t.clientId){var n=!e.networkEnabled&&t.networkEnabled,r=!e.inForeground&&t.inForeground,i=e.networkEnabled===t.networkEnabled;if(n||r&&i)return!0}return!1}))}))})).next((function(t){return e.isPrimary!==t&&Ao("IndexedDbPersistence","Client "+(t?"is":"is not")+" eligible for a primary lease."),t}))},t.prototype.pa=function(){return i(this,void 0,void 0,(function(){var t=this;return o(this,(function(e){switch(e.label){case 0:return this.Yo=!1,this.va(),this.ta&&(this.ta.cancel(),this.ta=null),this.ba(),this.Sa(),[4,this.ia.runTransaction("shutdown","readwrite",[Th.store,jh.store],(function(e){var n=new Zh(e,Fc.nr);return t.Ea(n).next((function(){return t.Aa(n)}))}))];case 1:return e.sent(),this.ia.close(),this.Da(),[2]}}))}))},t.prototype.ga=function(t,e){var n=this;return t.filter((function(t){return n.Pa(t.updateTimeMs,e)&&!n.ya(t.clientId)}))},t.prototype.Ca=function(){var t=this;return this.runTransaction("getActiveClients","readonly",(function(e){return nf(e).Xn().next((function(e){return t.ga(e,18e5).map((function(t){return t.clientId}))}))}))},Object.defineProperty(t.prototype,"yr",{get:function(){return this.Yo},enumerable:!1,configurable:!0}),t.prototype.Na=function(t){return ch.qr(t,this.serializer,this.Fi,this.Lr)},t.prototype.xa=function(){return this.ra},t.prototype.Fa=function(){return this.Ni},t.prototype.Oa=function(){return this.Fi},t.prototype.Ma=function(){return this.oa},t.prototype.runTransaction=function(t,e,n){var r=this;Ao("IndexedDbPersistence","Starting transaction:",t);var i,o="readonly"===e?"readonly":"readwrite";return this.ia.runTransaction(t,o,Fh,(function(o){return i=new Zh(o,r.Jo?r.Jo.next():Fc.nr),"readwrite-primary"===e?r.wa(i).next((function(t){return!!t||r.Ta(i)})).next((function(e){if(!e)throw _o("Failed to obtain primary lease for action '"+t+"'."),r.isPrimary=!1,r.ln.Ss((function(){return r.na(!1)})),new Bo(Uo.FAILED_PRECONDITION,Vc);return n(i)})).next((function(t){return r.Ia(i).next((function(){return t}))})):r.ka(i).next((function(){return n(i)}))})).then((function(t){return i.Ci(),t}))},t.prototype.ka=function(t){var e=this;return ef(t).get(Th.key).next((function(t){if(null!==t&&e.Pa(t.leaseTimestampMs,5e3)&&!e.ya(t.ownerId)&&!e.ma(t)&&!(e.Ho||e.allowTabSynchronization&&t.allowTabSynchronization))throw new Bo(Uo.FAILED_PRECONDITION,$h)}))},t.prototype.Ia=function(t){var e=new Th(this.clientId,this.allowTabSynchronization,Date.now());return ef(t).put(Th.key,e)},t.kn=function(){return ic.kn()},t.prototype.Ea=function(t){var e=this,n=ef(t);return n.get(Th.key).next((function(t){return e.ma(t)?(Ao("IndexedDbPersistence","Releasing primary lease."),n.delete(Th.key)):rc.resolve()}))},t.prototype.Pa=function(t,e){var n=Date.now();return!(t<n-e||t>n&&(_o("Detected an update time that is in the future: "+t+" > "+n),1))},t.prototype.ua=function(){var t=this;null!==this.document&&"function"==typeof this.document.addEventListener&&(this.Zo=function(){t.ln.fs((function(){return t.inForeground="visible"===t.document.visibilityState,t.ca()}))},this.document.addEventListener("visibilitychange",this.Zo),this.inForeground="visible"===this.document.visibilityState)},t.prototype.ba=function(){this.Zo&&(this.document.removeEventListener("visibilitychange",this.Zo),this.Zo=null)},t.prototype.ha=function(){var t,e=this;"function"==typeof(null===(t=this.window)||void 0===t?void 0:t.addEventListener)&&(this.Xo=function(){e.va(),e.ln.fs((function(){return e.pa()}))},this.window.addEventListener("unload",this.Xo))},t.prototype.Sa=function(){this.Xo&&(this.window.removeEventListener("unload",this.Xo),this.Xo=null)},t.prototype.ya=function(t){var e;try{var n=null!==(null===(e=this.aa)||void 0===e?void 0:e.getItem(this.Va(t)));return Ao("IndexedDbPersistence","Client '"+t+"' "+(n?"is":"is not")+" zombied in LocalStorage"),n}catch(t){return _o("IndexedDbPersistence","Failed to get zombied client id.",t),!1}},t.prototype.va=function(){if(this.aa)try{this.aa.setItem(this.Va(this.clientId),String(Date.now()))}catch(t){_o("Failed to set zombie client id.",t)}},t.prototype.Da=function(){if(this.aa)try{this.aa.removeItem(this.Va(this.clientId))}catch(t){}},t.prototype.Va=function(t){return"firestore_zombie_"+this.persistenceKey+"_"+t},t}();function ef(t){return tf.qn(t,Th.store)}function nf(t){return tf.qn(t,jh.store)}var rf=function(){function t(t,e){this.db=t,this.Rr=new Wc(this,e)}return t.prototype.Sr=function(t){var e=this.$a(t);return this.db.xa().Bo(t).next((function(t){return e.next((function(e){return t+e}))}))},t.prototype.$a=function(t){var e=0;return this.Cr(t,(function(t){e++})).next((function(){return e}))},t.prototype.De=function(t,e){return this.db.xa().De(t,e)},t.prototype.Cr=function(t,e){return this.La(t,(function(t,n){return e(n)}))},t.prototype.Qo=function(t,e,n){return of(t,n)},t.prototype.Wo=function(t,e,n){return of(t,n)},t.prototype.Nr=function(t,e,n){return this.db.xa().Nr(t,e,n)},t.prototype.eo=function(t,e){return of(t,e)},t.prototype.Ba=function(t,e){return function(t,e){var n=!1;return dh(t).ss((function(r){return hh(t,r,e).next((function(t){return t&&(n=!0),rc.resolve(!t)}))})).next((function(){return n}))}(t,e)},t.prototype.Fr=function(t,e){var n=this,r=this.db.Fa()._o(),i=[],o=0;return this.La(t,(function(s,a){if(a<=e){var u=n.Ba(t,s).next((function(e){if(!e)return o++,r.yi(t,s).next((function(){return r.Vi(s),Qh(t).delete([0,Xc(s.path)])}))}));i.push(u)}})).next((function(){return rc.xn(i)})).next((function(){return r.apply(t)})).next((function(){return o}))},t.prototype.removeTarget=function(t,e){var n=e.nt(t.Go);return this.db.xa().ko(t,n)},t.prototype.qa=function(t,e){return of(t,e)},t.prototype.La=function(t,e){var n,r=Qh(t),i=Fc.nr;return r.ns({index:Rh.documentTargetsIndex},(function(t,r){var o=t[0],s=(t[1],r.path),a=r.sequenceNumber;0===o?(i!==Fc.nr&&e(new Wo(Qc(n)),i),i=a,n=s):i=Fc.nr})).next((function(){i!==Fc.nr&&e(new Wo(Qc(n)),i)}))},t.prototype.Mr=function(t){return this.db.Fa().wo(t)},t}();function of(t,e){return Qh(t).put(function(t,e){return new Rh(0,Xc(t.path),e)}(e,t.Go))}function sf(t,e){var n=t.projectId;return t.o||(n+="."+t.database),"firestore/"+e+"/"+n+"/"}var af=function(){function t(t,e,n,r){this.persistence=t,this.Ua=e,this.serializer=r,this.Qa=new cs(Do),this.Ka=new jo((function(t){return Zo(t)}),ts),this.Wa=qo.min(),this.xi=t.Na(n),this.ja=t.Fa(),this.ra=t.xa(),this.Ga=new Uc(this.ja,this.xi,this.persistence.Oa()),this.oa=t.Ma(),this.Ua.za(this.Ga)}return t.prototype.pr=function(t){var e=this;return this.persistence.runTransaction("Collect garbage","readwrite-primary",(function(n){return t.Or(n,e.Qa)}))},t}();function uf(t,e,n,r){return new af(t,e,n,r)}function cf(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=n.xi,i=n.Ga,[4,n.persistence.runTransaction("Handle user change","readonly",(function(t){var o;return n.xi.Hr(t).next((function(s){return o=s,r=n.persistence.Na(e),i=new Uc(n.ja,r,n.persistence.Oa()),r.Hr(t)})).next((function(e){for(var n=[],r=[],s=Is(),a=0,u=o;a<u.length;a++){var c=u[a];n.push(c.batchId);for(var h=0,f=c.mutations;h<f.length;h++){var l=f[h];s=s.add(l.key)}}for(var p=0,d=e;p<d.length;p++){var v=d[p];r.push(v.batchId);for(var y=0,g=v.mutations;y<g.length;y++){var m=g[y];s=s.add(m.key)}}return i.Li(t,s).next((function(t){return{Ha:t,Ja:n,Ya:r}}))}))}))];case 1:return s=o.sent(),[2,(n.xi=r,n.Ga=i,n.Ua.za(n.Ga),s)]}}))}))}function hf(t,e){var n=Co(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(function(t){var r=e.batch.keys(),i=n.ja._o({fo:!0});return function(t,e,n,r){var i=n.batch,o=i.keys(),s=rc.resolve();return o.forEach((function(t){s=s.next((function(){return r.yi(e,t)})).next((function(e){var o=e,s=n.Ei.get(t);ko(null!==s),(!o||o.version.A(s)<0)&&(o=i._i(t,o,n))&&r.Ri(o,n.Ti)}))})),s.next((function(){return t.xi.Yr(e,i)}))}(n,t,e,i).next((function(){return i.apply(t)})).next((function(){return n.xi.no(t)})).next((function(){return n.Ga.Li(t,r)}))}))}function ff(t){var e=Co(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(function(t){return e.ra.Co(t)}))}function lf(t,e){var n=Co(t),r=e.et,i=n.Qa;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(function(t){var o=n.ja._o({fo:!0});i=n.Qa;var s=[];e.Gt.forEach((function(e,o){var a=i.get(o);if(a){s.push(n.ra.Ko(t,e.ne,o).next((function(){return n.ra.Uo(t,e.te,o)})));var u=e.resumeToken;if(u.X()>0){var c=a.st(u,r).nt(t.Go);i=i.rt(o,c),function(t,e,n){return ko(e.resumeToken.X()>0),0===t.resumeToken.X()||e.et.R()-t.et.R()>=3e8||n.te.size+n.ee.size+n.ne.size>0}(a,c,e)&&s.push(n.ra.ko(t,c))}}}));var a=vs();if(e.Ht.forEach((function(r,i){e.Jt.has(r)&&s.push(n.persistence.Lr.qa(t,r))})),s.push(function(t,e,n,r,i){var o=Is();return n.forEach((function(t){return o=o.add(t)})),e.getEntries(t,o).next((function(t){var i=vs();return n.forEach((function(n,o){var s=t.get(n),a=r;o instanceof bu&&o.version.isEqual(qo.min())?(e.Vi(n,a),i=i.rt(n,o)):null==s||o.version.A(s.version)>0||0===o.version.A(s.version)&&s.hasPendingWrites?(e.Ri(o,a),i=i.rt(n,o)):Ao("LocalStore","Ignoring outdated watch update for ",n,". Current version:",s.version," Watch version:",o.version)})),i}))}(t,o,e.Ht,r).next((function(t){a=t}))),!r.isEqual(qo.min())){var u=n.ra.Co(t).next((function(e){return n.ra.xo(t,t.Go,r)}));s.push(u)}return rc.xn(s).next((function(){return o.apply(t)})).next((function(){return n.Ga.Bi(t,a)}))})).then((function(t){return n.Qa=i,t}))}function pf(t,e){var n=Co(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(function(t){return void 0===e&&(e=-1),n.xi.Gr(t,e)}))}function df(t,e){var n=Co(t);return n.persistence.runTransaction("Allocate target","readwrite",(function(t){var r;return n.ra.qo(t,e).next((function(i){return i?(r=i,rc.resolve(r)):n.ra.bo(t).next((function(i){return r=new os(e,i,0,t.Go),n.ra.Fo(t,r).next((function(){return r}))}))}))})).then((function(t){var r=n.Qa.get(t.targetId);return(null===r||t.et.A(r.et)>0)&&(n.Qa=n.Qa.rt(t.targetId,t),n.Ka.set(e,t.targetId)),t}))}function vf(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a;return o(this,(function(o){switch(o.label){case 0:r=Co(t),i=r.Qa.get(e),s=n?"readwrite":"readwrite-primary",o.label=1;case 1:return o.trys.push([1,4,,5]),n?[3,3]:[4,r.persistence.runTransaction("Release target",s,(function(t){return r.persistence.Lr.removeTarget(t,i)}))];case 2:o.sent(),o.label=3;case 3:return[3,5];case 4:if(!ac(a=o.sent()))throw a;return Ao("LocalStore","Failed to update sequence numbers for target "+e+": "+a),[3,5];case 5:return r.Qa=r.Qa.remove(e),r.Ka.delete(i.target),[2]}}))}))}function yf(t,e,n){var r=Co(t),i=qo.min(),o=Is();return r.persistence.runTransaction("Execute query","readonly",(function(t){return function(t,e,n){var r=Co(t),i=r.Ka.get(n);return void 0!==i?rc.resolve(r.Qa.get(i)):r.ra.qo(e,n)}(r,t,xu(e)).next((function(e){if(e)return i=e.lastLimboFreeSnapshotVersion,r.ra.jo(t,e.targetId).next((function(t){o=t}))})).next((function(){return r.Ua.Ui(t,e,n?i:qo.min(),n?o:Is())})).next((function(t){return{documents:t,Xa:o}}))}))}function gf(t,e){var n=Co(t),r=Co(n.ra),i=n.Qa.get(e);return i?Promise.resolve(i.target):n.persistence.runTransaction("Get target data","readonly",(function(t){return r.qe(t,e).next((function(t){return t?t.target:null}))}))}function mf(t){var e=Co(t);return e.persistence.runTransaction("Get new document changes","readonly",(function(t){return function(t,e,n){var r=Co(t),i=vs(),o=eh(n),s=mh(e),a=IDBKeyRange.lowerBound(o,!0);return s.ns({index:Oh.readTimeIndex,range:a},(function(t,e){var n=Zc(r.serializer,e);i=i.rt(n.key,n),o=e.readTime})).next((function(){return{Za:i,readTime:nh(o)}}))}(e.ja,t,e.Wa)})).then((function(t){var n=t.Za,r=t.readTime;return e.Wa=r,n}))}function bf(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){return[2,(e=Co(t)).persistence.runTransaction("Synchronize last document change read time","readonly",(function(t){return function(t){var e=mh(t),n=qo.min();return e.ns({index:Oh.readTimeIndex,reverse:!0},(function(t,e,r){e.readTime&&(n=nh(e.readTime)),r.done()})).next((function(){return n}))}(t)})).then((function(t){e.Wa=t}))]}))}))}function wf(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){if(t.code!==Uo.FAILED_PRECONDITION||t.message!==Vc)throw t;return Ao("LocalStore","Unexpectedly lost primary lease"),[2]}))}))}var If=function(){function t(t,e,n,r,i,o){this.ln=t,this.tc=n,this.ec=r,this.nc=i,this.listener=o,this.state=0,this.sc=0,this.ic=null,this.stream=null,this.Ps=new nc(t,e)}return t.prototype.rc=function(){return 1===this.state||2===this.state||4===this.state},t.prototype.oc=function(){return 2===this.state},t.prototype.start=function(){3!==this.state?this.auth():this.ac()},t.prototype.stop=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return this.rc()?[4,this.close(0)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))},t.prototype.cc=function(){this.state=0,this.Ps.reset()},t.prototype.uc=function(){var t=this;this.oc()&&null===this.ic&&(this.ic=this.ln.Pn(this.tc,6e4,(function(){return t.hc()})))},t.prototype.lc=function(t){this._c(),this.stream.send(t)},t.prototype.hc=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){return this.oc()?[2,this.close(0)]:[2]}))}))},t.prototype._c=function(){this.ic&&(this.ic.cancel(),this.ic=null)},t.prototype.close=function(t,e){return i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return this._c(),this.Ps.cancel(),this.sc++,3!==t?this.Ps.reset():e&&e.code===Uo.RESOURCE_EXHAUSTED?(_o(e.toString()),_o("Using maximum backoff delay to prevent overloading the backend."),this.Ps.mn()):e&&e.code===Uo.UNAUTHENTICATED&&this.nc.ni(),null!==this.stream&&(this.fc(),this.stream.close(),this.stream=null),this.state=t,[4,this.listener.dc(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.fc=function(){},t.prototype.auth=function(){var t=this;this.state=1;var e=this.wc(this.sc),n=this.sc;this.nc.getToken().then((function(e){t.sc===n&&t.Tc(e)}),(function(n){e((function(){var e=new Bo(Uo.UNKNOWN,"Fetching auth token failed: "+n.message);return t.Ec(e)}))}))},t.prototype.Tc=function(t){var e=this,n=this.wc(this.sc);this.stream=this.Ic(t),this.stream.mc((function(){n((function(){return e.state=2,e.listener.mc()}))})),this.stream.dc((function(t){n((function(){return e.Ec(t)}))})),this.stream.onMessage((function(t){n((function(){return e.onMessage(t)}))}))},t.prototype.ac=function(){var t=this;this.state=4,this.Ps.An((function(){return i(t,void 0,void 0,(function(){return o(this,(function(t){return this.state=0,this.start(),[2]}))}))}))},t.prototype.Ec=function(t){return Ao("PersistentStream","close with error: "+t),this.stream=null,this.close(3,t)},t.prototype.wc=function(t){var e=this;return function(n){e.ln.fs((function(){return e.sc===t?n():(Ao("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())}))}},t}(),Ef=function(t){function n(e,n,r,i,o){var s=this;return(s=t.call(this,e,"listen_stream_connection_backoff","listen_stream_idle",n,r,o)||this).serializer=i,s}return e(n,t),n.prototype.Ic=function(t){return this.ec.Ac("Listen",t)},n.prototype.onMessage=function(t){this.Ps.reset();var e=function(t,e){var n;if("targetChange"in e){e.targetChange;var r=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:No()}(e.targetChange.targetChangeType||"NO_CHANGE"),i=e.targetChange.targetIds||[],o=function(t,e){return t.Ue?(ko(void 0===e||"string"==typeof e),ns.fromBase64String(e||"")):(ko(void 0===e||e instanceof Uint8Array),ns.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),s=e.targetChange.cause,a=s&&function(t){var e=void 0===t.code?Uo.UNKNOWN:us(t.code);return new Bo(e,t.message||"")}(s);n=new Os(r,i,o,a||null)}else if("documentChange"in e){e.documentChange;var u=e.documentChange;u.document,u.document.name,u.document.updateTime;var c=va(t,u.document.name),h=fa(u.document.updateTime),f=new du({mapValue:{fields:u.document.fields}}),l=new mu(c,h,f,{}),p=u.targetIds||[],d=u.removedTargetIds||[];n=new Cs(p,d,l.key,l)}else if("documentDelete"in e){e.documentDelete;var v=e.documentDelete;v.document;var y=va(t,v.document),g=v.readTime?fa(v.readTime):qo.min(),m=new bu(y,g),b=v.removedTargetIds||[];n=new Cs([],b,m.key,m)}else if("documentRemove"in e){e.documentRemove;var w=e.documentRemove;w.document;var I=va(t,w.document),E=w.removedTargetIds||[];n=new Cs([],E,I,null)}else{if(!("filter"in e))return No();e.filter;var A=e.filter;A.targetId;var _=A.count||0,T=new ss(_),S=A.targetId;n=new xs(S,T)}return n}(this.serializer,t),n=function(t){if(!("targetChange"in t))return qo.min();var e=t.targetChange;return e.targetIds&&e.targetIds.length?qo.min():e.readTime?fa(e.readTime):qo.min()}(t);return this.listener.Rc(e,n)},n.prototype.Pc=function(t){var e={};e.database=ma(this.serializer),e.addTarget=function(t,e){var n,r=e.target;return(n=es(r)?{documents:Aa(t,r)}:{query:_a(t,r)}).targetId=e.targetId,e.resumeToken.X()>0?n.resumeToken=ca(t,e.resumeToken):e.et.A(qo.min())>0&&(n.readTime=ua(t,e.et.P())),n}(this.serializer,t);var n=function(t,e){var n=function(t,e){switch(e){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return No()}}(0,e.tt);return null==n?null:{"goog-listen-tags":n}}(this.serializer,t);n&&(e.labels=n),this.lc(e)},n.prototype.gc=function(t){var e={};e.database=ma(this.serializer),e.removeTarget=t,this.lc(e)},n}(If),Af=function(t){function n(e,n,r,i,o){var s=this;return(s=t.call(this,e,"write_stream_connection_backoff","write_stream_idle",n,r,o)||this).serializer=i,s.Vc=!1,s}return e(n,t),Object.defineProperty(n.prototype,"yc",{get:function(){return this.Vc},enumerable:!1,configurable:!0}),n.prototype.start=function(){this.Vc=!1,this.lastStreamToken=void 0,t.prototype.start.call(this)},n.prototype.fc=function(){this.Vc&&this.vc([])},n.prototype.Ic=function(t){return this.ec.Ac("Write",t)},n.prototype.onMessage=function(t){if(ko(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Vc){this.Ps.reset();var e=function(t,e){return t&&t.length>0?(ko(void 0!==e),t.map((function(t){return function(t,e){var n=t.updateTime?fa(t.updateTime):fa(e);n.isEqual(qo.min())&&(n=fa(e));var r=null;return t.transformResults&&t.transformResults.length>0&&(r=t.transformResults),new Qa(n,r)}(t,e)}))):[]}(t.writeResults,t.commitTime),n=fa(t.commitTime);return this.listener.bc(n,e)}return ko(!t.writeResults||0===t.writeResults.length),this.Vc=!0,this.listener.Sc()},n.prototype.Dc=function(){var t={};t.database=ma(this.serializer),this.lc(t)},n.prototype.vc=function(t){var e=this,n={streamToken:this.lastStreamToken,writes:t.map((function(t){return Ia(e.serializer,t)}))};this.lc(n)},n}(If),_f=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).credentials=e,i.ec=n,i.serializer=r,i.Cc=!1,i}return e(n,t),n.prototype.Nc=function(){if(this.Cc)throw new Bo(Uo.FAILED_PRECONDITION,"The client has already been terminated.")},n.prototype.xc=function(t,e,n){var r=this;return this.Nc(),this.credentials.getToken().then((function(i){return r.ec.xc(t,e,n,i)})).catch((function(t){throw t.code===Uo.UNAUTHENTICATED&&r.credentials.ni(),t}))},n.prototype.Fc=function(t,e,n){var r=this;return this.Nc(),this.credentials.getToken().then((function(i){return r.ec.Fc(t,e,n,i)})).catch((function(t){throw t.code===Uo.UNAUTHENTICATED&&r.credentials.ni(),t}))},n.prototype.terminate=function(){this.Cc=!1},n}((function(){})),Tf=function(){function t(t,e){this.rs=t,this.Oc=e,this.state="Unknown",this.Mc=0,this.kc=null,this.$c=!0}return t.prototype.Lc=function(){var t=this;0===this.Mc&&(this.Bc("Unknown"),this.kc=this.rs.Pn("online_state_timeout",1e4,(function(){return t.kc=null,t.qc("Backend didn't respond within 10 seconds."),t.Bc("Offline"),Promise.resolve()})))},t.prototype.Uc=function(t){"Online"===this.state?this.Bc("Unknown"):(this.Mc++,this.Mc>=1&&(this.Qc(),this.qc("Connection failed 1 times. Most recent error: "+t.toString()),this.Bc("Offline")))},t.prototype.set=function(t){this.Qc(),this.Mc=0,"Online"===t&&(this.$c=!1),this.Bc(t)},t.prototype.Bc=function(t){t!==this.state&&(this.state=t,this.Oc(t))},t.prototype.qc=function(t){var e="Could not reach Cloud Firestore backend. "+t+"\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";this.$c?(_o(e),this.$c=!1):Ao("OnlineStateTracker",e)},t.prototype.Qc=function(){null!==this.kc&&(this.kc.cancel(),this.kc=null)},t}(),Sf=function(t,e,n,r,s){var a=this;this.Kc=t,this.Wc=e,this.rs=n,this.jc={},this.Gc=[],this.zc=new Map,this.Hc=new Set,this.Jc=[],this.Yc=s,this.Yc.Xc((function(t){n.fs((function(){return i(a,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return Lf(this)?(Ao("RemoteStore","Restarting streams for network reachability change."),[4,function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return(e=Co(t)).Hc.add(4),[4,kf(e)];case 1:return n.sent(),e.Zc.set("Unknown"),e.Hc.delete(4),[4,Nf(e)];case 2:return n.sent(),[2]}}))}))}(this)]):[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))}))})),this.Zc=new Tf(n,r)};function Nf(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:if(!Lf(t))return[3,4];e=0,n=t.Jc,r.label=1;case 1:return e<n.length?[4,(0,n[e])(!0)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))}function kf(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:e=0,n=t.Jc,r.label=1;case 1:return e<n.length?[4,(0,n[e])(!1)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))}function Cf(t,e){var n=Co(t);n.zc.has(e.targetId)||(n.zc.set(e.targetId,e),Rf(n)?Pf(n):Jf(n).oc()&&Of(n,e))}function xf(t,e){var n=Co(t),r=Jf(n);n.zc.delete(e),r.oc()&&Df(n,e),0===n.zc.size&&(r.oc()?r.uc():Lf(n)&&n.Zc.set("Unknown"))}function Of(t,e){t.tu.Ie(e.targetId),Jf(t).Pc(e)}function Df(t,e){t.tu.Ie(e),Jf(t).gc(e)}function Pf(t){t.tu=new Ps({Be:function(e){return t.jc.Be(e)},qe:function(e){return t.zc.get(e)||null}}),Jf(t).start(),t.Zc.Lc()}function Rf(t){return Lf(t)&&!Jf(t).rc()&&t.zc.size>0}function Lf(t){return 0===Co(t).Hc.size}function Mf(t){t.tu=void 0}function Vf(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){return t.zc.forEach((function(e,n){Of(t,e)})),[2]}))}))}function jf(t,e){return i(this,void 0,void 0,(function(){return o(this,(function(n){return Mf(t),Rf(t)?(t.Zc.Uc(e),Pf(t)):t.Zc.set("Unknown"),[2]}))}))}function Uf(t,e,n){return i(this,void 0,void 0,(function(){var r,s,a;return o(this,(function(u){switch(u.label){case 0:if(t.Zc.set("Online"),!(e instanceof Os&&2===e.state&&e.cause))return[3,6];u.label=1;case 1:return u.trys.push([1,3,,5]),[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:n=e.cause,r=0,i=e.targetIds,o.label=1;case 1:return r<i.length?(s=i[r],t.zc.has(s)?[4,t.jc.eu(s,n)]:[3,3]):[3,5];case 2:o.sent(),t.zc.delete(s),t.tu.removeTarget(s),o.label=3;case 3:o.label=4;case 4:return r++,[3,1];case 5:return[2]}}))}))}(t,e)];case 2:return u.sent(),[3,5];case 3:return r=u.sent(),Ao("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),r),[4,Bf(t,r)];case 4:return u.sent(),[3,5];case 5:return[3,13];case 6:if(e instanceof Cs?t.tu.pe(e):e instanceof xs?t.tu.Fe(e):t.tu.Se(e),n.isEqual(qo.min()))return[3,13];u.label=7;case 7:return u.trys.push([7,11,,13]),[4,ff(t.Kc)];case 8:return s=u.sent(),n.A(s)>=0?[4,function(t,e){var n=t.tu.ke(e);return n.Gt.forEach((function(n,r){if(n.resumeToken.X()>0){var i=t.zc.get(r);i&&t.zc.set(r,i.st(n.resumeToken,e))}})),n.zt.forEach((function(e){var n=t.zc.get(e);if(n){t.zc.set(e,n.st(ns.Z,n.et)),Df(t,e);var r=new os(n.target,e,1,n.sequenceNumber);Of(t,r)}})),t.jc.nu(n)}(t,n)]:[3,10];case 9:u.sent(),u.label=10;case 10:return[3,13];case 11:return Ao("RemoteStore","Failed to raise snapshot:",a=u.sent()),[4,Bf(t,a)];case 12:return u.sent(),[3,13];case 13:return[2]}}))}))}function Bf(t,e,n){return i(this,void 0,void 0,(function(){var r=this;return o(this,(function(s){switch(s.label){case 0:if(!ac(e))throw e;return t.Hc.add(1),[4,kf(t)];case 1:return s.sent(),t.Zc.set("Offline"),n||(n=function(){return ff(t.Kc)}),t.rs.Ss((function(){return i(r,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return Ao("RemoteStore","Retrying IndexedDB access"),[4,n()];case 1:return e.sent(),t.Hc.delete(1),[4,Nf(t)];case 2:return e.sent(),[2]}}))}))})),[2]}}))}))}function Ff(t,e){return e().catch((function(n){return Bf(t,n,e)}))}function qf(t){return i(this,void 0,void 0,(function(){var e,n,r,i,s;return o(this,(function(o){switch(o.label){case 0:e=Co(t),n=Qf(e),r=e.Gc.length>0?e.Gc[e.Gc.length-1].batchId:-1,o.label=1;case 1:if(!function(t){return Lf(t)&&t.Gc.length<10}(e))return[3,7];o.label=2;case 2:return o.trys.push([2,4,,6]),[4,pf(e.Kc,r)];case 3:return null===(i=o.sent())?(0===e.Gc.length&&n.uc(),[3,7]):(r=i.batchId,function(t,e){t.Gc.push(e);var n=Qf(t);n.oc()&&n.yc&&n.vc(e.mutations)}(e,i),[3,6]);case 4:return s=o.sent(),[4,Bf(e,s)];case 5:return o.sent(),[3,6];case 6:return[3,1];case 7:return Gf(e)&&zf(e),[2]}}))}))}function Gf(t){return Lf(t)&&!Qf(t).rc()&&t.Gc.length>0}function zf(t){Qf(t).start()}function Kf(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){return Qf(t).Dc(),[2]}))}))}function Hf(t){return i(this,void 0,void 0,(function(){var e,n,r,i;return o(this,(function(o){for(e=Qf(t),n=0,r=t.Gc;n<r.length;n++)i=r[n],e.vc(i.mutations);return[2]}))}))}function Wf(t,e,n){return i(this,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:return r=t.Gc.shift(),i=Pc.from(r,e,n),[4,Ff(t,(function(){return t.jc.su(i)}))];case 1:return o.sent(),[4,qf(t)];case 2:return o.sent(),[2]}}))}))}function Xf(t,e){return i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return e&&Qf(t).yc?[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return as(r=e.code)&&r!==Uo.ABORTED?(n=t.Gc.shift(),Qf(t).cc(),[4,Ff(t,(function(){return t.jc.iu(n.batchId,e)}))]):[3,3];case 1:return i.sent(),[4,qf(t)];case 2:i.sent(),i.label=3;case 3:return[2]}}))}))}(t,e)]:[3,2];case 1:n.sent(),n.label=2;case 2:return Gf(t)&&zf(t),[2]}}))}))}function Yf(t,e){return i(this,void 0,void 0,(function(){var n;return o(this,(function(r){switch(r.label){case 0:return n=Co(t),e?(n.Hc.delete(2),[4,Nf(n)]):[3,2];case 1:return r.sent(),[3,5];case 2:return e?[3,4]:(n.Hc.add(2),[4,kf(n)]);case 3:r.sent(),n.Zc.set("Unknown"),r.label=4;case 4:r.label=5;case 5:return[2]}}))}))}function Jf(t){var e=this;return t.ru||(t.ru=function(t,e,n){var r=Co(t);return r.Nc(),new Ef(e,r.ec,r.credentials,r.serializer,n)}(t.Wc,t.rs,{mc:Vf.bind(null,t),dc:jf.bind(null,t),Rc:Uf.bind(null,t)}),t.Jc.push((function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return n?(t.ru.cc(),Rf(t)?Pf(t):t.Zc.set("Unknown"),[3,3]):[3,1];case 1:return[4,t.ru.stop()];case 2:e.sent(),Mf(t),e.label=3;case 3:return[2]}}))}))}))),t.ru}function Qf(t){var e=this;return t.ou||(t.ou=function(t,e,n){var r=Co(t);return r.Nc(),new Af(e,r.ec,r.credentials,r.serializer,n)}(t.Wc,t.rs,{mc:Kf.bind(null,t),dc:Xf.bind(null,t),Sc:Hf.bind(null,t),bc:Wf.bind(null,t)}),t.Jc.push((function(n){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return n?(t.ou.cc(),[4,qf(t)]):[3,2];case 1:return e.sent(),[3,4];case 2:return[4,t.ou.stop()];case 3:e.sent(),t.Gc.length>0&&(Ao("RemoteStore","Stopping write stream with "+t.Gc.length+" pending writes"),t.Gc=[]),e.label=4;case 4:return[2]}}))}))}))),t.ou}var $f=function(){function t(){this.au=new ls(Zf.cu),this.uu=new ls(Zf.hu)}return t.prototype.T=function(){return this.au.T()},t.prototype.Qo=function(t,e){var n=new Zf(t,e);this.au=this.au.add(n),this.uu=this.uu.add(n)},t.prototype.lu=function(t,e){var n=this;t.forEach((function(t){return n.Qo(t,e)}))},t.prototype.Wo=function(t,e){this._u(new Zf(t,e))},t.prototype.fu=function(t,e){var n=this;t.forEach((function(t){return n.Wo(t,e)}))},t.prototype.du=function(t){var e=this,n=new Wo(new zo([])),r=new Zf(n,t),i=new Zf(n,t+1),o=[];return this.uu.Nt([r,i],(function(t){e._u(t),o.push(t.key)})),o},t.prototype.wu=function(){var t=this;this.au.forEach((function(e){return t._u(e)}))},t.prototype._u=function(t){this.au=this.au.delete(t),this.uu=this.uu.delete(t)},t.prototype.Tu=function(t){var e=new Wo(new zo([])),n=new Zf(e,t),r=new Zf(e,t+1),i=Is();return this.uu.Nt([n,r],(function(t){i=i.add(t.key)})),i},t.prototype.so=function(t){var e=new Zf(t,0),n=this.au.Ft(e);return null!==n&&t.isEqual(n.key)},t}(),Zf=function(){function t(t,e){this.key=t,this.Eu=e}return t.cu=function(t,e){return Wo.V(t.key,e.key)||Do(t.Eu,e.Eu)},t.hu=function(t,e){return Do(t.Eu,e.Eu)||Wo.V(t.key,e.key)},t}();function tl(t,e){return"firestore_clients_"+t+"_"+e}function el(t,e,n){var r="firestore_mutations_"+t+"_"+n;return e.Js()&&(r+="_"+e.uid),r}function nl(t,e){return"firestore_targets_"+t+"_"+e}var rl=function(){function t(t,e,n,r){this.user=t,this.batchId=e,this.state=n,this.error=r}return t.Iu=function(e,n,r){var i=JSON.parse(r),o="object"==typeof i&&-1!==["pending","acknowledged","rejected"].indexOf(i.state)&&(void 0===i.error||"object"==typeof i.error),s=void 0;return o&&i.error&&(o="string"==typeof i.error.message&&"string"==typeof i.error.code)&&(s=new Bo(i.error.code,i.error.message)),o?new t(e,n,i.state,s):(_o("SharedClientState","Failed to parse mutation state for ID '"+n+"': "+r),null)},t.prototype.mu=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),il=function(){function t(t,e,n){this.targetId=t,this.state=e,this.error=n}return t.Iu=function(e,n){var r=JSON.parse(n),i="object"==typeof r&&-1!==["not-current","current","rejected"].indexOf(r.state)&&(void 0===r.error||"object"==typeof r.error),o=void 0;return i&&r.error&&(i="string"==typeof r.error.message&&"string"==typeof r.error.code)&&(o=new Bo(r.error.code,r.error.message)),i?new t(e,r.state,o):(_o("SharedClientState","Failed to parse target state for ID '"+e+"': "+n),null)},t.prototype.mu=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),ol=function(){function t(t,e){this.clientId=t,this.activeTargetIds=e}return t.Iu=function(e,n){for(var r=JSON.parse(n),i="object"==typeof r&&r.activeTargetIds instanceof Array,o=As(),s=0;i&&s<r.activeTargetIds.length;++s)i=Jo(r.activeTargetIds[s]),o=o.add(r.activeTargetIds[s]);return i?new t(e,o):(_o("SharedClientState","Failed to parse client data for instance '"+e+"': "+n),null)},t}(),sl=function(){function t(t,e){this.clientId=t,this.onlineState=e}return t.Iu=function(e){var n=JSON.parse(e);return"object"==typeof n&&-1!==["Unknown","Online","Offline"].indexOf(n.onlineState)&&"string"==typeof n.clientId?new t(n.clientId,n.onlineState):(_o("SharedClientState","Failed to parse online state: "+e),null)},t}(),al=function(){function t(){this.activeTargetIds=As()}return t.prototype.Au=function(t){this.activeTargetIds=this.activeTargetIds.add(t)},t.prototype.Ru=function(t){this.activeTargetIds=this.activeTargetIds.delete(t)},t.prototype.mu=function(){var t={activeTargetIds:this.activeTargetIds.O(),updateTimeMs:Date.now()};return JSON.stringify(t)},t}(),ul=function(){function t(t,e,n,r,i){this.window=t,this.ln=e,this.persistenceKey=n,this.Pu=r,this.gu=null,this.Oc=null,this.Xi=null,this.Vu=this.yu.bind(this),this.pu=new cs(Do),this.yr=!1,this.vu=[];var o=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.window.localStorage,this.currentUser=i,this.bu=tl(this.persistenceKey,this.Pu),this.Su=function(t){return"firestore_sequence_number_"+t}(this.persistenceKey),this.pu=this.pu.rt(this.Pu,new al),this.Du=new RegExp("^firestore_clients_"+o+"_([^_]*)$"),this.Cu=new RegExp("^firestore_mutations_"+o+"_(\\d+)(?:_(.*))?$"),this.Nu=new RegExp("^firestore_targets_"+o+"_(\\d+)$"),this.xu=function(t){return"firestore_online_state_"+t}(this.persistenceKey),this.Fu=function(t){return"firestore_bundle_loaded_"+t}(this.persistenceKey),this.window.addEventListener("storage",this.Vu)}return t.kn=function(t){return!(!t||!t.localStorage)},t.prototype.start=function(){return i(this,void 0,void 0,(function(){var t,e,n,r,i,s,a,u,c,h,f,l=this;return o(this,(function(o){switch(o.label){case 0:return[4,this.gu.Ca()];case 1:for(t=o.sent(),e=0,n=t;e<n.length;e++)(r=n[e])!==this.Pu&&(i=this.getItem(tl(this.persistenceKey,r)))&&(s=ol.Iu(r,i))&&(this.pu=this.pu.rt(s.clientId,s));for(this.Ou(),(a=this.storage.getItem(this.xu))&&(u=this.Mu(a))&&this.ku(u),c=0,h=this.vu;c<h.length;c++)f=h[c],this.yu(f);return this.vu=[],this.window.addEventListener("unload",(function(){return l.pa()})),this.yr=!0,[2]}}))}))},t.prototype.er=function(t){this.setItem(this.Su,JSON.stringify(t))},t.prototype.$u=function(){return this.Lu(this.pu)},t.prototype.Bu=function(t){var e=!1;return this.pu.forEach((function(n,r){r.activeTargetIds.has(t)&&(e=!0)})),e},t.prototype.qu=function(t){this.Uu(t,"pending")},t.prototype.Qu=function(t,e,n){this.Uu(t,e,n),this.Ku(t)},t.prototype.Wu=function(t){var e="not-current";if(this.Bu(t)){var n=this.storage.getItem(nl(this.persistenceKey,t));if(n){var r=il.Iu(t,n);r&&(e=r.state)}}return this.ju.Au(t),this.Ou(),e},t.prototype.Gu=function(t){this.ju.Ru(t),this.Ou()},t.prototype.zu=function(t){return this.ju.activeTargetIds.has(t)},t.prototype.Hu=function(t){this.removeItem(nl(this.persistenceKey,t))},t.prototype.Ju=function(t,e,n){this.Yu(t,e,n)},t.prototype.Xu=function(t,e,n){var r=this;e.forEach((function(t){r.Ku(t)})),this.currentUser=t,n.forEach((function(t){r.qu(t)}))},t.prototype.Zu=function(t){this.th(t)},t.prototype.eh=function(){this.nh()},t.prototype.pa=function(){this.yr&&(this.window.removeEventListener("storage",this.Vu),this.removeItem(this.bu),this.yr=!1)},t.prototype.getItem=function(t){var e=this.storage.getItem(t);return Ao("SharedClientState","READ",t,e),e},t.prototype.setItem=function(t,e){Ao("SharedClientState","SET",t,e),this.storage.setItem(t,e)},t.prototype.removeItem=function(t){Ao("SharedClientState","REMOVE",t),this.storage.removeItem(t)},t.prototype.yu=function(t){var e=this,n=t;if(n.storageArea===this.storage){if(Ao("SharedClientState","EVENT",n.key,n.newValue),n.key===this.bu)return void _o("Received WebStorage notification for local change. Another client might have garbage-collected our state");this.ln.Ss((function(){return i(e,void 0,void 0,(function(){var t,e,r,i,s,a;return o(this,(function(o){if(this.yr){if(null!==n.key)if(this.Du.test(n.key)){if(null==n.newValue)return t=this.sh(n.key),[2,this.ih(t,null)];if(e=this.rh(n.key,n.newValue))return[2,this.ih(e.clientId,e)]}else if(this.Cu.test(n.key)){if(null!==n.newValue&&(r=this.oh(n.key,n.newValue)))return[2,this.ah(r)]}else if(this.Nu.test(n.key)){if(null!==n.newValue&&(i=this.uh(n.key,n.newValue)))return[2,this.hh(i)]}else if(n.key===this.xu){if(null!==n.newValue&&(s=this.Mu(n.newValue)))return[2,this.ku(s)]}else if(n.key===this.Su)(a=function(t){var e=Fc.nr;if(null!=t)try{var n=JSON.parse(t);ko("number"==typeof n),e=n}catch(t){_o("SharedClientState","Failed to read sequence number from WebStorage",t)}return e}(n.newValue))!==Fc.nr&&this.Xi(a);else if(n.key===this.Fu)return[2,this.gu.lh()]}else this.vu.push(n);return[2]}))}))}))}},Object.defineProperty(t.prototype,"ju",{get:function(){return this.pu.get(this.Pu)},enumerable:!1,configurable:!0}),t.prototype.Ou=function(){this.setItem(this.bu,this.ju.mu())},t.prototype.Uu=function(t,e,n){var r=new rl(this.currentUser,t,e,n),i=el(this.persistenceKey,this.currentUser,t);this.setItem(i,r.mu())},t.prototype.Ku=function(t){var e=el(this.persistenceKey,this.currentUser,t);this.removeItem(e)},t.prototype.th=function(t){var e={clientId:this.Pu,onlineState:t};this.storage.setItem(this.xu,JSON.stringify(e))},t.prototype.Yu=function(t,e,n){var r=nl(this.persistenceKey,t),i=new il(t,e,n);this.setItem(r,i.mu())},t.prototype.nh=function(){this.setItem(this.Fu,"value-not-used")},t.prototype.sh=function(t){var e=this.Du.exec(t);return e?e[1]:null},t.prototype.rh=function(t,e){var n=this.sh(t);return ol.Iu(n,e)},t.prototype.oh=function(t,e){var n=this.Cu.exec(t),r=Number(n[1]),i=void 0!==n[2]?n[2]:null;return rl.Iu(new Sc(i),r,e)},t.prototype.uh=function(t,e){var n=this.Nu.exec(t),r=Number(n[1]);return il.Iu(r,e)},t.prototype.Mu=function(t){return sl.Iu(t)},t.prototype.ah=function(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){return t.user.uid===this.currentUser.uid?[2,this.gu._h(t.batchId,t.state,t.error)]:(Ao("SharedClientState","Ignoring mutation for non-active user "+t.user.uid),[2])}))}))},t.prototype.hh=function(t){return this.gu.fh(t.targetId,t.state,t.error)},t.prototype.ih=function(t,e){var n=this,r=e?this.pu.rt(t,e):this.pu.remove(t),i=this.Lu(this.pu),o=this.Lu(r),s=[],a=[];return o.forEach((function(t){i.has(t)||s.push(t)})),i.forEach((function(t){o.has(t)||a.push(t)})),this.gu.dh(s,a).then((function(){n.pu=r}))},t.prototype.ku=function(t){this.pu.get(t.clientId)&&this.Oc(t.onlineState)},t.prototype.Lu=function(t){var e=As();return t.forEach((function(t,n){e=e.Ot(n.activeTargetIds)})),e},t}(),cl=function(){function t(){this.wh=new al,this.Th={},this.Oc=null,this.Xi=null}return t.prototype.qu=function(t){},t.prototype.Qu=function(t,e,n){},t.prototype.Wu=function(t){return this.wh.Au(t),this.Th[t]||"not-current"},t.prototype.Ju=function(t,e,n){this.Th[t]=e},t.prototype.Gu=function(t){this.wh.Ru(t)},t.prototype.zu=function(t){return this.wh.activeTargetIds.has(t)},t.prototype.Hu=function(t){delete this.Th[t]},t.prototype.$u=function(){return this.wh.activeTargetIds},t.prototype.Bu=function(t){return this.wh.activeTargetIds.has(t)},t.prototype.start=function(){return this.wh=new al,Promise.resolve()},t.prototype.Xu=function(t,e,n){},t.prototype.Zu=function(t){},t.prototype.pa=function(){},t.prototype.er=function(t){},t.prototype.eh=function(){},t}(),hl=function(t){this.key=t},fl=function(t){this.key=t},ll=function(){function t(t,e){this.query=t,this.Eh=e,this.Ih=null,this.Zt=!1,this.mh=Is(),this.Qt=Is(),this.Ah=ju(t),this.Rh=new _s(this.Ah)}return Object.defineProperty(t.prototype,"Ph",{get:function(){return this.Eh},enumerable:!1,configurable:!0}),t.prototype.gh=function(t,e){var n=this,r=e?e.Vh:new Ts,i=e?e.Rh:this.Rh,o=e?e.Qt:this.Qt,s=i,a=!1,u=_u(this.query)&&i.size===this.query.limit?i.last():null,c=Tu(this.query)&&i.size===this.query.limit?i.first():null;if(t.ut((function(t,e){var h=i.get(t),f=e instanceof mu?e:null;f&&(f=Vu(n.query,f)?f:null);var l=!!h&&n.Qt.has(h.key),p=!!f&&(f.Je||n.Qt.has(f.key)&&f.hasCommittedMutations),d=!1;h&&f?h.data().isEqual(f.data())?l!==p&&(r.track({type:3,doc:f}),d=!0):n.yh(h,f)||(r.track({type:2,doc:f}),d=!0,(u&&n.Ah(f,u)>0||c&&n.Ah(f,c)<0)&&(a=!0)):!h&&f?(r.track({type:0,doc:f}),d=!0):h&&!f&&(r.track({type:1,doc:h}),d=!0,(u||c)&&(a=!0)),d&&(f?(s=s.add(f),o=p?o.add(t):o.delete(t)):(s=s.delete(t),o=o.delete(t)))})),_u(this.query)||Tu(this.query))for(;s.size>this.query.limit;){var h=_u(this.query)?s.last():s.first();s=s.delete(h.key),o=o.delete(h.key),r.track({type:1,doc:h})}return{Rh:s,Vh:r,ph:a,Qt:o}},t.prototype.yh=function(t,e){return t.Je&&e.hasCommittedMutations&&!e.Je},t.prototype.bi=function(t,e,n){var r=this,i=this.Rh;this.Rh=t.Rh,this.Qt=t.Qt;var o=t.Vh.qt();o.sort((function(t,e){return function(t,e){var n=function(t){switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return No()}};return n(t)-n(e)}(t.type,e.type)||r.Ah(t.doc,e.doc)})),this.bh(n);var s=e?this.Sh():[],a=0===this.mh.size&&this.Zt?1:0,u=a!==this.Ih;return this.Ih=a,0!==o.length||u?{snapshot:new Ss(this.query,t.Rh,i,o,t.Qt,0===a,u,!1),Dh:s}:{Dh:s}},t.prototype.Bs=function(t){return this.Zt&&"Offline"===t?(this.Zt=!1,this.bi({Rh:this.Rh,Vh:new Ts,Qt:this.Qt,ph:!1},!1)):{Dh:[]}},t.prototype.Ch=function(t){return!this.Eh.has(t)&&!!this.Rh.has(t)&&!this.Rh.get(t).Je},t.prototype.bh=function(t){var e=this;t&&(t.te.forEach((function(t){return e.Eh=e.Eh.add(t)})),t.ee.forEach((function(t){})),t.ne.forEach((function(t){return e.Eh=e.Eh.delete(t)})),this.Zt=t.Zt)},t.prototype.Sh=function(){var t=this;if(!this.Zt)return[];var e=this.mh;this.mh=Is(),this.Rh.forEach((function(e){t.Ch(e.key)&&(t.mh=t.mh.add(e.key))}));var n=[];return e.forEach((function(e){t.mh.has(e)||n.push(new fl(e))})),this.mh.forEach((function(t){e.has(t)||n.push(new hl(t))})),n},t.prototype.Nh=function(t){this.Eh=t.Xa,this.mh=Is();var e=this.gh(t.documents);return this.bi(e,!0)},t.prototype.xh=function(){return Ss.jt(this.query,this.Rh,this.Qt,0===this.Ih)},t}(),pl=function(t,e,n){this.query=t,this.targetId=e,this.view=n},dl=function(t){this.key=t,this.Fh=!1},vl=function(){function t(t,e,n,r,i,o){this.Kc=t,this.Oh=e,this.Mh=n,this.kh=r,this.currentUser=i,this.$h=o,this.Lh={},this.Bh=new jo((function(t){return Lu(t)}),Ru),this.qh=new Map,this.Uh=[],this.Qh=new cs(Wo.V),this.Kh=new Map,this.Wh=new $f,this.jh={},this.Gh=new Map,this.zh=Wh.vo(),this.onlineState="Unknown",this.Hh=void 0}return Object.defineProperty(t.prototype,"Jh",{get:function(){return!0===this.Hh},enumerable:!1,configurable:!0}),t}();function yl(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return n=Kl(t),(s=n.Bh.get(e))?(r=s.targetId,n.kh.Wu(r),i=s.view.xh(),[3,4]):[3,1];case 1:return[4,df(n.Kc,xu(e))];case 2:return a=o.sent(),u=n.kh.Wu(a.targetId),r=a.targetId,[4,gl(n,e,r,"current"===u)];case 3:i=o.sent(),n.Jh&&Cf(n.Oh,a),o.label=4;case 4:return[2,i]}}))}))}function gl(t,e,n,r){return i(this,void 0,void 0,(function(){var s,a,u,c,h,f;return o(this,(function(l){switch(l.label){case 0:return t.Yh=function(e,n,r){return function(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a;return o(this,(function(o){switch(o.label){case 0:return(i=e.view.gh(n)).ph?[4,yf(t.Kc,e.query,!1).then((function(t){var n=t.documents;return e.view.gh(n,i)}))]:[3,2];case 1:i=o.sent(),o.label=2;case 2:return s=r&&r.Gt.get(e.targetId),a=e.view.bi(i,t.Jh,s),[2,(xl(t,e.targetId,a.Dh),a.snapshot)]}}))}))}(t,e,n,r)},[4,yf(t.Kc,e,!0)];case 1:return s=l.sent(),a=new ll(e,s.Xa),u=a.gh(s.documents),c=ks.Xt(n,r&&"Offline"!==t.onlineState),h=a.bi(u,t.Jh,c),xl(t,n,h.Dh),f=new pl(e,n,a),[2,(t.Bh.set(e,f),t.qh.has(n)?t.qh.get(n).push(e):t.qh.set(n,[e]),h.snapshot)]}}))}))}function ml(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=n.Bh.get(e),(i=n.qh.get(r.targetId)).length>1?[2,(n.qh.set(r.targetId,i.filter((function(t){return!Ru(t,e)}))),void n.Bh.delete(e))]:n.Jh?(n.kh.Gu(r.targetId),n.kh.Bu(r.targetId)?[3,2]:[4,vf(n.Kc,r.targetId,!1).then((function(){n.kh.Hu(r.targetId),xf(n.Oh,r.targetId),kl(n,r.targetId)})).catch(wf)]):[3,3];case 1:o.sent(),o.label=2;case 2:return[3,5];case 3:return kl(n,r.targetId),[4,vf(n.Kc,r.targetId,!0)];case 4:o.sent(),o.label=5;case 5:return[2]}}))}))}function bl(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a;return o(this,(function(o){switch(o.label){case 0:r=Hl(t),o.label=1;case 1:return o.trys.push([1,5,,6]),[4,function(t,e){var n,r=Co(t),i=Fo.now(),o=e.reduce((function(t,e){return t.add(e.key)}),Is());return r.persistence.runTransaction("Locally write mutations","readwrite",(function(t){return r.Ga.Li(t,o).next((function(o){n=o;for(var s=[],a=0,u=e;a<u.length;a++){var c=u[a],h=ru(c,n.get(c.key));null!=h&&s.push(new au(c.key,h,yu(h.proto.mapValue),$a.exists(!0)))}return r.xi.Qr(t,i,s,e)}))})).then((function(t){var e=t.wi(n);return{batchId:t.batchId,Ii:e}}))}(r.Kc,e)];case 2:return i=o.sent(),r.kh.qu(i.batchId),function(t,e,n){var r=t.jh[t.currentUser.Ys()];r||(r=new cs(Do)),r=r.rt(e,n),t.jh[t.currentUser.Ys()]=r}(r,i.batchId,n),[4,Pl(r,i.Ii)];case 3:return o.sent(),[4,qf(r.Oh)];case 4:return o.sent(),[3,6];case 5:return s=o.sent(),a=gc(s,"Failed to persist write"),n.reject(a),[3,6];case 6:return[2]}}))}))}function wl(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:n=Co(t),i.label=1;case 1:return i.trys.push([1,4,,6]),[4,lf(n.Kc,e)];case 2:return r=i.sent(),e.Gt.forEach((function(t,e){var r=n.Kh.get(e);r&&(ko(t.te.size+t.ee.size+t.ne.size<=1),t.te.size>0?r.Fh=!0:t.ee.size>0?ko(r.Fh):t.ne.size>0&&(ko(r.Fh),r.Fh=!1))})),[4,Pl(n,r,e)];case 3:return i.sent(),[3,6];case 4:return[4,wf(i.sent())];case 5:return i.sent(),[3,6];case 6:return[2]}}))}))}function Il(t,e,n){var r=Co(t);if(r.Jh&&0===n||!r.Jh&&1===n){var i=[];r.Bh.forEach((function(t,n){var r=n.view.Bs(e);r.snapshot&&i.push(r.snapshot)})),function(t,e){var n=Co(t);n.onlineState=e;var r=!1;n.queries.forEach((function(t,n){for(var i=0,o=n.listeners;i<o.length;i++)o[i].Bs(e)&&(r=!0)})),r&&_c(n)}(r.Mh,e),i.length&&r.Lh.Rc(i),r.onlineState=e,r.Jh&&r.kh.Zu(e)}}function El(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return(r=Co(t)).kh.Ju(e,"rejected",n),i=r.Kh.get(e),(s=i&&i.key)?(a=(a=new cs(Wo.V)).rt(s,new bu(s,qo.min())),u=Is().add(s),c=new Ns(qo.min(),new Map,new ls(Do),a,u),[4,wl(r,c)]):[3,2];case 1:return o.sent(),r.Qh=r.Qh.remove(s),r.Kh.delete(e),Dl(r),[3,4];case 2:return[4,vf(r.Kc,e,!1).then((function(){return kl(r,e,n)})).catch(wf)];case 3:o.sent(),o.label=4;case 4:return[2]}}))}))}function Al(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:n=Co(t),r=e.batch.batchId,o.label=1;case 1:return o.trys.push([1,4,,6]),[4,hf(n.Kc,e)];case 2:return i=o.sent(),Nl(n,r,null),Sl(n,r),n.kh.Qu(r,"acknowledged"),[4,Pl(n,i)];case 3:return o.sent(),[3,6];case 4:return[4,wf(o.sent())];case 5:return o.sent(),[3,6];case 6:return[2]}}))}))}function _l(t,e,n){return i(this,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:r=Co(t),o.label=1;case 1:return o.trys.push([1,4,,6]),[4,function(t,e){var n=Co(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(function(t){var r;return n.xi.Wr(t,e).next((function(e){return ko(null!==e),r=e.keys(),n.xi.Yr(t,e)})).next((function(){return n.xi.no(t)})).next((function(){return n.Ga.Li(t,r)}))}))}(r.Kc,e)];case 2:return i=o.sent(),Nl(r,e,n),Sl(r,e),r.kh.Qu(e,"rejected",n),[4,Pl(r,i)];case 3:return o.sent(),[3,6];case 4:return[4,wf(o.sent())];case 5:return o.sent(),[3,6];case 6:return[2]}}))}))}function Tl(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a;return o(this,(function(o){switch(o.label){case 0:Lf((n=Co(t)).Oh)||Ao("SyncEngine","The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,function(t){var e=Co(t);return e.persistence.runTransaction("Get highest unacknowledged batch id","readonly",(function(t){return e.xi.zr(t)}))}(n.Kc)];case 2:return-1===(r=o.sent())?[2,void e.resolve()]:((i=n.Gh.get(r)||[]).push(e),n.Gh.set(r,i),[3,4]);case 3:return s=o.sent(),a=gc(s,"Initialization of waitForPendingWrites() operation failed"),e.reject(a),[3,4];case 4:return[2]}}))}))}function Sl(t,e){(t.Gh.get(e)||[]).forEach((function(t){t.resolve()})),t.Gh.delete(e)}function Nl(t,e,n){var r=Co(t),i=r.jh[r.currentUser.Ys()];if(i){var o=i.get(e);o&&(n?o.reject(n):o.resolve(),i=i.remove(e)),r.jh[r.currentUser.Ys()]=i}}function kl(t,e,n){void 0===n&&(n=null),t.kh.Gu(e);for(var r=0,i=t.qh.get(e);r<i.length;r++){var o=i[r];t.Bh.delete(o),n&&t.Lh.Xh(o,n)}t.qh.delete(e),t.Jh&&t.Wh.du(e).forEach((function(e){t.Wh.so(e)||Cl(t,e)}))}function Cl(t,e){var n=t.Qh.get(e);null!==n&&(xf(t.Oh,n),t.Qh=t.Qh.remove(e),t.Kh.delete(n),Dl(t))}function xl(t,e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r];o instanceof hl?(t.Wh.Qo(o.key,e),Ol(t,o)):o instanceof fl?(Ao("SyncEngine","Document no longer in limbo: "+o.key),t.Wh.Wo(o.key,e),t.Wh.so(o.key)||Cl(t,o.key)):No()}}function Ol(t,e){var n=e.key;t.Qh.get(n)||(Ao("SyncEngine","New document in limbo: "+n),t.Uh.push(n),Dl(t))}function Dl(t){for(;t.Uh.length>0&&t.Qh.size<t.$h;){var e=t.Uh.shift(),n=t.zh.next();t.Kh.set(n,new dl(e)),t.Qh=t.Qh.rt(e,n),Cf(t.Oh,new os(xu(Au(e.path)),n,2,Fc.nr))}}function Pl(t,e,n){return i(this,void 0,void 0,(function(){var r,s,a,u;return o(this,(function(c){switch(c.label){case 0:return r=Co(t),s=[],a=[],u=[],r.Bh.T()?[3,3]:(r.Bh.forEach((function(t,i){u.push(r.Yh(i,e,n).then((function(t){if(t){r.Jh&&r.kh.Ju(i.targetId,t.fromCache?"not-current":"current"),s.push(t);var e=Bc.Yi(i.targetId,t);a.push(e)}})))})),[4,Promise.all(u)]);case 1:return c.sent(),r.Lh.Rc(s),[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,h,f;return o(this,(function(o){switch(o.label){case 0:n=Co(t),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(function(t){return rc.forEach(e,(function(e){return rc.forEach(e.Hi,(function(r){return n.persistence.Lr.Qo(t,e.targetId,r)})).next((function(){return rc.forEach(e.Ji,(function(r){return n.persistence.Lr.Wo(t,e.targetId,r)}))}))}))}))];case 2:return o.sent(),[3,4];case 3:if(!ac(r=o.sent()))throw r;return Ao("LocalStore","Failed to update sequence numbers: "+r),[3,4];case 4:for(i=0,s=e;i<s.length;i++)a=s[i],u=a.targetId,a.fromCache||(c=n.Qa.get(u),h=c.et,f=c.it(h),n.Qa=n.Qa.rt(u,f));return[2]}}))}))}(r.Kc,a)];case 2:c.sent(),c.label=3;case 3:return[2]}}))}))}function Rl(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return(n=Co(t)).currentUser.isEqual(e)?[3,3]:(Ao("SyncEngine","User change. New user:",e.Ys()),[4,cf(n.Kc,e)]);case 1:return r=i.sent(),n.currentUser=e,function(t,e){t.Gh.forEach((function(t){t.forEach((function(t){t.reject(new Bo(Uo.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Gh.clear()}(n),n.kh.Xu(e,r.Ja,r.Ya),[4,Pl(n,r.Ha)];case 2:i.sent(),i.label=3;case 3:return[2]}}))}))}function Ll(t,e){var n=Co(t),r=n.Kh.get(e);if(r&&r.Fh)return Is().add(r.key);var i=Is(),o=n.qh.get(e);if(!o)return i;for(var s=0,a=o;s<a.length;s++){var u=a[s],c=n.Bh.get(u);i=i.Ot(c.view.Ph)}return i}function Ml(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return[4,yf((n=Co(t)).Kc,e.query,!0)];case 1:return r=o.sent(),i=e.view.Nh(r),[2,(n.Jh&&xl(n,e.targetId,i.Dh),i)]}}))}))}function Vl(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){return[2,mf((e=Co(t)).Kc).then((function(t){return Pl(e,t)}))]}))}))}function jl(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s;return o(this,(function(o){switch(o.label){case 0:return[4,function(t,e){var n=Co(t),r=Co(n.xi);return n.persistence.runTransaction("Lookup mutation documents","readonly",(function(t){return r.jr(t,e).next((function(e){return e?n.Ga.Li(t,e):rc.resolve(null)}))}))}((i=Co(t)).Kc,e)];case 1:return null===(s=o.sent())?[3,6]:"pending"!==n?[3,3]:[4,qf(i.Oh)];case 2:return o.sent(),[3,4];case 3:"acknowledged"===n||"rejected"===n?(Nl(i,e,r||null),Sl(i,e),function(t,e){Co(Co(t).xi).Zr(e)}(i.Kc,e)):No(),o.label=4;case 4:return[4,Pl(i,s)];case 5:return o.sent(),[3,7];case 6:Ao("SyncEngine","Cannot apply mutation batch with id: "+e),o.label=7;case 7:return[2]}}))}))}function Ul(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,h;return o(this,(function(o){switch(o.label){case 0:return Kl(n=Co(t)),Hl(n),!0!==e||!0===n.Hh?[3,3]:(r=n.kh.$u(),[4,Bl(n,r.O())]);case 1:return i=o.sent(),n.Hh=!0,[4,Yf(n.Oh,!0)];case 2:for(o.sent(),s=0,a=i;s<a.length;s++)u=a[s],Cf(n.Oh,u);return[3,7];case 3:return!1!==e||!1===n.Hh?[3,7]:(c=[],h=Promise.resolve(),n.qh.forEach((function(t,e){n.kh.zu(e)?c.push(e):h=h.then((function(){return kl(n,e),vf(n.Kc,e,!0)})),xf(n.Oh,e)})),[4,h]);case 4:return o.sent(),[4,Bl(n,c)];case 5:return o.sent(),function(t){var e=Co(t);e.Kh.forEach((function(t,n){xf(e.Oh,n)})),e.Wh.wu(),e.Kh=new Map,e.Qh=new cs(Wo.V)}(n),n.Hh=!1,[4,Yf(n.Oh,!1)];case 6:o.sent(),o.label=7;case 7:return[2]}}))}))}function Bl(t,e,n){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u,c,h,f,l,p,d,v,y;return o(this,(function(o){switch(o.label){case 0:n=Co(t),r=[],i=[],s=0,a=e,o.label=1;case 1:return s<a.length?(u=a[s],c=void 0,(h=n.qh.get(u))&&0!==h.length?[4,df(n.Kc,xu(h[0]))]:[3,7]):[3,13];case 2:c=o.sent(),f=0,l=h,o.label=3;case 3:return f<l.length?(p=l[f],d=n.Bh.get(p),[4,Ml(n,d)]):[3,6];case 4:(v=o.sent()).snapshot&&i.push(v.snapshot),o.label=5;case 5:return f++,[3,3];case 6:return[3,11];case 7:return[4,gf(n.Kc,u)];case 8:return y=o.sent(),[4,df(n.Kc,y)];case 9:return c=o.sent(),[4,gl(n,Fl(y),u,!1)];case 10:o.sent(),o.label=11;case 11:r.push(c),o.label=12;case 12:return s++,[3,1];case 13:return[2,(n.Lh.Rc(i),r)]}}))}))}function Fl(t){return Eu(t.path,t.collectionGroup,t.orderBy,t.filters,t.limit,"F",t.startAt,t.endAt)}function ql(t){var e=Co(t);return Co(Co(e.Kc).persistence).Ca()}function Gl(t,e,n,r){return i(this,void 0,void 0,(function(){var i,s,a;return o(this,(function(o){switch(o.label){case 0:return(i=Co(t)).Hh?(Ao("SyncEngine","Ignoring unexpected query state notification."),[3,8]):[3,1];case 1:if(!i.qh.has(e))return[3,8];switch(n){case"current":case"not-current":return[3,2];case"rejected":return[3,5]}return[3,7];case 2:return[4,mf(i.Kc)];case 3:return s=o.sent(),a=Ns.Yt(e,"current"===n),[4,Pl(i,s,a)];case 4:return o.sent(),[3,8];case 5:return[4,vf(i.Kc,e,!0)];case 6:return o.sent(),kl(i,e,r),[3,8];case 7:No(),o.label=8;case 8:return[2]}}))}))}function zl(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a,u,c,h,f,l,p;return o(this,(function(d){switch(d.label){case 0:if(!(r=Kl(t)).Hh)return[3,10];i=0,s=e,d.label=1;case 1:return i<s.length?(a=s[i],r.qh.has(a)?(Ao("SyncEngine","Adding an already active target "+a),[3,5]):[4,gf(r.Kc,a)]):[3,6];case 2:return u=d.sent(),[4,df(r.Kc,u)];case 3:return c=d.sent(),[4,gl(r,Fl(u),c.targetId,!1)];case 4:d.sent(),Cf(r.Oh,c),d.label=5;case 5:return i++,[3,1];case 6:h=function(t){return o(this,(function(e){switch(e.label){case 0:return r.qh.has(t)?[4,vf(r.Kc,t,!1).then((function(){xf(r.Oh,t),kl(r,t)})).catch(wf)]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))},f=0,l=n,d.label=7;case 7:return f<l.length?(p=l[f],[5,h(p)]):[3,10];case 8:d.sent(),d.label=9;case 9:return f++,[3,7];case 10:return[2]}}))}))}function Kl(t){var e=Co(t);return e.Oh.jc.nu=wl.bind(null,e),e.Oh.jc.Be=Ll.bind(null,e),e.Oh.jc.eu=El.bind(null,e),e.Lh.Rc=Ec.bind(null,e.Mh),e.Lh.Xh=Ac.bind(null,e.Mh),e}function Hl(t){var e=Co(t);return e.Oh.jc.su=Al.bind(null,e),e.Oh.jc.iu=_l.bind(null,e),e}var Wl=function(){function t(){}return t.prototype.za=function(t){this.Zh=t},t.prototype.Ui=function(t,e,n,r){var i=this;return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.rn.length||1===t.rn.length&&t.rn[0].field.B())}(e)||n.isEqual(qo.min())?this.tl(t,e):this.Zh.Li(t,r).next((function(o){var s=i.el(e,o);return(_u(e)||Tu(e))&&i.ph(e.limitType,s,r,n)?i.tl(t,e):(Eo()<=P.DEBUG&&Ao("IndexFreeQueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),Mu(e)),i.Zh.Ui(t,e,n).next((function(t){return s.forEach((function(e){t=t.rt(e.key,e)})),t})))}))},t.prototype.el=function(t,e){var n=new ls(ju(t));return e.forEach((function(e,r){r instanceof mu&&Vu(t,r)&&(n=n.add(r))})),n},t.prototype.ph=function(t,e,n,r){if(n.size!==e.size)return!0;var i="F"===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.A(r)>0)},t.prototype.tl=function(t,e){return Eo()<=P.DEBUG&&Ao("IndexFreeQueryEngine","Using full collection scan to execute query:",Mu(e)),this.Zh.Ui(t,e,qo.min())},t}(),Xl=function(){function t(t,e){this.Fi=t,this.Lr=e,this.xi=[],this.nl=1,this.sl=new ls(Zf.cu)}return t.prototype.Ur=function(t){return rc.resolve(0===this.xi.length)},t.prototype.Qr=function(t,e,n,r){var i=this.nl;this.nl++,this.xi.length>0&&this.xi[this.xi.length-1];var o=new Dc(i,e,n,r);this.xi.push(o);for(var s=0,a=r;s<a.length;s++){var u=a[s];this.sl=this.sl.add(new Zf(u.key,i)),this.Fi.Kr(t,u.key.path.S())}return rc.resolve(o)},t.prototype.Wr=function(t,e){return rc.resolve(this.il(e))},t.prototype.Gr=function(t,e){var n=e+1,r=this.rl(n),i=r<0?0:r;return rc.resolve(this.xi.length>i?this.xi[i]:null)},t.prototype.zr=function(){return rc.resolve(0===this.xi.length?-1:this.nl-1)},t.prototype.Hr=function(t){return rc.resolve(this.xi.slice())},t.prototype.Mi=function(t,e){var n=this,r=new Zf(e,0),i=new Zf(e,Number.POSITIVE_INFINITY),o=[];return this.sl.Nt([r,i],(function(t){var e=n.il(t.Eu);o.push(e)})),rc.resolve(o)},t.prototype.qi=function(t,e){var n=this,r=new ls(Do);return e.forEach((function(t){var e=new Zf(t,0),i=new Zf(t,Number.POSITIVE_INFINITY);n.sl.Nt([e,i],(function(t){r=r.add(t.Eu)}))})),rc.resolve(this.ol(r))},t.prototype.Gi=function(t,e){var n=e.path,r=n.length+1,i=n;Wo.G(i)||(i=i.child(""));var o=new Zf(new Wo(i),0),s=new ls(Do);return this.sl.xt((function(t){var e=t.key.path;return!!n.N(e)&&(e.length===r&&(s=s.add(t.Eu)),!0)}),o),rc.resolve(this.ol(s))},t.prototype.ol=function(t){var e=this,n=[];return t.forEach((function(t){var r=e.il(t);null!==r&&n.push(r)})),n},t.prototype.Yr=function(t,e){var n=this;ko(0===this.al(e.batchId,"removed")),this.xi.shift();var r=this.sl;return rc.forEach(e.mutations,(function(i){var o=new Zf(i.key,e.batchId);return r=r.delete(o),n.Lr.eo(t,i.key)})).next((function(){n.sl=r}))},t.prototype.Zr=function(t){},t.prototype.so=function(t,e){var n=new Zf(e,0),r=this.sl.Ft(n);return rc.resolve(e.isEqual(r&&r.key))},t.prototype.no=function(t){return this.xi.length,rc.resolve()},t.prototype.al=function(t,e){return this.rl(t)},t.prototype.rl=function(t){return 0===this.xi.length?0:t-this.xi[0].batchId},t.prototype.il=function(t){var e=this.rl(t);return e<0||e>=this.xi.length?null:this.xi[e]},t}(),Yl=function(){function t(t,e){this.Fi=t,this.cl=e,this.docs=new cs(Wo.V),this.size=0}return t.prototype.Ri=function(t,e,n){var r=e.key,i=this.docs.get(r),o=i?i.size:0,s=this.cl(e);return this.docs=this.docs.rt(r,{gi:e,size:s,readTime:n}),this.size+=s-o,this.Fi.Kr(t,r.path.S())},t.prototype.Vi=function(t){var e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)},t.prototype.yi=function(t,e){var n=this.docs.get(e);return rc.resolve(n?n.gi:null)},t.prototype.getEntries=function(t,e){var n=this,r=ys();return e.forEach((function(t){var e=n.docs.get(t);r=r.rt(t,e?e.gi:null)})),rc.resolve(r)},t.prototype.Ui=function(t,e,n){for(var r=ms(),i=new Wo(e.path.child("")),o=this.docs._t(i);o.It();){var s=o.Et(),a=s.key,u=s.value,c=u.gi,h=u.readTime;if(!e.path.N(a.path))break;h.A(n)<=0||c instanceof mu&&Vu(e,c)&&(r=r.rt(c.key,c))}return rc.resolve(r)},t.prototype.ul=function(t,e){return rc.forEach(this.docs,(function(t){return e(t)}))},t.prototype._o=function(t){return new Jl(this)},t.prototype.wo=function(t){return rc.resolve(this.size)},t}(),Jl=function(t){function n(e){var n=this;return(n=t.call(this)||this).To=e,n}return e(n,t),n.prototype.bi=function(t){var e=this,n=[];return this.Ii.forEach((function(r,i){i&&i.gi?n.push(e.To.Ri(t,i.gi,e.Ai(r))):e.To.Vi(r)})),rc.xn(n)},n.prototype.pi=function(t,e){return this.To.yi(t,e)},n.prototype.vi=function(t,e){return this.To.getEntries(t,e)},n}(Rc),Ql=function(){function t(t){this.persistence=t,this.hl=new jo((function(t){return Zo(t)}),ts),this.lastRemoteSnapshotVersion=qo.min(),this.highestTargetId=0,this.ll=0,this._l=new $f,this.targetCount=0,this.fl=Wh.po()}return t.prototype.De=function(t,e){return this.hl.forEach((function(t,n){return e(n)})),rc.resolve()},t.prototype.Co=function(t){return rc.resolve(this.lastRemoteSnapshotVersion)},t.prototype.No=function(t){return rc.resolve(this.ll)},t.prototype.bo=function(t){return this.highestTargetId=this.fl.next(),rc.resolve(this.highestTargetId)},t.prototype.xo=function(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.ll&&(this.ll=e),rc.resolve()},t.prototype.Oo=function(t){this.hl.set(t.target,t);var e=t.targetId;e>this.highestTargetId&&(this.fl=new Wh(e),this.highestTargetId=e),t.sequenceNumber>this.ll&&(this.ll=t.sequenceNumber)},t.prototype.Fo=function(t,e){return this.Oo(e),this.targetCount+=1,rc.resolve()},t.prototype.ko=function(t,e){return this.Oo(e),rc.resolve()},t.prototype.$o=function(t,e){return this.hl.delete(e.target),this._l.du(e.targetId),this.targetCount-=1,rc.resolve()},t.prototype.Nr=function(t,e,n){var r=this,i=0,o=[];return this.hl.forEach((function(s,a){a.sequenceNumber<=e&&null===n.get(a.targetId)&&(r.hl.delete(s),o.push(r.Lo(t,a.targetId)),i++)})),rc.xn(o).next((function(){return i}))},t.prototype.Bo=function(t){return rc.resolve(this.targetCount)},t.prototype.qo=function(t,e){var n=this.hl.get(e)||null;return rc.resolve(n)},t.prototype.Uo=function(t,e,n){return this._l.lu(e,n),rc.resolve()},t.prototype.Ko=function(t,e,n){this._l.fu(e,n);var r=this.persistence.Lr,i=[];return r&&e.forEach((function(e){i.push(r.eo(t,e))})),rc.xn(i)},t.prototype.Lo=function(t,e){return this._l.du(e),rc.resolve()},t.prototype.jo=function(t,e){var n=this._l.Tu(e);return rc.resolve(n)},t.prototype.so=function(t,e){return rc.resolve(this._l.so(e))},t}(),$l=function(){function t(t){this.serializer=t,this.dl=new Map,this.wl=new Map}return t.prototype.mo=function(t,e){return rc.resolve(this.dl.get(e))},t.prototype.Ao=function(t,e){var n;return this.dl.set(e.id,{id:(n=e).id,version:n.version,createTime:fa(n.createTime)}),rc.resolve()},t.prototype.Ro=function(t,e){return rc.resolve(this.wl.get(e))},t.prototype.Po=function(t,e){var n;return this.wl.set(e.name,{name:(n=e).name,query:uh(n.bundledQuery),readTime:fa(n.readTime)}),rc.resolve()},t}(),Zl=function(){function t(t,e){var n=this;this.Tl={},this.Jo=new Fc(0),this.Yo=!1,this.Yo=!0,this.Lr=t(this),this.ra=new Ql(this),this.Fi=new Ih,this.Ni=function(t,e){return new Yl(t,(function(t){return n.Lr.El(t)}))}(this.Fi),this.serializer=new $c(e),this.oa=new $l(this.serializer)}return t.prototype.start=function(){return Promise.resolve()},t.prototype.pa=function(){return this.Yo=!1,Promise.resolve()},Object.defineProperty(t.prototype,"yr",{get:function(){return this.Yo},enumerable:!1,configurable:!0}),t.prototype.fa=function(){},t.prototype.da=function(){},t.prototype.Oa=function(){return this.Fi},t.prototype.Na=function(t){var e=this.Tl[t.Ys()];return e||(e=new Xl(this.Fi,this.Lr),this.Tl[t.Ys()]=e),e},t.prototype.xa=function(){return this.ra},t.prototype.Fa=function(){return this.Ni},t.prototype.Ma=function(){return this.oa},t.prototype.runTransaction=function(t,e,n){var r=this;Ao("MemoryPersistence","Starting transaction:",t);var i=new tp(this.Jo.next());return this.Lr.Il(),n(i).next((function(t){return r.Lr.ml(i).next((function(){return t}))})).Cn().then((function(t){return i.Ci(),t}))},t.prototype.Al=function(t,e){return rc.Fn(Object.values(this.Tl).map((function(n){return function(){return n.so(t,e)}})))},t}(),tp=function(t){function n(e){var n=this;return(n=t.call(this)||this).Go=e,n}return e(n,t),n}(jc),ep=function(){function t(t){this.persistence=t,this.Rl=new $f,this.Pl=null}return t.gl=function(e){return new t(e)},Object.defineProperty(t.prototype,"Vl",{get:function(){if(this.Pl)return this.Pl;throw No()},enumerable:!1,configurable:!0}),t.prototype.Qo=function(t,e,n){return this.Rl.Qo(n,e),this.Vl.delete(n.toString()),rc.resolve()},t.prototype.Wo=function(t,e,n){return this.Rl.Wo(n,e),this.Vl.add(n.toString()),rc.resolve()},t.prototype.eo=function(t,e){return this.Vl.add(e.toString()),rc.resolve()},t.prototype.removeTarget=function(t,e){var n=this;this.Rl.du(e.targetId).forEach((function(t){return n.Vl.add(t.toString())}));var r=this.persistence.xa();return r.jo(t,e.targetId).next((function(t){t.forEach((function(t){return n.Vl.add(t.toString())}))})).next((function(){return r.$o(t,e)}))},t.prototype.Il=function(){this.Pl=new Set},t.prototype.ml=function(t){var e=this,n=this.persistence.Fa()._o();return rc.forEach(this.Vl,(function(r){var i=Wo.K(r);return e.yl(t,i).next((function(t){t||n.Vi(i)}))})).next((function(){return e.Pl=null,n.apply(t)}))},t.prototype.qa=function(t,e){var n=this;return this.yl(t,e).next((function(t){t?n.Vl.delete(e.toString()):n.Vl.add(e.toString())}))},t.prototype.El=function(t){return 0},t.prototype.yl=function(t,e){var n=this;return rc.Fn([function(){return rc.resolve(n.Rl.so(e))},function(){return n.persistence.xa().so(t,e)},function(){return n.persistence.Al(t,e)}])},t}(),np=function(){function t(t){this.pl=t.pl,this.vl=t.vl}return t.prototype.mc=function(t){this.bl=t},t.prototype.dc=function(t){this.Sl=t},t.prototype.onMessage=function(t){this.Dl=t},t.prototype.close=function(){this.vl()},t.prototype.send=function(t){this.pl(t)},t.prototype.Cl=function(){this.bl()},t.prototype.Nl=function(t){this.Sl(t)},t.prototype.xl=function(t){this.Dl(t)},t}(),rp={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"},ip=function(t){function n(e){var n=this;return(n=t.call(this,e)||this).forceLongPolling=e.forceLongPolling,n.i=e.i,n}return e(n,t),n.prototype.Ll=function(t,e,n,r){return new Promise((function(i,o){var s=new mo;s.listenOnce(yo.COMPLETE,(function(){try{switch(s.getLastErrorCode()){case vo.NO_ERROR:var e=s.getResponseJson();Ao("Connection","XHR received:",JSON.stringify(e)),i(e);break;case vo.TIMEOUT:Ao("Connection",'RPC "'+t+'" timed out'),o(new Bo(Uo.DEADLINE_EXCEEDED,"Request time out"));break;case vo.HTTP_ERROR:var n=s.getStatus();if(Ao("Connection",'RPC "'+t+'" failed with status:',n,"response text:",s.getResponseText()),n>0){var r=s.getResponseJson().error;if(r&&r.status&&r.message){var a=function(t){var e=t.toLowerCase().replace("_","-");return Object.values(Uo).indexOf(e)>=0?e:Uo.UNKNOWN}(r.status);o(new Bo(a,r.message))}else o(new Bo(Uo.UNKNOWN,"Server responded with status "+s.getStatus()))}else o(new Bo(Uo.UNAVAILABLE,"Connection failed."));break;default:No()}}finally{Ao("Connection",'RPC "'+t+'" completed.')}}));var a=JSON.stringify(r);s.send(e,"POST",a,n,15)}))},n.prototype.Ac=function(t,e){var n=[this.Ol,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=new co,i={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:"projects/"+this.t.projectId+"/databases/"+this.t.database},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.i};this.$l(i.initMessageHeaders,e),"undefined"!=typeof window&&(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(l())||"object"==typeof navigator&&"ReactNative"===navigator.product||l().indexOf("Electron/")>=0||function(){var t=l();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}()||l().indexOf("MSAppHost/")>=0||d()||(i.httpHeadersOverwriteParam="$httpHeaders");var o=n.join("");Ao("Connection","Creating WebChannel: "+o,i);var s=r.createWebChannel(o,i),a=!1,u=!1,c=new np({pl:function(t){u?Ao("Connection","Not sending because WebChannel is closed:",t):(a||(Ao("Connection","Opening WebChannel transport."),s.open(),a=!0),Ao("Connection","WebChannel sending:",t),s.send(t))},vl:function(){return s.close()}}),h=function(t,e){s.listen(t,(function(t){try{e(t)}catch(t){setTimeout((function(){throw t}),0)}}))};return h(go.EventType.OPEN,(function(){u||Ao("Connection","WebChannel transport opened.")})),h(go.EventType.CLOSE,(function(){u||(u=!0,Ao("Connection","WebChannel transport closed"),c.Nl())})),h(go.EventType.ERROR,(function(t){u||(u=!0,To("Connection","WebChannel transport errored:",t),c.Nl(new Bo(Uo.UNAVAILABLE,"The operation could not be completed")))})),h(go.EventType.MESSAGE,(function(t){var e;if(!u){var n=t.data[0];ko(!!n);var r=n,i=r.error||(null===(e=r[0])||void 0===e?void 0:e.error);if(i){Ao("Connection","WebChannel received error:",i);var o=i.status,a=function(t){var e=rs[t];if(void 0!==e)return us(e)}(o),h=i.message;void 0===a&&(a=Uo.INTERNAL,h="Unknown error status: "+o+" with message "+i.message),u=!0,c.Nl(new Bo(a,h)),s.close()}else Ao("Connection","WebChannel received:",n),c.xl(n)}})),setTimeout((function(){c.Cl()}),0),c},n}(function(){function t(t){this.Fl=t,this.t=t.t;var e=t.ssl?"https":"http";this.Ol=e+"://"+t.host,this.Ml="projects/"+this.t.projectId+"/databases/"+this.t.database+"/documents"}return t.prototype.xc=function(t,e,n,r){var i=this.kl(t,e);Ao("RestConnection","Sending: ",i,n);var o={};return this.$l(o,r),this.Ll(t,i,o,n).then((function(t){return Ao("RestConnection","Received: ",t),t}),(function(e){throw To("RestConnection",t+" failed with error: ",e,"url: ",i,"request:",n),e}))},t.prototype.Fc=function(t,e,n,r){return this.xc(t,e,n,r)},t.prototype.$l=function(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/8.0.2",t["Content-Type"]="text/plain",e)for(var n in e.ti)e.ti.hasOwnProperty(n)&&(t[n]=e.ti[n])},t.prototype.kl=function(t,e){var n=rp[t];return this.Ol+"/v1/"+e+":"+n},t}()),op=function(){function t(){var t=this;this.Bl=function(){return t.ql()},this.Ul=function(){return t.Ql()},this.Kl=[],this.Wl()}return t.prototype.Xc=function(t){this.Kl.push(t)},t.prototype.pa=function(){window.removeEventListener("online",this.Bl),window.removeEventListener("offline",this.Ul)},t.prototype.Wl=function(){window.addEventListener("online",this.Bl),window.addEventListener("offline",this.Ul)},t.prototype.ql=function(){Ao("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(var t=0,e=this.Kl;t<e.length;t++)(0,e[t])(0)},t.prototype.Ql=function(){Ao("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(var t=0,e=this.Kl;t<e.length;t++)(0,e[t])(1)},t.kn=function(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener},t}(),sp=function(){function t(){}return t.prototype.Xc=function(t){},t.prototype.pa=function(){},t}(),ap=function(){function t(){this.synchronizeTabs=!1}return t.prototype.initialize=function(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return this.serializer=Lc(t.Fl.t),this.kh=this.jl(t),this.persistence=this.Gl(t),[4,this.persistence.start()];case 1:return e.sent(),this.zl=this.Hl(t),this.Kc=this.Jl(t),[2]}}))}))},t.prototype.Hl=function(t){return null},t.prototype.Jl=function(t){return uf(this.persistence,new Wl,t.Yl,this.serializer)},t.prototype.Gl=function(t){return new Zl(ep.gl,this.serializer)},t.prototype.jl=function(t){return new cl},t.prototype.terminate=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return this.zl&&this.zl.stop(),[4,this.kh.pa()];case 1:return t.sent(),[4,this.persistence.pa()];case 2:return t.sent(),[2]}}))}))},t}(),up=function(t){function n(e,n,r){var i=this;return(i=t.call(this)||this).Xl=e,i.cacheSizeBytes=n,i.forceOwnership=r,i.synchronizeTabs=!1,i}return e(n,t),n.prototype.initialize=function(e){return i(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,t.prototype.initialize.call(this,e)];case 1:return n.sent(),[4,bf(this.Kc)];case 2:return n.sent(),[4,this.Xl.initialize(this,e)];case 3:return n.sent(),[4,Hl(this.Xl.gu)];case 4:return n.sent(),[4,qf(this.Xl.Oh)];case 5:return n.sent(),[2]}}))}))},n.prototype.Jl=function(t){return uf(this.persistence,new Wl,t.Yl,this.serializer)},n.prototype.Hl=function(t){var e=this.persistence.Lr.Rr;return new Hc(e,t.rs)},n.prototype.Gl=function(t){var e=sf(t.Fl.t,t.Fl.persistenceKey),n=void 0!==this.cacheSizeBytes?Kc.Tr(this.cacheSizeBytes):Kc.mr;return new tf(this.synchronizeTabs,e,t.clientId,n,t.rs,pc(),dc(),this.serializer,this.kh,!!this.forceOwnership)},n.prototype.jl=function(t){return new cl},n}(ap),cp=function(t){function n(e,n){var r=this;return(r=t.call(this,e,n,!1)||this).Xl=e,r.cacheSizeBytes=n,r.synchronizeTabs=!0,r}return e(n,t),n.prototype.initialize=function(e){return i(this,void 0,void 0,(function(){var n,r=this;return o(this,(function(s){switch(s.label){case 0:return[4,t.prototype.initialize.call(this,e)];case 1:return s.sent(),n=this.Xl.gu,this.kh instanceof ul?(this.kh.gu={_h:jl.bind(null,n),fh:Gl.bind(null,n),dh:zl.bind(null,n),Ca:ql.bind(null,n),lh:Vl.bind(null,n)},[4,this.kh.start()]):[3,3];case 2:s.sent(),s.label=3;case 3:return[4,this.persistence._a((function(t){return i(r,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,Ul(this.Xl.gu,t)];case 1:return e.sent(),this.zl&&(t&&!this.zl.yr?this.zl.start(this.Kc):t||this.zl.stop()),[2]}}))}))}))];case 4:return s.sent(),[2]}}))}))},n.prototype.jl=function(t){var e=pc();if(!ul.kn(e))throw new Bo(Uo.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");var n=sf(t.Fl.t,t.Fl.persistenceKey);return new ul(e,t.rs,n,t.clientId,t.Yl)},n}(up),hp=function(){function t(){}return t.prototype.initialize=function(t,e){return i(this,void 0,void 0,(function(){var n=this;return o(this,(function(r){switch(r.label){case 0:return this.Kc?[3,2]:(this.Kc=t.Kc,this.kh=t.kh,this.Wc=this.Zl(e),this.Oh=this.t_(e),this.Mh=this.e_(e),this.gu=this.n_(e,!t.synchronizeTabs),this.kh.Oc=function(t){return Il(n.gu,t,1)},this.Oh.jc.s_=Rl.bind(null,this.gu),[4,Yf(this.Oh,this.gu.Jh)]);case 1:r.sent(),r.label=2;case 2:return[2]}}))}))},t.prototype.e_=function(t){return new bc},t.prototype.Zl=function(t){var e,n=Lc(t.Fl.t),r=(e=t.Fl,new ip(e));return function(t,e,n){return new _f(t,e,n)}(t.credentials,r,n)},t.prototype.t_=function(t){var e,n,r,i,o,s=this;return e=this.Kc,n=this.Wc,r=t.rs,i=function(t){return Il(s.gu,t,0)},o=op.kn()?new op:new sp,new Sf(e,n,r,i,o)},t.prototype.n_=function(t,e){return function(t,e,n,r,i,o,s){var a=new vl(t,e,n,r,i,o);return s&&(a.Hh=!0),a}(this.Kc,this.Oh,this.Mh,this.kh,t.Yl,t.$h,e)},t.prototype.terminate=function(){return function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=Co(t),Ao("RemoteStore","RemoteStore shutting down."),e.Hc.add(5),[4,kf(e)];case 1:return n.sent(),e.Yc.pa(),e.Zc.set("Unknown"),[2]}}))}))}(this.Oh)},t}(),fp=function(){function t(t){this.observer=t,this.muted=!1}return t.prototype.next=function(t){this.observer.next&&this.i_(this.observer.next,t)},t.prototype.error=function(t){this.observer.error?this.i_(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t)},t.prototype.r_=function(){this.muted=!0},t.prototype.i_=function(t,e){var n=this;this.muted||setTimeout((function(){n.muted||t(e)}),0)},t}(),lp=function(t){this.o_=t};function pp(t,e,n){if(!n)throw new Bo(Uo.INVALID_ARGUMENT,"Function "+t+"() cannot be called with an empty "+e+".")}function dp(t,e){if(void 0===e)return{merge:!1};if(void 0!==e.mergeFields&&void 0!==e.merge)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid options passed to function "+t+'(): You cannot specify both "merge" and "mergeFields".');return e}function vp(t,e,n,r){if(!0===e&&!0===r)throw new Bo(Uo.INVALID_ARGUMENT,t+" and "+n+" cannot be used together.")}function yp(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=t.substring(0,20)+"..."),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";var e=function(t){if(t.constructor){var e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?"a custom "+e+" object":"an object"}return"function"==typeof t?"a function":No()}function gp(t,e){if(t instanceof lp&&(t=t.o_),!(t instanceof e)){if(e.name===t.constructor.name)throw new Bo(Uo.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");var n=yp(t);throw new Bo(Uo.INVALID_ARGUMENT,"Expected type '"+e.name+"', but it was: "+n)}return t}function mp(t,e){if(e<=0)throw new Bo(Uo.INVALID_ARGUMENT,"Function "+t+"() requires a positive number, but it was: "+e+".")}var bp=function(t){this.a_=t},wp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.c_=function(t){if(2!==t.u_)throw 1===t.u_?t.h_(this.a_+"() can only appear at the top level of your update data"):t.h_(this.a_+"() cannot be used with set() unless you pass {merge:true}");return t.Qe.push(t.path),null},n.prototype.isEqual=function(t){return t instanceof n},n}(bp);function Ip(t,e,n){return new Wp({u_:3,l_:e.settings.l_,methodName:t.a_,__:n},e.t,e.serializer,e.ignoreUndefinedProperties)}var Ep=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.c_=function(t){return new Ja(t.path,new Fa)},n.prototype.isEqual=function(t){return t instanceof n},n}(bp),Ap=function(t){function n(e,n){var r=this;return(r=t.call(this,e)||this).f_=n,r}return e(n,t),n.prototype.c_=function(t){var e=Ip(this,t,!0),n=this.f_.map((function(t){return Zp(t,e)})),r=new qa(n);return new Ja(t.path,r)},n.prototype.isEqual=function(t){return this===t},n}(bp),_p=function(t){function n(e,n){var r=this;return(r=t.call(this,e)||this).f_=n,r}return e(n,t),n.prototype.c_=function(t){var e=Ip(this,t,!0),n=this.f_.map((function(t){return Zp(t,e)})),r=new za(n);return new Ja(t.path,r)},n.prototype.isEqual=function(t){return this===t},n}(bp),Tp=function(t){function n(e,n){var r=this;return(r=t.call(this,e)||this).d_=n,r}return e(n,t),n.prototype.c_=function(t){var e=new Ha(t.serializer,aa(t.serializer,this.d_));return new Ja(t.path,e)},n.prototype.isEqual=function(t){return this===t},n}(bp),Sp=function(){function t(t,e){if(!isFinite(t)||t<-90||t>90)throw new Bo(Uo.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new Bo(Uo.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this.w_=t,this.T_=e}return Object.defineProperty(t.prototype,"latitude",{get:function(){return this.w_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"longitude",{get:function(){return this.T_},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){return this.w_===t.w_&&this.T_===t.T_},t.prototype.toJSON=function(){return{latitude:this.w_,longitude:this.T_}},t.prototype.I=function(t){return Do(this.w_,t.w_)||Do(this.T_,t.T_)},t}(),Np=function(){function t(t){this.E_=t}return t.fromBase64String=function(e){try{return new t(ns.fromBase64String(e))}catch(e){throw new Bo(Uo.INVALID_ARGUMENT,"Failed to construct Bytes from Base64 string: "+e)}},t.fromUint8Array=function(e){return new t(ns.fromUint8Array(e))},t.prototype.toBase64=function(){return this.E_.toBase64()},t.prototype.toUint8Array=function(){return this.E_.toUint8Array()},t.prototype.toString=function(){return"Bytes(base64: "+this.toBase64()+")"},t.prototype.isEqual=function(t){return this.E_.isEqual(t.E_)},t}(),kp=new Map,Cp=function(){function t(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new Bo(Uo.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new Bo(Uo.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,vp("experimentalForceLongPolling",t.experimentalForceLongPolling,"experimentalAutoDetectLongPolling",t.experimentalAutoDetectLongPolling)}return t.prototype.isEqual=function(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties},t}();function xp(){if("undefined"==typeof Uint8Array)throw new Bo(Uo.UNIMPLEMENTED,"Uint8Arrays are not available in this environment.")}function Op(){if("undefined"==typeof atob)throw new Bo(Uo.UNIMPLEMENTED,"Blobs are unavailable in Firestore in this environment.")}var Dp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.fromBase64String=function(t){Op();try{return new n(ns.fromBase64String(t))}catch(t){throw new Bo(Uo.INVALID_ARGUMENT,"Failed to construct Blob from Base64 string: "+t)}},n.fromUint8Array=function(t){return xp(),new n(ns.fromUint8Array(t))},n.prototype.toBase64=function(){return Op(),t.prototype.toBase64.call(this)},n.prototype.toUint8Array=function(){return xp(),t.prototype.toUint8Array.call(this)},n.prototype.toString=function(){return"Blob(base64: "+this.toBase64()+")"},n}(Np),Pp=function(){function t(){}return t.prototype.I_=function(t,e){switch(void 0===e&&(e="none"),Bs(t)){case 0:return null;case 1:return t.booleanValue;case 2:return Xs(t.integerValue||t.doubleValue);case 3:return this.m_(t.timestampValue);case 4:return this.A_(t,e);case 5:return t.stringValue;case 6:return this.R_(Ys(t.bytesValue));case 7:return this.P_(t.referenceValue);case 8:return this.g_(t.geoPointValue);case 9:return this.V_(t.arrayValue,e);case 10:return this.y_(t.mapValue,e);default:throw No()}},t.prototype.y_=function(t,e){var n=this,r={};return Mo(t.fields||{},(function(t,i){r[t]=n.I_(i,e)})),r},t.prototype.g_=function(t){return new Sp(Xs(t.latitude),Xs(t.longitude))},t.prototype.V_=function(t,e){var n=this;return(t.values||[]).map((function(t){return n.I_(t,e)}))},t.prototype.A_=function(t,e){switch(e){case"previous":var n=Vs(t);return null==n?null:this.I_(n,e);case"estimate":return this.m_(js(t));default:return null}},t.prototype.m_=function(t){var e=Ws(t);return new Fo(e.seconds,e.nanos)},t.prototype.p_=function(t,e){var n=zo.k(t);ko(Ma(n));var r=new wo(n.get(1),n.get(3)),i=new Wo(n.v(5));return r.isEqual(e)||_o("Document "+i+" contains a document reference within a different database ("+r.projectId+"/"+r.database+") which is not supported. It will be treated as a reference in the current database ("+e.projectId+"/"+e.database+") instead."),i},t}(),Rp=function(t){function n(e){var n=this;return(n=t.call(this)||this).firestore=e,n}return e(n,t),n.prototype.R_=function(t){return new Dp(t)},n.prototype.P_=function(t){var e=this.p_(t,this.firestore.v_);return Fd.b_(e,this.firestore,null)},n}(Pp),Lp=function(){function t(t,e,n,r,i){this.S_=t,this.D_=e,this.C_=n,this.N_=r,this.x_=i}return Object.defineProperty(t.prototype,"id",{get:function(){return this.C_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"ref",{get:function(){return new Up(this.S_,this.x_,this.C_)},enumerable:!1,configurable:!0}),t.prototype.exists=function(){return null!==this.N_},t.prototype.data=function(){if(this.N_){if(this.x_){var t=new Mp(this.S_,this.D_,this.C_,this.N_,null);return this.x_.fromFirestore(t)}return this.D_.I_(this.N_.sn())}},t.prototype.get=function(t){if(this.N_){var e=this.N_.data().field(Vp("DocumentSnapshot.get",t));if(null!==e)return this.D_.I_(e)}},t}(),Mp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.data=function(){return t.prototype.data.call(this)},n}(Lp);function Vp(t,e){return"string"==typeof e?od(t,e):e instanceof lp?e.o_.F_:e.F_}var jp=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=0;n<t.length;++n)if(0===t[n].length)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this.F_=new Ho(t)}return t.prototype.isEqual=function(t){return this.F_.isEqual(t.F_)},t}(),Up=function(){function t(t,e,n){this.x_=e,this.C_=n,this.type="document",this.firestore=t}return Object.defineProperty(t.prototype,"O_",{get:function(){return this.C_.path},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"id",{get:function(){return this.C_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"path",{get:function(){return this.C_.path.M()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return new Fp(this.firestore,this.x_,this.C_.path.S())},enumerable:!1,configurable:!0}),t.prototype.withConverter=function(e){return new t(this.firestore,e,this.C_)},t}(),Bp=function(){function t(t,e,n){this.x_=e,this.M_=n,this.type="query",this.firestore=t}return t.prototype.withConverter=function(e){return new t(this.firestore,e,this.M_)},t}(),Fp=function(t){function n(e,n,r){var i=this;return(i=t.call(this,e,n,Au(r))||this).firestore=e,i.O_=r,i.type="collection",i}return e(n,t),Object.defineProperty(n.prototype,"id",{get:function(){return this.M_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"path",{get:function(){return this.M_.path.M()},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"parent",{get:function(){var t=this.O_.S();return t.T()?null:new Up(this.firestore,null,new Wo(t))},enumerable:!1,configurable:!0}),n.prototype.withConverter=function(t){return new n(this.firestore,t,this.O_)},n}(Bp);function qp(t){var e=t.k_(),n=Lc(t.v_);return new Xp(t.v_,!!e.ignoreUndefinedProperties,n)}var Gp=/^__.*__$/,zp=function(){function t(t,e,n){this.data=t,this.Qe=e,this.fieldTransforms=n}return t.prototype.L_=function(t,e){var n=[];return null!==this.Qe?n.push(new au(t,this.data,this.Qe,e)):n.push(new su(t,this.data,e)),this.fieldTransforms.length>0&&n.push(new cu(t,this.fieldTransforms)),n},t}(),Kp=function(){function t(t,e,n){this.data=t,this.Qe=e,this.fieldTransforms=n}return t.prototype.L_=function(t,e){var n=[new au(t,this.data,this.Qe,e)];return this.fieldTransforms.length>0&&n.push(new cu(t,this.fieldTransforms)),n},t}();function Hp(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw No()}}var Wp=function(){function t(t,e,n,r,i,o){this.settings=t,this.t=e,this.serializer=n,this.ignoreUndefinedProperties=r,void 0===i&&this.B_(),this.fieldTransforms=i||[],this.Qe=o||[]}return Object.defineProperty(t.prototype,"path",{get:function(){return this.settings.path},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"u_",{get:function(){return this.settings.u_},enumerable:!1,configurable:!0}),t.prototype.q_=function(e){return new t(Object.assign(Object.assign({},this.settings),e),this.t,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.Qe)},t.prototype.U_=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.q_({path:n,__:!1});return r.Q_(t),r},t.prototype.K_=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.q_({path:n,__:!1});return r.B_(),r},t.prototype.W_=function(t){return this.q_({path:void 0,__:!0})},t.prototype.h_=function(t){return sd(t,this.settings.methodName,this.settings.j_||!1,this.path,this.settings.l_)},t.prototype.contains=function(t){return void 0!==this.Qe.find((function(e){return t.N(e)}))||void 0!==this.fieldTransforms.find((function(e){return t.N(e.field)}))},t.prototype.B_=function(){if(this.path)for(var t=0;t<this.path.length;t++)this.Q_(this.path.get(t))},t.prototype.Q_=function(t){if(0===t.length)throw this.h_("Document fields must not be empty");if(Hp(this.u_)&&Gp.test(t))throw this.h_('Document fields cannot begin and end with "__"')},t}(),Xp=function(){function t(t,e,n){this.t=t,this.ignoreUndefinedProperties=e,this.serializer=n||Lc(t)}return t.prototype.G_=function(t,e,n,r){return void 0===r&&(r=!1),new Wp({u_:t,methodName:e,l_:n,path:Ho.$(),__:!1,j_:r},this.t,this.serializer,this.ignoreUndefinedProperties)},t}();function Yp(t,e,n,r,i,o){void 0===o&&(o={});var s=t.G_(o.merge||o.mergeFields?2:0,e,n,i);nd("Data must be an object, but it was:",s,r);var a,u,c=td(r,s);if(o.merge)a=new Ya(s.Qe),u=s.fieldTransforms;else if(o.mergeFields){for(var h=[],f=0,l=o.mergeFields;f<l.length;f++){var p=rd(e,l[f],n);if(!s.contains(p))throw new Bo(Uo.INVALID_ARGUMENT,"Field '"+p+"' is specified in your field mask but missing from your input data.");ad(h,p)||h.push(p)}a=new Ya(h),u=s.fieldTransforms.filter((function(t){return a.He(t.field)}))}else a=null,u=s.fieldTransforms;return new zp(new du(c),a,u)}function Jp(t,e,n,r){var i=t.G_(1,e,n);nd("Data must be an object, but it was:",i,r);var o=[],s=new vu;Mo(r,(function(t,r){var a=od(e,t,n);r instanceof lp&&(r=r.o_);var u=i.K_(a);if(r instanceof wp)o.push(a);else{var c=Zp(r,u);null!=c&&(o.push(a),s.set(a,c))}}));var a=new Ya(o);return new Kp(s.Ye(),a,i.fieldTransforms)}function Qp(t,e,n,r,i,o){var s=t.G_(1,e,n),a=[rd(e,r,n)],u=[i];if(o.length%2!=0)throw new Bo(Uo.INVALID_ARGUMENT,"Function "+e+"() needs to be called with an even number of arguments that alternate between field names and values.");for(var c=0;c<o.length;c+=2)a.push(rd(e,o[c])),u.push(o[c+1]);for(var h=[],f=new vu,l=a.length-1;l>=0;--l)if(!ad(h,a[l])){var p=a[l],d=u[l];d instanceof lp&&(d=d.o_);var v=s.K_(p);if(d instanceof wp)h.push(p);else{var y=Zp(d,v);null!=y&&(h.push(p),f.set(p,y))}}var g=new Ya(h);return new Kp(f.Ye(),g,s.fieldTransforms)}function $p(t,e,n,r){return void 0===r&&(r=!1),Zp(n,t.G_(r?4:3,e))}function Zp(t,e){if(t instanceof lp&&(t=t.o_),ed(t))return nd("Unsupported field value:",e,t),td(t,e);if(t instanceof bp)return function(t,e){if(!Hp(e.u_))throw e.h_(t.a_+"() can only be used with update() and set()");if(!e.path)throw e.h_(t.a_+"() is not currently supported inside arrays");var n=t.c_(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(e.path&&e.Qe.push(e.path),t instanceof Array){if(e.settings.__&&4!==e.u_)throw e.h_("Nested arrays are not supported");return function(t,e){for(var n=[],r=0,i=0,o=t;i<o.length;i++){var s=Zp(o[i],e.W_(r));null==s&&(s={nullValue:"NULL_VALUE"}),n.push(s),r++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(t instanceof lp&&(t=t.o_),null===t)return{nullValue:"NULL_VALUE"};if("number"==typeof t)return aa(e.serializer,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){var n=Fo.fromDate(t);return{timestampValue:ua(e.serializer,n)}}if(t instanceof Fo){var r=new Fo(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:ua(e.serializer,r)}}if(t instanceof Sp)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof Np)return{bytesValue:ca(e.serializer,t.E_)};if(t instanceof Up){var i=e.t,o=t.firestore.v_;if(!o.isEqual(i))throw e.h_("Document reference is for database "+o.projectId+"/"+o.database+" but should be for database "+i.projectId+"/"+i.database);return{referenceValue:la(t.firestore.v_||e.t,t.C_.path)}}if(void 0===t&&e.ignoreUndefinedProperties)return null;throw e.h_("Unsupported field value: "+yp(t))}(t,e)}function td(t,e){var n={};return Vo(t)?e.path&&e.path.length>0&&e.Qe.push(e.path):Mo(t,(function(t,r){var i=Zp(r,e.U_(t));null!=i&&(n[t]=i)})),{mapValue:{fields:n}}}function ed(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof Fo||t instanceof Sp||t instanceof Np||t instanceof Up||t instanceof bp)}function nd(t,e,n){if(!ed(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){var r=yp(n);throw"an object"===r?e.h_(t+" a custom object"):e.h_(t+" "+r)}}function rd(t,e,n){if(e instanceof lp&&(e=e.o_),e instanceof jp)return e.F_;if("string"==typeof e)return od(t,e);throw sd("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}var id=new RegExp("[~\\*/\\[\\]]");function od(t,e,n){if(e.search(id)>=0)throw sd("Invalid field path ("+e+"). Paths must not contain '~', '*', '/', '[', or ']'",t,!1,void 0,n);try{return(new(jp.bind.apply(jp,c([void 0],e.split("."))))).F_}catch(r){throw sd("Invalid field path ("+e+"). Paths must not be empty, begin with '.', end with '.', or contain '..'",t,!1,void 0,n)}}function sd(t,e,n,r,i){var o=r&&!r.T(),s=void 0!==i,a="Function "+e+"() called with invalid data";n&&(a+=" (via `toFirestore()`)");var u="";return(o||s)&&(u+=" (found",o&&(u+=" in field "+r),s&&(u+=" in document "+i),u+=")"),new Bo(Uo.INVALID_ARGUMENT,(a+=". ")+t+u)}function ad(t,e){return t.some((function(t){return t.isEqual(e)}))}var ud=function(){function t(t){this.Wc=t,this.z_=new Map,this.mutations=[],this.H_=!1,this.J_=null,this.Y_=new Set}return t.prototype.X_=function(t){return i(this,void 0,void 0,(function(){var e,n=this;return o(this,(function(r){switch(r.label){case 0:if(this.Z_(),this.mutations.length>0)throw new Bo(Uo.INVALID_ARGUMENT,"Firestore transactions require all reads to be executed before all writes.");return[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a,u;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=ma(n.serializer)+"/documents",i={documents:e.map((function(t){return da(n.serializer,t)}))},[4,n.Fc("BatchGetDocuments",r,i)];case 1:return s=o.sent(),a=new Map,s.forEach((function(t){var e=function(t,e){return"found"in e?function(t,e){ko(!!e.found),e.found.name,e.found.updateTime;var n=va(t,e.found.name),r=fa(e.found.updateTime),i=new du({mapValue:{fields:e.found.fields}});return new mu(n,r,i,{})}(t,e):"missing"in e?function(t,e){ko(!!e.missing),ko(!!e.readTime);var n=va(t,e.missing),r=fa(e.readTime);return new bu(n,r)}(t,e):No()}(n.serializer,t);a.set(e.key.toString(),e)})),u=[],[2,(e.forEach((function(t){var e=a.get(t.toString());ko(!!e),u.push(e)})),u)]}}))}))}(this.Wc,t)];case 1:return[2,((e=r.sent()).forEach((function(t){t instanceof bu||t instanceof mu?n.tf(t):No()})),e)]}}))}))},t.prototype.set=function(t,e){this.write(e.L_(t,this.je(t))),this.Y_.add(t.toString())},t.prototype.update=function(t,e){try{this.write(e.L_(t,this.ef(t)))}catch(t){this.J_=t}this.Y_.add(t.toString())},t.prototype.delete=function(t){this.write([new lu(t,this.je(t))]),this.Y_.add(t.toString())},t.prototype.commit=function(){return i(this,void 0,void 0,(function(){var t,e=this;return o(this,(function(n){switch(n.label){case 0:if(this.Z_(),this.J_)throw this.J_;return t=this.z_,this.mutations.forEach((function(e){t.delete(e.key.toString())})),t.forEach((function(t,n){var r=Wo.K(n);e.mutations.push(new pu(r,e.je(r)))})),[4,function(t,e){return i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return n=Co(t),r=ma(n.serializer)+"/documents",i={writes:e.map((function(t){return Ia(n.serializer,t)}))},[4,n.xc("Commit",r,i)];case 1:return o.sent(),[2]}}))}))}(this.Wc,this.mutations)];case 1:return n.sent(),this.H_=!0,[2]}}))}))},t.prototype.tf=function(t){var e;if(t instanceof mu)e=t.version;else{if(!(t instanceof bu))throw No();e=qo.min()}var n=this.z_.get(t.key.toString());if(n){if(!e.isEqual(n))throw new Bo(Uo.ABORTED,"Document version changed between two reads.")}else this.z_.set(t.key.toString(),e)},t.prototype.je=function(t){var e=this.z_.get(t.toString());return!this.Y_.has(t.toString())&&e?$a.updateTime(e):$a.Ge()},t.prototype.ef=function(t){var e=this.z_.get(t.toString());if(!this.Y_.has(t.toString())&&e){if(e.isEqual(qo.min()))throw new Bo(Uo.INVALID_ARGUMENT,"Can't update a document that doesn't exist.");return $a.updateTime(e)}return $a.exists(!0)},t.prototype.write=function(t){this.Z_(),this.mutations=this.mutations.concat(t)},t.prototype.Z_=function(){},t}(),cd=function(){function t(t,e,n,r){this.rs=t,this.Wc=e,this.updateFunction=n,this.us=r,this.nf=5,this.Ps=new nc(this.rs,"transaction_retry")}return t.prototype.run=function(){this.sf()},t.prototype.sf=function(){var t=this;this.Ps.An((function(){return i(t,void 0,void 0,(function(){var t,e,n=this;return o(this,(function(r){return t=new ud(this.Wc),(e=this.rf(t))&&e.then((function(e){n.rs.fs((function(){return t.commit().then((function(){n.us.resolve(e)})).catch((function(t){n.af(t)}))}))})).catch((function(t){n.af(t)})),[2]}))}))}))},t.prototype.rf=function(t){try{var e=this.updateFunction(t);return!Xo(e)&&e.catch&&e.then?e:(this.us.reject(Error("Transaction callback must return a Promise")),null)}catch(t){return this.us.reject(t),null}},t.prototype.af=function(t){var e=this;this.nf>0&&this.cf(t)?(this.nf-=1,this.rs.fs((function(){return e.sf(),Promise.resolve()}))):this.us.reject(t)},t.prototype.cf=function(t){if("FirebaseError"===t.name){var e=t.code;return"aborted"===e||"failed-precondition"===e||!as(e)}return!1},t}(),hd=function(){function t(t,e,n){var r=this;this.credentials=t,this.rs=e,this.Fl=n,this.user=Sc.UNAUTHENTICATED,this.clientId=Oo.u(),this.uf=function(){},this.oi=new ec,this.credentials.si((function(t){Ao("FirestoreClient","Received user=",t.uid),r.user.isEqual(t)||(r.user=t,r.uf(t)),r.oi.resolve()}))}return t.prototype.getConfiguration=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.oi.promise];case 1:return[2,(t.sent(),{rs:this.rs,Fl:this.Fl,clientId:this.clientId,credentials:this.credentials,Yl:this.user,$h:100})]}}))}))},t.prototype.hf=function(t){var e=this;this.uf=t,this.oi.promise.then((function(){return e.uf(e.user)}))},t.prototype.lf=function(){if(this.rs.Vs)throw new Bo(Uo.FAILED_PRECONDITION,"The client has already been terminated.")},t.prototype.terminate=function(){var t=this;this.rs.bs();var e=new ec;return this.rs.ys((function(){return i(t,void 0,void 0,(function(){var t,n;return o(this,(function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),this._f?[4,this._f.terminate()]:[3,2];case 1:r.sent(),r.label=2;case 2:return this.ff?[4,this.ff.terminate()]:[3,4];case 3:r.sent(),r.label=4;case 4:return this.credentials.ii(),e.resolve(),[3,6];case 5:return t=r.sent(),n=gc(t,"Failed to shutdown persistence"),e.reject(n),[3,6];case 6:return[2]}}))}))})),e.promise},t}();function fd(t,e){return i(this,void 0,void 0,(function(){var n,r=this;return o(this,(function(s){switch(s.label){case 0:return t.rs.Ns(),Ao("FirestoreClient","Initializing OfflineComponentProvider"),[4,t.getConfiguration()];case 1:return n=s.sent(),[4,e.initialize(n)];case 2:return s.sent(),t.hf((function(n){return t.rs.Ss((function(){return i(r,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,cf(e.Kc,n)];case 1:return t.sent(),[2]}}))}))}))})),e.persistence.fa((function(){return t.terminate()})),t.ff=e,[2]}}))}))}function ld(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(s){switch(s.label){case 0:return t.rs.Ns(),[4,pd(t)];case 1:return n=s.sent(),Ao("FirestoreClient","Initializing OnlineComponentProvider"),[4,t.getConfiguration()];case 2:return r=s.sent(),[4,e.initialize(n,r)];case 3:return s.sent(),t.hf((function(n){return t.rs.Ss((function(){return function(t,e){return i(this,void 0,void 0,(function(){var n,r;return o(this,(function(i){switch(i.label){case 0:return(n=Co(t)).rs.Ns(),Ao("RemoteStore","RemoteStore received new credentials"),r=Lf(n),n.Hc.add(3),[4,kf(n)];case 1:return i.sent(),r&&n.Zc.set("Unknown"),[4,n.jc.s_(e)];case 2:return i.sent(),n.Hc.delete(3),[4,Nf(n)];case 3:return i.sent(),[2]}}))}))}(e.Oh,n)}))})),t._f=e,[2]}}))}))}function pd(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return t.ff?[3,2]:(Ao("FirestoreClient","Using default OfflineComponentProvider"),[4,fd(t,new ap)]);case 1:e.sent(),e.label=2;case 2:return[2,t.ff]}}))}))}function dd(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return t._f?[3,2]:(Ao("FirestoreClient","Using default OnlineComponentProvider"),[4,ld(t,new hp)]);case 1:e.sent(),e.label=2;case 2:return[2,t._f]}}))}))}function vd(t){return pd(t).then((function(t){return t.persistence}))}function yd(t){return pd(t).then((function(t){return t.Kc}))}function gd(t){return dd(t).then((function(t){return t.Oh}))}function md(t){return dd(t).then((function(t){return t.gu}))}function bd(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,dd(t)];case 1:return e=r.sent(),[2,((n=e.Mh).Ls=yl.bind(null,e.gu),n.Us=ml.bind(null,e.gu),n)]}}))}))}function wd(t,e){var n=this,r=new ec;return t.rs.fs((function(){return i(n,void 0,void 0,(function(){var n;return o(this,(function(i){switch(i.label){case 0:return n=bl,[4,md(t)];case 1:return[2,n.apply(void 0,[i.sent(),e,r])]}}))}))})),r.promise}function Id(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,function(t,e){var n=Co(t);return n.persistence.runTransaction("read document","readonly",(function(t){return n.Ga.Oi(t,e)}))}(t,e)];case 1:return(r=o.sent())instanceof mu?n.resolve(r):r instanceof bu?n.resolve(null):n.reject(new Bo(Uo.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")),[3,3];case 2:return i=o.sent(),s=gc(i,"Failed to get document '"+e+" from cache"),n.reject(s),[3,3];case 3:return[2]}}))}))}function Ed(t,e,n,r,i){var o=new fp({next:function(o){e.fs((function(){return Ic(t,s)}));var a=o.docs.has(n);!a&&o.fromCache?i.reject(new Bo(Uo.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&o.fromCache&&r&&"server"===r.source?i.reject(new Bo(Uo.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(o)},error:function(t){return i.reject(t)}}),s=new Tc(Au(n.path),o,{includeMetadataChanges:!0,Hs:!0});return wc(t,s)}var Ad=function(t){function n(e,n){var r=this;return(r=t.call(this,e,n)||this).yf=new yc,r.df="name"in e?e.name:"[DEFAULT]",r}return e(n,t),n.prototype.Vf=function(){return this.pf||jd(this),this.pf.terminate()},n}(function(){function t(t,e){this.df="(lite)",this.wf=new Cp({}),this.Tf=!1,t instanceof wo?(this.v_=t,this.Ef=new kc):(this.If=t,this.v_=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new Bo(Uo.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new wo(t.options.projectId)}(t),this.Ef=new Cc(e))}return Object.defineProperty(t.prototype,"app",{get:function(){if(!this.If)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.If},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"mf",{get:function(){return this.Tf},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"Af",{get:function(){return void 0!==this.Rf},enumerable:!1,configurable:!0}),t.prototype.Pf=function(t){if(this.Tf)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this.wf=new Cp(t),void 0!==t.credentials&&(this.Ef=function(t){if(!t)return new kc;switch(t.type){case"gapi":var e=t.client;return ko(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new Oc(e,t.sessionIndex||"0");case"provider":return t.client;default:throw new Bo(Uo.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))},t.prototype.gf=function(){return this.wf},t.prototype.k_=function(){return this.Tf=!0,this.wf},t.prototype._delete=function(){return this.Rf||(this.Rf=this.Vf()),this.Rf},t.prototype.Vf=function(){return function(t){var e=kp.get(t);e&&(Ao("ComponentProvider","Removing Datastore"),kp.delete(t),e.terminate())}(this),Promise.resolve()},t}());function _d(t,e,n){var r=this,s=new ec;return t.rs.enqueue((function(){return i(r,void 0,void 0,(function(){var r;return o(this,(function(i){switch(i.label){case 0:return i.trys.push([0,3,,4]),[4,fd(t,n)];case 1:return i.sent(),[4,ld(t,e)];case 2:return i.sent(),s.resolve(),[3,4];case 3:if(!function(t){return"FirebaseError"===t.name?t.code===Uo.FAILED_PRECONDITION||t.code===Uo.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||22===t.code||20===t.code||11===t.code}(r=i.sent()))throw r;return console.warn("Error enabling offline persistence. Falling back to persistence disabled: "+r),s.reject(r),[3,4];case 4:return[2]}}))}))})).then((function(){return s.promise}))}function Td(t){if(t.mf||t.Af)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.")}var Sd=function(t){function n(e,n,r,i,o,s){var a=this;return(a=t.call(this,e,n,r,i,s)||this).S_=e,a.vf=e,a.metadata=o,a}return e(n,t),n.prototype.exists=function(){return t.prototype.exists.call(this)},n.prototype.data=function(t){if(void 0===t&&(t={}),this.N_){if(this.x_){var e=new Nd(this.S_,this.D_,this.C_,this.N_,this.metadata,null);return this.x_.fromFirestore(e,t)}return this.D_.I_(this.N_.sn(),t.serverTimestamps)}},n.prototype.get=function(t,e){if(void 0===e&&(e={}),this.N_){var n=this.N_.data().field(Vp("DocumentSnapshot.get",t));if(null!==n)return this.D_.I_(n,e.serverTimestamps)}},n}(Lp),Nd=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.data=function(e){return void 0===e&&(e={}),t.prototype.data.call(this,e)},n}(Sd),kd=function(){function t(t,e,n,r){this.S_=t,this.D_=e,this.bf=r,this.metadata=new Gd(r.hasPendingWrites,r.fromCache),this.query=n}return Object.defineProperty(t.prototype,"docs",{get:function(){var t=[];return this.forEach((function(e){return t.push(e)})),t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.bf.docs.size},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"empty",{get:function(){return 0===this.size},enumerable:!1,configurable:!0}),t.prototype.forEach=function(t,e){var n=this;this.bf.docs.forEach((function(r){t.call(e,new Nd(n.S_,n.D_,r.key,r,new Gd(n.bf.Qt.has(r.key),n.bf.fromCache),n.query.x_))}))},t.prototype.docChanges=function(t){void 0===t&&(t={});var e=!!t.includeMetadataChanges;if(e&&this.bf.Wt)throw new Bo(Uo.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this.Sf&&this.Df===e||(this.Sf=function(t,e){if(t.bf.Ut.T()){var n=0;return t.bf.docChanges.map((function(e){var r=new Nd(t.S_,t.D_,e.doc.key,e.doc,new Gd(t.bf.Qt.has(e.doc.key),t.bf.fromCache),t.query.x_);return e.doc,{type:"added",doc:r,oldIndex:-1,newIndex:n++}}))}var r=t.bf.Ut;return t.bf.docChanges.filter((function(t){return e||3!==t.type})).map((function(e){var n=new Nd(t.S_,t.D_,e.doc.key,e.doc,new Gd(t.bf.Qt.has(e.doc.key),t.bf.fromCache),t.query.x_),i=-1,o=-1;return 0!==e.type&&(i=r.indexOf(e.doc.key),r=r.delete(e.doc.key)),1!==e.type&&(o=(r=r.add(e.doc)).indexOf(e.doc.key)),{type:Cd(e.type),doc:n,oldIndex:i,newIndex:o}}))}(this,e),this.Df=e),this.Sf},t}();function Cd(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return No()}}function xd(t,e){return t instanceof Sd&&e instanceof Sd?t.S_===e.S_&&t.C_.isEqual(e.C_)&&(null===t.N_?null===e.N_:t.N_.isEqual(e.N_))&&t.x_===e.x_:t instanceof kd&&e instanceof kd&&t.S_===e.S_&&function(t,e){return t instanceof Bp&&e instanceof Bp&&t.firestore===e.firestore&&Ru(t.M_,e.M_)&&t.x_===e.x_}(t.query,e.query)&&t.metadata.isEqual(e.metadata)&&t.bf.isEqual(e.bf)}var Od=function(t){function n(e){var n=this;return(n=t.call(this)||this).firestore=e,n}return e(n,t),n.prototype.R_=function(t){return new Np(t)},n.prototype.P_=function(t){var e=this.p_(t,this.firestore.v_);return new Up(this.firestore,null,e)},n}(Pp);function Dd(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];var o=gp(t.firestore,Ad),s=qp(o);return e instanceof lp&&(e=e.o_),Pd(o,("string"==typeof e||e instanceof jp?Qp(s,"updateDoc",t.C_,e,n,r):Jp(s,"updateDoc",t.C_,e)).L_(t.C_,$a.exists(!0)))}function Pd(t,e){return wd(Vd(t),e)}function Rd(t,e,n){var r=n.docs.get(e.C_),i=new Od(t);return new Sd(t,i,e.C_,r,new Gd(n.hasPendingWrites,n.fromCache),e.x_)}var Ld=function(){function t(){}return t.prototype.enableIndexedDbPersistence=function(t,e){return function(t,e){Td(t);var n=Vd(t),r=t.k_(),i=new hp;return _d(n,i,new up(i,r.cacheSizeBytes,null==e?void 0:e.forceOwnership))}(t.o_,{forceOwnership:e})},t.prototype.enableMultiTabIndexedDbPersistence=function(t){return function(t){Td(t);var e=Vd(t),n=t.k_(),r=new hp;return _d(e,r,new cp(r,n.cacheSizeBytes))}(t.o_)},t.prototype.clearIndexedDbPersistence=function(t){return function(t){var e=this;if(t.mf&&!t.Af)throw new Bo(Uo.FAILED_PRECONDITION,"Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");var n=new ec;return t.yf.ys((function(){return i(e,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return ic.kn()?(e=t+"main",[4,ic.delete(e)]):[2,Promise.resolve()];case 1:return n.sent(),[2]}}))}))}(sf(t.v_,t.df))];case 1:return r.sent(),n.resolve(),[3,3];case 2:return e=r.sent(),n.reject(e),[3,3];case 3:return[2]}}))}))})),n.promise}(t.o_)},t}(),Md=function(t){function n(e,n,r){var i=this;return(i=t.call(this,n)||this).Cf=r,i.INTERNAL={delete:function(){return i.terminate()}},e instanceof wo||(i.Nf=e),i}return e(n,t),Object.defineProperty(n.prototype,"v_",{get:function(){return this.o_.v_},enumerable:!1,configurable:!0}),n.prototype.settings=function(t){t.merge&&delete(t=Object.assign(Object.assign({},this.o_.gf()),t)).merge,this.o_.Pf(t)},n.prototype.useEmulator=function(t,e){"firestore.googleapis.com"!==this.o_.gf().host&&To("Host has been set in both settings() and useEmulator(), emulator host will be used"),this.settings({host:t+":"+e,ssl:!1,merge:!0})},n.prototype.enableNetwork=function(){return function(t){var e=this;return t.rs.enqueue((function(){return i(e,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,vd(t)];case 1:return e=r.sent(),[4,gd(t)];case 2:return n=r.sent(),[2,(e.da(!0),function(t){var e=Co(t);return e.Hc.delete(0),Nf(e)}(n))]}}))}))}))}(Vd(this.o_))},n.prototype.disableNetwork=function(){return function(t){var e=this;return t.rs.enqueue((function(){return i(e,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,vd(t)];case 1:return e=r.sent(),[4,gd(t)];case 2:return n=r.sent(),[2,(e.da(!1),function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return(e=Co(t)).Hc.add(0),[4,kf(e)];case 1:return n.sent(),e.Zc.set("Offline"),[2]}}))}))}(n))]}}))}))}))}(Vd(this.o_))},n.prototype.enablePersistence=function(t){var e=!1,n=!1;return t&&vp("synchronizeTabs",e=!!t.synchronizeTabs,"experimentalForceOwningTab",n=!!t.experimentalForceOwningTab),e?this.Cf.enableMultiTabIndexedDbPersistence(this):this.Cf.enableIndexedDbPersistence(this,n)},n.prototype.clearPersistence=function(){return this.Cf.clearIndexedDbPersistence(this)},n.prototype.terminate=function(){return this.app._removeServiceInstance("firestore"),this.app._removeServiceInstance("firestore-exp"),this.o_._delete()},n.prototype.waitForPendingWrites=function(){return function(t){var e=this,n=new ec;return t.rs.fs((function(){return i(e,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return e=Tl,[4,md(t)];case 1:return[2,e.apply(void 0,[r.sent(),n])]}}))}))})),n.promise}(Vd(this.o_))},n.prototype.onSnapshotsInSync=function(t){return function(t,e){var n=this,r=Vd(t),s=Mc(e)?e:{next:e},a=new fp(s);return t.yf.fs((function(){return i(n,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=function(t,e){Co(t).$s.add(e),e.next()},[4,bd(r)];case 1:return t.apply(void 0,[e.sent(),a]),[2]}}))}))})),function(){a.r_(),t.yf.fs((function(){return i(n,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=function(t,e){Co(t).$s.delete(e)},[4,bd(r)];case 1:return t.apply(void 0,[e.sent(),a]),[2]}}))}))}))}}(this.o_,t)},Object.defineProperty(n.prototype,"app",{get:function(){if(!this.Nf)throw new Bo(Uo.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.Nf},enumerable:!1,configurable:!0}),n.prototype.collection=function(t){return pp("Firestore.collection","path",t),Vd(this.o_),new Zd(zo.k(t),this,null)},n.prototype.doc=function(t){return pp("Firestore.doc","path",t),Vd(this.o_),Fd.xf(zo.k(t),this,null)},n.prototype.collectionGroup=function(t){if(pp("Firestore.collectionGroup","collectionId",t),t.indexOf("/")>=0)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid collection ID '"+t+"' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");return Vd(this.o_),new Jd(function(t){return new Iu(zo.$(),t)}(t),this,null)},n.prototype.runTransaction=function(t){var e=this;return function(t,e){var n=this,r=new ec;return t.rs.fs((function(){return i(n,void 0,void 0,(function(){var n;return o(this,(function(i){switch(i.label){case 0:return[4,function(t){return dd(t).then((function(t){return t.Wc}))}(t)];case 1:return n=i.sent(),new cd(t.rs,n,e,r).run(),[2]}}))}))})),r.promise}(Vd(this.o_),(function(n){return t(new Ud(e,n))}))},n.prototype.batch=function(){return Vd(this.o_),new Bd(this)},n}(lp);function Vd(t){return t.pf||jd(t),t.pf.lf(),t.pf}function jd(t){var e=t.k_(),n=function(t,e,n){return new bo(t,e,n.host,n.ssl,n.experimentalForceLongPolling,n.experimentalAutoDetectLongPolling)}(t.v_,t.df,e);t.pf=new hd(t.Ef,t.yf,n)}var Ud=function(){function t(t,e){this.S_=t,this.Ff=e,this.Of=qp(this.S_.o_)}return t.prototype.get=function(t){var e=this,n=tv(0,t,this.S_),r=new Rp(this.S_);return this.Ff.X_([n.C_]).then((function(t){if(!t||1!==t.length)return No();var i=t[0];if(i instanceof bu)return new zd(e.S_,new Sd(e.S_.o_,r,n.C_,null,new Gd(!1,!1),n.x_));if(i instanceof mu)return new zd(e.S_,new Sd(e.S_.o_,r,n.C_,i,new Gd(!1,!1),n.x_));throw No()}))},t.prototype.set=function(t,e,n){var r=tv(0,t,this.S_);n=dp("Transaction.set",n);var i=ev(r.x_,e,n),o=Yp(this.Of,"Transaction.set",r.C_,i,null!==r.x_,n);return this.Ff.set(r.C_,o),this},t.prototype.update=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];var o,s=tv(0,t,this.S_);return e instanceof lp&&(e=e.o_),o="string"==typeof e||e instanceof jp?Qp(this.Of,"Transaction.update",s.C_,e,n,r):Jp(this.Of,"Transaction.update",s.C_,e),this.Ff.update(s.C_,o),this},t.prototype.delete=function(t){var e=tv(0,t,this.S_);return this.Ff.delete(e.C_),this},t}(),Bd=function(){function t(t){this.S_=t,this.Mf=[],this.kf=!1,this.Of=qp(this.S_.o_)}return t.prototype.set=function(t,e,n){this.$f();var r=tv(0,t,this.S_);n=dp("WriteBatch.set",n);var i=ev(r.x_,e,n),o=Yp(this.Of,"WriteBatch.set",r.C_,i,null!==r.x_,n);return this.Mf=this.Mf.concat(o.L_(r.C_,$a.Ge())),this},t.prototype.update=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];this.$f();var o,s=tv(0,t,this.S_);return e instanceof lp&&(e=e.o_),o="string"==typeof e||e instanceof jp?Qp(this.Of,"WriteBatch.update",s.C_,e,n,r):Jp(this.Of,"WriteBatch.update",s.C_,e),this.Mf=this.Mf.concat(o.L_(s.C_,$a.exists(!0))),this},t.prototype.delete=function(t){this.$f();var e=tv(0,t,this.S_);return this.Mf=this.Mf.concat(new lu(e.C_,$a.Ge())),this},t.prototype.commit=function(){return this.$f(),this.kf=!0,this.Mf.length>0?wd(Vd(this.S_.o_),this.Mf):Promise.resolve()},t.prototype.$f=function(){if(this.kf)throw new Bo(Uo.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")},t}(),Fd=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).firestore=e,r.D_=new Rp(e),r}return e(n,t),n.xf=function(t,e,r){if(t.length%2!=0)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid document reference. Document references must have an even number of segments, but "+t.M()+" has "+t.length);return new n(e,new Up(e.o_,r,new Wo(t)))},n.b_=function(t,e,r){return new n(e,new Up(e.o_,r,t))},Object.defineProperty(n.prototype,"id",{get:function(){return this.o_.id},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"parent",{get:function(){return new Zd(this.o_.O_.S(),this.firestore,this.o_.x_)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"path",{get:function(){return this.o_.path},enumerable:!1,configurable:!0}),n.prototype.collection=function(t){if(pp("DocumentReference.collection","path",t),!t)throw new Bo(Uo.INVALID_ARGUMENT,"Must provide a non-empty collection name to collection()");var e=zo.k(t);return new Zd(this.o_.O_.child(e),this.firestore,null)},n.prototype.isEqual=function(t){return t instanceof lp&&(t=t.o_),t instanceof Up&&(n=t,((e=this.o_)instanceof Up||e instanceof Fp)&&(n instanceof Up||n instanceof Fp)&&e.firestore===n.firestore&&e.path===n.path&&e.x_===n.x_);var e,n},n.prototype.set=function(t,e){e=dp("DocumentReference.set",e);try{return function(t,e,n){var r=gp(t.firestore,Ad),i=ev(t.x_,e,n);return Pd(r,Yp(qp(r),"setDoc",t.C_,i,null!==t.x_,n).L_(t.C_,$a.Ge()))}(this.o_,t,e)}catch(t){throw qd(t,"setDoc","DocumentReference.set")}},n.prototype.update=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];try{return 1===arguments.length?Dd(this.o_,t):Dd.apply(void 0,c([this.o_,t,e],n))}catch(t){throw qd(t,"updateDoc","DocumentReference.update")}},n.prototype.delete=function(){return Pd(gp((t=this.o_).firestore,Ad),[new lu(t.C_,$a.Ge())]);var t},n.prototype.onSnapshot=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];if("object"==typeof r&&!Mc(r))return r}return{}}(e),s=function(e,n){var r,i,o;return{next:function(e){o.next&&o.next(function(e){return new zd(t.firestore,new Sd(t.firestore.o_,t.D_,e.C_,e.N_,e.metadata,t.o_.x_))}(e))},error:null===(r=(o=Mc(e[0])?e[0]:Mc(e[1])?e[1]:"function"==typeof e[0]?{next:e[0],error:e[1],complete:e[2]}:{next:e[1],error:e[2],complete:e[3]}).error)||void 0===r?void 0:r.bind(o),complete:null===(i=o.complete)||void 0===i?void 0:i.bind(o)}}(e);return function(t){for(var e,n,r,s=this,a=[],u=1;u<arguments.length;u++)a[u-1]=arguments[u];var c={includeMetadataChanges:!1},h=0;"object"!=typeof a[h]||Mc(a[h])||(c=a[h],h++);var f,l,p,d={includeMetadataChanges:c.includeMetadataChanges};if(Mc(a[h])){var v=a[h];a[h]=null===(e=v.next)||void 0===e?void 0:e.bind(v),a[h+1]=null===(n=v.error)||void 0===n?void 0:n.bind(v),a[h+2]=null===(r=v.complete)||void 0===r?void 0:r.bind(v)}if(t instanceof Up)l=gp(t.firestore,Ad),p=Au(t.C_.path),f={next:function(e){a[h]&&a[h](Rd(l,t,e))},error:a[h+1],complete:a[h+2]};else{l=gp(t.firestore,Ad),p=t.M_;var y=new Od(l);f={next:function(e){a[h]&&a[h](new kd(l,y,t,e))},error:a[h+1],complete:a[h+2]},Yd(t.M_)}var g=Vd(l),m=new fp(f),b=new Tc(p,m,d);return l.yf.fs((function(){return i(s,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=wc,[4,bd(g)];case 1:return[2,t.apply(void 0,[e.sent(),b])]}}))}))})),function(){m.r_(),l.yf.fs((function(){return i(s,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=Ic,[4,bd(g)];case 1:return[2,t.apply(void 0,[e.sent(),b])]}}))}))}))}}(this.o_,r,s)},n.prototype.get=function(t){var e=this;return("cache"===(null==t?void 0:t.source)?function(t){var e=this,n=gp(t.firestore,Ad),r=Vd(n),s=new Od(n),a=new ec;return n.yf.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,yd(r)];case 1:return[4,Id(e.sent(),t.C_,a)];case 2:return e.sent(),[2]}}))}))})),a.promise.then((function(e){return new Sd(n,s,t.C_,e,new Gd(e instanceof mu&&e.Je,!0),t.x_)}))}(this.o_):"server"===(null==t?void 0:t.source)?function(t){var e=this,n=gp(t.firestore,Ad),r=Vd(n),s=new ec;return n.yf.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,bd(r)];case 1:return[4,Ed(e.sent(),n.yf,t.C_,{source:"server"},s)];case 2:return e.sent(),[2]}}))}))})),s.promise.then((function(e){return Rd(n,t,e)}))}(this.o_):function(t){var e=this,n=gp(t.firestore,Ad),r=Vd(n),s=new ec;return n.yf.fs((function(){return i(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,bd(r)];case 1:return[4,Ed(e.sent(),n.yf,t.C_,{source:"default"},s)];case 2:return e.sent(),[2]}}))}))})),s.promise.then((function(e){return Rd(n,t,e)}))}(this.o_)).then((function(t){return new zd(e.firestore,new Sd(e.firestore.o_,e.D_,t.C_,t.N_,t.metadata,e.o_.x_))}))},n.prototype.withConverter=function(t){return new n(this.firestore,this.o_.withConverter(t))},n}(lp);function qd(t,e,n){return t.message=t.message.replace(e+"()",n+"()"),t}var Gd=function(){function t(t,e){this.hasPendingWrites=t,this.fromCache=e}return t.prototype.isEqual=function(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache},t}(),zd=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return e(n,t),Object.defineProperty(n.prototype,"ref",{get:function(){return new Fd(this.S_,this.o_.ref)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"id",{get:function(){return this.o_.id},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"metadata",{get:function(){return this.o_.metadata},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"exists",{get:function(){return this.o_.exists()},enumerable:!1,configurable:!0}),n.prototype.data=function(t){return this.o_.data(t)},n.prototype.get=function(t,e){return this.o_.get(t,e)},n.prototype.isEqual=function(t){return xd(this.o_,t.o_)},n}(lp),Kd=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.data=function(t){return this.o_.data(t)},n}(zd);function Hd(t,e,n){if(n instanceof lp&&(n=n.o_),"string"==typeof n){if(""===n)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");if(!ku(e)&&-1!==n.indexOf("/"))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '"+n+"' contains a '/' character.");var r=e.path.child(zo.k(n));if(!Wo.G(r))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '"+r+"' is not because it has an odd number of segments ("+r.length+").");return Js(t,new Wo(r))}if(n instanceof Up)return Js(t,n.C_);throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: "+yp(n)+".")}function Wd(t,e){if(!Array.isArray(t)||0===t.length)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid Query. A non-empty array is required for '"+e.toString()+"' filters.");if(t.length>10)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid Query. '"+e.toString()+"' filters support a maximum of 10 elements in the value array.")}function Xd(t,e,n){if(!n.isEqual(e))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '"+e.toString()+"' and so you must also use '"+e.toString()+"' as your first orderBy(), but your first orderBy() is on field '"+n.toString()+"' instead.")}function Yd(t){if(Tu(t)&&0===t.rn.length)throw new Bo(Uo.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}var Jd=function(){function t(t,e,n){this.M_=t,this.firestore=e,this.x_=n,this.Lf=qp(e.o_),this.D_=new Rp(e)}return t.prototype.where=function(e,n,r){var i=rd("Query.where",e),o=function(t,e,n,r,i,o,s){var a;if(i.B()){if("array-contains"===o||"array-contains-any"===o)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid Query. You can't perform '"+o+"' queries on FieldPath.documentId().");if("in"===o||"not-in"===o){Wd(s,o);for(var u=[],c=0,h=s;c<h.length;c++){var f=h[c];u.push(Hd(r,t,f))}a={arrayValue:{values:u}}}else a=Hd(r,t,s)}else"in"!==o&&"not-in"!==o&&"array-contains-any"!==o||Wd(s,o),a=$p(n,"Query.where",s,"in"===o||"not-in"===o);var l=Uu.create(i,o,a);return function(t,e){if(e.cn()){var n=Nu(t);if(null!==n&&!n.isEqual(e.field))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '"+n.toString()+"' and '"+e.field.toString()+"'");var r=Su(t);null!==r&&Xd(0,e.field,r)}var i=function(t,e){for(var n=0,r=t.filters;n<r.length;n++){var i=r[n];if(e.indexOf(i.op)>=0)return i.op}return null}(t,function(t){switch(t){case"!=":return["!=","not-in"];case"array-contains":return["array-contains","array-contains-any","not-in"];case"in":return["array-contains-any","in","not-in"];case"array-contains-any":return["array-contains","array-contains-any","in","not-in"];case"not-in":return["array-contains","array-contains-any","in","not-in","!="];default:return[]}}(e.op));if(null!==i)throw i===e.op?new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You cannot use more than one '"+e.op.toString()+"' filter."):new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You cannot use '"+e.op.toString()+"' filters with '"+i.toString()+"' filters.")}(t,l),l}(this.M_,0,this.Lf,this.firestore.v_,i,n,r);return new t(function(t,e){var n=t.filters.concat([e]);return new Iu(t.path,t.collectionGroup,t.rn.slice(),n,t.limit,t.limitType,t.startAt,t.endAt)}(this.M_,o),this.firestore,this.x_)},t.prototype.orderBy=function(e,n){var r;if(void 0===n||"asc"===n)r="asc";else{if("desc"!==n)throw new Bo(Uo.INVALID_ARGUMENT,"Function Query.orderBy() has unknown direction '"+n+"', expected 'asc' or 'desc'.");r="desc"}var i=rd("Query.orderBy",e),o=function(t,e,n){if(null!==t.startAt)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You must not call startAt() or startAfter() before calling orderBy().");if(null!==t.endAt)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You must not call endAt() or endBefore() before calling orderBy().");var r=new $u(e,n);return function(t,e){if(null===Su(t)){var n=Nu(t);null!==n&&Xd(0,n,e.field)}}(t,r),r}(this.M_,i,r);return new t(function(t,e){var n=t.rn.concat([e]);return new Iu(t.path,t.collectionGroup,n,t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(this.M_,o),this.firestore,this.x_)},t.prototype.limit=function(e){return mp("Query.limit",e),new t(Ou(this.M_,e,"F"),this.firestore,this.x_)},t.prototype.limitToLast=function(e){return mp("Query.limitToLast",e),new t(Ou(this.M_,e,"L"),this.firestore,this.x_)},t.prototype.startAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.startAt",e,n,!0);return new t(Du(this.M_,i),this.firestore,this.x_)},t.prototype.startAfter=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.startAfter",e,n,!1);return new t(Du(this.M_,i),this.firestore,this.x_)},t.prototype.endBefore=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.endBefore",e,n,!0);return new t(Pu(this.M_,i),this.firestore,this.x_)},t.prototype.endAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.endAt",e,n,!1);return new t(Pu(this.M_,i),this.firestore,this.x_)},t.prototype.isEqual=function(e){return e instanceof t&&this.firestore===e.firestore&&Ru(this.M_,e.M_)&&this.x_===e.x_},t.prototype.withConverter=function(e){return new t(this.M_,this.firestore,e)},t.prototype.Bf=function(t,e,n,r){if(e instanceof zd)return function(t,e,n,r,i){if(!r)throw new Bo(Uo.NOT_FOUND,"Can't use a DocumentSnapshot that doesn't exist for "+n+"().");for(var o=[],s=0,a=Cu(t);s<a.length;s++){var u=a[s];if(u.field.B())o.push(Js(e,r.key));else{var c=r.field(u.field);if(Ms(c))throw new Bo(Uo.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+u.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===c){var h=u.field.M();throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a document for which the field '"+h+"' (used as the orderBy) does not exist.")}o.push(c)}}return new Xu(o,i)}(this.M_,this.firestore.v_,t,e.o_.N_,r);var i=[e].concat(n);return function(t,e,n,r,i,o){var s=t.rn;if(i.length>s.length)throw new Bo(Uo.INVALID_ARGUMENT,"Too many arguments provided to "+r+"(). The number of arguments must be less than or equal to the number of orderBy() clauses");for(var a=[],u=0;u<i.length;u++){var c=i[u];if(s[u].field.B()){if("string"!=typeof c)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. Expected a string for document ID in "+r+"(), but got a "+typeof c);if(!ku(t)&&-1!==c.indexOf("/"))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to "+r+"() must be a plain document ID, but '"+c+"' contains a slash.");var h=t.path.child(zo.k(c));if(!Wo.G(h))throw new Bo(Uo.INVALID_ARGUMENT,"Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to "+r+"() must result in a valid document path, but '"+h+"' is not because it contains an odd number of segments.");var f=new Wo(h);a.push(Js(e,f))}else{var l=$p(n,r,c);a.push(l)}}return new Xu(a,o)}(this.M_,this.firestore.v_,this.Lf,t,i,r)},t.prototype.onSnapshot=function(){for(var t,e,n,r=this,s=[],a=0;a<arguments.length;a++)s[a]=arguments[a];var u={},c=0;if("object"!=typeof s[c]||Mc(s[c])||(u=s[c],c++),Mc(s[c])){var h=s[c];s[c]=null===(t=h.next)||void 0===t?void 0:t.bind(h),s[c+1]=null===(e=h.error)||void 0===e?void 0:e.bind(h),s[c+2]=null===(n=h.complete)||void 0===n?void 0:n.bind(h)}var f={next:function(t){s[c]&&s[c](new $d(r.firestore,new kd(r.firestore.o_,r.D_,new Bp(r.firestore.o_,r.x_,r.M_),t)))},error:s[c+1],complete:s[c+2]};return Yd(this.M_),function(t,e,n,r){var s=this,a=new fp(r),u=new Tc(e,a,n);return t.rs.fs((function(){return i(s,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=wc,[4,bd(t)];case 1:return[2,e.apply(void 0,[n.sent(),u])]}}))}))})),function(){a.r_(),t.rs.fs((function(){return i(s,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=Ic,[4,bd(t)];case 1:return[2,e.apply(void 0,[n.sent(),u])]}}))}))}))}}(Vd(this.firestore.o_),this.M_,u,f)},t.prototype.get=function(t){var e=this;Yd(this.M_);var n=Vd(this.firestore.o_);return(t&&"cache"===t.source?function(t,e){var n=this,r=new ec;return t.rs.fs((function(){return i(n,void 0,void 0,(function(){var n;return o(this,(function(s){switch(s.label){case 0:return n=function(t,e,n){return i(this,void 0,void 0,(function(){var r,i,s,a,u,c;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,yf(t,e,!0)];case 1:return r=o.sent(),i=new ll(e,r.Xa),s=i.gh(r.documents),a=i.bi(s,!1),n.resolve(a.snapshot),[3,3];case 2:return u=o.sent(),c=gc(u,"Failed to execute query '"+e+" against cache"),n.reject(c),[3,3];case 3:return[2]}}))}))},[4,yd(t)];case 1:return[2,n.apply(void 0,[s.sent(),e,r])]}}))}))})),r.promise}(n,this.M_):function(t,e,n){var r=this;void 0===n&&(n={});var s=new ec;return t.rs.fs((function(){return i(r,void 0,void 0,(function(){var r;return o(this,(function(i){switch(i.label){case 0:return r=function(t,e,n,r,i){var o=new fp({next:function(n){e.fs((function(){return Ic(t,s)})),n.fromCache&&"server"===r.source?i.reject(new Bo(Uo.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:function(t){return i.reject(t)}}),s=new Tc(n,o,{includeMetadataChanges:!0,Hs:!0});return wc(t,s)},[4,bd(t)];case 1:return[2,r.apply(void 0,[i.sent(),t.rs,e,n,s])]}}))}))})),s.promise}(n,this.M_,t)).then((function(t){return new $d(e.firestore,new kd(e.firestore.o_,e.D_,new Bp(e.firestore.o_,e.x_,e.M_),t))}))},t}(),Qd=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return e(n,t),Object.defineProperty(n.prototype,"type",{get:function(){return this.o_.type},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"doc",{get:function(){return new Kd(this.S_,this.o_.doc)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"oldIndex",{get:function(){return this.o_.oldIndex},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"newIndex",{get:function(){return this.o_.oldIndex},enumerable:!1,configurable:!0}),n}(lp),$d=function(t){function n(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return e(n,t),Object.defineProperty(n.prototype,"query",{get:function(){return new Jd(this.o_.query.M_,this.S_,this.o_.query.x_)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"metadata",{get:function(){return this.o_.metadata},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"size",{get:function(){return this.o_.size},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"empty",{get:function(){return this.o_.empty},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"docs",{get:function(){var t=this;return this.o_.docs.map((function(e){return new Kd(t.S_,e)}))},enumerable:!1,configurable:!0}),n.prototype.docChanges=function(t){var e=this;return this.o_.docChanges(t).map((function(t){return new Qd(e.S_,t)}))},n.prototype.forEach=function(t,e){var n=this;this.o_.forEach((function(r){t.call(e,new Kd(n.S_,r))}))},n.prototype.isEqual=function(t){return xd(this.o_,t.o_)},n}(lp),Zd=function(t){function n(e,n,r){var i=this;if((i=t.call(this,Au(e),n,r)||this).O_=e,e.length%2!=1)throw new Bo(Uo.INVALID_ARGUMENT,"Invalid collection reference. Collection references must have an odd number of segments, but "+e.M()+" has "+e.length);return i}return e(n,t),Object.defineProperty(n.prototype,"id",{get:function(){return this.M_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"parent",{get:function(){var t=this.M_.path.S();return t.T()?null:Fd.xf(t,this.firestore,null)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"path",{get:function(){return this.M_.path.M()},enumerable:!1,configurable:!0}),n.prototype.doc=function(t){0===arguments.length&&(t=Oo.u()),pp("CollectionReference.doc","path",t);var e=zo.k(t);return Fd.xf(this.M_.path.child(e),this.firestore,this.x_)},n.prototype.add=function(t){var e=this.x_?this.x_.toFirestore(t):t,n=this.doc();return Fd.b_(n.o_.C_,this.firestore,null).set(e).then((function(){return n}))},n.prototype.withConverter=function(t){return new n(this.O_,this.firestore,t)},n}(Jd);function tv(t,e,n){var r=gp(e,Up);if(r.firestore!==n.o_)throw new Bo(Uo.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return r}function ev(t,e,n){return t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e}var nv,rv=function(t){function n(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.call(this,new(jp.bind.apply(jp,c([void 0],e))))||this}return e(n,t),n.documentId=function(){return new n(Ho.q().M())},n.prototype.isEqual=function(t){return t instanceof lp&&(t=t.o_),t instanceof jp&&this.o_.F_.isEqual(t.F_)},n}(lp),iv=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.serverTimestamp=function(){var t=new Ep("serverTimestamp");return t.a_="FieldValue.serverTimestamp",new n(t)},n.delete=function(){var t=new wp("deleteField");return t.a_="FieldValue.delete",new n(t)},n.arrayUnion=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new Ap("arrayUnion",t)}.apply(void 0,t);return r.a_="FieldValue.arrayUnion",new n(r)},n.arrayRemove=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new _p("arrayRemove",t)}.apply(void 0,t);return r.a_="FieldValue.arrayRemove",new n(r)},n.increment=function(t){var e=function(t){return new Tp("increment",t)}(t);return e.a_="FieldValue.increment",new n(e)},n.prototype.isEqual=function(t){return this.o_.isEqual(t.o_)},n}(lp),ov={Firestore:Md,GeoPoint:Sp,Timestamp:Fo,Blob:Dp,Transaction:Ud,WriteBatch:Bd,DocumentReference:Fd,DocumentSnapshot:zd,Query:Jd,QueryDocumentSnapshot:Kd,QuerySnapshot:$d,CollectionReference:Zd,FieldPath:rv,FieldValue:iv,setLogLevel:function(t){var e;e=t,Io.setLogLevel(e)},CACHE_SIZE_UNLIMITED:-1};(function(t,e){t.INTERNAL.registerComponent(new k("firestore",(function(t){return function(t,e){return new Md(t,new Ad(t,e),new Ld)}(t.getProvider("app").getImmediate(),t.getProvider("auth-internal"))}),"PUBLIC").setServiceProps(Object.assign({},ov)))})(nv=et),nv.registerVersion("@firebase/firestore","2.0.2");var sv=et.initializeApp({apiKey:"AIzaSyAbBLFWMfjWFqAzmRU8J5h7DHH0bDesYzU",authDomain:"chicago-sense.firebaseapp.com",databaseURL:"https://chicago-sense.firebaseio.com",projectId:"chicago-sense",storageBucket:"chicago-sense.appspot.com",messagingSenderId:"448695709527",appId:"1:448695709527:web:0317d5ce41565937311812",measurementId:"G-VRPVS0PHMV"}),av=n(379),uv=n.n(av),cv=n(538);uv()(cv.Z,{insert:"head",singleton:!1}),cv.Z.locals;var hv=n(340);uv()(hv.Z,{insert:"head",singleton:!1}),hv.Z.locals,document.querySelector("form").addEventListener("submit",(function(t){t.preventDefault();var e=document.querySelectorAll("input"),n=e[0].value,r=e[1].value;sv.auth().signInWithEmailAndPassword(n,r).then((function(t){console.log(t),window.location="./home.html"})).catch((function(t){t.code;var e=t.message;alert(e)})),console.log(name,r)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,