/*! For license information please see register.bundle.js.LICENSE.txt */
(()=>{var t={96:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(15),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,"/* The alert message box */\n.alert {\n  padding: 20px;\n  background-color: #f44336; /* Red */\n  color: white;\n  margin-bottom: 15px;\n  position: fixed;\n  top: 4vh;\n  transform: translateX(-50%);\n  left: 50%;\n  width: 300px;\n  z-index: 10;\n}\n\n@media all and (max-width: 625px) {\n  .alert {\n    top: 2vh;\n  }\n}\n\n/* The close button */\n.closebtn {\n  margin-left: 15px;\n  color: white;\n  font-weight: bold;\n  float: right;\n  font-size: 22px;\n  line-height: 20px;\n  cursor: pointer;\n  transition: 0.3s;\n}\n\n/* When moving the mouse over the close button */\n.closebtn:hover {\n  color: black;\n}\n","",{version:3,sources:["webpack://./src/css/error.css"],names:[],mappings:"AAAA,0BAA0B;AAC1B;EACE,aAAa;EACb,yBAAyB,EAAE,QAAQ;EACnC,YAAY;EACZ,mBAAmB;EACnB,eAAe;EACf,QAAQ;EACR,2BAA2B;EAC3B,SAAS;EACT,YAAY;EACZ,WAAW;AACb;;AAEA;EACE;IACE,QAAQ;EACV;AACF;;AAEA,qBAAqB;AACrB;EACE,iBAAiB;EACjB,YAAY;EACZ,iBAAiB;EACjB,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,eAAe;EACf,gBAAgB;AAClB;;AAEA,gDAAgD;AAChD;EACE,YAAY;AACd",sourcesContent:["/* The alert message box */\n.alert {\n  padding: 20px;\n  background-color: #f44336; /* Red */\n  color: white;\n  margin-bottom: 15px;\n  position: fixed;\n  top: 4vh;\n  transform: translateX(-50%);\n  left: 50%;\n  width: 300px;\n  z-index: 10;\n}\n\n@media all and (max-width: 625px) {\n  .alert {\n    top: 2vh;\n  }\n}\n\n/* The close button */\n.closebtn {\n  margin-left: 15px;\n  color: white;\n  font-weight: bold;\n  float: right;\n  font-size: 22px;\n  line-height: 20px;\n  cursor: pointer;\n  transition: 0.3s;\n}\n\n/* When moving the mouse over the close button */\n.closebtn:hover {\n  color: black;\n}\n"],sourceRoot:""}]);const s=a},527:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var r=n(15),i=n.n(r),o=n(645),a=n.n(o),s=n(667),u=n.n(s),c=n(297),l=a()(i()),f=u()(c);l.push([t.id,".header {\n  height: 100vh; /* out of 100 */\n  background-image: linear-gradient(\n      to right,\n      rgba(67, 48, 133, 0.8),\n      rgba(58, 65, 62, 0.692)\n    ),\n    url("+f+');\n  background-size: cover; /* try to fit width of viewport or element */\n  background-position: top; /* top of img stays atop container */\n  position: relative;\n}\n\n.text-box {\n  position: absolute;\n  top: 50%; /* from parent element */\n  left: 50%; /* from parent element */\n  transform: translate(-50%, -50%); /* from itself (top-left corner entry) */\n  text-align: center;\n}\n\n.heading-primary {\n  color: #fff;\n  text-transform: uppercase;\n  backface-visibility: hidden; /* fixes shaking in animation */\n  margin-bottom: 10px;\n}\n\n.heading-primary-main {\n  display: block;\n  font-size: 30px;\n  font-weight: 700;\n  letter-spacing: 5px;\n  line-height: 1.1;\n}\n\nform {\n  margin: 0 auto;\n  background-color: white;\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  overflow: hidden;\n  width: 240px;\n}\n\nfieldset {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\ninput {\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  margin: 0;\n}\n\n.account-info {\n  padding: 20px 20px 0 20px;\n}\n\n.account-info label {\n  color: #395870;\n  display: block;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.account-info input {\n  background: #fff;\n  border: 1px solid #c6c7cc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  color: #636466;\n  padding: 6px;\n  margin-top: 6px;\n  width: 100%;\n}\n\n.account-action {\n  background: #f0f0f2;\n  border-top: 1px solid #c6c7cc;\n  padding: 8px 20px 10px 20px;\n}\n\n.account-action .btn {\n  background: linear-gradient(#49708f, #293f50);\n  border: 0;\n  color: #fff;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 8px 16px;\n}\n\n.account-action .btn:link,\n.account-action .btn:visited {\n  transition: all 0.2s; /* initial state */\n  position: relative;\n  outline: none;\n}\n\n.account-action .btn:hover {\n  transform: translateY(-3px); /* goes up 3px */\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-action .btn:focus {\n  outline: none;\n}\n\n.account-action .btn:active {\n  outline: none;\n  transform: translateY(-1px); /* goes up 1 px */\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-register {\n  display: block;\n  margin-top: 10px;\n  color: white;\n}\n\n.account-register a {\n  color: turquoise;\n  text-decoration: none;\n}\n\n.account-register a:active {\n  color: turquoise;\n}\n',"",{version:3,sources:["webpack://./src/css/register.css"],names:[],mappings:"AAAA;EACE,aAAa,EAAE,eAAe;EAC9B;;;;;2CAK8B;EAC9B,sBAAsB,EAAE,4CAA4C;EACpE,wBAAwB,EAAE,oCAAoC;EAC9D,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,QAAQ,EAAE,wBAAwB;EAClC,SAAS,EAAE,wBAAwB;EACnC,gCAAgC,EAAE,wCAAwC;EAC1E,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,yBAAyB;EACzB,2BAA2B,EAAE,+BAA+B;EAC5D,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,eAAe;EACf,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,uBAAuB;EACvB,kBAAkB;EAClB,6DAA6D;EAC7D,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,SAAS;EACT,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,6DAA6D;EAC7D,SAAS;AACX;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,cAAc;EACd,cAAc;EACd,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,8CAA8C;EAC9C,cAAc;EACd,YAAY;EACZ,eAAe;EACf,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,6BAA6B;EAC7B,2BAA2B;AAC7B;;AAEA;EACE,6CAA6C;EAC7C,SAAS;EACT,WAAW;EACX,eAAe;EACf,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;;EAEE,oBAAoB,EAAE,kBAAkB;EACxC,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,2BAA2B,EAAE,gBAAgB;EAC7C,0CAA0C,EAAE,wBAAwB;AACtE;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,2BAA2B,EAAE,iBAAiB;EAC9C,yCAAyC,EAAE,wBAAwB;AACrE;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['.header {\n  height: 100vh; /* out of 100 */\n  background-image: linear-gradient(\n      to right,\n      rgba(67, 48, 133, 0.8),\n      rgba(58, 65, 62, 0.692)\n    ),\n    url("../images/chicago.jpg");\n  background-size: cover; /* try to fit width of viewport or element */\n  background-position: top; /* top of img stays atop container */\n  position: relative;\n}\n\n.text-box {\n  position: absolute;\n  top: 50%; /* from parent element */\n  left: 50%; /* from parent element */\n  transform: translate(-50%, -50%); /* from itself (top-left corner entry) */\n  text-align: center;\n}\n\n.heading-primary {\n  color: #fff;\n  text-transform: uppercase;\n  backface-visibility: hidden; /* fixes shaking in animation */\n  margin-bottom: 10px;\n}\n\n.heading-primary-main {\n  display: block;\n  font-size: 30px;\n  font-weight: 700;\n  letter-spacing: 5px;\n  line-height: 1.1;\n}\n\nform {\n  margin: 0 auto;\n  background-color: white;\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  overflow: hidden;\n  width: 240px;\n}\n\nfieldset {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\ninput {\n  border-radius: 5px;\n  font: 14px/1.4 "Helvetica Neue", Helvetica, Arial, sans-serif;\n  margin: 0;\n}\n\n.account-info {\n  padding: 20px 20px 0 20px;\n}\n\n.account-info label {\n  color: #395870;\n  display: block;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.account-info input {\n  background: #fff;\n  border: 1px solid #c6c7cc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  color: #636466;\n  padding: 6px;\n  margin-top: 6px;\n  width: 100%;\n}\n\n.account-action {\n  background: #f0f0f2;\n  border-top: 1px solid #c6c7cc;\n  padding: 8px 20px 10px 20px;\n}\n\n.account-action .btn {\n  background: linear-gradient(#49708f, #293f50);\n  border: 0;\n  color: #fff;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 8px 16px;\n}\n\n.account-action .btn:link,\n.account-action .btn:visited {\n  transition: all 0.2s; /* initial state */\n  position: relative;\n  outline: none;\n}\n\n.account-action .btn:hover {\n  transform: translateY(-3px); /* goes up 3px */\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-action .btn:focus {\n  outline: none;\n}\n\n.account-action .btn:active {\n  outline: none;\n  transform: translateY(-1px); /* goes up 1 px */\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); /* (x, y, blur, color) */\n}\n\n.account-register {\n  display: block;\n  margin-top: 10px;\n  color: white;\n}\n\n.account-register a {\n  color: turquoise;\n  text-decoration: none;\n}\n\n.account-register a:active {\n  color: turquoise;\n}\n'],sourceRoot:""}]);const h=l},538:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var r=n(15),i=n.n(r),o=n(645),a=n.n(o),s=n(667),u=n.n(s),c=n(955),l=a()(i()),f=u()(c);l.push([t.id,'@font-face {\n  font-family: "Open Sans";\n  src: url('+f+') format("ttf");\n  font-weight: 400;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; /* borders and paddings no longer add to total width/height */\n}\n\nbody {\n  font-family: "Open Sans", sans-serif; /* inherited by all child elements of body */\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.7;\n  color: #777;\n}\n',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,0DAAuD;EACvD,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB,EAAE,6DAA6D;AACvF;;AAEA;EACE,oCAAoC,EAAE,4CAA4C;EAClF,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,WAAW;AACb",sourcesContent:['@font-face {\n  font-family: "Open Sans";\n  src: url("../fonts/OpenSans-Regular.ttf") format("ttf");\n  font-weight: 400;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; /* borders and paddings no longer add to total width/height */\n}\n\nbody {\n  font-family: "Open Sans", sans-serif; /* inherited by all child elements of body */\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.7;\n  color: #777;\n}\n'],sourceRoot:""}]);const h=l},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(u," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([c]).join("\n")}return[o].join("\n")}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},676:function(t,e){!function(t){"use strict";function e(t){return Array.prototype.slice.call(t)}function n(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function r(t,e,r){var i,o=new Promise((function(o,a){n(i=t[e].apply(t,r)).then(o,a)}));return o.request=i,o}function i(t,e,n){var i=r(t,e,n);return i.then((function(t){if(t)return new l(t,i.request)}))}function o(t,e,n){n.forEach((function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})}))}function a(t,e,n,i){i.forEach((function(i){i in n.prototype&&(t.prototype[i]=function(){return r(this[e],i,arguments)})}))}function s(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})}))}function u(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return i(this[e],r,arguments)})}))}function c(t){this._index=t}function l(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function h(t){this._tx=t,this.complete=new Promise((function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}}))}function p(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new h(n)}function d(t){this._db=t}o(c,"_index",["name","keyPath","multiEntry","unique"]),a(c,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(c,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(l,"_cursor",["direction","key","primaryKey","value"]),a(l,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(t){t in IDBCursor.prototype&&(l.prototype[t]=function(){var e=this,r=arguments;return Promise.resolve().then((function(){return e._cursor[t].apply(e._cursor,r),n(e._request).then((function(t){if(t)return new l(t,e._request)}))}))})})),f.prototype.createIndex=function(){return new c(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new c(this._store.index.apply(this._store,arguments))},o(f,"_store",["name","keyPath","indexNames","autoIncrement"]),a(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),s(f,"_store",IDBObjectStore,["deleteIndex"]),h.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},o(h,"_tx",["objectStoreNames","mode"]),s(h,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},o(p,"_db",["name","version","objectStoreNames"]),s(p,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new h(this._db.transaction.apply(this._db,arguments))},o(d,"_db",["name","version","objectStoreNames"]),s(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(t){[f,c].forEach((function(n){t in n.prototype&&(n.prototype[t.replace("open","iterate")]=function(){var n=e(arguments),r=n[n.length-1],i=this._store||this._index,o=i[t].apply(i,n.slice(0,-1));o.onsuccess=function(){r(o.result)}})}))})),[c,f].forEach((function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise((function(i){n.iterateCursor(t,(function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():i(r)):i(r)}))}))})})),t.openDb=function(t,e,n){var i=r(indexedDB,"open",[t,e]),o=i.request;return o&&(o.onupgradeneeded=function(t){n&&n(new p(o.result,t.oldVersion,o.transaction))}),i.then((function(t){return new d(t)}))},t.deleteDb=function(t){return r(indexedDB,"deleteDatabase",[t])},Object.defineProperty(t,"__esModule",{value:!0})}(e)},418:t=>{"use strict";var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var a,s,u=i(t),c=1;c<arguments.length;c++){for(var l in a=Object(arguments[c]))n.call(a,l)&&(u[l]=a[l]);if(e){s=e(a);for(var f=0;f<s.length;f++)r.call(a,s[f])&&(u[s[f]]=a[s[f]])}}return u}},448:(t,e,n)=>{"use strict";var r=n(294),i=n(418),o=n(840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,u={};function c(t,e){l(t,e),l(t+"Capture",e)}function l(t,e){for(u[t]=e,t=0;t<e.length;t++)s.add(e[t])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,d={},v={};function m(t,e,n,r,i,o,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){y[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];y[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){y[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){y[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){y[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){y[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){y[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){y[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){y[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(t){return t[1].toUpperCase()}function w(t,e,n,r){var i=y.hasOwnProperty(e)?y[e]:null;(null!==i?0===i.type:!r&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,n,r){if(null==e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,i,r)&&(n=null),r||null===i?function(t){return!!p.call(v,t)||!p.call(d,t)&&(h.test(t)?v[t]=!0:(d[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):i.mustUseProperty?t[i.propertyName]=null===n?3!==i.type&&"":n:(e=i.attributeName,r=i.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(g,b);y[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(g,b);y[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(g,b);y[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){y[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){y[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,I=60103,A=60106,_=60107,T=60108,k=60114,S=60109,N=60110,C=60112,x=60113,O=60120,P=60115,D=60116,L=60121,R=60128,M=60129,V=60130,j=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;I=F("react.element"),A=F("react.portal"),_=F("react.fragment"),T=F("react.strict_mode"),k=F("react.profiler"),S=F("react.provider"),N=F("react.context"),C=F("react.forward_ref"),x=F("react.suspense"),O=F("react.suspense_list"),P=F("react.memo"),D=F("react.lazy"),L=F("react.block"),F("react.scope"),R=F("react.opaque.id"),M=F("react.debug_trace_mode"),V=F("react.offscreen"),j=F("react.legacy_hidden")}var U,B="function"==typeof Symbol&&Symbol.iterator;function z(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}function q(t){if(void 0===U)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);U=e&&e[1]||""}return"\n"+U+t}var G=!1;function K(t,e){if(!t||G)return"";G=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var r=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){r=t}t.call(e.prototype)}else{try{throw Error()}catch(t){r=t}t()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{G=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?q(t):""}function H(t){switch(t.tag){case 5:return q(t.type);case 16:return q("Lazy");case 13:return q("Suspense");case 19:return q("SuspenseList");case 0:case 2:case 15:return K(t.type,!1);case 11:return K(t.type.render,!1);case 22:return K(t.type._render,!1);case 1:return K(t.type,!0);default:return""}}function W(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case _:return"Fragment";case A:return"Portal";case k:return"Profiler";case T:return"StrictMode";case x:return"Suspense";case O:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case N:return(t.displayName||"Context")+".Consumer";case S:return(t._context.displayName||"Context")+".Provider";case C:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case P:return W(t.type);case L:return W(t._render);case D:e=t._payload,t=t._init;try{return W(t(e))}catch(t){}}return null}function Y(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function Q(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function X(t){t._valueTracker||(t._valueTracker=function(t){var e=Q(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return i.call(this)},set:function(t){r=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function $(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Q(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}function J(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function Z(t,e){var n=e.checked;return i({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function tt(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=Y(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&w(t,"checked",e,!1)}function nt(t,e){et(t,e);var n=Y(e.value),r=e.type;if(null!=n)"number"===r?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===r||"reset"===r)return void t.removeAttribute("value");e.hasOwnProperty("value")?it(t,e.type,n):e.hasOwnProperty("defaultValue")&&it(t,e.type,Y(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function rt(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function it(t,e,n){"number"===e&&J(t.ownerDocument)===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function ot(t,e){return t=i({children:void 0},e),(e=function(t){var e="";return r.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,n,r){if(t=t.options,e){e={};for(var i=0;i<n.length;i++)e["$"+n[i]]=!0;for(n=0;n<t.length;n++)i=e.hasOwnProperty("$"+t[n].value),t[n].selected!==i&&(t[n].selected=i),i&&r&&(t[n].defaultSelected=!0)}else{for(n=""+Y(n),e=null,i=0;i<t.length;i++){if(t[i].value===n)return t[i].selected=!0,void(r&&(t[i].defaultSelected=!0));null!==e||t[i].disabled||(e=t[i])}null!==e&&(e.selected=!0)}}function st(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return i({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function ut(t,e){var n=e.value;if(null==n){if(n=e.children,e=e.defaultValue,null!=n){if(null!=e)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}e=n}null==e&&(e=""),n=e}t._wrapperState={initialValue:Y(n)}}function ct(t,e){var n=Y(e.value),r=Y(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=r&&(t.defaultValue=""+r)}function lt(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var ft="http://www.w3.org/1999/xhtml";function ht(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pt(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?ht(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var dt,vt,mt=(vt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((dt=dt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=dt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction((function(){return vt(t,e)}))}:vt);function yt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var gt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},bt=["Webkit","ms","Moz","O"];function wt(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||gt.hasOwnProperty(t)&&gt[t]?(""+e).trim():e+"px"}function Et(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=wt(n,e[n],r);"float"===n&&(n="cssFloat"),r?t.setProperty(n,i):t[n]=i}}Object.keys(gt).forEach((function(t){bt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),gt[e]=gt[t]}))}));var It=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function At(t,e){if(e){if(It[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function _t(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Tt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var kt=null,St=null,Nt=null;function Ct(t){if(t=Jr(t)){if("function"!=typeof kt)throw Error(a(280));var e=t.stateNode;e&&(e=ti(e),kt(t.stateNode,t.type,e))}}function xt(t){St?Nt?Nt.push(t):Nt=[t]:St=t}function Ot(){if(St){var t=St,e=Nt;if(Nt=St=null,Ct(t),e)for(t=0;t<e.length;t++)Ct(e[t])}}function Pt(t,e){return t(e)}function Dt(t,e,n,r,i){return t(e,n,r,i)}function Lt(){}var Rt=Pt,Mt=!1,Vt=!1;function jt(){null===St&&null===Nt||(Lt(),Ot())}function Ft(t,e){var n=t.stateNode;if(null===n)return null;var r=ti(n);if(null===r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw Error(a(231,e,typeof n));return n}var Ut=!1;if(f)try{var Bt={};Object.defineProperty(Bt,"passive",{get:function(){Ut=!0}}),window.addEventListener("test",Bt,Bt),window.removeEventListener("test",Bt,Bt)}catch(vt){Ut=!1}function zt(t,e,n,r,i,o,a,s,u){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}var qt=!1,Gt=null,Kt=!1,Ht=null,Wt={onError:function(t){qt=!0,Gt=t}};function Yt(t,e,n,r,i,o,a,s,u){qt=!1,Gt=null,zt.apply(Wt,arguments)}function Qt(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function Xt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function $t(t){if(Qt(t)!==t)throw Error(a(188))}function Jt(t,e){for(var n=t.alternate;null!==e;){if(e===t||e===n)return!0;e=e.return}return!1}var Zt,te,ee,ne,re=!1,ie=[],oe=null,ae=null,se=null,ue=new Map,ce=new Map,le=[],fe="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function he(t,e,n,r,i){return{blockedOn:t,domEventName:e,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pe(t,e){switch(t){case"focusin":case"focusout":oe=null;break;case"dragenter":case"dragleave":ae=null;break;case"mouseover":case"mouseout":se=null;break;case"pointerover":case"pointerout":ue.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ce.delete(e.pointerId)}}function de(t,e,n,r,i,o){return null===t||t.nativeEvent!==o?(t=he(e,n,r,i,o),null!==e&&null!==(e=Jr(e))&&te(e),t):(t.eventSystemFlags|=r,e=t.targetContainers,null!==i&&-1===e.indexOf(i)&&e.push(i),t)}function ve(t){var e=$r(t.target);if(null!==e){var n=Qt(e);if(null!==n)if(13===(e=n.tag)){if(null!==(e=Xt(n)))return t.blockedOn=e,void ne(t.lanePriority,(function(){o.unstable_runWithPriority(t.priority,(function(){ee(n)}))}))}else if(3===e&&n.stateNode.hydrate)return void(t.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}t.blockedOn=null}function me(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var n=$e(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n)return null!==(e=Jr(n))&&te(e),t.blockedOn=n,!1;e.shift()}return!0}function ye(t,e,n){me(t)&&n.delete(e)}function ge(){for(re=!1;0<ie.length;){var t=ie[0];if(null!==t.blockedOn){null!==(t=Jr(t.blockedOn))&&Zt(t);break}for(var e=t.targetContainers;0<e.length;){var n=$e(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n){t.blockedOn=n;break}e.shift()}null===t.blockedOn&&ie.shift()}null!==oe&&me(oe)&&(oe=null),null!==ae&&me(ae)&&(ae=null),null!==se&&me(se)&&(se=null),ue.forEach(ye),ce.forEach(ye)}function be(t,e){t.blockedOn===e&&(t.blockedOn=null,re||(re=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,ge)))}function we(t){function e(e){return be(e,t)}if(0<ie.length){be(ie[0],t);for(var n=1;n<ie.length;n++){var r=ie[n];r.blockedOn===t&&(r.blockedOn=null)}}for(null!==oe&&be(oe,t),null!==ae&&be(ae,t),null!==se&&be(se,t),ue.forEach(e),ce.forEach(e),n=0;n<le.length;n++)(r=le[n]).blockedOn===t&&(r.blockedOn=null);for(;0<le.length&&null===(n=le[0]).blockedOn;)ve(n),null===n.blockedOn&&le.shift()}function Ee(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var Ie={animationend:Ee("Animation","AnimationEnd"),animationiteration:Ee("Animation","AnimationIteration"),animationstart:Ee("Animation","AnimationStart"),transitionend:Ee("Transition","TransitionEnd")},Ae={},_e={};function Te(t){if(Ae[t])return Ae[t];if(!Ie[t])return t;var e,n=Ie[t];for(e in n)if(n.hasOwnProperty(e)&&e in _e)return Ae[t]=n[e];return t}f&&(_e=document.createElement("div").style,"AnimationEvent"in window||(delete Ie.animationend.animation,delete Ie.animationiteration.animation,delete Ie.animationstart.animation),"TransitionEvent"in window||delete Ie.transitionend.transition);var ke=Te("animationend"),Se=Te("animationiteration"),Ne=Te("animationstart"),Ce=Te("transitionend"),xe=new Map,Oe=new Map,Pe=["abort","abort",ke,"animationEnd",Se,"animationIteration",Ne,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ce,"transitionEnd","waiting","waiting"];function De(t,e){for(var n=0;n<t.length;n+=2){var r=t[n],i=t[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Oe.set(r,e),xe.set(r,i),c(i,[r])}}(0,o.unstable_now)();var Le=8;function Re(t){if(0!=(1&t))return Le=15,1;if(0!=(2&t))return Le=14,2;if(0!=(4&t))return Le=13,4;var e=24&t;return 0!==e?(Le=12,e):0!=(32&t)?(Le=11,32):0!=(e=192&t)?(Le=10,e):0!=(256&t)?(Le=9,256):0!=(e=3584&t)?(Le=8,e):0!=(4096&t)?(Le=7,4096):0!=(e=4186112&t)?(Le=6,e):0!=(e=62914560&t)?(Le=5,e):67108864&t?(Le=4,67108864):0!=(134217728&t)?(Le=3,134217728):0!=(e=805306368&t)?(Le=2,e):0!=(1073741824&t)?(Le=1,1073741824):(Le=8,t)}function Me(t,e){var n=t.pendingLanes;if(0===n)return Le=0;var r=0,i=0,o=t.expiredLanes,a=t.suspendedLanes,s=t.pingedLanes;if(0!==o)r=o,i=Le=15;else if(0!=(o=134217727&n)){var u=o&~a;0!==u?(r=Re(u),i=Le):0!=(s&=o)&&(r=Re(s),i=Le)}else 0!=(o=n&~a)?(r=Re(o),i=Le):0!==s&&(r=Re(s),i=Le);if(0===r)return 0;if(r=n&((0>(r=31-ze(r))?0:1<<r)<<1)-1,0!==e&&e!==r&&0==(e&a)){if(Re(e),i<=Le)return e;Le=i}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=r;0<e;)i=1<<(n=31-ze(e)),r|=t[n],e&=~i;return r}function Ve(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function je(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=Fe(24&~e))?je(10,e):t;case 10:return 0===(t=Fe(192&~e))?je(8,e):t;case 8:return 0===(t=Fe(3584&~e))&&0===(t=Fe(4186112&~e))&&(t=512),t;case 2:return 0===(e=Fe(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function Fe(t){return t&-t}function Ue(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function Be(t,e,n){t.pendingLanes|=e;var r=e-1;t.suspendedLanes&=r,t.pingedLanes&=r,(t=t.eventTimes)[e=31-ze(e)]=n}var ze=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(qe(t)/Ge|0)|0},qe=Math.log,Ge=Math.LN2,Ke=o.unstable_UserBlockingPriority,He=o.unstable_runWithPriority,We=!0;function Ye(t,e,n,r){Mt||Lt();var i=Xe,o=Mt;Mt=!0;try{Dt(i,t,e,n,r)}finally{(Mt=o)||jt()}}function Qe(t,e,n,r){He(Ke,Xe.bind(null,t,e,n,r))}function Xe(t,e,n,r){var i;if(We)if((i=0==(4&e))&&0<ie.length&&-1<fe.indexOf(t))t=he(null,t,e,n,r),ie.push(t);else{var o=$e(t,e,n,r);if(null===o)i&&pe(t,r);else{if(i){if(-1<fe.indexOf(t))return t=he(o,t,e,n,r),void ie.push(t);if(function(t,e,n,r,i){switch(e){case"focusin":return oe=de(oe,t,e,n,r,i),!0;case"dragenter":return ae=de(ae,t,e,n,r,i),!0;case"mouseover":return se=de(se,t,e,n,r,i),!0;case"pointerover":var o=i.pointerId;return ue.set(o,de(ue.get(o)||null,t,e,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ce.set(o,de(ce.get(o)||null,t,e,n,r,i)),!0}return!1}(o,t,e,n,r))return;pe(t,r)}xr(t,e,r,null,n)}}}function $e(t,e,n,r){var i=Tt(r);if(null!==(i=$r(i))){var o=Qt(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Xt(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return xr(t,e,r,i,n),null}var Je=null,Ze=null,tn=null;function en(){if(tn)return tn;var t,e,n=Ze,r=n.length,i="value"in Je?Je.value:Je.textContent,o=i.length;for(t=0;t<r&&n[t]===i[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===i[o-e];e++);return tn=i.slice(t,1<e?1-e:void 0)}function nn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function rn(){return!0}function on(){return!1}function an(t){function e(e,n,r,i,o){for(var a in this._reactName=e,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?rn:on,this.isPropagationStopped=on,this}return i(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),e}var sn,un,cn,ln={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(ln),hn=i({},ln,{view:0,detail:0}),pn=an(hn),dn=i({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tn,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==cn&&(cn&&"mousemove"===t.type?(sn=t.screenX-cn.screenX,un=t.screenY-cn.screenY):un=sn=0,cn=t),sn)},movementY:function(t){return"movementY"in t?t.movementY:un}}),vn=an(dn),mn=an(i({},dn,{dataTransfer:0})),yn=an(i({},hn,{relatedTarget:0})),gn=an(i({},ln,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=an(i({},ln,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}})),wn=an(i({},ln,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},In={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},An={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _n(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=An[t])&&!!e[t]}function Tn(){return _n}var kn=an(i({},hn,{key:function(t){if(t.key){var e=En[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=nn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?In[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tn,charCode:function(t){return"keypress"===t.type?nn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?nn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}})),Sn=an(i({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=an(i({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tn})),Cn=an(i({},ln,{propertyName:0,elapsedTime:0,pseudoElement:0})),xn=an(i({},dn,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0})),On=[9,13,27,32],Pn=f&&"CompositionEvent"in window,Dn=null;f&&"documentMode"in document&&(Dn=document.documentMode);var Ln=f&&"TextEvent"in window&&!Dn,Rn=f&&(!Pn||Dn&&8<Dn&&11>=Dn),Mn=String.fromCharCode(32),Vn=!1;function jn(t,e){switch(t){case"keyup":return-1!==On.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Un=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Bn[t.type]:"textarea"===e}function qn(t,e,n,r){xt(r),0<(e=Pr(e,"onChange")).length&&(n=new fn("onChange","change",null,n,r),t.push({event:n,listeners:e}))}var Gn=null,Kn=null;function Hn(t){_r(t,0)}function Wn(t){if($(Zr(t)))return t}function Yn(t,e){if("change"===t)return e}var Qn=!1;if(f){var Xn;if(f){var $n="oninput"in document;if(!$n){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),$n="function"==typeof Jn.oninput}Xn=$n}else Xn=!1;Qn=Xn&&(!document.documentMode||9<document.documentMode)}function Zn(){Gn&&(Gn.detachEvent("onpropertychange",tr),Kn=Gn=null)}function tr(t){if("value"===t.propertyName&&Wn(Kn)){var e=[];if(qn(e,Kn,t,Tt(t)),t=Hn,Mt)t(e);else{Mt=!0;try{Pt(t,e)}finally{Mt=!1,jt()}}}}function er(t,e,n){"focusin"===t?(Zn(),Kn=n,(Gn=e).attachEvent("onpropertychange",tr)):"focusout"===t&&Zn()}function nr(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Wn(Kn)}function rr(t,e){if("click"===t)return Wn(e)}function ir(t,e){if("input"===t||"change"===t)return Wn(e)}var or="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},ar=Object.prototype.hasOwnProperty;function sr(t,e){if(or(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ar.call(e,n[r])||!or(t[n[r]],e[n[r]]))return!1;return!0}function ur(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function cr(t,e){var n,r=ur(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=ur(r)}}function lr(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?lr(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function fr(){for(var t=window,e=J();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=J((t=e.contentWindow).document)}return e}function hr(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,dr=null,vr=null,mr=null,yr=!1;function gr(t,e,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==dr||dr!==J(r)||(r="selectionStart"in(r=dr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},mr&&sr(mr,r)||(mr=r,0<(r=Pr(vr,"onSelect")).length&&(e=new fn("onSelect","select",null,e,n),t.push({event:e,listeners:r}),e.target=dr)))}De("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),De("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),De(Pe,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Oe.set(br[wr],0);l("onMouseEnter",["mouseout","mouseover"]),l("onMouseLeave",["mouseout","mouseover"]),l("onPointerEnter",["pointerout","pointerover"]),l("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Ar(t,e,n){var r=t.type||"unknown-event";t.currentTarget=n,function(t,e,n,r,i,o,s,u,c){if(Yt.apply(this,arguments),qt){if(!qt)throw Error(a(198));var l=Gt;qt=!1,Gt=null,Kt||(Kt=!0,Ht=l)}}(r,e,void 0,t),t.currentTarget=null}function _r(t,e){e=0!=(4&e);for(var n=0;n<t.length;n++){var r=t[n],i=r.event;r=r.listeners;t:{var o=void 0;if(e)for(var a=r.length-1;0<=a;a--){var s=r[a],u=s.instance,c=s.currentTarget;if(s=s.listener,u!==o&&i.isPropagationStopped())break t;Ar(i,s,c),o=u}else for(a=0;a<r.length;a++){if(u=(s=r[a]).instance,c=s.currentTarget,s=s.listener,u!==o&&i.isPropagationStopped())break t;Ar(i,s,c),o=u}}}if(Kt)throw t=Ht,Kt=!1,Ht=null,t}function Tr(t,e){var n=ei(e),r=t+"__bubble";n.has(r)||(Cr(e,t,2,!1),n.add(r))}var kr="_reactListening"+Math.random().toString(36).slice(2);function Sr(t){t[kr]||(t[kr]=!0,s.forEach((function(e){Ir.has(e)||Nr(e,!1,t,null),Nr(e,!0,t,null)})))}function Nr(t,e,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===t&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!e&&Ir.has(t)){if("scroll"!==t)return;i|=2,o=r}var a=ei(o),s=t+"__"+(e?"capture":"bubble");a.has(s)||(e&&(i|=4),Cr(o,t,i,e),a.add(s))}function Cr(t,e,n,r){var i=Oe.get(e);switch(void 0===i?2:i){case 0:i=Ye;break;case 1:i=Qe;break;default:i=Xe}n=i.bind(null,e,n,t),i=void 0,!Ut||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(i=!0),r?void 0!==i?t.addEventListener(e,n,{capture:!0,passive:i}):t.addEventListener(e,n,!0):void 0!==i?t.addEventListener(e,n,{passive:i}):t.addEventListener(e,n,!1)}function xr(t,e,n,r,i){var o=r;if(0==(1&e)&&0==(2&e)&&null!==r)t:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===i||8===u.nodeType&&u.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=$r(s)))return;if(5===(u=a.tag)||6===u){r=o=a;continue t}s=s.parentNode}}r=r.return}!function(t,e,n){if(Vt)return t();Vt=!0;try{Rt(t,e,n)}finally{Vt=!1,jt()}}((function(){var r=o,i=Tt(n),a=[];t:{var s=xe.get(t);if(void 0!==s){var u=fn,c=t;switch(t){case"keypress":if(0===nn(n))break t;case"keydown":case"keyup":u=kn;break;case"focusin":c="focus",u=yn;break;case"focusout":c="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nn;break;case ke:case Se:case Ne:u=gn;break;case Ce:u=Cn;break;case"scroll":u=pn;break;case"wheel":u=xn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Sn}var l=0!=(4&e),f=!l&&"scroll"===t,h=l?null!==s?s+"Capture":null:s;l=[];for(var p,d=r;null!==d;){var v=(p=d).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==h&&null!=(v=Ft(d,h))&&l.push(Or(d,v,p))),f)break;d=d.return}0<l.length&&(s=new u(s,c,null,n,i),a.push({event:s,listeners:l}))}}if(0==(7&e)){if(u="mouseout"===t||"pointerout"===t,(!(s="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(c=n.relatedTarget||n.fromElement)||!$r(c)&&!c[Qr])&&(u||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?$r(c):null)&&(c!==(f=Qt(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(l=vn,v="onMouseLeave",h="onMouseEnter",d="mouse","pointerout"!==t&&"pointerover"!==t||(l=Sn,v="onPointerLeave",h="onPointerEnter",d="pointer"),f=null==u?s:Zr(u),p=null==c?s:Zr(c),(s=new l(v,d+"leave",u,n,i)).target=f,s.relatedTarget=p,v=null,$r(i)===r&&((l=new l(h,d+"enter",c,n,i)).target=p,l.relatedTarget=f,v=l),f=v,u&&c)t:{for(h=c,d=0,p=l=u;p;p=Dr(p))d++;for(p=0,v=h;v;v=Dr(v))p++;for(;0<d-p;)l=Dr(l),d--;for(;0<p-d;)h=Dr(h),p--;for(;d--;){if(l===h||null!==h&&l===h.alternate)break t;l=Dr(l),h=Dr(h)}l=null}else l=null;null!==u&&Lr(a,s,u,l,!1),null!==c&&null!==f&&Lr(a,f,c,l,!0)}if("select"===(u=(s=r?Zr(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var m=Yn;else if(zn(s))if(Qn)m=ir;else{m=nr;var y=er}else(u=s.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=rr);switch(m&&(m=m(t,r))?qn(a,m,n,i):(y&&y(t,s,r),"focusout"===t&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&it(s,"number",s.value)),y=r?Zr(r):window,t){case"focusin":(zn(y)||"true"===y.contentEditable)&&(dr=y,vr=r,mr=null);break;case"focusout":mr=vr=dr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,gr(a,n,i);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":gr(a,n,i)}var g;if(Pn)t:{switch(t){case"compositionstart":var b="onCompositionStart";break t;case"compositionend":b="onCompositionEnd";break t;case"compositionupdate":b="onCompositionUpdate";break t}b=void 0}else Un?jn(t,n)&&(b="onCompositionEnd"):"keydown"===t&&229===n.keyCode&&(b="onCompositionStart");b&&(Rn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(g=en()):(Ze="value"in(Je=i)?Je.value:Je.textContent,Un=!0)),0<(y=Pr(r,b)).length&&(b=new wn(b,t,null,n,i),a.push({event:b,listeners:y}),(g||null!==(g=Fn(n)))&&(b.data=g))),(g=Ln?function(t,e){switch(t){case"compositionend":return Fn(e);case"keypress":return 32!==e.which?null:(Vn=!0,Mn);case"textInput":return(t=e.data)===Mn&&Vn?null:t;default:return null}}(t,n):function(t,e){if(Un)return"compositionend"===t||!Pn&&jn(t,e)?(t=en(),tn=Ze=Je=null,Un=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Rn&&"ko"!==e.locale?null:e.data;default:return null}}(t,n))&&0<(r=Pr(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=g)}_r(a,e)}))}function Or(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Pr(t,e){for(var n=e+"Capture",r=[];null!==t;){var i=t,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Ft(t,n))&&r.unshift(Or(t,o,i)),null!=(o=Ft(t,e))&&r.push(Or(t,o,i))),t=t.return}return r}function Dr(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function Lr(t,e,n,r,i){for(var o=e._reactName,a=[];null!==n&&n!==r;){var s=n,u=s.alternate,c=s.stateNode;if(null!==u&&u===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(u=Ft(n,o))&&a.unshift(Or(n,u,s)):i||null!=(u=Ft(n,o))&&a.push(Or(n,u,s))),n=n.return}0!==a.length&&t.push({event:e,listeners:a})}function Rr(){}var Mr=null,Vr=null;function jr(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Fr(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function zr(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function qr(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function Gr(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===e)return t;e--}else"/$"===n&&e++}t=t.previousSibling}return null}var Kr=0,Hr=Math.random().toString(36).slice(2),Wr="__reactFiber$"+Hr,Yr="__reactProps$"+Hr,Qr="__reactContainer$"+Hr,Xr="__reactEvents$"+Hr;function $r(t){var e=t[Wr];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Qr]||n[Wr]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=Gr(t);null!==t;){if(n=t[Wr])return n;t=Gr(t)}return e}n=(t=n).parentNode}return null}function Jr(t){return!(t=t[Wr]||t[Qr])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function Zr(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function ti(t){return t[Yr]||null}function ei(t){var e=t[Xr];return void 0===e&&(e=t[Xr]=new Set),e}var ni=[],ri=-1;function ii(t){return{current:t}}function oi(t){0>ri||(t.current=ni[ri],ni[ri]=null,ri--)}function ai(t,e){ri++,ni[ri]=t.current,t.current=e}var si={},ui=ii(si),ci=ii(!1),li=si;function fi(t,e){var n=t.type.contextTypes;if(!n)return si;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=e[i];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function hi(t){return null!=t.childContextTypes}function pi(){oi(ci),oi(ui)}function di(t,e,n){if(ui.current!==si)throw Error(a(168));ai(ui,e),ai(ci,n)}function vi(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,W(e)||"Unknown",o));return i({},n,r)}function mi(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||si,li=ui.current,ai(ui,t),ai(ci,ci.current),!0}function yi(t,e,n){var r=t.stateNode;if(!r)throw Error(a(169));n?(t=vi(t,e,li),r.__reactInternalMemoizedMergedChildContext=t,oi(ci),oi(ui),ai(ui,t)):oi(ci),ai(ci,n)}var gi=null,bi=null,wi=o.unstable_runWithPriority,Ei=o.unstable_scheduleCallback,Ii=o.unstable_cancelCallback,Ai=o.unstable_shouldYield,_i=o.unstable_requestPaint,Ti=o.unstable_now,ki=o.unstable_getCurrentPriorityLevel,Si=o.unstable_ImmediatePriority,Ni=o.unstable_UserBlockingPriority,Ci=o.unstable_NormalPriority,xi=o.unstable_LowPriority,Oi=o.unstable_IdlePriority,Pi={},Di=void 0!==_i?_i:function(){},Li=null,Ri=null,Mi=!1,Vi=Ti(),ji=1e4>Vi?Ti:function(){return Ti()-Vi};function Fi(){switch(ki()){case Si:return 99;case Ni:return 98;case Ci:return 97;case xi:return 96;case Oi:return 95;default:throw Error(a(332))}}function Ui(t){switch(t){case 99:return Si;case 98:return Ni;case 97:return Ci;case 96:return xi;case 95:return Oi;default:throw Error(a(332))}}function Bi(t,e){return t=Ui(t),wi(t,e)}function zi(t,e,n){return t=Ui(t),Ei(t,e,n)}function qi(){if(null!==Ri){var t=Ri;Ri=null,Ii(t)}Gi()}function Gi(){if(!Mi&&null!==Li){Mi=!0;var t=0;try{var e=Li;Bi(99,(function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}})),Li=null}catch(e){throw null!==Li&&(Li=Li.slice(t+1)),Ei(Si,qi),e}finally{Mi=!1}}}var Ki=E.ReactCurrentBatchConfig;function Hi(t,e){if(t&&t.defaultProps){for(var n in e=i({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var Wi=ii(null),Yi=null,Qi=null,Xi=null;function $i(){Xi=Qi=Yi=null}function Ji(t){var e=Wi.current;oi(Wi),t.type._context._currentValue=e}function Zi(t,e){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)===e){if(null===n||(n.childLanes&e)===e)break;n.childLanes|=e}else t.childLanes|=e,null!==n&&(n.childLanes|=e);t=t.return}}function to(t,e){Yi=t,Xi=Qi=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Pa=!0),t.firstContext=null)}function eo(t,e){if(Xi!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(Xi=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Qi){if(null===Yi)throw Error(a(308));Qi=e,Yi.dependencies={lanes:0,firstContext:e,responders:null}}else Qi=Qi.next=e;return t._currentValue}var no=!1;function ro(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function io(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function oo(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function ao(t,e){if(null!==(t=t.updateQueue)){var n=(t=t.shared).pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}}function so(t,e){var n=t.updateQueue,r=t.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=e:o=o.next=e}else i=o=e;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function uo(t,e,n,r){var o=t.updateQueue;no=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var c=u,l=c.next;c.next=null,null===s?a=l:s.next=l,s=c;var f=t.alternate;if(null!==f){var h=(f=f.updateQueue).lastBaseUpdate;h!==s&&(null===h?f.firstBaseUpdate=l:h.next=l,f.lastBaseUpdate=c)}}if(null!==a){for(h=o.baseState,s=0,f=l=c=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var d=t,v=a;switch(u=e,p=n,v.tag){case 1:if("function"==typeof(d=v.payload)){h=d.call(p,h,u);break t}h=d;break t;case 3:d.flags=-4097&d.flags|64;case 0:if(null==(u="function"==typeof(d=v.payload)?d.call(p,h,u):d))break t;h=i({},h,u);break t;case 2:no=!0}}null!==a.callback&&(t.flags|=32,null===(u=o.effects)?o.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(l=f=p,c=h):f=f.next=p,s|=u;if(null===(a=a.next)){if(null===(u=o.shared.pending))break;a=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===f&&(c=h),o.baseState=c,o.firstBaseUpdate=l,o.lastBaseUpdate=f,Ls|=s,t.lanes=s,t.memoizedState=h}}function co(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var r=t[e],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var lo=(new r.Component).refs;function fo(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:i({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var ho={isMounted:function(t){return!!(t=t._reactInternals)&&Qt(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=ou(),i=au(t),o=oo(r,i);o.payload=e,null!=n&&(o.callback=n),ao(t,o),su(t,i,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=ou(),i=au(t),o=oo(r,i);o.tag=1,o.payload=e,null!=n&&(o.callback=n),ao(t,o),su(t,i,r)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=ou(),r=au(t),i=oo(n,r);i.tag=2,null!=e&&(i.callback=e),ao(t,i),su(t,r,n)}};function po(t,e,n,r,i,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&sr(n,r)&&sr(i,o))}function vo(t,e,n){var r=!1,i=si,o=e.contextType;return"object"==typeof o&&null!==o?o=eo(o):(i=hi(e)?li:ui.current,o=(r=null!=(r=e.contextTypes))?fi(t,i):si),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=ho,t.stateNode=e,e._reactInternals=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,t.__reactInternalMemoizedMaskedChildContext=o),e}function mo(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&ho.enqueueReplaceState(e,e.state,null)}function yo(t,e,n,r){var i=t.stateNode;i.props=n,i.state=t.memoizedState,i.refs=lo,ro(t);var o=e.contextType;"object"==typeof o&&null!==o?i.context=eo(o):(o=hi(e)?li:ui.current,i.context=fi(t,o)),uo(t,n,i,r),i.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(fo(t,e,o,n),i.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(e=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),e!==i.state&&ho.enqueueReplaceState(i,i.state,null),uo(t,n,i,r),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4)}var go=Array.isArray;function bo(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,t));var i=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===i?e.ref:((e=function(t){var e=r.refs;e===lo&&(e=r.refs={}),null===t?delete e[i]:e[i]=t})._stringRef=i,e)}if("string"!=typeof t)throw Error(a(284));if(!n._owner)throw Error(a(290,t))}return t}function wo(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function Eo(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(t,e){return(t=Vu(t,e)).index=0,t.sibling=null,t}function o(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.flags=2,n):r:(e.flags=2,n):n}function s(e){return t&&null===e.alternate&&(e.flags=2),e}function u(t,e,n,r){return null===e||6!==e.tag?((e=Bu(n,t.mode,r)).return=t,e):((e=i(e,n)).return=t,e)}function c(t,e,n,r){return null!==e&&e.elementType===n.type?((r=i(e,n.props)).ref=bo(t,e,n),r.return=t,r):((r=ju(n.type,n.key,n.props,null,t.mode,r)).ref=bo(t,e,n),r.return=t,r)}function l(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=zu(n,t.mode,r)).return=t,e):((e=i(e,n.children||[])).return=t,e)}function f(t,e,n,r,o){return null===e||7!==e.tag?((e=Fu(n,t.mode,r,o)).return=t,e):((e=i(e,n)).return=t,e)}function h(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Bu(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case I:return(n=ju(e.type,e.key,e.props,null,t.mode,n)).ref=bo(t,null,e),n.return=t,n;case A:return(e=zu(e,t.mode,n)).return=t,e}if(go(e)||z(e))return(e=Fu(e,t.mode,n,null)).return=t,e;wo(t,e)}return null}function p(t,e,n,r){var i=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case I:return n.key===i?n.type===_?f(t,e,n.props.children,r,i):c(t,e,n,r):null;case A:return n.key===i?l(t,e,n,r):null}if(go(n)||z(n))return null!==i?null:f(t,e,n,r,null);wo(t,n)}return null}function d(t,e,n,r,i){if("string"==typeof r||"number"==typeof r)return u(e,t=t.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case I:return t=t.get(null===r.key?n:r.key)||null,r.type===_?f(e,t,r.props.children,i,r.key):c(e,t,r,i);case A:return l(e,t=t.get(null===r.key?n:r.key)||null,r,i)}if(go(r)||z(r))return f(e,t=t.get(n)||null,r,i,null);wo(e,r)}return null}function v(i,a,s,u){for(var c=null,l=null,f=a,v=a=0,m=null;null!==f&&v<s.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var y=p(i,f,s[v],u);if(null===y){null===f&&(f=m);break}t&&f&&null===y.alternate&&e(i,f),a=o(y,a,v),null===l?c=y:l.sibling=y,l=y,f=m}if(v===s.length)return n(i,f),c;if(null===f){for(;v<s.length;v++)null!==(f=h(i,s[v],u))&&(a=o(f,a,v),null===l?c=f:l.sibling=f,l=f);return c}for(f=r(i,f);v<s.length;v++)null!==(m=d(f,i,v,s[v],u))&&(t&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=o(m,a,v),null===l?c=m:l.sibling=m,l=m);return t&&f.forEach((function(t){return e(i,t)})),c}function m(i,s,u,c){var l=z(u);if("function"!=typeof l)throw Error(a(150));if(null==(u=l.call(u)))throw Error(a(151));for(var f=l=null,v=s,m=s=0,y=null,g=u.next();null!==v&&!g.done;m++,g=u.next()){v.index>m?(y=v,v=null):y=v.sibling;var b=p(i,v,g.value,c);if(null===b){null===v&&(v=y);break}t&&v&&null===b.alternate&&e(i,v),s=o(b,s,m),null===f?l=b:f.sibling=b,f=b,v=y}if(g.done)return n(i,v),l;if(null===v){for(;!g.done;m++,g=u.next())null!==(g=h(i,g.value,c))&&(s=o(g,s,m),null===f?l=g:f.sibling=g,f=g);return l}for(v=r(i,v);!g.done;m++,g=u.next())null!==(g=d(v,i,m,g.value,c))&&(t&&null!==g.alternate&&v.delete(null===g.key?m:g.key),s=o(g,s,m),null===f?l=g:f.sibling=g,f=g);return t&&v.forEach((function(t){return e(i,t)})),l}return function(t,r,o,u){var c="object"==typeof o&&null!==o&&o.type===_&&null===o.key;c&&(o=o.props.children);var l="object"==typeof o&&null!==o;if(l)switch(o.$$typeof){case I:t:{for(l=o.key,c=r;null!==c;){if(c.key===l){switch(c.tag){case 7:if(o.type===_){n(t,c.sibling),(r=i(c,o.props.children)).return=t,t=r;break t}break;default:if(c.elementType===o.type){n(t,c.sibling),(r=i(c,o.props)).ref=bo(t,c,o),r.return=t,t=r;break t}}n(t,c);break}e(t,c),c=c.sibling}o.type===_?((r=Fu(o.props.children,t.mode,u,o.key)).return=t,t=r):((u=ju(o.type,o.key,o.props,null,t.mode,u)).ref=bo(t,r,o),u.return=t,t=u)}return s(t);case A:t:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(t,r.sibling),(r=i(r,o.children||[])).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=zu(o,t.mode,u)).return=t,t=r}return s(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(t,r.sibling),(r=i(r,o)).return=t,t=r):(n(t,r),(r=Bu(o,t.mode,u)).return=t,t=r),s(t);if(go(o))return v(t,r,o,u);if(z(o))return m(t,r,o,u);if(l&&wo(t,o),void 0===o&&!c)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,W(t.type)||"Component"))}return n(t,r)}}var Io=Eo(!0),Ao=Eo(!1),_o={},To=ii(_o),ko=ii(_o),So=ii(_o);function No(t){if(t===_o)throw Error(a(174));return t}function Co(t,e){switch(ai(So,e),ai(ko,t),ai(To,_o),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:pt(null,"");break;default:e=pt(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}oi(To),ai(To,e)}function xo(){oi(To),oi(ko),oi(So)}function Oo(t){No(So.current);var e=No(To.current),n=pt(e,t.type);e!==n&&(ai(ko,t),ai(To,n))}function Po(t){ko.current===t&&(oi(To),oi(ko))}var Do=ii(0);function Lo(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Ro=null,Mo=null,Vo=!1;function jo(t,e){var n=Ru(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Fo(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);case 13:default:return!1}}function Uo(t){if(Vo){var e=Mo;if(e){var n=e;if(!Fo(t,e)){if(!(e=qr(n.nextSibling))||!Fo(t,e))return t.flags=-1025&t.flags|2,Vo=!1,void(Ro=t);jo(Ro,n)}Ro=t,Mo=qr(e.firstChild)}else t.flags=-1025&t.flags|2,Vo=!1,Ro=t}}function Bo(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Ro=t}function zo(t){if(t!==Ro)return!1;if(!Vo)return Bo(t),Vo=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Fr(e,t.memoizedProps))for(e=Mo;e;)jo(t,e),e=qr(e.nextSibling);if(Bo(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===e){Mo=qr(t.nextSibling);break t}e--}else"$"!==n&&"$!"!==n&&"$?"!==n||e++}t=t.nextSibling}Mo=null}}else Mo=Ro?qr(t.stateNode.nextSibling):null;return!0}function qo(){Mo=Ro=null,Vo=!1}var Go=[];function Ko(){for(var t=0;t<Go.length;t++)Go[t]._workInProgressVersionPrimary=null;Go.length=0}var Ho=E.ReactCurrentDispatcher,Wo=E.ReactCurrentBatchConfig,Yo=0,Qo=null,Xo=null,$o=null,Jo=!1,Zo=!1;function ta(){throw Error(a(321))}function ea(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!or(t[n],e[n]))return!1;return!0}function na(t,e,n,r,i,o){if(Yo=o,Qo=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Ho.current=null===t||null===t.memoizedState?Na:Ca,t=n(r,i),Zo){o=0;do{if(Zo=!1,!(25>o))throw Error(a(301));o+=1,$o=Xo=null,e.updateQueue=null,Ho.current=xa,t=n(r,i)}while(Zo)}if(Ho.current=Sa,e=null!==Xo&&null!==Xo.next,Yo=0,$o=Xo=Qo=null,Jo=!1,e)throw Error(a(300));return t}function ra(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$o?Qo.memoizedState=$o=t:$o=$o.next=t,$o}function ia(){if(null===Xo){var t=Qo.alternate;t=null!==t?t.memoizedState:null}else t=Xo.next;var e=null===$o?Qo.memoizedState:$o.next;if(null!==e)$o=e,Xo=t;else{if(null===t)throw Error(a(310));t={memoizedState:(Xo=t).memoizedState,baseState:Xo.baseState,baseQueue:Xo.baseQueue,queue:Xo.queue,next:null},null===$o?Qo.memoizedState=$o=t:$o=$o.next=t}return $o}function oa(t,e){return"function"==typeof e?e(t):e}function aa(t){var e=ia(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var r=Xo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var u=s=o=null,c=i;do{var l=c.lane;if((Yo&l)===l)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===t?c.eagerState:t(r,c.action);else{var f={lane:l,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(s=u=f,o=r):u=u.next=f,Qo.lanes|=l,Ls|=l}c=c.next}while(null!==c&&c!==i);null===u?o=r:u.next=s,or(r,e.memoizedState)||(Pa=!0),e.memoizedState=r,e.baseState=o,e.baseQueue=u,n.lastRenderedState=r}return[e.memoizedState,n.dispatch]}function sa(t){var e=ia(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var r=n.dispatch,i=n.pending,o=e.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=t(o,s.action),s=s.next}while(s!==i);or(o,e.memoizedState)||(Pa=!0),e.memoizedState=o,null===e.baseQueue&&(e.baseState=o),n.lastRenderedState=o}return[o,r]}function ua(t,e,n){var r=e._getVersion;r=r(e._source);var i=e._workInProgressVersionPrimary;if(null!==i?t=i===r:(t=t.mutableReadLanes,(t=(Yo&t)===t)&&(e._workInProgressVersionPrimary=r,Go.push(e))),t)return n(e._source);throw Go.push(e),Error(a(350))}function ca(t,e,n,r){var i=ks;if(null===i)throw Error(a(349));var o=e._getVersion,s=o(e._source),u=Ho.current,c=u.useState((function(){return ua(i,e,n)})),l=c[1],f=c[0];c=$o;var h=t.memoizedState,p=h.refs,d=p.getSnapshot,v=h.source;h=h.subscribe;var m=Qo;return t.memoizedState={refs:p,source:e,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=l;var t=o(e._source);if(!or(s,t)){t=n(e._source),or(f,t)||(l(t),t=au(m),i.mutableReadLanes|=t&i.pendingLanes),t=i.mutableReadLanes,i.entangledLanes|=t;for(var r=i.entanglements,a=t;0<a;){var u=31-ze(a),c=1<<u;r[u]|=t,a&=~c}}}),[n,e,r]),u.useEffect((function(){return r(e._source,(function(){var t=p.getSnapshot,n=p.setSnapshot;try{n(t(e._source));var r=au(m);i.mutableReadLanes|=r&i.pendingLanes}catch(t){n((function(){throw t}))}}))}),[e,r]),or(d,n)&&or(v,e)&&or(h,r)||((t={pending:null,dispatch:null,lastRenderedReducer:oa,lastRenderedState:f}).dispatch=l=ka.bind(null,Qo,t),c.queue=t,c.baseQueue=null,f=ua(i,e,n),c.memoizedState=c.baseState=f),f}function la(t,e,n){return ca(ia(),t,e,n)}function fa(t){var e=ra();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:oa,lastRenderedState:t}).dispatch=ka.bind(null,Qo,t),[e.memoizedState,t]}function ha(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===(e=Qo.updateQueue)?(e={lastEffect:null},Qo.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t),t}function pa(t){return t={current:t},ra().memoizedState=t}function da(){return ia().memoizedState}function va(t,e,n,r){var i=ra();Qo.flags|=t,i.memoizedState=ha(1|e,n,void 0,void 0===r?null:r)}function ma(t,e,n,r){var i=ia();r=void 0===r?null:r;var o=void 0;if(null!==Xo){var a=Xo.memoizedState;if(o=a.destroy,null!==r&&ea(r,a.deps))return void ha(e,n,o,r)}Qo.flags|=t,i.memoizedState=ha(1|e,n,o,r)}function ya(t,e){return va(516,4,t,e)}function ga(t,e){return ma(516,4,t,e)}function ba(t,e){return ma(4,2,t,e)}function wa(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Ea(t,e,n){return n=null!=n?n.concat([t]):null,ma(4,2,wa.bind(null,e,t),n)}function Ia(){}function Aa(t,e){var n=ia();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&ea(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function _a(t,e){var n=ia();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&ea(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function Ta(t,e){var n=Fi();Bi(98>n?98:n,(function(){t(!0)})),Bi(97<n?97:n,(function(){var n=Wo.transition;Wo.transition=1;try{t(!1),e()}finally{Wo.transition=n}}))}function ka(t,e,n){var r=ou(),i=au(t),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),e.pending=o,a=t.alternate,t===Qo||null!==a&&a===Qo)Zo=Jo=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var s=e.lastRenderedState,u=a(s,n);if(o.eagerReducer=a,o.eagerState=u,or(u,s))return}catch(t){}su(t,i,r)}}var Sa={readContext:eo,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Na={readContext:eo,useCallback:function(t,e){return ra().memoizedState=[t,void 0===e?null:e],t},useContext:eo,useEffect:ya,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,va(4,2,wa.bind(null,e,t),n)},useLayoutEffect:function(t,e){return va(4,2,t,e)},useMemo:function(t,e){var n=ra();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=ra();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t=(t=r.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=ka.bind(null,Qo,t),[r.memoizedState,t]},useRef:pa,useState:fa,useDebugValue:Ia,useDeferredValue:function(t){var e=fa(t),n=e[0],r=e[1];return ya((function(){var e=Wo.transition;Wo.transition=1;try{r(t)}finally{Wo.transition=e}}),[t]),n},useTransition:function(){var t=fa(!1),e=t[0];return pa(t=Ta.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,n){var r=ra();return r.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:n},ca(r,t,e,n)},useOpaqueIdentifier:function(){if(Vo){var t=!1,e=function(t){return{$$typeof:R,toString:t,valueOf:t}}((function(){throw t||(t=!0,n("r:"+(Kr++).toString(36))),Error(a(355))})),n=fa(e)[1];return 0==(2&Qo.mode)&&(Qo.flags|=516,ha(5,(function(){n("r:"+(Kr++).toString(36))}),void 0,null)),e}return fa(e="r:"+(Kr++).toString(36)),e},unstable_isNewReconciler:!1},Ca={readContext:eo,useCallback:Aa,useContext:eo,useEffect:ga,useImperativeHandle:Ea,useLayoutEffect:ba,useMemo:_a,useReducer:aa,useRef:da,useState:function(){return aa(oa)},useDebugValue:Ia,useDeferredValue:function(t){var e=aa(oa),n=e[0],r=e[1];return ga((function(){var e=Wo.transition;Wo.transition=1;try{r(t)}finally{Wo.transition=e}}),[t]),n},useTransition:function(){var t=aa(oa)[0];return[da().current,t]},useMutableSource:la,useOpaqueIdentifier:function(){return aa(oa)[0]},unstable_isNewReconciler:!1},xa={readContext:eo,useCallback:Aa,useContext:eo,useEffect:ga,useImperativeHandle:Ea,useLayoutEffect:ba,useMemo:_a,useReducer:sa,useRef:da,useState:function(){return sa(oa)},useDebugValue:Ia,useDeferredValue:function(t){var e=sa(oa),n=e[0],r=e[1];return ga((function(){var e=Wo.transition;Wo.transition=1;try{r(t)}finally{Wo.transition=e}}),[t]),n},useTransition:function(){var t=sa(oa)[0];return[da().current,t]},useMutableSource:la,useOpaqueIdentifier:function(){return sa(oa)[0]},unstable_isNewReconciler:!1},Oa=E.ReactCurrentOwner,Pa=!1;function Da(t,e,n,r){e.child=null===t?Ao(e,null,n,r):Io(e,t.child,n,r)}function La(t,e,n,r,i){n=n.render;var o=e.ref;return to(e,i),r=na(t,e,n,r,o,i),null===t||Pa?(e.flags|=1,Da(t,e,r,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,Ja(t,e,i))}function Ra(t,e,n,r,i,o){if(null===t){var a=n.type;return"function"!=typeof a||Mu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=ju(n.type,null,r,e,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Ma(t,e,a,r,i,o))}return a=t.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:sr)(i,r)&&t.ref===e.ref)?Ja(t,e,o):(e.flags|=1,(t=Vu(a,r)).ref=e.ref,t.return=e,e.child=t)}function Ma(t,e,n,r,i,o){if(null!==t&&sr(t.memoizedProps,r)&&t.ref===e.ref){if(Pa=!1,0==(o&i))return e.lanes=t.lanes,Ja(t,e,o);0!=(16384&t.flags)&&(Pa=!0)}return Fa(t,e,n,r,o)}function Va(t,e,n){var r=e.pendingProps,i=r.children,o=null!==t?t.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},pu(0,n);else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},pu(0,t),null;e.memoizedState={baseLanes:0},pu(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,e.memoizedState=null):r=n,pu(0,r);return Da(t,e,i,n),e.child}function ja(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=128)}function Fa(t,e,n,r,i){var o=hi(n)?li:ui.current;return o=fi(e,o),to(e,i),n=na(t,e,n,r,o,i),null===t||Pa?(e.flags|=1,Da(t,e,n,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,Ja(t,e,i))}function Ua(t,e,n,r,i){if(hi(n)){var o=!0;mi(e)}else o=!1;if(to(e,i),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),vo(e,n,r),yo(e,n,r,i),r=!0;else if(null===t){var a=e.stateNode,s=e.memoizedProps;a.props=s;var u=a.context,c=n.contextType;c="object"==typeof c&&null!==c?eo(c):fi(e,c=hi(n)?li:ui.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==c)&&mo(e,a,r,c),no=!1;var h=e.memoizedState;a.state=h,uo(e,r,a,i),u=e.memoizedState,s!==r||h!==u||ci.current||no?("function"==typeof l&&(fo(e,n,l,r),u=e.memoizedState),(s=no||po(e,n,s,r,h,u,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=r,e.memoizedState=u),a.props=r,a.state=u,a.context=c,r=s):("function"==typeof a.componentDidMount&&(e.flags|=4),r=!1)}else{a=e.stateNode,io(t,e),s=e.memoizedProps,c=e.type===e.elementType?s:Hi(e.type,s),a.props=c,f=e.pendingProps,h=a.context,u="object"==typeof(u=n.contextType)&&null!==u?eo(u):fi(e,u=hi(n)?li:ui.current);var p=n.getDerivedStateFromProps;(l="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||h!==u)&&mo(e,a,r,u),no=!1,h=e.memoizedState,a.state=h,uo(e,r,a,i);var d=e.memoizedState;s!==f||h!==d||ci.current||no?("function"==typeof p&&(fo(e,n,p,r),d=e.memoizedState),(c=no||po(e,n,c,r,h,d,u))?(l||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&h===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&h===t.memoizedState||(e.flags|=256),e.memoizedProps=r,e.memoizedState=d),a.props=r,a.state=d,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&h===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&h===t.memoizedState||(e.flags|=256),r=!1)}return Ba(t,e,n,r,o,i)}function Ba(t,e,n,r,i,o){ja(t,e);var a=0!=(64&e.flags);if(!r&&!a)return i&&yi(e,n,!1),Ja(t,e,o);r=e.stateNode,Oa.current=e;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.flags|=1,null!==t&&a?(e.child=Io(e,t.child,null,o),e.child=Io(e,null,s,o)):Da(t,e,s,o),e.memoizedState=r.state,i&&yi(e,n,!0),e.child}function za(t){var e=t.stateNode;e.pendingContext?di(0,e.pendingContext,e.pendingContext!==e.context):e.context&&di(0,e.context,!1),Co(t,e.containerInfo)}var qa,Ga,Ka,Ha={dehydrated:null,retryLane:0};function Wa(t,e,n){var r,i=e.pendingProps,o=Do.current,a=!1;return(r=0!=(64&e.flags))||(r=(null===t||null!==t.memoizedState)&&0!=(2&o)),r?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),ai(Do,1&o),null===t?(void 0!==i.fallback&&Uo(e),t=i.children,o=i.fallback,a?(t=Ya(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ha,t):"number"==typeof i.unstable_expectedLoadTime?(t=Ya(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ha,e.lanes=33554432,t):((n=Uu({mode:"visible",children:t},e.mode,n,null)).return=e,e.child=n)):(t.memoizedState,a?(i=function(t,e,n,r,i){var o=e.mode,a=t.child;t=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&e.child!==a?((n=e.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(e.firstEffect=n.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):n=Vu(a,s),null!==t?r=Vu(t,r):(r=Fu(r,o,i,null)).flags|=2,r.return=e,n.return=e,n.sibling=r,e.child=n,r}(t,e,i.children,i.fallback,n),a=e.child,o=t.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=t.childLanes&~n,e.memoizedState=Ha,i):(n=function(t,e,n,r){var i=t.child;return t=i.sibling,n=Vu(i,{mode:"visible",children:n}),0==(2&e.mode)&&(n.lanes=r),n.return=e,n.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=n}(t,e,i.children,n),e.memoizedState=null,n))}function Ya(t,e,n,r){var i=t.mode,o=t.child;return e={mode:"hidden",children:e},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=e):o=Uu(e,i,0,null),n=Fu(n,i,r,null),o.return=t,n.return=t,o.sibling=n,t.child=o,n}function Qa(t,e){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),Zi(t.return,e)}function Xa(t,e,n,r,i,o){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function $a(t,e,n){var r=e.pendingProps,i=r.revealOrder,o=r.tail;if(Da(t,e,r.children,n),0!=(2&(r=Do.current)))r=1&r|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&Qa(t,n);else if(19===t.tag)Qa(t,n);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(ai(Do,r),0==(2&e.mode))e.memoizedState=null;else switch(i){case"forwards":for(n=e.child,i=null;null!==n;)null!==(t=n.alternate)&&null===Lo(t)&&(i=n),n=n.sibling;null===(n=i)?(i=e.child,e.child=null):(i=n.sibling,n.sibling=null),Xa(e,!1,i,n,o,e.lastEffect);break;case"backwards":for(n=null,i=e.child,e.child=null;null!==i;){if(null!==(t=i.alternate)&&null===Lo(t)){e.child=i;break}t=i.sibling,i.sibling=n,n=i,i=t}Xa(e,!0,n,null,o,e.lastEffect);break;case"together":Xa(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function Ja(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),Ls|=e.lanes,0!=(n&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(n=Vu(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Vu(t,t.pendingProps)).return=e;n.sibling=null}return e.child}return null}function Za(t,e){if(!Vo)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e||null===t.tail?t.tail=null:t.tail.sibling=null:r.sibling=null}}function ts(t,e,n){var r=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return hi(e.type)&&pi(),null;case 3:return xo(),oi(ci),oi(ui),Ko(),(r=e.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(zo(e)?e.flags|=4:r.hydrate||(e.flags|=256)),null;case 5:Po(e);var o=No(So.current);if(n=e.type,null!==t&&null!=e.stateNode)Ga(t,e,n,r),t.ref!==e.ref&&(e.flags|=128);else{if(!r){if(null===e.stateNode)throw Error(a(166));return null}if(t=No(To.current),zo(e)){r=e.stateNode,n=e.type;var s=e.memoizedProps;switch(r[Wr]=e,r[Yr]=s,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(t=0;t<Er.length;t++)Tr(Er[t],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":tt(r,s),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Tr("invalid",r);break;case"textarea":ut(r,s),Tr("invalid",r)}for(var c in At(n,s),t=null,s)s.hasOwnProperty(c)&&(o=s[c],"children"===c?"string"==typeof o?r.textContent!==o&&(t=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(t=["children",""+o]):u.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Tr("scroll",r));switch(n){case"input":X(r),rt(r,s,!0);break;case"textarea":X(r),lt(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Rr)}r=t,e.updateQueue=r,null!==r&&(e.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,t===ft&&(t=ht(n)),t===ft?"script"===n?((t=c.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof r.is?t=c.createElement(n,{is:r.is}):(t=c.createElement(n),"select"===n&&(c=t,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):t=c.createElementNS(t,n),t[Wr]=e,t[Yr]=r,qa(t,e),e.stateNode=t,c=_t(n,r),n){case"dialog":Tr("cancel",t),Tr("close",t),o=r;break;case"iframe":case"object":case"embed":Tr("load",t),o=r;break;case"video":case"audio":for(o=0;o<Er.length;o++)Tr(Er[o],t);o=r;break;case"source":Tr("error",t),o=r;break;case"img":case"image":case"link":Tr("error",t),Tr("load",t),o=r;break;case"details":Tr("toggle",t),o=r;break;case"input":tt(t,r),o=Z(t,r),Tr("invalid",t);break;case"option":o=ot(t,r);break;case"select":t._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Tr("invalid",t);break;case"textarea":ut(t,r),o=st(t,r),Tr("invalid",t);break;default:o=r}At(n,o);var l=o;for(s in l)if(l.hasOwnProperty(s)){var f=l[s];"style"===s?Et(t,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&mt(t,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&yt(t,f):"number"==typeof f&&yt(t,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(u.hasOwnProperty(s)?null!=f&&"onScroll"===s&&Tr("scroll",t):null!=f&&w(t,s,f,c))}switch(n){case"input":X(t),rt(t,r,!1);break;case"textarea":X(t),lt(t);break;case"option":null!=r.value&&t.setAttribute("value",""+Y(r.value));break;case"select":t.multiple=!!r.multiple,null!=(s=r.value)?at(t,!!r.multiple,s,!1):null!=r.defaultValue&&at(t,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(t.onclick=Rr)}jr(n,r)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)Ka(0,e,t.memoizedProps,r);else{if("string"!=typeof r&&null===e.stateNode)throw Error(a(166));n=No(So.current),No(To.current),zo(e)?(r=e.stateNode,n=e.memoizedProps,r[Wr]=e,r.nodeValue!==n&&(e.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Wr]=e,e.stateNode=r)}return null;case 13:return oi(Do),r=e.memoizedState,0!=(64&e.flags)?(e.lanes=n,e):(r=null!==r,n=!1,null===t?void 0!==e.memoizedProps.fallback&&zo(e):n=null!==t.memoizedState,r&&!n&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&Do.current)?0===Os&&(Os=3):(0!==Os&&3!==Os||(Os=4),null===ks||0==(134217727&Ls)&&0==(134217727&Rs)||fu(ks,Ns))),(r||n)&&(e.flags|=4),null);case 4:return xo(),null===t&&Sr(e.stateNode.containerInfo),null;case 10:return Ji(e),null;case 17:return hi(e.type)&&pi(),null;case 19:if(oi(Do),null===(r=e.memoizedState))return null;if(s=0!=(64&e.flags),null===(c=r.rendering))if(s)Za(r,!1);else{if(0!==Os||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(c=Lo(t))){for(e.flags|=64,Za(r,!1),null!==(s=c.updateQueue)&&(e.updateQueue=s,e.flags|=4),null===r.lastEffect&&(e.firstEffect=null),e.lastEffect=r.lastEffect,r=n,n=e.child;null!==n;)t=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=t,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,t=c.dependencies,s.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return ai(Do,1&Do.current|2),e.child}t=t.sibling}null!==r.tail&&ji()>Fs&&(e.flags|=64,s=!0,Za(r,!1),e.lanes=33554432)}else{if(!s)if(null!==(t=Lo(c))){if(e.flags|=64,s=!0,null!==(n=t.updateQueue)&&(e.updateQueue=n,e.flags|=4),Za(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Vo)return null!==(e=e.lastEffect=r.lastEffect)&&(e.nextEffect=null),null}else 2*ji()-r.renderingStartTime>Fs&&1073741824!==n&&(e.flags|=64,s=!0,Za(r,!1),e.lanes=33554432);r.isBackwards?(c.sibling=e.child,e.child=c):(null!==(n=r.last)?n.sibling=c:e.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=e.lastEffect,r.renderingStartTime=ji(),n.sibling=null,e=Do.current,ai(Do,s?1&e|2:1&e),n):null;case 23:case 24:return du(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function es(t){switch(t.tag){case 1:hi(t.type)&&pi();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(xo(),oi(ci),oi(ui),Ko(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return Po(t),null;case 13:return oi(Do),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return oi(Do),null;case 4:return xo(),null;case 10:return Ji(t),null;case 23:case 24:return du(),null;default:return null}}function ns(t,e){try{var n="",r=e;do{n+=H(r),r=r.return}while(r);var i=n}catch(t){i="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:i}}function rs(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}qa=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ga=function(t,e,n,r){var o=t.memoizedProps;if(o!==r){t=e.stateNode,No(To.current);var a,s=null;switch(n){case"input":o=Z(t,o),r=Z(t,r),s=[];break;case"option":o=ot(t,o),r=ot(t,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=st(t,o),r=st(t,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(t.onclick=Rr)}for(f in At(n,r),n=null,o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&null!=o[f])if("style"===f){var c=o[f];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var l=r[f];if(c=null!=o?o[f]:void 0,r.hasOwnProperty(f)&&l!==c&&(null!=l||null!=c))if("style"===f)if(c){for(a in c)!c.hasOwnProperty(a)||l&&l.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in l)l.hasOwnProperty(a)&&c[a]!==l[a]&&(n||(n={}),n[a]=l[a])}else n||(s||(s=[]),s.push(f,n)),n=l;else"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(s=s||[]).push(f,l)):"children"===f?"string"!=typeof l&&"number"!=typeof l||(s=s||[]).push(f,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=l&&"onScroll"===f&&Tr("scroll",t),s||c===l||(s=[])):"object"==typeof l&&null!==l&&l.$$typeof===R?l.toString():(s=s||[]).push(f,l))}n&&(s=s||[]).push("style",n);var f=s;(e.updateQueue=f)&&(e.flags|=4)}},Ka=function(t,e,n,r){n!==r&&(e.flags|=4)};var is="function"==typeof WeakMap?WeakMap:Map;function os(t,e,n){(n=oo(-1,n)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){qs||(qs=!0,Gs=r),rs(0,e)},n}function as(t,e,n){(n=oo(-1,n)).tag=3;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var i=e.value;n.payload=function(){return rs(0,e),r(i)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ks?Ks=new Set([this]):Ks.add(this),rs(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}var ss="function"==typeof WeakSet?WeakSet:Set;function us(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Ou(t,e)}else e.current=null}function cs(t,e){switch(e.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&e.flags&&null!==t){var n=t.memoizedProps,r=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:Hi(e.type,n),r),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&zr(e.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ls(t,e,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var r=t.create;t.destroy=r()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var i=t;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Nu(n,t),Su(n,t)),t=r}while(t!==e)}return;case 1:return t=n.stateNode,4&n.flags&&(null===e?t.componentDidMount():(r=n.elementType===n.type?e.memoizedProps:Hi(n.type,e.memoizedProps),t.componentDidUpdate(r,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=n.updateQueue)&&co(n,e,t));case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:t=n.child.stateNode;break;case 1:t=n.child.stateNode}co(n,e,t)}return;case 5:return t=n.stateNode,void(null===e&&4&n.flags&&jr(n.type,n.memoizedProps)&&t.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&we(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function fs(t,e){for(var n=t;;){if(5===n.tag){var r=n.stateNode;if(e)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=wt("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=e?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===t)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hs(t,e){if(bi&&"function"==typeof bi.onCommitFiberUnmount)try{bi.onCommitFiberUnmount(gi,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Nu(e,n);else{r=e;try{i()}catch(t){Ou(r,t)}}n=n.next}while(n!==t)}break;case 1:if(us(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ou(e,t)}break;case 5:us(e);break;case 4:gs(t,e)}}function ps(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function ds(t){return 5===t.tag||3===t.tag||4===t.tag}function vs(t){t:{for(var e=t.return;null!==e;){if(ds(e))break t;e=e.return}throw Error(a(160))}var n=e;switch(e=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:e=e.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(yt(e,""),n.flags&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||ds(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break t}}r?ms(t,n,e):ys(t,n,e)}function ms(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(8===n.nodeType?(e=n.parentNode).insertBefore(t,n):(e=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==e.onclick||(e.onclick=Rr));else if(4!==r&&null!==(t=t.child))for(ms(t,e,n),t=t.sibling;null!==t;)ms(t,e,n),t=t.sibling}function ys(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?n.insertBefore(t,e):n.appendChild(t);else if(4!==r&&null!==(t=t.child))for(ys(t,e,n),t=t.sibling;null!==t;)ys(t,e,n),t=t.sibling}function gs(t,e){for(var n,r,i=e,o=!1;;){if(!o){o=i.return;t:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break t;case 3:case 4:n=n.containerInfo,r=!0;break t}o=o.return}o=!0}if(5===i.tag||6===i.tag){t:for(var s=t,u=i,c=u;;)if(hs(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break t;for(;null===c.sibling;){if(null===c.return||c.return===u)break t;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(s=n,u=i.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(hs(t,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function bs(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var n=e.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(t=r.destroy,r.destroy=void 0,void 0!==t&&t()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=e.stateNode)){r=e.memoizedProps;var i=null!==t?t.memoizedProps:r;t=e.type;var o=e.updateQueue;if(e.updateQueue=null,null!==o){for(n[Yr]=r,"input"===t&&"radio"===r.type&&null!=r.name&&et(n,r),_t(t,i),e=_t(t,r),i=0;i<o.length;i+=2){var s=o[i],u=o[i+1];"style"===s?Et(n,u):"dangerouslySetInnerHTML"===s?mt(n,u):"children"===s?yt(n,u):w(n,s,u,e)}switch(t){case"input":nt(n,r);break;case"textarea":ct(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?at(n,!!r.multiple,o,!1):t!==!!r.multiple&&(null!=r.defaultValue?at(n,!!r.multiple,r.defaultValue,!0):at(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((n=e.stateNode).hydrate&&(n.hydrate=!1,we(n.containerInfo)));case 12:return;case 13:return null!==e.memoizedState&&(js=ji(),fs(e.child,!0)),void ws(e);case 19:return void ws(e);case 17:return;case 23:case 24:return void fs(e,null!==e.memoizedState)}throw Error(a(163))}function ws(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new ss),e.forEach((function(e){var r=Du.bind(null,t,e);n.has(e)||(n.add(e),e.then(r,r))}))}}function Es(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var Is=Math.ceil,As=E.ReactCurrentDispatcher,_s=E.ReactCurrentOwner,Ts=0,ks=null,Ss=null,Ns=0,Cs=0,xs=ii(0),Os=0,Ps=null,Ds=0,Ls=0,Rs=0,Ms=0,Vs=null,js=0,Fs=1/0;function Us(){Fs=ji()+500}var Bs,zs=null,qs=!1,Gs=null,Ks=null,Hs=!1,Ws=null,Ys=90,Qs=[],Xs=[],$s=null,Js=0,Zs=null,tu=-1,eu=0,nu=0,ru=null,iu=!1;function ou(){return 0!=(48&Ts)?ji():-1!==tu?tu:tu=ji()}function au(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Fi()?1:2;if(0===eu&&(eu=Ds),0!==Ki.transition){0!==nu&&(nu=null!==Vs?Vs.pendingLanes:0),t=eu;var e=4186112&~nu;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Fi(),t=je(0!=(4&Ts)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),eu)}function su(t,e,n){if(50<Js)throw Js=0,Zs=null,Error(a(185));if(null===(t=uu(t,e)))return null;Be(t,e,n),t===ks&&(Rs|=e,4===Os&&fu(t,Ns));var r=Fi();1===e?0!=(8&Ts)&&0==(48&Ts)?hu(t):(cu(t,n),0===Ts&&(Us(),qi())):(0==(4&Ts)||98!==r&&99!==r||(null===$s?$s=new Set([t]):$s.add(t)),cu(t,n)),Vs=t}function uu(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}function cu(t,e){for(var n=t.callbackNode,r=t.suspendedLanes,i=t.pingedLanes,o=t.expirationTimes,s=t.pendingLanes;0<s;){var u=31-ze(s),c=1<<u,l=o[u];if(-1===l){if(0==(c&r)||0!=(c&i)){l=e,Re(c);var f=Le;o[u]=10<=f?l+250:6<=f?l+5e3:-1}}else l<=e&&(t.expiredLanes|=c);s&=~c}if(r=Me(t,t===ks?Ns:0),e=Le,0===r)null!==n&&(n!==Pi&&Ii(n),t.callbackNode=null,t.callbackPriority=0);else{if(null!==n){if(t.callbackPriority===e)return;n!==Pi&&Ii(n)}15===e?(n=hu.bind(null,t),null===Li?(Li=[n],Ri=Ei(Si,Gi)):Li.push(n),n=Pi):n=14===e?zi(99,hu.bind(null,t)):zi(n=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),lu.bind(null,t)),t.callbackPriority=e,t.callbackNode=n}}function lu(t){if(tu=-1,nu=eu=0,0!=(48&Ts))throw Error(a(327));var e=t.callbackNode;if(ku()&&t.callbackNode!==e)return null;var n=Me(t,t===ks?Ns:0);if(0===n)return null;var r=n,i=Ts;Ts|=16;var o=yu();for(ks===t&&Ns===r||(Us(),vu(t,r));;)try{wu();break}catch(e){mu(t,e)}if($i(),As.current=o,Ts=i,null!==Ss?r=0:(ks=null,Ns=0,r=Os),0!=(Ds&Rs))vu(t,0);else if(0!==r){if(2===r&&(Ts|=64,t.hydrate&&(t.hydrate=!1,zr(t.containerInfo)),0!==(n=Ve(t))&&(r=gu(t,n))),1===r)throw e=Ps,vu(t,0),fu(t,n),cu(t,ji()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Au(t);break;case 3:if(fu(t,n),(62914560&n)===n&&10<(r=js+500-ji())){if(0!==Me(t,0))break;if(((i=t.suspendedLanes)&n)!==n){ou(),t.pingedLanes|=t.suspendedLanes&i;break}t.timeoutHandle=Ur(Au.bind(null,t),r);break}Au(t);break;case 4:if(fu(t,n),(4186112&n)===n)break;for(r=t.eventTimes,i=-1;0<n;){var s=31-ze(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=ji()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Is(n/1960))-n)){t.timeoutHandle=Ur(Au.bind(null,t),n);break}Au(t);break;case 5:Au(t);break;default:throw Error(a(329))}}return cu(t,ji()),t.callbackNode===e?lu.bind(null,t):null}function fu(t,e){for(e&=~Ms,e&=~Rs,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-ze(e),r=1<<n;t[n]=-1,e&=~r}}function hu(t){if(0!=(48&Ts))throw Error(a(327));if(ku(),t===ks&&0!=(t.expiredLanes&Ns)){var e=Ns,n=gu(t,e);0!=(Ds&Rs)&&(n=gu(t,e=Me(t,e)))}else n=gu(t,e=Me(t,0));if(0!==t.tag&&2===n&&(Ts|=64,t.hydrate&&(t.hydrate=!1,zr(t.containerInfo)),0!==(e=Ve(t))&&(n=gu(t,e))),1===n)throw n=Ps,vu(t,0),fu(t,e),cu(t,ji()),n;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Au(t),cu(t,ji()),null}function pu(t,e){ai(xs,Cs),Cs|=e,Ds|=e}function du(){Cs=xs.current,oi(xs)}function vu(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,Br(n)),null!==Ss)for(n=Ss.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pi();break;case 3:xo(),oi(ci),oi(ui),Ko();break;case 5:Po(r);break;case 4:xo();break;case 13:case 19:oi(Do);break;case 10:Ji(r);break;case 23:case 24:du()}n=n.return}ks=t,Ss=Vu(t.current,null),Ns=Cs=Ds=e,Os=0,Ps=null,Ms=Rs=Ls=0}function mu(t,e){for(;;){var n=Ss;try{if($i(),Ho.current=Sa,Jo){for(var r=Qo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}Jo=!1}if(Yo=0,$o=Xo=Qo=null,Zo=!1,_s.current=null,null===n||null===n.return){Os=1,Ps=e,Ss=null;break}t:{var o=t,a=n.return,s=n,u=e;if(e=Ns,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u;if(0==(2&s.mode)){var l=s.alternate;l?(s.updateQueue=l.updateQueue,s.memoizedState=l.memoizedState,s.lanes=l.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Do.current),h=a;do{var p;if(p=13===h.tag){var d=h.memoizedState;if(null!==d)p=null!==d.dehydrated;else{var v=h.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var m=h.updateQueue;if(null===m){var y=new Set;y.add(c),h.updateQueue=y}else m.add(c);if(0==(2&h.mode)){if(h.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var g=oo(-1,1);g.tag=2,ao(s,g)}s.lanes|=1;break t}u=void 0,s=e;var b=o.pingCache;if(null===b?(b=o.pingCache=new is,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(s)){u.add(s);var w=Pu.bind(null,o,c,s);c.then(w,w)}h.flags|=4096,h.lanes=e;break t}h=h.return}while(null!==h);u=Error((W(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Os&&(Os=2),u=ns(u,s),h=a;do{switch(h.tag){case 3:o=u,h.flags|=4096,e&=-e,h.lanes|=e,so(h,os(0,o,e));break t;case 1:o=u;var E=h.type,I=h.stateNode;if(0==(64&h.flags)&&("function"==typeof E.getDerivedStateFromError||null!==I&&"function"==typeof I.componentDidCatch&&(null===Ks||!Ks.has(I)))){h.flags|=4096,e&=-e,h.lanes|=e,so(h,as(h,o,e));break t}}h=h.return}while(null!==h)}Iu(n)}catch(t){e=t,Ss===n&&null!==n&&(Ss=n=n.return);continue}break}}function yu(){var t=As.current;return As.current=Sa,null===t?Sa:t}function gu(t,e){var n=Ts;Ts|=16;var r=yu();for(ks===t&&Ns===e||vu(t,e);;)try{bu();break}catch(e){mu(t,e)}if($i(),Ts=n,As.current=r,null!==Ss)throw Error(a(261));return ks=null,Ns=0,Os}function bu(){for(;null!==Ss;)Eu(Ss)}function wu(){for(;null!==Ss&&!Ai();)Eu(Ss)}function Eu(t){var e=Bs(t.alternate,t,Cs);t.memoizedProps=t.pendingProps,null===e?Iu(t):Ss=e,_s.current=null}function Iu(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(n=ts(n,e,Cs)))return void(Ss=n);if(24!==(n=e).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Cs)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(n=es(e)))return n.flags&=2047,void(Ss=n);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(Ss=e);Ss=e=t}while(null!==e);0===Os&&(Os=5)}function Au(t){var e=Fi();return Bi(99,_u.bind(null,t,e)),null}function _u(t,e){do{ku()}while(null!==Ws);if(0!=(48&Ts))throw Error(a(327));var n=t.finishedWork;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(a(177));t.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=t.pendingLanes&~i;t.pendingLanes=i,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=i,t.mutableReadLanes&=i,t.entangledLanes&=i,i=t.entanglements;for(var s=t.eventTimes,u=t.expirationTimes;0<o;){var c=31-ze(o),l=1<<c;i[c]=0,s[c]=-1,u[c]=-1,o&=~l}if(null!==$s&&0==(24&r)&&$s.has(t)&&$s.delete(t),t===ks&&(Ss=ks=null,Ns=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Ts,Ts|=32,_s.current=null,Mr=We,hr(s=fr())){if("selectionStart"in s)u={start:s.selectionStart,end:s.selectionEnd};else t:if(u=(u=s.ownerDocument)&&u.defaultView||window,(l=u.getSelection&&u.getSelection())&&0!==l.rangeCount){u=l.anchorNode,o=l.anchorOffset,c=l.focusNode,l=l.focusOffset;try{u.nodeType,c.nodeType}catch(t){u=null;break t}var f=0,h=-1,p=-1,d=0,v=0,m=s,y=null;e:for(;;){for(var g;m!==u||0!==o&&3!==m.nodeType||(h=f+o),m!==c||0!==l&&3!==m.nodeType||(p=f+l),3===m.nodeType&&(f+=m.nodeValue.length),null!==(g=m.firstChild);)y=m,m=g;for(;;){if(m===s)break e;if(y===u&&++d===o&&(h=f),y===c&&++v===l&&(p=f),null!==(g=m.nextSibling))break;y=(m=y).parentNode}m=g}u=-1===h||-1===p?null:{start:h,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Vr={focusedElem:s,selectionRange:u},We=!1,ru=null,iu=!1,zs=r;do{try{Tu()}catch(t){if(null===zs)throw Error(a(330));Ou(zs,t),zs=zs.nextEffect}}while(null!==zs);ru=null,zs=r;do{try{for(s=t;null!==zs;){var b=zs.flags;if(16&b&&yt(zs.stateNode,""),128&b){var w=zs.alternate;if(null!==w){var E=w.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&b){case 2:vs(zs),zs.flags&=-3;break;case 6:vs(zs),zs.flags&=-3,bs(zs.alternate,zs);break;case 1024:zs.flags&=-1025;break;case 1028:zs.flags&=-1025,bs(zs.alternate,zs);break;case 4:bs(zs.alternate,zs);break;case 8:gs(s,u=zs);var I=u.alternate;ps(u),null!==I&&ps(I)}zs=zs.nextEffect}}catch(t){if(null===zs)throw Error(a(330));Ou(zs,t),zs=zs.nextEffect}}while(null!==zs);if(E=Vr,w=fr(),b=E.focusedElem,s=E.selectionRange,w!==b&&b&&b.ownerDocument&&lr(b.ownerDocument.documentElement,b)){null!==s&&hr(b)&&(w=s.start,void 0===(E=s.end)&&(E=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(E,b.value.length)):(E=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(E=E.getSelection(),u=b.textContent.length,I=Math.min(s.start,u),s=void 0===s.end?I:Math.min(s.end,u),!E.extend&&I>s&&(u=s,s=I,I=u),u=cr(b,I),o=cr(b,s),u&&o&&(1!==E.rangeCount||E.anchorNode!==u.node||E.anchorOffset!==u.offset||E.focusNode!==o.node||E.focusOffset!==o.offset)&&((w=w.createRange()).setStart(u.node,u.offset),E.removeAllRanges(),I>s?(E.addRange(w),E.extend(o.node,o.offset)):(w.setEnd(o.node,o.offset),E.addRange(w))))),w=[];for(E=b;E=E.parentNode;)1===E.nodeType&&w.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(E=w[b]).element.scrollLeft=E.left,E.element.scrollTop=E.top}We=!!Mr,Vr=Mr=null,t.current=n,zs=r;do{try{for(b=t;null!==zs;){var A=zs.flags;if(36&A&&ls(b,zs.alternate,zs),128&A){w=void 0;var _=zs.ref;if(null!==_){var T=zs.stateNode;switch(zs.tag){case 5:w=T;break;default:w=T}"function"==typeof _?_(w):_.current=w}}zs=zs.nextEffect}}catch(t){if(null===zs)throw Error(a(330));Ou(zs,t),zs=zs.nextEffect}}while(null!==zs);zs=null,Di(),Ts=i}else t.current=n;if(Hs)Hs=!1,Ws=t,Ys=e;else for(zs=r;null!==zs;)e=zs.nextEffect,zs.nextEffect=null,8&zs.flags&&((A=zs).sibling=null,A.stateNode=null),zs=e;if(0===(r=t.pendingLanes)&&(Ks=null),1===r?t===Zs?Js++:(Js=0,Zs=t):Js=0,n=n.stateNode,bi&&"function"==typeof bi.onCommitFiberRoot)try{bi.onCommitFiberRoot(gi,n,void 0,64==(64&n.current.flags))}catch(t){}if(cu(t,ji()),qs)throw qs=!1,t=Gs,Gs=null,t;return 0!=(8&Ts)||qi(),null}function Tu(){for(;null!==zs;){var t=zs.alternate;iu||null===ru||(0!=(8&zs.flags)?Jt(zs,ru)&&(iu=!0):13===zs.tag&&Es(t,zs)&&Jt(zs,ru)&&(iu=!0));var e=zs.flags;0!=(256&e)&&cs(t,zs),0==(512&e)||Hs||(Hs=!0,zi(97,(function(){return ku(),null}))),zs=zs.nextEffect}}function ku(){if(90!==Ys){var t=97<Ys?97:Ys;return Ys=90,Bi(t,Cu)}return!1}function Su(t,e){Qs.push(e,t),Hs||(Hs=!0,zi(97,(function(){return ku(),null})))}function Nu(t,e){Xs.push(e,t),Hs||(Hs=!0,zi(97,(function(){return ku(),null})))}function Cu(){if(null===Ws)return!1;var t=Ws;if(Ws=null,0!=(48&Ts))throw Error(a(331));var e=Ts;Ts|=32;var n=Xs;Xs=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(t){if(null===o)throw Error(a(330));Ou(o,t)}}for(n=Qs,Qs=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var u=i.create;i.destroy=u()}catch(t){if(null===o)throw Error(a(330));Ou(o,t)}}for(u=t.current.firstEffect;null!==u;)t=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=t;return Ts=e,qi(),!0}function xu(t,e,n){ao(t,e=os(0,e=ns(n,e),1)),e=ou(),null!==(t=uu(t,1))&&(Be(t,1,e),cu(t,e))}function Ou(t,e){if(3===t.tag)xu(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){xu(n,t,e);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ks||!Ks.has(r))){var i=as(n,t=ns(e,t),1);if(ao(n,i),i=ou(),null!==(n=uu(n,1)))Be(n,1,i),cu(n,i);else if("function"==typeof r.componentDidCatch&&(null===Ks||!Ks.has(r)))try{r.componentDidCatch(e,t)}catch(t){}break}}n=n.return}}function Pu(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),e=ou(),t.pingedLanes|=t.suspendedLanes&n,ks===t&&(Ns&n)===n&&(4===Os||3===Os&&(62914560&Ns)===Ns&&500>ji()-js?vu(t,0):Ms|=n),cu(t,e)}function Du(t,e){var n=t.stateNode;null!==n&&n.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Fi()?1:2:(0===eu&&(eu=Ds),0===(e=Fe(62914560&~eu))&&(e=4194304))),n=ou(),null!==(t=uu(t,e))&&(Be(t,e,n),cu(t,n))}function Lu(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ru(t,e,n,r){return new Lu(t,e,n,r)}function Mu(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Vu(t,e){var n=t.alternate;return null===n?((n=Ru(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function ju(t,e,n,r,i,o){var s=2;if(r=t,"function"==typeof t)Mu(t)&&(s=1);else if("string"==typeof t)s=5;else t:switch(t){case _:return Fu(n.children,i,o,e);case M:s=8,i|=16;break;case T:s=8,i|=1;break;case k:return(t=Ru(12,n,e,8|i)).elementType=k,t.type=k,t.lanes=o,t;case x:return(t=Ru(13,n,e,i)).type=x,t.elementType=x,t.lanes=o,t;case O:return(t=Ru(19,n,e,i)).elementType=O,t.lanes=o,t;case V:return Uu(n,i,o,e);case j:return(t=Ru(24,n,e,i)).elementType=j,t.lanes=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case S:s=10;break t;case N:s=9;break t;case C:s=11;break t;case P:s=14;break t;case D:s=16,r=null;break t;case L:s=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=Ru(s,n,e,i)).elementType=t,e.type=r,e.lanes=o,e}function Fu(t,e,n,r){return(t=Ru(7,t,r,e)).lanes=n,t}function Uu(t,e,n,r){return(t=Ru(23,t,r,e)).elementType=V,t.lanes=n,t}function Bu(t,e,n){return(t=Ru(6,t,null,e)).lanes=n,t}function zu(t,e,n){return(e=Ru(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function qu(t,e,n){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ue(0),this.expirationTimes=Ue(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ue(0),this.mutableSourceEagerHydrationData=null}function Gu(t,e,n,r){var i=e.current,o=ou(),s=au(i);t:if(n){e:{if(Qt(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break e;case 1:if(hi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break e}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var c=n.type;if(hi(c)){n=vi(n,c,u);break t}}n=u}else n=si;return null===e.context?e.context=n:e.pendingContext=n,(e=oo(o,s)).payload={element:t},null!==(r=void 0===r?null:r)&&(e.callback=r),ao(i,e),su(i,s,o),s}function Ku(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function Hu(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function Wu(t,e){Hu(t,e),(t=t.alternate)&&Hu(t,e)}function Yu(t,e,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qu(t,e,null!=n&&!0===n.hydrate),e=Ru(3,null,null,2===e?7:1===e?3:0),n.current=e,e.stateNode=n,ro(e),t[Qr]=n.current,Sr(8===t.nodeType?t.parentNode:t),r)for(t=0;t<r.length;t++){var i=(e=r[t])._getVersion;i=i(e._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[e,i]:n.mutableSourceEagerHydrationData.push(e,i)}this._internalRoot=n}function Qu(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function Xu(t,e,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var t=Ku(a);s.call(t)}}Gu(e,a,t,i)}else{if(o=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new Yu(t,0,e?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var u=i;i=function(){var t=Ku(a);u.call(t)}}!function(t,e){var n=Ts;Ts&=-2,Ts|=8;try{t(e)}finally{0===(Ts=n)&&(Us(),qi())}}((function(){Gu(e,a,t,i)}))}return Ku(a)}Bs=function(t,e,n){var r=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||ci.current)Pa=!0;else{if(0==(n&r)){switch(Pa=!1,e.tag){case 3:za(e),qo();break;case 5:Oo(e);break;case 1:hi(e.type)&&mi(e);break;case 4:Co(e,e.stateNode.containerInfo);break;case 10:r=e.memoizedProps.value;var i=e.type._context;ai(Wi,i._currentValue),i._currentValue=r;break;case 13:if(null!==e.memoizedState)return 0!=(n&e.child.childLanes)?Wa(t,e,n):(ai(Do,1&Do.current),null!==(e=Ja(t,e,n))?e.sibling:null);ai(Do,1&Do.current);break;case 19:if(r=0!=(n&e.childLanes),0!=(64&t.flags)){if(r)return $a(t,e,n);e.flags|=64}if(null!==(i=e.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ai(Do,Do.current),r)break;return null;case 23:case 24:return e.lanes=0,Va(t,e,n)}return Ja(t,e,n)}Pa=0!=(16384&t.flags)}else Pa=!1;switch(e.lanes=0,e.tag){case 2:if(r=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=fi(e,ui.current),to(e,n),i=na(null,e,r,t,i,n),e.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,hi(r)){var o=!0;mi(e)}else o=!1;e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,ro(e);var s=r.getDerivedStateFromProps;"function"==typeof s&&fo(e,r,s,t),i.updater=ho,e.stateNode=i,i._reactInternals=e,yo(e,r,t,n),e=Ba(null,e,r,!0,o,n)}else e.tag=0,Da(null,e,i,n),e=e.child;return e;case 16:i=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=(o=i._init)(i._payload),e.type=i,o=e.tag=function(t){if("function"==typeof t)return Mu(t)?1:0;if(null!=t){if((t=t.$$typeof)===C)return 11;if(t===P)return 14}return 2}(i),t=Hi(i,t),o){case 0:e=Fa(null,e,i,t,n);break t;case 1:e=Ua(null,e,i,t,n);break t;case 11:e=La(null,e,i,t,n);break t;case 14:e=Ra(null,e,i,Hi(i.type,t),r,n);break t}throw Error(a(306,i,""))}return e;case 0:return r=e.type,i=e.pendingProps,Fa(t,e,r,i=e.elementType===r?i:Hi(r,i),n);case 1:return r=e.type,i=e.pendingProps,Ua(t,e,r,i=e.elementType===r?i:Hi(r,i),n);case 3:if(za(e),r=e.updateQueue,null===t||null===r)throw Error(a(282));if(r=e.pendingProps,i=null!==(i=e.memoizedState)?i.element:null,io(t,e),uo(e,r,null,n),(r=e.memoizedState.element)===i)qo(),e=Ja(t,e,n);else{if((o=(i=e.stateNode).hydrate)&&(Mo=qr(e.stateNode.containerInfo.firstChild),Ro=e,o=Vo=!0),o){if(null!=(t=i.mutableSourceEagerHydrationData))for(i=0;i<t.length;i+=2)(o=t[i])._workInProgressVersionPrimary=t[i+1],Go.push(o);for(n=Ao(e,null,r,n),e.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Da(t,e,r,n),qo();e=e.child}return e;case 5:return Oo(e),null===t&&Uo(e),r=e.type,i=e.pendingProps,o=null!==t?t.memoizedProps:null,s=i.children,Fr(r,i)?s=null:null!==o&&Fr(r,o)&&(e.flags|=16),ja(t,e),Da(t,e,s,n),e.child;case 6:return null===t&&Uo(e),null;case 13:return Wa(t,e,n);case 4:return Co(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=Io(e,null,r,n):Da(t,e,r,n),e.child;case 11:return r=e.type,i=e.pendingProps,La(t,e,r,i=e.elementType===r?i:Hi(r,i),n);case 7:return Da(t,e,e.pendingProps,n),e.child;case 8:case 12:return Da(t,e,e.pendingProps.children,n),e.child;case 10:t:{r=e.type._context,i=e.pendingProps,s=e.memoizedProps,o=i.value;var u=e.type._context;if(ai(Wi,u._currentValue),u._currentValue=o,null!==s)if(u=s.value,0==(o=or(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(s.children===i.children&&!ci.current){e=Ja(t,e,n);break t}}else for(null!==(u=e.child)&&(u.return=e);null!==u;){var c=u.dependencies;if(null!==c){s=u.child;for(var l=c.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&o)){1===u.tag&&((l=oo(-1,n&-n)).tag=2,ao(u,l)),u.lanes|=n,null!==(l=u.alternate)&&(l.lanes|=n),Zi(u.return,n),c.lanes|=n;break}l=l.next}}else s=10===u.tag&&u.type===e.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===e){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Da(t,e,i.children,n),e=e.child}return e;case 9:return i=e.type,r=(o=e.pendingProps).children,to(e,n),r=r(i=eo(i,o.unstable_observedBits)),e.flags|=1,Da(t,e,r,n),e.child;case 14:return o=Hi(i=e.type,e.pendingProps),Ra(t,e,i,o=Hi(i.type,o),r,n);case 15:return Ma(t,e,e.type,e.pendingProps,r,n);case 17:return r=e.type,i=e.pendingProps,i=e.elementType===r?i:Hi(r,i),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,hi(r)?(t=!0,mi(e)):t=!1,to(e,n),vo(e,r,i),yo(e,r,i,n),Ba(null,e,r,!0,t,n);case 19:return $a(t,e,n);case 23:case 24:return Va(t,e,n)}throw Error(a(156,e.tag))},Yu.prototype.render=function(t){Gu(t,this._internalRoot,null,null)},Yu.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;Gu(null,t,null,(function(){e[Qr]=null}))},Zt=function(t){13===t.tag&&(su(t,4,ou()),Wu(t,4))},te=function(t){13===t.tag&&(su(t,67108864,ou()),Wu(t,67108864))},ee=function(t){if(13===t.tag){var e=ou(),n=au(t);su(t,n,e),Wu(t,n)}},ne=function(t,e){return e()},kt=function(t,e,n){switch(e){case"input":if(nt(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var i=ti(r);if(!i)throw Error(a(90));$(r),nt(r,i)}}}break;case"textarea":ct(t,n);break;case"select":null!=(e=n.value)&&at(t,!!n.multiple,e,!1)}},Pt=function(t,e){var n=Ts;Ts|=1;try{return t(e)}finally{0===(Ts=n)&&(Us(),qi())}},Dt=function(t,e,n,r,i){var o=Ts;Ts|=4;try{return Bi(98,t.bind(null,e,n,r,i))}finally{0===(Ts=o)&&(Us(),qi())}},Lt=function(){0==(49&Ts)&&(function(){if(null!==$s){var t=$s;$s=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,cu(t,ji())}))}qi()}(),ku())},Rt=function(t,e){var n=Ts;Ts|=2;try{return t(e)}finally{0===(Ts=n)&&(Us(),qi())}};var $u={findFiberByHostInstance:$r,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},Ju={bundleType:$u.bundleType,version:$u.version,rendererPackageName:$u.rendererPackageName,rendererConfig:$u.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=function(t){if(!(t=function(t){var e=t.alternate;if(!e){if(null===(e=Qt(t)))throw Error(a(188));return e!==t?null:t}for(var n=t,r=e;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return $t(i),t;if(o===r)return $t(i),e;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,u=i.child;u;){if(u===n){s=!0,n=i,r=o;break}if(u===r){s=!0,r=i,n=o;break}u=u.sibling}if(!s){for(u=o.child;u;){if(u===n){s=!0,n=o,r=i;break}if(u===r){s=!0,r=o,n=i;break}u=u.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?t:e}(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:t.stateNode},findFiberByHostInstance:$u.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Zu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Zu.isDisabled&&Zu.supportsFiber)try{gi=Zu.inject(Ju),bi=Zu}catch(vt){}}e.render=function(t,e,n){if(!Qu(e))throw Error(a(200));return Xu(null,t,e,!1,n)}},935:(t,e,n)=>{"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(448)},408:(t,e,n)=>{"use strict";var r=n(418),i=60103,o=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,s=60110,u=60112;e.Suspense=60113;var c=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;i=f("react.element"),o=f("react.portal"),e.Fragment=f("react.fragment"),e.StrictMode=f("react.strict_mode"),e.Profiler=f("react.profiler"),a=f("react.provider"),s=f("react.context"),u=f("react.forward_ref"),e.Suspense=f("react.suspense"),c=f("react.memo"),l=f("react.lazy")}var h="function"==typeof Symbol&&Symbol.iterator;function p(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(t,e,n){this.props=t,this.context=e,this.refs=v,this.updater=n||d}function y(){}function g(t,e,n){this.props=t,this.context=e,this.refs=v,this.updater=n||d}m.prototype.isReactComponent={},m.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(p(85));this.updater.enqueueSetState(this,t,e,"setState")},m.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},y.prototype=m.prototype;var b=g.prototype=new y;b.constructor=g,r(b,m.prototype),b.isPureReactComponent=!0;var w={current:null},E=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};function A(t,e,n){var r,o={},a=null,s=null;if(null!=e)for(r in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)E.call(e,r)&&!I.hasOwnProperty(r)&&(o[r]=e[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),l=0;l<u;l++)c[l]=arguments[l+2];o.children=c}if(t&&t.defaultProps)for(r in u=t.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:t,key:a,ref:s,props:o,_owner:w.current}}function _(t){return"object"==typeof t&&null!==t&&t.$$typeof===i}var T=/\/+/g;function k(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function S(t,e,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case o:u=!0}}if(u)return a=a(u=t),t=""===r?"."+k(u,0):r,Array.isArray(a)?(n="",null!=t&&(n=t.replace(T,"$&/")+"/"),S(a,e,n,"",(function(t){return t}))):null!=a&&(_(a)&&(a=function(t,e){return{$$typeof:i,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(T,"$&/")+"/")+t)),e.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(t))for(var c=0;c<t.length;c++){var l=r+k(s=t[c],c);u+=S(s,e,n,l,a)}else if("function"==typeof(l=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=h&&t[h]||t["@@iterator"])?t:null}(t)))for(t=l.call(t),c=0;!(s=t.next()).done;)u+=S(s=s.value,e,n,l=r+k(s,c++),a);else if("object"===s)throw e=""+t,Error(p(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return u}function N(t,e,n){if(null==t)return t;var r=[],i=0;return S(t,r,"","",(function(t){return e.call(n,t,i++)})),r}function C(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var x={current:null};function O(){var t=x.current;if(null===t)throw Error(p(321));return t}var P={ReactCurrentDispatcher:x,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};e.Children={map:N,forEach:function(t,e,n){N(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return N(t,(function(){e++})),e},toArray:function(t){return N(t,(function(t){return t}))||[]},only:function(t){if(!_(t))throw Error(p(143));return t}},e.Component=m,e.PureComponent=g,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,e.cloneElement=function(t,e,n){if(null==t)throw Error(p(267,t));var o=r({},t.props),a=t.key,s=t.ref,u=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,u=w.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var c=t.type.defaultProps;for(l in e)E.call(e,l)&&!I.hasOwnProperty(l)&&(o[l]=void 0===e[l]&&void 0!==c?c[l]:e[l])}var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){c=Array(l);for(var f=0;f<l;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:t.type,key:a,ref:s,props:o,_owner:u}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:s,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=A,e.createFactory=function(t){var e=A.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:u,render:t}},e.isValidElement=_,e.lazy=function(t){return{$$typeof:l,_payload:{_status:-1,_result:t},_init:C}},e.memo=function(t,e){return{$$typeof:c,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return O().useCallback(t,e)},e.useContext=function(t,e){return O().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return O().useEffect(t,e)},e.useImperativeHandle=function(t,e,n){return O().useImperativeHandle(t,e,n)},e.useLayoutEffect=function(t,e){return O().useLayoutEffect(t,e)},e.useMemo=function(t,e){return O().useMemo(t,e)},e.useReducer=function(t,e,n){return O().useReducer(t,e,n)},e.useRef=function(t){return O().useRef(t)},e.useState=function(t){return O().useState(t)},e.version="17.0.1"},294:(t,e,n)=>{"use strict";t.exports=n(408)},53:(t,e)=>{"use strict";var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var s=Date,u=s.now();e.unstable_now=function(){return s.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,l=null,f=function(){if(null!==c)try{var t=e.unstable_now();c(!0,t),c=null}catch(t){throw setTimeout(f,0),t}};n=function(t){null!==c?setTimeout(n,0,t):(c=t,setTimeout(f,0))},r=function(t,e){l=setTimeout(t,e)},i=function(){clearTimeout(l)},e.unstable_shouldYield=function(){return!1},o=e.unstable_forceFrameRate=function(){}}else{var h=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var d=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof d&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,y=-1,g=5,b=0;e.unstable_shouldYield=function(){return e.unstable_now()>=b},o=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<t?Math.floor(1e3/t):5};var w=new MessageChannel,E=w.port2;w.port1.onmessage=function(){if(null!==m){var t=e.unstable_now();b=t+g;try{m(!0,t)?E.postMessage(null):(v=!1,m=null)}catch(t){throw E.postMessage(null),t}}else v=!1},n=function(t){m=t,v||(v=!0,E.postMessage(null))},r=function(t,n){y=h((function(){t(e.unstable_now())}),n)},i=function(){p(y),y=-1}}function I(t,e){var n=t.length;t.push(e);t:for(;;){var r=n-1>>>1,i=t[r];if(!(void 0!==i&&0<T(i,e)))break t;t[r]=e,t[n]=i,n=r}}function A(t){return void 0===(t=t[0])?null:t}function _(t){var e=t[0];if(void 0!==e){var n=t.pop();if(n!==e){t[0]=n;t:for(var r=0,i=t.length;r<i;){var o=2*(r+1)-1,a=t[o],s=o+1,u=t[s];if(void 0!==a&&0>T(a,n))void 0!==u&&0>T(u,a)?(t[r]=u,t[s]=n,r=s):(t[r]=a,t[o]=n,r=o);else{if(!(void 0!==u&&0>T(u,n)))break t;t[r]=u,t[s]=n,r=s}}}return e}return null}function T(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}var k=[],S=[],N=1,C=null,x=3,O=!1,P=!1,D=!1;function L(t){for(var e=A(S);null!==e;){if(null===e.callback)_(S);else{if(!(e.startTime<=t))break;_(S),e.sortIndex=e.expirationTime,I(k,e)}e=A(S)}}function R(t){if(D=!1,L(t),!P)if(null!==A(k))P=!0,n(M);else{var e=A(S);null!==e&&r(R,e.startTime-t)}}function M(t,n){P=!1,D&&(D=!1,i()),O=!0;var o=x;try{for(L(n),C=A(k);null!==C&&(!(C.expirationTime>n)||t&&!e.unstable_shouldYield());){var a=C.callback;if("function"==typeof a){C.callback=null,x=C.priorityLevel;var s=a(C.expirationTime<=n);n=e.unstable_now(),"function"==typeof s?C.callback=s:C===A(k)&&_(k),L(n)}else _(k);C=A(k)}if(null!==C)var u=!0;else{var c=A(S);null!==c&&r(R,c.startTime-n),u=!1}return u}finally{C=null,x=o,O=!1}}var V=o;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){P||O||(P=!0,n(M))},e.unstable_getCurrentPriorityLevel=function(){return x},e.unstable_getFirstCallbackNode=function(){return A(k)},e.unstable_next=function(t){switch(x){case 1:case 2:case 3:var e=3;break;default:e=x}var n=x;x=e;try{return t()}finally{x=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=V,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=x;x=t;try{return e()}finally{x=n}},e.unstable_scheduleCallback=function(t,o,a){var s=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,t){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return t={id:N++,callback:o,priorityLevel:t,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>s?(t.sortIndex=a,I(S,t),null===A(k)&&t===A(S)&&(D?i():D=!0,r(R,a-s))):(t.sortIndex=u,I(k,t),P||O||(P=!0,n(M))),t},e.unstable_wrapCallback=function(t){var e=x;return function(){var n=x;x=e;try{return t.apply(this,arguments)}finally{x=n}}}},840:(t,e,n)=>{"use strict";t.exports=n(53)},379:(t,e,n)=>{"use strict";var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function a(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],i=0;i<t.length;i++){var s=t[i],u=e.base?s[0]+e.base:s[0],c=n[u]||0,l="".concat(u," ").concat(c);n[u]=c+1;var f=a(l),h={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(o[f].references++,o[f].updater(h)):o.push({identifier:l,updater:v(h,e),references:1}),r.push(l)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function f(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function h(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,d=0;function v(t,e){var n,r,i;if(e.singleton){var o=d++;n=p||(p=u(e)),r=f.bind(null,n,o,!1),i=f.bind(null,n,o,!0)}else n=u(e),r=h.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=a(n[r]);o[i].references--}for(var u=s(t,e),c=0;c<n.length;c++){var l=a(n[c]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}n=u}}}},955:(t,e,n)=>{"use strict";t.exports=n.p+"1b0809d519837cb7aad3.ttf"},297:(t,e,n)=>{"use strict";t.exports=n.p+"f46bb183eee6b540f0be.jpg"}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.p="/",(()=>{"use strict";var t=n(379),e=n.n(t),r=n(538);e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var i=n(527);e()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;var o=n(935),a=n(294);const s=function(t){var e=t.name,n=t.type,r=t.field,i=t.short,o=t.changeField;return a.createElement("label",null,a.createElement("input",{value:r,type:n,placeholder:e,onChange:o(i),required:!0}))};var u=n(96);e()(u.Z,{insert:"head",singleton:!1}),u.Z.locals;const c=function(t){var e=t.errorMessage,n=t.toggleError;return a.createElement("div",{className:"alert"},a.createElement("span",{className:"closebtn",onClick:n},"×"),e)};var l=function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function f(t,e){function n(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var h=function(){return(h=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function p(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function d(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function v(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(m(arguments[e]));return t}function g(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function b(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&"__proto__"!==n&&(t[n]=b(t[n],e[n]));return t}var w=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();function E(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function I(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}function A(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function _(){return"indexedDB"in self&&null!=indexedDB}function T(){return new Promise((function(t,e){try{var n=!0,r="validate-browser-context-for-indexeddb-analytics-module",i=window.indexedDB.open(r);i.onsuccess=function(){i.result.close(),n||window.indexedDB.deleteDatabase(r),t(!0)},i.onupgradeneeded=function(){n=!1},i.onerror=function(){var t;e((null===(t=i.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function k(){return!(!navigator||!navigator.cookieEnabled)}var S=function(t){function e(n,r,i){var o=t.call(this,r)||this;return o.code=n,o.customData=i,o.name="FirebaseError",Object.setPrototypeOf(o,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,N.prototype.create),o}return f(e,t),e}(Error),N=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e[0]||{},i=this.service+"/"+t,o=this.errors[t],a=o?C(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",u=new S(i,s,r);return u},t}();function C(t,e){return t.replace(x,(function(t,n){var r=e[n];return null!=r?String(r):"<"+n+"?>"}))}var x=/\{\$([^}]+)}/g;function O(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function P(t,e){var n=new D(t,e);return n.subscribe.bind(n)}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],l=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(o=l^u&(c^l),a=1518500249):(o=u^c^l,a=1859775393):r<60?(o=u&c|l&(u|c),a=2400959708):(o=u^c^l,a=3395469782),i=(s<<5|s>>>27)+o+f+a+n[r]&4294967295,f=l,l=c,c=4294967295&(u<<30|u>>>2),u=s,s=i;this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0===o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t}}();var D=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(r.next=L),void 0===r.error&&(r.error=L),void 0===r.complete&&(r.complete=L);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function L(){}function R(t,e,n){void 0===e&&(e=1e3),void 0===n&&(n=2);var r=e*Math.pow(n,t),i=Math.round(.5*r*(Math.random()-.5)*2);return Math.min(144e5,r+i)}var M,V=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),j="[DEFAULT]",F=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t=j);var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new w;this.instancesDeferred.set(e,n);try{var r=this.getOrInitializeService(e);r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=h({identifier:j,optional:!1},t),n=e.identifier,r=e.optional,i=this.normalizeInstanceIdentifier(n);try{var o=this.getOrInitializeService(i);if(!o){if(r)return null;throw Error("Service "+this.name+" is not available")}return o}catch(t){if(r)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService(j)}catch(t){}try{for(var r=v(this.instancesDeferred.entries()),i=r.next();!i.done;i=r.next()){var o=m(i.value,2),a=o[0],s=o[1],u=this.normalizeInstanceIdentifier(a);try{var c=this.getOrInitializeService(u);s.resolve(c)}catch(t){}}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t=j),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return p(this,void 0,void 0,(function(){var t;return d(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(y(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})),t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()}))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return t===j?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:j:t},t}(),U=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new F(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();function B(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}var z,q=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(z||(z={}));var G,K={debug:z.DEBUG,verbose:z.VERBOSE,info:z.INFO,warn:z.WARN,error:z.ERROR,silent:z.SILENT},H=z.INFO,W=((M={})[z.DEBUG]="log",M[z.VERBOSE]="log",M[z.INFO]="info",M[z.WARN]="warn",M[z.ERROR]="error",M),Y=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(e<t.logLevel)){var i=(new Date).toISOString(),o=W[e];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[o].apply(console,B(["["+i+"]  "+t.name+":"],n))}},Q=function(){function t(t){this.name=t,this._logLevel=H,this._logHandler=Y,this._userLogHandler=null,q.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in z))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?K[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,B([this,z.DEBUG],t)),this._logHandler.apply(this,B([this,z.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,B([this,z.VERBOSE],t)),this._logHandler.apply(this,B([this,z.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,B([this,z.INFO],t)),this._logHandler.apply(this,B([this,z.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,B([this,z.WARN],t)),this._logHandler.apply(this,B([this,z.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,B([this,z.ERROR],t)),this._logHandler.apply(this,B([this,z.ERROR],t))},t}();function X(t){q.forEach((function(e){e.setLogLevel(t)}))}var $,J=((G={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",G["bad-app-name"]="Illegal App name: '{$appName}",G["duplicate-app"]="Firebase App named '{$appName}' already exists",G["app-deleted"]="Firebase App named '{$appName}' already deleted",G["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",G["invalid-log-argument"]="First argument to `onLog` must be null or a function.",G),Z=new N("app","Firebase",J),tt="@firebase/app",et="[DEFAULT]",nt=(($={})[tt]="fire-core",$["@firebase/analytics"]="fire-analytics",$["@firebase/auth"]="fire-auth",$["@firebase/database"]="fire-rtdb",$["@firebase/functions"]="fire-fn",$["@firebase/installations"]="fire-iid",$["@firebase/messaging"]="fire-fcm",$["@firebase/performance"]="fire-perf",$["@firebase/remote-config"]="fire-rc",$["@firebase/storage"]="fire-gcs",$["@firebase/firestore"]="fire-fst",$["fire-js"]="fire-js",$["firebase-wrapper"]="fire-js-all",$),rt=new Q("@firebase/app"),it=function(){function t(t,e,n){var r,i,o=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=b(void 0,t),this.container=new U(e.name),this._addComponent(new V("app",(function(){return o}),"PUBLIC"));try{for(var a=v(this.firebase_.INTERNAL.components.values()),s=a.next();!s.done;s=a.next()){var u=s.value;this._addComponent(u)}}catch(t){r={error:t}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(r)throw r.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e=et),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e=et),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){rt.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw Z.create("app-deleted",{appName:this.name_})},t}();it.prototype.name&&it.prototype.options||it.prototype.delete||console.log("dc");var ot=function t(){var e=function(t){var e={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={}),"object"==typeof i&&null!==i||(i={name:i});var o=i;void 0===o.name&&(o.name=et);var a=o.name;if("string"!=typeof a||!a)throw Z.create("bad-app-name",{appName:String(a)});if(O(e,a))throw Z.create("duplicate-app",{appName:a});var s=new t(n,o,r);return e[a]=s,s},app:i,registerVersion:function(t,e,n){var r,i=null!==(r=nt[t])&&void 0!==r?r:t;n&&(i+="-"+n);var a=i.match(/\s|\//),s=e.match(/\s|\//);if(a||s){var u=['Unable to register library "'+i+'" with version "'+e+'":'];return a&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),a&&s&&u.push("and"),s&&u.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void rt.warn(u.join(" "))}o(new V(i+"-version",(function(){return{library:i,version:e}}),"VERSION"))},setLogLevel:X,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw Z.create("invalid-log-argument",{appName:name});!function(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=K[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];var a=i.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:z[n].toLowerCase(),message:a,args:i,type:e.name})}},r=0,i=q;r<i.length;r++)n(i[r])}(t,e)},apps:null,SDK_VERSION:"8.0.1",INTERNAL:{registerComponent:o,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function i(t){if(!O(e,t=t||et))throw Z.create("no-app",{appName:t});return e[t]}function o(o){var a,s,u=o.name;if(n.has(u))return rt.debug("There were multiple attempts to register component "+u+"."),"PUBLIC"===o.type?r[u]:null;if(n.set(u,o),"PUBLIC"===o.type){var c=function(t){if(void 0===t&&(t=i()),"function"!=typeof t[u])throw Z.create("invalid-app-argument",{appName:u});return t[u]()};void 0!==o.serviceProps&&b(c,o.serviceProps),r[u]=c,t.prototype[u]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this._getService.bind(this,u).apply(this,o.multipleInstances?t:[])}}try{for(var l=v(Object.keys(e)),f=l.next();!f.done;f=l.next()){var h=f.value;e[h]._addComponent(o)}}catch(t){a={error:t}}finally{try{f&&!f.done&&(s=l.return)&&s.call(l)}finally{if(a)throw a.error}}return"PUBLIC"===o.type?r[u]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),i.App=t,r}(it);return e.INTERNAL=h(h({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){b(e,t)},createSubscribe:P,ErrorFactory:N,deepExtend:b}),e}(),at=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();if("object"==typeof self&&self.self===self&&void 0!==self.firebase){rt.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var st=self.firebase.SDK_VERSION;st&&st.indexOf("LITE")>=0&&rt.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var ut=ot.initializeApp;ot.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return I()&&rt.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),ut.apply(void 0,t)};var ct=ot;!function(t,e){t.INTERNAL.registerComponent(new V("platform-logger",(function(t){return new at(t)}),"PRIVATE")),t.registerVersion(tt,"0.6.13",void 0),t.registerVersion("fire-js","")}(ct);const lt=ct;lt.registerVersion("firebase","8.0.2","app");var ft,ht=n(676),pt="w:0.4.19",dt=((ft={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',ft["not-registered"]="Firebase Installation is not registered.",ft["installation-not-found"]="Firebase Installation not found.",ft["request-failed"]='{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',ft["app-offline"]="Could not process request. Application offline.",ft["delete-pending-registration"]="Can't delete installation while there is a pending registration request.",ft),vt=new N("installations","Installations",dt);function mt(t){return t instanceof S&&t.code.includes("request-failed")}function yt(t){return"https://firebaseinstallations.googleapis.com/v1/projects/"+t.projectId+"/installations"}function gt(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}function bt(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:return[4,e.json()];case 1:return n=i.sent(),r=n.error,[2,vt.create("request-failed",{requestName:t,serverCode:r.code,serverMessage:r.message,serverStatus:r.status})]}}))}))}function wt(t){var e=t.apiKey;return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function Et(t,e){var n=e.refreshToken,r=wt(t);return r.append("Authorization",function(t){return"FIS_v2 "+t}(n)),r}function It(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return[4,t()];case 1:return(e=n.sent()).status>=500&&e.status<600?[2,t()]:[2,e]}}))}))}function At(t,e){var n=e.fid;return p(this,void 0,void 0,(function(){var e,r,i,o,a,s;return d(this,(function(u){switch(u.label){case 0:return e=yt(t),r=wt(t),i={fid:n,authVersion:"FIS_v2",appId:t.appId,sdkVersion:pt},o={method:"POST",headers:r,body:JSON.stringify(i)},[4,It((function(){return fetch(e,o)}))];case 1:return(a=u.sent()).ok?[4,a.json()]:[3,3];case 2:return[2,{fid:(s=u.sent()).fid||n,registrationStatus:2,refreshToken:s.refreshToken,authToken:gt(s.authToken)}];case 3:return[4,bt("Create Installation",a)];case 4:throw u.sent()}}))}))}function _t(t){return new Promise((function(e){setTimeout(e,t)}))}var Tt=/^[cdef][\w-]{21}$/;function kt(){try{var t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;var e=function(t){return(e=t,btoa(String.fromCharCode.apply(String,y(e))).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var e}(t);return Tt.test(e)?e:""}catch(t){return""}}function St(t){return t.appName+"!"+t.appId}var Nt=new Map;function Ct(t,e){var n=St(t);xt(n,e),function(t,e){var n=Pt();n&&n.postMessage({key:t,fid:e}),Dt()}(n,e)}function xt(t,e){var n,r,i=Nt.get(t);if(i)try{for(var o=v(i),a=o.next();!a.done;a=o.next())(0,a.value)(e)}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}var Ot=null;function Pt(){return!Ot&&"BroadcastChannel"in self&&((Ot=new BroadcastChannel("[Firebase] FID Change")).onmessage=function(t){xt(t.data.key,t.data.fid)}),Ot}function Dt(){0===Nt.size&&Ot&&(Ot.close(),Ot=null)}var Lt,Rt="firebase-installations-store",Mt=null;function Vt(){return Mt||(Mt=(0,ht.openDb)("firebase-installations-database",1,(function(t){switch(t.oldVersion){case 0:t.createObjectStore(Rt)}}))),Mt}function jt(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a;return d(this,(function(s){switch(s.label){case 0:return n=St(t),[4,Vt()];case 1:return r=s.sent(),i=r.transaction(Rt,"readwrite"),[4,(o=i.objectStore(Rt)).get(n)];case 2:return a=s.sent(),[4,o.put(e,n)];case 3:return s.sent(),[4,i.complete];case 4:return s.sent(),a&&a.fid===e.fid||Ct(t,e.fid),[2,e]}}))}))}function Ft(t){return p(this,void 0,void 0,(function(){var e,n,r;return d(this,(function(i){switch(i.label){case 0:return e=St(t),[4,Vt()];case 1:return n=i.sent(),[4,(r=n.transaction(Rt,"readwrite")).objectStore(Rt).delete(e)];case 2:return i.sent(),[4,r.complete];case 3:return i.sent(),[2]}}))}))}function Ut(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a,s;return d(this,(function(u){switch(u.label){case 0:return n=St(t),[4,Vt()];case 1:return r=u.sent(),i=r.transaction(Rt,"readwrite"),[4,(o=i.objectStore(Rt)).get(n)];case 2:return a=u.sent(),void 0!==(s=e(a))?[3,4]:[4,o.delete(n)];case 3:return u.sent(),[3,6];case 4:return[4,o.put(s,n)];case 5:u.sent(),u.label=6;case 6:return[4,i.complete];case 7:return u.sent(),!s||a&&a.fid===s.fid||Ct(t,s.fid),[2,s]}}))}))}function Bt(t){return p(this,void 0,void 0,(function(){var e,n,r;return d(this,(function(i){switch(i.label){case 0:return[4,Ut(t,(function(n){var r=function(t){return Gt(t||{fid:kt(),registrationStatus:0})}(n),i=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine)return{installationEntry:e,registrationPromise:Promise.reject(vt.create("app-offline"))};var n={fid:e.fid,registrationStatus:1,registrationTime:Date.now()};return{installationEntry:n,registrationPromise:function(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,7]),[4,At(t,e)];case 1:return n=i.sent(),[2,jt(t,n)];case 2:return mt(r=i.sent())&&409===r.customData.serverCode?[4,Ft(t)]:[3,4];case 3:return i.sent(),[3,6];case 4:return[4,jt(t,{fid:e.fid,registrationStatus:0})];case 5:i.sent(),i.label=6;case 6:throw r;case 7:return[2]}}))}))}(t,n)}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:zt(t)}:{installationEntry:e}}(t,r);return e=i.registrationPromise,i.installationEntry}))];case 1:return""!==(n=i.sent()).fid?[3,3]:(r={},[4,e]);case 2:return[2,(r.installationEntry=i.sent(),r)];case 3:return[2,{installationEntry:n,registrationPromise:e}]}}))}))}function zt(t){return p(this,void 0,void 0,(function(){var e,n,r,i;return d(this,(function(o){switch(o.label){case 0:return[4,qt(t)];case 1:e=o.sent(),o.label=2;case 2:return 1!==e.registrationStatus?[3,5]:[4,_t(100)];case 3:return o.sent(),[4,qt(t)];case 4:return e=o.sent(),[3,2];case 5:return 0!==e.registrationStatus?[3,7]:[4,Bt(t)];case 6:return n=o.sent(),r=n.installationEntry,(i=n.registrationPromise)?[2,i]:[2,r];case 7:return[2,e]}}))}))}function qt(t){return Ut(t,(function(t){if(!t)throw vt.create("installation-not-found");return Gt(t)}))}function Gt(t){return 1===(e=t).registrationStatus&&e.registrationTime+1e4<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}function Kt(t,e){var n=t.appConfig,r=t.platformLoggerProvider;return p(this,void 0,void 0,(function(){var t,i,o,a,s,u;return d(this,(function(c){switch(c.label){case 0:return t=function(t,e){var n=e.fid;return yt(t)+"/"+n+"/authTokens:generate"}(n,e),i=Et(n,e),(o=r.getImmediate({optional:!0}))&&i.append("x-firebase-client",o.getPlatformInfoString()),a={installation:{sdkVersion:pt}},s={method:"POST",headers:i,body:JSON.stringify(a)},[4,It((function(){return fetch(t,s)}))];case 1:return(u=c.sent()).ok?[4,u.json()]:[3,3];case 2:return[2,gt(c.sent())];case 3:return[4,bt("Generate Auth Token",u)];case 4:throw c.sent()}}))}))}function Ht(t,e){return void 0===e&&(e=!1),p(this,void 0,void 0,(function(){var n,r,i;return d(this,(function(o){switch(o.label){case 0:return[4,Ut(t.appConfig,(function(r){if(!Yt(r))throw vt.create("not-registered");var i,o=r.authToken;if(!e&&(2===(i=o).requestStatus&&!function(t){var e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+36e5}(i)))return r;if(1===o.requestStatus)return n=function(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:return[4,Wt(t.appConfig)];case 1:n=i.sent(),i.label=2;case 2:return 1!==n.authToken.requestStatus?[3,5]:[4,_t(100)];case 3:return i.sent(),[4,Wt(t.appConfig)];case 4:return n=i.sent(),[3,2];case 5:return 0===(r=n.authToken).requestStatus?[2,Ht(t,e)]:[2,r]}}))}))}(t,e),r;if(!navigator.onLine)throw vt.create("app-offline");var a=function(t){var e={requestStatus:1,requestTime:Date.now()};return h(h({},t),{authToken:e})}(r);return n=function(t,e){return p(this,void 0,void 0,(function(){var n,r,i;return d(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,8]),[4,Kt(t,e)];case 1:return n=o.sent(),i=h(h({},e),{authToken:n}),[4,jt(t.appConfig,i)];case 2:return o.sent(),[2,n];case 3:return!mt(r=o.sent())||401!==r.customData.serverCode&&404!==r.customData.serverCode?[3,5]:[4,Ft(t.appConfig)];case 4:return o.sent(),[3,7];case 5:return i=h(h({},e),{authToken:{requestStatus:0}}),[4,jt(t.appConfig,i)];case 6:o.sent(),o.label=7;case 7:throw r;case 8:return[2]}}))}))}(t,a),a}))];case 1:return r=o.sent(),n?[4,n]:[3,3];case 2:return i=o.sent(),[3,4];case 3:i=r.authToken,o.label=4;case 4:return[2,i]}}))}))}function Wt(t){return Ut(t,(function(t){if(!Yt(t))throw vt.create("not-registered");var e;return 1===(e=t.authToken).requestStatus&&e.requestTime+1e4<Date.now()?h(h({},t),{authToken:{requestStatus:0}}):t}))}function Yt(t){return void 0!==t&&2===t.registrationStatus}function Qt(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return[4,Bt(t)];case 1:return(e=n.sent().registrationPromise)?[4,e]:[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))}function Xt(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o;return d(this,(function(a){switch(a.label){case 0:return n=function(t,e){var n=e.fid;return yt(t)+"/"+n}(t,e),r=Et(t,e),i={method:"DELETE",headers:r},[4,It((function(){return fetch(n,i)}))];case 1:return(o=a.sent()).ok?[3,3]:[4,bt("Delete Installation",o)];case 2:throw a.sent();case 3:return[2]}}))}))}function $t(t){return vt.create("missing-app-config-values",{valueName:t})}(Lt=lt).INTERNAL.registerComponent(new V("installations",(function(t){var e=t.getProvider("app").getImmediate(),n={appConfig:function(t){var e,n;if(!t||!t.options)throw $t("App Configuration");if(!t.name)throw $t("App Name");try{for(var r=v(["projectId","apiKey","appId"]),i=r.next();!i.done;i=r.next()){var o=i.value;if(!t.options[o])throw $t(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e),platformLoggerProvider:t.getProvider("platform-logger")};return{app:e,getId:function(){return function(t){return p(this,void 0,void 0,(function(){var e,n,r;return d(this,(function(i){switch(i.label){case 0:return[4,Bt(t.appConfig)];case 1:return e=i.sent(),n=e.installationEntry,(r=e.registrationPromise)?r.catch(console.error):Ht(t).catch(console.error),[2,n.fid]}}))}))}(n)},getToken:function(t){return function(t,e){return void 0===e&&(e=!1),p(this,void 0,void 0,(function(){return d(this,(function(n){switch(n.label){case 0:return[4,Qt(t.appConfig)];case 1:return n.sent(),[4,Ht(t,e)];case 2:return[2,n.sent().token]}}))}))}(n,t)},delete:function(){return function(t){return p(this,void 0,void 0,(function(){var e,n;return d(this,(function(r){switch(r.label){case 0:return[4,Ut(e=t.appConfig,(function(t){if(!t||0!==t.registrationStatus)return t}))];case 1:if(!(n=r.sent()))return[3,6];if(1!==n.registrationStatus)return[3,2];throw vt.create("delete-pending-registration");case 2:if(2!==n.registrationStatus)return[3,6];if(navigator.onLine)return[3,3];throw vt.create("app-offline");case 3:return[4,Xt(e,n)];case 4:return r.sent(),[4,Ft(e)];case 5:r.sent(),r.label=6;case 6:return[2]}}))}))}(n)},onIdChange:function(t){return function(t,e){var n=t.appConfig;return function(t,e){Pt();var n=St(t),r=Nt.get(n);r||(r=new Set,Nt.set(n,r)),r.add(e)}(n,e),function(){!function(t,e){var n=St(t),r=Nt.get(n);r&&(r.delete(e),0===r.size&&Nt.delete(n),Dt())}(n,e)}}(n,t)}}}),"PUBLIC")),Lt.registerVersion("@firebase/installations","0.4.19");var Jt,Zt,te="https://www.googletagmanager.com/gtag/js";!function(t){t.EVENT="event",t.SET="set",t.CONFIG="config"}(Jt||(Jt={})),function(t){t.ADD_SHIPPING_INFO="add_shipping_info",t.ADD_PAYMENT_INFO="add_payment_info",t.ADD_TO_CART="add_to_cart",t.ADD_TO_WISHLIST="add_to_wishlist",t.BEGIN_CHECKOUT="begin_checkout",t.CHECKOUT_PROGRESS="checkout_progress",t.EXCEPTION="exception",t.GENERATE_LEAD="generate_lead",t.LOGIN="login",t.PAGE_VIEW="page_view",t.PURCHASE="purchase",t.REFUND="refund",t.REMOVE_FROM_CART="remove_from_cart",t.SCREEN_VIEW="screen_view",t.SEARCH="search",t.SELECT_CONTENT="select_content",t.SELECT_ITEM="select_item",t.SELECT_PROMOTION="select_promotion",t.SET_CHECKOUT_OPTION="set_checkout_option",t.SHARE="share",t.SIGN_UP="sign_up",t.TIMING_COMPLETE="timing_complete",t.VIEW_CART="view_cart",t.VIEW_ITEM="view_item",t.VIEW_ITEM_LIST="view_item_list",t.VIEW_PROMOTION="view_promotion",t.VIEW_SEARCH_RESULTS="view_search_results"}(Zt||(Zt={}));var ee,ne=new Q("@firebase/analytics");function re(t,e,n,r,i,o){return p(this,void 0,void 0,(function(){var a,s,u,c;return d(this,(function(l){switch(l.label){case 0:a=r[i],l.label=1;case 1:return l.trys.push([1,7,,8]),a?[4,e[a]]:[3,3];case 2:return l.sent(),[3,6];case 3:return[4,Promise.all(n)];case 4:return s=l.sent(),(u=s.find((function(t){return t.measurementId===i})))?[4,e[u.appId]]:[3,6];case 5:l.sent(),l.label=6;case 6:return[3,8];case 7:return c=l.sent(),ne.error(c),[3,8];case 8:return t(Jt.CONFIG,i,o),[2]}}))}))}function ie(t,e,n,r,i){return p(this,void 0,void 0,(function(){var o,a,s,u,c,l,f,h;return d(this,(function(p){switch(p.label){case 0:return p.trys.push([0,4,,5]),o=[],i&&i.send_to?(a=i.send_to,Array.isArray(a)||(a=[a]),[4,Promise.all(n)]):[3,2];case 1:for(s=p.sent(),u=function(t){var n=s.find((function(e){return e.measurementId===t})),r=n&&e[n.appId];if(!r)return o=[],"break";o.push(r)},c=0,l=a;c<l.length&&(f=l[c],"break"!==u(f));c++);p.label=2;case 2:return 0===o.length&&(o=Object.values(e)),[4,Promise.all(o)];case 3:return p.sent(),t(Jt.EVENT,r,i||{}),[3,5];case 4:return h=p.sent(),ne.error(h),[3,5];case 5:return[2]}}))}))}var oe=((ee={})["already-exists"]="A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.",ee["already-initialized"]="Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",ee["interop-component-reg-failed"]="Firebase Analytics Interop Component failed to instantiate: {$reason}",ee["invalid-analytics-context"]="Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",ee["indexeddb-unavailable"]="IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",ee["fetch-throttle"]="The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",ee["config-fetch-failed"]="Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",ee["no-api-key"]='The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',ee["no-app-id"]='The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',ee),ae=new N("analytics","Analytics",oe),se=new(function(){function t(t,e){void 0===t&&(t={}),void 0===e&&(e=1e3),this.throttleMetadata=t,this.intervalMillis=e}return t.prototype.getThrottleMetadata=function(t){return this.throttleMetadata[t]},t.prototype.setThrottleMetadata=function(t,e){this.throttleMetadata[t]=e},t.prototype.deleteThrottleMetadata=function(t){delete this.throttleMetadata[t]},t}());function ue(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}function ce(t){var e;return p(this,void 0,void 0,(function(){var n,r,i,o,a,s,u;return d(this,(function(c){switch(c.label){case 0:return n=t.appId,r=t.apiKey,i={method:"GET",headers:ue(r)},o="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),[4,fetch(o,i)];case 1:if(200===(a=c.sent()).status||304===a.status)return[3,6];s="",c.label=2;case 2:return c.trys.push([2,4,,5]),[4,a.json()];case 3:return u=c.sent(),(null===(e=u.error)||void 0===e?void 0:e.message)&&(s=u.error.message),[3,5];case 4:return c.sent(),[3,5];case 5:throw ae.create("config-fetch-failed",{httpStatus:a.status,responseMessage:s});case 6:return[2,a.json()]}}))}))}function le(t,e,n,r){var i=e.throttleEndTimeMillis,o=e.backoffCount;return void 0===r&&(r=se),p(this,void 0,void 0,(function(){var e,a,s,u,c,l,f;return d(this,(function(h){switch(h.label){case 0:e=t.appId,a=t.measurementId,h.label=1;case 1:return h.trys.push([1,3,,4]),[4,fe(n,i)];case 2:return h.sent(),[3,4];case 3:if(s=h.sent(),a)return ne.warn("Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID "+a+' provided in the "measurementId" field in the local Firebase config. ['+s.message+"]"),[2,{appId:e,measurementId:a}];throw s;case 4:return h.trys.push([4,6,,7]),[4,ce(t)];case 5:return u=h.sent(),r.deleteThrottleMetadata(e),[2,u];case 6:if(!function(t){if(!(t instanceof S&&t.customData))return!1;var e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(c=h.sent())){if(r.deleteThrottleMetadata(e),a)return ne.warn("Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID "+a+' provided in the "measurementId" field in the local Firebase config. ['+c.message+"]"),[2,{appId:e,measurementId:a}];throw c}return l=503===Number(c.customData.httpStatus)?R(o,r.intervalMillis,30):R(o,r.intervalMillis),f={throttleEndTimeMillis:Date.now()+l,backoffCount:o+1},r.setThrottleMetadata(e,f),ne.debug("Calling attemptFetch again in "+l+" millis"),[2,le(t,f,n,r)];case 7:return[2]}}))}))}function fe(t,e){return new Promise((function(n,r){var i=Math.max(e-Date.now(),0),o=setTimeout(n,i);t.addEventListener((function(){clearTimeout(o),r(ae.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}var he=function(){function t(){this.listeners=[]}return t.prototype.addEventListener=function(t){this.listeners.push(t)},t.prototype.abort=function(){this.listeners.forEach((function(t){return t()}))},t}();var pe,de,ve={},me=[],ye={},ge="dataLayer",be="gtag",we=!1;function Ee(t){if(we)throw ae.create("already-initialized");t.dataLayerName&&(ge=t.dataLayerName),t.gtagName&&(be=t.gtagName)}function Ie(t,e){!function(){var t=[];if(A()&&t.push("This is a browser extension environment."),k()||t.push("Cookies are not available."),t.length>0){var e=t.map((function(t,e){return"("+(e+1)+") "+t})).join(" "),n=ae.create("invalid-analytics-context",{errorInfo:e});ne.warn(n.message)}}();var n=t.options.appId;if(!n)throw ae.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw ae.create("no-api-key");ne.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID '+t.options.measurementId+' provided in the "measurementId" field in the local Firebase config.')}if(null!=ve[n])throw ae.create("already-exists",{id:n});if(!we){(function(){for(var t=window.document.getElementsByTagName("script"),e=0,n=Object.values(t);e<n.length;e++){var r=n[e];if(r.src&&r.src.includes(te))return r}return null})()||function(t){var e=document.createElement("script");e.src=te+"?l="+t,e.async=!0,document.head.appendChild(e)}(ge),function(t){var e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(ge);var r=function(t,e,n,r,i){var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];window[r].push(arguments)};return window[i]&&"function"==typeof window[i]&&(o=window[i]),window[i]=function(t,e,n,r){return function(i,o,a){return p(this,void 0,void 0,(function(){var s;return d(this,(function(u){switch(u.label){case 0:return u.trys.push([0,6,,7]),i!==Jt.EVENT?[3,2]:[4,ie(t,e,n,o,a)];case 1:return u.sent(),[3,5];case 2:return i!==Jt.CONFIG?[3,4]:[4,re(t,e,n,r,o,a)];case 3:return u.sent(),[3,5];case 4:t(Jt.SET,o),u.label=5;case 5:return[3,7];case 6:return s=u.sent(),ne.error(s),[3,7];case 7:return[2]}}))}))}}(o,t,e,n),{gtagCore:o,wrappedGtag:window[i]}}(ve,me,ye,ge,be),i=r.wrappedGtag,o=r.gtagCore;de=i,pe=o,we=!0}return ve[n]=function(t,e,n,r,i){return p(this,void 0,void 0,(function(){var o,a,s,u,c,l,f;return d(this,(function(h){switch(h.label){case 0:return(o=function(t,e,n){return void 0===e&&(e=se),p(this,void 0,void 0,(function(){var n,r,i,o,a,s,u=this;return d(this,(function(c){if(n=t.options,r=n.appId,i=n.apiKey,o=n.measurementId,!r)throw ae.create("no-app-id");if(!i){if(o)return[2,{measurementId:o,appId:r}];throw ae.create("no-api-key")}return a=e.getThrottleMetadata(r)||{backoffCount:0,throttleEndTimeMillis:Date.now()},s=new he,setTimeout((function(){return p(u,void 0,void 0,(function(){return d(this,(function(t){return s.abort(),[2]}))}))}),6e4),[2,le({appId:r,apiKey:i,measurementId:o},a,s,e)]}))}))}(t)).then((function(e){n[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&ne.warn("The measurement ID in the local Firebase config ("+t.options.measurementId+") does not match the measurement ID fetched from the server ("+e.measurementId+"). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.")})).catch((function(t){return ne.error(t)})),e.push(o),a=function(){return p(this,void 0,void 0,(function(){var t;return d(this,(function(e){switch(e.label){case 0:return _()?[3,1]:(ne.warn(ae.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),[2,!1]);case 1:return e.trys.push([1,3,,4]),[4,T()];case 2:return e.sent(),[3,4];case 3:return t=e.sent(),ne.warn(ae.create("indexeddb-unavailable",{errorInfo:t}).message),[2,!1];case 4:return[2,!0]}}))}))}().then((function(t){return t?r.getId():void 0})),[4,Promise.all([o,a])];case 1:return s=h.sent(),u=s[0],c=s[1],i("js",new Date),(f={}).origin="firebase",f.update=!0,l=f,null!=c&&(l.firebase_id=c),i(Jt.CONFIG,u.measurementId,l),[2,u.measurementId]}}))}))}(t,me,ye,e,pe),{app:t,logEvent:function(t,e,r){(function(t,e,n,r,i){return p(this,void 0,void 0,(function(){var o,a;return d(this,(function(s){switch(s.label){case 0:return i&&i.global?(t(Jt.EVENT,n,r),[2]):[3,1];case 1:return[4,e];case 2:o=s.sent(),a=h(h({},r),{send_to:o}),t(Jt.EVENT,n,a),s.label=3;case 3:return[2]}}))}))})(de,ve[n],t,e,r).catch((function(t){return ne.error(t)}))},setCurrentScreen:function(t,e){(function(t,e,n,r){return p(this,void 0,void 0,(function(){var i;return d(this,(function(o){switch(o.label){case 0:return r&&r.global?(t(Jt.SET,{screen_name:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=o.sent(),t(Jt.CONFIG,i,{update:!0,screen_name:n}),o.label=3;case 3:return[2]}}))}))})(de,ve[n],t,e).catch((function(t){return ne.error(t)}))},setUserId:function(t,e){(function(t,e,n,r){return p(this,void 0,void 0,(function(){var i;return d(this,(function(o){switch(o.label){case 0:return r&&r.global?(t(Jt.SET,{user_id:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=o.sent(),t(Jt.CONFIG,i,{update:!0,user_id:n}),o.label=3;case 3:return[2]}}))}))})(de,ve[n],t,e).catch((function(t){return ne.error(t)}))},setUserProperties:function(t,e){(function(t,e,n,r){return p(this,void 0,void 0,(function(){var i,o,a,s,u;return d(this,(function(c){switch(c.label){case 0:if(!r||!r.global)return[3,1];for(i={},o=0,a=Object.keys(n);o<a.length;o++)s=a[o],i["user_properties."+s]=n[s];return t(Jt.SET,i),[2,Promise.resolve()];case 1:return[4,e];case 2:u=c.sent(),t(Jt.CONFIG,u,{update:!0,user_properties:n}),c.label=3;case 3:return[2]}}))}))})(de,ve[n],t,e).catch((function(t){return ne.error(t)}))},setAnalyticsCollectionEnabled:function(t){(function(t,e){return p(this,void 0,void 0,(function(){var n;return d(this,(function(r){switch(r.label){case 0:return[4,t];case 1:return n=r.sent(),window["ga-disable-"+n]=!e,[2]}}))}))})(ve[n],t).catch((function(t){return ne.error(t)}))},INTERNAL:{delete:function(){return delete ve[n],Promise.resolve()}}}}var Ae="analytics";function _e(){return p(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:if(A())return[2,!1];if(!k())return[2,!1];if(!_())return[2,!1];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,T()];case 2:return[2,t.sent()];case 3:return t.sent(),[2,!1];case 4:return[2]}}))}))}!function(t){t.INTERNAL.registerComponent(new V(Ae,(function(t){return Ie(t.getProvider("app").getImmediate(),t.getProvider("installations").getImmediate())}),"PUBLIC").setServiceProps({settings:Ee,EventName:Zt,isSupported:_e})),t.INTERNAL.registerComponent(new V("analytics-internal",(function(t){try{return{logEvent:t.getProvider(Ae).getImmediate().logEvent}}catch(t){throw ae.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),t.registerVersion("@firebase/analytics","0.6.2")}(lt),function(){var t,e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},r=function(t){t=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g,t];for(var e=0;e<t.length;++e){var r=t[e];if(r&&r.Math==Math)return r}return globalThis}(this);function i(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function o(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:i(t)}}!function(t,n){if(n){var i=r;t=t.split(".");for(var o=0;o<t.length-1;o++){var a=t[o];a in i||(i[a]={}),i=i[a]}(n=n(o=i[t=t[t.length-1]]))!=o&&null!=n&&e(i,t,{configurable:!0,writable:!0,value:n})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function i(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var a=r.setTimeout;n.prototype.c=function(t){a(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.v),reject:t(this.g)}},e.prototype.v=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.o(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.m(t):this.h(t)}},e.prototype.m=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.u(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)s.b(this.a[t]);this.a=null}};var s=new n;return e.prototype.o=function(t){var e=this.f();t.Pa(e.resolve,e.reject)},e.prototype.u=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{i(t(e))}catch(t){o(t)}}:e}var i,o,a=new e((function(t,e){i=t,o=e}));return this.Pa(r(t,i),r(n,o)),a},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Pa=function(t,e){function n(){switch(r.b){case 1:t(r.c);break;case 2:e(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?s.b(n):this.a.push(n)},e.resolve=i,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var r=o(t),a=r.next();!a.done;a=r.next())i(a.value).Pa(e,n)}))},e.all=function(t){var n=o(t),r=n.next();return r.done?i([]):new e((function(t,e){function o(e){return function(n){a[e]=n,0==--s&&t(a)}}var a=[],s=0;do{a.push(void 0),s++,i(r.value).Pa(o(a.length-1),e),r=n.next()}while(!r.done)}))},e}));var a=a||{},s=this||self,u=/^[\w+/_-]+[=]{0,2}$/,c=null;function l(t){return(t=t.querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&u.test(t)?t:""}function f(){}function h(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function p(t){var e=h(t);return"array"==e||"object"==e&&"number"==typeof t.length}function d(t){return"function"==h(t)}function v(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function m(t){return Object.prototype.hasOwnProperty.call(t,y)&&t[y]||(t[y]=++g)}var y="closure_uid_"+(1e9*Math.random()>>>0),g=0;function b(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function E(t,e,n){return(E=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?b:w).apply(null,arguments)}function I(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var A=Date.now;function _(t,e){function n(){}n.prototype=e.prototype,t.$a=e.prototype,t.prototype=new n,t.prototype.constructor=t}function T(t){return t}function k(t,e,n){this.code=C+t,this.message=e||x[t]||"",this.a=n||null}function S(t){var e=t&&t.code;return e?new k(e.substring(C.length),t.message,t.serverResponse):null}_(k,Error),k.prototype.w=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},k.prototype.toJSON=function(){return this.w()};var N,C="auth/",x={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},O={kd:{Sa:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},rd:{Sa:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://securetoken.googleapis.com/v1/token",Va:"https://identitytoolkit.googleapis.com/v2/",id:"p"},td:{Sa:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},ud:{Sa:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Ya:"https://test-securetoken.sandbox.googleapis.com/v1/token",Va:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function P(t){for(var e in O)if(O[e].id===t)return{firebaseEndpoint:(t=O[e]).Sa,secureTokenEndpoint:t.Ya,identityPlatformEndpoint:t.Va};return null}function D(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function L(t){if(Error.captureStackTrace)Error.captureStackTrace(this,L);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function R(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");L.call(this,n+t[r])}function M(t,e){throw new R("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function V(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function j(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function F(){this.b=this.a=null}N=P("__EID__")?"__EID__":void 0,_(L,Error),L.prototype.name="CustomError",_(R,L),R.prototype.name="AssertionError",V.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var U=new V((function(){return new z}),(function(t){t.reset()}));function B(){var t=we,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function z(){this.next=this.b=this.a=null}F.prototype.add=function(t,e){var n=U.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},z.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},z.prototype.reset=function(){this.next=this.b=this.a=null};var q=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},G=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)},K=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=[],i=0,o="string"==typeof t?t.split(""):t,a=0;a<n;a++)if(a in o){var s=o[a];e.call(void 0,s,a,t)&&(r[i++]=s)}return r},H=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),i="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in i&&(r[o]=e.call(void 0,i[o],o,t));return r},W=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t))return!0;return!1};function Y(t,e){return 0<=q(t,e)}function Q(t,e){var n;return(n=0<=(e=q(t,e)))&&Array.prototype.splice.call(t,e,1),n}function X(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,r=t.length-1;0<=r;--r)r in n&&e.call(void 0,n[r],r,t)}(t,(function(n,r){e.call(void 0,n,r,t)&&Array.prototype.splice.call(t,r,1).length}))}function $(t){return Array.prototype.concat.apply([],arguments)}function J(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}var Z,tt=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},et=/&/g,nt=/</g,rt=/>/g,it=/"/g,ot=/'/g,at=/\x00/g,st=/[\x00&<>"']/;function ut(t,e){return-1!=t.indexOf(e)}function ct(t,e){return t<e?-1:t>e?1:0}t:{var ft=s.navigator;if(ft){var ht=ft.userAgent;if(ht){Z=ht;break t}}Z=""}function pt(t){return ut(Z,t)}function dt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function vt(t){for(var e in t)return!1;return!0}function mt(t){var e,n={};for(e in t)n[e]=t[e];return n}var yt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function gt(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<yt.length;o++)n=yt[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function bt(t,e){t:{try{var n=t&&t.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||s).Element&&r.Location){var i=r;break t}}catch(t){}i=null}if(i&&void 0!==i[e]&&(!t||!(t instanceof i[e])&&(t instanceof i.Location||t instanceof i.Element))){if(v(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;M("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function wt(t,e){this.a=t===_t&&e||"",this.b=At}function Et(t){return t instanceof wt&&t.constructor===wt&&t.b===At?t.a:(M("expected object of type Const, got '"+t+"'"),"type_error:Const")}wt.prototype.sa=!0,wt.prototype.ra=function(){return this.a},wt.prototype.toString=function(){return"Const{"+this.a+"}"};var It,At={},_t={};function Tt(){if(void 0===It){var t=null,e=s.trustedTypes;if(e&&e.createPolicy){try{t=e.createPolicy("goog#html",{createHTML:T,createScript:T,createScriptURL:T})}catch(t){s.console&&s.console.error(t.message)}It=t}else It=t}return It}function kt(t,e){this.a=e===Ot?t:""}function St(t){return t instanceof kt&&t.constructor===kt?t.a:(M("expected object of type TrustedResourceUrl, got '"+t+"' of type "+h(t)),"type_error:TrustedResourceUrl")}function Nt(t,e){var n=Et(t);if(!xt.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=Tt();return new kt(t=e?e.createScriptURL(t):t,Ot)}(t=n.replace(Ct,(function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof wt?Et(t):encodeURIComponent(String(t))})))}kt.prototype.sa=!0,kt.prototype.ra=function(){return this.a.toString()},kt.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var Ct=/%{(\w+)}/g,xt=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Ot={};function Pt(t,e){this.a=e===Ft?t:""}function Dt(t){return t instanceof Pt&&t.constructor===Pt?t.a:(M("expected object of type SafeUrl, got '"+t+"' of type "+h(t)),"type_error:SafeUrl")}Pt.prototype.sa=!0,Pt.prototype.ra=function(){return this.a.toString()},Pt.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Lt=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Rt=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Mt=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Vt(t){if(t instanceof Pt)return t;if(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t))t=new Pt(t,Ft);else{var e=(t=(t=String(t)).replace(/(%0A|%0D)/g,"")).match(Rt);t=e&&Lt.test(e[1])?new Pt(t,Ft):null}return t}function jt(t){return t instanceof Pt?t:(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t)||(t="about:invalid#zClosurez"),new Pt(t,Ft))}var Ft={},Ut=new Pt("about:invalid#zClosurez",Ft);function Bt(t,e,n){this.a=n===zt?t:""}Bt.prototype.sa=!0,Bt.prototype.ra=function(){return this.a.toString()},Bt.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var zt={};function qt(t,e,n,r){return t=t instanceof Pt?t:jt(t),e=e||s,n=n instanceof wt?Et(n):n||"",e.open(Dt(t),n,r,void 0)}function Gt(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Kt(t){return st.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(et,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(nt,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(rt,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(it,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(ot,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(at,"&#0;"))),t}function Ht(t){return Ht[" "](t),t}Ht[" "]=f;var Wt,Yt,Qt=pt("Opera"),Xt=pt("Trident")||pt("MSIE"),$t=pt("Edge"),Jt=$t||Xt,Zt=pt("Gecko")&&!(ut(Z.toLowerCase(),"webkit")&&!pt("Edge"))&&!(pt("Trident")||pt("MSIE"))&&!pt("Edge"),te=ut(Z.toLowerCase(),"webkit")&&!pt("Edge");function ee(){var t=s.document;return t?t.documentMode:void 0}t:{var ne="",re=(Yt=Z,Zt?/rv:([^\);]+)(\)|;)/.exec(Yt):$t?/Edge\/([\d\.]+)/.exec(Yt):Xt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Yt):te?/WebKit\/(\S+)/.exec(Yt):Qt?/(?:Version)[ \/]?(\S+)/.exec(Yt):void 0);if(re&&(ne=re?re[1]:""),Xt){var ie=ee();if(null!=ie&&ie>parseFloat(ne)){Wt=String(ie);break t}}Wt=ne}var oe,ae={};function se(t){return function(t,e){var n=ae;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=tt(String(Wt)).split("."),r=tt(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=ct(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||ct(0==a[2].length,0==s[2].length)||ct(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e}))}s.document&&Xt?oe=ee()||parseInt(Wt,10)||void 0:oe=void 0;var ue=oe;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Yt){}var ce=!Xt||9<=Number(ue);function le(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function fe(t,e){dt(e,(function(e,n){e&&"object"==typeof e&&e.sa&&(e=e.ra()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:de.hasOwnProperty(n)?t.setAttribute(de[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var he,pe,de={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function ve(t,e,n){function r(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];if(!p(o)||v(o)&&0<o.nodeType)r(o);else{t:{if(o&&"number"==typeof o.length){if(v(o)){var a="function"==typeof o.item||"string"==typeof o.item;break t}if(d(o)){a="function"==typeof o.item;break t}}a=!1}G(a?J(o):o,r)}}}function me(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function ye(t){s.setTimeout((function(){throw t}),0)}function ge(t,e){pe||function(){if(s.Promise&&s.Promise.resolve){var t=s.Promise.resolve(void 0);pe=function(){t.then(Ee)}}else pe=function(){var t=Ee;!d(s.setImmediate)||s.Window&&s.Window.prototype&&!pt("Edge")&&s.Window.prototype.setImmediate==s.setImmediate?(he||(he=function(){var t=s.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!pt("Presto")&&(t=function(){var t=me(document,"IFRAME");t.style.display="none",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=E((function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!pt("Trident")&&!pt("MSIE")){var e=new t,n={},r=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Fb;n.Fb=null,t()}},function(t){r.next={Fb:t},r=r.next,e.port2.postMessage(0)}}return function(t){s.setTimeout(t,0)}}()),he(t)):s.setImmediate(t)}}(),be||(pe(),be=!0),we.add(t,e)}var be=!1,we=new F;function Ee(){for(var t;t=B();){try{t.a.call(t.b)}catch(t){ye(t)}j(U,t)}be=!1}function Ie(t,e){if(this.a=Ae,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=f)try{var n=this;t.call(e,(function(t){Me(n,_e,t)}),(function(t){if(!(t instanceof qe))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Me(n,Te,t)}))}catch(t){Me(this,Te,t)}}var Ae=0,_e=2,Te=3;function ke(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}ke.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Se=new V((function(){return new ke}),(function(t){t.reset()}));function Ne(t,e,n){var r=Se.get();return r.g=t,r.b=e,r.f=n,r}function Ce(t){if(t instanceof Ie)return t;var e=new Ie(f);return Me(e,_e,t),e}function xe(t){return new Ie((function(e,n){n(t)}))}function Oe(t,e,n){Ve(t,e,n,null)||ge(I(e,t))}function Pe(t){return new Ie((function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Ob:!0,value:o}:{Ob:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)Oe(t[o],I(i,o,!0),I(i,o,!1));else e(r)}))}function De(t,e){if(t.a==Ae)if(t.c){var n=t.c;if(n.b){for(var r=0,i=null,o=null,a=n.b;a&&(a.c||(r++,a.a==t&&(i=a),!(i&&1<r)));a=a.next)i||(o=a);i&&(n.a==Ae&&1==r?De(n,e):(o?((r=o).next==n.f&&(n.f=r),r.next=r.next.next):Fe(n),Ue(n,i,Te,e)))}t.c=null}else Me(t,Te,e)}function Le(t,e){t.b||t.a!=_e&&t.a!=Te||je(t),t.f?t.f.next=e:t.b=e,t.f=e}function Re(t,e,n,r){var i=Ne(null,null,null);return i.a=new Ie((function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof qe?o(e):t(i)}catch(t){o(t)}}:o})),i.a.c=t,Le(t,i),i.a}function Me(t,e,n){t.a==Ae&&(t===n&&(e=Te,n=new TypeError("Promise cannot resolve to itself")),t.a=1,Ve(n,t.Zc,t.$c,t)||(t.i=n,t.a=e,t.c=null,je(t),e!=Te||n instanceof qe||function(t,e){t.g=!0,ge((function(){t.g&&ze.call(null,e)}))}(t,n)))}function Ve(t,e,n,r){if(t instanceof Ie)return Le(t,Ne(e||f,n||null,r)),!0;if(D(t))return t.then(e,n,r),!0;if(v(t))try{var i=t.then;if(d(i))return function(t,e,n,r,i){function o(t){a||(a=!0,r.call(i,t))}var a=!1;try{e.call(t,(function(t){a||(a=!0,n.call(i,t))}),o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function je(t){t.h||(t.h=!0,ge(t.fc,t))}function Fe(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Ue(t,e,n,r){if(n==Te&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Be(e,n,r);else try{e.c?e.g.call(e.f):Be(e,n,r)}catch(t){ze.call(null,t)}j(Se,e)}function Be(t,e,n){e==_e?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}Ie.prototype.then=function(t,e,n){return Re(this,d(t)?t:null,d(e)?e:null,n)},Ie.prototype.$goog_Thenable=!0,(t=Ie.prototype).na=function(t,e){return(t=Ne(t,t,e)).c=!0,Le(this,t),this},t.s=function(t,e){return Re(this,null,t,e)},t.cancel=function(t){if(this.a==Ae){var e=new qe(t);ge((function(){De(this,e)}),this)}},t.Zc=function(t){this.a=Ae,Me(this,_e,t)},t.$c=function(t){this.a=Ae,Me(this,Te,t)},t.fc=function(){for(var t;t=Fe(this);)Ue(this,t,this.a,this.i);this.h=!1};var ze=ye;function qe(t){L.call(this,t)}function Ge(){0!=Ke&&(He[m(this)]=this),this.xa=this.xa,this.oa=this.oa}_(qe,L),qe.prototype.name="cancel";var Ke=0,He={};function We(t){if(!t.xa&&(t.xa=!0,t.Da(),0!=Ke)){var e=m(t);if(0!=Ke&&t.oa&&0<t.oa.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete He[e]}}Ge.prototype.xa=!1,Ge.prototype.Da=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()};var Ye=Object.freeze||function(t){return t},Qe=!Xt||9<=Number(ue),Xe=Xt&&!se("9"),$e=function(){if(!s.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{s.addEventListener("test",f,e),s.removeEventListener("test",f,e)}catch(t){}return t}();function Je(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Ze(t,e){if(Je.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Zt){t:{try{Ht(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:tn[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}Je.prototype.preventDefault=function(){this.defaultPrevented=!0},_(Ze,Je);var tn=Ye({2:"touch",3:"pen",4:"mouse"});Ze.prototype.preventDefault=function(){Ze.$a.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Xe)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Ze.prototype.g=function(){return this.a};var en="closure_listenable_"+(1e6*Math.random()|0),nn=0;function rn(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.Ua=i,this.key=++nn,this.va=this.Oa=!1}function on(t){t.va=!0,t.listener=null,t.proxy=null,t.src=null,t.Ua=null}function an(t){this.src=t,this.a={},this.b=0}function sn(t,e){var n=e.type;n in t.a&&Q(t.a[n],e)&&(on(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function un(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.va&&o.listener==e&&o.capture==!!n&&o.Ua==r)return i}return-1}an.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=un(t,e,r,i);return-1<a?(e=t[a],n||(e.Oa=!1)):((e=new rn(e,this.src,o,!!r,i)).Oa=n,t.push(e)),e};var cn="closure_lm_"+(1e6*Math.random()|0),ln={};function fn(t,e,n,r,i){if(r&&r.once)pn(t,e,n,r,i);else if(Array.isArray(e))for(var o=0;o<e.length;o++)fn(t,e[o],n,r,i);else n=In(n),t&&t[en]?_n(t,e,n,v(r)?!!r.capture:!!r,i):hn(t,e,n,!1,r,i)}function hn(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=v(i)?!!i.capture:!!i,s=wn(t);if(s||(t[cn]=s=new an(t)),!(n=s.add(e,n,r,a,o)).proxy)if(r=function(){var t=bn,e=Qe?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)$e||(i=a),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(mn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}}function pn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)pn(t,e[o],n,r,i);else n=In(n),t&&t[en]?Tn(t,e,n,v(r)?!!r.capture:!!r,i):hn(t,e,n,!0,r,i)}function dn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)dn(t,e[o],n,r,i);else r=v(r)?!!r.capture:!!r,n=In(n),t&&t[en]?(t=t.v,(e=String(e).toString())in t.a&&-1<(n=un(o=t.a[e],n,r,i))&&(on(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=wn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=un(e,n,r,i)),(n=-1<t?e[t]:null)&&vn(n))}function vn(t){if("number"!=typeof t&&t&&!t.va){var e=t.src;if(e&&e[en])sn(e.v,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(mn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=wn(e))?(sn(n,t),0==n.b&&(n.src=null,e[cn]=null)):on(t)}}}function mn(t){return t in ln?ln[t]:ln[t]="on"+t}function yn(t,e,n,r){var i=!0;if((t=wn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.va&&(o=gn(o,r),i=i&&!1!==o)}return i}function gn(t,e){var n=t.listener,r=t.Ua||t.src;return t.Oa&&vn(t),n.call(r,e)}function bn(t,e){if(t.va)return!0;if(!Qe){if(!e)t:{e=["window","event"];for(var n=s,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}if(e=new Ze(r=e,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){t:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=e.b;i;i=i.parentNode)r.push(i);for(t=t.type,i=r.length-1;0<=i;i--){e.b=r[i];var o=yn(r[i],t,!0,e);n=n&&o}for(i=0;i<r.length;i++)e.b=r[i],o=yn(r[i],t,!1,e),n=n&&o}return n}return gn(t,new Ze(e,this))}function wn(t){return(t=t[cn])instanceof an?t:null}var En="__closure_events_fn_"+(1e9*Math.random()>>>0);function In(t){return d(t)?t:(t[En]||(t[En]=function(e){return t.handleEvent(e)}),t[En])}function An(){Ge.call(this),this.v=new an(this),this.$b=this,this.fb=null}function _n(t,e,n,r,i){t.v.add(String(e),n,!1,r,i)}function Tn(t,e,n,r,i){t.v.add(String(e),n,!0,r,i)}function kn(t,e,n,r){if(!(e=t.v.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.va&&a.capture==n){var s=a.listener,u=a.Ua||a.src;a.Oa&&sn(t.v,a),i=!1!==s.call(u,r)&&i}}return i&&!r.defaultPrevented}function Sn(t,e,n){if(d(t))n&&(t=E(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=E(t.handleEvent,t)}return 2147483647<Number(e)?-1:s.setTimeout(t,e||0)}function Nn(t){var e=null;return new Ie((function(n,r){-1==(e=Sn((function(){n(void 0)}),t))&&r(Error("Failed to schedule timer."))})).s((function(t){throw s.clearTimeout(e),t}))}function Cn(t){if(t.V&&"function"==typeof t.V)return t.V();if("string"==typeof t)return t.split("");if(p(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function xn(t){if(t.Y&&"function"==typeof t.Y)return t.Y();if(!t.V||"function"!=typeof t.V){if(p(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function On(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof On)for(n=t.Y(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Pn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Dn(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Dn(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Dn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}_(An,Ge),An.prototype[en]=!0,An.prototype.addEventListener=function(t,e,n,r){fn(this,t,e,n,r)},An.prototype.removeEventListener=function(t,e,n,r){dn(this,t,e,n,r)},An.prototype.dispatchEvent=function(t){var e,n=this.fb;if(n)for(e=[];n;n=n.fb)e.push(n);n=this.$b;var r=t.type||t;if("string"==typeof t)t=new Je(t,n);else if(t instanceof Je)t.target=t.target||n;else{var i=t;gt(t=new Je(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var a=t.b=e[o];i=kn(a,r,!0,t)&&i}if(i=kn(a=t.b=n,r,!0,t)&&i,i=kn(a,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=kn(a=t.b=e[o],r,!1,t)&&i;return i},An.prototype.Da=function(){if(An.$a.Da.call(this),this.v){var t,e=this.v;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)on(n[r]);delete e.a[t],e.b--}}this.fb=null},(t=On.prototype).V=function(){Pn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.Y=function(){return Pn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Dn(this.b,t)?this.b[t]:e},t.set=function(t,e){Dn(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.Y(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var Ln=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Rn(t,e){var n;this.a=this.l=this.f="",this.g=null,this.h=this.c="",this.i=!1,t instanceof Rn?(this.i=void 0!==e?e:t.i,Mn(this,t.f),this.l=t.l,this.a=t.a,Vn(this,t.g),this.c=t.c,jn(this,rr(t.b)),this.h=t.h):t&&(n=String(t).match(Ln))?(this.i=!!e,Mn(this,n[1]||"",!0),this.l=qn(n[2]||""),this.a=qn(n[3]||"",!0),Vn(this,n[4]),this.c=qn(n[5]||"",!0),jn(this,n[6]||"",!0),this.h=qn(n[7]||"")):(this.i=!!e,this.b=new $n(null,this.i))}function Mn(t,e,n){t.f=n?qn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function Vn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.g=e}else t.g=null}function jn(t,e,n){e instanceof $n?(t.b=e,function(t,e){e&&!t.f&&(Jn(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(tr(this,e),nr(this,n,t))}),t)),t.f=e}(t.b,t.i)):(n||(e=Gn(e,Qn)),t.b=new $n(e,t.i))}function Fn(t,e,n){t.b.set(e,n)}function Un(t,e){return t.b.get(e)}function Bn(t){return t instanceof Rn?new Rn(t):new Rn(t,void 0)}function zn(t,e,n,r){var i=new Rn(null,void 0);return t&&Mn(i,t),e&&(i.a=e),n&&Vn(i,n),r&&(i.c=r),i}function qn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Gn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Kn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Kn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Rn.prototype.toString=function(){var t=[],e=this.f;e&&t.push(Gn(e,Hn,!0),":");var n=this.a;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(Gn(e,Hn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.g)&&t.push(":",String(n))),(n=this.c)&&(this.a&&"/"!=n.charAt(0)&&t.push("/"),t.push(Gn(n,"/"==n.charAt(0)?Yn:Wn,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.h)&&t.push("#",Gn(n,Xn)),t.join("")},Rn.prototype.resolve=function(t){var e=new Rn(this),n=!!t.f;n?Mn(e,t.f):n=!!t.l,n?e.l=t.l:n=!!t.a,n?e.a=t.a:n=null!=t.g;var r=t.c;if(n)Vn(e,t.g);else if(n=!!t.c){if("/"!=r.charAt(0))if(this.a&&!this.c)r="/"+r;else{var i=e.c.lastIndexOf("/");-1!=i&&(r=e.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(ut(i,"./")||ut(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?e.c=r:n=""!==t.b.toString(),n?jn(e,rr(t.b)):n=!!t.h,n&&(e.h=t.h),e};var Hn=/[#\/\?@]/g,Wn=/[#\?:]/g,Yn=/[#\?]/g,Qn=/[#\?@]/g,Xn=/#/g;function $n(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function Jn(t){t.a||(t.a=new On,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Zn(t){var e=xn(t);if(void 0===e)throw Error("Keys are undefined");var n=new $n(null,void 0);t=Cn(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];Array.isArray(o)?nr(n,i,o):n.add(i,o)}return n}function tr(t,e){Jn(t),e=ir(t,e),Dn(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Dn((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Pn(t)))}function er(t,e){return Jn(t),e=ir(t,e),Dn(t.a.b,e)}function nr(t,e,n){tr(t,e),0<n.length&&(t.c=null,t.a.set(ir(t,e),J(n)),t.b+=n.length)}function rr(t){var e=new $n;return e.c=t.c,t.a&&(e.a=new On(t.a),e.b=t.b),e}function ir(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function or(t){var e=[];return sr(new ar,t,e),e.join("")}function ar(){}function sr(t,e,n){if(null==e)n.push("null");else{if("object"==typeof e){if(Array.isArray(e)){var r=e;e=r.length,n.push("[");for(var i="",o=0;o<e;o++)n.push(i),sr(t,r[o],n),i=",";return void n.push("]")}if(!(e instanceof String||e instanceof Number||e instanceof Boolean)){for(r in n.push("{"),i="",e)Object.prototype.hasOwnProperty.call(e,r)&&"function"!=typeof(o=e[r])&&(n.push(i),lr(r,n),n.push(":"),sr(t,o,n),i=",");return void n.push("}")}e=e.valueOf()}switch(typeof e){case"string":lr(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?String(e):"null");break;case"boolean":n.push(String(e));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof e)}}}(t=$n.prototype).add=function(t,e){Jn(this),this.c=null,t=ir(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){Jn(this),this.a.forEach((function(n,r){G(n,(function(n){t.call(e,n,r,this)}),this)}),this)},t.Y=function(){Jn(this);for(var t=this.a.V(),e=this.a.Y(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.V=function(t){Jn(this);var e=[];if("string"==typeof t)er(this,t)&&(e=$(e,this.a.get(ir(this,t))));else{t=this.a.V();for(var n=0;n<t.length;n++)e=$(e,t[n])}return e},t.set=function(t,e){return Jn(this),this.c=null,er(this,t=ir(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return t&&0<(t=this.V(t)).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.Y(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.V(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.c=t.join("&")};var ur={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},cr=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function lr(t,e){e.push('"',t.replace(cr,(function(t){var e=ur[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ur[t]=e),e})),'"')}function fr(){var t=Or();return Xt&&!!ue&&11==ue||/Edge\/\d+/.test(t)}function hr(){return s.window&&s.window.location.href||self&&self.location&&self.location.href||""}function pr(t,e){e=e||s.window;var n="about:blank";t&&(n=Dt(Vt(t)||Ut)),e.location.href=n}function dr(t,e){var n,r=[];for(n in t)n in e?typeof t[n]!=typeof e[n]?r.push(n):"object"==typeof t[n]&&null!=t[n]&&null!=e[n]?0<dr(t[n],e[n]).length&&r.push(n):t[n]!==e[n]&&r.push(n):r.push(n);for(n in e)n in t||r.push(n);return r}function vr(t){return!!((t=(t||Or()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function mr(t){t=t||s.window;try{t.close()}catch(t){}}function yr(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Or().toLowerCase(),r&&(e.target=r,ut(n,"crios/")&&(e.target="_blank")),Nr(Or())==kr&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof Pt?n:Vt(void 0!==n.href?n.href:String(n))||Ut,n=t.target||n.target,i=[],t)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(t[a]?1:0))}var a=i.join(",");if((pt("iPhone")&&!pt("iPod")&&!pt("iPad")||pt("iPad")||pt("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(bt(a=me(document,"A"),"HTMLAnchorElement"),e=e instanceof Pt?e:jt(e),a.href=Dt(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=qt("",r,n,a),t=Dt(e),a&&(Jt&&ut(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Kt(t)+'">',t=new Bt(t=(r=Tt())?r.createHTML(t):t,null,zt),r=a.document)&&(r.write(function(t){return t instanceof Bt&&t.constructor===Bt?t.a:(M("expected object of type SafeHtml, got '"+t+"' of type "+h(t)),"type_error:SafeHtml")}(t)),r.close())):(a=qt(e,r,n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var gr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,br=/^[^@]+@[^@]+$/;function wr(){var t=null;return new Ie((function(e){"complete"==s.document.readyState?e():(t=function(){e()},pn(window,"load",t))})).s((function(e){throw dn(window,"load",t),e}))}function Er(t){return t=t||Or(),!("file:"!==Mr()&&"ionic:"!==Mr()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function Ir(){var t=s.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Ar(){return void 0!==s.WorkerGlobalScope&&"function"==typeof s.importScripts}function _r(){return lt.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":lt.INTERNAL.hasOwnProperty("node")?"Node":Ar()?"Worker":"Browser"}function Tr(){var t=_r();return"ReactNative"===t||"Node"===t}var kr="Firefox",Sr="Chrome";function Nr(t){var e=t.toLowerCase();return ut(e,"opera/")||ut(e,"opr/")||ut(e,"opios/")?"Opera":ut(e,"iemobile")?"IEMobile":ut(e,"msie")||ut(e,"trident/")?"IE":ut(e,"edge/")?"Edge":ut(e,"firefox/")?kr:ut(e,"silk/")?"Silk":ut(e,"blackberry")?"Blackberry":ut(e,"webos")?"Webos":!ut(e,"safari/")||ut(e,"chrome/")||ut(e,"crios/")||ut(e,"android")?!ut(e,"chrome/")&&!ut(e,"crios/")||ut(e,"edge/")?ut(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":Sr:"Safari"}var Cr={ld:"FirebaseCore-web",nd:"FirebaseUI-web"};function xr(t,e){e=e||[];var n,r=[],i={};for(n in Cr)i[Cr[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=_r())?r=Nr(i=Or()):"Worker"===r&&(r=Nr(i=Or())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function Or(){return s.navigator&&s.navigator.userAgent||""}function Pr(t,e){t=t.split("."),e=e||s;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function Dr(){try{var t=s.localStorage,e=Br();if(t)return t.setItem(e,"1"),t.removeItem(e),!fr()||!!s.indexedDB}catch(t){return Ar()&&!!s.indexedDB}return!1}function Lr(){return(Rr()||"chrome-extension:"===Mr()||Er())&&!Tr()&&Dr()&&!Ar()}function Rr(){return"http:"===Mr()||"https:"===Mr()}function Mr(){return s.location&&s.location.protocol||null}function Vr(t){return!vr(t=t||Or())&&Nr(t)!=kr}function jr(t){return void 0===t?null:or(t)}function Fr(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Ur(t){if(null!==t)return JSON.parse(t)}function Br(t){return t||Math.floor(1e9*Math.random()).toString()}function zr(t){return"Safari"!=Nr(t=t||Or())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function qr(){var t=s.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function Gr(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Or(),e=_r(),this.b=vr(t)||"ReactNative"===e}function Kr(){var t=s.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Hr(t){"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t)}function Wr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Yr(){return!(!Pr("fireauth.oauthhelper",s)&&!Pr("fireauth.iframe",s))}Gr.prototype.get=function(){var t=s.navigator;return!t||"boolean"!=typeof t.onLine||!Rr()&&"chrome-extension:"!==Mr()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Qr,Xr={};function $r(t){Xr[t]||(Xr[t]=!0,Hr(t))}try{var Jr={};Object.defineProperty(Jr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Jr,"abcd",{configurable:!0,enumerable:!0,value:2}),Qr=2==Jr.abcd}catch(Yt){Qr=!1}function Zr(t,e,n){Qr?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function ti(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Zr(t,n,e[n])}function ei(t){var e={};return ti(e,t),e}function ni(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Zr(e,n,ni(t[n]));return e}function ri(t){var e=t&&(t[ui]?"phone":null);if(!(e&&t&&t[si]))throw new k("internal-error","Internal assert: invalid MultiFactorInfo object");Zr(this,"uid",t[si]),Zr(this,"displayName",t[oi]||null);var n=null;t[ai]&&(n=new Date(t[ai]).toUTCString()),Zr(this,"enrollmentTime",n),Zr(this,"factorId",e)}function ii(t){try{var e=new ci(t)}catch(t){e=null}return e}ri.prototype.w=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var oi="displayName",ai="enrolledAt",si="mfaEnrollmentId",ui="phoneInfo";function ci(t){ri.call(this,t),Zr(this,"phoneNumber",t[ui])}function li(t){var e={},n=t[di],r=t[mi],i=t[yi];if(t=ii(t[vi]),!i||i!=hi&&i!=pi&&!n||i==pi&&!r||i==fi&&!t)throw Error("Invalid checkActionCode response!");i==pi?(e[bi]=n||null,e[Ei]=n||null,e[gi]=r):(e[bi]=r||null,e[Ei]=r||null,e[gi]=n||null),e[wi]=t||null,Zr(this,Ai,i),Zr(this,Ii,ni(e))}_(ci,ri),ci.prototype.w=function(){var t=ci.$a.w.call(this);return t.phoneNumber=this.phoneNumber,t};var fi="REVERT_SECOND_FACTOR_ADDITION",hi="EMAIL_SIGNIN",pi="VERIFY_AND_CHANGE_EMAIL",di="email",vi="mfaInfo",mi="newEmail",yi="requestType",gi="email",bi="fromEmail",wi="multiFactorInfo",Ei="previousEmail",Ii="data",Ai="operation";function _i(t){var e=Un(t=Bn(t),Ti)||null,n=Un(t,ki)||null,r=Un(t,Ci)||null;if(r=r&&Oi[r]||null,!e||!n||!r)throw new k("argument-error",Ti+", "+ki+"and "+Ci+" are required in a valid action code URL.");ti(this,{apiKey:e,operation:r,code:n,continueUrl:Un(t,Si)||null,languageCode:Un(t,Ni)||null,tenantId:Un(t,xi)||null})}var Ti="apiKey",ki="oobCode",Si="continueUrl",Ni="languageCode",Ci="mode",xi="tenantId",Oi={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:fi,signIn:hi,verifyAndChangeEmail:pi,verifyEmail:"VERIFY_EMAIL"};function Pi(t){try{return new _i(t)}catch(t){return null}}function Di(t){var e=t[ji];if(void 0===e)throw new k("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new k("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Li];if(n&&"object"==typeof n){e=n[Bi];var r=n[Fi];if(n=n[Ui],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new k("argument-error",Fi+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new k("argument-error",Ui+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new k("argument-error",Bi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new k("missing-android-pkg-name")}}else if(void 0!==n)throw new k("argument-error",Li+" property must be a non null object when specified.");if(this.f=null,(e=t[Vi])&&"object"==typeof e){if("string"==typeof(e=e[zi])&&e.length)this.f=e;else if(void 0!==e)throw new k("argument-error",zi+" property must be a non empty string when specified.")}else if(void 0!==e)throw new k("argument-error",Vi+" property must be a non null object when specified.");if(void 0!==(e=t[Mi])&&"boolean"!=typeof e)throw new k("argument-error",Mi+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[Ri])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new k("argument-error",Ri+" property must be a non empty string when specified.");this.i=t||null}var Li="android",Ri="dynamicLinkDomain",Mi="handleCodeInApp",Vi="iOS",ji="url",Fi="installApp",Ui="minimumVersion",Bi="packageName",zi="bundleId";function qi(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var Gi=null;function Ki(t){var e=Wi(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.g=t,this.c=e.exp,this.h=e.sub,A(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Hi(t){try{return new Ki(t)}catch(t){return null}}function Wi(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(function(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=Gi[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Gi){Gi={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=t.concat(e[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===Gi[o]&&(Gi[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;e(i<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,(function(t){e+=String.fromCharCode(t)})),e}(t))}catch(t){}return null}Ki.prototype.S=function(){return this.f},Ki.prototype.i=function(){return this.b},Ki.prototype.toString=function(){return this.g};var Yi="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Qi=["client_id","response_type","scope","redirect_uri","state"],Xi={md:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Wa:Qi},od:{Ja:null,ua:500,ta:750,fa:"github.com",Wa:Qi},pd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Wa:Qi},vd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Wa:Yi},jd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Wa:[]}};function $i(t){for(var e in Xi)if(Xi[e].fa==t)return Xi[e];return null}function Ji(t){var e={};e["facebook.com"]=ro,e["google.com"]=oo,e["github.com"]=io,e["twitter.com"]=ao;var n=t&&t[to];try{if(n)return e[n]?new e[n](t):new no(t);if(void 0!==t[Zi])return new eo(t)}catch(t){}return null}var Zi="idToken",to="providerId";function eo(t){var e=t[to];if(!e&&t[Zi]){var n=Hi(t[Zi]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Zr(this,"providerId",e),Zr(this,"isNewUser",n)}function no(t){eo.call(this,t),Zr(this,"profile",ni((t=Ur(t.rawUserInfo||"{}"))||{}))}function ro(t){if(no.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function io(t){if(no.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",this.profile&&this.profile.login||null)}function oo(t){if(no.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function ao(t){if(no.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Zr(this,"username",t.screenName||null)}function so(t){var e=Bn(t),n=Un(e,"link"),r=Un(Bn(n),"link");return e=Un(e,"deep_link_id"),Un(Bn(e),"link")||e||r||n||t}function uo(t,e){if(!t&&!e)throw new k("internal-error","Internal assert: no raw session string available");if(t&&e)throw new k("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?co:lo}_(no,eo),_(ro,no),_(io,no),_(oo,no),_(ao,no);var co="enroll",lo="signin";function fo(){}function ho(t,e){return t.then((function(t){if(t[ts]){var n=Hi(t[ts]);if(!n||e!=n.h)throw new k("user-mismatch");return t}throw new k("user-mismatch")})).s((function(t){throw t&&t.code&&t.code==C+"user-not-found"?new k("user-mismatch"):t}))}function po(t,e){if(!e)throw new k("internal-error","failed to construct a credential");this.a=e,Zr(this,"providerId",t),Zr(this,"signInMethod",t)}function vo(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function mo(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new po(t.providerId,t.pendingToken)}catch(t){}return null}function yo(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Zr(this,"idToken",e.idToken),e.accessToken&&Zr(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Zr(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new k("internal-error","failed to construct a credential");Zr(this,"accessToken",e.oauthToken),Zr(this,"secret",e.oauthTokenSecret)}Zr(this,"providerId",t),Zr(this,"signInMethod",n)}function go(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Zn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function bo(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new yo(t.providerId,e,t.signInMethod)}catch(t){}}return null}function wo(t,e){this.Pc=e||[],ti(this,{providerId:t,isOAuthProvider:!0}),this.Hb={},this.ob=($i(t)||{}).Ja||null,this.nb=null}function Eo(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new k("argument-error",'SAML provider IDs must be prefixed with "saml."');wo.call(this,t,[])}function Io(t){wo.call(this,t,Qi),this.a=[]}function Ao(){Io.call(this,"facebook.com")}function _o(t){if(!t)throw new k("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new Ao).credential({accessToken:e})}function To(){Io.call(this,"github.com")}function ko(t){if(!t)throw new k("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new To).credential({accessToken:e})}function So(){Io.call(this,"google.com"),this.Ca("profile")}function No(t,e){var n=t;return v(t)&&(n=t.idToken,e=t.accessToken),(new So).credential({idToken:n,accessToken:e})}function Co(){wo.call(this,"twitter.com",Yi)}function xo(t,e){var n=t;if(v(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new k("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new yo("twitter.com",n,"twitter.com")}function Oo(t,e,n){this.a=t,this.f=e,Zr(this,"providerId","password"),Zr(this,"signInMethod",n===Do.EMAIL_LINK_SIGN_IN_METHOD?Do.EMAIL_LINK_SIGN_IN_METHOD:Do.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Po(t){return t&&t.email&&t.password?new Oo(t.email,t.password,t.signInMethod):null}function Do(){ti(this,{providerId:"password",isOAuthProvider:!1})}function Lo(t,e){if(!(e=Ro(e)))throw new k("argument-error","Invalid email link!");return new Oo(t,e.code,Do.EMAIL_LINK_SIGN_IN_METHOD)}function Ro(t){return(t=Pi(t=so(t)))&&t.operation===hi?t:null}function Mo(t){if(!(t.cb&&t.bb||t.La&&t.ea))throw new k("internal-error");this.a=t,Zr(this,"providerId","phone"),this.fa="phone",Zr(this,"signInMethod","phone")}function Vo(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return G(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new Mo(e)}return null}function jo(t){return t.a.La&&t.a.ea?{temporaryProof:t.a.La,phoneNumber:t.a.ea}:{sessionInfo:t.a.cb,code:t.a.bb}}function Fo(t){try{this.a=t||lt.auth()}catch(t){throw new k("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}ti(this,{providerId:"phone",isOAuthProvider:!1})}function Uo(t,e){if(!t)throw new k("missing-verification-id");if(!e)throw new k("missing-verification-code");return new Mo({cb:t,bb:e})}function Bo(t){if(t.temporaryProof&&t.phoneNumber)return new Mo({La:t.temporaryProof,ea:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret,i=t&&t.nonce,o=t&&t.oauthIdToken,a=t&&t.pendingToken;try{switch(e){case"google.com":return No(o,n);case"facebook.com":return _o(n);case"github.com":return ko(n);case"twitter.com":return xo(n,r);default:return n||r||o||a?a?0==e.indexOf("saml.")?new po(e,a):new yo(e,{pendingToken:a,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new Io(e).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(t){return null}}function zo(t){if(!t.isOAuthProvider)throw new k("invalid-oauth-provider")}function qo(t,e,n,r,i,o,a){if(this.c=t,this.b=e||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=a||null,this.a=i||null,!this.g&&!this.a)throw new k("invalid-auth-event");if(this.g&&this.a)throw new k("invalid-auth-event");if(this.g&&!this.f)throw new k("invalid-auth-event")}function Go(t){return(t=t||{}).type?new qo(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&S(t.error),t.postBody,t.tenantId):null}function Ko(){this.b=null,this.a=[]}uo.prototype.Ha=function(){return this.a?Ce(this.a):Ce(this.b)},uo.prototype.w=function(){return this.type==co?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},fo.prototype.ja=function(){},fo.prototype.b=function(){},fo.prototype.c=function(){},fo.prototype.w=function(){},po.prototype.ja=function(t){return Es(t,vo(this))},po.prototype.b=function(t,e){var n=vo(this);return n.idToken=e,Is(t,n)},po.prototype.c=function(t,e){return ho(As(t,vo(this)),e)},po.prototype.w=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},yo.prototype.ja=function(t){return Es(t,go(this))},yo.prototype.b=function(t,e){var n=go(this);return n.idToken=e,Is(t,n)},yo.prototype.c=function(t,e){return ho(As(t,go(this)),e)},yo.prototype.w=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},wo.prototype.Ka=function(t){return this.Hb=mt(t),this},_(Eo,wo),_(Io,wo),Io.prototype.Ca=function(t){return Y(this.a,t)||this.a.push(t),this},Io.prototype.Pb=function(){return J(this.a)},Io.prototype.credential=function(t,e){var n;if(!(n=v(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new k("argument-error","credential failed: must provide the ID token and/or the access token.");return new yo(this.providerId,n,this.providerId)},_(Ao,Io),Zr(Ao,"PROVIDER_ID","facebook.com"),Zr(Ao,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),_(To,Io),Zr(To,"PROVIDER_ID","github.com"),Zr(To,"GITHUB_SIGN_IN_METHOD","github.com"),_(So,Io),Zr(So,"PROVIDER_ID","google.com"),Zr(So,"GOOGLE_SIGN_IN_METHOD","google.com"),_(Co,wo),Zr(Co,"PROVIDER_ID","twitter.com"),Zr(Co,"TWITTER_SIGN_IN_METHOD","twitter.com"),Oo.prototype.ja=function(t){return this.signInMethod==Do.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Os,{email:this.a,oobCode:this.f}):iu(t,Zs,{email:this.a,password:this.f})},Oo.prototype.b=function(t,e){return this.signInMethod==Do.EMAIL_LINK_SIGN_IN_METHOD?iu(t,Ps,{idToken:e,email:this.a,oobCode:this.f}):iu(t,Ks,{idToken:e,email:this.a,password:this.f})},Oo.prototype.c=function(t,e){return ho(this.ja(t),e)},Oo.prototype.w=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},ti(Do,{PROVIDER_ID:"password"}),ti(Do,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),ti(Do,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Mo.prototype.ja=function(t){return t.eb(jo(this))},Mo.prototype.b=function(t,e){var n=jo(this);return n.idToken=e,iu(t,eu,n)},Mo.prototype.c=function(t,e){var n=jo(this);return n.operation="REAUTH",ho(t=iu(t,nu,n),e)},Mo.prototype.w=function(){var t={providerId:"phone"};return this.a.cb&&(t.verificationId=this.a.cb),this.a.bb&&(t.verificationCode=this.a.bb),this.a.La&&(t.temporaryProof=this.a.La),this.a.ea&&(t.phoneNumber=this.a.ea),t},Fo.prototype.eb=function(t,e){var n=this.a.a;return Ce(e.verify()).then((function(r){if("string"!=typeof r)throw new k("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var i=v(t)?t.session:null,o=v(t)?t.phoneNumber:t;return(i&&i.type==co?i.Ha().then((function(t){return function(t,e){return iu(t,Ws,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==lo?i.Ha().then((function(e){return function(t,e){return iu(t,Ys,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(t,e){return iu(t,qs,e)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new k("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},ti(Fo,{PROVIDER_ID:"phone"}),ti(Fo,{PHONE_SIGN_IN_METHOD:"phone"}),qo.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},qo.prototype.S=function(){return this.h},qo.prototype.w=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};var Ho,Wo=null;function Yo(t){var e="unauthorized-domain",n=void 0,r=Bn(t);t=r.a,"chrome-extension"==(r=r.f)?n=Gt("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=Gt("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",k.call(this,e,n)}function Qo(t,e,n){k.call(this,t,n),(t=e||{}).Ib&&Zr(this,"email",t.Ib),t.ea&&Zr(this,"phoneNumber",t.ea),t.credential&&Zr(this,"credential",t.credential),t.Yb&&Zr(this,"tenantId",t.Yb)}function Xo(t){if(t.code){var e=t.code||"";0==e.indexOf(C)&&(e=e.substring(C.length));var n={credential:Bo(t),Yb:t.tenantId};if(t.email)n.Ib=t.email;else if(t.phoneNumber)n.ea=t.phoneNumber;else if(!n.credential)return new k(e,t.message||void 0);return new Qo(e,n,t.message)}return null}function $o(){}function Jo(t){return t.c||(t.c=t.b())}function Zo(){}function ta(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function ea(){}function na(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=E(this.pc,this),this.a.onerror=E(this.Rb,this),this.a.onprogress=E(this.qc,this),this.a.ontimeout=E(this.uc,this)}function ra(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function ia(t,e,n){this.reset(t,e,n,void 0,void 0)}function oa(t){this.f=t,this.b=this.c=this.a=null}function aa(t,e){this.name=t,this.value=e}_(Yo,k),_(Qo,k),Qo.prototype.w=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.w();return e&&gt(t,e),t},Qo.prototype.toJSON=function(){return this.w()},$o.prototype.c=null,_(Zo,$o),Zo.prototype.a=function(){var t=ta(this);return t?new ActiveXObject(t):new XMLHttpRequest},Zo.prototype.b=function(){var t={};return ta(this)&&(t[0]=!0,t[1]=!0),t},Ho=new Zo,_(ea,$o),ea.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new na;throw Error("Unsupported browser")},ea.prototype.b=function(){return{}},(t=na.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.pc=function(){this.status=200,this.response=this.responseText=this.a.responseText,ra(this,4)},t.Rb=function(){this.status=500,this.response=this.responseText="",ra(this,4)},t.uc=function(){this.Rb()},t.qc=function(){this.status=200,ra(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},ia.prototype.a=null,ia.prototype.reset=function(t,e,n,r,i){r||A(),delete this.a},aa.prototype.toString=function(){return this.name};var sa=new aa("SEVERE",1e3),ua=new aa("WARNING",900),ca=new aa("CONFIG",700),la=new aa("FINE",500);function fa(t){return t.c?t.c:t.a?fa(t.a):(M("Root logger has no level set."),null)}oa.prototype.log=function(t,e,n){if(t.value>=fa(this).value)for(d(e)&&(e=e()),t=new ia(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var ha={},pa=null;function da(t){var e;if(pa||(pa=new oa(""),ha[""]=pa,pa.c=ca),!(e=ha[t])){e=new oa(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=da(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,ha[t]=e}return e}function va(t,e){t&&t.log(la,e,void 0)}function ma(t){this.f=t}function ya(t){An.call(this),this.u=t,this.h=void 0,this.readyState=ga,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.l=new Headers,this.b=null,this.o="GET",this.f="",this.a=!1,this.i=da("goog.net.FetchXmlHttp"),this.m=this.c=this.g=null}_(ma,$o),ma.prototype.a=function(){return new ya(this.f)},ma.prototype.b=function(t){return function(){return t}}({}),_(ya,An);var ga=0;function ba(t){t.c.read().then(t.oc.bind(t)).catch(t.Ta.bind(t))}function wa(t){t.readyState=4,t.g=null,t.c=null,t.m=null,Ea(t)}function Ea(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function Ia(t){An.call(this),this.headers=new On,this.O=t||null,this.c=!1,this.A=this.a=null,this.h=this.P=this.l="",this.f=this.N=this.i=this.G=!1,this.g=0,this.o=null,this.m=Aa,this.u=this.R=!1}(t=ya.prototype).open=function(t,e){if(this.readyState!=ga)throw this.abort(),Error("Error reopening a connection");this.o=t,this.f=e,this.readyState=1,Ea(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.l,method:this.o,credentials:this.h,cache:void 0};t&&(e.body=t),this.u.fetch(new Request(this.f,e)).then(this.tc.bind(this),this.Ta.bind(this))},t.abort=function(){this.response=this.responseText="",this.l=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,wa(this)),this.readyState=ga},t.tc=function(t){this.a&&(this.g=t,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=t.headers,this.readyState=2,Ea(this)),this.a&&(this.readyState=3,Ea(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.rc.bind(this),this.Ta.bind(this)):void 0!==s.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.m=new TextDecoder,ba(this)):t.text().then(this.sc.bind(this),this.Ta.bind(this)))))},t.oc=function(t){if(this.a){var e=this.m.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?wa(this):Ea(this),3==this.readyState&&ba(this)}},t.sc=function(t){this.a&&(this.response=this.responseText=t,wa(this))},t.rc=function(t){this.a&&(this.response=t,wa(this))},t.Ta=function(t){var e=this.i;e&&e.log(ua,"Failed to fetch url "+this.f,t instanceof Error?t:Error(t)),this.a&&wa(this)},t.setRequestHeader=function(t,e){this.l.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.i)&&t.log(ua,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.i;return t&&t.log(ua,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(ya.prototype,"withCredentials",{get:function(){return"include"===this.h},set:function(t){this.h=t?"include":"same-origin"}}),_(Ia,An);var Aa="";Ia.prototype.b=da("goog.net.XhrIo");var _a=/^https?$/i,Ta=["POST","PUT"];function ka(t){return"content-type"==t.toLowerCase()}function Sa(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,Na(t),xa(t)}function Na(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Ca(t){if(t.c&&void 0!==a)if(t.A[1]&&4==Pa(t)&&2==Da(t))va(t.b,La(t,"Local request error detected and ignored"));else if(t.i&&4==Pa(t))Sn(t.Ub,0,t);else if(t.dispatchEvent("readystatechange"),4==Pa(t)){va(t.b,La(t,"Request complete")),t.c=!1;try{var e,n=Da(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.l).match(Ln)[1]||null;if(!o&&s.self&&s.self.location){var u=s.self.location.protocol;o=u.substr(0,u.length-1)}i=!_a.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Pa(t)?t.a.statusText:""}catch(e){va(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Da(t)+"]",Na(t)}}finally{xa(t)}}}function xa(t,e){if(t.a){Oa(t);var n=t.a,r=t.A[0]?f:null;t.a=null,t.A=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(sa,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Oa(t){t.a&&t.u&&(t.a.ontimeout=null),t.o&&(s.clearTimeout(t.o),t.o=null)}function Pa(t){return t.a?t.a.readyState:0}function Da(t){try{return 2<Pa(t)?t.a.status:-1}catch(t){return-1}}function La(t,e){return e+" ["+t.P+" "+t.l+" "+Da(t)+"]"}function Ra(t){var e=Ha;this.g=[],this.u=e,this.o=t||null,this.f=this.a=!1,this.c=void 0,this.m=this.A=this.i=!1,this.h=0,this.b=null,this.l=0}function Ma(t,e,n){t.a=!0,t.c=n,t.f=!e,Ua(t)}function Va(t){if(t.a){if(!t.m)throw new Ba(t);t.m=!1}}function ja(t,e,n,r){t.g.push([e,n,r]),t.a&&Ua(t)}function Fa(t){return W(t.g,(function(t){return d(t[1])}))}function Ua(t){if(t.h&&t.a&&Fa(t)){var e=t.h,n=Ga[e];n&&(s.clearTimeout(n.a),delete Ga[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var r=n=!1;t.g.length&&!t.i;){var i=t.g.shift(),o=i[0],a=i[1];if(i=i[2],o=t.f?a:o)try{var u=o.call(i||t.o,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(D(e)||"function"==typeof s.Promise&&e instanceof s.Promise)&&(r=!0,t.i=!0)}catch(r){e=r,t.f=!0,Fa(t)||(n=!0)}}t.c=e,r&&(u=E(t.v,t,!0),r=E(t.v,t,!1),e instanceof Ra?(ja(e,u,r),e.A=!0):e.then(u,r)),n&&(e=new qa(e),Ga[e.a]=e,t.h=e.a)}function Ba(){L.call(this)}function za(){L.call(this)}function qa(t){this.a=s.setTimeout(E(this.c,this),0),this.b=t}(t=Ia.prototype).Ma=function(){void 0!==a&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",va(this.b,La(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(va(this.b,La(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),xa(this))},t.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),xa(this,!0)),Ia.$a.Da.call(this)},t.Ub=function(){this.xa||(this.N||this.i||this.f?Ca(this):this.Ic())},t.Ic=function(){Ca(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Aa:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(sa,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return va(this.b,"Can not get response: "+t.message),null}},Ra.prototype.cancel=function(t){if(this.a)this.c instanceof Ra&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.u?this.u.call(this.o,this):this.m=!0,this.a||(t=new za(this),Va(this),Ma(this,!1,t))}},Ra.prototype.v=function(t,e){this.i=!1,Ma(this,t,e)},Ra.prototype.then=function(t,e,n){var r,i,o=new Ie((function(t,e){r=t,i=e}));return ja(this,r,(function(t){t instanceof za?o.cancel():i(t)})),o.then(t,e,n)},Ra.prototype.$goog_Thenable=!0,_(Ba,L),Ba.prototype.message="Deferred has already fired",Ba.prototype.name="AlreadyCalledError",_(za,L),za.prototype.message="Deferred was canceled",za.prototype.name="CanceledError",qa.prototype.c=function(){throw delete Ga[this.a],this.b};var Ga={};function Ka(t){var e={},n=e.document||document,r=St(t).toString(),i=me(document,"SCRIPT"),o={Vb:i,Ma:void 0},a=new Ra(o),u=null,f=null!=e.timeout?e.timeout:5e3;return 0<f&&(u=window.setTimeout((function(){Wa(i,!0);var t=new Xa(Qa,"Timeout reached for loading script "+r);Va(a),Ma(a,!1,t)}),f),o.Ma=u),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Wa(i,e.wd||!1,u),Va(a),Ma(a,!0,null))},i.onerror=function(){Wa(i,!0,u);var t=new Xa(Ya,"Error while loading script "+r);Va(a),Ma(a,!1,t)},gt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),fe(i,o),function(t,e){bt(t,"HTMLScriptElement"),t.src=St(e),(e=t.ownerDocument&&t.ownerDocument.defaultView)&&e!=s?e=l(e.document):(null===c&&(c=l(s.document)),e=c),e&&t.setAttribute("nonce",e)}(i,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),a}function Ha(){if(this&&this.Vb){var t=this.Vb;t&&"SCRIPT"==t.tagName&&Wa(t,!0,this.Ma)}}function Wa(t,e,n){null!=n&&s.clearTimeout(n),t.onload=f,t.onerror=f,t.onreadystatechange=f,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var Ya=0,Qa=1;function Xa(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),L.call(this,n),this.code=t}function $a(t){this.f=t}function Ja(t,e,n){if(this.c=t,t=e||{},this.l=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.v=t.secureTokenTimeout||es,this.g=mt(t.secureTokenHeaders||ns),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.m=t.firebaseTimeout||rs,this.a=mt(t.firebaseHeaders||is),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==_r(),!(n=s.XMLHttpRequest||n&&lt.INTERNAL.node&&lt.INTERNAL.node.XMLHttpRequest)&&!Ar())throw new k("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,Ar()?this.f=new ma(self):Tr()?this.f=new $a(n):this.f=new ea,this.b=null}_(Xa,L),_($a,$o),$a.prototype.a=function(){return new this.f},$a.prototype.b=function(){return{}};var Za,ts="idToken",es=new Gr(3e4,6e4),ns={"Content-Type":"application/x-www-form-urlencoded"},rs=new Gr(3e4,6e4),is={"Content-Type":"application/json"};function os(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function as(t,e){e&&(t.l=ss("https://securetoken.googleapis.com/v1/token",e),t.h=ss("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",e),t.i=ss("https://identitytoolkit.googleapis.com/v2/",e))}function ss(t,e){return t=Bn(t),e=Bn(e.url),t.c=t.a+t.c,Mn(t,e.f),t.a=e.a,Vn(t,e.g),t.toString()}function us(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function cs(t,e,n,r,i,o,a){(function(){var t=Or();return!((t=Nr(t)!=Sr?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||Xt&&ue&&!(9<ue))})()||Ar()?t=E(t.u,t):(Za||(Za=new Ie((function(t,e){!function(t,e){((window.gapi||{}).client||{}).request?t():(s[fs]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){ja(t,null,e,void 0)}(Ka(Nt(ls,{onload:fs})),(function(){e(Error("CORS_UNSUPPORTED"))})))}(t,e)}))),t=E(t.o,t)),t(e,n,r,i,o,a)}Ja.prototype.S=function(){return this.b},Ja.prototype.u=function(t,e,n,r,i,o){if(Ar()&&(void 0===s.fetch||void 0===s.Headers||void 0===s.Request))throw new k("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new Ia(this.f);if(o){a.g=Math.max(0,o);var u=setTimeout((function(){a.dispatchEvent("timeout")}),o)}_n(a,"complete",(function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return va(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),Tn(a,"ready",(function(){u&&clearTimeout(u),We(this)})),Tn(a,"timeout",(function(){u&&clearTimeout(u),We(this),e&&e(null)})),function(t,e,n,r,i){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.G=!1,t.c=!0,t.a=t.O?t.O.a():Ho.a(),t.A=t.O?Jo(t.O):Jo(Ho),t.a.onreadystatechange=E(t.Ub,t);try{va(t.b,La(t,"Opening Xhr")),t.N=!0,t.a.open(n,String(e),!0),t.N=!1}catch(e){return va(t.b,La(t,"Error opening Xhr: "+e.message)),void Sa(t,e)}e=r||"";var o=new On(t.headers);i&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(p(t)||"string"==typeof t)G(t,e,void 0);else for(var n=xn(t),r=Cn(t),i=r.length,o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}(i,(function(t,e){o.set(e,t)})),i=function(t){t:{for(var e=ka,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.Y()),r=s.FormData&&e instanceof s.FormData,!Y(Ta,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.R&&(t.a.withCredentials=t.R);try{Oa(t),0<t.g&&(t.u=function(t){return Xt&&se(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),va(t.b,La(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.u)),t.u?(t.a.timeout=t.g,t.a.ontimeout=E(t.Ma,t)):t.o=Sn(t.Ma,t.g,t)),va(t.b,La(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){va(t.b,La(t,"Send error: "+e.message)),Sa(t,e)}}(a,t,n,r,i)};var ls=new wt(_t,"https://apis.google.com/js/client.js?onload=%{onload}"),fs="__fcb"+Math.floor(1e6*Math.random()).toString();function hs(t){if("string"!=typeof(t=t.email)||!br.test(t))throw new k("invalid-email")}function ps(t){"email"in t&&hs(t)}function ds(t){if(!t[ts]){if(t.mfaPendingCredential)throw new k("multi-factor-auth-required",null,mt(t));throw new k("internal-error")}}function vs(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new k("internal-error")}else{if(!t.sessionInfo)throw new k("missing-verification-id");if(!t.code)throw new k("missing-verification-code")}}Ja.prototype.o=function(t,e,n,r,i){var o=this;Za.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})})).s((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},Ja.prototype.yb=function(){return iu(this,Hs,{})},Ja.prototype.Ab=function(t,e){return iu(this,Gs,{idToken:t,email:e})},Ja.prototype.Bb=function(t,e){return iu(this,Ks,{idToken:t,password:e})};var ms={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function ys(t){if(!t.phoneVerificationInfo)throw new k("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new k("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new k("missing-verification-code")}function gs(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new k("internal-error")}function bs(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&er(t=new $n(t.postBody),"nonce")&&(e.nonce=t.get("nonce"))),e}function ws(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Xo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Xo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Xo(t)):t.errorMessage&&(e=ou(t.errorMessage)),e)throw e;ds(t)}function Es(t,e){return e.returnIdpCredential=!0,iu(t,Qs,e)}function Is(t,e){return e.returnIdpCredential=!0,iu(t,$s,e)}function As(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,iu(t,Xs,e)}function _s(t){if(!t.oobCode)throw new k("invalid-action-code")}(t=Ja.prototype).Cb=function(t,e){var n={idToken:t},r=[];return dt(ms,(function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),iu(this,Gs,n)},t.ub=function(t,e){return gt(t={requestType:"PASSWORD_RESET",email:t},e),iu(this,Fs,t)},t.vb=function(t,e){return gt(t={requestType:"EMAIL_SIGNIN",email:t},e),iu(this,Ms,t)},t.tb=function(t,e){return gt(t={requestType:"VERIFY_EMAIL",idToken:t},e),iu(this,Vs,t)},t.Db=function(t,e,n){return gt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),iu(this,js,t)},t.eb=function(t){return iu(this,tu,t)},t.mb=function(t,e){return iu(this,zs,{oobCode:t,newPassword:e})},t.Qa=function(t){return iu(this,ks,{oobCode:t})},t.ib=function(t){return iu(this,Ts,{oobCode:t})};var Ts={endpoint:"setAccountInfo",B:_s,Z:"email",C:!0},ks={endpoint:"resetPassword",B:_s,F:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new k("internal-error")},C:!0},Ss={endpoint:"signupNewUser",B:function(t){if(hs(t),!t.password)throw new k("weak-password")},F:ds,U:!0,C:!0},Ns={endpoint:"createAuthUri",C:!0},Cs={endpoint:"deleteAccount",M:["idToken"]},xs={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],B:function(t){if(!Array.isArray(t.deleteProvider))throw new k("internal-error")}},Os={endpoint:"emailLinkSignin",M:["email","oobCode"],B:hs,F:ds,U:!0,C:!0},Ps={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],B:hs,F:ds,U:!0},Ds={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],B:ys,F:ds,C:!0,Na:!0},Ls={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],B:ys,F:ds,C:!0,Na:!0},Rs={endpoint:"getAccountInfo"},Ms={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new k("internal-error");hs(t)},Z:"email",C:!0},Vs={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],B:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new k("internal-error")},Z:"email",C:!0},js={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],B:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new k("internal-error")},Z:"email",C:!0},Fs={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("PASSWORD_RESET"!=t.requestType)throw new k("internal-error");hs(t)},Z:"email",C:!0},Us={kb:!0,endpoint:"getProjectConfig",Tb:"GET"},Bs={kb:!0,endpoint:"getRecaptchaParam",Tb:"GET",F:function(t){if(!t.recaptchaSiteKey)throw new k("internal-error")}},zs={endpoint:"resetPassword",B:_s,Z:"email",C:!0},qs={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Z:"sessionInfo",C:!0},Gs={endpoint:"setAccountInfo",M:["idToken"],B:ps,U:!0},Ks={endpoint:"setAccountInfo",M:["idToken"],B:function(t){if(ps(t),!t.password)throw new k("weak-password")},F:ds,U:!0},Hs={endpoint:"signupNewUser",F:ds,U:!0,C:!0},Ws={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],B:function(t){if(!t.phoneEnrollmentInfo)throw new k("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new k("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new k("missing-app-credential")},F:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new k("internal-error")},C:!0,Na:!0},Ys={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],B:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new k("missing-app-credential")},F:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new k("internal-error")},C:!0,Na:!0},Qs={endpoint:"verifyAssertion",B:gs,Xa:bs,F:ws,U:!0,C:!0},Xs={endpoint:"verifyAssertion",B:gs,Xa:bs,F:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new k("user-not-found");if(t.errorMessage)throw ou(t.errorMessage);ds(t)},U:!0,C:!0},$s={endpoint:"verifyAssertion",B:function(t){if(gs(t),!t.idToken)throw new k("internal-error")},Xa:bs,F:ws,U:!0},Js={endpoint:"verifyCustomToken",B:function(t){if(!t.token)throw new k("invalid-custom-token")},F:ds,U:!0,C:!0},Zs={endpoint:"verifyPassword",B:function(t){if(hs(t),!t.password)throw new k("wrong-password")},F:ds,U:!0,C:!0},tu={endpoint:"verifyPhoneNumber",B:vs,F:ds,C:!0},eu={endpoint:"verifyPhoneNumber",B:function(t){if(!t.idToken)throw new k("internal-error");vs(t)},F:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Xo(t);ds(t)}},nu={Gb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:vs,F:ds,C:!0},ru={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],F:function(t){if(!!t[ts]^!!t.refreshToken)throw new k("internal-error")},C:!0,Na:!0};function iu(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(null==r||""===r)return!1}return!0}(n,e.M))return xe(new k("internal-error"));var r,i=!!e.Na,o=e.Tb||"POST";return Ce(n).then(e.B).then((function(){return e.U&&(n.returnSecureToken=!0),e.C&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),function(t,e,n,r,i,o,a){var s=Bn(e+n);Fn(s,"key",t.c),a&&Fn(s,"cb",A().toString());var u="GET"==r;if(u)for(var c in i)i.hasOwnProperty(c)&&Fn(s,c,i[c]);return new Ie((function(e,n){cs(t,s.toString(),(function(t){t?t.error?n(au(t,o||{})):e(t):n(new k("network-request-failed"))}),r,u?void 0:or(Fr(i)),t.a,t.m.get())}))}(t,i?t.i:t.h,e.endpoint,o,n,e.Gb,e.kb||!1)})).then((function(t){return r=t,e.Xa?e.Xa(n,r):r})).then(e.F).then((function(){if(!e.Z)return r;if(!(e.Z in r))throw new k("internal-error");return r[e.Z]}))}function ou(t){return au({error:{errors:[{message:t}],code:400,message:t}})}function au(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new k(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",gt(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new k(r[i],e);return!e&&t&&(e=jr(t)),new k("internal-error",e)}function su(t){this.b=t,this.a=null,this.qb=function(t){return(fu||(fu=new Ie((function(t,e){function n(){qr(),Pr("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){qr(),e(Error("Network Error"))},timeout:cu.get()})}if(Pr("gapi.iframes.Iframe"))t();else if(Pr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();s[r]=function(){Pr("gapi.load")?n():e(Error("Network Error"))},Ce(Ka(r=Nt(uu,{onload:r}))).s((function(){e(Error("Network Error"))}))}})).s((function(t){throw fu=null,t})))).then((function(){return new Ie((function(e,n){Pr("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:Pr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),lu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var uu=new wt(_t,"https://apis.google.com/js/api.js?onload=%{onload}"),cu=new Gr(3e4,6e4),lu=new Gr(5e3,15e3),fu=null;function hu(t,e,n,r){this.l=t,this.h=e,this.i=n,this.g=r,this.f=null,t=this.g?zn((t=Bn(this.g.url)).f,t.a,t.g,"/emulator/auth/iframe"):zn("https",this.l,null,"/__/auth/iframe"),this.a=t,Fn(this.a,"apiKey",this.h),Fn(this.a,"appName",this.i),this.b=null,this.c=[]}function pu(t,e,n,r,i,o){this.u=t,this.o=e,this.c=n,this.v=r,this.m=o,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function du(t){try{return lt.app(t).auth().Ga()}catch(t){return[]}}function vu(t,e,n,r,i,o){this.o=t,this.g=e,this.b=n,this.f=o,this.c=r||null,this.i=i||null,this.l=this.u=this.A=null,this.h=[],this.v=this.a=null}function mu(t){var e=hr();return function(t){return iu(t,Us,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=Bn(e),r=n.f;n=n.a;for(var i=0;i<t.length;i++){var o=t[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Bn(o).a==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:gr.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new Yo(hr())}))}function yu(t){return t.v||(t.v=wr().then((function(){if(!t.u){var e=t.c,n=t.i,r=du(t.b),i=new hu(t.o,t.g,t.b,t.f);i.f=e,i.b=n,i.c=J(r||[]),t.u=i.toString()}t.m=new su(t.u),function(t){if(!t.m)throw Error("IfcHandler must be initialized!");!function(t,e){t.qb.then((function(){t.a.register("authEvent",e,Pr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.m,(function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=Go(e.authEvent),n=0;n<t.h.length;n++)r=t.h[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Ce(n)}return n.status="ERROR",Ce(n)}))}(t)}))),t.v}function gu(t){return t.l||(t.A=t.c?xr(t.c,du(t.b)):null,t.l=new Ja(t.g,P(t.i),t.A),t.f&&as(t.l,t.f)),t.l}function bu(t,e,n,r,i,o,a,s,u,c,l,f){return(t=new pu(t,e,n,r,i,f)).l=o,t.g=a,t.i=s,t.b=mt(u||null),t.f=c,t.xb(l).toString()}function wu(t){if(this.a=t||lt.INTERNAL.reactNative&&lt.INTERNAL.reactNative.AsyncStorage,!this.a)throw new k("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Eu(t){this.b=t,this.a={},this.f=E(this.c,this)}hu.prototype.toString=function(){return this.f?Fn(this.a,"v",this.f):tr(this.a.b,"v"),this.b?Fn(this.a,"eid",this.b):tr(this.a.b,"eid"),this.c.length?Fn(this.a,"fw",this.c.join(",")):tr(this.a.b,"fw"),this.a.toString()},pu.prototype.xb=function(t){return this.h=t,this},pu.prototype.toString=function(){if(this.m){var t=Bn(this.m.url);t=zn(t.f,t.a,t.g,"/emulator/auth/handler")}else t=zn("https",this.u,null,"/__/auth/handler");if(Fn(t,"apiKey",this.o),Fn(t,"appName",this.c),Fn(t,"authType",this.v),this.a.isOAuthProvider){var e=this.a;try{var n=lt.app(this.c).auth().ka()}catch(t){n=null}for(var r in e.nb=n,Fn(t,"providerId",this.a.providerId),e=Fr((n=this.a).Hb))e[r]=e[r].toString();r=n.Pc,e=mt(e);for(var i=0;i<r.length;i++){var o=r[i];o in e&&delete e[o]}n.ob&&n.nb&&!e[n.ob]&&(e[n.ob]=n.nb),vt(e)||Fn(t,"customParameters",jr(e))}if("function"==typeof this.a.Pb&&(n=this.a.Pb()).length&&Fn(t,"scopes",n.join(",")),this.l?Fn(t,"redirectUrl",this.l):tr(t.b,"redirectUrl"),this.g?Fn(t,"eventId",this.g):tr(t.b,"eventId"),this.i?Fn(t,"v",this.i):tr(t.b,"v"),this.b)for(var a in this.b)this.b.hasOwnProperty(a)&&!Un(t,a)&&Fn(t,a,this.b[a]);return this.h?Fn(t,"tid",this.h):tr(t.b,"tid"),this.f?Fn(t,"eid",this.f):tr(t.b,"eid"),(a=du(this.c)).length&&Fn(t,"fw",a.join(",")),t.toString()},(t=vu.prototype).Nb=function(t,e,n){var r=new k("popup-closed-by-user"),i=new k("web-storage-unsupported"),o=this,a=!1;return this.la().then((function(){(function(t){var e={type:"webStorageSupport"};return yu(t).then((function(){return function(t,e){return t.qb.then((function(){return new Ie((function(n){t.a.send(e.type,e,n,Pr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.m,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&mr(t),e(i),a=!0)}))})).s((function(){})).then((function(){if(!a)return function(t){return new Ie((function(e){return function n(){Nn(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!a)return Nn(n).then((function(){e(r)}))}))},t.Wb=function(){var t=Or();return!Vr(t)&&!zr(t)},t.Sb=function(){return!1},t.Lb=function(t,e,n,r,i,o,a,s){if(!t)return xe(new k("popup-blocked"));if(a&&!Vr())return this.la().s((function(e){mr(t),i(e)})),r(),Ce();this.a||(this.a=mu(gu(this)));var u=this;return this.a.then((function(){var e=u.la().s((function(e){throw mr(t),i(e),e}));return r(),e})).then((function(){zo(n),a||pr(bu(u.o,u.g,u.b,e,n,null,o,u.c,void 0,u.i,s,u.f),t)})).s((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},t.Mb=function(t,e,n,r){this.a||(this.a=mu(gu(this)));var i=this;return this.a.then((function(){zo(e),pr(bu(i.o,i.g,i.b,t,e,hr(),n,i.c,void 0,i.i,r,i.f))})).s((function(t){throw"auth/network-request-failed"==t.code&&(i.a=null),t}))},t.la=function(){var t=this;return yu(this).then((function(){return t.m.qb})).s((function(){throw t.a=null,new k("network-request-failed")}))},t.Zb=function(){return!0},t.Ea=function(t){this.h.push(t)},t.Ra=function(t){X(this.h,(function(e){return e==t}))},(t=wu.prototype).get=function(t){return Ce(this.a.getItem(t)).then((function(t){return t&&Ur(t)}))},t.set=function(t,e){return Ce(this.a.setItem(t,jr(e)))},t.T=function(t){return Ce(this.a.removeItem(t))},t.ca=function(){},t.ia=function(){};var Iu,Au=[];function _u(t,e,n){vt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function Tu(t){this.a=t}function ku(t){this.c=t,this.b=!1,this.a=[]}function Su(t,e,n,r){var i,o,a,s,u=n||{},c=null;if(t.b)return xe(Error("connection_unavailable"));var l=r?800:50,f="undefined"!=typeof MessageChannel?new MessageChannel:null;return new Ie((function(n,r){f?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),f.port1.start(),a=setTimeout((function(){r(Error("unsupported_event"))}),l),c={messageChannel:f,onMessage:o=function(t){t.data.eventId===i&&("ack"===t.data.status?(clearTimeout(a),s=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(s),void 0!==t.data.response?n(t.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},t.a.push(c),f.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:i,data:u},[f.port2])):r(Error("connection_unavailable"))})).then((function(e){return Nu(t,c),e})).s((function(e){throw Nu(t,c),e}))}function Nu(t,e){if(e){var n=e.messageChannel,r=e.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),X(t.a,(function(t){return t==e}))}}function Cu(){if(!Du())throw new k("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.v=s.indexedDB,this.type="indexedDB",this.g=this.m=this.f=this.l=null,this.o=!1,this.h=null;var t=this;Ar()&&self?(this.m=function(){var t=Ar()?self:null;if(G(Au,(function(n){n.b==t&&(e=n)})),!e){var e=new Eu(t);Au.push(e)}return e}(),_u(this.m,"keyChanged",(function(e,n){return ju(t).then((function(e){return 0<e.length&&G(t.a,(function(t){t(e)})),{keyProcessed:Y(e,n.key)}}))})),_u(this.m,"ping",(function(){return Ce(["keyChanged"])}))):function(){var t=s.navigator;return t&&t.serviceWorker?Ce().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).s((function(){return null})):Ce(null)}().then((function(e){(t.h=e)&&(t.g=new ku(new Tu(e)),Su(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&Y(e[0].value,"keyChanged")&&(t.o=!0)})).s((function(){})))}))}function xu(t){return new Ie((function(e,n){var r=t.v.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new Ie((function(e,n){var r=t.v.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return xu(t)})).then((function(t){e(t)})).s((function(t){n(t)}))}}))}function Ou(t){return t.i||(t.i=xu(t)),t.i}function Pu(t,e){var n=0;return new Ie((function r(i,o){Ou(t).then(e).then(i).s((function(e){if(!(3<++n))return Ou(t).then((function(e){return e.close(),t.i=void 0,r(i,o)}));o(e)}))}))}function Du(){try{return!!s.indexedDB}catch(t){return!1}}function Lu(t){return t.objectStore("firebaseLocalStorage")}function Ru(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Mu(t){return new Ie((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function Vu(t,e){return t.g&&t.h&&function(){var t=s.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?Su(t.g,"keyChanged",{key:e},t.o).then((function(){})).s((function(){})):Ce()}function ju(t){return Ou(t).then((function(t){var e=Lu(Ru(t,!1));return e.getAll?Mu(e.getAll()):new Ie((function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=dr(t.c,n),t.c=n}return r}))}function Fu(t){t.l&&t.l.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Uu(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Ce().then((function(){if(Du()){var t=Br(),r="__sak"+t;return Iu||(Iu=new Cu),(n=Iu).set(r,t).then((function(){return n.get(r)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.T(r)})).then((function(){return n})).s((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ca((function(t){G(e.a,(function(e){e(t)}))})),t}))}function Bu(){this.a={},this.type="inMemory"}function zu(){if(!function(){var t="Node"==_r();if(!(t=qu()||t&&lt.INTERNAL.node&&lt.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==_r())throw new k("internal-error","The LocalStorage compatibility library was not found.");throw new k("web-storage-unsupported")}this.a=qu()||lt.INTERNAL.node.localStorage,this.type="localStorage"}function qu(){try{var t=s.localStorage,e=Br();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Gu(){this.type="nullStorage"}function Ku(){if(!function(){var t="Node"==_r();if(!(t=Hu()||t&&lt.INTERNAL.node&&lt.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==_r())throw new k("internal-error","The SessionStorage compatibility library was not found.");throw new k("web-storage-unsupported")}this.a=Hu()||lt.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Hu(){try{var t=s.sessionStorage,e=Br();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Wu(){var t={};t.Browser=Xu,t.Node=$u,t.ReactNative=Ju,t.Worker=Zu,this.a=t[_r()]}Eu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,r=this.a[e];if(r&&0<r.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var i=[];G(r,(function(e){i.push(Ce().then((function(){return e(t.origin,t.data.data)})))})),Pe(i).then((function(r){var i=[];G(r,(function(t){i.push({fulfilled:t.Ob,value:t.value,reason:t.reason?t.reason.message:void 0})})),G(i,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:i})}))}},Tu.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},ku.prototype.close=function(){for(;0<this.a.length;)Nu(this,this.a[0]);this.b=!0},(t=Cu.prototype).set=function(t,e){var n=this,r=!1;return Pu(this,(function(e){return Mu((e=Lu(Ru(e,!0))).get(t))})).then((function(i){return Pu(n,(function(o){if(o=Lu(Ru(o,!0)),i)return i.value=e,Mu(o.put(i));n.b++,r=!0;var a={};return a.fbase_key=t,a.value=e,Mu(o.add(a))}))})).then((function(){return n.c[t]=e,Vu(n,t)})).na((function(){r&&n.b--}))},t.get=function(t){return Pu(this,(function(e){return Mu(Lu(Ru(e,!1)).get(t))})).then((function(t){return t&&t.value}))},t.T=function(t){var e=this,n=!1;return Pu(this,(function(r){return n=!0,e.b++,Mu(Lu(Ru(r,!0)).delete(t))})).then((function(){return delete e.c[t],Vu(e,t)})).na((function(){n&&e.b--}))},t.ca=function(t){0==this.a.length&&function(t){Fu(t),function e(){t.f=setTimeout((function(){t.l=ju(t).then((function(e){0<e.length&&G(t.a,(function(t){t(e)}))})).then((function(){e()})).s((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},t.ia=function(t){X(this.a,(function(e){return e==t})),0==this.a.length&&Fu(this)},(t=Uu.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},t.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},t.T=function(t){return this.b.then((function(e){return e.T(t)}))},t.ca=function(t){this.a.push(t)},t.ia=function(t){X(this.a,(function(e){return e==t}))},(t=Bu.prototype).get=function(t){return Ce(this.a[t])},t.set=function(t,e){return this.a[t]=e,Ce()},t.T=function(t){return delete this.a[t],Ce()},t.ca=function(){},t.ia=function(){},(t=zu.prototype).get=function(t){var e=this;return Ce().then((function(){return Ur(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ce().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Ce().then((function(){e.a.removeItem(t)}))},t.ca=function(t){s.window&&fn(s.window,"storage",t)},t.ia=function(t){s.window&&dn(s.window,"storage",t)},(t=Gu.prototype).get=function(){return Ce(null)},t.set=function(){return Ce()},t.T=function(){return Ce()},t.ca=function(){},t.ia=function(){},(t=Ku.prototype).get=function(t){var e=this;return Ce().then((function(){return Ur(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ce().then((function(){var r=jr(e);null===r?n.T(t):n.a.setItem(t,r)}))},t.T=function(t){var e=this;return Ce().then((function(){e.a.removeItem(t)}))},t.ca=function(){},t.ia=function(){};var Yu,Qu,Xu={D:zu,ab:Ku},$u={D:zu,ab:Ku},Ju={D:wu,ab:Gu},Zu={D:zu,ab:Gu},tc={qd:"local",NONE:"none",sd:"session"};function ec(){var t=!(zr(Or())||!Ir()),e=Vr(),n=Dr();this.v=t,this.h=e,this.l=n,this.a={},Yu||(Yu=new Wu),t=Yu;try{this.g=!fr()&&Yr()||!s.indexedDB?new t.a.D:new Uu(Ar()?new Bu:new t.a.D)}catch(t){this.g=new Bu,this.h=!0}try{this.i=new t.a.ab}catch(t){this.i=new Bu}this.m=new Bu,this.f=E(this.Xb,this),this.b={}}function nc(){return Qu||(Qu=new ec),Qu}function rc(t,e){switch(e){case"session":return t.i;case"none":return t.m;default:return t.g}}function ic(t,e){return"firebase:"+t.name+(e?":"+e:"")}function oc(t,e,n){return n=ic(e,n),"local"==e.D&&(t.b[n]=null),rc(t,e.D).T(n)}function ac(t){t.c&&(clearInterval(t.c),t.c=null)}function sc(t){this.a=t,this.b=nc()}(t=ec.prototype).get=function(t,e){return rc(this,t.D).get(ic(t,e))},t.set=function(t,e,n){var r=ic(t,n),i=this,o=rc(this,t.D);return o.set(r,e).then((function(){return o.get(r)})).then((function(e){"local"==t.D&&(i.b[r]=e)}))},t.addListener=function(t,e,n){t=ic(t,e),this.l&&(this.b[t]=s.localStorage.getItem(t)),vt(this.a)&&(rc(this,"local").ca(this.f),this.h||(fr()||!Yr())&&s.indexedDB||!this.l||function(t){ac(t),t.c=setInterval((function(){for(var e in t.a){var n=s.localStorage.getItem(e),r=t.b[e];n!=r&&(t.b[e]=n,n=new Ze({type:"storage",key:e,target:window,oldValue:r,newValue:n,a:!0}),t.Xb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},t.removeListener=function(t,e,n){t=ic(t,e),this.a[t]&&(X(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),vt(this.a)&&(rc(this,"local").ia(this.f),ac(this))},t.Xb=function(t){if(t&&t.g){var e=t.a.key;if(null==e)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=s.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.lb(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?rc(this,"local").ia(this.f):ac(this),this.v)if(n=s.localStorage.getItem(e),(r=t.a.newValue)!==n)null!==r?s.localStorage.setItem(e,r):s.localStorage.removeItem(e);else if(this.b[e]===r&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===s.localStorage.getItem(e)||(o.b[e]=s.localStorage.getItem(e),o.lb(e))},Xt&&ue&&10==ue&&s.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else G(t,E(this.lb,this))},t.lb=function(t){this.a[t]&&G(this.a[t],(function(t){t()}))};var uc,cc={name:"authEvent",D:"local"};function lc(){this.a=nc()}function fc(t,e){this.b=hc,this.f=s.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=s.Int32Array?new Int32Array(64):Array(64),void 0===uc&&(uc=s.Int32Array?new Int32Array(bc):bc),this.reset()}_(fc,(function(){this.b=-1}));for(var hc=64,pc=hc-1,dc=[],vc=0;vc<pc;vc++)dc[vc]=0;var mc=$(128,dc);function yc(t){for(var e=t.f,n=t.l,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+a|0}r=0|t.a[0],i=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],l=0|t.a[5],f=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var h=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&l^~c&f)+(0|uc[e])|0)+(0|n[e])|0)|0,o=f,f=l,l=c,c=u+a|0,u=s,s=i,i=r,r=a+h|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+l|0,t.a[6]=t.a[6]+f|0,t.a[7]=t.a[7]+o|0}function gc(t,e,n){void 0===n&&(n=e.length);var r=0,i=t.c;if("string"==typeof e)for(;r<n;)t.f[i++]=e.charCodeAt(r++),i==t.b&&(yc(t),i=0);else{if(!p(e))throw Error("message must be string or array");for(;r<n;){var o=e[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[i++]=o,i==t.b&&(yc(t),i=0)}}t.c=i,t.g+=n}fc.prototype.reset=function(){this.g=this.c=0,this.a=s.Int32Array?new Int32Array(this.h):J(this.h)};var bc=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function wc(){fc.call(this,8,Ec)}_(wc,fc);var Ec=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Ic(t,e,n,r,i,o){this.m=t,this.i=e,this.l=n,this.v=r||null,this.u=i||null,this.o=o,this.h=e+":"+n,this.A=new lc,this.g=new sc(this.h),this.f=null,this.b=[],this.a=this.c=null}function Ac(t){return new k("invalid-cordova-configuration",t)}function _c(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function Tc(t){return t.f||(t.f=t.la().then((function(){return new Ie((function(e){t.Ea((function n(r){return e(r),t.Ra(n),!1})),function(t){function e(e){r=!0,i&&i.cancel(),kc(t).then((function(r){var i=n;if(r&&e&&e.url){var o=null;-1!=(i=so(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Ur(Un(o=Bn(i),"firebaseError")||null))?S(o):null)?new qo(r.c,r.b,null,null,o,null,r.S()):new qo(r.c,r.b,i,r.f,null,null,r.S())),i=o||n}_c(t,i)}))}var n=new qo("unknown",null,null,null,new k("no-auth-event")),r=!1,i=Nn(500).then((function(){return kc(t).then((function(){r||_c(t,n)}))})),o=s.handleOpenURL;s.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(Pr("BuildInfo.packageName",s).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},Wo||(Wo=new Ko),function(t){var e=Wo;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=Pr("universalLinks.subscribe",s))&&t(null,e.b))}(e)}(t)}))}))),t.f}function kc(t){var e=null;return function(t){return t.b.get(cc,t.a).then((function(t){return Go(t)}))}(t.g).then((function(n){return e=n,oc((n=t.g).b,cc,n.a)})).then((function(){return e}))}function Sc(t){this.a=t,this.b=nc()}(t=Ic.prototype).la=function(){return this.Ia?this.Ia:this.Ia=(Er(void 0)?wr().then((function(){return new Ie((function(t,e){var n=s.document,r=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),t()}),!1)}))})):xe(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Pr("universalLinks.subscribe",s))throw Ac("cordova-universal-links-plugin-fix is not installed");if(void 0===Pr("BuildInfo.packageName",s))throw Ac("cordova-plugin-buildinfo is not installed");if("function"!=typeof Pr("cordova.plugins.browsertab.openUrl",s))throw Ac("cordova-plugin-browsertab is not installed");if("function"!=typeof Pr("cordova.InAppBrowser.open",s))throw Ac("cordova-plugin-inappbrowser is not installed")}),(function(){throw new k("cordova-not-ready")}))},t.Nb=function(t,e){return e(new k("operation-not-supported-in-this-environment")),Ce()},t.Lb=function(){return xe(new k("operation-not-supported-in-this-environment"))},t.Zb=function(){return!1},t.Wb=function(){return!0},t.Sb=function(){return!0},t.Mb=function(t,e,n,r){if(this.c)return xe(new k("redirect-operation-pending"));var i=this,o=s.document,a=null,u=null,c=null,l=null;return this.c=Ce().then((function(){return zo(e),Tc(i)})).then((function(){return function(t,e,n,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new qo(e,r,null,o,new k("no-auth-event"),null,i),u=Pr("BuildInfo.packageName",s);if("string"!=typeof u)throw new k("invalid-cordova-configuration");var c=Pr("BuildInfo.displayName",s),l={};if(Or().toLowerCase().match(/iphone|ipad|ipod/))l.ibi=u;else{if(!Or().toLowerCase().match(/android/))return xe(new k("operation-not-supported-in-this-environment"));l.apn=u}c&&(l.appDisplayName=c),o=function(t){var e=new wc;gc(e,t),t=[];var n=8*e.g;56>e.c?gc(e,mc,56-e.c):gc(e,mc,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(yc(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return H(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}(o),l.sessionId=o;var f=bu(t.m,t.i,t.l,e,n,null,r,t.v,l,t.u,i,t.o);return t.la().then((function(){var e=t.h;return t.A.a.set(cc,a.w(),e)})).then((function(){var e=Pr("cordova.plugins.browsertab.isAvailable",s);if("function"!=typeof e)throw new k("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=Pr("cordova.plugins.browsertab.openUrl",s)))throw new k("invalid-cordova-configuration");n(f)}else{if("function"!=typeof(n=Pr("cordova.InAppBrowser.open",s)))throw new k("invalid-cordova-configuration");e=Or(),t.a=n(f,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,t,e,n,r)})).then((function(){return new Ie((function(t,e){u=function(){var e=Pr("cordova.plugins.browsertab.close",s);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ea(u),c=function(){a||(a=Nn(2e3).then((function(){e(new k("redirect-cancelled-by-user"))})))},l=function(){Kr()&&c()},o.addEventListener("resume",c,!1),Or().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",l,!1)})).s((function(t){return kc(i).then((function(){throw t}))}))})).na((function(){c&&o.removeEventListener("resume",c,!1),l&&o.removeEventListener("visibilitychange",l,!1),a&&a.cancel(),u&&i.Ra(u),i.c=null}))},t.Ea=function(t){this.b.push(t),Tc(this).s((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new qo("unknown",null,null,null,new k("no-auth-event")),t(e))}))},t.Ra=function(t){X(this.b,(function(e){return e==t}))};var Nc={name:"pendingRedirect",D:"session"};function Cc(t){return oc(t.b,Nc,t.a)}function xc(t,e,n,r){this.i={},this.u=0,this.O=t,this.m=e,this.v=n,this.G=r,this.h=[],this.f=!1,this.l=E(this.o,this),this.b=new Kc,this.A=new Xc,this.g=new Sc(qc(this.m,this.v)),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.A,this.c.linkViaPopup=this.A,this.c.reauthViaPopup=this.A,this.a=Oc(this.O,this.m,this.v,N,this.G)}function Oc(t,e,n,r,i){var o=lt.SDK_VERSION||null;return Er()?new Ic(t,e,n,o,r,i):new vu(t,e,n,o,r,i)}function Pc(t){t.f||(t.f=!0,t.a.Ea(t.l));var e=t.a;return t.a.la().s((function(n){throw t.a==e&&t.reset(),n}))}function Dc(t){t.a.Wb()&&Pc(t).s((function(e){var n=new qo("unknown",null,null,null,new k("operation-not-supported-in-this-environment"));Fc(e)&&t.o(n)})),t.a.Sb()||Hc(t.b)}function Lc(t,e){Y(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(Nc,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Cc(t.g).then((function(){Pc(t).s((function(e){var n=new qo("unknown",null,null,null,new k("operation-not-supported-in-this-environment"));Fc(e)&&t.o(n)}))})):Dc(t)})).s((function(){Dc(t)}))}function Rc(t,e){X(t.h,(function(t){return t==e}))}xc.prototype.reset=function(){this.f=!1,this.a.Ra(this.l),this.a=Oc(this.O,this.m,this.v,null,this.G),this.i={}},xc.prototype.o=function(t){if(!t)throw new k("invalid-auth-event");if(6e5<=A()-this.u&&(this.i={},this.u=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Eb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,r),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.u=A())),e=!0;break}}return Hc(this.b),e};var Mc=new Gr(2e3,1e4),Vc=new Gr(3e4,6e4);function jc(t,e,n,r,i,o,a){return t.a.Lb(e,n,r,(function(){t.f||(t.f=!0,t.a.Ea(t.l))}),(function(){t.reset()}),i,o,a)}function Fc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Uc(t,e,n,r,i){var o;return function(t){return t.b.set(Nc,"pending",t.a)}(t.g).then((function(){return t.a.Mb(e,n,r,i).s((function(e){if(Fc(e))throw new k("operation-not-supported-in-this-environment");return o=e,Cc(t.g).then((function(){throw o}))})).then((function(){return t.a.Zb()?new Ie((function(){})):Cc(t.g).then((function(){return t.qa()})).then((function(){})).s((function(){}))}))}))}function Bc(t,e,n,r,i){return t.a.Nb(r,(function(t){e.ma(n,null,t,i)}),Mc.get())}xc.prototype.qa=function(){return this.b.qa()};var zc={};function qc(t,e,n){return t=t+":"+e,n&&(t=t+":"+n.url),t}function Gc(t,e,n,r){var i=qc(e,n,r);return zc[i]||(zc[i]=new xc(t,e,n,r)),zc[i]}function Kc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Hc(t){t.g||(t.g=!0,Qc(t,!1,null,null))}function Wc(t){t.g&&!t.i&&Qc(t,!1,null,null)}function Yc(t,e){if(t.b=function(){return Ce(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Qc(t,e,n,r){e?r?function(t,e){if(t.b=function(){return xe(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):Yc(t,n):Yc(t,{user:null}),t.f=[],t.c=[]}function Xc(){}function $c(){this.hb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.hb},set:function(t){this.hb=t},enumerable:!1})}function Jc(t,e){this.a=e,Zr(this,"verificationId",t)}function Zc(t,e,n,r){return new Fo(t).eb(e,n).then((function(t){return new Jc(t,r)}))}function tl(t){var e=Wi(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new k("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");ti(this,{token:t,expirationTime:Wr(1e3*e.exp),authTime:Wr(1e3*e.auth_time),issuedAtTime:Wr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function el(t,e,n){var r=e&&e[rl];if(!r)throw new k("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=mt(e),this.g=n,this.c=new uo(null,r),this.b=[];var i=this;G(e[nl]||[],(function(t){(t=ii(t))&&i.b.push(t)})),Zr(this,"auth",this.a),Zr(this,"session",this.c),Zr(this,"hints",this.b)}Kc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Kc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,r=t.b,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?t.a?(Qc(this,!0,null,t.a),Ce()):e.Fa(n,r)?function(t,e,n){n=n.Fa(e.c,e.b);var r=e.g,i=e.f,o=e.i,a=e.S(),s=!!e.c.match(/Redirect$/);n(r,i,a,o).then((function(e){Qc(t,s,e,null)})).s((function(e){Qc(t,s,null,e)}))}(this,t,e):xe(new k("invalid-auth-event")):(Qc(this,!1,null,null),Ce())}else xe(new k("invalid-auth-event"))},Kc.prototype.qa=function(){var t=this;return new Ie((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new k("timeout");t.a&&t.a.cancel(),t.a=Nn(Vc.get()).then((function(){t.b||(t.g=!0,Qc(t,!0,null,e))}))}(t))}))},Xc.prototype.h=function(t,e){if(t){var n=t.c,r=t.b;t.a?(e.ma(t.c,null,t.a,t.b),Ce()):e.Fa(n,r)?function(t,e){var n=t.b,r=t.c;e.Fa(r,n)(t.g,t.f,t.S(),t.i).then((function(t){e.ma(r,t,null,n)})).s((function(t){e.ma(r,null,t,n)}))}(t,e):xe(new k("invalid-auth-event"))}else xe(new k("invalid-auth-event"))},Jc.prototype.confirm=function(t){return t=Uo(this.verificationId,t),this.a(t)};var nl="mfaInfo",rl="mfaPendingCredential";function il(t,e,n,r){k.call(this,"multi-factor-auth-required",r,e),this.b=new el(t,e,n),Zr(this,"resolver",this.b)}function ol(t,e,n){if(t&&v(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new il(e,t.serverResponse,n,t.message)}catch(t){}return null}function al(){}function sl(t){Zr(this,"factorId",t.fa),this.a=t}function ul(t){if(sl.call(this,t),this.a.fa!=Fo.PROVIDER_ID)throw new k("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function cl(t,e){for(var n in Je.call(this,t),e)this[n]=e[n]}function ll(t,e){this.a=t,this.b=[],this.c=E(this.xc,this),fn(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&G(e.multiFactor.enrolledFactors,(function(t){var e=null,r={};if(t){t.uid&&(r[si]=t.uid),t.displayName&&(r[oi]=t.displayName),t.enrollmentTime&&(r[ai]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(r[ui]=t.phoneNumber);try{e=new ci(r)}catch(t){}t=e}else t=null;t&&n.push(t)})),fl(this,n)}function fl(t,e){t.b=e,Zr(t,"enrolledFactors",e)}function hl(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function pl(t,e){t.stop(),t.b=Nn(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(t,e)).then((function(){return function(){var t=s.document,e=null;return Kr()||!t?Ce():new Ie((function(n){e=function(){Kr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).s((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return t.h()})).then((function(){pl(t,!0)})).s((function(e){t.i(e)&&pl(t,!1)}))}function dl(t){this.c=t,this.b=this.a=null}function vl(t){return t.b&&1e3*t.b.c||0}function ml(t,e){var n=e.refreshToken;t.b=Hi(e[ts]||""),t.a=n}function yl(t,e){this.a=t||null,this.b=e||null,ti(this,{lastSignInTime:Wr(e||null),creationTime:Wr(t||null)})}function gl(t,e,n,r,i,o){ti(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}function bl(t,e,n){this.G=[],this.l=t.apiKey,this.m=t.appName,this.o=t.authDomain||null;var r=lt.SDK_VERSION?xr(lt.SDK_VERSION):null;this.a=new Ja(this.l,P(N),r),t.emulatorConfig&&as(this.a,t.emulatorConfig),this.b=new dl(this.a),Sl(this,e[ts]),ml(this.b,e),Zr(this,"refreshToken",this.b.a),xl(this,n||{}),An.call(this),this.P=!1,this.o&&Lr()&&(this.i=Gc(this.o,this.l,this.m)),this.R=[],this.f=null,this.u=function(t){return new hl((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=vl(t.b)-A()-3e5;return 0<e?e:0}))}(this),this.$=E(this.gb,this);var i=this;this.pa=null,this.Ba=function(t){i.wa(t.h)},this.ba=null,this.za=function(t){as(i.a,t.c)},this.W=null,this.X=[],this.Aa=function(t){Il(i,t.f)},this.aa=null,this.N=new ll(this,n),Zr(this,"multiFactor",this.N)}function wl(t,e){t.ba&&dn(t.ba,"languageCodeChanged",t.Ba),(t.ba=e)&&fn(e,"languageCodeChanged",t.Ba)}function El(t,e){t.W&&dn(t.W,"emulatorConfigChanged",t.za),(t.W=e)&&fn(e,"emulatorConfigChanged",t.za)}function Il(t,e){t.X=e,us(t.a,lt.SDK_VERSION?xr(lt.SDK_VERSION,t.X):null)}function Al(t,e){t.aa&&dn(t.aa,"frameworkChanged",t.Aa),(t.aa=e)&&fn(e,"frameworkChanged",t.Aa)}function _l(t){try{return lt.app(t.m).auth()}catch(e){throw new k("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function Tl(t){t.A||t.u.b||(t.u.start(),dn(t,"tokenChanged",t.$),fn(t,"tokenChanged",t.$))}function kl(t){dn(t,"tokenChanged",t.$),t.u.stop()}function Sl(t,e){t.ya=e,Zr(t,"_lat",e)}function Nl(t){for(var e=[],n=0;n<t.R.length;n++)e.push(t.R[n](t));return Pe(e).then((function(){return t}))}function Cl(t){t.i&&!t.P&&(t.P=!0,Lc(t.i,t))}function xl(t,e){ti(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new yl(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Ol(){}function Pl(t){return Ce().then((function(){if(t.A)throw new k("app-deleted")}))}function Dl(t){return H(t.providerData,(function(t){return t.providerId}))}function Ll(t,e){e&&(Rl(t,e.providerId),t.providerData.push(e))}function Rl(t,e){X(t.providerData,(function(t){return t.providerId==e}))}function Ml(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Zr(t,e,n)}function Vl(t,e){t!=e&&(ti(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Zr(t,"metadata",function(t){return new yl(t.a,t.b)}(e.metadata)):Zr(t,"metadata",new yl),G(e.providerData,(function(e){Ll(t,e)})),function(t,e){t.b=e.b,t.a=e.a}(t.b,e.b),Zr(t,"refreshToken",t.b.a),fl(t.N,e.N.b))}function jl(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return iu(t.a,Rs,{idToken:e}).then(E(t.Jc,t))}(t,e).then((function(){return n||Ml(t,"isAnonymous",!1),e}))}))}function Fl(t,e){e[ts]&&t.ya!=e[ts]&&(ml(t.b,e),t.dispatchEvent(new cl("tokenChanged")),Sl(t,e[ts]),Ml(t,"refreshToken",t.b.a))}function Ul(t,e){return jl(t).then((function(){if(Y(Dl(t),e))return Nl(t).then((function(){throw new k("provider-already-linked")}))}))}function Bl(t,e,n){return ei({user:t,credential:Bo(e),additionalUserInfo:e=Ji(e),operationType:n})}function zl(t,e){return Fl(t,e),t.reload().then((function(){return t}))}function ql(t,e,n,r,i){if(!Lr())return xe(new k("operation-not-supported-in-this-environment"));if(t.f&&!i)return xe(t.f);var o=$i(n.providerId),a=Br(t.uid+":::"),s=null;(!Vr()||Ir())&&t.o&&n.isOAuthProvider&&(s=bu(t.o,t.l,t.m,e,n,null,a,lt.SDK_VERSION||null,null,null,t.tenantId));var u=yr(s,o&&o.ua,o&&o.ta);return r=r().then((function(){if(Kl(t),!i)return t.I().then((function(){}))})).then((function(){return jc(t.i,u,e,n,a,!!s,t.tenantId)})).then((function(){return new Ie((function(n,r){t.ma(e,null,new k("cancelled-popup-request"),t.h||null),t.g=n,t.O=r,t.h=a,t.c=Bc(t.i,t,e,u,a)}))})).then((function(t){return u&&mr(u),t?ei(t):null})).s((function(t){throw u&&mr(u),t})),Hl(t,r,i)}function Gl(t,e,n,r,i){if(!Lr())return xe(new k("operation-not-supported-in-this-environment"));if(t.f&&!i)return xe(t.f);var o=null,a=Br(t.uid+":::");return r=r().then((function(){if(Kl(t),!i)return t.I().then((function(){}))})).then((function(){return t.ga=a,Nl(t)})).then((function(e){return t.ha&&(e=(e=t.ha).b.set(Ql,t.w(),e.a)),e})).then((function(){return Uc(t.i,e,n,a,t.tenantId)})).s((function(e){if(o=e,t.ha)return Xl(t.ha);throw o})).then((function(){if(o)throw o})),Hl(t,r,i)}function Kl(t){if(!t.i||!t.P){if(t.i&&!t.P)throw new k("internal-error");throw new k("auth-domain-config-required")}}function Hl(t,e,n){var r=function(t,e,n){return t.f&&!n?(e.cancel(),xe(t.f)):e.s((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.f||t.dispatchEvent(new cl("userInvalidated")),t.f=e),e}))}(t,e,n);return t.G.push(r),r.na((function(){Q(t.G,r)})),r.s((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=ol(e.w(),_l(t),E(t.ic,t))),n||e}))}function Wl(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName,emulatorConfig:t.emulatorConfig},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[ts]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var r=new bl(e,n,t);return t.providerData&&G(t.providerData,(function(t){t&&Ll(r,ei(t))})),t.redirectEventId&&(r.ga=t.redirectEventId),r}function Yl(t){this.a=t,this.b=nc()}el.prototype.Qc=function(t){var e=this;return t.rb(this.a.a,this.c).then((function(t){var n=mt(e.f);return delete n[nl],delete n[rl],gt(n,t),e.g(n)}))},_(il,k),al.prototype.rb=function(t,e,n){return e.type==co?function(t,e,n,r){return n.Ha().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),gt(n,{phoneVerificationInfo:jo(t.a)}),iu(e,Ds,n)}))}(this,t,e,n):function(t,e,n){return n.Ha().then((function(n){return gt(n={mfaPendingCredential:n},{phoneVerificationInfo:jo(t.a)}),iu(e,Ls,n)}))}(this,t,e)},_(sl,al),_(ul,sl),_(cl,Je),(t=ll.prototype).xc=function(t){fl(this,function(t){var e=[];return G(t.mfaInfo||[],(function(t){(t=ii(t))&&e.push(t)})),e}(t.gd))},t.Qb=function(){return this.a.I().then((function(t){return new uo(t,null)}))},t.ec=function(t,e){var n=this,r=this.a.a;return this.Qb().then((function(n){return t.rb(r,n,e)})).then((function(t){return Fl(n.a,t),n.a.reload()}))},t.ad=function(t){var e=this,n="string"==typeof t?t:t.uid,r=this.a.a;return this.a.I().then((function(t){return iu(r,ru,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var r=K(e.b,(function(t){return t.uid!=n}));return fl(e,r),Fl(e.a,t),e.a.reload().s((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},t.w=function(){return{multiFactor:{enrolledFactors:H(this.b,(function(t){return t.w()}))}}},hl.prototype.start=function(){this.a=this.c,pl(this,!0)},hl.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},dl.prototype.w=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:vl(this)}},dl.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?xe(new k("user-token-expired")):t||!this.b||A()>vl(this)-3e4?this.a?function(t,e){return function(t,e){return new Ie((function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?cs(t,t.l+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?r(au(t)):t.access_token&&t.refresh_token?n(t):r(new k("internal-error")):r(new k("network-request-failed"))}),"POST",Zn(e).toString(),t.g,t.v.get()):r(new k("internal-error"))}))}(t.c,e).then((function(e){return t.b=Hi(e.access_token),t.a=e.refresh_token,{accessToken:t.b.toString(),refreshToken:t.a}})).s((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):Ce(null):Ce({accessToken:this.b.toString(),refreshToken:this.a})},yl.prototype.w=function(){return{lastLoginAt:this.b,createdAt:this.a}},_(bl,An),bl.prototype.wa=function(t){this.pa=t,os(this.a,t)},bl.prototype.ka=function(){return this.pa},bl.prototype.Ga=function(){return J(this.X)},bl.prototype.gb=function(){this.u.b&&(this.u.stop(),this.u.start())},Zr(bl.prototype,"providerId","firebase"),(t=bl.prototype).reload=function(){var t=this;return Hl(this,Pl(this).then((function(){return jl(t).then((function(){return Nl(t)})).then(Ol)})))},t.nc=function(t){return this.I(t).then((function(t){return new tl(t)}))},t.I=function(t){var e=this;return Hl(this,Pl(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new k("internal-error");return t.accessToken!=e.ya&&(Sl(e,t.accessToken),e.dispatchEvent(new cl("tokenChanged"))),Ml(e,"refreshToken",t.refreshToken),t.accessToken})))},t.Jc=function(t){if(!(t=t.users)||!t.length)throw new k("internal-error");xl(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?H(t,(function(t){return new gl(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Ll(this,e[n]);Ml(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new cl("userReloaded",{gd:t}))},t.Kc=function(t){return $r("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.sb(t)},t.sb=function(t){var e=this,n=null;return Hl(this,t.c(this.a,this.uid).then((function(t){return Fl(e,t),n=Bl(e,t,"reauthenticate"),e.f=null,e.reload()})).then((function(){return n})),!0)},t.Bc=function(t){return $r("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.pb(t)},t.pb=function(t){var e=this,n=null;return Hl(this,Ul(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=Bl(e,t,"link"),zl(e,t)})).then((function(){return n})))},t.Cc=function(t,e){var n=this;return Hl(this,Ul(this,"phone").then((function(){return Zc(_l(n),t,e,E(n.pb,n))})))},t.Lc=function(t,e){var n=this;return Hl(this,Ce().then((function(){return Zc(_l(n),t,e,E(n.sb,n))})),!0)},t.Ab=function(t){var e=this;return Hl(this,this.I().then((function(n){return e.a.Ab(n,t)})).then((function(t){return Fl(e,t),e.reload()})))},t.dd=function(t){var e=this;return Hl(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return Fl(e,t),e.reload()})))},t.Bb=function(t){var e=this;return Hl(this,this.I().then((function(n){return e.a.Bb(n,t)})).then((function(t){return Fl(e,t),e.reload()})))},t.Cb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Pl(this);var e=this;return Hl(this,this.I().then((function(n){return e.a.Cb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return Fl(e,t),Ml(e,"displayName",t.displayName||null),Ml(e,"photoURL",t.photoUrl||null),G(e.providerData,(function(t){"password"===t.providerId&&(Zr(t,"displayName",e.displayName),Zr(t,"photoURL",e.photoURL))})),Nl(e)})).then(Ol))},t.bd=function(t){var e=this;return Hl(this,jl(this).then((function(n){return Y(Dl(e),t)?function(t,e,n){return iu(t,xs,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return G(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),G(Dl(e),(function(t){n[t]||Rl(e,t)})),n[Fo.PROVIDER_ID]||Zr(e,"phoneNumber",null),Nl(e)})):Nl(e).then((function(){throw new k("no-such-provider")}))})))},t.delete=function(){var t=this;return Hl(this,this.I().then((function(e){return iu(t.a,Cs,{idToken:e})})).then((function(){t.dispatchEvent(new cl("userDeleted"))}))).then((function(){for(var e=0;e<t.G.length;e++)t.G[e].cancel("app-deleted");wl(t,null),El(t,null),Al(t,null),t.G=[],t.A=!0,kl(t),Zr(t,"refreshToken",null),t.i&&Rc(t.i,t)}))},t.Eb=function(t,e){return!!("linkViaPopup"==t&&(this.h||null)==e&&this.g||"reauthViaPopup"==t&&(this.h||null)==e&&this.g||"linkViaRedirect"==t&&(this.ga||null)==e||"reauthViaRedirect"==t&&(this.ga||null)==e)},t.ma=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.h||null)||(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"linkViaPopup"==t&&e==(this.h||null)?E(this.Jb,this):"reauthViaPopup"==t&&e==(this.h||null)?E(this.Kb,this):"linkViaRedirect"==t&&(this.ga||null)==e?E(this.Jb,this):"reauthViaRedirect"==t&&(this.ga||null)==e?E(this.Kb,this):null},t.Dc=function(t){var e=this;return ql(this,"linkViaPopup",t,(function(){return Ul(e,t.providerId).then((function(){return Nl(e)}))}),!1)},t.Mc=function(t){return ql(this,"reauthViaPopup",t,(function(){return Ce()}),!0)},t.Ec=function(t){var e=this;return Gl(this,"linkViaRedirect",t,(function(){return Ul(e,t.providerId)}),!1)},t.Nc=function(t){return Gl(this,"reauthViaRedirect",t,(function(){return Ce()}),!0)},t.Jb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Hl(this,this.I().then((function(n){return Is(i.a,{requestUri:t,postBody:r,sessionId:e,idToken:n})})).then((function(t){return o=Bl(i,t,"link"),zl(i,t)})).then((function(){return o})))},t.Kb=function(t,e,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Hl(this,Ce().then((function(){return ho(As(i.a,{requestUri:t,sessionId:e,postBody:r,tenantId:n}),i.uid)})).then((function(t){return o=Bl(i,t,"reauthenticate"),Fl(i,t),i.f=null,i.reload()})).then((function(){return o})),!0)},t.tb=function(t){var e=this,n=null;return Hl(this,this.I().then((function(e){return n=e,void 0===t||vt(t)?{}:qi(new Di(t))})).then((function(t){return e.a.tb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},t.Db=function(t,e){var n=this,r=null;return Hl(this,this.I().then((function(t){return r=t,void 0===e||vt(e)?{}:qi(new Di(e))})).then((function(e){return n.a.Db(r,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},t.ic=function(t){var e=null,n=this;return Hl(this,t=ho(Ce(t),n.uid).then((function(t){return e=Bl(n,t,"reauthenticate"),Fl(n,t),n.f=null,n.reload()})).then((function(){return e})),!0)},t.toJSON=function(){return this.w()},t.w=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};return this.metadata&&gt(t,this.metadata.w()),G(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),gt(t,this.N.w()),t};var Ql={name:"redirectUser",D:"session"};function Xl(t){return oc(t.b,Ql,t.a)}function $l(t){this.a=t,this.b=nc(),this.c=null,this.f=function(t){var e=tf("local"),n=tf("session"),r=tf("none");return function(t,e,n){var r=ic(e,n),i=rc(t,e.D);return t.get(e,n).then((function(o){var a=null;try{a=Ur(s.localStorage.getItem(r))}catch(t){}if(a&&!o)return s.localStorage.removeItem(r),t.set(e,a,n);a&&o&&"localStorage"!=i.type&&s.localStorage.removeItem(r)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(i){return i?n:t.b.get(r,t.a).then((function(n){return n?r:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(Zl,t.a).then((function(t){return t?tf(t):e}))}))}))})).then((function(e){return t.c=e,Jl(t,e.D)})).s((function(){t.c||(t.c=e)}))}(this),this.b.addListener(tf("local"),this.a,E(this.g,this))}function Jl(t,e){var n,r=[];for(n in tc)tc[n]!==e&&r.push(oc(t.b,tf(tc[n]),t.a));return r.push(oc(t.b,Zl,t.a)),function(t){return new Ie((function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},a=function(t){n(t)},s=0;s<t.length;s++)Oe(t[s],I(o,s),a);else e(i)}))}(r)}$l.prototype.g=function(){var t=this,e=tf("local");of(this,(function(){return Ce().then((function(){return t.c&&"local"!=t.c.D?t.b.get(e,t.a):null})).then((function(n){if(n)return Jl(t,"local").then((function(){t.c=e}))}))}))};var Zl={name:"persistence",D:"session"};function tf(t){return{name:"authUser",D:t}}function ef(t,e){return of(t,(function(){return t.b.set(t.c,e.w(),t.a)}))}function nf(t){return of(t,(function(){return oc(t.b,t.c,t.a)}))}function rf(t,e,n){return of(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),t&&n&&(t.emulatorConfig=n),Wl(t||{})}))}))}function of(t,e){return t.f=t.f.then(e,e),t.f}function af(t){if(this.m=!1,Zr(this,"settings",new $c),Zr(this,"app",t),!df(this).options||!df(this).options.apiKey)throw new k("invalid-api-key");t=lt.SDK_VERSION?xr(lt.SDK_VERSION):null,this.a=new Ja(df(this).options&&df(this).options.apiKey,P(N),t),this.R=[],this.u=[],this.P=[],this.ac=lt.INTERNAL.createSubscribe(E(this.yc,this)),this.X=void 0,this.bc=lt.INTERNAL.createSubscribe(E(this.zc,this)),hf(this,null),this.l=new $l(df(this).options.apiKey+":"+df(this).name),this.G=new Yl(df(this).options.apiKey+":"+df(this).name),this.$=gf(this,function(t){var e=df(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(Ql,t.a).then((function(t){return t&&e&&(t.authDomain=e),Wl(t||{})}))}(t.G,df(t).options.authDomain).then((function(e){return(t.o=e)&&(e.ha=t.G),Xl(t.G)}));return gf(t,e)}(t).then((function(){return rf(t.l,e,t.f)})).then((function(e){return e?(e.ha=t.G,t.o&&(t.o.ga||null)==(e.ga||null)?e:e.reload().then((function(){return ef(t.l,e).then((function(){return e}))})).s((function(n){return"auth/network-request-failed"==n.code?e:nf(t.l)}))):null})).then((function(e){hf(t,e||null)}));return gf(t,n)}(this)),this.i=gf(this,function(t){return t.$.then((function(){return ff(t)})).s((function(){})).then((function(){if(!t.m)return t.pa()})).s((function(){})).then((function(){if(!t.m){t.ba=!0;var e=t.l;e.b.addListener(tf("local"),e.a,t.pa)}}))}(this)),this.ba=!1,this.pa=E(this.Yc,this),this.Ba=E(this.da,this),this.ya=E(this.kc,this),this.za=E(this.vc,this),this.Aa=E(this.wc,this),this.b=null,function(t){var e=df(t).options.authDomain,n=df(t).options.apiKey;e&&Lr()&&(t.gb=t.$.then((function(){if(!t.m){if(t.b=Gc(e,n,df(t).name,t.f),Lc(t.b,t),vf(t)&&Cl(vf(t)),t.o){Cl(t.o);var r=t.o;r.wa(t.ka()),wl(r,t),Il(r=t.o,t.N),Al(r,t),as((r=t.o).a,t.f),El(r,t),t.o=null}return t.b}})))}(this),this.INTERNAL={},this.INTERNAL.delete=E(this.delete,this),this.INTERNAL.logFramework=E(this.Fc,this),this.A=0,An.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ka()},set:function(t){this.wa(t)},enumerable:!1}),t.aa=null,Object.defineProperty(t,"ti",{get:function(){return this.S()},set:function(t){this.xb(t)},enumerable:!1}),t.W=null}(this),this.N=[],this.f=null}function sf(t){Je.call(this,"languageCodeChanged"),this.h=t}function uf(t){Je.call(this,"emulatorConfigChanged"),this.c=t}function cf(t){Je.call(this,"frameworkChanged"),this.f=t}function lf(t){return t.gb||xe(new k("auth-domain-config-required"))}function ff(t){if(!Lr())return xe(new k("operation-not-supported-in-this-environment"));var e=lf(t).then((function(){return t.b.qa()})).then((function(t){return t?ei(t):null}));return gf(t,e)}function hf(t,e){vf(t)&&(function(t,e){X(t.R,(function(t){return t==e}))}(vf(t),t.Ba),dn(vf(t),"tokenChanged",t.ya),dn(vf(t),"userDeleted",t.za),dn(vf(t),"userInvalidated",t.Aa),kl(vf(t))),e&&(e.R.push(t.Ba),fn(e,"tokenChanged",t.ya),fn(e,"userDeleted",t.za),fn(e,"userInvalidated",t.Aa),0<t.A&&Tl(e)),Zr(t,"currentUser",e),e&&(e.wa(t.ka()),wl(e,t),Il(e,t.N),Al(e,t),as(e.a,t.f),El(e,t))}function pf(t,e){var n=null,r=null;return gf(t,e.then((function(e){return n=Bo(e),r=Ji(e),function(t,e){var n={};return n.apiKey=df(t).options.apiKey,n.authDomain=df(t).options.authDomain,n.appName=df(t).name,t.f&&(n.emulatorConfig=t.f),t.$.then((function(){return function(t,e,n,r){var i=new bl(t,e);return n&&(i.ha=n),r&&Il(i,r),i.reload().then((function(){return i}))}(n,e,t.G,t.Ga())})).then((function(e){return vf(t)&&e.uid==vf(t).uid?(Vl(vf(t),e),t.da(e)):(hf(t,e),Cl(e),t.da(e))})).then((function(){yf(t)}))}(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=ol(e.w(),t,E(t.jc,t))),n||e})).then((function(){return ei({user:vf(t),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function df(t){return t.app}function vf(t){return t.currentUser}function mf(t){return vf(t)&&vf(t)._lat||null}function yf(t){if(t.ba){for(var e=0;e<t.u.length;e++)t.u[e]&&t.u[e](mf(t));if(t.X!==t.getUid()&&t.P.length)for(t.X=t.getUid(),e=0;e<t.P.length;e++)t.P[e]&&t.P[e](mf(t))}}function gf(t,e){return t.R.push(e),e.na((function(){Q(t.R,e)})),e}function bf(){}function wf(){this.a={},this.b=1e12}$l.prototype.wb=function(t){var e=null,n=this;return function(t){var e=new k("invalid-persistence-type"),n=new k("unsupported-persistence-type");t:{for(r in tc)if(tc[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(_r()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;case"Worker":if("session"===t||!Du()&&"none"!==t)throw n;break;default:if(!Dr()&&"none"!==t)throw n}}(t),of(this,(function(){return t!=n.c.D?n.b.get(n.c,n.a).then((function(r){return e=r,Jl(n,t)})).then((function(){if(n.c=tf(t),e)return n.b.set(n.c,e,n.a)})):Ce()}))},_(af,An),_(sf,Je),_(uf,Je),_(cf,Je),(t=af.prototype).wb=function(t){return gf(this,t=this.l.wb(t))},t.wa=function(t){this.aa===t||this.m||(this.aa=t,os(this.a,this.aa),this.dispatchEvent(new sf(this.ka())))},t.ka=function(){return this.aa},t.ed=function(){var t=s.navigator;this.wa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.fd=function(t){if(!this.f){if(!/^https?:\/\//.test(t))throw new k("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");Hr("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),s.document&&wr().then((function(){var t=s.document.createElement("div");t.innerText="Running in emulator mode. Do not use with production credentials.",t.style.position="fixed",t.style.width="100%",t.style.backgroundColor="#ffffff",t.style.border=".1em solid #000000",t.style.color="#ff0000",t.style.bottom="0px",t.style.left="0px",t.style.margin="0px",t.style.zIndex=1e4,t.style.textAlign="center",t.classList.add("firebase-emulator-warning"),s.document.body.appendChild(t)})),this.f={url:t},this.settings.hb=!0,as(this.a,this.f),this.dispatchEvent(new uf(this.f))}},t.Fc=function(t){this.N.push(t),us(this.a,lt.SDK_VERSION?xr(lt.SDK_VERSION,this.N):null),this.dispatchEvent(new cf(this.N))},t.Ga=function(){return J(this.N)},t.xb=function(t){this.W===t||this.m||(this.W=t,this.a.b=this.W)},t.S=function(){return this.W},t.toJSON=function(){return{apiKey:df(this).options.apiKey,authDomain:df(this).options.authDomain,appName:df(this).name,currentUser:vf(this)&&vf(this).w()}},t.Eb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.h==e&&!!this.g;default:return!1}},t.ma=function(t,e,n,r){"signInViaPopup"==t&&this.h==r&&(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.h==e&&this.g?E(this.hc,this):null},t.hc=function(t,e,n,r){var i=this,o={requestUri:t,postBody:r,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.$.then((function(){return pf(i,Es(i.a,o))}))},t.Wc=function(t){if(!Lr())return xe(new k("operation-not-supported-in-this-environment"));var e=this,n=$i(t.providerId),r=Br(),i=null;(!Vr()||Ir())&&df(this).options.authDomain&&t.isOAuthProvider&&(i=bu(df(this).options.authDomain,df(this).options.apiKey,df(this).name,"signInViaPopup",t,null,r,lt.SDK_VERSION||null,null,null,this.S(),this.f));var o=yr(i,n&&n.ua,n&&n.ta);return gf(this,n=lf(this).then((function(n){return jc(n,o,"signInViaPopup",t,r,!!i,e.S())})).then((function(){return new Ie((function(t,n){e.ma("signInViaPopup",null,new k("cancelled-popup-request"),e.h),e.g=t,e.O=n,e.h=r,e.c=Bc(e.b,e,"signInViaPopup",o,r)}))})).then((function(t){return o&&mr(o),t?ei(t):null})).s((function(t){throw o&&mr(o),t})))},t.Xc=function(t){if(!Lr())return xe(new k("operation-not-supported-in-this-environment"));var e=this;return gf(this,lf(this).then((function(){return function(t){return of(t,(function(){return t.b.set(Zl,t.c.D,t.a)}))}(e.l)})).then((function(){return Uc(e.b,"signInViaRedirect",t,void 0,e.S())})))},t.qa=function(){var t=this;return ff(this).then((function(e){return t.b&&Wc(t.b.b),e})).s((function(e){throw t.b&&Wc(t.b.b),e}))},t.cd=function(t){if(!t)return xe(new k("null-user"));if(this.W!=t.tenantId)return xe(new k("tenant-id-mismatch"));var e=this,n={};n.apiKey=df(this).options.apiKey,n.authDomain=df(this).options.authDomain,n.appName=df(this).name;var r=function(t,e,n,r){var i=t.b,o={};return o[ts]=i.b&&i.b.toString(),o.refreshToken=i.a,e=new bl(e||{apiKey:t.l,authDomain:t.o,appName:t.m},o),n&&(e.ha=n),r&&Il(e,r),Vl(e,t),e}(t,n,e.G,e.Ga());return gf(this,this.i.then((function(){if(df(e).options.apiKey!=t.l)return r.reload()})).then((function(){return vf(e)&&t.uid==vf(e).uid?(Vl(vf(e),t),e.da(t)):(hf(e,r),Cl(r),e.da(r))})).then((function(){yf(e)})))},t.zb=function(){var t=this;return gf(this,this.i.then((function(){return t.b&&Wc(t.b.b),vf(t)?(hf(t,null),nf(t.l).then((function(){yf(t)}))):Ce()})))},t.Yc=function(){var t=this;return rf(this.l,df(this).options.authDomain).then((function(e){if(!t.m){var n;if(n=vf(t)&&e){n=vf(t).uid;var r=e.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Vl(vf(t),e),vf(t).I();(vf(t)||e)&&(hf(t,e),e&&(Cl(e),e.ha=t.G),t.b&&Lc(t.b,t),yf(t))}}))},t.da=function(t){return ef(this.l,t)},t.kc=function(){yf(this),this.da(vf(this))},t.vc=function(){this.zb()},t.wc=function(){this.zb()},t.jc=function(t){var e=this;return this.i.then((function(){return pf(e,Ce(t))}))},t.yc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(vf(e))}))},t.zc=function(t){var e=this;!function(t,e){t.P.push(e),gf(t,t.i.then((function(){!t.m&&Y(t.P,e)&&t.X!==t.getUid()&&(t.X=t.getUid(),e(mf(t)))})))}(this,(function(){t.next(vf(e))}))},t.Hc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){"function"==typeof t?t(vf(r)):"function"==typeof t.next&&t.next(vf(r))})),this.ac(t,e,n)},t.Gc=function(t,e,n){var r=this;return this.ba&&Promise.resolve().then((function(){r.X=r.getUid(),"function"==typeof t?t(vf(r)):"function"==typeof t.next&&t.next(vf(r))})),this.bc(t,e,n)},t.mc=function(t){var e=this;return gf(this,this.i.then((function(){return vf(e)?vf(e).I(t).then((function(t){return{accessToken:t}})):null})))},t.Sc=function(t){var e=this;return this.i.then((function(){return pf(e,iu(e.a,Js,{token:t}))})).then((function(t){var n=t.user;return Ml(n,"isAnonymous",!1),e.da(n),t}))},t.Tc=function(t,e){var n=this;return this.i.then((function(){return pf(n,iu(n.a,Zs,{email:t,password:e}))}))},t.dc=function(t,e){var n=this;return this.i.then((function(){return pf(n,iu(n.a,Ss,{email:t,password:e}))}))},t.Za=function(t){var e=this;return this.i.then((function(){return pf(e,t.ja(e.a))}))},t.Rc=function(t){return $r("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Za(t)},t.yb=function(){var t=this;return this.i.then((function(){var e=vf(t);if(e&&e.isAnonymous){var n=ei({providerId:null,isNewUser:!1});return ei({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return pf(t,t.a.yb()).then((function(e){var n=e.user;return Ml(n,"isAnonymous",!0),t.da(n),e}))}))},t.getUid=function(){return vf(this)&&vf(this).uid||null},t.cc=function(t){this.addAuthTokenListener(t),this.A++,0<this.A&&vf(this)&&Tl(vf(this))},t.Oc=function(t){var e=this;G(this.u,(function(n){n==t&&e.A--})),0>this.A&&(this.A=0),0==this.A&&vf(this)&&kl(vf(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.u.push(t),gf(this,this.i.then((function(){e.m||Y(e.u,t)&&t(mf(e))})))},t.removeAuthTokenListener=function(t){X(this.u,(function(e){return e==t}))},t.delete=function(){this.m=!0;for(var t=0;t<this.R.length;t++)this.R[t].cancel("app-deleted");return this.R=[],this.l&&(t=this.l).b.removeListener(tf("local"),t.a,this.pa),this.b&&(Rc(this.b,this),Wc(this.b.b)),Promise.resolve()},t.gc=function(t){return gf(this,function(t,e){return iu(t,Ns,{identifier:e,continueUri:Rr()?hr():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.a,t))},t.Ac=function(t){return!!Ro(t)},t.vb=function(t,e){var n=this;return gf(this,Ce().then((function(){var t=new Di(e);if(!t.c)throw new k("argument-error",Mi+" must be true when sending sign in link to email");return qi(t)})).then((function(e){return n.a.vb(t,e)})).then((function(){})))},t.hd=function(t){return this.Qa(t).then((function(t){return t.data.email}))},t.mb=function(t,e){return gf(this,this.a.mb(t,e).then((function(){})))},t.Qa=function(t){return gf(this,this.a.Qa(t).then((function(t){return new li(t)})))},t.ib=function(t){return gf(this,this.a.ib(t).then((function(){})))},t.ub=function(t,e){var n=this;return gf(this,Ce().then((function(){return void 0===e||vt(e)?{}:qi(new Di(e))})).then((function(e){return n.a.ub(t,e)})).then((function(){})))},t.Vc=function(t,e){return gf(this,Zc(this,t,e,E(this.Za,this)))},t.Uc=function(t,e){var n=this;return gf(this,Ce().then((function(){var r=e||hr(),i=Lo(t,r);if(!(r=Ro(r)))throw new k("argument-error","Invalid email link!");if(r.tenantId!==n.S())throw new k("tenant-id-mismatch");return n.Za(i)})))},bf.prototype.render=function(){},bf.prototype.reset=function(){},bf.prototype.getResponse=function(){},bf.prototype.execute=function(){};var Ef=null;function If(t,e){return(e=Af(e))&&t.a[e]||null}function Af(t){return(t=void 0===t?1e12:t)?t.toString():null}function _f(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=le(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():fn(this.f,"click",this.i)}function Tf(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function kf(){}function Sf(){}wf.prototype.render=function(t,e){return this.a[this.b.toString()]=new _f(t,e),this.b++},wf.prototype.reset=function(t){var e=If(this,t);t=Af(t),e&&t&&(e.delete(),delete this.a[t])},wf.prototype.getResponse=function(t){return(t=If(this,t))?t.getResponse():null},wf.prototype.execute=function(t){(t=If(this,t))&&t.execute()},_f.prototype.getResponse=function(){return Tf(this),this.b},_f.prototype.execute=function(){Tf(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},_f.prototype.delete=function(){Tf(this),this.g=!0,clearTimeout(this.a),this.a=null,dn(this.f,"click",this.i)},Zr(kf,"FACTOR_ID","phone"),Sf.prototype.g=function(){return Ef||(Ef=new wf),Ce(Ef)},Sf.prototype.c=function(){};var Nf=null;function Cf(){this.b=s.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var xf=new wt(_t,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Of=new Gr(3e4,6e4);Cf.prototype.g=function(t){var e=this;return new Ie((function(n,r){var i=setTimeout((function(){r(new k("network-request-failed"))}),Of.get());!s.grecaptcha||t!==e.f&&!e.b?(s[e.a]=function(){if(s.grecaptcha){e.f=t;var o=s.grecaptcha.render;s.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(i),n(s.grecaptcha)}else clearTimeout(i),r(new k("internal-error"));delete s[e.a]},Ce(Ka(Nt(xf,{onload:e.a,hl:t||""}))).s((function(){clearTimeout(i),r(new k("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(s.grecaptcha))}))},Cf.prototype.c=function(){this.b--};var Pf=null;function Df(t,e,n,r,i,o,a){if(Zr(this,"type","recaptcha"),this.c=this.f=null,this.A=!1,this.m=e,this.g=null,a?(Nf||(Nf=new Sf),a=Nf):(Pf||(Pf=new Cf),a=Pf),this.v=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Mf])throw new k("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Vf],!s.document)throw new k("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!le(e)||!this.i&&le(e).hasChildNodes())throw new k("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new Ja(t,o||null,i||null),this.u=r||function(){return null};var u=this;this.l=[];var c=this.a[Lf];this.a[Lf]=function(t){if(jf(u,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=Pr(c,s);"function"==typeof e&&e(t)}};var l=this.a[Rf];this.a[Rf]=function(){if(jf(u,null),"function"==typeof l)l();else if("string"==typeof l){var t=Pr(l,s);"function"==typeof t&&t()}}}var Lf="callback",Rf="expired-callback",Mf="sitekey",Vf="size";function jf(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function Ff(t,e){return t.h.push(e),e.na((function(){Q(t.h,e)})),e}function Uf(t){if(t.A)throw new k("internal-error","RecaptchaVerifier instance has been destroyed.")}function Bf(t,e,n){var r=!1;try{this.b=n||lt.app()}catch(t){throw new k("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new k("invalid-api-key");n=this.b.options.apiKey;var i=this,o=null;try{o=this.b.auth().Ga()}catch(t){}try{r=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}o=lt.SDK_VERSION?xr(lt.SDK_VERSION,o):null,Df.call(this,n,t,e,(function(){try{var t=i.b.auth().ka()}catch(e){t=null}return t}),o,P(N),r)}function zf(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new k("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].K(n[i])&&!o){if(e=e[i],0>i||i>=qf.length)throw new k("internal-error","Argument validator received an unsupported number of arguments.");n=qf[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.J+".";break t}r=null}}if(r)throw new k("argument-error",t+" failed: "+r)}(t=Df.prototype).Ia=function(){var t=this;return this.f?this.f:this.f=Ff(this,Ce().then((function(){if(Rr()&&!Ar())return wr();throw new k("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.v.g(t.u())})).then((function(e){return t.g=e,iu(t.o,Bs,{})})).then((function(e){t.a[Mf]=e.recaptchaSiteKey})).s((function(e){throw t.f=null,e})))},t.render=function(){Uf(this);var t=this;return Ff(this,this.Ia().then((function(){if(null===t.c){var e=t.m;if(!t.i){var n=le(e);e=function(t,e,n){var r=arguments,i=document,o=String(r[0]),a=r[1];if(!ce&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',Kt(a.name),'"'),a.type){o.push(' type="',Kt(a.type),'"');var s={};gt(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=me(i,o),a&&("string"==typeof a?o.className=a:Array.isArray(a)?o.className=a.join(" "):fe(o,a)),2<r.length&&ve(i,o,r),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},t.verify=function(){Uf(this);var t=this;return Ff(this,this.render().then((function(e){return new Ie((function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){X(t.l,(function(t){return t==e}))}(t,i),n(e))};t.l.push(i),t.i&&t.g.execute(t.c)}}))})))},t.reset=function(){Uf(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Uf(this),this.A=!0,this.v.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=le(this.m);for(var e;e=t.firstChild;)t.removeChild(e)}},_(Bf,Df);var qf="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Gf(t,e){return{name:t||"",J:"a valid string",optional:!!e,K:function(t){return"string"==typeof t}}}function Kf(t,e){return{name:t||"",J:"a boolean",optional:!!e,K:function(t){return"boolean"==typeof t}}}function Hf(t,e){return{name:t||"",J:"a valid object",optional:!!e,K:v}}function Wf(t,e){return{name:t||"",J:"a function",optional:!!e,K:function(t){return"function"==typeof t}}}function Yf(t,e){return{name:t||"",J:"null",optional:!!e,K:function(t){return null===t}}}function Qf(t){return{name:t?t+"Credential":"credential",J:t?"a valid "+t+" credential":"a valid credential",optional:!1,K:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ja||!n)}}}function Xf(t,e){return v(t)&&"string"==typeof t.type&&t.type===e&&"function"==typeof t.Ha}function $f(t){return v(t)&&"string"==typeof t.uid}function Jf(t,e,n,r){return{name:n||"",J:t.J+" or "+e.J,optional:!!r,K:function(n){return t.K(n)||e.K(n)}}}function Zf(t,e){for(var n in e){var r=e[n].name;t[r]=nh(r,t[n],e[n].j)}}function th(t,e){for(var n in e){var r=e[n].name;r!==n&&Object.defineProperty(t,r,{get:I((function(t){return this[t]}),n),set:I((function(t,e,n,r){zf(t,[n],[r],!0),this[e]=r}),r,n,e[n].jb),enumerable:!0})}}function eh(t,e,n,r){t[e]=nh(e,n,r)}function nh(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return zf(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}Zf(af.prototype,{ib:{name:"applyActionCode",j:[Gf("code")]},Qa:{name:"checkActionCode",j:[Gf("code")]},mb:{name:"confirmPasswordReset",j:[Gf("code"),Gf("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[Gf("email"),Gf("password")]},gc:{name:"fetchSignInMethodsForEmail",j:[Gf("email")]},qa:{name:"getRedirectResult",j:[]},Ac:{name:"isSignInWithEmailLink",j:[Gf("emailLink")]},Gc:{name:"onAuthStateChanged",j:[Jf(Hf(),Wf(),"nextOrObserver"),Wf("opt_error",!0),Wf("opt_completed",!0)]},Hc:{name:"onIdTokenChanged",j:[Jf(Hf(),Wf(),"nextOrObserver"),Wf("opt_error",!0),Wf("opt_completed",!0)]},ub:{name:"sendPasswordResetEmail",j:[Gf("email"),Jf(Hf("opt_actionCodeSettings",!0),Yf(null,!0),"opt_actionCodeSettings",!0)]},vb:{name:"sendSignInLinkToEmail",j:[Gf("email"),Hf("actionCodeSettings")]},wb:{name:"setPersistence",j:[Gf("persistence")]},Rc:{name:"signInAndRetrieveDataWithCredential",j:[Qf()]},yb:{name:"signInAnonymously",j:[]},Za:{name:"signInWithCredential",j:[Qf()]},Sc:{name:"signInWithCustomToken",j:[Gf("token")]},Tc:{name:"signInWithEmailAndPassword",j:[Gf("email"),Gf("password")]},Uc:{name:"signInWithEmailLink",j:[Gf("email"),Gf("emailLink",!0)]},Vc:{name:"signInWithPhoneNumber",j:[Gf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Wc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Xc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},cd:{name:"updateCurrentUser",j:[Jf({name:"user",J:"an instance of Firebase User",optional:!1,K:function(t){return!!(t&&t instanceof bl)}},Yf(),"user")]},zb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Gf(null,!0)]},ed:{name:"useDeviceLanguage",j:[]},fd:{name:"useEmulator",j:[Gf("url")]},hd:{name:"verifyPasswordResetCode",j:[Gf("code")]}}),th(af.prototype,{lc:{name:"languageCode",jb:Jf(Gf(),Yf(),"languageCode")},ti:{name:"tenantId",jb:Jf(Gf(),Yf(),"tenantId")}}),af.Persistence=tc,af.Persistence.LOCAL="local",af.Persistence.SESSION="session",af.Persistence.NONE="none",Zf(bl.prototype,{delete:{name:"delete",j:[]},nc:{name:"getIdTokenResult",j:[Kf("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Kf("opt_forceRefresh",!0)]},Bc:{name:"linkAndRetrieveDataWithCredential",j:[Qf()]},pb:{name:"linkWithCredential",j:[Qf()]},Cc:{name:"linkWithPhoneNumber",j:[Gf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Dc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ec:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Kc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Qf()]},sb:{name:"reauthenticateWithCredential",j:[Qf()]},Lc:{name:"reauthenticateWithPhoneNumber",j:[Gf("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Mc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Nc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},tb:{name:"sendEmailVerification",j:[Jf(Hf("opt_actionCodeSettings",!0),Yf(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Gf(null,!0)]},bd:{name:"unlink",j:[Gf("provider")]},Ab:{name:"updateEmail",j:[Gf("email")]},Bb:{name:"updatePassword",j:[Gf("password")]},dd:{name:"updatePhoneNumber",j:[Qf("phone")]},Cb:{name:"updateProfile",j:[Hf("profile")]},Db:{name:"verifyBeforeUpdateEmail",j:[Gf("email"),Jf(Hf("opt_actionCodeSettings",!0),Yf(null,!0),"opt_actionCodeSettings",!0)]}}),Zf(wf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zf(bf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zf(Ie.prototype,{na:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),th($c.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",jb:Kf("appVerificationDisabledForTesting")}}),Zf(Jc.prototype,{confirm:{name:"confirm",j:[Gf("verificationCode")]}}),eh(fo,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[bo,Po,Vo,mo],r=0;r<n.length;r++)if(e=n[r](t))return e;return null}),[Jf(Gf(),Hf(),"json")]),eh(Do,"credential",(function(t,e){return new Oo(t,e)}),[Gf("email"),Gf("password")]),Zf(Oo.prototype,{w:{name:"toJSON",j:[Gf(null,!0)]}}),Zf(Ao.prototype,{Ca:{name:"addScope",j:[Gf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),eh(Ao,"credential",_o,[Jf(Gf(),Hf(),"token")]),eh(Do,"credentialWithLink",Lo,[Gf("email"),Gf("emailLink")]),Zf(To.prototype,{Ca:{name:"addScope",j:[Gf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),eh(To,"credential",ko,[Jf(Gf(),Hf(),"token")]),Zf(So.prototype,{Ca:{name:"addScope",j:[Gf("scope")]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),eh(So,"credential",No,[Jf(Gf(),Jf(Hf(),Yf()),"idToken"),Jf(Gf(),Yf(),"accessToken",!0)]),Zf(Co.prototype,{Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),eh(Co,"credential",xo,[Jf(Gf(),Hf(),"token"),Gf("secret",!0)]),Zf(Io.prototype,{Ca:{name:"addScope",j:[Gf("scope")]},credential:{name:"credential",j:[Jf(Gf(),Jf(Hf(),Yf()),"optionsOrIdToken"),Jf(Gf(),Yf(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[Hf("customOAuthParameters")]}}),Zf(yo.prototype,{w:{name:"toJSON",j:[Gf(null,!0)]}}),Zf(po.prototype,{w:{name:"toJSON",j:[Gf(null,!0)]}}),eh(Fo,"credential",Uo,[Gf("verificationId"),Gf("verificationCode")]),Zf(Fo.prototype,{eb:{name:"verifyPhoneNumber",j:[Jf(Gf(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(t){return!!t&&(t.session&&t.phoneNumber?Xf(t.session,co)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?Xf(t.session,lo)&&$f(t.multiFactorHint):t.session&&t.multiFactorUid?Xf(t.session,lo)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]}}),Zf(Mo.prototype,{w:{name:"toJSON",j:[Gf(null,!0)]}}),Zf(k.prototype,{toJSON:{name:"toJSON",j:[Gf(null,!0)]}}),Zf(Qo.prototype,{toJSON:{name:"toJSON",j:[Gf(null,!0)]}}),Zf(Yo.prototype,{toJSON:{name:"toJSON",j:[Gf(null,!0)]}}),Zf(il.prototype,{toJSON:{name:"toJSON",j:[Gf(null,!0)]}}),Zf(el.prototype,{Qc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}}]}}),Zf(ll.prototype,{Qb:{name:"getSession",j:[]},ec:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}},Gf("displayName",!0)]},ad:{name:"unenroll",j:[Jf({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:$f},Gf(),"multiFactorInfoIdentifier")]}}),Zf(Bf.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),eh(_i,"parseLink",Pi,[Gf("link")]),eh(kf,"assertion",(function(t){return new ul(t)}),[Qf("phone")]),function(){if(void 0===lt||!lt.INTERNAL||!lt.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:hi,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:fi,VERIFY_AND_CHANGE_EMAIL:pi,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:af,AuthCredential:fo,Error:k};eh(t,"EmailAuthProvider",Do,[]),eh(t,"FacebookAuthProvider",Ao,[]),eh(t,"GithubAuthProvider",To,[]),eh(t,"GoogleAuthProvider",So,[]),eh(t,"TwitterAuthProvider",Co,[]),eh(t,"OAuthProvider",Io,[Gf("providerId")]),eh(t,"SAMLAuthProvider",Eo,[Gf("providerId")]),eh(t,"PhoneAuthProvider",Fo,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(t){return!!(t&&t instanceof af)}}]),eh(t,"RecaptchaVerifier",Bf,[Jf(Gf(),{name:"",J:"an HTML element",optional:!1,K:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Hf("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(t){return!!(t&&t instanceof lt.app.App)}}]),eh(t,"ActionCodeURL",_i,[]),eh(t,"PhoneMultiFactorGenerator",kf,[]),lt.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new af(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),lt.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:E((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:E(t.mc,t),addAuthTokenListener:E(t.cc,t),removeAuthTokenListener:E(t.Oc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),lt.registerVersion("@firebase/auth","0.15.2"),lt.INTERNAL.extendNamespace({User:bl})}()}.apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var Te=function(t,e){return(Te=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function ke(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}var Se,Ne="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},Ce=Ce||{},xe=Ne||self;function Oe(){}function Pe(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function De(t){var e=Pe(t);return"array"==e||"object"==e&&"number"==typeof t.length}function Le(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var Re="closure_uid_"+(1e9*Math.random()>>>0),Me=0;function Ve(t,e,n){return t.call.apply(t.bind,arguments)}function je(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function Fe(t,e,n){return(Fe=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?Ve:je).apply(null,arguments)}function Ue(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var Be=Date.now;function ze(t,e){function n(){}n.prototype=e.prototype,t.S=e.prototype,t.prototype=new n,t.prototype.constructor=t}function qe(){this.j=this.j,this.i=this.i}qe.prototype.j=!1,qe.prototype.ja=function(){!this.j&&(this.j=!0,this.G(),0)&&function(t){Object.prototype.hasOwnProperty.call(t,Re)&&t[Re]||(t[Re]=++Me)}(this)},qe.prototype.G=function(){if(this.i)for(;this.i.length;)this.i.shift()()};var Ge=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},Ke=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)};function He(t){return Array.prototype.concat.apply([],arguments)}function We(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function Ye(t){return/^[\s\xa0]*$/.test(t)}var Qe,Xe=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function $e(t,e){return-1!=t.indexOf(e)}function Je(t,e){return t<e?-1:t>e?1:0}t:{var Ze=xe.navigator;if(Ze){var tn=Ze.userAgent;if(tn){Qe=tn;break t}}Qe=""}function en(t,e,n){for(var r in t)e.call(n,t[r],r,t)}function nn(t){var e={};for(var n in t)e[n]=t[n];return e}var rn="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function on(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<rn.length;o++)n=rn[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function an(t){return an[" "](t),t}an[" "]=Oe;var sn,un,cn=$e(Qe,"Opera"),ln=$e(Qe,"Trident")||$e(Qe,"MSIE"),fn=$e(Qe,"Edge"),hn=fn||ln,pn=$e(Qe,"Gecko")&&!($e(Qe.toLowerCase(),"webkit")&&!$e(Qe,"Edge"))&&!($e(Qe,"Trident")||$e(Qe,"MSIE"))&&!$e(Qe,"Edge"),dn=$e(Qe.toLowerCase(),"webkit")&&!$e(Qe,"Edge");function vn(){var t=xe.document;return t?t.documentMode:void 0}t:{var mn="",yn=(un=Qe,pn?/rv:([^\);]+)(\)|;)/.exec(un):fn?/Edge\/([\d\.]+)/.exec(un):ln?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(un):dn?/WebKit\/(\S+)/.exec(un):cn?/(?:Version)[ \/]?(\S+)/.exec(un):void 0);if(yn&&(mn=yn?yn[1]:""),ln){var gn=vn();if(null!=gn&&gn>parseFloat(mn)){sn=String(gn);break t}}sn=mn}var bn,wn={};function En(t){return function(t,e){var n=wn;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=Xe(String(sn)).split("."),r=Xe(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=Je(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||Je(0==a[2].length,0==s[2].length)||Je(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e}))}xe.document&&ln?bn=vn()||parseInt(sn,10)||void 0:bn=void 0;var In=bn,An=!ln||9<=Number(In),_n=ln&&!En("9"),Tn=function(){if(!xe.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{xe.addEventListener("test",Oe,e),xe.removeEventListener("test",Oe,e)}catch(t){}return t}();function kn(t,e){this.type=t,this.a=this.target=e,this.defaultPrevented=!1}function Sn(t,e){if(kn.call(this,t?t.type:""),this.relatedTarget=this.a=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.c=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.a=e,e=t.relatedTarget){if(pn){t:{try{an(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:Nn[t.pointerType]||"",this.c=t,t.defaultPrevented&&this.b()}}kn.prototype.b=function(){this.defaultPrevented=!0},ze(Sn,kn);var Nn={2:"touch",3:"pen",4:"mouse"};Sn.prototype.b=function(){Sn.S.b.call(this);var t=this.c;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,_n)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}};var Cn="closure_listenable_"+(1e6*Math.random()|0),xn=0;function On(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.ca=i,this.key=++xn,this.Y=this.Z=!1}function Pn(t){t.Y=!0,t.listener=null,t.proxy=null,t.src=null,t.ca=null}function Dn(t){this.src=t,this.a={},this.b=0}function Ln(t,e){var n=e.type;if(n in t.a){var r,i=t.a[n],o=Ge(i,e);(r=0<=o)&&Array.prototype.splice.call(i,o,1),r&&(Pn(e),0==t.a[n].length&&(delete t.a[n],t.b--))}}function Rn(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.Y&&o.listener==e&&o.capture==!!n&&o.ca==r)return i}return-1}Dn.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=Rn(t,e,r,i);return-1<a?(e=t[a],n||(e.Z=!1)):((e=new On(e,this.src,o,!!r,i)).Z=n,t.push(e)),e};var Mn="closure_lm_"+(1e6*Math.random()|0),Vn={};function jn(t,e,n,r,i){if(r&&r.once)return Un(t,e,n,r,i);if(Array.isArray(e)){for(var o=0;o<e.length;o++)jn(t,e[o],n,r,i);return null}return n=Yn(n),t&&t[Cn]?t.va(e,n,Le(r)?!!r.capture:!!r,i):Fn(t,e,n,!1,r,i)}function Fn(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=Le(i)?!!i.capture:!!i;if(a&&!An)return null;var s=Hn(t);if(s||(t[Mn]=s=new Dn(t)),(n=s.add(e,n,r,a,o)).proxy)return n;if(r=function(){var t=Kn,e=An?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)Tn||(i=a),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(qn(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}return n}function Un(t,e,n,r,i){if(Array.isArray(e)){for(var o=0;o<e.length;o++)Un(t,e[o],n,r,i);return null}return n=Yn(n),t&&t[Cn]?t.wa(e,n,Le(r)?!!r.capture:!!r,i):Fn(t,e,n,!0,r,i)}function Bn(t,e,n,r,i){if(Array.isArray(e))for(var o=0;o<e.length;o++)Bn(t,e[o],n,r,i);else r=Le(r)?!!r.capture:!!r,n=Yn(n),t&&t[Cn]?(t=t.c,(e=String(e).toString())in t.a&&-1<(n=Rn(o=t.a[e],n,r,i))&&(Pn(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=Hn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=Rn(e,n,r,i)),(n=-1<t?e[t]:null)&&zn(n))}function zn(t){if("number"!=typeof t&&t&&!t.Y){var e=t.src;if(e&&e[Cn])Ln(e.c,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(qn(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=Hn(e))?(Ln(n,t),0==n.b&&(n.src=null,e[Mn]=null)):Pn(t)}}}function qn(t){return t in Vn?Vn[t]:Vn[t]="on"+t}function Gn(t,e){var n=t.listener,r=t.ca||t.src;return t.Z&&zn(t),n.call(r,e)}function Kn(t,e){if(t.Y)return!0;if(!An){if(!e)t:{e=["window","event"];for(var n=xe,r=0;r<e.length;r++)if(null==(n=n[e[r]])){e=null;break t}e=n}return Gn(t,e=new Sn(e,this))}return Gn(t,new Sn(e,this))}function Hn(t){return(t=t[Mn])instanceof Dn?t:null}var Wn="__closure_events_fn_"+(1e9*Math.random()>>>0);function Yn(t){return"function"==Pe(t)?t:(t[Wn]||(t[Wn]=function(e){return t.handleEvent(e)}),t[Wn])}function Qn(){qe.call(this),this.c=new Dn(this),this.J=this,this.C=null}function Xn(t,e,n,r){if(!(e=t.c.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.Y&&a.capture==n){var s=a.listener,u=a.ca||a.src;a.Z&&Ln(t.c,a),i=!1!==s.call(u,r)&&i}}return i&&!r.defaultPrevented}ze(Qn,qe),Qn.prototype[Cn]=!0,(Se=Qn.prototype).addEventListener=function(t,e,n,r){jn(this,t,e,n,r)},Se.removeEventListener=function(t,e,n,r){Bn(this,t,e,n,r)},Se.dispatchEvent=function(t){var e,n=this.C;if(n)for(e=[];n;n=n.C)e.push(n);n=this.J;var r=t.type||t;if("string"==typeof t)t=new kn(t,n);else if(t instanceof kn)t.target=t.target||n;else{var i=t;on(t=new kn(r,n),i)}if(i=!0,e)for(var o=e.length-1;0<=o;o--){var a=t.a=e[o];i=Xn(a,r,!0,t)&&i}if(i=Xn(a=t.a=n,r,!0,t)&&i,i=Xn(a,r,!1,t)&&i,e)for(o=0;o<e.length;o++)i=Xn(a=t.a=e[o],r,!1,t)&&i;return i},Se.G=function(){if(Qn.S.G.call(this),this.c){var t,e=this.c;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)Pn(n[r]);delete e.a[t],e.b--}}this.C=null},Se.va=function(t,e,n,r){return this.c.add(String(t),e,!1,n,r)},Se.wa=function(t,e,n,r){return this.c.add(String(t),e,!0,n,r)};var $n=xe.JSON.stringify;function Jn(){this.b=this.a=null}var Zn,tr=new(function(){function t(t,e,n){this.f=n,this.c=t,this.g=e,this.b=0,this.a=null}return t.prototype.get=function(){var t;return 0<this.b?(this.b--,t=this.a,this.a=t.next,t.next=null):t=this.c(),t},t}())((function(){return new nr}),(function(t){t.reset()}),100);function er(){var t=ar,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function nr(){this.next=this.b=this.a=null}function rr(t){xe.setTimeout((function(){throw t}),0)}function ir(t,e){Zn||function(){var t=xe.Promise.resolve(void 0);Zn=function(){t.then(sr)}}(),or||(Zn(),or=!0),ar.add(t,e)}Jn.prototype.add=function(t,e){var n=tr.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},nr.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},nr.prototype.reset=function(){this.next=this.b=this.a=null};var or=!1,ar=new Jn;function sr(){for(var t;t=er();){try{t.a.call(t.b)}catch(t){rr(t)}var e=tr;e.g(t),e.b<e.f&&(e.b++,t.next=e.a,e.a=t)}or=!1}function ur(t,e){Qn.call(this),this.b=t||1,this.a=e||xe,this.f=Fe(this.Ya,this),this.g=Be()}function cr(t){t.aa=!1,t.M&&(t.a.clearTimeout(t.M),t.M=null)}function lr(t,e,n){if("function"==Pe(t))n&&(t=Fe(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=Fe(t.handleEvent,t)}return 2147483647<Number(e)?-1:xe.setTimeout(t,e||0)}function fr(t){t.a=lr((function(){t.a=null,t.c&&(t.c=!1,fr(t))}),t.h);var e=t.b;t.b=null,t.g.apply(null,e)}ze(ur,Qn),(Se=ur.prototype).aa=!1,Se.M=null,Se.Ya=function(){if(this.aa){var t=Be()-this.g;0<t&&t<.8*this.b?this.M=this.a.setTimeout(this.f,this.b-t):(this.M&&(this.a.clearTimeout(this.M),this.M=null),this.dispatchEvent("tick"),this.aa&&(cr(this),this.start()))}},Se.start=function(){this.aa=!0,this.M||(this.M=this.a.setTimeout(this.f,this.b),this.g=Be())},Se.G=function(){ur.S.G.call(this),cr(this),delete this.a};var hr=function(t){function e(e,n,r){var i=t.call(this)||this;return i.g=null!=r?e.bind(r):e,i.h=n,i.b=null,i.c=!1,i.a=null,i}return function(t,e){function n(){this.constructor=t}Te(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.f=function(t){this.b=arguments,this.a?this.c=!0:fr(this)},e.prototype.G=function(){t.prototype.G.call(this),this.a&&(xe.clearTimeout(this.a),this.a=null,this.c=!1,this.b=null)},e}(qe);function pr(t){qe.call(this),this.b=t,this.a={}}ze(pr,qe);var dr=[];function vr(t,e,n,r){Array.isArray(n)||(n&&(dr[0]=n.toString()),n=dr);for(var i=0;i<n.length;i++){var o=jn(e,n[i],r||t.handleEvent,!1,t.b||t);if(!o)break;t.a[o.key]=o}}function mr(t){en(t.a,(function(t,e){this.a.hasOwnProperty(e)&&zn(t)}),t),t.a={}}function yr(){this.a=!0}function gr(t,e,n,r){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.a)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var r=n[t];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var o=i[0];if("noop"!=o&&"stop"!=o&&"close"!=o)for(var a=1;a<i.length;a++)i[a]=""}}}return $n(n)}catch(t){return e}}(t,n)+(r?" "+r:"")}))}pr.prototype.G=function(){pr.S.G.call(this),mr(this)},pr.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},yr.prototype.info=function(){};var br=null;function wr(){return br=br||new Qn}function Er(t){kn.call(this,"serverreachability",t)}function Ir(t){var e=wr();e.dispatchEvent(new Er(e,t))}function Ar(t){kn.call(this,"statevent",t)}function _r(t){var e=wr();e.dispatchEvent(new Ar(e,t))}function Tr(t){kn.call(this,"timingevent",t)}function kr(t,e){if("function"!=Pe(t))throw Error("Fn must not be null and must be a function");return xe.setTimeout((function(){t()}),e)}ze(Er,kn),ze(Ar,kn),ze(Tr,kn);var Sr={NO_ERROR:0,Za:1,gb:2,fb:3,bb:4,eb:5,hb:6,Da:7,TIMEOUT:8,kb:9},Nr={ab:"complete",ob:"success",Ea:"error",Da:"abort",mb:"ready",nb:"readystatechange",TIMEOUT:"timeout",ib:"incrementaldata",lb:"progress",cb:"downloadprogress",pb:"uploadprogress"};function Cr(){}function xr(t){var e;return(e=t.a)||(e=t.a={}),e}function Or(){}Cr.prototype.a=null;var Pr,Dr={OPEN:"a",$a:"b",Ea:"c",jb:"d"};function Lr(){kn.call(this,"d")}function Rr(){kn.call(this,"c")}function Mr(){}function Vr(t,e,n,r){this.g=t,this.c=e,this.f=n,this.T=r||1,this.J=new pr(this),this.P=jr,t=hn?125:void 0,this.R=new ur(t),this.B=null,this.b=!1,this.j=this.l=this.i=this.H=this.u=this.U=this.o=null,this.s=[],this.a=null,this.D=0,this.h=this.m=null,this.N=-1,this.A=!1,this.O=0,this.F=null,this.W=this.C=this.V=this.I=!1}ze(Lr,kn),ze(Rr,kn),ze(Mr,Cr),Pr=new Mr;var jr=45e3,Fr={},Ur={};function Br(t,e,n){t.H=1,t.i=ci(ri(e)),t.j=n,t.I=!0,zr(t,null)}function zr(t,e){t.u=Be(),Kr(t),t.l=ri(t.i);var n=t.l,r=t.T;Array.isArray(r)||(r=[String(r)]),Ii(n.b,"t",r),t.D=0,t.a=yo(t.g,t.g.C?e:null),0<t.O&&(t.F=new hr(Fe(t.Ca,t,t.a),t.O)),vr(t.J,t.a,"readystatechange",t.Wa),e=t.B?nn(t.B):{},t.j?(t.m||(t.m="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.a.ba(t.l,t.m,t.j,e)):(t.m="GET",t.a.ba(t.l,t.m,null,e)),Ir(1),function(t,e,n,r,i,o){t.info((function(){if(t.a)if(o)for(var a="",s=o.split("&"),u=0;u<s.length;u++){var c=s[u].split("=");if(1<c.length){var l=c[0];c=c[1];var f=l.split("_");a=2<=f.length&&"type"==f[1]?a+(l+"=")+c+"&":a+(l+"=redacted&")}}else a=null;else a=o;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+e+"\n"+n+"\n"+a}))}(t.c,t.m,t.l,t.f,t.T,t.j)}function qr(t,e,n){for(var r=!0;!t.A&&t.D<n.length;){var i=Gr(t,n);if(i==Ur){4==e&&(t.h=4,_r(14),r=!1),gr(t.c,t.f,null,"[Incomplete Response]");break}if(i==Fr){t.h=4,_r(15),gr(t.c,t.f,n,"[Invalid Chunk]"),r=!1;break}gr(t.c,t.f,i,null),Xr(t,i)}4==e&&0==n.length&&(t.h=1,_r(16),r=!1),t.b=t.b&&r,r?0<n.length&&!t.W&&(t.W=!0,(e=t.g).a==t&&e.V&&!e.F&&(e.c.info("Great, no buffering proxy detected. Bytes received: "+n.length),uo(e),e.F=!0)):(gr(t.c,t.f,n,"[Invalid Chunked Response]"),Qr(t),Yr(t))}function Gr(t,e){var n=t.D,r=e.indexOf("\n",n);return-1==r?Ur:(n=Number(e.substring(n,r)),isNaN(n)?Fr:(r+=1)+n>e.length?Ur:(e=e.substr(r,n),t.D=r+n,e))}function Kr(t){t.U=Be()+t.P,Hr(t,t.P)}function Hr(t,e){if(null!=t.o)throw Error("WatchDog timer not null");t.o=kr(Fe(t.Ua,t),e)}function Wr(t){t.o&&(xe.clearTimeout(t.o),t.o=null)}function Yr(t){0==t.g.v||t.A||fo(t.g,t)}function Qr(t){Wr(t);var e=t.F;e&&"function"==typeof e.ja&&e.ja(),t.F=null,cr(t.R),mr(t.J),t.a&&(e=t.a,t.a=null,e.abort(),e.ja())}function Xr(t,e){try{var n=t.g;if(0!=n.v&&(n.a==t||Ci(n.b,t)))if(n.I=t.N,!t.C&&Ci(n.b,t)&&3==n.v){try{var r=n.ka.a.parse(e)}catch(t){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){t:if(!n.j){if(n.a){if(!(n.a.u+3e3<t.u))break t;lo(n),Zi(n)}so(n),_r(18)}}else n.oa=i[1],0<n.oa-n.P&&37500>i[2]&&n.H&&0==n.o&&!n.m&&(n.m=kr(Fe(n.Ra,n),6e3));if(1>=Ni(n.b)&&n.ea){try{n.ea()}catch(t){}n.ea=void 0}}else po(n,11)}else if((t.C||n.a==t)&&lo(n),!Ye(e))for(e=r=n.ka.a.parse(e),r=0;r<e.length;r++)if(i=e[r],n.P=i[0],i=i[1],2==n.v)if("c"==i[0]){n.J=i[1],n.ga=i[2];var o=i[3];null!=o&&(n.ha=o,n.c.info("VER="+n.ha));var a=i[4];null!=a&&(n.pa=a,n.c.info("SVER="+n.pa));var s=i[5];if(null!=s&&"number"==typeof s&&0<s){var u=1.5*s;n.D=u,n.c.info("backChannelRequestTimeoutMs_="+u)}u=n;var c=t.a;if(c){var l=c.a?c.a.getResponseHeader("X-Client-Wire-Protocol"):null;if(l){var f=u.b;!f.a&&($e(l,"spdy")||$e(l,"quic")||$e(l,"h2"))&&(f.f=f.g,f.a=new Set,f.b&&(xi(f,f.b),f.b=null))}if(u.A){var h=c.a?c.a.getResponseHeader("X-HTTP-Session-Id"):null;h&&(u.na=h,ui(u.B,u.A,h))}}n.v=3,n.f&&n.f.ta(),n.V&&(n.N=Be()-t.u,n.c.info("Handshake RTT: "+n.N+"ms"));var p=t;if((u=n).la=mo(u,u.C?u.ga:null,u.fa),p.C){Oi(u.b,p);var d=p,v=u.D;v&&d.setTimeout(v),d.o&&(Wr(d),Kr(d)),u.a=p}else ao(u);0<n.g.length&&no(n)}else"stop"!=i[0]&&"close"!=i[0]||po(n,7);else 3==n.v&&("stop"==i[0]||"close"==i[0]?"stop"==i[0]?po(n,7):Ji(n):"noop"!=i[0]&&n.f&&n.f.sa(i),n.o=0);Ir(4)}catch(t){}}function $r(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(De(t)||"string"==typeof t)Ke(t,e,void 0);else{if(t.L&&"function"==typeof t.L)var n=t.L();else if(t.K&&"function"==typeof t.K)n=void 0;else if(De(t)||"string"==typeof t){n=[];for(var r=t.length,i=0;i<r;i++)n.push(i)}else for(i in n=[],r=0,t)n[r++]=i;i=(r=function(t){if(t.K&&"function"==typeof t.K)return t.K();if("string"==typeof t)return t.split("");if(De(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}(t)).length;for(var o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)}}function Jr(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Jr)for(n=t.L(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Zr(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];ti(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)ti(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function ti(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(Se=Vr.prototype).setTimeout=function(t){this.P=t},Se.Wa=function(t){t=t.target;var e=this.F;e&&3==Yi(t)?e.f():this.Ca(t)},Se.Ca=function(t){try{if(t==this.a)t:{var e=Yi(this.a),n=this.a.ua(),r=this.a.X();if(!(3>e||3==e&&!hn&&!this.a.$())){this.A||4!=e||7==n||Ir(8==n||0>=r?3:2),Wr(this);var i=this.a.X();this.N=i;var o=this.a.$();if(this.b=200==i,function(t,e,n,r,i,o,a){t.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+e+"\n"+n+"\n"+o+" "+a}))}(this.c,this.m,this.l,this.f,this.T,e,i),this.b){if(this.V&&!this.C){e:{if(this.a){var a,s=this.a;if((a=s.a?s.a.getResponseHeader("X-HTTP-Initial-Response"):null)&&!Ye(a)){var u=a;break e}}u=null}if(!u){this.b=!1,this.h=3,_r(12),Qr(this),Yr(this);break t}gr(this.c,this.f,u,"Initial handshake response via X-HTTP-Initial-Response"),this.C=!0,Xr(this,u)}this.I?(qr(this,e,o),hn&&this.b&&3==e&&(vr(this.J,this.R,"tick",this.Va),this.R.start())):(gr(this.c,this.f,o,null),Xr(this,o)),4==e&&Qr(this),this.b&&!this.A&&(4==e?fo(this.g,this):(this.b=!1,Kr(this)))}else 400==i&&0<o.indexOf("Unknown SID")?(this.h=3,_r(12)):(this.h=0,_r(13)),Qr(this),Yr(this)}}}catch(t){}},Se.Va=function(){if(this.a){var t=Yi(this.a),e=this.a.$();this.D<e.length&&(Wr(this),qr(this,t,e),this.b&&4!=t&&Kr(this))}},Se.cancel=function(){this.A=!0,Qr(this)},Se.Ua=function(){this.o=null;var t=Be();0<=t-this.U?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.c,this.l),2!=this.H&&(Ir(3),_r(17)),Qr(this),this.h=2,Yr(this)):Hr(this,this.U-t)},(Se=Jr.prototype).K=function(){Zr(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},Se.L=function(){return Zr(this),this.a.concat()},Se.get=function(t,e){return ti(this.b,t)?this.b[t]:e},Se.set=function(t,e){ti(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},Se.forEach=function(t,e){for(var n=this.L(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var ei=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function ni(t,e){if(this.c=this.j=this.f="",this.h=null,this.i=this.g="",this.a=!1,t instanceof ni){this.a=void 0!==e?e:t.a,ii(this,t.f),this.j=t.j,oi(this,t.c),ai(this,t.h),this.g=t.g,e=t.b;var n=new gi;n.c=e.c,e.a&&(n.a=new Jr(e.a),n.b=e.b),si(this,n),this.i=t.i}else t&&(n=String(t).match(ei))?(this.a=!!e,ii(this,n[1]||"",!0),this.j=li(n[2]||""),oi(this,n[3]||"",!0),ai(this,n[4]),this.g=li(n[5]||"",!0),si(this,n[6]||"",!0),this.i=li(n[7]||"")):(this.a=!!e,this.b=new gi(null,this.a))}function ri(t){return new ni(t)}function ii(t,e,n){t.f=n?li(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function oi(t,e,n){t.c=n?li(e,!0):e}function ai(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.h=e}else t.h=null}function si(t,e,n){e instanceof gi?(t.b=e,function(t,e){e&&!t.f&&(bi(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(wi(this,e),Ii(this,n,t))}),t)),t.f=e}(t.b,t.a)):(n||(e=fi(e,mi)),t.b=new gi(e,t.a))}function ui(t,e,n){t.b.set(e,n)}function ci(t){return ui(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Be()).toString(36)),t}function li(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function fi(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,hi),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function hi(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}ni.prototype.toString=function(){var t=[],e=this.f;e&&t.push(fi(e,pi,!0),":");var n=this.c;return(n||"file"==e)&&(t.push("//"),(e=this.j)&&t.push(fi(e,pi,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.h)&&t.push(":",String(n))),(n=this.g)&&(this.c&&"/"!=n.charAt(0)&&t.push("/"),t.push(fi(n,"/"==n.charAt(0)?vi:di,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.i)&&t.push("#",fi(n,yi)),t.join("")};var pi=/[#\/\?@]/g,di=/[#\?:]/g,vi=/[#\?]/g,mi=/[#\?@]/g,yi=/#/g;function gi(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function bi(t){t.a||(t.a=new Jr,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function wi(t,e){bi(t),e=Ai(t,e),ti(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,ti((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Zr(t)))}function Ei(t,e){return bi(t),e=Ai(t,e),ti(t.a.b,e)}function Ii(t,e,n){wi(t,e),0<n.length&&(t.c=null,t.a.set(Ai(t,e),We(n)),t.b+=n.length)}function Ai(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function _i(t,e){this.b=t,this.a=e}function Ti(t){this.g=t||ki,t=xe.PerformanceNavigationTiming?0<(t=xe.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(xe.ia&&xe.ia.ya&&xe.ia.ya()&&xe.ia.ya().qb),this.f=t?this.g:1,this.a=null,1<this.f&&(this.a=new Set),this.b=null,this.c=[]}(Se=gi.prototype).add=function(t,e){bi(this),this.c=null,t=Ai(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},Se.forEach=function(t,e){bi(this),this.a.forEach((function(n,r){Ke(n,(function(n){t.call(e,n,r,this)}),this)}),this)},Se.L=function(){bi(this);for(var t=this.a.K(),e=this.a.L(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},Se.K=function(t){bi(this);var e=[];if("string"==typeof t)Ei(this,t)&&(e=He(e,this.a.get(Ai(this,t))));else{t=this.a.K();for(var n=0;n<t.length;n++)e=He(e,t[n])}return e},Se.set=function(t,e){return bi(this),this.c=null,Ei(this,t=Ai(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},Se.get=function(t,e){return t&&0<(t=this.K(t)).length?String(t[0]):e},Se.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.L(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.K(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.c=t.join("&")};var ki=10;function Si(t){return!!t.b||!!t.a&&t.a.size>=t.f}function Ni(t){return t.b?1:t.a?t.a.size:0}function Ci(t,e){return t.b?t.b==e:!!t.a&&t.a.has(e)}function xi(t,e){t.a?t.a.add(e):t.b=e}function Oi(t,e){t.b&&t.b==e?t.b=null:t.a&&t.a.has(e)&&t.a.delete(e)}function Pi(t){var e,n;if(null!=t.b)return t.c.concat(t.b.s);if(null!=t.a&&0!==t.a.size){var r=t.c;try{for(var i=ke(t.a.values()),o=i.next();!o.done;o=i.next()){var a=o.value;r=r.concat(a.s)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return r}return We(t.c)}function Di(){}function Li(){this.a=new Di}function Ri(t,e,n){var r=n||"";try{$r(t,(function(t,n){var i=t;Le(t)&&(i=$n(t)),e.push(r+n+"="+encodeURIComponent(i))}))}catch(t){throw e.push(r+"type="+encodeURIComponent("_badmap")),t}}function Mi(t,e,n,r,i){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(r)}catch(t){}}Ti.prototype.cancel=function(){var t,e;if(this.c=Pi(this),this.b)this.b.cancel(),this.b=null;else if(this.a&&0!==this.a.size){try{for(var n=ke(this.a.values()),r=n.next();!r.done;r=n.next())r.value.cancel()}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.a.clear()}},Di.prototype.stringify=function(t){return xe.JSON.stringify(t,void 0)},Di.prototype.parse=function(t){return xe.JSON.parse(t,void 0)};var Vi=xe.JSON.parse;function ji(t){Qn.call(this),this.headers=new Jr,this.H=t||null,this.b=!1,this.s=this.a=null,this.B="",this.h=0,this.f="",this.g=this.A=this.l=this.u=!1,this.o=0,this.m=null,this.I=Fi,this.D=this.F=!1}ze(ji,Qn);var Fi="",Ui=/^https?$/i,Bi=["POST","PUT"];function zi(t){return"content-type"==t.toLowerCase()}function qi(t,e){t.b=!1,t.a&&(t.g=!0,t.a.abort(),t.g=!1),t.f=e,t.h=5,Gi(t),Hi(t)}function Gi(t){t.u||(t.u=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Ki(t){if(t.b&&void 0!==Ce&&(!t.s[1]||4!=Yi(t)||2!=t.X()))if(t.l&&4==Yi(t))lr(t.za,0,t);else if(t.dispatchEvent("readystatechange"),4==Yi(t)){t.b=!1;try{var e,n=t.X();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var o=String(t.B).match(ei)[1]||null;if(!o&&xe.self&&xe.self.location){var a=xe.self.location.protocol;o=a.substr(0,a.length-1)}i=!Ui.test(o?o.toLowerCase():"")}e=i}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{t.h=6;try{var s=2<Yi(t)?t.a.statusText:""}catch(t){s=""}t.f=s+" ["+t.X()+"]",Gi(t)}}finally{Hi(t)}}}function Hi(t,e){if(t.a){Wi(t);var n=t.a,r=t.s[0]?Oe:null;t.a=null,t.s=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){}}}function Wi(t){t.a&&t.D&&(t.a.ontimeout=null),t.m&&(xe.clearTimeout(t.m),t.m=null)}function Yi(t){return t.a?t.a.readyState:0}function Qi(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}r||(n=function(t){var e="";return en(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):ui(t,e,n))}function Xi(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function $i(t){this.pa=0,this.g=[],this.c=new yr,this.ga=this.la=this.B=this.fa=this.a=this.na=this.A=this.W=this.i=this.O=this.l=null,this.La=this.R=0,this.Ia=Xi("failFast",!1,t),this.H=this.m=this.j=this.h=this.f=null,this.T=!0,this.I=this.oa=this.P=-1,this.U=this.o=this.u=0,this.Fa=Xi("baseRetryDelayMs",5e3,t),this.Ma=Xi("retryDelaySeedMs",1e4,t),this.Ja=Xi("forwardChannelMaxRetries",2,t),this.ma=Xi("forwardChannelRequestTimeoutMs",2e4,t),this.Ka=t&&t.g||void 0,this.D=void 0,this.C=t&&t.supportsCrossDomainXhr||!1,this.J="",this.b=new Ti(t&&t.concurrentRequestLimit),this.ka=new Li,this.da=t&&t.fastHandshake||!1,this.Ga=t&&t.b||!1,t&&t.f&&(this.c.a=!1),t&&t.forceLongPolling&&(this.T=!1),this.V=!this.da&&this.T&&t&&t.c||!1,this.ea=void 0,this.N=0,this.F=!1,this.s=null}function Ji(t){if(to(t),3==t.v){var e=t.R++,n=ri(t.B);ui(n,"SID",t.J),ui(n,"RID",e),ui(n,"TYPE","terminate"),io(t,n),(e=new Vr(t,t.c,e,void 0)).H=2,e.i=ci(ri(n)),n=!1,xe.navigator&&xe.navigator.sendBeacon&&(n=xe.navigator.sendBeacon(e.i.toString(),"")),!n&&xe.Image&&((new Image).src=e.i,n=!0),n||(e.a=yo(e.g,null),e.a.ba(e.i)),e.u=Be(),Kr(e)}vo(t)}function Zi(t){t.a&&(uo(t),t.a.cancel(),t.a=null)}function to(t){Zi(t),t.j&&(xe.clearTimeout(t.j),t.j=null),lo(t),t.b.cancel(),t.h&&("number"==typeof t.h&&xe.clearTimeout(t.h),t.h=null)}function eo(t,e){t.g.push(new _i(t.La++,e)),3==t.v&&no(t)}function no(t){Si(t.b)||t.h||(t.h=!0,ir(t.Ba,t),t.u=0)}function ro(t,e){var n;n=e?e.f:t.R++;var r=ri(t.B);ui(r,"SID",t.J),ui(r,"RID",n),ui(r,"AID",t.P),io(t,r),t.i&&t.l&&Qi(r,t.i,t.l),n=new Vr(t,t.c,n,t.u+1),null===t.i&&(n.B=t.l),e&&(t.g=e.s.concat(t.g)),e=oo(t,n,1e3),n.setTimeout(Math.round(.5*t.ma)+Math.round(.5*t.ma*Math.random())),xi(t.b,n),Br(n,r,e)}function io(t,e){t.f&&$r({},(function(t,n){ui(e,n,t)}))}function oo(t,e,n){n=Math.min(t.g.length,n);var r=t.f?Fe(t.f.Ha,t.f,t):null;t:for(var i=t.g,o=-1;;){var a=["count="+n];-1==o?0<n?(o=i[0].b,a.push("ofs="+o)):o=0:a.push("ofs="+o);for(var s=!0,u=0;u<n;u++){var c=i[u].b,l=i[u].a;if(0>(c-=o))o=Math.max(0,i[u].b-100),s=!1;else try{Ri(l,a,"req"+c+"_")}catch(t){r&&r(l)}}if(s){r=a.join("&");break t}}return t=t.g.splice(0,n),e.s=t,r}function ao(t){t.a||t.j||(t.U=1,ir(t.Aa,t),t.o=0)}function so(t){return!(t.a||t.j||3<=t.o||(t.U++,t.j=kr(Fe(t.Aa,t),ho(t,t.o)),t.o++,0))}function uo(t){null!=t.s&&(xe.clearTimeout(t.s),t.s=null)}function co(t){t.a=new Vr(t,t.c,"rpc",t.U),null===t.i&&(t.a.B=t.l),t.a.O=0;var e=ri(t.la);ui(e,"RID","rpc"),ui(e,"SID",t.J),ui(e,"CI",t.H?"0":"1"),ui(e,"AID",t.P),io(t,e),ui(e,"TYPE","xmlhttp"),t.i&&t.l&&Qi(e,t.i,t.l),t.D&&t.a.setTimeout(t.D);var n=t.a;t=t.ga,n.H=1,n.i=ci(ri(e)),n.j=null,n.I=!0,zr(n,t)}function lo(t){null!=t.m&&(xe.clearTimeout(t.m),t.m=null)}function fo(t,e){var n=null;if(t.a==e){lo(t),uo(t),t.a=null;var r=2}else{if(!Ci(t.b,e))return;n=e.s,Oi(t.b,e),r=1}if(t.I=e.N,0!=t.v)if(e.b)if(1==r){n=e.j?e.j.length:0,e=Be()-e.u;var i=t.u;(r=wr()).dispatchEvent(new Tr(r,n,e,i)),no(t)}else ao(t);else if(3==(i=e.h)||0==i&&0<t.I||!(1==r&&function(t,e){return!(Ni(t.b)>=t.b.f-(t.h?1:0)||(t.h?(t.g=e.s.concat(t.g),0):1==t.v||2==t.v||t.u>=(t.Ia?0:t.Ja)||(t.h=kr(Fe(t.Ba,t,e),ho(t,t.u)),t.u++,0)))}(t,e)||2==r&&so(t)))switch(n&&0<n.length&&(e=t.b,e.c=e.c.concat(n)),i){case 1:po(t,5);break;case 4:po(t,10);break;case 3:po(t,6);break;default:po(t,2)}}function ho(t,e){var n=t.Fa+Math.floor(Math.random()*t.Ma);return t.f||(n*=2),n*e}function po(t,e){if(t.c.info("Error code "+e),2==e){var n=null;t.f&&(n=null);var r=Fe(t.Xa,t);n||(n=new ni("//www.google.com/images/cleardot.gif"),xe.location&&"http"==xe.location.protocol||ii(n,"https"),ci(n)),function(t,e){var n=new yr;if(xe.Image){var r=new Image;r.onload=Ue(Mi,n,r,"TestLoadImage: loaded",!0,e),r.onerror=Ue(Mi,n,r,"TestLoadImage: error",!1,e),r.onabort=Ue(Mi,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=Ue(Mi,n,r,"TestLoadImage: timeout",!1,e),xe.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=t}else e(!1)}(n.toString(),r)}else _r(2);t.v=0,t.f&&t.f.ra(e),vo(t),to(t)}function vo(t){t.v=0,t.I=-1,t.f&&(0==Pi(t.b).length&&0==t.g.length||(t.b.c.length=0,We(t.g),t.g.length=0),t.f.qa())}function mo(t,e,n){var r=function(t){return t instanceof ni?ri(t):new ni(t,void 0)}(n);if(""!=r.c)e&&oi(r,e+"."+r.c),ai(r,r.h);else{var i=xe.location;r=function(t,e,n,r){var i=new ni(null,void 0);return t&&ii(i,t),e&&oi(i,e),n&&ai(i,n),r&&(i.g=r),i}(i.protocol,e?e+"."+i.hostname:i.hostname,+i.port,n)}return t.W&&en(t.W,(function(t,e){ui(r,e,t)})),e=t.A,n=t.na,e&&n&&ui(r,e,n),ui(r,"VER",t.ha),io(t,r),r}function yo(t,e){if(e&&!t.C)throw Error("Can't create secondary domain capable XhrIo object.");return(e=new ji(t.Ka)).F=t.C,e}function go(){}function bo(){if(ln&&!(10<=Number(In)))throw Error("Environmental error: no available transport.")}function wo(t,e){Qn.call(this),this.a=new $i(e),this.l=t,this.b=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.a.l=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.a&&(t?t["X-WebChannel-Client-Profile"]=e.a:t={"X-WebChannel-Client-Profile":e.a}),this.a.O=t,(t=e&&e.httpHeadersOverwriteParam)&&!Ye(t)&&(this.a.i=t),this.h=e&&e.supportsCrossDomainXhr||!1,this.g=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!Ye(e)&&(this.a.A=e,null!==(t=this.b)&&e in t&&e in(t=this.b)&&delete t[e]),this.f=new Ao(this)}function Eo(t){Lr.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.c=t)?(t=this.c,this.data=null!==e&&t in e?e[t]:void 0):this.data=e}else this.data=t}function Io(){Rr.call(this),this.status=1}function Ao(t){this.a=t}(Se=ji.prototype).ba=function(t,e,n,r){if(this.a)throw Error("[goog.net.XhrIo] Object is active with another request="+this.B+"; newUri="+t);e=e?e.toUpperCase():"GET",this.B=t,this.f="",this.h=0,this.u=!1,this.b=!0,this.a=new XMLHttpRequest,this.s=this.H?xr(this.H):xr(Pr),this.a.onreadystatechange=Fe(this.za,this);try{this.A=!0,this.a.open(e,String(t),!0),this.A=!1}catch(t){return void qi(this,t)}t=n||"";var i=new Jr(this.headers);r&&$r(r,(function(t,e){i.set(e,t)})),r=function(t){t:{for(var e=zi,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(i.L()),n=xe.FormData&&t instanceof xe.FormData,!(0<=Ge(Bi,e))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(t,e){this.a.setRequestHeader(e,t)}),this),this.I&&(this.a.responseType=this.I),"withCredentials"in this.a&&this.a.withCredentials!==this.F&&(this.a.withCredentials=this.F);try{Wi(this),0<this.o&&((this.D=function(t){return ln&&En(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.a))?(this.a.timeout=this.o,this.a.ontimeout=Fe(this.xa,this)):this.m=lr(this.xa,this.o,this)),this.l=!0,this.a.send(t),this.l=!1}catch(t){qi(this,t)}},Se.xa=function(){void 0!==Ce&&this.a&&(this.f="Timed out after "+this.o+"ms, aborting",this.h=8,this.dispatchEvent("timeout"),this.abort(8))},Se.abort=function(t){this.a&&this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1,this.h=t||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Hi(this))},Se.G=function(){this.a&&(this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1),Hi(this,!0)),ji.S.G.call(this)},Se.za=function(){this.j||(this.A||this.l||this.g?Ki(this):this.Ta())},Se.Ta=function(){Ki(this)},Se.X=function(){try{return 2<Yi(this)?this.a.status:-1}catch(t){return-1}},Se.$=function(){try{return this.a?this.a.responseText:""}catch(t){return""}},Se.Na=function(t){if(this.a){var e=this.a.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),Vi(e)}},Se.ua=function(){return this.h},Se.Qa=function(){return"string"==typeof this.f?this.f:String(this.f)},(Se=$i.prototype).ha=8,Se.v=1,Se.Ba=function(t){if(this.h)if(this.h=null,1==this.v){if(!t){this.R=Math.floor(1e5*Math.random()),t=this.R++;var e,n=new Vr(this,this.c,t,void 0),r=this.l;if(this.O&&(r?on(r=nn(r),this.O):r=this.O),null===this.i&&(n.B=r),this.da)t:{for(var i=e=0;i<this.g.length;i++){var o=this.g[i];if(void 0===(o="__data__"in o.a&&"string"==typeof(o=o.a.__data__)?o.length:void 0))break;if(4096<(e+=o)){e=i;break t}if(4096===e||i===this.g.length-1){e=i+1;break t}}e=1e3}else e=1e3;e=oo(this,n,e),ui(i=ri(this.B),"RID",t),ui(i,"CVER",22),this.A&&ui(i,"X-HTTP-Session-Id",this.A),io(this,i),this.i&&r&&Qi(i,this.i,r),xi(this.b,n),this.Ga&&ui(i,"TYPE","init"),this.da?(ui(i,"$req",e),ui(i,"SID","null"),n.V=!0,Br(n,i,null)):Br(n,i,e),this.v=2}}else 3==this.v&&(t?ro(this,t):0==this.g.length||Si(this.b)||ro(this))},Se.Aa=function(){if(this.j=null,co(this),this.V&&!(this.F||null==this.a||0>=this.N)){var t=2*this.N;this.c.info("BP detection timer enabled: "+t),this.s=kr(Fe(this.Sa,this),t)}},Se.Sa=function(){this.s&&(this.s=null,this.c.info("BP detection timeout reached."),this.c.info("Buffering proxy detected and switch to long-polling!"),this.H=!1,this.F=!0,Zi(this),co(this))},Se.Ra=function(){null!=this.m&&(this.m=null,Zi(this),so(this),_r(19))},Se.Xa=function(t){t?(this.c.info("Successfully pinged google.com"),_r(2)):(this.c.info("Failed to ping google.com"),_r(1))},(Se=go.prototype).ta=function(){},Se.sa=function(){},Se.ra=function(){},Se.qa=function(){},Se.Ha=function(){},bo.prototype.a=function(t,e){return new wo(t,e)},ze(wo,Qn),(Se=wo.prototype).addEventListener=function(t,e,n,r){wo.S.addEventListener.call(this,t,e,n,r)},Se.removeEventListener=function(t,e,n,r){wo.S.removeEventListener.call(this,t,e,n,r)},Se.Oa=function(){this.a.f=this.f,this.h&&(this.a.C=!0);var t=this.a,e=this.l,n=this.b||void 0;_r(0),t.fa=e,t.W=n||{},t.H=t.T,t.B=mo(t,null,t.fa),no(t)},Se.close=function(){Ji(this.a)},Se.Pa=function(t){if("string"==typeof t){var e={};e.__data__=t,eo(this.a,e)}else this.g?((e={}).__data__=$n(t),eo(this.a,e)):eo(this.a,t)},Se.G=function(){this.a.f=null,delete this.f,Ji(this.a),delete this.a,wo.S.G.call(this)},ze(Eo,Lr),ze(Io,Rr),ze(Ao,go),Ao.prototype.ta=function(){this.a.dispatchEvent("a")},Ao.prototype.sa=function(t){this.a.dispatchEvent(new Eo(t))},Ao.prototype.ra=function(t){this.a.dispatchEvent(new Io(t))},Ao.prototype.qa=function(){this.a.dispatchEvent("b")},bo.prototype.createWebChannel=bo.prototype.a,wo.prototype.send=wo.prototype.Pa,wo.prototype.open=wo.prototype.Oa,wo.prototype.close=wo.prototype.close,Sr.NO_ERROR=0,Sr.TIMEOUT=8,Sr.HTTP_ERROR=6,Nr.COMPLETE="complete",Or.EventType=Dr,Dr.OPEN="a",Dr.CLOSE="b",Dr.ERROR="c",Dr.MESSAGE="d",Qn.prototype.listen=Qn.prototype.va,ji.prototype.listenOnce=ji.prototype.wa,ji.prototype.getLastError=ji.prototype.Qa,ji.prototype.getLastErrorCode=ji.prototype.ua,ji.prototype.getStatus=ji.prototype.X,ji.prototype.getResponseJson=ji.prototype.Na,ji.prototype.getResponseText=ji.prototype.$,ji.prototype.send=ji.prototype.ba;var _o=Sr,To=Nr,ko=Or,So=ji,No=function(t,e,n,r,i,o){this.t=t,this.persistenceKey=e,this.host=n,this.ssl=r,this.forceLongPolling=i,this.i=o},Co=function(){function t(t,e){this.projectId=t,this.database=e||"(default)"}return Object.defineProperty(t.prototype,"o",{get:function(){return"(default)"===this.database},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(e){return e instanceof t&&e.projectId===this.projectId&&e.database===this.database},t}(),xo=new Q("@firebase/firestore");function Oo(){return xo.logLevel}function Po(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(xo.logLevel<=z.DEBUG){var r=e.map(Ro);xo.debug.apply(xo,g(["Firestore (8.0.2): "+t],r))}}function Do(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(xo.logLevel<=z.ERROR){var r=e.map(Ro);xo.error.apply(xo,g(["Firestore (8.0.2): "+t],r))}}function Lo(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(xo.logLevel<=z.WARN){var r=e.map(Ro);xo.warn.apply(xo,g(["Firestore (8.0.2): "+t],r))}}function Ro(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function Mo(t){void 0===t&&(t="Unexpected state");var e="FIRESTORE (8.0.2) INTERNAL ASSERTION FAILED: "+t;throw Do(e),new Error(e)}function Vo(t,e){t||Mo()}function jo(t,e){return t}function Fo(t){var e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(var r=0;r<t;r++)n[r]=Math.floor(256*Math.random());return n}var Uo=function(){function t(){}return t.u=function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length,n="";n.length<20;)for(var r=Fo(40),i=0;i<r.length;++i)n.length<20&&r[i]<e&&(n+=t.charAt(r[i]%t.length));return n},t}();function Bo(t,e){return t<e?-1:t>e?1:0}function zo(t,e,n){return t.length===e.length&&t.every((function(t,r){return n(t,e[r])}))}function qo(t){return t+"\0"}function Go(t){var e=0;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Ko(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function Ho(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}var Wo=function(){function t(t,e){this.h=t,this.l=e,this._={}}return t.prototype.get=function(t){var e=this.h(t),n=this._[e];if(void 0!==n)for(var r=0,i=n;r<i.length;r++){var o=i[r],a=o[0],s=o[1];if(this.l(a,t))return s}},t.prototype.has=function(t){return void 0!==this.get(t)},t.prototype.set=function(t,e){var n=this.h(t),r=this._[n];if(void 0!==r){for(var i=0;i<r.length;i++)if(this.l(r[i][0],t))return void(r[i]=[t,e]);r.push([t,e])}else this._[n]=[[t,e]]},t.prototype.delete=function(t){var e=this.h(t),n=this._[e];if(void 0===n)return!1;for(var r=0;r<n.length;r++)if(this.l(n[r][0],t))return 1===n.length?delete this._[e]:n.splice(r,1),!0;return!1},t.prototype.forEach=function(t){Ko(this._,(function(e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r],a=o[0],s=o[1];t(a,s)}}))},t.prototype.T=function(){return Ho(this._)},t}(),Yo={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"},Qo=function(t){function e(e,n){var r=this;return(r=t.call(this,n)||this).code=e,r.message=n,r.name="FirebaseError",r.toString=function(){return r.name+": [code="+r.code+"]: "+r.message},r}return f(e,t),e}(Error),Xo=function(){function t(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new Qo(Yo.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new Qo(Yo.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new Qo(Yo.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new Qo(Yo.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}return t.now=function(){return t.fromMillis(Date.now())},t.fromDate=function(e){return t.fromMillis(e.getTime())},t.fromMillis=function(e){var n=Math.floor(e/1e3);return new t(n,1e6*(e-1e3*n))},t.prototype.toDate=function(){return new Date(this.toMillis())},t.prototype.toMillis=function(){return 1e3*this.seconds+this.nanoseconds/1e6},t.prototype.I=function(t){return this.seconds===t.seconds?Bo(this.nanoseconds,t.nanoseconds):Bo(this.seconds,t.seconds)},t.prototype.isEqual=function(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds},t.prototype.toString=function(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"},t.prototype.toJSON=function(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}},t.prototype.valueOf=function(){var t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")},t}(),$o=function(){function t(t){this.timestamp=t}return t.m=function(e){return new t(e)},t.min=function(){return new t(new Xo(0,0))},t.prototype.A=function(t){return this.timestamp.I(t.timestamp)},t.prototype.isEqual=function(t){return this.timestamp.isEqual(t.timestamp)},t.prototype.R=function(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3},t.prototype.toString=function(){return"SnapshotVersion("+this.timestamp.toString()+")"},t.prototype.P=function(){return this.timestamp},t}(),Jo=function(){function t(t,e,n){void 0===e?e=0:e>t.length&&Mo(),void 0===n?n=t.length-e:n>t.length-e&&Mo(),this.segments=t,this.offset=e,this.g=n}return Object.defineProperty(t.prototype,"length",{get:function(){return this.g},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(e){return 0===t.V(this,e)},t.prototype.child=function(e){var n=this.segments.slice(this.offset,this.limit());return e instanceof t?e.forEach((function(t){n.push(t)})):n.push(e),this.p(n)},t.prototype.limit=function(){return this.offset+this.length},t.prototype.v=function(t){return t=void 0===t?1:t,this.p(this.segments,this.offset+t,this.length-t)},t.prototype.S=function(){return this.p(this.segments,this.offset,this.length-1)},t.prototype.D=function(){return this.segments[this.offset]},t.prototype.C=function(){return this.get(this.length-1)},t.prototype.get=function(t){return this.segments[this.offset+t]},t.prototype.T=function(){return 0===this.length},t.prototype.N=function(t){if(t.length<this.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.F=function(t){if(this.length+1!==t.length)return!1;for(var e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0},t.prototype.forEach=function(t){for(var e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])},t.prototype.O=function(){return this.segments.slice(this.offset,this.limit())},t.V=function(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r++){var i=t.get(r),o=e.get(r);if(i<o)return-1;if(i>o)return 1}return t.length<e.length?-1:t.length>e.length?1:0},t}(),Zo=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.p=function(t,n,r){return new e(t,n,r)},e.prototype.M=function(){return this.O().join("/")},e.prototype.toString=function(){return this.M()},e.k=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=[],i=0,o=t;i<o.length;i++){var a=o[i];if(a.indexOf("//")>=0)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid segment ("+a+"). Paths must not contain // in them.");r.push.apply(r,a.split("/").filter((function(t){return t.length>0})))}return new e(r)},e.$=function(){return new e([])},e}(Jo),ta=/^[_a-zA-Z][_a-zA-Z0-9]*$/,ea=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.p=function(t,n,r){return new e(t,n,r)},e.L=function(t){return ta.test(t)},e.prototype.M=function(){return this.O().map((function(t){return t=t.replace("\\","\\\\").replace("`","\\`"),e.L(t)||(t="`"+t+"`"),t})).join(".")},e.prototype.toString=function(){return this.M()},e.prototype.B=function(){return 1===this.length&&"__name__"===this.get(0)},e.q=function(){return new e(["__name__"])},e.U=function(t){for(var n=[],r="",i=0,o=function(){if(0===r.length)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid field path ("+t+"). Paths must not be empty, begin with '.', end with '.', or contain '..'");n.push(r),r=""},a=!1;i<t.length;){var s=t[i];if("\\"===s){if(i+1===t.length)throw new Qo(Yo.INVALID_ARGUMENT,"Path has trailing escape character: "+t);var u=t[i+1];if("\\"!==u&&"."!==u&&"`"!==u)throw new Qo(Yo.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);r+=u,i+=2}else"`"===s?(a=!a,i++):"."!==s||a?(r+=s,i++):(o(),i++)}if(o(),a)throw new Qo(Yo.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new e(n)},e.$=function(){return new e([])},e}(Jo),na=function(){function t(t){this.path=t}return t.K=function(e){return new t(Zo.k(e))},t.W=function(e){return new t(Zo.k(e).v(5))},t.prototype.j=function(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t},t.prototype.isEqual=function(t){return null!==t&&0===Zo.V(this.path,t.path)},t.prototype.toString=function(){return this.path.toString()},t.V=function(t,e){return Zo.V(t.path,e.path)},t.G=function(t){return t.length%2==0},t.H=function(e){return new t(new Zo(e.slice()))},t}();function ra(t){return null==t}function ia(t){return 0===t&&1/t==-1/0}function oa(t){return"number"==typeof t&&Number.isInteger(t)&&!ia(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}var aa=function(t,e,n,r,i,o,a){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o=null),void 0===a&&(a=null),this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=o,this.endAt=a,this.J=null};function sa(t,e,n,r,i,o,a){return void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o=null),void 0===a&&(a=null),new aa(t,e,n,r,i,o,a)}function ua(t){var e=jo(t);if(null===e.J){var n=e.path.M();null!==e.collectionGroup&&(n+="|cg:"+e.collectionGroup),n+="|f:",n+=e.filters.map((function(t){return function(t){return t.field.M()+t.op.toString()+ts(t.value)}(t)})).join(","),n+="|ob:",n+=e.orderBy.map((function(t){return(e=t).field.M()+e.dir;var e})).join(","),ra(e.limit)||(n+="|l:",n+=e.limit),e.startAt&&(n+="|lb:",n+=ic(e.startAt)),e.endAt&&(n+="|ub:",n+=ic(e.endAt)),e.J=n}return e.J}function ca(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(var n=0;n<t.orderBy.length;n++)if(!cc(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(var r=0;r<t.filters.length;r++)if(i=t.filters[r],o=e.filters[r],i.op!==o.op||!i.field.isEqual(o.field)||!Xa(i.value,o.value))return!1;var i,o;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!ac(t.startAt,e.startAt)&&ac(t.endAt,e.endAt)}function la(t){return na.G(t.path)&&null===t.collectionGroup&&0===t.filters.length}var fa=function(){function t(t){this.Y=t}return t.fromBase64String=function(e){return new t(atob(e))},t.fromUint8Array=function(e){return new t(function(t){for(var e="",n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(e))},t.prototype.toBase64=function(){return t=this.Y,btoa(t);var t},t.prototype.toUint8Array=function(){return function(t){for(var e=new Uint8Array(t.length),n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.Y)},t.prototype.X=function(){return 2*this.Y.length},t.prototype.A=function(t){return Bo(this.Y,t.Y)},t.prototype.isEqual=function(t){return this.Y===t.Y},t}();fa.Z=new fa("");var ha,pa,da=function(){function t(t,e,n,r,i,o,a){void 0===i&&(i=$o.min()),void 0===o&&(o=$o.min()),void 0===a&&(a=fa.Z),this.target=t,this.targetId=e,this.tt=n,this.sequenceNumber=r,this.et=i,this.lastLimboFreeSnapshotVersion=o,this.resumeToken=a}return t.prototype.nt=function(e){return new t(this.target,this.targetId,this.tt,e,this.et,this.lastLimboFreeSnapshotVersion,this.resumeToken)},t.prototype.st=function(e,n){return new t(this.target,this.targetId,this.tt,this.sequenceNumber,n,this.lastLimboFreeSnapshotVersion,e)},t.prototype.it=function(e){return new t(this.target,this.targetId,this.tt,this.sequenceNumber,this.et,e,this.resumeToken)},t}(),va=function(t){this.count=t};function ma(t){switch(t){case Yo.OK:return Mo();case Yo.CANCELLED:case Yo.UNKNOWN:case Yo.DEADLINE_EXCEEDED:case Yo.RESOURCE_EXHAUSTED:case Yo.INTERNAL:case Yo.UNAVAILABLE:case Yo.UNAUTHENTICATED:return!1;case Yo.INVALID_ARGUMENT:case Yo.NOT_FOUND:case Yo.ALREADY_EXISTS:case Yo.PERMISSION_DENIED:case Yo.FAILED_PRECONDITION:case Yo.ABORTED:case Yo.OUT_OF_RANGE:case Yo.UNIMPLEMENTED:case Yo.DATA_LOSS:return!0;default:return Mo()}}function ya(t){if(void 0===t)return Do("GRPC error has no .code"),Yo.UNKNOWN;switch(t){case ha.OK:return Yo.OK;case ha.CANCELLED:return Yo.CANCELLED;case ha.UNKNOWN:return Yo.UNKNOWN;case ha.DEADLINE_EXCEEDED:return Yo.DEADLINE_EXCEEDED;case ha.RESOURCE_EXHAUSTED:return Yo.RESOURCE_EXHAUSTED;case ha.INTERNAL:return Yo.INTERNAL;case ha.UNAVAILABLE:return Yo.UNAVAILABLE;case ha.UNAUTHENTICATED:return Yo.UNAUTHENTICATED;case ha.INVALID_ARGUMENT:return Yo.INVALID_ARGUMENT;case ha.NOT_FOUND:return Yo.NOT_FOUND;case ha.ALREADY_EXISTS:return Yo.ALREADY_EXISTS;case ha.PERMISSION_DENIED:return Yo.PERMISSION_DENIED;case ha.FAILED_PRECONDITION:return Yo.FAILED_PRECONDITION;case ha.ABORTED:return Yo.ABORTED;case ha.OUT_OF_RANGE:return Yo.OUT_OF_RANGE;case ha.UNIMPLEMENTED:return Yo.UNIMPLEMENTED;case ha.DATA_LOSS:return Yo.DATA_LOSS;default:return Mo()}}(pa=ha||(ha={}))[pa.OK=0]="OK",pa[pa.CANCELLED=1]="CANCELLED",pa[pa.UNKNOWN=2]="UNKNOWN",pa[pa.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",pa[pa.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",pa[pa.NOT_FOUND=5]="NOT_FOUND",pa[pa.ALREADY_EXISTS=6]="ALREADY_EXISTS",pa[pa.PERMISSION_DENIED=7]="PERMISSION_DENIED",pa[pa.UNAUTHENTICATED=16]="UNAUTHENTICATED",pa[pa.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",pa[pa.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",pa[pa.ABORTED=10]="ABORTED",pa[pa.OUT_OF_RANGE=11]="OUT_OF_RANGE",pa[pa.UNIMPLEMENTED=12]="UNIMPLEMENTED",pa[pa.INTERNAL=13]="INTERNAL",pa[pa.UNAVAILABLE=14]="UNAVAILABLE",pa[pa.DATA_LOSS=15]="DATA_LOSS";var ga=function(){function t(t,e){this.V=t,this.root=e||wa.EMPTY}return t.prototype.rt=function(e,n){return new t(this.V,this.root.rt(e,n,this.V).copy(null,null,wa.ot,null,null))},t.prototype.remove=function(e){return new t(this.V,this.root.remove(e,this.V).copy(null,null,wa.ot,null,null))},t.prototype.get=function(t){for(var e=this.root;!e.T();){var n=this.V(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null},t.prototype.indexOf=function(t){for(var e=0,n=this.root;!n.T();){var r=this.V(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1},t.prototype.T=function(){return this.root.T()},Object.defineProperty(t.prototype,"size",{get:function(){return this.root.size},enumerable:!1,configurable:!0}),t.prototype.at=function(){return this.root.at()},t.prototype.ct=function(){return this.root.ct()},t.prototype.ut=function(t){return this.root.ut(t)},t.prototype.forEach=function(t){this.ut((function(e,n){return t(e,n),!1}))},t.prototype.toString=function(){var t=[];return this.ut((function(e,n){return t.push(e+":"+n),!1})),"{"+t.join(", ")+"}"},t.prototype.ht=function(t){return this.root.ht(t)},t.prototype.lt=function(){return new ba(this.root,null,this.V,!1)},t.prototype._t=function(t){return new ba(this.root,t,this.V,!1)},t.prototype.ft=function(){return new ba(this.root,null,this.V,!0)},t.prototype.dt=function(t){return new ba(this.root,t,this.V,!0)},t}(),ba=function(){function t(t,e,n,r){this.wt=r,this.Tt=[];for(var i=1;!t.T();)if(i=e?n(t.key,e):1,r&&(i*=-1),i<0)t=this.wt?t.left:t.right;else{if(0===i){this.Tt.push(t);break}this.Tt.push(t),t=this.wt?t.right:t.left}}return t.prototype.Et=function(){var t=this.Tt.pop(),e={key:t.key,value:t.value};if(this.wt)for(t=t.left;!t.T();)this.Tt.push(t),t=t.right;else for(t=t.right;!t.T();)this.Tt.push(t),t=t.left;return e},t.prototype.It=function(){return this.Tt.length>0},t.prototype.At=function(){if(0===this.Tt.length)return null;var t=this.Tt[this.Tt.length-1];return{key:t.key,value:t.value}},t}(),wa=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:t.EMPTY,this.right=null!=o?o:t.EMPTY,this.size=this.left.size+1+this.right.size}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.T=function(){return!1},t.prototype.ut=function(t){return this.left.ut(t)||t(this.key,this.value)||this.right.ut(t)},t.prototype.ht=function(t){return this.right.ht(t)||t(this.key,this.value)||this.left.ht(t)},t.prototype.min=function(){return this.left.T()?this:this.left.min()},t.prototype.at=function(){return this.min().key},t.prototype.ct=function(){return this.right.T()?this.key:this.right.ct()},t.prototype.rt=function(t,e,n){var r=this,i=n(t,r.key);return(r=i<0?r.copy(null,null,null,r.left.rt(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.rt(t,e,n))).Rt()},t.prototype.Pt=function(){if(this.left.T())return t.EMPTY;var e=this;return e.left.gt()||e.left.left.gt()||(e=e.Vt()),(e=e.copy(null,null,null,e.left.Pt(),null)).Rt()},t.prototype.remove=function(e,n){var r,i=this;if(n(e,i.key)<0)i.left.T()||i.left.gt()||i.left.left.gt()||(i=i.Vt()),i=i.copy(null,null,null,i.left.remove(e,n),null);else{if(i.left.gt()&&(i=i.yt()),i.right.T()||i.right.gt()||i.right.left.gt()||(i=i.vt()),0===n(e,i.key)){if(i.right.T())return t.EMPTY;r=i.right.min(),i=i.copy(r.key,r.value,null,null,i.right.Pt())}i=i.copy(null,null,null,null,i.right.remove(e,n))}return i.Rt()},t.prototype.gt=function(){return this.color},t.prototype.Rt=function(){var t=this;return t.right.gt()&&!t.left.gt()&&(t=t.bt()),t.left.gt()&&t.left.left.gt()&&(t=t.yt()),t.left.gt()&&t.right.gt()&&(t=t.St()),t},t.prototype.Vt=function(){var t=this.St();return t.right.left.gt()&&(t=(t=(t=t.copy(null,null,null,null,t.right.yt())).bt()).St()),t},t.prototype.vt=function(){var t=this.St();return t.left.left.gt()&&(t=(t=t.yt()).St()),t},t.prototype.bt=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.yt=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.St=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.Dt=function(){var t=this.Ct();return Math.pow(2,t)<=this.size+1},t.prototype.Ct=function(){if(this.gt()&&this.left.gt())throw Mo();if(this.right.gt())throw Mo();var t=this.left.Ct();if(t!==this.right.Ct())throw Mo();return t+(this.gt()?0:1)},t}();wa.EMPTY=null,wa.RED=!0,wa.ot=!1,wa.EMPTY=new(function(){function t(){this.size=0}return Object.defineProperty(t.prototype,"key",{get:function(){throw Mo()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){throw Mo()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){throw Mo()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){throw Mo()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){throw Mo()},enumerable:!1,configurable:!0}),t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.rt=function(t,e,n){return new wa(t,e)},t.prototype.remove=function(t,e){return this},t.prototype.T=function(){return!0},t.prototype.ut=function(t){return!1},t.prototype.ht=function(t){return!1},t.prototype.at=function(){return null},t.prototype.ct=function(){return null},t.prototype.gt=function(){return!1},t.prototype.Dt=function(){return!0},t.prototype.Ct=function(){return 0},t}());var Ea=function(){function t(t){this.V=t,this.data=new ga(this.V)}return t.prototype.has=function(t){return null!==this.data.get(t)},t.prototype.first=function(){return this.data.at()},t.prototype.last=function(){return this.data.ct()},Object.defineProperty(t.prototype,"size",{get:function(){return this.data.size},enumerable:!1,configurable:!0}),t.prototype.indexOf=function(t){return this.data.indexOf(t)},t.prototype.forEach=function(t){this.data.ut((function(e,n){return t(e),!1}))},t.prototype.Nt=function(t,e){for(var n=this.data._t(t[0]);n.It();){var r=n.Et();if(this.V(r.key,t[1])>=0)return;e(r.key)}},t.prototype.xt=function(t,e){var n;for(n=void 0!==e?this.data._t(e):this.data.lt();n.It();)if(!t(n.Et().key))return},t.prototype.Ft=function(t){var e=this.data._t(t);return e.It()?e.Et().key:null},t.prototype.lt=function(){return new Ia(this.data.lt())},t.prototype._t=function(t){return new Ia(this.data._t(t))},t.prototype.add=function(t){return this.copy(this.data.remove(t).rt(t,!0))},t.prototype.delete=function(t){return this.has(t)?this.copy(this.data.remove(t)):this},t.prototype.T=function(){return this.data.T()},t.prototype.Ot=function(t){var e=this;return e.size<t.size&&(e=t,t=this),t.forEach((function(t){e=e.add(t)})),e},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.data.lt(),r=e.data.lt();n.It();){var i=n.Et().key,o=r.Et().key;if(0!==this.V(i,o))return!1}return!0},t.prototype.O=function(){var t=[];return this.forEach((function(e){t.push(e)})),t},t.prototype.toString=function(){var t=[];return this.forEach((function(e){return t.push(e)})),"SortedSet("+t.toString()+")"},t.prototype.copy=function(e){var n=new t(this.V);return n.data=e,n},t}(),Ia=function(){function t(t){this.Mt=t}return t.prototype.Et=function(){return this.Mt.Et().key},t.prototype.It=function(){return this.Mt.It()},t}(),Aa=new ga(na.V);function _a(){return Aa}function Ta(){return _a()}var ka=new ga(na.V);function Sa(){return ka}var Na=new ga(na.V),Ca=new Ea(na.V);function xa(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=Ca,r=0,i=t;r<i.length;r++){var o=i[r];n=n.add(o)}return n}var Oa=new Ea(Bo);function Pa(){return Oa}var Da=function(){function t(t){this.V=t?function(e,n){return t(e,n)||na.V(e.key,n.key)}:function(t,e){return na.V(t.key,e.key)},this.kt=Sa(),this.$t=new ga(this.V)}return t.Lt=function(e){return new t(e.V)},t.prototype.has=function(t){return null!=this.kt.get(t)},t.prototype.get=function(t){return this.kt.get(t)},t.prototype.first=function(){return this.$t.at()},t.prototype.last=function(){return this.$t.ct()},t.prototype.T=function(){return this.$t.T()},t.prototype.indexOf=function(t){var e=this.kt.get(t);return e?this.$t.indexOf(e):-1},Object.defineProperty(t.prototype,"size",{get:function(){return this.$t.size},enumerable:!1,configurable:!0}),t.prototype.forEach=function(t){this.$t.ut((function(e,n){return t(e),!1}))},t.prototype.add=function(t){var e=this.delete(t.key);return e.copy(e.kt.rt(t.key,t),e.$t.rt(t,null))},t.prototype.delete=function(t){var e=this.get(t);return e?this.copy(this.kt.remove(t),this.$t.remove(e)):this},t.prototype.isEqual=function(e){if(!(e instanceof t))return!1;if(this.size!==e.size)return!1;for(var n=this.$t.lt(),r=e.$t.lt();n.It();){var i=n.Et().key,o=r.Et().key;if(!i.isEqual(o))return!1}return!0},t.prototype.toString=function(){var t=[];return this.forEach((function(e){t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"},t.prototype.copy=function(e,n){var r=new t;return r.V=this.V,r.kt=e,r.$t=n,r},t}(),La=function(){function t(){this.Bt=new ga(na.V)}return t.prototype.track=function(t){var e=t.doc.key,n=this.Bt.get(e);n?0!==t.type&&3===n.type?this.Bt=this.Bt.rt(e,t):3===t.type&&1!==n.type?this.Bt=this.Bt.rt(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Bt=this.Bt.rt(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Bt=this.Bt.rt(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Bt=this.Bt.remove(e):1===t.type&&2===n.type?this.Bt=this.Bt.rt(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Bt=this.Bt.rt(e,{type:2,doc:t.doc}):Mo():this.Bt=this.Bt.rt(e,t)},t.prototype.qt=function(){var t=[];return this.Bt.ut((function(e,n){t.push(n)})),t},t}(),Ra=function(){function t(t,e,n,r,i,o,a,s){this.query=t,this.docs=e,this.Ut=n,this.docChanges=r,this.Qt=i,this.fromCache=o,this.Kt=a,this.Wt=s}return t.jt=function(e,n,r,i){var o=[];return n.forEach((function(t){o.push({type:0,doc:t})})),new t(e,n,Da.Lt(n),o,r,i,!0,!1)},Object.defineProperty(t.prototype,"hasPendingWrites",{get:function(){return!this.Qt.T()},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){if(!(this.fromCache===t.fromCache&&this.Kt===t.Kt&&this.Qt.isEqual(t.Qt)&&qu(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.Ut.isEqual(t.Ut)))return!1;var e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(var r=0;r<e.length;r++)if(e[r].type!==n[r].type||!e[r].doc.isEqual(n[r].doc))return!1;return!0},t}(),Ma=function(){function t(t,e,n,r,i){this.et=t,this.Gt=e,this.zt=n,this.Ht=r,this.Jt=i}return t.Yt=function(e,n){var r=new Map;return r.set(e,Va.Xt(e,n)),new t($o.min(),r,Pa(),_a(),xa())},t}(),Va=function(){function t(t,e,n,r,i){this.resumeToken=t,this.Zt=e,this.te=n,this.ee=r,this.ne=i}return t.Xt=function(e,n){return new t(fa.Z,n,xa(),xa(),xa())},t}(),ja=function(t,e,n,r){this.se=t,this.removedTargetIds=e,this.key=n,this.ie=r},Fa=function(t,e){this.targetId=t,this.re=e},Ua=function(t,e,n,r){void 0===n&&(n=fa.Z),void 0===r&&(r=null),this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r},Ba=function(){function t(){this.oe=0,this.ae=Ga(),this.ce=fa.Z,this.ue=!1,this.he=!0}return Object.defineProperty(t.prototype,"Zt",{get:function(){return this.ue},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resumeToken",{get:function(){return this.ce},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"le",{get:function(){return 0!==this.oe},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_e",{get:function(){return this.he},enumerable:!1,configurable:!0}),t.prototype.fe=function(t){t.X()>0&&(this.he=!0,this.ce=t)},t.prototype.de=function(){var t=xa(),e=xa(),n=xa();return this.ae.forEach((function(r,i){switch(i){case 0:t=t.add(r);break;case 2:e=e.add(r);break;case 1:n=n.add(r);break;default:Mo()}})),new Va(this.ce,this.ue,t,e,n)},t.prototype.we=function(){this.he=!1,this.ae=Ga()},t.prototype.Te=function(t,e){this.he=!0,this.ae=this.ae.rt(t,e)},t.prototype.Ee=function(t){this.he=!0,this.ae=this.ae.remove(t)},t.prototype.Ie=function(){this.oe+=1},t.prototype.me=function(){this.oe-=1},t.prototype.Ae=function(){this.he=!0,this.ue=!0},t}(),za=function(){function t(t){this.Re=t,this.Pe=new Map,this.ge=_a(),this.Ve=qa(),this.ye=new Ea(Bo)}return t.prototype.pe=function(t){for(var e=0,n=t.se;e<n.length;e++){var r=n[e];t.ie instanceof Su?this.ve(r,t.ie):t.ie instanceof Nu&&this.be(r,t.key,t.ie)}for(var i=0,o=t.removedTargetIds;i<o.length;i++){var a=o[i];this.be(a,t.key,t.ie)}},t.prototype.Se=function(t){var e=this;this.De(t,(function(n){var r=e.Ce(n);switch(t.state){case 0:e.Ne(n)&&r.fe(t.resumeToken);break;case 1:r.me(),r.le||r.we(),r.fe(t.resumeToken);break;case 2:r.me(),r.le||e.removeTarget(n);break;case 3:e.Ne(n)&&(r.Ae(),r.fe(t.resumeToken));break;case 4:e.Ne(n)&&(e.xe(n),r.fe(t.resumeToken));break;default:Mo()}}))},t.prototype.De=function(t,e){var n=this;t.targetIds.length>0?t.targetIds.forEach(e):this.Pe.forEach((function(t,r){n.Ne(r)&&e(r)}))},t.prototype.Fe=function(t){var e=t.targetId,n=t.re.count,r=this.Oe(e);if(r){var i=r.target;if(la(i))if(0===n){var o=new na(i.path);this.be(e,o,new Nu(o,$o.min()))}else Vo(1===n);else this.Me(e)!==n&&(this.xe(e),this.ye=this.ye.add(e))}},t.prototype.ke=function(t){var e=this,n=new Map;this.Pe.forEach((function(r,i){var o=e.Oe(i);if(o){if(r.Zt&&la(o.target)){var a=new na(o.target.path);null!==e.ge.get(a)||e.$e(i,a)||e.be(i,a,new Nu(a,t))}r._e&&(n.set(i,r.de()),r.we())}}));var r=xa();this.Ve.forEach((function(t,n){var i=!0;n.xt((function(t){var n=e.Oe(t);return!n||2===n.tt||(i=!1,!1)})),i&&(r=r.add(t))}));var i=new Ma(t,n,this.ye,this.ge,r);return this.ge=_a(),this.Ve=qa(),this.ye=new Ea(Bo),i},t.prototype.ve=function(t,e){if(this.Ne(t)){var n=this.$e(t,e.key)?2:0;this.Ce(t).Te(e.key,n),this.ge=this.ge.rt(e.key,e),this.Ve=this.Ve.rt(e.key,this.Le(e.key).add(t))}},t.prototype.be=function(t,e,n){if(this.Ne(t)){var r=this.Ce(t);this.$e(t,e)?r.Te(e,1):r.Ee(e),this.Ve=this.Ve.rt(e,this.Le(e).delete(t)),n&&(this.ge=this.ge.rt(e,n))}},t.prototype.removeTarget=function(t){this.Pe.delete(t)},t.prototype.Me=function(t){var e=this.Ce(t).de();return this.Re.Be(t).size+e.te.size-e.ne.size},t.prototype.Ie=function(t){this.Ce(t).Ie()},t.prototype.Ce=function(t){var e=this.Pe.get(t);return e||(e=new Ba,this.Pe.set(t,e)),e},t.prototype.Le=function(t){var e=this.Ve.get(t);return e||(e=new Ea(Bo),this.Ve=this.Ve.rt(t,e)),e},t.prototype.Ne=function(t){var e=null!==this.Oe(t);return e||Po("WatchChangeAggregator","Detected inactive target",t),e},t.prototype.Oe=function(t){var e=this.Pe.get(t);return e&&e.le?null:this.Re.qe(t)},t.prototype.xe=function(t){var e=this;this.Pe.set(t,new Ba),this.Re.Be(t).forEach((function(n){e.be(t,n,null)}))},t.prototype.$e=function(t,e){return this.Re.Be(t).has(e)},t}();function qa(){return new ga(na.V)}function Ga(){return new ga(na.V)}function Ka(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function Ha(t){var e=t.mapValue.fields.__previous_value__;return Ka(e)?Ha(e):e}function Wa(t){var e=ns(t.mapValue.fields.__local_write_time__.timestampValue);return new Xo(e.seconds,e.nanos)}var Ya=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function Qa(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?Ka(t)?4:10:Mo()}function Xa(t,e){var n=Qa(t);if(n!==Qa(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return Wa(t).isEqual(Wa(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;var n=ns(t.timestampValue),r=ns(e.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return is(t.bytesValue).isEqual(is(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return rs(t.geoPointValue.latitude)===rs(e.geoPointValue.latitude)&&rs(t.geoPointValue.longitude)===rs(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return rs(t.integerValue)===rs(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){var n=rs(t.doubleValue),r=rs(e.doubleValue);return n===r?ia(n)===ia(r):isNaN(n)&&isNaN(r)}return!1}(t,e);case 9:return zo(t.arrayValue.values||[],e.arrayValue.values||[],Xa);case 10:return function(t,e){var n=t.mapValue.fields||{},r=e.mapValue.fields||{};if(Go(n)!==Go(r))return!1;for(var i in n)if(n.hasOwnProperty(i)&&(void 0===r[i]||!Xa(n[i],r[i])))return!1;return!0}(t,e);default:return Mo()}}function $a(t,e){return void 0!==(t.values||[]).find((function(t){return Xa(t,e)}))}function Ja(t,e){var n=Qa(t),r=Qa(e);if(n!==r)return Bo(n,r);switch(n){case 0:return 0;case 1:return Bo(t.booleanValue,e.booleanValue);case 2:return function(t,e){var n=rs(t.integerValue||t.doubleValue),r=rs(e.integerValue||e.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(t,e);case 3:return Za(t.timestampValue,e.timestampValue);case 4:return Za(Wa(t),Wa(e));case 5:return Bo(t.stringValue,e.stringValue);case 6:return function(t,e){var n=is(t),r=is(e);return n.A(r)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){for(var n=t.split("/"),r=e.split("/"),i=0;i<n.length&&i<r.length;i++){var o=Bo(n[i],r[i]);if(0!==o)return o}return Bo(n.length,r.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){var n=Bo(rs(t.latitude),rs(e.latitude));return 0!==n?n:Bo(rs(t.longitude),rs(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){for(var n=t.values||[],r=e.values||[],i=0;i<n.length&&i<r.length;++i){var o=Ja(n[i],r[i]);if(o)return o}return Bo(n.length,r.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){var n=t.fields||{},r=Object.keys(n),i=e.fields||{},o=Object.keys(i);r.sort(),o.sort();for(var a=0;a<r.length&&a<o.length;++a){var s=Bo(r[a],o[a]);if(0!==s)return s;var u=Ja(n[r[a]],i[o[a]]);if(0!==u)return u}return Bo(r.length,o.length)}(t.mapValue,e.mapValue);default:throw Mo()}}function Za(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return Bo(t,e);var n=ns(t),r=ns(e),i=Bo(n.seconds,r.seconds);return 0!==i?i:Bo(n.nanos,r.nanos)}function ts(t){return es(t)}function es(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){var e=ns(t);return"time("+e.seconds+","+e.nanos+")"}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?is(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,na.W(n).toString()):"geoPointValue"in t?"geo("+(e=t.geoPointValue).latitude+","+e.longitude+")":"arrayValue"in t?function(t){for(var e="[",n=!0,r=0,i=t.values||[];r<i.length;r++)n?n=!1:e+=",",e+=es(i[r]);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){for(var e="{",n=!0,r=0,i=Object.keys(t.fields||{}).sort();r<i.length;r++){var o=i[r];n?n=!1:e+=",",e+=o+":"+es(t.fields[o])}return e+"}"}(t.mapValue):Mo();var e,n}function ns(t){if(Vo(!!t),"string"==typeof t){var e=0,n=Ya.exec(t);if(Vo(!!n),n[1]){var r=n[1];r=(r+"000000000").substr(0,9),e=Number(r)}var i=new Date(t);return{seconds:Math.floor(i.getTime()/1e3),nanos:e}}return{seconds:rs(t.seconds),nanos:rs(t.nanos)}}function rs(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function is(t){return"string"==typeof t?fa.fromBase64String(t):fa.fromUint8Array(t)}function os(t,e){return{referenceValue:"projects/"+t.projectId+"/databases/"+t.database+"/documents/"+e.path.M()}}function as(t){return!!t&&"integerValue"in t}function ss(t){return!!t&&"arrayValue"in t}function us(t){return!!t&&"nullValue"in t}function cs(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function ls(t){return!!t&&"mapValue"in t}var fs={asc:"ASCENDING",desc:"DESCENDING"},hs={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"},ps=function(t,e){this.t=t,this.Ue=e};function ds(t){return{integerValue:""+t}}function vs(t,e){if(t.Ue){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:ia(e)?"-0":e}}function ms(t,e){return oa(e)?ds(e):vs(t,e)}function ys(t,e){return t.Ue?new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")+"."+("000000000"+e.nanoseconds).slice(-9)+"Z":{seconds:""+e.seconds,nanos:e.nanoseconds}}function gs(t,e){return t.Ue?e.toBase64():e.toUint8Array()}function bs(t,e){return ys(t,e.P())}function ws(t){return Vo(!!t),$o.m(function(t){var e=ns(t);return new Xo(e.seconds,e.nanos)}(t))}function Es(t,e){return function(t){return new Zo(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).M()}function Is(t){var e=Zo.k(t);return Vo(Ks(e)),e}function As(t,e){return Es(t.t,e.path)}function _s(t,e){var n=Is(e);if(n.get(1)!==t.t.projectId)throw new Qo(Yo.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.t.projectId);if(n.get(3)!==t.t.database)throw new Qo(Yo.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.t.database);return new na(Ns(n))}function Ts(t,e){return Es(t.t,e)}function ks(t){var e=Is(t);return 4===e.length?Zo.$():Ns(e)}function Ss(t){return new Zo(["projects",t.t.projectId,"databases",t.t.database]).M()}function Ns(t){return Vo(t.length>4&&"documents"===t.get(4)),t.v(5)}function Cs(t,e,n){return{name:As(t,e),fields:n.proto.mapValue.fields}}function xs(t,e){var n;if(e instanceof vu)n={update:Cs(t,e.key,e.value)};else if(e instanceof Eu)n={delete:As(t,e.key)};else if(e instanceof mu)n={update:Cs(t,e.key,e.data),updateMask:Gs(e.Qe)};else if(e instanceof gu)n={transform:{document:As(t,e.key),fieldTransforms:e.fieldTransforms.map((function(t){return function(t,e){var n=e.transform;if(n instanceof Xs)return{fieldPath:e.field.M(),setToServerValue:"REQUEST_TIME"};if(n instanceof $s)return{fieldPath:e.field.M(),appendMissingElements:{values:n.elements}};if(n instanceof Zs)return{fieldPath:e.field.M(),removeAllFromArray:{values:n.elements}};if(n instanceof eu)return{fieldPath:e.field.M(),increment:n.Ke};throw Mo()}(0,t)}))}};else{if(!(e instanceof Iu))return Mo();n={verify:As(t,e.key)}}return e.je.We||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:bs(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:Mo()}(t,e.je)),n}function Os(t,e){var n=e.currentDocument?function(t){return void 0!==t.updateTime?su.updateTime(ws(t.updateTime)):void 0!==t.exists?su.exists(t.exists):su.Ge()}(e.currentDocument):su.Ge();if(e.update){e.update.name;var r=_s(t,e.update.name),i=new Au({mapValue:{fields:e.update.fields}});if(e.updateMask){var o=function(t){var e=t.fieldPaths||[];return new iu(e.map((function(t){return ea.U(t)})))}(e.updateMask);return new mu(r,i,o,n)}return new vu(r,i,n)}if(e.delete){var a=_s(t,e.delete);return new Eu(a,n)}if(e.transform){var s=_s(t,e.transform.document),u=e.transform.fieldTransforms.map((function(e){return function(t,e){var n=null;if("setToServerValue"in e)Vo("REQUEST_TIME"===e.setToServerValue),n=new Xs;else if("appendMissingElements"in e){var r=e.appendMissingElements.values||[];n=new $s(r)}else if("removeAllFromArray"in e){var i=e.removeAllFromArray.values||[];n=new Zs(i)}else"increment"in e?n=new eu(t,e.increment):Mo();var o=ea.U(e.fieldPath);return new ou(o,n)}(t,e)}));return Vo(!0===n.exists),new gu(s,u)}if(e.verify){var c=_s(t,e.verify);return new Iu(c,n)}return Mo()}function Ps(t,e){return{documents:[Ts(t,e.path)]}}function Ds(t,e){var n={structuredQuery:{}},r=e.path;null!==e.collectionGroup?(n.parent=Ts(t,r),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=Ts(t,r.S()),n.structuredQuery.from=[{collectionId:r.C()}]);var i=function(t){if(0!==t.length){var e=t.map((function(t){return function(t){if("=="===t.op){if(cs(t.value))return{unaryFilter:{field:Us(t.field),op:"IS_NAN"}};if(us(t.value))return{unaryFilter:{field:Us(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(cs(t.value))return{unaryFilter:{field:Us(t.field),op:"IS_NOT_NAN"}};if(us(t.value))return{unaryFilter:{field:Us(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Us(t.field),op:Fs(t.op),value:t.value}}}(t)}));return 1===e.length?e[0]:{compositeFilter:{op:"AND",filters:e}}}}(e.filters);i&&(n.structuredQuery.where=i);var o=function(t){if(0!==t.length)return t.map((function(t){return function(t){return{field:Us(t.field),direction:js(t.dir)}}(t)}))}(e.orderBy);o&&(n.structuredQuery.orderBy=o);var a=function(t,e){return t.Ue||ra(e)?e:{value:e}}(t,e.limit);return null!==a&&(n.structuredQuery.limit=a),e.startAt&&(n.structuredQuery.startAt=Ms(e.startAt)),e.endAt&&(n.structuredQuery.endAt=Ms(e.endAt)),n}function Ls(t){var e=ks(t.parent),n=t.structuredQuery,r=n.from?n.from.length:0,i=null;if(r>0){Vo(1===r);var o=n.from[0];o.allDescendants?i=o.collectionId:e=e.child(o.collectionId)}var a=[];n.where&&(a=Rs(n.where));var s=[];n.orderBy&&(s=n.orderBy.map((function(t){return function(t){return new sc(Bs(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t)})));var u=null;n.limit&&(u=function(t){var e;return ra(e="object"==typeof t?t.value:t)?null:e}(n.limit));var c=null;n.startAt&&(c=Vs(n.startAt));var l=null;return n.endAt&&(l=Vs(n.endAt)),Ou(e,i,s,a,u,"F",c,l)}function Rs(t){return t?void 0!==t.unaryFilter?[qs(t)]:void 0!==t.fieldFilter?[zs(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((function(t){return Rs(t)})).reduce((function(t,e){return t.concat(e)})):Mo():[]}function Ms(t){return{before:t.before,values:t.position}}function Vs(t){var e=!!t.before,n=t.values||[];return new rc(n,e)}function js(t){return fs[t]}function Fs(t){return hs[t]}function Us(t){return{fieldPath:t.M()}}function Bs(t){return ea.U(t.fieldPath)}function zs(t){return Yu.create(Bs(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";case"OPERATOR_UNSPECIFIED":default:return Mo()}}(t.fieldFilter.op),t.fieldFilter.value)}function qs(t){switch(t.unaryFilter.op){case"IS_NAN":var e=Bs(t.unaryFilter.field);return Yu.create(e,"==",{doubleValue:NaN});case"IS_NULL":var n=Bs(t.unaryFilter.field);return Yu.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":var r=Bs(t.unaryFilter.field);return Yu.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":var i=Bs(t.unaryFilter.field);return Yu.create(i,"!=",{nullValue:"NULL_VALUE"});case"OPERATOR_UNSPECIFIED":default:return Mo()}}function Gs(t){var e=[];return t.fields.forEach((function(t){return e.push(t.M())})),{fieldPaths:e}}function Ks(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}var Hs=function(){this.ze=void 0};function Ws(t,e,n){return t instanceof Xs?function(t,e){var n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof $s?Js(t,e):t instanceof Zs?tu(t,e):function(t,e){var n=Qs(t,e),r=nu(n)+nu(t.Ke);return as(n)&&as(t.Ke)?ds(r):vs(t.serializer,r)}(t,e)}function Ys(t,e,n){return t instanceof $s?Js(t,e):t instanceof Zs?tu(t,e):n}function Qs(t,e){return t instanceof eu?as(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}var Xs=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e}(Hs),$s=function(t){function e(e){var n=this;return(n=t.call(this)||this).elements=e,n}return f(e,t),e}(Hs);function Js(t,e){for(var n=ru(e),r=function(t){n.some((function(e){return Xa(e,t)}))||n.push(t)},i=0,o=t.elements;i<o.length;i++)r(o[i]);return{arrayValue:{values:n}}}var Zs=function(t){function e(e){var n=this;return(n=t.call(this)||this).elements=e,n}return f(e,t),e}(Hs);function tu(t,e){for(var n=ru(e),r=function(t){n=n.filter((function(e){return!Xa(e,t)}))},i=0,o=t.elements;i<o.length;i++)r(o[i]);return{arrayValue:{values:n}}}var eu=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).serializer=e,r.Ke=n,r}return f(e,t),e}(Hs);function nu(t){return rs(t.integerValue||t.doubleValue)}function ru(t){return ss(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}var iu=function(){function t(t){this.fields=t,t.sort(ea.V)}return t.prototype.He=function(t){for(var e=0,n=this.fields;e<n.length;e++)if(n[e].N(t))return!0;return!1},t.prototype.isEqual=function(t){return zo(this.fields,t.fields,(function(t,e){return t.isEqual(e)}))},t}(),ou=function(t,e){this.field=t,this.transform=e},au=function(t,e){this.version=t,this.transformResults=e},su=function(){function t(t,e){this.updateTime=t,this.exists=e}return t.Ge=function(){return new t},t.exists=function(e){return new t(void 0,e)},t.updateTime=function(e){return new t(e)},Object.defineProperty(t.prototype,"We",{get:function(){return void 0===this.updateTime&&void 0===this.exists},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)},t}();function uu(t,e){return void 0!==t.updateTime?e instanceof Su&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e instanceof Su}var cu=function(){};function lu(t,e,n){return t instanceof vu?function(t,e,n){return new Su(t.key,n.version,t.value,{hasCommittedMutations:!0})}(t,0,n):t instanceof mu?function(t,e,n){if(!uu(t.je,e))return new Cu(t.key,n.version);var r=yu(t,e);return new Su(t.key,n.version,r,{hasCommittedMutations:!0})}(t,e,n):t instanceof gu?function(t,e,n){if(Vo(null!=n.transformResults),!uu(t.je,e))return new Cu(t.key,n.version);var r=bu(0,e),i=function(t,e,n){var r=[];Vo(t.length===n.length);for(var i=0;i<n.length;i++){var o=t[i],a=o.transform,s=null;e instanceof Su&&(s=e.field(o.field)),r.push(Ys(a,s,n[i]))}return r}(t.fieldTransforms,e,n.transformResults),o=n.version,a=wu(t,r.data(),i);return new Su(t.key,o,a,{hasCommittedMutations:!0})}(t,e,n):function(t,e,n){return new Nu(t.key,n.version,{hasCommittedMutations:!0})}(t,0,n)}function fu(t,e,n,r){return t instanceof vu?function(t,e){if(!uu(t.je,e))return e;var n=du(e);return new Su(t.key,n,t.value,{Je:!0})}(t,e):t instanceof mu?function(t,e){if(!uu(t.je,e))return e;var n=du(e),r=yu(t,e);return new Su(t.key,n,r,{Je:!0})}(t,e):t instanceof gu?function(t,e,n,r){if(!uu(t.je,e))return e;var i=bu(0,e),o=function(t,e,n,r){for(var i=[],o=0,a=t;o<a.length;o++){var s=a[o],u=s.transform,c=null;n instanceof Su&&(c=n.field(s.field)),null===c&&r instanceof Su&&(c=r.field(s.field)),i.push(Ws(u,c,e))}return i}(t.fieldTransforms,n,e,r),a=wu(t,i.data(),o);return new Su(t.key,i.version,a,{Je:!0})}(t,e,r,n):function(t,e){return uu(t.je,e)?new Nu(t.key,$o.min()):e}(t,e)}function hu(t,e){return t instanceof gu?function(t,e){for(var n=null,r=0,i=t.fieldTransforms;r<i.length;r++){var o=i[r],a=e instanceof Su?e.field(o.field):void 0,s=Qs(o.transform,a||null);null!=s&&(n=null==n?(new _u).set(o.field,s):n.set(o.field,s))}return n?n.Ye():null}(t,e):null}function pu(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.je.isEqual(e.je)&&(0===t.type?t.value.isEqual(e.value):1===t.type?t.data.isEqual(e.data)&&t.Qe.isEqual(e.Qe):2!==t.type||zo(t.fieldTransforms,t.fieldTransforms,(function(t,e){return function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof $s&&e instanceof $s||t instanceof Zs&&e instanceof Zs?zo(t.elements,e.elements,Xa):t instanceof eu&&e instanceof eu?Xa(t.Ke,e.Ke):t instanceof Xs&&e instanceof Xs}(t.transform,e.transform)}(t,e)})))}function du(t){return t instanceof Su?t.version:$o.min()}var vu=function(t){function e(e,n,r){var i=this;return(i=t.call(this)||this).key=e,i.value=n,i.je=r,i.type=0,i}return f(e,t),e}(cu),mu=function(t){function e(e,n,r,i){var o=this;return(o=t.call(this)||this).key=e,o.data=n,o.Qe=r,o.je=i,o.type=1,o}return f(e,t),e}(cu);function yu(t,e){return function(t,e){var n=new _u(e);return t.Qe.fields.forEach((function(e){if(!e.T()){var r=t.data.field(e);null!==r?n.set(e,r):n.delete(e)}})),n.Ye()}(t,e instanceof Su?e.data():Au.empty())}var gu=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).key=e,r.fieldTransforms=n,r.type=2,r.je=su.exists(!0),r}return f(e,t),e}(cu);function bu(t,e){return e}function wu(t,e,n){for(var r=new _u(e),i=0;i<t.fieldTransforms.length;i++){var o=t.fieldTransforms[i];r.set(o.field,n[i])}return r.Ye()}var Eu=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).key=e,r.je=n,r.type=3,r}return f(e,t),e}(cu),Iu=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).key=e,r.je=n,r.type=4,r}return f(e,t),e}(cu),Au=function(){function t(t){this.proto=t}return t.empty=function(){return new t({mapValue:{}})},t.prototype.field=function(t){if(t.T())return this.proto;for(var e=this.proto,n=0;n<t.length-1;++n){if(!e.mapValue.fields)return null;if(!ls(e=e.mapValue.fields[t.get(n)]))return null}return(e=(e.mapValue.fields||{})[t.C()])||null},t.prototype.isEqual=function(t){return Xa(this.proto,t.proto)},t}(),_u=function(){function t(t){void 0===t&&(t=Au.empty()),this.Xe=t,this.Ze=new Map}return t.prototype.set=function(t,e){return this.tn(t,e),this},t.prototype.delete=function(t){return this.tn(t,null),this},t.prototype.tn=function(t,e){for(var n=this.Ze,r=0;r<t.length-1;++r){var i=t.get(r),o=n.get(i);o instanceof Map?n=o:o&&10===Qa(o)?(o=new Map(Object.entries(o.mapValue.fields||{})),n.set(i,o),n=o):(o=new Map,n.set(i,o),n=o)}n.set(t.C(),e)},t.prototype.Ye=function(){var t=this.en(ea.$(),this.Ze);return null!=t?new Au(t):this.Xe},t.prototype.en=function(t,e){var n=this,r=!1,i=this.Xe.field(t),o=ls(i)?Object.assign({},i.mapValue.fields):{};return e.forEach((function(e,i){if(e instanceof Map){var a=n.en(t.child(i),e);null!=a&&(o[i]=a,r=!0)}else null!==e?(o[i]=e,r=!0):o.hasOwnProperty(i)&&(delete o[i],r=!0)})),r?{mapValue:{fields:o}}:null},t}();function Tu(t){var e=[];return Ko(t.fields||{},(function(t,n){var r=new ea([t]);if(ls(n)){var i=Tu(n.mapValue).fields;if(0===i.length)e.push(r);else for(var o=0,a=i;o<a.length;o++){var s=a[o];e.push(r.child(s))}}else e.push(r)})),new iu(e)}var ku=function(t,e){this.key=t,this.version=e},Su=function(t){function e(e,n,r,i){var o=this;return(o=t.call(this,e,n)||this).nn=r,o.Je=!!i.Je,o.hasCommittedMutations=!!i.hasCommittedMutations,o}return f(e,t),e.prototype.field=function(t){return this.nn.field(t)},e.prototype.data=function(){return this.nn},e.prototype.sn=function(){return this.nn.proto},e.prototype.isEqual=function(t){return t instanceof e&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.Je===t.Je&&this.hasCommittedMutations===t.hasCommittedMutations&&this.nn.isEqual(t.nn)},e.prototype.toString=function(){return"Document("+this.key+", "+this.version+", "+this.nn.toString()+", {hasLocalMutations: "+this.Je+"}), {hasCommittedMutations: "+this.hasCommittedMutations+"})"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return this.Je||this.hasCommittedMutations},enumerable:!1,configurable:!0}),e}(ku),Nu=function(t){function e(e,n,r){var i=this;return(i=t.call(this,e,n)||this).hasCommittedMutations=!(!r||!r.hasCommittedMutations),i}return f(e,t),e.prototype.toString=function(){return"NoDocument("+this.key+", "+this.version+")"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return this.hasCommittedMutations},enumerable:!1,configurable:!0}),e.prototype.isEqual=function(t){return t instanceof e&&t.hasCommittedMutations===this.hasCommittedMutations&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},e}(ku),Cu=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.toString=function(){return"UnknownDocument("+this.key+", "+this.version+")"},Object.defineProperty(e.prototype,"hasPendingWrites",{get:function(){return!0},enumerable:!1,configurable:!0}),e.prototype.isEqual=function(t){return t instanceof e&&t.version.isEqual(this.version)&&t.key.isEqual(this.key)},e}(ku),xu=function(t,e,n,r,i,o,a,s){void 0===e&&(e=null),void 0===n&&(n=[]),void 0===r&&(r=[]),void 0===i&&(i=null),void 0===o&&(o="F"),void 0===a&&(a=null),void 0===s&&(s=null),this.path=t,this.collectionGroup=e,this.rn=n,this.filters=r,this.limit=i,this.limitType=o,this.startAt=a,this.endAt=s,this.on=null,this.an=null,this.startAt,this.endAt};function Ou(t,e,n,r,i,o,a,s){return new xu(t,e,n,r,i,o,a,s)}function Pu(t){return new xu(t)}function Du(t){return!ra(t.limit)&&"F"===t.limitType}function Lu(t){return!ra(t.limit)&&"L"===t.limitType}function Ru(t){return t.rn.length>0?t.rn[0].field:null}function Mu(t){for(var e=0,n=t.filters;e<n.length;e++){var r=n[e];if(r.cn())return r.field}return null}function Vu(t){return null!==t.collectionGroup}function ju(t){var e=jo(t);if(null===e.on){e.on=[];var n=Mu(e),r=Ru(e);if(null!==n&&null===r)n.B()||e.on.push(new sc(n)),e.on.push(new sc(ea.q(),"asc"));else{for(var i=!1,o=0,a=e.rn;o<a.length;o++){var s=a[o];e.on.push(s),s.field.B()&&(i=!0)}if(!i){var u=e.rn.length>0?e.rn[e.rn.length-1].dir:"asc";e.on.push(new sc(ea.q(),u))}}}return e.on}function Fu(t){var e=jo(t);if(!e.an)if("F"===e.limitType)e.an=sa(e.path,e.collectionGroup,ju(e),e.filters,e.limit,e.startAt,e.endAt);else{for(var n=[],r=0,i=ju(e);r<i.length;r++){var o=i[r],a="desc"===o.dir?"asc":"desc";n.push(new sc(o.field,a))}var s=e.endAt?new rc(e.endAt.position,!e.endAt.before):null,u=e.startAt?new rc(e.startAt.position,!e.startAt.before):null;e.an=sa(e.path,e.collectionGroup,n,e.filters,e.limit,s,u)}return e.an}function Uu(t,e,n){return new xu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}function Bu(t,e){return new xu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,e,t.endAt)}function zu(t,e){return new xu(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,e)}function qu(t,e){return ca(Fu(t),Fu(e))&&t.limitType===e.limitType}function Gu(t){return ua(Fu(t))+"|lt:"+t.limitType}function Ku(t){return"Query(target="+function(t){var e=t.path.M();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=", filters: ["+t.filters.map((function(t){return(e=t).field.M()+" "+e.op+" "+ts(e.value);var e})).join(", ")+"]"),ra(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=", orderBy: ["+t.orderBy.map((function(t){return(e=t).field.M()+" ("+e.dir+")";var e})).join(", ")+"]"),t.startAt&&(e+=", startAt: "+ic(t.startAt)),t.endAt&&(e+=", endAt: "+ic(t.endAt)),"Target("+e+")"}(Fu(t))+"; limitType="+t.limitType+")"}function Hu(t,e){return function(t,e){var n=e.key.path;return null!==t.collectionGroup?e.key.j(t.collectionGroup)&&t.path.N(n):na.G(t.path)?t.path.isEqual(n):t.path.F(n)}(t,e)&&function(t,e){for(var n=0,r=t.rn;n<r.length;n++){var i=r[n];if(!i.field.B()&&null===e.field(i.field))return!1}return!0}(t,e)&&function(t,e){for(var n=0,r=t.filters;n<r.length;n++)if(!r[n].matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!oc(t.startAt,ju(t),e)||t.endAt&&oc(t.endAt,ju(t),e))}(t,e)}function Wu(t){return function(e,n){for(var r=!1,i=0,o=ju(t);i<o.length;i++){var a=o[i],s=uc(a,e,n);if(0!==s)return s;r=r||a.field.B()}return 0}}var Yu=function(t){function e(e,n,r){var i=this;return(i=t.call(this)||this).field=e,i.op=n,i.value=r,i}return f(e,t),e.create=function(t,n,r){return t.B()?"in"===n||"not-in"===n?this.un(t,n,r):new Qu(t,n,r):"array-contains"===n?new Zu(t,r):"in"===n?new tc(t,r):"not-in"===n?new ec(t,r):"array-contains-any"===n?new nc(t,r):new e(t,n,r)},e.un=function(t,e,n){return"in"===e?new Xu(t,n):new $u(t,n)},e.prototype.matches=function(t){var e=t.field(this.field);return"!="===this.op?null!==e&&this.hn(Ja(e,this.value)):null!==e&&Qa(this.value)===Qa(e)&&this.hn(Ja(e,this.value))},e.prototype.hn=function(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return Mo()}},e.prototype.cn=function(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0},e}((function(){})),Qu=function(t){function e(e,n,r){var i=this;return(i=t.call(this,e,n,r)||this).key=na.W(r.referenceValue),i}return f(e,t),e.prototype.matches=function(t){var e=na.V(t.key,this.key);return this.hn(e)},e}(Yu),Xu=function(t){function e(e,n){var r=this;return(r=t.call(this,e,"in",n)||this).keys=Ju(0,n),r}return f(e,t),e.prototype.matches=function(t){return this.keys.some((function(e){return e.isEqual(t.key)}))},e}(Yu),$u=function(t){function e(e,n){var r=this;return(r=t.call(this,e,"not-in",n)||this).keys=Ju(0,n),r}return f(e,t),e.prototype.matches=function(t){return!this.keys.some((function(e){return e.isEqual(t.key)}))},e}(Yu);function Ju(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((function(t){return na.W(t.referenceValue)}))}var Zu=function(t){function e(e,n){return t.call(this,e,"array-contains",n)||this}return f(e,t),e.prototype.matches=function(t){var e=t.field(this.field);return ss(e)&&$a(e.arrayValue,this.value)},e}(Yu),tc=function(t){function e(e,n){return t.call(this,e,"in",n)||this}return f(e,t),e.prototype.matches=function(t){var e=t.field(this.field);return null!==e&&$a(this.value.arrayValue,e)},e}(Yu),ec=function(t){function e(e,n){return t.call(this,e,"not-in",n)||this}return f(e,t),e.prototype.matches=function(t){if($a(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;var e=t.field(this.field);return null!==e&&!$a(this.value.arrayValue,e)},e}(Yu),nc=function(t){function e(e,n){return t.call(this,e,"array-contains-any",n)||this}return f(e,t),e.prototype.matches=function(t){var e=this,n=t.field(this.field);return!(!ss(n)||!n.arrayValue.values)&&n.arrayValue.values.some((function(t){return $a(e.value.arrayValue,t)}))},e}(Yu),rc=function(t,e){this.position=t,this.before=e};function ic(t){return(t.before?"b":"a")+":"+t.position.map((function(t){return ts(t)})).join(",")}function oc(t,e,n){for(var r=0,i=0;i<t.position.length;i++){var o=e[i],a=t.position[i];if(r=o.field.B()?na.V(na.W(a.referenceValue),n.key):Ja(a,n.field(o.field)),"desc"===o.dir&&(r*=-1),0!==r)break}return t.before?r<=0:r<0}function ac(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(var n=0;n<t.position.length;n++)if(!Xa(t.position[n],e.position[n]))return!1;return!0}var sc=function(t,e){void 0===e&&(e="asc"),this.field=t,this.dir=e};function uc(t,e,n){var r=t.field.B()?na.V(e.key,n.key):function(t,e,n){var r=e.field(t),i=n.field(t);return null!==r&&null!==i?Ja(r,i):Mo()}(t.field,e,n);switch(t.dir){case"asc":return r;case"desc":return-1*r;default:return Mo()}}function cc(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}var lc=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))},fc=function(){function t(t,e,n,r,i){void 0===n&&(n=1e3),void 0===r&&(r=1.5),void 0===i&&(i=6e4),this.ln=t,this._n=e,this.fn=n,this.dn=r,this.wn=i,this.Tn=0,this.En=null,this.In=Date.now(),this.reset()}return t.prototype.reset=function(){this.Tn=0},t.prototype.mn=function(){this.Tn=this.wn},t.prototype.An=function(t){var e=this;this.cancel();var n=Math.floor(this.Tn+this.Rn()),r=Math.max(0,Date.now()-this.In),i=Math.max(0,n-r);i>0&&Po("ExponentialBackoff","Backing off for "+i+" ms (base delay: "+this.Tn+" ms, delay with jitter: "+n+" ms, last attempt: "+r+" ms ago)"),this.En=this.ln.Pn(this._n,i,(function(){return e.In=Date.now(),t()})),this.Tn*=this.dn,this.Tn<this.fn&&(this.Tn=this.fn),this.Tn>this.wn&&(this.Tn=this.wn)},t.prototype.gn=function(){null!==this.En&&(this.En.Vn(),this.En=null)},t.prototype.cancel=function(){null!==this.En&&(this.En.cancel(),this.En=null)},t.prototype.Rn=function(){return(Math.random()-.5)*this.Tn},t}(),hc=function(){function t(t){var e=this;this.yn=null,this.pn=null,this.result=void 0,this.error=void 0,this.vn=!1,this.bn=!1,t((function(t){e.vn=!0,e.result=t,e.yn&&e.yn(t)}),(function(t){e.vn=!0,e.error=t,e.pn&&e.pn(t)}))}return t.prototype.catch=function(t){return this.next(void 0,t)},t.prototype.next=function(e,n){var r=this;return this.bn&&Mo(),this.bn=!0,this.vn?this.error?this.Sn(n,this.error):this.Dn(e,this.result):new t((function(t,i){r.yn=function(n){r.Dn(e,n).next(t,i)},r.pn=function(e){r.Sn(n,e).next(t,i)}}))},t.prototype.Cn=function(){var t=this;return new Promise((function(e,n){t.next(e,n)}))},t.prototype.Nn=function(e){try{var n=e();return n instanceof t?n:t.resolve(n)}catch(e){return t.reject(e)}},t.prototype.Dn=function(e,n){return e?this.Nn((function(){return e(n)})):t.resolve(n)},t.prototype.Sn=function(e,n){return e?this.Nn((function(){return e(n)})):t.reject(n)},t.resolve=function(e){return new t((function(t,n){t(e)}))},t.reject=function(e){return new t((function(t,n){n(e)}))},t.xn=function(e){return new t((function(t,n){var r=0,i=0,o=!1;e.forEach((function(e){++r,e.next((function(){++i,o&&i===r&&t()}),(function(t){return n(t)}))})),o=!0,i===r&&t()}))},t.Fn=function(e){for(var n=t.resolve(!1),r=function(e){n=n.next((function(n){return n?t.resolve(n):e()}))},i=0,o=e;i<o.length;i++)r(o[i]);return n},t.forEach=function(t,e){var n=this,r=[];return t.forEach((function(t,i){r.push(e.call(n,t,i))})),this.xn(r)},t}(),pc=function(){function t(e,n,r){this.name=e,this.version=n,this.On=r,12.2===t.Mn(E())&&Do("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.")}return t.delete=function(t){return Po("SimpleDb","Removing database:",t),bc(window.indexedDB.deleteDatabase(t)).Cn()},t.kn=function(){if("undefined"==typeof indexedDB)return!1;if(t.$n())return!0;var e=E(),n=t.Mn(e),r=0<n&&n<10,i=t.Ln(e),o=0<i&&i<4.5;return!(e.indexOf("MSIE ")>0||e.indexOf("Trident/")>0||e.indexOf("Edge/")>0||r||o)},t.$n=function(){var t;return"undefined"!=typeof process&&"YES"===(null===(t=process.env)||void 0===t?void 0:t.Bn)},t.qn=function(t,e){return t.store(e)},t.Mn=function(t){var e=t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),n=e?e[1].split("_").slice(0,2).join("."):"-1";return Number(n)},t.Ln=function(t){var e=t.match(/Android ([\d.]+)/i),n=e?e[1].split(".").slice(0,2).join("."):"-1";return Number(n)},t.prototype.Un=function(t){return p(this,void 0,void 0,(function(){var e,n=this;return d(this,(function(r){switch(r.label){case 0:return this.db?[3,2]:(Po("SimpleDb","Opening database:",this.name),e=this,[4,new Promise((function(e,r){var i=indexedDB.open(n.name,n.version);i.onsuccess=function(t){var n=t.target.result;e(n)},i.onblocked=function(){r(new vc(t,"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."))},i.onerror=function(e){var n=e.target.error;"VersionError"===n.name?r(new Qo(Yo.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")):r(new vc(t,n))},i.onupgradeneeded=function(t){Po("SimpleDb",'Database "'+n.name+'" requires upgrade from version:',t.oldVersion);var e=t.target.result;n.On.createOrUpgrade(e,i.transaction,t.oldVersion,n.version).next((function(){Po("SimpleDb","Database upgrade to version "+n.version+" complete")}))}}))]);case 1:e.db=r.sent(),r.label=2;case 2:return[2,(this.Qn&&(this.db.onversionchange=function(t){return n.Qn(t)}),this.db)]}}))}))},t.prototype.Kn=function(t){this.Qn=t,this.db&&(this.db.onversionchange=function(e){return t(e)})},t.prototype.runTransaction=function(t,e,n,r){return p(this,void 0,void 0,(function(){var i,o,a,s,u;return d(this,(function(c){switch(c.label){case 0:i="readonly"===e,o=0,a=function(){var e,a,u,c,l;return d(this,(function(f){switch(f.label){case 0:++o,f.label=1;case 1:return f.trys.push([1,4,,5]),[4,s.Un(t)];case 2:return s.db=f.sent(),e=yc.open(s.db,t,i?"readonly":"readwrite",n),a=r(e).catch((function(t){return e.abort(t),hc.reject(t)})).Cn(),u={},a.catch((function(){})),[4,e.Wn];case 3:return[2,(u.value=(f.sent(),a),u)];case 4:return c=f.sent(),l="FirebaseError"!==c.name&&o<3,Po("SimpleDb","Transaction failed with error:",c.message,"Retrying:",l),s.close(),l?[3,5]:[2,{value:Promise.reject(c)}];case 5:return[2]}}))},s=this,c.label=1;case 1:return[5,a()];case 2:if("object"==typeof(u=c.sent()))return[2,u.value];c.label=3;case 3:return[3,1];case 4:return[2]}}))}))},t.prototype.close=function(){this.db&&this.db.close(),this.db=void 0},t}(),dc=function(){function t(t){this.jn=t,this.Gn=!1,this.zn=null}return Object.defineProperty(t.prototype,"vn",{get:function(){return this.Gn},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"Hn",{get:function(){return this.zn},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cursor",{set:function(t){this.jn=t},enumerable:!1,configurable:!0}),t.prototype.done=function(){this.Gn=!0},t.prototype.Jn=function(t){this.zn=t},t.prototype.delete=function(){return bc(this.jn.delete())},t}(),vc=function(t){function e(e,n){var r=this;return(r=t.call(this,Yo.UNAVAILABLE,"IndexedDB transaction '"+e+"' failed: "+n)||this).name="IndexedDbTransactionError",r}return f(e,t),e}(Qo);function mc(t){return"IndexedDbTransactionError"===t.name}var yc=function(){function t(t,e){var n=this;this.action=t,this.transaction=e,this.aborted=!1,this.Yn=new lc,this.transaction.oncomplete=function(){n.Yn.resolve()},this.transaction.onabort=function(){e.error?n.Yn.reject(new vc(t,e.error)):n.Yn.resolve()},this.transaction.onerror=function(e){var r=Ec(e.target.error);n.Yn.reject(new vc(t,r))}}return t.open=function(e,n,r,i){try{return new t(n,e.transaction(i,r))}catch(e){throw new vc(n,e)}},Object.defineProperty(t.prototype,"Wn",{get:function(){return this.Yn.promise},enumerable:!1,configurable:!0}),t.prototype.abort=function(t){t&&this.Yn.reject(t),this.aborted||(Po("SimpleDb","Aborting transaction:",t?t.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort())},t.prototype.store=function(t){var e=this.transaction.objectStore(t);return new gc(e)},t}(),gc=function(){function t(t){this.store=t}return t.prototype.put=function(t,e){var n;return void 0!==e?(Po("SimpleDb","PUT",this.store.name,t,e),n=this.store.put(e,t)):(Po("SimpleDb","PUT",this.store.name,"<auto-key>",t),n=this.store.put(t)),bc(n)},t.prototype.add=function(t){return Po("SimpleDb","ADD",this.store.name,t,t),bc(this.store.add(t))},t.prototype.get=function(t){var e=this;return bc(this.store.get(t)).next((function(n){return void 0===n&&(n=null),Po("SimpleDb","GET",e.store.name,t,n),n}))},t.prototype.delete=function(t){return Po("SimpleDb","DELETE",this.store.name,t),bc(this.store.delete(t))},t.prototype.count=function(){return Po("SimpleDb","COUNT",this.store.name),bc(this.store.count())},t.prototype.Xn=function(t,e){var n=this.cursor(this.options(t,e)),r=[];return this.Zn(n,(function(t,e){r.push(e)})).next((function(){return r}))},t.prototype.ts=function(t,e){Po("SimpleDb","DELETE ALL",this.store.name);var n=this.options(t,e);n.es=!1;var r=this.cursor(n);return this.Zn(r,(function(t,e,n){return n.delete()}))},t.prototype.ns=function(t,e){var n;e?n=t:(n={},e=t);var r=this.cursor(n);return this.Zn(r,e)},t.prototype.ss=function(t){var e=this.cursor({});return new hc((function(n,r){e.onerror=function(t){var e=Ec(t.target.error);r(e)},e.onsuccess=function(e){var r=e.target.result;r?t(r.primaryKey,r.value).next((function(t){t?r.continue():n()})):n()}}))},t.prototype.Zn=function(t,e){var n=[];return new hc((function(r,i){t.onerror=function(t){i(t.target.error)},t.onsuccess=function(t){var i=t.target.result;if(i){var o=new dc(i),a=e(i.primaryKey,i.value,o);if(a instanceof hc){var s=a.catch((function(t){return o.done(),hc.reject(t)}));n.push(s)}o.vn?r():null===o.Hn?i.continue():i.continue(o.Hn)}else r()}})).next((function(){return hc.xn(n)}))},t.prototype.options=function(t,e){var n=void 0;return void 0!==t&&("string"==typeof t?n=t:e=t),{index:n,range:e}},t.prototype.cursor=function(t){var e="next";if(t.reverse&&(e="prev"),t.index){var n=this.store.index(t.index);return t.es?n.openKeyCursor(t.range,e):n.openCursor(t.range,e)}return this.store.openCursor(t.range,e)},t}();function bc(t){return new hc((function(e,n){t.onsuccess=function(t){var n=t.target.result;e(n)},t.onerror=function(t){var e=Ec(t.target.error);n(e)}}))}var wc=!1;function Ec(t){var e=pc.Mn(E());if(e>=12.2&&e<13){var n="An internal error was encountered in the Indexed Database server";if(t.message.indexOf(n)>=0){var r=new Qo("internal","IOS_INDEXEDDB_BUG1: IndexedDb has thrown '"+n+"'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");return wc||(wc=!0,setTimeout((function(){throw r}),0)),r}}return t}function Ic(){return"undefined"!=typeof window?window:null}function Ac(){return"undefined"!=typeof document?document:null}var _c=function(){function t(t,e,n,r,i){this.rs=t,this._n=e,this.os=n,this.op=r,this.cs=i,this.us=new lc,this.then=this.us.promise.then.bind(this.us.promise),this.us.promise.catch((function(t){}))}return t.hs=function(e,n,r,i,o){var a=new t(e,n,Date.now()+r,i,o);return a.start(r),a},t.prototype.start=function(t){var e=this;this.ls=setTimeout((function(){return e._s()}),t)},t.prototype.Vn=function(){return this._s()},t.prototype.cancel=function(t){null!==this.ls&&(this.clearTimeout(),this.us.reject(new Qo(Yo.CANCELLED,"Operation cancelled"+(t?": "+t:""))))},t.prototype._s=function(){var t=this;this.rs.fs((function(){return null!==t.ls?(t.clearTimeout(),t.op().then((function(e){return t.us.resolve(e)}))):Promise.resolve()}))},t.prototype.clearTimeout=function(){null!==this.ls&&(this.cs(this),clearTimeout(this.ls),this.ls=null)},t}(),Tc=function(){function t(){var t=this;this.ds=Promise.resolve(),this.ws=[],this.Ts=!1,this.Es=[],this.Is=null,this.As=!1,this.Rs=[],this.Ps=new fc(this,"async_queue_retry"),this.gs=function(){var e=Ac();e&&Po("AsyncQueue","Visibility state changed to "+e.visibilityState),t.Ps.gn()};var e=Ac();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.gs)}return Object.defineProperty(t.prototype,"Vs",{get:function(){return this.Ts},enumerable:!1,configurable:!0}),t.prototype.fs=function(t){this.enqueue(t)},t.prototype.ys=function(t){this.ps(),this.vs(t)},t.prototype.bs=function(){if(!this.Ts){this.Ts=!0;var t=Ac();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.gs)}},t.prototype.enqueue=function(t){return this.ps(),this.Ts?new Promise((function(t){})):this.vs(t)},t.prototype.Ss=function(t){var e=this;this.fs((function(){return e.ws.push(t),e.Ds()}))},t.prototype.Ds=function(){return p(this,void 0,void 0,(function(){var t,e=this;return d(this,(function(n){switch(n.label){case 0:if(0===this.ws.length)return[3,5];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.ws[0]()];case 2:return n.sent(),this.ws.shift(),this.Ps.reset(),[3,4];case 3:if(!mc(t=n.sent()))throw t;return Po("AsyncQueue","Operation failed with retryable error: "+t),[3,4];case 4:this.ws.length>0&&this.Ps.An((function(){return e.Ds()})),n.label=5;case 5:return[2]}}))}))},t.prototype.vs=function(t){var e=this,n=this.ds.then((function(){return e.As=!0,t().catch((function(t){throw e.Is=t,e.As=!1,Do("INTERNAL UNHANDLED ERROR: ",function(t){var e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t)),t})).then((function(t){return e.As=!1,t}))}));return this.ds=n,n},t.prototype.Pn=function(t,e,n){var r=this;this.ps(),this.Rs.indexOf(t)>-1&&(e=0);var i=_c.hs(this,t,e,n,(function(t){return r.Cs(t)}));return this.Es.push(i),i},t.prototype.ps=function(){this.Is&&Mo()},t.prototype.Ns=function(){},t.prototype.xs=function(){return p(this,void 0,void 0,(function(){var t;return d(this,(function(e){switch(e.label){case 0:return[4,t=this.ds];case 1:e.sent(),e.label=2;case 2:if(t!==this.ds)return[3,0];e.label=3;case 3:return[2]}}))}))},t.prototype.Fs=function(t){for(var e=0,n=this.Es;e<n.length;e++)if(n[e]._n===t)return!0;return!1},t.prototype.Os=function(t){var e=this;return this.xs().then((function(){e.Es.sort((function(t,e){return t.os-e.os}));for(var n=0,r=e.Es;n<r.length;n++){var i=r[n];if(i.Vn(),"all"!==t&&i._n===t)break}return e.xs()}))},t.prototype.Ms=function(t){this.Rs.push(t)},t.prototype.Cs=function(t){var e=this.Es.indexOf(t);this.Es.splice(e,1)},t}();function kc(t,e){if(Do("AsyncQueue",e+": "+t),mc(t))return new Qo(Yo.UNAVAILABLE,e+": "+t);throw t}var Sc=function(){this.ks=void 0,this.listeners=[]},Nc=function(){this.queries=new Wo((function(t){return Gu(t)}),qu),this.onlineState="Unknown",this.$s=new Set};function Cc(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a,s,u;return d(this,(function(c){switch(c.label){case 0:if(n=jo(t),r=e.query,i=!1,(o=n.queries.get(r))||(i=!0,o=new Sc),!i)return[3,4];c.label=1;case 1:return c.trys.push([1,3,,4]),a=o,[4,n.Ls(r)];case 2:return a.ks=c.sent(),[3,4];case 3:return s=c.sent(),u=kc(s,"Initialization of query '"+Ku(e.query)+"' failed"),[2,void e.onError(u)];case 4:return n.queries.set(r,o),o.listeners.push(e),e.Bs(n.onlineState),o.ks&&e.qs(o.ks)&&Dc(n),[2]}}))}))}function xc(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a;return d(this,(function(s){return n=jo(t),r=e.query,i=!1,(o=n.queries.get(r))&&(a=o.listeners.indexOf(e))>=0&&(o.listeners.splice(a,1),i=0===o.listeners.length),i?[2,(n.queries.delete(r),n.Us(r))]:[2]}))}))}function Oc(t,e){for(var n=jo(t),r=!1,i=0,o=e;i<o.length;i++){var a=o[i],s=a.query,u=n.queries.get(s);if(u){for(var c=0,l=u.listeners;c<l.length;c++)l[c].qs(a)&&(r=!0);u.ks=a}}r&&Dc(n)}function Pc(t,e,n){var r=jo(t),i=r.queries.get(e);if(i)for(var o=0,a=i.listeners;o<a.length;o++)a[o].onError(n);r.queries.delete(e)}function Dc(t){t.$s.forEach((function(t){t.next()}))}var Lc=function(){function t(t,e,n){this.query=t,this.Qs=e,this.Ks=!1,this.Ws=null,this.onlineState="Unknown",this.options=n||{}}return t.prototype.qs=function(t){if(!this.options.includeMetadataChanges){for(var e=[],n=0,r=t.docChanges;n<r.length;n++){var i=r[n];3!==i.type&&e.push(i)}t=new Ra(t.query,t.docs,t.Ut,e,t.Qt,t.fromCache,t.Kt,!0)}var o=!1;return this.Ks?this.js(t)&&(this.Qs.next(t),o=!0):this.Gs(t,this.onlineState)&&(this.zs(t),o=!0),this.Ws=t,o},t.prototype.onError=function(t){this.Qs.error(t)},t.prototype.Bs=function(t){this.onlineState=t;var e=!1;return this.Ws&&!this.Ks&&this.Gs(this.Ws,t)&&(this.zs(this.Ws),e=!0),e},t.prototype.Gs=function(t,e){if(!t.fromCache)return!0;var n="Offline"!==e;return!(this.options.Hs&&n||t.docs.T()&&"Offline"!==e)},t.prototype.js=function(t){if(t.docChanges.length>0)return!0;var e=this.Ws&&this.Ws.hasPendingWrites!==t.hasPendingWrites;return!(!t.Kt&&!e)&&!0===this.options.includeMetadataChanges},t.prototype.zs=function(t){t=Ra.jt(t.query,t.docs,t.Qt,t.fromCache),this.Ks=!0,this.Qs.next(t)},t}(),Rc=function(){function t(t){this.uid=t}return t.prototype.Js=function(){return null!=this.uid},t.prototype.Ys=function(){return this.Js()?"uid:"+this.uid:"anonymous-user"},t.prototype.isEqual=function(t){return t.uid===this.uid},t}();Rc.UNAUTHENTICATED=new Rc(null),Rc.Xs=new Rc("google-credentials-uid"),Rc.Zs=new Rc("first-party-uid");var Mc=function(t,e){this.user=e,this.type="OAuth",this.ti={},this.ti.Authorization="Bearer "+t},Vc=function(){function t(){this.ei=null}return t.prototype.getToken=function(){return Promise.resolve(null)},t.prototype.ni=function(){},t.prototype.si=function(t){this.ei=t,t(Rc.UNAUTHENTICATED)},t.prototype.ii=function(){this.ei=null},t}(),jc=function(){function t(t){var e=this;this.ri=null,this.currentUser=Rc.UNAUTHENTICATED,this.oi=!1,this.ai=0,this.ei=null,this.forceRefresh=!1,this.ri=function(){e.ai++,e.currentUser=e.ci(),e.oi=!0,e.ei&&e.ei(e.currentUser)},this.ai=0,this.auth=t.getImmediate({optional:!0}),this.auth?this.auth.addAuthTokenListener(this.ri):(this.ri(null),t.get().then((function(t){e.auth=t,e.ri&&e.auth.addAuthTokenListener(e.ri)}),(function(){})))}return t.prototype.getToken=function(){var t=this,e=this.ai,n=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(n).then((function(n){return t.ai!==e?(Po("FirebaseCredentialsProvider","getToken aborted due to token change."),t.getToken()):n?(Vo("string"==typeof n.accessToken),new Mc(n.accessToken,t.currentUser)):null})):Promise.resolve(null)},t.prototype.ni=function(){this.forceRefresh=!0},t.prototype.si=function(t){this.ei=t,this.oi&&t(this.currentUser)},t.prototype.ii=function(){this.auth&&this.auth.removeAuthTokenListener(this.ri),this.ri=null,this.ei=null},t.prototype.ci=function(){var t=this.auth&&this.auth.getUid();return Vo(null===t||"string"==typeof t),new Rc(t)},t}(),Fc=function(){function t(t,e){this.ui=t,this.hi=e,this.type="FirstParty",this.user=Rc.Zs}return Object.defineProperty(t.prototype,"ti",{get:function(){var t={"X-Goog-AuthUser":this.hi},e=this.ui.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),t},enumerable:!1,configurable:!0}),t}(),Uc=function(){function t(t,e){this.ui=t,this.hi=e}return t.prototype.getToken=function(){return Promise.resolve(new Fc(this.ui,this.hi))},t.prototype.si=function(t){t(Rc.Zs)},t.prototype.ii=function(){},t.prototype.ni=function(){},t}(),Bc=function(){function t(t,e,n,r){this.batchId=t,this.li=e,this.baseMutations=n,this.mutations=r}return t.prototype._i=function(t,e,n){for(var r=n.fi,i=0;i<this.mutations.length;i++){var o=this.mutations[i];o.key.isEqual(t)&&(e=lu(o,e,r[i]))}return e},t.prototype.di=function(t,e){for(var n=0,r=this.baseMutations;n<r.length;n++){var i=r[n];i.key.isEqual(t)&&(e=fu(i,e,e,this.li))}for(var o=e,a=0,s=this.mutations;a<s.length;a++){var u=s[a];u.key.isEqual(t)&&(e=fu(u,e,o,this.li))}return e},t.prototype.wi=function(t){var e=this,n=t;return this.mutations.forEach((function(r){var i=e.di(r.key,t.get(r.key));i&&(n=n.rt(r.key,i))})),n},t.prototype.keys=function(){return this.mutations.reduce((function(t,e){return t.add(e.key)}),xa())},t.prototype.isEqual=function(t){return this.batchId===t.batchId&&zo(this.mutations,t.mutations,(function(t,e){return pu(t,e)}))&&zo(this.baseMutations,t.baseMutations,(function(t,e){return pu(t,e)}))},t}(),zc=function(){function t(t,e,n,r){this.batch=t,this.Ti=e,this.fi=n,this.Ei=r}return t.from=function(e,n,r){Vo(e.mutations.length===r.length);for(var i=Na,o=e.mutations,a=0;a<o.length;a++)i=i.rt(o[a].key,r[a].version);return new t(e,n,r,i)},t}(),qc=function(){function t(){this.Ii=new Wo((function(t){return t.toString()}),(function(t,e){return t.isEqual(e)})),this.mi=!1}return t.prototype.Ai=function(t){var e=this.Ii.get(t);return e?e.readTime:$o.min()},t.prototype.Ri=function(t,e){this.Pi(),this.Ii.set(t.key,{gi:t,readTime:e})},t.prototype.Vi=function(t,e){void 0===e&&(e=null),this.Pi(),this.Ii.set(t,{gi:null,readTime:e})},t.prototype.yi=function(t,e){this.Pi();var n=this.Ii.get(e);return void 0!==n?hc.resolve(n.gi):this.pi(t,e)},t.prototype.getEntries=function(t,e){return this.vi(t,e)},t.prototype.apply=function(t){return this.Pi(),this.mi=!0,this.bi(t)},t.prototype.Pi=function(){},t}();function Gc(t){return new ps(t,!0)}function Kc(t){return function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=t,r=0,i=["next","error","complete"];r<i.length;r++){var o=i[r];if(o in n&&"function"==typeof n[o])return!0}return!1}(t)}var Hc="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.",Wc=function(){function t(){this.Si=[]}return t.prototype.Di=function(t){this.Si.push(t)},t.prototype.Ci=function(){this.Si.forEach((function(t){return t()}))},t}(),Yc=function(){function t(t,e,n){this.Ni=t,this.xi=e,this.Fi=n}return t.prototype.Oi=function(t,e){var n=this;return this.xi.Mi(t,e).next((function(r){return n.ki(t,e,r)}))},t.prototype.ki=function(t,e,n){return this.Ni.yi(t,e).next((function(t){for(var r=0,i=n;r<i.length;r++)t=i[r].di(e,t);return t}))},t.prototype.$i=function(t,e,n){var r=Ta();return e.forEach((function(t,e){for(var i=0,o=n;i<o.length;i++)e=o[i].di(t,e);r=r.rt(t,e)})),r},t.prototype.Li=function(t,e){var n=this;return this.Ni.getEntries(t,e).next((function(e){return n.Bi(t,e)}))},t.prototype.Bi=function(t,e){var n=this;return this.xi.qi(t,e).next((function(r){var i=n.$i(t,e,r),o=_a();return i.forEach((function(t,e){e||(e=new Nu(t,$o.min())),o=o.rt(t,e)})),o}))},t.prototype.Ui=function(t,e,n){return function(t){return na.G(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Qi(t,e.path):Vu(e)?this.Ki(t,e,n):this.Wi(t,e,n)},t.prototype.Qi=function(t,e){return this.Oi(t,new na(e)).next((function(t){var e=Sa();return t instanceof Su&&(e=e.rt(t.key,t)),e}))},t.prototype.Ki=function(t,e,n){var r=this,i=e.collectionGroup,o=Sa();return this.Fi.ji(t,i).next((function(a){return hc.forEach(a,(function(a){var s=function(t,e){return new xu(e,null,t.rn.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,a.child(i));return r.Wi(t,s,n).next((function(t){t.forEach((function(t,e){o=o.rt(t,e)}))}))})).next((function(){return o}))}))},t.prototype.Wi=function(t,e,n){var r,i,o=this;return this.Ni.Ui(t,e,n).next((function(n){return r=n,o.xi.Gi(t,e)})).next((function(e){return i=e,o.zi(t,i,r).next((function(t){r=t;for(var e=0,n=i;e<n.length;e++)for(var o=n[e],a=0,s=o.mutations;a<s.length;a++){var u=s[a],c=u.key,l=r.get(c),f=fu(u,l,l,o.li);r=f instanceof Su?r.rt(c,f):r.remove(c)}}))})).next((function(){return r.forEach((function(t,n){Hu(e,n)||(r=r.remove(t))})),r}))},t.prototype.zi=function(t,e,n){for(var r=xa(),i=0,o=e;i<o.length;i++)for(var a=0,s=o[i].mutations;a<s.length;a++){var u=s[a];u instanceof mu&&null===n.get(u.key)&&(r=r.add(u.key))}var c=n;return this.Ni.getEntries(t,r).next((function(t){return t.forEach((function(t,e){null!==e&&e instanceof Su&&(c=c.rt(t,e))})),c}))},t}(),Qc=function(){function t(t,e,n,r){this.targetId=t,this.fromCache=e,this.Hi=n,this.Ji=r}return t.Yi=function(e,n){for(var r=xa(),i=xa(),o=0,a=n.docChanges;o<a.length;o++){var s=a[o];switch(s.type){case 0:r=r.add(s.doc.key);break;case 1:i=i.add(s.doc.key)}}return new t(e,n.fromCache,r,i)},t}(),Xc=function(){function t(t,e){var n=this;this.previousValue=t,e&&(e.Xi=function(t){return n.Zi(t)},this.tr=function(t){return e.er(t)})}return t.prototype.Zi=function(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue},t.prototype.next=function(){var t=++this.previousValue;return this.tr&&this.tr(t),t},t}();function $c(t,e){var n=t[0],r=t[1],i=e[0],o=e[1],a=Bo(n,i);return 0===a?Bo(r,o):a}Xc.nr=-1;var Jc=function(){function t(t){this.sr=t,this.buffer=new Ea($c),this.ir=0}return t.prototype.rr=function(){return++this.ir},t.prototype.ar=function(t){var e=[t,this.rr()];if(this.buffer.size<this.sr)this.buffer=this.buffer.add(e);else{var n=this.buffer.last();$c(e,n)<0&&(this.buffer=this.buffer.delete(n).add(e))}},Object.defineProperty(t.prototype,"maxValue",{get:function(){return this.buffer.last()[0]},enumerable:!1,configurable:!0}),t}(),Zc={cr:!1,ur:0,hr:0,lr:0},tl=function(){function t(t,e,n){this._r=t,this.dr=e,this.wr=n}return t.Tr=function(e){return new t(e,t.Er,t.Ir)},t}();tl.Er=10,tl.Ir=1e3,tl.mr=new tl(41943040,tl.Er,tl.Ir),tl.Ar=new tl(-1,0,0);var el=function(){function t(t,e){this.Rr=t,this.rs=e,this.Pr=!1,this.gr=null}return t.prototype.start=function(t){-1!==this.Rr.params._r&&this.Vr(t)},t.prototype.stop=function(){this.gr&&(this.gr.cancel(),this.gr=null)},Object.defineProperty(t.prototype,"yr",{get:function(){return null!==this.gr},enumerable:!1,configurable:!0}),t.prototype.Vr=function(t){var e=this,n=this.Pr?3e5:6e4;Po("LruGarbageCollector","Garbage collection scheduled in "+n+"ms"),this.gr=this.rs.Pn("lru_garbage_collection",n,(function(){return p(e,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:this.gr=null,this.Pr=!0,n.label=1;case 1:return n.trys.push([1,3,,7]),[4,t.pr(this.Rr)];case 2:return n.sent(),[3,7];case 3:return mc(e=n.sent())?(Po("LruGarbageCollector","Ignoring IndexedDB error during garbage collection: ",e),[3,6]):[3,4];case 4:return[4,Cf(e)];case 5:n.sent(),n.label=6;case 6:return[3,7];case 7:return[4,this.Vr(t)];case 8:return n.sent(),[2]}}))}))}))},t}(),nl=function(){function t(t,e){this.vr=t,this.params=e}return t.prototype.br=function(t,e){return this.vr.Sr(t).next((function(t){return Math.floor(e/100*t)}))},t.prototype.Dr=function(t,e){var n=this;if(0===e)return hc.resolve(Xc.nr);var r=new Jc(e);return this.vr.De(t,(function(t){return r.ar(t.sequenceNumber)})).next((function(){return n.vr.Cr(t,(function(t){return r.ar(t)}))})).next((function(){return r.maxValue}))},t.prototype.Nr=function(t,e,n){return this.vr.Nr(t,e,n)},t.prototype.Fr=function(t,e){return this.vr.Fr(t,e)},t.prototype.Or=function(t,e){var n=this;return-1===this.params._r?(Po("LruGarbageCollector","Garbage collection skipped; disabled"),hc.resolve(Zc)):this.Mr(t).next((function(r){return r<n.params._r?(Po("LruGarbageCollector","Garbage collection skipped; Cache size "+r+" is lower than threshold "+n.params._r),Zc):n.kr(t,e)}))},t.prototype.Mr=function(t){return this.vr.Mr(t)},t.prototype.kr=function(t,e){var n,r,i,o,a,s,u,c=this,l=Date.now();return this.br(t,this.params.dr).next((function(e){return e>c.params.wr?(Po("LruGarbageCollector","Capping sequence numbers to collect down to the maximum of "+c.params.wr+" from "+e),r=c.params.wr):r=e,o=Date.now(),c.Dr(t,r)})).next((function(r){return n=r,a=Date.now(),c.Nr(t,n,e)})).next((function(e){return i=e,s=Date.now(),c.Fr(t,n)})).next((function(t){return u=Date.now(),Oo()<=z.DEBUG&&Po("LruGarbageCollector","LRU Garbage Collection\n\tCounted targets in "+(o-l)+"ms\n\tDetermined least recently used "+r+" in "+(a-o)+"ms\n\tRemoved "+i+" targets in "+(s-a)+"ms\n\tRemoved "+t+" documents in "+(u-s)+"ms\nTotal Duration: "+(u-l)+"ms"),hc.resolve({cr:!0,ur:r,hr:i,lr:t})}))},t}();function rl(t){for(var e="",n=0;n<t.length;n++)e.length>0&&(e=ol(e)),e=il(t.get(n),e);return ol(e)}function il(t,e){for(var n=e,r=t.length,i=0;i<r;i++){var o=t.charAt(i);switch(o){case"\0":n+="";break;case"":n+="";break;default:n+=o}}return n}function ol(t){return t+""}function al(t){var e=t.length;if(Vo(e>=2),2===e)return Vo(""===t.charAt(0)&&""===t.charAt(1)),Zo.$();for(var n=e-2,r=[],i="",o=0;o<e;){var a=t.indexOf("",o);switch((a<0||a>n)&&Mo(),t.charAt(a+1)){case"":var s=t.substring(o,a),u=void 0;0===i.length?u=s:(u=i+=s,i=""),r.push(u);break;case"":i+=t.substring(o,a),i+="\0";break;case"":i+=t.substring(o,a+1);break;default:Mo()}o=a+2}return new Zo(r)}var sl=function(t){this.$r=t};function ul(t,e){if(e.document)return function(t,e,n){var r=_s(t,e.name),i=ws(e.updateTime),o=new Au({mapValue:{fields:e.fields}});return new Su(r,i,o,{hasCommittedMutations:!!n})}(t.$r,e.document,!!e.hasCommittedMutations);if(e.noDocument){var n=na.H(e.noDocument.path),r=pl(e.noDocument.readTime);return new Nu(n,r,{hasCommittedMutations:!!e.hasCommittedMutations})}if(e.unknownDocument){var i=na.H(e.unknownDocument.path),o=pl(e.unknownDocument.version);return new Cu(i,o)}return Mo()}function cl(t,e,n){var r=ll(n),i=e.key.path.S().O();if(e instanceof Su){var o=function(t,e){return{name:As(t,e.key),fields:e.sn().mapValue.fields,updateTime:ys(t,e.version.P())}}(t.$r,e),a=e.hasCommittedMutations;return new Ul(null,null,o,a,r,i)}if(e instanceof Nu){var s=e.key.path.O(),u=hl(e.version),c=e.hasCommittedMutations;return new Ul(null,new jl(s,u),null,c,r,i)}if(e instanceof Cu){var l=e.key.path.O(),f=hl(e.version);return new Ul(new Fl(l,f),null,null,!0,r,i)}return Mo()}function ll(t){var e=t.P();return[e.seconds,e.nanoseconds]}function fl(t){var e=new Xo(t[0],t[1]);return $o.m(e)}function hl(t){var e=t.P();return new Dl(e.seconds,e.nanoseconds)}function pl(t){var e=new Xo(t.seconds,t.nanoseconds);return $o.m(e)}function dl(t,e){var n=(e.baseMutations||[]).map((function(e){return Os(t.$r,e)})),r=e.mutations.map((function(e){return Os(t.$r,e)})),i=Xo.fromMillis(e.localWriteTimeMs);return new Bc(e.batchId,i,n,r)}function vl(t){var e,n,r=pl(t.readTime),i=void 0!==t.lastLimboFreeSnapshotVersion?pl(t.lastLimboFreeSnapshotVersion):$o.min();return void 0!==t.query.documents?(Vo(1===(n=t.query).documents.length),e=Fu(Pu(ks(n.documents[0])))):e=function(t){return Fu(Ls(t))}(t.query),new da(e,t.targetId,0,t.lastListenSequenceNumber,r,i,fa.fromBase64String(t.resumeToken))}function ml(t,e){var n,r=hl(e.et),i=hl(e.lastLimboFreeSnapshotVersion);n=la(e.target)?Ps(t.$r,e.target):Ds(t.$r,e.target);var o=e.resumeToken.toBase64();return new zl(e.targetId,ua(e.target),r,o,e.sequenceNumber,i,n)}function yl(t){var e=Ls({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?Uu(e,e.limit,"L"):e}var gl=function(){function t(t,e,n,r){this.userId=t,this.serializer=e,this.Fi=n,this.Lr=r,this.Br={}}return t.qr=function(e,n,r,i){return Vo(""!==e.uid),new t(e.Js()?e.uid:"",n,r,i)},t.prototype.Ur=function(t){var e=!0,n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return El(t).ns({index:Ml.userMutationsIndex,range:n},(function(t,n,r){e=!1,r.done()})).next((function(){return e}))},t.prototype.Qr=function(t,e,n,r){var i=this,o=Il(t),a=El(t);return a.add({}).next((function(s){Vo("number"==typeof s);for(var u=new Bc(s,e,n,r),c=function(t,e,n){var r=n.baseMutations.map((function(e){return xs(t.$r,e)})),i=n.mutations.map((function(e){return xs(t.$r,e)}));return new Ml(e,n.batchId,n.li.toMillis(),r,i)}(i.serializer,i.userId,u),l=[],f=new Ea((function(t,e){return Bo(t.M(),e.M())})),h=0,p=r;h<p.length;h++){var d=p[h],v=Vl.key(i.userId,d.key.path,s);f=f.add(d.key.path.S()),l.push(a.put(c)),l.push(o.put(v,Vl.PLACEHOLDER))}return f.forEach((function(e){l.push(i.Fi.Kr(t,e))})),t.Di((function(){i.Br[s]=u.keys()})),hc.xn(l).next((function(){return u}))}))},t.prototype.Wr=function(t,e){var n=this;return El(t).get(e).next((function(t){return t?(Vo(t.userId===n.userId),dl(n.serializer,t)):null}))},t.prototype.jr=function(t,e){var n=this;return this.Br[e]?hc.resolve(this.Br[e]):this.Wr(t,e).next((function(t){if(t){var r=t.keys();return n.Br[e]=r,r}return null}))},t.prototype.Gr=function(t,e){var n=this,r=e+1,i=IDBKeyRange.lowerBound([this.userId,r]),o=null;return El(t).ns({index:Ml.userMutationsIndex,range:i},(function(t,e,i){e.userId===n.userId&&(Vo(e.batchId>=r),o=dl(n.serializer,e)),i.done()})).next((function(){return o}))},t.prototype.zr=function(t){var e=IDBKeyRange.upperBound([this.userId,Number.POSITIVE_INFINITY]),n=-1;return El(t).ns({index:Ml.userMutationsIndex,range:e,reverse:!0},(function(t,e,r){n=e.batchId,r.done()})).next((function(){return n}))},t.prototype.Hr=function(t){var e=this,n=IDBKeyRange.bound([this.userId,-1],[this.userId,Number.POSITIVE_INFINITY]);return El(t).Xn(Ml.userMutationsIndex,n).next((function(t){return t.map((function(t){return dl(e.serializer,t)}))}))},t.prototype.Mi=function(t,e){var n=this,r=Vl.prefixForPath(this.userId,e.path),i=IDBKeyRange.lowerBound(r),o=[];return Il(t).ns({range:i},(function(r,i,a){var s=r[0],u=r[1],c=r[2],l=al(u);if(s===n.userId&&e.path.isEqual(l))return El(t).get(c).next((function(t){if(!t)throw Mo();Vo(t.userId===n.userId),o.push(dl(n.serializer,t))}));a.done()})).next((function(){return o}))},t.prototype.qi=function(t,e){var n=this,r=new Ea(Bo),i=[];return e.forEach((function(e){var o=Vl.prefixForPath(n.userId,e.path),a=IDBKeyRange.lowerBound(o),s=Il(t).ns({range:a},(function(t,i,o){var a=t[0],s=t[1],u=t[2],c=al(s);a===n.userId&&e.path.isEqual(c)?r=r.add(u):o.done()}));i.push(s)})),hc.xn(i).next((function(){return n.Jr(t,r)}))},t.prototype.Gi=function(t,e){var n=this,r=e.path,i=r.length+1,o=Vl.prefixForPath(this.userId,r),a=IDBKeyRange.lowerBound(o),s=new Ea(Bo);return Il(t).ns({range:a},(function(t,e,o){var a=t[0],u=t[1],c=t[2],l=al(u);a===n.userId&&r.N(l)?l.length===i&&(s=s.add(c)):o.done()})).next((function(){return n.Jr(t,s)}))},t.prototype.Jr=function(t,e){var n=this,r=[],i=[];return e.forEach((function(e){i.push(El(t).get(e).next((function(t){if(null===t)throw Mo();Vo(t.userId===n.userId),r.push(dl(n.serializer,t))})))})),hc.xn(i).next((function(){return r}))},t.prototype.Yr=function(t,e){var n=this;return wl(t.Xr,this.userId,e).next((function(r){return t.Di((function(){n.Zr(e.batchId)})),hc.forEach(r,(function(e){return n.Lr.eo(t,e)}))}))},t.prototype.Zr=function(t){delete this.Br[t]},t.prototype.no=function(t){var e=this;return this.Ur(t).next((function(n){if(!n)return hc.resolve();var r=IDBKeyRange.lowerBound(Vl.prefixForUser(e.userId)),i=[];return Il(t).ns({range:r},(function(t,n,r){if(t[0]===e.userId){var o=al(t[1]);i.push(o)}else r.done()})).next((function(){Vo(0===i.length)}))}))},t.prototype.so=function(t,e){return bl(t,this.userId,e)},t.prototype.io=function(t){var e=this;return Al(t).get(this.userId).next((function(t){return t||new Rl(e.userId,-1,"")}))},t}();function bl(t,e,n){var r=Vl.prefixForPath(e,n.path),i=r[1],o=IDBKeyRange.lowerBound(r),a=!1;return Il(t).ns({range:o,es:!0},(function(t,n,r){var o=t[0],s=t[1];t[2],o===e&&s===i&&(a=!0),r.done()})).next((function(){return a}))}function wl(t,e,n){var r=t.store(Ml.store),i=t.store(Vl.store),o=[],a=IDBKeyRange.only(n.batchId),s=0,u=r.ns({range:a},(function(t,e,n){return s++,n.delete()}));o.push(u.next((function(){Vo(1===s)})));for(var c=[],l=0,f=n.mutations;l<f.length;l++){var h=f[l],p=Vl.key(e,h.key.path,n.batchId);o.push(i.delete(p)),c.push(h.key)}return hc.xn(o).next((function(){return c}))}function El(t){return lf.qn(t,Ml.store)}function Il(t){return lf.qn(t,Vl.store)}function Al(t){return lf.qn(t,Rl.store)}var _l=function(){function t(t,e){this.serializer=t,this.Fi=e}return t.prototype.Ri=function(t,e,n){return Sl(t).put(Nl(e),n)},t.prototype.Vi=function(t,e){var n=Sl(t),r=Nl(e);return n.delete(r)},t.prototype.updateMetadata=function(t,e){var n=this;return this.getMetadata(t).next((function(r){return r.byteSize+=e,n.ro(t,r)}))},t.prototype.yi=function(t,e){var n=this;return Sl(t).get(Nl(e)).next((function(t){return n.oo(t)}))},t.prototype.ao=function(t,e){var n=this;return Sl(t).get(Nl(e)).next((function(t){var e=n.oo(t);return e?{gi:e,size:Cl(t)}:null}))},t.prototype.getEntries=function(t,e){var n=this,r=Ta();return this.co(t,e,(function(t,e){var i=n.oo(e);r=r.rt(t,i)})).next((function(){return r}))},t.prototype.uo=function(t,e){var n=this,r=Ta(),i=new ga(na.V);return this.co(t,e,(function(t,e){var o=n.oo(e);o?(r=r.rt(t,o),i=i.rt(t,Cl(e))):(r=r.rt(t,null),i=i.rt(t,0))})).next((function(){return{ho:r,lo:i}}))},t.prototype.co=function(t,e,n){if(e.T())return hc.resolve();var r=IDBKeyRange.bound(e.first().path.O(),e.last().path.O()),i=e.lt(),o=i.Et();return Sl(t).ns({range:r},(function(t,e,r){for(var a=na.H(t);o&&na.V(o,a)<0;)n(o,null),o=i.Et();o&&o.isEqual(a)&&(n(o,e),o=i.It()?i.Et():null),o?r.Jn(o.path.O()):r.done()})).next((function(){for(;o;)n(o,null),o=i.It()?i.Et():null}))},t.prototype.Ui=function(t,e,n){var r=this,i=Sa(),o=e.path.length+1,a={};if(n.isEqual($o.min())){var s=e.path.O();a.range=IDBKeyRange.lowerBound(s)}else{var u=e.path.O(),c=ll(n);a.range=IDBKeyRange.lowerBound([u,c],!0),a.index=Ul.collectionReadTimeIndex}return Sl(t).ns(a,(function(t,n,a){if(t.length===o){var s=ul(r.serializer,n);e.path.N(s.key.path)?s instanceof Su&&Hu(e,s)&&(i=i.rt(s.key,s)):a.done()}})).next((function(){return i}))},t.prototype._o=function(t){return new Tl(this,!!t&&t.fo)},t.prototype.wo=function(t){return this.getMetadata(t).next((function(t){return t.byteSize}))},t.prototype.getMetadata=function(t){return kl(t).get(Bl.key).next((function(t){return Vo(!!t),t}))},t.prototype.ro=function(t,e){return kl(t).put(Bl.key,e)},t.prototype.oo=function(t){if(t){var e=ul(this.serializer,t);return e instanceof Nu&&e.version.isEqual($o.min())?null:e}return null},t}(),Tl=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).To=e,r.fo=n,r.Eo=new Wo((function(t){return t.toString()}),(function(t,e){return t.isEqual(e)})),r}return f(e,t),e.prototype.bi=function(t){var e=this,n=[],r=0,i=new Ea((function(t,e){return Bo(t.M(),e.M())}));return this.Ii.forEach((function(o,a){var s=e.Eo.get(o);if(a.gi){var u=cl(e.To.serializer,a.gi,e.Ai(o));i=i.add(o.path.S());var c=Cl(u);r+=c-s,n.push(e.To.Ri(t,o,u))}else if(r-=s,e.fo){var l=cl(e.To.serializer,new Nu(o,$o.min()),e.Ai(o));n.push(e.To.Ri(t,o,l))}else n.push(e.To.Vi(t,o))})),i.forEach((function(r){n.push(e.To.Fi.Kr(t,r))})),n.push(this.To.updateMetadata(t,r)),hc.xn(n)},e.prototype.pi=function(t,e){var n=this;return this.To.ao(t,e).next((function(t){return null===t?(n.Eo.set(e,0),null):(n.Eo.set(e,t.size),t.gi)}))},e.prototype.vi=function(t,e){var n=this;return this.To.uo(t,e).next((function(t){var e=t.ho;return t.lo.forEach((function(t,e){n.Eo.set(t,e)})),e}))},e}(qc);function kl(t){return lf.qn(t,Bl.store)}function Sl(t){return lf.qn(t,Ul.store)}function Nl(t){return t.path.O()}function Cl(t){var e;if(t.document)e=t.document;else if(t.unknownDocument)e=t.unknownDocument;else{if(!t.noDocument)throw Mo();e=t.noDocument}return JSON.stringify(e).length}var xl=function(){function t(){this.Io=new Ol}return t.prototype.Kr=function(t,e){return this.Io.add(e),hc.resolve()},t.prototype.ji=function(t,e){return hc.resolve(this.Io.getEntries(e))},t}(),Ol=function(){function t(){this.index={}}return t.prototype.add=function(t){var e=t.C(),n=t.S(),r=this.index[e]||new Ea(Zo.V),i=!r.has(n);return this.index[e]=r.add(n),i},t.prototype.has=function(t){var e=t.C(),n=t.S(),r=this.index[e];return r&&r.has(n)},t.prototype.getEntries=function(t){return(this.index[t]||new Ea(Zo.V)).O()},t}(),Pl=function(){function t(t){this.serializer=t}return t.prototype.createOrUpgrade=function(t,e,n,r){var i=this;Vo(n<r&&n>=0&&r<=11);var o=new yc("createOrUpgrade",e);n<1&&r>=1&&(function(t){t.createObjectStore(Ll.store)}(t),function(t){t.createObjectStore(Rl.store,{keyPath:Rl.keyPath}),t.createObjectStore(Ml.store,{keyPath:Ml.keyPath,autoIncrement:!0}).createIndex(Ml.userMutationsIndex,Ml.userMutationsKeyPath,{unique:!0}),t.createObjectStore(Vl.store)}(t),Hl(t),function(t){t.createObjectStore(Ul.store)}(t));var a=hc.resolve();return n<3&&r>=3&&(0!==n&&(function(t){t.deleteObjectStore(ql.store),t.deleteObjectStore(zl.store),t.deleteObjectStore(Gl.store)}(t),Hl(t)),a=a.next((function(){return function(t){var e=t.store(Gl.store),n=new Gl(0,0,$o.min().P(),0);return e.put(Gl.key,n)}(o)}))),n<4&&r>=4&&(0!==n&&(a=a.next((function(){return function(t,e){return e.store(Ml.store).Xn().next((function(n){t.deleteObjectStore(Ml.store),t.createObjectStore(Ml.store,{keyPath:Ml.keyPath,autoIncrement:!0}).createIndex(Ml.userMutationsIndex,Ml.userMutationsKeyPath,{unique:!0});var r=e.store(Ml.store),i=n.map((function(t){return r.put(t)}));return hc.xn(i)}))}(t,o)}))),a=a.next((function(){!function(t){t.createObjectStore(Wl.store,{keyPath:Wl.keyPath})}(t)}))),n<5&&r>=5&&(a=a.next((function(){return i.removeAcknowledgedMutations(o)}))),n<6&&r>=6&&(a=a.next((function(){return function(t){t.createObjectStore(Bl.store)}(t),i.addDocumentGlobal(o)}))),n<7&&r>=7&&(a=a.next((function(){return i.ensureSequenceNumbers(o)}))),n<8&&r>=8&&(a=a.next((function(){return i.createCollectionParentIndex(t,o)}))),n<9&&r>=9&&(a=a.next((function(){!function(t){t.objectStoreNames.contains("remoteDocumentChanges")&&t.deleteObjectStore("remoteDocumentChanges")}(t),function(t){var e=t.objectStore(Ul.store);e.createIndex(Ul.readTimeIndex,Ul.readTimeIndexPath,{unique:!1}),e.createIndex(Ul.collectionReadTimeIndex,Ul.collectionReadTimeIndexPath,{unique:!1})}(e)}))),n<10&&r>=10&&(a=a.next((function(){return i.rewriteCanonicalIds(o)}))),n<11&&r>=11&&(a=a.next((function(){!function(t){t.createObjectStore(Yl.store,{keyPath:Yl.keyPath})}(t),function(t){t.createObjectStore(Ql.store,{keyPath:Ql.keyPath})}(t)}))),a},t.prototype.addDocumentGlobal=function(t){var e=0;return t.store(Ul.store).ns((function(t,n){e+=Cl(n)})).next((function(){var n=new Bl(e);return t.store(Bl.store).put(Bl.key,n)}))},t.prototype.removeAcknowledgedMutations=function(t){var e=this,n=t.store(Rl.store),r=t.store(Ml.store);return n.Xn().next((function(n){return hc.forEach(n,(function(n){var i=IDBKeyRange.bound([n.userId,-1],[n.userId,n.lastAcknowledgedBatchId]);return r.Xn(Ml.userMutationsIndex,i).next((function(r){return hc.forEach(r,(function(r){Vo(r.userId===n.userId);var i=dl(e.serializer,r);return wl(t,n.userId,i).next((function(){}))}))}))}))}))},t.prototype.ensureSequenceNumbers=function(t){var e=t.store(ql.store),n=t.store(Ul.store);return t.store(Gl.store).get(Gl.key).next((function(t){var r=[];return n.ns((function(n,i){var o=new Zo(n),a=function(t){return[0,rl(t)]}(o);r.push(e.get(a).next((function(n){return n?hc.resolve():function(n){return e.put(new ql(0,rl(n),t.highestListenSequenceNumber))}(o)})))})).next((function(){return hc.xn(r)}))}))},t.prototype.createCollectionParentIndex=function(t,e){t.createObjectStore(Kl.store,{keyPath:Kl.keyPath});var n=e.store(Kl.store),r=new Ol,i=function(t){if(r.add(t)){var e=t.C(),i=t.S();return n.put({collectionId:e,parent:rl(i)})}};return e.store(Ul.store).ns({es:!0},(function(t,e){var n=new Zo(t);return i(n.S())})).next((function(){return e.store(Vl.store).ns({es:!0},(function(t,e){t[0];var n=t[1],r=(t[2],al(n));return i(r.S())}))}))},t.prototype.rewriteCanonicalIds=function(t){var e=this,n=t.store(zl.store);return n.ns((function(t,r){var i=vl(r),o=ml(e.serializer,i);return n.put(o)}))},t}(),Dl=function(t,e){this.seconds=t,this.nanoseconds=e},Ll=function(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n};Ll.store="owner",Ll.key="owner";var Rl=function(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n};Rl.store="mutationQueues",Rl.keyPath="userId";var Ml=function(t,e,n,r,i){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=r,this.mutations=i};Ml.store="mutations",Ml.keyPath="batchId",Ml.userMutationsIndex="userMutationsIndex",Ml.userMutationsKeyPath=["userId","batchId"];var Vl=function(){function t(){}return t.prefixForUser=function(t){return[t]},t.prefixForPath=function(t,e){return[t,rl(e)]},t.key=function(t,e,n){return[t,rl(e),n]},t}();Vl.store="documentMutations",Vl.PLACEHOLDER=new Vl;var jl=function(t,e){this.path=t,this.readTime=e},Fl=function(t,e){this.path=t,this.version=e},Ul=function(t,e,n,r,i,o){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r,this.readTime=i,this.parentPath=o};Ul.store="remoteDocuments",Ul.readTimeIndex="readTimeIndex",Ul.readTimeIndexPath="readTime",Ul.collectionReadTimeIndex="collectionReadTimeIndex",Ul.collectionReadTimeIndexPath=["parentPath","readTime"];var Bl=function(t){this.byteSize=t};Bl.store="remoteDocumentGlobal",Bl.key="remoteDocumentGlobalKey";var zl=function(t,e,n,r,i,o,a){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=o,this.query=a};zl.store="targets",zl.keyPath="targetId",zl.queryTargetsIndexName="queryTargetsIndex",zl.queryTargetsKeyPath=["canonicalId","targetId"];var ql=function(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n};ql.store="targetDocuments",ql.keyPath=["targetId","path"],ql.documentTargetsIndex="documentTargetsIndex",ql.documentTargetsKeyPath=["path","targetId"];var Gl=function(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r};Gl.key="targetGlobalKey",Gl.store="targetGlobal";var Kl=function(t,e){this.collectionId=t,this.parent=e};function Hl(t){t.createObjectStore(ql.store,{keyPath:ql.keyPath}).createIndex(ql.documentTargetsIndex,ql.documentTargetsKeyPath,{unique:!0}),t.createObjectStore(zl.store,{keyPath:zl.keyPath}).createIndex(zl.queryTargetsIndexName,zl.queryTargetsKeyPath,{unique:!0}),t.createObjectStore(Gl.store)}Kl.store="collectionParents",Kl.keyPath=["collectionId","parent"];var Wl=function(t,e,n,r){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r};Wl.store="clientMetadata",Wl.keyPath="clientId";var Yl=function(t,e,n){this.bundleId=t,this.createTime=e,this.version=n};Yl.store="bundles",Yl.keyPath="bundleId";var Ql=function(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n};Ql.store="namedQueries",Ql.keyPath="name";var Xl=g(g(g(g([Rl.store,Ml.store,Vl.store,Ul.store,zl.store,Ll.store,Gl.store,ql.store],[Wl.store]),[Bl.store]),[Kl.store]),[Yl.store,Ql.store]),$l=function(){function t(t){this.serializer=t}return t.prototype.mo=function(t,e){return Jl(t).get(e).next((function(t){if(t)return{id:(e=t).bundleId,createTime:pl(e.createTime),version:e.version};var e}))},t.prototype.Ao=function(t,e){return Jl(t).put({bundleId:(n=e).id,createTime:hl(ws(n.createTime)),version:n.version});var n},t.prototype.Ro=function(t,e){return Zl(t).get(e).next((function(t){if(t)return{name:(e=t).name,query:yl(e.bundledQuery),readTime:pl(e.readTime)};var e}))},t.prototype.Po=function(t,e){return Zl(t).put(function(t){return{name:t.name,readTime:hl(ws(t.readTime)),bundledQuery:t.bundledQuery}}(e))},t}();function Jl(t){return lf.qn(t,Yl.store)}function Zl(t){return lf.qn(t,Ql.store)}var tf=function(){function t(){this.Vo=new Ol}return t.prototype.Kr=function(t,e){var n=this;if(!this.Vo.has(e)){var r=e.C(),i=e.S();t.Di((function(){n.Vo.add(e)}));var o={collectionId:r,parent:rl(i)};return ef(t).put(o)}return hc.resolve()},t.prototype.ji=function(t,e){var n=[],r=IDBKeyRange.bound([e,""],[qo(e),""],!1,!0);return ef(t).Xn(r).next((function(t){for(var r=0,i=t;r<i.length;r++){var o=i[r];if(o.collectionId!==e)break;n.push(al(o.parent))}return n}))},t}();function ef(t){return lf.qn(t,Kl.store)}var nf=function(){function t(t){this.yo=t}return t.prototype.next=function(){return this.yo+=2,this.yo},t.po=function(){return new t(0)},t.vo=function(){return new t(-1)},t}(),rf=function(){function t(t,e){this.Lr=t,this.serializer=e}return t.prototype.bo=function(t){var e=this;return this.So(t).next((function(n){var r=new nf(n.highestTargetId);return n.highestTargetId=r.next(),e.Do(t,n).next((function(){return n.highestTargetId}))}))},t.prototype.Co=function(t){return this.So(t).next((function(t){return $o.m(new Xo(t.lastRemoteSnapshotVersion.seconds,t.lastRemoteSnapshotVersion.nanoseconds))}))},t.prototype.No=function(t){return this.So(t).next((function(t){return t.highestListenSequenceNumber}))},t.prototype.xo=function(t,e,n){var r=this;return this.So(t).next((function(i){return i.highestListenSequenceNumber=e,n&&(i.lastRemoteSnapshotVersion=n.P()),e>i.highestListenSequenceNumber&&(i.highestListenSequenceNumber=e),r.Do(t,i)}))},t.prototype.Fo=function(t,e){var n=this;return this.Oo(t,e).next((function(){return n.So(t).next((function(r){return r.targetCount+=1,n.Mo(e,r),n.Do(t,r)}))}))},t.prototype.ko=function(t,e){return this.Oo(t,e)},t.prototype.$o=function(t,e){var n=this;return this.Lo(t,e.targetId).next((function(){return of(t).delete(e.targetId)})).next((function(){return n.So(t)})).next((function(e){return Vo(e.targetCount>0),e.targetCount-=1,n.Do(t,e)}))},t.prototype.Nr=function(t,e,n){var r=this,i=0,o=[];return of(t).ns((function(a,s){var u=vl(s);u.sequenceNumber<=e&&null===n.get(u.targetId)&&(i++,o.push(r.$o(t,u)))})).next((function(){return hc.xn(o)})).next((function(){return i}))},t.prototype.De=function(t,e){return of(t).ns((function(t,n){var r=vl(n);e(r)}))},t.prototype.So=function(t){return af(t).get(Gl.key).next((function(t){return Vo(null!==t),t}))},t.prototype.Do=function(t,e){return af(t).put(Gl.key,e)},t.prototype.Oo=function(t,e){return of(t).put(ml(this.serializer,e))},t.prototype.Mo=function(t,e){var n=!1;return t.targetId>e.highestTargetId&&(e.highestTargetId=t.targetId,n=!0),t.sequenceNumber>e.highestListenSequenceNumber&&(e.highestListenSequenceNumber=t.sequenceNumber,n=!0),n},t.prototype.Bo=function(t){return this.So(t).next((function(t){return t.targetCount}))},t.prototype.qo=function(t,e){var n=ua(e),r=IDBKeyRange.bound([n,Number.NEGATIVE_INFINITY],[n,Number.POSITIVE_INFINITY]),i=null;return of(t).ns({range:r,index:zl.queryTargetsIndexName},(function(t,n,r){var o=vl(n);ca(e,o.target)&&(i=o,r.done())})).next((function(){return i}))},t.prototype.Uo=function(t,e,n){var r=this,i=[],o=sf(t);return e.forEach((function(e){var a=rl(e.path);i.push(o.put(new ql(n,a))),i.push(r.Lr.Qo(t,n,e))})),hc.xn(i)},t.prototype.Ko=function(t,e,n){var r=this,i=sf(t);return hc.forEach(e,(function(e){var o=rl(e.path);return hc.xn([i.delete([n,o]),r.Lr.Wo(t,n,e)])}))},t.prototype.Lo=function(t,e){var n=sf(t),r=IDBKeyRange.bound([e],[e+1],!1,!0);return n.delete(r)},t.prototype.jo=function(t,e){var n=IDBKeyRange.bound([e],[e+1],!1,!0),r=sf(t),i=xa();return r.ns({range:n,es:!0},(function(t,e,n){var r=al(t[1]),o=new na(r);i=i.add(o)})).next((function(){return i}))},t.prototype.so=function(t,e){var n=rl(e.path),r=IDBKeyRange.bound([n],[qo(n)],!1,!0),i=0;return sf(t).ns({index:ql.documentTargetsIndex,es:!0,range:r},(function(t,e,n){var r=t[0];t[1],0!==r&&(i++,n.done())})).next((function(){return i>0}))},t.prototype.qe=function(t,e){return of(t).get(e).next((function(t){return t?vl(t):null}))},t}();function of(t){return lf.qn(t,zl.store)}function af(t){return lf.qn(t,Gl.store)}function sf(t){return lf.qn(t,ql.store)}var uf="Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.",cf=function(t){function e(e,n){var r=this;return(r=t.call(this)||this).Xr=e,r.Go=n,r}return f(e,t),e}(Wc),lf=function(){function t(e,n,r,i,o,a,s,u,c,l){if(this.allowTabSynchronization=e,this.persistenceKey=n,this.clientId=r,this.ln=o,this.window=a,this.document=s,this.zo=c,this.Ho=l,this.Jo=null,this.Yo=!1,this.isPrimary=!1,this.networkEnabled=!0,this.Xo=null,this.inForeground=!1,this.Zo=null,this.ta=null,this.ea=Number.NEGATIVE_INFINITY,this.na=function(t){return Promise.resolve()},!t.kn())throw new Qo(Yo.UNIMPLEMENTED,"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");this.Lr=new pf(this,i),this.sa=n+"main",this.serializer=new sl(u),this.ia=new pc(this.sa,11,new Pl(this.serializer)),this.ra=new rf(this.Lr,this.serializer),this.Fi=new tf,this.Ni=function(t,e){return new _l(t,e)}(this.serializer,this.Fi),this.oa=new $l(this.serializer),this.window&&this.window.localStorage?this.aa=this.window.localStorage:(this.aa=null,!1===l&&Do("IndexedDbPersistence","LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."))}return t.qn=function(t,e){if(t instanceof cf)return pc.qn(t.Xr,e);throw Mo()},t.prototype.start=function(){var t=this;return this.ca().then((function(){if(!t.isPrimary&&!t.allowTabSynchronization)throw new Qo(Yo.FAILED_PRECONDITION,uf);return t.ua(),t.ha(),t.la(),t.runTransaction("getHighestListenSequenceNumber","readonly",(function(e){return t.ra.No(e)}))})).then((function(e){t.Jo=new Xc(e,t.zo)})).then((function(){t.Yo=!0})).catch((function(e){return t.ia&&t.ia.close(),Promise.reject(e)}))},t.prototype._a=function(t){var e=this;return this.na=function(n){return p(e,void 0,void 0,(function(){return d(this,(function(e){return this.yr?[2,t(n)]:[2]}))}))},t(this.isPrimary)},t.prototype.fa=function(t){var e=this;this.ia.Kn((function(n){return p(e,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return null===n.newVersion?[4,t()]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))}))}))},t.prototype.da=function(t){var e=this;this.networkEnabled!==t&&(this.networkEnabled=t,this.ln.fs((function(){return p(e,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return this.yr?[4,this.ca()]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))})))},t.prototype.ca=function(){var t=this;return this.runTransaction("updateClientMetadataAndTryBecomePrimary","readwrite",(function(e){return hf(e).put(new Wl(t.clientId,Date.now(),t.networkEnabled,t.inForeground)).next((function(){if(t.isPrimary)return t.wa(e).next((function(e){e||(t.isPrimary=!1,t.ln.Ss((function(){return t.na(!1)})))}))})).next((function(){return t.Ta(e)})).next((function(n){return t.isPrimary&&!n?t.Ea(e).next((function(){return!1})):!!n&&t.Ia(e).next((function(){return!0}))}))})).catch((function(e){if(mc(e))return Po("IndexedDbPersistence","Failed to extend owner lease: ",e),t.isPrimary;if(!t.allowTabSynchronization)throw e;return Po("IndexedDbPersistence","Releasing owner lease after error during lease refresh",e),!1})).then((function(e){t.isPrimary!==e&&t.ln.Ss((function(){return t.na(e)})),t.isPrimary=e}))},t.prototype.wa=function(t){var e=this;return ff(t).get(Ll.key).next((function(t){return hc.resolve(e.ma(t))}))},t.prototype.Aa=function(t){return hf(t).delete(this.clientId)},t.prototype.Ra=function(){return p(this,void 0,void 0,(function(){var e,n,r,i,o=this;return d(this,(function(a){switch(a.label){case 0:return!this.isPrimary||this.Pa(this.ea,18e5)?[3,2]:(this.ea=Date.now(),[4,this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",(function(e){var n=t.qn(e,Wl.store);return n.Xn().next((function(t){var e=o.ga(t,18e5),r=t.filter((function(t){return-1===e.indexOf(t)}));return hc.forEach(r,(function(t){return n.delete(t.clientId)})).next((function(){return r}))}))})).catch((function(){return[]}))]);case 1:if(e=a.sent(),this.aa)for(n=0,r=e;n<r.length;n++)i=r[n],this.aa.removeItem(this.Va(i.clientId));a.label=2;case 2:return[2]}}))}))},t.prototype.la=function(){var t=this;this.ta=this.ln.Pn("client_metadata_refresh",4e3,(function(){return t.ca().then((function(){return t.Ra()})).then((function(){return t.la()}))}))},t.prototype.ma=function(t){return!!t&&t.ownerId===this.clientId},t.prototype.Ta=function(t){var e=this;return this.Ho?hc.resolve(!0):ff(t).get(Ll.key).next((function(n){if(null!==n&&e.Pa(n.leaseTimestampMs,5e3)&&!e.ya(n.ownerId)){if(e.ma(n)&&e.networkEnabled)return!0;if(!e.ma(n)){if(!n.allowTabSynchronization)throw new Qo(Yo.FAILED_PRECONDITION,uf);return!1}}return!(!e.networkEnabled||!e.inForeground)||hf(t).Xn().next((function(t){return void 0===e.ga(t,5e3).find((function(t){if(e.clientId!==t.clientId){var n=!e.networkEnabled&&t.networkEnabled,r=!e.inForeground&&t.inForeground,i=e.networkEnabled===t.networkEnabled;if(n||r&&i)return!0}return!1}))}))})).next((function(t){return e.isPrimary!==t&&Po("IndexedDbPersistence","Client "+(t?"is":"is not")+" eligible for a primary lease."),t}))},t.prototype.pa=function(){return p(this,void 0,void 0,(function(){var t=this;return d(this,(function(e){switch(e.label){case 0:return this.Yo=!1,this.va(),this.ta&&(this.ta.cancel(),this.ta=null),this.ba(),this.Sa(),[4,this.ia.runTransaction("shutdown","readwrite",[Ll.store,Wl.store],(function(e){var n=new cf(e,Xc.nr);return t.Ea(n).next((function(){return t.Aa(n)}))}))];case 1:return e.sent(),this.ia.close(),this.Da(),[2]}}))}))},t.prototype.ga=function(t,e){var n=this;return t.filter((function(t){return n.Pa(t.updateTimeMs,e)&&!n.ya(t.clientId)}))},t.prototype.Ca=function(){var t=this;return this.runTransaction("getActiveClients","readonly",(function(e){return hf(e).Xn().next((function(e){return t.ga(e,18e5).map((function(t){return t.clientId}))}))}))},Object.defineProperty(t.prototype,"yr",{get:function(){return this.Yo},enumerable:!1,configurable:!0}),t.prototype.Na=function(t){return gl.qr(t,this.serializer,this.Fi,this.Lr)},t.prototype.xa=function(){return this.ra},t.prototype.Fa=function(){return this.Ni},t.prototype.Oa=function(){return this.Fi},t.prototype.Ma=function(){return this.oa},t.prototype.runTransaction=function(t,e,n){var r=this;Po("IndexedDbPersistence","Starting transaction:",t);var i,o="readonly"===e?"readonly":"readwrite";return this.ia.runTransaction(t,o,Xl,(function(o){return i=new cf(o,r.Jo?r.Jo.next():Xc.nr),"readwrite-primary"===e?r.wa(i).next((function(t){return!!t||r.Ta(i)})).next((function(e){if(!e)throw Do("Failed to obtain primary lease for action '"+t+"'."),r.isPrimary=!1,r.ln.Ss((function(){return r.na(!1)})),new Qo(Yo.FAILED_PRECONDITION,Hc);return n(i)})).next((function(t){return r.Ia(i).next((function(){return t}))})):r.ka(i).next((function(){return n(i)}))})).then((function(t){return i.Ci(),t}))},t.prototype.ka=function(t){var e=this;return ff(t).get(Ll.key).next((function(t){if(null!==t&&e.Pa(t.leaseTimestampMs,5e3)&&!e.ya(t.ownerId)&&!e.ma(t)&&!(e.Ho||e.allowTabSynchronization&&t.allowTabSynchronization))throw new Qo(Yo.FAILED_PRECONDITION,uf)}))},t.prototype.Ia=function(t){var e=new Ll(this.clientId,this.allowTabSynchronization,Date.now());return ff(t).put(Ll.key,e)},t.kn=function(){return pc.kn()},t.prototype.Ea=function(t){var e=this,n=ff(t);return n.get(Ll.key).next((function(t){return e.ma(t)?(Po("IndexedDbPersistence","Releasing primary lease."),n.delete(Ll.key)):hc.resolve()}))},t.prototype.Pa=function(t,e){var n=Date.now();return!(t<n-e||t>n&&(Do("Detected an update time that is in the future: "+t+" > "+n),1))},t.prototype.ua=function(){var t=this;null!==this.document&&"function"==typeof this.document.addEventListener&&(this.Zo=function(){t.ln.fs((function(){return t.inForeground="visible"===t.document.visibilityState,t.ca()}))},this.document.addEventListener("visibilitychange",this.Zo),this.inForeground="visible"===this.document.visibilityState)},t.prototype.ba=function(){this.Zo&&(this.document.removeEventListener("visibilitychange",this.Zo),this.Zo=null)},t.prototype.ha=function(){var t,e=this;"function"==typeof(null===(t=this.window)||void 0===t?void 0:t.addEventListener)&&(this.Xo=function(){e.va(),e.ln.fs((function(){return e.pa()}))},this.window.addEventListener("unload",this.Xo))},t.prototype.Sa=function(){this.Xo&&(this.window.removeEventListener("unload",this.Xo),this.Xo=null)},t.prototype.ya=function(t){var e;try{var n=null!==(null===(e=this.aa)||void 0===e?void 0:e.getItem(this.Va(t)));return Po("IndexedDbPersistence","Client '"+t+"' "+(n?"is":"is not")+" zombied in LocalStorage"),n}catch(t){return Do("IndexedDbPersistence","Failed to get zombied client id.",t),!1}},t.prototype.va=function(){if(this.aa)try{this.aa.setItem(this.Va(this.clientId),String(Date.now()))}catch(t){Do("Failed to set zombie client id.",t)}},t.prototype.Da=function(){if(this.aa)try{this.aa.removeItem(this.Va(this.clientId))}catch(t){}},t.prototype.Va=function(t){return"firestore_zombie_"+this.persistenceKey+"_"+t},t}();function ff(t){return lf.qn(t,Ll.store)}function hf(t){return lf.qn(t,Wl.store)}var pf=function(){function t(t,e){this.db=t,this.Rr=new nl(this,e)}return t.prototype.Sr=function(t){var e=this.$a(t);return this.db.xa().Bo(t).next((function(t){return e.next((function(e){return t+e}))}))},t.prototype.$a=function(t){var e=0;return this.Cr(t,(function(t){e++})).next((function(){return e}))},t.prototype.De=function(t,e){return this.db.xa().De(t,e)},t.prototype.Cr=function(t,e){return this.La(t,(function(t,n){return e(n)}))},t.prototype.Qo=function(t,e,n){return df(t,n)},t.prototype.Wo=function(t,e,n){return df(t,n)},t.prototype.Nr=function(t,e,n){return this.db.xa().Nr(t,e,n)},t.prototype.eo=function(t,e){return df(t,e)},t.prototype.Ba=function(t,e){return function(t,e){var n=!1;return Al(t).ss((function(r){return bl(t,r,e).next((function(t){return t&&(n=!0),hc.resolve(!t)}))})).next((function(){return n}))}(t,e)},t.prototype.Fr=function(t,e){var n=this,r=this.db.Fa()._o(),i=[],o=0;return this.La(t,(function(a,s){if(s<=e){var u=n.Ba(t,a).next((function(e){if(!e)return o++,r.yi(t,a).next((function(){return r.Vi(a),sf(t).delete([0,rl(a.path)])}))}));i.push(u)}})).next((function(){return hc.xn(i)})).next((function(){return r.apply(t)})).next((function(){return o}))},t.prototype.removeTarget=function(t,e){var n=e.nt(t.Go);return this.db.xa().ko(t,n)},t.prototype.qa=function(t,e){return df(t,e)},t.prototype.La=function(t,e){var n,r=sf(t),i=Xc.nr;return r.ns({index:ql.documentTargetsIndex},(function(t,r){var o=t[0],a=(t[1],r.path),s=r.sequenceNumber;0===o?(i!==Xc.nr&&e(new na(al(n)),i),i=s,n=a):i=Xc.nr})).next((function(){i!==Xc.nr&&e(new na(al(n)),i)}))},t.prototype.Mr=function(t){return this.db.Fa().wo(t)},t}();function df(t,e){return sf(t).put(function(t,e){return new ql(0,rl(t.path),e)}(e,t.Go))}function vf(t,e){var n=t.projectId;return t.o||(n+="."+t.database),"firestore/"+e+"/"+n+"/"}var mf=function(){function t(t,e,n,r){this.persistence=t,this.Ua=e,this.serializer=r,this.Qa=new ga(Bo),this.Ka=new Wo((function(t){return ua(t)}),ca),this.Wa=$o.min(),this.xi=t.Na(n),this.ja=t.Fa(),this.ra=t.xa(),this.Ga=new Yc(this.ja,this.xi,this.persistence.Oa()),this.oa=t.Ma(),this.Ua.za(this.Ga)}return t.prototype.pr=function(t){var e=this;return this.persistence.runTransaction("Collect garbage","readwrite-primary",(function(n){return t.Or(n,e.Qa)}))},t}();function yf(t,e,n,r){return new mf(t,e,n,r)}function gf(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o;return d(this,(function(a){switch(a.label){case 0:return n=jo(t),r=n.xi,i=n.Ga,[4,n.persistence.runTransaction("Handle user change","readonly",(function(t){var o;return n.xi.Hr(t).next((function(a){return o=a,r=n.persistence.Na(e),i=new Yc(n.ja,r,n.persistence.Oa()),r.Hr(t)})).next((function(e){for(var n=[],r=[],a=xa(),s=0,u=o;s<u.length;s++){var c=u[s];n.push(c.batchId);for(var l=0,f=c.mutations;l<f.length;l++){var h=f[l];a=a.add(h.key)}}for(var p=0,d=e;p<d.length;p++){var v=d[p];r.push(v.batchId);for(var m=0,y=v.mutations;m<y.length;m++){var g=y[m];a=a.add(g.key)}}return i.Li(t,a).next((function(t){return{Ha:t,Ja:n,Ya:r}}))}))}))];case 1:return o=a.sent(),[2,(n.xi=r,n.Ga=i,n.Ua.za(n.Ga),o)]}}))}))}function bf(t,e){var n=jo(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(function(t){var r=e.batch.keys(),i=n.ja._o({fo:!0});return function(t,e,n,r){var i=n.batch,o=i.keys(),a=hc.resolve();return o.forEach((function(t){a=a.next((function(){return r.yi(e,t)})).next((function(e){var o=e,a=n.Ei.get(t);Vo(null!==a),(!o||o.version.A(a)<0)&&(o=i._i(t,o,n))&&r.Ri(o,n.Ti)}))})),a.next((function(){return t.xi.Yr(e,i)}))}(n,t,e,i).next((function(){return i.apply(t)})).next((function(){return n.xi.no(t)})).next((function(){return n.Ga.Li(t,r)}))}))}function wf(t){var e=jo(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(function(t){return e.ra.Co(t)}))}function Ef(t,e){var n=jo(t),r=e.et,i=n.Qa;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(function(t){var o=n.ja._o({fo:!0});i=n.Qa;var a=[];e.Gt.forEach((function(e,o){var s=i.get(o);if(s){a.push(n.ra.Ko(t,e.ne,o).next((function(){return n.ra.Uo(t,e.te,o)})));var u=e.resumeToken;if(u.X()>0){var c=s.st(u,r).nt(t.Go);i=i.rt(o,c),function(t,e,n){return Vo(e.resumeToken.X()>0),0===t.resumeToken.X()||e.et.R()-t.et.R()>=3e8||n.te.size+n.ee.size+n.ne.size>0}(s,c,e)&&a.push(n.ra.ko(t,c))}}}));var s=_a();if(e.Ht.forEach((function(r,i){e.Jt.has(r)&&a.push(n.persistence.Lr.qa(t,r))})),a.push(function(t,e,n,r,i){var o=xa();return n.forEach((function(t){return o=o.add(t)})),e.getEntries(t,o).next((function(t){var i=_a();return n.forEach((function(n,o){var a=t.get(n),s=r;o instanceof Nu&&o.version.isEqual($o.min())?(e.Vi(n,s),i=i.rt(n,o)):null==a||o.version.A(a.version)>0||0===o.version.A(a.version)&&a.hasPendingWrites?(e.Ri(o,s),i=i.rt(n,o)):Po("LocalStore","Ignoring outdated watch update for ",n,". Current version:",a.version," Watch version:",o.version)})),i}))}(t,o,e.Ht,r).next((function(t){s=t}))),!r.isEqual($o.min())){var u=n.ra.Co(t).next((function(e){return n.ra.xo(t,t.Go,r)}));a.push(u)}return hc.xn(a).next((function(){return o.apply(t)})).next((function(){return n.Ga.Bi(t,s)}))})).then((function(t){return n.Qa=i,t}))}function If(t,e){var n=jo(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(function(t){return void 0===e&&(e=-1),n.xi.Gr(t,e)}))}function Af(t,e){var n=jo(t);return n.persistence.runTransaction("Allocate target","readwrite",(function(t){var r;return n.ra.qo(t,e).next((function(i){return i?(r=i,hc.resolve(r)):n.ra.bo(t).next((function(i){return r=new da(e,i,0,t.Go),n.ra.Fo(t,r).next((function(){return r}))}))}))})).then((function(t){var r=n.Qa.get(t.targetId);return(null===r||t.et.A(r.et)>0)&&(n.Qa=n.Qa.rt(t.targetId,t),n.Ka.set(e,t.targetId)),t}))}function _f(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o,a;return d(this,(function(s){switch(s.label){case 0:r=jo(t),i=r.Qa.get(e),o=n?"readwrite":"readwrite-primary",s.label=1;case 1:return s.trys.push([1,4,,5]),n?[3,3]:[4,r.persistence.runTransaction("Release target",o,(function(t){return r.persistence.Lr.removeTarget(t,i)}))];case 2:s.sent(),s.label=3;case 3:return[3,5];case 4:if(!mc(a=s.sent()))throw a;return Po("LocalStore","Failed to update sequence numbers for target "+e+": "+a),[3,5];case 5:return r.Qa=r.Qa.remove(e),r.Ka.delete(i.target),[2]}}))}))}function Tf(t,e,n){var r=jo(t),i=$o.min(),o=xa();return r.persistence.runTransaction("Execute query","readonly",(function(t){return function(t,e,n){var r=jo(t),i=r.Ka.get(n);return void 0!==i?hc.resolve(r.Qa.get(i)):r.ra.qo(e,n)}(r,t,Fu(e)).next((function(e){if(e)return i=e.lastLimboFreeSnapshotVersion,r.ra.jo(t,e.targetId).next((function(t){o=t}))})).next((function(){return r.Ua.Ui(t,e,n?i:$o.min(),n?o:xa())})).next((function(t){return{documents:t,Xa:o}}))}))}function kf(t,e){var n=jo(t),r=jo(n.ra),i=n.Qa.get(e);return i?Promise.resolve(i.target):n.persistence.runTransaction("Get target data","readonly",(function(t){return r.qe(t,e).next((function(t){return t?t.target:null}))}))}function Sf(t){var e=jo(t);return e.persistence.runTransaction("Get new document changes","readonly",(function(t){return function(t,e,n){var r=jo(t),i=_a(),o=ll(n),a=Sl(e),s=IDBKeyRange.lowerBound(o,!0);return a.ns({index:Ul.readTimeIndex,range:s},(function(t,e){var n=ul(r.serializer,e);i=i.rt(n.key,n),o=e.readTime})).next((function(){return{Za:i,readTime:fl(o)}}))}(e.ja,t,e.Wa)})).then((function(t){var n=t.Za,r=t.readTime;return e.Wa=r,n}))}function Nf(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){return[2,(e=jo(t)).persistence.runTransaction("Synchronize last document change read time","readonly",(function(t){return function(t){var e=Sl(t),n=$o.min();return e.ns({index:Ul.readTimeIndex,reverse:!0},(function(t,e,r){e.readTime&&(n=fl(e.readTime)),r.done()})).next((function(){return n}))}(t)})).then((function(t){e.Wa=t}))]}))}))}function Cf(t){return p(this,void 0,void 0,(function(){return d(this,(function(e){if(t.code!==Yo.FAILED_PRECONDITION||t.message!==Hc)throw t;return Po("LocalStore","Unexpectedly lost primary lease"),[2]}))}))}var xf=function(){function t(t,e,n,r,i,o){this.ln=t,this.tc=n,this.ec=r,this.nc=i,this.listener=o,this.state=0,this.sc=0,this.ic=null,this.stream=null,this.Ps=new fc(t,e)}return t.prototype.rc=function(){return 1===this.state||2===this.state||4===this.state},t.prototype.oc=function(){return 2===this.state},t.prototype.start=function(){3!==this.state?this.auth():this.ac()},t.prototype.stop=function(){return p(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return this.rc()?[4,this.close(0)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))},t.prototype.cc=function(){this.state=0,this.Ps.reset()},t.prototype.uc=function(){var t=this;this.oc()&&null===this.ic&&(this.ic=this.ln.Pn(this.tc,6e4,(function(){return t.hc()})))},t.prototype.lc=function(t){this._c(),this.stream.send(t)},t.prototype.hc=function(){return p(this,void 0,void 0,(function(){return d(this,(function(t){return this.oc()?[2,this.close(0)]:[2]}))}))},t.prototype._c=function(){this.ic&&(this.ic.cancel(),this.ic=null)},t.prototype.close=function(t,e){return p(this,void 0,void 0,(function(){return d(this,(function(n){switch(n.label){case 0:return this._c(),this.Ps.cancel(),this.sc++,3!==t?this.Ps.reset():e&&e.code===Yo.RESOURCE_EXHAUSTED?(Do(e.toString()),Do("Using maximum backoff delay to prevent overloading the backend."),this.Ps.mn()):e&&e.code===Yo.UNAUTHENTICATED&&this.nc.ni(),null!==this.stream&&(this.fc(),this.stream.close(),this.stream=null),this.state=t,[4,this.listener.dc(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.fc=function(){},t.prototype.auth=function(){var t=this;this.state=1;var e=this.wc(this.sc),n=this.sc;this.nc.getToken().then((function(e){t.sc===n&&t.Tc(e)}),(function(n){e((function(){var e=new Qo(Yo.UNKNOWN,"Fetching auth token failed: "+n.message);return t.Ec(e)}))}))},t.prototype.Tc=function(t){var e=this,n=this.wc(this.sc);this.stream=this.Ic(t),this.stream.mc((function(){n((function(){return e.state=2,e.listener.mc()}))})),this.stream.dc((function(t){n((function(){return e.Ec(t)}))})),this.stream.onMessage((function(t){n((function(){return e.onMessage(t)}))}))},t.prototype.ac=function(){var t=this;this.state=4,this.Ps.An((function(){return p(t,void 0,void 0,(function(){return d(this,(function(t){return this.state=0,this.start(),[2]}))}))}))},t.prototype.Ec=function(t){return Po("PersistentStream","close with error: "+t),this.stream=null,this.close(3,t)},t.prototype.wc=function(t){var e=this;return function(n){e.ln.fs((function(){return e.sc===t?n():(Po("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())}))}},t}(),Of=function(t){function e(e,n,r,i,o){var a=this;return(a=t.call(this,e,"listen_stream_connection_backoff","listen_stream_idle",n,r,o)||this).serializer=i,a}return f(e,t),e.prototype.Ic=function(t){return this.ec.Ac("Listen",t)},e.prototype.onMessage=function(t){this.Ps.reset();var e=function(t,e){var n;if("targetChange"in e){e.targetChange;var r=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:Mo()}(e.targetChange.targetChangeType||"NO_CHANGE"),i=e.targetChange.targetIds||[],o=function(t,e){return t.Ue?(Vo(void 0===e||"string"==typeof e),fa.fromBase64String(e||"")):(Vo(void 0===e||e instanceof Uint8Array),fa.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),a=e.targetChange.cause,s=a&&function(t){var e=void 0===t.code?Yo.UNKNOWN:ya(t.code);return new Qo(e,t.message||"")}(a);n=new Ua(r,i,o,s||null)}else if("documentChange"in e){e.documentChange;var u=e.documentChange;u.document,u.document.name,u.document.updateTime;var c=_s(t,u.document.name),l=ws(u.document.updateTime),f=new Au({mapValue:{fields:u.document.fields}}),h=new Su(c,l,f,{}),p=u.targetIds||[],d=u.removedTargetIds||[];n=new ja(p,d,h.key,h)}else if("documentDelete"in e){e.documentDelete;var v=e.documentDelete;v.document;var m=_s(t,v.document),y=v.readTime?ws(v.readTime):$o.min(),g=new Nu(m,y),b=v.removedTargetIds||[];n=new ja([],b,g.key,g)}else if("documentRemove"in e){e.documentRemove;var w=e.documentRemove;w.document;var E=_s(t,w.document),I=w.removedTargetIds||[];n=new ja([],I,E,null)}else{if(!("filter"in e))return Mo();e.filter;var A=e.filter;A.targetId;var _=A.count||0,T=new va(_),k=A.targetId;n=new Fa(k,T)}return n}(this.serializer,t),n=function(t){if(!("targetChange"in t))return $o.min();var e=t.targetChange;return e.targetIds&&e.targetIds.length?$o.min():e.readTime?ws(e.readTime):$o.min()}(t);return this.listener.Rc(e,n)},e.prototype.Pc=function(t){var e={};e.database=Ss(this.serializer),e.addTarget=function(t,e){var n,r=e.target;return(n=la(r)?{documents:Ps(t,r)}:{query:Ds(t,r)}).targetId=e.targetId,e.resumeToken.X()>0?n.resumeToken=gs(t,e.resumeToken):e.et.A($o.min())>0&&(n.readTime=ys(t,e.et.P())),n}(this.serializer,t);var n=function(t,e){var n=function(t,e){switch(e){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return Mo()}}(0,e.tt);return null==n?null:{"goog-listen-tags":n}}(this.serializer,t);n&&(e.labels=n),this.lc(e)},e.prototype.gc=function(t){var e={};e.database=Ss(this.serializer),e.removeTarget=t,this.lc(e)},e}(xf),Pf=function(t){function e(e,n,r,i,o){var a=this;return(a=t.call(this,e,"write_stream_connection_backoff","write_stream_idle",n,r,o)||this).serializer=i,a.Vc=!1,a}return f(e,t),Object.defineProperty(e.prototype,"yc",{get:function(){return this.Vc},enumerable:!1,configurable:!0}),e.prototype.start=function(){this.Vc=!1,this.lastStreamToken=void 0,t.prototype.start.call(this)},e.prototype.fc=function(){this.Vc&&this.vc([])},e.prototype.Ic=function(t){return this.ec.Ac("Write",t)},e.prototype.onMessage=function(t){if(Vo(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Vc){this.Ps.reset();var e=function(t,e){return t&&t.length>0?(Vo(void 0!==e),t.map((function(t){return function(t,e){var n=t.updateTime?ws(t.updateTime):ws(e);n.isEqual($o.min())&&(n=ws(e));var r=null;return t.transformResults&&t.transformResults.length>0&&(r=t.transformResults),new au(n,r)}(t,e)}))):[]}(t.writeResults,t.commitTime),n=ws(t.commitTime);return this.listener.bc(n,e)}return Vo(!t.writeResults||0===t.writeResults.length),this.Vc=!0,this.listener.Sc()},e.prototype.Dc=function(){var t={};t.database=Ss(this.serializer),this.lc(t)},e.prototype.vc=function(t){var e=this,n={streamToken:this.lastStreamToken,writes:t.map((function(t){return xs(e.serializer,t)}))};this.lc(n)},e}(xf),Df=function(t){function e(e,n,r){var i=this;return(i=t.call(this)||this).credentials=e,i.ec=n,i.serializer=r,i.Cc=!1,i}return f(e,t),e.prototype.Nc=function(){if(this.Cc)throw new Qo(Yo.FAILED_PRECONDITION,"The client has already been terminated.")},e.prototype.xc=function(t,e,n){var r=this;return this.Nc(),this.credentials.getToken().then((function(i){return r.ec.xc(t,e,n,i)})).catch((function(t){throw t.code===Yo.UNAUTHENTICATED&&r.credentials.ni(),t}))},e.prototype.Fc=function(t,e,n){var r=this;return this.Nc(),this.credentials.getToken().then((function(i){return r.ec.Fc(t,e,n,i)})).catch((function(t){throw t.code===Yo.UNAUTHENTICATED&&r.credentials.ni(),t}))},e.prototype.terminate=function(){this.Cc=!1},e}((function(){})),Lf=function(){function t(t,e){this.rs=t,this.Oc=e,this.state="Unknown",this.Mc=0,this.kc=null,this.$c=!0}return t.prototype.Lc=function(){var t=this;0===this.Mc&&(this.Bc("Unknown"),this.kc=this.rs.Pn("online_state_timeout",1e4,(function(){return t.kc=null,t.qc("Backend didn't respond within 10 seconds."),t.Bc("Offline"),Promise.resolve()})))},t.prototype.Uc=function(t){"Online"===this.state?this.Bc("Unknown"):(this.Mc++,this.Mc>=1&&(this.Qc(),this.qc("Connection failed 1 times. Most recent error: "+t.toString()),this.Bc("Offline")))},t.prototype.set=function(t){this.Qc(),this.Mc=0,"Online"===t&&(this.$c=!1),this.Bc(t)},t.prototype.Bc=function(t){t!==this.state&&(this.state=t,this.Oc(t))},t.prototype.qc=function(t){var e="Could not reach Cloud Firestore backend. "+t+"\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";this.$c?(Do(e),this.$c=!1):Po("OnlineStateTracker",e)},t.prototype.Qc=function(){null!==this.kc&&(this.kc.cancel(),this.kc=null)},t}(),Rf=function(t,e,n,r,i){var o=this;this.Kc=t,this.Wc=e,this.rs=n,this.jc={},this.Gc=[],this.zc=new Map,this.Hc=new Set,this.Jc=[],this.Yc=i,this.Yc.Xc((function(t){n.fs((function(){return p(o,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return Gf(this)?(Po("RemoteStore","Restarting streams for network reachability change."),[4,function(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return(e=jo(t)).Hc.add(4),[4,Vf(e)];case 1:return n.sent(),e.Zc.set("Unknown"),e.Hc.delete(4),[4,Mf(e)];case 2:return n.sent(),[2]}}))}))}(this)]):[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}}))}))}))})),this.Zc=new Lf(n,r)};function Mf(t){return p(this,void 0,void 0,(function(){var e,n;return d(this,(function(r){switch(r.label){case 0:if(!Gf(t))return[3,4];e=0,n=t.Jc,r.label=1;case 1:return e<n.length?[4,(0,n[e])(!0)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))}function Vf(t){return p(this,void 0,void 0,(function(){var e,n;return d(this,(function(r){switch(r.label){case 0:e=0,n=t.Jc,r.label=1;case 1:return e<n.length?[4,(0,n[e])(!1)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))}function jf(t,e){var n=jo(t);n.zc.has(e.targetId)||(n.zc.set(e.targetId,e),qf(n)?zf(n):oh(n).oc()&&Uf(n,e))}function Ff(t,e){var n=jo(t),r=oh(n);n.zc.delete(e),r.oc()&&Bf(n,e),0===n.zc.size&&(r.oc()?r.uc():Gf(n)&&n.Zc.set("Unknown"))}function Uf(t,e){t.tu.Ie(e.targetId),oh(t).Pc(e)}function Bf(t,e){t.tu.Ie(e),oh(t).gc(e)}function zf(t){t.tu=new za({Be:function(e){return t.jc.Be(e)},qe:function(e){return t.zc.get(e)||null}}),oh(t).start(),t.Zc.Lc()}function qf(t){return Gf(t)&&!oh(t).rc()&&t.zc.size>0}function Gf(t){return 0===jo(t).Hc.size}function Kf(t){t.tu=void 0}function Hf(t){return p(this,void 0,void 0,(function(){return d(this,(function(e){return t.zc.forEach((function(e,n){Uf(t,e)})),[2]}))}))}function Wf(t,e){return p(this,void 0,void 0,(function(){return d(this,(function(n){return Kf(t),qf(t)?(t.Zc.Uc(e),zf(t)):t.Zc.set("Unknown"),[2]}))}))}function Yf(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o;return d(this,(function(a){switch(a.label){case 0:if(t.Zc.set("Online"),!(e instanceof Ua&&2===e.state&&e.cause))return[3,6];a.label=1;case 1:return a.trys.push([1,3,,5]),[4,function(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o;return d(this,(function(a){switch(a.label){case 0:n=e.cause,r=0,i=e.targetIds,a.label=1;case 1:return r<i.length?(o=i[r],t.zc.has(o)?[4,t.jc.eu(o,n)]:[3,3]):[3,5];case 2:a.sent(),t.zc.delete(o),t.tu.removeTarget(o),a.label=3;case 3:a.label=4;case 4:return r++,[3,1];case 5:return[2]}}))}))}(t,e)];case 2:return a.sent(),[3,5];case 3:return r=a.sent(),Po("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),r),[4,Qf(t,r)];case 4:return a.sent(),[3,5];case 5:return[3,13];case 6:if(e instanceof ja?t.tu.pe(e):e instanceof Fa?t.tu.Fe(e):t.tu.Se(e),n.isEqual($o.min()))return[3,13];a.label=7;case 7:return a.trys.push([7,11,,13]),[4,wf(t.Kc)];case 8:return i=a.sent(),n.A(i)>=0?[4,function(t,e){var n=t.tu.ke(e);return n.Gt.forEach((function(n,r){if(n.resumeToken.X()>0){var i=t.zc.get(r);i&&t.zc.set(r,i.st(n.resumeToken,e))}})),n.zt.forEach((function(e){var n=t.zc.get(e);if(n){t.zc.set(e,n.st(fa.Z,n.et)),Bf(t,e);var r=new da(n.target,e,1,n.sequenceNumber);Uf(t,r)}})),t.jc.nu(n)}(t,n)]:[3,10];case 9:a.sent(),a.label=10;case 10:return[3,13];case 11:return Po("RemoteStore","Failed to raise snapshot:",o=a.sent()),[4,Qf(t,o)];case 12:return a.sent(),[3,13];case 13:return[2]}}))}))}function Qf(t,e,n){return p(this,void 0,void 0,(function(){var r=this;return d(this,(function(i){switch(i.label){case 0:if(!mc(e))throw e;return t.Hc.add(1),[4,Vf(t)];case 1:return i.sent(),t.Zc.set("Offline"),n||(n=function(){return wf(t.Kc)}),t.rs.Ss((function(){return p(r,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return Po("RemoteStore","Retrying IndexedDB access"),[4,n()];case 1:return e.sent(),t.Hc.delete(1),[4,Mf(t)];case 2:return e.sent(),[2]}}))}))})),[2]}}))}))}function Xf(t,e){return e().catch((function(n){return Qf(t,n,e)}))}function $f(t){return p(this,void 0,void 0,(function(){var e,n,r,i,o;return d(this,(function(a){switch(a.label){case 0:e=jo(t),n=ah(e),r=e.Gc.length>0?e.Gc[e.Gc.length-1].batchId:-1,a.label=1;case 1:if(!function(t){return Gf(t)&&t.Gc.length<10}(e))return[3,7];a.label=2;case 2:return a.trys.push([2,4,,6]),[4,If(e.Kc,r)];case 3:return null===(i=a.sent())?(0===e.Gc.length&&n.uc(),[3,7]):(r=i.batchId,function(t,e){t.Gc.push(e);var n=ah(t);n.oc()&&n.yc&&n.vc(e.mutations)}(e,i),[3,6]);case 4:return o=a.sent(),[4,Qf(e,o)];case 5:return a.sent(),[3,6];case 6:return[3,1];case 7:return Jf(e)&&Zf(e),[2]}}))}))}function Jf(t){return Gf(t)&&!ah(t).rc()&&t.Gc.length>0}function Zf(t){ah(t).start()}function th(t){return p(this,void 0,void 0,(function(){return d(this,(function(e){return ah(t).Dc(),[2]}))}))}function eh(t){return p(this,void 0,void 0,(function(){var e,n,r,i;return d(this,(function(o){for(e=ah(t),n=0,r=t.Gc;n<r.length;n++)i=r[n],e.vc(i.mutations);return[2]}))}))}function nh(t,e,n){return p(this,void 0,void 0,(function(){var r,i;return d(this,(function(o){switch(o.label){case 0:return r=t.Gc.shift(),i=zc.from(r,e,n),[4,Xf(t,(function(){return t.jc.su(i)}))];case 1:return o.sent(),[4,$f(t)];case 2:return o.sent(),[2]}}))}))}function rh(t,e){return p(this,void 0,void 0,(function(){return d(this,(function(n){switch(n.label){case 0:return e&&ah(t).yc?[4,function(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:return ma(r=e.code)&&r!==Yo.ABORTED?(n=t.Gc.shift(),ah(t).cc(),[4,Xf(t,(function(){return t.jc.iu(n.batchId,e)}))]):[3,3];case 1:return i.sent(),[4,$f(t)];case 2:i.sent(),i.label=3;case 3:return[2]}}))}))}(t,e)]:[3,2];case 1:n.sent(),n.label=2;case 2:return Jf(t)&&Zf(t),[2]}}))}))}function ih(t,e){return p(this,void 0,void 0,(function(){var n;return d(this,(function(r){switch(r.label){case 0:return n=jo(t),e?(n.Hc.delete(2),[4,Mf(n)]):[3,2];case 1:return r.sent(),[3,5];case 2:return e?[3,4]:(n.Hc.add(2),[4,Vf(n)]);case 3:r.sent(),n.Zc.set("Unknown"),r.label=4;case 4:r.label=5;case 5:return[2]}}))}))}function oh(t){var e=this;return t.ru||(t.ru=function(t,e,n){var r=jo(t);return r.Nc(),new Of(e,r.ec,r.credentials,r.serializer,n)}(t.Wc,t.rs,{mc:Hf.bind(null,t),dc:Wf.bind(null,t),Rc:Yf.bind(null,t)}),t.Jc.push((function(n){return p(e,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return n?(t.ru.cc(),qf(t)?zf(t):t.Zc.set("Unknown"),[3,3]):[3,1];case 1:return[4,t.ru.stop()];case 2:e.sent(),Kf(t),e.label=3;case 3:return[2]}}))}))}))),t.ru}function ah(t){var e=this;return t.ou||(t.ou=function(t,e,n){var r=jo(t);return r.Nc(),new Pf(e,r.ec,r.credentials,r.serializer,n)}(t.Wc,t.rs,{mc:th.bind(null,t),dc:rh.bind(null,t),Sc:eh.bind(null,t),bc:nh.bind(null,t)}),t.Jc.push((function(n){return p(e,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return n?(t.ou.cc(),[4,$f(t)]):[3,2];case 1:return e.sent(),[3,4];case 2:return[4,t.ou.stop()];case 3:e.sent(),t.Gc.length>0&&(Po("RemoteStore","Stopping write stream with "+t.Gc.length+" pending writes"),t.Gc=[]),e.label=4;case 4:return[2]}}))}))}))),t.ou}var sh=function(){function t(){this.au=new Ea(uh.cu),this.uu=new Ea(uh.hu)}return t.prototype.T=function(){return this.au.T()},t.prototype.Qo=function(t,e){var n=new uh(t,e);this.au=this.au.add(n),this.uu=this.uu.add(n)},t.prototype.lu=function(t,e){var n=this;t.forEach((function(t){return n.Qo(t,e)}))},t.prototype.Wo=function(t,e){this._u(new uh(t,e))},t.prototype.fu=function(t,e){var n=this;t.forEach((function(t){return n.Wo(t,e)}))},t.prototype.du=function(t){var e=this,n=new na(new Zo([])),r=new uh(n,t),i=new uh(n,t+1),o=[];return this.uu.Nt([r,i],(function(t){e._u(t),o.push(t.key)})),o},t.prototype.wu=function(){var t=this;this.au.forEach((function(e){return t._u(e)}))},t.prototype._u=function(t){this.au=this.au.delete(t),this.uu=this.uu.delete(t)},t.prototype.Tu=function(t){var e=new na(new Zo([])),n=new uh(e,t),r=new uh(e,t+1),i=xa();return this.uu.Nt([n,r],(function(t){i=i.add(t.key)})),i},t.prototype.so=function(t){var e=new uh(t,0),n=this.au.Ft(e);return null!==n&&t.isEqual(n.key)},t}(),uh=function(){function t(t,e){this.key=t,this.Eu=e}return t.cu=function(t,e){return na.V(t.key,e.key)||Bo(t.Eu,e.Eu)},t.hu=function(t,e){return Bo(t.Eu,e.Eu)||na.V(t.key,e.key)},t}();function ch(t,e){return"firestore_clients_"+t+"_"+e}function lh(t,e,n){var r="firestore_mutations_"+t+"_"+n;return e.Js()&&(r+="_"+e.uid),r}function fh(t,e){return"firestore_targets_"+t+"_"+e}var hh=function(){function t(t,e,n,r){this.user=t,this.batchId=e,this.state=n,this.error=r}return t.Iu=function(e,n,r){var i=JSON.parse(r),o="object"==typeof i&&-1!==["pending","acknowledged","rejected"].indexOf(i.state)&&(void 0===i.error||"object"==typeof i.error),a=void 0;return o&&i.error&&(o="string"==typeof i.error.message&&"string"==typeof i.error.code)&&(a=new Qo(i.error.code,i.error.message)),o?new t(e,n,i.state,a):(Do("SharedClientState","Failed to parse mutation state for ID '"+n+"': "+r),null)},t.prototype.mu=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),ph=function(){function t(t,e,n){this.targetId=t,this.state=e,this.error=n}return t.Iu=function(e,n){var r=JSON.parse(n),i="object"==typeof r&&-1!==["not-current","current","rejected"].indexOf(r.state)&&(void 0===r.error||"object"==typeof r.error),o=void 0;return i&&r.error&&(i="string"==typeof r.error.message&&"string"==typeof r.error.code)&&(o=new Qo(r.error.code,r.error.message)),i?new t(e,r.state,o):(Do("SharedClientState","Failed to parse target state for ID '"+e+"': "+n),null)},t.prototype.mu=function(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)},t}(),dh=function(){function t(t,e){this.clientId=t,this.activeTargetIds=e}return t.Iu=function(e,n){for(var r=JSON.parse(n),i="object"==typeof r&&r.activeTargetIds instanceof Array,o=Pa(),a=0;i&&a<r.activeTargetIds.length;++a)i=oa(r.activeTargetIds[a]),o=o.add(r.activeTargetIds[a]);return i?new t(e,o):(Do("SharedClientState","Failed to parse client data for instance '"+e+"': "+n),null)},t}(),vh=function(){function t(t,e){this.clientId=t,this.onlineState=e}return t.Iu=function(e){var n=JSON.parse(e);return"object"==typeof n&&-1!==["Unknown","Online","Offline"].indexOf(n.onlineState)&&"string"==typeof n.clientId?new t(n.clientId,n.onlineState):(Do("SharedClientState","Failed to parse online state: "+e),null)},t}(),mh=function(){function t(){this.activeTargetIds=Pa()}return t.prototype.Au=function(t){this.activeTargetIds=this.activeTargetIds.add(t)},t.prototype.Ru=function(t){this.activeTargetIds=this.activeTargetIds.delete(t)},t.prototype.mu=function(){var t={activeTargetIds:this.activeTargetIds.O(),updateTimeMs:Date.now()};return JSON.stringify(t)},t}(),yh=function(){function t(t,e,n,r,i){this.window=t,this.ln=e,this.persistenceKey=n,this.Pu=r,this.gu=null,this.Oc=null,this.Xi=null,this.Vu=this.yu.bind(this),this.pu=new ga(Bo),this.yr=!1,this.vu=[];var o=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.window.localStorage,this.currentUser=i,this.bu=ch(this.persistenceKey,this.Pu),this.Su=function(t){return"firestore_sequence_number_"+t}(this.persistenceKey),this.pu=this.pu.rt(this.Pu,new mh),this.Du=new RegExp("^firestore_clients_"+o+"_([^_]*)$"),this.Cu=new RegExp("^firestore_mutations_"+o+"_(\\d+)(?:_(.*))?$"),this.Nu=new RegExp("^firestore_targets_"+o+"_(\\d+)$"),this.xu=function(t){return"firestore_online_state_"+t}(this.persistenceKey),this.Fu=function(t){return"firestore_bundle_loaded_"+t}(this.persistenceKey),this.window.addEventListener("storage",this.Vu)}return t.kn=function(t){return!(!t||!t.localStorage)},t.prototype.start=function(){return p(this,void 0,void 0,(function(){var t,e,n,r,i,o,a,s,u,c,l,f=this;return d(this,(function(h){switch(h.label){case 0:return[4,this.gu.Ca()];case 1:for(t=h.sent(),e=0,n=t;e<n.length;e++)(r=n[e])!==this.Pu&&(i=this.getItem(ch(this.persistenceKey,r)))&&(o=dh.Iu(r,i))&&(this.pu=this.pu.rt(o.clientId,o));for(this.Ou(),(a=this.storage.getItem(this.xu))&&(s=this.Mu(a))&&this.ku(s),u=0,c=this.vu;u<c.length;u++)l=c[u],this.yu(l);return this.vu=[],this.window.addEventListener("unload",(function(){return f.pa()})),this.yr=!0,[2]}}))}))},t.prototype.er=function(t){this.setItem(this.Su,JSON.stringify(t))},t.prototype.$u=function(){return this.Lu(this.pu)},t.prototype.Bu=function(t){var e=!1;return this.pu.forEach((function(n,r){r.activeTargetIds.has(t)&&(e=!0)})),e},t.prototype.qu=function(t){this.Uu(t,"pending")},t.prototype.Qu=function(t,e,n){this.Uu(t,e,n),this.Ku(t)},t.prototype.Wu=function(t){var e="not-current";if(this.Bu(t)){var n=this.storage.getItem(fh(this.persistenceKey,t));if(n){var r=ph.Iu(t,n);r&&(e=r.state)}}return this.ju.Au(t),this.Ou(),e},t.prototype.Gu=function(t){this.ju.Ru(t),this.Ou()},t.prototype.zu=function(t){return this.ju.activeTargetIds.has(t)},t.prototype.Hu=function(t){this.removeItem(fh(this.persistenceKey,t))},t.prototype.Ju=function(t,e,n){this.Yu(t,e,n)},t.prototype.Xu=function(t,e,n){var r=this;e.forEach((function(t){r.Ku(t)})),this.currentUser=t,n.forEach((function(t){r.qu(t)}))},t.prototype.Zu=function(t){this.th(t)},t.prototype.eh=function(){this.nh()},t.prototype.pa=function(){this.yr&&(this.window.removeEventListener("storage",this.Vu),this.removeItem(this.bu),this.yr=!1)},t.prototype.getItem=function(t){var e=this.storage.getItem(t);return Po("SharedClientState","READ",t,e),e},t.prototype.setItem=function(t,e){Po("SharedClientState","SET",t,e),this.storage.setItem(t,e)},t.prototype.removeItem=function(t){Po("SharedClientState","REMOVE",t),this.storage.removeItem(t)},t.prototype.yu=function(t){var e=this,n=t;if(n.storageArea===this.storage){if(Po("SharedClientState","EVENT",n.key,n.newValue),n.key===this.bu)return void Do("Received WebStorage notification for local change. Another client might have garbage-collected our state");this.ln.Ss((function(){return p(e,void 0,void 0,(function(){var t,e,r,i,o,a;return d(this,(function(s){if(this.yr){if(null!==n.key)if(this.Du.test(n.key)){if(null==n.newValue)return t=this.sh(n.key),[2,this.ih(t,null)];if(e=this.rh(n.key,n.newValue))return[2,this.ih(e.clientId,e)]}else if(this.Cu.test(n.key)){if(null!==n.newValue&&(r=this.oh(n.key,n.newValue)))return[2,this.ah(r)]}else if(this.Nu.test(n.key)){if(null!==n.newValue&&(i=this.uh(n.key,n.newValue)))return[2,this.hh(i)]}else if(n.key===this.xu){if(null!==n.newValue&&(o=this.Mu(n.newValue)))return[2,this.ku(o)]}else if(n.key===this.Su)(a=function(t){var e=Xc.nr;if(null!=t)try{var n=JSON.parse(t);Vo("number"==typeof n),e=n}catch(t){Do("SharedClientState","Failed to read sequence number from WebStorage",t)}return e}(n.newValue))!==Xc.nr&&this.Xi(a);else if(n.key===this.Fu)return[2,this.gu.lh()]}else this.vu.push(n);return[2]}))}))}))}},Object.defineProperty(t.prototype,"ju",{get:function(){return this.pu.get(this.Pu)},enumerable:!1,configurable:!0}),t.prototype.Ou=function(){this.setItem(this.bu,this.ju.mu())},t.prototype.Uu=function(t,e,n){var r=new hh(this.currentUser,t,e,n),i=lh(this.persistenceKey,this.currentUser,t);this.setItem(i,r.mu())},t.prototype.Ku=function(t){var e=lh(this.persistenceKey,this.currentUser,t);this.removeItem(e)},t.prototype.th=function(t){var e={clientId:this.Pu,onlineState:t};this.storage.setItem(this.xu,JSON.stringify(e))},t.prototype.Yu=function(t,e,n){var r=fh(this.persistenceKey,t),i=new ph(t,e,n);this.setItem(r,i.mu())},t.prototype.nh=function(){this.setItem(this.Fu,"value-not-used")},t.prototype.sh=function(t){var e=this.Du.exec(t);return e?e[1]:null},t.prototype.rh=function(t,e){var n=this.sh(t);return dh.Iu(n,e)},t.prototype.oh=function(t,e){var n=this.Cu.exec(t),r=Number(n[1]),i=void 0!==n[2]?n[2]:null;return hh.Iu(new Rc(i),r,e)},t.prototype.uh=function(t,e){var n=this.Nu.exec(t),r=Number(n[1]);return ph.Iu(r,e)},t.prototype.Mu=function(t){return vh.Iu(t)},t.prototype.ah=function(t){return p(this,void 0,void 0,(function(){return d(this,(function(e){return t.user.uid===this.currentUser.uid?[2,this.gu._h(t.batchId,t.state,t.error)]:(Po("SharedClientState","Ignoring mutation for non-active user "+t.user.uid),[2])}))}))},t.prototype.hh=function(t){return this.gu.fh(t.targetId,t.state,t.error)},t.prototype.ih=function(t,e){var n=this,r=e?this.pu.rt(t,e):this.pu.remove(t),i=this.Lu(this.pu),o=this.Lu(r),a=[],s=[];return o.forEach((function(t){i.has(t)||a.push(t)})),i.forEach((function(t){o.has(t)||s.push(t)})),this.gu.dh(a,s).then((function(){n.pu=r}))},t.prototype.ku=function(t){this.pu.get(t.clientId)&&this.Oc(t.onlineState)},t.prototype.Lu=function(t){var e=Pa();return t.forEach((function(t,n){e=e.Ot(n.activeTargetIds)})),e},t}(),gh=function(){function t(){this.wh=new mh,this.Th={},this.Oc=null,this.Xi=null}return t.prototype.qu=function(t){},t.prototype.Qu=function(t,e,n){},t.prototype.Wu=function(t){return this.wh.Au(t),this.Th[t]||"not-current"},t.prototype.Ju=function(t,e,n){this.Th[t]=e},t.prototype.Gu=function(t){this.wh.Ru(t)},t.prototype.zu=function(t){return this.wh.activeTargetIds.has(t)},t.prototype.Hu=function(t){delete this.Th[t]},t.prototype.$u=function(){return this.wh.activeTargetIds},t.prototype.Bu=function(t){return this.wh.activeTargetIds.has(t)},t.prototype.start=function(){return this.wh=new mh,Promise.resolve()},t.prototype.Xu=function(t,e,n){},t.prototype.Zu=function(t){},t.prototype.pa=function(){},t.prototype.er=function(t){},t.prototype.eh=function(){},t}(),bh=function(t){this.key=t},wh=function(t){this.key=t},Eh=function(){function t(t,e){this.query=t,this.Eh=e,this.Ih=null,this.Zt=!1,this.mh=xa(),this.Qt=xa(),this.Ah=Wu(t),this.Rh=new Da(this.Ah)}return Object.defineProperty(t.prototype,"Ph",{get:function(){return this.Eh},enumerable:!1,configurable:!0}),t.prototype.gh=function(t,e){var n=this,r=e?e.Vh:new La,i=e?e.Rh:this.Rh,o=e?e.Qt:this.Qt,a=i,s=!1,u=Du(this.query)&&i.size===this.query.limit?i.last():null,c=Lu(this.query)&&i.size===this.query.limit?i.first():null;if(t.ut((function(t,e){var l=i.get(t),f=e instanceof Su?e:null;f&&(f=Hu(n.query,f)?f:null);var h=!!l&&n.Qt.has(l.key),p=!!f&&(f.Je||n.Qt.has(f.key)&&f.hasCommittedMutations),d=!1;l&&f?l.data().isEqual(f.data())?h!==p&&(r.track({type:3,doc:f}),d=!0):n.yh(l,f)||(r.track({type:2,doc:f}),d=!0,(u&&n.Ah(f,u)>0||c&&n.Ah(f,c)<0)&&(s=!0)):!l&&f?(r.track({type:0,doc:f}),d=!0):l&&!f&&(r.track({type:1,doc:l}),d=!0,(u||c)&&(s=!0)),d&&(f?(a=a.add(f),o=p?o.add(t):o.delete(t)):(a=a.delete(t),o=o.delete(t)))})),Du(this.query)||Lu(this.query))for(;a.size>this.query.limit;){var l=Du(this.query)?a.last():a.first();a=a.delete(l.key),o=o.delete(l.key),r.track({type:1,doc:l})}return{Rh:a,Vh:r,ph:s,Qt:o}},t.prototype.yh=function(t,e){return t.Je&&e.hasCommittedMutations&&!e.Je},t.prototype.bi=function(t,e,n){var r=this,i=this.Rh;this.Rh=t.Rh,this.Qt=t.Qt;var o=t.Vh.qt();o.sort((function(t,e){return function(t,e){var n=function(t){switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return Mo()}};return n(t)-n(e)}(t.type,e.type)||r.Ah(t.doc,e.doc)})),this.bh(n);var a=e?this.Sh():[],s=0===this.mh.size&&this.Zt?1:0,u=s!==this.Ih;return this.Ih=s,0!==o.length||u?{snapshot:new Ra(this.query,t.Rh,i,o,t.Qt,0===s,u,!1),Dh:a}:{Dh:a}},t.prototype.Bs=function(t){return this.Zt&&"Offline"===t?(this.Zt=!1,this.bi({Rh:this.Rh,Vh:new La,Qt:this.Qt,ph:!1},!1)):{Dh:[]}},t.prototype.Ch=function(t){return!this.Eh.has(t)&&!!this.Rh.has(t)&&!this.Rh.get(t).Je},t.prototype.bh=function(t){var e=this;t&&(t.te.forEach((function(t){return e.Eh=e.Eh.add(t)})),t.ee.forEach((function(t){})),t.ne.forEach((function(t){return e.Eh=e.Eh.delete(t)})),this.Zt=t.Zt)},t.prototype.Sh=function(){var t=this;if(!this.Zt)return[];var e=this.mh;this.mh=xa(),this.Rh.forEach((function(e){t.Ch(e.key)&&(t.mh=t.mh.add(e.key))}));var n=[];return e.forEach((function(e){t.mh.has(e)||n.push(new wh(e))})),this.mh.forEach((function(t){e.has(t)||n.push(new bh(t))})),n},t.prototype.Nh=function(t){this.Eh=t.Xa,this.mh=xa();var e=this.gh(t.documents);return this.bi(e,!0)},t.prototype.xh=function(){return Ra.jt(this.query,this.Rh,this.Qt,0===this.Ih)},t}(),Ih=function(t,e,n){this.query=t,this.targetId=e,this.view=n},Ah=function(t){this.key=t,this.Fh=!1},_h=function(){function t(t,e,n,r,i,o){this.Kc=t,this.Oh=e,this.Mh=n,this.kh=r,this.currentUser=i,this.$h=o,this.Lh={},this.Bh=new Wo((function(t){return Gu(t)}),qu),this.qh=new Map,this.Uh=[],this.Qh=new ga(na.V),this.Kh=new Map,this.Wh=new sh,this.jh={},this.Gh=new Map,this.zh=nf.vo(),this.onlineState="Unknown",this.Hh=void 0}return Object.defineProperty(t.prototype,"Jh",{get:function(){return!0===this.Hh},enumerable:!1,configurable:!0}),t}();function Th(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a,s;return d(this,(function(u){switch(u.label){case 0:return n=tp(t),(o=n.Bh.get(e))?(r=o.targetId,n.kh.Wu(r),i=o.view.xh(),[3,4]):[3,1];case 1:return[4,Af(n.Kc,Fu(e))];case 2:return a=u.sent(),s=n.kh.Wu(a.targetId),r=a.targetId,[4,kh(n,e,r,"current"===s)];case 3:i=u.sent(),n.Jh&&jf(n.Oh,a),u.label=4;case 4:return[2,i]}}))}))}function kh(t,e,n,r){return p(this,void 0,void 0,(function(){var i,o,a,s,u,c;return d(this,(function(l){switch(l.label){case 0:return t.Yh=function(e,n,r){return function(t,e,n,r){return p(this,void 0,void 0,(function(){var i,o,a;return d(this,(function(s){switch(s.label){case 0:return(i=e.view.gh(n)).ph?[4,Tf(t.Kc,e.query,!1).then((function(t){var n=t.documents;return e.view.gh(n,i)}))]:[3,2];case 1:i=s.sent(),s.label=2;case 2:return o=r&&r.Gt.get(e.targetId),a=e.view.bi(i,t.Jh,o),[2,(Fh(t,e.targetId,a.Dh),a.snapshot)]}}))}))}(t,e,n,r)},[4,Tf(t.Kc,e,!0)];case 1:return i=l.sent(),o=new Eh(e,i.Xa),a=o.gh(i.documents),s=Va.Xt(n,r&&"Offline"!==t.onlineState),u=o.bi(a,t.Jh,s),Fh(t,n,u.Dh),c=new Ih(e,n,o),[2,(t.Bh.set(e,c),t.qh.has(n)?t.qh.get(n).push(e):t.qh.set(n,[e]),u.snapshot)]}}))}))}function Sh(t,e){return p(this,void 0,void 0,(function(){var n,r,i;return d(this,(function(o){switch(o.label){case 0:return n=jo(t),r=n.Bh.get(e),(i=n.qh.get(r.targetId)).length>1?[2,(n.qh.set(r.targetId,i.filter((function(t){return!qu(t,e)}))),void n.Bh.delete(e))]:n.Jh?(n.kh.Gu(r.targetId),n.kh.Bu(r.targetId)?[3,2]:[4,_f(n.Kc,r.targetId,!1).then((function(){n.kh.Hu(r.targetId),Ff(n.Oh,r.targetId),Vh(n,r.targetId)})).catch(Cf)]):[3,3];case 1:o.sent(),o.label=2;case 2:return[3,5];case 3:return Vh(n,r.targetId),[4,_f(n.Kc,r.targetId,!0)];case 4:o.sent(),o.label=5;case 5:return[2]}}))}))}function Nh(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o,a;return d(this,(function(s){switch(s.label){case 0:r=ep(t),s.label=1;case 1:return s.trys.push([1,5,,6]),[4,function(t,e){var n,r=jo(t),i=Xo.now(),o=e.reduce((function(t,e){return t.add(e.key)}),xa());return r.persistence.runTransaction("Locally write mutations","readwrite",(function(t){return r.Ga.Li(t,o).next((function(o){n=o;for(var a=[],s=0,u=e;s<u.length;s++){var c=u[s],l=hu(c,n.get(c.key));null!=l&&a.push(new mu(c.key,l,Tu(l.proto.mapValue),su.exists(!0)))}return r.xi.Qr(t,i,a,e)}))})).then((function(t){var e=t.wi(n);return{batchId:t.batchId,Ii:e}}))}(r.Kc,e)];case 2:return i=s.sent(),r.kh.qu(i.batchId),function(t,e,n){var r=t.jh[t.currentUser.Ys()];r||(r=new ga(Bo)),r=r.rt(e,n),t.jh[t.currentUser.Ys()]=r}(r,i.batchId,n),[4,zh(r,i.Ii)];case 3:return s.sent(),[4,$f(r.Oh)];case 4:return s.sent(),[3,6];case 5:return o=s.sent(),a=kc(o,"Failed to persist write"),n.reject(a),[3,6];case 6:return[2]}}))}))}function Ch(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:n=jo(t),i.label=1;case 1:return i.trys.push([1,4,,6]),[4,Ef(n.Kc,e)];case 2:return r=i.sent(),e.Gt.forEach((function(t,e){var r=n.Kh.get(e);r&&(Vo(t.te.size+t.ee.size+t.ne.size<=1),t.te.size>0?r.Fh=!0:t.ee.size>0?Vo(r.Fh):t.ne.size>0&&(Vo(r.Fh),r.Fh=!1))})),[4,zh(n,r,e)];case 3:return i.sent(),[3,6];case 4:return[4,Cf(i.sent())];case 5:return i.sent(),[3,6];case 6:return[2]}}))}))}function xh(t,e,n){var r=jo(t);if(r.Jh&&0===n||!r.Jh&&1===n){var i=[];r.Bh.forEach((function(t,n){var r=n.view.Bs(e);r.snapshot&&i.push(r.snapshot)})),function(t,e){var n=jo(t);n.onlineState=e;var r=!1;n.queries.forEach((function(t,n){for(var i=0,o=n.listeners;i<o.length;i++)o[i].Bs(e)&&(r=!0)})),r&&Dc(n)}(r.Mh,e),i.length&&r.Lh.Rc(i),r.onlineState=e,r.Jh&&r.kh.Zu(e)}}function Oh(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o,a,s,u;return d(this,(function(c){switch(c.label){case 0:return(r=jo(t)).kh.Ju(e,"rejected",n),i=r.Kh.get(e),(o=i&&i.key)?(a=(a=new ga(na.V)).rt(o,new Nu(o,$o.min())),s=xa().add(o),u=new Ma($o.min(),new Map,new Ea(Bo),a,s),[4,Ch(r,u)]):[3,2];case 1:return c.sent(),r.Qh=r.Qh.remove(o),r.Kh.delete(e),Bh(r),[3,4];case 2:return[4,_f(r.Kc,e,!1).then((function(){return Vh(r,e,n)})).catch(Cf)];case 3:c.sent(),c.label=4;case 4:return[2]}}))}))}function Ph(t,e){return p(this,void 0,void 0,(function(){var n,r,i;return d(this,(function(o){switch(o.label){case 0:n=jo(t),r=e.batch.batchId,o.label=1;case 1:return o.trys.push([1,4,,6]),[4,bf(n.Kc,e)];case 2:return i=o.sent(),Mh(n,r,null),Rh(n,r),n.kh.Qu(r,"acknowledged"),[4,zh(n,i)];case 3:return o.sent(),[3,6];case 4:return[4,Cf(o.sent())];case 5:return o.sent(),[3,6];case 6:return[2]}}))}))}function Dh(t,e,n){return p(this,void 0,void 0,(function(){var r,i;return d(this,(function(o){switch(o.label){case 0:r=jo(t),o.label=1;case 1:return o.trys.push([1,4,,6]),[4,function(t,e){var n=jo(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(function(t){var r;return n.xi.Wr(t,e).next((function(e){return Vo(null!==e),r=e.keys(),n.xi.Yr(t,e)})).next((function(){return n.xi.no(t)})).next((function(){return n.Ga.Li(t,r)}))}))}(r.Kc,e)];case 2:return i=o.sent(),Mh(r,e,n),Rh(r,e),r.kh.Qu(e,"rejected",n),[4,zh(r,i)];case 3:return o.sent(),[3,6];case 4:return[4,Cf(o.sent())];case 5:return o.sent(),[3,6];case 6:return[2]}}))}))}function Lh(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a;return d(this,(function(s){switch(s.label){case 0:Gf((n=jo(t)).Oh)||Po("SyncEngine","The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."),s.label=1;case 1:return s.trys.push([1,3,,4]),[4,function(t){var e=jo(t);return e.persistence.runTransaction("Get highest unacknowledged batch id","readonly",(function(t){return e.xi.zr(t)}))}(n.Kc)];case 2:return-1===(r=s.sent())?[2,void e.resolve()]:((i=n.Gh.get(r)||[]).push(e),n.Gh.set(r,i),[3,4]);case 3:return o=s.sent(),a=kc(o,"Initialization of waitForPendingWrites() operation failed"),e.reject(a),[3,4];case 4:return[2]}}))}))}function Rh(t,e){(t.Gh.get(e)||[]).forEach((function(t){t.resolve()})),t.Gh.delete(e)}function Mh(t,e,n){var r=jo(t),i=r.jh[r.currentUser.Ys()];if(i){var o=i.get(e);o&&(n?o.reject(n):o.resolve(),i=i.remove(e)),r.jh[r.currentUser.Ys()]=i}}function Vh(t,e,n){void 0===n&&(n=null),t.kh.Gu(e);for(var r=0,i=t.qh.get(e);r<i.length;r++){var o=i[r];t.Bh.delete(o),n&&t.Lh.Xh(o,n)}t.qh.delete(e),t.Jh&&t.Wh.du(e).forEach((function(e){t.Wh.so(e)||jh(t,e)}))}function jh(t,e){var n=t.Qh.get(e);null!==n&&(Ff(t.Oh,n),t.Qh=t.Qh.remove(e),t.Kh.delete(n),Bh(t))}function Fh(t,e,n){for(var r=0,i=n;r<i.length;r++){var o=i[r];o instanceof bh?(t.Wh.Qo(o.key,e),Uh(t,o)):o instanceof wh?(Po("SyncEngine","Document no longer in limbo: "+o.key),t.Wh.Wo(o.key,e),t.Wh.so(o.key)||jh(t,o.key)):Mo()}}function Uh(t,e){var n=e.key;t.Qh.get(n)||(Po("SyncEngine","New document in limbo: "+n),t.Uh.push(n),Bh(t))}function Bh(t){for(;t.Uh.length>0&&t.Qh.size<t.$h;){var e=t.Uh.shift(),n=t.zh.next();t.Kh.set(n,new Ah(e)),t.Qh=t.Qh.rt(e,n),jf(t.Oh,new da(Fu(Pu(e.path)),n,2,Xc.nr))}}function zh(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o,a;return d(this,(function(s){switch(s.label){case 0:return r=jo(t),i=[],o=[],a=[],r.Bh.T()?[3,3]:(r.Bh.forEach((function(t,s){a.push(r.Yh(s,e,n).then((function(t){if(t){r.Jh&&r.kh.Ju(s.targetId,t.fromCache?"not-current":"current"),i.push(t);var e=Qc.Yi(s.targetId,t);o.push(e)}})))})),[4,Promise.all(a)]);case 1:return s.sent(),r.Lh.Rc(i),[4,function(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a,s,u,c,l;return d(this,(function(f){switch(f.label){case 0:n=jo(t),f.label=1;case 1:return f.trys.push([1,3,,4]),[4,n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(function(t){return hc.forEach(e,(function(e){return hc.forEach(e.Hi,(function(r){return n.persistence.Lr.Qo(t,e.targetId,r)})).next((function(){return hc.forEach(e.Ji,(function(r){return n.persistence.Lr.Wo(t,e.targetId,r)}))}))}))}))];case 2:return f.sent(),[3,4];case 3:if(!mc(r=f.sent()))throw r;return Po("LocalStore","Failed to update sequence numbers: "+r),[3,4];case 4:for(i=0,o=e;i<o.length;i++)a=o[i],s=a.targetId,a.fromCache||(u=n.Qa.get(s),c=u.et,l=u.it(c),n.Qa=n.Qa.rt(s,l));return[2]}}))}))}(r.Kc,o)];case 2:s.sent(),s.label=3;case 3:return[2]}}))}))}function qh(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:return(n=jo(t)).currentUser.isEqual(e)?[3,3]:(Po("SyncEngine","User change. New user:",e.Ys()),[4,gf(n.Kc,e)]);case 1:return r=i.sent(),n.currentUser=e,function(t,e){t.Gh.forEach((function(t){t.forEach((function(t){t.reject(new Qo(Yo.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Gh.clear()}(n),n.kh.Xu(e,r.Ja,r.Ya),[4,zh(n,r.Ha)];case 2:i.sent(),i.label=3;case 3:return[2]}}))}))}function Gh(t,e){var n=jo(t),r=n.Kh.get(e);if(r&&r.Fh)return xa().add(r.key);var i=xa(),o=n.qh.get(e);if(!o)return i;for(var a=0,s=o;a<s.length;a++){var u=s[a],c=n.Bh.get(u);i=i.Ot(c.view.Ph)}return i}function Kh(t,e){return p(this,void 0,void 0,(function(){var n,r,i;return d(this,(function(o){switch(o.label){case 0:return[4,Tf((n=jo(t)).Kc,e.query,!0)];case 1:return r=o.sent(),i=e.view.Nh(r),[2,(n.Jh&&Fh(n,e.targetId,i.Dh),i)]}}))}))}function Hh(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){return[2,Sf((e=jo(t)).Kc).then((function(t){return zh(e,t)}))]}))}))}function Wh(t,e,n,r){return p(this,void 0,void 0,(function(){var i,o;return d(this,(function(a){switch(a.label){case 0:return[4,function(t,e){var n=jo(t),r=jo(n.xi);return n.persistence.runTransaction("Lookup mutation documents","readonly",(function(t){return r.jr(t,e).next((function(e){return e?n.Ga.Li(t,e):hc.resolve(null)}))}))}((i=jo(t)).Kc,e)];case 1:return null===(o=a.sent())?[3,6]:"pending"!==n?[3,3]:[4,$f(i.Oh)];case 2:return a.sent(),[3,4];case 3:"acknowledged"===n||"rejected"===n?(Mh(i,e,r||null),Rh(i,e),function(t,e){jo(jo(t).xi).Zr(e)}(i.Kc,e)):Mo(),a.label=4;case 4:return[4,zh(i,o)];case 5:return a.sent(),[3,7];case 6:Po("SyncEngine","Cannot apply mutation batch with id: "+e),a.label=7;case 7:return[2]}}))}))}function Yh(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a,s,u,c;return d(this,(function(l){switch(l.label){case 0:return tp(n=jo(t)),ep(n),!0!==e||!0===n.Hh?[3,3]:(r=n.kh.$u(),[4,Qh(n,r.O())]);case 1:return i=l.sent(),n.Hh=!0,[4,ih(n.Oh,!0)];case 2:for(l.sent(),o=0,a=i;o<a.length;o++)s=a[o],jf(n.Oh,s);return[3,7];case 3:return!1!==e||!1===n.Hh?[3,7]:(u=[],c=Promise.resolve(),n.qh.forEach((function(t,e){n.kh.zu(e)?u.push(e):c=c.then((function(){return Vh(n,e),_f(n.Kc,e,!0)})),Ff(n.Oh,e)})),[4,c]);case 4:return l.sent(),[4,Qh(n,u)];case 5:return l.sent(),function(t){var e=jo(t);e.Kh.forEach((function(t,n){Ff(e.Oh,n)})),e.Wh.wu(),e.Kh=new Map,e.Qh=new ga(na.V)}(n),n.Hh=!1,[4,ih(n.Oh,!1)];case 6:l.sent(),l.label=7;case 7:return[2]}}))}))}function Qh(t,e,n){return p(this,void 0,void 0,(function(){var n,r,i,o,a,s,u,c,l,f,h,p,v,m;return d(this,(function(d){switch(d.label){case 0:n=jo(t),r=[],i=[],o=0,a=e,d.label=1;case 1:return o<a.length?(s=a[o],u=void 0,(c=n.qh.get(s))&&0!==c.length?[4,Af(n.Kc,Fu(c[0]))]:[3,7]):[3,13];case 2:u=d.sent(),l=0,f=c,d.label=3;case 3:return l<f.length?(h=f[l],p=n.Bh.get(h),[4,Kh(n,p)]):[3,6];case 4:(v=d.sent()).snapshot&&i.push(v.snapshot),d.label=5;case 5:return l++,[3,3];case 6:return[3,11];case 7:return[4,kf(n.Kc,s)];case 8:return m=d.sent(),[4,Af(n.Kc,m)];case 9:return u=d.sent(),[4,kh(n,Xh(m),s,!1)];case 10:d.sent(),d.label=11;case 11:r.push(u),d.label=12;case 12:return o++,[3,1];case 13:return[2,(n.Lh.Rc(i),r)]}}))}))}function Xh(t){return Ou(t.path,t.collectionGroup,t.orderBy,t.filters,t.limit,"F",t.startAt,t.endAt)}function $h(t){var e=jo(t);return jo(jo(e.Kc).persistence).Ca()}function Jh(t,e,n,r){return p(this,void 0,void 0,(function(){var i,o,a;return d(this,(function(s){switch(s.label){case 0:return(i=jo(t)).Hh?(Po("SyncEngine","Ignoring unexpected query state notification."),[3,8]):[3,1];case 1:if(!i.qh.has(e))return[3,8];switch(n){case"current":case"not-current":return[3,2];case"rejected":return[3,5]}return[3,7];case 2:return[4,Sf(i.Kc)];case 3:return o=s.sent(),a=Ma.Yt(e,"current"===n),[4,zh(i,o,a)];case 4:return s.sent(),[3,8];case 5:return[4,_f(i.Kc,e,!0)];case 6:return s.sent(),Vh(i,e,r),[3,8];case 7:Mo(),s.label=8;case 8:return[2]}}))}))}function Zh(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o,a,s,u,c,l,f,h;return d(this,(function(p){switch(p.label){case 0:if(!(r=tp(t)).Hh)return[3,10];i=0,o=e,p.label=1;case 1:return i<o.length?(a=o[i],r.qh.has(a)?(Po("SyncEngine","Adding an already active target "+a),[3,5]):[4,kf(r.Kc,a)]):[3,6];case 2:return s=p.sent(),[4,Af(r.Kc,s)];case 3:return u=p.sent(),[4,kh(r,Xh(s),u.targetId,!1)];case 4:p.sent(),jf(r.Oh,u),p.label=5;case 5:return i++,[3,1];case 6:c=function(t){return d(this,(function(e){switch(e.label){case 0:return r.qh.has(t)?[4,_f(r.Kc,t,!1).then((function(){Ff(r.Oh,t),Vh(r,t)})).catch(Cf)]:[3,2];case 1:e.sent(),e.label=2;case 2:return[2]}}))},l=0,f=n,p.label=7;case 7:return l<f.length?(h=f[l],[5,c(h)]):[3,10];case 8:p.sent(),p.label=9;case 9:return l++,[3,7];case 10:return[2]}}))}))}function tp(t){var e=jo(t);return e.Oh.jc.nu=Ch.bind(null,e),e.Oh.jc.Be=Gh.bind(null,e),e.Oh.jc.eu=Oh.bind(null,e),e.Lh.Rc=Oc.bind(null,e.Mh),e.Lh.Xh=Pc.bind(null,e.Mh),e}function ep(t){var e=jo(t);return e.Oh.jc.su=Ph.bind(null,e),e.Oh.jc.iu=Dh.bind(null,e),e}var np=function(){function t(){}return t.prototype.za=function(t){this.Zh=t},t.prototype.Ui=function(t,e,n,r){var i=this;return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.rn.length||1===t.rn.length&&t.rn[0].field.B())}(e)||n.isEqual($o.min())?this.tl(t,e):this.Zh.Li(t,r).next((function(o){var a=i.el(e,o);return(Du(e)||Lu(e))&&i.ph(e.limitType,a,r,n)?i.tl(t,e):(Oo()<=z.DEBUG&&Po("IndexFreeQueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),Ku(e)),i.Zh.Ui(t,e,n).next((function(t){return a.forEach((function(e){t=t.rt(e.key,e)})),t})))}))},t.prototype.el=function(t,e){var n=new Ea(Wu(t));return e.forEach((function(e,r){r instanceof Su&&Hu(t,r)&&(n=n.add(r))})),n},t.prototype.ph=function(t,e,n,r){if(n.size!==e.size)return!0;var i="F"===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.A(r)>0)},t.prototype.tl=function(t,e){return Oo()<=z.DEBUG&&Po("IndexFreeQueryEngine","Using full collection scan to execute query:",Ku(e)),this.Zh.Ui(t,e,$o.min())},t}(),rp=function(){function t(t,e){this.Fi=t,this.Lr=e,this.xi=[],this.nl=1,this.sl=new Ea(uh.cu)}return t.prototype.Ur=function(t){return hc.resolve(0===this.xi.length)},t.prototype.Qr=function(t,e,n,r){var i=this.nl;this.nl++,this.xi.length>0&&this.xi[this.xi.length-1];var o=new Bc(i,e,n,r);this.xi.push(o);for(var a=0,s=r;a<s.length;a++){var u=s[a];this.sl=this.sl.add(new uh(u.key,i)),this.Fi.Kr(t,u.key.path.S())}return hc.resolve(o)},t.prototype.Wr=function(t,e){return hc.resolve(this.il(e))},t.prototype.Gr=function(t,e){var n=e+1,r=this.rl(n),i=r<0?0:r;return hc.resolve(this.xi.length>i?this.xi[i]:null)},t.prototype.zr=function(){return hc.resolve(0===this.xi.length?-1:this.nl-1)},t.prototype.Hr=function(t){return hc.resolve(this.xi.slice())},t.prototype.Mi=function(t,e){var n=this,r=new uh(e,0),i=new uh(e,Number.POSITIVE_INFINITY),o=[];return this.sl.Nt([r,i],(function(t){var e=n.il(t.Eu);o.push(e)})),hc.resolve(o)},t.prototype.qi=function(t,e){var n=this,r=new Ea(Bo);return e.forEach((function(t){var e=new uh(t,0),i=new uh(t,Number.POSITIVE_INFINITY);n.sl.Nt([e,i],(function(t){r=r.add(t.Eu)}))})),hc.resolve(this.ol(r))},t.prototype.Gi=function(t,e){var n=e.path,r=n.length+1,i=n;na.G(i)||(i=i.child(""));var o=new uh(new na(i),0),a=new Ea(Bo);return this.sl.xt((function(t){var e=t.key.path;return!!n.N(e)&&(e.length===r&&(a=a.add(t.Eu)),!0)}),o),hc.resolve(this.ol(a))},t.prototype.ol=function(t){var e=this,n=[];return t.forEach((function(t){var r=e.il(t);null!==r&&n.push(r)})),n},t.prototype.Yr=function(t,e){var n=this;Vo(0===this.al(e.batchId,"removed")),this.xi.shift();var r=this.sl;return hc.forEach(e.mutations,(function(i){var o=new uh(i.key,e.batchId);return r=r.delete(o),n.Lr.eo(t,i.key)})).next((function(){n.sl=r}))},t.prototype.Zr=function(t){},t.prototype.so=function(t,e){var n=new uh(e,0),r=this.sl.Ft(n);return hc.resolve(e.isEqual(r&&r.key))},t.prototype.no=function(t){return this.xi.length,hc.resolve()},t.prototype.al=function(t,e){return this.rl(t)},t.prototype.rl=function(t){return 0===this.xi.length?0:t-this.xi[0].batchId},t.prototype.il=function(t){var e=this.rl(t);return e<0||e>=this.xi.length?null:this.xi[e]},t}(),ip=function(){function t(t,e){this.Fi=t,this.cl=e,this.docs=new ga(na.V),this.size=0}return t.prototype.Ri=function(t,e,n){var r=e.key,i=this.docs.get(r),o=i?i.size:0,a=this.cl(e);return this.docs=this.docs.rt(r,{gi:e,size:a,readTime:n}),this.size+=a-o,this.Fi.Kr(t,r.path.S())},t.prototype.Vi=function(t){var e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)},t.prototype.yi=function(t,e){var n=this.docs.get(e);return hc.resolve(n?n.gi:null)},t.prototype.getEntries=function(t,e){var n=this,r=Ta();return e.forEach((function(t){var e=n.docs.get(t);r=r.rt(t,e?e.gi:null)})),hc.resolve(r)},t.prototype.Ui=function(t,e,n){for(var r=Sa(),i=new na(e.path.child("")),o=this.docs._t(i);o.It();){var a=o.Et(),s=a.key,u=a.value,c=u.gi,l=u.readTime;if(!e.path.N(s.path))break;l.A(n)<=0||c instanceof Su&&Hu(e,c)&&(r=r.rt(c.key,c))}return hc.resolve(r)},t.prototype.ul=function(t,e){return hc.forEach(this.docs,(function(t){return e(t)}))},t.prototype._o=function(t){return new op(this)},t.prototype.wo=function(t){return hc.resolve(this.size)},t}(),op=function(t){function e(e){var n=this;return(n=t.call(this)||this).To=e,n}return f(e,t),e.prototype.bi=function(t){var e=this,n=[];return this.Ii.forEach((function(r,i){i&&i.gi?n.push(e.To.Ri(t,i.gi,e.Ai(r))):e.To.Vi(r)})),hc.xn(n)},e.prototype.pi=function(t,e){return this.To.yi(t,e)},e.prototype.vi=function(t,e){return this.To.getEntries(t,e)},e}(qc),ap=function(){function t(t){this.persistence=t,this.hl=new Wo((function(t){return ua(t)}),ca),this.lastRemoteSnapshotVersion=$o.min(),this.highestTargetId=0,this.ll=0,this._l=new sh,this.targetCount=0,this.fl=nf.po()}return t.prototype.De=function(t,e){return this.hl.forEach((function(t,n){return e(n)})),hc.resolve()},t.prototype.Co=function(t){return hc.resolve(this.lastRemoteSnapshotVersion)},t.prototype.No=function(t){return hc.resolve(this.ll)},t.prototype.bo=function(t){return this.highestTargetId=this.fl.next(),hc.resolve(this.highestTargetId)},t.prototype.xo=function(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.ll&&(this.ll=e),hc.resolve()},t.prototype.Oo=function(t){this.hl.set(t.target,t);var e=t.targetId;e>this.highestTargetId&&(this.fl=new nf(e),this.highestTargetId=e),t.sequenceNumber>this.ll&&(this.ll=t.sequenceNumber)},t.prototype.Fo=function(t,e){return this.Oo(e),this.targetCount+=1,hc.resolve()},t.prototype.ko=function(t,e){return this.Oo(e),hc.resolve()},t.prototype.$o=function(t,e){return this.hl.delete(e.target),this._l.du(e.targetId),this.targetCount-=1,hc.resolve()},t.prototype.Nr=function(t,e,n){var r=this,i=0,o=[];return this.hl.forEach((function(a,s){s.sequenceNumber<=e&&null===n.get(s.targetId)&&(r.hl.delete(a),o.push(r.Lo(t,s.targetId)),i++)})),hc.xn(o).next((function(){return i}))},t.prototype.Bo=function(t){return hc.resolve(this.targetCount)},t.prototype.qo=function(t,e){var n=this.hl.get(e)||null;return hc.resolve(n)},t.prototype.Uo=function(t,e,n){return this._l.lu(e,n),hc.resolve()},t.prototype.Ko=function(t,e,n){this._l.fu(e,n);var r=this.persistence.Lr,i=[];return r&&e.forEach((function(e){i.push(r.eo(t,e))})),hc.xn(i)},t.prototype.Lo=function(t,e){return this._l.du(e),hc.resolve()},t.prototype.jo=function(t,e){var n=this._l.Tu(e);return hc.resolve(n)},t.prototype.so=function(t,e){return hc.resolve(this._l.so(e))},t}(),sp=function(){function t(t){this.serializer=t,this.dl=new Map,this.wl=new Map}return t.prototype.mo=function(t,e){return hc.resolve(this.dl.get(e))},t.prototype.Ao=function(t,e){var n;return this.dl.set(e.id,{id:(n=e).id,version:n.version,createTime:ws(n.createTime)}),hc.resolve()},t.prototype.Ro=function(t,e){return hc.resolve(this.wl.get(e))},t.prototype.Po=function(t,e){var n;return this.wl.set(e.name,{name:(n=e).name,query:yl(n.bundledQuery),readTime:ws(n.readTime)}),hc.resolve()},t}(),up=function(){function t(t,e){var n=this;this.Tl={},this.Jo=new Xc(0),this.Yo=!1,this.Yo=!0,this.Lr=t(this),this.ra=new ap(this),this.Fi=new xl,this.Ni=function(t,e){return new ip(t,(function(t){return n.Lr.El(t)}))}(this.Fi),this.serializer=new sl(e),this.oa=new sp(this.serializer)}return t.prototype.start=function(){return Promise.resolve()},t.prototype.pa=function(){return this.Yo=!1,Promise.resolve()},Object.defineProperty(t.prototype,"yr",{get:function(){return this.Yo},enumerable:!1,configurable:!0}),t.prototype.fa=function(){},t.prototype.da=function(){},t.prototype.Oa=function(){return this.Fi},t.prototype.Na=function(t){var e=this.Tl[t.Ys()];return e||(e=new rp(this.Fi,this.Lr),this.Tl[t.Ys()]=e),e},t.prototype.xa=function(){return this.ra},t.prototype.Fa=function(){return this.Ni},t.prototype.Ma=function(){return this.oa},t.prototype.runTransaction=function(t,e,n){var r=this;Po("MemoryPersistence","Starting transaction:",t);var i=new cp(this.Jo.next());return this.Lr.Il(),n(i).next((function(t){return r.Lr.ml(i).next((function(){return t}))})).Cn().then((function(t){return i.Ci(),t}))},t.prototype.Al=function(t,e){return hc.Fn(Object.values(this.Tl).map((function(n){return function(){return n.so(t,e)}})))},t}(),cp=function(t){function e(e){var n=this;return(n=t.call(this)||this).Go=e,n}return f(e,t),e}(Wc),lp=function(){function t(t){this.persistence=t,this.Rl=new sh,this.Pl=null}return t.gl=function(e){return new t(e)},Object.defineProperty(t.prototype,"Vl",{get:function(){if(this.Pl)return this.Pl;throw Mo()},enumerable:!1,configurable:!0}),t.prototype.Qo=function(t,e,n){return this.Rl.Qo(n,e),this.Vl.delete(n.toString()),hc.resolve()},t.prototype.Wo=function(t,e,n){return this.Rl.Wo(n,e),this.Vl.add(n.toString()),hc.resolve()},t.prototype.eo=function(t,e){return this.Vl.add(e.toString()),hc.resolve()},t.prototype.removeTarget=function(t,e){var n=this;this.Rl.du(e.targetId).forEach((function(t){return n.Vl.add(t.toString())}));var r=this.persistence.xa();return r.jo(t,e.targetId).next((function(t){t.forEach((function(t){return n.Vl.add(t.toString())}))})).next((function(){return r.$o(t,e)}))},t.prototype.Il=function(){this.Pl=new Set},t.prototype.ml=function(t){var e=this,n=this.persistence.Fa()._o();return hc.forEach(this.Vl,(function(r){var i=na.K(r);return e.yl(t,i).next((function(t){t||n.Vi(i)}))})).next((function(){return e.Pl=null,n.apply(t)}))},t.prototype.qa=function(t,e){var n=this;return this.yl(t,e).next((function(t){t?n.Vl.delete(e.toString()):n.Vl.add(e.toString())}))},t.prototype.El=function(t){return 0},t.prototype.yl=function(t,e){var n=this;return hc.Fn([function(){return hc.resolve(n.Rl.so(e))},function(){return n.persistence.xa().so(t,e)},function(){return n.persistence.Al(t,e)}])},t}(),fp=function(){function t(t){this.pl=t.pl,this.vl=t.vl}return t.prototype.mc=function(t){this.bl=t},t.prototype.dc=function(t){this.Sl=t},t.prototype.onMessage=function(t){this.Dl=t},t.prototype.close=function(){this.vl()},t.prototype.send=function(t){this.pl(t)},t.prototype.Cl=function(){this.bl()},t.prototype.Nl=function(t){this.Sl(t)},t.prototype.xl=function(t){this.Dl(t)},t}(),hp={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"},pp=function(t){function e(e){var n=this;return(n=t.call(this,e)||this).forceLongPolling=e.forceLongPolling,n.i=e.i,n}return f(e,t),e.prototype.Ll=function(t,e,n,r){return new Promise((function(i,o){var a=new So;a.listenOnce(To.COMPLETE,(function(){try{switch(a.getLastErrorCode()){case _o.NO_ERROR:var e=a.getResponseJson();Po("Connection","XHR received:",JSON.stringify(e)),i(e);break;case _o.TIMEOUT:Po("Connection",'RPC "'+t+'" timed out'),o(new Qo(Yo.DEADLINE_EXCEEDED,"Request time out"));break;case _o.HTTP_ERROR:var n=a.getStatus();if(Po("Connection",'RPC "'+t+'" failed with status:',n,"response text:",a.getResponseText()),n>0){var r=a.getResponseJson().error;if(r&&r.status&&r.message){var s=function(t){var e=t.toLowerCase().replace("_","-");return Object.values(Yo).indexOf(e)>=0?e:Yo.UNKNOWN}(r.status);o(new Qo(s,r.message))}else o(new Qo(Yo.UNKNOWN,"Server responded with status "+a.getStatus()))}else o(new Qo(Yo.UNAVAILABLE,"Connection failed."));break;default:Mo()}}finally{Po("Connection",'RPC "'+t+'" completed.')}}));var s=JSON.stringify(r);a.send(e,"POST",s,n,15)}))},e.prototype.Ac=function(t,e){var n=[this.Ol,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=new bo,i={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:"projects/"+this.t.projectId+"/databases/"+this.t.database},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.i};this.$l(i.initMessageHeaders,e),"undefined"!=typeof window&&(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(E())||"object"==typeof navigator&&"ReactNative"===navigator.product||E().indexOf("Electron/")>=0||function(){var t=E();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}()||E().indexOf("MSAppHost/")>=0||A()||(i.httpHeadersOverwriteParam="$httpHeaders");var o=n.join("");Po("Connection","Creating WebChannel: "+o,i);var a=r.createWebChannel(o,i),s=!1,u=!1,c=new fp({pl:function(t){u?Po("Connection","Not sending because WebChannel is closed:",t):(s||(Po("Connection","Opening WebChannel transport."),a.open(),s=!0),Po("Connection","WebChannel sending:",t),a.send(t))},vl:function(){return a.close()}}),l=function(t,e){a.listen(t,(function(t){try{e(t)}catch(t){setTimeout((function(){throw t}),0)}}))};return l(ko.EventType.OPEN,(function(){u||Po("Connection","WebChannel transport opened.")})),l(ko.EventType.CLOSE,(function(){u||(u=!0,Po("Connection","WebChannel transport closed"),c.Nl())})),l(ko.EventType.ERROR,(function(t){u||(u=!0,Lo("Connection","WebChannel transport errored:",t),c.Nl(new Qo(Yo.UNAVAILABLE,"The operation could not be completed")))})),l(ko.EventType.MESSAGE,(function(t){var e;if(!u){var n=t.data[0];Vo(!!n);var r=n,i=r.error||(null===(e=r[0])||void 0===e?void 0:e.error);if(i){Po("Connection","WebChannel received error:",i);var o=i.status,s=function(t){var e=ha[t];if(void 0!==e)return ya(e)}(o),l=i.message;void 0===s&&(s=Yo.INTERNAL,l="Unknown error status: "+o+" with message "+i.message),u=!0,c.Nl(new Qo(s,l)),a.close()}else Po("Connection","WebChannel received:",n),c.xl(n)}})),setTimeout((function(){c.Cl()}),0),c},e}(function(){function t(t){this.Fl=t,this.t=t.t;var e=t.ssl?"https":"http";this.Ol=e+"://"+t.host,this.Ml="projects/"+this.t.projectId+"/databases/"+this.t.database+"/documents"}return t.prototype.xc=function(t,e,n,r){var i=this.kl(t,e);Po("RestConnection","Sending: ",i,n);var o={};return this.$l(o,r),this.Ll(t,i,o,n).then((function(t){return Po("RestConnection","Received: ",t),t}),(function(e){throw Lo("RestConnection",t+" failed with error: ",e,"url: ",i,"request:",n),e}))},t.prototype.Fc=function(t,e,n,r){return this.xc(t,e,n,r)},t.prototype.$l=function(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/8.0.2",t["Content-Type"]="text/plain",e)for(var n in e.ti)e.ti.hasOwnProperty(n)&&(t[n]=e.ti[n])},t.prototype.kl=function(t,e){var n=hp[t];return this.Ol+"/v1/"+e+":"+n},t}()),dp=function(){function t(){var t=this;this.Bl=function(){return t.ql()},this.Ul=function(){return t.Ql()},this.Kl=[],this.Wl()}return t.prototype.Xc=function(t){this.Kl.push(t)},t.prototype.pa=function(){window.removeEventListener("online",this.Bl),window.removeEventListener("offline",this.Ul)},t.prototype.Wl=function(){window.addEventListener("online",this.Bl),window.addEventListener("offline",this.Ul)},t.prototype.ql=function(){Po("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(var t=0,e=this.Kl;t<e.length;t++)(0,e[t])(0)},t.prototype.Ql=function(){Po("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(var t=0,e=this.Kl;t<e.length;t++)(0,e[t])(1)},t.kn=function(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener},t}(),vp=function(){function t(){}return t.prototype.Xc=function(t){},t.prototype.pa=function(){},t}(),mp=function(){function t(){this.synchronizeTabs=!1}return t.prototype.initialize=function(t){return p(this,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return this.serializer=Gc(t.Fl.t),this.kh=this.jl(t),this.persistence=this.Gl(t),[4,this.persistence.start()];case 1:return e.sent(),this.zl=this.Hl(t),this.Kc=this.Jl(t),[2]}}))}))},t.prototype.Hl=function(t){return null},t.prototype.Jl=function(t){return yf(this.persistence,new np,t.Yl,this.serializer)},t.prototype.Gl=function(t){return new up(lp.gl,this.serializer)},t.prototype.jl=function(t){return new gh},t.prototype.terminate=function(){return p(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return this.zl&&this.zl.stop(),[4,this.kh.pa()];case 1:return t.sent(),[4,this.persistence.pa()];case 2:return t.sent(),[2]}}))}))},t}(),yp=function(t){function e(e,n,r){var i=this;return(i=t.call(this)||this).Xl=e,i.cacheSizeBytes=n,i.forceOwnership=r,i.synchronizeTabs=!1,i}return f(e,t),e.prototype.initialize=function(e){return p(this,void 0,void 0,(function(){return d(this,(function(n){switch(n.label){case 0:return[4,t.prototype.initialize.call(this,e)];case 1:return n.sent(),[4,Nf(this.Kc)];case 2:return n.sent(),[4,this.Xl.initialize(this,e)];case 3:return n.sent(),[4,ep(this.Xl.gu)];case 4:return n.sent(),[4,$f(this.Xl.Oh)];case 5:return n.sent(),[2]}}))}))},e.prototype.Jl=function(t){return yf(this.persistence,new np,t.Yl,this.serializer)},e.prototype.Hl=function(t){var e=this.persistence.Lr.Rr;return new el(e,t.rs)},e.prototype.Gl=function(t){var e=vf(t.Fl.t,t.Fl.persistenceKey),n=void 0!==this.cacheSizeBytes?tl.Tr(this.cacheSizeBytes):tl.mr;return new lf(this.synchronizeTabs,e,t.clientId,n,t.rs,Ic(),Ac(),this.serializer,this.kh,!!this.forceOwnership)},e.prototype.jl=function(t){return new gh},e}(mp),gp=function(t){function e(e,n){var r=this;return(r=t.call(this,e,n,!1)||this).Xl=e,r.cacheSizeBytes=n,r.synchronizeTabs=!0,r}return f(e,t),e.prototype.initialize=function(e){return p(this,void 0,void 0,(function(){var n,r=this;return d(this,(function(i){switch(i.label){case 0:return[4,t.prototype.initialize.call(this,e)];case 1:return i.sent(),n=this.Xl.gu,this.kh instanceof yh?(this.kh.gu={_h:Wh.bind(null,n),fh:Jh.bind(null,n),dh:Zh.bind(null,n),Ca:$h.bind(null,n),lh:Hh.bind(null,n)},[4,this.kh.start()]):[3,3];case 2:i.sent(),i.label=3;case 3:return[4,this.persistence._a((function(t){return p(r,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return[4,Yh(this.Xl.gu,t)];case 1:return e.sent(),this.zl&&(t&&!this.zl.yr?this.zl.start(this.Kc):t||this.zl.stop()),[2]}}))}))}))];case 4:return i.sent(),[2]}}))}))},e.prototype.jl=function(t){var e=Ic();if(!yh.kn(e))throw new Qo(Yo.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");var n=vf(t.Fl.t,t.Fl.persistenceKey);return new yh(e,t.rs,n,t.clientId,t.Yl)},e}(yp),bp=function(){function t(){}return t.prototype.initialize=function(t,e){return p(this,void 0,void 0,(function(){var n=this;return d(this,(function(r){switch(r.label){case 0:return this.Kc?[3,2]:(this.Kc=t.Kc,this.kh=t.kh,this.Wc=this.Zl(e),this.Oh=this.t_(e),this.Mh=this.e_(e),this.gu=this.n_(e,!t.synchronizeTabs),this.kh.Oc=function(t){return xh(n.gu,t,1)},this.Oh.jc.s_=qh.bind(null,this.gu),[4,ih(this.Oh,this.gu.Jh)]);case 1:r.sent(),r.label=2;case 2:return[2]}}))}))},t.prototype.e_=function(t){return new Nc},t.prototype.Zl=function(t){var e,n=Gc(t.Fl.t),r=(e=t.Fl,new pp(e));return function(t,e,n){return new Df(t,e,n)}(t.credentials,r,n)},t.prototype.t_=function(t){var e,n,r,i,o,a=this;return e=this.Kc,n=this.Wc,r=t.rs,i=function(t){return xh(a.gu,t,0)},o=dp.kn()?new dp:new vp,new Rf(e,n,r,i,o)},t.prototype.n_=function(t,e){return function(t,e,n,r,i,o,a){var s=new _h(t,e,n,r,i,o);return a&&(s.Hh=!0),s}(this.Kc,this.Oh,this.Mh,this.kh,t.Yl,t.$h,e)},t.prototype.terminate=function(){return function(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return e=jo(t),Po("RemoteStore","RemoteStore shutting down."),e.Hc.add(5),[4,Vf(e)];case 1:return n.sent(),e.Yc.pa(),e.Zc.set("Unknown"),[2]}}))}))}(this.Oh)},t}(),wp=function(){function t(t){this.observer=t,this.muted=!1}return t.prototype.next=function(t){this.observer.next&&this.i_(this.observer.next,t)},t.prototype.error=function(t){this.observer.error?this.i_(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t)},t.prototype.r_=function(){this.muted=!0},t.prototype.i_=function(t,e){var n=this;this.muted||setTimeout((function(){n.muted||t(e)}),0)},t}(),Ep=function(t){this.o_=t};function Ip(t,e,n){if(!n)throw new Qo(Yo.INVALID_ARGUMENT,"Function "+t+"() cannot be called with an empty "+e+".")}function Ap(t,e){if(void 0===e)return{merge:!1};if(void 0!==e.mergeFields&&void 0!==e.merge)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid options passed to function "+t+'(): You cannot specify both "merge" and "mergeFields".');return e}function _p(t,e,n,r){if(!0===e&&!0===r)throw new Qo(Yo.INVALID_ARGUMENT,t+" and "+n+" cannot be used together.")}function Tp(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=t.substring(0,20)+"..."),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";var e=function(t){if(t.constructor){var e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?"a custom "+e+" object":"an object"}return"function"==typeof t?"a function":Mo()}function kp(t,e){if(t instanceof Ep&&(t=t.o_),!(t instanceof e)){if(e.name===t.constructor.name)throw new Qo(Yo.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");var n=Tp(t);throw new Qo(Yo.INVALID_ARGUMENT,"Expected type '"+e.name+"', but it was: "+n)}return t}function Sp(t,e){if(e<=0)throw new Qo(Yo.INVALID_ARGUMENT,"Function "+t+"() requires a positive number, but it was: "+e+".")}var Np=function(t){this.a_=t},Cp=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.c_=function(t){if(2!==t.u_)throw 1===t.u_?t.h_(this.a_+"() can only appear at the top level of your update data"):t.h_(this.a_+"() cannot be used with set() unless you pass {merge:true}");return t.Qe.push(t.path),null},e.prototype.isEqual=function(t){return t instanceof e},e}(Np);function xp(t,e,n){return new nd({u_:3,l_:e.settings.l_,methodName:t.a_,__:n},e.t,e.serializer,e.ignoreUndefinedProperties)}var Op=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.c_=function(t){return new ou(t.path,new Xs)},e.prototype.isEqual=function(t){return t instanceof e},e}(Np),Pp=function(t){function e(e,n){var r=this;return(r=t.call(this,e)||this).f_=n,r}return f(e,t),e.prototype.c_=function(t){var e=xp(this,t,!0),n=this.f_.map((function(t){return ud(t,e)})),r=new $s(n);return new ou(t.path,r)},e.prototype.isEqual=function(t){return this===t},e}(Np),Dp=function(t){function e(e,n){var r=this;return(r=t.call(this,e)||this).f_=n,r}return f(e,t),e.prototype.c_=function(t){var e=xp(this,t,!0),n=this.f_.map((function(t){return ud(t,e)})),r=new Zs(n);return new ou(t.path,r)},e.prototype.isEqual=function(t){return this===t},e}(Np),Lp=function(t){function e(e,n){var r=this;return(r=t.call(this,e)||this).d_=n,r}return f(e,t),e.prototype.c_=function(t){var e=new eu(t.serializer,ms(t.serializer,this.d_));return new ou(t.path,e)},e.prototype.isEqual=function(t){return this===t},e}(Np),Rp=function(){function t(t,e){if(!isFinite(t)||t<-90||t>90)throw new Qo(Yo.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new Qo(Yo.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this.w_=t,this.T_=e}return Object.defineProperty(t.prototype,"latitude",{get:function(){return this.w_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"longitude",{get:function(){return this.T_},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(t){return this.w_===t.w_&&this.T_===t.T_},t.prototype.toJSON=function(){return{latitude:this.w_,longitude:this.T_}},t.prototype.I=function(t){return Bo(this.w_,t.w_)||Bo(this.T_,t.T_)},t}(),Mp=function(){function t(t){this.E_=t}return t.fromBase64String=function(e){try{return new t(fa.fromBase64String(e))}catch(e){throw new Qo(Yo.INVALID_ARGUMENT,"Failed to construct Bytes from Base64 string: "+e)}},t.fromUint8Array=function(e){return new t(fa.fromUint8Array(e))},t.prototype.toBase64=function(){return this.E_.toBase64()},t.prototype.toUint8Array=function(){return this.E_.toUint8Array()},t.prototype.toString=function(){return"Bytes(base64: "+this.toBase64()+")"},t.prototype.isEqual=function(t){return this.E_.isEqual(t.E_)},t}(),Vp=new Map,jp=function(){function t(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new Qo(Yo.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new Qo(Yo.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,_p("experimentalForceLongPolling",t.experimentalForceLongPolling,"experimentalAutoDetectLongPolling",t.experimentalAutoDetectLongPolling)}return t.prototype.isEqual=function(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties},t}();function Fp(){if("undefined"==typeof Uint8Array)throw new Qo(Yo.UNIMPLEMENTED,"Uint8Arrays are not available in this environment.")}function Up(){if("undefined"==typeof atob)throw new Qo(Yo.UNIMPLEMENTED,"Blobs are unavailable in Firestore in this environment.")}var Bp=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.fromBase64String=function(t){Up();try{return new e(fa.fromBase64String(t))}catch(t){throw new Qo(Yo.INVALID_ARGUMENT,"Failed to construct Blob from Base64 string: "+t)}},e.fromUint8Array=function(t){return Fp(),new e(fa.fromUint8Array(t))},e.prototype.toBase64=function(){return Up(),t.prototype.toBase64.call(this)},e.prototype.toUint8Array=function(){return Fp(),t.prototype.toUint8Array.call(this)},e.prototype.toString=function(){return"Blob(base64: "+this.toBase64()+")"},e}(Mp),zp=function(){function t(){}return t.prototype.I_=function(t,e){switch(void 0===e&&(e="none"),Qa(t)){case 0:return null;case 1:return t.booleanValue;case 2:return rs(t.integerValue||t.doubleValue);case 3:return this.m_(t.timestampValue);case 4:return this.A_(t,e);case 5:return t.stringValue;case 6:return this.R_(is(t.bytesValue));case 7:return this.P_(t.referenceValue);case 8:return this.g_(t.geoPointValue);case 9:return this.V_(t.arrayValue,e);case 10:return this.y_(t.mapValue,e);default:throw Mo()}},t.prototype.y_=function(t,e){var n=this,r={};return Ko(t.fields||{},(function(t,i){r[t]=n.I_(i,e)})),r},t.prototype.g_=function(t){return new Rp(rs(t.latitude),rs(t.longitude))},t.prototype.V_=function(t,e){var n=this;return(t.values||[]).map((function(t){return n.I_(t,e)}))},t.prototype.A_=function(t,e){switch(e){case"previous":var n=Ha(t);return null==n?null:this.I_(n,e);case"estimate":return this.m_(Wa(t));default:return null}},t.prototype.m_=function(t){var e=ns(t);return new Xo(e.seconds,e.nanos)},t.prototype.p_=function(t,e){var n=Zo.k(t);Vo(Ks(n));var r=new Co(n.get(1),n.get(3)),i=new na(n.v(5));return r.isEqual(e)||Do("Document "+i+" contains a document reference within a different database ("+r.projectId+"/"+r.database+") which is not supported. It will be treated as a reference in the current database ("+e.projectId+"/"+e.database+") instead."),i},t}(),qp=function(t){function e(e){var n=this;return(n=t.call(this)||this).firestore=e,n}return f(e,t),e.prototype.R_=function(t){return new Bp(t)},e.prototype.P_=function(t){var e=this.p_(t,this.firestore.v_);return Xd.b_(e,this.firestore,null)},e}(zp),Gp=function(){function t(t,e,n,r,i){this.S_=t,this.D_=e,this.C_=n,this.N_=r,this.x_=i}return Object.defineProperty(t.prototype,"id",{get:function(){return this.C_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"ref",{get:function(){return new Yp(this.S_,this.x_,this.C_)},enumerable:!1,configurable:!0}),t.prototype.exists=function(){return null!==this.N_},t.prototype.data=function(){if(this.N_){if(this.x_){var t=new Kp(this.S_,this.D_,this.C_,this.N_,null);return this.x_.fromFirestore(t)}return this.D_.I_(this.N_.sn())}},t.prototype.get=function(t){if(this.N_){var e=this.N_.data().field(Hp("DocumentSnapshot.get",t));if(null!==e)return this.D_.I_(e)}},t}(),Kp=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.data=function(){return t.prototype.data.call(this)},e}(Gp);function Hp(t,e){return"string"==typeof e?dd(t,e):e instanceof Ep?e.o_.F_:e.F_}var Wp=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=0;n<t.length;++n)if(0===t[n].length)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this.F_=new ea(t)}return t.prototype.isEqual=function(t){return this.F_.isEqual(t.F_)},t}(),Yp=function(){function t(t,e,n){this.x_=e,this.C_=n,this.type="document",this.firestore=t}return Object.defineProperty(t.prototype,"O_",{get:function(){return this.C_.path},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"id",{get:function(){return this.C_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"path",{get:function(){return this.C_.path.M()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return new Xp(this.firestore,this.x_,this.C_.path.S())},enumerable:!1,configurable:!0}),t.prototype.withConverter=function(e){return new t(this.firestore,e,this.C_)},t}(),Qp=function(){function t(t,e,n){this.x_=e,this.M_=n,this.type="query",this.firestore=t}return t.prototype.withConverter=function(e){return new t(this.firestore,e,this.M_)},t}(),Xp=function(t){function e(e,n,r){var i=this;return(i=t.call(this,e,n,Pu(r))||this).firestore=e,i.O_=r,i.type="collection",i}return f(e,t),Object.defineProperty(e.prototype,"id",{get:function(){return this.M_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"path",{get:function(){return this.M_.path.M()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){var t=this.O_.S();return t.T()?null:new Yp(this.firestore,null,new na(t))},enumerable:!1,configurable:!0}),e.prototype.withConverter=function(t){return new e(this.firestore,t,this.O_)},e}(Qp);function $p(t){var e=t.k_(),n=Gc(t.v_);return new rd(t.v_,!!e.ignoreUndefinedProperties,n)}var Jp=/^__.*__$/,Zp=function(){function t(t,e,n){this.data=t,this.Qe=e,this.fieldTransforms=n}return t.prototype.L_=function(t,e){var n=[];return null!==this.Qe?n.push(new mu(t,this.data,this.Qe,e)):n.push(new vu(t,this.data,e)),this.fieldTransforms.length>0&&n.push(new gu(t,this.fieldTransforms)),n},t}(),td=function(){function t(t,e,n){this.data=t,this.Qe=e,this.fieldTransforms=n}return t.prototype.L_=function(t,e){var n=[new mu(t,this.data,this.Qe,e)];return this.fieldTransforms.length>0&&n.push(new gu(t,this.fieldTransforms)),n},t}();function ed(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw Mo()}}var nd=function(){function t(t,e,n,r,i,o){this.settings=t,this.t=e,this.serializer=n,this.ignoreUndefinedProperties=r,void 0===i&&this.B_(),this.fieldTransforms=i||[],this.Qe=o||[]}return Object.defineProperty(t.prototype,"path",{get:function(){return this.settings.path},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"u_",{get:function(){return this.settings.u_},enumerable:!1,configurable:!0}),t.prototype.q_=function(e){return new t(Object.assign(Object.assign({},this.settings),e),this.t,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.Qe)},t.prototype.U_=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.q_({path:n,__:!1});return r.Q_(t),r},t.prototype.K_=function(t){var e,n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.q_({path:n,__:!1});return r.B_(),r},t.prototype.W_=function(t){return this.q_({path:void 0,__:!0})},t.prototype.h_=function(t){return vd(t,this.settings.methodName,this.settings.j_||!1,this.path,this.settings.l_)},t.prototype.contains=function(t){return void 0!==this.Qe.find((function(e){return t.N(e)}))||void 0!==this.fieldTransforms.find((function(e){return t.N(e.field)}))},t.prototype.B_=function(){if(this.path)for(var t=0;t<this.path.length;t++)this.Q_(this.path.get(t))},t.prototype.Q_=function(t){if(0===t.length)throw this.h_("Document fields must not be empty");if(ed(this.u_)&&Jp.test(t))throw this.h_('Document fields cannot begin and end with "__"')},t}(),rd=function(){function t(t,e,n){this.t=t,this.ignoreUndefinedProperties=e,this.serializer=n||Gc(t)}return t.prototype.G_=function(t,e,n,r){return void 0===r&&(r=!1),new nd({u_:t,methodName:e,l_:n,path:ea.$(),__:!1,j_:r},this.t,this.serializer,this.ignoreUndefinedProperties)},t}();function id(t,e,n,r,i,o){void 0===o&&(o={});var a=t.G_(o.merge||o.mergeFields?2:0,e,n,i);fd("Data must be an object, but it was:",a,r);var s,u,c=cd(r,a);if(o.merge)s=new iu(a.Qe),u=a.fieldTransforms;else if(o.mergeFields){for(var l=[],f=0,h=o.mergeFields;f<h.length;f++){var p=hd(e,h[f],n);if(!a.contains(p))throw new Qo(Yo.INVALID_ARGUMENT,"Field '"+p+"' is specified in your field mask but missing from your input data.");md(l,p)||l.push(p)}s=new iu(l),u=a.fieldTransforms.filter((function(t){return s.He(t.field)}))}else s=null,u=a.fieldTransforms;return new Zp(new Au(c),s,u)}function od(t,e,n,r){var i=t.G_(1,e,n);fd("Data must be an object, but it was:",i,r);var o=[],a=new _u;Ko(r,(function(t,r){var s=dd(e,t,n);r instanceof Ep&&(r=r.o_);var u=i.K_(s);if(r instanceof Cp)o.push(s);else{var c=ud(r,u);null!=c&&(o.push(s),a.set(s,c))}}));var s=new iu(o);return new td(a.Ye(),s,i.fieldTransforms)}function ad(t,e,n,r,i,o){var a=t.G_(1,e,n),s=[hd(e,r,n)],u=[i];if(o.length%2!=0)throw new Qo(Yo.INVALID_ARGUMENT,"Function "+e+"() needs to be called with an even number of arguments that alternate between field names and values.");for(var c=0;c<o.length;c+=2)s.push(hd(e,o[c])),u.push(o[c+1]);for(var l=[],f=new _u,h=s.length-1;h>=0;--h)if(!md(l,s[h])){var p=s[h],d=u[h];d instanceof Ep&&(d=d.o_);var v=a.K_(p);if(d instanceof Cp)l.push(p);else{var m=ud(d,v);null!=m&&(l.push(p),f.set(p,m))}}var y=new iu(l);return new td(f.Ye(),y,a.fieldTransforms)}function sd(t,e,n,r){return void 0===r&&(r=!1),ud(n,t.G_(r?4:3,e))}function ud(t,e){if(t instanceof Ep&&(t=t.o_),ld(t))return fd("Unsupported field value:",e,t),cd(t,e);if(t instanceof Np)return function(t,e){if(!ed(e.u_))throw e.h_(t.a_+"() can only be used with update() and set()");if(!e.path)throw e.h_(t.a_+"() is not currently supported inside arrays");var n=t.c_(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(e.path&&e.Qe.push(e.path),t instanceof Array){if(e.settings.__&&4!==e.u_)throw e.h_("Nested arrays are not supported");return function(t,e){for(var n=[],r=0,i=0,o=t;i<o.length;i++){var a=ud(o[i],e.W_(r));null==a&&(a={nullValue:"NULL_VALUE"}),n.push(a),r++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(t instanceof Ep&&(t=t.o_),null===t)return{nullValue:"NULL_VALUE"};if("number"==typeof t)return ms(e.serializer,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){var n=Xo.fromDate(t);return{timestampValue:ys(e.serializer,n)}}if(t instanceof Xo){var r=new Xo(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:ys(e.serializer,r)}}if(t instanceof Rp)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof Mp)return{bytesValue:gs(e.serializer,t.E_)};if(t instanceof Yp){var i=e.t,o=t.firestore.v_;if(!o.isEqual(i))throw e.h_("Document reference is for database "+o.projectId+"/"+o.database+" but should be for database "+i.projectId+"/"+i.database);return{referenceValue:Es(t.firestore.v_||e.t,t.C_.path)}}if(void 0===t&&e.ignoreUndefinedProperties)return null;throw e.h_("Unsupported field value: "+Tp(t))}(t,e)}function cd(t,e){var n={};return Ho(t)?e.path&&e.path.length>0&&e.Qe.push(e.path):Ko(t,(function(t,r){var i=ud(r,e.U_(t));null!=i&&(n[t]=i)})),{mapValue:{fields:n}}}function ld(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof Xo||t instanceof Rp||t instanceof Mp||t instanceof Yp||t instanceof Np)}function fd(t,e,n){if(!ld(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){var r=Tp(n);throw"an object"===r?e.h_(t+" a custom object"):e.h_(t+" "+r)}}function hd(t,e,n){if(e instanceof Ep&&(e=e.o_),e instanceof Wp)return e.F_;if("string"==typeof e)return dd(t,e);throw vd("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}var pd=new RegExp("[~\\*/\\[\\]]");function dd(t,e,n){if(e.search(pd)>=0)throw vd("Invalid field path ("+e+"). Paths must not contain '~', '*', '/', '[', or ']'",t,!1,void 0,n);try{return(new(Wp.bind.apply(Wp,g([void 0],e.split("."))))).F_}catch(r){throw vd("Invalid field path ("+e+"). Paths must not be empty, begin with '.', end with '.', or contain '..'",t,!1,void 0,n)}}function vd(t,e,n,r,i){var o=r&&!r.T(),a=void 0!==i,s="Function "+e+"() called with invalid data";n&&(s+=" (via `toFirestore()`)");var u="";return(o||a)&&(u+=" (found",o&&(u+=" in field "+r),a&&(u+=" in document "+i),u+=")"),new Qo(Yo.INVALID_ARGUMENT,(s+=". ")+t+u)}function md(t,e){return t.some((function(t){return t.isEqual(e)}))}var yd=function(){function t(t){this.Wc=t,this.z_=new Map,this.mutations=[],this.H_=!1,this.J_=null,this.Y_=new Set}return t.prototype.X_=function(t){return p(this,void 0,void 0,(function(){var e,n=this;return d(this,(function(r){switch(r.label){case 0:if(this.Z_(),this.mutations.length>0)throw new Qo(Yo.INVALID_ARGUMENT,"Firestore transactions require all reads to be executed before all writes.");return[4,function(t,e){return p(this,void 0,void 0,(function(){var n,r,i,o,a,s;return d(this,(function(u){switch(u.label){case 0:return n=jo(t),r=Ss(n.serializer)+"/documents",i={documents:e.map((function(t){return As(n.serializer,t)}))},[4,n.Fc("BatchGetDocuments",r,i)];case 1:return o=u.sent(),a=new Map,o.forEach((function(t){var e=function(t,e){return"found"in e?function(t,e){Vo(!!e.found),e.found.name,e.found.updateTime;var n=_s(t,e.found.name),r=ws(e.found.updateTime),i=new Au({mapValue:{fields:e.found.fields}});return new Su(n,r,i,{})}(t,e):"missing"in e?function(t,e){Vo(!!e.missing),Vo(!!e.readTime);var n=_s(t,e.missing),r=ws(e.readTime);return new Nu(n,r)}(t,e):Mo()}(n.serializer,t);a.set(e.key.toString(),e)})),s=[],[2,(e.forEach((function(t){var e=a.get(t.toString());Vo(!!e),s.push(e)})),s)]}}))}))}(this.Wc,t)];case 1:return[2,((e=r.sent()).forEach((function(t){t instanceof Nu||t instanceof Su?n.tf(t):Mo()})),e)]}}))}))},t.prototype.set=function(t,e){this.write(e.L_(t,this.je(t))),this.Y_.add(t.toString())},t.prototype.update=function(t,e){try{this.write(e.L_(t,this.ef(t)))}catch(t){this.J_=t}this.Y_.add(t.toString())},t.prototype.delete=function(t){this.write([new Eu(t,this.je(t))]),this.Y_.add(t.toString())},t.prototype.commit=function(){return p(this,void 0,void 0,(function(){var t,e=this;return d(this,(function(n){switch(n.label){case 0:if(this.Z_(),this.J_)throw this.J_;return t=this.z_,this.mutations.forEach((function(e){t.delete(e.key.toString())})),t.forEach((function(t,n){var r=na.K(n);e.mutations.push(new Iu(r,e.je(r)))})),[4,function(t,e){return p(this,void 0,void 0,(function(){var n,r,i;return d(this,(function(o){switch(o.label){case 0:return n=jo(t),r=Ss(n.serializer)+"/documents",i={writes:e.map((function(t){return xs(n.serializer,t)}))},[4,n.xc("Commit",r,i)];case 1:return o.sent(),[2]}}))}))}(this.Wc,this.mutations)];case 1:return n.sent(),this.H_=!0,[2]}}))}))},t.prototype.tf=function(t){var e;if(t instanceof Su)e=t.version;else{if(!(t instanceof Nu))throw Mo();e=$o.min()}var n=this.z_.get(t.key.toString());if(n){if(!e.isEqual(n))throw new Qo(Yo.ABORTED,"Document version changed between two reads.")}else this.z_.set(t.key.toString(),e)},t.prototype.je=function(t){var e=this.z_.get(t.toString());return!this.Y_.has(t.toString())&&e?su.updateTime(e):su.Ge()},t.prototype.ef=function(t){var e=this.z_.get(t.toString());if(!this.Y_.has(t.toString())&&e){if(e.isEqual($o.min()))throw new Qo(Yo.INVALID_ARGUMENT,"Can't update a document that doesn't exist.");return su.updateTime(e)}return su.exists(!0)},t.prototype.write=function(t){this.Z_(),this.mutations=this.mutations.concat(t)},t.prototype.Z_=function(){},t}(),gd=function(){function t(t,e,n,r){this.rs=t,this.Wc=e,this.updateFunction=n,this.us=r,this.nf=5,this.Ps=new fc(this.rs,"transaction_retry")}return t.prototype.run=function(){this.sf()},t.prototype.sf=function(){var t=this;this.Ps.An((function(){return p(t,void 0,void 0,(function(){var t,e,n=this;return d(this,(function(r){return t=new yd(this.Wc),(e=this.rf(t))&&e.then((function(e){n.rs.fs((function(){return t.commit().then((function(){n.us.resolve(e)})).catch((function(t){n.af(t)}))}))})).catch((function(t){n.af(t)})),[2]}))}))}))},t.prototype.rf=function(t){try{var e=this.updateFunction(t);return!ra(e)&&e.catch&&e.then?e:(this.us.reject(Error("Transaction callback must return a Promise")),null)}catch(t){return this.us.reject(t),null}},t.prototype.af=function(t){var e=this;this.nf>0&&this.cf(t)?(this.nf-=1,this.rs.fs((function(){return e.sf(),Promise.resolve()}))):this.us.reject(t)},t.prototype.cf=function(t){if("FirebaseError"===t.name){var e=t.code;return"aborted"===e||"failed-precondition"===e||!ma(e)}return!1},t}(),bd=function(){function t(t,e,n){var r=this;this.credentials=t,this.rs=e,this.Fl=n,this.user=Rc.UNAUTHENTICATED,this.clientId=Uo.u(),this.uf=function(){},this.oi=new lc,this.credentials.si((function(t){Po("FirestoreClient","Received user=",t.uid),r.user.isEqual(t)||(r.user=t,r.uf(t)),r.oi.resolve()}))}return t.prototype.getConfiguration=function(){return p(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return[4,this.oi.promise];case 1:return[2,(t.sent(),{rs:this.rs,Fl:this.Fl,clientId:this.clientId,credentials:this.credentials,Yl:this.user,$h:100})]}}))}))},t.prototype.hf=function(t){var e=this;this.uf=t,this.oi.promise.then((function(){return e.uf(e.user)}))},t.prototype.lf=function(){if(this.rs.Vs)throw new Qo(Yo.FAILED_PRECONDITION,"The client has already been terminated.")},t.prototype.terminate=function(){var t=this;this.rs.bs();var e=new lc;return this.rs.ys((function(){return p(t,void 0,void 0,(function(){var t,n;return d(this,(function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),this._f?[4,this._f.terminate()]:[3,2];case 1:r.sent(),r.label=2;case 2:return this.ff?[4,this.ff.terminate()]:[3,4];case 3:r.sent(),r.label=4;case 4:return this.credentials.ii(),e.resolve(),[3,6];case 5:return t=r.sent(),n=kc(t,"Failed to shutdown persistence"),e.reject(n),[3,6];case 6:return[2]}}))}))})),e.promise},t}();function wd(t,e){return p(this,void 0,void 0,(function(){var n,r=this;return d(this,(function(i){switch(i.label){case 0:return t.rs.Ns(),Po("FirestoreClient","Initializing OfflineComponentProvider"),[4,t.getConfiguration()];case 1:return n=i.sent(),[4,e.initialize(n)];case 2:return i.sent(),t.hf((function(n){return t.rs.Ss((function(){return p(r,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return[4,gf(e.Kc,n)];case 1:return t.sent(),[2]}}))}))}))})),e.persistence.fa((function(){return t.terminate()})),t.ff=e,[2]}}))}))}function Ed(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:return t.rs.Ns(),[4,Id(t)];case 1:return n=i.sent(),Po("FirestoreClient","Initializing OnlineComponentProvider"),[4,t.getConfiguration()];case 2:return r=i.sent(),[4,e.initialize(n,r)];case 3:return i.sent(),t.hf((function(n){return t.rs.Ss((function(){return function(t,e){return p(this,void 0,void 0,(function(){var n,r;return d(this,(function(i){switch(i.label){case 0:return(n=jo(t)).rs.Ns(),Po("RemoteStore","RemoteStore received new credentials"),r=Gf(n),n.Hc.add(3),[4,Vf(n)];case 1:return i.sent(),r&&n.Zc.set("Unknown"),[4,n.jc.s_(e)];case 2:return i.sent(),n.Hc.delete(3),[4,Mf(n)];case 3:return i.sent(),[2]}}))}))}(e.Oh,n)}))})),t._f=e,[2]}}))}))}function Id(t){return p(this,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return t.ff?[3,2]:(Po("FirestoreClient","Using default OfflineComponentProvider"),[4,wd(t,new mp)]);case 1:e.sent(),e.label=2;case 2:return[2,t.ff]}}))}))}function Ad(t){return p(this,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return t._f?[3,2]:(Po("FirestoreClient","Using default OnlineComponentProvider"),[4,Ed(t,new bp)]);case 1:e.sent(),e.label=2;case 2:return[2,t._f]}}))}))}function _d(t){return Id(t).then((function(t){return t.persistence}))}function Td(t){return Id(t).then((function(t){return t.Kc}))}function kd(t){return Ad(t).then((function(t){return t.Oh}))}function Sd(t){return Ad(t).then((function(t){return t.gu}))}function Nd(t){return p(this,void 0,void 0,(function(){var e,n;return d(this,(function(r){switch(r.label){case 0:return[4,Ad(t)];case 1:return e=r.sent(),[2,((n=e.Mh).Ls=Th.bind(null,e.gu),n.Us=Sh.bind(null,e.gu),n)]}}))}))}function Cd(t,e){var n=this,r=new lc;return t.rs.fs((function(){return p(n,void 0,void 0,(function(){var n;return d(this,(function(i){switch(i.label){case 0:return n=Nh,[4,Sd(t)];case 1:return[2,n.apply(void 0,[i.sent(),e,r])]}}))}))})),r.promise}function xd(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o;return d(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,function(t,e){var n=jo(t);return n.persistence.runTransaction("read document","readonly",(function(t){return n.Ga.Oi(t,e)}))}(t,e)];case 1:return(r=a.sent())instanceof Su?n.resolve(r):r instanceof Nu?n.resolve(null):n.reject(new Qo(Yo.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")),[3,3];case 2:return i=a.sent(),o=kc(i,"Failed to get document '"+e+" from cache"),n.reject(o),[3,3];case 3:return[2]}}))}))}function Od(t,e,n,r,i){var o=new wp({next:function(o){e.fs((function(){return xc(t,a)}));var s=o.docs.has(n);!s&&o.fromCache?i.reject(new Qo(Yo.UNAVAILABLE,"Failed to get document because the client is offline.")):s&&o.fromCache&&r&&"server"===r.source?i.reject(new Qo(Yo.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(o)},error:function(t){return i.reject(t)}}),a=new Lc(Pu(n.path),o,{includeMetadataChanges:!0,Hs:!0});return Cc(t,a)}var Pd=function(t){function e(e,n){var r=this;return(r=t.call(this,e,n)||this).yf=new Tc,r.df="name"in e?e.name:"[DEFAULT]",r}return f(e,t),e.prototype.Vf=function(){return this.pf||Wd(this),this.pf.terminate()},e}(function(){function t(t,e){this.df="(lite)",this.wf=new jp({}),this.Tf=!1,t instanceof Co?(this.v_=t,this.Ef=new Vc):(this.If=t,this.v_=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new Qo(Yo.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new Co(t.options.projectId)}(t),this.Ef=new jc(e))}return Object.defineProperty(t.prototype,"app",{get:function(){if(!this.If)throw new Qo(Yo.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.If},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"mf",{get:function(){return this.Tf},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"Af",{get:function(){return void 0!==this.Rf},enumerable:!1,configurable:!0}),t.prototype.Pf=function(t){if(this.Tf)throw new Qo(Yo.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this.wf=new jp(t),void 0!==t.credentials&&(this.Ef=function(t){if(!t)return new Vc;switch(t.type){case"gapi":var e=t.client;return Vo(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new Uc(e,t.sessionIndex||"0");case"provider":return t.client;default:throw new Qo(Yo.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))},t.prototype.gf=function(){return this.wf},t.prototype.k_=function(){return this.Tf=!0,this.wf},t.prototype._delete=function(){return this.Rf||(this.Rf=this.Vf()),this.Rf},t.prototype.Vf=function(){return function(t){var e=Vp.get(t);e&&(Po("ComponentProvider","Removing Datastore"),Vp.delete(t),e.terminate())}(this),Promise.resolve()},t}());function Dd(t,e,n){var r=this,i=new lc;return t.rs.enqueue((function(){return p(r,void 0,void 0,(function(){var r;return d(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),[4,wd(t,n)];case 1:return o.sent(),[4,Ed(t,e)];case 2:return o.sent(),i.resolve(),[3,4];case 3:if(!function(t){return"FirebaseError"===t.name?t.code===Yo.FAILED_PRECONDITION||t.code===Yo.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||22===t.code||20===t.code||11===t.code}(r=o.sent()))throw r;return console.warn("Error enabling offline persistence. Falling back to persistence disabled: "+r),i.reject(r),[3,4];case 4:return[2]}}))}))})).then((function(){return i.promise}))}function Ld(t){if(t.mf||t.Af)throw new Qo(Yo.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.")}var Rd=function(t){function e(e,n,r,i,o,a){var s=this;return(s=t.call(this,e,n,r,i,a)||this).S_=e,s.vf=e,s.metadata=o,s}return f(e,t),e.prototype.exists=function(){return t.prototype.exists.call(this)},e.prototype.data=function(t){if(void 0===t&&(t={}),this.N_){if(this.x_){var e=new Md(this.S_,this.D_,this.C_,this.N_,this.metadata,null);return this.x_.fromFirestore(e,t)}return this.D_.I_(this.N_.sn(),t.serverTimestamps)}},e.prototype.get=function(t,e){if(void 0===e&&(e={}),this.N_){var n=this.N_.data().field(Hp("DocumentSnapshot.get",t));if(null!==n)return this.D_.I_(n,e.serverTimestamps)}},e}(Gp),Md=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.data=function(e){return void 0===e&&(e={}),t.prototype.data.call(this,e)},e}(Rd),Vd=function(){function t(t,e,n,r){this.S_=t,this.D_=e,this.bf=r,this.metadata=new Jd(r.hasPendingWrites,r.fromCache),this.query=n}return Object.defineProperty(t.prototype,"docs",{get:function(){var t=[];return this.forEach((function(e){return t.push(e)})),t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.bf.docs.size},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"empty",{get:function(){return 0===this.size},enumerable:!1,configurable:!0}),t.prototype.forEach=function(t,e){var n=this;this.bf.docs.forEach((function(r){t.call(e,new Md(n.S_,n.D_,r.key,r,new Jd(n.bf.Qt.has(r.key),n.bf.fromCache),n.query.x_))}))},t.prototype.docChanges=function(t){void 0===t&&(t={});var e=!!t.includeMetadataChanges;if(e&&this.bf.Wt)throw new Qo(Yo.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this.Sf&&this.Df===e||(this.Sf=function(t,e){if(t.bf.Ut.T()){var n=0;return t.bf.docChanges.map((function(e){var r=new Md(t.S_,t.D_,e.doc.key,e.doc,new Jd(t.bf.Qt.has(e.doc.key),t.bf.fromCache),t.query.x_);return e.doc,{type:"added",doc:r,oldIndex:-1,newIndex:n++}}))}var r=t.bf.Ut;return t.bf.docChanges.filter((function(t){return e||3!==t.type})).map((function(e){var n=new Md(t.S_,t.D_,e.doc.key,e.doc,new Jd(t.bf.Qt.has(e.doc.key),t.bf.fromCache),t.query.x_),i=-1,o=-1;return 0!==e.type&&(i=r.indexOf(e.doc.key),r=r.delete(e.doc.key)),1!==e.type&&(o=(r=r.add(e.doc)).indexOf(e.doc.key)),{type:jd(e.type),doc:n,oldIndex:i,newIndex:o}}))}(this,e),this.Df=e),this.Sf},t}();function jd(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return Mo()}}function Fd(t,e){return t instanceof Rd&&e instanceof Rd?t.S_===e.S_&&t.C_.isEqual(e.C_)&&(null===t.N_?null===e.N_:t.N_.isEqual(e.N_))&&t.x_===e.x_:t instanceof Vd&&e instanceof Vd&&t.S_===e.S_&&function(t,e){return t instanceof Qp&&e instanceof Qp&&t.firestore===e.firestore&&qu(t.M_,e.M_)&&t.x_===e.x_}(t.query,e.query)&&t.metadata.isEqual(e.metadata)&&t.bf.isEqual(e.bf)}var Ud=function(t){function e(e){var n=this;return(n=t.call(this)||this).firestore=e,n}return f(e,t),e.prototype.R_=function(t){return new Mp(t)},e.prototype.P_=function(t){var e=this.p_(t,this.firestore.v_);return new Yp(this.firestore,null,e)},e}(zp);function Bd(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];var o=kp(t.firestore,Pd),a=$p(o);return e instanceof Ep&&(e=e.o_),zd(o,("string"==typeof e||e instanceof Wp?ad(a,"updateDoc",t.C_,e,n,r):od(a,"updateDoc",t.C_,e)).L_(t.C_,su.exists(!0)))}function zd(t,e){return Cd(Hd(t),e)}function qd(t,e,n){var r=n.docs.get(e.C_),i=new Ud(t);return new Rd(t,i,e.C_,r,new Jd(n.hasPendingWrites,n.fromCache),e.x_)}var Gd=function(){function t(){}return t.prototype.enableIndexedDbPersistence=function(t,e){return function(t,e){Ld(t);var n=Hd(t),r=t.k_(),i=new bp;return Dd(n,i,new yp(i,r.cacheSizeBytes,null==e?void 0:e.forceOwnership))}(t.o_,{forceOwnership:e})},t.prototype.enableMultiTabIndexedDbPersistence=function(t){return function(t){Ld(t);var e=Hd(t),n=t.k_(),r=new bp;return Dd(e,r,new gp(r,n.cacheSizeBytes))}(t.o_)},t.prototype.clearIndexedDbPersistence=function(t){return function(t){var e=this;if(t.mf&&!t.Af)throw new Qo(Yo.FAILED_PRECONDITION,"Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");var n=new lc;return t.yf.ys((function(){return p(e,void 0,void 0,(function(){var e;return d(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,function(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return pc.kn()?(e=t+"main",[4,pc.delete(e)]):[2,Promise.resolve()];case 1:return n.sent(),[2]}}))}))}(vf(t.v_,t.df))];case 1:return r.sent(),n.resolve(),[3,3];case 2:return e=r.sent(),n.reject(e),[3,3];case 3:return[2]}}))}))})),n.promise}(t.o_)},t}(),Kd=function(t){function e(e,n,r){var i=this;return(i=t.call(this,n)||this).Cf=r,i.INTERNAL={delete:function(){return i.terminate()}},e instanceof Co||(i.Nf=e),i}return f(e,t),Object.defineProperty(e.prototype,"v_",{get:function(){return this.o_.v_},enumerable:!1,configurable:!0}),e.prototype.settings=function(t){t.merge&&delete(t=Object.assign(Object.assign({},this.o_.gf()),t)).merge,this.o_.Pf(t)},e.prototype.useEmulator=function(t,e){"firestore.googleapis.com"!==this.o_.gf().host&&Lo("Host has been set in both settings() and useEmulator(), emulator host will be used"),this.settings({host:t+":"+e,ssl:!1,merge:!0})},e.prototype.enableNetwork=function(){return function(t){var e=this;return t.rs.enqueue((function(){return p(e,void 0,void 0,(function(){var e,n;return d(this,(function(r){switch(r.label){case 0:return[4,_d(t)];case 1:return e=r.sent(),[4,kd(t)];case 2:return n=r.sent(),[2,(e.da(!0),function(t){var e=jo(t);return e.Hc.delete(0),Mf(e)}(n))]}}))}))}))}(Hd(this.o_))},e.prototype.disableNetwork=function(){return function(t){var e=this;return t.rs.enqueue((function(){return p(e,void 0,void 0,(function(){var e,n;return d(this,(function(r){switch(r.label){case 0:return[4,_d(t)];case 1:return e=r.sent(),[4,kd(t)];case 2:return n=r.sent(),[2,(e.da(!1),function(t){return p(this,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return(e=jo(t)).Hc.add(0),[4,Vf(e)];case 1:return n.sent(),e.Zc.set("Offline"),[2]}}))}))}(n))]}}))}))}))}(Hd(this.o_))},e.prototype.enablePersistence=function(t){var e=!1,n=!1;return t&&_p("synchronizeTabs",e=!!t.synchronizeTabs,"experimentalForceOwningTab",n=!!t.experimentalForceOwningTab),e?this.Cf.enableMultiTabIndexedDbPersistence(this):this.Cf.enableIndexedDbPersistence(this,n)},e.prototype.clearPersistence=function(){return this.Cf.clearIndexedDbPersistence(this)},e.prototype.terminate=function(){return this.app._removeServiceInstance("firestore"),this.app._removeServiceInstance("firestore-exp"),this.o_._delete()},e.prototype.waitForPendingWrites=function(){return function(t){var e=this,n=new lc;return t.rs.fs((function(){return p(e,void 0,void 0,(function(){var e;return d(this,(function(r){switch(r.label){case 0:return e=Lh,[4,Sd(t)];case 1:return[2,e.apply(void 0,[r.sent(),n])]}}))}))})),n.promise}(Hd(this.o_))},e.prototype.onSnapshotsInSync=function(t){return function(t,e){var n=this,r=Hd(t),i=Kc(e)?e:{next:e},o=new wp(i);return t.yf.fs((function(){return p(n,void 0,void 0,(function(){var t;return d(this,(function(e){switch(e.label){case 0:return t=function(t,e){jo(t).$s.add(e),e.next()},[4,Nd(r)];case 1:return t.apply(void 0,[e.sent(),o]),[2]}}))}))})),function(){o.r_(),t.yf.fs((function(){return p(n,void 0,void 0,(function(){var t;return d(this,(function(e){switch(e.label){case 0:return t=function(t,e){jo(t).$s.delete(e)},[4,Nd(r)];case 1:return t.apply(void 0,[e.sent(),o]),[2]}}))}))}))}}(this.o_,t)},Object.defineProperty(e.prototype,"app",{get:function(){if(!this.Nf)throw new Qo(Yo.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.Nf},enumerable:!1,configurable:!0}),e.prototype.collection=function(t){return Ip("Firestore.collection","path",t),Hd(this.o_),new uv(Zo.k(t),this,null)},e.prototype.doc=function(t){return Ip("Firestore.doc","path",t),Hd(this.o_),Xd.xf(Zo.k(t),this,null)},e.prototype.collectionGroup=function(t){if(Ip("Firestore.collectionGroup","collectionId",t),t.indexOf("/")>=0)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid collection ID '"+t+"' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");return Hd(this.o_),new ov(function(t){return new xu(Zo.$(),t)}(t),this,null)},e.prototype.runTransaction=function(t){var e=this;return function(t,e){var n=this,r=new lc;return t.rs.fs((function(){return p(n,void 0,void 0,(function(){var n;return d(this,(function(i){switch(i.label){case 0:return[4,function(t){return Ad(t).then((function(t){return t.Wc}))}(t)];case 1:return n=i.sent(),new gd(t.rs,n,e,r).run(),[2]}}))}))})),r.promise}(Hd(this.o_),(function(n){return t(new Yd(e,n))}))},e.prototype.batch=function(){return Hd(this.o_),new Qd(this)},e}(Ep);function Hd(t){return t.pf||Wd(t),t.pf.lf(),t.pf}function Wd(t){var e=t.k_(),n=function(t,e,n){return new No(t,e,n.host,n.ssl,n.experimentalForceLongPolling,n.experimentalAutoDetectLongPolling)}(t.v_,t.df,e);t.pf=new bd(t.Ef,t.yf,n)}var Yd=function(){function t(t,e){this.S_=t,this.Ff=e,this.Of=$p(this.S_.o_)}return t.prototype.get=function(t){var e=this,n=cv(0,t,this.S_),r=new qp(this.S_);return this.Ff.X_([n.C_]).then((function(t){if(!t||1!==t.length)return Mo();var i=t[0];if(i instanceof Nu)return new Zd(e.S_,new Rd(e.S_.o_,r,n.C_,null,new Jd(!1,!1),n.x_));if(i instanceof Su)return new Zd(e.S_,new Rd(e.S_.o_,r,n.C_,i,new Jd(!1,!1),n.x_));throw Mo()}))},t.prototype.set=function(t,e,n){var r=cv(0,t,this.S_);n=Ap("Transaction.set",n);var i=lv(r.x_,e,n),o=id(this.Of,"Transaction.set",r.C_,i,null!==r.x_,n);return this.Ff.set(r.C_,o),this},t.prototype.update=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];var o,a=cv(0,t,this.S_);return e instanceof Ep&&(e=e.o_),o="string"==typeof e||e instanceof Wp?ad(this.Of,"Transaction.update",a.C_,e,n,r):od(this.Of,"Transaction.update",a.C_,e),this.Ff.update(a.C_,o),this},t.prototype.delete=function(t){var e=cv(0,t,this.S_);return this.Ff.delete(e.C_),this},t}(),Qd=function(){function t(t){this.S_=t,this.Mf=[],this.kf=!1,this.Of=$p(this.S_.o_)}return t.prototype.set=function(t,e,n){this.$f();var r=cv(0,t,this.S_);n=Ap("WriteBatch.set",n);var i=lv(r.x_,e,n),o=id(this.Of,"WriteBatch.set",r.C_,i,null!==r.x_,n);return this.Mf=this.Mf.concat(o.L_(r.C_,su.Ge())),this},t.prototype.update=function(t,e,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];this.$f();var o,a=cv(0,t,this.S_);return e instanceof Ep&&(e=e.o_),o="string"==typeof e||e instanceof Wp?ad(this.Of,"WriteBatch.update",a.C_,e,n,r):od(this.Of,"WriteBatch.update",a.C_,e),this.Mf=this.Mf.concat(o.L_(a.C_,su.exists(!0))),this},t.prototype.delete=function(t){this.$f();var e=cv(0,t,this.S_);return this.Mf=this.Mf.concat(new Eu(e.C_,su.Ge())),this},t.prototype.commit=function(){return this.$f(),this.kf=!0,this.Mf.length>0?Cd(Hd(this.S_.o_),this.Mf):Promise.resolve()},t.prototype.$f=function(){if(this.kf)throw new Qo(Yo.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")},t}(),Xd=function(t){function e(e,n){var r=this;return(r=t.call(this,n)||this).firestore=e,r.D_=new qp(e),r}return f(e,t),e.xf=function(t,n,r){if(t.length%2!=0)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid document reference. Document references must have an even number of segments, but "+t.M()+" has "+t.length);return new e(n,new Yp(n.o_,r,new na(t)))},e.b_=function(t,n,r){return new e(n,new Yp(n.o_,r,t))},Object.defineProperty(e.prototype,"id",{get:function(){return this.o_.id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return new uv(this.o_.O_.S(),this.firestore,this.o_.x_)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"path",{get:function(){return this.o_.path},enumerable:!1,configurable:!0}),e.prototype.collection=function(t){if(Ip("DocumentReference.collection","path",t),!t)throw new Qo(Yo.INVALID_ARGUMENT,"Must provide a non-empty collection name to collection()");var e=Zo.k(t);return new uv(this.o_.O_.child(e),this.firestore,null)},e.prototype.isEqual=function(t){return t instanceof Ep&&(t=t.o_),t instanceof Yp&&(n=t,((e=this.o_)instanceof Yp||e instanceof Xp)&&(n instanceof Yp||n instanceof Xp)&&e.firestore===n.firestore&&e.path===n.path&&e.x_===n.x_);var e,n},e.prototype.set=function(t,e){e=Ap("DocumentReference.set",e);try{return function(t,e,n){var r=kp(t.firestore,Pd),i=lv(t.x_,e,n);return zd(r,id($p(r),"setDoc",t.C_,i,null!==t.x_,n).L_(t.C_,su.Ge()))}(this.o_,t,e)}catch(t){throw $d(t,"setDoc","DocumentReference.set")}},e.prototype.update=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];try{return 1===arguments.length?Bd(this.o_,t):Bd.apply(void 0,g([this.o_,t,e],n))}catch(t){throw $d(t,"updateDoc","DocumentReference.update")}},e.prototype.delete=function(){return zd(kp((t=this.o_).firestore,Pd),[new Eu(t.C_,su.Ge())]);var t},e.prototype.onSnapshot=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];if("object"==typeof r&&!Kc(r))return r}return{}}(e),i=function(e,n){var r,i,o;return{next:function(e){o.next&&o.next(function(e){return new Zd(t.firestore,new Rd(t.firestore.o_,t.D_,e.C_,e.N_,e.metadata,t.o_.x_))}(e))},error:null===(r=(o=Kc(e[0])?e[0]:Kc(e[1])?e[1]:"function"==typeof e[0]?{next:e[0],error:e[1],complete:e[2]}:{next:e[1],error:e[2],complete:e[3]}).error)||void 0===r?void 0:r.bind(o),complete:null===(i=o.complete)||void 0===i?void 0:i.bind(o)}}(e);return function(t){for(var e,n,r,i=this,o=[],a=1;a<arguments.length;a++)o[a-1]=arguments[a];var s={includeMetadataChanges:!1},u=0;"object"!=typeof o[u]||Kc(o[u])||(s=o[u],u++);var c,l,f,h={includeMetadataChanges:s.includeMetadataChanges};if(Kc(o[u])){var v=o[u];o[u]=null===(e=v.next)||void 0===e?void 0:e.bind(v),o[u+1]=null===(n=v.error)||void 0===n?void 0:n.bind(v),o[u+2]=null===(r=v.complete)||void 0===r?void 0:r.bind(v)}if(t instanceof Yp)l=kp(t.firestore,Pd),f=Pu(t.C_.path),c={next:function(e){o[u]&&o[u](qd(l,t,e))},error:o[u+1],complete:o[u+2]};else{l=kp(t.firestore,Pd),f=t.M_;var m=new Ud(l);c={next:function(e){o[u]&&o[u](new Vd(l,m,t,e))},error:o[u+1],complete:o[u+2]},iv(t.M_)}var y=Hd(l),g=new wp(c),b=new Lc(f,g,h);return l.yf.fs((function(){return p(i,void 0,void 0,(function(){var t;return d(this,(function(e){switch(e.label){case 0:return t=Cc,[4,Nd(y)];case 1:return[2,t.apply(void 0,[e.sent(),b])]}}))}))})),function(){g.r_(),l.yf.fs((function(){return p(i,void 0,void 0,(function(){var t;return d(this,(function(e){switch(e.label){case 0:return t=xc,[4,Nd(y)];case 1:return[2,t.apply(void 0,[e.sent(),b])]}}))}))}))}}(this.o_,r,i)},e.prototype.get=function(t){var e=this;return("cache"===(null==t?void 0:t.source)?function(t){var e=this,n=kp(t.firestore,Pd),r=Hd(n),i=new Ud(n),o=new lc;return n.yf.fs((function(){return p(e,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return[4,Td(r)];case 1:return[4,xd(e.sent(),t.C_,o)];case 2:return e.sent(),[2]}}))}))})),o.promise.then((function(e){return new Rd(n,i,t.C_,e,new Jd(e instanceof Su&&e.Je,!0),t.x_)}))}(this.o_):"server"===(null==t?void 0:t.source)?function(t){var e=this,n=kp(t.firestore,Pd),r=Hd(n),i=new lc;return n.yf.fs((function(){return p(e,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return[4,Nd(r)];case 1:return[4,Od(e.sent(),n.yf,t.C_,{source:"server"},i)];case 2:return e.sent(),[2]}}))}))})),i.promise.then((function(e){return qd(n,t,e)}))}(this.o_):function(t){var e=this,n=kp(t.firestore,Pd),r=Hd(n),i=new lc;return n.yf.fs((function(){return p(e,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return[4,Nd(r)];case 1:return[4,Od(e.sent(),n.yf,t.C_,{source:"default"},i)];case 2:return e.sent(),[2]}}))}))})),i.promise.then((function(e){return qd(n,t,e)}))}(this.o_)).then((function(t){return new Zd(e.firestore,new Rd(e.firestore.o_,e.D_,t.C_,t.N_,t.metadata,e.o_.x_))}))},e.prototype.withConverter=function(t){return new e(this.firestore,this.o_.withConverter(t))},e}(Ep);function $d(t,e,n){return t.message=t.message.replace(e+"()",n+"()"),t}var Jd=function(){function t(t,e){this.hasPendingWrites=t,this.fromCache=e}return t.prototype.isEqual=function(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache},t}(),Zd=function(t){function e(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return f(e,t),Object.defineProperty(e.prototype,"ref",{get:function(){return new Xd(this.S_,this.o_.ref)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.o_.id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"metadata",{get:function(){return this.o_.metadata},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"exists",{get:function(){return this.o_.exists()},enumerable:!1,configurable:!0}),e.prototype.data=function(t){return this.o_.data(t)},e.prototype.get=function(t,e){return this.o_.get(t,e)},e.prototype.isEqual=function(t){return Fd(this.o_,t.o_)},e}(Ep),tv=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.data=function(t){return this.o_.data(t)},e}(Zd);function ev(t,e,n){if(n instanceof Ep&&(n=n.o_),"string"==typeof n){if(""===n)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");if(!Vu(e)&&-1!==n.indexOf("/"))throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '"+n+"' contains a '/' character.");var r=e.path.child(Zo.k(n));if(!na.G(r))throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '"+r+"' is not because it has an odd number of segments ("+r.length+").");return os(t,new na(r))}if(n instanceof Yp)return os(t,n.C_);throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: "+Tp(n)+".")}function nv(t,e){if(!Array.isArray(t)||0===t.length)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid Query. A non-empty array is required for '"+e.toString()+"' filters.");if(t.length>10)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid Query. '"+e.toString()+"' filters support a maximum of 10 elements in the value array.")}function rv(t,e,n){if(!n.isEqual(e))throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '"+e.toString()+"' and so you must also use '"+e.toString()+"' as your first orderBy(), but your first orderBy() is on field '"+n.toString()+"' instead.")}function iv(t){if(Lu(t)&&0===t.rn.length)throw new Qo(Yo.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}var ov=function(){function t(t,e,n){this.M_=t,this.firestore=e,this.x_=n,this.Lf=$p(e.o_),this.D_=new qp(e)}return t.prototype.where=function(e,n,r){var i=hd("Query.where",e),o=function(t,e,n,r,i,o,a){var s;if(i.B()){if("array-contains"===o||"array-contains-any"===o)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid Query. You can't perform '"+o+"' queries on FieldPath.documentId().");if("in"===o||"not-in"===o){nv(a,o);for(var u=[],c=0,l=a;c<l.length;c++){var f=l[c];u.push(ev(r,t,f))}s={arrayValue:{values:u}}}else s=ev(r,t,a)}else"in"!==o&&"not-in"!==o&&"array-contains-any"!==o||nv(a,o),s=sd(n,"Query.where",a,"in"===o||"not-in"===o);var h=Yu.create(i,o,s);return function(t,e){if(e.cn()){var n=Mu(t);if(null!==n&&!n.isEqual(e.field))throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '"+n.toString()+"' and '"+e.field.toString()+"'");var r=Ru(t);null!==r&&rv(0,e.field,r)}var i=function(t,e){for(var n=0,r=t.filters;n<r.length;n++){var i=r[n];if(e.indexOf(i.op)>=0)return i.op}return null}(t,function(t){switch(t){case"!=":return["!=","not-in"];case"array-contains":return["array-contains","array-contains-any","not-in"];case"in":return["array-contains-any","in","not-in"];case"array-contains-any":return["array-contains","array-contains-any","in","not-in"];case"not-in":return["array-contains","array-contains-any","in","not-in","!="];default:return[]}}(e.op));if(null!==i)throw i===e.op?new Qo(Yo.INVALID_ARGUMENT,"Invalid query. You cannot use more than one '"+e.op.toString()+"' filter."):new Qo(Yo.INVALID_ARGUMENT,"Invalid query. You cannot use '"+e.op.toString()+"' filters with '"+i.toString()+"' filters.")}(t,h),h}(this.M_,0,this.Lf,this.firestore.v_,i,n,r);return new t(function(t,e){var n=t.filters.concat([e]);return new xu(t.path,t.collectionGroup,t.rn.slice(),n,t.limit,t.limitType,t.startAt,t.endAt)}(this.M_,o),this.firestore,this.x_)},t.prototype.orderBy=function(e,n){var r;if(void 0===n||"asc"===n)r="asc";else{if("desc"!==n)throw new Qo(Yo.INVALID_ARGUMENT,"Function Query.orderBy() has unknown direction '"+n+"', expected 'asc' or 'desc'.");r="desc"}var i=hd("Query.orderBy",e),o=function(t,e,n){if(null!==t.startAt)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. You must not call startAt() or startAfter() before calling orderBy().");if(null!==t.endAt)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. You must not call endAt() or endBefore() before calling orderBy().");var r=new sc(e,n);return function(t,e){if(null===Ru(t)){var n=Mu(t);null!==n&&rv(0,n,e.field)}}(t,r),r}(this.M_,i,r);return new t(function(t,e){var n=t.rn.concat([e]);return new xu(t.path,t.collectionGroup,n,t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(this.M_,o),this.firestore,this.x_)},t.prototype.limit=function(e){return Sp("Query.limit",e),new t(Uu(this.M_,e,"F"),this.firestore,this.x_)},t.prototype.limitToLast=function(e){return Sp("Query.limitToLast",e),new t(Uu(this.M_,e,"L"),this.firestore,this.x_)},t.prototype.startAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.startAt",e,n,!0);return new t(Bu(this.M_,i),this.firestore,this.x_)},t.prototype.startAfter=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.startAfter",e,n,!1);return new t(Bu(this.M_,i),this.firestore,this.x_)},t.prototype.endBefore=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.endBefore",e,n,!0);return new t(zu(this.M_,i),this.firestore,this.x_)},t.prototype.endAt=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.Bf("Query.endAt",e,n,!1);return new t(zu(this.M_,i),this.firestore,this.x_)},t.prototype.isEqual=function(e){return e instanceof t&&this.firestore===e.firestore&&qu(this.M_,e.M_)&&this.x_===e.x_},t.prototype.withConverter=function(e){return new t(this.M_,this.firestore,e)},t.prototype.Bf=function(t,e,n,r){if(e instanceof Zd)return function(t,e,n,r,i){if(!r)throw new Qo(Yo.NOT_FOUND,"Can't use a DocumentSnapshot that doesn't exist for "+n+"().");for(var o=[],a=0,s=ju(t);a<s.length;a++){var u=s[a];if(u.field.B())o.push(os(e,r.key));else{var c=r.field(u.field);if(Ka(c))throw new Qo(Yo.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+u.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===c){var l=u.field.M();throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a document for which the field '"+l+"' (used as the orderBy) does not exist.")}o.push(c)}}return new rc(o,i)}(this.M_,this.firestore.v_,t,e.o_.N_,r);var i=[e].concat(n);return function(t,e,n,r,i,o){var a=t.rn;if(i.length>a.length)throw new Qo(Yo.INVALID_ARGUMENT,"Too many arguments provided to "+r+"(). The number of arguments must be less than or equal to the number of orderBy() clauses");for(var s=[],u=0;u<i.length;u++){var c=i[u];if(a[u].field.B()){if("string"!=typeof c)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. Expected a string for document ID in "+r+"(), but got a "+typeof c);if(!Vu(t)&&-1!==c.indexOf("/"))throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to "+r+"() must be a plain document ID, but '"+c+"' contains a slash.");var l=t.path.child(Zo.k(c));if(!na.G(l))throw new Qo(Yo.INVALID_ARGUMENT,"Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to "+r+"() must result in a valid document path, but '"+l+"' is not because it contains an odd number of segments.");var f=new na(l);s.push(os(e,f))}else{var h=sd(n,r,c);s.push(h)}}return new rc(s,o)}(this.M_,this.firestore.v_,this.Lf,t,i,r)},t.prototype.onSnapshot=function(){for(var t,e,n,r=this,i=[],o=0;o<arguments.length;o++)i[o]=arguments[o];var a={},s=0;if("object"!=typeof i[s]||Kc(i[s])||(a=i[s],s++),Kc(i[s])){var u=i[s];i[s]=null===(t=u.next)||void 0===t?void 0:t.bind(u),i[s+1]=null===(e=u.error)||void 0===e?void 0:e.bind(u),i[s+2]=null===(n=u.complete)||void 0===n?void 0:n.bind(u)}var c={next:function(t){i[s]&&i[s](new sv(r.firestore,new Vd(r.firestore.o_,r.D_,new Qp(r.firestore.o_,r.x_,r.M_),t)))},error:i[s+1],complete:i[s+2]};return iv(this.M_),function(t,e,n,r){var i=this,o=new wp(r),a=new Lc(e,o,n);return t.rs.fs((function(){return p(i,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return e=Cc,[4,Nd(t)];case 1:return[2,e.apply(void 0,[n.sent(),a])]}}))}))})),function(){o.r_(),t.rs.fs((function(){return p(i,void 0,void 0,(function(){var e;return d(this,(function(n){switch(n.label){case 0:return e=xc,[4,Nd(t)];case 1:return[2,e.apply(void 0,[n.sent(),a])]}}))}))}))}}(Hd(this.firestore.o_),this.M_,a,c)},t.prototype.get=function(t){var e=this;iv(this.M_);var n=Hd(this.firestore.o_);return(t&&"cache"===t.source?function(t,e){var n=this,r=new lc;return t.rs.fs((function(){return p(n,void 0,void 0,(function(){var n;return d(this,(function(i){switch(i.label){case 0:return n=function(t,e,n){return p(this,void 0,void 0,(function(){var r,i,o,a,s,u;return d(this,(function(c){switch(c.label){case 0:return c.trys.push([0,2,,3]),[4,Tf(t,e,!0)];case 1:return r=c.sent(),i=new Eh(e,r.Xa),o=i.gh(r.documents),a=i.bi(o,!1),n.resolve(a.snapshot),[3,3];case 2:return s=c.sent(),u=kc(s,"Failed to execute query '"+e+" against cache"),n.reject(u),[3,3];case 3:return[2]}}))}))},[4,Td(t)];case 1:return[2,n.apply(void 0,[i.sent(),e,r])]}}))}))})),r.promise}(n,this.M_):function(t,e,n){var r=this;void 0===n&&(n={});var i=new lc;return t.rs.fs((function(){return p(r,void 0,void 0,(function(){var r;return d(this,(function(o){switch(o.label){case 0:return r=function(t,e,n,r,i){var o=new wp({next:function(n){e.fs((function(){return xc(t,a)})),n.fromCache&&"server"===r.source?i.reject(new Qo(Yo.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:function(t){return i.reject(t)}}),a=new Lc(n,o,{includeMetadataChanges:!0,Hs:!0});return Cc(t,a)},[4,Nd(t)];case 1:return[2,r.apply(void 0,[o.sent(),t.rs,e,n,i])]}}))}))})),i.promise}(n,this.M_,t)).then((function(t){return new sv(e.firestore,new Vd(e.firestore.o_,e.D_,new Qp(e.firestore.o_,e.x_,e.M_),t))}))},t}(),av=function(t){function e(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return f(e,t),Object.defineProperty(e.prototype,"type",{get:function(){return this.o_.type},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"doc",{get:function(){return new tv(this.S_,this.o_.doc)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"oldIndex",{get:function(){return this.o_.oldIndex},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"newIndex",{get:function(){return this.o_.oldIndex},enumerable:!1,configurable:!0}),e}(Ep),sv=function(t){function e(e,n){var r=this;return(r=t.call(this,n)||this).S_=e,r}return f(e,t),Object.defineProperty(e.prototype,"query",{get:function(){return new ov(this.o_.query.M_,this.S_,this.o_.query.x_)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"metadata",{get:function(){return this.o_.metadata},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this.o_.size},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"empty",{get:function(){return this.o_.empty},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"docs",{get:function(){var t=this;return this.o_.docs.map((function(e){return new tv(t.S_,e)}))},enumerable:!1,configurable:!0}),e.prototype.docChanges=function(t){var e=this;return this.o_.docChanges(t).map((function(t){return new av(e.S_,t)}))},e.prototype.forEach=function(t,e){var n=this;this.o_.forEach((function(r){t.call(e,new tv(n.S_,r))}))},e.prototype.isEqual=function(t){return Fd(this.o_,t.o_)},e}(Ep),uv=function(t){function e(e,n,r){var i=this;if((i=t.call(this,Pu(e),n,r)||this).O_=e,e.length%2!=1)throw new Qo(Yo.INVALID_ARGUMENT,"Invalid collection reference. Collection references must have an odd number of segments, but "+e.M()+" has "+e.length);return i}return f(e,t),Object.defineProperty(e.prototype,"id",{get:function(){return this.M_.path.C()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){var t=this.M_.path.S();return t.T()?null:Xd.xf(t,this.firestore,null)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"path",{get:function(){return this.M_.path.M()},enumerable:!1,configurable:!0}),e.prototype.doc=function(t){0===arguments.length&&(t=Uo.u()),Ip("CollectionReference.doc","path",t);var e=Zo.k(t);return Xd.xf(this.M_.path.child(e),this.firestore,this.x_)},e.prototype.add=function(t){var e=this.x_?this.x_.toFirestore(t):t,n=this.doc();return Xd.b_(n.o_.C_,this.firestore,null).set(e).then((function(){return n}))},e.prototype.withConverter=function(t){return new e(this.O_,this.firestore,t)},e}(ov);function cv(t,e,n){var r=kp(e,Yp);if(r.firestore!==n.o_)throw new Qo(Yo.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return r}function lv(t,e,n){return t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e}var fv,hv=function(t){function e(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.call(this,new(Wp.bind.apply(Wp,g([void 0],e))))||this}return f(e,t),e.documentId=function(){return new e(ea.q().M())},e.prototype.isEqual=function(t){return t instanceof Ep&&(t=t.o_),t instanceof Wp&&this.o_.F_.isEqual(t.F_)},e}(Ep),pv=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.serverTimestamp=function(){var t=new Op("serverTimestamp");return t.a_="FieldValue.serverTimestamp",new e(t)},e.delete=function(){var t=new Cp("deleteField");return t.a_="FieldValue.delete",new e(t)},e.arrayUnion=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new Pp("arrayUnion",t)}.apply(void 0,t);return r.a_="FieldValue.arrayUnion",new e(r)},e.arrayRemove=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new Dp("arrayRemove",t)}.apply(void 0,t);return r.a_="FieldValue.arrayRemove",new e(r)},e.increment=function(t){var n=function(t){return new Lp("increment",t)}(t);return n.a_="FieldValue.increment",new e(n)},e.prototype.isEqual=function(t){return this.o_.isEqual(t.o_)},e}(Ep),dv={Firestore:Kd,GeoPoint:Rp,Timestamp:Xo,Blob:Bp,Transaction:Yd,WriteBatch:Qd,DocumentReference:Xd,DocumentSnapshot:Zd,Query:ov,QueryDocumentSnapshot:tv,QuerySnapshot:sv,CollectionReference:uv,FieldPath:hv,FieldValue:pv,setLogLevel:function(t){var e;e=t,xo.setLogLevel(e)},CACHE_SIZE_UNLIMITED:-1};(function(t,e){t.INTERNAL.registerComponent(new V("firestore",(function(t){return function(t,e){return new Kd(t,new Pd(t,e),new Gd)}(t.getProvider("app").getImmediate(),t.getProvider("auth-internal"))}),"PUBLIC").setServiceProps(Object.assign({},dv)))})(fv=lt),fv.registerVersion("@firebase/firestore","2.0.2");var vv=lt.initializeApp({apiKey:"AIzaSyAbBLFWMfjWFqAzmRU8J5h7DHH0bDesYzU",authDomain:"chicago-sense.firebaseapp.com",databaseURL:"https://chicago-sense.firebaseio.com",projectId:"chicago-sense",storageBucket:"chicago-sense.appspot.com",messagingSenderId:"448695709527",appId:"1:448695709527:web:0317d5ce41565937311812",measurementId:"G-VRPVS0PHMV"}),mv=lt.firestore();function yv(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function gv(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?yv(Object(n),!0).forEach((function(e){bv(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):yv(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function bv(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function wv(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Ev(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ev(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ev(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}const Iv=function(){var t=wv((0,a.useState)({fName:"",lName:"",username:"",email:"",password:"",confirm:""}),2),e=t[0],n=t[1],r=wv((0,a.useState)({display:!1,message:""}),2),i=r[0],o=r[1],u=function(t){o({display:!i.display,message:t})},l=function(t){return function(r){var i=gv(gv({},e),{},bv({},t,r.target.value));n(i)}},f=[{name:"First name",type:"text",field:e.fName,short:"fName"},{name:"Last name",type:"text",field:e.lName,short:"lName"},{name:"Username",type:"text",field:e.username,short:"username"},{name:"Email",type:"email",field:e.email,short:"email"},{name:"Password",type:"password",field:e.password,short:"password"},{name:"Confirm",type:"password",field:e.confirm,short:"confirm"}];return a.createElement(a.Fragment,null,i.display?a.createElement(c,{errorMessage:i.message,toggleError:u}):null,a.createElement("form",{onSubmit:function(t){t.preventDefault(),e.password===e.confirm?vv.auth().createUserWithEmailAndPassword(e.email,e.password).then((function(t){mv.collection("users").add({email:e.email,firstName:e.fName,lastName:e.lName,username:e.username}).then((function(t){console.log("Document written with ID: ",t.id),window.location="./home.html"})).catch((function(t){console.log(t),console.error("Error adding document: ",t),u("Error adding document")}))})).catch((function(t){t.code;var e=t.message;u(e)})):u("Password does not match")}},a.createElement("fieldset",{className:"account-info"},f.map((function(t){return a.createElement(s,{key:t.name,name:t.name,type:t.type,field:t.field,short:t.short,changeField:l})}))),a.createElement("fieldset",{className:"account-action"},a.createElement("button",{className:"btn",type:"submit",name:"submit",value:"Login"},"Register"))))};o.render(a.createElement(Iv,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,